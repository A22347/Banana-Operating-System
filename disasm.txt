
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 11 9a 00 00       	call   c0009a31 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 45 19 02 00       	call   c002196a <_init>
c0000025:	c3                   	ret    
c0000026:	bb 16 24 02 c0       	mov    ebx,0xc0022416
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 24 24 02 c0    	cmp    ebx,0xc0022424
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 c4 60 02 c0       	mov    eax,0xc00260c4
c0000049:	3d c4 60 02 c0       	cmp    eax,0xc00260c4
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 c4 60 02 c0       	push   0xc00260c4
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 c4 60 02 c0       	mov    eax,0xc00260c4
c0000075:	2d c4 60 02 c0       	sub    eax,0xc00260c4
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 c4 60 02 c0       	push   0xc00260c4
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 4c 62 02 c0 00 	cmp    BYTE PTR ds:0xc002624c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 2c 24 02 c0       	mov    ebx,0xc002242c
c00000bb:	81 eb 28 24 02 c0    	sub    ebx,0xc0022428
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 28 24 02 c0       	mov    esi,0xc0022428
c00000ca:	a1 50 62 02 c0       	mov    eax,ds:0xc0026250
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 50 62 02 c0       	mov    ds:0xc0026250,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 50 62 02 c0       	mov    eax,ds:0xc0026250
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 c4 60 02 c0       	push   0xc00260c4
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 4c 62 02 c0 01 	mov    BYTE PTR ds:0xc002624c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 54 62 02 c0       	push   0xc0026254
c000012c:	68 c4 60 02 c0       	push   0xc00260c4
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	85 d2                	test   edx,edx
c00002c6:	75 11                	jne    c00002d9 <commonThreadSwitch.firstTime>
c00002c8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002cb:	e8 50 5c 01 00       	call   c0015f20 <changeTSS>
c00002d0:	5d                   	pop    ebp
c00002d1:	5f                   	pop    edi
c00002d2:	5e                   	pop    esi
c00002d3:	5a                   	pop    edx
c00002d4:	59                   	pop    ecx
c00002d5:	5b                   	pop    ebx
c00002d6:	58                   	pop    eax
c00002d7:	9d                   	popf   
c00002d8:	c3                   	ret    

c00002d9 <commonThreadSwitch.firstTime>:
c00002d9:	fa                   	cli    
c00002da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002dd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002e2:	60                   	pusha  
c00002e3:	e8 fe c6 00 00       	call   c000c9e6 <mapVASFirstTime>
c00002e8:	61                   	popa   
c00002e9:	89 c4                	mov    esp,eax
c00002eb:	56                   	push   esi
c00002ec:	52                   	push   edx
c00002ed:	e8 2e 5c 01 00       	call   c0015f20 <changeTSS>
c00002f2:	5a                   	pop    edx
c00002f3:	5e                   	pop    esi
c00002f4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002fb:	5d                   	pop    ebp
c00002fc:	5f                   	pop    edi
c00002fd:	5e                   	pop    esi
c00002fe:	59                   	pop    ecx
c00002ff:	59                   	pop    ecx
c0000300:	5b                   	pop    ebx
c0000301:	58                   	pop    eax
c0000302:	81 c4 04 00 00 00    	add    esp,0x4
c0000308:	6a 02                	push   0x2
c000030a:	9d                   	popf   
c000030b:	52                   	push   edx
c000030c:	e8 ef 60 01 00       	call   c0016400 <taskStartupFunction>
c0000311:	5a                   	pop    edx
c0000312:	50                   	push   eax
c0000313:	ff d2                	call   edx
c0000315:	e8 32 67 01 00       	call   c0016a4c <taskReturned>
c000031a:	e9 fb ff ff ff       	jmp    c000031a <commonThreadSwitch.firstTime+0x41>

c000031f <asmQuickAcquireLock>:
c000031f:	55                   	push   ebp
c0000320:	89 e5                	mov    ebp,esp
c0000322:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000325 <asmQuickAcquireLock.retry>:
c0000325:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000032a:	72 02                	jb     c000032e <asmQuickAcquireLock.spin_with_pause>
c000032c:	fa                   	cli    
c000032d:	c3                   	ret    

c000032e <asmQuickAcquireLock.spin_with_pause>:
c000032e:	f3 90                	pause  
c0000330:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000336:	75 f6                	jne    c000032e <asmQuickAcquireLock.spin_with_pause>
c0000338:	e9 e8 ff ff ff       	jmp    c0000325 <asmQuickAcquireLock.retry>

c000033d <asmQuickReleaseLock>:
c000033d:	55                   	push   ebp
c000033e:	89 e5                	mov    ebp,esp
c0000340:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000347:	5d                   	pop    ebp
c0000348:	c3                   	ret    

c0000349 <asmAcquireLock>:
c0000349:	55                   	push   ebp
c000034a:	89 e5                	mov    ebp,esp
c000034c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000034f <asmAcquireLock.retry>:
c000034f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000354:	72 05                	jb     c000035b <asmAcquireLock.spin_with_pause>
c0000356:	9c                   	pushf  
c0000357:	58                   	pop    eax
c0000358:	fa                   	cli    
c0000359:	5d                   	pop    ebp
c000035a:	c3                   	ret    

c000035b <asmAcquireLock.spin_with_pause>:
c000035b:	f3 90                	pause  
c000035d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000363:	75 f6                	jne    c000035b <asmAcquireLock.spin_with_pause>
c0000365:	e9 e5 ff ff ff       	jmp    c000034f <asmAcquireLock.retry>

c000036a <asmReleaseLock>:
c000036a:	55                   	push   ebp
c000036b:	89 e5                	mov    ebp,esp
c000036d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000373:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000379:	52                   	push   edx
c000037a:	9d                   	popf   
c000037b:	5d                   	pop    ebp
c000037c:	c3                   	ret    

c000037d <loadGDT>:
c000037d:	0f 01 15 90 66 02 c0 	lgdtd  ds:0xc0026690
c0000384:	66 b8 10 00          	mov    ax,0x10
c0000388:	66 8e d8             	mov    ds,ax
c000038b:	66 8e c0             	mov    es,ax
c000038e:	66 8e e0             	mov    fs,ax
c0000391:	66 8e e8             	mov    gs,ax
c0000394:	66 8e d0             	mov    ss,ax
c0000397:	e9 00 00 00 00       	jmp    c000039c <flush2>

c000039c <flush2>:
c000039c:	c3                   	ret    

c000039d <isr0>:
c000039d:	fa                   	cli    
c000039e:	68 00 00 00 00       	push   0x0
c00003a3:	68 00 00 00 00       	push   0x0
c00003a8:	e9 44 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003ad <isr1>:
c00003ad:	fa                   	cli    
c00003ae:	6a 00                	push   0x0
c00003b0:	6a 01                	push   0x1
c00003b2:	e9 3a 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003b7 <isr2>:
c00003b7:	fa                   	cli    
c00003b8:	6a 00                	push   0x0
c00003ba:	6a 02                	push   0x2
c00003bc:	e9 30 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003c1 <isr3>:
c00003c1:	fa                   	cli    
c00003c2:	6a 00                	push   0x0
c00003c4:	6a 03                	push   0x3
c00003c6:	e9 26 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003cb <isr4>:
c00003cb:	fa                   	cli    
c00003cc:	6a 00                	push   0x0
c00003ce:	6a 04                	push   0x4
c00003d0:	e9 1c 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003d5 <isr5>:
c00003d5:	fa                   	cli    
c00003d6:	6a 00                	push   0x0
c00003d8:	6a 05                	push   0x5
c00003da:	e9 12 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003df <isr6>:
c00003df:	fa                   	cli    
c00003e0:	6a 00                	push   0x0
c00003e2:	6a 06                	push   0x6
c00003e4:	e9 08 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003e9 <isr7>:
c00003e9:	fa                   	cli    
c00003ea:	6a 00                	push   0x0
c00003ec:	6a 07                	push   0x7
c00003ee:	e9 fe 00 00 00       	jmp    c00004f1 <int_common_stub>

c00003f3 <isr8>:
c00003f3:	fa                   	cli    
c00003f4:	6a 08                	push   0x8
c00003f6:	e9 f6 00 00 00       	jmp    c00004f1 <int_common_stub>

c00003fb <isr9>:
c00003fb:	fa                   	cli    
c00003fc:	6a 00                	push   0x0
c00003fe:	6a 09                	push   0x9
c0000400:	e9 ec 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000405 <isr10>:
c0000405:	fa                   	cli    
c0000406:	6a 0a                	push   0xa
c0000408:	e9 e4 00 00 00       	jmp    c00004f1 <int_common_stub>

c000040d <isr11>:
c000040d:	fa                   	cli    
c000040e:	6a 0b                	push   0xb
c0000410:	e9 dc 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000415 <isr12>:
c0000415:	fa                   	cli    
c0000416:	6a 0c                	push   0xc
c0000418:	e9 d4 00 00 00       	jmp    c00004f1 <int_common_stub>

c000041d <isr13>:
c000041d:	fa                   	cli    
c000041e:	6a 0d                	push   0xd
c0000420:	e9 cc 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000425 <isr14>:
c0000425:	fa                   	cli    
c0000426:	6a 0e                	push   0xe
c0000428:	e9 c4 00 00 00       	jmp    c00004f1 <int_common_stub>

c000042d <isr15>:
c000042d:	fa                   	cli    
c000042e:	6a 00                	push   0x0
c0000430:	6a 0f                	push   0xf
c0000432:	e9 ba 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000437 <isr16>:
c0000437:	fa                   	cli    
c0000438:	6a 00                	push   0x0
c000043a:	6a 10                	push   0x10
c000043c:	e9 b0 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000441 <isr17>:
c0000441:	fa                   	cli    
c0000442:	6a 00                	push   0x0
c0000444:	6a 11                	push   0x11
c0000446:	e9 a6 00 00 00       	jmp    c00004f1 <int_common_stub>

c000044b <isr18>:
c000044b:	fa                   	cli    
c000044c:	6a 00                	push   0x0
c000044e:	6a 12                	push   0x12
c0000450:	e9 9c 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000455 <irq3>:
c0000455:	fa                   	cli    
c0000456:	6a 00                	push   0x0
c0000458:	6a 23                	push   0x23
c000045a:	e9 92 00 00 00       	jmp    c00004f1 <int_common_stub>

c000045f <irq4>:
c000045f:	fa                   	cli    
c0000460:	6a 00                	push   0x0
c0000462:	6a 24                	push   0x24
c0000464:	e9 88 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000469 <irq5>:
c0000469:	fa                   	cli    
c000046a:	6a 00                	push   0x0
c000046c:	6a 25                	push   0x25
c000046e:	e9 7e 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000473 <irq6>:
c0000473:	fa                   	cli    
c0000474:	6a 00                	push   0x0
c0000476:	6a 26                	push   0x26
c0000478:	e9 74 00 00 00       	jmp    c00004f1 <int_common_stub>

c000047d <irq7>:
c000047d:	fa                   	cli    
c000047e:	6a 00                	push   0x0
c0000480:	6a 27                	push   0x27
c0000482:	e9 6a 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000487 <irq8>:
c0000487:	fa                   	cli    
c0000488:	6a 00                	push   0x0
c000048a:	6a 28                	push   0x28
c000048c:	e9 60 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000491 <irq9>:
c0000491:	fa                   	cli    
c0000492:	6a 00                	push   0x0
c0000494:	6a 29                	push   0x29
c0000496:	e9 56 00 00 00       	jmp    c00004f1 <int_common_stub>

c000049b <irq10>:
c000049b:	fa                   	cli    
c000049c:	6a 00                	push   0x0
c000049e:	6a 2a                	push   0x2a
c00004a0:	e9 4c 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004a5 <irq11>:
c00004a5:	fa                   	cli    
c00004a6:	6a 00                	push   0x0
c00004a8:	6a 2b                	push   0x2b
c00004aa:	e9 42 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004af <irq12>:
c00004af:	fa                   	cli    
c00004b0:	6a 00                	push   0x0
c00004b2:	6a 2c                	push   0x2c
c00004b4:	e9 38 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004b9 <irq13>:
c00004b9:	fa                   	cli    
c00004ba:	6a 00                	push   0x0
c00004bc:	6a 2d                	push   0x2d
c00004be:	e9 2e 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004c3 <irq14>:
c00004c3:	fa                   	cli    
c00004c4:	6a 00                	push   0x0
c00004c6:	6a 2e                	push   0x2e
c00004c8:	e9 24 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004cd <irq15>:
c00004cd:	fa                   	cli    
c00004ce:	6a 00                	push   0x0
c00004d0:	6a 2f                	push   0x2f
c00004d2:	e9 1a 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004d7 <irq1>:
c00004d7:	fa                   	cli    
c00004d8:	6a 00                	push   0x0
c00004da:	6a 21                	push   0x21
c00004dc:	eb 13                	jmp    c00004f1 <int_common_stub>

c00004de <irq2>:
c00004de:	fa                   	cli    
c00004df:	6a 00                	push   0x0
c00004e1:	6a 22                	push   0x22
c00004e3:	eb 0c                	jmp    c00004f1 <int_common_stub>

c00004e5 <isr96>:
c00004e5:	6a 00                	push   0x0
c00004e7:	6a 60                	push   0x60
c00004e9:	fb                   	sti    
c00004ea:	eb 05                	jmp    c00004f1 <int_common_stub>

c00004ec <irq0>:
c00004ec:	fa                   	cli    
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 20                	push   0x20

c00004f1 <int_common_stub>:
c00004f1:	60                   	pusha  
c00004f2:	1e                   	push   ds
c00004f3:	06                   	push   es
c00004f4:	0f a0                	push   fs
c00004f6:	0f a8                	push   gs
c00004f8:	66 b8 10 00          	mov    ax,0x10
c00004fc:	66 8e d8             	mov    ds,ax
c00004ff:	66 8e c0             	mov    es,ax
c0000502:	66 8e e0             	mov    fs,ax
c0000505:	66 8e e8             	mov    gs,ax
c0000508:	54                   	push   esp
c0000509:	fc                   	cld    
c000050a:	e8 fd e0 00 00       	call   c000e60c <int_handler>
c000050f:	81 c4 04 00 00 00    	add    esp,0x4
c0000515:	0f a9                	pop    gs
c0000517:	0f a1                	pop    fs
c0000519:	07                   	pop    es
c000051a:	1f                   	pop    ds
c000051b:	61                   	popa   
c000051c:	81 c4 08 00 00 00    	add    esp,0x8
c0000522:	cf                   	iret   

c0000523 <irq16>:
c0000523:	fa                   	cli    
c0000524:	6a 00                	push   0x0
c0000526:	6a 30                	push   0x30
c0000528:	e9 c4 ff ff ff       	jmp    c00004f1 <int_common_stub>

c000052d <irq17>:
c000052d:	fa                   	cli    
c000052e:	6a 00                	push   0x0
c0000530:	6a 31                	push   0x31
c0000532:	e9 ba ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000537 <irq18>:
c0000537:	fa                   	cli    
c0000538:	6a 00                	push   0x0
c000053a:	6a 32                	push   0x32
c000053c:	e9 b0 ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000541 <irq19>:
c0000541:	fa                   	cli    
c0000542:	6a 00                	push   0x0
c0000544:	6a 33                	push   0x33
c0000546:	e9 a6 ff ff ff       	jmp    c00004f1 <int_common_stub>

c000054b <irq20>:
c000054b:	fa                   	cli    
c000054c:	6a 00                	push   0x0
c000054e:	6a 34                	push   0x34
c0000550:	e9 9c ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000555 <irq21>:
c0000555:	fa                   	cli    
c0000556:	6a 00                	push   0x0
c0000558:	6a 35                	push   0x35
c000055a:	e9 92 ff ff ff       	jmp    c00004f1 <int_common_stub>

c000055f <irq22>:
c000055f:	fa                   	cli    
c0000560:	6a 00                	push   0x0
c0000562:	6a 36                	push   0x36
c0000564:	e9 88 ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000569 <irq23>:
c0000569:	fa                   	cli    
c000056a:	6a 00                	push   0x0
c000056c:	6a 37                	push   0x37
c000056e:	e9 7e ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000573 <memcpy>:
c0000573:	e9 7a 83 00 00       	jmp    c00088f2 <__not_memcpy>

c0000578 <memcmp>:
c0000578:	56                   	push   esi
c0000579:	53                   	push   ebx
c000057a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000057e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000582:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000586:	85 f6                	test   esi,esi
c0000588:	74 1d                	je     c00005a7 <memcmp+0x2f>
c000058a:	8a 08                	mov    cl,BYTE PTR [eax]
c000058c:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000058f:	38 cb                	cmp    bl,cl
c0000591:	75 19                	jne    c00005ac <memcmp+0x34>
c0000593:	01 c6                	add    esi,eax
c0000595:	eb 0a                	jmp    c00005a1 <memcmp+0x29>
c0000597:	90                   	nop
c0000598:	8a 08                	mov    cl,BYTE PTR [eax]
c000059a:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000059d:	38 d9                	cmp    cl,bl
c000059f:	75 0b                	jne    c00005ac <memcmp+0x34>
c00005a1:	40                   	inc    eax
c00005a2:	42                   	inc    edx
c00005a3:	39 f0                	cmp    eax,esi
c00005a5:	75 f1                	jne    c0000598 <memcmp+0x20>
c00005a7:	31 c0                	xor    eax,eax
c00005a9:	5b                   	pop    ebx
c00005aa:	5e                   	pop    esi
c00005ab:	c3                   	ret    
c00005ac:	0f b6 c1             	movzx  eax,cl
c00005af:	29 d8                	sub    eax,ebx
c00005b1:	5b                   	pop    ebx
c00005b2:	5e                   	pop    esi
c00005b3:	c3                   	ret    

c00005b4 <memmove>:
c00005b4:	55                   	push   ebp
c00005b5:	57                   	push   edi
c00005b6:	56                   	push   esi
c00005b7:	53                   	push   ebx
c00005b8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005bc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005c4:	39 dd                	cmp    ebp,ebx
c00005c6:	0f 83 80 00 00 00    	jae    c000064c <memmove+0x98>
c00005cc:	85 d2                	test   edx,edx
c00005ce:	74 74                	je     c0000644 <memmove+0x90>
c00005d0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005d3:	8d 75 04             	lea    esi,[ebp+0x4]
c00005d6:	39 cd                	cmp    ebp,ecx
c00005d8:	0f 93 c1             	setae  cl
c00005db:	39 f3                	cmp    ebx,esi
c00005dd:	0f 93 c0             	setae  al
c00005e0:	89 c6                	mov    esi,eax
c00005e2:	09 ce                	or     esi,ecx
c00005e4:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005e7:	89 f0                	mov    eax,esi
c00005e9:	83 f9 0c             	cmp    ecx,0xc
c00005ec:	0f 97 c1             	seta   cl
c00005ef:	84 c8                	test   al,cl
c00005f1:	74 75                	je     c0000668 <memmove+0xb4>
c00005f3:	89 e9                	mov    ecx,ebp
c00005f5:	09 d9                	or     ecx,ebx
c00005f7:	83 e1 03             	and    ecx,0x3
c00005fa:	75 6c                	jne    c0000668 <memmove+0xb4>
c00005fc:	89 d7                	mov    edi,edx
c00005fe:	89 d9                	mov    ecx,ebx
c0000600:	83 e7 fc             	and    edi,0xfffffffc
c0000603:	89 ee                	mov    esi,ebp
c0000605:	01 df                	add    edi,ebx
c0000607:	90                   	nop
c0000608:	8b 01                	mov    eax,DWORD PTR [ecx]
c000060a:	83 c6 04             	add    esi,0x4
c000060d:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000610:	83 c1 04             	add    ecx,0x4
c0000613:	39 f9                	cmp    ecx,edi
c0000615:	75 f1                	jne    c0000608 <memmove+0x54>
c0000617:	89 d1                	mov    ecx,edx
c0000619:	89 d7                	mov    edi,edx
c000061b:	83 e1 fc             	and    ecx,0xfffffffc
c000061e:	29 cf                	sub    edi,ecx
c0000620:	01 cb                	add    ebx,ecx
c0000622:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c0000626:	39 ca                	cmp    edx,ecx
c0000628:	74 1a                	je     c0000644 <memmove+0x90>
c000062a:	8a 03                	mov    al,BYTE PTR [ebx]
c000062c:	83 ff 01             	cmp    edi,0x1
c000062f:	88 06                	mov    BYTE PTR [esi],al
c0000631:	74 11                	je     c0000644 <memmove+0x90>
c0000633:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0000636:	83 ff 02             	cmp    edi,0x2
c0000639:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c000063c:	74 06                	je     c0000644 <memmove+0x90>
c000063e:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000641:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000644:	5b                   	pop    ebx
c0000645:	89 e8                	mov    eax,ebp
c0000647:	5e                   	pop    esi
c0000648:	5f                   	pop    edi
c0000649:	5d                   	pop    ebp
c000064a:	c3                   	ret    
c000064b:	90                   	nop
c000064c:	76 f6                	jbe    c0000644 <memmove+0x90>
c000064e:	85 d2                	test   edx,edx
c0000650:	74 f2                	je     c0000644 <memmove+0x90>
c0000652:	4b                   	dec    ebx
c0000653:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000656:	66 90                	xchg   ax,ax
c0000658:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000065b:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c000065e:	4a                   	dec    edx
c000065f:	75 f7                	jne    c0000658 <memmove+0xa4>
c0000661:	5b                   	pop    ebx
c0000662:	89 e8                	mov    eax,ebp
c0000664:	5e                   	pop    esi
c0000665:	5f                   	pop    edi
c0000666:	5d                   	pop    ebp
c0000667:	c3                   	ret    
c0000668:	01 ea                	add    edx,ebp
c000066a:	89 e9                	mov    ecx,ebp
c000066c:	8a 03                	mov    al,BYTE PTR [ebx]
c000066e:	41                   	inc    ecx
c000066f:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000672:	43                   	inc    ebx
c0000673:	39 d1                	cmp    ecx,edx
c0000675:	75 f5                	jne    c000066c <memmove+0xb8>
c0000677:	eb cb                	jmp    c0000644 <memmove+0x90>
c0000679:	8d 76 00             	lea    esi,[esi+0x0]

c000067c <memset>:
c000067c:	57                   	push   edi
c000067d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000681:	85 c9                	test   ecx,ecx
c0000683:	74 0b                	je     c0000690 <memset+0x14>
c0000685:	fc                   	cld    
c0000686:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000068a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000068e:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000690:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000694:	5f                   	pop    edi
c0000695:	c3                   	ret    
c0000696:	66 90                	xchg   ax,ax

c0000698 <strlen>:
c0000698:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000069c:	31 c0                	xor    eax,eax
c000069e:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006a1:	74 09                	je     c00006ac <strlen+0x14>
c00006a3:	90                   	nop
c00006a4:	40                   	inc    eax
c00006a5:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006a9:	75 f9                	jne    c00006a4 <strlen+0xc>
c00006ab:	c3                   	ret    
c00006ac:	c3                   	ret    
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]

c00006b0 <strpbrk>:
c00006b0:	57                   	push   edi
c00006b1:	56                   	push   esi
c00006b2:	53                   	push   ebx
c00006b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006bb:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006bd:	84 db                	test   bl,bl
c00006bf:	74 21                	je     c00006e2 <strpbrk+0x32>
c00006c1:	8a 07                	mov    al,BYTE PTR [edi]
c00006c3:	84 c0                	test   al,al
c00006c5:	74 14                	je     c00006db <strpbrk+0x2b>
c00006c7:	38 d8                	cmp    al,bl
c00006c9:	74 19                	je     c00006e4 <strpbrk+0x34>
c00006cb:	89 fa                	mov    edx,edi
c00006cd:	eb 05                	jmp    c00006d4 <strpbrk+0x24>
c00006cf:	90                   	nop
c00006d0:	38 d9                	cmp    cl,bl
c00006d2:	74 10                	je     c00006e4 <strpbrk+0x34>
c00006d4:	42                   	inc    edx
c00006d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006d7:	84 c9                	test   cl,cl
c00006d9:	75 f5                	jne    c00006d0 <strpbrk+0x20>
c00006db:	46                   	inc    esi
c00006dc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006de:	84 db                	test   bl,bl
c00006e0:	75 e1                	jne    c00006c3 <strpbrk+0x13>
c00006e2:	31 f6                	xor    esi,esi
c00006e4:	89 f0                	mov    eax,esi
c00006e6:	5b                   	pop    ebx
c00006e7:	5e                   	pop    esi
c00006e8:	5f                   	pop    edi
c00006e9:	c3                   	ret    
c00006ea:	66 90                	xchg   ax,ax

c00006ec <strtok>:
c00006ec:	56                   	push   esi
c00006ed:	53                   	push   ebx
c00006ee:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006f2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006f6:	85 db                	test   ebx,ebx
c00006f8:	75 07                	jne    c0000701 <strtok+0x15>
c00006fa:	eb 2c                	jmp    c0000728 <strtok+0x3c>
c00006fc:	43                   	inc    ebx
c00006fd:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000701:	56                   	push   esi
c0000702:	53                   	push   ebx
c0000703:	e8 a8 ff ff ff       	call   c00006b0 <strpbrk>
c0000708:	5a                   	pop    edx
c0000709:	a3 6c 62 02 c0       	mov    ds:0xc002626c,eax
c000070e:	59                   	pop    ecx
c000070f:	39 d8                	cmp    eax,ebx
c0000711:	74 e9                	je     c00006fc <strtok+0x10>
c0000713:	85 c0                	test   eax,eax
c0000715:	74 1b                	je     c0000732 <strtok+0x46>
c0000717:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000071a:	8d 50 01             	lea    edx,[eax+0x1]
c000071d:	89 d8                	mov    eax,ebx
c000071f:	89 15 6c 62 02 c0    	mov    DWORD PTR ds:0xc002626c,edx
c0000725:	5b                   	pop    ebx
c0000726:	5e                   	pop    esi
c0000727:	c3                   	ret    
c0000728:	8b 1d 6c 62 02 c0    	mov    ebx,DWORD PTR ds:0xc002626c
c000072e:	85 db                	test   ebx,ebx
c0000730:	75 cf                	jne    c0000701 <strtok+0x15>
c0000732:	31 c0                	xor    eax,eax
c0000734:	5b                   	pop    ebx
c0000735:	5e                   	pop    esi
c0000736:	c3                   	ret    
c0000737:	90                   	nop

c0000738 <strcpy>:
c0000738:	53                   	push   ebx
c0000739:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000073d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000741:	89 c3                	mov    ebx,eax
c0000743:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000745:	84 d2                	test   dl,dl
c0000747:	74 0d                	je     c0000756 <strcpy+0x1e>
c0000749:	8d 76 00             	lea    esi,[esi+0x0]
c000074c:	88 13                	mov    BYTE PTR [ebx],dl
c000074e:	41                   	inc    ecx
c000074f:	43                   	inc    ebx
c0000750:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000752:	84 d2                	test   dl,dl
c0000754:	75 f6                	jne    c000074c <strcpy+0x14>
c0000756:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000759:	5b                   	pop    ebx
c000075a:	c3                   	ret    
c000075b:	90                   	nop

c000075c <strncpy>:
c000075c:	55                   	push   ebp
c000075d:	57                   	push   edi
c000075e:	56                   	push   esi
c000075f:	53                   	push   ebx
c0000760:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000764:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000768:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000076c:	85 c0                	test   eax,eax
c000076e:	74 39                	je     c00007a9 <strncpy+0x4d>
c0000770:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000772:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000775:	8d 55 01             	lea    edx,[ebp+0x1]
c0000778:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000077b:	84 db                	test   bl,bl
c000077d:	74 31                	je     c00007b0 <strncpy+0x54>
c000077f:	85 c9                	test   ecx,ecx
c0000781:	74 26                	je     c00007a9 <strncpy+0x4d>
c0000783:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000786:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000789:	8d 55 02             	lea    edx,[ebp+0x2]
c000078c:	8d 46 02             	lea    eax,[esi+0x2]
c000078f:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000792:	84 db                	test   bl,bl
c0000794:	75 0f                	jne    c00007a5 <strncpy+0x49>
c0000796:	eb 18                	jmp    c00007b0 <strncpy+0x54>
c0000798:	40                   	inc    eax
c0000799:	42                   	inc    edx
c000079a:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c000079d:	49                   	dec    ecx
c000079e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007a1:	84 db                	test   bl,bl
c00007a3:	74 0b                	je     c00007b0 <strncpy+0x54>
c00007a5:	85 c9                	test   ecx,ecx
c00007a7:	75 ef                	jne    c0000798 <strncpy+0x3c>
c00007a9:	5b                   	pop    ebx
c00007aa:	89 e8                	mov    eax,ebp
c00007ac:	5e                   	pop    esi
c00007ad:	5f                   	pop    edi
c00007ae:	5d                   	pop    ebp
c00007af:	c3                   	ret    
c00007b0:	85 c9                	test   ecx,ecx
c00007b2:	74 f5                	je     c00007a9 <strncpy+0x4d>
c00007b4:	fc                   	cld    
c00007b5:	31 c0                	xor    eax,eax
c00007b7:	89 d7                	mov    edi,edx
c00007b9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007bb:	89 e8                	mov    eax,ebp
c00007bd:	5b                   	pop    ebx
c00007be:	5e                   	pop    esi
c00007bf:	5f                   	pop    edi
c00007c0:	5d                   	pop    ebp
c00007c1:	c3                   	ret    
c00007c2:	66 90                	xchg   ax,ax

c00007c4 <strcmp>:
c00007c4:	56                   	push   esi
c00007c5:	53                   	push   ebx
c00007c6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007ca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007ce:	8a 16                	mov    dl,BYTE PTR [esi]
c00007d0:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007d3:	38 d1                	cmp    cl,dl
c00007d5:	75 1d                	jne    c00007f4 <strcmp+0x30>
c00007d7:	84 c9                	test   cl,cl
c00007d9:	74 21                	je     c00007fc <strcmp+0x38>
c00007db:	b8 01 00 00 00       	mov    eax,0x1
c00007e0:	eb 07                	jmp    c00007e9 <strcmp+0x25>
c00007e2:	66 90                	xchg   ax,ax
c00007e4:	40                   	inc    eax
c00007e5:	84 d2                	test   dl,dl
c00007e7:	74 13                	je     c00007fc <strcmp+0x38>
c00007e9:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00007ec:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00007f0:	38 ca                	cmp    dl,cl
c00007f2:	74 f0                	je     c00007e4 <strcmp+0x20>
c00007f4:	0f b6 c2             	movzx  eax,dl
c00007f7:	5b                   	pop    ebx
c00007f8:	29 c8                	sub    eax,ecx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	31 c0                	xor    eax,eax
c00007fe:	5b                   	pop    ebx
c00007ff:	5e                   	pop    esi
c0000800:	c3                   	ret    
c0000801:	8d 76 00             	lea    esi,[esi+0x0]

c0000804 <strchr>:
c0000804:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000808:	8a 10                	mov    dl,BYTE PTR [eax]
c000080a:	84 d2                	test   dl,dl
c000080c:	74 15                	je     c0000823 <strchr+0x1f>
c000080e:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0000812:	38 ca                	cmp    dl,cl
c0000814:	75 06                	jne    c000081c <strchr+0x18>
c0000816:	eb 0e                	jmp    c0000826 <strchr+0x22>
c0000818:	38 ca                	cmp    dl,cl
c000081a:	74 09                	je     c0000825 <strchr+0x21>
c000081c:	40                   	inc    eax
c000081d:	8a 10                	mov    dl,BYTE PTR [eax]
c000081f:	84 d2                	test   dl,dl
c0000821:	75 f5                	jne    c0000818 <strchr+0x14>
c0000823:	31 c0                	xor    eax,eax
c0000825:	c3                   	ret    
c0000826:	c3                   	ret    
c0000827:	90                   	nop

c0000828 <strncmp>:
c0000828:	57                   	push   edi
c0000829:	56                   	push   esi
c000082a:	53                   	push   ebx
c000082b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000082f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000833:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000837:	85 ff                	test   edi,edi
c0000839:	74 28                	je     c0000863 <strncmp+0x3b>
c000083b:	8a 16                	mov    dl,BYTE PTR [esi]
c000083d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000840:	38 d1                	cmp    cl,dl
c0000842:	75 28                	jne    c000086c <strncmp+0x44>
c0000844:	8d 46 01             	lea    eax,[esi+0x1]
c0000847:	84 c9                	test   cl,cl
c0000849:	74 18                	je     c0000863 <strncmp+0x3b>
c000084b:	01 fe                	add    esi,edi
c000084d:	eb 0f                	jmp    c000085e <strncmp+0x36>
c000084f:	90                   	nop
c0000850:	8a 10                	mov    dl,BYTE PTR [eax]
c0000852:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000855:	38 ca                	cmp    dl,cl
c0000857:	75 13                	jne    c000086c <strncmp+0x44>
c0000859:	40                   	inc    eax
c000085a:	84 d2                	test   dl,dl
c000085c:	74 05                	je     c0000863 <strncmp+0x3b>
c000085e:	43                   	inc    ebx
c000085f:	39 c6                	cmp    esi,eax
c0000861:	75 ed                	jne    c0000850 <strncmp+0x28>
c0000863:	5b                   	pop    ebx
c0000864:	31 c0                	xor    eax,eax
c0000866:	5e                   	pop    esi
c0000867:	5f                   	pop    edi
c0000868:	c3                   	ret    
c0000869:	8d 76 00             	lea    esi,[esi+0x0]
c000086c:	5b                   	pop    ebx
c000086d:	0f b6 c2             	movzx  eax,dl
c0000870:	5e                   	pop    esi
c0000871:	29 c8                	sub    eax,ecx
c0000873:	5f                   	pop    edi
c0000874:	c3                   	ret    
c0000875:	8d 76 00             	lea    esi,[esi+0x0]

c0000878 <strcat>:
c0000878:	56                   	push   esi
c0000879:	53                   	push   ebx
c000087a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000882:	89 c3                	mov    ebx,eax
c0000884:	eb 04                	jmp    c000088a <strcat+0x12>
c0000886:	66 90                	xchg   ax,ax
c0000888:	89 d3                	mov    ebx,edx
c000088a:	8d 53 01             	lea    edx,[ebx+0x1]
c000088d:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000891:	75 f5                	jne    c0000888 <strcat+0x10>
c0000893:	31 d2                	xor    edx,edx
c0000895:	8d 76 00             	lea    esi,[esi+0x0]
c0000898:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000089b:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000089e:	42                   	inc    edx
c000089f:	84 c9                	test   cl,cl
c00008a1:	75 f5                	jne    c0000898 <strcat+0x20>
c00008a3:	5b                   	pop    ebx
c00008a4:	5e                   	pop    esi
c00008a5:	c3                   	ret    
c00008a6:	66 90                	xchg   ax,ax

c00008a8 <strncat>:
c00008a8:	56                   	push   esi
c00008a9:	53                   	push   ebx
c00008aa:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008b2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008b6:	85 f6                	test   esi,esi
c00008b8:	74 1e                	je     c00008d8 <strncat+0x30>
c00008ba:	89 c2                	mov    edx,eax
c00008bc:	42                   	inc    edx
c00008bd:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c1:	75 f9                	jne    c00008bc <strncat+0x14>
c00008c3:	01 ce                	add    esi,ecx
c00008c5:	eb 06                	jmp    c00008cd <strncat+0x25>
c00008c7:	90                   	nop
c00008c8:	39 f1                	cmp    ecx,esi
c00008ca:	74 10                	je     c00008dc <strncat+0x34>
c00008cc:	42                   	inc    edx
c00008cd:	41                   	inc    ecx
c00008ce:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008d1:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008d4:	84 db                	test   bl,bl
c00008d6:	75 f0                	jne    c00008c8 <strncat+0x20>
c00008d8:	5b                   	pop    ebx
c00008d9:	5e                   	pop    esi
c00008da:	c3                   	ret    
c00008db:	90                   	nop
c00008dc:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008df:	5b                   	pop    ebx
c00008e0:	5e                   	pop    esi
c00008e1:	c3                   	ret    
c00008e2:	66 90                	xchg   ax,ax

c00008e4 <strstr>:
c00008e4:	57                   	push   edi
c00008e5:	56                   	push   esi
c00008e6:	53                   	push   ebx
c00008e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008eb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008ef:	57                   	push   edi
c00008f0:	e8 a3 fd ff ff       	call   c0000698 <strlen>
c00008f5:	59                   	pop    ecx
c00008f6:	85 c0                	test   eax,eax
c00008f8:	74 2a                	je     c0000924 <strstr+0x40>
c00008fa:	89 c6                	mov    esi,eax
c00008fc:	eb 12                	jmp    c0000910 <strstr+0x2c>
c00008fe:	66 90                	xchg   ax,ax
c0000900:	56                   	push   esi
c0000901:	57                   	push   edi
c0000902:	53                   	push   ebx
c0000903:	e8 70 fc ff ff       	call   c0000578 <memcmp>
c0000908:	83 c4 0c             	add    esp,0xc
c000090b:	85 c0                	test   eax,eax
c000090d:	74 15                	je     c0000924 <strstr+0x40>
c000090f:	43                   	inc    ebx
c0000910:	53                   	push   ebx
c0000911:	e8 82 fd ff ff       	call   c0000698 <strlen>
c0000916:	5a                   	pop    edx
c0000917:	39 f0                	cmp    eax,esi
c0000919:	73 e5                	jae    c0000900 <strstr+0x1c>
c000091b:	5b                   	pop    ebx
c000091c:	31 c0                	xor    eax,eax
c000091e:	5e                   	pop    esi
c000091f:	5f                   	pop    edi
c0000920:	c3                   	ret    
c0000921:	8d 76 00             	lea    esi,[esi+0x0]
c0000924:	89 d8                	mov    eax,ebx
c0000926:	5b                   	pop    ebx
c0000927:	5e                   	pop    esi
c0000928:	5f                   	pop    edi
c0000929:	c3                   	ret    
c000092a:	66 90                	xchg   ax,ax

c000092c <toupper>:
c000092c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000930:	0f b6 d0             	movzx  edx,al
c0000933:	f6 82 40 24 02 c0 02 	test   BYTE PTR [edx-0x3ffddbc0],0x2
c000093a:	74 03                	je     c000093f <toupper+0x13>
c000093c:	83 e8 20             	sub    eax,0x20
c000093f:	c3                   	ret    

c0000940 <tolower>:
c0000940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000944:	0f b6 d0             	movzx  edx,al
c0000947:	f6 82 40 24 02 c0 01 	test   BYTE PTR [edx-0x3ffddbc0],0x1
c000094e:	74 03                	je     c0000953 <tolower+0x13>
c0000950:	83 c0 20             	add    eax,0x20
c0000953:	c3                   	ret    

c0000954 <simple_strtoul>:
c0000954:	55                   	push   ebp
c0000955:	57                   	push   edi
c0000956:	56                   	push   esi
c0000957:	53                   	push   ebx
c0000958:	83 ec 08             	sub    esp,0x8
c000095b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000095f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000963:	90                   	nop
c0000964:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000967:	f6 82 40 24 02 c0 08 	test   BYTE PTR [edx-0x3ffddbc0],0x8
c000096e:	75 05                	jne    c0000975 <simple_strtoul+0x21>
c0000970:	80 fa 09             	cmp    dl,0x9
c0000973:	75 03                	jne    c0000978 <simple_strtoul+0x24>
c0000975:	41                   	inc    ecx
c0000976:	eb ec                	jmp    c0000964 <simple_strtoul+0x10>
c0000978:	80 fa 2d             	cmp    dl,0x2d
c000097b:	0f 84 1b 01 00 00    	je     c0000a9c <simple_strtoul+0x148>
c0000981:	80 fa 2b             	cmp    dl,0x2b
c0000984:	0f 84 c2 00 00 00    	je     c0000a4c <simple_strtoul+0xf8>
c000098a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000992:	85 f6                	test   esi,esi
c0000994:	0f 85 c3 00 00 00    	jne    c0000a5d <simple_strtoul+0x109>
c000099a:	8a 11                	mov    dl,BYTE PTR [ecx]
c000099c:	80 fa 30             	cmp    dl,0x30
c000099f:	0f 84 47 01 00 00    	je     c0000aec <simple_strtoul+0x198>
c00009a5:	be 0a 00 00 00       	mov    esi,0xa
c00009aa:	84 d2                	test   dl,dl
c00009ac:	0f 84 6f 01 00 00    	je     c0000b21 <simple_strtoul+0x1cd>
c00009b2:	31 ed                	xor    ebp,ebp
c00009b4:	31 ff                	xor    edi,edi
c00009b6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009bd:	eb 2b                	jmp    c00009ea <simple_strtoul+0x96>
c00009bf:	90                   	nop
c00009c0:	83 eb 30             	sub    ebx,0x30
c00009c3:	39 f3                	cmp    ebx,esi
c00009c5:	73 4d                	jae    c0000a14 <simple_strtoul+0xc0>
c00009c7:	31 d2                	xor    edx,edx
c00009c9:	89 d8                	mov    eax,ebx
c00009cb:	f7 d0                	not    eax
c00009cd:	f7 f6                	div    esi
c00009cf:	39 f8                	cmp    eax,edi
c00009d1:	0f 82 b1 00 00 00    	jb     c0000a88 <simple_strtoul+0x134>
c00009d7:	0f af fe             	imul   edi,esi
c00009da:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e1:	01 df                	add    edi,ebx
c00009e3:	41                   	inc    ecx
c00009e4:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009e6:	84 d2                	test   dl,dl
c00009e8:	74 2a                	je     c0000a14 <simple_strtoul+0xc0>
c00009ea:	0f b6 da             	movzx  ebx,dl
c00009ed:	f6 83 40 24 02 c0 04 	test   BYTE PTR [ebx-0x3ffddbc0],0x4
c00009f4:	75 ca                	jne    c00009c0 <simple_strtoul+0x6c>
c00009f6:	0f be d2             	movsx  edx,dl
c00009f9:	52                   	push   edx
c00009fa:	e8 2d ff ff ff       	call   c000092c <toupper>
c00009ff:	5b                   	pop    ebx
c0000a00:	0f b6 d0             	movzx  edx,al
c0000a03:	f6 82 40 24 02 c0 01 	test   BYTE PTR [edx-0x3ffddbc0],0x1
c0000a0a:	74 08                	je     c0000a14 <simple_strtoul+0xc0>
c0000a0c:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a0f:	39 f3                	cmp    ebx,esi
c0000a11:	72 b4                	jb     c00009c7 <simple_strtoul+0x73>
c0000a13:	90                   	nop
c0000a14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a18:	85 c0                	test   eax,eax
c0000a1a:	74 14                	je     c0000a30 <simple_strtoul+0xdc>
c0000a1c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a1f:	09 f8                	or     eax,edi
c0000a21:	75 71                	jne    c0000a94 <simple_strtoul+0x140>
c0000a23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a27:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a2b:	31 ff                	xor    edi,edi
c0000a2d:	89 30                	mov    DWORD PTR [eax],esi
c0000a2f:	90                   	nop
c0000a30:	4d                   	dec    ebp
c0000a31:	75 05                	jne    c0000a38 <simple_strtoul+0xe4>
c0000a33:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a38:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a3d:	75 02                	jne    c0000a41 <simple_strtoul+0xed>
c0000a3f:	f7 df                	neg    edi
c0000a41:	83 c4 08             	add    esp,0x8
c0000a44:	89 f8                	mov    eax,edi
c0000a46:	5b                   	pop    ebx
c0000a47:	5e                   	pop    esi
c0000a48:	5f                   	pop    edi
c0000a49:	5d                   	pop    ebp
c0000a4a:	c3                   	ret    
c0000a4b:	90                   	nop
c0000a4c:	41                   	inc    ecx
c0000a4d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a55:	85 f6                	test   esi,esi
c0000a57:	0f 84 3d ff ff ff    	je     c000099a <simple_strtoul+0x46>
c0000a5d:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a60:	83 f8 22             	cmp    eax,0x22
c0000a63:	77 6a                	ja     c0000acf <simple_strtoul+0x17b>
c0000a65:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a67:	83 fe 08             	cmp    esi,0x8
c0000a6a:	0f 84 a2 00 00 00    	je     c0000b12 <simple_strtoul+0x1be>
c0000a70:	83 fe 10             	cmp    esi,0x10
c0000a73:	0f 85 31 ff ff ff    	jne    c00009aa <simple_strtoul+0x56>
c0000a79:	80 fa 30             	cmp    dl,0x30
c0000a7c:	74 2c                	je     c0000aaa <simple_strtoul+0x156>
c0000a7e:	be 10 00 00 00       	mov    esi,0x10
c0000a83:	e9 22 ff ff ff       	jmp    c00009aa <simple_strtoul+0x56>
c0000a88:	bd 01 00 00 00       	mov    ebp,0x1
c0000a8d:	31 ff                	xor    edi,edi
c0000a8f:	e9 4f ff ff ff       	jmp    c00009e3 <simple_strtoul+0x8f>
c0000a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a98:	89 08                	mov    DWORD PTR [eax],ecx
c0000a9a:	eb 94                	jmp    c0000a30 <simple_strtoul+0xdc>
c0000a9c:	41                   	inc    ecx
c0000a9d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000aa5:	e9 e8 fe ff ff       	jmp    c0000992 <simple_strtoul+0x3e>
c0000aaa:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000aae:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab1:	50                   	push   eax
c0000ab2:	e8 89 fe ff ff       	call   c0000940 <tolower>
c0000ab7:	5e                   	pop    esi
c0000ab8:	83 f8 78             	cmp    eax,0x78
c0000abb:	0f 84 84 00 00 00    	je     c0000b45 <simple_strtoul+0x1f1>
c0000ac1:	41                   	inc    ecx
c0000ac2:	be 10 00 00 00       	mov    esi,0x10
c0000ac7:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000aca:	e9 db fe ff ff       	jmp    c00009aa <simple_strtoul+0x56>
c0000acf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ad3:	85 ff                	test   edi,edi
c0000ad5:	74 5c                	je     c0000b33 <simple_strtoul+0x1df>
c0000ad7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000adb:	85 c9                	test   ecx,ecx
c0000add:	75 4e                	jne    c0000b2d <simple_strtoul+0x1d9>
c0000adf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000ae5:	31 ff                	xor    edi,edi
c0000ae7:	e9 4c ff ff ff       	jmp    c0000a38 <simple_strtoul+0xe4>
c0000aec:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000af0:	88 04 24             	mov    BYTE PTR [esp],al
c0000af3:	50                   	push   eax
c0000af4:	e8 47 fe ff ff       	call   c0000940 <tolower>
c0000af9:	5d                   	pop    ebp
c0000afa:	83 f8 78             	cmp    eax,0x78
c0000afd:	74 3b                	je     c0000b3a <simple_strtoul+0x1e6>
c0000aff:	41                   	inc    ecx
c0000b00:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b03:	80 fa 30             	cmp    dl,0x30
c0000b06:	74 13                	je     c0000b1b <simple_strtoul+0x1c7>
c0000b08:	be 08 00 00 00       	mov    esi,0x8
c0000b0d:	e9 98 fe ff ff       	jmp    c00009aa <simple_strtoul+0x56>
c0000b12:	80 fa 30             	cmp    dl,0x30
c0000b15:	0f 85 8f fe ff ff    	jne    c00009aa <simple_strtoul+0x56>
c0000b1b:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b1e:	41                   	inc    ecx
c0000b1f:	eb e7                	jmp    c0000b08 <simple_strtoul+0x1b4>
c0000b21:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b25:	85 d2                	test   edx,edx
c0000b27:	74 0a                	je     c0000b33 <simple_strtoul+0x1df>
c0000b29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b2d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b31:	89 30                	mov    DWORD PTR [eax],esi
c0000b33:	31 ff                	xor    edi,edi
c0000b35:	e9 fe fe ff ff       	jmp    c0000a38 <simple_strtoul+0xe4>
c0000b3a:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b3d:	83 c1 02             	add    ecx,0x2
c0000b40:	e9 34 ff ff ff       	jmp    c0000a79 <simple_strtoul+0x125>
c0000b45:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b48:	be 10 00 00 00       	mov    esi,0x10
c0000b4d:	83 c1 02             	add    ecx,0x2
c0000b50:	e9 55 fe ff ff       	jmp    c00009aa <simple_strtoul+0x56>

c0000b55 <largebin_index>:
c0000b55:	89 c2                	mov    edx,eax
c0000b57:	c1 ea 08             	shr    edx,0x8
c0000b5a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b60:	77 10                	ja     c0000b72 <largebin_index+0x1d>
c0000b62:	0f bd d2             	bsr    edx,edx
c0000b65:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b68:	d3 e8                	shr    eax,cl
c0000b6a:	83 e0 03             	and    eax,0x3
c0000b6d:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b71:	c3                   	ret    
c0000b72:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b77:	c3                   	ret    

c0000b78 <malloc_init_state>:
c0000b78:	53                   	push   ebx
c0000b79:	8d 50 34             	lea    edx,[eax+0x34]
c0000b7c:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b82:	89 d1                	mov    ecx,edx
c0000b84:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b87:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b8a:	83 c2 08             	add    edx,0x8
c0000b8d:	39 da                	cmp    edx,ebx
c0000b8f:	75 f3                	jne    c0000b84 <malloc_init_state+0xc>
c0000b91:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b93:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b9d:	83 e2 03             	and    edx,0x3
c0000ba0:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000baa:	83 ca 48             	or     edx,0x48
c0000bad:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bb7:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bc1:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bc8:	89 10                	mov    DWORD PTR [eax],edx
c0000bca:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bcd:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bd7:	5b                   	pop    ebx
c0000bd8:	c3                   	ret    

c0000bd9 <malloc_consolidate>:
c0000bd9:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bdb:	85 d2                	test   edx,edx
c0000bdd:	0f 84 d8 00 00 00    	je     c0000cbb <malloc_consolidate+0xe2>
c0000be3:	55                   	push   ebp
c0000be4:	83 e2 fd             	and    edx,0xfffffffd
c0000be7:	57                   	push   edi
c0000be8:	89 c5                	mov    ebp,eax
c0000bea:	56                   	push   esi
c0000beb:	8d 78 34             	lea    edi,[eax+0x34]
c0000bee:	53                   	push   ebx
c0000bef:	83 ec 10             	sub    esp,0x10
c0000bf2:	89 10                	mov    DWORD PTR [eax],edx
c0000bf4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bf8:	c1 ea 03             	shr    edx,0x3
c0000bfb:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bff:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c03:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c06:	85 d2                	test   edx,edx
c0000c08:	0f 84 98 00 00 00    	je     c0000ca6 <malloc_consolidate+0xcd>
c0000c0e:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c15:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c18:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c1b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c1f:	89 f9                	mov    ecx,edi
c0000c21:	83 e1 fe             	and    ecx,0xfffffffe
c0000c24:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c27:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c2a:	83 e3 fc             	and    ebx,0xfffffffc
c0000c2d:	83 e7 01             	and    edi,0x1
c0000c30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c33:	75 14                	jne    c0000c49 <malloc_consolidate+0x70>
c0000c35:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c37:	29 fa                	sub    edx,edi
c0000c39:	01 f9                	add    ecx,edi
c0000c3b:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c3e:	89 fb                	mov    ebx,edi
c0000c40:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c43:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c46:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c49:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c4c:	74 40                	je     c0000c8e <malloc_consolidate+0xb5>
c0000c4e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c51:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c54:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c58:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c5b:	83 e7 01             	and    edi,0x1
c0000c5e:	75 0e                	jne    c0000c6e <malloc_consolidate+0x95>
c0000c60:	01 d9                	add    ecx,ebx
c0000c62:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c65:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c68:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c6b:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c6e:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c71:	89 ce                	mov    esi,ecx
c0000c73:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c76:	83 ce 01             	or     esi,0x1
c0000c79:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c7c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c7f:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c82:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c86:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c89:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c8c:	eb 0c                	jmp    c0000c9a <malloc_consolidate+0xc1>
c0000c8e:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c91:	83 c9 01             	or     ecx,0x1
c0000c94:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c97:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c9e:	85 d2                	test   edx,edx
c0000ca0:	0f 85 6f ff ff ff    	jne    c0000c15 <malloc_consolidate+0x3c>
c0000ca6:	83 c5 04             	add    ebp,0x4
c0000ca9:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cad:	0f 85 50 ff ff ff    	jne    c0000c03 <malloc_consolidate+0x2a>
c0000cb3:	83 c4 10             	add    esp,0x10
c0000cb6:	5b                   	pop    ebx
c0000cb7:	5e                   	pop    esi
c0000cb8:	5f                   	pop    edi
c0000cb9:	5d                   	pop    ebp
c0000cba:	c3                   	ret    
c0000cbb:	e9 b8 fe ff ff       	jmp    c0000b78 <malloc_init_state>

c0000cc0 <dlfree>:
c0000cc0:	57                   	push   edi
c0000cc1:	56                   	push   esi
c0000cc2:	53                   	push   ebx
c0000cc3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000cc7:	85 db                	test   ebx,ebx
c0000cc9:	0f 84 e2 00 00 00    	je     c0000db1 <dlfree+0xf1>
c0000ccf:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cd2:	8b 0d 80 62 02 c0    	mov    ecx,DWORD PTR ds:0xc0026280
c0000cd8:	89 f0                	mov    eax,esi
c0000cda:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cdd:	83 e0 fc             	and    eax,0xfffffffc
c0000ce0:	39 c1                	cmp    ecx,eax
c0000ce2:	72 24                	jb     c0000d08 <dlfree+0x48>
c0000ce4:	83 c9 03             	or     ecx,0x3
c0000ce7:	c1 e8 03             	shr    eax,0x3
c0000cea:	89 0d 80 62 02 c0    	mov    DWORD PTR ds:0xc0026280,ecx
c0000cf0:	83 e8 02             	sub    eax,0x2
c0000cf3:	8b 0c 85 84 62 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9d7c]
c0000cfa:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cfc:	89 14 85 84 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9d7c],edx
c0000d03:	e9 a9 00 00 00       	jmp    c0000db1 <dlfree+0xf1>
c0000d08:	83 e6 02             	and    esi,0x2
c0000d0b:	0f 85 a0 00 00 00    	jne    c0000db1 <dlfree+0xf1>
c0000d11:	83 c9 01             	or     ecx,0x1
c0000d14:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d17:	89 0d 80 62 02 c0    	mov    DWORD PTR ds:0xc0026280,ecx
c0000d1d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d20:	83 e1 fc             	and    ecx,0xfffffffc
c0000d23:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d27:	75 13                	jne    c0000d3c <dlfree+0x7c>
c0000d29:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d2c:	29 da                	sub    edx,ebx
c0000d2e:	01 d8                	add    eax,ebx
c0000d30:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d33:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d36:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d39:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d3c:	39 35 ac 62 02 c0    	cmp    DWORD PTR ds:0xc00262ac,esi
c0000d42:	74 40                	je     c0000d84 <dlfree+0xc4>
c0000d44:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d48:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d4b:	80 e3 01             	and    bl,0x1
c0000d4e:	75 0e                	jne    c0000d5e <dlfree+0x9e>
c0000d50:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d53:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d56:	01 c8                	add    eax,ecx
c0000d58:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d5b:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d5e:	8b 0d bc 62 02 c0    	mov    ecx,DWORD PTR ds:0xc00262bc
c0000d64:	c7 42 0c b4 62 02 c0 	mov    DWORD PTR [edx+0xc],0xc00262b4
c0000d6b:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d6e:	89 15 bc 62 02 c0    	mov    DWORD PTR ds:0xc00262bc,edx
c0000d74:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d77:	89 c1                	mov    ecx,eax
c0000d79:	83 c9 01             	or     ecx,0x1
c0000d7c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d7f:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d82:	eb 10                	jmp    c0000d94 <dlfree+0xd4>
c0000d84:	01 c8                	add    eax,ecx
c0000d86:	89 c1                	mov    ecx,eax
c0000d88:	83 c9 01             	or     ecx,0x1
c0000d8b:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d8e:	89 15 ac 62 02 c0    	mov    DWORD PTR ds:0xc00262ac,edx
c0000d94:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d99:	76 16                	jbe    c0000db1 <dlfree+0xf1>
c0000d9b:	f6 05 80 62 02 c0 02 	test   BYTE PTR ds:0xc0026280,0x2
c0000da2:	74 0d                	je     c0000db1 <dlfree+0xf1>
c0000da4:	5b                   	pop    ebx
c0000da5:	b8 80 62 02 c0       	mov    eax,0xc0026280
c0000daa:	5e                   	pop    esi
c0000dab:	5f                   	pop    edi
c0000dac:	e9 28 fe ff ff       	jmp    c0000bd9 <malloc_consolidate>
c0000db1:	5b                   	pop    ebx
c0000db2:	5e                   	pop    esi
c0000db3:	5f                   	pop    edi
c0000db4:	c3                   	ret    

c0000db5 <sYSMALLOc>:
c0000db5:	55                   	push   ebp
c0000db6:	57                   	push   edi
c0000db7:	56                   	push   esi
c0000db8:	53                   	push   ebx
c0000db9:	89 d3                	mov    ebx,edx
c0000dbb:	83 ec 2c             	sub    esp,0x2c
c0000dbe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dc2:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dc8:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dcb:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dd2:	74 1f                	je     c0000df3 <sYSMALLOc+0x3e>
c0000dd4:	89 d8                	mov    eax,ebx
c0000dd6:	e8 fe fd ff ff       	call   c0000bd9 <malloc_consolidate>
c0000ddb:	83 ec 0c             	sub    esp,0xc
c0000dde:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000de2:	83 e8 07             	sub    eax,0x7
c0000de5:	50                   	push   eax
c0000de6:	e8 30 02 00 00       	call   c000101b <dlmalloc>
c0000deb:	83 c4 10             	add    esp,0x10
c0000dee:	e9 20 02 00 00       	jmp    c0001013 <sYSMALLOc+0x25e>
c0000df3:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000df6:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dfc:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dff:	83 e0 fc             	and    eax,0xfffffffc
c0000e02:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e0a:	83 c0 10             	add    eax,0x10
c0000e0d:	01 c1                	add    ecx,eax
c0000e0f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e13:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e1a:	74 04                	je     c0000e20 <sYSMALLOc+0x6b>
c0000e1c:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e20:	f7 da                	neg    edx
c0000e22:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e26:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e2a:	21 d1                	and    ecx,edx
c0000e2c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e30:	7f 07                	jg     c0000e39 <sYSMALLOc+0x84>
c0000e32:	31 c0                	xor    eax,eax
c0000e34:	e9 da 01 00 00       	jmp    c0001013 <sYSMALLOc+0x25e>
c0000e39:	83 ec 0c             	sub    esp,0xc
c0000e3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e40:	e8 ef 89 00 00       	call   c0009834 <sbrk>
c0000e45:	83 c4 10             	add    esp,0x10
c0000e48:	89 c6                	mov    esi,eax
c0000e4a:	83 f8 ff             	cmp    eax,0xffffffff
c0000e4d:	74 e3                	je     c0000e32 <sYSMALLOc+0x7d>
c0000e4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e53:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e57:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e5a:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e60:	39 f1                	cmp    ecx,esi
c0000e62:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e68:	75 13                	jne    c0000e7d <sYSMALLOc+0xc8>
c0000e6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e6e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e72:	83 c8 01             	or     eax,0x1
c0000e75:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e78:	e9 3e 01 00 00       	jmp    c0000fbb <sYSMALLOc+0x206>
c0000e7d:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e83:	88 d0                	mov    al,dl
c0000e85:	83 e0 01             	and    eax,0x1
c0000e88:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e8d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e91:	0f 95 c0             	setne  al
c0000e94:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e98:	39 f1                	cmp    ecx,esi
c0000e9a:	76 12                	jbe    c0000eae <sYSMALLOc+0xf9>
c0000e9c:	84 c0                	test   al,al
c0000e9e:	74 0e                	je     c0000eae <sYSMALLOc+0xf9>
c0000ea0:	83 e2 fe             	and    edx,0xfffffffe
c0000ea3:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000ea9:	e9 83 00 00 00       	jmp    c0000f31 <sYSMALLOc+0x17c>
c0000eae:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000eb3:	74 7c                	je     c0000f31 <sYSMALLOc+0x17c>
c0000eb5:	84 c0                	test   al,al
c0000eb7:	74 0c                	je     c0000ec5 <sYSMALLOc+0x110>
c0000eb9:	89 f0                	mov    eax,esi
c0000ebb:	29 c8                	sub    eax,ecx
c0000ebd:	01 e8                	add    eax,ebp
c0000ebf:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ec5:	89 f2                	mov    edx,esi
c0000ec7:	83 e2 07             	and    edx,0x7
c0000eca:	74 0c                	je     c0000ed8 <sYSMALLOc+0x123>
c0000ecc:	b8 08 00 00 00       	mov    eax,0x8
c0000ed1:	29 d0                	sub    eax,edx
c0000ed3:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ed6:	eb 04                	jmp    c0000edc <sYSMALLOc+0x127>
c0000ed8:	89 f5                	mov    ebp,esi
c0000eda:	31 c0                	xor    eax,eax
c0000edc:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ee0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ee4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee8:	01 c1                	add    ecx,eax
c0000eea:	83 ec 0c             	sub    esp,0xc
c0000eed:	01 f1                	add    ecx,esi
c0000eef:	01 ca                	add    edx,ecx
c0000ef1:	29 c8                	sub    eax,ecx
c0000ef3:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ef7:	01 c2                	add    edx,eax
c0000ef9:	52                   	push   edx
c0000efa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000efe:	e8 31 89 00 00       	call   c0009834 <sbrk>
c0000f03:	83 c4 10             	add    esp,0x10
c0000f06:	83 f8 ff             	cmp    eax,0xffffffff
c0000f09:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f0d:	75 0f                	jne    c0000f1e <sYSMALLOc+0x169>
c0000f0f:	83 ec 0c             	sub    esp,0xc
c0000f12:	6a 00                	push   0x0
c0000f14:	e8 1b 89 00 00       	call   c0009834 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	eb 30                	jmp    c0000f4e <sYSMALLOc+0x199>
c0000f1e:	39 c6                	cmp    esi,eax
c0000f20:	76 33                	jbe    c0000f55 <sYSMALLOc+0x1a0>
c0000f22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f26:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f2d:	01 f0                	add    eax,esi
c0000f2f:	eb 1d                	jmp    c0000f4e <sYSMALLOc+0x199>
c0000f31:	83 ec 0c             	sub    esp,0xc
c0000f34:	89 f5                	mov    ebp,esi
c0000f36:	6a 00                	push   0x0
c0000f38:	e8 f7 88 00 00       	call   c0009834 <sbrk>
c0000f3d:	89 c2                	mov    edx,eax
c0000f3f:	29 f2                	sub    edx,esi
c0000f41:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f45:	83 c4 10             	add    esp,0x10
c0000f48:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f4e:	31 d2                	xor    edx,edx
c0000f50:	83 f8 ff             	cmp    eax,0xffffffff
c0000f53:	74 66                	je     c0000fbb <sYSMALLOc+0x206>
c0000f55:	29 e8                	sub    eax,ebp
c0000f57:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f5a:	01 d0                	add    eax,edx
c0000f5c:	83 c8 01             	or     eax,0x1
c0000f5f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f62:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f68:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f6d:	74 4c                	je     c0000fbb <sYSMALLOc+0x206>
c0000f6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f73:	83 e8 0c             	sub    eax,0xc
c0000f76:	83 e0 f8             	and    eax,0xfffffff8
c0000f79:	89 c2                	mov    edx,eax
c0000f7b:	83 ca 01             	or     edx,0x1
c0000f7e:	83 f8 0f             	cmp    eax,0xf
c0000f81:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f84:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f8c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f94:	76 25                	jbe    c0000fbb <sYSMALLOc+0x206>
c0000f96:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f9c:	83 ec 0c             	sub    esp,0xc
c0000f9f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fa9:	83 c7 08             	add    edi,0x8
c0000fac:	57                   	push   edi
c0000fad:	e8 0e fd ff ff       	call   c0000cc0 <dlfree>
c0000fb2:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fb8:	83 c4 10             	add    esp,0x10
c0000fbb:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fc1:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fc7:	73 06                	jae    c0000fcf <sYSMALLOc+0x21a>
c0000fc9:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fcf:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fd5:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fdb:	73 06                	jae    c0000fe3 <sYSMALLOc+0x22e>
c0000fdd:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fe3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fe6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fe9:	83 e2 fc             	and    edx,0xfffffffc
c0000fec:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ff0:	0f 82 3c fe ff ff    	jb     c0000e32 <sYSMALLOc+0x7d>
c0000ff6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ffa:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ffd:	29 fa                	sub    edx,edi
c0000fff:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001002:	83 ca 01             	or     edx,0x1
c0001005:	89 fb                	mov    ebx,edi
c0001007:	83 c0 08             	add    eax,0x8
c000100a:	83 cb 01             	or     ebx,0x1
c000100d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001010:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001013:	83 c4 2c             	add    esp,0x2c
c0001016:	5b                   	pop    ebx
c0001017:	5e                   	pop    esi
c0001018:	5f                   	pop    edi
c0001019:	5d                   	pop    ebp
c000101a:	c3                   	ret    

c000101b <dlmalloc>:
c000101b:	55                   	push   ebp
c000101c:	57                   	push   edi
c000101d:	56                   	push   esi
c000101e:	53                   	push   ebx
c000101f:	83 ec 1c             	sub    esp,0x1c
c0001022:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001026:	83 f8 df             	cmp    eax,0xffffffdf
c0001029:	0f 87 70 03 00 00    	ja     c000139f <dlmalloc+0x384>
c000102f:	83 c0 0b             	add    eax,0xb
c0001032:	be 10 00 00 00       	mov    esi,0x10
c0001037:	83 f8 0f             	cmp    eax,0xf
c000103a:	76 05                	jbe    c0001041 <dlmalloc+0x26>
c000103c:	83 e0 f8             	and    eax,0xfffffff8
c000103f:	89 c6                	mov    esi,eax
c0001041:	8b 3d 80 62 02 c0    	mov    edi,DWORD PTR ds:0xc0026280
c0001047:	f7 c7 01 00 00 00    	test   edi,0x1
c000104d:	75 17                	jne    c0001066 <dlmalloc+0x4b>
c000104f:	85 ff                	test   edi,edi
c0001051:	0f 85 05 03 00 00    	jne    c000135c <dlmalloc+0x341>
c0001057:	b8 80 62 02 c0       	mov    eax,0xc0026280
c000105c:	e8 78 fb ff ff       	call   c0000bd9 <malloc_consolidate>
c0001061:	e9 f6 02 00 00       	jmp    c000135c <dlmalloc+0x341>
c0001066:	39 f7                	cmp    edi,esi
c0001068:	72 1f                	jb     c0001089 <dlmalloc+0x6e>
c000106a:	89 f2                	mov    edx,esi
c000106c:	c1 ea 03             	shr    edx,0x3
c000106f:	83 ea 02             	sub    edx,0x2
c0001072:	8b 04 95 84 62 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9d7c]
c0001079:	85 c0                	test   eax,eax
c000107b:	74 0c                	je     c0001089 <dlmalloc+0x6e>
c000107d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001080:	89 0c 95 84 62 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9d7c],ecx
c0001087:	eb 30                	jmp    c00010b9 <dlmalloc+0x9e>
c0001089:	89 f0                	mov    eax,esi
c000108b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001091:	77 2e                	ja     c00010c1 <dlmalloc+0xa6>
c0001093:	c1 e8 03             	shr    eax,0x3
c0001096:	8d 14 c5 b4 62 02 c0 	lea    edx,[eax*8-0x3ffd9d4c]
c000109d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a1:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010a4:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010a7:	39 c3                	cmp    ebx,eax
c00010a9:	74 2e                	je     c00010d9 <dlmalloc+0xbe>
c00010ab:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010ae:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010b3:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010b6:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010b9:	83 c0 08             	add    eax,0x8
c00010bc:	e9 e0 02 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c00010c1:	e8 8f fa ff ff       	call   c0000b55 <largebin_index>
c00010c6:	83 e7 02             	and    edi,0x2
c00010c9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010cd:	74 0a                	je     c00010d9 <dlmalloc+0xbe>
c00010cf:	b8 80 62 02 c0       	mov    eax,0xc0026280
c00010d4:	e8 00 fb ff ff       	call   c0000bd9 <malloc_consolidate>
c00010d9:	8d 46 10             	lea    eax,[esi+0x10]
c00010dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010e0:	8b 1d c0 62 02 c0    	mov    ebx,DWORD PTR ds:0xc00262c0
c00010e6:	81 fb b4 62 02 c0    	cmp    ebx,0xc00262b4
c00010ec:	0f 84 13 01 00 00    	je     c0001205 <dlmalloc+0x1ea>
c00010f2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010f5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010f8:	83 e7 fc             	and    edi,0xfffffffc
c00010fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001101:	77 4c                	ja     c000114f <dlmalloc+0x134>
c0001103:	3d b4 62 02 c0       	cmp    eax,0xc00262b4
c0001108:	75 45                	jne    c000114f <dlmalloc+0x134>
c000110a:	39 1d b0 62 02 c0    	cmp    DWORD PTR ds:0xc00262b0,ebx
c0001110:	75 3d                	jne    c000114f <dlmalloc+0x134>
c0001112:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001116:	73 37                	jae    c000114f <dlmalloc+0x134>
c0001118:	8d 04 33             	lea    eax,[ebx+esi*1]
c000111b:	89 fa                	mov    edx,edi
c000111d:	a3 bc 62 02 c0       	mov    ds:0xc00262bc,eax
c0001122:	a3 c0 62 02 c0       	mov    ds:0xc00262c0,eax
c0001127:	a3 b0 62 02 c0       	mov    ds:0xc00262b0,eax
c000112c:	29 f2                	sub    edx,esi
c000112e:	c7 40 08 b4 62 02 c0 	mov    DWORD PTR [eax+0x8],0xc00262b4
c0001135:	c7 40 0c b4 62 02 c0 	mov    DWORD PTR [eax+0xc],0xc00262b4
c000113c:	83 ce 01             	or     esi,0x1
c000113f:	89 d1                	mov    ecx,edx
c0001141:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001144:	83 c9 01             	or     ecx,0x1
c0001147:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000114a:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000114d:	eb 15                	jmp    c0001164 <dlmalloc+0x149>
c000114f:	a3 c0 62 02 c0       	mov    ds:0xc00262c0,eax
c0001154:	39 fe                	cmp    esi,edi
c0001156:	c7 40 08 b4 62 02 c0 	mov    DWORD PTR [eax+0x8],0xc00262b4
c000115d:	75 0d                	jne    c000116c <dlmalloc+0x151>
c000115f:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001164:	8d 43 08             	lea    eax,[ebx+0x8]
c0001167:	e9 35 02 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c000116c:	89 f8                	mov    eax,edi
c000116e:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001174:	77 19                	ja     c000118f <dlmalloc+0x174>
c0001176:	c1 e8 03             	shr    eax,0x3
c0001179:	8d 14 00             	lea    edx,[eax+eax*1]
c000117c:	83 c2 0d             	add    edx,0xd
c000117f:	8d 2c 95 78 62 02 c0 	lea    ebp,[edx*4-0x3ffd9d88]
c0001186:	8b 14 95 80 62 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9d80]
c000118d:	eb 46                	jmp    c00011d5 <dlmalloc+0x1ba>
c000118f:	e8 c1 f9 ff ff       	call   c0000b55 <largebin_index>
c0001194:	8d 14 00             	lea    edx,[eax+eax*1]
c0001197:	83 c2 0d             	add    edx,0xd
c000119a:	8d 0c 95 80 62 02 c0 	lea    ecx,[edx*4-0x3ffd9d80]
c00011a1:	8b 14 95 80 62 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9d80]
c00011a8:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011ab:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011af:	89 d5                	mov    ebp,edx
c00011b1:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011b5:	74 1e                	je     c00011d5 <dlmalloc+0x1ba>
c00011b7:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011ba:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011bd:	77 12                	ja     c00011d1 <dlmalloc+0x1b6>
c00011bf:	83 cf 01             	or     edi,0x1
c00011c2:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011c5:	76 05                	jbe    c00011cc <dlmalloc+0x1b1>
c00011c7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011ca:	eb f6                	jmp    c00011c2 <dlmalloc+0x1a7>
c00011cc:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011cf:	eb 04                	jmp    c00011d5 <dlmalloc+0x1ba>
c00011d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011d5:	89 c7                	mov    edi,eax
c00011d7:	88 c1                	mov    cl,al
c00011d9:	c1 ff 05             	sar    edi,0x5
c00011dc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011e0:	bf 01 00 00 00       	mov    edi,0x1
c00011e5:	d3 e7                	shl    edi,cl
c00011e7:	89 f8                	mov    eax,edi
c00011e9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011ed:	09 04 bd b4 65 02 c0 	or     DWORD PTR [edi*4-0x3ffd9a4c],eax
c00011f4:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011f7:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011fa:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011fd:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001200:	e9 db fe ff ff       	jmp    c00010e0 <dlmalloc+0xc5>
c0001205:	81 fe ff 00 00 00    	cmp    esi,0xff
c000120b:	76 78                	jbe    c0001285 <dlmalloc+0x26a>
c000120d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001211:	8d 04 c5 b4 62 02 c0 	lea    eax,[eax*8-0x3ffd9d4c]
c0001218:	8d 48 f8             	lea    ecx,[eax-0x8]
c000121b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000121e:	39 ca                	cmp    edx,ecx
c0001220:	74 63                	je     c0001285 <dlmalloc+0x26a>
c0001222:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001225:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001228:	83 e3 fc             	and    ebx,0xfffffffc
c000122b:	39 de                	cmp    esi,ebx
c000122d:	77 52                	ja     c0001281 <dlmalloc+0x266>
c000122f:	89 df                	mov    edi,ebx
c0001231:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001234:	29 f7                	sub    edi,esi
c0001236:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001239:	01 d3                	add    ebx,edx
c000123b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000123e:	83 ff 0f             	cmp    edi,0xf
c0001241:	8d 42 08             	lea    eax,[edx+0x8]
c0001244:	77 09                	ja     c000124f <dlmalloc+0x234>
c0001246:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000124a:	e9 52 01 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c000124f:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001252:	83 ce 01             	or     esi,0x1
c0001255:	89 0d bc 62 02 c0    	mov    DWORD PTR ds:0xc00262bc,ecx
c000125b:	89 0d c0 62 02 c0    	mov    DWORD PTR ds:0xc00262c0,ecx
c0001261:	c7 41 08 b4 62 02 c0 	mov    DWORD PTR [ecx+0x8],0xc00262b4
c0001268:	c7 41 0c b4 62 02 c0 	mov    DWORD PTR [ecx+0xc],0xc00262b4
c000126f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001272:	89 fa                	mov    edx,edi
c0001274:	83 ca 01             	or     edx,0x1
c0001277:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000127a:	89 3b                	mov    DWORD PTR [ebx],edi
c000127c:	e9 20 01 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c0001281:	89 c2                	mov    edx,eax
c0001283:	eb 99                	jmp    c000121e <dlmalloc+0x203>
c0001285:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001289:	b8 01 00 00 00       	mov    eax,0x1
c000128e:	41                   	inc    ecx
c000128f:	89 cb                	mov    ebx,ecx
c0001291:	8d 14 cd ac 62 02 c0 	lea    edx,[ecx*8-0x3ffd9d54]
c0001298:	c1 eb 05             	shr    ebx,0x5
c000129b:	d3 e0                	shl    eax,cl
c000129d:	8b 3c 9d b4 65 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9a4c]
c00012a4:	39 f8                	cmp    eax,edi
c00012a6:	77 04                	ja     c00012ac <dlmalloc+0x291>
c00012a8:	85 c0                	test   eax,eax
c00012aa:	75 26                	jne    c00012d2 <dlmalloc+0x2b7>
c00012ac:	43                   	inc    ebx
c00012ad:	83 fb 02             	cmp    ebx,0x2
c00012b0:	0f 87 a6 00 00 00    	ja     c000135c <dlmalloc+0x341>
c00012b6:	8b 3c 9d b4 65 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9a4c]
c00012bd:	85 ff                	test   edi,edi
c00012bf:	74 eb                	je     c00012ac <dlmalloc+0x291>
c00012c1:	89 d8                	mov    eax,ebx
c00012c3:	c1 e0 06             	shl    eax,0x6
c00012c6:	8d 14 85 ac 62 02 c0 	lea    edx,[eax*4-0x3ffd9d54]
c00012cd:	b8 01 00 00 00       	mov    eax,0x1
c00012d2:	85 f8                	test   eax,edi
c00012d4:	75 07                	jne    c00012dd <dlmalloc+0x2c2>
c00012d6:	83 c2 08             	add    edx,0x8
c00012d9:	01 c0                	add    eax,eax
c00012db:	eb f5                	jmp    c00012d2 <dlmalloc+0x2b7>
c00012dd:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012e0:	39 ca                	cmp    edx,ecx
c00012e2:	75 14                	jne    c00012f8 <dlmalloc+0x2dd>
c00012e4:	89 c1                	mov    ecx,eax
c00012e6:	83 c2 08             	add    edx,0x8
c00012e9:	f7 d1                	not    ecx
c00012eb:	01 c0                	add    eax,eax
c00012ed:	21 cf                	and    edi,ecx
c00012ef:	89 3c 9d b4 65 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9a4c],edi
c00012f6:	eb ac                	jmp    c00012a4 <dlmalloc+0x289>
c00012f8:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012fb:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012fe:	83 e0 fc             	and    eax,0xfffffffc
c0001301:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001304:	89 c3                	mov    ebx,eax
c0001306:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001309:	29 f3                	sub    ebx,esi
c000130b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000130e:	83 fb 0f             	cmp    ebx,0xf
c0001311:	8d 41 08             	lea    eax,[ecx+0x8]
c0001314:	77 09                	ja     c000131f <dlmalloc+0x304>
c0001316:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c000131a:	e9 82 00 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c000131f:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001322:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001328:	89 3d bc 62 02 c0    	mov    DWORD PTR ds:0xc00262bc,edi
c000132e:	89 3d c0 62 02 c0    	mov    DWORD PTR ds:0xc00262c0,edi
c0001334:	c7 47 08 b4 62 02 c0 	mov    DWORD PTR [edi+0x8],0xc00262b4
c000133b:	c7 47 0c b4 62 02 c0 	mov    DWORD PTR [edi+0xc],0xc00262b4
c0001342:	77 06                	ja     c000134a <dlmalloc+0x32f>
c0001344:	89 3d b0 62 02 c0    	mov    DWORD PTR ds:0xc00262b0,edi
c000134a:	83 ce 01             	or     esi,0x1
c000134d:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001350:	89 d9                	mov    ecx,ebx
c0001352:	83 c9 01             	or     ecx,0x1
c0001355:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001358:	89 1a                	mov    DWORD PTR [edx],ebx
c000135a:	eb 45                	jmp    c00013a1 <dlmalloc+0x386>
c000135c:	a1 ac 62 02 c0       	mov    eax,ds:0xc00262ac
c0001361:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001364:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001367:	83 e2 fc             	and    edx,0xfffffffc
c000136a:	39 d1                	cmp    ecx,edx
c000136c:	77 1e                	ja     c000138c <dlmalloc+0x371>
c000136e:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001371:	89 f3                	mov    ebx,esi
c0001373:	89 0d ac 62 02 c0    	mov    DWORD PTR ds:0xc00262ac,ecx
c0001379:	83 cb 01             	or     ebx,0x1
c000137c:	29 f2                	sub    edx,esi
c000137e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001381:	83 ca 01             	or     edx,0x1
c0001384:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001387:	e9 2d fd ff ff       	jmp    c00010b9 <dlmalloc+0x9e>
c000138c:	83 c4 1c             	add    esp,0x1c
c000138f:	89 f0                	mov    eax,esi
c0001391:	5b                   	pop    ebx
c0001392:	ba 80 62 02 c0       	mov    edx,0xc0026280
c0001397:	5e                   	pop    esi
c0001398:	5f                   	pop    edi
c0001399:	5d                   	pop    ebp
c000139a:	e9 16 fa ff ff       	jmp    c0000db5 <sYSMALLOc>
c000139f:	31 c0                	xor    eax,eax
c00013a1:	83 c4 1c             	add    esp,0x1c
c00013a4:	5b                   	pop    ebx
c00013a5:	5e                   	pop    esi
c00013a6:	5f                   	pop    edi
c00013a7:	5d                   	pop    ebp
c00013a8:	c3                   	ret    

c00013a9 <iALLOc>:
c00013a9:	55                   	push   ebp
c00013aa:	89 c5                	mov    ebp,eax
c00013ac:	57                   	push   edi
c00013ad:	56                   	push   esi
c00013ae:	53                   	push   ebx
c00013af:	83 ec 2c             	sub    esp,0x2c
c00013b2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013b6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013be:	83 3d 80 62 02 c0 00 	cmp    DWORD PTR ds:0xc0026280,0x0
c00013c5:	75 12                	jne    c00013d9 <iALLOc+0x30>
c00013c7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013cb:	b8 80 62 02 c0       	mov    eax,0xc0026280
c00013d0:	e8 04 f8 ff ff       	call   c0000bd9 <malloc_consolidate>
c00013d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013d9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013de:	74 12                	je     c00013f2 <iALLOc+0x49>
c00013e0:	85 ed                	test   ebp,ebp
c00013e2:	0f 84 64 01 00 00    	je     c000154c <iALLOc+0x1a3>
c00013e8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013f0:	eb 33                	jmp    c0001425 <iALLOc+0x7c>
c00013f2:	85 ed                	test   ebp,ebp
c00013f4:	75 14                	jne    c000140a <iALLOc+0x61>
c00013f6:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013fe:	83 c4 2c             	add    esp,0x2c
c0001401:	5b                   	pop    ebx
c0001402:	5e                   	pop    esi
c0001403:	5f                   	pop    edi
c0001404:	5d                   	pop    ebp
c0001405:	e9 11 fc ff ff       	jmp    c000101b <dlmalloc>
c000140a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001411:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001419:	83 f8 0f             	cmp    eax,0xf
c000141c:	76 07                	jbe    c0001425 <iALLOc+0x7c>
c000141e:	83 e0 f8             	and    eax,0xfffffff8
c0001421:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001425:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000142a:	75 09                	jne    c0001435 <iALLOc+0x8c>
c000142c:	89 d0                	mov    eax,edx
c000142e:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001431:	31 f6                	xor    esi,esi
c0001433:	eb 3b                	jmp    c0001470 <iALLOc+0xc7>
c0001435:	8b 02                	mov    eax,DWORD PTR [edx]
c0001437:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000143f:	83 c0 0b             	add    eax,0xb
c0001442:	83 f8 0f             	cmp    eax,0xf
c0001445:	76 07                	jbe    c000144e <iALLOc+0xa5>
c0001447:	83 e0 f8             	and    eax,0xfffffff8
c000144a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000144e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001452:	0f af f5             	imul   esi,ebp
c0001455:	eb 25                	jmp    c000147c <iALLOc+0xd3>
c0001457:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001459:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000145c:	bb 10 00 00 00       	mov    ebx,0x10
c0001461:	83 f9 0f             	cmp    ecx,0xf
c0001464:	76 05                	jbe    c000146b <iALLOc+0xc2>
c0001466:	83 e1 f8             	and    ecx,0xfffffff8
c0001469:	89 cb                	mov    ebx,ecx
c000146b:	01 de                	add    esi,ebx
c000146d:	83 c0 04             	add    eax,0x4
c0001470:	39 c7                	cmp    edi,eax
c0001472:	75 e3                	jne    c0001457 <iALLOc+0xae>
c0001474:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000147c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001480:	8b 1d d4 65 02 c0    	mov    ebx,DWORD PTR ds:0xc00265d4
c0001486:	83 ec 0c             	sub    esp,0xc
c0001489:	c7 05 d4 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00265d4,0x0
c0001493:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001497:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000149b:	50                   	push   eax
c000149c:	e8 7a fb ff ff       	call   c000101b <dlmalloc>
c00014a1:	83 c4 10             	add    esp,0x10
c00014a4:	89 1d d4 65 02 c0    	mov    DWORD PTR ds:0xc00265d4,ebx
c00014aa:	85 c0                	test   eax,eax
c00014ac:	0f 84 92 00 00 00    	je     c0001544 <iALLOc+0x19b>
c00014b2:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014b5:	8d 78 f8             	lea    edi,[eax-0x8]
c00014b8:	83 e3 fc             	and    ebx,0xfffffffc
c00014bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014bf:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014c4:	74 1e                	je     c00014e4 <iALLOc+0x13b>
c00014c6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014ca:	89 d9                	mov    ecx,ebx
c00014cc:	52                   	push   edx
c00014cd:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014d1:	83 e9 04             	sub    ecx,0x4
c00014d4:	51                   	push   ecx
c00014d5:	6a 00                	push   0x0
c00014d7:	50                   	push   eax
c00014d8:	e8 9f f1 ff ff       	call   c000067c <memset>
c00014dd:	83 c4 10             	add    esp,0x10
c00014e0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014e9:	75 14                	jne    c00014ff <iALLOc+0x156>
c00014eb:	8d 04 37             	lea    eax,[edi+esi*1]
c00014ee:	29 f3                	sub    ebx,esi
c00014f0:	8d 48 08             	lea    ecx,[eax+0x8]
c00014f3:	83 cb 01             	or     ebx,0x1
c00014f6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014fa:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014fd:	89 f3                	mov    ebx,esi
c00014ff:	31 c0                	xor    eax,eax
c0001501:	4d                   	dec    ebp
c0001502:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001505:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001509:	39 c5                	cmp    ebp,eax
c000150b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000150e:	74 2c                	je     c000153c <iALLOc+0x193>
c0001510:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001514:	85 c9                	test   ecx,ecx
c0001516:	75 15                	jne    c000152d <iALLOc+0x184>
c0001518:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000151b:	8d 71 0b             	lea    esi,[ecx+0xb]
c000151e:	b9 10 00 00 00       	mov    ecx,0x10
c0001523:	83 fe 0f             	cmp    esi,0xf
c0001526:	76 05                	jbe    c000152d <iALLOc+0x184>
c0001528:	83 e6 f8             	and    esi,0xfffffff8
c000152b:	89 f1                	mov    ecx,esi
c000152d:	89 ce                	mov    esi,ecx
c000152f:	29 cb                	sub    ebx,ecx
c0001531:	83 ce 01             	or     esi,0x1
c0001534:	40                   	inc    eax
c0001535:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001538:	01 cf                	add    edi,ecx
c000153a:	eb c6                	jmp    c0001502 <iALLOc+0x159>
c000153c:	83 cb 01             	or     ebx,0x1
c000153f:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001542:	eb 08                	jmp    c000154c <iALLOc+0x1a3>
c0001544:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000154c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001550:	83 c4 2c             	add    esp,0x2c
c0001553:	5b                   	pop    ebx
c0001554:	5e                   	pop    esi
c0001555:	5f                   	pop    edi
c0001556:	5d                   	pop    ebp
c0001557:	c3                   	ret    

c0001558 <dlrealloc>:
c0001558:	55                   	push   ebp
c0001559:	57                   	push   edi
c000155a:	56                   	push   esi
c000155b:	53                   	push   ebx
c000155c:	83 ec 1c             	sub    esp,0x1c
c000155f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001563:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001567:	85 db                	test   ebx,ebx
c0001569:	75 10                	jne    c000157b <dlrealloc+0x23>
c000156b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000156f:	83 c4 1c             	add    esp,0x1c
c0001572:	5b                   	pop    ebx
c0001573:	5e                   	pop    esi
c0001574:	5f                   	pop    edi
c0001575:	5d                   	pop    ebp
c0001576:	e9 a0 fa ff ff       	jmp    c000101b <dlmalloc>
c000157b:	83 f8 df             	cmp    eax,0xffffffdf
c000157e:	76 07                	jbe    c0001587 <dlrealloc+0x2f>
c0001580:	31 db                	xor    ebx,ebx
c0001582:	e9 6a 01 00 00       	jmp    c00016f1 <dlrealloc+0x199>
c0001587:	83 c0 0b             	add    eax,0xb
c000158a:	bd 10 00 00 00       	mov    ebp,0x10
c000158f:	83 f8 0f             	cmp    eax,0xf
c0001592:	76 05                	jbe    c0001599 <dlrealloc+0x41>
c0001594:	83 e0 f8             	and    eax,0xfffffff8
c0001597:	89 c5                	mov    ebp,eax
c0001599:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000159c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000159f:	89 c6                	mov    esi,eax
c00015a1:	83 e6 fc             	and    esi,0xfffffffc
c00015a4:	a8 02                	test   al,0x2
c00015a6:	75 d8                	jne    c0001580 <dlrealloc+0x28>
c00015a8:	39 f5                	cmp    ebp,esi
c00015aa:	0f 86 04 01 00 00    	jbe    c00016b4 <dlrealloc+0x15c>
c00015b0:	8d 14 37             	lea    edx,[edi+esi*1]
c00015b3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015b6:	39 15 ac 62 02 c0    	cmp    DWORD PTR ds:0xc00262ac,edx
c00015bc:	75 33                	jne    c00015f1 <dlrealloc+0x99>
c00015be:	83 e1 fc             	and    ecx,0xfffffffc
c00015c1:	01 f1                	add    ecx,esi
c00015c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c7:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015ca:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015ce:	77 49                	ja     c0001619 <dlrealloc+0xc1>
c00015d0:	01 ef                	add    edi,ebp
c00015d2:	83 e0 01             	and    eax,0x1
c00015d5:	09 e8                	or     eax,ebp
c00015d7:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015da:	89 3d ac 62 02 c0    	mov    DWORD PTR ds:0xc00262ac,edi
c00015e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e4:	29 e8                	sub    eax,ebp
c00015e6:	83 c8 01             	or     eax,0x1
c00015e9:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015ec:	e9 00 01 00 00       	jmp    c00016f1 <dlrealloc+0x199>
c00015f1:	89 c8                	mov    eax,ecx
c00015f3:	83 e0 fe             	and    eax,0xfffffffe
c00015f6:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015fb:	75 1c                	jne    c0001619 <dlrealloc+0xc1>
c00015fd:	83 e1 fc             	and    ecx,0xfffffffc
c0001600:	01 f1                	add    ecx,esi
c0001602:	39 cd                	cmp    ebp,ecx
c0001604:	77 13                	ja     c0001619 <dlrealloc+0xc1>
c0001606:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001609:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000160c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000160f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001612:	89 ce                	mov    esi,ecx
c0001614:	e9 9b 00 00 00       	jmp    c00016b4 <dlrealloc+0x15c>
c0001619:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000161d:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001620:	83 ec 0c             	sub    esp,0xc
c0001623:	50                   	push   eax
c0001624:	e8 f2 f9 ff ff       	call   c000101b <dlmalloc>
c0001629:	83 c4 10             	add    esp,0x10
c000162c:	85 c0                	test   eax,eax
c000162e:	0f 84 4c ff ff ff    	je     c0001580 <dlrealloc+0x28>
c0001634:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001637:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000163b:	39 ca                	cmp    edx,ecx
c000163d:	75 0a                	jne    c0001649 <dlrealloc+0xf1>
c000163f:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001642:	83 e0 fc             	and    eax,0xfffffffc
c0001645:	01 c6                	add    esi,eax
c0001647:	eb 6b                	jmp    c00016b4 <dlrealloc+0x15c>
c0001649:	8d 4e fc             	lea    ecx,[esi-0x4]
c000164c:	83 f9 27             	cmp    ecx,0x27
c000164f:	76 08                	jbe    c0001659 <dlrealloc+0x101>
c0001651:	89 de                	mov    esi,ebx
c0001653:	89 c7                	mov    edi,eax
c0001655:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001657:	eb 43                	jmp    c000169c <dlrealloc+0x144>
c0001659:	8b 13                	mov    edx,DWORD PTR [ebx]
c000165b:	83 f9 13             	cmp    ecx,0x13
c000165e:	89 10                	mov    DWORD PTR [eax],edx
c0001660:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001663:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001666:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001669:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000166c:	76 2e                	jbe    c000169c <dlrealloc+0x144>
c000166e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001671:	83 f9 1b             	cmp    ecx,0x1b
c0001674:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001677:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000167a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000167d:	76 1d                	jbe    c000169c <dlrealloc+0x144>
c000167f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001682:	83 f9 23             	cmp    ecx,0x23
c0001685:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001688:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000168b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000168e:	76 0c                	jbe    c000169c <dlrealloc+0x144>
c0001690:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001693:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001696:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001699:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000169c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016a0:	83 ec 0c             	sub    esp,0xc
c00016a3:	53                   	push   ebx
c00016a4:	e8 17 f6 ff ff       	call   c0000cc0 <dlfree>
c00016a9:	83 c4 10             	add    esp,0x10
c00016ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b0:	89 c3                	mov    ebx,eax
c00016b2:	eb 3d                	jmp    c00016f1 <dlrealloc+0x199>
c00016b4:	89 f2                	mov    edx,esi
c00016b6:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016b9:	29 ea                	sub    edx,ebp
c00016bb:	83 e1 01             	and    ecx,0x1
c00016be:	8d 04 37             	lea    eax,[edi+esi*1]
c00016c1:	83 fa 0f             	cmp    edx,0xf
c00016c4:	77 0b                	ja     c00016d1 <dlrealloc+0x179>
c00016c6:	09 ce                	or     esi,ecx
c00016c8:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016cb:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016cf:	eb 20                	jmp    c00016f1 <dlrealloc+0x199>
c00016d1:	01 ef                	add    edi,ebp
c00016d3:	83 ec 0c             	sub    esp,0xc
c00016d6:	09 cd                	or     ebp,ecx
c00016d8:	83 ca 01             	or     edx,0x1
c00016db:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016de:	83 c7 08             	add    edi,0x8
c00016e1:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016e4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016e8:	57                   	push   edi
c00016e9:	e8 d2 f5 ff ff       	call   c0000cc0 <dlfree>
c00016ee:	83 c4 10             	add    esp,0x10
c00016f1:	83 c4 1c             	add    esp,0x1c
c00016f4:	89 d8                	mov    eax,ebx
c00016f6:	5b                   	pop    ebx
c00016f7:	5e                   	pop    esi
c00016f8:	5f                   	pop    edi
c00016f9:	5d                   	pop    ebp
c00016fa:	c3                   	ret    

c00016fb <dlmemalign>:
c00016fb:	55                   	push   ebp
c00016fc:	57                   	push   edi
c00016fd:	56                   	push   esi
c00016fe:	53                   	push   ebx
c00016ff:	83 ec 0c             	sub    esp,0xc
c0001702:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001706:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000170a:	83 fa 08             	cmp    edx,0x8
c000170d:	77 10                	ja     c000171f <dlmemalign+0x24>
c000170f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001713:	83 c4 0c             	add    esp,0xc
c0001716:	5b                   	pop    ebx
c0001717:	5e                   	pop    esi
c0001718:	5f                   	pop    edi
c0001719:	5d                   	pop    ebp
c000171a:	e9 fc f8 ff ff       	jmp    c000101b <dlmalloc>
c000171f:	bf 10 00 00 00       	mov    edi,0x10
c0001724:	83 fa 0f             	cmp    edx,0xf
c0001727:	76 13                	jbe    c000173c <dlmemalign+0x41>
c0001729:	8d 4a ff             	lea    ecx,[edx-0x1]
c000172c:	85 d1                	test   ecx,edx
c000172e:	75 04                	jne    c0001734 <dlmemalign+0x39>
c0001730:	89 d7                	mov    edi,edx
c0001732:	eb 08                	jmp    c000173c <dlmemalign+0x41>
c0001734:	39 d7                	cmp    edi,edx
c0001736:	73 04                	jae    c000173c <dlmemalign+0x41>
c0001738:	01 ff                	add    edi,edi
c000173a:	eb f8                	jmp    c0001734 <dlmemalign+0x39>
c000173c:	83 f8 df             	cmp    eax,0xffffffdf
c000173f:	76 07                	jbe    c0001748 <dlmemalign+0x4d>
c0001741:	31 c0                	xor    eax,eax
c0001743:	e9 ce 00 00 00       	jmp    c0001816 <dlmemalign+0x11b>
c0001748:	83 c0 0b             	add    eax,0xb
c000174b:	bd 10 00 00 00       	mov    ebp,0x10
c0001750:	83 f8 0f             	cmp    eax,0xf
c0001753:	76 05                	jbe    c000175a <dlmemalign+0x5f>
c0001755:	83 e0 f8             	and    eax,0xfffffff8
c0001758:	89 c5                	mov    ebp,eax
c000175a:	83 ec 0c             	sub    esp,0xc
c000175d:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001761:	50                   	push   eax
c0001762:	e8 b4 f8 ff ff       	call   c000101b <dlmalloc>
c0001767:	83 c4 10             	add    esp,0x10
c000176a:	89 c1                	mov    ecx,eax
c000176c:	85 c0                	test   eax,eax
c000176e:	74 d1                	je     c0001741 <dlmemalign+0x46>
c0001770:	31 d2                	xor    edx,edx
c0001772:	8d 70 f8             	lea    esi,[eax-0x8]
c0001775:	f7 f7                	div    edi
c0001777:	85 d2                	test   edx,edx
c0001779:	74 62                	je     c00017dd <dlmemalign+0xe2>
c000177b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000177f:	89 f8                	mov    eax,edi
c0001781:	f7 d8                	neg    eax
c0001783:	21 c3                	and    ebx,eax
c0001785:	83 eb 08             	sub    ebx,0x8
c0001788:	89 d8                	mov    eax,ebx
c000178a:	29 f0                	sub    eax,esi
c000178c:	83 f8 0f             	cmp    eax,0xf
c000178f:	77 02                	ja     c0001793 <dlmemalign+0x98>
c0001791:	01 fb                	add    ebx,edi
c0001793:	89 d8                	mov    eax,ebx
c0001795:	29 f0                	sub    eax,esi
c0001797:	89 c6                	mov    esi,eax
c0001799:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000179c:	89 c2                	mov    edx,eax
c000179e:	83 e2 fc             	and    edx,0xfffffffc
c00017a1:	29 f2                	sub    edx,esi
c00017a3:	a8 02                	test   al,0x2
c00017a5:	74 10                	je     c00017b7 <dlmemalign+0xbc>
c00017a7:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017aa:	83 ca 02             	or     edx,0x2
c00017ad:	8d 43 08             	lea    eax,[ebx+0x8]
c00017b0:	89 33                	mov    DWORD PTR [ebx],esi
c00017b2:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017b5:	eb 5f                	jmp    c0001816 <dlmemalign+0x11b>
c00017b7:	83 ec 0c             	sub    esp,0xc
c00017ba:	89 d0                	mov    eax,edx
c00017bc:	83 c8 01             	or     eax,0x1
c00017bf:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017c2:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017c7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017ca:	83 e0 01             	and    eax,0x1
c00017cd:	09 f0                	or     eax,esi
c00017cf:	89 de                	mov    esi,ebx
c00017d1:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017d4:	51                   	push   ecx
c00017d5:	e8 e6 f4 ff ff       	call   c0000cc0 <dlfree>
c00017da:	83 c4 10             	add    esp,0x10
c00017dd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017e0:	a8 02                	test   al,0x2
c00017e2:	75 2f                	jne    c0001813 <dlmemalign+0x118>
c00017e4:	83 e0 fc             	and    eax,0xfffffffc
c00017e7:	8d 55 10             	lea    edx,[ebp+0x10]
c00017ea:	39 c2                	cmp    edx,eax
c00017ec:	73 25                	jae    c0001813 <dlmemalign+0x118>
c00017ee:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017f1:	83 ec 0c             	sub    esp,0xc
c00017f4:	29 e8                	sub    eax,ebp
c00017f6:	83 c2 08             	add    edx,0x8
c00017f9:	83 c8 01             	or     eax,0x1
c00017fc:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017ff:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001802:	83 e0 01             	and    eax,0x1
c0001805:	09 c5                	or     ebp,eax
c0001807:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000180a:	52                   	push   edx
c000180b:	e8 b0 f4 ff ff       	call   c0000cc0 <dlfree>
c0001810:	83 c4 10             	add    esp,0x10
c0001813:	8d 46 08             	lea    eax,[esi+0x8]
c0001816:	83 c4 0c             	add    esp,0xc
c0001819:	5b                   	pop    ebx
c000181a:	5e                   	pop    esi
c000181b:	5f                   	pop    edi
c000181c:	5d                   	pop    ebp
c000181d:	c3                   	ret    

c000181e <dlcalloc>:
c000181e:	53                   	push   ebx
c000181f:	83 ec 14             	sub    esp,0x14
c0001822:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001826:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000182b:	50                   	push   eax
c000182c:	e8 ea f7 ff ff       	call   c000101b <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	89 c3                	mov    ebx,eax
c0001836:	85 c0                	test   eax,eax
c0001838:	74 77                	je     c00018b1 <dlcalloc+0x93>
c000183a:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000183d:	89 d0                	mov    eax,edx
c000183f:	83 e0 fc             	and    eax,0xfffffffc
c0001842:	80 e2 02             	and    dl,0x2
c0001845:	75 5a                	jne    c00018a1 <dlcalloc+0x83>
c0001847:	83 e8 04             	sub    eax,0x4
c000184a:	83 f8 27             	cmp    eax,0x27
c000184d:	76 03                	jbe    c0001852 <dlcalloc+0x34>
c000184f:	51                   	push   ecx
c0001850:	eb 53                	jmp    c00018a5 <dlcalloc+0x87>
c0001852:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001858:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000185f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001866:	83 f8 13             	cmp    eax,0x13
c0001869:	76 46                	jbe    c00018b1 <dlcalloc+0x93>
c000186b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001872:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001879:	83 f8 1b             	cmp    eax,0x1b
c000187c:	76 33                	jbe    c00018b1 <dlcalloc+0x93>
c000187e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001885:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000188c:	83 f8 23             	cmp    eax,0x23
c000188f:	76 20                	jbe    c00018b1 <dlcalloc+0x93>
c0001891:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001898:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000189f:	eb 10                	jmp    c00018b1 <dlcalloc+0x93>
c00018a1:	83 e8 08             	sub    eax,0x8
c00018a4:	52                   	push   edx
c00018a5:	50                   	push   eax
c00018a6:	6a 00                	push   0x0
c00018a8:	53                   	push   ebx
c00018a9:	e8 ce ed ff ff       	call   c000067c <memset>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	89 d8                	mov    eax,ebx
c00018b3:	83 c4 08             	add    esp,0x8
c00018b6:	5b                   	pop    ebx
c00018b7:	c3                   	ret    

c00018b8 <dlcfree>:
c00018b8:	e9 03 f4 ff ff       	jmp    c0000cc0 <dlfree>

c00018bd <dlindependent_calloc>:
c00018bd:	83 ec 28             	sub    esp,0x28
c00018c0:	b9 03 00 00 00       	mov    ecx,0x3
c00018c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018d1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d9:	e8 cb fa ff ff       	call   c00013a9 <iALLOc>
c00018de:	83 c4 2c             	add    esp,0x2c
c00018e1:	c3                   	ret    

c00018e2 <dlindependent_comalloc>:
c00018e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018ea:	31 c9                	xor    ecx,ecx
c00018ec:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018f4:	e9 b0 fa ff ff       	jmp    c00013a9 <iALLOc>

c00018f9 <dlvalloc>:
c00018f9:	83 ec 0c             	sub    esp,0xc
c00018fc:	83 3d 80 62 02 c0 00 	cmp    DWORD PTR ds:0xc0026280,0x0
c0001903:	75 0a                	jne    c000190f <dlvalloc+0x16>
c0001905:	b8 80 62 02 c0       	mov    eax,0xc0026280
c000190a:	e8 ca f2 ff ff       	call   c0000bd9 <malloc_consolidate>
c000190f:	50                   	push   eax
c0001910:	50                   	push   eax
c0001911:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001915:	ff 35 dc 65 02 c0    	push   DWORD PTR ds:0xc00265dc
c000191b:	e8 db fd ff ff       	call   c00016fb <dlmemalign>
c0001920:	83 c4 1c             	add    esp,0x1c
c0001923:	c3                   	ret    

c0001924 <dlpvalloc>:
c0001924:	83 ec 0c             	sub    esp,0xc
c0001927:	83 3d 80 62 02 c0 00 	cmp    DWORD PTR ds:0xc0026280,0x0
c000192e:	75 0a                	jne    c000193a <dlpvalloc+0x16>
c0001930:	b8 80 62 02 c0       	mov    eax,0xc0026280
c0001935:	e8 9f f2 ff ff       	call   c0000bd9 <malloc_consolidate>
c000193a:	a1 dc 65 02 c0       	mov    eax,ds:0xc00265dc
c000193f:	89 c1                	mov    ecx,eax
c0001941:	52                   	push   edx
c0001942:	f7 d9                	neg    ecx
c0001944:	52                   	push   edx
c0001945:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001949:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000194d:	21 ca                	and    edx,ecx
c000194f:	52                   	push   edx
c0001950:	50                   	push   eax
c0001951:	e8 a5 fd ff ff       	call   c00016fb <dlmemalign>
c0001956:	83 c4 1c             	add    esp,0x1c
c0001959:	c3                   	ret    

c000195a <dlmalloc_trim>:
c000195a:	b8 80 62 02 c0       	mov    eax,0xc0026280
c000195f:	e8 75 f2 ff ff       	call   c0000bd9 <malloc_consolidate>
c0001964:	31 c0                	xor    eax,eax
c0001966:	c3                   	ret    

c0001967 <dlmalloc_usable_size>:
c0001967:	53                   	push   ebx
c0001968:	31 c0                	xor    eax,eax
c000196a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000196e:	85 c9                	test   ecx,ecx
c0001970:	74 24                	je     c0001996 <dlmalloc_usable_size+0x2f>
c0001972:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001975:	f6 c2 02             	test   dl,0x2
c0001978:	74 08                	je     c0001982 <dlmalloc_usable_size+0x1b>
c000197a:	83 e2 fc             	and    edx,0xfffffffc
c000197d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001980:	eb 14                	jmp    c0001996 <dlmalloc_usable_size+0x2f>
c0001982:	89 d3                	mov    ebx,edx
c0001984:	31 c0                	xor    eax,eax
c0001986:	83 e3 fe             	and    ebx,0xfffffffe
c0001989:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000198e:	74 06                	je     c0001996 <dlmalloc_usable_size+0x2f>
c0001990:	83 e2 fc             	and    edx,0xfffffffc
c0001993:	8d 42 fc             	lea    eax,[edx-0x4]
c0001996:	5b                   	pop    ebx
c0001997:	c3                   	ret    

c0001998 <dlmallinfo>:
c0001998:	55                   	push   ebp
c0001999:	57                   	push   edi
c000199a:	56                   	push   esi
c000199b:	53                   	push   ebx
c000199c:	83 ec 08             	sub    esp,0x8
c000199f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019a3:	83 3d ac 62 02 c0 00 	cmp    DWORD PTR ds:0xc00262ac,0x0
c00019aa:	75 0a                	jne    c00019b6 <dlmallinfo+0x1e>
c00019ac:	b8 80 62 02 c0       	mov    eax,0xc0026280
c00019b1:	e8 23 f2 ff ff       	call   c0000bd9 <malloc_consolidate>
c00019b6:	a1 ac 62 02 c0       	mov    eax,ds:0xc00262ac
c00019bb:	31 ed                	xor    ebp,ebp
c00019bd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019c0:	31 c9                	xor    ecx,ecx
c00019c2:	83 e0 fc             	and    eax,0xfffffffc
c00019c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019c9:	31 c0                	xor    eax,eax
c00019cb:	8b 14 85 84 62 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9d7c]
c00019d2:	85 d2                	test   edx,edx
c00019d4:	74 0e                	je     c00019e4 <dlmallinfo+0x4c>
c00019d6:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019d9:	45                   	inc    ebp
c00019da:	83 e6 fc             	and    esi,0xfffffffc
c00019dd:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019e0:	01 f1                	add    ecx,esi
c00019e2:	eb ee                	jmp    c00019d2 <dlmallinfo+0x3a>
c00019e4:	40                   	inc    eax
c00019e5:	83 f8 0a             	cmp    eax,0xa
c00019e8:	75 e1                	jne    c00019cb <dlmallinfo+0x33>
c00019ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019ee:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019f5:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019f8:	b8 b4 62 02 c0       	mov    eax,0xc00262b4
c00019fd:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a00:	39 f0                	cmp    eax,esi
c0001a02:	74 10                	je     c0001a14 <dlmallinfo+0x7c>
c0001a04:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a07:	ff 04 24             	inc    DWORD PTR [esp]
c0001a0a:	83 e7 fc             	and    edi,0xfffffffc
c0001a0d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a10:	01 fa                	add    edx,edi
c0001a12:	eb ec                	jmp    c0001a00 <dlmallinfo+0x68>
c0001a14:	83 c0 08             	add    eax,0x8
c0001a17:	3d ac 65 02 c0       	cmp    eax,0xc00265ac
c0001a1c:	75 df                	jne    c00019fd <dlmallinfo+0x65>
c0001a1e:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a21:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a24:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a27:	a1 e8 65 02 c0       	mov    eax,ds:0xc00265e8
c0001a2c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a2f:	89 03                	mov    DWORD PTR [ebx],eax
c0001a31:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a34:	8b 35 d0 65 02 c0    	mov    esi,DWORD PTR ds:0xc00265d0
c0001a3a:	29 d0                	sub    eax,edx
c0001a3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a3f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a42:	8b 35 e4 65 02 c0    	mov    esi,DWORD PTR ds:0xc00265e4
c0001a48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a4c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a4f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a52:	8b 35 f4 65 02 c0    	mov    esi,DWORD PTR ds:0xc00265f4
c0001a58:	89 d8                	mov    eax,ebx
c0001a5a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a5d:	83 c4 08             	add    esp,0x8
c0001a60:	5b                   	pop    ebx
c0001a61:	5e                   	pop    esi
c0001a62:	5f                   	pop    edi
c0001a63:	5d                   	pop    ebp
c0001a64:	c2 04 00             	ret    0x4

c0001a67 <dlmalloc_stats>:
c0001a67:	83 ec 30             	sub    esp,0x30
c0001a6a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a6e:	50                   	push   eax
c0001a6f:	e8 24 ff ff ff       	call   c0001998 <dlmallinfo>
c0001a74:	83 c4 30             	add    esp,0x30
c0001a77:	c3                   	ret    

c0001a78 <dlmallopt>:
c0001a78:	56                   	push   esi
c0001a79:	b8 80 62 02 c0       	mov    eax,0xc0026280
c0001a7e:	53                   	push   ebx
c0001a7f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a87:	e8 4d f1 ff ff       	call   c0000bd9 <malloc_consolidate>
c0001a8c:	8d 46 04             	lea    eax,[esi+0x4]
c0001a8f:	83 f8 05             	cmp    eax,0x5
c0001a92:	77 67                	ja     c0001afb <dlmallopt+0x83>
c0001a94:	ff 24 85 44 25 02 c0 	jmp    DWORD PTR [eax*4-0x3ffddabc]
c0001a9b:	83 fb 50             	cmp    ebx,0x50
c0001a9e:	77 5b                	ja     c0001afb <dlmallopt+0x83>
c0001aa0:	ba 08 00 00 00       	mov    edx,0x8
c0001aa5:	85 db                	test   ebx,ebx
c0001aa7:	74 12                	je     c0001abb <dlmallopt+0x43>
c0001aa9:	83 c3 0b             	add    ebx,0xb
c0001aac:	ba 10 00 00 00       	mov    edx,0x10
c0001ab1:	83 fb 0f             	cmp    ebx,0xf
c0001ab4:	76 05                	jbe    c0001abb <dlmallopt+0x43>
c0001ab6:	89 da                	mov    edx,ebx
c0001ab8:	83 e2 f8             	and    edx,0xfffffff8
c0001abb:	a1 80 62 02 c0       	mov    eax,ds:0xc0026280
c0001ac0:	83 e0 03             	and    eax,0x3
c0001ac3:	09 d0                	or     eax,edx
c0001ac5:	a3 80 62 02 c0       	mov    ds:0xc0026280,eax
c0001aca:	eb 31                	jmp    c0001afd <dlmallopt+0x85>
c0001acc:	89 1d c4 65 02 c0    	mov    DWORD PTR ds:0xc00265c4,ebx
c0001ad2:	eb 06                	jmp    c0001ada <dlmallopt+0x62>
c0001ad4:	89 1d c8 65 02 c0    	mov    DWORD PTR ds:0xc00265c8,ebx
c0001ada:	be 01 00 00 00       	mov    esi,0x1
c0001adf:	eb 1c                	jmp    c0001afd <dlmallopt+0x85>
c0001ae1:	89 1d cc 65 02 c0    	mov    DWORD PTR ds:0xc00265cc,ebx
c0001ae7:	eb f1                	jmp    c0001ada <dlmallopt+0x62>
c0001ae9:	31 f6                	xor    esi,esi
c0001aeb:	85 db                	test   ebx,ebx
c0001aed:	75 0e                	jne    c0001afd <dlmallopt+0x85>
c0001aef:	c7 05 d4 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00265d4,0x0
c0001af9:	eb df                	jmp    c0001ada <dlmallopt+0x62>
c0001afb:	31 f6                	xor    esi,esi
c0001afd:	89 f0                	mov    eax,esi
c0001aff:	5b                   	pop    ebx
c0001b00:	5e                   	pop    esi
c0001b01:	c3                   	ret    

c0001b02 <disk_status>:
c0001b02:	31 c0                	xor    eax,eax
c0001b04:	c3                   	ret    

c0001b05 <disk_initialize>:
c0001b05:	31 c0                	xor    eax,eax
c0001b07:	c3                   	ret    

c0001b08 <disk_read>:
c0001b08:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b0d:	0f b6 04 85 60 9d 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd62a0]
c0001b15:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b19:	e9 7e 97 01 00       	jmp    c001b29c <fatWrapperReadDisk>

c0001b1e <disk_write>:
c0001b1e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b23:	0f b6 04 85 60 9d 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd62a0]
c0001b2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b2f:	e9 b0 97 01 00       	jmp    c001b2e4 <fatWrapperWriteDisk>

c0001b34 <disk_ioctl>:
c0001b34:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b3d:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b42:	0f b6 04 85 60 9d 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd62a0]
c0001b4a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b4e:	e9 d9 97 01 00       	jmp    c001b32c <fatWrapperIoctl>

c0001b53 <ld_word>:
c0001b53:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b57:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b5a:	c1 e2 08             	shl    edx,0x8
c0001b5d:	09 d0                	or     eax,edx
c0001b5f:	c3                   	ret    

c0001b60 <ld_dword>:
c0001b60:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b64:	89 d1                	mov    ecx,edx
c0001b66:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b6a:	c1 e1 08             	shl    ecx,0x8
c0001b6d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b70:	09 ca                	or     edx,ecx
c0001b72:	c1 e2 08             	shl    edx,0x8
c0001b75:	09 d0                	or     eax,edx
c0001b77:	c3                   	ret    

c0001b78 <ld_qword>:
c0001b78:	57                   	push   edi
c0001b79:	56                   	push   esi
c0001b7a:	53                   	push   ebx
c0001b7b:	31 db                	xor    ebx,ebx
c0001b7d:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b80:	89 df                	mov    edi,ebx
c0001b82:	89 ce                	mov    esi,ecx
c0001b84:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001b88:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b8c:	c1 e6 08             	shl    esi,0x8
c0001b8f:	09 f2                	or     edx,esi
c0001b91:	89 d6                	mov    esi,edx
c0001b93:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001b97:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b9b:	c1 e6 08             	shl    esi,0x8
c0001b9e:	09 f2                	or     edx,esi
c0001ba0:	89 d6                	mov    esi,edx
c0001ba2:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ba6:	0f a4 f7 08          	shld   edi,esi,0x8
c0001baa:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bad:	c1 e6 08             	shl    esi,0x8
c0001bb0:	89 fb                	mov    ebx,edi
c0001bb2:	09 f2                	or     edx,esi
c0001bb4:	89 d1                	mov    ecx,edx
c0001bb6:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bba:	c1 e1 08             	shl    ecx,0x8
c0001bbd:	89 da                	mov    edx,ebx
c0001bbf:	09 c8                	or     eax,ecx
c0001bc1:	5b                   	pop    ebx
c0001bc2:	5e                   	pop    esi
c0001bc3:	5f                   	pop    edi
c0001bc4:	c3                   	ret    

c0001bc5 <st_word>:
c0001bc5:	66 89 10             	mov    WORD PTR [eax],dx
c0001bc8:	c3                   	ret    

c0001bc9 <st_dword>:
c0001bc9:	89 10                	mov    DWORD PTR [eax],edx
c0001bcb:	c3                   	ret    

c0001bcc <st_qword>:
c0001bcc:	89 10                	mov    DWORD PTR [eax],edx
c0001bce:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001bd1:	c3                   	ret    

c0001bd2 <mem_cpy>:
c0001bd2:	85 c9                	test   ecx,ecx
c0001bd4:	74 10                	je     c0001be6 <mem_cpy+0x14>
c0001bd6:	57                   	push   edi
c0001bd7:	01 c1                	add    ecx,eax
c0001bd9:	56                   	push   esi
c0001bda:	89 c7                	mov    edi,eax
c0001bdc:	89 d6                	mov    esi,edx
c0001bde:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001bdf:	39 f9                	cmp    ecx,edi
c0001be1:	75 fb                	jne    c0001bde <mem_cpy+0xc>
c0001be3:	5e                   	pop    esi
c0001be4:	5f                   	pop    edi
c0001be5:	c3                   	ret    
c0001be6:	c3                   	ret    

c0001be7 <mem_set>:
c0001be7:	01 c1                	add    ecx,eax
c0001be9:	40                   	inc    eax
c0001bea:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001bed:	39 c8                	cmp    eax,ecx
c0001bef:	75 f8                	jne    c0001be9 <mem_set+0x2>
c0001bf1:	c3                   	ret    

c0001bf2 <mem_cmp>:
c0001bf2:	57                   	push   edi
c0001bf3:	56                   	push   esi
c0001bf4:	89 c6                	mov    esi,eax
c0001bf6:	53                   	push   ebx
c0001bf7:	46                   	inc    esi
c0001bf8:	42                   	inc    edx
c0001bf9:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001bfd:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c01:	29 fb                	sub    ebx,edi
c0001c03:	89 cf                	mov    edi,ecx
c0001c05:	29 f7                	sub    edi,esi
c0001c07:	01 c7                	add    edi,eax
c0001c09:	74 04                	je     c0001c0f <mem_cmp+0x1d>
c0001c0b:	85 db                	test   ebx,ebx
c0001c0d:	74 e8                	je     c0001bf7 <mem_cmp+0x5>
c0001c0f:	89 d8                	mov    eax,ebx
c0001c11:	5b                   	pop    ebx
c0001c12:	5e                   	pop    esi
c0001c13:	5f                   	pop    edi
c0001c14:	c3                   	ret    

c0001c15 <chk_chr>:
c0001c15:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c18:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c1b:	74 07                	je     c0001c24 <chk_chr+0xf>
c0001c1d:	39 d1                	cmp    ecx,edx
c0001c1f:	74 03                	je     c0001c24 <chk_chr+0xf>
c0001c21:	40                   	inc    eax
c0001c22:	eb f1                	jmp    c0001c15 <chk_chr>
c0001c24:	89 c8                	mov    eax,ecx
c0001c26:	c3                   	ret    

c0001c27 <dbc_1st>:
c0001c27:	31 c0                	xor    eax,eax
c0001c29:	c3                   	ret    

c0001c2a <dbc_2nd>:
c0001c2a:	31 c0                	xor    eax,eax
c0001c2c:	c3                   	ret    

c0001c2d <tchar2uni>:
c0001c2d:	57                   	push   edi
c0001c2e:	89 c7                	mov    edi,eax
c0001c30:	56                   	push   esi
c0001c31:	53                   	push   ebx
c0001c32:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c34:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c36:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c39:	84 c9                	test   cl,cl
c0001c3b:	78 0a                	js     c0001c47 <tchar2uni+0x1a>
c0001c3d:	0f b6 d1             	movzx  edx,cl
c0001c40:	89 f3                	mov    ebx,esi
c0001c42:	e9 9f 00 00 00       	jmp    c0001ce6 <tchar2uni+0xb9>
c0001c47:	88 ca                	mov    dl,cl
c0001c49:	83 e2 e0             	and    edx,0xffffffe0
c0001c4c:	80 fa c0             	cmp    dl,0xc0
c0001c4f:	75 0c                	jne    c0001c5d <tchar2uni+0x30>
c0001c51:	89 ca                	mov    edx,ecx
c0001c53:	b9 01 00 00 00       	mov    ecx,0x1
c0001c58:	83 e2 1f             	and    edx,0x1f
c0001c5b:	eb 2e                	jmp    c0001c8b <tchar2uni+0x5e>
c0001c5d:	88 ca                	mov    dl,cl
c0001c5f:	83 e2 f0             	and    edx,0xfffffff0
c0001c62:	80 fa e0             	cmp    dl,0xe0
c0001c65:	75 0c                	jne    c0001c73 <tchar2uni+0x46>
c0001c67:	89 ca                	mov    edx,ecx
c0001c69:	b9 02 00 00 00       	mov    ecx,0x2
c0001c6e:	83 e2 0f             	and    edx,0xf
c0001c71:	eb 18                	jmp    c0001c8b <tchar2uni+0x5e>
c0001c73:	88 ca                	mov    dl,cl
c0001c75:	83 e2 f8             	and    edx,0xfffffff8
c0001c78:	88 d0                	mov    al,dl
c0001c7a:	83 ca ff             	or     edx,0xffffffff
c0001c7d:	3c f0                	cmp    al,0xf0
c0001c7f:	75 6c                	jne    c0001ced <tchar2uni+0xc0>
c0001c81:	89 ca                	mov    edx,ecx
c0001c83:	b9 03 00 00 00       	mov    ecx,0x3
c0001c88:	83 e2 07             	and    edx,0x7
c0001c8b:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c8f:	46                   	inc    esi
c0001c90:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c93:	88 c8                	mov    al,cl
c0001c95:	83 e0 c0             	and    eax,0xffffffc0
c0001c98:	3c 80                	cmp    al,0x80
c0001c9a:	75 4e                	jne    c0001cea <tchar2uni+0xbd>
c0001c9c:	c1 e2 06             	shl    edx,0x6
c0001c9f:	83 e1 3f             	and    ecx,0x3f
c0001ca2:	09 ca                	or     edx,ecx
c0001ca4:	39 de                	cmp    esi,ebx
c0001ca6:	75 e7                	jne    c0001c8f <tchar2uni+0x62>
c0001ca8:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cab:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cb1:	77 37                	ja     c0001cea <tchar2uni+0xbd>
c0001cb3:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cb9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cbf:	76 29                	jbe    c0001cea <tchar2uni+0xbd>
c0001cc1:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001cc7:	76 1d                	jbe    c0001ce6 <tchar2uni+0xb9>
c0001cc9:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ccf:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001cd5:	c1 e1 06             	shl    ecx,0x6
c0001cd8:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001cde:	09 ca                	or     edx,ecx
c0001ce0:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001ce6:	89 1f                	mov    DWORD PTR [edi],ebx
c0001ce8:	eb 03                	jmp    c0001ced <tchar2uni+0xc0>
c0001cea:	83 ca ff             	or     edx,0xffffffff
c0001ced:	5b                   	pop    ebx
c0001cee:	89 d0                	mov    eax,edx
c0001cf0:	5e                   	pop    esi
c0001cf1:	5f                   	pop    edi
c0001cf2:	c3                   	ret    

c0001cf3 <put_utf>:
c0001cf3:	53                   	push   ebx
c0001cf4:	83 f8 7f             	cmp    eax,0x7f
c0001cf7:	89 c3                	mov    ebx,eax
c0001cf9:	b0 00                	mov    al,0x0
c0001cfb:	77 11                	ja     c0001d0e <put_utf+0x1b>
c0001cfd:	85 c9                	test   ecx,ecx
c0001cff:	0f 84 e5 00 00 00    	je     c0001dea <put_utf+0xf7>
c0001d05:	88 1a                	mov    BYTE PTR [edx],bl
c0001d07:	b0 01                	mov    al,0x1
c0001d09:	e9 dc 00 00 00       	jmp    c0001dea <put_utf+0xf7>
c0001d0e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d14:	77 23                	ja     c0001d39 <put_utf+0x46>
c0001d16:	83 f9 01             	cmp    ecx,0x1
c0001d19:	0f 86 cb 00 00 00    	jbe    c0001dea <put_utf+0xf7>
c0001d1f:	89 d8                	mov    eax,ebx
c0001d21:	83 e3 3f             	and    ebx,0x3f
c0001d24:	c1 e8 06             	shr    eax,0x6
c0001d27:	83 cb 80             	or     ebx,0xffffff80
c0001d2a:	83 c8 c0             	or     eax,0xffffffc0
c0001d2d:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d30:	88 02                	mov    BYTE PTR [edx],al
c0001d32:	b0 02                	mov    al,0x2
c0001d34:	e9 b1 00 00 00       	jmp    c0001dea <put_utf+0xf7>
c0001d39:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d3f:	77 40                	ja     c0001d81 <put_utf+0x8e>
c0001d41:	83 f9 02             	cmp    ecx,0x2
c0001d44:	0f 86 a0 00 00 00    	jbe    c0001dea <put_utf+0xf7>
c0001d4a:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d50:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d56:	0f 86 8e 00 00 00    	jbe    c0001dea <put_utf+0xf7>
c0001d5c:	89 d8                	mov    eax,ebx
c0001d5e:	c1 e8 0c             	shr    eax,0xc
c0001d61:	83 c8 e0             	or     eax,0xffffffe0
c0001d64:	88 02                	mov    BYTE PTR [edx],al
c0001d66:	89 d8                	mov    eax,ebx
c0001d68:	83 e3 3f             	and    ebx,0x3f
c0001d6b:	c1 e8 06             	shr    eax,0x6
c0001d6e:	83 cb 80             	or     ebx,0xffffff80
c0001d71:	83 e0 3f             	and    eax,0x3f
c0001d74:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d77:	83 c8 80             	or     eax,0xffffff80
c0001d7a:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d7d:	b0 03                	mov    al,0x3
c0001d7f:	eb 69                	jmp    c0001dea <put_utf+0xf7>
c0001d81:	83 f9 03             	cmp    ecx,0x3
c0001d84:	76 64                	jbe    c0001dea <put_utf+0xf7>
c0001d86:	89 d9                	mov    ecx,ebx
c0001d88:	0f b7 c3             	movzx  eax,bx
c0001d8b:	66 31 c9             	xor    cx,cx
c0001d8e:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d94:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001d9a:	c1 e9 06             	shr    ecx,0x6
c0001d9d:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001da3:	77 43                	ja     c0001de8 <put_utf+0xf5>
c0001da5:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001dab:	77 3b                	ja     c0001de8 <put_utf+0xf5>
c0001dad:	09 cb                	or     ebx,ecx
c0001daf:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001db5:	89 d8                	mov    eax,ebx
c0001db7:	c1 e8 12             	shr    eax,0x12
c0001dba:	83 c8 f0             	or     eax,0xfffffff0
c0001dbd:	88 02                	mov    BYTE PTR [edx],al
c0001dbf:	89 d8                	mov    eax,ebx
c0001dc1:	c1 e8 0c             	shr    eax,0xc
c0001dc4:	83 e0 3f             	and    eax,0x3f
c0001dc7:	83 c8 80             	or     eax,0xffffff80
c0001dca:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001dcd:	89 d8                	mov    eax,ebx
c0001dcf:	83 e3 3f             	and    ebx,0x3f
c0001dd2:	c1 e8 06             	shr    eax,0x6
c0001dd5:	83 cb 80             	or     ebx,0xffffff80
c0001dd8:	83 e0 3f             	and    eax,0x3f
c0001ddb:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001dde:	83 c8 80             	or     eax,0xffffff80
c0001de1:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001de4:	b0 04                	mov    al,0x4
c0001de6:	eb 02                	jmp    c0001dea <put_utf+0xf7>
c0001de8:	31 c0                	xor    eax,eax
c0001dea:	5b                   	pop    ebx
c0001deb:	c3                   	ret    

c0001dec <clst2sect>:
c0001dec:	89 c1                	mov    ecx,eax
c0001dee:	83 ea 02             	sub    edx,0x2
c0001df1:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001df4:	83 e8 02             	sub    eax,0x2
c0001df7:	39 d0                	cmp    eax,edx
c0001df9:	76 0d                	jbe    c0001e08 <clst2sect+0x1c>
c0001dfb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001dff:	f7 e2                	mul    edx
c0001e01:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e04:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e07:	c3                   	ret    
c0001e08:	31 c0                	xor    eax,eax
c0001e0a:	31 d2                	xor    edx,edx
c0001e0c:	c3                   	ret    

c0001e0d <clmt_clust>:
c0001e0d:	57                   	push   edi
c0001e0e:	89 cf                	mov    edi,ecx
c0001e10:	56                   	push   esi
c0001e11:	89 d6                	mov    esi,edx
c0001e13:	53                   	push   ebx
c0001e14:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e18:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e1b:	89 f2                	mov    edx,esi
c0001e1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e1f:	c1 ef 09             	shr    edi,0x9
c0001e22:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e26:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e29:	89 f9                	mov    ecx,edi
c0001e2b:	31 ff                	xor    edi,edi
c0001e2d:	57                   	push   edi
c0001e2e:	56                   	push   esi
c0001e2f:	51                   	push   ecx
c0001e30:	52                   	push   edx
c0001e31:	e8 1a f9 01 00       	call   c0021750 <__udivdi3>
c0001e36:	83 c4 10             	add    esp,0x10
c0001e39:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e3b:	85 d2                	test   edx,edx
c0001e3d:	74 10                	je     c0001e4f <clmt_clust+0x42>
c0001e3f:	39 d0                	cmp    eax,edx
c0001e41:	72 07                	jb     c0001e4a <clmt_clust+0x3d>
c0001e43:	29 d0                	sub    eax,edx
c0001e45:	83 c3 08             	add    ebx,0x8
c0001e48:	eb ef                	jmp    c0001e39 <clmt_clust+0x2c>
c0001e4a:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e4d:	89 c2                	mov    edx,eax
c0001e4f:	5b                   	pop    ebx
c0001e50:	89 d0                	mov    eax,edx
c0001e52:	5e                   	pop    esi
c0001e53:	5f                   	pop    edi
c0001e54:	c3                   	ret    

c0001e55 <pick_lfn>:
c0001e55:	55                   	push   ebp
c0001e56:	57                   	push   edi
c0001e57:	56                   	push   esi
c0001e58:	89 d6                	mov    esi,edx
c0001e5a:	53                   	push   ebx
c0001e5b:	89 c3                	mov    ebx,eax
c0001e5d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e60:	e8 ee fc ff ff       	call   c0001b53 <ld_word>
c0001e65:	66 85 c0             	test   ax,ax
c0001e68:	74 04                	je     c0001e6e <pick_lfn+0x19>
c0001e6a:	31 c0                	xor    eax,eax
c0001e6c:	eb 5c                	jmp    c0001eca <pick_lfn+0x75>
c0001e6e:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e71:	bd 01 00 00 00       	mov    ebp,0x1
c0001e76:	83 e1 bf             	and    ecx,0xffffffbf
c0001e79:	31 ff                	xor    edi,edi
c0001e7b:	49                   	dec    ecx
c0001e7c:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e7f:	0f b6 87 60 26 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdd9a0]
c0001e86:	01 f0                	add    eax,esi
c0001e88:	e8 c6 fc ff ff       	call   c0001b53 <ld_word>
c0001e8d:	66 85 ed             	test   bp,bp
c0001e90:	74 11                	je     c0001ea3 <pick_lfn+0x4e>
c0001e92:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001e98:	77 d0                	ja     c0001e6a <pick_lfn+0x15>
c0001e9a:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001e9e:	89 c5                	mov    ebp,eax
c0001ea0:	41                   	inc    ecx
c0001ea1:	eb 04                	jmp    c0001ea7 <pick_lfn+0x52>
c0001ea3:	66 40                	inc    ax
c0001ea5:	75 c3                	jne    c0001e6a <pick_lfn+0x15>
c0001ea7:	47                   	inc    edi
c0001ea8:	83 ff 0d             	cmp    edi,0xd
c0001eab:	75 d2                	jne    c0001e7f <pick_lfn+0x2a>
c0001ead:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001eb0:	74 13                	je     c0001ec5 <pick_lfn+0x70>
c0001eb2:	66 85 ed             	test   bp,bp
c0001eb5:	74 0e                	je     c0001ec5 <pick_lfn+0x70>
c0001eb7:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ebd:	77 ab                	ja     c0001e6a <pick_lfn+0x15>
c0001ebf:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ec5:	b8 01 00 00 00       	mov    eax,0x1
c0001eca:	5b                   	pop    ebx
c0001ecb:	5e                   	pop    esi
c0001ecc:	5f                   	pop    edi
c0001ecd:	5d                   	pop    ebp
c0001ece:	c3                   	ret    

c0001ecf <put_lfn>:
c0001ecf:	55                   	push   ebp
c0001ed0:	31 ed                	xor    ebp,ebp
c0001ed2:	57                   	push   edi
c0001ed3:	89 d7                	mov    edi,edx
c0001ed5:	56                   	push   esi
c0001ed6:	31 f6                	xor    esi,esi
c0001ed8:	53                   	push   ebx
c0001ed9:	83 ec 08             	sub    esp,0x8
c0001edc:	89 04 24             	mov    DWORD PTR [esp],eax
c0001edf:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ee3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ee7:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001eed:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ef0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001ef3:	31 d2                	xor    edx,edx
c0001ef5:	e8 cb fc ff ff       	call   c0001bc5 <st_word>
c0001efa:	0f b6 d9             	movzx  ebx,cl
c0001efd:	4b                   	dec    ebx
c0001efe:	6b db 0d             	imul   ebx,ebx,0xd
c0001f01:	66 83 fe ff          	cmp    si,0xffff
c0001f05:	74 08                	je     c0001f0f <put_lfn+0x40>
c0001f07:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f0a:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f0e:	43                   	inc    ebx
c0001f0f:	0f b6 85 60 26 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdd9a0]
c0001f16:	0f b7 d6             	movzx  edx,si
c0001f19:	01 f8                	add    eax,edi
c0001f1b:	e8 a5 fc ff ff       	call   c0001bc5 <st_word>
c0001f20:	66 85 f6             	test   si,si
c0001f23:	75 03                	jne    c0001f28 <put_lfn+0x59>
c0001f25:	83 ce ff             	or     esi,0xffffffff
c0001f28:	45                   	inc    ebp
c0001f29:	83 fd 0d             	cmp    ebp,0xd
c0001f2c:	75 d3                	jne    c0001f01 <put_lfn+0x32>
c0001f2e:	66 46                	inc    si
c0001f30:	74 0a                	je     c0001f3c <put_lfn+0x6d>
c0001f32:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f35:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f3a:	75 09                	jne    c0001f45 <put_lfn+0x76>
c0001f3c:	88 c8                	mov    al,cl
c0001f3e:	83 c8 40             	or     eax,0x40
c0001f41:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f45:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f49:	88 07                	mov    BYTE PTR [edi],al
c0001f4b:	83 c4 08             	add    esp,0x8
c0001f4e:	5b                   	pop    ebx
c0001f4f:	5e                   	pop    esi
c0001f50:	5f                   	pop    edi
c0001f51:	5d                   	pop    ebp
c0001f52:	c3                   	ret    

c0001f53 <gen_numname>:
c0001f53:	57                   	push   edi
c0001f54:	89 cf                	mov    edi,ecx
c0001f56:	56                   	push   esi
c0001f57:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f5c:	53                   	push   ebx
c0001f5d:	89 c6                	mov    esi,eax
c0001f5f:	83 ec 10             	sub    esp,0x10
c0001f62:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f66:	e8 67 fc ff ff       	call   c0001bd2 <mem_cpy>
c0001f6b:	83 fb 05             	cmp    ebx,0x5
c0001f6e:	76 2d                	jbe    c0001f9d <gen_numname+0x4a>
c0001f70:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 25                	je     c0001f9d <gen_numname+0x4a>
c0001f78:	83 c7 02             	add    edi,0x2
c0001f7b:	ba 10 00 00 00       	mov    edx,0x10
c0001f80:	01 db                	add    ebx,ebx
c0001f82:	89 c1                	mov    ecx,eax
c0001f84:	66 d1 e8             	shr    ax,1
c0001f87:	83 e1 01             	and    ecx,0x1
c0001f8a:	01 cb                	add    ebx,ecx
c0001f8c:	0f ba e3 10          	bt     ebx,0x10
c0001f90:	73 06                	jae    c0001f98 <gen_numname+0x45>
c0001f92:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001f98:	4a                   	dec    edx
c0001f99:	75 e5                	jne    c0001f80 <gen_numname+0x2d>
c0001f9b:	eb d3                	jmp    c0001f70 <gen_numname+0x1d>
c0001f9d:	b8 07 00 00 00       	mov    eax,0x7
c0001fa2:	88 d9                	mov    cl,bl
c0001fa4:	83 e1 0f             	and    ecx,0xf
c0001fa7:	8d 51 30             	lea    edx,[ecx+0x30]
c0001faa:	80 fa 39             	cmp    dl,0x39
c0001fad:	76 03                	jbe    c0001fb2 <gen_numname+0x5f>
c0001faf:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fb2:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fb5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fb9:	89 da                	mov    edx,ebx
c0001fbb:	c1 ea 04             	shr    edx,0x4
c0001fbe:	83 fb 0f             	cmp    ebx,0xf
c0001fc1:	76 06                	jbe    c0001fc9 <gen_numname+0x76>
c0001fc3:	89 c8                	mov    eax,ecx
c0001fc5:	89 d3                	mov    ebx,edx
c0001fc7:	eb d9                	jmp    c0001fa2 <gen_numname+0x4f>
c0001fc9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fce:	31 d2                	xor    edx,edx
c0001fd0:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001fd3:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fd6:	39 ca                	cmp    edx,ecx
c0001fd8:	73 18                	jae    c0001ff2 <gen_numname+0x9f>
c0001fda:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fdd:	3c 20                	cmp    al,0x20
c0001fdf:	74 11                	je     c0001ff2 <gen_numname+0x9f>
c0001fe1:	e8 41 fc ff ff       	call   c0001c27 <dbc_1st>
c0001fe6:	85 c0                	test   eax,eax
c0001fe8:	74 05                	je     c0001fef <gen_numname+0x9c>
c0001fea:	39 d3                	cmp    ebx,edx
c0001fec:	74 04                	je     c0001ff2 <gen_numname+0x9f>
c0001fee:	42                   	inc    edx
c0001fef:	42                   	inc    edx
c0001ff0:	eb e1                	jmp    c0001fd3 <gen_numname+0x80>
c0001ff2:	b0 20                	mov    al,0x20
c0001ff4:	83 f9 07             	cmp    ecx,0x7
c0001ff7:	77 05                	ja     c0001ffe <gen_numname+0xab>
c0001ff9:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ffd:	41                   	inc    ecx
c0001ffe:	42                   	inc    edx
c0001fff:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002003:	83 fa 07             	cmp    edx,0x7
c0002006:	76 ea                	jbe    c0001ff2 <gen_numname+0x9f>
c0002008:	83 c4 10             	add    esp,0x10
c000200b:	5b                   	pop    ebx
c000200c:	5e                   	pop    esi
c000200d:	5f                   	pop    edi
c000200e:	c3                   	ret    

c000200f <sum_sfn>:
c000200f:	31 c9                	xor    ecx,ecx
c0002011:	31 d2                	xor    edx,edx
c0002013:	d0 ca                	ror    dl,1
c0002015:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002018:	41                   	inc    ecx
c0002019:	83 f9 0b             	cmp    ecx,0xb
c000201c:	75 f5                	jne    c0002013 <sum_sfn+0x4>
c000201e:	88 d0                	mov    al,dl
c0002020:	c3                   	ret    

c0002021 <xdir_sum>:
c0002021:	56                   	push   esi
c0002022:	31 c9                	xor    ecx,ecx
c0002024:	53                   	push   ebx
c0002025:	31 d2                	xor    edx,edx
c0002027:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c000202b:	43                   	inc    ebx
c000202c:	c1 e3 05             	shl    ebx,0x5
c000202f:	83 fa 02             	cmp    edx,0x2
c0002032:	74 0b                	je     c000203f <xdir_sum+0x1e>
c0002034:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002038:	66 d1 c9             	ror    cx,1
c000203b:	01 f1                	add    ecx,esi
c000203d:	eb 05                	jmp    c0002044 <xdir_sum+0x23>
c000203f:	ba 03 00 00 00       	mov    edx,0x3
c0002044:	42                   	inc    edx
c0002045:	39 d3                	cmp    ebx,edx
c0002047:	77 e6                	ja     c000202f <xdir_sum+0xe>
c0002049:	89 c8                	mov    eax,ecx
c000204b:	5b                   	pop    ebx
c000204c:	5e                   	pop    esi
c000204d:	c3                   	ret    

c000204e <xsum32>:
c000204e:	d1 ca                	ror    edx,1
c0002050:	0f b6 c0             	movzx  eax,al
c0002053:	01 d0                	add    eax,edx
c0002055:	c3                   	ret    

c0002056 <get_xfileinfo>:
c0002056:	55                   	push   ebp
c0002057:	31 c9                	xor    ecx,ecx
c0002059:	57                   	push   edi
c000205a:	bd 40 00 00 00       	mov    ebp,0x40
c000205f:	56                   	push   esi
c0002060:	31 ff                	xor    edi,edi
c0002062:	53                   	push   ebx
c0002063:	89 c6                	mov    esi,eax
c0002065:	83 ec 0c             	sub    esp,0xc
c0002068:	89 d3                	mov    ebx,edx
c000206a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002071:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002075:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002078:	76 6d                	jbe    c00020e7 <get_xfileinfo+0x91>
c000207a:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002080:	76 0b                	jbe    c000208d <get_xfileinfo+0x37>
c0002082:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002086:	bf 01 00 00 00       	mov    edi,0x1
c000208b:	eb 63                	jmp    c00020f0 <get_xfileinfo+0x9a>
c000208d:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002093:	75 03                	jne    c0002098 <get_xfileinfo+0x42>
c0002095:	83 c5 02             	add    ebp,0x2
c0002098:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000209b:	83 c5 02             	add    ebp,0x2
c000209e:	e8 b0 fa ff ff       	call   c0001b53 <ld_word>
c00020a3:	ff 04 24             	inc    DWORD PTR [esp]
c00020a6:	66 85 c9             	test   cx,cx
c00020a9:	75 0d                	jne    c00020b8 <get_xfileinfo+0x62>
c00020ab:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020b1:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020b6:	76 2b                	jbe    c00020e3 <get_xfileinfo+0x8d>
c00020b8:	c1 e1 10             	shl    ecx,0x10
c00020bb:	ba ff 00 00 00       	mov    edx,0xff
c00020c0:	0f b7 c0             	movzx  eax,ax
c00020c3:	29 fa                	sub    edx,edi
c00020c5:	09 c8                	or     eax,ecx
c00020c7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020cb:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020cf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020d3:	e8 1b fc ff ff       	call   c0001cf3 <put_utf>
c00020d8:	84 c0                	test   al,al
c00020da:	74 a6                	je     c0002082 <get_xfileinfo+0x2c>
c00020dc:	0f b6 c0             	movzx  eax,al
c00020df:	01 c7                	add    edi,eax
c00020e1:	31 c0                	xor    eax,eax
c00020e3:	89 c1                	mov    ecx,eax
c00020e5:	eb 8a                	jmp    c0002071 <get_xfileinfo+0x1b>
c00020e7:	85 ff                	test   edi,edi
c00020e9:	74 97                	je     c0002082 <get_xfileinfo+0x2c>
c00020eb:	66 85 c9             	test   cx,cx
c00020ee:	75 92                	jne    c0002082 <get_xfileinfo+0x2c>
c00020f0:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00020f5:	31 c0                	xor    eax,eax
c00020f7:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002100:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002103:	80 e1 10             	and    cl,0x10
c0002106:	75 08                	jne    c0002110 <get_xfileinfo+0xba>
c0002108:	8d 46 38             	lea    eax,[esi+0x38]
c000210b:	e8 68 fa ff ff       	call   c0001b78 <ld_qword>
c0002110:	89 03                	mov    DWORD PTR [ebx],eax
c0002112:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002115:	8d 46 0c             	lea    eax,[esi+0xc]
c0002118:	e8 36 fa ff ff       	call   c0001b53 <ld_word>
c000211d:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002121:	8d 46 0e             	lea    eax,[esi+0xe]
c0002124:	e8 2a fa ff ff       	call   c0001b53 <ld_word>
c0002129:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000212d:	83 c4 0c             	add    esp,0xc
c0002130:	5b                   	pop    ebx
c0002131:	5e                   	pop    esi
c0002132:	5f                   	pop    edi
c0002133:	5d                   	pop    ebp
c0002134:	c3                   	ret    

c0002135 <get_ldnumber>:
c0002135:	8b 10                	mov    edx,DWORD PTR [eax]
c0002137:	85 d2                	test   edx,edx
c0002139:	74 14                	je     c000214f <get_ldnumber+0x1a>
c000213b:	56                   	push   esi
c000213c:	53                   	push   ebx
c000213d:	89 d3                	mov    ebx,edx
c000213f:	43                   	inc    ebx
c0002140:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002143:	80 f9 1f             	cmp    cl,0x1f
c0002146:	76 0d                	jbe    c0002155 <get_ldnumber+0x20>
c0002148:	80 f9 3a             	cmp    cl,0x3a
c000214b:	75 f2                	jne    c000213f <get_ldnumber+0xa>
c000214d:	eb 0a                	jmp    c0002159 <get_ldnumber+0x24>
c000214f:	83 c9 ff             	or     ecx,0xffffffff
c0002152:	89 c8                	mov    eax,ecx
c0002154:	c3                   	ret    
c0002155:	31 c9                	xor    ecx,ecx
c0002157:	eb 24                	jmp    c000217d <get_ldnumber+0x48>
c0002159:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000215c:	8d 4e d0             	lea    ecx,[esi-0x30]
c000215f:	80 f9 09             	cmp    cl,0x9
c0002162:	77 16                	ja     c000217a <get_ldnumber+0x45>
c0002164:	83 c2 02             	add    edx,0x2
c0002167:	83 c9 ff             	or     ecx,0xffffffff
c000216a:	39 d3                	cmp    ebx,edx
c000216c:	75 0f                	jne    c000217d <get_ldnumber+0x48>
c000216e:	89 f2                	mov    edx,esi
c0002170:	89 18                	mov    DWORD PTR [eax],ebx
c0002172:	0f be ca             	movsx  ecx,dl
c0002175:	83 e9 30             	sub    ecx,0x30
c0002178:	eb 03                	jmp    c000217d <get_ldnumber+0x48>
c000217a:	83 c9 ff             	or     ecx,0xffffffff
c000217d:	89 c8                	mov    eax,ecx
c000217f:	5b                   	pop    ebx
c0002180:	5e                   	pop    esi
c0002181:	c3                   	ret    

c0002182 <crc32>:
c0002182:	56                   	push   esi
c0002183:	89 d6                	mov    esi,edx
c0002185:	53                   	push   ebx
c0002186:	b2 01                	mov    dl,0x1
c0002188:	bb 08 00 00 00       	mov    ebx,0x8
c000218d:	89 f1                	mov    ecx,esi
c000218f:	84 d1                	test   cl,dl
c0002191:	0f 95 c1             	setne  cl
c0002194:	0f b6 c9             	movzx  ecx,cl
c0002197:	31 c1                	xor    ecx,eax
c0002199:	89 c8                	mov    eax,ecx
c000219b:	d1 e8                	shr    eax,1
c000219d:	80 e1 01             	and    cl,0x1
c00021a0:	74 05                	je     c00021a7 <crc32+0x25>
c00021a2:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021a7:	d1 e2                	shl    edx,1
c00021a9:	4b                   	dec    ebx
c00021aa:	75 e1                	jne    c000218d <crc32+0xb>
c00021ac:	5b                   	pop    ebx
c00021ad:	5e                   	pop    esi
c00021ae:	c3                   	ret    

c00021af <test_gpt_header>:
c00021af:	55                   	push   ebp
c00021b0:	b9 10 00 00 00       	mov    ecx,0x10
c00021b5:	57                   	push   edi
c00021b6:	ba 60 25 02 c0       	mov    edx,0xc0022560
c00021bb:	56                   	push   esi
c00021bc:	31 ff                	xor    edi,edi
c00021be:	53                   	push   ebx
c00021bf:	89 c3                	mov    ebx,eax
c00021c1:	e8 2c fa ff ff       	call   c0001bf2 <mem_cmp>
c00021c6:	85 c0                	test   eax,eax
c00021c8:	75 55                	jne    c000221f <test_gpt_header+0x70>
c00021ca:	89 c7                	mov    edi,eax
c00021cc:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021d1:	83 ce ff             	or     esi,0xffffffff
c00021d4:	31 d2                	xor    edx,edx
c00021d6:	83 fd 03             	cmp    ebp,0x3
c00021d9:	76 05                	jbe    c00021e0 <test_gpt_header+0x31>
c00021db:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021e0:	89 f0                	mov    eax,esi
c00021e2:	45                   	inc    ebp
c00021e3:	e8 9a ff ff ff       	call   c0002182 <crc32>
c00021e8:	83 fd 4c             	cmp    ebp,0x4c
c00021eb:	89 c6                	mov    esi,eax
c00021ed:	75 e5                	jne    c00021d4 <test_gpt_header+0x25>
c00021ef:	8d 43 10             	lea    eax,[ebx+0x10]
c00021f2:	f7 d6                	not    esi
c00021f4:	e8 67 f9 ff ff       	call   c0001b60 <ld_dword>
c00021f9:	39 c6                	cmp    esi,eax
c00021fb:	75 22                	jne    c000221f <test_gpt_header+0x70>
c00021fd:	8d 43 54             	lea    eax,[ebx+0x54]
c0002200:	e8 5b f9 ff ff       	call   c0001b60 <ld_dword>
c0002205:	83 c0 80             	add    eax,0xffffff80
c0002208:	75 15                	jne    c000221f <test_gpt_header+0x70>
c000220a:	8d 43 50             	lea    eax,[ebx+0x50]
c000220d:	e8 4e f9 ff ff       	call   c0001b60 <ld_dword>
c0002212:	3d 80 00 00 00       	cmp    eax,0x80
c0002217:	0f 96 c0             	setbe  al
c000221a:	0f b6 c0             	movzx  eax,al
c000221d:	89 c7                	mov    edi,eax
c000221f:	5b                   	pop    ebx
c0002220:	89 f8                	mov    eax,edi
c0002222:	5e                   	pop    esi
c0002223:	5f                   	pop    edi
c0002224:	5d                   	pop    ebp
c0002225:	c3                   	ret    

c0002226 <make_rand>:
c0002226:	56                   	push   esi
c0002227:	85 c0                	test   eax,eax
c0002229:	53                   	push   ebx
c000222a:	75 05                	jne    c0002231 <make_rand+0xb>
c000222c:	b8 01 00 00 00       	mov    eax,0x1
c0002231:	01 d1                	add    ecx,edx
c0002233:	bb 08 00 00 00       	mov    ebx,0x8
c0002238:	89 c6                	mov    esi,eax
c000223a:	d1 e8                	shr    eax,1
c000223c:	83 e6 01             	and    esi,0x1
c000223f:	85 f6                	test   esi,esi
c0002241:	74 05                	je     c0002248 <make_rand+0x22>
c0002243:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002248:	4b                   	dec    ebx
c0002249:	75 ed                	jne    c0002238 <make_rand+0x12>
c000224b:	42                   	inc    edx
c000224c:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000224f:	39 ca                	cmp    edx,ecx
c0002251:	75 e0                	jne    c0002233 <make_rand+0xd>
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <validate>:
c0002256:	56                   	push   esi
c0002257:	53                   	push   ebx
c0002258:	89 d6                	mov    esi,edx
c000225a:	51                   	push   ecx
c000225b:	85 c0                	test   eax,eax
c000225d:	75 09                	jne    c0002268 <validate+0x12>
c000225f:	b8 09 00 00 00       	mov    eax,0x9
c0002264:	31 c9                	xor    ecx,ecx
c0002266:	eb 2f                	jmp    c0002297 <validate+0x41>
c0002268:	89 c3                	mov    ebx,eax
c000226a:	8b 00                	mov    eax,DWORD PTR [eax]
c000226c:	85 c0                	test   eax,eax
c000226e:	74 ef                	je     c000225f <validate+0x9>
c0002270:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002273:	74 ea                	je     c000225f <validate+0x9>
c0002275:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002279:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000227d:	75 e0                	jne    c000225f <validate+0x9>
c000227f:	83 ec 0c             	sub    esp,0xc
c0002282:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002286:	50                   	push   eax
c0002287:	e8 76 f8 ff ff       	call   c0001b02 <disk_status>
c000228c:	83 c4 10             	add    esp,0x10
c000228f:	a8 01                	test   al,0x1
c0002291:	75 cc                	jne    c000225f <validate+0x9>
c0002293:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002295:	31 c0                	xor    eax,eax
c0002297:	89 0e                	mov    DWORD PTR [esi],ecx
c0002299:	5a                   	pop    edx
c000229a:	5b                   	pop    ebx
c000229b:	5e                   	pop    esi
c000229c:	c3                   	ret    

c000229d <sync_window>:
c000229d:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022a1:	0f 84 85 00 00 00    	je     c000232c <sync_window+0x8f>
c00022a7:	55                   	push   ebp
c00022a8:	8d 68 54             	lea    ebp,[eax+0x54]
c00022ab:	57                   	push   edi
c00022ac:	56                   	push   esi
c00022ad:	53                   	push   ebx
c00022ae:	89 c3                	mov    ebx,eax
c00022b0:	83 ec 28             	sub    esp,0x28
c00022b3:	6a 01                	push   0x1
c00022b5:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022b8:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022bb:	55                   	push   ebp
c00022bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c0:	50                   	push   eax
c00022c1:	e8 58 f8 ff ff       	call   c0001b1e <disk_write>
c00022c6:	83 c4 20             	add    esp,0x20
c00022c9:	ba 01 00 00 00       	mov    edx,0x1
c00022ce:	85 c0                	test   eax,eax
c00022d0:	75 50                	jne    c0002322 <sync_window+0x85>
c00022d2:	31 ff                	xor    edi,edi
c00022d4:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022d7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022db:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022df:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022e2:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022e5:	89 c6                	mov    esi,eax
c00022e7:	89 d7                	mov    edi,edx
c00022e9:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00022ec:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00022f0:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00022f3:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00022f7:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00022fb:	73 23                	jae    c0002320 <sync_window+0x83>
c00022fd:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002301:	75 1d                	jne    c0002320 <sync_window+0x83>
c0002303:	83 ec 0c             	sub    esp,0xc
c0002306:	6a 01                	push   0x1
c0002308:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000230c:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002310:	52                   	push   edx
c0002311:	50                   	push   eax
c0002312:	55                   	push   ebp
c0002313:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002317:	50                   	push   eax
c0002318:	e8 01 f8 ff ff       	call   c0001b1e <disk_write>
c000231d:	83 c4 20             	add    esp,0x20
c0002320:	31 d2                	xor    edx,edx
c0002322:	83 c4 1c             	add    esp,0x1c
c0002325:	89 d0                	mov    eax,edx
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	5f                   	pop    edi
c000232a:	5d                   	pop    ebp
c000232b:	c3                   	ret    
c000232c:	31 d2                	xor    edx,edx
c000232e:	89 d0                	mov    eax,edx
c0002330:	c3                   	ret    

c0002331 <move_window>:
c0002331:	56                   	push   esi
c0002332:	53                   	push   ebx
c0002333:	89 c3                	mov    ebx,eax
c0002335:	83 ec 14             	sub    esp,0x14
c0002338:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000233b:	75 07                	jne    c0002344 <move_window+0x13>
c000233d:	31 f6                	xor    esi,esi
c000233f:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002342:	74 59                	je     c000239d <move_window+0x6c>
c0002344:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 d8                	mov    eax,ebx
c000234e:	e8 4a ff ff ff       	call   c000229d <sync_window>
c0002353:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002357:	89 c6                	mov    esi,eax
c0002359:	85 c0                	test   eax,eax
c000235b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235f:	75 3c                	jne    c000239d <move_window+0x6c>
c0002361:	83 ec 0c             	sub    esp,0xc
c0002364:	8d 43 54             	lea    eax,[ebx+0x54]
c0002367:	6a 01                	push   0x1
c0002369:	51                   	push   ecx
c000236a:	52                   	push   edx
c000236b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000236f:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002373:	50                   	push   eax
c0002374:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002378:	50                   	push   eax
c0002379:	e8 8a f7 ff ff       	call   c0001b08 <disk_read>
c000237e:	83 c4 20             	add    esp,0x20
c0002381:	85 c0                	test   eax,eax
c0002383:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002387:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000238b:	74 0a                	je     c0002397 <move_window+0x66>
c000238d:	83 ca ff             	or     edx,0xffffffff
c0002390:	be 01 00 00 00       	mov    esi,0x1
c0002395:	89 d1                	mov    ecx,edx
c0002397:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000239a:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000239d:	89 f0                	mov    eax,esi
c000239f:	83 c4 14             	add    esp,0x14
c00023a2:	5b                   	pop    ebx
c00023a3:	5e                   	pop    esi
c00023a4:	c3                   	ret    

c00023a5 <check_fs>:
c00023a5:	53                   	push   ebx
c00023a6:	89 c3                	mov    ebx,eax
c00023a8:	83 ec 08             	sub    esp,0x8
c00023ab:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023af:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023b6:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023bd:	e8 6f ff ff ff       	call   c0002331 <move_window>
c00023c2:	ba 04 00 00 00       	mov    edx,0x4
c00023c7:	85 c0                	test   eax,eax
c00023c9:	0f 85 89 00 00 00    	jne    c0002458 <check_fs+0xb3>
c00023cf:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023d5:	e8 79 f7 ff ff       	call   c0001b53 <ld_word>
c00023da:	ba 03 00 00 00       	mov    edx,0x3
c00023df:	66 3d 55 aa          	cmp    ax,0xaa55
c00023e3:	75 73                	jne    c0002458 <check_fs+0xb3>
c00023e5:	ba 80 26 02 c0       	mov    edx,0xc0022680
c00023ea:	8d 43 54             	lea    eax,[ebx+0x54]
c00023ed:	b9 0b 00 00 00       	mov    ecx,0xb
c00023f2:	e8 fb f7 ff ff       	call   c0001bf2 <mem_cmp>
c00023f7:	ba 01 00 00 00       	mov    edx,0x1
c00023fc:	85 c0                	test   eax,eax
c00023fe:	74 58                	je     c0002458 <check_fs+0xb3>
c0002400:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002403:	8d 50 18             	lea    edx,[eax+0x18]
c0002406:	80 fa 01             	cmp    dl,0x1
c0002409:	76 09                	jbe    c0002414 <check_fs+0x6f>
c000240b:	ba 02 00 00 00       	mov    edx,0x2
c0002410:	3c eb                	cmp    al,0xeb
c0002412:	75 44                	jne    c0002458 <check_fs+0xb3>
c0002414:	ba 94 4f 02 c0       	mov    edx,0xc0024f94
c0002419:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000241f:	b9 03 00 00 00       	mov    ecx,0x3
c0002424:	e8 c9 f7 ff ff       	call   c0001bf2 <mem_cmp>
c0002429:	31 d2                	xor    edx,edx
c000242b:	85 c0                	test   eax,eax
c000242d:	74 29                	je     c0002458 <check_fs+0xb3>
c000242f:	ba 8c 26 02 c0       	mov    edx,0xc002268c
c0002434:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000243a:	b9 05 00 00 00       	mov    ecx,0x5
c000243f:	e8 ae f7 ff ff       	call   c0001bf2 <mem_cmp>
c0002444:	31 d2                	xor    edx,edx
c0002446:	85 c0                	test   eax,eax
c0002448:	74 0e                	je     c0002458 <check_fs+0xb3>
c000244a:	31 d2                	xor    edx,edx
c000244c:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002453:	0f 95 c2             	setne  dl
c0002456:	01 d2                	add    edx,edx
c0002458:	89 d0                	mov    eax,edx
c000245a:	83 c4 08             	add    esp,0x8
c000245d:	5b                   	pop    ebx
c000245e:	c3                   	ret    

c000245f <find_volume>:
c000245f:	55                   	push   ebp
c0002460:	31 c9                	xor    ecx,ecx
c0002462:	57                   	push   edi
c0002463:	56                   	push   esi
c0002464:	89 d6                	mov    esi,edx
c0002466:	53                   	push   ebx
c0002467:	31 d2                	xor    edx,edx
c0002469:	83 ec 3c             	sub    esp,0x3c
c000246c:	89 c3                	mov    ebx,eax
c000246e:	e8 32 ff ff ff       	call   c00023a5 <check_fs>
c0002473:	83 f8 02             	cmp    eax,0x2
c0002476:	74 0e                	je     c0002486 <find_volume+0x27>
c0002478:	0f 87 5d 01 00 00    	ja     c00025db <find_volume+0x17c>
c000247e:	85 f6                	test   esi,esi
c0002480:	0f 84 55 01 00 00    	je     c00025db <find_volume+0x17c>
c0002486:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000248d:	0f 85 dd 00 00 00    	jne    c0002570 <find_volume+0x111>
c0002493:	31 c9                	xor    ecx,ecx
c0002495:	ba 01 00 00 00       	mov    edx,0x1
c000249a:	89 d8                	mov    eax,ebx
c000249c:	e8 90 fe ff ff       	call   c0002331 <move_window>
c00024a1:	85 c0                	test   eax,eax
c00024a3:	74 0a                	je     c00024af <find_volume+0x50>
c00024a5:	b8 04 00 00 00       	mov    eax,0x4
c00024aa:	e9 2c 01 00 00       	jmp    c00025db <find_volume+0x17c>
c00024af:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024b2:	89 e8                	mov    eax,ebp
c00024b4:	e8 f6 fc ff ff       	call   c00021af <test_gpt_header>
c00024b9:	85 c0                	test   eax,eax
c00024bb:	75 0a                	jne    c00024c7 <find_volume+0x68>
c00024bd:	b8 03 00 00 00       	mov    eax,0x3
c00024c2:	e9 14 01 00 00       	jmp    c00025db <find_volume+0x17c>
c00024c7:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024cd:	e8 8e f6 ff ff       	call   c0001b60 <ld_dword>
c00024d2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024d6:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024dc:	e8 97 f6 ff ff       	call   c0001b78 <ld_qword>
c00024e1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00024e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00024ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00024f9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00024fd:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002501:	74 ba                	je     c00024bd <find_volume+0x5e>
c0002503:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002507:	31 c9                	xor    ecx,ecx
c0002509:	c1 e7 07             	shl    edi,0x7
c000250c:	89 d8                	mov    eax,ebx
c000250e:	89 fa                	mov    edx,edi
c0002510:	c1 ea 09             	shr    edx,0x9
c0002513:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002517:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c000251b:	e8 11 fe ff ff       	call   c0002331 <move_window>
c0002520:	85 c0                	test   eax,eax
c0002522:	75 81                	jne    c00024a5 <find_volume+0x46>
c0002524:	81 e7 80 01 00 00    	and    edi,0x180
c000252a:	b9 10 00 00 00       	mov    ecx,0x10
c000252f:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002533:	ba 70 26 02 c0       	mov    edx,0xc0022670
c0002538:	e8 b5 f6 ff ff       	call   c0001bf2 <mem_cmp>
c000253d:	85 c0                	test   eax,eax
c000253f:	75 29                	jne    c000256a <find_volume+0x10b>
c0002541:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002545:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002549:	e8 2a f6 ff ff       	call   c0001b78 <ld_qword>
c000254e:	89 d1                	mov    ecx,edx
c0002550:	89 c2                	mov    edx,eax
c0002552:	89 d8                	mov    eax,ebx
c0002554:	e8 4c fe ff ff       	call   c00023a5 <check_fs>
c0002559:	85 f6                	test   esi,esi
c000255b:	75 07                	jne    c0002564 <find_volume+0x105>
c000255d:	83 f8 01             	cmp    eax,0x1
c0002560:	77 08                	ja     c000256a <find_volume+0x10b>
c0002562:	eb 77                	jmp    c00025db <find_volume+0x17c>
c0002564:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002568:	74 71                	je     c00025db <find_volume+0x17c>
c000256a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000256e:	eb 89                	jmp    c00024f9 <find_volume+0x9a>
c0002570:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002574:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000257a:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002580:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002584:	89 cd                	mov    ebp,ecx
c0002586:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000258a:	89 f8                	mov    eax,edi
c000258c:	83 c7 10             	add    edi,0x10
c000258f:	e8 cc f5 ff ff       	call   c0001b60 <ld_dword>
c0002594:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002598:	89 01                	mov    DWORD PTR [ecx],eax
c000259a:	83 c1 04             	add    ecx,0x4
c000259d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025a1:	75 e3                	jne    c0002586 <find_volume+0x127>
c00025a3:	31 ff                	xor    edi,edi
c00025a5:	85 f6                	test   esi,esi
c00025a7:	74 03                	je     c00025ac <find_volume+0x14d>
c00025a9:	8d 7e ff             	lea    edi,[esi-0x1]
c00025ac:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025b0:	85 d2                	test   edx,edx
c00025b2:	74 14                	je     c00025c8 <find_volume+0x169>
c00025b4:	31 c9                	xor    ecx,ecx
c00025b6:	89 d8                	mov    eax,ebx
c00025b8:	e8 e8 fd ff ff       	call   c00023a5 <check_fs>
c00025bd:	83 f8 01             	cmp    eax,0x1
c00025c0:	76 19                	jbe    c00025db <find_volume+0x17c>
c00025c2:	85 f6                	test   esi,esi
c00025c4:	74 0f                	je     c00025d5 <find_volume+0x176>
c00025c6:	eb 13                	jmp    c00025db <find_volume+0x17c>
c00025c8:	85 f6                	test   esi,esi
c00025ca:	0f 85 ed fe ff ff    	jne    c00024bd <find_volume+0x5e>
c00025d0:	b8 03 00 00 00       	mov    eax,0x3
c00025d5:	47                   	inc    edi
c00025d6:	83 ff 03             	cmp    edi,0x3
c00025d9:	76 d1                	jbe    c00025ac <find_volume+0x14d>
c00025db:	83 c4 3c             	add    esp,0x3c
c00025de:	5b                   	pop    ebx
c00025df:	5e                   	pop    esi
c00025e0:	5f                   	pop    edi
c00025e1:	5d                   	pop    ebp
c00025e2:	c3                   	ret    

c00025e3 <mount_volume>:
c00025e3:	55                   	push   ebp
c00025e4:	57                   	push   edi
c00025e5:	89 cf                	mov    edi,ecx
c00025e7:	56                   	push   esi
c00025e8:	53                   	push   ebx
c00025e9:	bb 0b 00 00 00       	mov    ebx,0xb
c00025ee:	83 ec 3c             	sub    esp,0x3c
c00025f1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00025f7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00025fb:	e8 35 fb ff ff       	call   c0002135 <get_ldnumber>
c0002600:	85 c0                	test   eax,eax
c0002602:	0f 88 3a 05 00 00    	js     c0002b42 <mount_volume+0x55f>
c0002608:	8b 2c 85 20 66 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd99e0]
c000260f:	89 c6                	mov    esi,eax
c0002611:	bb 0c 00 00 00       	mov    ebx,0xc
c0002616:	85 ed                	test   ebp,ebp
c0002618:	0f 84 24 05 00 00    	je     c0002b42 <mount_volume+0x55f>
c000261e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002622:	83 e7 fe             	and    edi,0xfffffffe
c0002625:	89 2a                	mov    DWORD PTR [edx],ebp
c0002627:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c000262b:	74 32                	je     c000265f <mount_volume+0x7c>
c000262d:	83 ec 0c             	sub    esp,0xc
c0002630:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002634:	50                   	push   eax
c0002635:	e8 c8 f4 ff ff       	call   c0001b02 <disk_status>
c000263a:	83 c4 10             	add    esp,0x10
c000263d:	a8 01                	test   al,0x1
c000263f:	75 1e                	jne    c000265f <mount_volume+0x7c>
c0002641:	31 db                	xor    ebx,ebx
c0002643:	89 f9                	mov    ecx,edi
c0002645:	84 c9                	test   cl,cl
c0002647:	0f 84 f5 04 00 00    	je     c0002b42 <mount_volume+0x55f>
c000264d:	a8 04                	test   al,0x4
c000264f:	0f 84 ed 04 00 00    	je     c0002b42 <mount_volume+0x55f>
c0002655:	bb 0a 00 00 00       	mov    ebx,0xa
c000265a:	e9 e3 04 00 00       	jmp    c0002b42 <mount_volume+0x55f>
c000265f:	83 ec 0c             	sub    esp,0xc
c0002662:	89 f0                	mov    eax,esi
c0002664:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002668:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000266b:	0f b6 f0             	movzx  esi,al
c000266e:	bb 03 00 00 00       	mov    ebx,0x3
c0002673:	56                   	push   esi
c0002674:	e8 8c f4 ff ff       	call   c0001b05 <disk_initialize>
c0002679:	83 c4 10             	add    esp,0x10
c000267c:	a8 01                	test   al,0x1
c000267e:	0f 85 be 04 00 00    	jne    c0002b42 <mount_volume+0x55f>
c0002684:	89 f9                	mov    ecx,edi
c0002686:	84 c9                	test   cl,cl
c0002688:	74 04                	je     c000268e <mount_volume+0xab>
c000268a:	a8 04                	test   al,0x4
c000268c:	75 c7                	jne    c0002655 <mount_volume+0x72>
c000268e:	31 d2                	xor    edx,edx
c0002690:	89 e8                	mov    eax,ebp
c0002692:	e8 c8 fd ff ff       	call   c000245f <find_volume>
c0002697:	83 f8 04             	cmp    eax,0x4
c000269a:	75 0a                	jne    c00026a6 <mount_volume+0xc3>
c000269c:	bb 01 00 00 00       	mov    ebx,0x1
c00026a1:	e9 9c 04 00 00       	jmp    c0002b42 <mount_volume+0x55f>
c00026a6:	83 f8 01             	cmp    eax,0x1
c00026a9:	76 0a                	jbe    c00026b5 <mount_volume+0xd2>
c00026ab:	bb 0d 00 00 00       	mov    ebx,0xd
c00026b0:	e9 8d 04 00 00       	jmp    c0002b42 <mount_volume+0x55f>
c00026b5:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026b8:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026c3:	75 17                	jne    c00026dc <mount_volume+0xf9>
c00026c5:	b8 0b 00 00 00       	mov    eax,0xb
c00026ca:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026cf:	75 da                	jne    c00026ab <mount_volume+0xc8>
c00026d1:	40                   	inc    eax
c00026d2:	83 f8 40             	cmp    eax,0x40
c00026d5:	75 f3                	jne    c00026ca <mount_volume+0xe7>
c00026d7:	e9 5a 02 00 00       	jmp    c0002936 <mount_volume+0x353>
c00026dc:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026df:	e8 6f f4 ff ff       	call   c0001b53 <ld_word>
c00026e4:	66 3d 00 02          	cmp    ax,0x200
c00026e8:	75 c1                	jne    c00026ab <mount_volume+0xc8>
c00026ea:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00026ed:	e8 61 f4 ff ff       	call   c0001b53 <ld_word>
c00026f2:	0f b7 c0             	movzx  eax,ax
c00026f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00026f9:	85 c0                	test   eax,eax
c00026fb:	75 0c                	jne    c0002709 <mount_volume+0x126>
c00026fd:	8d 45 78             	lea    eax,[ebp+0x78]
c0002700:	e8 5b f4 ff ff       	call   c0001b60 <ld_dword>
c0002705:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000270d:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002710:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002713:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002717:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000271a:	48                   	dec    eax
c000271b:	3c 01                	cmp    al,0x1
c000271d:	77 8c                	ja     c00026ab <mount_volume+0xc8>
c000271f:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002723:	89 c3                	mov    ebx,eax
c0002725:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002729:	66 85 c0             	test   ax,ax
c000272c:	0f 84 79 ff ff ff    	je     c00026ab <mount_volume+0xc8>
c0002732:	8d 40 ff             	lea    eax,[eax-0x1]
c0002735:	85 d8                	test   eax,ebx
c0002737:	0f 85 6e ff ff ff    	jne    c00026ab <mount_volume+0xc8>
c000273d:	8d 45 65             	lea    eax,[ebp+0x65]
c0002740:	e8 0e f4 ff ff       	call   c0001b53 <ld_word>
c0002745:	89 c7                	mov    edi,eax
c0002747:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000274b:	a8 0f                	test   al,0xf
c000274d:	0f 85 58 ff ff ff    	jne    c00026ab <mount_volume+0xc8>
c0002753:	8d 45 67             	lea    eax,[ebp+0x67]
c0002756:	e8 f8 f3 ff ff       	call   c0001b53 <ld_word>
c000275b:	0f b7 f0             	movzx  esi,ax
c000275e:	85 f6                	test   esi,esi
c0002760:	75 0a                	jne    c000276c <mount_volume+0x189>
c0002762:	8d 45 74             	lea    eax,[ebp+0x74]
c0002765:	e8 f6 f3 ff ff       	call   c0001b60 <ld_dword>
c000276a:	89 c6                	mov    esi,eax
c000276c:	8d 45 62             	lea    eax,[ebp+0x62]
c000276f:	e8 df f3 ff ff       	call   c0001b53 <ld_word>
c0002774:	66 85 c0             	test   ax,ax
c0002777:	0f 84 2e ff ff ff    	je     c00026ab <mount_volume+0xc8>
c000277d:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002782:	0f b7 c8             	movzx  ecx,ax
c0002785:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000278a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000278e:	89 fa                	mov    edx,edi
c0002790:	66 c1 ea 04          	shr    dx,0x4
c0002794:	0f b7 d2             	movzx  edx,dx
c0002797:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000279b:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000279e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027a2:	39 c6                	cmp    esi,eax
c00027a4:	0f 82 01 ff ff ff    	jb     c00026ab <mount_volume+0xc8>
c00027aa:	29 c6                	sub    esi,eax
c00027ac:	31 d2                	xor    edx,edx
c00027ae:	89 f0                	mov    eax,esi
c00027b0:	f7 f3                	div    ebx
c00027b2:	39 de                	cmp    esi,ebx
c00027b4:	0f 82 f1 fe ff ff    	jb     c00026ab <mount_volume+0xc8>
c00027ba:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027bf:	0f 87 e6 fe ff ff    	ja     c00026ab <mount_volume+0xc8>
c00027c5:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027ca:	0f 86 63 03 00 00    	jbe    c0002b33 <mount_volume+0x550>
c00027d0:	bb 03 00 00 00       	mov    ebx,0x3
c00027d5:	8d 70 02             	lea    esi,[eax+0x2]
c00027d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027e0:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027e3:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027e6:	31 d2                	xor    edx,edx
c00027e8:	89 c8                	mov    eax,ecx
c00027ea:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00027ed:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00027f1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00027f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00027f9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00027fd:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002800:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002803:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002807:	31 d2                	xor    edx,edx
c0002809:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000280d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002811:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002814:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002817:	83 fb 03             	cmp    ebx,0x3
c000281a:	75 2b                	jne    c0002847 <mount_volume+0x264>
c000281c:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000281f:	e8 2f f3 ff ff       	call   c0001b53 <ld_word>
c0002824:	66 09 c7             	or     di,ax
c0002827:	0f 85 7e fe ff ff    	jne    c00026ab <mount_volume+0xc8>
c000282d:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002833:	c1 e6 02             	shl    esi,0x2
c0002836:	e8 25 f3 ff ff       	call   c0001b60 <ld_dword>
c000283b:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002842:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002845:	eb 30                	jmp    c0002877 <mount_volume+0x294>
c0002847:	66 85 ff             	test   di,di
c000284a:	0f 84 5b fe ff ff    	je     c00026ab <mount_volume+0xc8>
c0002850:	31 d2                	xor    edx,edx
c0002852:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002856:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000285a:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000285e:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002861:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002864:	83 fb 02             	cmp    ebx,0x2
c0002867:	75 04                	jne    c000286d <mount_volume+0x28a>
c0002869:	01 f6                	add    esi,esi
c000286b:	eb 0a                	jmp    c0002877 <mount_volume+0x294>
c000286d:	8d 04 76             	lea    eax,[esi+esi*2]
c0002870:	83 e6 01             	and    esi,0x1
c0002873:	d1 e8                	shr    eax,1
c0002875:	01 c6                	add    esi,eax
c0002877:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000287d:	c1 ee 09             	shr    esi,0x9
c0002880:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002884:	0f 87 21 fe ff ff    	ja     c00026ab <mount_volume+0xc8>
c000288a:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002891:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002898:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000289c:	83 fb 03             	cmp    ebx,0x3
c000289f:	75 7a                	jne    c000291b <mount_volume+0x338>
c00028a1:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028a7:	e8 a7 f2 ff ff       	call   c0001b53 <ld_word>
c00028ac:	66 48                	dec    ax
c00028ae:	75 6b                	jne    c000291b <mount_volume+0x338>
c00028b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028b4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028b8:	83 c2 01             	add    edx,0x1
c00028bb:	89 e8                	mov    eax,ebp
c00028bd:	83 d1 00             	adc    ecx,0x0
c00028c0:	e8 6c fa ff ff       	call   c0002331 <move_window>
c00028c5:	85 c0                	test   eax,eax
c00028c7:	75 52                	jne    c000291b <mount_volume+0x338>
c00028c9:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028cd:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028d3:	e8 7b f2 ff ff       	call   c0001b53 <ld_word>
c00028d8:	66 3d 55 aa          	cmp    ax,0xaa55
c00028dc:	75 3d                	jne    c000291b <mount_volume+0x338>
c00028de:	8d 45 54             	lea    eax,[ebp+0x54]
c00028e1:	e8 7a f2 ff ff       	call   c0001b60 <ld_dword>
c00028e6:	3d 52 52 61 41       	cmp    eax,0x41615252
c00028eb:	75 2e                	jne    c000291b <mount_volume+0x338>
c00028ed:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00028f3:	e8 68 f2 ff ff       	call   c0001b60 <ld_dword>
c00028f8:	3d 72 72 41 61       	cmp    eax,0x61417272
c00028fd:	75 1c                	jne    c000291b <mount_volume+0x338>
c00028ff:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002905:	e8 56 f2 ff ff       	call   c0001b60 <ld_dword>
c000290a:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c000290d:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002913:	e8 48 f2 ff ff       	call   c0001b60 <ld_dword>
c0002918:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c000291b:	66 a1 00 66 02 c0    	mov    ax,ds:0xc0026600
c0002921:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002924:	40                   	inc    eax
c0002925:	31 db                	xor    ebx,ebx
c0002927:	66 a3 00 66 02 c0    	mov    ds:0xc0026600,ax
c000292d:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002931:	e9 0c 02 00 00       	jmp    c0002b42 <mount_volume+0x55f>
c0002936:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c000293c:	e8 12 f2 ff ff       	call   c0001b53 <ld_word>
c0002941:	66 3d 00 01          	cmp    ax,0x100
c0002945:	0f 85 60 fd ff ff    	jne    c00026ab <mount_volume+0xc8>
c000294b:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002952:	0f 85 53 fd ff ff    	jne    c00026ab <mount_volume+0xc8>
c0002958:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000295e:	e8 15 f2 ff ff       	call   c0001b78 <ld_qword>
c0002963:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002967:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000296b:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002971:	e8 ea f1 ff ff       	call   c0001b60 <ld_dword>
c0002976:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002979:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000297f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002982:	fe c8                	dec    al
c0002984:	0f 85 21 fd ff ff    	jne    c00026ab <mount_volume+0xc8>
c000298a:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002991:	bb 01 00 00 00       	mov    ebx,0x1
c0002996:	d3 e3                	shl    ebx,cl
c0002998:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000299c:	66 85 db             	test   bx,bx
c000299f:	0f 84 06 fd ff ff    	je     c00026ab <mount_volume+0xc8>
c00029a5:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029ab:	e8 b0 f1 ff ff       	call   c0001b60 <ld_dword>
c00029b0:	89 c6                	mov    esi,eax
c00029b2:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029b7:	0f 87 ee fc ff ff    	ja     c00026ab <mount_volume+0xc8>
c00029bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029c1:	8d 40 02             	lea    eax,[eax+0x2]
c00029c4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029c7:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029ce:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029d1:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029d7:	e8 84 f1 ff ff       	call   c0001b60 <ld_dword>
c00029dc:	31 d2                	xor    edx,edx
c00029de:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029e2:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00029ee:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00029f1:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00029f4:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00029fa:	e8 61 f1 ff ff       	call   c0001b60 <ld_dword>
c00029ff:	31 d2                	xor    edx,edx
c0002a01:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a05:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a09:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a0d:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a10:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a13:	0f b7 c3             	movzx  eax,bx
c0002a16:	31 d2                	xor    edx,edx
c0002a18:	0f af f0             	imul   esi,eax
c0002a1b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a1f:	89 f0                	mov    eax,esi
c0002a21:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a25:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a29:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a2d:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a31:	39 c1                	cmp    ecx,eax
c0002a33:	89 df                	mov    edi,ebx
c0002a35:	19 d7                	sbb    edi,edx
c0002a37:	0f 82 6e fc ff ff    	jb     c00026ab <mount_volume+0xc8>
c0002a3d:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a43:	31 db                	xor    ebx,ebx
c0002a45:	e8 16 f1 ff ff       	call   c0001b60 <ld_dword>
c0002a4a:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a51:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a54:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a5c:	85 db                	test   ebx,ebx
c0002a5e:	75 39                	jne    c0002a99 <mount_volume+0x4b6>
c0002a60:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a64:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a68:	0f 86 3d fc ff ff    	jbe    c00026ab <mount_volume+0xc8>
c0002a6e:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a71:	31 ff                	xor    edi,edi
c0002a73:	89 e8                	mov    eax,ebp
c0002a75:	e8 72 f3 ff ff       	call   c0001dec <clst2sect>
c0002a7a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a7e:	01 c6                	add    esi,eax
c0002a80:	89 e8                	mov    eax,ebp
c0002a82:	11 d7                	adc    edi,edx
c0002a84:	89 f2                	mov    edx,esi
c0002a86:	89 f9                	mov    ecx,edi
c0002a88:	e8 a4 f8 ff ff       	call   c0002331 <move_window>
c0002a8d:	85 c0                	test   eax,eax
c0002a8f:	0f 85 07 fc ff ff    	jne    c000269c <mount_volume+0xb9>
c0002a95:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002a99:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002a9e:	74 0b                	je     c0002aab <mount_volume+0x4c8>
c0002aa0:	83 c3 20             	add    ebx,0x20
c0002aa3:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002aa9:	eb b1                	jmp    c0002a5c <mount_volume+0x479>
c0002aab:	8d 75 54             	lea    esi,[ebp+0x54]
c0002aae:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002ab2:	e8 a9 f0 ff ff       	call   c0001b60 <ld_dword>
c0002ab7:	89 c3                	mov    ebx,eax
c0002ab9:	83 f8 01             	cmp    eax,0x1
c0002abc:	0f 86 e9 fb ff ff    	jbe    c00026ab <mount_volume+0xc8>
c0002ac2:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002ac5:	0f 86 e0 fb ff ff    	jbe    c00026ab <mount_volume+0xc8>
c0002acb:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ace:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ad2:	0f af c2             	imul   eax,edx
c0002ad5:	31 d2                	xor    edx,edx
c0002ad7:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002ada:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002add:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002ae0:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002ae3:	31 c9                	xor    ecx,ecx
c0002ae5:	89 da                	mov    edx,ebx
c0002ae7:	89 e8                	mov    eax,ebp
c0002ae9:	c1 ea 07             	shr    edx,0x7
c0002aec:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002aef:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002af2:	e8 3a f8 ff ff       	call   c0002331 <move_window>
c0002af7:	85 c0                	test   eax,eax
c0002af9:	0f 85 9d fb ff ff    	jne    c000269c <mount_volume+0xb9>
c0002aff:	89 d8                	mov    eax,ebx
c0002b01:	83 e0 7f             	and    eax,0x7f
c0002b04:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b07:	e8 54 f0 ff ff       	call   c0001b60 <ld_dword>
c0002b0c:	83 f8 ff             	cmp    eax,0xffffffff
c0002b0f:	74 0a                	je     c0002b1b <mount_volume+0x538>
c0002b11:	43                   	inc    ebx
c0002b12:	39 d8                	cmp    eax,ebx
c0002b14:	74 cd                	je     c0002ae3 <mount_volume+0x500>
c0002b16:	e9 90 fb ff ff       	jmp    c00026ab <mount_volume+0xc8>
c0002b1b:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b22:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b29:	bb 04 00 00 00       	mov    ebx,0x4
c0002b2e:	e9 e8 fd ff ff       	jmp    c000291b <mount_volume+0x338>
c0002b33:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b38:	19 db                	sbb    ebx,ebx
c0002b3a:	83 c3 02             	add    ebx,0x2
c0002b3d:	e9 93 fc ff ff       	jmp    c00027d5 <mount_volume+0x1f2>
c0002b42:	83 c4 3c             	add    esp,0x3c
c0002b45:	89 d8                	mov    eax,ebx
c0002b47:	5b                   	pop    ebx
c0002b48:	5e                   	pop    esi
c0002b49:	5f                   	pop    edi
c0002b4a:	5d                   	pop    ebp
c0002b4b:	c3                   	ret    

c0002b4c <find_bitmap>:
c0002b4c:	55                   	push   ebp
c0002b4d:	57                   	push   edi
c0002b4e:	89 c7                	mov    edi,eax
c0002b50:	56                   	push   esi
c0002b51:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b54:	53                   	push   ebx
c0002b55:	83 ec 1c             	sub    esp,0x1c
c0002b58:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b5b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b5f:	83 e8 02             	sub    eax,0x2
c0002b62:	39 f0                	cmp    eax,esi
c0002b64:	77 02                	ja     c0002b68 <find_bitmap+0x1c>
c0002b66:	31 f6                	xor    esi,esi
c0002b68:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b6c:	89 f3                	mov    ebx,esi
c0002b6e:	31 ed                	xor    ebp,ebp
c0002b70:	31 c9                	xor    ecx,ecx
c0002b72:	89 da                	mov    edx,ebx
c0002b74:	89 f8                	mov    eax,edi
c0002b76:	c1 ea 0c             	shr    edx,0xc
c0002b79:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b7c:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b7f:	e8 ad f7 ff ff       	call   c0002331 <move_window>
c0002b84:	85 c0                	test   eax,eax
c0002b86:	75 68                	jne    c0002bf0 <find_bitmap+0xa4>
c0002b88:	89 da                	mov    edx,ebx
c0002b8a:	89 d9                	mov    ecx,ebx
c0002b8c:	c1 ea 03             	shr    edx,0x3
c0002b8f:	83 e1 07             	and    ecx,0x7
c0002b92:	b8 01 00 00 00       	mov    eax,0x1
c0002b97:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002b9d:	d3 e0                	shl    eax,cl
c0002b9f:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002ba2:	83 e9 02             	sub    ecx,0x2
c0002ba5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ba9:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bad:	43                   	inc    ebx
c0002bae:	21 c1                	and    ecx,eax
c0002bb0:	d1 e0                	shl    eax,1
c0002bb2:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bb6:	77 09                	ja     c0002bc1 <find_bitmap+0x75>
c0002bb8:	31 db                	xor    ebx,ebx
c0002bba:	ba 00 02 00 00       	mov    edx,0x200
c0002bbf:	31 c0                	xor    eax,eax
c0002bc1:	84 c9                	test   cl,cl
c0002bc3:	75 10                	jne    c0002bd5 <find_bitmap+0x89>
c0002bc5:	45                   	inc    ebp
c0002bc6:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002bca:	75 0f                	jne    c0002bdb <find_bitmap+0x8f>
c0002bcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bd0:	83 c0 02             	add    eax,0x2
c0002bd3:	eb 22                	jmp    c0002bf7 <find_bitmap+0xab>
c0002bd5:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002bd9:	31 ed                	xor    ebp,ebp
c0002bdb:	39 de                	cmp    esi,ebx
c0002bdd:	74 16                	je     c0002bf5 <find_bitmap+0xa9>
c0002bdf:	84 c0                	test   al,al
c0002be1:	75 c6                	jne    c0002ba9 <find_bitmap+0x5d>
c0002be3:	42                   	inc    edx
c0002be4:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002bea:	77 84                	ja     c0002b70 <find_bitmap+0x24>
c0002bec:	b0 01                	mov    al,0x1
c0002bee:	eb b9                	jmp    c0002ba9 <find_bitmap+0x5d>
c0002bf0:	83 c8 ff             	or     eax,0xffffffff
c0002bf3:	eb 02                	jmp    c0002bf7 <find_bitmap+0xab>
c0002bf5:	31 c0                	xor    eax,eax
c0002bf7:	83 c4 1c             	add    esp,0x1c
c0002bfa:	5b                   	pop    ebx
c0002bfb:	5e                   	pop    esi
c0002bfc:	5f                   	pop    edi
c0002bfd:	5d                   	pop    ebp
c0002bfe:	c3                   	ret    

c0002bff <change_bitmap>:
c0002bff:	55                   	push   ebp
c0002c00:	89 cd                	mov    ebp,ecx
c0002c02:	57                   	push   edi
c0002c03:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c06:	56                   	push   esi
c0002c07:	89 c7                	mov    edi,eax
c0002c09:	53                   	push   ebx
c0002c0a:	89 c8                	mov    eax,ecx
c0002c0c:	83 ec 1c             	sub    esp,0x1c
c0002c0f:	31 d2                	xor    edx,edx
c0002c11:	89 ce                	mov    esi,ecx
c0002c13:	c1 e8 0c             	shr    eax,0xc
c0002c16:	bb 01 00 00 00       	mov    ebx,0x1
c0002c1b:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c1e:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c21:	c1 ee 03             	shr    esi,0x3
c0002c24:	83 e1 07             	and    ecx,0x7
c0002c27:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c2d:	d3 e3                	shl    ebx,cl
c0002c2f:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c33:	89 c1                	mov    ecx,eax
c0002c35:	89 d3                	mov    ebx,edx
c0002c37:	83 c1 01             	add    ecx,0x1
c0002c3a:	83 d3 00             	adc    ebx,0x0
c0002c3d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c41:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c45:	89 d1                	mov    ecx,edx
c0002c47:	89 c2                	mov    edx,eax
c0002c49:	89 f8                	mov    eax,edi
c0002c4b:	e8 e1 f6 ff ff       	call   c0002331 <move_window>
c0002c50:	89 c1                	mov    ecx,eax
c0002c52:	85 c0                	test   eax,eax
c0002c54:	75 48                	jne    c0002c9e <change_bitmap+0x9f>
c0002c56:	31 d2                	xor    edx,edx
c0002c58:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c5c:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c60:	0f 95 c2             	setne  dl
c0002c63:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c67:	74 3c                	je     c0002ca5 <change_bitmap+0xa6>
c0002c69:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c6d:	4d                   	dec    ebp
c0002c6e:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c72:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c76:	74 32                	je     c0002caa <change_bitmap+0xab>
c0002c78:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c7c:	75 d8                	jne    c0002c56 <change_bitmap+0x57>
c0002c7e:	8d 46 01             	lea    eax,[esi+0x1]
c0002c81:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c86:	89 c3                	mov    ebx,eax
c0002c88:	31 f6                	xor    esi,esi
c0002c8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c92:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002c98:	74 99                	je     c0002c33 <change_bitmap+0x34>
c0002c9a:	89 de                	mov    esi,ebx
c0002c9c:	eb b8                	jmp    c0002c56 <change_bitmap+0x57>
c0002c9e:	b9 01 00 00 00       	mov    ecx,0x1
c0002ca3:	eb 05                	jmp    c0002caa <change_bitmap+0xab>
c0002ca5:	b9 02 00 00 00       	mov    ecx,0x2
c0002caa:	83 c4 1c             	add    esp,0x1c
c0002cad:	89 c8                	mov    eax,ecx
c0002caf:	5b                   	pop    ebx
c0002cb0:	5e                   	pop    esi
c0002cb1:	5f                   	pop    edi
c0002cb2:	5d                   	pop    ebp
c0002cb3:	c3                   	ret    

c0002cb4 <put_fat>:
c0002cb4:	83 fa 01             	cmp    edx,0x1
c0002cb7:	0f 86 7b 01 00 00    	jbe    c0002e38 <put_fat+0x184>
c0002cbd:	55                   	push   ebp
c0002cbe:	57                   	push   edi
c0002cbf:	89 cf                	mov    edi,ecx
c0002cc1:	56                   	push   esi
c0002cc2:	b9 02 00 00 00       	mov    ecx,0x2
c0002cc7:	53                   	push   ebx
c0002cc8:	89 c6                	mov    esi,eax
c0002cca:	83 ec 1c             	sub    esp,0x1c
c0002ccd:	89 d3                	mov    ebx,edx
c0002ccf:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cd2:	0f 86 68 01 00 00    	jbe    c0002e40 <put_fat+0x18c>
c0002cd8:	8a 00                	mov    al,BYTE PTR [eax]
c0002cda:	3c 02                	cmp    al,0x2
c0002cdc:	0f 84 c7 00 00 00    	je     c0002da9 <put_fat+0xf5>
c0002ce2:	77 09                	ja     c0002ced <put_fat+0x39>
c0002ce4:	fe c8                	dec    al
c0002ce6:	74 17                	je     c0002cff <put_fat+0x4b>
c0002ce8:	e9 53 01 00 00       	jmp    c0002e40 <put_fat+0x18c>
c0002ced:	b9 02 00 00 00       	mov    ecx,0x2
c0002cf2:	3c 04                	cmp    al,0x4
c0002cf4:	0f 86 e1 00 00 00    	jbe    c0002ddb <put_fat+0x127>
c0002cfa:	e9 41 01 00 00       	jmp    c0002e40 <put_fat+0x18c>
c0002cff:	89 d5                	mov    ebp,edx
c0002d01:	31 c9                	xor    ecx,ecx
c0002d03:	d1 ed                	shr    ebp,1
c0002d05:	89 f0                	mov    eax,esi
c0002d07:	01 d5                	add    ebp,edx
c0002d09:	89 ea                	mov    edx,ebp
c0002d0b:	c1 ea 09             	shr    edx,0x9
c0002d0e:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d11:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d14:	e8 18 f6 ff ff       	call   c0002331 <move_window>
c0002d19:	89 c1                	mov    ecx,eax
c0002d1b:	85 c0                	test   eax,eax
c0002d1d:	0f 85 1d 01 00 00    	jne    c0002e40 <put_fat+0x18c>
c0002d23:	8d 46 54             	lea    eax,[esi+0x54]
c0002d26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d2a:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d2d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d37:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d3b:	89 f8                	mov    eax,edi
c0002d3d:	83 e3 01             	and    ebx,0x1
c0002d40:	74 0d                	je     c0002d4f <put_fat+0x9b>
c0002d42:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d45:	89 fa                	mov    edx,edi
c0002d47:	83 e0 0f             	and    eax,0xf
c0002d4a:	c1 e2 04             	shl    edx,0x4
c0002d4d:	09 d0                	or     eax,edx
c0002d4f:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d52:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d56:	31 c9                	xor    ecx,ecx
c0002d58:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d5c:	c1 ea 09             	shr    edx,0x9
c0002d5f:	89 f0                	mov    eax,esi
c0002d61:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d64:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d67:	e8 c5 f5 ff ff       	call   c0002331 <move_window>
c0002d6c:	89 c1                	mov    ecx,eax
c0002d6e:	85 c0                	test   eax,eax
c0002d70:	0f 85 ca 00 00 00    	jne    c0002e40 <put_fat+0x18c>
c0002d76:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d7a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d80:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d84:	85 db                	test   ebx,ebx
c0002d86:	74 07                	je     c0002d8f <put_fat+0xdb>
c0002d88:	c1 ef 04             	shr    edi,0x4
c0002d8b:	89 fa                	mov    edx,edi
c0002d8d:	eb 0e                	jmp    c0002d9d <put_fat+0xe9>
c0002d8f:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002d92:	c1 ef 08             	shr    edi,0x8
c0002d95:	83 e2 f0             	and    edx,0xfffffff0
c0002d98:	83 e7 0f             	and    edi,0xf
c0002d9b:	09 fa                	or     edx,edi
c0002d9d:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002da0:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002da4:	e9 97 00 00 00       	jmp    c0002e40 <put_fat+0x18c>
c0002da9:	31 c9                	xor    ecx,ecx
c0002dab:	c1 ea 08             	shr    edx,0x8
c0002dae:	89 f0                	mov    eax,esi
c0002db0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002db3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002db6:	e8 76 f5 ff ff       	call   c0002331 <move_window>
c0002dbb:	89 c1                	mov    ecx,eax
c0002dbd:	85 c0                	test   eax,eax
c0002dbf:	75 7f                	jne    c0002e40 <put_fat+0x18c>
c0002dc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dc5:	01 db                	add    ebx,ebx
c0002dc7:	0f b7 d7             	movzx  edx,di
c0002dca:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002dd0:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002dd4:	e8 ec ed ff ff       	call   c0001bc5 <st_word>
c0002dd9:	eb 53                	jmp    c0002e2e <put_fat+0x17a>
c0002ddb:	31 c9                	xor    ecx,ecx
c0002ddd:	c1 ea 07             	shr    edx,0x7
c0002de0:	89 f0                	mov    eax,esi
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 44 f5 ff ff       	call   c0002331 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	75 4d                	jne    c0002e40 <put_fat+0x18c>
c0002df3:	c1 e3 02             	shl    ebx,0x2
c0002df6:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002dfc:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002dff:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e03:	74 1c                	je     c0002e21 <put_fat+0x16d>
c0002e05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e09:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e0f:	89 d8                	mov    eax,ebx
c0002e11:	e8 4a ed ff ff       	call   c0001b60 <ld_dword>
c0002e16:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e1a:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e1f:	09 c7                	or     edi,eax
c0002e21:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e25:	89 fa                	mov    edx,edi
c0002e27:	89 d8                	mov    eax,ebx
c0002e29:	e8 9b ed ff ff       	call   c0001bc9 <st_dword>
c0002e2e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e32:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e36:	eb 08                	jmp    c0002e40 <put_fat+0x18c>
c0002e38:	b9 02 00 00 00       	mov    ecx,0x2
c0002e3d:	89 c8                	mov    eax,ecx
c0002e3f:	c3                   	ret    
c0002e40:	83 c4 1c             	add    esp,0x1c
c0002e43:	89 c8                	mov    eax,ecx
c0002e45:	5b                   	pop    ebx
c0002e46:	5e                   	pop    esi
c0002e47:	5f                   	pop    edi
c0002e48:	5d                   	pop    ebp
c0002e49:	c3                   	ret    

c0002e4a <fill_last_frag>:
c0002e4a:	57                   	push   edi
c0002e4b:	89 cf                	mov    edi,ecx
c0002e4d:	56                   	push   esi
c0002e4e:	89 d6                	mov    esi,edx
c0002e50:	53                   	push   ebx
c0002e51:	89 c3                	mov    ebx,eax
c0002e53:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e56:	85 c0                	test   eax,eax
c0002e58:	74 21                	je     c0002e7b <fill_last_frag+0x31>
c0002e5a:	89 f9                	mov    ecx,edi
c0002e5c:	83 f8 01             	cmp    eax,0x1
c0002e5f:	76 05                	jbe    c0002e66 <fill_last_frag+0x1c>
c0002e61:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e64:	29 c1                	sub    ecx,eax
c0002e66:	8d 56 01             	lea    edx,[esi+0x1]
c0002e69:	29 c2                	sub    edx,eax
c0002e6b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e6d:	e8 42 fe ff ff       	call   c0002cb4 <put_fat>
c0002e72:	85 c0                	test   eax,eax
c0002e74:	75 05                	jne    c0002e7b <fill_last_frag+0x31>
c0002e76:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e79:	eb d8                	jmp    c0002e53 <fill_last_frag+0x9>
c0002e7b:	5b                   	pop    ebx
c0002e7c:	5e                   	pop    esi
c0002e7d:	5f                   	pop    edi
c0002e7e:	c3                   	ret    

c0002e7f <fill_first_frag>:
c0002e7f:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e83:	75 2d                	jne    c0002eb2 <fill_first_frag+0x33>
c0002e85:	57                   	push   edi
c0002e86:	56                   	push   esi
c0002e87:	53                   	push   ebx
c0002e88:	89 c3                	mov    ebx,eax
c0002e8a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002e8d:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002e90:	01 d7                	add    edi,edx
c0002e92:	39 fa                	cmp    edx,edi
c0002e94:	74 14                	je     c0002eaa <fill_first_frag+0x2b>
c0002e96:	8d 72 01             	lea    esi,[edx+0x1]
c0002e99:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e9b:	89 f1                	mov    ecx,esi
c0002e9d:	e8 12 fe ff ff       	call   c0002cb4 <put_fat>
c0002ea2:	89 f2                	mov    edx,esi
c0002ea4:	85 c0                	test   eax,eax
c0002ea6:	74 ea                	je     c0002e92 <fill_first_frag+0x13>
c0002ea8:	eb 0b                	jmp    c0002eb5 <fill_first_frag+0x36>
c0002eaa:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002eae:	31 c0                	xor    eax,eax
c0002eb0:	eb 03                	jmp    c0002eb5 <fill_first_frag+0x36>
c0002eb2:	31 c0                	xor    eax,eax
c0002eb4:	c3                   	ret    
c0002eb5:	5b                   	pop    ebx
c0002eb6:	5e                   	pop    esi
c0002eb7:	5f                   	pop    edi
c0002eb8:	c3                   	ret    

c0002eb9 <get_fat>:
c0002eb9:	83 fa 01             	cmp    edx,0x1
c0002ebc:	0f 86 db 01 00 00    	jbe    c000309d <get_fat+0x1e4>
c0002ec2:	55                   	push   ebp
c0002ec3:	b9 01 00 00 00       	mov    ecx,0x1
c0002ec8:	57                   	push   edi
c0002ec9:	56                   	push   esi
c0002eca:	53                   	push   ebx
c0002ecb:	83 ec 1c             	sub    esp,0x1c
c0002ece:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ed0:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002ed3:	0f 86 cc 01 00 00    	jbe    c00030a5 <get_fat+0x1ec>
c0002ed9:	89 c3                	mov    ebx,eax
c0002edb:	89 d6                	mov    esi,edx
c0002edd:	8a 07                	mov    al,BYTE PTR [edi]
c0002edf:	3c 02                	cmp    al,0x2
c0002ee1:	0f 84 99 00 00 00    	je     c0002f80 <get_fat+0xc7>
c0002ee7:	77 09                	ja     c0002ef2 <get_fat+0x39>
c0002ee9:	fe c8                	dec    al
c0002eeb:	74 1a                	je     c0002f07 <get_fat+0x4e>
c0002eed:	e9 b3 01 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002ef2:	3c 03                	cmp    al,0x3
c0002ef4:	0f 84 b5 00 00 00    	je     c0002faf <get_fat+0xf6>
c0002efa:	3c 04                	cmp    al,0x4
c0002efc:	0f 84 e3 00 00 00    	je     c0002fe5 <get_fat+0x12c>
c0002f02:	e9 9e 01 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002f07:	89 d3                	mov    ebx,edx
c0002f09:	31 c9                	xor    ecx,ecx
c0002f0b:	d1 eb                	shr    ebx,1
c0002f0d:	89 f8                	mov    eax,edi
c0002f0f:	01 d3                	add    ebx,edx
c0002f11:	89 da                	mov    edx,ebx
c0002f13:	c1 ea 09             	shr    edx,0x9
c0002f16:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f19:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f1c:	e8 10 f4 ff ff       	call   c0002331 <move_window>
c0002f21:	85 c0                	test   eax,eax
c0002f23:	74 08                	je     c0002f2d <get_fat+0x74>
c0002f25:	83 c9 ff             	or     ecx,0xffffffff
c0002f28:	e9 78 01 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002f2d:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f30:	31 c9                	xor    ecx,ecx
c0002f32:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f38:	89 ea                	mov    edx,ebp
c0002f3a:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f3e:	c1 ea 09             	shr    edx,0x9
c0002f41:	89 f8                	mov    eax,edi
c0002f43:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f46:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f49:	e8 e3 f3 ff ff       	call   c0002331 <move_window>
c0002f4e:	85 c0                	test   eax,eax
c0002f50:	75 d3                	jne    c0002f25 <get_fat+0x6c>
c0002f52:	0f b6 c3             	movzx  eax,bl
c0002f55:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f5b:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f60:	c1 e3 08             	shl    ebx,0x8
c0002f63:	09 c3                	or     ebx,eax
c0002f65:	89 d9                	mov    ecx,ebx
c0002f67:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f6d:	83 e6 01             	and    esi,0x1
c0002f70:	0f 84 2f 01 00 00    	je     c00030a5 <get_fat+0x1ec>
c0002f76:	89 d9                	mov    ecx,ebx
c0002f78:	c1 e9 04             	shr    ecx,0x4
c0002f7b:	e9 25 01 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002f80:	31 c9                	xor    ecx,ecx
c0002f82:	c1 ea 08             	shr    edx,0x8
c0002f85:	89 f8                	mov    eax,edi
c0002f87:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f8a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f8d:	e8 9f f3 ff ff       	call   c0002331 <move_window>
c0002f92:	85 c0                	test   eax,eax
c0002f94:	75 8f                	jne    c0002f25 <get_fat+0x6c>
c0002f96:	01 f6                	add    esi,esi
c0002f98:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002f9e:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fa2:	e8 ac eb ff ff       	call   c0001b53 <ld_word>
c0002fa7:	0f b7 c8             	movzx  ecx,ax
c0002faa:	e9 f6 00 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002faf:	31 c9                	xor    ecx,ecx
c0002fb1:	c1 ea 07             	shr    edx,0x7
c0002fb4:	89 f8                	mov    eax,edi
c0002fb6:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fb9:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fbc:	e8 70 f3 ff ff       	call   c0002331 <move_window>
c0002fc1:	85 c0                	test   eax,eax
c0002fc3:	0f 85 5c ff ff ff    	jne    c0002f25 <get_fat+0x6c>
c0002fc9:	c1 e6 02             	shl    esi,0x2
c0002fcc:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fd2:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fd6:	e8 85 eb ff ff       	call   c0001b60 <ld_dword>
c0002fdb:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002fe0:	e9 b4 00 00 00       	jmp    c0003099 <get_fat+0x1e0>
c0002fe5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002fe8:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002feb:	89 d1                	mov    ecx,edx
c0002fed:	09 c1                	or     ecx,eax
c0002fef:	74 06                	je     c0002ff7 <get_fat+0x13e>
c0002ff1:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ff5:	75 0f                	jne    c0003006 <get_fat+0x14d>
c0002ff7:	b9 01 00 00 00       	mov    ecx,0x1
c0002ffc:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003000:	0f 85 9f 00 00 00    	jne    c00030a5 <get_fat+0x1ec>
c0003006:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c000300a:	89 f5                	mov    ebp,esi
c000300c:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003011:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003014:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003017:	80 f9 02             	cmp    cl,0x2
c000301a:	75 35                	jne    c0003051 <get_fat+0x198>
c000301c:	83 c0 ff             	add    eax,0xffffffff
c000301f:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003024:	83 d2 ff             	adc    edx,0xffffffff
c0003027:	31 db                	xor    ebx,ebx
c0003029:	0f ac d0 09          	shrd   eax,edx,0x9
c000302d:	53                   	push   ebx
c000302e:	c1 ea 09             	shr    edx,0x9
c0003031:	51                   	push   ecx
c0003032:	52                   	push   edx
c0003033:	50                   	push   eax
c0003034:	e8 17 e7 01 00       	call   c0021750 <__udivdi3>
c0003039:	83 c4 10             	add    esp,0x10
c000303c:	b9 01 00 00 00       	mov    ecx,0x1
c0003041:	39 c5                	cmp    ebp,eax
c0003043:	77 60                	ja     c00030a5 <get_fat+0x1ec>
c0003045:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000304a:	74 59                	je     c00030a5 <get_fat+0x1ec>
c000304c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000304f:	eb 54                	jmp    c00030a5 <get_fat+0x1ec>
c0003051:	80 f9 03             	cmp    cl,0x3
c0003054:	75 05                	jne    c000305b <get_fat+0x1a2>
c0003056:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003059:	77 f1                	ja     c000304c <get_fat+0x193>
c000305b:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003060:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003064:	75 3f                	jne    c00030a5 <get_fat+0x1ec>
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	89 f2                	mov    edx,esi
c000306a:	89 f8                	mov    eax,edi
c000306c:	c1 ea 07             	shr    edx,0x7
c000306f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003072:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003075:	e8 b7 f2 ff ff       	call   c0002331 <move_window>
c000307a:	85 c0                	test   eax,eax
c000307c:	0f 85 a3 fe ff ff    	jne    c0002f25 <get_fat+0x6c>
c0003082:	c1 e6 02             	shl    esi,0x2
c0003085:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000308b:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000308f:	e8 cc ea ff ff       	call   c0001b60 <ld_dword>
c0003094:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0003099:	89 c1                	mov    ecx,eax
c000309b:	eb 08                	jmp    c00030a5 <get_fat+0x1ec>
c000309d:	b9 01 00 00 00       	mov    ecx,0x1
c00030a2:	89 c8                	mov    eax,ecx
c00030a4:	c3                   	ret    
c00030a5:	83 c4 1c             	add    esp,0x1c
c00030a8:	89 c8                	mov    eax,ecx
c00030aa:	5b                   	pop    ebx
c00030ab:	5e                   	pop    esi
c00030ac:	5f                   	pop    edi
c00030ad:	5d                   	pop    ebp
c00030ae:	c3                   	ret    

c00030af <dir_sdi>:
c00030af:	55                   	push   ebp
c00030b0:	57                   	push   edi
c00030b1:	56                   	push   esi
c00030b2:	53                   	push   ebx
c00030b3:	89 c3                	mov    ebx,eax
c00030b5:	83 ec 1c             	sub    esp,0x1c
c00030b8:	8b 38                	mov    edi,DWORD PTR [eax]
c00030ba:	31 c0                	xor    eax,eax
c00030bc:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030bf:	0f 94 c0             	sete   al
c00030c2:	48                   	dec    eax
c00030c3:	25 00 00 20 f0       	and    eax,0xf0200000
c00030c8:	05 00 00 00 10       	add    eax,0x10000000
c00030cd:	39 d0                	cmp    eax,edx
c00030cf:	77 0a                	ja     c00030db <dir_sdi+0x2c>
c00030d1:	b8 02 00 00 00       	mov    eax,0x2
c00030d6:	e9 c4 00 00 00       	jmp    c000319f <dir_sdi+0xf0>
c00030db:	89 d6                	mov    esi,edx
c00030dd:	f6 c2 1f             	test   dl,0x1f
c00030e0:	75 ef                	jne    c00030d1 <dir_sdi+0x22>
c00030e2:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030e5:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00030e8:	85 c9                	test   ecx,ecx
c00030ea:	75 2d                	jne    c0003119 <dir_sdi+0x6a>
c00030ec:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00030ef:	77 1b                	ja     c000310c <dir_sdi+0x5d>
c00030f1:	89 f2                	mov    edx,esi
c00030f3:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00030f7:	c1 ea 05             	shr    edx,0x5
c00030fa:	39 c2                	cmp    edx,eax
c00030fc:	73 d3                	jae    c00030d1 <dir_sdi+0x22>
c00030fe:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003101:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003104:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003107:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000310a:	eb 4b                	jmp    c0003157 <dir_sdi+0xa8>
c000310c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000310f:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003113:	85 c0                	test   eax,eax
c0003115:	74 da                	je     c00030f1 <dir_sdi+0x42>
c0003117:	89 c1                	mov    ecx,eax
c0003119:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000311d:	c1 e5 09             	shl    ebp,0x9
c0003120:	89 ca                	mov    edx,ecx
c0003122:	39 ee                	cmp    esi,ebp
c0003124:	72 1c                	jb     c0003142 <dir_sdi+0x93>
c0003126:	89 d8                	mov    eax,ebx
c0003128:	e8 8c fd ff ff       	call   c0002eb9 <get_fat>
c000312d:	89 c1                	mov    ecx,eax
c000312f:	83 f8 ff             	cmp    eax,0xffffffff
c0003132:	74 66                	je     c000319a <dir_sdi+0xeb>
c0003134:	83 f8 01             	cmp    eax,0x1
c0003137:	76 98                	jbe    c00030d1 <dir_sdi+0x22>
c0003139:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000313c:	76 93                	jbe    c00030d1 <dir_sdi+0x22>
c000313e:	29 ee                	sub    esi,ebp
c0003140:	eb de                	jmp    c0003120 <dir_sdi+0x71>
c0003142:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003146:	89 f8                	mov    eax,edi
c0003148:	e8 9f ec ff ff       	call   c0001dec <clst2sect>
c000314d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003151:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003154:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003157:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000315a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000315d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003160:	89 d1                	mov    ecx,edx
c0003162:	09 c1                	or     ecx,eax
c0003164:	0f 84 67 ff ff ff    	je     c00030d1 <dir_sdi+0x22>
c000316a:	89 f1                	mov    ecx,esi
c000316c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003174:	c1 e9 09             	shr    ecx,0x9
c0003177:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000317b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000317f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003183:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003186:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000318c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000318f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003193:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003196:	31 c0                	xor    eax,eax
c0003198:	eb 05                	jmp    c000319f <dir_sdi+0xf0>
c000319a:	b8 01 00 00 00       	mov    eax,0x1
c000319f:	83 c4 1c             	add    esp,0x1c
c00031a2:	5b                   	pop    ebx
c00031a3:	5e                   	pop    esi
c00031a4:	5f                   	pop    edi
c00031a5:	5d                   	pop    ebp
c00031a6:	c3                   	ret    

c00031a7 <create_chain>:
c00031a7:	55                   	push   ebp
c00031a8:	89 c5                	mov    ebp,eax
c00031aa:	57                   	push   edi
c00031ab:	56                   	push   esi
c00031ac:	53                   	push   ebx
c00031ad:	83 ec 1c             	sub    esp,0x1c
c00031b0:	85 d2                	test   edx,edx
c00031b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031b6:	8b 30                	mov    esi,DWORD PTR [eax]
c00031b8:	75 0e                	jne    c00031c8 <create_chain+0x21>
c00031ba:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031bd:	85 ff                	test   edi,edi
c00031bf:	74 39                	je     c00031fa <create_chain+0x53>
c00031c1:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031c4:	77 39                	ja     c00031ff <create_chain+0x58>
c00031c6:	eb 32                	jmp    c00031fa <create_chain+0x53>
c00031c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031cc:	e8 e8 fc ff ff       	call   c0002eb9 <get_fat>
c00031d1:	89 c3                	mov    ebx,eax
c00031d3:	83 f8 01             	cmp    eax,0x1
c00031d6:	77 0a                	ja     c00031e2 <create_chain+0x3b>
c00031d8:	bb 01 00 00 00       	mov    ebx,0x1
c00031dd:	e9 ba 01 00 00       	jmp    c000339c <create_chain+0x1f5>
c00031e2:	83 f8 ff             	cmp    eax,0xffffffff
c00031e5:	0f 84 62 01 00 00    	je     c000334d <create_chain+0x1a6>
c00031eb:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031ee:	0f 87 a8 01 00 00    	ja     c000339c <create_chain+0x1f5>
c00031f4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00031f8:	eb 05                	jmp    c00031ff <create_chain+0x58>
c00031fa:	bf 01 00 00 00       	mov    edi,0x1
c00031ff:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003203:	75 07                	jne    c000320c <create_chain+0x65>
c0003205:	31 db                	xor    ebx,ebx
c0003207:	e9 90 01 00 00       	jmp    c000339c <create_chain+0x1f5>
c000320c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000320f:	75 74                	jne    c0003285 <create_chain+0xde>
c0003211:	b9 01 00 00 00       	mov    ecx,0x1
c0003216:	89 fa                	mov    edx,edi
c0003218:	89 f0                	mov    eax,esi
c000321a:	e8 2d f9 ff ff       	call   c0002b4c <find_bitmap>
c000321f:	89 c3                	mov    ebx,eax
c0003221:	8d 40 ff             	lea    eax,[eax-0x1]
c0003224:	83 f8 fd             	cmp    eax,0xfffffffd
c0003227:	0f 87 6f 01 00 00    	ja     c000339c <create_chain+0x1f5>
c000322d:	83 ec 0c             	sub    esp,0xc
c0003230:	b9 01 00 00 00       	mov    ecx,0x1
c0003235:	6a 01                	push   0x1
c0003237:	89 da                	mov    edx,ebx
c0003239:	89 f0                	mov    eax,esi
c000323b:	e8 bf f9 ff ff       	call   c0002bff <change_bitmap>
c0003240:	83 c4 10             	add    esp,0x10
c0003243:	83 f8 02             	cmp    eax,0x2
c0003246:	74 90                	je     c00031d8 <create_chain+0x31>
c0003248:	83 f8 01             	cmp    eax,0x1
c000324b:	0f 84 fc 00 00 00    	je     c000334d <create_chain+0x1a6>
c0003251:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003256:	75 09                	jne    c0003261 <create_chain+0xba>
c0003258:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000325c:	e9 0c 01 00 00       	jmp    c000336d <create_chain+0x1c6>
c0003261:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003265:	0f 85 e7 00 00 00    	jne    c0003352 <create_chain+0x1ab>
c000326b:	8d 57 01             	lea    edx,[edi+0x1]
c000326e:	39 da                	cmp    edx,ebx
c0003270:	0f 84 f7 00 00 00    	je     c000336d <create_chain+0x1c6>
c0003276:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003279:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000327d:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003280:	e9 cd 00 00 00       	jmp    c0003352 <create_chain+0x1ab>
c0003285:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003289:	75 41                	jne    c00032cc <create_chain+0x125>
c000328b:	8d 5f 01             	lea    ebx,[edi+0x1]
c000328e:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003291:	77 05                	ja     c0003298 <create_chain+0xf1>
c0003293:	bb 02 00 00 00       	mov    ebx,0x2
c0003298:	89 da                	mov    edx,ebx
c000329a:	89 e8                	mov    eax,ebp
c000329c:	e8 18 fc ff ff       	call   c0002eb9 <get_fat>
c00032a1:	83 f8 01             	cmp    eax,0x1
c00032a4:	0f 84 2e ff ff ff    	je     c00031d8 <create_chain+0x31>
c00032aa:	83 f8 ff             	cmp    eax,0xffffffff
c00032ad:	0f 84 9a 00 00 00    	je     c000334d <create_chain+0x1a6>
c00032b3:	85 c0                	test   eax,eax
c00032b5:	74 11                	je     c00032c8 <create_chain+0x121>
c00032b7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032ba:	83 f8 01             	cmp    eax,0x1
c00032bd:	76 0d                	jbe    c00032cc <create_chain+0x125>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	76 08                	jbe    c00032cc <create_chain+0x125>
c00032c4:	89 c7                	mov    edi,eax
c00032c6:	eb 04                	jmp    c00032cc <create_chain+0x125>
c00032c8:	85 db                	test   ebx,ebx
c00032ca:	75 38                	jne    c0003304 <create_chain+0x15d>
c00032cc:	89 fb                	mov    ebx,edi
c00032ce:	43                   	inc    ebx
c00032cf:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032d2:	77 0e                	ja     c00032e2 <create_chain+0x13b>
c00032d4:	83 ff 01             	cmp    edi,0x1
c00032d7:	0f 86 28 ff ff ff    	jbe    c0003205 <create_chain+0x5e>
c00032dd:	bb 02 00 00 00       	mov    ebx,0x2
c00032e2:	89 da                	mov    edx,ebx
c00032e4:	89 e8                	mov    eax,ebp
c00032e6:	e8 ce fb ff ff       	call   c0002eb9 <get_fat>
c00032eb:	85 c0                	test   eax,eax
c00032ed:	74 15                	je     c0003304 <create_chain+0x15d>
c00032ef:	83 f8 01             	cmp    eax,0x1
c00032f2:	0f 84 e0 fe ff ff    	je     c00031d8 <create_chain+0x31>
c00032f8:	40                   	inc    eax
c00032f9:	74 52                	je     c000334d <create_chain+0x1a6>
c00032fb:	39 fb                	cmp    ebx,edi
c00032fd:	75 cf                	jne    c00032ce <create_chain+0x127>
c00032ff:	e9 01 ff ff ff       	jmp    c0003205 <create_chain+0x5e>
c0003304:	83 c9 ff             	or     ecx,0xffffffff
c0003307:	89 da                	mov    edx,ebx
c0003309:	89 f0                	mov    eax,esi
c000330b:	e8 a4 f9 ff ff       	call   c0002cb4 <put_fat>
c0003310:	85 c0                	test   eax,eax
c0003312:	75 32                	jne    c0003346 <create_chain+0x19f>
c0003314:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003319:	74 11                	je     c000332c <create_chain+0x185>
c000331b:	89 d9                	mov    ecx,ebx
c000331d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003321:	89 f0                	mov    eax,esi
c0003323:	e8 8c f9 ff ff       	call   c0002cb4 <put_fat>
c0003328:	85 c0                	test   eax,eax
c000332a:	75 1a                	jne    c0003346 <create_chain+0x19f>
c000332c:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000332f:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003332:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003335:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003338:	39 d0                	cmp    eax,edx
c000333a:	77 04                	ja     c0003340 <create_chain+0x199>
c000333c:	48                   	dec    eax
c000333d:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003340:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003344:	eb 56                	jmp    c000339c <create_chain+0x1f5>
c0003346:	48                   	dec    eax
c0003347:	0f 85 8b fe ff ff    	jne    c00031d8 <create_chain+0x31>
c000334d:	83 cb ff             	or     ebx,0xffffffff
c0003350:	eb 4a                	jmp    c000339c <create_chain+0x1f5>
c0003352:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003356:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003359:	41                   	inc    ecx
c000335a:	39 d9                	cmp    ecx,ebx
c000335c:	75 19                	jne    c0003377 <create_chain+0x1d0>
c000335e:	b9 02 00 00 00       	mov    ecx,0x2
c0003363:	85 d2                	test   edx,edx
c0003365:	74 03                	je     c000336a <create_chain+0x1c3>
c0003367:	8d 4a 01             	lea    ecx,[edx+0x1]
c000336a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000336d:	85 c0                	test   eax,eax
c000336f:	0f 85 63 fe ff ff    	jne    c00031d8 <create_chain+0x31>
c0003375:	eb b5                	jmp    c000332c <create_chain+0x185>
c0003377:	85 d2                	test   edx,edx
c0003379:	75 07                	jne    c0003382 <create_chain+0x1db>
c000337b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003382:	89 d9                	mov    ecx,ebx
c0003384:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003388:	89 e8                	mov    eax,ebp
c000338a:	e8 bb fa ff ff       	call   c0002e4a <fill_last_frag>
c000338f:	85 c0                	test   eax,eax
c0003391:	75 b3                	jne    c0003346 <create_chain+0x19f>
c0003393:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000339a:	eb 90                	jmp    c000332c <create_chain+0x185>
c000339c:	83 c4 1c             	add    esp,0x1c
c000339f:	89 d8                	mov    eax,ebx
c00033a1:	5b                   	pop    ebx
c00033a2:	5e                   	pop    esi
c00033a3:	5f                   	pop    edi
c00033a4:	5d                   	pop    ebp
c00033a5:	c3                   	ret    

c00033a6 <remove_chain>:
c00033a6:	55                   	push   ebp
c00033a7:	57                   	push   edi
c00033a8:	56                   	push   esi
c00033a9:	53                   	push   ebx
c00033aa:	83 ec 1c             	sub    esp,0x1c
c00033ad:	83 fa 01             	cmp    edx,0x1
c00033b0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033b4:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033b6:	77 0a                	ja     c00033c2 <remove_chain+0x1c>
c00033b8:	b8 02 00 00 00       	mov    eax,0x2
c00033bd:	e9 24 01 00 00       	jmp    c00034e6 <remove_chain+0x140>
c00033c2:	89 d6                	mov    esi,edx
c00033c4:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033c7:	76 ef                	jbe    c00033b8 <remove_chain+0x12>
c00033c9:	89 c7                	mov    edi,eax
c00033cb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d0:	75 06                	jne    c00033d8 <remove_chain+0x32>
c00033d2:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033d6:	eb 54                	jmp    c000342c <remove_chain+0x86>
c00033d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033db:	75 06                	jne    c00033e3 <remove_chain+0x3d>
c00033dd:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033e1:	74 ef                	je     c00033d2 <remove_chain+0x2c>
c00033e3:	83 c9 ff             	or     ecx,0xffffffff
c00033e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033ea:	89 d8                	mov    eax,ebx
c00033ec:	e8 c3 f8 ff ff       	call   c0002cb4 <put_fat>
c00033f1:	85 c0                	test   eax,eax
c00033f3:	74 dd                	je     c00033d2 <remove_chain+0x2c>
c00033f5:	e9 ec 00 00 00       	jmp    c00034e6 <remove_chain+0x140>
c00033fa:	83 f8 01             	cmp    eax,0x1
c00033fd:	74 b9                	je     c00033b8 <remove_chain+0x12>
c00033ff:	83 f8 ff             	cmp    eax,0xffffffff
c0003402:	74 6d                	je     c0003471 <remove_chain+0xcb>
c0003404:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003407:	75 6f                	jne    c0003478 <remove_chain+0xd2>
c0003409:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000340c:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000340f:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003412:	39 d0                	cmp    eax,edx
c0003414:	73 08                	jae    c000341e <remove_chain+0x78>
c0003416:	40                   	inc    eax
c0003417:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000341b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000341e:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003421:	39 e9                	cmp    ecx,ebp
c0003423:	75 64                	jne    c0003489 <remove_chain+0xe3>
c0003425:	89 ee                	mov    esi,ebp
c0003427:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c000342a:	76 0f                	jbe    c000343b <remove_chain+0x95>
c000342c:	89 f2                	mov    edx,esi
c000342e:	89 f8                	mov    eax,edi
c0003430:	e8 84 fa ff ff       	call   c0002eb9 <get_fat>
c0003435:	89 c5                	mov    ebp,eax
c0003437:	85 c0                	test   eax,eax
c0003439:	75 bf                	jne    c00033fa <remove_chain+0x54>
c000343b:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000343e:	0f 85 a0 00 00 00    	jne    c00034e4 <remove_chain+0x13e>
c0003444:	eb 6c                	jmp    c00034b2 <remove_chain+0x10c>
c0003446:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003449:	84 c0                	test   al,al
c000344b:	75 7d                	jne    c00034ca <remove_chain+0x124>
c000344d:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003450:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003454:	0f 84 86 00 00 00    	je     c00034e0 <remove_chain+0x13a>
c000345a:	89 da                	mov    edx,ebx
c000345c:	89 f8                	mov    eax,edi
c000345e:	e8 56 fa ff ff       	call   c0002eb9 <get_fat>
c0003463:	83 f8 01             	cmp    eax,0x1
c0003466:	0f 86 4c ff ff ff    	jbe    c00033b8 <remove_chain+0x12>
c000346c:	83 f8 ff             	cmp    eax,0xffffffff
c000346f:	75 4e                	jne    c00034bf <remove_chain+0x119>
c0003471:	b8 01 00 00 00       	mov    eax,0x1
c0003476:	eb 6e                	jmp    c00034e6 <remove_chain+0x140>
c0003478:	31 c9                	xor    ecx,ecx
c000347a:	89 f2                	mov    edx,esi
c000347c:	89 d8                	mov    eax,ebx
c000347e:	e8 31 f8 ff ff       	call   c0002cb4 <put_fat>
c0003483:	85 c0                	test   eax,eax
c0003485:	74 82                	je     c0003409 <remove_chain+0x63>
c0003487:	eb 5d                	jmp    c00034e6 <remove_chain+0x140>
c0003489:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000348c:	75 1b                	jne    c00034a9 <remove_chain+0x103>
c000348e:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003492:	89 d8                	mov    eax,ebx
c0003494:	83 ec 0c             	sub    esp,0xc
c0003497:	6a 00                	push   0x0
c0003499:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000349d:	e8 5d f7 ff ff       	call   c0002bff <change_bitmap>
c00034a2:	83 c4 10             	add    esp,0x10
c00034a5:	85 c0                	test   eax,eax
c00034a7:	75 3d                	jne    c00034e6 <remove_chain+0x140>
c00034a9:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034ad:	e9 73 ff ff ff       	jmp    c0003425 <remove_chain+0x7f>
c00034b2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034b7:	75 8d                	jne    c0003446 <remove_chain+0xa0>
c00034b9:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034bd:	eb 25                	jmp    c00034e4 <remove_chain+0x13e>
c00034bf:	8d 53 01             	lea    edx,[ebx+0x1]
c00034c2:	89 c3                	mov    ebx,eax
c00034c4:	39 c2                	cmp    edx,eax
c00034c6:	74 88                	je     c0003450 <remove_chain+0xaa>
c00034c8:	eb 1a                	jmp    c00034e4 <remove_chain+0x13e>
c00034ca:	3c 03                	cmp    al,0x3
c00034cc:	75 16                	jne    c00034e4 <remove_chain+0x13e>
c00034ce:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034d1:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034d5:	77 0d                	ja     c00034e4 <remove_chain+0x13e>
c00034d7:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034da:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034de:	72 04                	jb     c00034e4 <remove_chain+0x13e>
c00034e0:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034e4:	31 c0                	xor    eax,eax
c00034e6:	83 c4 1c             	add    esp,0x1c
c00034e9:	5b                   	pop    ebx
c00034ea:	5e                   	pop    esi
c00034eb:	5f                   	pop    edi
c00034ec:	5d                   	pop    ebp
c00034ed:	c3                   	ret    

c00034ee <dir_clear>:
c00034ee:	55                   	push   ebp
c00034ef:	57                   	push   edi
c00034f0:	56                   	push   esi
c00034f1:	89 c6                	mov    esi,eax
c00034f3:	53                   	push   ebx
c00034f4:	83 ec 1c             	sub    esp,0x1c
c00034f7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00034fb:	e8 9d ed ff ff       	call   c000229d <sync_window>
c0003500:	85 c0                	test   eax,eax
c0003502:	0f 85 de 00 00 00    	jne    c00035e6 <dir_clear+0xf8>
c0003508:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000350c:	89 f0                	mov    eax,esi
c000350e:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003511:	e8 d6 e8 ff ff       	call   c0001dec <clst2sect>
c0003516:	b9 00 02 00 00       	mov    ecx,0x200
c000351b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000351f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003523:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003526:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003529:	89 e8                	mov    eax,ebp
c000352b:	31 d2                	xor    edx,edx
c000352d:	e8 b5 e6 ff ff       	call   c0001be7 <mem_set>
c0003532:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003536:	c1 e3 09             	shl    ebx,0x9
c0003539:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000353f:	76 1f                	jbe    c0003560 <dir_clear+0x72>
c0003541:	bb 00 80 00 00       	mov    ebx,0x8000
c0003546:	eb 18                	jmp    c0003560 <dir_clear+0x72>
c0003548:	83 ec 0c             	sub    esp,0xc
c000354b:	53                   	push   ebx
c000354c:	e8 6b 50 00 00       	call   c00085bc <ff_memalloc>
c0003551:	83 c4 10             	add    esp,0x10
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	0f 85 8f 00 00 00    	jne    c00035ed <dir_clear+0xff>
c000355e:	d1 eb                	shr    ebx,1
c0003560:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003566:	77 e0                	ja     c0003548 <dir_clear+0x5a>
c0003568:	31 db                	xor    ebx,ebx
c000356a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000356e:	39 d8                	cmp    eax,ebx
c0003570:	76 66                	jbe    c00035d8 <dir_clear+0xea>
c0003572:	83 ec 0c             	sub    esp,0xc
c0003575:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003579:	6a 01                	push   0x1
c000357b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000357f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003583:	55                   	push   ebp
c0003584:	50                   	push   eax
c0003585:	e8 94 e5 ff ff       	call   c0001b1e <disk_write>
c000358a:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000358f:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003594:	83 c4 20             	add    esp,0x20
c0003597:	85 c0                	test   eax,eax
c0003599:	75 3d                	jne    c00035d8 <dir_clear+0xea>
c000359b:	43                   	inc    ebx
c000359c:	eb cc                	jmp    c000356a <dir_clear+0x7c>
c000359e:	83 ec 0c             	sub    esp,0xc
c00035a1:	31 d2                	xor    edx,edx
c00035a3:	55                   	push   ebp
c00035a4:	89 d8                	mov    eax,ebx
c00035a6:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035aa:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035ae:	52                   	push   edx
c00035af:	50                   	push   eax
c00035b0:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035b4:	57                   	push   edi
c00035b5:	50                   	push   eax
c00035b6:	e8 63 e5 ff ff       	call   c0001b1e <disk_write>
c00035bb:	83 c4 20             	add    esp,0x20
c00035be:	85 c0                	test   eax,eax
c00035c0:	75 0a                	jne    c00035cc <dir_clear+0xde>
c00035c2:	01 eb                	add    ebx,ebp
c00035c4:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035c8:	39 d8                	cmp    eax,ebx
c00035ca:	77 d2                	ja     c000359e <dir_clear+0xb0>
c00035cc:	83 ec 0c             	sub    esp,0xc
c00035cf:	57                   	push   edi
c00035d0:	e8 ff 4f 00 00       	call   c00085d4 <ff_memfree>
c00035d5:	83 c4 10             	add    esp,0x10
c00035d8:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035dc:	39 d8                	cmp    eax,ebx
c00035de:	0f 95 c0             	setne  al
c00035e1:	0f b6 c0             	movzx  eax,al
c00035e4:	eb 19                	jmp    c00035ff <dir_clear+0x111>
c00035e6:	b8 01 00 00 00       	mov    eax,0x1
c00035eb:	eb 12                	jmp    c00035ff <dir_clear+0x111>
c00035ed:	89 d9                	mov    ecx,ebx
c00035ef:	31 d2                	xor    edx,edx
c00035f1:	c1 eb 09             	shr    ebx,0x9
c00035f4:	e8 ee e5 ff ff       	call   c0001be7 <mem_set>
c00035f9:	89 dd                	mov    ebp,ebx
c00035fb:	31 db                	xor    ebx,ebx
c00035fd:	eb c5                	jmp    c00035c4 <dir_clear+0xd6>
c00035ff:	83 c4 1c             	add    esp,0x1c
c0003602:	5b                   	pop    ebx
c0003603:	5e                   	pop    esi
c0003604:	5f                   	pop    edi
c0003605:	5d                   	pop    ebp
c0003606:	c3                   	ret    

c0003607 <dir_next>:
c0003607:	55                   	push   ebp
c0003608:	57                   	push   edi
c0003609:	56                   	push   esi
c000360a:	53                   	push   ebx
c000360b:	89 c3                	mov    ebx,eax
c000360d:	83 ec 1c             	sub    esp,0x1c
c0003610:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003612:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003616:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003619:	8d 78 20             	lea    edi,[eax+0x20]
c000361c:	31 c0                	xor    eax,eax
c000361e:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003622:	0f 94 c0             	sete   al
c0003625:	48                   	dec    eax
c0003626:	25 00 00 20 f0       	and    eax,0xf0200000
c000362b:	05 00 00 00 10       	add    eax,0x10000000
c0003630:	39 f8                	cmp    eax,edi
c0003632:	77 0e                	ja     c0003642 <dir_next+0x3b>
c0003634:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000363b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003642:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003645:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003648:	b8 04 00 00 00       	mov    eax,0x4
c000364d:	89 ce                	mov    esi,ecx
c000364f:	09 d6                	or     esi,edx
c0003651:	0f 84 da 00 00 00    	je     c0003731 <dir_next+0x12a>
c0003657:	89 f8                	mov    eax,edi
c0003659:	25 ff 01 00 00       	and    eax,0x1ff
c000365e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003662:	0f 85 b9 00 00 00    	jne    c0003721 <dir_next+0x11a>
c0003668:	83 c2 01             	add    edx,0x1
c000366b:	83 d1 00             	adc    ecx,0x0
c000366e:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003671:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003674:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003677:	85 d2                	test   edx,edx
c0003679:	75 29                	jne    c00036a4 <dir_next+0x9d>
c000367b:	89 fa                	mov    edx,edi
c000367d:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003681:	c1 ea 05             	shr    edx,0x5
c0003684:	39 c2                	cmp    edx,eax
c0003686:	0f 82 95 00 00 00    	jb     c0003721 <dir_next+0x11a>
c000368c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003693:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000369a:	b8 04 00 00 00       	mov    eax,0x4
c000369f:	e9 8d 00 00 00       	jmp    c0003731 <dir_next+0x12a>
c00036a4:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036a8:	89 f9                	mov    ecx,edi
c00036aa:	48                   	dec    eax
c00036ab:	c1 e9 09             	shr    ecx,0x9
c00036ae:	85 c8                	test   eax,ecx
c00036b0:	75 6f                	jne    c0003721 <dir_next+0x11a>
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	e8 00 f8 ff ff       	call   c0002eb9 <get_fat>
c00036b9:	89 c6                	mov    esi,eax
c00036bb:	83 f8 01             	cmp    eax,0x1
c00036be:	77 07                	ja     c00036c7 <dir_next+0xc0>
c00036c0:	b8 02 00 00 00       	mov    eax,0x2
c00036c5:	eb 6a                	jmp    c0003731 <dir_next+0x12a>
c00036c7:	83 f8 ff             	cmp    eax,0xffffffff
c00036ca:	75 07                	jne    c00036d3 <dir_next+0xcc>
c00036cc:	b8 01 00 00 00       	mov    eax,0x1
c00036d1:	eb 5e                	jmp    c0003731 <dir_next+0x12a>
c00036d3:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036d6:	77 37                	ja     c000370f <dir_next+0x108>
c00036d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036dd:	74 ad                	je     c000368c <dir_next+0x85>
c00036df:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036e2:	89 d8                	mov    eax,ebx
c00036e4:	e8 be fa ff ff       	call   c00031a7 <create_chain>
c00036e9:	89 c6                	mov    esi,eax
c00036eb:	b8 07 00 00 00       	mov    eax,0x7
c00036f0:	85 f6                	test   esi,esi
c00036f2:	74 3d                	je     c0003731 <dir_next+0x12a>
c00036f4:	83 fe 01             	cmp    esi,0x1
c00036f7:	74 c7                	je     c00036c0 <dir_next+0xb9>
c00036f9:	83 fe ff             	cmp    esi,0xffffffff
c00036fc:	74 ce                	je     c00036cc <dir_next+0xc5>
c00036fe:	89 f2                	mov    edx,esi
c0003700:	89 e8                	mov    eax,ebp
c0003702:	e8 e7 fd ff ff       	call   c00034ee <dir_clear>
c0003707:	85 c0                	test   eax,eax
c0003709:	75 c1                	jne    c00036cc <dir_next+0xc5>
c000370b:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000370f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003712:	89 f2                	mov    edx,esi
c0003714:	89 e8                	mov    eax,ebp
c0003716:	e8 d1 e6 ff ff       	call   c0001dec <clst2sect>
c000371b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000371e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003725:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003728:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000372c:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000372f:	31 c0                	xor    eax,eax
c0003731:	83 c4 1c             	add    esp,0x1c
c0003734:	5b                   	pop    ebx
c0003735:	5e                   	pop    esi
c0003736:	5f                   	pop    edi
c0003737:	5d                   	pop    ebp
c0003738:	c3                   	ret    

c0003739 <load_xdir>:
c0003739:	55                   	push   ebp
c000373a:	57                   	push   edi
c000373b:	56                   	push   esi
c000373c:	89 c6                	mov    esi,eax
c000373e:	53                   	push   ebx
c000373f:	83 ec 1c             	sub    esp,0x1c
c0003742:	8b 00                	mov    eax,DWORD PTR [eax]
c0003744:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003747:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000374a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000374d:	e8 df eb ff ff       	call   c0002331 <move_window>
c0003752:	89 c3                	mov    ebx,eax
c0003754:	85 c0                	test   eax,eax
c0003756:	0f 85 0c 01 00 00    	jne    c0003868 <load_xdir+0x12f>
c000375c:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000375f:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003762:	0f 85 fb 00 00 00    	jne    c0003863 <load_xdir+0x12a>
c0003768:	89 f8                	mov    eax,edi
c000376a:	b9 20 00 00 00       	mov    ecx,0x20
c000376f:	e8 5e e4 ff ff       	call   c0001bd2 <mem_cpy>
c0003774:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003778:	40                   	inc    eax
c0003779:	c1 e0 05             	shl    eax,0x5
c000377c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003780:	83 e8 60             	sub    eax,0x60
c0003783:	3d 00 02 00 00       	cmp    eax,0x200
c0003788:	0f 87 d5 00 00 00    	ja     c0003863 <load_xdir+0x12a>
c000378e:	31 d2                	xor    edx,edx
c0003790:	89 f0                	mov    eax,esi
c0003792:	e8 70 fe ff ff       	call   c0003607 <dir_next>
c0003797:	89 c3                	mov    ebx,eax
c0003799:	83 f8 04             	cmp    eax,0x4
c000379c:	0f 84 c1 00 00 00    	je     c0003863 <load_xdir+0x12a>
c00037a2:	85 c0                	test   eax,eax
c00037a4:	0f 85 be 00 00 00    	jne    c0003868 <load_xdir+0x12f>
c00037aa:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037ad:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037b0:	8b 06                	mov    eax,DWORD PTR [esi]
c00037b2:	e8 7a eb ff ff       	call   c0002331 <move_window>
c00037b7:	89 c3                	mov    ebx,eax
c00037b9:	85 c0                	test   eax,eax
c00037bb:	0f 85 a7 00 00 00    	jne    c0003868 <load_xdir+0x12f>
c00037c1:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037c4:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037c7:	0f 85 96 00 00 00    	jne    c0003863 <load_xdir+0x12a>
c00037cd:	8d 47 20             	lea    eax,[edi+0x20]
c00037d0:	b9 20 00 00 00       	mov    ecx,0x20
c00037d5:	e8 f8 e3 ff ff       	call   c0001bd2 <mem_cpy>
c00037da:	31 d2                	xor    edx,edx
c00037dc:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037e0:	b9 0f 00 00 00       	mov    ecx,0xf
c00037e5:	83 c0 2c             	add    eax,0x2c
c00037e8:	f7 f1                	div    ecx
c00037ea:	c1 e0 05             	shl    eax,0x5
c00037ed:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037f1:	77 70                	ja     c0003863 <load_xdir+0x12a>
c00037f3:	bd 40 00 00 00       	mov    ebp,0x40
c00037f8:	31 d2                	xor    edx,edx
c00037fa:	89 f0                	mov    eax,esi
c00037fc:	e8 06 fe ff ff       	call   c0003607 <dir_next>
c0003801:	89 c3                	mov    ebx,eax
c0003803:	83 f8 04             	cmp    eax,0x4
c0003806:	74 5b                	je     c0003863 <load_xdir+0x12a>
c0003808:	85 c0                	test   eax,eax
c000380a:	75 5c                	jne    c0003868 <load_xdir+0x12f>
c000380c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000380f:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003812:	8b 06                	mov    eax,DWORD PTR [esi]
c0003814:	e8 18 eb ff ff       	call   c0002331 <move_window>
c0003819:	89 c3                	mov    ebx,eax
c000381b:	85 c0                	test   eax,eax
c000381d:	75 49                	jne    c0003868 <load_xdir+0x12f>
c000381f:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003822:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003825:	75 3c                	jne    c0003863 <load_xdir+0x12a>
c0003827:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000382d:	77 0d                	ja     c000383c <load_xdir+0x103>
c000382f:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003832:	b9 20 00 00 00       	mov    ecx,0x20
c0003837:	e8 96 e3 ff ff       	call   c0001bd2 <mem_cpy>
c000383c:	83 c5 20             	add    ebp,0x20
c000383f:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003843:	77 b3                	ja     c00037f8 <load_xdir+0xbf>
c0003845:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000384b:	77 1b                	ja     c0003868 <load_xdir+0x12f>
c000384d:	89 f8                	mov    eax,edi
c000384f:	e8 cd e7 ff ff       	call   c0002021 <xdir_sum>
c0003854:	89 c1                	mov    ecx,eax
c0003856:	8d 47 02             	lea    eax,[edi+0x2]
c0003859:	e8 f5 e2 ff ff       	call   c0001b53 <ld_word>
c000385e:	66 39 c1             	cmp    cx,ax
c0003861:	74 05                	je     c0003868 <load_xdir+0x12f>
c0003863:	bb 02 00 00 00       	mov    ebx,0x2
c0003868:	83 c4 1c             	add    esp,0x1c
c000386b:	89 d8                	mov    eax,ebx
c000386d:	5b                   	pop    ebx
c000386e:	5e                   	pop    esi
c000386f:	5f                   	pop    edi
c0003870:	5d                   	pop    ebp
c0003871:	c3                   	ret    

c0003872 <load_obj_xdir>:
c0003872:	53                   	push   ebx
c0003873:	89 c3                	mov    ebx,eax
c0003875:	83 ec 08             	sub    esp,0x8
c0003878:	8b 02                	mov    eax,DWORD PTR [edx]
c000387a:	89 03                	mov    DWORD PTR [ebx],eax
c000387c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000387f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003882:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003885:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003888:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000388b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003892:	30 c0                	xor    al,al
c0003894:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000389b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000389e:	89 d8                	mov    eax,ebx
c00038a0:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038a3:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038a6:	e8 04 f8 ff ff       	call   c00030af <dir_sdi>
c00038ab:	85 c0                	test   eax,eax
c00038ad:	75 0b                	jne    c00038ba <load_obj_xdir+0x48>
c00038af:	89 d8                	mov    eax,ebx
c00038b1:	83 c4 08             	add    esp,0x8
c00038b4:	5b                   	pop    ebx
c00038b5:	e9 7f fe ff ff       	jmp    c0003739 <load_xdir>
c00038ba:	83 c4 08             	add    esp,0x8
c00038bd:	5b                   	pop    ebx
c00038be:	c3                   	ret    

c00038bf <dir_read>:
c00038bf:	55                   	push   ebp
c00038c0:	bd 04 00 00 00       	mov    ebp,0x4
c00038c5:	57                   	push   edi
c00038c6:	56                   	push   esi
c00038c7:	be ff ff ff ff       	mov    esi,0xffffffff
c00038cc:	53                   	push   ebx
c00038cd:	89 c3                	mov    ebx,eax
c00038cf:	83 ec 1c             	sub    esp,0x1c
c00038d2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038d6:	8b 38                	mov    edi,DWORD PTR [eax]
c00038d8:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038e3:	89 c8                	mov    eax,ecx
c00038e5:	09 d0                	or     eax,edx
c00038e7:	0f 84 25 01 00 00    	je     c0003a12 <dir_read+0x153>
c00038ed:	89 f8                	mov    eax,edi
c00038ef:	e8 3d ea ff ff       	call   c0002331 <move_window>
c00038f4:	89 c5                	mov    ebp,eax
c00038f6:	85 c0                	test   eax,eax
c00038f8:	0f 85 23 01 00 00    	jne    c0003a21 <dir_read+0x162>
c00038fe:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003901:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003903:	84 c9                	test   cl,cl
c0003905:	0f 84 11 01 00 00    	je     c0003a1c <dir_read+0x15d>
c000390b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c000390e:	75 48                	jne    c0003958 <dir_read+0x99>
c0003910:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003915:	74 10                	je     c0003927 <dir_read+0x68>
c0003917:	80 f9 83             	cmp    cl,0x83
c000391a:	0f 85 dd 00 00 00    	jne    c00039fd <dir_read+0x13e>
c0003920:	31 ed                	xor    ebp,ebp
c0003922:	e9 08 01 00 00       	jmp    c0003a2f <dir_read+0x170>
c0003927:	80 f9 85             	cmp    cl,0x85
c000392a:	0f 85 cd 00 00 00    	jne    c00039fd <dir_read+0x13e>
c0003930:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003933:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003936:	89 d8                	mov    eax,ebx
c0003938:	e8 fc fd ff ff       	call   c0003739 <load_xdir>
c000393d:	89 c5                	mov    ebp,eax
c000393f:	85 c0                	test   eax,eax
c0003941:	0f 85 da 00 00 00    	jne    c0003a21 <dir_read+0x162>
c0003947:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c000394a:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000394d:	83 e0 3f             	and    eax,0x3f
c0003950:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003953:	e9 d7 00 00 00       	jmp    c0003a2f <dir_read+0x170>
c0003958:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000395b:	83 e0 3f             	and    eax,0x3f
c000395e:	80 f9 2e             	cmp    cl,0x2e
c0003961:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003965:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003968:	0f 84 8a 00 00 00    	je     c00039f8 <dir_read+0x139>
c000396e:	80 f9 e5             	cmp    cl,0xe5
c0003971:	0f 84 81 00 00 00    	je     c00039f8 <dir_read+0x139>
c0003977:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000397b:	83 e0 1f             	and    eax,0x1f
c000397e:	83 f8 08             	cmp    eax,0x8
c0003981:	0f 94 c0             	sete   al
c0003984:	0f b6 c0             	movzx  eax,al
c0003987:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000398b:	75 6b                	jne    c00039f8 <dir_read+0x139>
c000398d:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003992:	75 44                	jne    c00039d8 <dir_read+0x119>
c0003994:	f6 c1 40             	test   cl,0x40
c0003997:	74 12                	je     c00039ab <dir_read+0xec>
c0003999:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000399c:	83 e1 bf             	and    ecx,0xffffffbf
c000399f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039a3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039a6:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039a9:	eb 06                	jmp    c00039b1 <dir_read+0xf2>
c00039ab:	89 f0                	mov    eax,esi
c00039ad:	38 c8                	cmp    al,cl
c00039af:	75 47                	jne    c00039f8 <dir_read+0x139>
c00039b1:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039b5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039ba:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039bd:	75 3e                	jne    c00039fd <dir_read+0x13e>
c00039bf:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039c3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039c6:	e8 8a e4 ff ff       	call   c0001e55 <pick_lfn>
c00039cb:	85 c0                	test   eax,eax
c00039cd:	74 2e                	je     c00039fd <dir_read+0x13e>
c00039cf:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039d3:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039d6:	eb 25                	jmp    c00039fd <dir_read+0x13e>
c00039d8:	89 f0                	mov    eax,esi
c00039da:	84 c0                	test   al,al
c00039dc:	75 11                	jne    c00039ef <dir_read+0x130>
c00039de:	89 d0                	mov    eax,edx
c00039e0:	e8 2a e6 ff ff       	call   c000200f <sum_sfn>
c00039e5:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00039e9:	0f 84 31 ff ff ff    	je     c0003920 <dir_read+0x61>
c00039ef:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00039f6:	eb 37                	jmp    c0003a2f <dir_read+0x170>
c00039f8:	be ff ff ff ff       	mov    esi,0xffffffff
c00039fd:	31 d2                	xor    edx,edx
c00039ff:	89 d8                	mov    eax,ebx
c0003a01:	e8 01 fc ff ff       	call   c0003607 <dir_next>
c0003a06:	89 c5                	mov    ebp,eax
c0003a08:	85 c0                	test   eax,eax
c0003a0a:	0f 84 cd fe ff ff    	je     c00038dd <dir_read+0x1e>
c0003a10:	eb 0f                	jmp    c0003a21 <dir_read+0x162>
c0003a12:	85 ed                	test   ebp,ebp
c0003a14:	0f 84 06 ff ff ff    	je     c0003920 <dir_read+0x61>
c0003a1a:	eb 05                	jmp    c0003a21 <dir_read+0x162>
c0003a1c:	bd 04 00 00 00       	mov    ebp,0x4
c0003a21:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a28:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a2f:	83 c4 1c             	add    esp,0x1c
c0003a32:	89 e8                	mov    eax,ebp
c0003a34:	5b                   	pop    ebx
c0003a35:	5e                   	pop    esi
c0003a36:	5f                   	pop    edi
c0003a37:	5d                   	pop    ebp
c0003a38:	c3                   	ret    

c0003a39 <dir_alloc>:
c0003a39:	55                   	push   ebp
c0003a3a:	89 d5                	mov    ebp,edx
c0003a3c:	57                   	push   edi
c0003a3d:	31 d2                	xor    edx,edx
c0003a3f:	56                   	push   esi
c0003a40:	53                   	push   ebx
c0003a41:	89 c3                	mov    ebx,eax
c0003a43:	83 ec 0c             	sub    esp,0xc
c0003a46:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a48:	e8 62 f6 ff ff       	call   c00030af <dir_sdi>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	75 4e                	jne    c0003a9f <dir_alloc+0x66>
c0003a51:	31 f6                	xor    esi,esi
c0003a53:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a56:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a59:	89 f8                	mov    eax,edi
c0003a5b:	e8 d1 e8 ff ff       	call   c0002331 <move_window>
c0003a60:	85 c0                	test   eax,eax
c0003a62:	75 3b                	jne    c0003a9f <dir_alloc+0x66>
c0003a64:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a67:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a6a:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a6c:	75 07                	jne    c0003a75 <dir_alloc+0x3c>
c0003a6e:	f7 d2                	not    edx
c0003a70:	c0 ea 07             	shr    dl,0x7
c0003a73:	eb 0d                	jmp    c0003a82 <dir_alloc+0x49>
c0003a75:	84 d2                	test   dl,dl
c0003a77:	0f 94 c1             	sete   cl
c0003a7a:	80 fa e5             	cmp    dl,0xe5
c0003a7d:	0f 94 c2             	sete   dl
c0003a80:	09 ca                	or     edx,ecx
c0003a82:	84 d2                	test   dl,dl
c0003a84:	74 07                	je     c0003a8d <dir_alloc+0x54>
c0003a86:	46                   	inc    esi
c0003a87:	39 ee                	cmp    esi,ebp
c0003a89:	75 04                	jne    c0003a8f <dir_alloc+0x56>
c0003a8b:	eb 1c                	jmp    c0003aa9 <dir_alloc+0x70>
c0003a8d:	31 f6                	xor    esi,esi
c0003a8f:	ba 01 00 00 00       	mov    edx,0x1
c0003a94:	89 d8                	mov    eax,ebx
c0003a96:	e8 6c fb ff ff       	call   c0003607 <dir_next>
c0003a9b:	85 c0                	test   eax,eax
c0003a9d:	74 b4                	je     c0003a53 <dir_alloc+0x1a>
c0003a9f:	83 f8 04             	cmp    eax,0x4
c0003aa2:	75 05                	jne    c0003aa9 <dir_alloc+0x70>
c0003aa4:	b8 07 00 00 00       	mov    eax,0x7
c0003aa9:	83 c4 0c             	add    esp,0xc
c0003aac:	5b                   	pop    ebx
c0003aad:	5e                   	pop    esi
c0003aae:	5f                   	pop    edi
c0003aaf:	5d                   	pop    ebp
c0003ab0:	c3                   	ret    

c0003ab1 <store_xdir>:
c0003ab1:	55                   	push   ebp
c0003ab2:	57                   	push   edi
c0003ab3:	89 c7                	mov    edi,eax
c0003ab5:	56                   	push   esi
c0003ab6:	53                   	push   ebx
c0003ab7:	83 ec 0c             	sub    esp,0xc
c0003aba:	8b 00                	mov    eax,DWORD PTR [eax]
c0003abc:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003abf:	89 e8                	mov    eax,ebp
c0003ac1:	e8 5b e5 ff ff       	call   c0002021 <xdir_sum>
c0003ac6:	0f b7 d0             	movzx  edx,ax
c0003ac9:	8d 45 02             	lea    eax,[ebp+0x2]
c0003acc:	e8 f4 e0 ff ff       	call   c0001bc5 <st_word>
c0003ad1:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ad5:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003ad8:	89 f8                	mov    eax,edi
c0003ada:	e8 d0 f5 ff ff       	call   c00030af <dir_sdi>
c0003adf:	89 c6                	mov    esi,eax
c0003ae1:	85 f6                	test   esi,esi
c0003ae3:	75 3d                	jne    c0003b22 <store_xdir+0x71>
c0003ae5:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003ae8:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003aeb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003aed:	e8 3f e8 ff ff       	call   c0002331 <move_window>
c0003af2:	89 c6                	mov    esi,eax
c0003af4:	85 c0                	test   eax,eax
c0003af6:	75 2a                	jne    c0003b22 <store_xdir+0x71>
c0003af8:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003afb:	b9 20 00 00 00       	mov    ecx,0x20
c0003b00:	89 ea                	mov    edx,ebp
c0003b02:	e8 cb e0 ff ff       	call   c0001bd2 <mem_cpy>
c0003b07:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b09:	85 db                	test   ebx,ebx
c0003b0b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b0f:	74 11                	je     c0003b22 <store_xdir+0x71>
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	89 f8                	mov    eax,edi
c0003b15:	83 c5 20             	add    ebp,0x20
c0003b18:	e8 ea fa ff ff       	call   c0003607 <dir_next>
c0003b1d:	4b                   	dec    ebx
c0003b1e:	89 c6                	mov    esi,eax
c0003b20:	eb bf                	jmp    c0003ae1 <store_xdir+0x30>
c0003b22:	89 f0                	mov    eax,esi
c0003b24:	83 fe 02             	cmp    esi,0x2
c0003b27:	76 05                	jbe    c0003b2e <store_xdir+0x7d>
c0003b29:	b8 02 00 00 00       	mov    eax,0x2
c0003b2e:	83 c4 0c             	add    esp,0xc
c0003b31:	5b                   	pop    ebx
c0003b32:	5e                   	pop    esi
c0003b33:	5f                   	pop    edi
c0003b34:	5d                   	pop    ebp
c0003b35:	c3                   	ret    

c0003b36 <dir_remove>:
c0003b36:	57                   	push   edi
c0003b37:	56                   	push   esi
c0003b38:	53                   	push   ebx
c0003b39:	89 c3                	mov    ebx,eax
c0003b3b:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b3e:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b40:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b43:	83 fa ff             	cmp    edx,0xffffffff
c0003b46:	74 09                	je     c0003b51 <dir_remove+0x1b>
c0003b48:	e8 62 f5 ff ff       	call   c00030af <dir_sdi>
c0003b4d:	85 c0                	test   eax,eax
c0003b4f:	75 41                	jne    c0003b92 <dir_remove+0x5c>
c0003b51:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b54:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b57:	89 f0                	mov    eax,esi
c0003b59:	e8 d3 e7 ff ff       	call   c0002331 <move_window>
c0003b5e:	85 c0                	test   eax,eax
c0003b60:	75 26                	jne    c0003b88 <dir_remove+0x52>
c0003b62:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b65:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b68:	75 05                	jne    c0003b6f <dir_remove+0x39>
c0003b6a:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b6d:	eb 03                	jmp    c0003b72 <dir_remove+0x3c>
c0003b6f:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b72:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b76:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b79:	73 17                	jae    c0003b92 <dir_remove+0x5c>
c0003b7b:	31 d2                	xor    edx,edx
c0003b7d:	89 d8                	mov    eax,ebx
c0003b7f:	e8 83 fa ff ff       	call   c0003607 <dir_next>
c0003b84:	85 c0                	test   eax,eax
c0003b86:	74 c9                	je     c0003b51 <dir_remove+0x1b>
c0003b88:	83 f8 04             	cmp    eax,0x4
c0003b8b:	75 05                	jne    c0003b92 <dir_remove+0x5c>
c0003b8d:	b8 02 00 00 00       	mov    eax,0x2
c0003b92:	5b                   	pop    ebx
c0003b93:	5e                   	pop    esi
c0003b94:	5f                   	pop    edi
c0003b95:	c3                   	ret    

c0003b96 <create_name>:
c0003b96:	55                   	push   ebp
c0003b97:	89 d5                	mov    ebp,edx
c0003b99:	57                   	push   edi
c0003b9a:	89 c7                	mov    edi,eax
c0003b9c:	56                   	push   esi
c0003b9d:	31 f6                	xor    esi,esi
c0003b9f:	53                   	push   ebx
c0003ba0:	83 ec 3c             	sub    esp,0x3c
c0003ba3:	8b 02                	mov    eax,DWORD PTR [edx]
c0003ba5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ba9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bab:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bb2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bb6:	e8 72 e0 ff ff       	call   c0001c2d <tchar2uni>
c0003bbb:	89 c3                	mov    ebx,eax
c0003bbd:	83 f8 ff             	cmp    eax,0xffffffff
c0003bc0:	75 0a                	jne    c0003bcc <create_name+0x36>
c0003bc2:	b8 06 00 00 00       	mov    eax,0x6
c0003bc7:	e9 9e 02 00 00       	jmp    c0003e6a <create_name+0x2d4>
c0003bcc:	3d ff ff 00 00       	cmp    eax,0xffff
c0003bd1:	76 0c                	jbe    c0003bdf <create_name+0x49>
c0003bd3:	c1 e8 10             	shr    eax,0x10
c0003bd6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003bda:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003bde:	46                   	inc    esi
c0003bdf:	66 83 fb 1f          	cmp    bx,0x1f
c0003be3:	76 4f                	jbe    c0003c34 <create_name+0x9e>
c0003be5:	66 83 fb 5c          	cmp    bx,0x5c
c0003be9:	74 35                	je     c0003c20 <create_name+0x8a>
c0003beb:	66 83 fb 2f          	cmp    bx,0x2f
c0003bef:	74 2f                	je     c0003c20 <create_name+0x8a>
c0003bf1:	66 83 fb 7f          	cmp    bx,0x7f
c0003bf5:	77 11                	ja     c0003c08 <create_name+0x72>
c0003bf7:	0f b7 d3             	movzx  edx,bx
c0003bfa:	b8 92 26 02 c0       	mov    eax,0xc0022692
c0003bff:	e8 11 e0 ff ff       	call   c0001c15 <chk_chr>
c0003c04:	85 c0                	test   eax,eax
c0003c06:	75 ba                	jne    c0003bc2 <create_name+0x2c>
c0003c08:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c0e:	77 b2                	ja     c0003bc2 <create_name+0x2c>
c0003c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c14:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c18:	46                   	inc    esi
c0003c19:	eb 97                	jmp    c0003bb2 <create_name+0x1c>
c0003c1b:	40                   	inc    eax
c0003c1c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c20:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c24:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c26:	80 fa 2f             	cmp    dl,0x2f
c0003c29:	74 f0                	je     c0003c1b <create_name+0x85>
c0003c2b:	80 fa 5c             	cmp    dl,0x5c
c0003c2e:	74 eb                	je     c0003c1b <create_name+0x85>
c0003c30:	31 db                	xor    ebx,ebx
c0003c32:	eb 02                	jmp    c0003c36 <create_name+0xa0>
c0003c34:	b3 04                	mov    bl,0x4
c0003c36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c3a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c3d:	85 f6                	test   esi,esi
c0003c3f:	74 18                	je     c0003c59 <create_name+0xc3>
c0003c41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c45:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c4a:	66 83 f8 20          	cmp    ax,0x20
c0003c4e:	74 06                	je     c0003c56 <create_name+0xc0>
c0003c50:	66 83 f8 2e          	cmp    ax,0x2e
c0003c54:	75 03                	jne    c0003c59 <create_name+0xc3>
c0003c56:	4e                   	dec    esi
c0003c57:	eb e4                	jmp    c0003c3d <create_name+0xa7>
c0003c59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c5d:	31 ed                	xor    ebp,ebp
c0003c5f:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c65:	85 f6                	test   esi,esi
c0003c67:	0f 84 55 ff ff ff    	je     c0003bc2 <create_name+0x2c>
c0003c6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c71:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c74:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c78:	66 83 f8 20          	cmp    ax,0x20
c0003c7c:	75 04                	jne    c0003c82 <create_name+0xec>
c0003c7e:	89 d5                	mov    ebp,edx
c0003c80:	eb eb                	jmp    c0003c6d <create_name+0xd7>
c0003c82:	85 ed                	test   ebp,ebp
c0003c84:	75 06                	jne    c0003c8c <create_name+0xf6>
c0003c86:	66 83 f8 2e          	cmp    ax,0x2e
c0003c8a:	75 08                	jne    c0003c94 <create_name+0xfe>
c0003c8c:	83 cb 03             	or     ebx,0x3
c0003c8f:	eb 03                	jmp    c0003c94 <create_name+0xfe>
c0003c91:	4e                   	dec    esi
c0003c92:	74 0c                	je     c0003ca0 <create_name+0x10a>
c0003c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c98:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003c9e:	75 f1                	jne    c0003c91 <create_name+0xfb>
c0003ca0:	b9 0b 00 00 00       	mov    ecx,0xb
c0003ca5:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003ca8:	ba 20 00 00 00       	mov    edx,0x20
c0003cad:	e8 35 df ff ff       	call   c0001be7 <mem_set>
c0003cb2:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cba:	31 c9                	xor    ecx,ecx
c0003cbc:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cc1:	8d 45 01             	lea    eax,[ebp+0x1]
c0003cc4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ccc:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003cd0:	66 85 ed             	test   bp,bp
c0003cd3:	0f 84 30 01 00 00    	je     c0003e09 <create_name+0x273>
c0003cd9:	66 83 fd 20          	cmp    bp,0x20
c0003cdd:	74 10                	je     c0003cef <create_name+0x159>
c0003cdf:	66 83 fd 2e          	cmp    bp,0x2e
c0003ce3:	75 13                	jne    c0003cf8 <create_name+0x162>
c0003ce5:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003ce9:	0f 84 6b 01 00 00    	je     c0003e5a <create_name+0x2c4>
c0003cef:	83 cb 03             	or     ebx,0x3
c0003cf2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003cf6:	eb c9                	jmp    c0003cc1 <create_name+0x12b>
c0003cf8:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003cfc:	73 0b                	jae    c0003d09 <create_name+0x173>
c0003cfe:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d02:	75 47                	jne    c0003d4b <create_name+0x1b5>
c0003d04:	e9 51 01 00 00       	jmp    c0003e5a <create_name+0x2c4>
c0003d09:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d0e:	75 10                	jne    c0003d20 <create_name+0x18a>
c0003d10:	83 cb 03             	or     ebx,0x3
c0003d13:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d1b:	e9 e9 00 00 00       	jmp    c0003e09 <create_name+0x273>
c0003d20:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d24:	74 0d                	je     c0003d33 <create_name+0x19d>
c0003d26:	83 cb 03             	or     ebx,0x3
c0003d29:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d2d:	0f 87 d6 00 00 00    	ja     c0003e09 <create_name+0x273>
c0003d33:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d38:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d3c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d44:	b9 08 00 00 00       	mov    ecx,0x8
c0003d49:	eb a7                	jmp    c0003cf2 <create_name+0x15c>
c0003d4b:	66 83 fd 7f          	cmp    bp,0x7f
c0003d4f:	76 68                	jbe    c0003db9 <create_name+0x223>
c0003d51:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d55:	88 da                	mov    dl,bl
c0003d57:	83 ca 02             	or     edx,0x2
c0003d5a:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d5e:	50                   	push   eax
c0003d5f:	50                   	push   eax
c0003d60:	68 b5 01 00 00       	push   0x1b5
c0003d65:	55                   	push   ebp
c0003d66:	e8 81 48 00 00       	call   c00085ec <ff_uni2oem>
c0003d6b:	83 c4 10             	add    esp,0x10
c0003d6e:	89 c5                	mov    ebp,eax
c0003d70:	a8 80                	test   al,0x80
c0003d72:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d76:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d7a:	74 0c                	je     c0003d88 <create_name+0x1f2>
c0003d7c:	83 e5 7f             	and    ebp,0x7f
c0003d7f:	0f b6 ad e0 25 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdda20]
c0003d86:	eb 2a                	jmp    c0003db2 <create_name+0x21c>
c0003d88:	66 3d ff 00          	cmp    ax,0xff
c0003d8c:	76 24                	jbe    c0003db2 <create_name+0x21c>
c0003d8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d92:	48                   	dec    eax
c0003d93:	39 c8                	cmp    eax,ecx
c0003d95:	77 0c                	ja     c0003da3 <create_name+0x20d>
c0003d97:	83 cb 03             	or     ebx,0x3
c0003d9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d9e:	e9 4f ff ff ff       	jmp    c0003cf2 <create_name+0x15c>
c0003da3:	89 e8                	mov    eax,ebp
c0003da5:	88 d3                	mov    bl,dl
c0003da7:	66 c1 e8 08          	shr    ax,0x8
c0003dab:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003daf:	41                   	inc    ecx
c0003db0:	eb 4b                	jmp    c0003dfd <create_name+0x267>
c0003db2:	88 d3                	mov    bl,dl
c0003db4:	66 85 ed             	test   bp,bp
c0003db7:	74 19                	je     c0003dd2 <create_name+0x23c>
c0003db9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dbd:	0f b7 d5             	movzx  edx,bp
c0003dc0:	b8 9b 26 02 c0       	mov    eax,0xc002269b
c0003dc5:	e8 4b de ff ff       	call   c0001c15 <chk_chr>
c0003dca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003dce:	85 c0                	test   eax,eax
c0003dd0:	74 0a                	je     c0003ddc <create_name+0x246>
c0003dd2:	83 cb 03             	or     ebx,0x3
c0003dd5:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003dda:	eb 21                	jmp    c0003dfd <create_name+0x267>
c0003ddc:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003ddf:	66 83 f8 19          	cmp    ax,0x19
c0003de3:	77 07                	ja     c0003dec <create_name+0x256>
c0003de5:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003dea:	eb 11                	jmp    c0003dfd <create_name+0x267>
c0003dec:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003def:	66 83 f8 19          	cmp    ax,0x19
c0003df3:	77 08                	ja     c0003dfd <create_name+0x267>
c0003df5:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003dfa:	83 ed 20             	sub    ebp,0x20
c0003dfd:	89 e8                	mov    eax,ebp
c0003dff:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e03:	41                   	inc    ecx
c0003e04:	e9 e9 fe ff ff       	jmp    c0003cf2 <create_name+0x15c>
c0003e09:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e0d:	75 04                	jne    c0003e13 <create_name+0x27d>
c0003e0f:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e13:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e18:	75 05                	jne    c0003e1f <create_name+0x289>
c0003e1a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e1f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e23:	83 e0 0c             	and    eax,0xc
c0003e26:	3c 0c                	cmp    al,0xc
c0003e28:	74 0b                	je     c0003e35 <create_name+0x29f>
c0003e2a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e2e:	83 e0 03             	and    eax,0x3
c0003e31:	3c 03                	cmp    al,0x3
c0003e33:	75 05                	jne    c0003e3a <create_name+0x2a4>
c0003e35:	83 cb 02             	or     ebx,0x2
c0003e38:	eb 19                	jmp    c0003e53 <create_name+0x2bd>
c0003e3a:	f6 c3 02             	test   bl,0x2
c0003e3d:	75 14                	jne    c0003e53 <create_name+0x2bd>
c0003e3f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e44:	74 03                	je     c0003e49 <create_name+0x2b3>
c0003e46:	83 cb 10             	or     ebx,0x10
c0003e49:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e4e:	74 03                	je     c0003e53 <create_name+0x2bd>
c0003e50:	83 cb 08             	or     ebx,0x8
c0003e53:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e56:	31 c0                	xor    eax,eax
c0003e58:	eb 10                	jmp    c0003e6a <create_name+0x2d4>
c0003e5a:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e5f:	0f 85 ce fe ff ff    	jne    c0003d33 <create_name+0x19d>
c0003e65:	e9 a6 fe ff ff       	jmp    c0003d10 <create_name+0x17a>
c0003e6a:	83 c4 3c             	add    esp,0x3c
c0003e6d:	5b                   	pop    ebx
c0003e6e:	5e                   	pop    esi
c0003e6f:	5f                   	pop    edi
c0003e70:	5d                   	pop    ebp
c0003e71:	c3                   	ret    

c0003e72 <xname_sum>:
c0003e72:	56                   	push   esi
c0003e73:	53                   	push   ebx
c0003e74:	89 c6                	mov    esi,eax
c0003e76:	51                   	push   ecx
c0003e77:	31 db                	xor    ebx,ebx
c0003e79:	83 c6 02             	add    esi,0x2
c0003e7c:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e80:	66 85 c0             	test   ax,ax
c0003e83:	74 1f                	je     c0003ea4 <xname_sum+0x32>
c0003e85:	83 ec 0c             	sub    esp,0xc
c0003e88:	66 d1 cb             	ror    bx,1
c0003e8b:	50                   	push   eax
c0003e8c:	e8 67 48 00 00       	call   c00086f8 <ff_wtoupper>
c0003e91:	83 c4 10             	add    esp,0x10
c0003e94:	0f b6 d0             	movzx  edx,al
c0003e97:	66 c1 e8 08          	shr    ax,0x8
c0003e9b:	01 d3                	add    ebx,edx
c0003e9d:	66 d1 cb             	ror    bx,1
c0003ea0:	01 c3                	add    ebx,eax
c0003ea2:	eb d5                	jmp    c0003e79 <xname_sum+0x7>
c0003ea4:	89 d8                	mov    eax,ebx
c0003ea6:	5a                   	pop    edx
c0003ea7:	5b                   	pop    ebx
c0003ea8:	5e                   	pop    esi
c0003ea9:	c3                   	ret    

c0003eaa <create_xdir>:
c0003eaa:	55                   	push   ebp
c0003eab:	b9 40 00 00 00       	mov    ecx,0x40
c0003eb0:	57                   	push   edi
c0003eb1:	bd 01 00 00 00       	mov    ebp,0x1
c0003eb6:	56                   	push   esi
c0003eb7:	31 ff                	xor    edi,edi
c0003eb9:	53                   	push   ebx
c0003eba:	be 40 00 00 00       	mov    esi,0x40
c0003ebf:	89 c3                	mov    ebx,eax
c0003ec1:	83 ec 1c             	sub    esp,0x1c
c0003ec4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ec8:	31 d2                	xor    edx,edx
c0003eca:	e8 18 dd ff ff       	call   c0001be7 <mem_set>
c0003ecf:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003ed2:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003ed6:	31 c9                	xor    ecx,ecx
c0003ed8:	8d 46 01             	lea    eax,[esi+0x1]
c0003edb:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003edf:	83 c6 02             	add    esi,0x2
c0003ee2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ee6:	66 85 ed             	test   bp,bp
c0003ee9:	74 12                	je     c0003efd <create_xdir+0x53>
c0003eeb:	0f b6 c1             	movzx  eax,cl
c0003eee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ef2:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003ef6:	66 83 fd 01          	cmp    bp,0x1
c0003efa:	80 d9 ff             	sbb    cl,0xff
c0003efd:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f00:	0f b7 d5             	movzx  edx,bp
c0003f03:	83 c6 02             	add    esi,0x2
c0003f06:	e8 ba dc ff ff       	call   c0001bc5 <st_word>
c0003f0b:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f11:	75 d3                	jne    c0003ee6 <create_xdir+0x3c>
c0003f13:	8d 47 01             	lea    eax,[edi+0x1]
c0003f16:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f1a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f1e:	0f b6 c1             	movzx  eax,cl
c0003f21:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f26:	74 07                	je     c0003f2f <create_xdir+0x85>
c0003f28:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f2d:	eb a9                	jmp    c0003ed8 <create_xdir+0x2e>
c0003f2f:	8d 47 02             	lea    eax,[edi+0x2]
c0003f32:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f35:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f38:	89 d0                	mov    eax,edx
c0003f3a:	e8 33 ff ff ff       	call   c0003e72 <xname_sum>
c0003f3f:	83 c4 1c             	add    esp,0x1c
c0003f42:	0f b7 d0             	movzx  edx,ax
c0003f45:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f48:	5b                   	pop    ebx
c0003f49:	5e                   	pop    esi
c0003f4a:	5f                   	pop    edi
c0003f4b:	5d                   	pop    ebp
c0003f4c:	e9 74 dc ff ff       	jmp    c0001bc5 <st_word>

c0003f51 <cmp_lfn>:
c0003f51:	55                   	push   ebp
c0003f52:	57                   	push   edi
c0003f53:	89 d7                	mov    edi,edx
c0003f55:	56                   	push   esi
c0003f56:	53                   	push   ebx
c0003f57:	83 ec 1c             	sub    esp,0x1c
c0003f5a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f5e:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f61:	e8 ed db ff ff       	call   c0001b53 <ld_word>
c0003f66:	66 85 c0             	test   ax,ax
c0003f69:	74 07                	je     c0003f72 <cmp_lfn+0x21>
c0003f6b:	31 c0                	xor    eax,eax
c0003f6d:	e9 9a 00 00 00       	jmp    c000400c <cmp_lfn+0xbb>
c0003f72:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f74:	bd 01 00 00 00       	mov    ebp,0x1
c0003f79:	83 e3 3f             	and    ebx,0x3f
c0003f7c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f84:	4b                   	dec    ebx
c0003f85:	6b db 0d             	imul   ebx,ebx,0xd
c0003f88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f8c:	0f b6 80 60 26 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd9a0]
c0003f93:	01 f8                	add    eax,edi
c0003f95:	e8 b9 db ff ff       	call   c0001b53 <ld_word>
c0003f9a:	66 85 ed             	test   bp,bp
c0003f9d:	89 c6                	mov    esi,eax
c0003f9f:	74 3c                	je     c0003fdd <cmp_lfn+0x8c>
c0003fa1:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003fa7:	77 c2                	ja     c0003f6b <cmp_lfn+0x1a>
c0003fa9:	83 ec 0c             	sub    esp,0xc
c0003fac:	0f b7 c0             	movzx  eax,ax
c0003faf:	50                   	push   eax
c0003fb0:	e8 43 47 00 00       	call   c00086f8 <ff_wtoupper>
c0003fb5:	89 c5                	mov    ebp,eax
c0003fb7:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fc2:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fc6:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fc9:	e8 2a 47 00 00       	call   c00086f8 <ff_wtoupper>
c0003fce:	83 c4 10             	add    esp,0x10
c0003fd1:	39 c5                	cmp    ebp,eax
c0003fd3:	75 96                	jne    c0003f6b <cmp_lfn+0x1a>
c0003fd5:	89 f5                	mov    ebp,esi
c0003fd7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003fdb:	eb 04                	jmp    c0003fe1 <cmp_lfn+0x90>
c0003fdd:	66 46                	inc    si
c0003fdf:	75 8a                	jne    c0003f6b <cmp_lfn+0x1a>
c0003fe1:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003fe5:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003fea:	75 9c                	jne    c0003f88 <cmp_lfn+0x37>
c0003fec:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003fef:	74 16                	je     c0004007 <cmp_lfn+0xb6>
c0003ff1:	66 85 ed             	test   bp,bp
c0003ff4:	74 11                	je     c0004007 <cmp_lfn+0xb6>
c0003ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ffa:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003fff:	0f 94 c0             	sete   al
c0004002:	0f b6 c0             	movzx  eax,al
c0004005:	eb 05                	jmp    c000400c <cmp_lfn+0xbb>
c0004007:	b8 01 00 00 00       	mov    eax,0x1
c000400c:	83 c4 1c             	add    esp,0x1c
c000400f:	5b                   	pop    ebx
c0004010:	5e                   	pop    esi
c0004011:	5f                   	pop    edi
c0004012:	5d                   	pop    ebp
c0004013:	c3                   	ret    

c0004014 <dir_find>:
c0004014:	55                   	push   ebp
c0004015:	31 d2                	xor    edx,edx
c0004017:	57                   	push   edi
c0004018:	56                   	push   esi
c0004019:	53                   	push   ebx
c000401a:	89 c3                	mov    ebx,eax
c000401c:	83 ec 1c             	sub    esp,0x1c
c000401f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004021:	e8 89 f0 ff ff       	call   c00030af <dir_sdi>
c0004026:	89 04 24             	mov    DWORD PTR [esp],eax
c0004029:	85 c0                	test   eax,eax
c000402b:	0f 85 9e 01 00 00    	jne    c00041cf <dir_find+0x1bb>
c0004031:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004034:	0f 85 8d 00 00 00    	jne    c00040c7 <dir_find+0xb3>
c000403a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000403d:	e8 30 fe ff ff       	call   c0003e72 <xname_sum>
c0004042:	89 c7                	mov    edi,eax
c0004044:	31 d2                	xor    edx,edx
c0004046:	89 d8                	mov    eax,ebx
c0004048:	e8 72 f8 ff ff       	call   c00038bf <dir_read>
c000404d:	85 c0                	test   eax,eax
c000404f:	0f 85 5e 01 00 00    	jne    c00041b3 <dir_find+0x19f>
c0004055:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004058:	8d 41 24             	lea    eax,[ecx+0x24]
c000405b:	e8 f3 da ff ff       	call   c0001b53 <ld_word>
c0004060:	66 39 f8             	cmp    ax,di
c0004063:	75 df                	jne    c0004044 <dir_find+0x30>
c0004065:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004068:	31 ed                	xor    ebp,ebp
c000406a:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000406e:	ba 40 00 00 00       	mov    edx,0x40
c0004073:	89 e9                	mov    ecx,ebp
c0004075:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004079:	0f 84 42 01 00 00    	je     c00041c1 <dir_find+0x1ad>
c000407f:	f6 c2 1f             	test   dl,0x1f
c0004082:	75 03                	jne    c0004087 <dir_find+0x73>
c0004084:	83 c2 02             	add    edx,0x2
c0004087:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000408b:	89 d0                	mov    eax,edx
c000408d:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004090:	e8 be da ff ff       	call   c0001b53 <ld_word>
c0004095:	83 ec 0c             	sub    esp,0xc
c0004098:	0f b7 c0             	movzx  eax,ax
c000409b:	50                   	push   eax
c000409c:	e8 57 46 00 00       	call   c00086f8 <ff_wtoupper>
c00040a1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040a5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040a8:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00040af:	e8 44 46 00 00       	call   c00086f8 <ff_wtoupper>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040bb:	75 87                	jne    c0004044 <dir_find+0x30>
c00040bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040c1:	45                   	inc    ebp
c00040c2:	83 c2 02             	add    edx,0x2
c00040c5:	eb ac                	jmp    c0004073 <dir_find+0x5f>
c00040c7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040ce:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040d3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040d8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040db:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040de:	89 f0                	mov    eax,esi
c00040e0:	e8 4c e2 ff ff       	call   c0002331 <move_window>
c00040e5:	85 c0                	test   eax,eax
c00040e7:	0f 85 c6 00 00 00    	jne    c00041b3 <dir_find+0x19f>
c00040ed:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00040f0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00040f3:	84 c9                	test   cl,cl
c00040f5:	0f 84 bd 00 00 00    	je     c00041b8 <dir_find+0x1a4>
c00040fb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00040fe:	88 d0                	mov    al,dl
c0004100:	83 e0 3f             	and    eax,0x3f
c0004103:	80 f9 e5             	cmp    cl,0xe5
c0004106:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004109:	0f 84 87 00 00 00    	je     c0004196 <dir_find+0x182>
c000410f:	80 e2 08             	and    dl,0x8
c0004112:	74 06                	je     c000411a <dir_find+0x106>
c0004114:	3c 0f                	cmp    al,0xf
c0004116:	75 7e                	jne    c0004196 <dir_find+0x182>
c0004118:	eb 04                	jmp    c000411e <dir_find+0x10a>
c000411a:	3c 0f                	cmp    al,0xf
c000411c:	75 4c                	jne    c000416a <dir_find+0x156>
c000411e:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004122:	75 7e                	jne    c00041a2 <dir_find+0x18e>
c0004124:	f6 c1 40             	test   cl,0x40
c0004127:	74 12                	je     c000413b <dir_find+0x127>
c0004129:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000412c:	83 e1 bf             	and    ecx,0xffffffbf
c000412f:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004133:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004136:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004139:	eb 06                	jmp    c0004141 <dir_find+0x12d>
c000413b:	89 f8                	mov    eax,edi
c000413d:	38 c8                	cmp    al,cl
c000413f:	75 5c                	jne    c000419d <dir_find+0x189>
c0004141:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004145:	bf ff ff ff ff       	mov    edi,0xffffffff
c000414a:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000414d:	75 53                	jne    c00041a2 <dir_find+0x18e>
c000414f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004153:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004156:	89 ea                	mov    edx,ebp
c0004158:	e8 f4 fd ff ff       	call   c0003f51 <cmp_lfn>
c000415d:	85 c0                	test   eax,eax
c000415f:	74 41                	je     c00041a2 <dir_find+0x18e>
c0004161:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004165:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004168:	eb 38                	jmp    c00041a2 <dir_find+0x18e>
c000416a:	89 f8                	mov    eax,edi
c000416c:	84 c0                	test   al,al
c000416e:	75 0d                	jne    c000417d <dir_find+0x169>
c0004170:	89 e8                	mov    eax,ebp
c0004172:	e8 98 de ff ff       	call   c000200f <sum_sfn>
c0004177:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000417b:	74 52                	je     c00041cf <dir_find+0x1bb>
c000417d:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004181:	75 13                	jne    c0004196 <dir_find+0x182>
c0004183:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004186:	b9 0b 00 00 00       	mov    ecx,0xb
c000418b:	89 e8                	mov    eax,ebp
c000418d:	e8 60 da ff ff       	call   c0001bf2 <mem_cmp>
c0004192:	85 c0                	test   eax,eax
c0004194:	74 39                	je     c00041cf <dir_find+0x1bb>
c0004196:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000419d:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041a2:	31 d2                	xor    edx,edx
c00041a4:	89 d8                	mov    eax,ebx
c00041a6:	e8 5c f4 ff ff       	call   c0003607 <dir_next>
c00041ab:	85 c0                	test   eax,eax
c00041ad:	0f 84 25 ff ff ff    	je     c00040d8 <dir_find+0xc4>
c00041b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00041b6:	eb 17                	jmp    c00041cf <dir_find+0x1bb>
c00041b8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041bf:	eb 0e                	jmp    c00041cf <dir_find+0x1bb>
c00041c1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041c4:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041c9:	0f 85 75 fe ff ff    	jne    c0004044 <dir_find+0x30>
c00041cf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041d2:	83 c4 1c             	add    esp,0x1c
c00041d5:	5b                   	pop    ebx
c00041d6:	5e                   	pop    esi
c00041d7:	5f                   	pop    edi
c00041d8:	5d                   	pop    ebp
c00041d9:	c3                   	ret    

c00041da <dir_register>:
c00041da:	55                   	push   ebp
c00041db:	57                   	push   edi
c00041dc:	56                   	push   esi
c00041dd:	be 06 00 00 00       	mov    esi,0x6
c00041e2:	53                   	push   ebx
c00041e3:	83 ec 6c             	sub    esp,0x6c
c00041e6:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00041ea:	0f 85 62 02 00 00    	jne    c0004452 <dir_register+0x278>
c00041f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00041f2:	31 ff                	xor    edi,edi
c00041f4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041f7:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00041fc:	74 03                	je     c0004201 <dir_register+0x27>
c00041fe:	47                   	inc    edi
c00041ff:	eb f6                	jmp    c00041f7 <dir_register+0x1d>
c0004201:	89 c3                	mov    ebx,eax
c0004203:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004207:	0f 85 e1 00 00 00    	jne    c00042ee <dir_register+0x114>
c000420d:	83 c7 0e             	add    edi,0xe
c0004210:	b9 0f 00 00 00       	mov    ecx,0xf
c0004215:	89 f8                	mov    eax,edi
c0004217:	31 d2                	xor    edx,edx
c0004219:	f7 f1                	div    ecx
c000421b:	8d 50 02             	lea    edx,[eax+0x2]
c000421e:	89 c7                	mov    edi,eax
c0004220:	89 d8                	mov    eax,ebx
c0004222:	e8 12 f8 ff ff       	call   c0003a39 <dir_alloc>
c0004227:	89 c6                	mov    esi,eax
c0004229:	85 c0                	test   eax,eax
c000422b:	0f 85 21 02 00 00    	jne    c0004452 <dir_register+0x278>
c0004231:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004237:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000423a:	c1 e7 05             	shl    edi,0x5
c000423d:	29 f8                	sub    eax,edi
c000423f:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004242:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004245:	a8 04                	test   al,0x4
c0004247:	0f 84 91 00 00 00    	je     c00042de <dir_register+0x104>
c000424d:	83 e0 fb             	and    eax,0xfffffffb
c0004250:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004253:	89 d8                	mov    eax,ebx
c0004255:	e8 25 ec ff ff       	call   c0002e7f <fill_first_frag>
c000425a:	85 c0                	test   eax,eax
c000425c:	0f 85 ee 01 00 00    	jne    c0004450 <dir_register+0x276>
c0004262:	83 c9 ff             	or     ecx,0xffffffff
c0004265:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004268:	89 d8                	mov    eax,ebx
c000426a:	e8 db eb ff ff       	call   c0002e4a <fill_last_frag>
c000426f:	85 c0                	test   eax,eax
c0004271:	0f 85 d9 01 00 00    	jne    c0004450 <dir_register+0x276>
c0004277:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000427b:	74 61                	je     c00042de <dir_register+0x104>
c000427d:	89 da                	mov    edx,ebx
c000427f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004283:	e8 ea f5 ff ff       	call   c0003872 <load_obj_xdir>
c0004288:	85 c0                	test   eax,eax
c000428a:	0f 85 c0 01 00 00    	jne    c0004450 <dir_register+0x276>
c0004290:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004294:	31 c9                	xor    ecx,ecx
c0004296:	c1 e2 09             	shl    edx,0x9
c0004299:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000429c:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000429f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042a2:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042a5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042a8:	83 c0 38             	add    eax,0x38
c00042ab:	e8 1c d9 ff ff       	call   c0001bcc <st_qword>
c00042b0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042b6:	83 c0 28             	add    eax,0x28
c00042b9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042bc:	e8 0b d9 ff ff       	call   c0001bcc <st_qword>
c00042c1:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042c4:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042c7:	83 c8 01             	or     eax,0x1
c00042ca:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042cd:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042d1:	e8 db f7 ff ff       	call   c0003ab1 <store_xdir>
c00042d6:	85 c0                	test   eax,eax
c00042d8:	0f 85 72 01 00 00    	jne    c0004450 <dir_register+0x276>
c00042de:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042e4:	e8 c1 fb ff ff       	call   c0003eaa <create_xdir>
c00042e9:	e9 64 01 00 00       	jmp    c0004452 <dir_register+0x278>
c00042ee:	8d 40 3c             	lea    eax,[eax+0x3c]
c00042f1:	b9 0c 00 00 00       	mov    ecx,0xc
c00042f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00042fa:	89 c2                	mov    edx,eax
c00042fc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004300:	e8 cd d8 ff ff       	call   c0001bd2 <mem_cpy>
c0004305:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c000430a:	74 58                	je     c0004364 <dir_register+0x18a>
c000430c:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004310:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004318:	83 ec 0c             	sub    esp,0xc
c000431b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000431e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004322:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004326:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000432a:	e8 24 dc ff ff       	call   c0001f53 <gen_numname>
c000432f:	89 d8                	mov    eax,ebx
c0004331:	e8 de fc ff ff       	call   c0004014 <dir_find>
c0004336:	83 c4 10             	add    esp,0x10
c0004339:	89 c6                	mov    esi,eax
c000433b:	85 c0                	test   eax,eax
c000433d:	75 15                	jne    c0004354 <dir_register+0x17a>
c000433f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004343:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004348:	75 ce                	jne    c0004318 <dir_register+0x13e>
c000434a:	be 07 00 00 00       	mov    esi,0x7
c000434f:	e9 fe 00 00 00       	jmp    c0004452 <dir_register+0x278>
c0004354:	83 f8 04             	cmp    eax,0x4
c0004357:	0f 85 f5 00 00 00    	jne    c0004452 <dir_register+0x278>
c000435d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004361:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004364:	b9 01 00 00 00       	mov    ecx,0x1
c0004369:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000436e:	74 0f                	je     c000437f <dir_register+0x1a5>
c0004370:	b9 0d 00 00 00       	mov    ecx,0xd
c0004375:	8d 47 0c             	lea    eax,[edi+0xc]
c0004378:	31 d2                	xor    edx,edx
c000437a:	f7 f1                	div    ecx
c000437c:	8d 48 01             	lea    ecx,[eax+0x1]
c000437f:	89 ca                	mov    edx,ecx
c0004381:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004385:	89 d8                	mov    eax,ebx
c0004387:	e8 ad f6 ff ff       	call   c0003a39 <dir_alloc>
c000438c:	89 c6                	mov    esi,eax
c000438e:	85 c0                	test   eax,eax
c0004390:	0f 85 bc 00 00 00    	jne    c0004452 <dir_register+0x278>
c0004396:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000439a:	49                   	dec    ecx
c000439b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439f:	74 6a                	je     c000440b <dir_register+0x231>
c00043a1:	89 c8                	mov    eax,ecx
c00043a3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043a6:	c1 e0 05             	shl    eax,0x5
c00043a9:	29 c2                	sub    edx,eax
c00043ab:	89 d8                	mov    eax,ebx
c00043ad:	e8 fd ec ff ff       	call   c00030af <dir_sdi>
c00043b2:	89 c6                	mov    esi,eax
c00043b4:	85 c0                	test   eax,eax
c00043b6:	0f 85 96 00 00 00    	jne    c0004452 <dir_register+0x278>
c00043bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043c0:	e8 4a dc ff ff       	call   c000200f <sum_sfn>
c00043c5:	0f b6 f8             	movzx  edi,al
c00043c8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043cb:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043ce:	89 e8                	mov    eax,ebp
c00043d0:	e8 5c df ff ff       	call   c0002331 <move_window>
c00043d5:	89 c6                	mov    esi,eax
c00043d7:	85 c0                	test   eax,eax
c00043d9:	75 77                	jne    c0004452 <dir_register+0x278>
c00043db:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043e0:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043e3:	83 ec 0c             	sub    esp,0xc
c00043e6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00043e9:	57                   	push   edi
c00043ea:	e8 e0 da ff ff       	call   c0001ecf <put_lfn>
c00043ef:	31 d2                	xor    edx,edx
c00043f1:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00043f5:	89 d8                	mov    eax,ebx
c00043f7:	e8 0b f2 ff ff       	call   c0003607 <dir_next>
c00043fc:	83 c4 10             	add    esp,0x10
c00043ff:	89 c6                	mov    esi,eax
c0004401:	85 c0                	test   eax,eax
c0004403:	75 4d                	jne    c0004452 <dir_register+0x278>
c0004405:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004409:	75 bd                	jne    c00043c8 <dir_register+0x1ee>
c000440b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000440e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004411:	89 e8                	mov    eax,ebp
c0004413:	e8 19 df ff ff       	call   c0002331 <move_window>
c0004418:	89 c6                	mov    esi,eax
c000441a:	85 c0                	test   eax,eax
c000441c:	75 34                	jne    c0004452 <dir_register+0x278>
c000441e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004421:	b9 20 00 00 00       	mov    ecx,0x20
c0004426:	31 d2                	xor    edx,edx
c0004428:	e8 ba d7 ff ff       	call   c0001be7 <mem_set>
c000442d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004430:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004434:	b9 0b 00 00 00       	mov    ecx,0xb
c0004439:	e8 94 d7 ff ff       	call   c0001bd2 <mem_cpy>
c000443e:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004441:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004444:	83 e0 18             	and    eax,0x18
c0004447:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000444a:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000444e:	eb 02                	jmp    c0004452 <dir_register+0x278>
c0004450:	89 c6                	mov    esi,eax
c0004452:	83 c4 6c             	add    esp,0x6c
c0004455:	89 f0                	mov    eax,esi
c0004457:	5b                   	pop    ebx
c0004458:	5e                   	pop    esi
c0004459:	5f                   	pop    edi
c000445a:	5d                   	pop    ebp
c000445b:	c3                   	ret    

c000445c <sync_fs>:
c000445c:	56                   	push   esi
c000445d:	53                   	push   ebx
c000445e:	53                   	push   ebx
c000445f:	89 c3                	mov    ebx,eax
c0004461:	e8 37 de ff ff       	call   c000229d <sync_window>
c0004466:	85 c0                	test   eax,eax
c0004468:	0f 85 b1 00 00 00    	jne    c000451f <sync_fs+0xc3>
c000446e:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004471:	0f 85 8e 00 00 00    	jne    c0004505 <sync_fs+0xa9>
c0004477:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000447b:	0f 85 84 00 00 00    	jne    c0004505 <sync_fs+0xa9>
c0004481:	b9 00 02 00 00       	mov    ecx,0x200
c0004486:	8d 73 54             	lea    esi,[ebx+0x54]
c0004489:	31 d2                	xor    edx,edx
c000448b:	89 f0                	mov    eax,esi
c000448d:	e8 55 d7 ff ff       	call   c0001be7 <mem_set>
c0004492:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004498:	ba 55 aa 00 00       	mov    edx,0xaa55
c000449d:	e8 23 d7 ff ff       	call   c0001bc5 <st_word>
c00044a2:	ba 52 52 61 41       	mov    edx,0x41615252
c00044a7:	89 f0                	mov    eax,esi
c00044a9:	e8 1b d7 ff ff       	call   c0001bc9 <st_dword>
c00044ae:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044b4:	ba 72 72 41 61       	mov    edx,0x61417272
c00044b9:	e8 0b d7 ff ff       	call   c0001bc9 <st_dword>
c00044be:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044c1:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044c7:	e8 fd d6 ff ff       	call   c0001bc9 <st_dword>
c00044cc:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044cf:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044d5:	e8 ef d6 ff ff       	call   c0001bc9 <st_dword>
c00044da:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044dd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044e0:	83 c0 01             	add    eax,0x1
c00044e3:	83 d2 00             	adc    edx,0x0
c00044e6:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00044e9:	83 ec 0c             	sub    esp,0xc
c00044ec:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00044ef:	6a 01                	push   0x1
c00044f1:	52                   	push   edx
c00044f2:	50                   	push   eax
c00044f3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00044f7:	56                   	push   esi
c00044f8:	50                   	push   eax
c00044f9:	e8 20 d6 ff ff       	call   c0001b1e <disk_write>
c00044fe:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004502:	83 c4 20             	add    esp,0x20
c0004505:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004509:	51                   	push   ecx
c000450a:	6a 00                	push   0x0
c000450c:	6a 00                	push   0x0
c000450e:	50                   	push   eax
c000450f:	e8 20 d6 ff ff       	call   c0001b34 <disk_ioctl>
c0004514:	83 c4 10             	add    esp,0x10
c0004517:	85 c0                	test   eax,eax
c0004519:	0f 95 c0             	setne  al
c000451c:	0f b6 c0             	movzx  eax,al
c000451f:	5a                   	pop    edx
c0004520:	5b                   	pop    ebx
c0004521:	5e                   	pop    esi
c0004522:	c3                   	ret    

c0004523 <create_partition>:
c0004523:	55                   	push   ebp
c0004524:	0f b6 c0             	movzx  eax,al
c0004527:	57                   	push   edi
c0004528:	56                   	push   esi
c0004529:	53                   	push   ebx
c000452a:	83 ec 60             	sub    esp,0x60
c000452d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004531:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004535:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004539:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000453d:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004541:	50                   	push   eax
c0004542:	6a 01                	push   0x1
c0004544:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004548:	e8 e7 d5 ff ff       	call   c0001b34 <disk_ioctl>
c000454d:	83 c4 10             	add    esp,0x10
c0004550:	85 c0                	test   eax,eax
c0004552:	74 0a                	je     c000455e <create_partition+0x3b>
c0004554:	b8 01 00 00 00       	mov    eax,0x1
c0004559:	e9 67 05 00 00       	jmp    c0004ac5 <create_partition+0x5a2>
c000455e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004562:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004566:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000456a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000456e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004573:	0f 86 ed 03 00 00    	jbe    c0004966 <create_partition+0x443>
c0004579:	83 c0 df             	add    eax,0xffffffdf
c000457c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004584:	83 d2 ff             	adc    edx,0xffffffff
c0004587:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000458b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000458f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004593:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004597:	83 c0 bd             	add    eax,0xffffffbd
c000459a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045a1:	83 d2 ff             	adc    edx,0xffffffff
c00045a4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045a8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045ac:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045b4:	be 22 00 00 00       	mov    esi,0x22
c00045b9:	31 ff                	xor    edi,edi
c00045bb:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045c3:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045cb:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045d3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045d7:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045dd:	75 0e                	jne    c00045ed <create_partition+0xca>
c00045df:	b9 00 02 00 00       	mov    ecx,0x200
c00045e4:	31 d2                	xor    edx,edx
c00045e6:	89 d8                	mov    eax,ebx
c00045e8:	e8 fa d5 ff ff       	call   c0001be7 <mem_set>
c00045ed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045f1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00045f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00045f9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045fc:	0f 84 23 01 00 00    	je     c0004725 <create_partition+0x202>
c0004602:	89 f0                	mov    eax,esi
c0004604:	89 fa                	mov    edx,edi
c0004606:	05 ff 07 00 00       	add    eax,0x7ff
c000460b:	83 d2 00             	adc    edx,0x0
c000460e:	89 c1                	mov    ecx,eax
c0004610:	89 d7                	mov    edi,edx
c0004612:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004618:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000461c:	89 ce                	mov    esi,ecx
c000461e:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004622:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004626:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c000462a:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000462d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004631:	89 04 24             	mov    DWORD PTR [esp],eax
c0004634:	b8 64 00 00 00       	mov    eax,0x64
c0004639:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000463c:	b8 00 00 00 00       	mov    eax,0x0
c0004641:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004645:	72 41                	jb     c0004688 <create_partition+0x165>
c0004647:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000464b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000464f:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004653:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004658:	01 c1                	add    ecx,eax
c000465a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000465e:	f7 24 24             	mul    DWORD PTR [esp]
c0004661:	6a 00                	push   0x0
c0004663:	01 ca                	add    edx,ecx
c0004665:	6a 64                	push   0x64
c0004667:	52                   	push   edx
c0004668:	50                   	push   eax
c0004669:	e8 e2 d0 01 00       	call   c0021750 <__udivdi3>
c000466e:	83 c4 10             	add    esp,0x10
c0004671:	05 ff 07 00 00       	add    eax,0x7ff
c0004676:	83 d2 00             	adc    edx,0x0
c0004679:	89 c1                	mov    ecx,eax
c000467b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000467f:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004685:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004688:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000468b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000468f:	01 f0                	add    eax,esi
c0004691:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004695:	11 fa                	adc    edx,edi
c0004697:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000469b:	19 d1                	sbb    ecx,edx
c000469d:	73 2e                	jae    c00046cd <create_partition+0x1aa>
c000469f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046a3:	89 f8                	mov    eax,edi
c00046a5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046ac:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046b0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046b8:	73 6b                	jae    c0004725 <create_partition+0x202>
c00046ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046c2:	29 f0                	sub    eax,esi
c00046c4:	19 fa                	sbb    edx,edi
c00046c6:	89 04 24             	mov    DWORD PTR [esp],eax
c00046c9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046d1:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d4:	74 4f                	je     c0004725 <create_partition+0x202>
c00046d6:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046d9:	b9 10 00 00 00       	mov    ecx,0x10
c00046de:	ba 70 26 02 c0       	mov    edx,0xc0022670
c00046e3:	e8 ea d4 ff ff       	call   c0001bd2 <mem_cpy>
c00046e8:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00046ec:	b9 10 00 00 00       	mov    ecx,0x10
c00046f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046f5:	e8 2c db ff ff       	call   c0002226 <make_rand>
c00046fa:	89 f2                	mov    edx,esi
c00046fc:	89 f9                	mov    ecx,edi
c00046fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004702:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004706:	e8 c1 d4 ff ff       	call   c0001bcc <st_qword>
c000470b:	03 34 24             	add    esi,DWORD PTR [esp]
c000470e:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004712:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004716:	89 f2                	mov    edx,esi
c0004718:	89 f9                	mov    ecx,edi
c000471a:	83 c2 ff             	add    edx,0xffffffff
c000471d:	83 d1 ff             	adc    ecx,0xffffffff
c0004720:	e8 a7 d4 ff ff       	call   c0001bcc <st_qword>
c0004725:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004729:	83 e8 80             	sub    eax,0xffffff80
c000472c:	89 c5                	mov    ebp,eax
c000472e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004732:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004738:	75 6b                	jne    c00047a5 <create_partition+0x282>
c000473a:	45                   	inc    ebp
c000473b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000473f:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004744:	e8 39 da ff ff       	call   c0002182 <crc32>
c0004749:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000474f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004753:	75 e5                	jne    c000473a <create_partition+0x217>
c0004755:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004759:	31 d2                	xor    edx,edx
c000475b:	83 ec 0c             	sub    esp,0xc
c000475e:	c1 ed 09             	shr    ebp,0x9
c0004761:	6a 01                	push   0x1
c0004763:	8d 45 02             	lea    eax,[ebp+0x2]
c0004766:	52                   	push   edx
c0004767:	50                   	push   eax
c0004768:	53                   	push   ebx
c0004769:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000476d:	e8 ac d3 ff ff       	call   c0001b1e <disk_write>
c0004772:	83 c4 20             	add    esp,0x20
c0004775:	85 c0                	test   eax,eax
c0004777:	0f 85 d7 fd ff ff    	jne    c0004554 <create_partition+0x31>
c000477d:	83 ec 0c             	sub    esp,0xc
c0004780:	31 d2                	xor    edx,edx
c0004782:	6a 01                	push   0x1
c0004784:	89 e8                	mov    eax,ebp
c0004786:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000478a:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000478e:	52                   	push   edx
c000478f:	50                   	push   eax
c0004790:	53                   	push   ebx
c0004791:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004795:	e8 84 d3 ff ff       	call   c0001b1e <disk_write>
c000479a:	83 c4 20             	add    esp,0x20
c000479d:	85 c0                	test   eax,eax
c000479f:	0f 85 af fd ff ff    	jne    c0004554 <create_partition+0x31>
c00047a5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047ad:	3d 00 40 00 00       	cmp    eax,0x4000
c00047b2:	74 0d                	je     c00047c1 <create_partition+0x29e>
c00047b4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047b8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047bc:	e9 12 fe ff ff       	jmp    c00045d3 <create_partition+0xb0>
c00047c1:	31 d2                	xor    edx,edx
c00047c3:	b9 00 02 00 00       	mov    ecx,0x200
c00047c8:	89 d8                	mov    eax,ebx
c00047ca:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047cd:	e8 15 d4 ff ff       	call   c0001be7 <mem_set>
c00047d2:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047d5:	b9 10 00 00 00       	mov    ecx,0x10
c00047da:	ba 60 25 02 c0       	mov    edx,0xc0022560
c00047df:	89 d8                	mov    eax,ebx
c00047e1:	e8 ec d3 ff ff       	call   c0001bd2 <mem_cpy>
c00047e6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00047ea:	8d 43 58             	lea    eax,[ebx+0x58]
c00047ed:	f7 d2                	not    edx
c00047ef:	e8 d5 d3 ff ff       	call   c0001bc9 <st_dword>
c00047f4:	8d 43 18             	lea    eax,[ebx+0x18]
c00047f7:	31 c9                	xor    ecx,ecx
c00047f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00047fc:	ba 01 00 00 00       	mov    edx,0x1
c0004801:	e8 c6 d3 ff ff       	call   c0001bcc <st_qword>
c0004806:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000480a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000480e:	83 c2 ff             	add    edx,0xffffffff
c0004811:	89 e8                	mov    eax,ebp
c0004813:	83 d1 ff             	adc    ecx,0xffffffff
c0004816:	e8 b1 d3 ff ff       	call   c0001bcc <st_qword>
c000481b:	31 c9                	xor    ecx,ecx
c000481d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004820:	ba 22 00 00 00       	mov    edx,0x22
c0004825:	e8 a2 d3 ff ff       	call   c0001bcc <st_qword>
c000482a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000482e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004832:	83 c2 de             	add    edx,0xffffffde
c0004835:	8d 43 30             	lea    eax,[ebx+0x30]
c0004838:	83 d1 ff             	adc    ecx,0xffffffff
c000483b:	31 f6                	xor    esi,esi
c000483d:	e8 8a d3 ff ff       	call   c0001bcc <st_qword>
c0004842:	8d 43 54             	lea    eax,[ebx+0x54]
c0004845:	ba 80 00 00 00       	mov    edx,0x80
c000484a:	e8 7a d3 ff ff       	call   c0001bc9 <st_dword>
c000484f:	8d 43 50             	lea    eax,[ebx+0x50]
c0004852:	ba 80 00 00 00       	mov    edx,0x80
c0004857:	e8 6d d3 ff ff       	call   c0001bc9 <st_dword>
c000485c:	ba 02 00 00 00       	mov    edx,0x2
c0004861:	89 f8                	mov    eax,edi
c0004863:	e8 61 d3 ff ff       	call   c0001bc9 <st_dword>
c0004868:	8d 53 38             	lea    edx,[ebx+0x38]
c000486b:	b9 10 00 00 00       	mov    ecx,0x10
c0004870:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004874:	e8 ad d9 ff ff       	call   c0002226 <make_rand>
c0004879:	83 c8 ff             	or     eax,0xffffffff
c000487c:	46                   	inc    esi
c000487d:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004882:	e8 fb d8 ff ff       	call   c0002182 <crc32>
c0004887:	83 fe 5c             	cmp    esi,0x5c
c000488a:	75 f0                	jne    c000487c <create_partition+0x359>
c000488c:	f7 d0                	not    eax
c000488e:	8d 73 10             	lea    esi,[ebx+0x10]
c0004891:	89 c2                	mov    edx,eax
c0004893:	89 f0                	mov    eax,esi
c0004895:	e8 2f d3 ff ff       	call   c0001bc9 <st_dword>
c000489a:	83 ec 0c             	sub    esp,0xc
c000489d:	6a 01                	push   0x1
c000489f:	6a 00                	push   0x0
c00048a1:	6a 01                	push   0x1
c00048a3:	53                   	push   ebx
c00048a4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a8:	e8 71 d2 ff ff       	call   c0001b1e <disk_write>
c00048ad:	83 c4 20             	add    esp,0x20
c00048b0:	85 c0                	test   eax,eax
c00048b2:	0f 85 9c fc ff ff    	jne    c0004554 <create_partition+0x31>
c00048b8:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048bc:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048c0:	83 c2 ff             	add    edx,0xffffffff
c00048c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048c6:	83 d1 ff             	adc    ecx,0xffffffff
c00048c9:	e8 fe d2 ff ff       	call   c0001bcc <st_qword>
c00048ce:	ba 01 00 00 00       	mov    edx,0x1
c00048d3:	31 c9                	xor    ecx,ecx
c00048d5:	89 e8                	mov    eax,ebp
c00048d7:	e8 f0 d2 ff ff       	call   c0001bcc <st_qword>
c00048dc:	89 f8                	mov    eax,edi
c00048de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048e2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048e6:	31 ff                	xor    edi,edi
c00048e8:	e8 df d2 ff ff       	call   c0001bcc <st_qword>
c00048ed:	89 f0                	mov    eax,esi
c00048ef:	31 d2                	xor    edx,edx
c00048f1:	e8 d3 d2 ff ff       	call   c0001bc9 <st_dword>
c00048f6:	83 c8 ff             	or     eax,0xffffffff
c00048f9:	47                   	inc    edi
c00048fa:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00048ff:	e8 7e d8 ff ff       	call   c0002182 <crc32>
c0004904:	83 ff 5c             	cmp    edi,0x5c
c0004907:	75 f0                	jne    c00048f9 <create_partition+0x3d6>
c0004909:	f7 d0                	not    eax
c000490b:	89 c2                	mov    edx,eax
c000490d:	89 f0                	mov    eax,esi
c000490f:	e8 b5 d2 ff ff       	call   c0001bc9 <st_dword>
c0004914:	83 ec 0c             	sub    esp,0xc
c0004917:	6a 01                	push   0x1
c0004919:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000491d:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004921:	83 c0 ff             	add    eax,0xffffffff
c0004924:	83 d2 ff             	adc    edx,0xffffffff
c0004927:	52                   	push   edx
c0004928:	50                   	push   eax
c0004929:	53                   	push   ebx
c000492a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000492e:	e8 eb d1 ff ff       	call   c0001b1e <disk_write>
c0004933:	83 c4 20             	add    esp,0x20
c0004936:	85 c0                	test   eax,eax
c0004938:	0f 85 16 fc ff ff    	jne    c0004554 <create_partition+0x31>
c000493e:	31 d2                	xor    edx,edx
c0004940:	89 d8                	mov    eax,ebx
c0004942:	b9 00 02 00 00       	mov    ecx,0x200
c0004947:	e8 9b d2 ff ff       	call   c0001be7 <mem_set>
c000494c:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004952:	b9 10 00 00 00       	mov    ecx,0x10
c0004957:	ba 70 25 02 c0       	mov    edx,0xc0022570
c000495c:	e8 71 d2 ff ff       	call   c0001bd2 <mem_cpy>
c0004961:	e9 21 01 00 00       	jmp    c0004a87 <create_partition+0x564>
c0004966:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000496a:	b9 05 00 00 00       	mov    ecx,0x5
c000496f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004972:	bf 08 00 00 00       	mov    edi,0x8
c0004977:	89 f8                	mov    eax,edi
c0004979:	31 d2                	xor    edx,edx
c000497b:	0f b6 f0             	movzx  esi,al
c000497e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004981:	f7 f6                	div    esi
c0004983:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004988:	76 0a                	jbe    c0004994 <create_partition+0x471>
c000498a:	d1 e7                	shl    edi,1
c000498c:	49                   	dec    ecx
c000498d:	75 e8                	jne    c0004977 <create_partition+0x454>
c000498f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004994:	b9 00 02 00 00       	mov    ecx,0x200
c0004999:	31 d2                	xor    edx,edx
c000499b:	89 d8                	mov    eax,ebx
c000499d:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049a3:	e8 3f d2 ff ff       	call   c0001be7 <mem_set>
c00049a8:	b9 64 00 00 00       	mov    ecx,0x64
c00049ad:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b0:	31 d2                	xor    edx,edx
c00049b2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049ba:	f7 f1                	div    ecx
c00049bc:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049c1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049c5:	89 f8                	mov    eax,edi
c00049c7:	0f b6 c0             	movzx  eax,al
c00049ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049ce:	e9 80 00 00 00       	jmp    c0004a53 <create_partition+0x530>
c00049d3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049d6:	29 cf                	sub    edi,ecx
c00049d8:	89 ca                	mov    edx,ecx
c00049da:	89 f0                	mov    eax,esi
c00049dc:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049e1:	e8 e3 d1 ff ff       	call   c0001bc9 <st_dword>
c00049e6:	8d 46 04             	lea    eax,[esi+0x4]
c00049e9:	89 fa                	mov    edx,edi
c00049eb:	83 c6 10             	add    esi,0x10
c00049ee:	e8 d6 d1 ff ff       	call   c0001bc9 <st_dword>
c00049f3:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00049f7:	31 d2                	xor    edx,edx
c00049f9:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00049fc:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a00:	89 c8                	mov    eax,ecx
c0004a02:	01 f9                	add    ecx,edi
c0004a04:	f7 f5                	div    ebp
c0004a06:	89 d5                	mov    ebp,edx
c0004a08:	31 d2                	xor    edx,edx
c0004a0a:	45                   	inc    ebp
c0004a0b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a0f:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a12:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a15:	89 c2                	mov    edx,eax
c0004a17:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a1a:	c1 ea 02             	shr    edx,0x2
c0004a1d:	83 e2 c0             	and    edx,0xffffffc0
c0004a20:	09 ea                	or     edx,ebp
c0004a22:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a27:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a2a:	31 d2                	xor    edx,edx
c0004a2c:	f7 f5                	div    ebp
c0004a2e:	89 d7                	mov    edi,edx
c0004a30:	31 d2                	xor    edx,edx
c0004a32:	47                   	inc    edi
c0004a33:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a37:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a3a:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a3d:	89 c5                	mov    ebp,eax
c0004a3f:	c1 ed 02             	shr    ebp,0x2
c0004a42:	83 e5 c0             	and    ebp,0xffffffc0
c0004a45:	09 ef                	or     edi,ebp
c0004a47:	89 fa                	mov    edx,edi
c0004a49:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a4c:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a51:	74 34                	je     c0004a87 <create_partition+0x564>
c0004a53:	85 c9                	test   ecx,ecx
c0004a55:	74 30                	je     c0004a87 <create_partition+0x564>
c0004a57:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a5a:	76 2b                	jbe    c0004a87 <create_partition+0x564>
c0004a5c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a60:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a64:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a67:	83 ff 64             	cmp    edi,0x64
c0004a6a:	76 4b                	jbe    c0004ab7 <create_partition+0x594>
c0004a6c:	89 f8                	mov    eax,edi
c0004a6e:	01 c8                	add    eax,ecx
c0004a70:	0f 82 5d ff ff ff    	jb     c00049d3 <create_partition+0x4b0>
c0004a76:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a79:	0f 87 54 ff ff ff    	ja     c00049d3 <create_partition+0x4b0>
c0004a7f:	85 ff                	test   edi,edi
c0004a81:	0f 85 51 ff ff ff    	jne    c00049d8 <create_partition+0x4b5>
c0004a87:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004a8d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004a92:	e8 2e d1 ff ff       	call   c0001bc5 <st_word>
c0004a97:	83 ec 0c             	sub    esp,0xc
c0004a9a:	6a 01                	push   0x1
c0004a9c:	6a 00                	push   0x0
c0004a9e:	6a 00                	push   0x0
c0004aa0:	53                   	push   ebx
c0004aa1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004aa5:	e8 74 d0 ff ff       	call   c0001b1e <disk_write>
c0004aaa:	83 c4 20             	add    esp,0x20
c0004aad:	85 c0                	test   eax,eax
c0004aaf:	0f 95 c0             	setne  al
c0004ab2:	0f b6 c0             	movzx  eax,al
c0004ab5:	eb 0e                	jmp    c0004ac5 <create_partition+0x5a2>
c0004ab7:	74 07                	je     c0004ac0 <create_partition+0x59d>
c0004ab9:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004abe:	eb ac                	jmp    c0004a6c <create_partition+0x549>
c0004ac0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ac3:	eb a7                	jmp    c0004a6c <create_partition+0x549>
c0004ac5:	83 c4 5c             	add    esp,0x5c
c0004ac8:	5b                   	pop    ebx
c0004ac9:	5e                   	pop    esi
c0004aca:	5f                   	pop    edi
c0004acb:	5d                   	pop    ebp
c0004acc:	c3                   	ret    

c0004acd <get_fileinfo>:
c0004acd:	55                   	push   ebp
c0004ace:	57                   	push   edi
c0004acf:	56                   	push   esi
c0004ad0:	53                   	push   ebx
c0004ad1:	83 ec 1c             	sub    esp,0x1c
c0004ad4:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ad6:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004ada:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004ade:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004ae1:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004ae4:	0f 84 dc 01 00 00    	je     c0004cc6 <get_fileinfo+0x1f9>
c0004aea:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004aed:	75 0f                	jne    c0004afe <get_fileinfo+0x31>
c0004aef:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004af2:	83 c4 1c             	add    esp,0x1c
c0004af5:	5b                   	pop    ebx
c0004af6:	5e                   	pop    esi
c0004af7:	5f                   	pop    edi
c0004af8:	5d                   	pop    ebp
c0004af9:	e9 58 d5 ff ff       	jmp    c0002056 <get_xfileinfo>
c0004afe:	89 d3                	mov    ebx,edx
c0004b00:	89 c6                	mov    esi,eax
c0004b02:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b06:	74 6a                	je     c0004b72 <get_fileinfo+0xa5>
c0004b08:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b10:	31 ed                	xor    ebp,ebp
c0004b12:	31 ff                	xor    edi,edi
c0004b14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b18:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b1c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b1f:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b23:	66 85 d2             	test   dx,dx
c0004b26:	74 3e                	je     c0004b66 <get_fileinfo+0x99>
c0004b28:	66 85 ed             	test   bp,bp
c0004b2b:	75 0c                	jne    c0004b39 <get_fileinfo+0x6c>
c0004b2d:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b33:	66 3d ff 07          	cmp    ax,0x7ff
c0004b37:	76 22                	jbe    c0004b5b <get_fileinfo+0x8e>
c0004b39:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b3e:	89 e8                	mov    eax,ebp
c0004b40:	29 f9                	sub    ecx,edi
c0004b42:	c1 e0 10             	shl    eax,0x10
c0004b45:	09 d0                	or     eax,edx
c0004b47:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b4b:	e8 a3 d1 ff ff       	call   c0001cf3 <put_utf>
c0004b50:	84 c0                	test   al,al
c0004b52:	74 10                	je     c0004b64 <get_fileinfo+0x97>
c0004b54:	0f b6 c0             	movzx  eax,al
c0004b57:	31 d2                	xor    edx,edx
c0004b59:	01 c7                	add    edi,eax
c0004b5b:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b60:	89 d5                	mov    ebp,edx
c0004b62:	eb b0                	jmp    c0004b14 <get_fileinfo+0x47>
c0004b64:	31 ff                	xor    edi,edi
c0004b66:	66 85 ed             	test   bp,bp
c0004b69:	74 02                	je     c0004b6d <get_fileinfo+0xa0>
c0004b6b:	31 ff                	xor    edi,edi
c0004b6d:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b72:	31 ff                	xor    edi,edi
c0004b74:	31 c9                	xor    ecx,ecx
c0004b76:	83 f9 0a             	cmp    ecx,0xa
c0004b79:	0f 87 ad 00 00 00    	ja     c0004c2c <get_fileinfo+0x15f>
c0004b7f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b82:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b85:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004b89:	66 83 fa 20          	cmp    dx,0x20
c0004b8d:	0f 84 92 00 00 00    	je     c0004c25 <get_fileinfo+0x158>
c0004b93:	66 83 fa 05          	cmp    dx,0x5
c0004b97:	75 05                	jne    c0004b9e <get_fileinfo+0xd1>
c0004b99:	ba e5 00 00 00       	mov    edx,0xe5
c0004b9e:	83 ff 0b             	cmp    edi,0xb
c0004ba1:	77 0b                	ja     c0004bae <get_fileinfo+0xe1>
c0004ba3:	83 fd 09             	cmp    ebp,0x9
c0004ba6:	75 06                	jne    c0004bae <get_fileinfo+0xe1>
c0004ba8:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bad:	47                   	inc    edi
c0004bae:	0f b7 c2             	movzx  eax,dx
c0004bb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bb5:	e8 6d d0 ff ff       	call   c0001c27 <dbc_1st>
c0004bba:	85 c0                	test   eax,eax
c0004bbc:	74 2f                	je     c0004bed <get_fileinfo+0x120>
c0004bbe:	83 fd 08             	cmp    ebp,0x8
c0004bc1:	74 2a                	je     c0004bed <get_fileinfo+0x120>
c0004bc3:	83 fd 0b             	cmp    ebp,0xb
c0004bc6:	74 25                	je     c0004bed <get_fileinfo+0x120>
c0004bc8:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bcb:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004bcf:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004bd3:	e8 52 d0 ff ff       	call   c0001c2a <dbc_2nd>
c0004bd8:	85 c0                	test   eax,eax
c0004bda:	74 11                	je     c0004bed <get_fileinfo+0x120>
c0004bdc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004be5:	c1 e2 08             	shl    edx,0x8
c0004be8:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004beb:	09 c2                	or     edx,eax
c0004bed:	0f b7 d2             	movzx  edx,dx
c0004bf0:	50                   	push   eax
c0004bf1:	50                   	push   eax
c0004bf2:	68 b5 01 00 00       	push   0x1b5
c0004bf7:	52                   	push   edx
c0004bf8:	e8 87 3a 00 00       	call   c0008684 <ff_oem2uni>
c0004bfd:	83 c4 10             	add    esp,0x10
c0004c00:	66 85 c0             	test   ax,ax
c0004c03:	75 04                	jne    c0004c09 <get_fileinfo+0x13c>
c0004c05:	31 ff                	xor    edi,edi
c0004c07:	eb 23                	jmp    c0004c2c <get_fileinfo+0x15f>
c0004c09:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c0e:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c12:	29 f9                	sub    ecx,edi
c0004c14:	0f b7 c0             	movzx  eax,ax
c0004c17:	e8 d7 d0 ff ff       	call   c0001cf3 <put_utf>
c0004c1c:	84 c0                	test   al,al
c0004c1e:	74 e5                	je     c0004c05 <get_fileinfo+0x138>
c0004c20:	0f b6 c0             	movzx  eax,al
c0004c23:	01 c7                	add    edi,eax
c0004c25:	89 e9                	mov    ecx,ebp
c0004c27:	e9 4a ff ff ff       	jmp    c0004b76 <get_fileinfo+0xa9>
c0004c2c:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c31:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c35:	75 54                	jne    c0004c8b <get_fileinfo+0x1be>
c0004c37:	85 ff                	test   edi,edi
c0004c39:	75 0b                	jne    c0004c46 <get_fileinfo+0x179>
c0004c3b:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c3f:	ba 01 00 00 00       	mov    edx,0x1
c0004c44:	eb 33                	jmp    c0004c79 <get_fileinfo+0x1ac>
c0004c46:	b1 08                	mov    cl,0x8
c0004c48:	31 d2                	xor    edx,edx
c0004c4a:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c50:	84 c0                	test   al,al
c0004c52:	74 25                	je     c0004c79 <get_fileinfo+0x1ac>
c0004c54:	66 83 f8 2e          	cmp    ax,0x2e
c0004c58:	74 16                	je     c0004c70 <get_fileinfo+0x1a3>
c0004c5a:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c5d:	66 83 ff 19          	cmp    di,0x19
c0004c61:	77 0f                	ja     c0004c72 <get_fileinfo+0x1a5>
c0004c63:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c66:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c69:	74 07                	je     c0004c72 <get_fileinfo+0x1a5>
c0004c6b:	83 c0 20             	add    eax,0x20
c0004c6e:	eb 02                	jmp    c0004c72 <get_fileinfo+0x1a5>
c0004c70:	b1 10                	mov    cl,0x10
c0004c72:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c76:	42                   	inc    edx
c0004c77:	eb d1                	jmp    c0004c4a <get_fileinfo+0x17d>
c0004c79:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c7e:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c81:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c85:	75 04                	jne    c0004c8b <get_fileinfo+0x1be>
c0004c87:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004c8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c8e:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004c91:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004c94:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c97:	83 c0 1c             	add    eax,0x1c
c0004c9a:	e8 c1 ce ff ff       	call   c0001b60 <ld_dword>
c0004c9f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004ca6:	89 03                	mov    DWORD PTR [ebx],eax
c0004ca8:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cab:	83 c0 16             	add    eax,0x16
c0004cae:	e8 a0 ce ff ff       	call   c0001b53 <ld_word>
c0004cb3:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004cb7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cba:	83 c0 18             	add    eax,0x18
c0004cbd:	e8 91 ce ff ff       	call   c0001b53 <ld_word>
c0004cc2:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cc6:	83 c4 1c             	add    esp,0x1c
c0004cc9:	5b                   	pop    ebx
c0004cca:	5e                   	pop    esi
c0004ccb:	5f                   	pop    edi
c0004ccc:	5d                   	pop    ebp
c0004ccd:	c3                   	ret    

c0004cce <ld_clust.isra.0>:
c0004cce:	56                   	push   esi
c0004ccf:	89 c6                	mov    esi,eax
c0004cd1:	53                   	push   ebx
c0004cd2:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004cd5:	89 d3                	mov    ebx,edx
c0004cd7:	e8 77 ce ff ff       	call   c0001b53 <ld_word>
c0004cdc:	0f b7 c8             	movzx  ecx,ax
c0004cdf:	89 f0                	mov    eax,esi
c0004ce1:	3c 03                	cmp    al,0x3
c0004ce3:	75 0d                	jne    c0004cf2 <ld_clust.isra.0+0x24>
c0004ce5:	8d 43 14             	lea    eax,[ebx+0x14]
c0004ce8:	e8 66 ce ff ff       	call   c0001b53 <ld_word>
c0004ced:	c1 e0 10             	shl    eax,0x10
c0004cf0:	09 c1                	or     ecx,eax
c0004cf2:	89 c8                	mov    eax,ecx
c0004cf4:	5b                   	pop    ebx
c0004cf5:	5e                   	pop    esi
c0004cf6:	c3                   	ret    

c0004cf7 <st_clust.isra.1>:
c0004cf7:	56                   	push   esi
c0004cf8:	89 c6                	mov    esi,eax
c0004cfa:	53                   	push   ebx
c0004cfb:	89 d3                	mov    ebx,edx
c0004cfd:	0f b7 d1             	movzx  edx,cx
c0004d00:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d03:	e8 bd ce ff ff       	call   c0001bc5 <st_word>
c0004d08:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d0b:	75 0f                	jne    c0004d1c <st_clust.isra.1+0x25>
c0004d0d:	c1 e9 10             	shr    ecx,0x10
c0004d10:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d13:	89 ca                	mov    edx,ecx
c0004d15:	5b                   	pop    ebx
c0004d16:	5e                   	pop    esi
c0004d17:	e9 a9 ce ff ff       	jmp    c0001bc5 <st_word>
c0004d1c:	5b                   	pop    ebx
c0004d1d:	5e                   	pop    esi
c0004d1e:	c3                   	ret    

c0004d1f <init_alloc_info.isra.2>:
c0004d1f:	56                   	push   esi
c0004d20:	53                   	push   ebx
c0004d21:	89 c6                	mov    esi,eax
c0004d23:	89 d3                	mov    ebx,edx
c0004d25:	51                   	push   ecx
c0004d26:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d28:	83 c0 34             	add    eax,0x34
c0004d2b:	e8 30 ce ff ff       	call   c0001b60 <ld_dword>
c0004d30:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d33:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d35:	83 c0 38             	add    eax,0x38
c0004d38:	e8 3b ce ff ff       	call   c0001b78 <ld_qword>
c0004d3d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d40:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d43:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d45:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d48:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d4f:	83 e0 02             	and    eax,0x2
c0004d52:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d55:	5b                   	pop    ebx
c0004d56:	5b                   	pop    ebx
c0004d57:	5e                   	pop    esi
c0004d58:	c3                   	ret    

c0004d59 <follow_path>:
c0004d59:	56                   	push   esi
c0004d5a:	53                   	push   ebx
c0004d5b:	89 c3                	mov    ebx,eax
c0004d5d:	83 ec 14             	sub    esp,0x14
c0004d60:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d64:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d6a:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d6c:	80 fa 5c             	cmp    dl,0x5c
c0004d6f:	75 07                	jne    c0004d78 <follow_path+0x1f>
c0004d71:	40                   	inc    eax
c0004d72:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d76:	eb ee                	jmp    c0004d66 <follow_path+0xd>
c0004d78:	80 fa 2f             	cmp    dl,0x2f
c0004d7b:	74 f4                	je     c0004d71 <follow_path+0x18>
c0004d7d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d84:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d8b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004d8e:	77 52                	ja     c0004de2 <follow_path+0x89>
c0004d90:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004d94:	31 d2                	xor    edx,edx
c0004d96:	89 d8                	mov    eax,ebx
c0004d98:	e8 12 e3 ff ff       	call   c00030af <dir_sdi>
c0004d9d:	eb 7c                	jmp    c0004e1b <follow_path+0xc2>
c0004d9f:	89 d8                	mov    eax,ebx
c0004da1:	e8 6e f2 ff ff       	call   c0004014 <dir_find>
c0004da6:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004da9:	85 c0                	test   eax,eax
c0004dab:	75 46                	jne    c0004df3 <follow_path+0x9a>
c0004dad:	80 e2 04             	and    dl,0x4
c0004db0:	75 69                	jne    c0004e1b <follow_path+0xc2>
c0004db2:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004db6:	74 5e                	je     c0004e16 <follow_path+0xbd>
c0004db8:	8a 06                	mov    al,BYTE PTR [esi]
c0004dba:	3c 04                	cmp    al,0x4
c0004dbc:	75 41                	jne    c0004dff <follow_path+0xa6>
c0004dbe:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dc1:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004dc5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004dc8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004dcb:	30 c0                	xor    al,al
c0004dcd:	09 d0                	or     eax,edx
c0004dcf:	89 da                	mov    edx,ebx
c0004dd1:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004dd4:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004dd7:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004dda:	8d 46 10             	lea    eax,[esi+0x10]
c0004ddd:	e8 3d ff ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c0004de2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004de6:	89 d8                	mov    eax,ebx
c0004de8:	e8 a9 ed ff ff       	call   c0003b96 <create_name>
c0004ded:	85 c0                	test   eax,eax
c0004def:	74 ae                	je     c0004d9f <follow_path+0x46>
c0004df1:	eb 28                	jmp    c0004e1b <follow_path+0xc2>
c0004df3:	83 f8 04             	cmp    eax,0x4
c0004df6:	75 23                	jne    c0004e1b <follow_path+0xc2>
c0004df8:	80 e2 04             	and    dl,0x4
c0004dfb:	74 19                	je     c0004e16 <follow_path+0xbd>
c0004dfd:	eb 1c                	jmp    c0004e1b <follow_path+0xc2>
c0004dff:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e02:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e08:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e0c:	e8 bd fe ff ff       	call   c0004cce <ld_clust.isra.0>
c0004e11:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e14:	eb cc                	jmp    c0004de2 <follow_path+0x89>
c0004e16:	b8 05 00 00 00       	mov    eax,0x5
c0004e1b:	83 c4 14             	add    esp,0x14
c0004e1e:	5b                   	pop    ebx
c0004e1f:	5e                   	pop    esi
c0004e20:	c3                   	ret    

c0004e21 <f_mount>:
c0004e21:	53                   	push   ebx
c0004e22:	83 ec 18             	sub    esp,0x18
c0004e25:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e29:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e31:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e35:	e8 fb d2 ff ff       	call   c0002135 <get_ldnumber>
c0004e3a:	89 c2                	mov    edx,eax
c0004e3c:	b8 0b 00 00 00       	mov    eax,0xb
c0004e41:	85 d2                	test   edx,edx
c0004e43:	78 39                	js     c0004e7e <f_mount+0x5d>
c0004e45:	8b 04 95 20 66 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd99e0]
c0004e4c:	85 c0                	test   eax,eax
c0004e4e:	74 03                	je     c0004e53 <f_mount+0x32>
c0004e50:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e57:	85 c0                	test   eax,eax
c0004e59:	74 03                	je     c0004e5e <f_mount+0x3d>
c0004e5b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e62:	89 04 95 20 66 02 c0 	mov    DWORD PTR [edx*4-0x3ffd99e0],eax
c0004e69:	31 c0                	xor    eax,eax
c0004e6b:	84 db                	test   bl,bl
c0004e6d:	74 0f                	je     c0004e7e <f_mount+0x5d>
c0004e6f:	31 c9                	xor    ecx,ecx
c0004e71:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e75:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e79:	e8 65 d7 ff ff       	call   c00025e3 <mount_volume>
c0004e7e:	83 c4 18             	add    esp,0x18
c0004e81:	5b                   	pop    ebx
c0004e82:	c3                   	ret    

c0004e83 <f_open>:
c0004e83:	55                   	push   ebp
c0004e84:	bd 09 00 00 00       	mov    ebp,0x9
c0004e89:	57                   	push   edi
c0004e8a:	56                   	push   esi
c0004e8b:	53                   	push   ebx
c0004e8c:	83 ec 7c             	sub    esp,0x7c
c0004e8f:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004e96:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004e9d:	85 db                	test   ebx,ebx
c0004e9f:	0f 84 10 04 00 00    	je     c00052b5 <f_open+0x432>
c0004ea5:	89 fe                	mov    esi,edi
c0004ea7:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004eab:	83 e6 3f             	and    esi,0x3f
c0004eae:	89 f0                	mov    eax,esi
c0004eb0:	0f b6 c8             	movzx  ecx,al
c0004eb3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004eba:	e8 24 d7 ff ff       	call   c00025e3 <mount_volume>
c0004ebf:	89 c5                	mov    ebp,eax
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	0f 85 e6 03 00 00    	jne    c00052af <f_open+0x42c>
c0004ec9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ecd:	bd 11 00 00 00       	mov    ebp,0x11
c0004ed2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ed6:	83 ec 0c             	sub    esp,0xc
c0004ed9:	68 60 04 00 00       	push   0x460
c0004ede:	e8 d9 36 00 00       	call   c00085bc <ff_memalloc>
c0004ee3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ee7:	83 c4 10             	add    esp,0x10
c0004eea:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004eef:	0f 84 c0 03 00 00    	je     c00052b5 <f_open+0x432>
c0004ef5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ef9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004efd:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f03:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f06:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f09:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f10:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f14:	e8 40 fe ff ff       	call   c0004d59 <follow_path>
c0004f19:	89 c5                	mov    ebp,eax
c0004f1b:	85 c0                	test   eax,eax
c0004f1d:	75 0c                	jne    c0004f2b <f_open+0xa8>
c0004f1f:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f24:	79 05                	jns    c0004f2b <f_open+0xa8>
c0004f26:	bd 06 00 00 00       	mov    ebp,0x6
c0004f2b:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f31:	0f 84 84 01 00 00    	je     c00050bb <f_open+0x238>
c0004f37:	85 ed                	test   ebp,ebp
c0004f39:	74 20                	je     c0004f5b <f_open+0xd8>
c0004f3b:	83 fd 04             	cmp    ebp,0x4
c0004f3e:	0f 85 58 03 00 00    	jne    c000529c <f_open+0x419>
c0004f44:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f48:	83 ce 08             	or     esi,0x8
c0004f4b:	e8 8a f2 ff ff       	call   c00041da <dir_register>
c0004f50:	89 c5                	mov    ebp,eax
c0004f52:	85 c0                	test   eax,eax
c0004f54:	74 2f                	je     c0004f85 <f_open+0x102>
c0004f56:	e9 41 03 00 00       	jmp    c000529c <f_open+0x419>
c0004f5b:	bd 07 00 00 00       	mov    ebp,0x7
c0004f60:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f65:	0f 85 31 03 00 00    	jne    c000529c <f_open+0x419>
c0004f6b:	bd 08 00 00 00       	mov    ebp,0x8
c0004f70:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f76:	0f 85 20 03 00 00    	jne    c000529c <f_open+0x419>
c0004f7c:	83 e7 08             	and    edi,0x8
c0004f7f:	0f 84 65 01 00 00    	je     c00050ea <f_open+0x267>
c0004f85:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f89:	8a 02                	mov    al,BYTE PTR [edx]
c0004f8b:	3c 04                	cmp    al,0x4
c0004f8d:	0f 85 97 00 00 00    	jne    c000502a <f_open+0x1a7>
c0004f93:	8d 42 10             	lea    eax,[edx+0x10]
c0004f96:	89 13                	mov    DWORD PTR [ebx],edx
c0004f98:	89 da                	mov    edx,ebx
c0004f9a:	e8 80 fd ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c0004f9f:	31 d2                	xor    edx,edx
c0004fa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa5:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004faa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fad:	83 c0 02             	add    eax,0x2
c0004fb0:	e8 32 cc ff ff       	call   c0001be7 <mem_set>
c0004fb5:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fba:	31 d2                	xor    edx,edx
c0004fbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fc3:	83 c0 26             	add    eax,0x26
c0004fc6:	e8 1c cc ff ff       	call   c0001be7 <mem_set>
c0004fcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcf:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fd2:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fd6:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fdb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fde:	83 c0 08             	add    eax,0x8
c0004fe1:	e8 e3 cb ff ff       	call   c0001bc9 <st_dword>
c0004fe6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fed:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ff1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ff5:	e8 b7 ea ff ff       	call   c0003ab1 <store_xdir>
c0004ffa:	89 c5                	mov    ebp,eax
c0004ffc:	85 c0                	test   eax,eax
c0004ffe:	0f 85 98 02 00 00    	jne    c000529c <f_open+0x419>
c0005004:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005007:	85 d2                	test   edx,edx
c0005009:	0f 84 db 00 00 00    	je     c00050ea <f_open+0x267>
c000500f:	31 c9                	xor    ecx,ecx
c0005011:	89 d8                	mov    eax,ebx
c0005013:	e8 8e e3 ff ff       	call   c00033a6 <remove_chain>
c0005018:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000501c:	89 c5                	mov    ebp,eax
c000501e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005021:	48                   	dec    eax
c0005022:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005025:	e9 b8 00 00 00       	jmp    c00050e2 <f_open+0x25f>
c000502a:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000502e:	89 ea                	mov    edx,ebp
c0005030:	e8 99 fc ff ff       	call   c0004cce <ld_clust.isra.0>
c0005035:	ba 00 00 21 50       	mov    edx,0x50210000
c000503a:	89 c7                	mov    edi,eax
c000503c:	8d 45 0e             	lea    eax,[ebp+0xe]
c000503f:	e8 85 cb ff ff       	call   c0001bc9 <st_dword>
c0005044:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005048:	31 c9                	xor    ecx,ecx
c000504a:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000504e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005052:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005056:	e8 9c fc ff ff       	call   c0004cf7 <st_clust.isra.1>
c000505b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000505f:	31 d2                	xor    edx,edx
c0005061:	83 c0 1c             	add    eax,0x1c
c0005064:	e8 60 cb ff ff       	call   c0001bc9 <st_dword>
c0005069:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000506d:	85 ff                	test   edi,edi
c000506f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005073:	74 75                	je     c00050ea <f_open+0x267>
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	31 c9                	xor    ecx,ecx
c000507b:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000507e:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005081:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005085:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005089:	89 fa                	mov    edx,edi
c000508b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000508f:	e8 12 e3 ff ff       	call   c00033a6 <remove_chain>
c0005094:	89 c5                	mov    ebp,eax
c0005096:	85 c0                	test   eax,eax
c0005098:	0f 85 fe 01 00 00    	jne    c000529c <f_open+0x419>
c000509e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050a2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050aa:	4f                   	dec    edi
c00050ab:	e8 81 d2 ff ff       	call   c0002331 <move_window>
c00050b0:	89 c5                	mov    ebp,eax
c00050b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b6:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050b9:	eb 27                	jmp    c00050e2 <f_open+0x25f>
c00050bb:	85 ed                	test   ebp,ebp
c00050bd:	0f 85 d9 01 00 00    	jne    c000529c <f_open+0x419>
c00050c3:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050c7:	bd 04 00 00 00       	mov    ebp,0x4
c00050cc:	a8 10                	test   al,0x10
c00050ce:	0f 85 c8 01 00 00    	jne    c000529c <f_open+0x419>
c00050d4:	83 e7 02             	and    edi,0x2
c00050d7:	74 11                	je     c00050ea <f_open+0x267>
c00050d9:	bd 07 00 00 00       	mov    ebp,0x7
c00050de:	a8 01                	test   al,0x1
c00050e0:	eb 02                	jmp    c00050e4 <f_open+0x261>
c00050e2:	85 ed                	test   ebp,ebp
c00050e4:	0f 85 b2 01 00 00    	jne    c000529c <f_open+0x419>
c00050ea:	f7 c6 08 00 00 00    	test   esi,0x8
c00050f0:	74 03                	je     c00050f5 <f_open+0x272>
c00050f2:	83 ce 40             	or     esi,0x40
c00050f5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f9:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00050fc:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00050ff:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005102:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005105:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005109:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000510c:	8a 02                	mov    al,BYTE PTR [edx]
c000510e:	3c 04                	cmp    al,0x4
c0005110:	75 2a                	jne    c000513c <f_open+0x2b9>
c0005112:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005116:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c000511b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000511e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005122:	30 c0                	xor    al,al
c0005124:	09 c8                	or     eax,ecx
c0005126:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005129:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000512d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005130:	8d 42 10             	lea    eax,[edx+0x10]
c0005133:	89 da                	mov    edx,ebx
c0005135:	e8 e5 fb ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c000513a:	eb 1c                	jmp    c0005158 <f_open+0x2d5>
c000513c:	89 fa                	mov    edx,edi
c000513e:	e8 8b fb ff ff       	call   c0004cce <ld_clust.isra.0>
c0005143:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005146:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005149:	e8 12 ca ff ff       	call   c0001b60 <ld_dword>
c000514e:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005155:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005158:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000515c:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005163:	89 03                	mov    DWORD PTR [ebx],eax
c0005165:	31 d2                	xor    edx,edx
c0005167:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000516b:	b9 00 02 00 00       	mov    ecx,0x200
c0005170:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005174:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005178:	89 f0                	mov    eax,esi
c000517a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005181:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005184:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000518b:	8d 43 50             	lea    eax,[ebx+0x50]
c000518e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005195:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000519c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051a0:	e8 42 ca ff ff       	call   c0001be7 <mem_set>
c00051a5:	83 e6 20             	and    esi,0x20
c00051a8:	75 07                	jne    c00051b1 <f_open+0x32e>
c00051aa:	31 ed                	xor    ebp,ebp
c00051ac:	e9 eb 00 00 00       	jmp    c000529c <f_open+0x419>
c00051b1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051b4:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051c3:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051c7:	74 e1                	je     c00051aa <f_open+0x327>
c00051c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d1:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051d4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051db:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051de:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051e2:	31 ff                	xor    edi,edi
c00051e4:	c1 e5 09             	shl    ebp,0x9
c00051e7:	89 ee                	mov    esi,ebp
c00051e9:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00051ed:	89 f8                	mov    eax,edi
c00051ef:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00051f3:	73 22                	jae    c0005217 <f_open+0x394>
c00051f5:	89 d8                	mov    eax,ebx
c00051f7:	e8 bd dc ff ff       	call   c0002eb9 <get_fat>
c00051fc:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005200:	89 c2                	mov    edx,eax
c0005202:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005206:	83 f8 01             	cmp    eax,0x1
c0005209:	76 10                	jbe    c000521b <f_open+0x398>
c000520b:	83 f8 ff             	cmp    eax,0xffffffff
c000520e:	75 d9                	jne    c00051e9 <f_open+0x366>
c0005210:	bd 01 00 00 00       	mov    ebp,0x1
c0005215:	eb 09                	jmp    c0005220 <f_open+0x39d>
c0005217:	31 ed                	xor    ebp,ebp
c0005219:	eb 05                	jmp    c0005220 <f_open+0x39d>
c000521b:	bd 02 00 00 00       	mov    ebp,0x2
c0005220:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005223:	85 ed                	test   ebp,ebp
c0005225:	75 75                	jne    c000529c <f_open+0x419>
c0005227:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000522b:	25 ff 01 00 00       	and    eax,0x1ff
c0005230:	0f 84 74 ff ff ff    	je     c00051aa <f_open+0x327>
c0005236:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000523a:	bd 02 00 00 00       	mov    ebp,0x2
c000523f:	89 c8                	mov    eax,ecx
c0005241:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005245:	e8 a2 cb ff ff       	call   c0001dec <clst2sect>
c000524a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000524e:	89 d7                	mov    edi,edx
c0005250:	09 c7                	or     edi,eax
c0005252:	74 48                	je     c000529c <f_open+0x419>
c0005254:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005258:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000525c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005264:	0f ac fe 09          	shrd   esi,edi,0x9
c0005268:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000526c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005270:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005273:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005277:	83 ec 0c             	sub    esp,0xc
c000527a:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000527d:	6a 01                	push   0x1
c000527f:	52                   	push   edx
c0005280:	50                   	push   eax
c0005281:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005285:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005289:	50                   	push   eax
c000528a:	e8 79 c8 ff ff       	call   c0001b08 <disk_read>
c000528f:	83 c4 20             	add    esp,0x20
c0005292:	85 c0                	test   eax,eax
c0005294:	0f 95 c0             	setne  al
c0005297:	0f b6 c0             	movzx  eax,al
c000529a:	89 c5                	mov    ebp,eax
c000529c:	83 ec 0c             	sub    esp,0xc
c000529f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052a3:	e8 2c 33 00 00       	call   c00085d4 <ff_memfree>
c00052a8:	83 c4 10             	add    esp,0x10
c00052ab:	85 ed                	test   ebp,ebp
c00052ad:	74 06                	je     c00052b5 <f_open+0x432>
c00052af:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052b5:	83 c4 7c             	add    esp,0x7c
c00052b8:	89 e8                	mov    eax,ebp
c00052ba:	5b                   	pop    ebx
c00052bb:	5e                   	pop    esi
c00052bc:	5f                   	pop    edi
c00052bd:	5d                   	pop    ebp
c00052be:	c3                   	ret    

c00052bf <f_read>:
c00052bf:	55                   	push   ebp
c00052c0:	57                   	push   edi
c00052c1:	56                   	push   esi
c00052c2:	53                   	push   ebx
c00052c3:	83 ec 2c             	sub    esp,0x2c
c00052c6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052ca:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ce:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052d4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052d8:	89 d8                	mov    eax,ebx
c00052da:	e8 77 cf ff ff       	call   c0002256 <validate>
c00052df:	89 c5                	mov    ebp,eax
c00052e1:	85 c0                	test   eax,eax
c00052e3:	0f 85 4c 02 00 00    	jne    c0005535 <f_read+0x276>
c00052e9:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00052ed:	85 ed                	test   ebp,ebp
c00052ef:	0f 85 40 02 00 00    	jne    c0005535 <f_read+0x276>
c00052f5:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00052f9:	0f 84 31 02 00 00    	je     c0005530 <f_read+0x271>
c00052ff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005302:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005305:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005308:	bf 00 00 00 00       	mov    edi,0x0
c000530d:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005310:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005314:	89 d1                	mov    ecx,edx
c0005316:	19 f9                	sbb    ecx,edi
c0005318:	0f 83 cf 00 00 00    	jae    c00053ed <f_read+0x12e>
c000531e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005322:	e9 c6 00 00 00       	jmp    c00053ed <f_read+0x12e>
c0005327:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000532a:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000532d:	89 d0                	mov    eax,edx
c000532f:	25 ff 01 00 00       	and    eax,0x1ff
c0005334:	0f 85 c9 01 00 00    	jne    c0005503 <f_read+0x244>
c000533a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000533e:	89 d6                	mov    esi,edx
c0005340:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005344:	89 cf                	mov    edi,ecx
c0005346:	48                   	dec    eax
c0005347:	0f ac fe 09          	shrd   esi,edi,0x9
c000534b:	21 f0                	and    eax,esi
c000534d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005351:	0f 84 a6 00 00 00    	je     c00053fd <f_read+0x13e>
c0005357:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000535e:	89 c8                	mov    eax,ecx
c0005360:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005363:	e8 84 ca ff ff       	call   c0001dec <clst2sect>
c0005368:	89 d7                	mov    edi,edx
c000536a:	09 c7                	or     edi,eax
c000536c:	0f 84 b4 00 00 00    	je     c0005426 <f_read+0x167>
c0005372:	31 ff                	xor    edi,edi
c0005374:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005378:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000537b:	01 c6                	add    esi,eax
c000537d:	11 d7                	adc    edi,edx
c000537f:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005387:	0f 86 fd 00 00 00    	jbe    c000548a <f_read+0x1cb>
c000538d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005391:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005395:	c1 e8 09             	shr    eax,0x9
c0005398:	89 04 24             	mov    DWORD PTR [esp],eax
c000539b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000539f:	03 14 24             	add    edx,DWORD PTR [esp]
c00053a2:	39 c2                	cmp    edx,eax
c00053a4:	76 07                	jbe    c00053ad <f_read+0xee>
c00053a6:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00053ad:	83 ec 0c             	sub    esp,0xc
c00053b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053b4:	57                   	push   edi
c00053b5:	56                   	push   esi
c00053b6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053ba:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053be:	50                   	push   eax
c00053bf:	e8 44 c7 ff ff       	call   c0001b08 <disk_read>
c00053c4:	83 c4 20             	add    esp,0x20
c00053c7:	85 c0                	test   eax,eax
c00053c9:	75 6e                	jne    c0005439 <f_read+0x17a>
c00053cb:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053cf:	78 7e                	js     c000544f <f_read+0x190>
c00053d1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053d4:	c1 e6 09             	shl    esi,0x9
c00053d7:	31 ff                	xor    edi,edi
c00053d9:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053dd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e1:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053e5:	01 30                	add    DWORD PTR [eax],esi
c00053e7:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00053ea:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00053ed:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00053f2:	0f 85 2f ff ff ff    	jne    c0005327 <f_read+0x68>
c00053f8:	e9 38 01 00 00       	jmp    c0005535 <f_read+0x276>
c00053fd:	89 c8                	mov    eax,ecx
c00053ff:	09 d0                	or     eax,edx
c0005401:	75 05                	jne    c0005408 <f_read+0x149>
c0005403:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005406:	eb 19                	jmp    c0005421 <f_read+0x162>
c0005408:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000540c:	74 09                	je     c0005417 <f_read+0x158>
c000540e:	89 d8                	mov    eax,ebx
c0005410:	e8 f8 c9 ff ff       	call   c0001e0d <clmt_clust>
c0005415:	eb 0a                	jmp    c0005421 <f_read+0x162>
c0005417:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000541a:	89 d8                	mov    eax,ebx
c000541c:	e8 98 da ff ff       	call   c0002eb9 <get_fat>
c0005421:	83 f8 01             	cmp    eax,0x1
c0005424:	77 0e                	ja     c0005434 <f_read+0x175>
c0005426:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000542a:	bd 02 00 00 00       	mov    ebp,0x2
c000542f:	e9 01 01 00 00       	jmp    c0005535 <f_read+0x276>
c0005434:	83 f8 ff             	cmp    eax,0xffffffff
c0005437:	75 0e                	jne    c0005447 <f_read+0x188>
c0005439:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000543d:	bd 01 00 00 00       	mov    ebp,0x1
c0005442:	e9 ee 00 00 00       	jmp    c0005535 <f_read+0x276>
c0005447:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000544a:	e9 08 ff ff ff       	jmp    c0005357 <f_read+0x98>
c000544f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005452:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005455:	29 f0                	sub    eax,esi
c0005457:	19 fa                	sbb    edx,edi
c0005459:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000545c:	89 d7                	mov    edi,edx
c000545e:	ba 00 00 00 00       	mov    edx,0x0
c0005463:	89 f9                	mov    ecx,edi
c0005465:	19 d1                	sbb    ecx,edx
c0005467:	0f 83 64 ff ff ff    	jae    c00053d1 <f_read+0x112>
c000546d:	89 c7                	mov    edi,eax
c000546f:	8d 53 50             	lea    edx,[ebx+0x50]
c0005472:	c1 e7 09             	shl    edi,0x9
c0005475:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005479:	b9 00 02 00 00       	mov    ecx,0x200
c000547e:	01 f8                	add    eax,edi
c0005480:	e8 4d c7 ff ff       	call   c0001bd2 <mem_cpy>
c0005485:	e9 47 ff ff ff       	jmp    c00053d1 <f_read+0x112>
c000548a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000548d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005490:	89 04 24             	mov    DWORD PTR [esp],eax
c0005493:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005497:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000549b:	75 05                	jne    c00054a2 <f_read+0x1e3>
c000549d:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054a0:	74 5b                	je     c00054fd <f_read+0x23e>
c00054a2:	8d 43 50             	lea    eax,[ebx+0x50]
c00054a5:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054ad:	79 2a                	jns    c00054d9 <f_read+0x21a>
c00054af:	83 ec 0c             	sub    esp,0xc
c00054b2:	6a 01                	push   0x1
c00054b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054bc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054c0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054c4:	50                   	push   eax
c00054c5:	e8 54 c6 ff ff       	call   c0001b1e <disk_write>
c00054ca:	83 c4 20             	add    esp,0x20
c00054cd:	85 c0                	test   eax,eax
c00054cf:	0f 85 64 ff ff ff    	jne    c0005439 <f_read+0x17a>
c00054d5:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054d9:	83 ec 0c             	sub    esp,0xc
c00054dc:	6a 01                	push   0x1
c00054de:	57                   	push   edi
c00054df:	56                   	push   esi
c00054e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054e4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00054e8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00054ec:	50                   	push   eax
c00054ed:	e8 16 c6 ff ff       	call   c0001b08 <disk_read>
c00054f2:	83 c4 20             	add    esp,0x20
c00054f5:	85 c0                	test   eax,eax
c00054f7:	0f 85 3c ff ff ff    	jne    c0005439 <f_read+0x17a>
c00054fd:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005500:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005503:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005506:	ba 00 02 00 00       	mov    edx,0x200
c000550b:	25 ff 01 00 00       	and    eax,0x1ff
c0005510:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005514:	29 c2                	sub    edx,eax
c0005516:	39 d6                	cmp    esi,edx
c0005518:	76 02                	jbe    c000551c <f_read+0x25d>
c000551a:	89 d6                	mov    esi,edx
c000551c:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005520:	89 f1                	mov    ecx,esi
c0005522:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005526:	e8 a7 c6 ff ff       	call   c0001bd2 <mem_cpy>
c000552b:	e9 a7 fe ff ff       	jmp    c00053d7 <f_read+0x118>
c0005530:	bd 07 00 00 00       	mov    ebp,0x7
c0005535:	83 c4 2c             	add    esp,0x2c
c0005538:	89 e8                	mov    eax,ebp
c000553a:	5b                   	pop    ebx
c000553b:	5e                   	pop    esi
c000553c:	5f                   	pop    edi
c000553d:	5d                   	pop    ebp
c000553e:	c3                   	ret    

c000553f <f_write>:
c000553f:	55                   	push   ebp
c0005540:	57                   	push   edi
c0005541:	56                   	push   esi
c0005542:	53                   	push   ebx
c0005543:	83 ec 2c             	sub    esp,0x2c
c0005546:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000554a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000554e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005554:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005558:	89 d8                	mov    eax,ebx
c000555a:	e8 f7 cc ff ff       	call   c0002256 <validate>
c000555f:	89 c5                	mov    ebp,eax
c0005561:	85 c0                	test   eax,eax
c0005563:	0f 85 86 02 00 00    	jne    c00057ef <f_write+0x2b0>
c0005569:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000556d:	85 ed                	test   ebp,ebp
c000556f:	0f 85 7a 02 00 00    	jne    c00057ef <f_write+0x2b0>
c0005575:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005579:	0f 84 6b 02 00 00    	je     c00057ea <f_write+0x2ab>
c000557f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005583:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005586:	0f 84 43 01 00 00    	je     c00056cf <f_write+0x190>
c000558c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000558f:	89 c1                	mov    ecx,eax
c0005591:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005595:	0f 83 34 01 00 00    	jae    c00056cf <f_write+0x190>
c000559b:	f7 d0                	not    eax
c000559d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055a1:	e9 29 01 00 00       	jmp    c00056cf <f_write+0x190>
c00055a6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055a9:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055ac:	89 d0                	mov    eax,edx
c00055ae:	25 ff 01 00 00       	and    eax,0x1ff
c00055b3:	0f 85 00 02 00 00    	jne    c00057b9 <f_write+0x27a>
c00055b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055bd:	89 d6                	mov    esi,edx
c00055bf:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055c3:	89 cf                	mov    edi,ecx
c00055c5:	48                   	dec    eax
c00055c6:	0f ac fe 09          	shrd   esi,edi,0x9
c00055ca:	21 f0                	and    eax,esi
c00055cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055d0:	0f 84 06 01 00 00    	je     c00056dc <f_write+0x19d>
c00055d6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055da:	0f 88 6e 01 00 00    	js     c000574e <f_write+0x20f>
c00055e0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055e7:	89 c8                	mov    eax,ecx
c00055e9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00055ed:	e8 fa c7 ff ff       	call   c0001dec <clst2sect>
c00055f2:	89 d1                	mov    ecx,edx
c00055f4:	09 c1                	or     ecx,eax
c00055f6:	0f 84 1c 01 00 00    	je     c0005718 <f_write+0x1d9>
c00055fc:	31 ff                	xor    edi,edi
c00055fe:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005602:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005606:	01 c6                	add    esi,eax
c0005608:	11 d7                	adc    edi,edx
c000560a:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005612:	0f 86 63 01 00 00    	jbe    c000577b <f_write+0x23c>
c0005618:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000561c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005620:	c1 e8 09             	shr    eax,0x9
c0005623:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005627:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000562b:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000562f:	39 c2                	cmp    edx,eax
c0005631:	76 08                	jbe    c000563b <f_write+0xfc>
c0005633:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005637:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000563b:	83 ec 0c             	sub    esp,0xc
c000563e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005642:	57                   	push   edi
c0005643:	56                   	push   esi
c0005644:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005648:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000564c:	50                   	push   eax
c000564d:	e8 cc c4 ff ff       	call   c0001b1e <disk_write>
c0005652:	83 c4 20             	add    esp,0x20
c0005655:	85 c0                	test   eax,eax
c0005657:	0f 85 ce 00 00 00    	jne    c000572b <f_write+0x1ec>
c000565d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005660:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005663:	29 f0                	sub    eax,esi
c0005665:	19 fa                	sbb    edx,edi
c0005667:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000566b:	89 d7                	mov    edi,edx
c000566d:	ba 00 00 00 00       	mov    edx,0x0
c0005672:	89 f9                	mov    ecx,edi
c0005674:	19 d1                	sbb    ecx,edx
c0005676:	73 1c                	jae    c0005694 <f_write+0x155>
c0005678:	89 c7                	mov    edi,eax
c000567a:	b9 00 02 00 00       	mov    ecx,0x200
c000567f:	c1 e7 09             	shl    edi,0x9
c0005682:	8d 43 50             	lea    eax,[ebx+0x50]
c0005685:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005689:	89 fa                	mov    edx,edi
c000568b:	e8 42 c5 ff ff       	call   c0001bd2 <mem_cpy>
c0005690:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005694:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005698:	c1 e6 09             	shl    esi,0x9
c000569b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000569f:	31 ff                	xor    edi,edi
c00056a1:	01 30                	add    DWORD PTR [eax],esi
c00056a3:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056a7:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056ab:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056ae:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056b4:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056b7:	89 c1                	mov    ecx,eax
c00056b9:	39 f2                	cmp    edx,esi
c00056bb:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056be:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056c1:	19 f9                	sbb    ecx,edi
c00056c3:	73 04                	jae    c00056c9 <f_write+0x18a>
c00056c5:	89 f2                	mov    edx,esi
c00056c7:	89 f8                	mov    eax,edi
c00056c9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056cc:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056cf:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056d4:	0f 85 cc fe ff ff    	jne    c00055a6 <f_write+0x67>
c00056da:	eb 2e                	jmp    c000570a <f_write+0x1cb>
c00056dc:	89 c8                	mov    eax,ecx
c00056de:	09 d0                	or     eax,edx
c00056e0:	75 0b                	jne    c00056ed <f_write+0x1ae>
c00056e2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056e5:	31 d2                	xor    edx,edx
c00056e7:	85 c0                	test   eax,eax
c00056e9:	75 28                	jne    c0005713 <f_write+0x1d4>
c00056eb:	eb 12                	jmp    c00056ff <f_write+0x1c0>
c00056ed:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00056f1:	74 09                	je     c00056fc <f_write+0x1bd>
c00056f3:	89 d8                	mov    eax,ebx
c00056f5:	e8 13 c7 ff ff       	call   c0001e0d <clmt_clust>
c00056fa:	eb 0a                	jmp    c0005706 <f_write+0x1c7>
c00056fc:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056ff:	89 d8                	mov    eax,ebx
c0005701:	e8 a1 da ff ff       	call   c00031a7 <create_chain>
c0005706:	85 c0                	test   eax,eax
c0005708:	75 09                	jne    c0005713 <f_write+0x1d4>
c000570a:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000570e:	e9 dc 00 00 00       	jmp    c00057ef <f_write+0x2b0>
c0005713:	83 f8 01             	cmp    eax,0x1
c0005716:	75 0e                	jne    c0005726 <f_write+0x1e7>
c0005718:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000571c:	bd 02 00 00 00       	mov    ebp,0x2
c0005721:	e9 c9 00 00 00       	jmp    c00057ef <f_write+0x2b0>
c0005726:	83 f8 ff             	cmp    eax,0xffffffff
c0005729:	75 0e                	jne    c0005739 <f_write+0x1fa>
c000572b:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000572f:	bd 01 00 00 00       	mov    ebp,0x1
c0005734:	e9 b6 00 00 00       	jmp    c00057ef <f_write+0x2b0>
c0005739:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000573c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005740:	0f 85 90 fe ff ff    	jne    c00055d6 <f_write+0x97>
c0005746:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005749:	e9 88 fe ff ff       	jmp    c00055d6 <f_write+0x97>
c000574e:	83 ec 0c             	sub    esp,0xc
c0005751:	8d 43 50             	lea    eax,[ebx+0x50]
c0005754:	6a 01                	push   0x1
c0005756:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005759:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000575c:	50                   	push   eax
c000575d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005761:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005765:	50                   	push   eax
c0005766:	e8 b3 c3 ff ff       	call   c0001b1e <disk_write>
c000576b:	83 c4 20             	add    esp,0x20
c000576e:	85 c0                	test   eax,eax
c0005770:	75 b9                	jne    c000572b <f_write+0x1ec>
c0005772:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005776:	e9 65 fe ff ff       	jmp    c00055e0 <f_write+0xa1>
c000577b:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000577e:	75 05                	jne    c0005785 <f_write+0x246>
c0005780:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005783:	74 2e                	je     c00057b3 <f_write+0x274>
c0005785:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005788:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000578b:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000578e:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005791:	73 20                	jae    c00057b3 <f_write+0x274>
c0005793:	83 ec 0c             	sub    esp,0xc
c0005796:	8d 43 50             	lea    eax,[ebx+0x50]
c0005799:	6a 01                	push   0x1
c000579b:	57                   	push   edi
c000579c:	56                   	push   esi
c000579d:	50                   	push   eax
c000579e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057a2:	50                   	push   eax
c00057a3:	e8 60 c3 ff ff       	call   c0001b08 <disk_read>
c00057a8:	83 c4 20             	add    esp,0x20
c00057ab:	85 c0                	test   eax,eax
c00057ad:	0f 85 78 ff ff ff    	jne    c000572b <f_write+0x1ec>
c00057b3:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057b6:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057b9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057bc:	ba 00 02 00 00       	mov    edx,0x200
c00057c1:	25 ff 01 00 00       	and    eax,0x1ff
c00057c6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057ca:	29 c2                	sub    edx,eax
c00057cc:	39 d6                	cmp    esi,edx
c00057ce:	76 02                	jbe    c00057d2 <f_write+0x293>
c00057d0:	89 d6                	mov    esi,edx
c00057d2:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057d6:	89 f1                	mov    ecx,esi
c00057d8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057dc:	e8 f1 c3 ff ff       	call   c0001bd2 <mem_cpy>
c00057e1:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057e5:	e9 b1 fe ff ff       	jmp    c000569b <f_write+0x15c>
c00057ea:	bd 07 00 00 00       	mov    ebp,0x7
c00057ef:	83 c4 2c             	add    esp,0x2c
c00057f2:	89 e8                	mov    eax,ebp
c00057f4:	5b                   	pop    ebx
c00057f5:	5e                   	pop    esi
c00057f6:	5f                   	pop    edi
c00057f7:	5d                   	pop    ebp
c00057f8:	c3                   	ret    

c00057f9 <f_sync>:
c00057f9:	56                   	push   esi
c00057fa:	53                   	push   ebx
c00057fb:	83 ec 64             	sub    esp,0x64
c00057fe:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005802:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005806:	89 d8                	mov    eax,ebx
c0005808:	e8 49 ca ff ff       	call   c0002256 <validate>
c000580d:	85 c0                	test   eax,eax
c000580f:	0f 85 ba 01 00 00    	jne    c00059cf <f_sync+0x1d6>
c0005815:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005818:	f6 c2 40             	test   dl,0x40
c000581b:	0f 84 ae 01 00 00    	je     c00059cf <f_sync+0x1d6>
c0005821:	84 d2                	test   dl,dl
c0005823:	79 33                	jns    c0005858 <f_sync+0x5f>
c0005825:	83 ec 0c             	sub    esp,0xc
c0005828:	8d 43 50             	lea    eax,[ebx+0x50]
c000582b:	6a 01                	push   0x1
c000582d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005830:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005833:	50                   	push   eax
c0005834:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005838:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000583c:	50                   	push   eax
c000583d:	e8 dc c2 ff ff       	call   c0001b1e <disk_write>
c0005842:	83 c4 20             	add    esp,0x20
c0005845:	89 c2                	mov    edx,eax
c0005847:	b8 01 00 00 00       	mov    eax,0x1
c000584c:	85 d2                	test   edx,edx
c000584e:	0f 85 7b 01 00 00    	jne    c00059cf <f_sync+0x1d6>
c0005854:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000585c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000585f:	0f 85 11 01 00 00    	jne    c0005976 <f_sync+0x17d>
c0005865:	89 d8                	mov    eax,ebx
c0005867:	e8 13 d6 ff ff       	call   c0002e7f <fill_first_frag>
c000586c:	85 c0                	test   eax,eax
c000586e:	0f 85 5b 01 00 00    	jne    c00059cf <f_sync+0x1d6>
c0005874:	83 c9 ff             	or     ecx,0xffffffff
c0005877:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000587a:	89 d8                	mov    eax,ebx
c000587c:	e8 c9 d5 ff ff       	call   c0002e4a <fill_last_frag>
c0005881:	85 c0                	test   eax,eax
c0005883:	0f 85 46 01 00 00    	jne    c00059cf <f_sync+0x1d6>
c0005889:	83 ec 0c             	sub    esp,0xc
c000588c:	68 60 04 00 00       	push   0x460
c0005891:	e8 26 2d 00 00       	call   c00085bc <ff_memalloc>
c0005896:	83 c4 10             	add    esp,0x10
c0005899:	89 c6                	mov    esi,eax
c000589b:	b8 11 00 00 00       	mov    eax,0x11
c00058a0:	85 f6                	test   esi,esi
c00058a2:	0f 84 27 01 00 00    	je     c00059cf <f_sync+0x1d6>
c00058a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058ac:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058b2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058b5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058b8:	89 da                	mov    edx,ebx
c00058ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058be:	e8 af df ff ff       	call   c0003872 <load_obj_xdir>
c00058c3:	85 c0                	test   eax,eax
c00058c5:	0f 85 95 00 00 00    	jne    c0005960 <f_sync+0x167>
c00058cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058cf:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058d2:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058d6:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058d9:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058dc:	83 ca 01             	or     edx,0x1
c00058df:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058e2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058e5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058e8:	83 c0 34             	add    eax,0x34
c00058eb:	e8 d9 c2 ff ff       	call   c0001bc9 <st_dword>
c00058f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058f4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058fa:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00058fd:	83 c0 38             	add    eax,0x38
c0005900:	e8 c7 c2 ff ff       	call   c0001bcc <st_qword>
c0005905:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000590c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000590f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005912:	83 c0 28             	add    eax,0x28
c0005915:	e8 b2 c2 ff ff       	call   c0001bcc <st_qword>
c000591a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000591e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005923:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005926:	83 c0 0c             	add    eax,0xc
c0005929:	e8 9b c2 ff ff       	call   c0001bc9 <st_dword>
c000592e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005932:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005935:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005939:	31 d2                	xor    edx,edx
c000593b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000593e:	83 c0 10             	add    eax,0x10
c0005941:	e8 83 c2 ff ff       	call   c0001bc9 <st_dword>
c0005946:	8d 44 24 14          	lea    eax,[esp+0x14]
c000594a:	e8 62 e1 ff ff       	call   c0003ab1 <store_xdir>
c000594f:	85 c0                	test   eax,eax
c0005951:	75 0d                	jne    c0005960 <f_sync+0x167>
c0005953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005957:	e8 00 eb ff ff       	call   c000445c <sync_fs>
c000595c:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005960:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005964:	83 ec 0c             	sub    esp,0xc
c0005967:	56                   	push   esi
c0005968:	e8 67 2c 00 00       	call   c00085d4 <ff_memfree>
c000596d:	83 c4 10             	add    esp,0x10
c0005970:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005974:	eb 59                	jmp    c00059cf <f_sync+0x1d6>
c0005976:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005979:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000597c:	e8 b0 c9 ff ff       	call   c0002331 <move_window>
c0005981:	85 c0                	test   eax,eax
c0005983:	75 4a                	jne    c00059cf <f_sync+0x1d6>
c0005985:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005988:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c000598c:	89 f2                	mov    edx,esi
c000598e:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005991:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005993:	e8 5f f3 ff ff       	call   c0004cf7 <st_clust.isra.1>
c0005998:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000599b:	8d 46 1c             	lea    eax,[esi+0x1c]
c000599e:	e8 26 c2 ff ff       	call   c0001bc9 <st_dword>
c00059a3:	8d 46 16             	lea    eax,[esi+0x16]
c00059a6:	ba 00 00 21 50       	mov    edx,0x50210000
c00059ab:	e8 19 c2 ff ff       	call   c0001bc9 <st_dword>
c00059b0:	8d 46 12             	lea    eax,[esi+0x12]
c00059b3:	31 d2                	xor    edx,edx
c00059b5:	e8 0b c2 ff ff       	call   c0001bc5 <st_word>
c00059ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059be:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c6:	e8 91 ea ff ff       	call   c000445c <sync_fs>
c00059cb:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059cf:	83 c4 64             	add    esp,0x64
c00059d2:	5b                   	pop    ebx
c00059d3:	5e                   	pop    esi
c00059d4:	c3                   	ret    

c00059d5 <f_close>:
c00059d5:	53                   	push   ebx
c00059d6:	83 ec 24             	sub    esp,0x24
c00059d9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059dd:	53                   	push   ebx
c00059de:	e8 16 fe ff ff       	call   c00057f9 <f_sync>
c00059e3:	83 c4 10             	add    esp,0x10
c00059e6:	85 c0                	test   eax,eax
c00059e8:	75 15                	jne    c00059ff <f_close+0x2a>
c00059ea:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00059ee:	89 d8                	mov    eax,ebx
c00059f0:	e8 61 c8 ff ff       	call   c0002256 <validate>
c00059f5:	85 c0                	test   eax,eax
c00059f7:	75 06                	jne    c00059ff <f_close+0x2a>
c00059f9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00059ff:	83 c4 18             	add    esp,0x18
c0005a02:	5b                   	pop    ebx
c0005a03:	c3                   	ret    

c0005a04 <f_lseek>:
c0005a04:	55                   	push   ebp
c0005a05:	57                   	push   edi
c0005a06:	56                   	push   esi
c0005a07:	53                   	push   ebx
c0005a08:	83 ec 3c             	sub    esp,0x3c
c0005a0b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a0f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a13:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a17:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a1a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a1e:	89 d8                	mov    eax,ebx
c0005a20:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a24:	e8 2d c8 ff ff       	call   c0002256 <validate>
c0005a29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a2d:	85 c0                	test   eax,eax
c0005a2f:	0f 85 7a 04 00 00    	jne    c0005eaf <f_lseek+0x4ab>
c0005a35:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a3d:	85 c0                	test   eax,eax
c0005a3f:	0f 85 6a 04 00 00    	jne    c0005eaf <f_lseek+0x4ab>
c0005a45:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a49:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a4c:	74 0c                	je     c0005a5a <f_lseek+0x56>
c0005a4e:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a51:	85 c0                	test   eax,eax
c0005a53:	75 1f                	jne    c0005a74 <f_lseek+0x70>
c0005a55:	e9 b5 01 00 00       	jmp    c0005c0f <f_lseek+0x20b>
c0005a5a:	83 c9 ff             	or     ecx,0xffffffff
c0005a5d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a60:	89 d8                	mov    eax,ebx
c0005a62:	e8 e3 d3 ff ff       	call   c0002e4a <fill_last_frag>
c0005a67:	85 c0                	test   eax,eax
c0005a69:	74 e3                	je     c0005a4e <f_lseek+0x4a>
c0005a6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a6f:	e9 3b 04 00 00       	jmp    c0005eaf <f_lseek+0x4ab>
c0005a74:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a79:	0f 85 ac 00 00 00    	jne    c0005b2b <f_lseek+0x127>
c0005a7f:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a83:	0f 85 a2 00 00 00    	jne    c0005b2b <f_lseek+0x127>
c0005a89:	8d 78 04             	lea    edi,[eax+0x4]
c0005a8c:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005a8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0005a91:	be 02 00 00 00       	mov    esi,0x2
c0005a96:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a9a:	85 ed                	test   ebp,ebp
c0005a9c:	74 73                	je     c0005b11 <f_lseek+0x10d>
c0005a9e:	89 e9                	mov    ecx,ebp
c0005aa0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005aa7:	ff 04 24             	inc    DWORD PTR [esp]
c0005aaa:	89 ca                	mov    edx,ecx
c0005aac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ab0:	89 d8                	mov    eax,ebx
c0005ab2:	e8 02 d4 ff ff       	call   c0002eb9 <get_fat>
c0005ab7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005abb:	83 f8 01             	cmp    eax,0x1
c0005abe:	77 11                	ja     c0005ad1 <f_lseek+0xcd>
c0005ac0:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005ac4:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005acc:	e9 de 03 00 00       	jmp    c0005eaf <f_lseek+0x4ab>
c0005ad1:	83 f8 ff             	cmp    eax,0xffffffff
c0005ad4:	75 11                	jne    c0005ae7 <f_lseek+0xe3>
c0005ad6:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005ada:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005ae2:	e9 c8 03 00 00       	jmp    c0005eaf <f_lseek+0x4ab>
c0005ae7:	8d 51 01             	lea    edx,[ecx+0x1]
c0005aea:	89 c1                	mov    ecx,eax
c0005aec:	39 c2                	cmp    edx,eax
c0005aee:	74 b7                	je     c0005aa7 <f_lseek+0xa3>
c0005af0:	83 c6 02             	add    esi,0x2
c0005af3:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005af7:	72 0b                	jb     c0005b04 <f_lseek+0x100>
c0005af9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005afc:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005aff:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b01:	83 c7 08             	add    edi,0x8
c0005b04:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b08:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b0b:	76 04                	jbe    c0005b11 <f_lseek+0x10d>
c0005b0d:	89 c5                	mov    ebp,eax
c0005b0f:	eb 8d                	jmp    c0005a9e <f_lseek+0x9a>
c0005b11:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b14:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b18:	89 30                	mov    DWORD PTR [eax],esi
c0005b1a:	0f 87 87 03 00 00    	ja     c0005ea7 <f_lseek+0x4a3>
c0005b20:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b26:	e9 84 03 00 00       	jmp    c0005eaf <f_lseek+0x4ab>
c0005b2b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b2e:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b35:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b39:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b3d:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b44:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b48:	73 0f                	jae    c0005b59 <f_lseek+0x155>
c0005b4a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b4d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b55:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b5d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b61:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b64:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b6b:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b6f:	0f 84 3a 03 00 00    	je     c0005eaf <f_lseek+0x4ab>
c0005b75:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b79:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b7d:	83 c6 ff             	add    esi,0xffffffff
c0005b80:	89 d8                	mov    eax,ebx
c0005b82:	83 d7 ff             	adc    edi,0xffffffff
c0005b85:	89 f2                	mov    edx,esi
c0005b87:	89 f9                	mov    ecx,edi
c0005b89:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005b8d:	89 34 24             	mov    DWORD PTR [esp],esi
c0005b90:	e8 78 c2 ff ff       	call   c0001e0d <clmt_clust>
c0005b95:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005b99:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005b9c:	89 c2                	mov    edx,eax
c0005b9e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ba2:	89 c8                	mov    eax,ecx
c0005ba4:	e8 43 c2 ff ff       	call   c0001dec <clst2sect>
c0005ba9:	89 d7                	mov    edi,edx
c0005bab:	09 c7                	or     edi,eax
c0005bad:	0f 84 0d ff ff ff    	je     c0005ac0 <f_lseek+0xbc>
c0005bb3:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bb7:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bbd:	0f 84 ec 02 00 00    	je     c0005eaf <f_lseek+0x4ab>
c0005bc3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bc7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bcb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005bce:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bd2:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bd6:	4d                   	dec    ebp
c0005bd7:	31 ff                	xor    edi,edi
c0005bd9:	21 ee                	and    esi,ebp
c0005bdb:	01 c6                	add    esi,eax
c0005bdd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005be0:	11 d7                	adc    edi,edx
c0005be2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005be5:	39 fa                	cmp    edx,edi
c0005be7:	75 08                	jne    c0005bf1 <f_lseek+0x1ed>
c0005be9:	39 f0                	cmp    eax,esi
c0005beb:	0f 84 be 02 00 00    	je     c0005eaf <f_lseek+0x4ab>
c0005bf1:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005bf4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005bf8:	0f 89 80 02 00 00    	jns    c0005e7e <f_lseek+0x47a>
c0005bfe:	83 ec 0c             	sub    esp,0xc
c0005c01:	6a 01                	push   0x1
c0005c03:	52                   	push   edx
c0005c04:	50                   	push   eax
c0005c05:	55                   	push   ebp
c0005c06:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c0a:	e9 5a 02 00 00       	jmp    c0005e69 <f_lseek+0x465>
c0005c0f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c13:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c16:	74 16                	je     c0005c2e <f_lseek+0x22a>
c0005c18:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c1d:	76 0f                	jbe    c0005c2e <f_lseek+0x22a>
c0005c1f:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c26:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c2e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c31:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c34:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c37:	89 c7                	mov    edi,eax
c0005c39:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c3d:	73 0d                	jae    c0005c4c <f_lseek+0x248>
c0005c3f:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c43:	75 07                	jne    c0005c4c <f_lseek+0x248>
c0005c45:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c48:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c4c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c4f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c52:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c56:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c5d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c64:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c67:	75 09                	jne    c0005c72 <f_lseek+0x26e>
c0005c69:	31 f6                	xor    esi,esi
c0005c6b:	31 ff                	xor    edi,edi
c0005c6d:	e9 af 01 00 00       	jmp    c0005e21 <f_lseek+0x41d>
c0005c72:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c76:	89 d7                	mov    edi,edx
c0005c78:	c1 e1 09             	shl    ecx,0x9
c0005c7b:	09 c7                	or     edi,eax
c0005c7d:	89 cd                	mov    ebp,ecx
c0005c7f:	74 6d                	je     c0005cee <f_lseek+0x2ea>
c0005c81:	83 c0 ff             	add    eax,0xffffffff
c0005c84:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c88:	83 d2 ff             	adc    edx,0xffffffff
c0005c8b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c92:	83 c0 ff             	add    eax,0xffffffff
c0005c95:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c99:	83 d2 ff             	adc    edx,0xffffffff
c0005c9c:	31 ff                	xor    edi,edi
c0005c9e:	57                   	push   edi
c0005c9f:	51                   	push   ecx
c0005ca0:	52                   	push   edx
c0005ca1:	50                   	push   eax
c0005ca2:	e8 a9 ba 01 00       	call   c0021750 <__udivdi3>
c0005ca7:	83 c4 10             	add    esp,0x10
c0005caa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cb2:	57                   	push   edi
c0005cb3:	55                   	push   ebp
c0005cb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cbc:	e8 8f ba 01 00       	call   c0021750 <__udivdi3>
c0005cc1:	83 c4 10             	add    esp,0x10
c0005cc4:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005cc8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005ccc:	19 d1                	sbb    ecx,edx
c0005cce:	72 1e                	jb     c0005cee <f_lseek+0x2ea>
c0005cd0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cd4:	89 e9                	mov    ecx,ebp
c0005cd6:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005cd9:	f7 d9                	neg    ecx
c0005cdb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005cde:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005ce2:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ce5:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005ce8:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005cec:	eb 28                	jmp    c0005d16 <f_lseek+0x312>
c0005cee:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005cf1:	85 c0                	test   eax,eax
c0005cf3:	75 1e                	jne    c0005d13 <f_lseek+0x30f>
c0005cf5:	31 d2                	xor    edx,edx
c0005cf7:	89 d8                	mov    eax,ebx
c0005cf9:	e8 a9 d4 ff ff       	call   c00031a7 <create_chain>
c0005cfe:	83 f8 01             	cmp    eax,0x1
c0005d01:	0f 84 b9 fd ff ff    	je     c0005ac0 <f_lseek+0xbc>
c0005d07:	83 f8 ff             	cmp    eax,0xffffffff
c0005d0a:	0f 84 c6 fd ff ff    	je     c0005ad6 <f_lseek+0xd2>
c0005d10:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d13:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d16:	85 c0                	test   eax,eax
c0005d18:	0f 84 4b ff ff ff    	je     c0005c69 <f_lseek+0x265>
c0005d1e:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d22:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d2a:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d2d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d31:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d34:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d37:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d3b:	0f 83 9d 00 00 00    	jae    c0005dde <f_lseek+0x3da>
c0005d41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d45:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d49:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d4c:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d50:	01 f2                	add    edx,esi
c0005d52:	11 f9                	adc    ecx,edi
c0005d54:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d58:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d5c:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d5f:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d62:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d65:	f6 c1 02             	test   cl,0x2
c0005d68:	74 35                	je     c0005d9f <f_lseek+0x39b>
c0005d6a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d6e:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d71:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d74:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d78:	73 16                	jae    c0005d90 <f_lseek+0x38c>
c0005d7a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d7e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d82:	88 ca                	mov    dl,cl
c0005d84:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d87:	83 ca 40             	or     edx,0x40
c0005d8a:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005d8d:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005d90:	89 c2                	mov    edx,eax
c0005d92:	89 d8                	mov    eax,ebx
c0005d94:	e8 0e d4 ff ff       	call   c00031a7 <create_chain>
c0005d99:	85 c0                	test   eax,eax
c0005d9b:	75 0b                	jne    c0005da8 <f_lseek+0x3a4>
c0005d9d:	eb 30                	jmp    c0005dcf <f_lseek+0x3cb>
c0005d9f:	89 c2                	mov    edx,eax
c0005da1:	89 d8                	mov    eax,ebx
c0005da3:	e8 11 d1 ff ff       	call   c0002eb9 <get_fat>
c0005da8:	83 f8 ff             	cmp    eax,0xffffffff
c0005dab:	0f 84 25 fd ff ff    	je     c0005ad6 <f_lseek+0xd2>
c0005db1:	83 f8 01             	cmp    eax,0x1
c0005db4:	0f 86 06 fd ff ff    	jbe    c0005ac0 <f_lseek+0xbc>
c0005dba:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dbe:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dc1:	0f 86 f9 fc ff ff    	jbe    c0005ac0 <f_lseek+0xbc>
c0005dc7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dca:	e9 5b ff ff ff       	jmp    c0005d2a <f_lseek+0x326>
c0005dcf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005dde:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005de1:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005de5:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005de8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005deb:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005dee:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005df4:	0f 84 6f fe ff ff    	je     c0005c69 <f_lseek+0x265>
c0005dfa:	89 c2                	mov    edx,eax
c0005dfc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e00:	e8 e7 bf ff ff       	call   c0001dec <clst2sect>
c0005e05:	89 d7                	mov    edi,edx
c0005e07:	09 c7                	or     edi,eax
c0005e09:	0f 84 b1 fc ff ff    	je     c0005ac0 <f_lseek+0xbc>
c0005e0f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e13:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e16:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e1a:	c1 ef 09             	shr    edi,0x9
c0005e1d:	01 c6                	add    esi,eax
c0005e1f:	11 d7                	adc    edi,edx
c0005e21:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e24:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e27:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e2a:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e2d:	19 d1                	sbb    ecx,edx
c0005e2f:	73 0a                	jae    c0005e3b <f_lseek+0x437>
c0005e31:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e34:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e37:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e3b:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e40:	74 6d                	je     c0005eaf <f_lseek+0x4ab>
c0005e42:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e45:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e48:	39 fa                	cmp    edx,edi
c0005e4a:	75 04                	jne    c0005e50 <f_lseek+0x44c>
c0005e4c:	39 f0                	cmp    eax,esi
c0005e4e:	74 5f                	je     c0005eaf <f_lseek+0x4ab>
c0005e50:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e53:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e57:	79 25                	jns    c0005e7e <f_lseek+0x47a>
c0005e59:	83 ec 0c             	sub    esp,0xc
c0005e5c:	6a 01                	push   0x1
c0005e5e:	52                   	push   edx
c0005e5f:	50                   	push   eax
c0005e60:	55                   	push   ebp
c0005e61:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e65:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e69:	50                   	push   eax
c0005e6a:	e8 af bc ff ff       	call   c0001b1e <disk_write>
c0005e6f:	83 c4 20             	add    esp,0x20
c0005e72:	85 c0                	test   eax,eax
c0005e74:	0f 85 5c fc ff ff    	jne    c0005ad6 <f_lseek+0xd2>
c0005e7a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e7e:	83 ec 0c             	sub    esp,0xc
c0005e81:	6a 01                	push   0x1
c0005e83:	57                   	push   edi
c0005e84:	56                   	push   esi
c0005e85:	55                   	push   ebp
c0005e86:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e8a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e8e:	50                   	push   eax
c0005e8f:	e8 74 bc ff ff       	call   c0001b08 <disk_read>
c0005e94:	83 c4 20             	add    esp,0x20
c0005e97:	85 c0                	test   eax,eax
c0005e99:	0f 85 37 fc ff ff    	jne    c0005ad6 <f_lseek+0xd2>
c0005e9f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005ea2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ea5:	eb 08                	jmp    c0005eaf <f_lseek+0x4ab>
c0005ea7:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005eaf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005eb3:	83 c4 3c             	add    esp,0x3c
c0005eb6:	5b                   	pop    ebx
c0005eb7:	5e                   	pop    esi
c0005eb8:	5f                   	pop    edi
c0005eb9:	5d                   	pop    ebp
c0005eba:	c3                   	ret    

c0005ebb <f_opendir>:
c0005ebb:	56                   	push   esi
c0005ebc:	b8 09 00 00 00       	mov    eax,0x9
c0005ec1:	53                   	push   ebx
c0005ec2:	83 ec 24             	sub    esp,0x24
c0005ec5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ec9:	85 db                	test   ebx,ebx
c0005ecb:	0f 84 e6 00 00 00    	je     c0005fb7 <f_opendir+0xfc>
c0005ed1:	31 c9                	xor    ecx,ecx
c0005ed3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ed7:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005edb:	e8 03 c7 ff ff       	call   c00025e3 <mount_volume>
c0005ee0:	85 c0                	test   eax,eax
c0005ee2:	0f 85 c9 00 00 00    	jne    c0005fb1 <f_opendir+0xf6>
c0005ee8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005eec:	83 ec 0c             	sub    esp,0xc
c0005eef:	89 03                	mov    DWORD PTR [ebx],eax
c0005ef1:	68 60 04 00 00       	push   0x460
c0005ef6:	e8 c1 26 00 00       	call   c00085bc <ff_memalloc>
c0005efb:	83 c4 10             	add    esp,0x10
c0005efe:	89 c6                	mov    esi,eax
c0005f00:	b8 11 00 00 00       	mov    eax,0x11
c0005f05:	85 f6                	test   esi,esi
c0005f07:	0f 84 aa 00 00 00    	je     c0005fb7 <f_opendir+0xfc>
c0005f0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f11:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f17:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f1a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f1d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f21:	89 d8                	mov    eax,ebx
c0005f23:	e8 31 ee ff ff       	call   c0004d59 <follow_path>
c0005f28:	85 c0                	test   eax,eax
c0005f2a:	75 61                	jne    c0005f8d <f_opendir+0xd2>
c0005f2c:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f30:	78 46                	js     c0005f78 <f_opendir+0xbd>
c0005f32:	b8 05 00 00 00       	mov    eax,0x5
c0005f37:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f3b:	74 50                	je     c0005f8d <f_opendir+0xd2>
c0005f3d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f41:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f43:	3c 04                	cmp    al,0x4
c0005f45:	75 26                	jne    c0005f6d <f_opendir+0xb2>
c0005f47:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f4a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f50:	30 d2                	xor    dl,dl
c0005f52:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f56:	09 c2                	or     edx,eax
c0005f58:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f5b:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f5e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f61:	89 da                	mov    edx,ebx
c0005f63:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f66:	e8 b4 ed ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c0005f6b:	eb 0b                	jmp    c0005f78 <f_opendir+0xbd>
c0005f6d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f70:	e8 59 ed ff ff       	call   c0004cce <ld_clust.isra.0>
c0005f75:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f7c:	31 d2                	xor    edx,edx
c0005f7e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f82:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f86:	89 d8                	mov    eax,ebx
c0005f88:	e8 22 d1 ff ff       	call   c00030af <dir_sdi>
c0005f8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f91:	83 ec 0c             	sub    esp,0xc
c0005f94:	56                   	push   esi
c0005f95:	e8 3a 26 00 00       	call   c00085d4 <ff_memfree>
c0005f9a:	83 c4 10             	add    esp,0x10
c0005f9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fa1:	83 f8 04             	cmp    eax,0x4
c0005fa4:	74 06                	je     c0005fac <f_opendir+0xf1>
c0005fa6:	85 c0                	test   eax,eax
c0005fa8:	74 0d                	je     c0005fb7 <f_opendir+0xfc>
c0005faa:	eb 05                	jmp    c0005fb1 <f_opendir+0xf6>
c0005fac:	b8 05 00 00 00       	mov    eax,0x5
c0005fb1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fb7:	83 c4 24             	add    esp,0x24
c0005fba:	5b                   	pop    ebx
c0005fbb:	5e                   	pop    esi
c0005fbc:	c3                   	ret    

c0005fbd <f_closedir>:
c0005fbd:	53                   	push   ebx
c0005fbe:	83 ec 18             	sub    esp,0x18
c0005fc1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fc5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fc9:	89 d8                	mov    eax,ebx
c0005fcb:	e8 86 c2 ff ff       	call   c0002256 <validate>
c0005fd0:	85 c0                	test   eax,eax
c0005fd2:	75 06                	jne    c0005fda <f_closedir+0x1d>
c0005fd4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fda:	83 c4 18             	add    esp,0x18
c0005fdd:	5b                   	pop    ebx
c0005fde:	c3                   	ret    

c0005fdf <f_readdir>:
c0005fdf:	57                   	push   edi
c0005fe0:	56                   	push   esi
c0005fe1:	53                   	push   ebx
c0005fe2:	83 ec 20             	sub    esp,0x20
c0005fe5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fe9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005fed:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ff1:	89 d8                	mov    eax,ebx
c0005ff3:	e8 5e c2 ff ff       	call   c0002256 <validate>
c0005ff8:	85 c0                	test   eax,eax
c0005ffa:	75 77                	jne    c0006073 <f_readdir+0x94>
c0005ffc:	85 ff                	test   edi,edi
c0005ffe:	75 0b                	jne    c000600b <f_readdir+0x2c>
c0006000:	31 d2                	xor    edx,edx
c0006002:	89 d8                	mov    eax,ebx
c0006004:	e8 a6 d0 ff ff       	call   c00030af <dir_sdi>
c0006009:	eb 68                	jmp    c0006073 <f_readdir+0x94>
c000600b:	83 ec 0c             	sub    esp,0xc
c000600e:	68 60 04 00 00       	push   0x460
c0006013:	e8 a4 25 00 00       	call   c00085bc <ff_memalloc>
c0006018:	83 c4 10             	add    esp,0x10
c000601b:	89 c6                	mov    esi,eax
c000601d:	b8 11 00 00 00       	mov    eax,0x11
c0006022:	85 f6                	test   esi,esi
c0006024:	74 4d                	je     c0006073 <f_readdir+0x94>
c0006026:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000602a:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006030:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006033:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006036:	31 d2                	xor    edx,edx
c0006038:	89 d8                	mov    eax,ebx
c000603a:	e8 80 d8 ff ff       	call   c00038bf <dir_read>
c000603f:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006044:	75 19                	jne    c000605f <f_readdir+0x80>
c0006046:	89 fa                	mov    edx,edi
c0006048:	89 d8                	mov    eax,ebx
c000604a:	e8 7e ea ff ff       	call   c0004acd <get_fileinfo>
c000604f:	31 d2                	xor    edx,edx
c0006051:	89 d8                	mov    eax,ebx
c0006053:	e8 af d5 ff ff       	call   c0003607 <dir_next>
c0006058:	83 f8 04             	cmp    eax,0x4
c000605b:	75 02                	jne    c000605f <f_readdir+0x80>
c000605d:	31 c0                	xor    eax,eax
c000605f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006063:	83 ec 0c             	sub    esp,0xc
c0006066:	56                   	push   esi
c0006067:	e8 68 25 00 00       	call   c00085d4 <ff_memfree>
c000606c:	83 c4 10             	add    esp,0x10
c000606f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006073:	83 c4 20             	add    esp,0x20
c0006076:	5b                   	pop    ebx
c0006077:	5e                   	pop    esi
c0006078:	5f                   	pop    edi
c0006079:	c3                   	ret    

c000607a <f_stat>:
c000607a:	57                   	push   edi
c000607b:	31 c9                	xor    ecx,ecx
c000607d:	56                   	push   esi
c000607e:	53                   	push   ebx
c000607f:	83 ec 50             	sub    esp,0x50
c0006082:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006086:	8d 54 24 04          	lea    edx,[esp+0x4]
c000608a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000608e:	e8 50 c5 ff ff       	call   c00025e3 <mount_volume>
c0006093:	89 c3                	mov    ebx,eax
c0006095:	85 c0                	test   eax,eax
c0006097:	75 67                	jne    c0006100 <f_stat+0x86>
c0006099:	83 ec 0c             	sub    esp,0xc
c000609c:	bb 11 00 00 00       	mov    ebx,0x11
c00060a1:	68 60 04 00 00       	push   0x460
c00060a6:	e8 11 25 00 00       	call   c00085bc <ff_memalloc>
c00060ab:	83 c4 10             	add    esp,0x10
c00060ae:	89 c6                	mov    esi,eax
c00060b0:	85 c0                	test   eax,eax
c00060b2:	74 4c                	je     c0006100 <f_stat+0x86>
c00060b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060b8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060be:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060c1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060c4:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060c8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060cc:	e8 88 ec ff ff       	call   c0004d59 <follow_path>
c00060d1:	89 c3                	mov    ebx,eax
c00060d3:	85 c0                	test   eax,eax
c00060d5:	75 1d                	jne    c00060f4 <f_stat+0x7a>
c00060d7:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060dc:	78 11                	js     c00060ef <f_stat+0x75>
c00060de:	85 ff                	test   edi,edi
c00060e0:	74 12                	je     c00060f4 <f_stat+0x7a>
c00060e2:	89 fa                	mov    edx,edi
c00060e4:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060e8:	e8 e0 e9 ff ff       	call   c0004acd <get_fileinfo>
c00060ed:	eb 05                	jmp    c00060f4 <f_stat+0x7a>
c00060ef:	bb 06 00 00 00       	mov    ebx,0x6
c00060f4:	83 ec 0c             	sub    esp,0xc
c00060f7:	56                   	push   esi
c00060f8:	e8 d7 24 00 00       	call   c00085d4 <ff_memfree>
c00060fd:	83 c4 10             	add    esp,0x10
c0006100:	83 c4 50             	add    esp,0x50
c0006103:	89 d8                	mov    eax,ebx
c0006105:	5b                   	pop    ebx
c0006106:	5e                   	pop    esi
c0006107:	5f                   	pop    edi
c0006108:	c3                   	ret    

c0006109 <f_getfree>:
c0006109:	55                   	push   ebp
c000610a:	31 c9                	xor    ecx,ecx
c000610c:	57                   	push   edi
c000610d:	56                   	push   esi
c000610e:	53                   	push   ebx
c000610f:	83 ec 5c             	sub    esp,0x5c
c0006112:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006116:	8d 44 24 70          	lea    eax,[esp+0x70]
c000611a:	e8 c4 c4 ff ff       	call   c00025e3 <mount_volume>
c000611f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006123:	85 c0                	test   eax,eax
c0006125:	0f 85 9d 01 00 00    	jne    c00062c8 <f_getfree+0x1bf>
c000612b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000612f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006133:	89 02                	mov    DWORD PTR [edx],eax
c0006135:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006138:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000613b:	8d 71 fe             	lea    esi,[ecx-0x2]
c000613e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006142:	39 f2                	cmp    edx,esi
c0006144:	77 0b                	ja     c0006151 <f_getfree+0x48>
c0006146:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000614a:	89 10                	mov    DWORD PTR [eax],edx
c000614c:	e9 77 01 00 00       	jmp    c00062c8 <f_getfree+0x1bf>
c0006151:	8a 10                	mov    dl,BYTE PTR [eax]
c0006153:	80 fa 01             	cmp    dl,0x1
c0006156:	75 3a                	jne    c0006192 <f_getfree+0x89>
c0006158:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000615c:	be 02 00 00 00       	mov    esi,0x2
c0006161:	31 db                	xor    ebx,ebx
c0006163:	89 f2                	mov    edx,esi
c0006165:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006169:	e8 4b cd ff ff       	call   c0002eb9 <get_fat>
c000616e:	83 f8 ff             	cmp    eax,0xffffffff
c0006171:	0f 84 28 01 00 00    	je     c000629f <f_getfree+0x196>
c0006177:	83 f8 01             	cmp    eax,0x1
c000617a:	0f 84 29 01 00 00    	je     c00062a9 <f_getfree+0x1a0>
c0006180:	83 d3 00             	adc    ebx,0x0
c0006183:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006187:	46                   	inc    esi
c0006188:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000618b:	77 d6                	ja     c0006163 <f_getfree+0x5a>
c000618d:	e9 25 01 00 00       	jmp    c00062b7 <f_getfree+0x1ae>
c0006192:	80 fa 04             	cmp    dl,0x4
c0006195:	0f 85 88 00 00 00    	jne    c0006223 <f_getfree+0x11a>
c000619b:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000619e:	31 ed                	xor    ebp,ebp
c00061a0:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061a3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061ab:	31 db                	xor    ebx,ebx
c00061ad:	85 ed                	test   ebp,ebp
c00061af:	75 3f                	jne    c00061f0 <f_getfree+0xe7>
c00061b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061b5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061b9:	83 c0 01             	add    eax,0x1
c00061bc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061c0:	83 d2 00             	adc    edx,0x0
c00061c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061d3:	e8 59 c1 ff ff       	call   c0002331 <move_window>
c00061d8:	85 c0                	test   eax,eax
c00061da:	0f 85 d3 00 00 00    	jne    c00062b3 <f_getfree+0x1aa>
c00061e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00061e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061f0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061f4:	8d 4e f8             	lea    ecx,[esi-0x8]
c00061f7:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00061fb:	89 cf                	mov    edi,ecx
c00061fd:	85 f6                	test   esi,esi
c00061ff:	74 12                	je     c0006213 <f_getfree+0x10a>
c0006201:	88 c1                	mov    cl,al
c0006203:	83 e1 01             	and    ecx,0x1
c0006206:	80 f9 01             	cmp    cl,0x1
c0006209:	83 d3 00             	adc    ebx,0x0
c000620c:	d0 e8                	shr    al,1
c000620e:	4e                   	dec    esi
c000620f:	39 fe                	cmp    esi,edi
c0006211:	75 ea                	jne    c00061fd <f_getfree+0xf4>
c0006213:	45                   	inc    ebp
c0006214:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000621a:	85 f6                	test   esi,esi
c000621c:	75 8f                	jne    c00061ad <f_getfree+0xa4>
c000621e:	e9 94 00 00 00       	jmp    c00062b7 <f_getfree+0x1ae>
c0006223:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006226:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006229:	31 f6                	xor    esi,esi
c000622b:	31 db                	xor    ebx,ebx
c000622d:	85 f6                	test   esi,esi
c000622f:	75 1b                	jne    c000624c <f_getfree+0x143>
c0006231:	89 d7                	mov    edi,edx
c0006233:	89 cd                	mov    ebp,ecx
c0006235:	83 c7 01             	add    edi,0x1
c0006238:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623c:	83 d5 00             	adc    ebp,0x0
c000623f:	e8 ed c0 ff ff       	call   c0002331 <move_window>
c0006244:	85 c0                	test   eax,eax
c0006246:	75 6b                	jne    c00062b3 <f_getfree+0x1aa>
c0006248:	89 fa                	mov    edx,edi
c000624a:	89 e9                	mov    ecx,ebp
c000624c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006250:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006254:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006258:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000625b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000625f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006263:	75 11                	jne    c0006276 <f_getfree+0x16d>
c0006265:	e8 e9 b8 ff ff       	call   c0001b53 <ld_word>
c000626a:	66 83 f8 01          	cmp    ax,0x1
c000626e:	83 d3 00             	adc    ebx,0x0
c0006271:	83 c6 02             	add    esi,0x2
c0006274:	eb 13                	jmp    c0006289 <f_getfree+0x180>
c0006276:	e8 e5 b8 ff ff       	call   c0001b60 <ld_dword>
c000627b:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006280:	83 f8 01             	cmp    eax,0x1
c0006283:	83 d3 00             	adc    ebx,0x0
c0006286:	83 c6 04             	add    esi,0x4
c0006289:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000628f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006293:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006297:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000629b:	75 90                	jne    c000622d <f_getfree+0x124>
c000629d:	eb 18                	jmp    c00062b7 <f_getfree+0x1ae>
c000629f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062a7:	eb 0e                	jmp    c00062b7 <f_getfree+0x1ae>
c00062a9:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062b1:	eb 04                	jmp    c00062b7 <f_getfree+0x1ae>
c00062b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062b7:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062bb:	89 18                	mov    DWORD PTR [eax],ebx
c00062bd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c1:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062c4:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062cc:	83 c4 5c             	add    esp,0x5c
c00062cf:	5b                   	pop    ebx
c00062d0:	5e                   	pop    esi
c00062d1:	5f                   	pop    edi
c00062d2:	5d                   	pop    ebp
c00062d3:	c3                   	ret    

c00062d4 <f_truncate>:
c00062d4:	56                   	push   esi
c00062d5:	53                   	push   ebx
c00062d6:	83 ec 14             	sub    esp,0x14
c00062d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062dd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062e1:	89 d8                	mov    eax,ebx
c00062e3:	e8 6e bf ff ff       	call   c0002256 <validate>
c00062e8:	89 c6                	mov    esi,eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	0f 85 d2 00 00 00    	jne    c00063c4 <f_truncate+0xf0>
c00062f2:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00062f6:	85 f6                	test   esi,esi
c00062f8:	0f 85 c6 00 00 00    	jne    c00063c4 <f_truncate+0xf0>
c00062fe:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006302:	0f 84 b7 00 00 00    	je     c00063bf <f_truncate+0xeb>
c0006308:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000630b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000630e:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006311:	89 d1                	mov    ecx,edx
c0006313:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006316:	0f 83 a8 00 00 00    	jae    c00063c4 <f_truncate+0xf0>
c000631c:	09 c2                	or     edx,eax
c000631e:	75 15                	jne    c0006335 <f_truncate+0x61>
c0006320:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006323:	31 c9                	xor    ecx,ecx
c0006325:	89 d8                	mov    eax,ebx
c0006327:	e8 7a d0 ff ff       	call   c00033a6 <remove_chain>
c000632c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006333:	eb 35                	jmp    c000636a <f_truncate+0x96>
c0006335:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006338:	89 d8                	mov    eax,ebx
c000633a:	e8 7a cb ff ff       	call   c0002eb9 <get_fat>
c000633f:	89 c2                	mov    edx,eax
c0006341:	b8 01 00 00 00       	mov    eax,0x1
c0006346:	83 fa ff             	cmp    edx,0xffffffff
c0006349:	74 1f                	je     c000636a <f_truncate+0x96>
c000634b:	b8 02 00 00 00       	mov    eax,0x2
c0006350:	83 fa 01             	cmp    edx,0x1
c0006353:	74 15                	je     c000636a <f_truncate+0x96>
c0006355:	31 c0                	xor    eax,eax
c0006357:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000635b:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000635e:	76 0a                	jbe    c000636a <f_truncate+0x96>
c0006360:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006363:	89 d8                	mov    eax,ebx
c0006365:	e8 3c d0 ff ff       	call   c00033a6 <remove_chain>
c000636a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000636d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006370:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006373:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006376:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006379:	83 ca 40             	or     edx,0x40
c000637c:	85 c0                	test   eax,eax
c000637e:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006381:	75 35                	jne    c00063b8 <f_truncate+0xe4>
c0006383:	84 d2                	test   dl,dl
c0006385:	79 3d                	jns    c00063c4 <f_truncate+0xf0>
c0006387:	83 ec 0c             	sub    esp,0xc
c000638a:	8d 43 50             	lea    eax,[ebx+0x50]
c000638d:	6a 01                	push   0x1
c000638f:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006392:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006395:	50                   	push   eax
c0006396:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000639a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000639e:	50                   	push   eax
c000639f:	e8 7a b7 ff ff       	call   c0001b1e <disk_write>
c00063a4:	83 c4 20             	add    esp,0x20
c00063a7:	85 c0                	test   eax,eax
c00063a9:	75 08                	jne    c00063b3 <f_truncate+0xdf>
c00063ab:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063af:	31 f6                	xor    esi,esi
c00063b1:	eb 11                	jmp    c00063c4 <f_truncate+0xf0>
c00063b3:	b8 01 00 00 00       	mov    eax,0x1
c00063b8:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063bb:	89 c6                	mov    esi,eax
c00063bd:	eb 05                	jmp    c00063c4 <f_truncate+0xf0>
c00063bf:	be 07 00 00 00       	mov    esi,0x7
c00063c4:	89 f0                	mov    eax,esi
c00063c6:	83 c4 14             	add    esp,0x14
c00063c9:	5b                   	pop    ebx
c00063ca:	5e                   	pop    esi
c00063cb:	c3                   	ret    

c00063cc <f_unlink>:
c00063cc:	56                   	push   esi
c00063cd:	b9 02 00 00 00       	mov    ecx,0x2
c00063d2:	53                   	push   ebx
c00063d3:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063dd:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063e4:	e8 fa c1 ff ff       	call   c00025e3 <mount_volume>
c00063e9:	85 c0                	test   eax,eax
c00063eb:	0f 85 55 01 00 00    	jne    c0006546 <f_unlink+0x17a>
c00063f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063f5:	83 ec 0c             	sub    esp,0xc
c00063f8:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00063fc:	68 60 04 00 00       	push   0x460
c0006401:	e8 b6 21 00 00       	call   c00085bc <ff_memalloc>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	89 c3                	mov    ebx,eax
c000640b:	b8 11 00 00 00       	mov    eax,0x11
c0006410:	85 db                	test   ebx,ebx
c0006412:	0f 84 2e 01 00 00    	je     c0006546 <f_unlink+0x17a>
c0006418:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000641c:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006422:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006425:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006428:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000642f:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006433:	e8 21 e9 ff ff       	call   c0004d59 <follow_path>
c0006438:	85 c0                	test   eax,eax
c000643a:	0f 85 f2 00 00 00    	jne    c0006532 <f_unlink+0x166>
c0006440:	b8 06 00 00 00       	mov    eax,0x6
c0006445:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000644d:	0f 88 df 00 00 00    	js     c0006532 <f_unlink+0x166>
c0006453:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006458:	74 0a                	je     c0006464 <f_unlink+0x98>
c000645a:	b8 07 00 00 00       	mov    eax,0x7
c000645f:	e9 ce 00 00 00       	jmp    c0006532 <f_unlink+0x166>
c0006464:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006468:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000646c:	8a 02                	mov    al,BYTE PTR [edx]
c000646e:	3c 04                	cmp    al,0x4
c0006470:	75 12                	jne    c0006484 <f_unlink+0xb8>
c0006472:	8d 42 10             	lea    eax,[edx+0x10]
c0006475:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006479:	e8 a1 e8 ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c000647e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006482:	eb 0e                	jmp    c0006492 <f_unlink+0xc6>
c0006484:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000648b:	e8 3e e8 ff ff       	call   c0004cce <ld_clust.isra.0>
c0006490:	89 c6                	mov    esi,eax
c0006492:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006497:	75 12                	jne    c00064ab <f_unlink+0xdf>
c0006499:	8d 44 24 48          	lea    eax,[esp+0x48]
c000649d:	e8 94 d6 ff ff       	call   c0003b36 <dir_remove>
c00064a2:	85 c0                	test   eax,eax
c00064a4:	74 6c                	je     c0006512 <f_unlink+0x146>
c00064a6:	e9 87 00 00 00       	jmp    c0006532 <f_unlink+0x166>
c00064ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064af:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064b6:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064bd:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064c0:	75 21                	jne    c00064e3 <f_unlink+0x117>
c00064c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064c6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064ca:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064d1:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064d8:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064dc:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064e3:	31 d2                	xor    edx,edx
c00064e5:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064ec:	e8 be cb ff ff       	call   c00030af <dir_sdi>
c00064f1:	85 c0                	test   eax,eax
c00064f3:	75 3d                	jne    c0006532 <f_unlink+0x166>
c00064f5:	31 d2                	xor    edx,edx
c00064f7:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064fe:	e8 bc d3 ff ff       	call   c00038bf <dir_read>
c0006503:	85 c0                	test   eax,eax
c0006505:	0f 84 4f ff ff ff    	je     c000645a <f_unlink+0x8e>
c000650b:	83 f8 04             	cmp    eax,0x4
c000650e:	75 22                	jne    c0006532 <f_unlink+0x166>
c0006510:	eb 87                	jmp    c0006499 <f_unlink+0xcd>
c0006512:	85 f6                	test   esi,esi
c0006514:	75 0b                	jne    c0006521 <f_unlink+0x155>
c0006516:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000651a:	e8 3d df ff ff       	call   c000445c <sync_fs>
c000651f:	eb 11                	jmp    c0006532 <f_unlink+0x166>
c0006521:	31 c9                	xor    ecx,ecx
c0006523:	89 f2                	mov    edx,esi
c0006525:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006529:	e8 78 ce ff ff       	call   c00033a6 <remove_chain>
c000652e:	85 c0                	test   eax,eax
c0006530:	74 e4                	je     c0006516 <f_unlink+0x14a>
c0006532:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006536:	83 ec 0c             	sub    esp,0xc
c0006539:	53                   	push   ebx
c000653a:	e8 95 20 00 00       	call   c00085d4 <ff_memfree>
c000653f:	83 c4 10             	add    esp,0x10
c0006542:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006546:	81 c4 e4 00 00 00    	add    esp,0xe4
c000654c:	5b                   	pop    ebx
c000654d:	5e                   	pop    esi
c000654e:	c3                   	ret    

c000654f <f_mkdir>:
c000654f:	57                   	push   edi
c0006550:	b9 02 00 00 00       	mov    ecx,0x2
c0006555:	56                   	push   esi
c0006556:	53                   	push   ebx
c0006557:	83 c4 80             	add    esp,0xffffff80
c000655a:	8d 54 24 08          	lea    edx,[esp+0x8]
c000655e:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006565:	e8 79 c0 ff ff       	call   c00025e3 <mount_volume>
c000656a:	89 c3                	mov    ebx,eax
c000656c:	85 c0                	test   eax,eax
c000656e:	0f 85 fe 01 00 00    	jne    c0006772 <f_mkdir+0x223>
c0006574:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006578:	bb 11 00 00 00       	mov    ebx,0x11
c000657d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006581:	83 ec 0c             	sub    esp,0xc
c0006584:	68 60 04 00 00       	push   0x460
c0006589:	e8 2e 20 00 00       	call   c00085bc <ff_memalloc>
c000658e:	83 c4 10             	add    esp,0x10
c0006591:	89 c7                	mov    edi,eax
c0006593:	85 c0                	test   eax,eax
c0006595:	0f 84 d7 01 00 00    	je     c0006772 <f_mkdir+0x223>
c000659b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000659f:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065a5:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065a8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065ab:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065b2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065b6:	e8 9e e7 ff ff       	call   c0004d59 <follow_path>
c00065bb:	89 c3                	mov    ebx,eax
c00065bd:	85 c0                	test   eax,eax
c00065bf:	74 3e                	je     c00065ff <f_mkdir+0xb0>
c00065c1:	83 f8 04             	cmp    eax,0x4
c00065c4:	75 3e                	jne    c0006604 <f_mkdir+0xb5>
c00065c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065ca:	31 d2                	xor    edx,edx
c00065cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065d0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065d4:	e8 ce cb ff ff       	call   c00031a7 <create_chain>
c00065d9:	89 c6                	mov    esi,eax
c00065db:	85 c0                	test   eax,eax
c00065dd:	74 0c                	je     c00065eb <f_mkdir+0x9c>
c00065df:	bb 02 00 00 00       	mov    ebx,0x2
c00065e4:	83 f8 01             	cmp    eax,0x1
c00065e7:	74 07                	je     c00065f0 <f_mkdir+0xa1>
c00065e9:	eb 2a                	jmp    c0006615 <f_mkdir+0xc6>
c00065eb:	bb 07 00 00 00       	mov    ebx,0x7
c00065f0:	31 c9                	xor    ecx,ecx
c00065f2:	89 f2                	mov    edx,esi
c00065f4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065f8:	e8 a9 cd ff ff       	call   c00033a6 <remove_chain>
c00065fd:	eb 05                	jmp    c0006604 <f_mkdir+0xb5>
c00065ff:	bb 08 00 00 00       	mov    ebx,0x8
c0006604:	83 ec 0c             	sub    esp,0xc
c0006607:	57                   	push   edi
c0006608:	e8 c7 1f 00 00       	call   c00085d4 <ff_memfree>
c000660d:	83 c4 10             	add    esp,0x10
c0006610:	e9 5d 01 00 00       	jmp    c0006772 <f_mkdir+0x223>
c0006615:	bb 01 00 00 00       	mov    ebx,0x1
c000661a:	83 f8 ff             	cmp    eax,0xffffffff
c000661d:	74 d1                	je     c00065f0 <f_mkdir+0xa1>
c000661f:	89 f2                	mov    edx,esi
c0006621:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006625:	e8 c4 ce ff ff       	call   c00034ee <dir_clear>
c000662a:	89 c3                	mov    ebx,eax
c000662c:	85 c0                	test   eax,eax
c000662e:	75 c0                	jne    c00065f0 <f_mkdir+0xa1>
c0006630:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006634:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006637:	74 69                	je     c00066a2 <f_mkdir+0x153>
c0006639:	b9 0b 00 00 00       	mov    ecx,0xb
c000663e:	83 c0 54             	add    eax,0x54
c0006641:	ba 20 00 00 00       	mov    edx,0x20
c0006646:	e8 9c b5 ff ff       	call   c0001be7 <mem_set>
c000664b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664f:	ba 00 00 21 50       	mov    edx,0x50210000
c0006654:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006658:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000665c:	83 c0 6a             	add    eax,0x6a
c000665f:	e8 65 b5 ff ff       	call   c0001bc9 <st_dword>
c0006664:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006668:	89 f1                	mov    ecx,esi
c000666a:	8d 50 54             	lea    edx,[eax+0x54]
c000666d:	e8 85 e6 ff ff       	call   c0004cf7 <st_clust.isra.1>
c0006672:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006676:	b9 20 00 00 00       	mov    ecx,0x20
c000667b:	8d 50 54             	lea    edx,[eax+0x54]
c000667e:	83 c0 74             	add    eax,0x74
c0006681:	e8 4c b5 ff ff       	call   c0001bd2 <mem_cpy>
c0006686:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000668a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000668e:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006692:	8d 50 74             	lea    edx,[eax+0x74]
c0006695:	e8 5d e6 ff ff       	call   c0004cf7 <st_clust.isra.1>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066a2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066a6:	e8 2f db ff ff       	call   c00041da <dir_register>
c00066ab:	89 c3                	mov    ebx,eax
c00066ad:	85 c0                	test   eax,eax
c00066af:	0f 85 3b ff ff ff    	jne    c00065f0 <f_mkdir+0xa1>
c00066b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066b9:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066bc:	75 74                	jne    c0006732 <f_mkdir+0x1e3>
c00066be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c1:	ba 00 00 21 50       	mov    edx,0x50210000
c00066c6:	83 c0 0c             	add    eax,0xc
c00066c9:	e8 fb b4 ff ff       	call   c0001bc9 <st_dword>
c00066ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d2:	89 f2                	mov    edx,esi
c00066d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066d7:	83 c0 34             	add    eax,0x34
c00066da:	e8 ea b4 ff ff       	call   c0001bc9 <st_dword>
c00066df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066e3:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066e7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066ea:	c1 e2 09             	shl    edx,0x9
c00066ed:	83 c0 38             	add    eax,0x38
c00066f0:	e8 d4 b4 ff ff       	call   c0001bc9 <st_dword>
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066fd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006700:	c1 e2 09             	shl    edx,0x9
c0006703:	83 c0 28             	add    eax,0x28
c0006706:	e8 be b4 ff ff       	call   c0001bc9 <st_dword>
c000670b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000670f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006712:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006716:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006719:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000671d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006721:	e8 8b d3 ff ff       	call   c0003ab1 <store_xdir>
c0006726:	89 c3                	mov    ebx,eax
c0006728:	85 c0                	test   eax,eax
c000672a:	0f 85 d4 fe ff ff    	jne    c0006604 <f_mkdir+0xb5>
c0006730:	eb 30                	jmp    c0006762 <f_mkdir+0x213>
c0006732:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006736:	ba 00 00 21 50       	mov    edx,0x50210000
c000673b:	83 c0 16             	add    eax,0x16
c000673e:	e8 86 b4 ff ff       	call   c0001bc9 <st_dword>
c0006743:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006747:	89 f1                	mov    ecx,esi
c0006749:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000674d:	e8 a5 e5 ff ff       	call   c0004cf7 <st_clust.isra.1>
c0006752:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006756:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	e8 f1 dc ff ff       	call   c000445c <sync_fs>
c000676b:	89 c3                	mov    ebx,eax
c000676d:	e9 92 fe ff ff       	jmp    c0006604 <f_mkdir+0xb5>
c0006772:	83 ec 80             	sub    esp,0xffffff80
c0006775:	89 d8                	mov    eax,ebx
c0006777:	5b                   	pop    ebx
c0006778:	5e                   	pop    esi
c0006779:	5f                   	pop    edi
c000677a:	c3                   	ret    

c000677b <f_rename>:
c000677b:	55                   	push   ebp
c000677c:	57                   	push   edi
c000677d:	56                   	push   esi
c000677e:	53                   	push   ebx
c000677f:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006785:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000678c:	e8 a4 b9 ff ff       	call   c0002135 <get_ldnumber>
c0006791:	b9 02 00 00 00       	mov    ecx,0x2
c0006796:	8d 54 24 14          	lea    edx,[esp+0x14]
c000679a:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067a1:	e8 3d be ff ff       	call   c00025e3 <mount_volume>
c00067a6:	85 c0                	test   eax,eax
c00067a8:	0f 85 b5 02 00 00    	jne    c0006a63 <f_rename+0x2e8>
c00067ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067b2:	83 ec 0c             	sub    esp,0xc
c00067b5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067b9:	68 60 04 00 00       	push   0x460
c00067be:	e8 f9 1d 00 00       	call   c00085bc <ff_memalloc>
c00067c3:	83 c4 10             	add    esp,0x10
c00067c6:	89 c3                	mov    ebx,eax
c00067c8:	b8 11 00 00 00       	mov    eax,0x11
c00067cd:	85 db                	test   ebx,ebx
c00067cf:	0f 84 8e 02 00 00    	je     c0006a63 <f_rename+0x2e8>
c00067d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067d9:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067df:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067e2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067e5:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00067ec:	8d 44 24 58          	lea    eax,[esp+0x58]
c00067f0:	e8 64 e5 ff ff       	call   c0004d59 <follow_path>
c00067f5:	85 c0                	test   eax,eax
c00067f7:	0f 85 52 02 00 00    	jne    c0006a4f <f_rename+0x2d4>
c00067fd:	b8 06 00 00 00       	mov    eax,0x6
c0006802:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c000680a:	0f 85 3f 02 00 00    	jne    c0006a4f <f_rename+0x2d4>
c0006810:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006814:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006817:	0f 85 05 01 00 00    	jne    c0006922 <f_rename+0x1a7>
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	b9 40 00 00 00       	mov    ecx,0x40
c0006825:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006829:	e8 a4 b3 ff ff       	call   c0001bd2 <mem_cpy>
c000682e:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006833:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006837:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000683e:	e8 8f b3 ff ff       	call   c0001bd2 <mem_cpy>
c0006843:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000684a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006851:	e8 03 e5 ff ff       	call   c0004d59 <follow_path>
c0006856:	85 c0                	test   eax,eax
c0006858:	75 29                	jne    c0006883 <f_rename+0x108>
c000685a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000685e:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006865:	74 0a                	je     c0006871 <f_rename+0xf6>
c0006867:	b8 08 00 00 00       	mov    eax,0x8
c000686c:	e9 de 01 00 00       	jmp    c0006a4f <f_rename+0x2d4>
c0006871:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006878:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000687f:	75 e6                	jne    c0006867 <f_rename+0xec>
c0006881:	eb 09                	jmp    c000688c <f_rename+0x111>
c0006883:	83 f8 04             	cmp    eax,0x4
c0006886:	0f 85 c3 01 00 00    	jne    c0006a4f <f_rename+0x2d4>
c000688c:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006893:	e8 42 d9 ff ff       	call   c00041da <dir_register>
c0006898:	85 c0                	test   eax,eax
c000689a:	0f 85 af 01 00 00    	jne    c0006a4f <f_rename+0x2d4>
c00068a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068a4:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068a7:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068aa:	89 c5                	mov    ebp,eax
c00068ac:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068af:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068b3:	8d 46 24             	lea    eax,[esi+0x24]
c00068b6:	e8 98 b2 ff ff       	call   c0001b53 <ld_word>
c00068bb:	b9 40 00 00 00       	mov    ecx,0x40
c00068c0:	89 c7                	mov    edi,eax
c00068c2:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068c6:	89 f0                	mov    eax,esi
c00068c8:	e8 05 b3 ff ff       	call   c0001bd2 <mem_cpy>
c00068cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d1:	89 e9                	mov    ecx,ebp
c00068d3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068d6:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068d9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068e4:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068e7:	0f b7 d7             	movzx  edx,di
c00068ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068ed:	83 c0 24             	add    eax,0x24
c00068f0:	e8 d0 b2 ff ff       	call   c0001bc5 <st_word>
c00068f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068fc:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00068ff:	a8 10                	test   al,0x10
c0006901:	75 06                	jne    c0006909 <f_rename+0x18e>
c0006903:	83 c8 20             	or     eax,0x20
c0006906:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006909:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006910:	e8 9c d1 ff ff       	call   c0003ab1 <store_xdir>
c0006915:	85 c0                	test   eax,eax
c0006917:	0f 84 1c 01 00 00    	je     c0006a39 <f_rename+0x2be>
c000691d:	e9 2d 01 00 00       	jmp    c0006a4f <f_rename+0x2d4>
c0006922:	b9 20 00 00 00       	mov    ecx,0x20
c0006927:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c000692e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006932:	e8 9b b2 ff ff       	call   c0001bd2 <mem_cpy>
c0006937:	b9 4c 00 00 00       	mov    ecx,0x4c
c000693c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006940:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006947:	e8 86 b2 ff ff       	call   c0001bd2 <mem_cpy>
c000694c:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006953:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695a:	e8 fa e3 ff ff       	call   c0004d59 <follow_path>
c000695f:	85 c0                	test   eax,eax
c0006961:	75 27                	jne    c000698a <f_rename+0x20f>
c0006963:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006967:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000696e:	0f 85 f3 fe ff ff    	jne    c0006867 <f_rename+0xec>
c0006974:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000697b:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006982:	0f 85 df fe ff ff    	jne    c0006867 <f_rename+0xec>
c0006988:	eb 09                	jmp    c0006993 <f_rename+0x218>
c000698a:	83 f8 04             	cmp    eax,0x4
c000698d:	0f 85 bc 00 00 00    	jne    c0006a4f <f_rename+0x2d4>
c0006993:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000699a:	e8 3b d8 ff ff       	call   c00041da <dir_register>
c000699f:	85 c0                	test   eax,eax
c00069a1:	0f 85 a8 00 00 00    	jne    c0006a4f <f_rename+0x2d4>
c00069a7:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069ae:	b9 13 00 00 00       	mov    ecx,0x13
c00069b3:	8d 46 0d             	lea    eax,[esi+0xd]
c00069b6:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069ba:	e8 13 b2 ff ff       	call   c0001bd2 <mem_cpy>
c00069bf:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069c3:	a8 10                	test   al,0x10
c00069c5:	75 03                	jne    c00069ca <f_rename+0x24f>
c00069c7:	83 c8 20             	or     eax,0x20
c00069ca:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069d5:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069d9:	74 5e                	je     c0006a39 <f_rename+0x2be>
c00069db:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069e2:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069e6:	74 51                	je     c0006a39 <f_rename+0x2be>
c00069e8:	89 f2                	mov    edx,esi
c00069ea:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00069ee:	8a 07                	mov    al,BYTE PTR [edi]
c00069f0:	e8 d9 e2 ff ff       	call   c0004cce <ld_clust.isra.0>
c00069f5:	89 c2                	mov    edx,eax
c00069f7:	89 f8                	mov    eax,edi
c00069f9:	e8 ee b3 ff ff       	call   c0001dec <clst2sect>
c00069fe:	89 c6                	mov    esi,eax
c0006a00:	89 d1                	mov    ecx,edx
c0006a02:	b8 02 00 00 00       	mov    eax,0x2
c0006a07:	09 f2                	or     edx,esi
c0006a09:	74 44                	je     c0006a4f <f_rename+0x2d4>
c0006a0b:	89 f2                	mov    edx,esi
c0006a0d:	89 f8                	mov    eax,edi
c0006a0f:	e8 1d b9 ff ff       	call   c0002331 <move_window>
c0006a14:	85 c0                	test   eax,eax
c0006a16:	75 37                	jne    c0006a4f <f_rename+0x2d4>
c0006a18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a1c:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a20:	75 17                	jne    c0006a39 <f_rename+0x2be>
c0006a22:	8d 50 74             	lea    edx,[eax+0x74]
c0006a25:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a2c:	e8 c6 e2 ff ff       	call   c0004cf7 <st_clust.isra.1>
c0006a31:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a35:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a39:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a3d:	e8 f4 d0 ff ff       	call   c0003b36 <dir_remove>
c0006a42:	85 c0                	test   eax,eax
c0006a44:	75 09                	jne    c0006a4f <f_rename+0x2d4>
c0006a46:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a4a:	e8 0d da ff ff       	call   c000445c <sync_fs>
c0006a4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a53:	83 ec 0c             	sub    esp,0xc
c0006a56:	53                   	push   ebx
c0006a57:	e8 78 1b 00 00       	call   c00085d4 <ff_memfree>
c0006a5c:	83 c4 10             	add    esp,0x10
c0006a5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a63:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a69:	5b                   	pop    ebx
c0006a6a:	5e                   	pop    esi
c0006a6b:	5f                   	pop    edi
c0006a6c:	5d                   	pop    ebp
c0006a6d:	c3                   	ret    

c0006a6e <f_chmod>:
c0006a6e:	57                   	push   edi
c0006a6f:	b9 02 00 00 00       	mov    ecx,0x2
c0006a74:	56                   	push   esi
c0006a75:	53                   	push   ebx
c0006a76:	83 ec 60             	sub    esp,0x60
c0006a79:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a7d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a81:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a85:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a89:	e8 55 bb ff ff       	call   c00025e3 <mount_volume>
c0006a8e:	85 c0                	test   eax,eax
c0006a90:	0f 85 af 00 00 00    	jne    c0006b45 <f_chmod+0xd7>
c0006a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a9a:	83 ec 0c             	sub    esp,0xc
c0006a9d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006aa1:	68 60 04 00 00       	push   0x460
c0006aa6:	e8 11 1b 00 00       	call   c00085bc <ff_memalloc>
c0006aab:	83 c4 10             	add    esp,0x10
c0006aae:	89 c6                	mov    esi,eax
c0006ab0:	b8 11 00 00 00       	mov    eax,0x11
c0006ab5:	85 f6                	test   esi,esi
c0006ab7:	0f 84 88 00 00 00    	je     c0006b45 <f_chmod+0xd7>
c0006abd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac1:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006ac7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006aca:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006acd:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ad1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ad5:	e8 7f e2 ff ff       	call   c0004d59 <follow_path>
c0006ada:	85 c0                	test   eax,eax
c0006adc:	75 53                	jne    c0006b31 <f_chmod+0xc3>
c0006ade:	b8 06 00 00 00       	mov    eax,0x6
c0006ae3:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ae8:	75 47                	jne    c0006b31 <f_chmod+0xc3>
c0006aea:	89 f9                	mov    ecx,edi
c0006aec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af0:	83 e1 27             	and    ecx,0x27
c0006af3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006af6:	75 1d                	jne    c0006b15 <f_chmod+0xa7>
c0006af8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006afb:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006afe:	21 cb                	and    ebx,ecx
c0006b00:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b03:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b06:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b0a:	e8 a2 cf ff ff       	call   c0003ab1 <store_xdir>
c0006b0f:	85 c0                	test   eax,eax
c0006b11:	75 1e                	jne    c0006b31 <f_chmod+0xc3>
c0006b13:	eb 13                	jmp    c0006b28 <f_chmod+0xba>
c0006b15:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b19:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b1c:	21 cb                	and    ebx,ecx
c0006b1e:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b21:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b24:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b2c:	e8 2b d9 ff ff       	call   c000445c <sync_fs>
c0006b31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b35:	83 ec 0c             	sub    esp,0xc
c0006b38:	56                   	push   esi
c0006b39:	e8 96 1a 00 00       	call   c00085d4 <ff_memfree>
c0006b3e:	83 c4 10             	add    esp,0x10
c0006b41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b45:	83 c4 60             	add    esp,0x60
c0006b48:	5b                   	pop    ebx
c0006b49:	5e                   	pop    esi
c0006b4a:	5f                   	pop    edi
c0006b4b:	c3                   	ret    

c0006b4c <f_utime>:
c0006b4c:	56                   	push   esi
c0006b4d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b52:	53                   	push   ebx
c0006b53:	83 ec 64             	sub    esp,0x64
c0006b56:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b5a:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b5e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b62:	e8 7c ba ff ff       	call   c00025e3 <mount_volume>
c0006b67:	85 c0                	test   eax,eax
c0006b69:	0f 85 b5 00 00 00    	jne    c0006c24 <f_utime+0xd8>
c0006b6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b73:	83 ec 0c             	sub    esp,0xc
c0006b76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b7a:	68 60 04 00 00       	push   0x460
c0006b7f:	e8 38 1a 00 00       	call   c00085bc <ff_memalloc>
c0006b84:	83 c4 10             	add    esp,0x10
c0006b87:	89 c3                	mov    ebx,eax
c0006b89:	b8 11 00 00 00       	mov    eax,0x11
c0006b8e:	85 db                	test   ebx,ebx
c0006b90:	0f 84 8e 00 00 00    	je     c0006c24 <f_utime+0xd8>
c0006b96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b9a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ba0:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006ba3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba6:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006baa:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bae:	e8 a6 e1 ff ff       	call   c0004d59 <follow_path>
c0006bb3:	85 c0                	test   eax,eax
c0006bb5:	75 59                	jne    c0006c10 <f_utime+0xc4>
c0006bb7:	b8 06 00 00 00       	mov    eax,0x6
c0006bbc:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bc1:	75 4d                	jne    c0006c10 <f_utime+0xc4>
c0006bc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc7:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006bcb:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006bcf:	c1 e2 10             	shl    edx,0x10
c0006bd2:	09 ca                	or     edx,ecx
c0006bd4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bd7:	75 1a                	jne    c0006bf3 <f_utime+0xa7>
c0006bd9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bdc:	83 c0 0c             	add    eax,0xc
c0006bdf:	e8 e5 af ff ff       	call   c0001bc9 <st_dword>
c0006be4:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be8:	e8 c4 ce ff ff       	call   c0003ab1 <store_xdir>
c0006bed:	85 c0                	test   eax,eax
c0006bef:	75 1f                	jne    c0006c10 <f_utime+0xc4>
c0006bf1:	eb 14                	jmp    c0006c07 <f_utime+0xbb>
c0006bf3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bf7:	83 c0 16             	add    eax,0x16
c0006bfa:	e8 ca af ff ff       	call   c0001bc9 <st_dword>
c0006bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c03:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0b:	e8 4c d8 ff ff       	call   c000445c <sync_fs>
c0006c10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c14:	83 ec 0c             	sub    esp,0xc
c0006c17:	53                   	push   ebx
c0006c18:	e8 b7 19 00 00       	call   c00085d4 <ff_memfree>
c0006c1d:	83 c4 10             	add    esp,0x10
c0006c20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c24:	83 c4 64             	add    esp,0x64
c0006c27:	5b                   	pop    ebx
c0006c28:	5e                   	pop    esi
c0006c29:	c3                   	ret    

c0006c2a <f_getlabel>:
c0006c2a:	55                   	push   ebp
c0006c2b:	31 c9                	xor    ecx,ecx
c0006c2d:	57                   	push   edi
c0006c2e:	56                   	push   esi
c0006c2f:	53                   	push   ebx
c0006c30:	83 ec 6c             	sub    esp,0x6c
c0006c33:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c37:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c3e:	e8 a0 b9 ff ff       	call   c00025e3 <mount_volume>
c0006c43:	89 c6                	mov    esi,eax
c0006c45:	85 c0                	test   eax,eax
c0006c47:	0f 85 c1 01 00 00    	jne    c0006e0e <f_getlabel+0x1e4>
c0006c4d:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c55:	0f 84 5f 01 00 00    	je     c0006dba <f_getlabel+0x190>
c0006c5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c5f:	31 d2                	xor    edx,edx
c0006c61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c65:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c6d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c71:	e8 39 c4 ff ff       	call   c00030af <dir_sdi>
c0006c76:	85 c0                	test   eax,eax
c0006c78:	0f 85 2d 01 00 00    	jne    c0006dab <f_getlabel+0x181>
c0006c7e:	ba 01 00 00 00       	mov    edx,0x1
c0006c83:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c87:	e8 33 cc ff ff       	call   c00038bf <dir_read>
c0006c8c:	85 c0                	test   eax,eax
c0006c8e:	0f 85 17 01 00 00    	jne    c0006dab <f_getlabel+0x181>
c0006c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c98:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c9b:	74 09                	je     c0006ca6 <f_getlabel+0x7c>
c0006c9d:	31 db                	xor    ebx,ebx
c0006c9f:	31 c9                	xor    ecx,ecx
c0006ca1:	e9 c8 00 00 00       	jmp    c0006d6e <f_getlabel+0x144>
c0006ca6:	31 ed                	xor    ebp,ebp
c0006ca8:	31 db                	xor    ebx,ebx
c0006caa:	31 ff                	xor    edi,edi
c0006cac:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006cb4:	39 fa                	cmp    edx,edi
c0006cb6:	76 4b                	jbe    c0006d03 <f_getlabel+0xd9>
c0006cb8:	47                   	inc    edi
c0006cb9:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cbc:	01 d0                	add    eax,edx
c0006cbe:	e8 90 ae ff ff       	call   c0001b53 <ld_word>
c0006cc3:	66 85 ed             	test   bp,bp
c0006cc6:	75 0d                	jne    c0006cd5 <f_getlabel+0xab>
c0006cc8:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006cce:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006cd3:	76 28                	jbe    c0006cfd <f_getlabel+0xd3>
c0006cd5:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006cdc:	89 e9                	mov    ecx,ebp
c0006cde:	01 da                	add    edx,ebx
c0006ce0:	c1 e1 10             	shl    ecx,0x10
c0006ce3:	0f b7 c0             	movzx  eax,ax
c0006ce6:	09 c8                	or     eax,ecx
c0006ce8:	b9 04 00 00 00       	mov    ecx,0x4
c0006ced:	e8 01 b0 ff ff       	call   c0001cf3 <put_utf>
c0006cf2:	84 c0                	test   al,al
c0006cf4:	74 0b                	je     c0006d01 <f_getlabel+0xd7>
c0006cf6:	0f b6 c0             	movzx  eax,al
c0006cf9:	01 c3                	add    ebx,eax
c0006cfb:	31 c0                	xor    eax,eax
c0006cfd:	89 c5                	mov    ebp,eax
c0006cff:	eb ab                	jmp    c0006cac <f_getlabel+0x82>
c0006d01:	31 db                	xor    ebx,ebx
c0006d03:	66 85 ed             	test   bp,bp
c0006d06:	74 02                	je     c0006d0a <f_getlabel+0xe0>
c0006d08:	31 db                	xor    ebx,ebx
c0006d0a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d11:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d15:	e9 a0 00 00 00       	jmp    c0006dba <f_getlabel+0x190>
c0006d1a:	83 ff 0b             	cmp    edi,0xb
c0006d1d:	74 11                	je     c0006d30 <f_getlabel+0x106>
c0006d1f:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d28:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d2b:	c1 e0 08             	shl    eax,0x8
c0006d2e:	09 c2                	or     edx,eax
c0006d30:	0f b7 d2             	movzx  edx,dx
c0006d33:	50                   	push   eax
c0006d34:	50                   	push   eax
c0006d35:	68 b5 01 00 00       	push   0x1b5
c0006d3a:	52                   	push   edx
c0006d3b:	e8 44 19 00 00       	call   c0008684 <ff_oem2uni>
c0006d40:	83 c4 10             	add    esp,0x10
c0006d43:	66 85 c0             	test   ax,ax
c0006d46:	74 46                	je     c0006d8e <f_getlabel+0x164>
c0006d48:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d4f:	0f b7 c0             	movzx  eax,ax
c0006d52:	01 da                	add    edx,ebx
c0006d54:	b9 04 00 00 00       	mov    ecx,0x4
c0006d59:	e8 95 af ff ff       	call   c0001cf3 <put_utf>
c0006d5e:	84 c0                	test   al,al
c0006d60:	74 2c                	je     c0006d8e <f_getlabel+0x164>
c0006d62:	0f b6 c0             	movzx  eax,al
c0006d65:	01 c3                	add    ebx,eax
c0006d67:	83 ff 0b             	cmp    edi,0xb
c0006d6a:	74 24                	je     c0006d90 <f_getlabel+0x166>
c0006d6c:	89 f9                	mov    ecx,edi
c0006d6e:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d72:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d75:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d7a:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d83:	e8 9f ae ff ff       	call   c0001c27 <dbc_1st>
c0006d88:	85 c0                	test   eax,eax
c0006d8a:	74 a4                	je     c0006d30 <f_getlabel+0x106>
c0006d8c:	eb 8c                	jmp    c0006d1a <f_getlabel+0xf0>
c0006d8e:	31 db                	xor    ebx,ebx
c0006d90:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006d97:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006d9a:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006da1:	74 17                	je     c0006dba <f_getlabel+0x190>
c0006da3:	4b                   	dec    ebx
c0006da4:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006da7:	74 ee                	je     c0006d97 <f_getlabel+0x16d>
c0006da9:	eb 0f                	jmp    c0006dba <f_getlabel+0x190>
c0006dab:	83 f8 04             	cmp    eax,0x4
c0006dae:	75 5c                	jne    c0006e0c <f_getlabel+0x1e2>
c0006db0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006db7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dba:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dc2:	74 4a                	je     c0006e0e <f_getlabel+0x1e4>
c0006dc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dc8:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006dcb:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006dce:	e8 5e b5 ff ff       	call   c0002331 <move_window>
c0006dd3:	89 c6                	mov    esi,eax
c0006dd5:	85 c0                	test   eax,eax
c0006dd7:	75 35                	jne    c0006e0e <f_getlabel+0x1e4>
c0006dd9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006ddd:	b8 43 00 00 00       	mov    eax,0x43
c0006de2:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006de4:	80 f9 03             	cmp    cl,0x3
c0006de7:	74 0f                	je     c0006df8 <f_getlabel+0x1ce>
c0006de9:	31 c0                	xor    eax,eax
c0006deb:	80 f9 04             	cmp    cl,0x4
c0006dee:	0f 94 c0             	sete   al
c0006df1:	48                   	dec    eax
c0006df2:	83 e0 c3             	and    eax,0xffffffc3
c0006df5:	83 c0 64             	add    eax,0x64
c0006df8:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006dfc:	e8 5f ad ff ff       	call   c0001b60 <ld_dword>
c0006e01:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e08:	89 07                	mov    DWORD PTR [edi],eax
c0006e0a:	eb 02                	jmp    c0006e0e <f_getlabel+0x1e4>
c0006e0c:	89 c6                	mov    esi,eax
c0006e0e:	83 c4 6c             	add    esp,0x6c
c0006e11:	89 f0                	mov    eax,esi
c0006e13:	5b                   	pop    ebx
c0006e14:	5e                   	pop    esi
c0006e15:	5f                   	pop    edi
c0006e16:	5d                   	pop    ebp
c0006e17:	c3                   	ret    

c0006e18 <f_setlabel>:
c0006e18:	56                   	push   esi
c0006e19:	b9 02 00 00 00       	mov    ecx,0x2
c0006e1e:	53                   	push   ebx
c0006e1f:	83 ec 74             	sub    esp,0x74
c0006e22:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e26:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e2d:	e8 b1 b7 ff ff       	call   c00025e3 <mount_volume>
c0006e32:	89 c6                	mov    esi,eax
c0006e34:	85 c0                	test   eax,eax
c0006e36:	0f 85 41 02 00 00    	jne    c000707d <f_setlabel+0x265>
c0006e3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e40:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e43:	0f 85 8e 00 00 00    	jne    c0006ed7 <f_setlabel+0xbf>
c0006e49:	b9 16 00 00 00       	mov    ecx,0x16
c0006e4e:	31 d2                	xor    edx,edx
c0006e50:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e54:	31 db                	xor    ebx,ebx
c0006e56:	e8 8c ad ff ff       	call   c0001be7 <mem_set>
c0006e5b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e62:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e65:	0f 86 0a 01 00 00    	jbe    c0006f75 <f_setlabel+0x15d>
c0006e6b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e72:	e8 b6 ad ff ff       	call   c0001c2d <tchar2uni>
c0006e77:	89 c6                	mov    esi,eax
c0006e79:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e7e:	76 2a                	jbe    c0006eaa <f_setlabel+0x92>
c0006e80:	83 f8 ff             	cmp    eax,0xffffffff
c0006e83:	74 05                	je     c0006e8a <f_setlabel+0x72>
c0006e85:	83 fb 09             	cmp    ebx,0x9
c0006e88:	76 0a                	jbe    c0006e94 <f_setlabel+0x7c>
c0006e8a:	be 06 00 00 00       	mov    esi,0x6
c0006e8f:	e9 e9 01 00 00       	jmp    c000707d <f_setlabel+0x265>
c0006e94:	89 c2                	mov    edx,eax
c0006e96:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006e9a:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006e9d:	c1 ea 10             	shr    edx,0x10
c0006ea0:	01 c8                	add    eax,ecx
c0006ea2:	43                   	inc    ebx
c0006ea3:	e8 1d ad ff ff       	call   c0001bc5 <st_word>
c0006ea8:	eb 04                	jmp    c0006eae <f_setlabel+0x96>
c0006eaa:	85 c0                	test   eax,eax
c0006eac:	74 dc                	je     c0006e8a <f_setlabel+0x72>
c0006eae:	89 f2                	mov    edx,esi
c0006eb0:	b8 b7 25 02 c0       	mov    eax,0xc00225b7
c0006eb5:	e8 5b ad ff ff       	call   c0001c15 <chk_chr>
c0006eba:	85 c0                	test   eax,eax
c0006ebc:	75 cc                	jne    c0006e8a <f_setlabel+0x72>
c0006ebe:	83 fb 0a             	cmp    ebx,0xa
c0006ec1:	77 c7                	ja     c0006e8a <f_setlabel+0x72>
c0006ec3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ec6:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006eca:	0f b7 d6             	movzx  edx,si
c0006ecd:	01 c8                	add    eax,ecx
c0006ecf:	43                   	inc    ebx
c0006ed0:	e8 f0 ac ff ff       	call   c0001bc5 <st_word>
c0006ed5:	eb 84                	jmp    c0006e5b <f_setlabel+0x43>
c0006ed7:	b9 0b 00 00 00       	mov    ecx,0xb
c0006edc:	ba 20 00 00 00       	mov    edx,0x20
c0006ee1:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ee5:	31 db                	xor    ebx,ebx
c0006ee7:	e8 fb ac ff ff       	call   c0001be7 <mem_set>
c0006eec:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006ef3:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006ef6:	76 60                	jbe    c0006f58 <f_setlabel+0x140>
c0006ef8:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006eff:	e8 29 ad ff ff       	call   c0001c2d <tchar2uni>
c0006f04:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f09:	0f 87 7b ff ff ff    	ja     c0006e8a <f_setlabel+0x72>
c0006f0f:	83 ec 0c             	sub    esp,0xc
c0006f12:	50                   	push   eax
c0006f13:	e8 e0 17 00 00       	call   c00086f8 <ff_wtoupper>
c0006f18:	5a                   	pop    edx
c0006f19:	59                   	pop    ecx
c0006f1a:	68 b5 01 00 00       	push   0x1b5
c0006f1f:	50                   	push   eax
c0006f20:	e8 c7 16 00 00       	call   c00085ec <ff_uni2oem>
c0006f25:	83 c4 10             	add    esp,0x10
c0006f28:	89 c6                	mov    esi,eax
c0006f2a:	66 85 c0             	test   ax,ax
c0006f2d:	0f 84 57 ff ff ff    	je     c0006e8a <f_setlabel+0x72>
c0006f33:	0f b7 d0             	movzx  edx,ax
c0006f36:	b8 b0 25 02 c0       	mov    eax,0xc00225b0
c0006f3b:	e8 d5 ac ff ff       	call   c0001c15 <chk_chr>
c0006f40:	85 c0                	test   eax,eax
c0006f42:	0f 85 42 ff ff ff    	jne    c0006e8a <f_setlabel+0x72>
c0006f48:	66 81 fe ff 00       	cmp    si,0xff
c0006f4d:	0f 87 14 01 00 00    	ja     c0007067 <f_setlabel+0x24f>
c0006f53:	e9 fa 00 00 00       	jmp    c0007052 <f_setlabel+0x23a>
c0006f58:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f5d:	0f 84 27 ff ff ff    	je     c0006e8a <f_setlabel+0x72>
c0006f63:	85 db                	test   ebx,ebx
c0006f65:	74 0e                	je     c0006f75 <f_setlabel+0x15d>
c0006f67:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f6a:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f6f:	75 04                	jne    c0006f75 <f_setlabel+0x15d>
c0006f71:	89 c3                	mov    ebx,eax
c0006f73:	eb ee                	jmp    c0006f63 <f_setlabel+0x14b>
c0006f75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f79:	31 d2                	xor    edx,edx
c0006f7b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f7f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f87:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f8b:	e8 1f c1 ff ff       	call   c00030af <dir_sdi>
c0006f90:	89 c6                	mov    esi,eax
c0006f92:	85 c0                	test   eax,eax
c0006f94:	0f 85 e3 00 00 00    	jne    c000707d <f_setlabel+0x265>
c0006f9a:	ba 01 00 00 00       	mov    edx,0x1
c0006f9f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fa3:	e8 17 c9 ff ff       	call   c00038bf <dir_read>
c0006fa8:	85 c0                	test   eax,eax
c0006faa:	75 21                	jne    c0006fcd <f_setlabel+0x1b5>
c0006fac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fb0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fb4:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fb7:	74 5d                	je     c0007016 <f_setlabel+0x1fe>
c0006fb9:	85 db                	test   ebx,ebx
c0006fbb:	74 0b                	je     c0006fc8 <f_setlabel+0x1b0>
c0006fbd:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fc2:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fc6:	eb 70                	jmp    c0007038 <f_setlabel+0x220>
c0006fc8:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fcb:	eb 70                	jmp    c000703d <f_setlabel+0x225>
c0006fcd:	83 f8 04             	cmp    eax,0x4
c0006fd0:	75 7c                	jne    c000704e <f_setlabel+0x236>
c0006fd2:	85 db                	test   ebx,ebx
c0006fd4:	0f 84 a3 00 00 00    	je     c000707d <f_setlabel+0x265>
c0006fda:	ba 01 00 00 00       	mov    edx,0x1
c0006fdf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fe3:	e8 51 ca ff ff       	call   c0003a39 <dir_alloc>
c0006fe8:	89 c6                	mov    esi,eax
c0006fea:	85 c0                	test   eax,eax
c0006fec:	0f 85 8b 00 00 00    	jne    c000707d <f_setlabel+0x265>
c0006ff2:	31 d2                	xor    edx,edx
c0006ff4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ff8:	b9 20 00 00 00       	mov    ecx,0x20
c0006ffd:	e8 e5 ab ff ff       	call   c0001be7 <mem_set>
c0007002:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007006:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007009:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000700d:	75 18                	jne    c0007027 <f_setlabel+0x20f>
c000700f:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007012:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007016:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007019:	b9 16 00 00 00       	mov    ecx,0x16
c000701e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007022:	83 c0 02             	add    eax,0x2
c0007025:	eb 9b                	jmp    c0006fc2 <f_setlabel+0x1aa>
c0007027:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000702b:	b9 0b 00 00 00       	mov    ecx,0xb
c0007030:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007034:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007038:	e8 95 ab ff ff       	call   c0001bd2 <mem_cpy>
c000703d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007041:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007049:	e8 0e d4 ff ff       	call   c000445c <sync_fs>
c000704e:	89 c6                	mov    esi,eax
c0007050:	eb 2b                	jmp    c000707d <f_setlabel+0x265>
c0007052:	83 fb 0a             	cmp    ebx,0xa
c0007055:	0f 87 2f fe ff ff    	ja     c0006e8a <f_setlabel+0x72>
c000705b:	89 f0                	mov    eax,esi
c000705d:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007061:	43                   	inc    ebx
c0007062:	e9 85 fe ff ff       	jmp    c0006eec <f_setlabel+0xd4>
c0007067:	83 fb 09             	cmp    ebx,0x9
c000706a:	0f 87 1a fe ff ff    	ja     c0006e8a <f_setlabel+0x72>
c0007070:	89 f0                	mov    eax,esi
c0007072:	66 c1 e8 08          	shr    ax,0x8
c0007076:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000707a:	43                   	inc    ebx
c000707b:	eb de                	jmp    c000705b <f_setlabel+0x243>
c000707d:	89 f0                	mov    eax,esi
c000707f:	83 c4 74             	add    esp,0x74
c0007082:	5b                   	pop    ebx
c0007083:	5e                   	pop    esi
c0007084:	c3                   	ret    

c0007085 <f_expand>:
c0007085:	55                   	push   ebp
c0007086:	57                   	push   edi
c0007087:	56                   	push   esi
c0007088:	53                   	push   ebx
c0007089:	83 ec 3c             	sub    esp,0x3c
c000708c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007090:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007094:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0007098:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000709c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070a4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070ac:	89 d8                	mov    eax,ebx
c00070ae:	e8 a3 b1 ff ff       	call   c0002256 <validate>
c00070b3:	89 c5                	mov    ebp,eax
c00070b5:	85 c0                	test   eax,eax
c00070b7:	0f 85 f4 01 00 00    	jne    c00072b1 <f_expand+0x22c>
c00070bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070c1:	85 ed                	test   ebp,ebp
c00070c3:	0f 85 e8 01 00 00    	jne    c00072b1 <f_expand+0x22c>
c00070c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070cd:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070d1:	75 0a                	jne    c00070dd <f_expand+0x58>
c00070d3:	bd 07 00 00 00       	mov    ebp,0x7
c00070d8:	e9 d4 01 00 00       	jmp    c00072b1 <f_expand+0x22c>
c00070dd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070e0:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070e3:	75 ee                	jne    c00070d3 <f_expand+0x4e>
c00070e5:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00070e9:	74 e8                	je     c00070d3 <f_expand+0x4e>
c00070eb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00070ef:	8a 0e                	mov    cl,BYTE PTR [esi]
c00070f1:	80 f9 04             	cmp    cl,0x4
c00070f4:	74 07                	je     c00070fd <f_expand+0x78>
c00070f6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00070fb:	77 d6                	ja     c00070d3 <f_expand+0x4e>
c00070fd:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007101:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0007105:	c1 e0 09             	shl    eax,0x9
c0007108:	8d 50 ff             	lea    edx,[eax-0x1]
c000710b:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c000710f:	0f 95 c2             	setne  dl
c0007112:	0f b6 d2             	movzx  edx,dl
c0007115:	89 d7                	mov    edi,edx
c0007117:	31 d2                	xor    edx,edx
c0007119:	52                   	push   edx
c000711a:	50                   	push   eax
c000711b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000711f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007123:	e8 28 a6 01 00       	call   c0021750 <__udivdi3>
c0007128:	83 c4 10             	add    esp,0x10
c000712b:	01 f8                	add    eax,edi
c000712d:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007131:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0007134:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007138:	83 ff 01             	cmp    edi,0x1
c000713b:	76 05                	jbe    c0007142 <f_expand+0xbd>
c000713d:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007140:	77 05                	ja     c0007147 <f_expand+0xc2>
c0007142:	bf 02 00 00 00       	mov    edi,0x2
c0007147:	80 f9 04             	cmp    cl,0x4
c000714a:	75 19                	jne    c0007165 <f_expand+0xe0>
c000714c:	89 f0                	mov    eax,esi
c000714e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007152:	89 fa                	mov    edx,edi
c0007154:	e8 f3 b9 ff ff       	call   c0002b4c <find_bitmap>
c0007159:	89 c6                	mov    esi,eax
c000715b:	85 c0                	test   eax,eax
c000715d:	0f 84 70 ff ff ff    	je     c00070d3 <f_expand+0x4e>
c0007163:	eb 7f                	jmp    c00071e4 <f_expand+0x15f>
c0007165:	89 fe                	mov    esi,edi
c0007167:	89 f9                	mov    ecx,edi
c0007169:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007171:	89 ca                	mov    edx,ecx
c0007173:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0007177:	89 d8                	mov    eax,ebx
c0007179:	e8 3b bd ff ff       	call   c0002eb9 <get_fat>
c000717e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007182:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007186:	41                   	inc    ecx
c0007187:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000718b:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c000718e:	77 05                	ja     c0007195 <f_expand+0x110>
c0007190:	b9 02 00 00 00       	mov    ecx,0x2
c0007195:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c000719a:	74 3e                	je     c00071da <f_expand+0x155>
c000719c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071a1:	75 0a                	jne    c00071ad <f_expand+0x128>
c00071a3:	bd 01 00 00 00       	mov    ebp,0x1
c00071a8:	e9 04 01 00 00       	jmp    c00072b1 <f_expand+0x22c>
c00071ad:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071b2:	75 13                	jne    c00071c7 <f_expand+0x142>
c00071b4:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071bc:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071c0:	75 0f                	jne    c00071d1 <f_expand+0x14c>
c00071c2:	e9 ce 00 00 00       	jmp    c0007295 <f_expand+0x210>
c00071c7:	89 ce                	mov    esi,ecx
c00071c9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d1:	39 f9                	cmp    ecx,edi
c00071d3:	75 9c                	jne    c0007171 <f_expand+0xec>
c00071d5:	e9 f9 fe ff ff       	jmp    c00070d3 <f_expand+0x4e>
c00071da:	bd 02 00 00 00       	mov    ebp,0x2
c00071df:	e9 cd 00 00 00       	jmp    c00072b1 <f_expand+0x22c>
c00071e4:	83 f8 ff             	cmp    eax,0xffffffff
c00071e7:	74 ba                	je     c00071a3 <f_expand+0x11e>
c00071e9:	8d 7e ff             	lea    edi,[esi-0x1]
c00071ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071f0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00071f4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00071f9:	74 51                	je     c000724c <f_expand+0x1c7>
c00071fb:	83 ec 0c             	sub    esp,0xc
c00071fe:	89 f2                	mov    edx,esi
c0007200:	6a 01                	push   0x1
c0007202:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007206:	e8 f4 b9 ff ff       	call   c0002bff <change_bitmap>
c000720b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000720f:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c0007213:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0007217:	83 c4 10             	add    esp,0x10
c000721a:	85 c0                	test   eax,eax
c000721c:	74 2e                	je     c000724c <f_expand+0x1c7>
c000721e:	eb 71                	jmp    c0007291 <f_expand+0x20c>
c0007220:	83 c9 ff             	or     ecx,0xffffffff
c0007223:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007228:	74 03                	je     c000722d <f_expand+0x1a8>
c000722a:	8d 4f 01             	lea    ecx,[edi+0x1]
c000722d:	89 fa                	mov    edx,edi
c000722f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007233:	e8 7c ba ff ff       	call   c0002cb4 <put_fat>
c0007238:	85 c0                	test   eax,eax
c000723a:	75 55                	jne    c0007291 <f_expand+0x20c>
c000723c:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007240:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0007244:	47                   	inc    edi
c0007245:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000724a:	75 d4                	jne    c0007220 <f_expand+0x19b>
c000724c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007250:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007254:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007259:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000725c:	74 53                	je     c00072b1 <f_expand+0x22c>
c000725e:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007261:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0007265:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007269:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000726d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007271:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0007274:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0007277:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000727a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000727d:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007280:	39 ca                	cmp    edx,ecx
c0007282:	77 2d                	ja     c00072b1 <f_expand+0x22c>
c0007284:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c0007288:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000728c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000728f:	eb 20                	jmp    c00072b1 <f_expand+0x22c>
c0007291:	89 c5                	mov    ebp,eax
c0007293:	eb 1c                	jmp    c00072b1 <f_expand+0x22c>
c0007295:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000729a:	74 0c                	je     c00072a8 <f_expand+0x223>
c000729c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072a0:	89 f7                	mov    edi,esi
c00072a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072a6:	eb 9d                	jmp    c0007245 <f_expand+0x1c0>
c00072a8:	8d 46 ff             	lea    eax,[esi-0x1]
c00072ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072af:	eb 9b                	jmp    c000724c <f_expand+0x1c7>
c00072b1:	83 c4 3c             	add    esp,0x3c
c00072b4:	89 e8                	mov    eax,ebp
c00072b6:	5b                   	pop    ebx
c00072b7:	5e                   	pop    esi
c00072b8:	5f                   	pop    edi
c00072b9:	5d                   	pop    ebp
c00072ba:	c3                   	ret    

c00072bb <f_forward>:
c00072bb:	55                   	push   ebp
c00072bc:	57                   	push   edi
c00072bd:	56                   	push   esi
c00072be:	53                   	push   ebx
c00072bf:	83 ec 2c             	sub    esp,0x2c
c00072c2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072c6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072d0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072d4:	89 d8                	mov    eax,ebx
c00072d6:	e8 7b af ff ff       	call   c0002256 <validate>
c00072db:	89 c5                	mov    ebp,eax
c00072dd:	85 c0                	test   eax,eax
c00072df:	0f 85 aa 01 00 00    	jne    c000748f <f_forward+0x1d4>
c00072e5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00072e9:	85 ed                	test   ebp,ebp
c00072eb:	0f 85 9e 01 00 00    	jne    c000748f <f_forward+0x1d4>
c00072f1:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00072f5:	0f 84 8f 01 00 00    	je     c000748a <f_forward+0x1cf>
c00072fb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00072fe:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007301:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0007304:	bf 00 00 00 00       	mov    edi,0x0
c0007309:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000730c:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007310:	89 d1                	mov    ecx,edx
c0007312:	19 f9                	sbb    ecx,edi
c0007314:	0f 83 cf 00 00 00    	jae    c00073e9 <f_forward+0x12e>
c000731a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000731e:	e9 c6 00 00 00       	jmp    c00073e9 <f_forward+0x12e>
c0007323:	50                   	push   eax
c0007324:	50                   	push   eax
c0007325:	6a 00                	push   0x0
c0007327:	6a 00                	push   0x0
c0007329:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000732d:	83 c4 10             	add    esp,0x10
c0007330:	85 c0                	test   eax,eax
c0007332:	0f 84 57 01 00 00    	je     c000748f <f_forward+0x1d4>
c0007338:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000733b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000733f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007342:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007346:	89 d7                	mov    edi,edx
c0007348:	8d 4e ff             	lea    ecx,[esi-0x1]
c000734b:	89 c6                	mov    esi,eax
c000734d:	0f ac fe 09          	shrd   esi,edi,0x9
c0007351:	21 ce                	and    esi,ecx
c0007353:	89 c1                	mov    ecx,eax
c0007355:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000735b:	0f 84 98 00 00 00    	je     c00073f9 <f_forward+0x13e>
c0007361:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007365:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007368:	89 c8                	mov    eax,ecx
c000736a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000736e:	e8 79 aa ff ff       	call   c0001dec <clst2sect>
c0007373:	89 d7                	mov    edi,edx
c0007375:	09 c7                	or     edi,eax
c0007377:	0f 84 9e 00 00 00    	je     c000741b <f_forward+0x160>
c000737d:	31 ff                	xor    edi,edi
c000737f:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007382:	01 c6                	add    esi,eax
c0007384:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007388:	11 d7                	adc    edi,edx
c000738a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000738d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007390:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007394:	39 fa                	cmp    edx,edi
c0007396:	0f 85 a2 00 00 00    	jne    c000743e <f_forward+0x183>
c000739c:	39 f0                	cmp    eax,esi
c000739e:	0f 85 9a 00 00 00    	jne    c000743e <f_forward+0x183>
c00073a4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073a7:	ba 00 02 00 00       	mov    edx,0x200
c00073ac:	25 ff 01 00 00       	and    eax,0x1ff
c00073b1:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073b5:	29 c2                	sub    edx,eax
c00073b7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073ba:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073bd:	39 d1                	cmp    ecx,edx
c00073bf:	76 02                	jbe    c00073c3 <f_forward+0x108>
c00073c1:	89 d1                	mov    ecx,edx
c00073c3:	8d 73 50             	lea    esi,[ebx+0x50]
c00073c6:	52                   	push   edx
c00073c7:	01 c6                	add    esi,eax
c00073c9:	52                   	push   edx
c00073ca:	51                   	push   ecx
c00073cb:	56                   	push   esi
c00073cc:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073d0:	83 c4 10             	add    esp,0x10
c00073d3:	85 c0                	test   eax,eax
c00073d5:	74 44                	je     c000741b <f_forward+0x160>
c00073d7:	31 ff                	xor    edi,edi
c00073d9:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073dc:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073df:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073e3:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073e7:	01 07                	add    DWORD PTR [edi],eax
c00073e9:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00073ee:	0f 85 2f ff ff ff    	jne    c0007323 <f_forward+0x68>
c00073f4:	e9 96 00 00 00       	jmp    c000748f <f_forward+0x1d4>
c00073f9:	85 f6                	test   esi,esi
c00073fb:	0f 85 60 ff ff ff    	jne    c0007361 <f_forward+0xa6>
c0007401:	89 d7                	mov    edi,edx
c0007403:	09 c7                	or     edi,eax
c0007405:	75 05                	jne    c000740c <f_forward+0x151>
c0007407:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000740a:	eb 0a                	jmp    c0007416 <f_forward+0x15b>
c000740c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000740f:	89 d8                	mov    eax,ebx
c0007411:	e8 a3 ba ff ff       	call   c0002eb9 <get_fat>
c0007416:	83 f8 01             	cmp    eax,0x1
c0007419:	77 0b                	ja     c0007426 <f_forward+0x16b>
c000741b:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000741f:	bd 02 00 00 00       	mov    ebp,0x2
c0007424:	eb 69                	jmp    c000748f <f_forward+0x1d4>
c0007426:	83 f8 ff             	cmp    eax,0xffffffff
c0007429:	75 0b                	jne    c0007436 <f_forward+0x17b>
c000742b:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000742f:	bd 01 00 00 00       	mov    ebp,0x1
c0007434:	eb 59                	jmp    c000748f <f_forward+0x1d4>
c0007436:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007439:	e9 23 ff ff ff       	jmp    c0007361 <f_forward+0xa6>
c000743e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007442:	79 20                	jns    c0007464 <f_forward+0x1a9>
c0007444:	83 ec 0c             	sub    esp,0xc
c0007447:	6a 01                	push   0x1
c0007449:	52                   	push   edx
c000744a:	50                   	push   eax
c000744b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000744f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007453:	50                   	push   eax
c0007454:	e8 c5 a6 ff ff       	call   c0001b1e <disk_write>
c0007459:	83 c4 20             	add    esp,0x20
c000745c:	85 c0                	test   eax,eax
c000745e:	75 cb                	jne    c000742b <f_forward+0x170>
c0007460:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007464:	83 ec 0c             	sub    esp,0xc
c0007467:	6a 01                	push   0x1
c0007469:	57                   	push   edi
c000746a:	56                   	push   esi
c000746b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000746f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007473:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007477:	50                   	push   eax
c0007478:	e8 8b a6 ff ff       	call   c0001b08 <disk_read>
c000747d:	83 c4 20             	add    esp,0x20
c0007480:	85 c0                	test   eax,eax
c0007482:	0f 84 1c ff ff ff    	je     c00073a4 <f_forward+0xe9>
c0007488:	eb a1                	jmp    c000742b <f_forward+0x170>
c000748a:	bd 07 00 00 00       	mov    ebp,0x7
c000748f:	83 c4 2c             	add    esp,0x2c
c0007492:	89 e8                	mov    eax,ebp
c0007494:	5b                   	pop    ebx
c0007495:	5e                   	pop    esi
c0007496:	5f                   	pop    edi
c0007497:	5d                   	pop    ebp
c0007498:	c3                   	ret    

c0007499 <f_mkfs>:
c0007499:	55                   	push   ebp
c000749a:	57                   	push   edi
c000749b:	56                   	push   esi
c000749c:	53                   	push   ebx
c000749d:	bb 0b 00 00 00       	mov    ebx,0xb
c00074a2:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074a8:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074af:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074b6:	e8 7a ac ff ff       	call   c0002135 <get_ldnumber>
c00074bb:	85 c0                	test   eax,eax
c00074bd:	0f 88 ec 10 00 00    	js     c00085af <f_mkfs+0x1116>
c00074c3:	8b 14 85 20 66 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd99e0]
c00074ca:	85 d2                	test   edx,edx
c00074cc:	74 03                	je     c00074d1 <f_mkfs+0x38>
c00074ce:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074d1:	85 f6                	test   esi,esi
c00074d3:	75 05                	jne    c00074da <f_mkfs+0x41>
c00074d5:	be a0 25 02 c0       	mov    esi,0xc00225a0
c00074da:	83 ec 0c             	sub    esp,0xc
c00074dd:	0f b6 c0             	movzx  eax,al
c00074e0:	bb 03 00 00 00       	mov    ebx,0x3
c00074e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00074e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074ed:	e8 13 a6 ff ff       	call   c0001b05 <disk_initialize>
c00074f2:	83 c4 10             	add    esp,0x10
c00074f5:	a8 01                	test   al,0x1
c00074f7:	0f 85 b2 10 00 00    	jne    c00085af <f_mkfs+0x1116>
c00074fd:	bb 0a 00 00 00       	mov    ebx,0xa
c0007502:	a8 04                	test   al,0x4
c0007504:	0f 85 a5 10 00 00    	jne    c00085af <f_mkfs+0x1116>
c000750a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000750d:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007511:	85 c0                	test   eax,eax
c0007513:	75 20                	jne    c0007535 <f_mkfs+0x9c>
c0007515:	51                   	push   ecx
c0007516:	8d 44 24 78          	lea    eax,[esp+0x78]
c000751a:	50                   	push   eax
c000751b:	6a 03                	push   0x3
c000751d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007521:	e8 0e a6 ff ff       	call   c0001b34 <disk_ioctl>
c0007526:	83 c4 10             	add    esp,0x10
c0007529:	85 c0                	test   eax,eax
c000752b:	74 08                	je     c0007535 <f_mkfs+0x9c>
c000752d:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007535:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007539:	8d 42 ff             	lea    eax,[edx-0x1]
c000753c:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007541:	77 04                	ja     c0007547 <f_mkfs+0xae>
c0007543:	85 c2                	test   edx,eax
c0007545:	74 08                	je     c000754f <f_mkfs+0xb6>
c0007547:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000754f:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007552:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007556:	48                   	dec    eax
c0007557:	3c 01                	cmp    al,0x1
c0007559:	76 05                	jbe    c0007560 <f_mkfs+0xc7>
c000755b:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007560:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007567:	48                   	dec    eax
c0007568:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000756d:	77 07                	ja     c0007576 <f_mkfs+0xdd>
c000756f:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007574:	74 08                	je     c000757e <f_mkfs+0xe5>
c0007576:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000757e:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007581:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007587:	77 07                	ja     c0007590 <f_mkfs+0xf7>
c0007589:	8d 43 ff             	lea    eax,[ebx-0x1]
c000758c:	85 d8                	test   eax,ebx
c000758e:	74 02                	je     c0007592 <f_mkfs+0xf9>
c0007590:	31 db                	xor    ebx,ebx
c0007592:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000759d:	77 0a                	ja     c00075a9 <f_mkfs+0x110>
c000759f:	bb 11 00 00 00       	mov    ebx,0x11
c00075a4:	e9 06 10 00 00       	jmp    c00085af <f_mkfs+0x1116>
c00075a9:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075b0:	8b 36                	mov    esi,DWORD PTR [esi]
c00075b2:	85 ed                	test   ebp,ebp
c00075b4:	75 1e                	jne    c00075d4 <f_mkfs+0x13b>
c00075b6:	83 ec 0c             	sub    esp,0xc
c00075b9:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075c0:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075c5:	50                   	push   eax
c00075c6:	e8 f1 0f 00 00       	call   c00085bc <ff_memalloc>
c00075cb:	83 c4 10             	add    esp,0x10
c00075ce:	89 c5                	mov    ebp,eax
c00075d0:	85 c0                	test   eax,eax
c00075d2:	74 cb                	je     c000759f <f_mkfs+0x106>
c00075d4:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075dc:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075e4:	52                   	push   edx
c00075e5:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00075e9:	50                   	push   eax
c00075ea:	6a 01                	push   0x1
c00075ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f0:	e8 3f a5 ff ff       	call   c0001b34 <disk_ioctl>
c00075f5:	83 c4 10             	add    esp,0x10
c00075f8:	85 c0                	test   eax,eax
c00075fa:	0f 85 4a 0f 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007600:	89 f1                	mov    ecx,esi
c0007602:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000760a:	83 e1 0f             	and    ecx,0xf
c000760d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007615:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007619:	83 e6 08             	and    esi,0x8
c000761c:	75 56                	jne    c0007674 <f_mkfs+0x1db>
c000761e:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007622:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007626:	83 ff 00             	cmp    edi,0x0
c0007629:	76 20                	jbe    c000764b <f_mkfs+0x1b2>
c000762b:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007630:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007638:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c000763e:	83 d7 ff             	adc    edi,0xffffffff
c0007641:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007645:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007649:	eb 21                	jmp    c000766c <f_mkfs+0x1d3>
c000764b:	ba 3f 00 00 00       	mov    edx,0x3f
c0007650:	39 f2                	cmp    edx,esi
c0007652:	19 f8                	sbb    eax,edi
c0007654:	73 1e                	jae    c0007674 <f_mkfs+0x1db>
c0007656:	83 c6 c1             	add    esi,0xffffffc1
c0007659:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007661:	83 d7 ff             	adc    edi,0xffffffff
c0007664:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007668:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000766c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007674:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007678:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000767c:	89 04 24             	mov    DWORD PTR [esp],eax
c000767f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007683:	31 c0                	xor    eax,eax
c0007685:	ba 7f 00 00 00       	mov    edx,0x7f
c000768a:	89 c7                	mov    edi,eax
c000768c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000768f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007693:	0f 83 c5 0a 00 00    	jae    c000815e <f_mkfs+0xcc5>
c0007699:	89 df                	mov    edi,ebx
c000769b:	c1 ef 09             	shr    edi,0x9
c000769e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076a2:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076a9:	c1 ef 09             	shr    edi,0x9
c00076ac:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076b1:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076b5:	74 29                	je     c00076e0 <f_mkfs+0x247>
c00076b7:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076bd:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076c2:	0f 97 c2             	seta   dl
c00076c5:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076c8:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076cc:	0f 92 c0             	setb   al
c00076cf:	08 c2                	or     dl,al
c00076d1:	75 5b                	jne    c000772e <f_mkfs+0x295>
c00076d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076d7:	83 e0 07             	and    eax,0x7
c00076da:	3c 04                	cmp    al,0x4
c00076dc:	74 50                	je     c000772e <f_mkfs+0x295>
c00076de:	eb 1b                	jmp    c00076fb <f_mkfs+0x262>
c00076e0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076e5:	0f 87 73 0a 00 00    	ja     c000815e <f_mkfs+0xcc5>
c00076eb:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076f1:	76 08                	jbe    c00076fb <f_mkfs+0x262>
c00076f3:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00076fb:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076ff:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007703:	83 e0 01             	and    eax,0x1
c0007706:	80 e1 02             	and    cl,0x2
c0007709:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c000770d:	74 0d                	je     c000771c <f_mkfs+0x283>
c000770f:	84 c0                	test   al,al
c0007711:	0f 84 53 09 00 00    	je     c000806a <f_mkfs+0xbd1>
c0007717:	e9 12 08 00 00       	jmp    c0007f2e <f_mkfs+0xa95>
c000771c:	bb 13 00 00 00       	mov    ebx,0x13
c0007721:	84 c0                	test   al,al
c0007723:	0f 85 05 08 00 00    	jne    c0007f2e <f_mkfs+0xa95>
c0007729:	e9 39 0e 00 00       	jmp    c0008567 <f_mkfs+0x10ce>
c000772e:	31 c0                	xor    eax,eax
c0007730:	ba ff 0f 00 00       	mov    edx,0xfff
c0007735:	89 c7                	mov    edi,eax
c0007737:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000773a:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000773e:	0f 83 1a 0a 00 00    	jae    c000815e <f_mkfs+0xcc5>
c0007744:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000774a:	77 39                	ja     c0007785 <f_mkfs+0x2ec>
c000774c:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007751:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007759:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000775c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007760:	73 08                	jae    c000776a <f_mkfs+0x2d1>
c0007762:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000776a:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000776f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007772:	b8 00 00 00 00       	mov    eax,0x0
c0007777:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000777b:	73 08                	jae    c0007785 <f_mkfs+0x2ec>
c000777d:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007785:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007789:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000778d:	83 c0 20             	add    eax,0x20
c0007790:	83 d2 00             	adc    edx,0x0
c0007793:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007797:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000779b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000779f:	31 d2                	xor    edx,edx
c00077a1:	31 ff                	xor    edi,edi
c00077a3:	52                   	push   edx
c00077a4:	89 fb                	mov    ebx,edi
c00077a6:	50                   	push   eax
c00077a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077af:	e8 9c 9f 01 00       	call   c0021750 <__udivdi3>
c00077b4:	83 c4 10             	add    esp,0x10
c00077b7:	c1 e0 02             	shl    eax,0x2
c00077ba:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077be:	05 07 02 00 00       	add    eax,0x207
c00077c3:	89 f1                	mov    ecx,esi
c00077c5:	c1 e8 09             	shr    eax,0x9
c00077c8:	83 c1 ff             	add    ecx,0xffffffff
c00077cb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077cf:	83 d3 ff             	adc    ebx,0xffffffff
c00077d2:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077d6:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077da:	31 d2                	xor    edx,edx
c00077dc:	01 c8                	add    eax,ecx
c00077de:	11 da                	adc    edx,ebx
c00077e0:	89 c1                	mov    ecx,eax
c00077e2:	f7 de                	neg    esi
c00077e4:	89 d0                	mov    eax,edx
c00077e6:	83 d7 00             	adc    edi,0x0
c00077e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00077ed:	f7 df                	neg    edi
c00077ef:	21 f1                	and    ecx,esi
c00077f1:	21 f8                	and    eax,edi
c00077f3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00077f7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00077fb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00077ff:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007803:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c0007807:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780a:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c000780e:	0f ac d0 01          	shrd   eax,edx,0x1
c0007812:	89 df                	mov    edi,ebx
c0007814:	d1 ea                	shr    edx,1
c0007816:	39 c1                	cmp    ecx,eax
c0007818:	19 d7                	sbb    edi,edx
c000781a:	0f 83 3e 09 00 00    	jae    c000815e <f_mkfs+0xcc5>
c0007820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007824:	31 d2                	xor    edx,edx
c0007826:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000782a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000782e:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007832:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007835:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007839:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c000783d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007841:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007845:	83 f8 0f             	cmp    eax,0xf
c0007848:	0f 86 10 09 00 00    	jbe    c000815e <f_mkfs+0xcc5>
c000784e:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007856:	0f 87 02 09 00 00    	ja     c000815e <f_mkfs+0xcc5>
c000785c:	31 d2                	xor    edx,edx
c000785e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007862:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000786a:	83 c0 07             	add    eax,0x7
c000786d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007875:	c1 e8 03             	shr    eax,0x3
c0007878:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000787f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007883:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007887:	c1 e0 09             	shl    eax,0x9
c000788a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000788e:	48                   	dec    eax
c000788f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007893:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007897:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000789b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000789f:	31 d2                	xor    edx,edx
c00078a1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078a5:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b0:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078b5:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078b9:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078bd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078c1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078c5:	31 ff                	xor    edi,edi
c00078c7:	31 f6                	xor    esi,esi
c00078c9:	31 db                	xor    ebx,ebx
c00078cb:	85 ff                	test   edi,edi
c00078cd:	74 05                	je     c00078d4 <f_mkfs+0x43b>
c00078cf:	4f                   	dec    edi
c00078d0:	74 44                	je     c0007916 <f_mkfs+0x47d>
c00078d2:	eb 4f                	jmp    c0007923 <f_mkfs+0x48a>
c00078d4:	83 ec 0c             	sub    esp,0xc
c00078d7:	0f b7 c3             	movzx  eax,bx
c00078da:	50                   	push   eax
c00078db:	e8 18 0e 00 00       	call   c00086f8 <ff_wtoupper>
c00078e0:	83 c4 10             	add    esp,0x10
c00078e3:	89 c1                	mov    ecx,eax
c00078e5:	8d 53 01             	lea    edx,[ebx+0x1]
c00078e8:	66 39 c3             	cmp    bx,ax
c00078eb:	75 3e                	jne    c000792b <f_mkfs+0x492>
c00078ed:	be 01 00 00 00       	mov    esi,0x1
c00078f2:	89 df                	mov    edi,ebx
c00078f4:	66 01 f7             	add    di,si
c00078f7:	75 07                	jne    c0007900 <f_mkfs+0x467>
c00078f9:	83 fe 7f             	cmp    esi,0x7f
c00078fc:	77 31                	ja     c000792f <f_mkfs+0x496>
c00078fe:	eb 16                	jmp    c0007916 <f_mkfs+0x47d>
c0007900:	83 ec 0c             	sub    esp,0xc
c0007903:	0f b7 ff             	movzx  edi,di
c0007906:	57                   	push   edi
c0007907:	e8 ec 0d 00 00       	call   c00086f8 <ff_wtoupper>
c000790c:	83 c4 10             	add    esp,0x10
c000790f:	39 c7                	cmp    edi,eax
c0007911:	75 e6                	jne    c00078f9 <f_mkfs+0x460>
c0007913:	46                   	inc    esi
c0007914:	eb dc                	jmp    c00078f2 <f_mkfs+0x459>
c0007916:	31 c0                	xor    eax,eax
c0007918:	89 d9                	mov    ecx,ebx
c000791a:	4e                   	dec    esi
c000791b:	0f 95 c0             	setne  al
c000791e:	43                   	inc    ebx
c000791f:	89 c7                	mov    edi,eax
c0007921:	eb 14                	jmp    c0007937 <f_mkfs+0x49e>
c0007923:	89 f1                	mov    ecx,esi
c0007925:	01 f3                	add    ebx,esi
c0007927:	31 ff                	xor    edi,edi
c0007929:	eb 0c                	jmp    c0007937 <f_mkfs+0x49e>
c000792b:	89 d3                	mov    ebx,edx
c000792d:	eb 08                	jmp    c0007937 <f_mkfs+0x49e>
c000792f:	bf 02 00 00 00       	mov    edi,0x2
c0007934:	83 c9 ff             	or     ecx,0xffffffff
c0007937:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000793b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000793e:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007942:	0f b6 c1             	movzx  eax,cl
c0007945:	e8 04 a7 ff ff       	call   c000204e <xsum32>
c000794a:	66 c1 e9 08          	shr    cx,0x8
c000794e:	89 c2                	mov    edx,eax
c0007950:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007953:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007957:	0f b7 c1             	movzx  eax,cx
c000795a:	e8 ef a6 ff ff       	call   c000204e <xsum32>
c000795f:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007964:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007968:	66 85 db             	test   bx,bx
c000796b:	74 1f                	je     c000798c <f_mkfs+0x4f3>
c000796d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007970:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007977:	83 c0 02             	add    eax,0x2
c000797a:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007980:	39 c2                	cmp    edx,eax
c0007982:	74 08                	je     c000798c <f_mkfs+0x4f3>
c0007984:	89 04 24             	mov    DWORD PTR [esp],eax
c0007987:	e9 3f ff ff ff       	jmp    c00078cb <f_mkfs+0x432>
c000798c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000798f:	83 ec 0c             	sub    esp,0xc
c0007992:	05 01 02 00 00       	add    eax,0x201
c0007997:	c1 e8 09             	shr    eax,0x9
c000799a:	50                   	push   eax
c000799b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000799f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079a3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079a7:	55                   	push   ebp
c00079a8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079ac:	e8 6d a1 ff ff       	call   c0001b1e <disk_write>
c00079b1:	83 c4 20             	add    esp,0x20
c00079b4:	85 c0                	test   eax,eax
c00079b6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079b9:	0f 85 8b 0b 00 00    	jne    c000854a <f_mkfs+0x10b1>
c00079bf:	89 d0                	mov    eax,edx
c00079c1:	31 d2                	xor    edx,edx
c00079c3:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079c7:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079cb:	66 85 db             	test   bx,bx
c00079ce:	74 04                	je     c00079d4 <f_mkfs+0x53b>
c00079d0:	31 c0                	xor    eax,eax
c00079d2:	eb b0                	jmp    c0007984 <f_mkfs+0x4eb>
c00079d4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079d8:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079dc:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079e0:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079e6:	31 d2                	xor    edx,edx
c00079e8:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00079f3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00079f7:	c1 eb 09             	shr    ebx,0x9
c00079fa:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a01:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a05:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a09:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a0d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a11:	8d 70 01             	lea    esi,[eax+0x1]
c0007a14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a18:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a1c:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a23:	31 d2                	xor    edx,edx
c0007a25:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a2a:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a2d:	89 c1                	mov    ecx,eax
c0007a2f:	89 e8                	mov    eax,ebp
c0007a31:	e8 b1 a1 ff ff       	call   c0001be7 <mem_set>
c0007a36:	31 c0                	xor    eax,eax
c0007a38:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a3b:	76 10                	jbe    c0007a4d <f_mkfs+0x5b4>
c0007a3d:	83 fe 07             	cmp    esi,0x7
c0007a40:	76 0b                	jbe    c0007a4d <f_mkfs+0x5b4>
c0007a42:	40                   	inc    eax
c0007a43:	83 ee 08             	sub    esi,0x8
c0007a46:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a4b:	eb eb                	jmp    c0007a38 <f_mkfs+0x59f>
c0007a4d:	b2 01                	mov    dl,0x1
c0007a4f:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a53:	85 f6                	test   esi,esi
c0007a55:	74 0c                	je     c0007a63 <f_mkfs+0x5ca>
c0007a57:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a5a:	76 07                	jbe    c0007a63 <f_mkfs+0x5ca>
c0007a5c:	08 11                	or     BYTE PTR [ecx],dl
c0007a5e:	4e                   	dec    esi
c0007a5f:	d1 e2                	shl    edx,1
c0007a61:	eb f0                	jmp    c0007a53 <f_mkfs+0x5ba>
c0007a63:	89 df                	mov    edi,ebx
c0007a65:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a69:	76 04                	jbe    c0007a6f <f_mkfs+0x5d6>
c0007a6b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a6f:	83 ec 0c             	sub    esp,0xc
c0007a72:	57                   	push   edi
c0007a73:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a77:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a7b:	55                   	push   ebp
c0007a7c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a80:	e8 99 a0 ff ff       	call   c0001b1e <disk_write>
c0007a85:	83 c4 20             	add    esp,0x20
c0007a88:	85 c0                	test   eax,eax
c0007a8a:	0f 85 ba 0a 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007a90:	31 d2                	xor    edx,edx
c0007a92:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007a96:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007a9a:	29 fb                	sub    ebx,edi
c0007a9c:	0f 85 7a ff ff ff    	jne    c0007a1c <f_mkfs+0x583>
c0007aa2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007aa6:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007aae:	31 f6                	xor    esi,esi
c0007ab0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007ab4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ab7:	31 d2                	xor    edx,edx
c0007ab9:	89 e8                	mov    eax,ebp
c0007abb:	e8 27 a1 ff ff       	call   c0001be7 <mem_set>
c0007ac0:	31 c9                	xor    ecx,ecx
c0007ac2:	85 db                	test   ebx,ebx
c0007ac4:	75 40                	jne    c0007b06 <f_mkfs+0x66d>
c0007ac6:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007acb:	89 e8                	mov    eax,ebp
c0007acd:	bb 02 00 00 00       	mov    ebx,0x2
c0007ad2:	e8 f2 a0 ff ff       	call   c0001bc9 <st_dword>
c0007ad7:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ada:	83 ca ff             	or     edx,0xffffffff
c0007add:	e8 e7 a0 ff ff       	call   c0001bc9 <st_dword>
c0007ae2:	b9 08 00 00 00       	mov    ecx,0x8
c0007ae7:	eb 1d                	jmp    c0007b06 <f_mkfs+0x66d>
c0007ae9:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007aec:	76 3b                	jbe    c0007b29 <f_mkfs+0x690>
c0007aee:	43                   	inc    ebx
c0007aef:	83 fe 01             	cmp    esi,0x1
c0007af2:	89 da                	mov    edx,ebx
c0007af4:	77 03                	ja     c0007af9 <f_mkfs+0x660>
c0007af6:	83 ca ff             	or     edx,0xffffffff
c0007af9:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007afd:	4e                   	dec    esi
c0007afe:	e8 c6 a0 ff ff       	call   c0001bc9 <st_dword>
c0007b03:	83 c1 04             	add    ecx,0x4
c0007b06:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b0a:	85 f6                	test   esi,esi
c0007b0c:	75 db                	jne    c0007ae9 <f_mkfs+0x650>
c0007b0e:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b13:	77 14                	ja     c0007b29 <f_mkfs+0x690>
c0007b15:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b19:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b20:	85 f6                	test   esi,esi
c0007b22:	74 05                	je     c0007b29 <f_mkfs+0x690>
c0007b24:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b27:	77 dd                	ja     c0007b06 <f_mkfs+0x66d>
c0007b29:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b2d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b31:	39 cf                	cmp    edi,ecx
c0007b33:	76 02                	jbe    c0007b37 <f_mkfs+0x69e>
c0007b35:	89 cf                	mov    edi,ecx
c0007b37:	83 ec 0c             	sub    esp,0xc
c0007b3a:	57                   	push   edi
c0007b3b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b3f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b43:	55                   	push   ebp
c0007b44:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b48:	e8 d1 9f ff ff       	call   c0001b1e <disk_write>
c0007b4d:	83 c4 20             	add    esp,0x20
c0007b50:	85 c0                	test   eax,eax
c0007b52:	0f 85 f2 09 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007b58:	31 d2                	xor    edx,edx
c0007b5a:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b5e:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b62:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b66:	0f 85 48 ff ff ff    	jne    c0007ab4 <f_mkfs+0x61b>
c0007b6c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b6f:	31 d2                	xor    edx,edx
c0007b71:	89 e8                	mov    eax,ebp
c0007b73:	31 ff                	xor    edi,edi
c0007b75:	e8 6d a0 ff ff       	call   c0001be7 <mem_set>
c0007b7a:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b7d:	ba 02 00 00 00       	mov    edx,0x2
c0007b82:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b86:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007b8a:	e8 3a a0 ff ff       	call   c0001bc9 <st_dword>
c0007b8f:	8d 45 38             	lea    eax,[ebp+0x38]
c0007b92:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007b96:	e8 2e a0 ff ff       	call   c0001bc9 <st_dword>
c0007b9b:	8d 45 44             	lea    eax,[ebp+0x44]
c0007b9e:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007ba2:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007ba6:	e8 1e a0 ff ff       	call   c0001bc9 <st_dword>
c0007bab:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bae:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bb2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bb6:	83 c2 02             	add    edx,0x2
c0007bb9:	e8 0b a0 ff ff       	call   c0001bc9 <st_dword>
c0007bbe:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bc1:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bc5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bc9:	e8 fb 9f ff ff       	call   c0001bc9 <st_dword>
c0007bce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bd2:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bd7:	89 c6                	mov    esi,eax
c0007bd9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bdd:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007be1:	89 04 24             	mov    DWORD PTR [esp],eax
c0007be4:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007be8:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007beb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bef:	39 cb                	cmp    ebx,ecx
c0007bf1:	76 02                	jbe    c0007bf5 <f_mkfs+0x75c>
c0007bf3:	89 cb                	mov    ebx,ecx
c0007bf5:	83 ec 0c             	sub    esp,0xc
c0007bf8:	53                   	push   ebx
c0007bf9:	57                   	push   edi
c0007bfa:	56                   	push   esi
c0007bfb:	55                   	push   ebp
c0007bfc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c00:	e8 19 9f ff ff       	call   c0001b1e <disk_write>
c0007c05:	83 c4 20             	add    esp,0x20
c0007c08:	85 c0                	test   eax,eax
c0007c0a:	0f 85 3a 09 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007c10:	31 d2                	xor    edx,edx
c0007c12:	b9 00 02 00 00       	mov    ecx,0x200
c0007c17:	89 e8                	mov    eax,ebp
c0007c19:	e8 c9 9f ff ff       	call   c0001be7 <mem_set>
c0007c1e:	31 d2                	xor    edx,edx
c0007c20:	01 de                	add    esi,ebx
c0007c22:	11 d7                	adc    edi,edx
c0007c24:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c27:	75 bf                	jne    c0007be8 <f_mkfs+0x74f>
c0007c29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c2d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c31:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c39:	b9 00 02 00 00       	mov    ecx,0x200
c0007c3e:	31 d2                	xor    edx,edx
c0007c40:	89 e8                	mov    eax,ebp
c0007c42:	e8 a0 9f ff ff       	call   c0001be7 <mem_set>
c0007c47:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c4c:	ba 80 26 02 c0       	mov    edx,0xc0022680
c0007c51:	89 e8                	mov    eax,ebp
c0007c53:	e8 7a 9f ff ff       	call   c0001bd2 <mem_cpy>
c0007c58:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c5b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c5f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c63:	e8 64 9f ff ff       	call   c0001bcc <st_qword>
c0007c68:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c6c:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c6f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c73:	e8 54 9f ff ff       	call   c0001bcc <st_qword>
c0007c78:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c7b:	ba 20 00 00 00       	mov    edx,0x20
c0007c80:	e8 44 9f ff ff       	call   c0001bc9 <st_dword>
c0007c85:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007c89:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c8d:	e8 37 9f ff ff       	call   c0001bc9 <st_dword>
c0007c92:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007c96:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007c9a:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007c9e:	e8 26 9f ff ff       	call   c0001bc9 <st_dword>
c0007ca3:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007ca6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007caa:	e8 1a 9f ff ff       	call   c0001bc9 <st_dword>
c0007caf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007cb3:	8d 50 02             	lea    edx,[eax+0x2]
c0007cb6:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cb9:	e8 0b 9f ff ff       	call   c0001bc9 <st_dword>
c0007cbe:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cc1:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cc6:	e8 fe 9e ff ff       	call   c0001bc9 <st_dword>
c0007ccb:	8d 45 68             	lea    eax,[ebp+0x68]
c0007cce:	ba 00 01 00 00       	mov    edx,0x100
c0007cd3:	e8 ed 9e ff ff       	call   c0001bc5 <st_word>
c0007cd8:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007cdc:	b8 0a 00 00 00       	mov    eax,0xa
c0007ce1:	48                   	dec    eax
c0007ce2:	74 05                	je     c0007ce9 <f_mkfs+0x850>
c0007ce4:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007ce7:	eb f8                	jmp    c0007ce1 <f_mkfs+0x848>
c0007ce9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ced:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007cf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007cf5:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007cf9:	74 05                	je     c0007d00 <f_mkfs+0x867>
c0007cfb:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007cfe:	eb f5                	jmp    c0007cf5 <f_mkfs+0x85c>
c0007d00:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d03:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d08:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d0e:	31 db                	xor    ebx,ebx
c0007d10:	e8 b0 9e ff ff       	call   c0001bc5 <st_word>
c0007d15:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d1b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d23:	e8 9d 9e ff ff       	call   c0001bc5 <st_word>
c0007d28:	31 c9                	xor    ecx,ecx
c0007d2a:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d2d:	83 f8 01             	cmp    eax,0x1
c0007d30:	76 13                	jbe    c0007d45 <f_mkfs+0x8ac>
c0007d32:	83 f9 70             	cmp    ecx,0x70
c0007d35:	74 0e                	je     c0007d45 <f_mkfs+0x8ac>
c0007d37:	89 da                	mov    edx,ebx
c0007d39:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d3e:	e8 0b a3 ff ff       	call   c000204e <xsum32>
c0007d43:	89 c3                	mov    ebx,eax
c0007d45:	41                   	inc    ecx
c0007d46:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d4c:	75 dc                	jne    c0007d2a <f_mkfs+0x891>
c0007d4e:	89 f0                	mov    eax,esi
c0007d50:	89 fa                	mov    edx,edi
c0007d52:	83 c0 01             	add    eax,0x1
c0007d55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d59:	83 d2 00             	adc    edx,0x0
c0007d5c:	83 ec 0c             	sub    esp,0xc
c0007d5f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d63:	6a 01                	push   0x1
c0007d65:	57                   	push   edi
c0007d66:	56                   	push   esi
c0007d67:	55                   	push   ebp
c0007d68:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d6c:	e8 ad 9d ff ff       	call   c0001b1e <disk_write>
c0007d71:	83 c4 20             	add    esp,0x20
c0007d74:	85 c0                	test   eax,eax
c0007d76:	0f 85 ce 07 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007d7c:	31 d2                	xor    edx,edx
c0007d7e:	b9 00 02 00 00       	mov    ecx,0x200
c0007d83:	89 e8                	mov    eax,ebp
c0007d85:	e8 5d 9e ff ff       	call   c0001be7 <mem_set>
c0007d8a:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d8f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d92:	e8 2e 9e ff ff       	call   c0001bc5 <st_word>
c0007d97:	89 f0                	mov    eax,esi
c0007d99:	89 fa                	mov    edx,edi
c0007d9b:	83 c0 09             	add    eax,0x9
c0007d9e:	83 d2 00             	adc    edx,0x0
c0007da1:	89 04 24             	mov    DWORD PTR [esp],eax
c0007da4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007da8:	31 c9                	xor    ecx,ecx
c0007daa:	41                   	inc    ecx
c0007dab:	89 da                	mov    edx,ebx
c0007dad:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007db2:	e8 97 a2 ff ff       	call   c000204e <xsum32>
c0007db7:	89 c3                	mov    ebx,eax
c0007db9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dbf:	75 e9                	jne    c0007daa <f_mkfs+0x911>
c0007dc1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007dc5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dc9:	83 c0 01             	add    eax,0x1
c0007dcc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007dd0:	83 d2 00             	adc    edx,0x0
c0007dd3:	83 ec 0c             	sub    esp,0xc
c0007dd6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007dda:	6a 01                	push   0x1
c0007ddc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de4:	55                   	push   ebp
c0007de5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007de9:	e8 30 9d ff ff       	call   c0001b1e <disk_write>
c0007dee:	83 c4 20             	add    esp,0x20
c0007df1:	85 c0                	test   eax,eax
c0007df3:	0f 85 51 07 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007df9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dfd:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e01:	75 09                	jne    c0007e0c <f_mkfs+0x973>
c0007e03:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e06:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e0a:	74 12                	je     c0007e1e <f_mkfs+0x985>
c0007e0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e10:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e14:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e18:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e1c:	eb 8a                	jmp    c0007da8 <f_mkfs+0x90f>
c0007e1e:	31 d2                	xor    edx,edx
c0007e20:	b9 00 02 00 00       	mov    ecx,0x200
c0007e25:	89 e8                	mov    eax,ebp
c0007e27:	e8 bb 9d ff ff       	call   c0001be7 <mem_set>
c0007e2c:	83 c6 0b             	add    esi,0xb
c0007e2f:	83 d7 00             	adc    edi,0x0
c0007e32:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e36:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e3a:	31 c9                	xor    ecx,ecx
c0007e3c:	41                   	inc    ecx
c0007e3d:	89 da                	mov    edx,ebx
c0007e3f:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e44:	e8 05 a2 ff ff       	call   c000204e <xsum32>
c0007e49:	89 c3                	mov    ebx,eax
c0007e4b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e51:	75 e9                	jne    c0007e3c <f_mkfs+0x9a3>
c0007e53:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e56:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e5a:	83 c6 01             	add    esi,0x1
c0007e5d:	83 d7 00             	adc    edi,0x0
c0007e60:	83 ec 0c             	sub    esp,0xc
c0007e63:	6a 01                	push   0x1
c0007e65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e6d:	55                   	push   ebp
c0007e6e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e72:	e8 a7 9c ff ff       	call   c0001b1e <disk_write>
c0007e77:	83 c4 20             	add    esp,0x20
c0007e7a:	85 c0                	test   eax,eax
c0007e7c:	0f 85 c8 06 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007e82:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e86:	75 06                	jne    c0007e8e <f_mkfs+0x9f5>
c0007e88:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007e8c:	74 09                	je     c0007e97 <f_mkfs+0x9fe>
c0007e8e:	89 34 24             	mov    DWORD PTR [esp],esi
c0007e91:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007e95:	eb a3                	jmp    c0007e3a <f_mkfs+0x9a1>
c0007e97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007e9b:	89 da                	mov    edx,ebx
c0007e9d:	01 e8                	add    eax,ebp
c0007e9f:	e8 25 9d ff ff       	call   c0001bc9 <st_dword>
c0007ea4:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007ea9:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007eb1:	75 e4                	jne    c0007e97 <f_mkfs+0x9fe>
c0007eb3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007eb6:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007eba:	83 c6 02             	add    esi,0x2
c0007ebd:	83 d7 00             	adc    edi,0x0
c0007ec0:	83 ec 0c             	sub    esp,0xc
c0007ec3:	6a 01                	push   0x1
c0007ec5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ec9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ecd:	55                   	push   ebp
c0007ece:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ed2:	e8 47 9c ff ff       	call   c0001b1e <disk_write>
c0007ed7:	83 c4 20             	add    esp,0x20
c0007eda:	85 c0                	test   eax,eax
c0007edc:	0f 85 68 06 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007ee2:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007ee7:	74 0d                	je     c0007ef6 <f_mkfs+0xa5d>
c0007ee9:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ef1:	e9 43 fd ff ff       	jmp    c0007c39 <f_mkfs+0x7a0>
c0007ef6:	b1 07                	mov    cl,0x7
c0007ef8:	e9 e3 05 00 00       	jmp    c00084e0 <f_mkfs+0x1047>
c0007efd:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f02:	0f 85 4f 02 00 00    	jne    c0008157 <f_mkfs+0xcbe>
c0007f08:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f0d:	0f 86 22 02 00 00    	jbe    c0008135 <f_mkfs+0xc9c>
c0007f13:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f18:	0f 85 81 06 00 00    	jne    c000859f <f_mkfs+0x1106>
c0007f1e:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f21:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f25:	83 f8 40             	cmp    eax,0x40
c0007f28:	0f 87 51 06 00 00    	ja     c000857f <f_mkfs+0x10e6>
c0007f2e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f32:	85 ff                	test   edi,edi
c0007f34:	75 1c                	jne    c0007f52 <f_mkfs+0xab9>
c0007f36:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f39:	ba 80 25 02 c0       	mov    edx,0xc0022580
c0007f3e:	c1 e9 0c             	shr    ecx,0xc
c0007f41:	bf 01 00 00 00       	mov    edi,0x1
c0007f46:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f49:	66 85 c0             	test   ax,ax
c0007f4c:	0f 85 95 01 00 00    	jne    c00080e7 <f_mkfs+0xc4e>
c0007f52:	31 d2                	xor    edx,edx
c0007f54:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f57:	f7 f7                	div    edi
c0007f59:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f5e:	0f 86 95 01 00 00    	jbe    c00080f9 <f_mkfs+0xc60>
c0007f64:	83 c0 02             	add    eax,0x2
c0007f67:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f6c:	01 c0                	add    eax,eax
c0007f6e:	05 ff 01 00 00       	add    eax,0x1ff
c0007f73:	be 01 00 00 00       	mov    esi,0x1
c0007f78:	c1 e8 09             	shr    eax,0x9
c0007f7b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f7f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f83:	c1 e0 05             	shl    eax,0x5
c0007f86:	c1 e8 09             	shr    eax,0x9
c0007f89:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007f8d:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007f92:	31 d2                	xor    edx,edx
c0007f94:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007f98:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007f9c:	89 f0                	mov    eax,esi
c0007f9e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007fa2:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fa6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007faa:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fb2:	31 d2                	xor    edx,edx
c0007fb4:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fb9:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fbd:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fc1:	31 db                	xor    ebx,ebx
c0007fc3:	01 c8                	add    eax,ecx
c0007fc5:	11 da                	adc    edx,ebx
c0007fc7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fcb:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fcf:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007fd3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fd7:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007fdb:	f7 da                	neg    edx
c0007fdd:	21 d1                	and    ecx,edx
c0007fdf:	29 d9                	sub    ecx,ebx
c0007fe1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fe6:	0f 85 20 01 00 00    	jne    c000810c <f_mkfs+0xc73>
c0007fec:	31 db                	xor    ebx,ebx
c0007fee:	01 ce                	add    esi,ecx
c0007ff0:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ff4:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ff8:	31 d2                	xor    edx,edx
c0007ffa:	89 f8                	mov    eax,edi
c0007ffc:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008000:	c1 e0 04             	shl    eax,0x4
c0008003:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0008007:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c000800b:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c000800f:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0008013:	39 04 24             	cmp    DWORD PTR [esp],eax
c0008016:	19 d3                	sbb    ebx,edx
c0008018:	0f 82 40 01 00 00    	jb     c000815e <f_mkfs+0xcc5>
c000801e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008021:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008025:	89 c8                	mov    eax,ecx
c0008027:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c000802c:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008030:	29 f0                	sub    eax,esi
c0008032:	29 d0                	sub    eax,edx
c0008034:	31 d2                	xor    edx,edx
c0008036:	f7 f7                	div    edi
c0008038:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000803d:	89 c3                	mov    ebx,eax
c000803f:	0f 85 b8 fe ff ff    	jne    c0007efd <f_mkfs+0xa64>
c0008045:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000804a:	0f 87 1d 01 00 00    	ja     c000816d <f_mkfs+0xcd4>
c0008050:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008055:	0f 85 03 01 00 00    	jne    c000815e <f_mkfs+0xcc5>
c000805b:	83 ff 01             	cmp    edi,0x1
c000805e:	0f 86 fa 00 00 00    	jbe    c000815e <f_mkfs+0xcc5>
c0008064:	d1 ef                	shr    edi,1
c0008066:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000806a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000806e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008071:	85 db                	test   ebx,ebx
c0008073:	75 2d                	jne    c00080a2 <f_mkfs+0xc09>
c0008075:	89 cb                	mov    ebx,ecx
c0008077:	ba 90 25 02 c0       	mov    edx,0xc0022590
c000807c:	c1 eb 11             	shr    ebx,0x11
c000807f:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0008087:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000808a:	66 85 c0             	test   ax,ax
c000808d:	74 11                	je     c00080a0 <f_mkfs+0xc07>
c000808f:	83 c2 02             	add    edx,0x2
c0008092:	39 d8                	cmp    eax,ebx
c0008094:	77 0a                	ja     c00080a0 <f_mkfs+0xc07>
c0008096:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000809a:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c000809e:	eb e7                	jmp    c0008087 <f_mkfs+0xbee>
c00080a0:	31 db                	xor    ebx,ebx
c00080a2:	31 d2                	xor    edx,edx
c00080a4:	89 c8                	mov    eax,ecx
c00080a6:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080aa:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080b1:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080b6:	c1 ea 09             	shr    edx,0x9
c00080b9:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080be:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080c2:	0f 87 96 00 00 00    	ja     c000815e <f_mkfs+0xcc5>
c00080c8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080cc:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080d4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080d8:	be 20 00 00 00       	mov    esi,0x20
c00080dd:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080e2:	e9 a6 fe ff ff       	jmp    c0007f8d <f_mkfs+0xaf4>
c00080e7:	83 c2 02             	add    edx,0x2
c00080ea:	39 c8                	cmp    eax,ecx
c00080ec:	0f 87 60 fe ff ff    	ja     c0007f52 <f_mkfs+0xab9>
c00080f2:	01 ff                	add    edi,edi
c00080f4:	e9 4d fe ff ff       	jmp    c0007f46 <f_mkfs+0xaad>
c00080f9:	8d 04 40             	lea    eax,[eax+eax*2]
c00080fc:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008101:	40                   	inc    eax
c0008102:	d1 e8                	shr    eax,1
c0008104:	83 c0 03             	add    eax,0x3
c0008107:	e9 62 fe ff ff       	jmp    c0007f6e <f_mkfs+0xad5>
c000810c:	31 d2                	xor    edx,edx
c000810e:	89 c8                	mov    eax,ecx
c0008110:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008114:	85 d2                	test   edx,edx
c0008116:	74 0c                	je     c0008124 <f_mkfs+0xc8b>
c0008118:	49                   	dec    ecx
c0008119:	46                   	inc    esi
c000811a:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c000811f:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0008124:	89 c8                	mov    eax,ecx
c0008126:	31 d2                	xor    edx,edx
c0008128:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000812c:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008130:	e9 c3 fe ff ff       	jmp    c0007ff8 <f_mkfs+0xb5f>
c0008135:	3d f5 0f 00 00       	cmp    eax,0xff5
c000813a:	77 31                	ja     c000816d <f_mkfs+0xcd4>
c000813c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008141:	75 1b                	jne    c000815e <f_mkfs+0xcc5>
c0008143:	8d 04 3f             	lea    eax,[edi+edi*1]
c0008146:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000814a:	3d 80 00 00 00       	cmp    eax,0x80
c000814f:	0f 86 d9 fd ff ff    	jbe    c0007f2e <f_mkfs+0xa95>
c0008155:	eb 07                	jmp    c000815e <f_mkfs+0xcc5>
c0008157:	3d f5 0f 00 00       	cmp    eax,0xff5
c000815c:	76 0a                	jbe    c0008168 <f_mkfs+0xccf>
c000815e:	bb 0e 00 00 00       	mov    ebx,0xe
c0008163:	e9 ff 03 00 00       	jmp    c0008567 <f_mkfs+0x10ce>
c0008168:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000816d:	31 d2                	xor    edx,edx
c000816f:	b9 00 02 00 00       	mov    ecx,0x200
c0008174:	89 e8                	mov    eax,ebp
c0008176:	e8 6c 9a ff ff       	call   c0001be7 <mem_set>
c000817b:	b9 0b 00 00 00       	mov    ecx,0xb
c0008180:	ba a2 26 02 c0       	mov    edx,0xc00226a2
c0008185:	89 e8                	mov    eax,ebp
c0008187:	e8 46 9a ff ff       	call   c0001bd2 <mem_cpy>
c000818c:	8d 45 0b             	lea    eax,[ebp+0xb]
c000818f:	ba 00 02 00 00       	mov    edx,0x200
c0008194:	e8 2c 9a ff ff       	call   c0001bc5 <st_word>
c0008199:	89 f8                	mov    eax,edi
c000819b:	0f b7 d6             	movzx  edx,si
c000819e:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081a1:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081a4:	e8 1c 9a ff ff       	call   c0001bc5 <st_word>
c00081a9:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081ad:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081b2:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081b5:	75 08                	jne    c00081bf <f_mkfs+0xd26>
c00081b7:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081bf:	8d 45 11             	lea    eax,[ebp+0x11]
c00081c2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081c6:	e8 fa 99 ff ff       	call   c0001bc5 <st_word>
c00081cb:	b8 ff ff 00 00       	mov    eax,0xffff
c00081d0:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081d4:	39 d0                	cmp    eax,edx
c00081d6:	b8 00 00 00 00       	mov    eax,0x0
c00081db:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081df:	72 0a                	jb     c00081eb <f_mkfs+0xd52>
c00081e1:	8d 45 13             	lea    eax,[ebp+0x13]
c00081e4:	e8 dc 99 ff ff       	call   c0001bc5 <st_word>
c00081e9:	eb 08                	jmp    c00081f3 <f_mkfs+0xd5a>
c00081eb:	8d 45 20             	lea    eax,[ebp+0x20]
c00081ee:	e8 d6 99 ff ff       	call   c0001bc9 <st_dword>
c00081f3:	8d 45 18             	lea    eax,[ebp+0x18]
c00081f6:	ba 3f 00 00 00       	mov    edx,0x3f
c00081fb:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00081ff:	e8 c1 99 ff ff       	call   c0001bc5 <st_word>
c0008204:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0008207:	ba ff 00 00 00       	mov    edx,0xff
c000820c:	e8 b4 99 ff ff       	call   c0001bc5 <st_word>
c0008211:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0008214:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008218:	e8 ac 99 ff ff       	call   c0001bc9 <st_dword>
c000821d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008222:	75 57                	jne    c000827b <f_mkfs+0xde2>
c0008224:	8d 45 43             	lea    eax,[ebp+0x43]
c0008227:	ba 00 00 21 50       	mov    edx,0x50210000
c000822c:	e8 98 99 ff ff       	call   c0001bc9 <st_dword>
c0008231:	8d 45 24             	lea    eax,[ebp+0x24]
c0008234:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008238:	e8 8c 99 ff ff       	call   c0001bc9 <st_dword>
c000823d:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008240:	ba 02 00 00 00       	mov    edx,0x2
c0008245:	e8 7f 99 ff ff       	call   c0001bc9 <st_dword>
c000824a:	8d 45 30             	lea    eax,[ebp+0x30]
c000824d:	ba 01 00 00 00       	mov    edx,0x1
c0008252:	e8 6e 99 ff ff       	call   c0001bc5 <st_word>
c0008257:	8d 45 32             	lea    eax,[ebp+0x32]
c000825a:	ba 06 00 00 00       	mov    edx,0x6
c000825f:	e8 61 99 ff ff       	call   c0001bc5 <st_word>
c0008264:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008268:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000826c:	8d 45 47             	lea    eax,[ebp+0x47]
c000826f:	b9 13 00 00 00       	mov    ecx,0x13
c0008274:	ba ae 26 02 c0       	mov    edx,0xc00226ae
c0008279:	eb 2f                	jmp    c00082aa <f_mkfs+0xe11>
c000827b:	8d 45 27             	lea    eax,[ebp+0x27]
c000827e:	ba 00 00 21 50       	mov    edx,0x50210000
c0008283:	e8 41 99 ff ff       	call   c0001bc9 <st_dword>
c0008288:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000828d:	8d 45 16             	lea    eax,[ebp+0x16]
c0008290:	e8 30 99 ff ff       	call   c0001bc5 <st_word>
c0008295:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008299:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000829d:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082a0:	b9 13 00 00 00       	mov    ecx,0x13
c00082a5:	ba c2 26 02 c0       	mov    edx,0xc00226c2
c00082aa:	e8 23 99 ff ff       	call   c0001bd2 <mem_cpy>
c00082af:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082b5:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082ba:	89 f0                	mov    eax,esi
c00082bc:	e8 04 99 ff ff       	call   c0001bc5 <st_word>
c00082c1:	83 ec 0c             	sub    esp,0xc
c00082c4:	6a 01                	push   0x1
c00082c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082ce:	55                   	push   ebp
c00082cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082d3:	e8 46 98 ff ff       	call   c0001b1e <disk_write>
c00082d8:	83 c4 20             	add    esp,0x20
c00082db:	85 c0                	test   eax,eax
c00082dd:	0f 85 67 02 00 00    	jne    c000854a <f_mkfs+0x10b1>
c00082e3:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082e8:	0f 85 b7 00 00 00    	jne    c00083a5 <f_mkfs+0xf0c>
c00082ee:	83 ec 0c             	sub    esp,0xc
c00082f1:	6a 01                	push   0x1
c00082f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082f7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00082fb:	83 c0 06             	add    eax,0x6
c00082fe:	83 d2 00             	adc    edx,0x0
c0008301:	52                   	push   edx
c0008302:	50                   	push   eax
c0008303:	55                   	push   ebp
c0008304:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008308:	e8 11 98 ff ff       	call   c0001b1e <disk_write>
c000830d:	83 c4 20             	add    esp,0x20
c0008310:	b9 00 02 00 00       	mov    ecx,0x200
c0008315:	31 d2                	xor    edx,edx
c0008317:	89 e8                	mov    eax,ebp
c0008319:	e8 c9 98 ff ff       	call   c0001be7 <mem_set>
c000831e:	ba 52 52 61 41       	mov    edx,0x41615252
c0008323:	89 e8                	mov    eax,ebp
c0008325:	e8 9f 98 ff ff       	call   c0001bc9 <st_dword>
c000832a:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008330:	ba 72 72 41 61       	mov    edx,0x61417272
c0008335:	e8 8f 98 ff ff       	call   c0001bc9 <st_dword>
c000833a:	8d 53 ff             	lea    edx,[ebx-0x1]
c000833d:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008343:	e8 81 98 ff ff       	call   c0001bc9 <st_dword>
c0008348:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c000834e:	ba 02 00 00 00       	mov    edx,0x2
c0008353:	e8 71 98 ff ff       	call   c0001bc9 <st_dword>
c0008358:	ba 55 aa 00 00       	mov    edx,0xaa55
c000835d:	89 f0                	mov    eax,esi
c000835f:	e8 61 98 ff ff       	call   c0001bc5 <st_word>
c0008364:	83 ec 0c             	sub    esp,0xc
c0008367:	6a 01                	push   0x1
c0008369:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000836d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008371:	83 c0 07             	add    eax,0x7
c0008374:	83 d2 00             	adc    edx,0x0
c0008377:	52                   	push   edx
c0008378:	50                   	push   eax
c0008379:	55                   	push   ebp
c000837a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000837e:	e8 9b 97 ff ff       	call   c0001b1e <disk_write>
c0008383:	83 c4 14             	add    esp,0x14
c0008386:	6a 01                	push   0x1
c0008388:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000838c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008390:	83 c0 01             	add    eax,0x1
c0008393:	83 d2 00             	adc    edx,0x0
c0008396:	52                   	push   edx
c0008397:	50                   	push   eax
c0008398:	55                   	push   ebp
c0008399:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000839d:	e8 7c 97 ff ff       	call   c0001b1e <disk_write>
c00083a2:	83 c4 20             	add    esp,0x20
c00083a5:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083ac:	31 d2                	xor    edx,edx
c00083ae:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083b4:	31 db                	xor    ebx,ebx
c00083b6:	89 e8                	mov    eax,ebp
c00083b8:	e8 2a 98 ff ff       	call   c0001be7 <mem_set>
c00083bd:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083c2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083c9:	0f 94 c3             	sete   bl
c00083cc:	4b                   	dec    ebx
c00083cd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083d3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083d9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083de:	75 21                	jne    c0008401 <f_mkfs+0xf68>
c00083e0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083e5:	89 e8                	mov    eax,ebp
c00083e7:	e8 dd 97 ff ff       	call   c0001bc9 <st_dword>
c00083ec:	8d 45 04             	lea    eax,[ebp+0x4]
c00083ef:	83 ca ff             	or     edx,0xffffffff
c00083f2:	e8 d2 97 ff ff       	call   c0001bc9 <st_dword>
c00083f7:	8d 45 08             	lea    eax,[ebp+0x8]
c00083fa:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00083ff:	eb 04                	jmp    c0008405 <f_mkfs+0xf6c>
c0008401:	89 da                	mov    edx,ebx
c0008403:	89 e8                	mov    eax,ebp
c0008405:	e8 bf 97 ff ff       	call   c0001bc9 <st_dword>
c000840a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000840e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008412:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0008416:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000841a:	39 ce                	cmp    esi,ecx
c000841c:	76 02                	jbe    c0008420 <f_mkfs+0xf87>
c000841e:	89 ce                	mov    esi,ecx
c0008420:	83 ec 0c             	sub    esp,0xc
c0008423:	56                   	push   esi
c0008424:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008428:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000842c:	55                   	push   ebp
c000842d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008431:	e8 e8 96 ff ff       	call   c0001b1e <disk_write>
c0008436:	83 c4 20             	add    esp,0x20
c0008439:	85 c0                	test   eax,eax
c000843b:	0f 85 09 01 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0008441:	31 d2                	xor    edx,edx
c0008443:	b9 00 02 00 00       	mov    ecx,0x200
c0008448:	89 e8                	mov    eax,ebp
c000844a:	e8 98 97 ff ff       	call   c0001be7 <mem_set>
c000844f:	31 d2                	xor    edx,edx
c0008451:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008455:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008459:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000845d:	75 b3                	jne    c0008412 <f_mkfs+0xf79>
c000845f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008462:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008469:	40                   	inc    eax
c000846a:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000846e:	0f 87 65 ff ff ff    	ja     c00083d9 <f_mkfs+0xf40>
c0008474:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008479:	74 04                	je     c000847f <f_mkfs+0xfe6>
c000847b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000847f:	89 fb                	mov    ebx,edi
c0008481:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008485:	76 04                	jbe    c000848b <f_mkfs+0xff2>
c0008487:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000848b:	83 ec 0c             	sub    esp,0xc
c000848e:	53                   	push   ebx
c000848f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008493:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008497:	55                   	push   ebp
c0008498:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000849c:	e8 7d 96 ff ff       	call   c0001b1e <disk_write>
c00084a1:	83 c4 20             	add    esp,0x20
c00084a4:	85 c0                	test   eax,eax
c00084a6:	0f 85 9e 00 00 00    	jne    c000854a <f_mkfs+0x10b1>
c00084ac:	31 d2                	xor    edx,edx
c00084ae:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084b2:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084b6:	29 df                	sub    edi,ebx
c00084b8:	75 c5                	jne    c000847f <f_mkfs+0xfe6>
c00084ba:	b1 0c                	mov    cl,0xc
c00084bc:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084c1:	74 1d                	je     c00084e0 <f_mkfs+0x1047>
c00084c3:	b8 ff ff 00 00       	mov    eax,0xffff
c00084c8:	b1 06                	mov    cl,0x6
c00084ca:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084ce:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084d2:	72 0c                	jb     c00084e0 <f_mkfs+0x1047>
c00084d4:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084d9:	0f 94 c1             	sete   cl
c00084dc:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084e0:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084e5:	75 4c                	jne    c0008533 <f_mkfs+0x109a>
c00084e7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00084eb:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00084ef:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00084f6:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00084fd:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008508:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008513:	0f b6 c9             	movzx  ecx,cl
c0008516:	83 ec 0c             	sub    esp,0xc
c0008519:	55                   	push   ebp
c000851a:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008521:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008525:	e8 f9 bf ff ff       	call   c0004523 <create_partition>
c000852a:	83 c4 10             	add    esp,0x10
c000852d:	89 c3                	mov    ebx,eax
c000852f:	85 c0                	test   eax,eax
c0008531:	75 34                	jne    c0008567 <f_mkfs+0x10ce>
c0008533:	31 db                	xor    ebx,ebx
c0008535:	50                   	push   eax
c0008536:	6a 00                	push   0x0
c0008538:	6a 00                	push   0x0
c000853a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000853e:	e8 f1 95 ff ff       	call   c0001b34 <disk_ioctl>
c0008543:	83 c4 10             	add    esp,0x10
c0008546:	85 c0                	test   eax,eax
c0008548:	74 1d                	je     c0008567 <f_mkfs+0x10ce>
c000854a:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008552:	75 0c                	jne    c0008560 <f_mkfs+0x10c7>
c0008554:	83 ec 0c             	sub    esp,0xc
c0008557:	55                   	push   ebp
c0008558:	e8 77 00 00 00       	call   c00085d4 <ff_memfree>
c000855d:	83 c4 10             	add    esp,0x10
c0008560:	bb 01 00 00 00       	mov    ebx,0x1
c0008565:	eb 48                	jmp    c00085af <f_mkfs+0x1116>
c0008567:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000856f:	75 3e                	jne    c00085af <f_mkfs+0x1116>
c0008571:	83 ec 0c             	sub    esp,0xc
c0008574:	55                   	push   ebp
c0008575:	e8 5a 00 00 00       	call   c00085d4 <ff_memfree>
c000857a:	83 c4 10             	add    esp,0x10
c000857d:	eb 30                	jmp    c00085af <f_mkfs+0x1116>
c000857f:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008584:	0f 85 eb fa ff ff    	jne    c0008075 <f_mkfs+0xbdc>
c000858a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000858e:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008594:	0f 86 b8 f9 ff ff    	jbe    c0007f52 <f_mkfs+0xab9>
c000859a:	e9 bf fb ff ff       	jmp    c000815e <f_mkfs+0xcc5>
c000859f:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085a4:	0f 85 c0 fa ff ff    	jne    c000806a <f_mkfs+0xbd1>
c00085aa:	e9 af fb ff ff       	jmp    c000815e <f_mkfs+0xcc5>
c00085af:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085b5:	89 d8                	mov    eax,ebx
c00085b7:	5b                   	pop    ebx
c00085b8:	5e                   	pop    esi
c00085b9:	5f                   	pop    edi
c00085ba:	5d                   	pop    ebp
c00085bb:	c3                   	ret    

c00085bc <ff_memalloc>:
c00085bc:	83 ec 0c             	sub    esp,0xc
c00085bf:	83 ec 0c             	sub    esp,0xc
c00085c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085c6:	e8 a0 13 00 00       	call   c000996b <malloc>
c00085cb:	83 c4 10             	add    esp,0x10
c00085ce:	83 c4 0c             	add    esp,0xc
c00085d1:	c3                   	ret    
c00085d2:	66 90                	xchg   ax,ax

c00085d4 <ff_memfree>:
c00085d4:	83 ec 0c             	sub    esp,0xc
c00085d7:	83 ec 0c             	sub    esp,0xc
c00085da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085de:	e8 98 13 00 00       	call   c000997b <free>
c00085e3:	83 c4 10             	add    esp,0x10
c00085e6:	90                   	nop
c00085e7:	83 c4 0c             	add    esp,0xc
c00085ea:	c3                   	ret    
c00085eb:	90                   	nop

c00085ec <ff_uni2oem>:
c00085ec:	83 ec 14             	sub    esp,0x14
c00085ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085f3:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085f7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00085fe:	c7 44 24 0c e0 29 02 c0 	mov    DWORD PTR [esp+0xc],0xc00229e0
c0008606:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c000860b:	77 0b                	ja     c0008618 <ff_uni2oem+0x2c>
c000860d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008611:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008616:	eb 60                	jmp    c0008678 <ff_uni2oem+0x8c>
c0008618:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008620:	77 56                	ja     c0008678 <ff_uni2oem+0x8c>
c0008622:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008628:	75 4e                	jne    c0008678 <ff_uni2oem+0x8c>
c000862a:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008631:	eb 0d                	jmp    c0008640 <ff_uni2oem+0x54>
c0008633:	90                   	nop
c0008634:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008639:	40                   	inc    eax
c000863a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000863f:	90                   	nop
c0008640:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008646:	77 1c                	ja     c0008664 <ff_uni2oem+0x78>
c0008648:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000864d:	01 c0                	add    eax,eax
c000864f:	89 c2                	mov    edx,eax
c0008651:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008655:	01 d0                	add    eax,edx
c0008657:	66 8b 00             	mov    ax,WORD PTR [eax]
c000865a:	0f b7 c0             	movzx  eax,ax
c000865d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008661:	75 d1                	jne    c0008634 <ff_uni2oem+0x48>
c0008663:	90                   	nop
c0008664:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008669:	83 e8 80             	sub    eax,0xffffff80
c000866c:	25 ff 00 00 00       	and    eax,0xff
c0008671:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008676:	66 90                	xchg   ax,ax
c0008678:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000867d:	83 c4 14             	add    esp,0x14
c0008680:	c3                   	ret    
c0008681:	8d 76 00             	lea    esi,[esi+0x0]

c0008684 <ff_oem2uni>:
c0008684:	83 ec 18             	sub    esp,0x18
c0008687:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000868b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000868f:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008694:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008698:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000869f:	c7 44 24 10 e0 29 02 c0 	mov    DWORD PTR [esp+0x10],0xc00229e0
c00086a7:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086ad:	77 0d                	ja     c00086bc <ff_oem2uni+0x38>
c00086af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086b3:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086b8:	eb 32                	jmp    c00086ec <ff_oem2uni+0x68>
c00086ba:	66 90                	xchg   ax,ax
c00086bc:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086c2:	75 28                	jne    c00086ec <ff_oem2uni+0x68>
c00086c4:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086cb:	77 1f                	ja     c00086ec <ff_oem2uni+0x68>
c00086cd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086d2:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086d7:	01 c0                	add    eax,eax
c00086d9:	89 c2                	mov    edx,eax
c00086db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086df:	01 d0                	add    eax,edx
c00086e1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086e4:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086e9:	8d 76 00             	lea    esi,[esi+0x0]
c00086ec:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00086f1:	83 c4 18             	add    esp,0x18
c00086f4:	c3                   	ret    
c00086f5:	8d 76 00             	lea    esi,[esi+0x0]

c00086f8 <ff_wtoupper>:
c00086f8:	83 ec 10             	sub    esp,0x10
c00086fb:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008703:	0f 87 4f 01 00 00    	ja     c0008858 <ff_wtoupper+0x160>
c0008709:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000870d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008712:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008719:	77 09                	ja     c0008724 <ff_wtoupper+0x2c>
c000871b:	b8 e0 27 02 c0       	mov    eax,0xc00227e0
c0008720:	eb 0a                	jmp    c000872c <ff_wtoupper+0x34>
c0008722:	66 90                	xchg   ax,ax
c0008724:	b8 20 27 02 c0       	mov    eax,0xc0022720
c0008729:	8d 76 00             	lea    esi,[esi+0x0]
c000872c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008730:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008734:	8d 50 02             	lea    edx,[eax+0x2]
c0008737:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000873b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000873e:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008743:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008749:	0f 84 fd 00 00 00    	je     c000884c <ff_wtoupper+0x154>
c000874f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008754:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008759:	0f 82 ed 00 00 00    	jb     c000884c <ff_wtoupper+0x154>
c000875f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008763:	8d 50 02             	lea    edx,[eax+0x2]
c0008766:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000876a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000876d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008772:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008777:	66 c1 e8 08          	shr    ax,0x8
c000877b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008780:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008787:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000878c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008791:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008796:	01 ca                	add    edx,ecx
c0008798:	39 d0                	cmp    eax,edx
c000879a:	0f 8d 8c 00 00 00    	jge    c000882c <ff_wtoupper+0x134>
c00087a0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087a5:	83 f8 08             	cmp    eax,0x8
c00087a8:	0f 87 9a 00 00 00    	ja     c0008848 <ff_wtoupper+0x150>
c00087ae:	8b 04 85 e0 26 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd920]
c00087b5:	ff e0                	jmp    eax
c00087b7:	90                   	nop
c00087b8:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087bd:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087c2:	29 c2                	sub    edx,eax
c00087c4:	89 d0                	mov    eax,edx
c00087c6:	01 c0                	add    eax,eax
c00087c8:	89 c2                	mov    edx,eax
c00087ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087ce:	01 d0                	add    eax,edx
c00087d0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087d3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087d8:	eb 4e                	jmp    c0008828 <ff_wtoupper+0x130>
c00087da:	66 90                	xchg   ax,ax
c00087dc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087e1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087e5:	83 e0 01             	and    eax,0x1
c00087e8:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00087ed:	eb 39                	jmp    c0008828 <ff_wtoupper+0x130>
c00087ef:	90                   	nop
c00087f0:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00087f6:	eb 30                	jmp    c0008828 <ff_wtoupper+0x130>
c00087f8:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00087fe:	eb 28                	jmp    c0008828 <ff_wtoupper+0x130>
c0008800:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008806:	eb 20                	jmp    c0008828 <ff_wtoupper+0x130>
c0008808:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000880e:	eb 18                	jmp    c0008828 <ff_wtoupper+0x130>
c0008810:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008816:	eb 10                	jmp    c0008828 <ff_wtoupper+0x130>
c0008818:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000881e:	eb 08                	jmp    c0008828 <ff_wtoupper+0x130>
c0008820:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008827:	90                   	nop
c0008828:	eb 1e                	jmp    c0008848 <ff_wtoupper+0x150>
c000882a:	66 90                	xchg   ax,ax
c000882c:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0008832:	0f 85 f8 fe ff ff    	jne    c0008730 <ff_wtoupper+0x38>
c0008838:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000883d:	01 c0                	add    eax,eax
c000883f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0008843:	e9 e8 fe ff ff       	jmp    c0008730 <ff_wtoupper+0x38>
c0008848:	90                   	nop
c0008849:	8d 76 00             	lea    esi,[esi+0x0]
c000884c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008851:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008855:	8d 76 00             	lea    esi,[esi+0x0]
c0008858:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	c3                   	ret    

c0008860 <CPU::current()>:
c0008860:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c0008865:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000886b:	c3                   	ret    

c000886c <operator new(unsigned long)>:
c000886c:	e9 fa 10 00 00       	jmp    c000996b <malloc>

c0008871 <operator delete(void*)>:
c0008871:	e9 15 11 00 00       	jmp    c000998b <rfree>

c0008876 <disableIRQs()>:
c0008876:	fa                   	cli    
c0008877:	ff 05 a8 9b 02 c0    	inc    DWORD PTR ds:0xc0029ba8
c000887d:	c3                   	ret    

c000887e <enableIRQs()>:
c000887e:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c0008883:	48                   	dec    eax
c0008884:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c0008889:	75 01                	jne    c000888c <enableIRQs()+0xe>
c000888b:	fb                   	sti    
c000888c:	c3                   	ret    

c000888d <lockScheduler()>:
c000888d:	fa                   	cli    
c000888e:	ff 05 a8 9b 02 c0    	inc    DWORD PTR ds:0xc0029ba8
c0008894:	c3                   	ret    

c0008895 <unlockScheduler()>:
c0008895:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c000889a:	48                   	dec    eax
c000889b:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c00088a0:	75 01                	jne    c00088a3 <unlockScheduler()+0xe>
c00088a2:	fb                   	sti    
c00088a3:	c3                   	ret    

c00088a4 <lockStuff()>:
c00088a4:	fa                   	cli    
c00088a5:	ff 05 a8 9b 02 c0    	inc    DWORD PTR ds:0xc0029ba8
c00088ab:	ff 05 a4 9b 02 c0    	inc    DWORD PTR ds:0xc0029ba4
c00088b1:	c3                   	ret    

c00088b2 <unlockStuff()>:
c00088b2:	83 ec 0c             	sub    esp,0xc
c00088b5:	a1 a4 9b 02 c0       	mov    eax,ds:0xc0029ba4
c00088ba:	48                   	dec    eax
c00088bb:	a3 a4 9b 02 c0       	mov    ds:0xc0029ba4,eax
c00088c0:	75 18                	jne    c00088da <unlockStuff()+0x28>
c00088c2:	83 3d a0 9b 02 c0 00 	cmp    DWORD PTR ds:0xc0029ba0,0x0
c00088c9:	74 0f                	je     c00088da <unlockStuff()+0x28>
c00088cb:	c7 05 a0 9b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029ba0,0x0
c00088d5:	e8 92 dd 00 00       	call   c001666c <schedule()>
c00088da:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c00088df:	48                   	dec    eax
c00088e0:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c00088e5:	75 01                	jne    c00088e8 <unlockStuff()+0x36>
c00088e7:	fb                   	sti    
c00088e8:	83 c4 0c             	add    esp,0xc
c00088eb:	c3                   	ret    

c00088ec <Virt::getAKernelVAS()>:
c00088ec:	a1 b4 67 02 c0       	mov    eax,ds:0xc00267b4
c00088f1:	c3                   	ret    

c00088f2 <__not_memcpy>:
c00088f2:	57                   	push   edi
c00088f3:	56                   	push   esi
c00088f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00088f8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00088fc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008900:	89 c7                	mov    edi,eax
c0008902:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008904:	5e                   	pop    esi
c0008905:	5f                   	pop    edi
c0008906:	c3                   	ret    
c0008907:	90                   	nop

c0008908 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008908:	83 ec 0c             	sub    esp,0xc
c000890b:	83 ec 08             	sub    esp,0x8
c000890e:	68 e0 2a 02 c0       	push   0xc0022ae0
c0008913:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008917:	e8 a8 7e ff ff       	call   c00007c4 <strcmp>
c000891c:	83 c4 10             	add    esp,0x10
c000891f:	85 c0                	test   eax,eax
c0008921:	0f 94 c0             	sete   al
c0008924:	84 c0                	test   al,al
c0008926:	74 0c                	je     c0008934 <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008928:	b8 88 66 02 c0       	mov    eax,0xc0026688
c000892d:	e9 ea 00 00 00       	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008932:	66 90                	xchg   ax,ax
c0008934:	83 ec 08             	sub    esp,0x8
c0008937:	68 e9 2a 02 c0       	push   0xc0022ae9
c000893c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008940:	e8 7f 7e ff ff       	call   c00007c4 <strcmp>
c0008945:	83 c4 10             	add    esp,0x10
c0008948:	85 c0                	test   eax,eax
c000894a:	0f 94 c0             	sete   al
c000894d:	84 c0                	test   al,al
c000894f:	74 0b                	je     c000895c <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008951:	b8 50 17 02 c0       	mov    eax,0xc0021750
c0008956:	e9 c1 00 00 00       	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000895b:	90                   	nop
c000895c:	83 ec 08             	sub    esp,0x8
c000895f:	68 f3 2a 02 c0       	push   0xc0022af3
c0008964:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008968:	e8 57 7e ff ff       	call   c00007c4 <strcmp>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	85 c0                	test   eax,eax
c0008972:	0f 94 c0             	sete   al
c0008975:	84 c0                	test   al,al
c0008977:	74 0b                	je     c0008984 <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008979:	b8 84 14 02 c0       	mov    eax,0xc0021484
c000897e:	e9 99 00 00 00       	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008983:	90                   	nop
c0008984:	83 ec 08             	sub    esp,0x8
c0008987:	68 fc 2a 02 c0       	push   0xc0022afc
c000898c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008990:	e8 2f 7e ff ff       	call   c00007c4 <strcmp>
c0008995:	83 c4 10             	add    esp,0x10
c0008998:	85 c0                	test   eax,eax
c000899a:	0f 94 c0             	sete   al
c000899d:	84 c0                	test   al,al
c000899f:	74 07                	je     c00089a8 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089a1:	b8 50 18 02 c0       	mov    eax,0xc0021850
c00089a6:	eb 74                	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089a8:	83 ec 08             	sub    esp,0x8
c00089ab:	68 06 2b 02 c0       	push   0xc0022b06
c00089b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089b4:	e8 0b 7e ff ff       	call   c00007c4 <strcmp>
c00089b9:	83 c4 10             	add    esp,0x10
c00089bc:	85 c0                	test   eax,eax
c00089be:	0f 94 c0             	sete   al
c00089c1:	84 c0                	test   al,al
c00089c3:	74 07                	je     c00089cc <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089c5:	b8 d0 15 02 c0       	mov    eax,0xc00215d0
c00089ca:	eb 50                	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089cc:	83 ec 08             	sub    esp,0x8
c00089cf:	68 0f 2b 02 c0       	push   0xc0022b0f
c00089d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089d8:	e8 e7 7d ff ff       	call   c00007c4 <strcmp>
c00089dd:	83 c4 10             	add    esp,0x10
c00089e0:	85 c0                	test   eax,eax
c00089e2:	0f 94 c0             	sete   al
c00089e5:	84 c0                	test   al,al
c00089e7:	74 07                	je     c00089f0 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c00089e9:	b8 8c 66 02 c0       	mov    eax,0xc002668c
c00089ee:	eb 2c                	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089f0:	83 ec 08             	sub    esp,0x8
c00089f3:	68 1c 2b 02 c0       	push   0xc0022b1c
c00089f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089fc:	e8 c3 7d ff ff       	call   c00007c4 <strcmp>
c0008a01:	83 c4 10             	add    esp,0x10
c0008a04:	85 c0                	test   eax,eax
c0008a06:	0f 94 c0             	sete   al
c0008a09:	84 c0                	test   al,al
c0008a0b:	74 07                	je     c0008a14 <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a0d:	b8 8d 66 02 c0       	mov    eax,0xc002668d
c0008a12:	eb 08                	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a14:	b8 00 00 00 00       	mov    eax,0x0
c0008a19:	8d 76 00             	lea    esi,[esi+0x0]
c0008a1c:	83 c4 0c             	add    esp,0xc
c0008a1f:	c3                   	ret    

c0008a20 <Computer::close(int, int, void*)>:
c0008a20:	57                   	push   edi
c0008a21:	56                   	push   esi
c0008a22:	53                   	push   ebx
c0008a23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a27:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a2b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a2f:	83 ec 0c             	sub    esp,0xc
c0008a32:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a38:	e8 43 58 00 00       	call   c000e280 <Device::closeAll()>
c0008a3d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a43:	83 c4 10             	add    esp,0x10
c0008a46:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a48:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a4c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a54:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a58:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a5c:	5b                   	pop    ebx
c0008a5d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a60:	5e                   	pop    esi
c0008a61:	5f                   	pop    edi
c0008a62:	ff e0                	jmp    eax

c0008a64 <Krnl::firstTask()>:
c0008a64:	53                   	push   ebx
c0008a65:	83 ec 14             	sub    esp,0x14
c0008a68:	68 29 2b 02 c0       	push   0xc0022b29
c0008a6d:	e8 53 0f 00 00       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0008a72:	fb                   	sti    
c0008a73:	c7 04 24 40 2b 02 c0 	mov    DWORD PTR [esp],0xc0022b40
c0008a7a:	e8 46 0f 00 00       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0008a7f:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a86:	e8 e0 0e 00 00       	call   c000996b <malloc>
c0008a8b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a92:	89 c3                	mov    ebx,eax
c0008a94:	ff 35 d0 9b 02 c0    	push   DWORD PTR ds:0xc0029bd0
c0008a9a:	68 59 2b 02 c0       	push   0xc0022b59
c0008a9f:	6a 01                	push   0x1
c0008aa1:	50                   	push   eax
c0008aa2:	e8 a1 d7 00 00       	call   c0016248 <Process::Process(bool, char const*, Process*, char**)>
c0008aa7:	83 c4 20             	add    esp,0x20
c0008aaa:	68 ff 00 00 00       	push   0xff
c0008aaf:	6a 00                	push   0x0
c0008ab1:	68 b5 93 00 c0       	push   0xc00093b5
c0008ab6:	53                   	push   ebx
c0008ab7:	e8 94 d9 00 00       	call   c0016450 <Process::createThread(void (*)(void*), void*, int)>
c0008abc:	6a 7a                	push   0x7a
c0008abe:	6a 00                	push   0x0
c0008ac0:	68 94 6e 01 c0       	push   0xc0016e94
c0008ac5:	ff 35 d0 9b 02 c0    	push   DWORD PTR ds:0xc0029bd0
c0008acb:	e8 80 d9 00 00       	call   c0016450 <Process::createThread(void (*)(void*), void*, int)>
c0008ad0:	83 c4 14             	add    esp,0x14
c0008ad3:	a3 88 9b 02 c0       	mov    ds:0xc0029b88,eax
c0008ad8:	68 58 2c 02 c0       	push   0xc0022c58
c0008add:	c6 05 8d 66 02 c0 01 	mov    BYTE PTR ds:0xc002668d,0x1
c0008ae4:	e8 dc 0e 00 00       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0008ae9:	e8 81 e7 00 00       	call   c001726f <Vm::initialise8086()>
c0008aee:	e8 1d 45 00 00       	call   c000d010 <Fs::initVFS()>
c0008af3:	c7 04 24 66 2b 02 c0 	mov    DWORD PTR [esp],0xc0022b66
c0008afa:	e8 c6 0e 00 00       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0008aff:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c0008b04:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b0a:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b0c:	6a 00                	push   0x0
c0008b0e:	6a 00                	push   0x0
c0008b10:	6a 00                	push   0x0
c0008b12:	50                   	push   eax
c0008b13:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b16:	83 c4 14             	add    esp,0x14
c0008b19:	68 58 2c 02 c0       	push   0xc0022c58
c0008b1e:	e8 a2 0e 00 00       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0008b23:	e8 94 bf 00 00       	call   c0014abc <Sys::loadSyscalls()>
c0008b28:	e8 d1 a3 00 00       	call   c0012efe <Krnl::loadSystemEnv()>
c0008b2d:	e8 23 a8 00 00       	call   c0013355 <Krnl::setupPowerManager()>
c0008b32:	83 c4 0c             	add    esp,0xc
c0008b35:	6a 3a                	push   0x3a
c0008b37:	68 80 2b 02 c0       	push   0xc0022b80
c0008b3c:	68 89 2b 02 c0       	push   0xc0022b89
c0008b41:	e8 39 ad 00 00       	call   c001387f <Reg::readIntWithDefault(char*, char*, int)>
c0008b46:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b49:	e8 1e 50 00 00       	call   c000db6c <User::loadClockSettings(int)>
c0008b4e:	c7 04 24 7c 2c 02 c0 	mov    DWORD PTR [esp],0xc0022c7c
c0008b55:	e8 6b 0e 00 00       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0008b5a:	58                   	pop    eax
c0008b5b:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c0008b60:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b66:	e8 d5 56 00 00       	call   c000e240 <Device::loadDriversForAll()>
c0008b6b:	c7 04 24 91 2b 02 c0 	mov    DWORD PTR [esp],0xc0022b91
c0008b72:	e8 4e 0e 00 00       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0008b77:	e8 ea 9e 00 00       	call   c0012a66 <Krnl::startCPUs()>
c0008b7c:	c7 04 24 ab 2b 02 c0 	mov    DWORD PTR [esp],0xc0022bab
c0008b83:	e8 3d 0e 00 00       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0008b88:	5a                   	pop    edx
c0008b89:	8b 1d 88 66 02 c0    	mov    ebx,DWORD PTR ds:0xc0026688
c0008b8f:	59                   	pop    ecx
c0008b90:	6a 01                	push   0x1
c0008b92:	68 bc 2b 02 c0       	push   0xc0022bbc
c0008b97:	e8 f0 d0 00 00       	call   c0015c8c <Thr::loadDLL(char const*, bool)>
c0008b9c:	5a                   	pop    edx
c0008b9d:	59                   	pop    ecx
c0008b9e:	53                   	push   ebx
c0008b9f:	50                   	push   eax
c0008ba0:	e8 18 d3 00 00       	call   c0015ebd <Thr::executeDLL(unsigned long, void*)>
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	83 ec 0c             	sub    esp,0xc
c0008bab:	6a 02                	push   0x2
c0008bad:	e8 b2 dc 00 00       	call   c0016864 <blockTask(TaskState)>
c0008bb2:	83 c4 10             	add    esp,0x10
c0008bb5:	eb f1                	jmp    c0008ba8 <Krnl::firstTask()+0x144>
c0008bb7:	90                   	nop

c0008bb8 <Computer::Computer()>:
c0008bb8:	83 ec 0c             	sub    esp,0xc
c0008bbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bbf:	83 ec 08             	sub    esp,0x8
c0008bc2:	68 d8 2b 02 c0       	push   0xc0022bd8
c0008bc7:	50                   	push   eax
c0008bc8:	e8 2d 57 00 00       	call   c000e2fa <Device::Device(char const*)>
c0008bcd:	83 c4 10             	add    esp,0x10
c0008bd0:	ba ec 2c 02 c0       	mov    edx,0xc0022cec
c0008bd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bd9:	89 10                	mov    DWORD PTR [eax],edx
c0008bdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bdf:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008be9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bed:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008bf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bfb:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c01:	83 ca 04             	or     edx,0x4
c0008c04:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c0e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c14:	0f b6 d0             	movzx  edx,al
c0008c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c1b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c26:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c2c:	0f b6 d0             	movzx  edx,al
c0008c2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c33:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c42:	8d 50 01             	lea    edx,[eax+0x1]
c0008c45:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c49:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c4f:	0f b6 d0             	movzx  edx,al
c0008c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c56:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c5a:	83 e1 3f             	and    ecx,0x3f
c0008c5d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c65:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c6b:	0f b6 d0             	movzx  edx,al
c0008c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c72:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c83:	0f b6 d0             	movzx  edx,al
c0008c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8a:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008c8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c93:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c99:	8d 50 01             	lea    edx,[eax+0x1]
c0008c9c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ca0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008ca6:	0f b6 d0             	movzx  edx,al
c0008ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cad:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cb1:	83 e1 3f             	and    ecx,0x3f
c0008cb4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cc2:	0f b6 d0             	movzx  edx,al
c0008cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc9:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cda:	0f b6 d0             	movzx  edx,al
c0008cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce1:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008ce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cea:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf0:	8d 50 01             	lea    edx,[eax+0x1]
c0008cf3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cf7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cfd:	0f b6 d0             	movzx  edx,al
c0008d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d04:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d08:	83 e1 3f             	and    ecx,0x3f
c0008d0b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d0f:	90                   	nop
c0008d10:	83 c4 0c             	add    esp,0xc
c0008d13:	c3                   	ret    

c0008d14 <Computer::setBootMessage(char const*)>:
c0008d14:	c3                   	ret    
c0008d15:	90                   	nop

c0008d16 <Computer::detectFeatures()>:
c0008d16:	55                   	push   ebp
c0008d17:	57                   	push   edi
c0008d18:	56                   	push   esi
c0008d19:	53                   	push   ebx
c0008d1a:	83 ec 1c             	sub    esp,0x1c
c0008d1d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d21:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d2b:	e8 e9 74 ff ff       	call   c0000219 <detectCPUID>
c0008d30:	85 c0                	test   eax,eax
c0008d32:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d38:	0f 95 c2             	setne  dl
c0008d3b:	83 e0 fd             	and    eax,0xfffffffd
c0008d3e:	d1 e2                	shl    edx,1
c0008d40:	09 d0                	or     eax,edx
c0008d42:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d48:	a8 02                	test   al,0x2
c0008d4a:	75 46                	jne    c0008d92 <Computer::detectFeatures()+0x7c>
c0008d4c:	f6 05 a1 66 02 c0 04 	test   BYTE PTR ds:0xc00266a1,0x4
c0008d53:	74 07                	je     c0008d5c <Computer::detectFeatures()+0x46>
c0008d55:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d5c:	e8 b5 86 01 00       	call   c0021416 <x87Detect>
c0008d61:	83 e0 01             	and    eax,0x1
c0008d64:	c1 e0 04             	shl    eax,0x4
c0008d67:	88 c2                	mov    dl,al
c0008d69:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d6f:	83 e0 ef             	and    eax,0xffffffef
c0008d72:	09 d0                	or     eax,edx
c0008d74:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d7a:	a8 10                	test   al,0x10
c0008d7c:	0f 85 2a 01 00 00    	jne    c0008eac <Computer::detectFeatures()+0x196>
c0008d82:	84 c0                	test   al,al
c0008d84:	0f 88 45 01 00 00    	js     c0008ecf <Computer::detectFeatures()+0x1b9>
c0008d8a:	83 c4 1c             	add    esp,0x1c
c0008d8d:	5b                   	pop    ebx
c0008d8e:	5e                   	pop    esi
c0008d8f:	5f                   	pop    edi
c0008d90:	5d                   	pop    ebp
c0008d91:	c3                   	ret    
c0008d92:	83 ec 0c             	sub    esp,0xc
c0008d95:	6a 20                	push   0x20
c0008d97:	e8 e4 8e 00 00       	call   c0011c80 <CPU::cpuidCheckEDX(unsigned int)>
c0008d9c:	83 e0 01             	and    eax,0x1
c0008d9f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008da6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008dac:	83 e0 f7             	and    eax,0xfffffff7
c0008daf:	09 d0                	or     eax,edx
c0008db1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008db7:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dbe:	e8 bd 8e 00 00       	call   c0011c80 <CPU::cpuidCheckEDX(unsigned int)>
c0008dc3:	83 e0 01             	and    eax,0x1
c0008dc6:	88 c2                	mov    dl,al
c0008dc8:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008dce:	83 e0 fe             	and    eax,0xfffffffe
c0008dd1:	09 d0                	or     eax,edx
c0008dd3:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008dd9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008de0:	e8 9b 8e 00 00       	call   c0011c80 <CPU::cpuidCheckEDX(unsigned int)>
c0008de5:	c1 e0 07             	shl    eax,0x7
c0008de8:	88 c2                	mov    dl,al
c0008dea:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008df0:	83 e0 7f             	and    eax,0x7f
c0008df3:	09 d0                	or     eax,edx
c0008df5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008dfb:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e02:	e8 79 8e 00 00       	call   c0011c80 <CPU::cpuidCheckEDX(unsigned int)>
c0008e07:	83 c4 10             	add    esp,0x10
c0008e0a:	83 e0 01             	and    eax,0x1
c0008e0d:	c1 e0 05             	shl    eax,0x5
c0008e10:	88 c2                	mov    dl,al
c0008e12:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e18:	83 e0 df             	and    eax,0xffffffdf
c0008e1b:	09 d0                	or     eax,edx
c0008e1d:	f7 05 a0 66 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00266a0,0x401
c0008e27:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e2d:	0f 84 c2 00 00 00    	je     c0008ef5 <Computer::detectFeatures()+0x1df>
c0008e33:	83 e0 fe             	and    eax,0xfffffffe
c0008e36:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e3c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e42:	88 c2                	mov    dl,al
c0008e44:	83 e2 09             	and    edx,0x9
c0008e47:	fe ca                	dec    dl
c0008e49:	75 09                	jne    c0008e54 <Computer::detectFeatures()+0x13e>
c0008e4b:	83 e0 fe             	and    eax,0xfffffffe
c0008e4e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e54:	83 ec 0c             	sub    esp,0xc
c0008e57:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e5b:	50                   	push   eax
c0008e5c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e60:	55                   	push   ebp
c0008e61:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e65:	57                   	push   edi
c0008e66:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e6a:	56                   	push   esi
c0008e6b:	68 00 00 00 80       	push   0x80000000
c0008e70:	e8 87 8d 00 00       	call   c0011bfc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e75:	83 c4 20             	add    esp,0x20
c0008e78:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e7f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e83:	0f 86 c3 fe ff ff    	jbe    c0008d4c <Computer::detectFeatures()+0x36>
c0008e89:	83 ec 0c             	sub    esp,0xc
c0008e8c:	50                   	push   eax
c0008e8d:	55                   	push   ebp
c0008e8e:	57                   	push   edi
c0008e8f:	56                   	push   esi
c0008e90:	68 01 00 00 80       	push   0x80000001
c0008e95:	e8 62 8d 00 00       	call   c0011bfc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e9a:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008ea4:	83 c4 20             	add    esp,0x20
c0008ea7:	e9 a0 fe ff ff       	jmp    c0008d4c <Computer::detectFeatures()+0x36>
c0008eac:	e8 1f 85 01 00       	call   c00213d0 <absolutelyNoChanceInHell>
c0008eb1:	88 c2                	mov    dl,al
c0008eb3:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008eb9:	c1 e2 07             	shl    edx,0x7
c0008ebc:	83 e0 7f             	and    eax,0x7f
c0008ebf:	09 d0                	or     eax,edx
c0008ec1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ec7:	84 c0                	test   al,al
c0008ec9:	0f 89 bb fe ff ff    	jns    c0008d8a <Computer::detectFeatures()+0x74>
c0008ecf:	e8 5c 84 01 00       	call   c0021330 <avxDetect>
c0008ed4:	83 e0 01             	and    eax,0x1
c0008ed7:	c1 e0 05             	shl    eax,0x5
c0008eda:	88 c2                	mov    dl,al
c0008edc:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008ee2:	83 e0 df             	and    eax,0xffffffdf
c0008ee5:	09 d0                	or     eax,edx
c0008ee7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008eed:	83 c4 1c             	add    esp,0x1c
c0008ef0:	5b                   	pop    ebx
c0008ef1:	5e                   	pop    esi
c0008ef2:	5f                   	pop    edi
c0008ef3:	5d                   	pop    ebp
c0008ef4:	c3                   	ret    
c0008ef5:	83 ec 0c             	sub    esp,0xc
c0008ef8:	68 00 02 00 00       	push   0x200
c0008efd:	e8 7e 8d 00 00       	call   c0011c80 <CPU::cpuidCheckEDX(unsigned int)>
c0008f02:	83 c4 10             	add    esp,0x10
c0008f05:	83 e0 01             	and    eax,0x1
c0008f08:	88 c2                	mov    dl,al
c0008f0a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f10:	83 e0 fe             	and    eax,0xfffffffe
c0008f13:	09 d0                	or     eax,edx
c0008f15:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f1b:	e9 1c ff ff ff       	jmp    c0008e3c <Computer::detectFeatures()+0x126>

c0008f20 <Computer::displayFeatures()>:
c0008f20:	c3                   	ret    
c0008f21:	90                   	nop

c0008f22 <Computer::rdmsr(unsigned int)>:
c0008f22:	83 ec 0c             	sub    esp,0xc
c0008f25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f29:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f30:	74 0a                	je     c0008f3c <Computer::rdmsr(unsigned int)+0x1a>
c0008f32:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f36:	0f 32                	rdmsr  
c0008f38:	83 c4 0c             	add    esp,0xc
c0008f3b:	c3                   	ret    
c0008f3c:	83 ec 0c             	sub    esp,0xc
c0008f3f:	68 e1 2b 02 c0       	push   0xc0022be1
c0008f44:	e8 be a0 00 00       	call   c0013007 <Krnl::panic(char const*)>
c0008f49:	83 c4 10             	add    esp,0x10
c0008f4c:	eb e4                	jmp    c0008f32 <Computer::rdmsr(unsigned int)+0x10>

c0008f4e <Computer::wrmsr(unsigned int, unsigned long long)>:
c0008f4e:	57                   	push   edi
c0008f4f:	56                   	push   esi
c0008f50:	52                   	push   edx
c0008f51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f55:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008f59:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008f5d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f64:	74 0e                	je     c0008f74 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0008f66:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f6a:	89 f0                	mov    eax,esi
c0008f6c:	89 fa                	mov    edx,edi
c0008f6e:	0f 30                	wrmsr  
c0008f70:	58                   	pop    eax
c0008f71:	5e                   	pop    esi
c0008f72:	5f                   	pop    edi
c0008f73:	c3                   	ret    
c0008f74:	83 ec 0c             	sub    esp,0xc
c0008f77:	68 e7 2b 02 c0       	push   0xc0022be7
c0008f7c:	e8 86 a0 00 00       	call   c0013007 <Krnl::panic(char const*)>
c0008f81:	83 c4 10             	add    esp,0x10
c0008f84:	eb e0                	jmp    c0008f66 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0008f86 <Computer::shutdown()>:
c0008f86:	83 ec 0c             	sub    esp,0xc
c0008f89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0008f8f:	6a 00                	push   0x0
c0008f91:	6a 00                	push   0x0
c0008f93:	6a 00                	push   0x0
c0008f95:	50                   	push   eax
c0008f96:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0008f99:	83 c4 1c             	add    esp,0x1c
c0008f9c:	c3                   	ret    
c0008f9d:	90                   	nop

c0008f9e <Computer::restart()>:
c0008f9e:	83 ec 0c             	sub    esp,0xc
c0008fa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008fa5:	8b 10                	mov    edx,DWORD PTR [eax]
c0008fa7:	6a 00                	push   0x0
c0008fa9:	6a 00                	push   0x0
c0008fab:	6a 01                	push   0x1
c0008fad:	50                   	push   eax
c0008fae:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0008fb1:	83 c4 1c             	add    esp,0x1c
c0008fb4:	c3                   	ret    
c0008fb5:	90                   	nop

c0008fb6 <Computer::sleep()>:
c0008fb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fba:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008fc0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008fc4:	e9 eb 86 00 00       	jmp    c00116b4 <ACPI::sleep()>
c0008fc9:	90                   	nop

c0008fca <Computer::nmiEnabled()>:
c0008fca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fce:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0008fd4:	c3                   	ret    
c0008fd5:	90                   	nop

c0008fd6 <Computer::readCMOS(unsigned char)>:
c0008fd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fda:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0008fe1:	19 c0                	sbb    eax,eax
c0008fe3:	83 e0 80             	and    eax,0xffffff80
c0008fe6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0008fea:	e6 70                	out    0x70,al
c0008fec:	e4 71                	in     al,0x71
c0008fee:	c3                   	ret    
c0008fef:	90                   	nop

c0008ff0 <Computer::enableNMI(bool)>:
c0008ff0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008ff4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008ff8:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0008ffe:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0009006:	eb ce                	jmp    c0008fd6 <Computer::readCMOS(unsigned char)>

c0009008 <Computer::open(int, int, void*)>:
c0009008:	56                   	push   esi
c0009009:	53                   	push   ebx
c000900a:	83 ec 10             	sub    esp,0x10
c000900d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009011:	68 9c 2c 02 c0       	push   0xc0022c9c
c0009016:	e8 aa 09 00 00       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c000901b:	f6 05 a0 66 02 c0 04 	test   BYTE PTR ds:0xc00266a0,0x4
c0009022:	c7 04 24 ed 2b 02 c0 	mov    DWORD PTR [esp],0xc0022bed
c0009029:	0f 94 05 20 5d 02 c0 	sete   BYTE PTR ds:0xc0025d20
c0009030:	e8 90 09 00 00       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0009035:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000903c:	e8 2a 09 00 00       	call   c000996b <malloc>
c0009041:	89 04 24             	mov    DWORD PTR [esp],eax
c0009044:	89 c6                	mov    esi,eax
c0009046:	e8 21 7f 00 00       	call   c0010f6c <ACPI::ACPI()>
c000904b:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c0009051:	58                   	pop    eax
c0009052:	5a                   	pop    edx
c0009053:	56                   	push   esi
c0009054:	53                   	push   ebx
c0009055:	e8 9c 50 00 00       	call   c000e0f6 <Device::addChild(Device*)>
c000905a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000905d:	e8 b4 fc ff ff       	call   c0008d16 <Computer::detectFeatures()>
c0009062:	59                   	pop    ecx
c0009063:	5e                   	pop    esi
c0009064:	6a 01                	push   0x1
c0009066:	53                   	push   ebx
c0009067:	e8 84 ff ff ff       	call   c0008ff0 <Computer::enableNMI(bool)>
c000906c:	c7 04 24 91 2b 02 c0 	mov    DWORD PTR [esp],0xc0022b91
c0009073:	e8 4d 09 00 00       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0009078:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c000907f:	e8 e7 08 00 00       	call   c000996b <malloc>
c0009084:	89 04 24             	mov    DWORD PTR [esp],eax
c0009087:	89 c6                	mov    esi,eax
c0009089:	e8 aa 8c 00 00       	call   c0011d38 <CPU::CPU()>
c000908e:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0009094:	58                   	pop    eax
c0009095:	5a                   	pop    edx
c0009096:	56                   	push   esi
c0009097:	53                   	push   ebx
c0009098:	e8 59 50 00 00       	call   c000e0f6 <Device::addChild(Device*)>
c000909d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00090a3:	8b 10                	mov    edx,DWORD PTR [eax]
c00090a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00090a9:	6a 00                	push   0x0
c00090ab:	6a 00                	push   0x0
c00090ad:	50                   	push   eax
c00090ae:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00090b1:	83 c4 14             	add    esp,0x14
c00090b4:	68 c0 2c 02 c0       	push   0xc0022cc0
c00090b9:	e8 07 09 00 00       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c00090be:	e8 37 09 01 00       	call   c00199fa <Hal::initialiseCoprocessor()>
c00090c3:	c7 04 24 05 2c 02 c0 	mov    DWORD PTR [esp],0xc0022c05
c00090ca:	e8 f6 08 00 00       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c00090cf:	c7 04 24 64 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a64
c00090d6:	e8 89 d4 00 00       	call   c0016564 <setupMultitasking(void (*)())>
c00090db:	83 c4 14             	add    esp,0x14
c00090de:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00090e3:	5b                   	pop    ebx
c00090e4:	5e                   	pop    esi
c00090e5:	c3                   	ret    

c00090e6 <Computer::disableNMI()>:
c00090e6:	6a 00                	push   0x0
c00090e8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00090ec:	e8 ff fe ff ff       	call   c0008ff0 <Computer::enableNMI(bool)>
c00090f1:	58                   	pop    eax
c00090f2:	5a                   	pop    edx
c00090f3:	c3                   	ret    

c00090f4 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00090f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090f8:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c00090ff:	19 c0                	sbb    eax,eax
c0009101:	83 e0 80             	and    eax,0xffffff80
c0009104:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009108:	e6 70                	out    0x70,al
c000910a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000910e:	e6 71                	out    0x71,al
c0009110:	c3                   	ret    
c0009111:	90                   	nop

c0009112 <Computer::handleNMI()>:
c0009112:	56                   	push   esi
c0009113:	53                   	push   ebx
c0009114:	83 ec 10             	sub    esp,0x10
c0009117:	e4 92                	in     al,0x92
c0009119:	89 c6                	mov    esi,eax
c000911b:	e4 61                	in     al,0x61
c000911d:	68 20 2c 02 c0       	push   0xc0022c20
c0009122:	88 c3                	mov    bl,al
c0009124:	e8 50 3b 00 00       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0009129:	83 c4 10             	add    esp,0x10
c000912c:	83 e6 10             	and    esi,0x10
c000912f:	75 0d                	jne    c000913e <Computer::handleNMI()+0x2c>
c0009131:	f6 c3 40             	test   bl,0x40
c0009134:	75 1d                	jne    c0009153 <Computer::handleNMI()+0x41>
c0009136:	84 db                	test   bl,bl
c0009138:	78 2d                	js     c0009167 <Computer::handleNMI()+0x55>
c000913a:	58                   	pop    eax
c000913b:	5b                   	pop    ebx
c000913c:	5e                   	pop    esi
c000913d:	c3                   	ret    
c000913e:	83 ec 0c             	sub    esp,0xc
c0009141:	68 31 2c 02 c0       	push   0xc0022c31
c0009146:	e8 bc 9e 00 00       	call   c0013007 <Krnl::panic(char const*)>
c000914b:	83 c4 10             	add    esp,0x10
c000914e:	f6 c3 40             	test   bl,0x40
c0009151:	74 e3                	je     c0009136 <Computer::handleNMI()+0x24>
c0009153:	83 ec 0c             	sub    esp,0xc
c0009156:	68 3e 2c 02 c0       	push   0xc0022c3e
c000915b:	e8 a7 9e 00 00       	call   c0013007 <Krnl::panic(char const*)>
c0009160:	83 c4 10             	add    esp,0x10
c0009163:	84 db                	test   bl,bl
c0009165:	79 d3                	jns    c000913a <Computer::handleNMI()+0x28>
c0009167:	c7 44 24 10 48 2c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022c48
c000916f:	5a                   	pop    edx
c0009170:	5b                   	pop    ebx
c0009171:	5e                   	pop    esi
c0009172:	e9 90 9e 00 00       	jmp    c0013007 <Krnl::panic(char const*)>
c0009177:	90                   	nop

c0009178 <Computer::setDiskActivityLight(int, bool)>:
c0009178:	56                   	push   esi
c0009179:	53                   	push   ebx
c000917a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000917e:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009183:	77 1b                	ja     c00091a0 <Computer::setDiskActivityLight(int, bool)+0x28>
c0009185:	e4 92                	in     al,0x92
c0009187:	bb 40 00 00 00       	mov    ebx,0x40
c000918c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0009190:	89 da                	mov    edx,ebx
c0009192:	d3 e2                	shl    edx,cl
c0009194:	89 f1                	mov    ecx,esi
c0009196:	f7 d2                	not    edx
c0009198:	d3 e3                	shl    ebx,cl
c000919a:	21 d0                	and    eax,edx
c000919c:	09 d8                	or     eax,ebx
c000919e:	e6 92                	out    0x92,al
c00091a0:	5b                   	pop    ebx
c00091a1:	5e                   	pop    esi
c00091a2:	c3                   	ret    
c00091a3:	90                   	nop

c00091a4 <GDTEntry::setBase(unsigned int)>:
c00091a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00091a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00091ac:	89 c1                	mov    ecx,eax
c00091ae:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00091b2:	c1 e9 10             	shr    ecx,0x10
c00091b5:	c1 e8 18             	shr    eax,0x18
c00091b8:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c00091bb:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c00091be:	c3                   	ret    
c00091bf:	90                   	nop

c00091c0 <GDTEntry::setLimit(unsigned int)>:
c00091c0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00091c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00091c8:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c00091cb:	66 89 01             	mov    WORD PTR [ecx],ax
c00091ce:	83 e2 f0             	and    edx,0xfffffff0
c00091d1:	c1 e8 10             	shr    eax,0x10
c00091d4:	83 e0 0f             	and    eax,0xf
c00091d7:	09 d0                	or     eax,edx
c00091d9:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c00091dc:	c3                   	ret    
c00091dd:	90                   	nop

c00091de <GDT::GDT()>:
c00091de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00091e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091ec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00091f2:	90                   	nop
c00091f3:	c3                   	ret    

c00091f4 <GDT::addEntry(GDTEntry)>:
c00091f4:	53                   	push   ebx
c00091f5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00091f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00091fd:	8b 02                	mov    eax,DWORD PTR [edx]
c00091ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009203:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0009207:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000920b:	8d 48 01             	lea    ecx,[eax+0x1]
c000920e:	c1 e0 03             	shl    eax,0x3
c0009211:	89 0a                	mov    DWORD PTR [edx],ecx
c0009213:	5b                   	pop    ebx
c0009214:	c3                   	ret    
c0009215:	90                   	nop

c0009216 <GDT::getNumberOfEntries()>:
c0009216:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000921a:	8b 00                	mov    eax,DWORD PTR [eax]
c000921c:	c3                   	ret    
c000921d:	90                   	nop

c000921e <GDT::flush()>:
c000921e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009222:	8b 10                	mov    edx,DWORD PTR [eax]
c0009224:	83 c0 04             	add    eax,0x4
c0009227:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000922e:	a3 92 66 02 c0       	mov    ds:0xc0026692,eax
c0009233:	66 89 15 90 66 02 c0 	mov    WORD PTR ds:0xc0026690,dx
c000923a:	e9 3e 71 ff ff       	jmp    c000037d <loadGDT>
c000923f:	90                   	nop

c0009240 <GDT::setup()>:
c0009240:	57                   	push   edi
c0009241:	56                   	push   esi
c0009242:	53                   	push   ebx
c0009243:	83 ec 40             	sub    esp,0x40
c0009246:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000924a:	6a 00                	push   0x0
c000924c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0009250:	56                   	push   esi
c0009251:	e8 4e ff ff ff       	call   c00091a4 <GDTEntry::setBase(unsigned int)>
c0009256:	6a 00                	push   0x0
c0009258:	56                   	push   esi
c0009259:	e8 62 ff ff ff       	call   c00091c0 <GDTEntry::setLimit(unsigned int)>
c000925e:	81 64 24 3c ff 00 0f ff 	and    DWORD PTR [esp+0x3c],0xff0f00ff
c0009266:	6a 00                	push   0x0
c0009268:	8d 74 24 44          	lea    esi,[esp+0x44]
c000926c:	56                   	push   esi
c000926d:	e8 32 ff ff ff       	call   c00091a4 <GDTEntry::setBase(unsigned int)>
c0009272:	68 ff ff ff 00       	push   0xffffff
c0009277:	56                   	push   esi
c0009278:	e8 43 ff ff ff       	call   c00091c0 <GDTEntry::setLimit(unsigned int)>
c000927d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0009281:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0009286:	0d 00 9a c0 00       	or     eax,0xc09a00
c000928b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000928f:	83 c4 20             	add    esp,0x20
c0009292:	6a 00                	push   0x0
c0009294:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0009298:	56                   	push   esi
c0009299:	e8 06 ff ff ff       	call   c00091a4 <GDTEntry::setBase(unsigned int)>
c000929e:	68 ff ff ff 00       	push   0xffffff
c00092a3:	56                   	push   esi
c00092a4:	e8 17 ff ff ff       	call   c00091c0 <GDTEntry::setLimit(unsigned int)>
c00092a9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00092ad:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00092b1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00092b5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00092b9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092bd:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00092c2:	0d 00 92 c0 00       	or     eax,0xc09200
c00092c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00092cb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00092cf:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00092d3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00092df:	89 fa                	mov    edx,edi
c00092e1:	80 cc 60             	or     ah,0x60
c00092e4:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c00092ea:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00092ee:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00092f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092f6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00092fa:	80 cc 60             	or     ah,0x60
c00092fd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009301:	89 f8                	mov    eax,edi
c0009303:	25 ff ff 00 ff       	and    eax,0xff00ffff
c0009308:	09 d0                	or     eax,edx
c000930a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000930e:	89 c7                	mov    edi,eax
c0009310:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009314:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0009318:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000931c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009320:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c0009326:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000932a:	25 ff ff 00 ff       	and    eax,0xff00ffff
c000932f:	09 d0                	or     eax,edx
c0009331:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009335:	83 c4 0c             	add    esp,0xc
c0009338:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000933c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009340:	53                   	push   ebx
c0009341:	e8 ae fe ff ff       	call   c00091f4 <GDT::addEntry(GDTEntry)>
c0009346:	83 c4 0c             	add    esp,0xc
c0009349:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000934d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009351:	53                   	push   ebx
c0009352:	e8 9d fe ff ff       	call   c00091f4 <GDT::addEntry(GDTEntry)>
c0009357:	83 c4 0c             	add    esp,0xc
c000935a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000935e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0009362:	53                   	push   ebx
c0009363:	e8 8c fe ff ff       	call   c00091f4 <GDT::addEntry(GDTEntry)>
c0009368:	83 c4 0c             	add    esp,0xc
c000936b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000936f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009373:	53                   	push   ebx
c0009374:	e8 7b fe ff ff       	call   c00091f4 <GDT::addEntry(GDTEntry)>
c0009379:	83 c4 0c             	add    esp,0xc
c000937c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009380:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009384:	53                   	push   ebx
c0009385:	e8 6a fe ff ff       	call   c00091f4 <GDT::addEntry(GDTEntry)>
c000938a:	83 c4 0c             	add    esp,0xc
c000938d:	57                   	push   edi
c000938e:	56                   	push   esi
c000938f:	53                   	push   ebx
c0009390:	e8 5f fe ff ff       	call   c00091f4 <GDT::addEntry(GDTEntry)>
c0009395:	83 c4 0c             	add    esp,0xc
c0009398:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000939c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093a0:	53                   	push   ebx
c00093a1:	e8 4e fe ff ff       	call   c00091f4 <GDT::addEntry(GDTEntry)>
c00093a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00093a9:	e8 70 fe ff ff       	call   c000921e <GDT::flush()>
c00093ae:	83 c4 50             	add    esp,0x50
c00093b1:	5b                   	pop    ebx
c00093b2:	5e                   	pop    esi
c00093b3:	5f                   	pop    edi
c00093b4:	c3                   	ret    

c00093b5 <idleFunction(void*)>:
c00093b5:	83 ec 0c             	sub    esp,0xc
c00093b8:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c00093bd:	48                   	dec    eax
c00093be:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c00093c3:	75 01                	jne    c00093c6 <idleFunction(void*)+0x11>
c00093c5:	fb                   	sti    
c00093c6:	f4                   	hlt    
c00093c7:	e8 06 86 01 00       	call   c00219d2 <idleCommon()>
c00093cc:	eb f8                	jmp    c00093c6 <idleFunction(void*)+0x11>
c00093ce:	66 90                	xchg   ax,ax

c00093d0 <IDTEntry::IDTEntry(bool)>:
c00093d0:	83 ec 04             	sub    esp,0x4
c00093d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093d7:	88 04 24             	mov    BYTE PTR [esp],al
c00093da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093de:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00093e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093e8:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00093ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093f0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00093f3:	83 e2 f0             	and    edx,0xfffffff0
c00093f6:	83 ca 0e             	or     edx,0xe
c00093f9:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00093fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009400:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0009403:	83 e2 ef             	and    edx,0xffffffef
c0009406:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009409:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000940d:	74 05                	je     c0009414 <IDTEntry::IDTEntry(bool)+0x44>
c000940f:	b2 03                	mov    dl,0x3
c0009411:	eb 05                	jmp    c0009418 <IDTEntry::IDTEntry(bool)+0x48>
c0009413:	90                   	nop
c0009414:	b2 00                	mov    dl,0x0
c0009416:	66 90                	xchg   ax,ax
c0009418:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000941c:	83 e2 03             	and    edx,0x3
c000941f:	88 d1                	mov    cl,dl
c0009421:	c1 e1 05             	shl    ecx,0x5
c0009424:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0009427:	83 e2 9f             	and    edx,0xffffff9f
c000942a:	09 ca                	or     edx,ecx
c000942c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000942f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009433:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0009436:	83 ca 80             	or     edx,0xffffff80
c0009439:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000943c:	90                   	nop
c000943d:	83 c4 04             	add    esp,0x4
c0009440:	c3                   	ret    
c0009441:	90                   	nop

c0009442 <IDTEntry::setOffset(unsigned int)>:
c0009442:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009446:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000944a:	66 89 02             	mov    WORD PTR [edx],ax
c000944d:	c1 e8 10             	shr    eax,0x10
c0009450:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0009454:	c3                   	ret    
c0009455:	90                   	nop
c0009456:	66 90                	xchg   ax,ax

c0009458 <IDT::IDT()>:
c0009458:	90                   	nop
c0009459:	c3                   	ret    

c000945a <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000945a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000945e:	83 c0 30             	add    eax,0x30
c0009461:	c3                   	ret    

c0009462 <IDT::addEntry(IDTEntry, int)>:
c0009462:	53                   	push   ebx
c0009463:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009467:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000946b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000946f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009473:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c0009476:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000947a:	5b                   	pop    ebx
c000947b:	c3                   	ret    

c000947c <IDT::addEntry(int, void (*)(), bool)>:
c000947c:	53                   	push   ebx
c000947d:	83 ec 10             	sub    esp,0x10
c0009480:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0009485:	50                   	push   eax
c0009486:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000948a:	53                   	push   ebx
c000948b:	e8 40 ff ff ff       	call   c00093d0 <IDTEntry::IDTEntry(bool)>
c0009490:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009494:	53                   	push   ebx
c0009495:	e8 a8 ff ff ff       	call   c0009442 <IDTEntry::setOffset(unsigned int)>
c000949a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000949e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00094a2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00094a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00094aa:	e8 b3 ff ff ff       	call   c0009462 <IDT::addEntry(IDTEntry, int)>
c00094af:	83 c4 30             	add    esp,0x30
c00094b2:	5b                   	pop    ebx
c00094b3:	c3                   	ret    

c00094b4 <IDT::flush()>:
c00094b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094b8:	66 c7 05 98 66 02 c0 ff 07 	mov    WORD PTR ds:0xc0026698,0x7ff
c00094c1:	a3 9a 66 02 c0       	mov    ds:0xc002669a,eax
c00094c6:	0f 01 1d 98 66 02 c0 	lidtd  ds:0xc0026698
c00094cd:	c3                   	ret    

c00094ce <IDT::setup()>:
c00094ce:	57                   	push   edi
c00094cf:	56                   	push   esi
c00094d0:	53                   	push   ebx
c00094d1:	83 ec 10             	sub    esp,0x10
c00094d4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00094d8:	6a 00                	push   0x0
c00094da:	68 9d 03 00 c0       	push   0xc000039d
c00094df:	6a 00                	push   0x0
c00094e1:	53                   	push   ebx
c00094e2:	e8 95 ff ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c00094e7:	6a 00                	push   0x0
c00094e9:	68 ad 03 00 c0       	push   0xc00003ad
c00094ee:	6a 01                	push   0x1
c00094f0:	53                   	push   ebx
c00094f1:	e8 86 ff ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c00094f6:	83 c4 20             	add    esp,0x20
c00094f9:	6a 00                	push   0x0
c00094fb:	68 b7 03 00 c0       	push   0xc00003b7
c0009500:	6a 02                	push   0x2
c0009502:	53                   	push   ebx
c0009503:	e8 74 ff ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c0009508:	6a 00                	push   0x0
c000950a:	68 c1 03 00 c0       	push   0xc00003c1
c000950f:	6a 03                	push   0x3
c0009511:	53                   	push   ebx
c0009512:	e8 65 ff ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c0009517:	83 c4 20             	add    esp,0x20
c000951a:	6a 00                	push   0x0
c000951c:	68 cb 03 00 c0       	push   0xc00003cb
c0009521:	6a 04                	push   0x4
c0009523:	53                   	push   ebx
c0009524:	e8 53 ff ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c0009529:	6a 00                	push   0x0
c000952b:	68 d5 03 00 c0       	push   0xc00003d5
c0009530:	6a 05                	push   0x5
c0009532:	53                   	push   ebx
c0009533:	e8 44 ff ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c0009538:	83 c4 20             	add    esp,0x20
c000953b:	6a 00                	push   0x0
c000953d:	68 df 03 00 c0       	push   0xc00003df
c0009542:	6a 06                	push   0x6
c0009544:	53                   	push   ebx
c0009545:	e8 32 ff ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c000954a:	6a 00                	push   0x0
c000954c:	68 e9 03 00 c0       	push   0xc00003e9
c0009551:	6a 07                	push   0x7
c0009553:	53                   	push   ebx
c0009554:	e8 23 ff ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c0009559:	83 c4 20             	add    esp,0x20
c000955c:	6a 00                	push   0x0
c000955e:	68 f3 03 00 c0       	push   0xc00003f3
c0009563:	6a 08                	push   0x8
c0009565:	53                   	push   ebx
c0009566:	e8 11 ff ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c000956b:	6a 00                	push   0x0
c000956d:	68 fb 03 00 c0       	push   0xc00003fb
c0009572:	6a 09                	push   0x9
c0009574:	53                   	push   ebx
c0009575:	e8 02 ff ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c000957a:	83 c4 20             	add    esp,0x20
c000957d:	6a 00                	push   0x0
c000957f:	68 05 04 00 c0       	push   0xc0000405
c0009584:	6a 0a                	push   0xa
c0009586:	53                   	push   ebx
c0009587:	e8 f0 fe ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c000958c:	6a 00                	push   0x0
c000958e:	68 0d 04 00 c0       	push   0xc000040d
c0009593:	6a 0b                	push   0xb
c0009595:	53                   	push   ebx
c0009596:	e8 e1 fe ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c000959b:	83 c4 20             	add    esp,0x20
c000959e:	6a 00                	push   0x0
c00095a0:	68 15 04 00 c0       	push   0xc0000415
c00095a5:	6a 0c                	push   0xc
c00095a7:	53                   	push   ebx
c00095a8:	e8 cf fe ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c00095ad:	6a 00                	push   0x0
c00095af:	68 1d 04 00 c0       	push   0xc000041d
c00095b4:	6a 0d                	push   0xd
c00095b6:	53                   	push   ebx
c00095b7:	e8 c0 fe ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c00095bc:	83 c4 20             	add    esp,0x20
c00095bf:	6a 00                	push   0x0
c00095c1:	68 25 04 00 c0       	push   0xc0000425
c00095c6:	6a 0e                	push   0xe
c00095c8:	53                   	push   ebx
c00095c9:	e8 ae fe ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c00095ce:	6a 00                	push   0x0
c00095d0:	68 2d 04 00 c0       	push   0xc000042d
c00095d5:	6a 0f                	push   0xf
c00095d7:	53                   	push   ebx
c00095d8:	e8 9f fe ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c00095dd:	83 c4 20             	add    esp,0x20
c00095e0:	6a 00                	push   0x0
c00095e2:	68 37 04 00 c0       	push   0xc0000437
c00095e7:	6a 10                	push   0x10
c00095e9:	53                   	push   ebx
c00095ea:	e8 8d fe ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c00095ef:	6a 00                	push   0x0
c00095f1:	68 41 04 00 c0       	push   0xc0000441
c00095f6:	6a 11                	push   0x11
c00095f8:	53                   	push   ebx
c00095f9:	e8 7e fe ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c00095fe:	83 c4 20             	add    esp,0x20
c0009601:	6a 00                	push   0x0
c0009603:	68 4b 04 00 c0       	push   0xc000044b
c0009608:	6a 12                	push   0x12
c000960a:	53                   	push   ebx
c000960b:	e8 6c fe ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c0009610:	6a 01                	push   0x1
c0009612:	68 e5 04 00 c0       	push   0xc00004e5
c0009617:	6a 60                	push   0x60
c0009619:	53                   	push   ebx
c000961a:	e8 5d fe ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c000961f:	83 c4 20             	add    esp,0x20
c0009622:	6a 00                	push   0x0
c0009624:	68 ec 04 00 c0       	push   0xc00004ec
c0009629:	6a 20                	push   0x20
c000962b:	53                   	push   ebx
c000962c:	e8 4b fe ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c0009631:	6a 00                	push   0x0
c0009633:	68 d7 04 00 c0       	push   0xc00004d7
c0009638:	6a 21                	push   0x21
c000963a:	53                   	push   ebx
c000963b:	e8 3c fe ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c0009640:	83 c4 20             	add    esp,0x20
c0009643:	6a 00                	push   0x0
c0009645:	68 de 04 00 c0       	push   0xc00004de
c000964a:	6a 22                	push   0x22
c000964c:	53                   	push   ebx
c000964d:	e8 2a fe ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c0009652:	6a 00                	push   0x0
c0009654:	68 55 04 00 c0       	push   0xc0000455
c0009659:	6a 23                	push   0x23
c000965b:	53                   	push   ebx
c000965c:	e8 1b fe ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c0009661:	83 c4 20             	add    esp,0x20
c0009664:	6a 00                	push   0x0
c0009666:	68 5f 04 00 c0       	push   0xc000045f
c000966b:	6a 24                	push   0x24
c000966d:	53                   	push   ebx
c000966e:	e8 09 fe ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c0009673:	6a 00                	push   0x0
c0009675:	68 69 04 00 c0       	push   0xc0000469
c000967a:	6a 25                	push   0x25
c000967c:	53                   	push   ebx
c000967d:	e8 fa fd ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c0009682:	83 c4 20             	add    esp,0x20
c0009685:	6a 00                	push   0x0
c0009687:	68 73 04 00 c0       	push   0xc0000473
c000968c:	6a 26                	push   0x26
c000968e:	53                   	push   ebx
c000968f:	e8 e8 fd ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c0009694:	6a 00                	push   0x0
c0009696:	68 7d 04 00 c0       	push   0xc000047d
c000969b:	6a 27                	push   0x27
c000969d:	53                   	push   ebx
c000969e:	e8 d9 fd ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c00096a3:	83 c4 20             	add    esp,0x20
c00096a6:	6a 00                	push   0x0
c00096a8:	68 87 04 00 c0       	push   0xc0000487
c00096ad:	6a 28                	push   0x28
c00096af:	53                   	push   ebx
c00096b0:	e8 c7 fd ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c00096b5:	6a 00                	push   0x0
c00096b7:	68 91 04 00 c0       	push   0xc0000491
c00096bc:	6a 29                	push   0x29
c00096be:	53                   	push   ebx
c00096bf:	e8 b8 fd ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c00096c4:	83 c4 20             	add    esp,0x20
c00096c7:	6a 00                	push   0x0
c00096c9:	68 9b 04 00 c0       	push   0xc000049b
c00096ce:	6a 2a                	push   0x2a
c00096d0:	53                   	push   ebx
c00096d1:	e8 a6 fd ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c00096d6:	6a 00                	push   0x0
c00096d8:	68 a5 04 00 c0       	push   0xc00004a5
c00096dd:	6a 2b                	push   0x2b
c00096df:	53                   	push   ebx
c00096e0:	e8 97 fd ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c00096e5:	83 c4 20             	add    esp,0x20
c00096e8:	6a 00                	push   0x0
c00096ea:	68 af 04 00 c0       	push   0xc00004af
c00096ef:	6a 2c                	push   0x2c
c00096f1:	53                   	push   ebx
c00096f2:	e8 85 fd ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c00096f7:	6a 00                	push   0x0
c00096f9:	68 b9 04 00 c0       	push   0xc00004b9
c00096fe:	6a 2d                	push   0x2d
c0009700:	53                   	push   ebx
c0009701:	e8 76 fd ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	68 c3 04 00 c0       	push   0xc00004c3
c0009710:	6a 2e                	push   0x2e
c0009712:	53                   	push   ebx
c0009713:	e8 64 fd ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c0009718:	6a 00                	push   0x0
c000971a:	68 cd 04 00 c0       	push   0xc00004cd
c000971f:	6a 2f                	push   0x2f
c0009721:	53                   	push   ebx
c0009722:	e8 55 fd ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c0009727:	83 c4 20             	add    esp,0x20
c000972a:	6a 00                	push   0x0
c000972c:	68 23 05 00 c0       	push   0xc0000523
c0009731:	6a 30                	push   0x30
c0009733:	53                   	push   ebx
c0009734:	e8 43 fd ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c0009739:	6a 00                	push   0x0
c000973b:	68 2d 05 00 c0       	push   0xc000052d
c0009740:	6a 31                	push   0x31
c0009742:	53                   	push   ebx
c0009743:	e8 34 fd ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c0009748:	83 c4 20             	add    esp,0x20
c000974b:	6a 00                	push   0x0
c000974d:	68 37 05 00 c0       	push   0xc0000537
c0009752:	6a 32                	push   0x32
c0009754:	53                   	push   ebx
c0009755:	e8 22 fd ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c000975a:	6a 00                	push   0x0
c000975c:	68 41 05 00 c0       	push   0xc0000541
c0009761:	6a 33                	push   0x33
c0009763:	53                   	push   ebx
c0009764:	e8 13 fd ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c0009769:	83 c4 20             	add    esp,0x20
c000976c:	6a 00                	push   0x0
c000976e:	68 4b 05 00 c0       	push   0xc000054b
c0009773:	6a 34                	push   0x34
c0009775:	53                   	push   ebx
c0009776:	e8 01 fd ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c000977b:	6a 00                	push   0x0
c000977d:	68 55 05 00 c0       	push   0xc0000555
c0009782:	6a 35                	push   0x35
c0009784:	53                   	push   ebx
c0009785:	e8 f2 fc ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c000978a:	83 c4 20             	add    esp,0x20
c000978d:	6a 00                	push   0x0
c000978f:	68 5f 05 00 c0       	push   0xc000055f
c0009794:	6a 36                	push   0x36
c0009796:	53                   	push   ebx
c0009797:	e8 e0 fc ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c000979c:	6a 00                	push   0x0
c000979e:	68 69 05 00 c0       	push   0xc0000569
c00097a3:	6a 37                	push   0x37
c00097a5:	53                   	push   ebx
c00097a6:	e8 d1 fc ff ff       	call   c000947c <IDT::addEntry(int, void (*)(), bool)>
c00097ab:	83 c4 1c             	add    esp,0x1c
c00097ae:	6a 03                	push   0x3
c00097b0:	6a 02                	push   0x2
c00097b2:	ff 35 b4 67 02 c0    	push   DWORD PTR ds:0xc00267b4
c00097b8:	e8 cf 28 00 00       	call   c000c08c <VAS::allocatePages(int, int)>
c00097bd:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00097c4:	89 c6                	mov    esi,eax
c00097c6:	e8 a0 01 00 00       	call   c000996b <malloc>
c00097cb:	81 c6 00 20 00 00    	add    esi,0x2000
c00097d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00097d4:	89 c7                	mov    edi,eax
c00097d6:	e8 85 1a 00 00       	call   c000b260 <TSS::TSS()>
c00097db:	83 c4 0c             	add    esp,0xc
c00097de:	68 f3 03 00 c0       	push   0xc00003f3
c00097e3:	56                   	push   esi
c00097e4:	57                   	push   edi
c00097e5:	e8 ba 1a 00 00       	call   c000b2a4 <TSS::setup(unsigned long, unsigned long)>
c00097ea:	89 c6                	mov    esi,eax
c00097ec:	58                   	pop    eax
c00097ed:	5a                   	pop    edx
c00097ee:	6a 00                	push   0x0
c00097f0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00097f4:	50                   	push   eax
c00097f5:	e8 d6 fb ff ff       	call   c00093d0 <IDTEntry::IDTEntry(bool)>
c00097fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00097fe:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0009803:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000980a:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0009810:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009814:	80 ce 05             	or     dh,0x5
c0009817:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000981a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000981e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009822:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0009825:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009828:	e8 87 fc ff ff       	call   c00094b4 <IDT::flush()>
c000982d:	83 c4 20             	add    esp,0x20
c0009830:	5b                   	pop    ebx
c0009831:	5e                   	pop    esi
c0009832:	5f                   	pop    edi
c0009833:	c3                   	ret    

c0009834 <sbrk>:
c0009834:	55                   	push   ebp
c0009835:	57                   	push   edi
c0009836:	56                   	push   esi
c0009837:	53                   	push   ebx
c0009838:	83 ec 24             	sub    esp,0x24
c000983b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000983f:	53                   	push   ebx
c0009840:	68 10 2d 02 c0       	push   0xc0022d10
c0009845:	e8 2f 34 00 00       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c000984a:	83 c4 10             	add    esp,0x10
c000984d:	85 db                	test   ebx,ebx
c000984f:	74 5f                	je     c00098b0 <sbrk+0x7c>
c0009851:	78 64                	js     c00098b7 <sbrk+0x83>
c0009853:	a1 bc 5b 02 c0       	mov    eax,ds:0xc0025bbc
c0009858:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000985c:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c0009862:	89 dd                	mov    ebp,ebx
c0009864:	78 69                	js     c00098cf <sbrk+0x9b>
c0009866:	c1 fd 0c             	sar    ebp,0xc
c0009869:	bb 00 00 00 00       	mov    ebx,0x0
c000986e:	8b 35 b4 67 02 c0    	mov    esi,DWORD PTR ds:0xc00267b4
c0009874:	8b 3d bc 5b 02 c0    	mov    edi,DWORD PTR ds:0xc0025bbc
c000987a:	e8 a3 07 00 00       	call   c000a022 <Phys::allocatePage()>
c000987f:	68 01 04 00 00       	push   0x401
c0009884:	57                   	push   edi
c0009885:	50                   	push   eax
c0009886:	56                   	push   esi
c0009887:	e8 fc 26 00 00       	call   c000bf88 <VAS::mapPage(unsigned long, unsigned long, int)>
c000988c:	81 05 bc 5b 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0025bbc,0x1000
c0009896:	43                   	inc    ebx
c0009897:	83 c4 10             	add    esp,0x10
c000989a:	39 dd                	cmp    ebp,ebx
c000989c:	75 d0                	jne    c000986e <sbrk+0x3a>
c000989e:	0f 20 d8             	mov    eax,cr3
c00098a1:	0f 22 d8             	mov    cr3,eax
c00098a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098a8:	83 c4 1c             	add    esp,0x1c
c00098ab:	5b                   	pop    ebx
c00098ac:	5e                   	pop    esi
c00098ad:	5f                   	pop    edi
c00098ae:	5d                   	pop    ebp
c00098af:	c3                   	ret    
c00098b0:	a1 bc 5b 02 c0       	mov    eax,ds:0xc0025bbc
c00098b5:	eb f1                	jmp    c00098a8 <sbrk+0x74>
c00098b7:	83 ec 08             	sub    esp,0x8
c00098ba:	53                   	push   ebx
c00098bb:	68 3c 2d 02 c0       	push   0xc0022d3c
c00098c0:	e8 b4 33 00 00       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c00098c5:	83 c4 10             	add    esp,0x10
c00098c8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00098cd:	eb d9                	jmp    c00098a8 <sbrk+0x74>
c00098cf:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c00098d5:	eb 8f                	jmp    c0009866 <sbrk+0x32>

c00098d7 <mmap>:
c00098d7:	83 ec 18             	sub    esp,0x18
c00098da:	68 2e 2d 02 c0       	push   0xc0022d2e
c00098df:	e8 23 97 00 00       	call   c0013007 <Krnl::panic(char const*)>
c00098e4:	b8 00 00 00 00       	mov    eax,0x0
c00098e9:	83 c4 1c             	add    esp,0x1c
c00098ec:	c3                   	ret    

c00098ed <munmap>:
c00098ed:	83 ec 18             	sub    esp,0x18
c00098f0:	68 33 2d 02 c0       	push   0xc0022d33
c00098f5:	e8 0d 97 00 00       	call   c0013007 <Krnl::panic(char const*)>
c00098fa:	b8 00 00 00 00       	mov    eax,0x0
c00098ff:	83 c4 1c             	add    esp,0x1c
c0009902:	c3                   	ret    

c0009903 <liballoc_lock()>:
c0009903:	fa                   	cli    
c0009904:	ff 05 a8 9b 02 c0    	inc    DWORD PTR ds:0xc0029ba8
c000990a:	b8 00 00 00 00       	mov    eax,0x0
c000990f:	c3                   	ret    

c0009910 <liballoc_unlock()>:
c0009910:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c0009915:	48                   	dec    eax
c0009916:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c000991b:	75 01                	jne    c000991e <liballoc_unlock()+0xe>
c000991d:	fb                   	sti    
c000991e:	b8 00 00 00 00       	mov    eax,0x0
c0009923:	c3                   	ret    

c0009924 <liballoc_alloc(int)>:
c0009924:	83 ec 10             	sub    esp,0x10
c0009927:	6a 01                	push   0x1
c0009929:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000992d:	ff 35 b4 67 02 c0    	push   DWORD PTR ds:0xc00267b4
c0009933:	e8 54 27 00 00       	call   c000c08c <VAS::allocatePages(int, int)>
c0009938:	83 c4 1c             	add    esp,0x1c
c000993b:	c3                   	ret    

c000993c <liballoc_free(void*, int)>:
c000993c:	83 ec 14             	sub    esp,0x14
c000993f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009943:	ff 35 b4 67 02 c0    	push   DWORD PTR ds:0xc00267b4
c0009949:	e8 e6 23 00 00       	call   c000bd34 <VAS::freeAllocatedPages(unsigned long)>
c000994e:	b8 00 00 00 00       	mov    eax,0x0
c0009953:	83 c4 1c             	add    esp,0x1c
c0009956:	c3                   	ret    

c0009957 <realloc>:
c0009957:	83 ec 14             	sub    esp,0x14
c000995a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000995e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009962:	e8 f1 7b ff ff       	call   c0001558 <dlrealloc>
c0009967:	83 c4 1c             	add    esp,0x1c
c000996a:	c3                   	ret    

c000996b <malloc>:
c000996b:	83 ec 18             	sub    esp,0x18
c000996e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009972:	e8 a4 76 ff ff       	call   c000101b <dlmalloc>
c0009977:	83 c4 1c             	add    esp,0x1c
c000997a:	c3                   	ret    

c000997b <free>:
c000997b:	83 ec 18             	sub    esp,0x18
c000997e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009982:	e8 39 73 ff ff       	call   c0000cc0 <dlfree>
c0009987:	83 c4 1c             	add    esp,0x1c
c000998a:	c3                   	ret    

c000998b <rfree>:
c000998b:	83 ec 18             	sub    esp,0x18
c000998e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009992:	e8 29 73 ff ff       	call   c0000cc0 <dlfree>
c0009997:	83 c4 1c             	add    esp,0x1c
c000999a:	c3                   	ret    

c000999b <calloc>:
c000999b:	56                   	push   esi
c000999c:	53                   	push   ebx
c000999d:	83 ec 10             	sub    esp,0x10
c00099a0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00099a4:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00099a9:	53                   	push   ebx
c00099aa:	e8 bc ff ff ff       	call   c000996b <malloc>
c00099af:	89 c6                	mov    esi,eax
c00099b1:	83 c4 0c             	add    esp,0xc
c00099b4:	53                   	push   ebx
c00099b5:	6a 00                	push   0x0
c00099b7:	50                   	push   eax
c00099b8:	e8 bf 6c ff ff       	call   c000067c <memset>
c00099bd:	89 f0                	mov    eax,esi
c00099bf:	83 c4 14             	add    esp,0x14
c00099c2:	5b                   	pop    ebx
c00099c3:	5e                   	pop    esi
c00099c4:	c3                   	ret    

c00099c5 <Krnl::setBootMessage(char const*)>:
c00099c5:	57                   	push   edi
c00099c6:	56                   	push   esi
c00099c7:	53                   	push   ebx
c00099c8:	81 ec a4 00 00 00    	sub    esp,0xa4
c00099ce:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c00099d5:	68 9e 00 00 00       	push   0x9e
c00099da:	6a 00                	push   0x0
c00099dc:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00099e0:	56                   	push   esi
c00099e1:	e8 96 6c ff ff       	call   c000067c <memset>
c00099e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00099e9:	e8 aa 6c ff ff       	call   c0000698 <strlen>
c00099ee:	ba 50 00 00 00       	mov    edx,0x50
c00099f3:	83 c4 10             	add    esp,0x10
c00099f6:	29 c2                	sub    edx,eax
c00099f8:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c00099fc:	d1 ea                	shr    edx,1
c00099fe:	84 c0                	test   al,al
c0009a00:	74 19                	je     c0009a1b <Krnl::setBootMessage(char const*)+0x56>
c0009a02:	01 d2                	add    edx,edx
c0009a04:	43                   	inc    ebx
c0009a05:	01 f2                	add    edx,esi
c0009a07:	80 cc 0f             	or     ah,0xf
c0009a0a:	83 c2 02             	add    edx,0x2
c0009a0d:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009a11:	43                   	inc    ebx
c0009a12:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009a17:	84 c0                	test   al,al
c0009a19:	75 ec                	jne    c0009a07 <Krnl::setBootMessage(char const*)+0x42>
c0009a1b:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009a20:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009a25:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009a27:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009a2d:	5b                   	pop    ebx
c0009a2e:	5e                   	pop    esi
c0009a2f:	5f                   	pop    edi
c0009a30:	c3                   	ret    

c0009a31 <kernel_main>:
c0009a31:	57                   	push   edi
c0009a32:	56                   	push   esi
c0009a33:	53                   	push   ebx
c0009a34:	83 ec 20             	sub    esp,0x20
c0009a37:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009a3c:	a3 a0 66 02 c0       	mov    ds:0xc00266a0,eax
c0009a41:	f6 c4 08             	test   ah,0x8
c0009a44:	0f 85 7a 03 00 00    	jne    c0009dc4 <kernel_main+0x393>
c0009a4a:	31 f6                	xor    esi,esi
c0009a4c:	bf f9 03 00 00       	mov    edi,0x3f9
c0009a51:	89 f0                	mov    eax,esi
c0009a53:	89 fa                	mov    edx,edi
c0009a55:	ee                   	out    dx,al
c0009a56:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009a5b:	b0 80                	mov    al,0x80
c0009a5d:	89 da                	mov    edx,ebx
c0009a5f:	ee                   	out    dx,al
c0009a60:	b1 03                	mov    cl,0x3
c0009a62:	ba f8 03 00 00       	mov    edx,0x3f8
c0009a67:	88 c8                	mov    al,cl
c0009a69:	ee                   	out    dx,al
c0009a6a:	89 f0                	mov    eax,esi
c0009a6c:	89 fa                	mov    edx,edi
c0009a6e:	ee                   	out    dx,al
c0009a6f:	88 c8                	mov    al,cl
c0009a71:	89 da                	mov    edx,ebx
c0009a73:	ee                   	out    dx,al
c0009a74:	b0 c7                	mov    al,0xc7
c0009a76:	ba fa 03 00 00       	mov    edx,0x3fa
c0009a7b:	ee                   	out    dx,al
c0009a7c:	b0 0b                	mov    al,0xb
c0009a7e:	ba fc 03 00 00       	mov    edx,0x3fc
c0009a83:	ee                   	out    dx,al
c0009a84:	83 ec 0c             	sub    esp,0xc
c0009a87:	68 6c 2d 02 c0       	push   0xc0022d6c
c0009a8c:	e8 e8 31 00 00       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0009a91:	83 c4 10             	add    esp,0x10
c0009a94:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c0009a9b:	0f 85 eb 02 00 00    	jne    c0009d8c <kernel_main+0x35b>
c0009aa1:	e8 c6 0c 00 00       	call   c000a76c <installVgaTextImplementation()>
c0009aa6:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c0009aad:	0f 85 94 02 00 00    	jne    c0009d47 <kernel_main+0x316>
c0009ab3:	0f b6 05 c0 5b 02 c0 	movzx  eax,BYTE PTR ds:0xc0025bc0
c0009aba:	84 c0                	test   al,al
c0009abc:	74 7b                	je     c0009b39 <kernel_main+0x108>
c0009abe:	31 db                	xor    ebx,ebx
c0009ac0:	bf 0a 00 00 00       	mov    edi,0xa
c0009ac5:	be 05 00 00 00       	mov    esi,0x5
c0009aca:	31 c9                	xor    ecx,ecx
c0009acc:	eb 2a                	jmp    c0009af8 <kernel_main+0xc7>
c0009ace:	3c 0d                	cmp    al,0xd
c0009ad0:	74 1a                	je     c0009aec <kernel_main+0xbb>
c0009ad2:	3c 0a                	cmp    al,0xa
c0009ad4:	74 40                	je     c0009b16 <kernel_main+0xe5>
c0009ad6:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009ad9:	80 cc 0e             	or     ah,0xe
c0009adc:	c1 e2 04             	shl    edx,0x4
c0009adf:	01 ca                	add    edx,ecx
c0009ae1:	41                   	inc    ecx
c0009ae2:	01 fa                	add    edx,edi
c0009ae4:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009aec:	43                   	inc    ebx
c0009aed:	0f b6 83 c0 5b 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffda440]
c0009af4:	84 c0                	test   al,al
c0009af6:	74 32                	je     c0009b2a <kernel_main+0xf9>
c0009af8:	80 b9 f6 5b 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffda40a],0xdb
c0009aff:	75 cd                	jne    c0009ace <kernel_main+0x9d>
c0009b01:	0f b6 91 f5 5b 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffda40b]
c0009b08:	83 e2 fe             	and    edx,0xfffffffe
c0009b0b:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009b11:	75 bb                	jne    c0009ace <kernel_main+0x9d>
c0009b13:	47                   	inc    edi
c0009b14:	eb b8                	jmp    c0009ace <kernel_main+0x9d>
c0009b16:	43                   	inc    ebx
c0009b17:	46                   	inc    esi
c0009b18:	31 c9                	xor    ecx,ecx
c0009b1a:	0f b6 83 c0 5b 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffda440]
c0009b21:	bf 0a 00 00 00       	mov    edi,0xa
c0009b26:	84 c0                	test   al,al
c0009b28:	75 ce                	jne    c0009af8 <kernel_main+0xc7>
c0009b2a:	8b 15 a0 66 02 c0    	mov    edx,DWORD PTR ds:0xc00266a0
c0009b30:	80 e6 08             	and    dh,0x8
c0009b33:	0f 85 bf 00 00 00    	jne    c0009bf8 <kernel_main+0x1c7>
c0009b39:	83 ec 0c             	sub    esp,0xc
c0009b3c:	68 08 2e 02 c0       	push   0xc0022e08
c0009b41:	e8 7f fe ff ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0009b46:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009b4b:	05 ff 0f 00 00       	add    eax,0xfff
c0009b50:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009b55:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b58:	e8 44 06 00 00       	call   c000a1a1 <Phys::physicalMemorySetup(unsigned int)>
c0009b5d:	83 c4 10             	add    esp,0x10
c0009b60:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c0009b67:	0f 85 a2 01 00 00    	jne    c0009d0f <kernel_main+0x2de>
c0009b6d:	e8 6a 1f 00 00       	call   c000badc <Virt::virtualMemorySetup()>
c0009b72:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c0009b79:	0f 85 58 01 00 00    	jne    c0009cd7 <kernel_main+0x2a6>
c0009b7f:	83 ec 0c             	sub    esp,0xc
c0009b82:	8d 74 24 18          	lea    esi,[esp+0x18]
c0009b86:	56                   	push   esi
c0009b87:	e8 28 2b 00 00       	call   c000c6b4 <VAS::VAS()>
c0009b8c:	83 c4 10             	add    esp,0x10
c0009b8f:	89 35 b4 67 02 c0    	mov    DWORD PTR ds:0xc00267b4,esi
c0009b95:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c0009b9c:	0f 85 fd 00 00 00    	jne    c0009c9f <kernel_main+0x26e>
c0009ba2:	e8 79 64 ff ff       	call   c0000020 <callGlobalConstructors>
c0009ba7:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c0009bae:	0f 85 b3 00 00 00    	jne    c0009c67 <kernel_main+0x236>
c0009bb4:	83 ec 0c             	sub    esp,0xc
c0009bb7:	68 ec 01 00 00       	push   0x1ec
c0009bbc:	e8 aa fd ff ff       	call   c000996b <malloc>
c0009bc1:	89 c3                	mov    ebx,eax
c0009bc3:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bc6:	e8 ed ef ff ff       	call   c0008bb8 <Computer::Computer()>
c0009bcb:	83 c4 10             	add    esp,0x10
c0009bce:	89 1d 88 66 02 c0    	mov    DWORD PTR ds:0xc0026688,ebx
c0009bd4:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c0009bdb:	75 53                	jne    c0009c30 <kernel_main+0x1ff>
c0009bdd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009bdf:	6a 00                	push   0x0
c0009be1:	6a 00                	push   0x0
c0009be3:	6a 00                	push   0x0
c0009be5:	53                   	push   ebx
c0009be6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0009be9:	89 34 24             	mov    DWORD PTR [esp],esi
c0009bec:	e8 1b 22 00 00       	call   c000be0c <VAS::~VAS()>
c0009bf1:	83 c4 30             	add    esp,0x30
c0009bf4:	5b                   	pop    ebx
c0009bf5:	5e                   	pop    esi
c0009bf6:	5f                   	pop    edi
c0009bf7:	c3                   	ret    
c0009bf8:	83 ec 0c             	sub    esp,0xc
c0009bfb:	68 b7 2d 02 c0       	push   0xc0022db7
c0009c00:	e8 c0 fd ff ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0009c05:	83 c4 10             	add    esp,0x10
c0009c08:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c0009c0f:	0f 85 24 ff ff ff    	jne    c0009b39 <kernel_main+0x108>
c0009c15:	eb 04                	jmp    c0009c1b <kernel_main+0x1ea>
c0009c17:	3c 1c                	cmp    al,0x1c
c0009c19:	74 06                	je     c0009c21 <kernel_main+0x1f0>
c0009c1b:	e4 60                	in     al,0x60
c0009c1d:	3c 5a                	cmp    al,0x5a
c0009c1f:	75 f6                	jne    c0009c17 <kernel_main+0x1e6>
c0009c21:	e4 60                	in     al,0x60
c0009c23:	3c 5a                	cmp    al,0x5a
c0009c25:	74 fa                	je     c0009c21 <kernel_main+0x1f0>
c0009c27:	3c 1c                	cmp    al,0x1c
c0009c29:	74 f6                	je     c0009c21 <kernel_main+0x1f0>
c0009c2b:	e9 09 ff ff ff       	jmp    c0009b39 <kernel_main+0x108>
c0009c30:	83 ec 0c             	sub    esp,0xc
c0009c33:	68 f6 2d 02 c0       	push   0xc0022df6
c0009c38:	e8 88 fd ff ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0009c3d:	83 c4 10             	add    esp,0x10
c0009c40:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c0009c47:	74 0c                	je     c0009c55 <kernel_main+0x224>
c0009c49:	8b 1d 88 66 02 c0    	mov    ebx,DWORD PTR ds:0xc0026688
c0009c4f:	eb 8c                	jmp    c0009bdd <kernel_main+0x1ac>
c0009c51:	3c 1c                	cmp    al,0x1c
c0009c53:	74 06                	je     c0009c5b <kernel_main+0x22a>
c0009c55:	e4 60                	in     al,0x60
c0009c57:	3c 5a                	cmp    al,0x5a
c0009c59:	75 f6                	jne    c0009c51 <kernel_main+0x220>
c0009c5b:	e4 60                	in     al,0x60
c0009c5d:	3c 5a                	cmp    al,0x5a
c0009c5f:	74 fa                	je     c0009c5b <kernel_main+0x22a>
c0009c61:	3c 1c                	cmp    al,0x1c
c0009c63:	74 f6                	je     c0009c5b <kernel_main+0x22a>
c0009c65:	eb e2                	jmp    c0009c49 <kernel_main+0x218>
c0009c67:	83 ec 0c             	sub    esp,0xc
c0009c6a:	68 e3 2d 02 c0       	push   0xc0022de3
c0009c6f:	e8 51 fd ff ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0009c74:	83 c4 10             	add    esp,0x10
c0009c77:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c0009c7e:	0f 85 30 ff ff ff    	jne    c0009bb4 <kernel_main+0x183>
c0009c84:	eb 04                	jmp    c0009c8a <kernel_main+0x259>
c0009c86:	3c 1c                	cmp    al,0x1c
c0009c88:	74 06                	je     c0009c90 <kernel_main+0x25f>
c0009c8a:	e4 60                	in     al,0x60
c0009c8c:	3c 5a                	cmp    al,0x5a
c0009c8e:	75 f6                	jne    c0009c86 <kernel_main+0x255>
c0009c90:	e4 60                	in     al,0x60
c0009c92:	3c 5a                	cmp    al,0x5a
c0009c94:	74 fa                	je     c0009c90 <kernel_main+0x25f>
c0009c96:	3c 1c                	cmp    al,0x1c
c0009c98:	74 f6                	je     c0009c90 <kernel_main+0x25f>
c0009c9a:	e9 15 ff ff ff       	jmp    c0009bb4 <kernel_main+0x183>
c0009c9f:	83 ec 0c             	sub    esp,0xc
c0009ca2:	68 d9 2d 02 c0       	push   0xc0022dd9
c0009ca7:	e8 19 fd ff ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0009cac:	83 c4 10             	add    esp,0x10
c0009caf:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c0009cb6:	0f 85 e6 fe ff ff    	jne    c0009ba2 <kernel_main+0x171>
c0009cbc:	eb 04                	jmp    c0009cc2 <kernel_main+0x291>
c0009cbe:	3c 1c                	cmp    al,0x1c
c0009cc0:	74 06                	je     c0009cc8 <kernel_main+0x297>
c0009cc2:	e4 60                	in     al,0x60
c0009cc4:	3c 5a                	cmp    al,0x5a
c0009cc6:	75 f6                	jne    c0009cbe <kernel_main+0x28d>
c0009cc8:	e4 60                	in     al,0x60
c0009cca:	3c 5a                	cmp    al,0x5a
c0009ccc:	74 fa                	je     c0009cc8 <kernel_main+0x297>
c0009cce:	3c 1c                	cmp    al,0x1c
c0009cd0:	74 f6                	je     c0009cc8 <kernel_main+0x297>
c0009cd2:	e9 cb fe ff ff       	jmp    c0009ba2 <kernel_main+0x171>
c0009cd7:	83 ec 0c             	sub    esp,0xc
c0009cda:	68 ce 2d 02 c0       	push   0xc0022dce
c0009cdf:	e8 e1 fc ff ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0009ce4:	83 c4 10             	add    esp,0x10
c0009ce7:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c0009cee:	0f 85 8b fe ff ff    	jne    c0009b7f <kernel_main+0x14e>
c0009cf4:	eb 04                	jmp    c0009cfa <kernel_main+0x2c9>
c0009cf6:	3c 1c                	cmp    al,0x1c
c0009cf8:	74 06                	je     c0009d00 <kernel_main+0x2cf>
c0009cfa:	e4 60                	in     al,0x60
c0009cfc:	3c 5a                	cmp    al,0x5a
c0009cfe:	75 f6                	jne    c0009cf6 <kernel_main+0x2c5>
c0009d00:	e4 60                	in     al,0x60
c0009d02:	3c 5a                	cmp    al,0x5a
c0009d04:	74 fa                	je     c0009d00 <kernel_main+0x2cf>
c0009d06:	3c 1c                	cmp    al,0x1c
c0009d08:	74 f6                	je     c0009d00 <kernel_main+0x2cf>
c0009d0a:	e9 70 fe ff ff       	jmp    c0009b7f <kernel_main+0x14e>
c0009d0f:	83 ec 0c             	sub    esp,0xc
c0009d12:	68 c3 2d 02 c0       	push   0xc0022dc3
c0009d17:	e8 a9 fc ff ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0009d1c:	83 c4 10             	add    esp,0x10
c0009d1f:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c0009d26:	0f 85 41 fe ff ff    	jne    c0009b6d <kernel_main+0x13c>
c0009d2c:	eb 04                	jmp    c0009d32 <kernel_main+0x301>
c0009d2e:	3c 1c                	cmp    al,0x1c
c0009d30:	74 06                	je     c0009d38 <kernel_main+0x307>
c0009d32:	e4 60                	in     al,0x60
c0009d34:	3c 5a                	cmp    al,0x5a
c0009d36:	75 f6                	jne    c0009d2e <kernel_main+0x2fd>
c0009d38:	e4 60                	in     al,0x60
c0009d3a:	3c 5a                	cmp    al,0x5a
c0009d3c:	74 fa                	je     c0009d38 <kernel_main+0x307>
c0009d3e:	3c 1c                	cmp    al,0x1c
c0009d40:	74 f6                	je     c0009d38 <kernel_main+0x307>
c0009d42:	e9 26 fe ff ff       	jmp    c0009b6d <kernel_main+0x13c>
c0009d47:	83 ec 0c             	sub    esp,0xc
c0009d4a:	68 a5 2d 02 c0       	push   0xc0022da5
c0009d4f:	e8 71 fc ff ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0009d54:	8b 15 a0 66 02 c0    	mov    edx,DWORD PTR ds:0xc00266a0
c0009d5a:	83 c4 10             	add    esp,0x10
c0009d5d:	f6 c2 80             	test   dl,0x80
c0009d60:	74 18                	je     c0009d7a <kernel_main+0x349>
c0009d62:	0f b6 05 c0 5b 02 c0 	movzx  eax,BYTE PTR ds:0xc0025bc0
c0009d69:	84 c0                	test   al,al
c0009d6b:	0f 85 4d fd ff ff    	jne    c0009abe <kernel_main+0x8d>
c0009d71:	e9 ba fd ff ff       	jmp    c0009b30 <kernel_main+0xff>
c0009d76:	3c 1c                	cmp    al,0x1c
c0009d78:	74 06                	je     c0009d80 <kernel_main+0x34f>
c0009d7a:	e4 60                	in     al,0x60
c0009d7c:	3c 5a                	cmp    al,0x5a
c0009d7e:	75 f6                	jne    c0009d76 <kernel_main+0x345>
c0009d80:	e4 60                	in     al,0x60
c0009d82:	3c 5a                	cmp    al,0x5a
c0009d84:	74 fa                	je     c0009d80 <kernel_main+0x34f>
c0009d86:	3c 1c                	cmp    al,0x1c
c0009d88:	74 f6                	je     c0009d80 <kernel_main+0x34f>
c0009d8a:	eb d6                	jmp    c0009d62 <kernel_main+0x331>
c0009d8c:	83 ec 0c             	sub    esp,0xc
c0009d8f:	68 96 2d 02 c0       	push   0xc0022d96
c0009d94:	e8 2c fc ff ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c0009da3:	0f 85 f8 fc ff ff    	jne    c0009aa1 <kernel_main+0x70>
c0009da9:	eb 04                	jmp    c0009daf <kernel_main+0x37e>
c0009dab:	3c 1c                	cmp    al,0x1c
c0009dad:	74 06                	je     c0009db5 <kernel_main+0x384>
c0009daf:	e4 60                	in     al,0x60
c0009db1:	3c 5a                	cmp    al,0x5a
c0009db3:	75 f6                	jne    c0009dab <kernel_main+0x37a>
c0009db5:	e4 60                	in     al,0x60
c0009db7:	3c 5a                	cmp    al,0x5a
c0009db9:	74 fa                	je     c0009db5 <kernel_main+0x384>
c0009dbb:	3c 1c                	cmp    al,0x1c
c0009dbd:	74 f6                	je     c0009db5 <kernel_main+0x384>
c0009dbf:	e9 dd fc ff ff       	jmp    c0009aa1 <kernel_main+0x70>
c0009dc4:	83 ec 0c             	sub    esp,0xc
c0009dc7:	68 83 2d 02 c0       	push   0xc0022d83
c0009dcc:	e8 f4 fb ff ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0009dd1:	83 c4 10             	add    esp,0x10
c0009dd4:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c0009ddb:	0f 85 69 fc ff ff    	jne    c0009a4a <kernel_main+0x19>
c0009de1:	eb 04                	jmp    c0009de7 <kernel_main+0x3b6>
c0009de3:	3c 1c                	cmp    al,0x1c
c0009de5:	74 06                	je     c0009ded <kernel_main+0x3bc>
c0009de7:	e4 60                	in     al,0x60
c0009de9:	3c 5a                	cmp    al,0x5a
c0009deb:	75 f6                	jne    c0009de3 <kernel_main+0x3b2>
c0009ded:	e4 60                	in     al,0x60
c0009def:	3c 5a                	cmp    al,0x5a
c0009df1:	74 fa                	je     c0009ded <kernel_main+0x3bc>
c0009df3:	3c 1c                	cmp    al,0x1c
c0009df5:	74 f6                	je     c0009ded <kernel_main+0x3bc>
c0009df7:	e9 4e fc ff ff       	jmp    c0009a4a <kernel_main+0x19>

c0009dfc <Phys::allocateDMA(unsigned long)>:
c0009dfc:	55                   	push   ebp
c0009dfd:	31 ed                	xor    ebp,ebp
c0009dff:	57                   	push   edi
c0009e00:	56                   	push   esi
c0009e01:	53                   	push   ebx
c0009e02:	31 db                	xor    ebx,ebx
c0009e04:	83 ec 28             	sub    esp,0x28
c0009e07:	68 27 2e 02 c0       	push   0xc0022e27
c0009e0c:	e8 68 2e 00 00       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0009e11:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0009e1e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009e26:	c1 ef 0c             	shr    edi,0xc
c0009e29:	31 c0                	xor    eax,eax
c0009e2b:	eb 19                	jmp    c0009e46 <Phys::allocateDMA(unsigned long)+0x4a>
c0009e2d:	85 c0                	test   eax,eax
c0009e2f:	75 06                	jne    c0009e37 <Phys::allocateDMA(unsigned long)+0x3b>
c0009e31:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0009e35:	89 dd                	mov    ebp,ebx
c0009e37:	8d 70 01             	lea    esi,[eax+0x1]
c0009e3a:	39 f7                	cmp    edi,esi
c0009e3c:	74 3f                	je     c0009e7d <Phys::allocateDMA(unsigned long)+0x81>
c0009e3e:	89 f0                	mov    eax,esi
c0009e40:	43                   	inc    ebx
c0009e41:	83 fb 0f             	cmp    ebx,0xf
c0009e44:	7f 11                	jg     c0009e57 <Phys::allocateDMA(unsigned long)+0x5b>
c0009e46:	80 bb bc 66 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9944],0x0
c0009e4d:	74 de                	je     c0009e2d <Phys::allocateDMA(unsigned long)+0x31>
c0009e4f:	31 c0                	xor    eax,eax
c0009e51:	43                   	inc    ebx
c0009e52:	83 fb 0f             	cmp    ebx,0xf
c0009e55:	7e ef                	jle    c0009e46 <Phys::allocateDMA(unsigned long)+0x4a>
c0009e57:	83 ec 0c             	sub    esp,0xc
c0009e5a:	68 57 2e 02 c0       	push   0xc0022e57
c0009e5f:	e8 15 2e 00 00       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0009e64:	c7 04 24 14 2f 02 c0 	mov    DWORD PTR [esp],0xc0022f14
c0009e6b:	e8 97 91 00 00       	call   c0013007 <Krnl::panic(char const*)>
c0009e70:	83 c4 10             	add    esp,0x10
c0009e73:	31 c0                	xor    eax,eax
c0009e75:	83 c4 1c             	add    esp,0x1c
c0009e78:	5b                   	pop    ebx
c0009e79:	5e                   	pop    esi
c0009e7a:	5f                   	pop    edi
c0009e7b:	5d                   	pop    ebp
c0009e7c:	c3                   	ret    
c0009e7d:	89 e9                	mov    ecx,ebp
c0009e7f:	c1 f9 04             	sar    ecx,0x4
c0009e82:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009e86:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0009e8a:	89 ca                	mov    edx,ecx
c0009e8c:	4a                   	dec    edx
c0009e8d:	79 03                	jns    c0009e92 <Phys::allocateDMA(unsigned long)+0x96>
c0009e8f:	8d 51 0e             	lea    edx,[ecx+0xe]
c0009e92:	c1 fa 04             	sar    edx,0x4
c0009e95:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0009e99:	74 08                	je     c0009ea3 <Phys::allocateDMA(unsigned long)+0xa7>
c0009e9b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e9f:	31 c0                	xor    eax,eax
c0009ea1:	eb ae                	jmp    c0009e51 <Phys::allocateDMA(unsigned long)+0x55>
c0009ea3:	85 f6                	test   esi,esi
c0009ea5:	74 15                	je     c0009ebc <Phys::allocateDMA(unsigned long)+0xc0>
c0009ea7:	8d 95 bc 66 02 c0    	lea    edx,[ebp-0x3ffd9944]
c0009ead:	8d 84 05 bd 66 02 c0 	lea    eax,[ebp+eax*1-0x3ffd9943]
c0009eb4:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0009eb7:	42                   	inc    edx
c0009eb8:	39 d0                	cmp    eax,edx
c0009eba:	75 f8                	jne    c0009eb4 <Phys::allocateDMA(unsigned long)+0xb8>
c0009ebc:	83 ec 0c             	sub    esp,0xc
c0009ebf:	01 3d b4 66 02 c0    	add    DWORD PTR ds:0xc00266b4,edi
c0009ec5:	68 40 2e 02 c0       	push   0xc0022e40
c0009eca:	e8 aa 2d 00 00       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0009ecf:	83 c4 10             	add    esp,0x10
c0009ed2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ed6:	85 c0                	test   eax,eax
c0009ed8:	74 23                	je     c0009efd <Phys::allocateDMA(unsigned long)+0x101>
c0009eda:	83 ec 0c             	sub    esp,0xc
c0009edd:	68 6c 5a 02 c0       	push   0xc0025a6c
c0009ee2:	e8 92 2d 00 00       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0009ee7:	c7 04 24 14 2f 02 c0 	mov    DWORD PTR [esp],0xc0022f14
c0009eee:	e8 14 91 00 00       	call   c0013007 <Krnl::panic(char const*)>
c0009ef3:	83 c4 10             	add    esp,0x10
c0009ef6:	89 f0                	mov    eax,esi
c0009ef8:	e9 43 ff ff ff       	jmp    c0009e40 <Phys::allocateDMA(unsigned long)+0x44>
c0009efd:	c1 e5 0c             	shl    ebp,0xc
c0009f00:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0009f06:	e9 6a ff ff ff       	jmp    c0009e75 <Phys::allocateDMA(unsigned long)+0x79>

c0009f0b <Phys::freeDMA(unsigned long, unsigned long)>:
c0009f0b:	83 ec 18             	sub    esp,0x18
c0009f0e:	68 5b 2e 02 c0       	push   0xc0022e5b
c0009f13:	e8 61 2d 00 00       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0009f18:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009f1c:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0009f22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f26:	c1 ea 0c             	shr    edx,0xc
c0009f29:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0009f2e:	29 15 b4 66 02 c0    	sub    DWORD PTR ds:0xc00266b4,edx
c0009f34:	c1 e8 0c             	shr    eax,0xc
c0009f37:	83 c4 10             	add    esp,0x10
c0009f3a:	85 d2                	test   edx,edx
c0009f3c:	74 0f                	je     c0009f4d <Phys::freeDMA(unsigned long, unsigned long)+0x42>
c0009f3e:	05 bc 66 02 c0       	add    eax,0xc00266bc
c0009f43:	01 c2                	add    edx,eax
c0009f45:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0009f48:	40                   	inc    eax
c0009f49:	39 d0                	cmp    eax,edx
c0009f4b:	75 f8                	jne    c0009f45 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0009f4d:	83 c4 0c             	add    esp,0xc
c0009f50:	c3                   	ret    

c0009f51 <Phys::setPageState(unsigned long, bool)>:
c0009f51:	56                   	push   esi
c0009f52:	ba 01 00 00 00       	mov    edx,0x1
c0009f57:	53                   	push   ebx
c0009f58:	8b 35 04 5d 02 c0    	mov    esi,DWORD PTR ds:0xc0025d04
c0009f5e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009f62:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009f66:	89 c8                	mov    eax,ecx
c0009f68:	83 e1 07             	and    ecx,0x7
c0009f6b:	c1 e8 03             	shr    eax,0x3
c0009f6e:	d3 e3                	shl    ebx,cl
c0009f70:	01 c6                	add    esi,eax
c0009f72:	d3 e2                	shl    edx,cl
c0009f74:	f7 d2                	not    edx
c0009f76:	20 16                	and    BYTE PTR [esi],dl
c0009f78:	03 05 04 5d 02 c0    	add    eax,DWORD PTR ds:0xc0025d04
c0009f7e:	08 18                	or     BYTE PTR [eax],bl
c0009f80:	5b                   	pop    ebx
c0009f81:	5e                   	pop    esi
c0009f82:	c3                   	ret    

c0009f83 <Phys::getPageState(unsigned long)>:
c0009f83:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009f87:	8b 15 04 5d 02 c0    	mov    edx,DWORD PTR ds:0xc0025d04
c0009f8d:	89 c8                	mov    eax,ecx
c0009f8f:	83 e1 07             	and    ecx,0x7
c0009f92:	c1 e8 03             	shr    eax,0x3
c0009f95:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0009f99:	d3 f8                	sar    eax,cl
c0009f9b:	83 e0 01             	and    eax,0x1
c0009f9e:	c3                   	ret    

c0009f9f <Phys::freePage(unsigned long)>:
c0009f9f:	53                   	push   ebx
c0009fa0:	83 ec 10             	sub    esp,0x10
c0009fa3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009fa7:	53                   	push   ebx
c0009fa8:	68 71 2e 02 c0       	push   0xc0022e71
c0009fad:	e8 c7 2c 00 00       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0009fb2:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c0009fb8:	83 c4 10             	add    esp,0x10
c0009fbb:	3d ff ff 00 00       	cmp    eax,0xffff
c0009fc0:	76 3d                	jbe    c0009fff <Phys::freePage(unsigned long)+0x60>
c0009fc2:	83 ec 0c             	sub    esp,0xc
c0009fc5:	c1 eb 0c             	shr    ebx,0xc
c0009fc8:	53                   	push   ebx
c0009fc9:	e8 b5 ff ff ff       	call   c0009f83 <Phys::getPageState(unsigned long)>
c0009fce:	83 c4 10             	add    esp,0x10
c0009fd1:	84 c0                	test   al,al
c0009fd3:	74 19                	je     c0009fee <Phys::freePage(unsigned long)+0x4f>
c0009fd5:	83 ec 08             	sub    esp,0x8
c0009fd8:	ff 0d b4 66 02 c0    	dec    DWORD PTR ds:0xc00266b4
c0009fde:	6a 00                	push   0x0
c0009fe0:	53                   	push   ebx
c0009fe1:	e8 6b ff ff ff       	call   c0009f51 <Phys::setPageState(unsigned long, bool)>
c0009fe6:	83 c4 10             	add    esp,0x10
c0009fe9:	83 c4 08             	add    esp,0x8
c0009fec:	5b                   	pop    ebx
c0009fed:	c3                   	ret    
c0009fee:	c7 44 24 10 9b 2e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022e9b
c0009ff6:	83 c4 08             	add    esp,0x8
c0009ff9:	5b                   	pop    ebx
c0009ffa:	e9 08 90 00 00       	jmp    c0013007 <Krnl::panic(char const*)>
c0009fff:	83 ec 08             	sub    esp,0x8
c000a002:	53                   	push   ebx
c000a003:	68 84 2e 02 c0       	push   0xc0022e84
c000a008:	e8 6c 2c 00 00       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c000a00d:	58                   	pop    eax
c000a00e:	5a                   	pop    edx
c000a00f:	68 00 10 00 00       	push   0x1000
c000a014:	53                   	push   ebx
c000a015:	e8 f1 fe ff ff       	call   c0009f0b <Phys::freeDMA(unsigned long, unsigned long)>
c000a01a:	83 c4 10             	add    esp,0x10
c000a01d:	83 c4 08             	add    esp,0x8
c000a020:	5b                   	pop    ebx
c000a021:	c3                   	ret    

c000a022 <Phys::allocatePage()>:
c000a022:	56                   	push   esi
c000a023:	53                   	push   ebx
c000a024:	83 ec 14             	sub    esp,0x14
c000a027:	8b 35 a8 66 02 c0    	mov    esi,DWORD PTR ds:0xc00266a8
c000a02d:	89 f3                	mov    ebx,esi
c000a02f:	eb 0a                	jmp    c000a03b <Phys::allocatePage()+0x19>
c000a031:	89 1d a8 66 02 c0    	mov    DWORD PTR ds:0xc00266a8,ebx
c000a037:	39 de                	cmp    esi,ebx
c000a039:	74 24                	je     c000a05f <Phys::allocatePage()+0x3d>
c000a03b:	53                   	push   ebx
c000a03c:	e8 42 ff ff ff       	call   c0009f83 <Phys::getPageState(unsigned long)>
c000a041:	5a                   	pop    edx
c000a042:	84 c0                	test   al,al
c000a044:	74 69                	je     c000a0af <Phys::allocatePage()+0x8d>
c000a046:	43                   	inc    ebx
c000a047:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a04d:	75 e2                	jne    c000a031 <Phys::allocatePage()+0xf>
c000a04f:	31 db                	xor    ebx,ebx
c000a051:	c7 05 a8 66 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00266a8,0x0
c000a05b:	39 de                	cmp    esi,ebx
c000a05d:	75 dc                	jne    c000a03b <Phys::allocatePage()+0x19>
c000a05f:	83 ec 0c             	sub    esp,0xc
c000a062:	80 35 cc 66 02 c0 01 	xor    BYTE PTR ds:0xc00266cc,0x1
c000a069:	68 3c 2f 02 c0       	push   0xc0022f3c
c000a06e:	e8 06 2c 00 00       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c000a073:	58                   	pop    eax
c000a074:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a079:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a07c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000a082:	e8 81 28 00 00       	call   c000c908 <VAS::scanForEviction()>
c000a087:	83 c4 10             	add    esp,0x10
c000a08a:	85 c0                	test   eax,eax
c000a08c:	75 62                	jne    c000a0f0 <Phys::allocatePage()+0xce>
c000a08e:	83 ec 0c             	sub    esp,0xc
c000a091:	68 60 2f 02 c0       	push   0xc0022f60
c000a096:	e8 6c 8f 00 00       	call   c0013007 <Krnl::panic(char const*)>
c000a09b:	83 c4 10             	add    esp,0x10
c000a09e:	8b 1d a8 66 02 c0    	mov    ebx,DWORD PTR ds:0xc00266a8
c000a0a4:	53                   	push   ebx
c000a0a5:	e8 d9 fe ff ff       	call   c0009f83 <Phys::getPageState(unsigned long)>
c000a0aa:	5a                   	pop    edx
c000a0ab:	84 c0                	test   al,al
c000a0ad:	75 97                	jne    c000a046 <Phys::allocatePage()+0x24>
c000a0af:	6a 01                	push   0x1
c000a0b1:	53                   	push   ebx
c000a0b2:	e8 9a fe ff ff       	call   c0009f51 <Phys::setPageState(unsigned long, bool)>
c000a0b7:	5a                   	pop    edx
c000a0b8:	a1 b4 66 02 c0       	mov    eax,ds:0xc00266b4
c000a0bd:	59                   	pop    ecx
c000a0be:	40                   	inc    eax
c000a0bf:	8b 15 a8 66 02 c0    	mov    edx,DWORD PTR ds:0xc00266a8
c000a0c5:	a3 b4 66 02 c0       	mov    ds:0xc00266b4,eax
c000a0ca:	c1 e2 0c             	shl    edx,0xc
c000a0cd:	52                   	push   edx
c000a0ce:	ff 35 b8 66 02 c0    	push   DWORD PTR ds:0xc00266b8
c000a0d4:	50                   	push   eax
c000a0d5:	68 b1 2e 02 c0       	push   0xc0022eb1
c000a0da:	e8 9a 2b 00 00       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c000a0df:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c000a0e4:	83 c4 10             	add    esp,0x10
c000a0e7:	c1 e0 0c             	shl    eax,0xc
c000a0ea:	83 c4 14             	add    esp,0x14
c000a0ed:	5b                   	pop    ebx
c000a0ee:	5e                   	pop    esi
c000a0ef:	c3                   	ret    
c000a0f0:	83 ec 08             	sub    esp,0x8
c000a0f3:	89 c2                	mov    edx,eax
c000a0f5:	6a 01                	push   0x1
c000a0f7:	c1 ea 0c             	shr    edx,0xc
c000a0fa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a0fe:	52                   	push   edx
c000a0ff:	e8 4d fe ff ff       	call   c0009f51 <Phys::setPageState(unsigned long, bool)>
c000a104:	83 c4 10             	add    esp,0x10
c000a107:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a10b:	eb dd                	jmp    c000a0ea <Phys::allocatePage()+0xc8>

c000a10d <Phys::allocateContiguousPages(int)>:
c000a10d:	57                   	push   edi
c000a10e:	56                   	push   esi
c000a10f:	53                   	push   ebx
c000a110:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a114:	fa                   	cli    
c000a115:	ff 05 a8 9b 02 c0    	inc    DWORD PTR ds:0xc0029ba8
c000a11b:	31 db                	xor    ebx,ebx
c000a11d:	85 db                	test   ebx,ebx
c000a11f:	75 11                	jne    c000a132 <Phys::allocateContiguousPages(int)+0x25>
c000a121:	e8 fc fe ff ff       	call   c000a022 <Phys::allocatePage()>
c000a126:	83 fe 01             	cmp    esi,0x1
c000a129:	89 c7                	mov    edi,eax
c000a12b:	74 21                	je     c000a14e <Phys::allocateContiguousPages(int)+0x41>
c000a12d:	bb 01 00 00 00       	mov    ebx,0x1
c000a132:	e8 eb fe ff ff       	call   c000a022 <Phys::allocatePage()>
c000a137:	89 da                	mov    edx,ebx
c000a139:	c1 e2 0c             	shl    edx,0xc
c000a13c:	01 fa                	add    edx,edi
c000a13e:	39 c2                	cmp    edx,eax
c000a140:	74 20                	je     c000a162 <Phys::allocateContiguousPages(int)+0x55>
c000a142:	bb 01 00 00 00       	mov    ebx,0x1
c000a147:	89 c7                	mov    edi,eax
c000a149:	83 fe 01             	cmp    esi,0x1
c000a14c:	75 e4                	jne    c000a132 <Phys::allocateContiguousPages(int)+0x25>
c000a14e:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c000a153:	48                   	dec    eax
c000a154:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c000a159:	75 01                	jne    c000a15c <Phys::allocateContiguousPages(int)+0x4f>
c000a15b:	fb                   	sti    
c000a15c:	89 f8                	mov    eax,edi
c000a15e:	5b                   	pop    ebx
c000a15f:	5e                   	pop    esi
c000a160:	5f                   	pop    edi
c000a161:	c3                   	ret    
c000a162:	43                   	inc    ebx
c000a163:	39 f3                	cmp    ebx,esi
c000a165:	75 b6                	jne    c000a11d <Phys::allocateContiguousPages(int)+0x10>
c000a167:	eb e5                	jmp    c000a14e <Phys::allocateContiguousPages(int)+0x41>

c000a169 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000a169:	56                   	push   esi
c000a16a:	53                   	push   ebx
c000a16b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a16f:	39 1d ac 66 02 c0    	cmp    DWORD PTR ds:0xc00266ac,ebx
c000a175:	73 06                	jae    c000a17d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000a177:	89 1d ac 66 02 c0    	mov    DWORD PTR ds:0xc00266ac,ebx
c000a17d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a181:	c1 eb 0c             	shr    ebx,0xc
c000a184:	c1 e8 0c             	shr    eax,0xc
c000a187:	39 d8                	cmp    eax,ebx
c000a189:	73 13                	jae    c000a19e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000a18b:	6a 00                	push   0x0
c000a18d:	8d 70 01             	lea    esi,[eax+0x1]
c000a190:	50                   	push   eax
c000a191:	e8 bb fd ff ff       	call   c0009f51 <Phys::setPageState(unsigned long, bool)>
c000a196:	5a                   	pop    edx
c000a197:	89 f0                	mov    eax,esi
c000a199:	59                   	pop    ecx
c000a19a:	39 f3                	cmp    ebx,esi
c000a19c:	75 ed                	jne    c000a18b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000a19e:	5b                   	pop    ebx
c000a19f:	5e                   	pop    esi
c000a1a0:	c3                   	ret    

c000a1a1 <Phys::physicalMemorySetup(unsigned int)>:
c000a1a1:	55                   	push   ebp
c000a1a2:	57                   	push   edi
c000a1a3:	56                   	push   esi
c000a1a4:	53                   	push   ebx
c000a1a5:	31 db                	xor    ebx,ebx
c000a1a7:	83 ec 40             	sub    esp,0x40
c000a1aa:	6a 10                	push   0x10
c000a1ac:	6a 00                	push   0x0
c000a1ae:	68 bc 66 02 c0       	push   0xc00266bc
c000a1b3:	e8 c4 64 ff ff       	call   c000067c <memset>
c000a1b8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000a1bc:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a1c1:	05 00 10 00 00       	add    eax,0x1000
c000a1c6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a1ca:	5a                   	pop    edx
c000a1cb:	59                   	pop    ecx
c000a1cc:	50                   	push   eax
c000a1cd:	68 cf 2e 02 c0       	push   0xc0022ecf
c000a1d2:	e8 a2 2a 00 00       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c000a1d7:	83 c4 10             	add    esp,0x10
c000a1da:	83 ec 08             	sub    esp,0x8
c000a1dd:	6a 01                	push   0x1
c000a1df:	53                   	push   ebx
c000a1e0:	43                   	inc    ebx
c000a1e1:	e8 6b fd ff ff       	call   c0009f51 <Phys::setPageState(unsigned long, bool)>
c000a1e6:	83 c4 10             	add    esp,0x10
c000a1e9:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a1ef:	75 e9                	jne    c000a1da <Phys::physicalMemorySetup(unsigned int)+0x39>
c000a1f1:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000a1f8:	66 85 c0             	test   ax,ax
c000a1fb:	0f 84 8e 01 00 00    	je     c000a38f <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000a201:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a205:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a20d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a211:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000a216:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a21a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000a222:	eb 15                	jmp    c000a239 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000a224:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000a228:	83 c3 18             	add    ebx,0x18
c000a22b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a22f:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000a233:	0f 84 66 01 00 00    	je     c000a39f <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a239:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a23c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a23f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000a242:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a246:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a24a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000a24c:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000a24f:	01 f0                	add    eax,esi
c000a251:	55                   	push   ebp
c000a252:	11 fa                	adc    edx,edi
c000a254:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a258:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a25c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a260:	56                   	push   esi
c000a261:	68 90 2f 02 c0       	push   0xc0022f90
c000a266:	e8 0e 2a 00 00       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c000a26b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a26f:	83 c4 10             	add    esp,0x10
c000a272:	09 f8                	or     eax,edi
c000a274:	0f 85 25 01 00 00    	jne    c000a39f <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a27a:	4d                   	dec    ebp
c000a27b:	75 a7                	jne    c000a224 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a27d:	ba 00 00 08 00       	mov    edx,0x80000
c000a282:	89 c1                	mov    ecx,eax
c000a284:	39 f2                	cmp    edx,esi
c000a286:	19 f9                	sbb    ecx,edi
c000a288:	0f 82 a7 00 00 00    	jb     c000a335 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a28e:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a292:	89 c1                	mov    ecx,eax
c000a294:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a298:	0f 83 97 00 00 00    	jae    c000a335 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a29e:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a2a3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a2a7:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a2ab:	39 fa                	cmp    edx,edi
c000a2ad:	19 e8                	sbb    eax,ebp
c000a2af:	0f 82 9a 01 00 00    	jb     c000a44f <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c000a2b5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a2b9:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a2bd:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a2c3:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a2c8:	83 d5 ff             	adc    ebp,0xffffffff
c000a2cb:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a2cf:	31 c0                	xor    eax,eax
c000a2d1:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a2d5:	39 fa                	cmp    edx,edi
c000a2d7:	89 c1                	mov    ecx,eax
c000a2d9:	19 e9                	sbb    ecx,ebp
c000a2db:	0f 83 43 ff ff ff    	jae    c000a224 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a2e1:	be 00 00 08 00       	mov    esi,0x80000
c000a2e6:	51                   	push   ecx
c000a2e7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a2eb:	57                   	push   edi
c000a2ec:	56                   	push   esi
c000a2ed:	68 b4 2f 02 c0       	push   0xc0022fb4
c000a2f2:	e8 82 29 00 00       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c000a2f7:	5d                   	pop    ebp
c000a2f8:	58                   	pop    eax
c000a2f9:	57                   	push   edi
c000a2fa:	56                   	push   esi
c000a2fb:	e8 69 fe ff ff       	call   c000a169 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a300:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a304:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a308:	83 c4 0c             	add    esp,0xc
c000a30b:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a30f:	03 05 b8 66 02 c0    	add    eax,DWORD PTR ds:0xc00266b8
c000a315:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a31c:	a3 b8 66 02 c0       	mov    ds:0xc00266b8,eax
c000a321:	52                   	push   edx
c000a322:	50                   	push   eax
c000a323:	68 f5 2e 02 c0       	push   0xc0022ef5
c000a328:	e8 4c 29 00 00       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c000a32d:	83 c4 10             	add    esp,0x10
c000a330:	e9 ef fe ff ff       	jmp    c000a224 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a335:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a339:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a33d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a341:	39 ea                	cmp    edx,ebp
c000a343:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a347:	0f 82 d7 fe ff ff    	jb     c000a224 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a34d:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a352:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a356:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a35a:	0f 83 c4 fe ff ff    	jae    c000a224 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a360:	39 ee                	cmp    esi,ebp
c000a362:	89 f8                	mov    eax,edi
c000a364:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a368:	0f 83 78 ff ff ff    	jae    c000a2e6 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a36e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a372:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a376:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a37a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a37e:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a382:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a386:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a38a:	e9 57 ff ff ff       	jmp    c000a2e6 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a38f:	83 ec 0c             	sub    esp,0xc
c000a392:	68 e7 2e 02 c0       	push   0xc0022ee7
c000a397:	e8 6b 8c 00 00       	call   c0013007 <Krnl::panic(char const*)>
c000a39c:	83 c4 10             	add    esp,0x10
c000a39f:	83 ec 08             	sub    esp,0x8
c000a3a2:	bb 60 00 00 00       	mov    ebx,0x60
c000a3a7:	6a 00                	push   0x0
c000a3a9:	6a 06                	push   0x6
c000a3ab:	e8 a1 fb ff ff       	call   c0009f51 <Phys::setPageState(unsigned long, bool)>
c000a3b0:	58                   	pop    eax
c000a3b1:	5a                   	pop    edx
c000a3b2:	6a 00                	push   0x0
c000a3b4:	6a 07                	push   0x7
c000a3b6:	e8 96 fb ff ff       	call   c0009f51 <Phys::setPageState(unsigned long, bool)>
c000a3bb:	83 05 b8 66 02 c0 02 	add    DWORD PTR ds:0xc00266b8,0x2
c000a3c2:	83 c4 10             	add    esp,0x10
c000a3c5:	83 ec 08             	sub    esp,0x8
c000a3c8:	6a 00                	push   0x0
c000a3ca:	53                   	push   ebx
c000a3cb:	43                   	inc    ebx
c000a3cc:	e8 80 fb ff ff       	call   c0009f51 <Phys::setPageState(unsigned long, bool)>
c000a3d1:	83 c4 10             	add    esp,0x10
c000a3d4:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000a3da:	75 e9                	jne    c000a3c5 <Phys::physicalMemorySetup(unsigned int)+0x224>
c000a3dc:	a1 b8 66 02 c0       	mov    eax,ds:0xc00266b8
c000a3e1:	bb 40 01 00 00       	mov    ebx,0x140
c000a3e6:	83 c0 20             	add    eax,0x20
c000a3e9:	a3 b8 66 02 c0       	mov    ds:0xc00266b8,eax
c000a3ee:	eb 22                	jmp    c000a412 <Phys::physicalMemorySetup(unsigned int)+0x271>
c000a3f0:	83 ec 08             	sub    esp,0x8
c000a3f3:	6a 00                	push   0x0
c000a3f5:	53                   	push   ebx
c000a3f6:	43                   	inc    ebx
c000a3f7:	e8 55 fb ff ff       	call   c0009f51 <Phys::setPageState(unsigned long, bool)>
c000a3fc:	a1 b8 66 02 c0       	mov    eax,ds:0xc00266b8
c000a401:	83 c4 10             	add    esp,0x10
c000a404:	40                   	inc    eax
c000a405:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000a40b:	a3 b8 66 02 c0       	mov    ds:0xc00266b8,eax
c000a410:	74 07                	je     c000a419 <Phys::physicalMemorySetup(unsigned int)+0x278>
c000a412:	3d ff 03 00 00       	cmp    eax,0x3ff
c000a417:	7e d7                	jle    c000a3f0 <Phys::physicalMemorySetup(unsigned int)+0x24f>
c000a419:	bb d0 01 00 00       	mov    ebx,0x1d0
c000a41e:	3d ff 07 00 00       	cmp    eax,0x7ff
c000a423:	7f 22                	jg     c000a447 <Phys::physicalMemorySetup(unsigned int)+0x2a6>
c000a425:	83 ec 08             	sub    esp,0x8
c000a428:	6a 00                	push   0x0
c000a42a:	53                   	push   ebx
c000a42b:	43                   	inc    ebx
c000a42c:	e8 20 fb ff ff       	call   c0009f51 <Phys::setPageState(unsigned long, bool)>
c000a431:	a1 b8 66 02 c0       	mov    eax,ds:0xc00266b8
c000a436:	83 c4 10             	add    esp,0x10
c000a439:	40                   	inc    eax
c000a43a:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000a440:	a3 b8 66 02 c0       	mov    ds:0xc00266b8,eax
c000a445:	75 d7                	jne    c000a41e <Phys::physicalMemorySetup(unsigned int)+0x27d>
c000a447:	83 c4 3c             	add    esp,0x3c
c000a44a:	5b                   	pop    ebx
c000a44b:	5e                   	pop    esi
c000a44c:	5f                   	pop    edi
c000a44d:	5d                   	pop    ebp
c000a44e:	c3                   	ret    
c000a44f:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a457:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a45f:	e9 51 fe ff ff       	jmp    c000a2b5 <Phys::physicalMemorySetup(unsigned int)+0x114>

c000a464 <Pipe::isAtty()>:
c000a464:	31 c0                	xor    eax,eax
c000a466:	c3                   	ret    
c000a467:	90                   	nop

c000a468 <Pipe::~Pipe()>:
c000a468:	83 ec 0c             	sub    esp,0xc
c000a46b:	ba 20 30 02 c0       	mov    edx,0xc0023020
c000a470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a474:	89 10                	mov    DWORD PTR [eax],edx
c000a476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a47a:	83 ec 0c             	sub    esp,0xc
c000a47d:	50                   	push   eax
c000a47e:	e8 39 12 00 00       	call   c000b6bc <UnixFile::~UnixFile()>
c000a483:	83 c4 10             	add    esp,0x10
c000a486:	90                   	nop
c000a487:	83 c4 0c             	add    esp,0xc
c000a48a:	c3                   	ret    
c000a48b:	90                   	nop

c000a48c <Pipe::~Pipe()>:
c000a48c:	83 ec 0c             	sub    esp,0xc
c000a48f:	83 ec 0c             	sub    esp,0xc
c000a492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a496:	e8 cd ff ff ff       	call   c000a468 <Pipe::~Pipe()>
c000a49b:	83 c4 10             	add    esp,0x10
c000a49e:	83 ec 08             	sub    esp,0x8
c000a4a1:	6a 20                	push   0x20
c000a4a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4a7:	e8 ec 26 00 00       	call   c000cb98 <operator delete(void*, unsigned long)>
c000a4ac:	83 c4 10             	add    esp,0x10
c000a4af:	83 c4 0c             	add    esp,0xc
c000a4b2:	c3                   	ret    
c000a4b3:	90                   	nop

c000a4b4 <Pipe::write(unsigned long long, void*, int*)>:
c000a4b4:	55                   	push   ebp
c000a4b5:	57                   	push   edi
c000a4b6:	56                   	push   esi
c000a4b7:	53                   	push   ebx
c000a4b8:	83 ec 1c             	sub    esp,0x1c
c000a4bb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a4bf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a4c3:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a4c6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a4ca:	89 04 24             	mov    DWORD PTR [esp],eax
c000a4cd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a4d1:	89 d8                	mov    eax,ebx
c000a4d3:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a4d6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a4da:	89 d6                	mov    esi,edx
c000a4dc:	89 d7                	mov    edi,edx
c000a4de:	c1 ff 1f             	sar    edi,0x1f
c000a4e1:	03 34 24             	add    esi,DWORD PTR [esp]
c000a4e4:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a4e8:	c1 f8 1f             	sar    eax,0x1f
c000a4eb:	39 f3                	cmp    ebx,esi
c000a4ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a4f5:	19 f8                	sbb    eax,edi
c000a4f7:	b8 01 00 00 00       	mov    eax,0x1
c000a4fc:	72 6e                	jb     c000a56c <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a4fe:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a501:	01 d0                	add    eax,edx
c000a503:	99                   	cdq    
c000a504:	f7 fb                	idiv   ebx
c000a506:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a50a:	29 d3                	sub    ebx,edx
c000a50c:	89 d7                	mov    edi,edx
c000a50e:	89 de                	mov    esi,ebx
c000a510:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a513:	c1 fb 1f             	sar    ebx,0x1f
c000a516:	39 f2                	cmp    edx,esi
c000a518:	19 d8                	sbb    eax,ebx
c000a51a:	b8 00 00 00 00       	mov    eax,0x0
c000a51f:	72 04                	jb     c000a525 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000a521:	89 d0                	mov    eax,edx
c000a523:	29 f0                	sub    eax,esi
c000a525:	89 d3                	mov    ebx,edx
c000a527:	29 c3                	sub    ebx,eax
c000a529:	74 0b                	je     c000a536 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000a52b:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000a52e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a532:	89 d9                	mov    ecx,ebx
c000a534:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a536:	85 c0                	test   eax,eax
c000a538:	74 0d                	je     c000a547 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000a53a:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000a53e:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000a541:	89 de                	mov    esi,ebx
c000a543:	89 c1                	mov    ecx,eax
c000a545:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a547:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000a54a:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a54f:	75 10                	jne    c000a561 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000a551:	83 ec 0c             	sub    esp,0xc
c000a554:	68 dd 2f 02 c0       	push   0xc0022fdd
c000a559:	e8 a9 8a 00 00       	call   c0013007 <Krnl::panic(char const*)>
c000a55e:	83 c4 10             	add    esp,0x10
c000a561:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a565:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a568:	89 08                	mov    DWORD PTR [eax],ecx
c000a56a:	31 c0                	xor    eax,eax
c000a56c:	83 c4 1c             	add    esp,0x1c
c000a56f:	5b                   	pop    ebx
c000a570:	5e                   	pop    esi
c000a571:	5f                   	pop    edi
c000a572:	5d                   	pop    ebp
c000a573:	c3                   	ret    

c000a574 <Pipe::read(unsigned long long, void*, int*)>:
c000a574:	55                   	push   ebp
c000a575:	57                   	push   edi
c000a576:	56                   	push   esi
c000a577:	53                   	push   ebx
c000a578:	83 ec 1c             	sub    esp,0x1c
c000a57b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a57f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a583:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a587:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a58a:	89 c8                	mov    eax,ecx
c000a58c:	99                   	cdq    
c000a58d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a591:	74 24                	je     c000a5b7 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a593:	39 f9                	cmp    ecx,edi
c000a595:	89 d1                	mov    ecx,edx
c000a597:	19 f1                	sbb    ecx,esi
c000a599:	73 1c                	jae    c000a5b7 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a59b:	fa                   	cli    
c000a59c:	ff 05 a8 9b 02 c0    	inc    DWORD PTR ds:0xc0029ba8
c000a5a2:	e8 c5 c0 00 00       	call   c001666c <schedule()>
c000a5a7:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c000a5ac:	48                   	dec    eax
c000a5ad:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c000a5b2:	75 d3                	jne    c000a587 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a5b4:	fb                   	sti    
c000a5b5:	eb d0                	jmp    c000a587 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a5b7:	39 f8                	cmp    eax,edi
c000a5b9:	89 d1                	mov    ecx,edx
c000a5bb:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a5be:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a5c2:	19 f1                	sbb    ecx,esi
c000a5c4:	73 07                	jae    c000a5cd <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a5c6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5c9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a5cd:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a5d0:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a5d3:	29 f7                	sub    edi,esi
c000a5d5:	89 f8                	mov    eax,edi
c000a5d7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a5db:	99                   	cdq    
c000a5dc:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a5df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a5e3:	19 d0                	sbb    eax,edx
c000a5e5:	73 07                	jae    c000a5ee <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a5e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a5ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a5ee:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a5f1:	89 ea                	mov    edx,ebp
c000a5f3:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a5f7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a5fc:	74 0d                	je     c000a60b <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a5fe:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a601:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a605:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a609:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a60b:	85 d2                	test   edx,edx
c000a60d:	74 11                	je     c000a620 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a60f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a613:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a616:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a61a:	89 d1                	mov    ecx,edx
c000a61c:	89 c7                	mov    edi,eax
c000a61e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a620:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a623:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a626:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a629:	99                   	cdq    
c000a62a:	89 f7                	mov    edi,esi
c000a62c:	03 04 24             	add    eax,DWORD PTR [esp]
c000a62f:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a633:	c1 ff 1f             	sar    edi,0x1f
c000a636:	57                   	push   edi
c000a637:	56                   	push   esi
c000a638:	52                   	push   edx
c000a639:	50                   	push   eax
c000a63a:	e8 11 72 01 00       	call   c0021850 <__umoddi3>
c000a63f:	83 c4 10             	add    esp,0x10
c000a642:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a645:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a64a:	75 10                	jne    c000a65c <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a64c:	83 ec 0c             	sub    esp,0xc
c000a64f:	68 fa 2f 02 c0       	push   0xc0022ffa
c000a654:	e8 ae 89 00 00       	call   c0013007 <Krnl::panic(char const*)>
c000a659:	83 c4 10             	add    esp,0x10
c000a65c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a660:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a663:	89 10                	mov    DWORD PTR [eax],edx
c000a665:	83 c4 1c             	add    esp,0x1c
c000a668:	31 c0                	xor    eax,eax
c000a66a:	5b                   	pop    ebx
c000a66b:	5e                   	pop    esi
c000a66c:	5f                   	pop    edi
c000a66d:	5d                   	pop    ebp
c000a66e:	c3                   	ret    
c000a66f:	90                   	nop

c000a670 <Pipe::Pipe(int)>:
c000a670:	83 ec 0c             	sub    esp,0xc
c000a673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a677:	83 ec 08             	sub    esp,0x8
c000a67a:	6a 00                	push   0x0
c000a67c:	50                   	push   eax
c000a67d:	e8 58 0e 00 00       	call   c000b4da <UnixFile::UnixFile(int)>
c000a682:	83 c4 10             	add    esp,0x10
c000a685:	ba 20 30 02 c0       	mov    edx,0xc0023020
c000a68a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a68e:	89 10                	mov    DWORD PTR [eax],edx
c000a690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a694:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a698:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a69b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a69f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000a6a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6aa:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000a6b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6b5:	83 ec 0c             	sub    esp,0xc
c000a6b8:	50                   	push   eax
c000a6b9:	e8 ad f2 ff ff       	call   c000996b <malloc>
c000a6be:	83 c4 10             	add    esp,0x10
c000a6c1:	89 c2                	mov    edx,eax
c000a6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6c7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a6ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6ce:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000a6d2:	90                   	nop
c000a6d3:	83 c4 0c             	add    esp,0xc
c000a6d6:	c3                   	ret    
c000a6d7:	90                   	nop

c000a6d8 <VgaText::isAtty()>:
c000a6d8:	b0 01                	mov    al,0x1
c000a6da:	c3                   	ret    
c000a6db:	90                   	nop

c000a6dc <VgaText::~VgaText()>:
c000a6dc:	83 ec 0c             	sub    esp,0xc
c000a6df:	ba a8 30 02 c0       	mov    edx,0xc00230a8
c000a6e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6e8:	89 10                	mov    DWORD PTR [eax],edx
c000a6ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6ee:	83 ec 0c             	sub    esp,0xc
c000a6f1:	50                   	push   eax
c000a6f2:	e8 c5 0f 00 00       	call   c000b6bc <UnixFile::~UnixFile()>
c000a6f7:	83 c4 10             	add    esp,0x10
c000a6fa:	90                   	nop
c000a6fb:	83 c4 0c             	add    esp,0xc
c000a6fe:	c3                   	ret    
c000a6ff:	90                   	nop

c000a700 <VgaText::~VgaText()>:
c000a700:	83 ec 0c             	sub    esp,0xc
c000a703:	83 ec 0c             	sub    esp,0xc
c000a706:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a70a:	e8 cd ff ff ff       	call   c000a6dc <VgaText::~VgaText()>
c000a70f:	83 c4 10             	add    esp,0x10
c000a712:	83 ec 08             	sub    esp,0x8
c000a715:	68 b4 01 00 00       	push   0x1b4
c000a71a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a71e:	e8 75 24 00 00       	call   c000cb98 <operator delete(void*, unsigned long)>
c000a723:	83 c4 10             	add    esp,0x10
c000a726:	83 c4 0c             	add    esp,0xc
c000a729:	c3                   	ret    

c000a72a <VgaText::read(unsigned long long, void*, int*)>:
c000a72a:	83 ec 10             	sub    esp,0x10
c000a72d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a731:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a735:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a739:	e8 17 48 00 00       	call   c000ef55 <readKeyboard(VgaText*, char*, unsigned long)>
c000a73e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a742:	89 02                	mov    DWORD PTR [edx],eax
c000a744:	31 c0                	xor    eax,eax
c000a746:	83 c4 1c             	add    esp,0x1c
c000a749:	c3                   	ret    

c000a74a <setTerminalScrollLock(bool)>:
c000a74a:	c3                   	ret    

c000a74b <addToTerminalCycle(VgaText*)>:
c000a74b:	8b 15 00 67 02 c0    	mov    edx,DWORD PTR ds:0xc0026700
c000a751:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a755:	85 d2                	test   edx,edx
c000a757:	75 09                	jne    c000a762 <addToTerminalCycle(VgaText*)+0x17>
c000a759:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000a75c:	a3 00 67 02 c0       	mov    ds:0xc0026700,eax
c000a761:	c3                   	ret    
c000a762:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000a765:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000a768:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000a76b:	c3                   	ret    

c000a76c <installVgaTextImplementation()>:
c000a76c:	83 ec 10             	sub    esp,0x10
c000a76f:	6a 20                	push   0x20
c000a771:	6a 00                	push   0x0
c000a773:	68 e0 66 02 c0       	push   0xc00266e0
c000a778:	e8 ff 5e ff ff       	call   c000067c <memset>
c000a77d:	83 c4 1c             	add    esp,0x1c
c000a780:	c3                   	ret    

c000a781 <scrollTerminalScrollLock(int)>:
c000a781:	c3                   	ret    

c000a782 <VgaText::updateTitle()>:
c000a782:	53                   	push   ebx
c000a783:	31 c0                	xor    eax,eax
c000a785:	83 ec 58             	sub    esp,0x58
c000a788:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000a78c:	89 e1                	mov    ecx,esp
c000a78e:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000a792:	40                   	inc    eax
c000a793:	83 f8 50             	cmp    eax,0x50
c000a796:	75 f6                	jne    c000a78e <VgaText::updateTitle()+0xc>
c000a798:	31 c0                	xor    eax,eax
c000a79a:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000a7a1:	84 db                	test   bl,bl
c000a7a3:	74 06                	je     c000a7ab <VgaText::updateTitle()+0x29>
c000a7a5:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000a7a8:	40                   	inc    eax
c000a7a9:	eb ef                	jmp    c000a79a <VgaText::updateTitle()+0x18>
c000a7ab:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000a7ae:	85 c0                	test   eax,eax
c000a7b0:	74 09                	je     c000a7bb <VgaText::updateTitle()+0x39>
c000a7b2:	53                   	push   ebx
c000a7b3:	53                   	push   ebx
c000a7b4:	51                   	push   ecx
c000a7b5:	52                   	push   edx
c000a7b6:	ff d0                	call   eax
c000a7b8:	83 c4 10             	add    esp,0x10
c000a7bb:	83 c4 58             	add    esp,0x58
c000a7be:	5b                   	pop    ebx
c000a7bf:	c3                   	ret    

c000a7c0 <VgaText::load()>:
c000a7c0:	53                   	push   ebx
c000a7c1:	31 c0                	xor    eax,eax
c000a7c3:	83 ec 58             	sub    esp,0x58
c000a7c6:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000a7ca:	89 e2                	mov    edx,esp
c000a7cc:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000a7d0:	40                   	inc    eax
c000a7d1:	83 f8 50             	cmp    eax,0x50
c000a7d4:	75 f6                	jne    c000a7cc <VgaText::load()+0xc>
c000a7d6:	31 c0                	xor    eax,eax
c000a7d8:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000a7df:	84 c9                	test   cl,cl
c000a7e1:	74 06                	je     c000a7e9 <VgaText::load()+0x29>
c000a7e3:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a7e6:	40                   	inc    eax
c000a7e7:	eb ef                	jmp    c000a7d8 <VgaText::load()+0x18>
c000a7e9:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000a7ec:	85 c0                	test   eax,eax
c000a7ee:	74 09                	je     c000a7f9 <VgaText::load()+0x39>
c000a7f0:	51                   	push   ecx
c000a7f1:	51                   	push   ecx
c000a7f2:	52                   	push   edx
c000a7f3:	53                   	push   ebx
c000a7f4:	ff d0                	call   eax
c000a7f6:	83 c4 10             	add    esp,0x10
c000a7f9:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000a7fc:	85 c0                	test   eax,eax
c000a7fe:	74 09                	je     c000a809 <VgaText::load()+0x49>
c000a800:	83 ec 0c             	sub    esp,0xc
c000a803:	53                   	push   ebx
c000a804:	ff d0                	call   eax
c000a806:	83 c4 10             	add    esp,0x10
c000a809:	83 c4 58             	add    esp,0x58
c000a80c:	5b                   	pop    ebx
c000a80d:	c3                   	ret    

c000a80e <VgaText::updateCursor()>:
c000a80e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a812:	39 05 04 67 02 c0    	cmp    DWORD PTR ds:0xc0026704,eax
c000a818:	75 09                	jne    c000a823 <VgaText::updateCursor()+0x15>
c000a81a:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000a81d:	85 c0                	test   eax,eax
c000a81f:	74 02                	je     c000a823 <VgaText::updateCursor()+0x15>
c000a821:	ff e0                	jmp    eax
c000a823:	c3                   	ret    

c000a824 <VgaText::doANSI_SGR(int)>:
c000a824:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a82c:	85 d2                	test   edx,edx
c000a82e:	75 0b                	jne    c000a83b <VgaText::doANSI_SGR(int)+0x17>
c000a830:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000a833:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a836:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a839:	eb 59                	jmp    c000a894 <VgaText::doANSI_SGR(int)+0x70>
c000a83b:	83 fa 07             	cmp    edx,0x7
c000a83e:	75 0b                	jne    c000a84b <VgaText::doANSI_SGR(int)+0x27>
c000a840:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000a843:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000a846:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000a849:	eb 49                	jmp    c000a894 <VgaText::doANSI_SGR(int)+0x70>
c000a84b:	83 fa 1b             	cmp    edx,0x1b
c000a84e:	74 e0                	je     c000a830 <VgaText::doANSI_SGR(int)+0xc>
c000a850:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000a853:	83 f9 07             	cmp    ecx,0x7
c000a856:	77 09                	ja     c000a861 <VgaText::doANSI_SGR(int)+0x3d>
c000a858:	8b 14 8d 40 5d 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffda2c0]
c000a85f:	eb 20                	jmp    c000a881 <VgaText::doANSI_SGR(int)+0x5d>
c000a861:	8d 4a d8             	lea    ecx,[edx-0x28]
c000a864:	83 f9 07             	cmp    ecx,0x7
c000a867:	77 09                	ja     c000a872 <VgaText::doANSI_SGR(int)+0x4e>
c000a869:	8b 14 8d 40 5d 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffda2c0]
c000a870:	eb 22                	jmp    c000a894 <VgaText::doANSI_SGR(int)+0x70>
c000a872:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000a875:	83 f9 07             	cmp    ecx,0x7
c000a878:	77 0b                	ja     c000a885 <VgaText::doANSI_SGR(int)+0x61>
c000a87a:	8b 14 95 f8 5b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda408]
c000a881:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a884:	c3                   	ret    
c000a885:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000a888:	83 f9 07             	cmp    ecx,0x7
c000a88b:	77 0a                	ja     c000a897 <VgaText::doANSI_SGR(int)+0x73>
c000a88d:	8b 14 95 d0 5b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda430]
c000a894:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a897:	c3                   	ret    

c000a898 <VgaText::setDefaultBgColour(VgaColour)>:
c000a898:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a89c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a8a0:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000a8a3:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a8a6:	c3                   	ret    
c000a8a7:	90                   	nop

c000a8a8 <VgaText::setDefaultFgColour(VgaColour)>:
c000a8a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a8b0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000a8b3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a8b6:	c3                   	ret    
c000a8b7:	90                   	nop

c000a8b8 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000a8b8:	53                   	push   ebx
c000a8b9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a8bd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a8c1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a8c5:	51                   	push   ecx
c000a8c6:	e8 cd ff ff ff       	call   c000a898 <VgaText::setDefaultBgColour(VgaColour)>
c000a8cb:	58                   	pop    eax
c000a8cc:	5a                   	pop    edx
c000a8cd:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000a8d1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a8d5:	5b                   	pop    ebx
c000a8d6:	eb d0                	jmp    c000a8a8 <VgaText::setDefaultFgColour(VgaColour)>

c000a8d8 <VgaText::setTitleTextColour(VgaColour)>:
c000a8d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a8e0:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000a8e3:	e9 9a fe ff ff       	jmp    c000a782 <VgaText::updateTitle()>

c000a8e8 <VgaText::setTitleColour(VgaColour)>:
c000a8e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a8f0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a8f3:	e9 8a fe ff ff       	jmp    c000a782 <VgaText::updateTitle()>

c000a8f8 <VgaText::setTitle(char*)>:
c000a8f8:	53                   	push   ebx
c000a8f9:	83 ec 10             	sub    esp,0x10
c000a8fc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a900:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a904:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000a90a:	50                   	push   eax
c000a90b:	e8 28 5e ff ff       	call   c0000738 <strcpy>
c000a910:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a914:	83 c4 18             	add    esp,0x18
c000a917:	5b                   	pop    ebx
c000a918:	e9 65 fe ff ff       	jmp    c000a782 <VgaText::updateTitle()>
c000a91d:	90                   	nop

c000a91e <VgaText::combineColours(unsigned char, unsigned char)>:
c000a91e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000a922:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000a927:	83 e0 0f             	and    eax,0xf
c000a92a:	c1 e2 04             	shl    edx,0x4
c000a92d:	09 d0                	or     eax,edx
c000a92f:	c3                   	ret    

c000a930 <VgaText::scrollScreen()>:
c000a930:	55                   	push   ebp
c000a931:	b9 01 00 00 00       	mov    ecx,0x1
c000a936:	57                   	push   edi
c000a937:	56                   	push   esi
c000a938:	53                   	push   ebx
c000a939:	83 ec 0c             	sub    esp,0xc
c000a93c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a940:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000a946:	31 ff                	xor    edi,edi
c000a948:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a94b:	83 f9 17             	cmp    ecx,0x17
c000a94e:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000a951:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000a958:	75 27                	jne    c000a981 <VgaText::scrollScreen()+0x51>
c000a95a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000a95d:	01 f5                	add    ebp,esi
c000a95f:	f7 c7 01 00 00 00    	test   edi,0x1
c000a965:	74 16                	je     c000a97d <VgaText::scrollScreen()+0x4d>
c000a967:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000a96b:	50                   	push   eax
c000a96c:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000a970:	50                   	push   eax
c000a971:	e8 a8 ff ff ff       	call   c000a91e <VgaText::combineColours(unsigned char, unsigned char)>
c000a976:	5a                   	pop    edx
c000a977:	5a                   	pop    edx
c000a978:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000a97b:	eb 04                	jmp    c000a981 <VgaText::scrollScreen()+0x51>
c000a97d:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000a981:	47                   	inc    edi
c000a982:	46                   	inc    esi
c000a983:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000a989:	75 bd                	jne    c000a948 <VgaText::scrollScreen()+0x18>
c000a98b:	41                   	inc    ecx
c000a98c:	83 f9 18             	cmp    ecx,0x18
c000a98f:	75 af                	jne    c000a940 <VgaText::scrollScreen()+0x10>
c000a991:	39 1d 04 67 02 c0    	cmp    DWORD PTR ds:0xc0026704,ebx
c000a997:	75 1b                	jne    c000a9b4 <VgaText::scrollScreen()+0x84>
c000a999:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000a99d:	74 05                	je     c000a9a4 <VgaText::scrollScreen()+0x74>
c000a99f:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000a9a2:	eb 10                	jmp    c000a9b4 <VgaText::scrollScreen()+0x84>
c000a9a4:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000a9a7:	85 c0                	test   eax,eax
c000a9a9:	74 09                	je     c000a9b4 <VgaText::scrollScreen()+0x84>
c000a9ab:	83 ec 0c             	sub    esp,0xc
c000a9ae:	53                   	push   ebx
c000a9af:	ff d0                	call   eax
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a9b8:	83 c4 0c             	add    esp,0xc
c000a9bb:	5b                   	pop    ebx
c000a9bc:	5e                   	pop    esi
c000a9bd:	5f                   	pop    edi
c000a9be:	5d                   	pop    ebp
c000a9bf:	e9 4a fe ff ff       	jmp    c000a80e <VgaText::updateCursor()>

c000a9c4 <VgaText::combineCharAndColour(char, unsigned char)>:
c000a9c4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000a9c9:	c1 e0 08             	shl    eax,0x8
c000a9cc:	89 c2                	mov    edx,eax
c000a9ce:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000a9d3:	09 d0                	or     eax,edx
c000a9d5:	c3                   	ret    

c000a9d6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000a9d6:	56                   	push   esi
c000a9d7:	53                   	push   ebx
c000a9d8:	51                   	push   ecx
c000a9d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a9dd:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000a9e2:	50                   	push   eax
c000a9e3:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000a9e8:	50                   	push   eax
c000a9e9:	e8 30 ff ff ff       	call   c000a91e <VgaText::combineColours(unsigned char, unsigned char)>
c000a9ee:	5b                   	pop    ebx
c000a9ef:	0f b6 c0             	movzx  eax,al
c000a9f2:	5e                   	pop    esi
c000a9f3:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000a9f8:	50                   	push   eax
c000a9f9:	53                   	push   ebx
c000a9fa:	e8 c5 ff ff ff       	call   c000a9c4 <VgaText::combineCharAndColour(char, unsigned char)>
c000a9ff:	5a                   	pop    edx
c000aa00:	5e                   	pop    esi
c000aa01:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000aa04:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000aa0a:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000aa0e:	0f b7 d2             	movzx  edx,dx
c000aa11:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000aa15:	39 0d 04 67 02 c0    	cmp    DWORD PTR ds:0xc0026704,ecx
c000aa1b:	75 10                	jne    c000aa2d <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000aa1d:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000aa20:	85 c0                	test   eax,eax
c000aa22:	74 09                	je     c000aa2d <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000aa24:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000aa28:	5a                   	pop    edx
c000aa29:	5b                   	pop    ebx
c000aa2a:	5e                   	pop    esi
c000aa2b:	ff e0                	jmp    eax
c000aa2d:	58                   	pop    eax
c000aa2e:	5b                   	pop    ebx
c000aa2f:	5e                   	pop    esi
c000aa30:	c3                   	ret    
c000aa31:	90                   	nop

c000aa32 <VgaText::getCursorX()>:
c000aa32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa36:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000aa39:	c3                   	ret    

c000aa3a <VgaText::getCursorY()>:
c000aa3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa3e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000aa41:	c3                   	ret    

c000aa42 <VgaText::setCursor(int, int)>:
c000aa42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa46:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aa4a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000aa4d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aa51:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000aa54:	e9 b5 fd ff ff       	jmp    c000a80e <VgaText::updateCursor()>

c000aa59 <setActiveTerminal(VgaText*)>:
c000aa59:	53                   	push   ebx
c000aa5a:	83 ec 08             	sub    esp,0x8
c000aa5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aa61:	85 db                	test   ebx,ebx
c000aa63:	75 11                	jne    c000aa76 <setActiveTerminal(VgaText*)+0x1d>
c000aa65:	c7 44 24 10 34 30 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023034
c000aa6d:	83 c4 08             	add    esp,0x8
c000aa70:	5b                   	pop    ebx
c000aa71:	e9 91 85 00 00       	jmp    c0013007 <Krnl::panic(char const*)>
c000aa76:	a1 04 67 02 c0       	mov    eax,ds:0xc0026704
c000aa7b:	85 c0                	test   eax,eax
c000aa7d:	74 0c                	je     c000aa8b <setActiveTerminal(VgaText*)+0x32>
c000aa7f:	83 ec 0c             	sub    esp,0xc
c000aa82:	50                   	push   eax
c000aa83:	e8 86 fd ff ff       	call   c000a80e <VgaText::updateCursor()>
c000aa88:	83 c4 10             	add    esp,0x10
c000aa8b:	89 1d 04 67 02 c0    	mov    DWORD PTR ds:0xc0026704,ebx
c000aa91:	51                   	push   ecx
c000aa92:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000aa95:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000aa98:	53                   	push   ebx
c000aa99:	e8 a4 ff ff ff       	call   c000aa42 <VgaText::setCursor(int, int)>
c000aa9e:	83 c4 10             	add    esp,0x10
c000aaa1:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000aaa5:	75 07                	jne    c000aaae <setActiveTerminal(VgaText*)+0x55>
c000aaa7:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000aaae:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000aab2:	83 c4 08             	add    esp,0x8
c000aab5:	5b                   	pop    ebx
c000aab6:	e9 05 fd ff ff       	jmp    c000a7c0 <VgaText::load()>

c000aabb <doTerminalCycle()>:
c000aabb:	83 ec 18             	sub    esp,0x18
c000aabe:	a1 00 67 02 c0       	mov    eax,ds:0xc0026700
c000aac3:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000aac6:	50                   	push   eax
c000aac7:	a3 00 67 02 c0       	mov    ds:0xc0026700,eax
c000aacc:	e8 88 ff ff ff       	call   c000aa59 <setActiveTerminal(VgaText*)>
c000aad1:	83 c4 1c             	add    esp,0x1c
c000aad4:	c3                   	ret    
c000aad5:	90                   	nop

c000aad6 <VgaText::setCursorX(int)>:
c000aad6:	83 ec 10             	sub    esp,0x10
c000aad9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aadd:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000aae0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aae4:	50                   	push   eax
c000aae5:	e8 58 ff ff ff       	call   c000aa42 <VgaText::setCursor(int, int)>
c000aaea:	83 c4 1c             	add    esp,0x1c
c000aaed:	c3                   	ret    

c000aaee <VgaText::setCursorY(int)>:
c000aaee:	83 ec 10             	sub    esp,0x10
c000aaf1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aaf5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aaf9:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000aafc:	50                   	push   eax
c000aafd:	e8 40 ff ff ff       	call   c000aa42 <VgaText::setCursor(int, int)>
c000ab02:	83 c4 1c             	add    esp,0x1c
c000ab05:	c3                   	ret    

c000ab06 <VgaText::incrementCursor(bool)>:
c000ab06:	56                   	push   esi
c000ab07:	53                   	push   ebx
c000ab08:	51                   	push   ecx
c000ab09:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ab0d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ab11:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ab14:	40                   	inc    eax
c000ab15:	83 f8 50             	cmp    eax,0x50
c000ab18:	74 05                	je     c000ab1f <VgaText::incrementCursor(bool)+0x19>
c000ab1a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ab1d:	eb 24                	jmp    c000ab43 <VgaText::incrementCursor(bool)+0x3d>
c000ab1f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ab22:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ab29:	8d 50 01             	lea    edx,[eax+0x1]
c000ab2c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000ab2f:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000ab32:	75 0f                	jne    c000ab43 <VgaText::incrementCursor(bool)+0x3d>
c000ab34:	83 ec 0c             	sub    esp,0xc
c000ab37:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000ab3a:	53                   	push   ebx
c000ab3b:	e8 f0 fd ff ff       	call   c000a930 <VgaText::scrollScreen()>
c000ab40:	83 c4 10             	add    esp,0x10
c000ab43:	89 f0                	mov    eax,esi
c000ab45:	84 c0                	test   al,al
c000ab47:	74 0c                	je     c000ab55 <VgaText::incrementCursor(bool)+0x4f>
c000ab49:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab4d:	5a                   	pop    edx
c000ab4e:	5b                   	pop    ebx
c000ab4f:	5e                   	pop    esi
c000ab50:	e9 b9 fc ff ff       	jmp    c000a80e <VgaText::updateCursor()>
c000ab55:	58                   	pop    eax
c000ab56:	5b                   	pop    ebx
c000ab57:	5e                   	pop    esi
c000ab58:	c3                   	ret    
c000ab59:	90                   	nop

c000ab5a <VgaText::decrementCursor(bool)>:
c000ab5a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ab5e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ab62:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000ab65:	85 c0                	test   eax,eax
c000ab67:	74 04                	je     c000ab6d <VgaText::decrementCursor(bool)+0x13>
c000ab69:	48                   	dec    eax
c000ab6a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000ab6d:	84 c9                	test   cl,cl
c000ab6f:	74 09                	je     c000ab7a <VgaText::decrementCursor(bool)+0x20>
c000ab71:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab75:	e9 94 fc ff ff       	jmp    c000a80e <VgaText::updateCursor()>
c000ab7a:	c3                   	ret    
c000ab7b:	90                   	nop

c000ab7c <VgaText::putchar(char, VgaColour, VgaColour)>:
c000ab7c:	53                   	push   ebx
c000ab7d:	83 ec 08             	sub    esp,0x8
c000ab80:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ab84:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ab88:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ab8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ab90:	3c 07                	cmp    al,0x7
c000ab92:	75 21                	jne    c000abb5 <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000ab94:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ab9c:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000aba4:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c000abac:	83 c4 08             	add    esp,0x8
c000abaf:	5b                   	pop    ebx
c000abb0:	e9 5e 2f 00 00       	jmp    c000db13 <Krnl::beep(int, int, bool)>
c000abb5:	3c 0d                	cmp    al,0xd
c000abb7:	75 09                	jne    c000abc2 <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c000abb9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000abc0:	eb 2c                	jmp    c000abee <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000abc2:	3c 0a                	cmp    al,0xa
c000abc4:	75 31                	jne    c000abf7 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000abc6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000abc9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000abd0:	8d 50 01             	lea    edx,[eax+0x1]
c000abd3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000abd6:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000abd9:	75 0f                	jne    c000abea <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c000abdb:	83 ec 0c             	sub    esp,0xc
c000abde:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000abe1:	53                   	push   ebx
c000abe2:	e8 49 fd ff ff       	call   c000a930 <VgaText::scrollScreen()>
c000abe7:	83 c4 10             	add    esp,0x10
c000abea:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000abee:	83 c4 08             	add    esp,0x8
c000abf1:	5b                   	pop    ebx
c000abf2:	e9 17 fc ff ff       	jmp    c000a80e <VgaText::updateCursor()>
c000abf7:	3c 08                	cmp    al,0x8
c000abf9:	75 25                	jne    c000ac20 <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c000abfb:	50                   	push   eax
c000abfc:	50                   	push   eax
c000abfd:	6a 01                	push   0x1
c000abff:	53                   	push   ebx
c000ac00:	e8 55 ff ff ff       	call   c000ab5a <VgaText::decrementCursor(bool)>
c000ac05:	5a                   	pop    edx
c000ac06:	59                   	pop    ecx
c000ac07:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ac0a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ac0d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000ac10:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ac13:	6a 20                	push   0x20
c000ac15:	53                   	push   ebx
c000ac16:	e8 bb fd ff ff       	call   c000a9d6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ac1b:	83 c4 28             	add    esp,0x28
c000ac1e:	5b                   	pop    ebx
c000ac1f:	c3                   	ret    
c000ac20:	83 ec 08             	sub    esp,0x8
c000ac23:	0f be c0             	movsx  eax,al
c000ac26:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ac29:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ac2c:	51                   	push   ecx
c000ac2d:	52                   	push   edx
c000ac2e:	50                   	push   eax
c000ac2f:	53                   	push   ebx
c000ac30:	e8 a1 fd ff ff       	call   c000a9d6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ac35:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000ac39:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000ac41:	83 c4 28             	add    esp,0x28
c000ac44:	5b                   	pop    ebx
c000ac45:	e9 bc fe ff ff       	jmp    c000ab06 <VgaText::incrementCursor(bool)>

c000ac4a <VgaText::doUpdate()>:
c000ac4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac4e:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000ac51:	85 c0                	test   eax,eax
c000ac53:	74 02                	je     c000ac57 <VgaText::doUpdate()+0xd>
c000ac55:	ff e0                	jmp    eax
c000ac57:	c3                   	ret    

c000ac58 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000ac58:	55                   	push   ebp
c000ac59:	31 ed                	xor    ebp,ebp
c000ac5b:	57                   	push   edi
c000ac5c:	56                   	push   esi
c000ac5d:	53                   	push   ebx
c000ac5e:	83 ec 1c             	sub    esp,0x1c
c000ac61:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ac65:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000ac6a:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000ac71:	50                   	push   eax
c000ac72:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000ac77:	50                   	push   eax
c000ac78:	e8 a1 fc ff ff       	call   c000a91e <VgaText::combineColours(unsigned char, unsigned char)>
c000ac7d:	59                   	pop    ecx
c000ac7e:	0f b6 c0             	movzx  eax,al
c000ac81:	5e                   	pop    esi
c000ac82:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ac87:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000ac8b:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000ac8e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ac92:	0f b7 f6             	movzx  esi,si
c000ac95:	01 f6                	add    esi,esi
c000ac97:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ac9a:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000ac9d:	84 c0                	test   al,al
c000ac9f:	0f 84 fd 00 00 00    	je     c000ada2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000aca5:	3c 0d                	cmp    al,0xd
c000aca7:	75 0c                	jne    c000acb5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000aca9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000acb0:	e9 e7 00 00 00       	jmp    c000ad9c <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000acb5:	3c 0a                	cmp    al,0xa
c000acb7:	75 47                	jne    c000ad00 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000acb9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000acbc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000acc3:	8d 48 01             	lea    ecx,[eax+0x1]
c000acc6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000acc9:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000accc:	75 0f                	jne    c000acdd <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000acce:	83 ec 0c             	sub    esp,0xc
c000acd1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000acd4:	53                   	push   ebx
c000acd5:	e8 56 fc ff ff       	call   c000a930 <VgaText::scrollScreen()>
c000acda:	83 c4 10             	add    esp,0x10
c000acdd:	83 ec 0c             	sub    esp,0xc
c000ace0:	31 ed                	xor    ebp,ebp
c000ace2:	53                   	push   ebx
c000ace3:	e8 26 fb ff ff       	call   c000a80e <VgaText::updateCursor()>
c000ace8:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aced:	83 c4 10             	add    esp,0x10
c000acf0:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000acf3:	0f b7 f6             	movzx  esi,si
c000acf6:	01 f6                	add    esi,esi
c000acf8:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000acfb:	e9 9c 00 00 00       	jmp    c000ad9c <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000ad00:	3c 08                	cmp    al,0x8
c000ad02:	75 35                	jne    c000ad39 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000ad04:	56                   	push   esi
c000ad05:	56                   	push   esi
c000ad06:	6a 01                	push   0x1
c000ad08:	53                   	push   ebx
c000ad09:	e8 4c fe ff ff       	call   c000ab5a <VgaText::decrementCursor(bool)>
c000ad0e:	58                   	pop    eax
c000ad0f:	5a                   	pop    edx
c000ad10:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ad13:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ad16:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000ad19:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ad1c:	6a 20                	push   0x20
c000ad1e:	53                   	push   ebx
c000ad1f:	e8 b2 fc ff ff       	call   c000a9d6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ad24:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ad29:	83 c4 20             	add    esp,0x20
c000ad2c:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000ad2f:	0f b7 f6             	movzx  esi,si
c000ad32:	01 f6                	add    esi,esi
c000ad34:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ad37:	eb 63                	jmp    c000ad9c <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000ad39:	51                   	push   ecx
c000ad3a:	51                   	push   ecx
c000ad3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad3f:	50                   	push   eax
c000ad40:	e8 7f fc ff ff       	call   c000a9c4 <VgaText::combineCharAndColour(char, unsigned char)>
c000ad45:	83 c4 10             	add    esp,0x10
c000ad48:	66 89 06             	mov    WORD PTR [esi],ax
c000ad4b:	39 1d 04 67 02 c0    	cmp    DWORD PTR ds:0xc0026704,ebx
c000ad51:	75 21                	jne    c000ad74 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000ad53:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000ad56:	85 c0                	test   eax,eax
c000ad58:	74 1a                	je     c000ad74 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000ad5a:	52                   	push   edx
c000ad5b:	52                   	push   edx
c000ad5c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ad5f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ad62:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ad66:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ad6a:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000ad6d:	51                   	push   ecx
c000ad6e:	53                   	push   ebx
c000ad6f:	ff d0                	call   eax
c000ad71:	83 c4 20             	add    esp,0x20
c000ad74:	83 c6 02             	add    esi,0x2
c000ad77:	50                   	push   eax
c000ad78:	50                   	push   eax
c000ad79:	6a 00                	push   0x0
c000ad7b:	53                   	push   ebx
c000ad7c:	e8 85 fd ff ff       	call   c000ab06 <VgaText::incrementCursor(bool)>
c000ad81:	83 c4 10             	add    esp,0x10
c000ad84:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000ad88:	75 0d                	jne    c000ad97 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000ad8a:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ad8f:	0f b7 f6             	movzx  esi,si
c000ad92:	01 f6                	add    esi,esi
c000ad94:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ad97:	bd 01 00 00 00       	mov    ebp,0x1
c000ad9c:	47                   	inc    edi
c000ad9d:	e9 f8 fe ff ff       	jmp    c000ac9a <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000ada2:	83 ec 0c             	sub    esp,0xc
c000ada5:	53                   	push   ebx
c000ada6:	e8 63 fa ff ff       	call   c000a80e <VgaText::updateCursor()>
c000adab:	83 c4 10             	add    esp,0x10
c000adae:	89 e8                	mov    eax,ebp
c000adb0:	84 c0                	test   al,al
c000adb2:	74 0c                	je     c000adc0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000adb4:	83 ec 0c             	sub    esp,0xc
c000adb7:	53                   	push   ebx
c000adb8:	e8 8d fe ff ff       	call   c000ac4a <VgaText::doUpdate()>
c000adbd:	83 c4 10             	add    esp,0x10
c000adc0:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000adc7:	83 c4 1c             	add    esp,0x1c
c000adca:	5b                   	pop    ebx
c000adcb:	5e                   	pop    esi
c000adcc:	5f                   	pop    edi
c000adcd:	5d                   	pop    ebp
c000adce:	c3                   	ret    
c000adcf:	90                   	nop

c000add0 <VgaText::clearScreen()>:
c000add0:	57                   	push   edi
c000add1:	56                   	push   esi
c000add2:	31 f6                	xor    esi,esi
c000add4:	53                   	push   ebx
c000add5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000add9:	52                   	push   edx
c000adda:	6a 00                	push   0x0
c000addc:	6a 00                	push   0x0
c000adde:	53                   	push   ebx
c000addf:	e8 5e fc ff ff       	call   c000aa42 <VgaText::setCursor(int, int)>
c000ade4:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000adeb:	83 c4 10             	add    esp,0x10
c000adee:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000adf1:	7e 20                	jle    c000ae13 <VgaText::clearScreen()+0x43>
c000adf3:	31 ff                	xor    edi,edi
c000adf5:	50                   	push   eax
c000adf6:	50                   	push   eax
c000adf7:	56                   	push   esi
c000adf8:	57                   	push   edi
c000adf9:	47                   	inc    edi
c000adfa:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000adfd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ae00:	6a 20                	push   0x20
c000ae02:	53                   	push   ebx
c000ae03:	e8 ce fb ff ff       	call   c000a9d6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ae08:	83 c4 20             	add    esp,0x20
c000ae0b:	83 ff 50             	cmp    edi,0x50
c000ae0e:	75 e5                	jne    c000adf5 <VgaText::clearScreen()+0x25>
c000ae10:	46                   	inc    esi
c000ae11:	eb db                	jmp    c000adee <VgaText::clearScreen()+0x1e>
c000ae13:	83 ec 0c             	sub    esp,0xc
c000ae16:	53                   	push   ebx
c000ae17:	e8 2e fe ff ff       	call   c000ac4a <VgaText::doUpdate()>
c000ae1c:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000ae23:	83 c4 10             	add    esp,0x10
c000ae26:	5b                   	pop    ebx
c000ae27:	5e                   	pop    esi
c000ae28:	5f                   	pop    edi
c000ae29:	c3                   	ret    

c000ae2a <VgaText::putchar(char)>:
c000ae2a:	56                   	push   esi
c000ae2b:	53                   	push   ebx
c000ae2c:	83 ec 14             	sub    esp,0x14
c000ae2f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae33:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ae37:	3c 5b                	cmp    al,0x5b
c000ae39:	75 18                	jne    c000ae53 <VgaText::putchar(char)+0x29>
c000ae3b:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000ae3f:	74 1f                	je     c000ae60 <VgaText::putchar(char)+0x36>
c000ae41:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000ae47:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000ae4e:	e9 bd 00 00 00       	jmp    c000af10 <VgaText::putchar(char)+0xe6>
c000ae53:	3c 1b                	cmp    al,0x1b
c000ae55:	75 09                	jne    c000ae60 <VgaText::putchar(char)+0x36>
c000ae57:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000ae5b:	e9 b0 00 00 00       	jmp    c000af10 <VgaText::putchar(char)+0xe6>
c000ae60:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000ae63:	84 c9                	test   cl,cl
c000ae65:	0f 84 92 00 00 00    	je     c000aefd <VgaText::putchar(char)+0xd3>
c000ae6b:	8d 50 c0             	lea    edx,[eax-0x40]
c000ae6e:	80 fa 3e             	cmp    dl,0x3e
c000ae71:	77 76                	ja     c000aee9 <VgaText::putchar(char)+0xbf>
c000ae73:	3c 6d                	cmp    al,0x6d
c000ae75:	75 47                	jne    c000aebe <VgaText::putchar(char)+0x94>
c000ae77:	31 f6                	xor    esi,esi
c000ae79:	31 d2                	xor    edx,edx
c000ae7b:	31 c0                	xor    eax,eax
c000ae7d:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000ae80:	7e 2d                	jle    c000aeaf <VgaText::putchar(char)+0x85>
c000ae82:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000ae87:	80 fa 3b             	cmp    dl,0x3b
c000ae8a:	75 17                	jne    c000aea3 <VgaText::putchar(char)+0x79>
c000ae8c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000ae90:	50                   	push   eax
c000ae91:	53                   	push   ebx
c000ae92:	e8 8d f9 ff ff       	call   c000a824 <VgaText::doANSI_SGR(int)>
c000ae97:	59                   	pop    ecx
c000ae98:	31 d2                	xor    edx,edx
c000ae9a:	58                   	pop    eax
c000ae9b:	31 c0                	xor    eax,eax
c000ae9d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000aea1:	eb 09                	jmp    c000aeac <VgaText::putchar(char)+0x82>
c000aea3:	6b c0 0a             	imul   eax,eax,0xa
c000aea6:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000aeaa:	88 ca                	mov    dl,cl
c000aeac:	46                   	inc    esi
c000aead:	eb ce                	jmp    c000ae7d <VgaText::putchar(char)+0x53>
c000aeaf:	84 d2                	test   dl,dl
c000aeb1:	74 2e                	je     c000aee1 <VgaText::putchar(char)+0xb7>
c000aeb3:	50                   	push   eax
c000aeb4:	53                   	push   ebx
c000aeb5:	e8 6a f9 ff ff       	call   c000a824 <VgaText::doANSI_SGR(int)>
c000aeba:	58                   	pop    eax
c000aebb:	5a                   	pop    edx
c000aebc:	eb 23                	jmp    c000aee1 <VgaText::putchar(char)+0xb7>
c000aebe:	3c 4a                	cmp    al,0x4a
c000aec0:	75 1f                	jne    c000aee1 <VgaText::putchar(char)+0xb7>
c000aec2:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000aec6:	75 19                	jne    c000aee1 <VgaText::putchar(char)+0xb7>
c000aec8:	83 ec 0c             	sub    esp,0xc
c000aecb:	53                   	push   ebx
c000aecc:	e8 ff fe ff ff       	call   c000add0 <VgaText::clearScreen()>
c000aed1:	83 c4 0c             	add    esp,0xc
c000aed4:	6a 00                	push   0x0
c000aed6:	6a 00                	push   0x0
c000aed8:	53                   	push   ebx
c000aed9:	e8 64 fb ff ff       	call   c000aa42 <VgaText::setCursor(int, int)>
c000aede:	83 c4 10             	add    esp,0x10
c000aee1:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000aee7:	eb 27                	jmp    c000af10 <VgaText::putchar(char)+0xe6>
c000aee9:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000aeec:	83 fa 0e             	cmp    edx,0xe
c000aeef:	7f 1f                	jg     c000af10 <VgaText::putchar(char)+0xe6>
c000aef1:	8d 4a 01             	lea    ecx,[edx+0x1]
c000aef4:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000aef7:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000aefb:	eb 13                	jmp    c000af10 <VgaText::putchar(char)+0xe6>
c000aefd:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000af00:	0f be c0             	movsx  eax,al
c000af03:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000af06:	50                   	push   eax
c000af07:	53                   	push   ebx
c000af08:	e8 6f fc ff ff       	call   c000ab7c <VgaText::putchar(char, VgaColour, VgaColour)>
c000af0d:	83 c4 10             	add    esp,0x10
c000af10:	83 c4 14             	add    esp,0x14
c000af13:	5b                   	pop    ebx
c000af14:	5e                   	pop    esi
c000af15:	c3                   	ret    

c000af16 <VgaText::putx(unsigned int)>:
c000af16:	57                   	push   edi
c000af17:	b9 11 00 00 00       	mov    ecx,0x11
c000af1c:	56                   	push   esi
c000af1d:	be 42 30 02 c0       	mov    esi,0xc0023042
c000af22:	53                   	push   ebx
c000af23:	83 ec 20             	sub    esp,0x20
c000af26:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000af2a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000af2e:	fc                   	cld    
c000af2f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000af31:	be 08 00 00 00       	mov    esi,0x8
c000af36:	50                   	push   eax
c000af37:	50                   	push   eax
c000af38:	89 d8                	mov    eax,ebx
c000af3a:	c1 e3 04             	shl    ebx,0x4
c000af3d:	c1 e8 1c             	shr    eax,0x1c
c000af40:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000af45:	50                   	push   eax
c000af46:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000af4a:	e8 db fe ff ff       	call   c000ae2a <VgaText::putchar(char)>
c000af4f:	83 c4 10             	add    esp,0x10
c000af52:	4e                   	dec    esi
c000af53:	75 e1                	jne    c000af36 <VgaText::putx(unsigned int)+0x20>
c000af55:	83 c4 20             	add    esp,0x20
c000af58:	5b                   	pop    ebx
c000af59:	5e                   	pop    esi
c000af5a:	5f                   	pop    edi
c000af5b:	c3                   	ret    

c000af5c <VgaText::puts(char const*)>:
c000af5c:	53                   	push   ebx
c000af5d:	83 ec 08             	sub    esp,0x8
c000af60:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000af64:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000af67:	84 c0                	test   al,al
c000af69:	74 12                	je     c000af7d <VgaText::puts(char const*)+0x21>
c000af6b:	43                   	inc    ebx
c000af6c:	51                   	push   ecx
c000af6d:	51                   	push   ecx
c000af6e:	50                   	push   eax
c000af6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af73:	e8 b2 fe ff ff       	call   c000ae2a <VgaText::putchar(char)>
c000af78:	83 c4 10             	add    esp,0x10
c000af7b:	eb e7                	jmp    c000af64 <VgaText::puts(char const*)+0x8>
c000af7d:	83 c4 08             	add    esp,0x8
c000af80:	5b                   	pop    ebx
c000af81:	c3                   	ret    

c000af82 <VgaText::VgaText(char const*)>:
c000af82:	57                   	push   edi
c000af83:	56                   	push   esi
c000af84:	53                   	push   ebx
c000af85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af89:	83 ec 08             	sub    esp,0x8
c000af8c:	6a 00                	push   0x0
c000af8e:	50                   	push   eax
c000af8f:	e8 46 05 00 00       	call   c000b4da <UnixFile::UnixFile(int)>
c000af94:	83 c4 10             	add    esp,0x10
c000af97:	ba a8 30 02 c0       	mov    edx,0xc00230a8
c000af9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afa0:	89 10                	mov    DWORD PTR [eax],edx
c000afa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afa6:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000afad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afb1:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000afb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afbc:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000afc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc4:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000afc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afcc:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000afd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afd7:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000afde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afe2:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000afe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afed:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000aff4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aff8:	8d 50 60             	lea    edx,[eax+0x60]
c000affb:	bb e0 66 02 c0       	mov    ebx,0xc00266e0
c000b000:	b8 08 00 00 00       	mov    eax,0x8
c000b005:	fc                   	cld    
c000b006:	89 d7                	mov    edi,edx
c000b008:	89 de                	mov    esi,ebx
c000b00a:	89 c1                	mov    ecx,eax
c000b00c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b00e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b012:	05 82 00 00 00       	add    eax,0x82
c000b017:	83 ec 08             	sub    esp,0x8
c000b01a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b01e:	50                   	push   eax
c000b01f:	e8 14 57 ff ff       	call   c0000738 <strcpy>
c000b024:	83 c4 10             	add    esp,0x10
c000b027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b02b:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000b032:	83 ec 0c             	sub    esp,0xc
c000b035:	6a 01                	push   0x1
c000b037:	e8 e1 08 00 00       	call   c000b91d <Virt::allocateKernelVirtualPages(int)>
c000b03c:	83 c4 10             	add    esp,0x10
c000b03f:	89 c2                	mov    edx,eax
c000b041:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b045:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b048:	8b 1d b4 67 02 c0    	mov    ebx,DWORD PTR ds:0xc00267b4
c000b04e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b052:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b055:	89 c6                	mov    esi,eax
c000b057:	e8 c6 ef ff ff       	call   c000a022 <Phys::allocatePage()>
c000b05c:	68 05 0c 00 00       	push   0xc05
c000b061:	56                   	push   esi
c000b062:	50                   	push   eax
c000b063:	53                   	push   ebx
c000b064:	e8 1f 0f 00 00       	call   c000bf88 <VAS::mapPage(unsigned long, unsigned long, int)>
c000b069:	83 c4 10             	add    esp,0x10
c000b06c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b070:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b073:	83 ec 04             	sub    esp,0x4
c000b076:	68 00 0f 00 00       	push   0xf00
c000b07b:	6a 00                	push   0x0
c000b07d:	50                   	push   eax
c000b07e:	e8 f9 55 ff ff       	call   c000067c <memset>
c000b083:	83 c4 10             	add    esp,0x10
c000b086:	83 ec 04             	sub    esp,0x4
c000b089:	6a 00                	push   0x0
c000b08b:	6a 07                	push   0x7
c000b08d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b091:	e8 22 f8 ff ff       	call   c000a8b8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000b096:	83 c4 10             	add    esp,0x10
c000b099:	83 ec 04             	sub    esp,0x4
c000b09c:	6a 00                	push   0x0
c000b09e:	6a 00                	push   0x0
c000b0a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0a4:	e8 99 f9 ff ff       	call   c000aa42 <VgaText::setCursor(int, int)>
c000b0a9:	83 c4 10             	add    esp,0x10
c000b0ac:	83 ec 0c             	sub    esp,0xc
c000b0af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0b3:	e8 18 fd ff ff       	call   c000add0 <VgaText::clearScreen()>
c000b0b8:	83 c4 10             	add    esp,0x10
c000b0bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0bf:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000b0c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0c7:	05 02 01 00 00       	add    eax,0x102
c000b0cc:	83 ec 04             	sub    esp,0x4
c000b0cf:	6a 30                	push   0x30
c000b0d1:	6a 00                	push   0x0
c000b0d3:	50                   	push   eax
c000b0d4:	e8 a3 55 ff ff       	call   c000067c <memset>
c000b0d9:	83 c4 10             	add    esp,0x10
c000b0dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0e0:	05 32 01 00 00       	add    eax,0x132
c000b0e5:	83 ec 04             	sub    esp,0x4
c000b0e8:	68 80 00 00 00       	push   0x80
c000b0ed:	6a 00                	push   0x0
c000b0ef:	50                   	push   eax
c000b0f0:	e8 87 55 ff ff       	call   c000067c <memset>
c000b0f5:	83 c4 10             	add    esp,0x10
c000b0f8:	90                   	nop
c000b0f9:	5b                   	pop    ebx
c000b0fa:	5e                   	pop    esi
c000b0fb:	5f                   	pop    edi
c000b0fc:	c3                   	ret    
c000b0fd:	90                   	nop

c000b0fe <VgaText::receiveKey(unsigned char)>:
c000b0fe:	55                   	push   ebp
c000b0ff:	57                   	push   edi
c000b100:	56                   	push   esi
c000b101:	53                   	push   ebx
c000b102:	83 ec 1c             	sub    esp,0x1c
c000b105:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b109:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b10d:	84 db                	test   bl,bl
c000b10f:	0f 84 c6 00 00 00    	je     c000b1db <VgaText::receiveKey(unsigned char)+0xdd>
c000b115:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000b11b:	80 fb 08             	cmp    bl,0x8
c000b11e:	75 2c                	jne    c000b14c <VgaText::receiveKey(unsigned char)+0x4e>
c000b120:	83 ec 0c             	sub    esp,0xc
c000b123:	57                   	push   edi
c000b124:	e8 6f 55 ff ff       	call   c0000698 <strlen>
c000b129:	83 c4 10             	add    esp,0x10
c000b12c:	85 c0                	test   eax,eax
c000b12e:	74 41                	je     c000b171 <VgaText::receiveKey(unsigned char)+0x73>
c000b130:	50                   	push   eax
c000b131:	50                   	push   eax
c000b132:	6a 08                	push   0x8
c000b134:	56                   	push   esi
c000b135:	e8 f0 fc ff ff       	call   c000ae2a <VgaText::putchar(char)>
c000b13a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b13d:	e8 56 55 ff ff       	call   c0000698 <strlen>
c000b142:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000b14a:	eb 22                	jmp    c000b16e <VgaText::receiveKey(unsigned char)+0x70>
c000b14c:	0f be c3             	movsx  eax,bl
c000b14f:	52                   	push   edx
c000b150:	52                   	push   edx
c000b151:	50                   	push   eax
c000b152:	56                   	push   esi
c000b153:	e8 d2 fc ff ff       	call   c000ae2a <VgaText::putchar(char)>
c000b158:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000b15c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000b161:	59                   	pop    ecx
c000b162:	5d                   	pop    ebp
c000b163:	8d 44 24 16          	lea    eax,[esp+0x16]
c000b167:	50                   	push   eax
c000b168:	57                   	push   edi
c000b169:	e8 0a 57 ff ff       	call   c0000878 <strcat>
c000b16e:	83 c4 10             	add    esp,0x10
c000b171:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000b178:	75 05                	jne    c000b17f <VgaText::receiveKey(unsigned char)+0x81>
c000b17a:	80 fb 0a             	cmp    bl,0xa
c000b17d:	75 50                	jne    c000b1cf <VgaText::receiveKey(unsigned char)+0xd1>
c000b17f:	83 ec 0c             	sub    esp,0xc
c000b182:	8d 9e 32 01 00 00    	lea    ebx,[esi+0x132]
c000b188:	53                   	push   ebx
c000b189:	e8 0a 55 ff ff       	call   c0000698 <strlen>
c000b18e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b191:	89 c5                	mov    ebp,eax
c000b193:	e8 00 55 ff ff       	call   c0000698 <strlen>
c000b198:	83 c4 10             	add    esp,0x10
c000b19b:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000b19f:	3d 80 00 00 00       	cmp    eax,0x80
c000b1a4:	76 10                	jbe    c000b1b6 <VgaText::receiveKey(unsigned char)+0xb8>
c000b1a6:	83 ec 0c             	sub    esp,0xc
c000b1a9:	68 53 30 02 c0       	push   0xc0023053
c000b1ae:	e8 54 7e 00 00       	call   c0013007 <Krnl::panic(char const*)>
c000b1b3:	83 c4 10             	add    esp,0x10
c000b1b6:	50                   	push   eax
c000b1b7:	50                   	push   eax
c000b1b8:	57                   	push   edi
c000b1b9:	53                   	push   ebx
c000b1ba:	e8 b9 56 ff ff       	call   c0000878 <strcat>
c000b1bf:	83 c4 0c             	add    esp,0xc
c000b1c2:	6a 30                	push   0x30
c000b1c4:	6a 00                	push   0x0
c000b1c6:	57                   	push   edi
c000b1c7:	e8 b0 54 ff ff       	call   c000067c <memset>
c000b1cc:	83 c4 10             	add    esp,0x10
c000b1cf:	83 ec 0c             	sub    esp,0xc
c000b1d2:	56                   	push   esi
c000b1d3:	e8 72 fa ff ff       	call   c000ac4a <VgaText::doUpdate()>
c000b1d8:	83 c4 10             	add    esp,0x10
c000b1db:	83 c4 1c             	add    esp,0x1c
c000b1de:	5b                   	pop    ebx
c000b1df:	5e                   	pop    esi
c000b1e0:	5f                   	pop    edi
c000b1e1:	5d                   	pop    ebp
c000b1e2:	c3                   	ret    
c000b1e3:	90                   	nop

c000b1e4 <VgaText::write(unsigned long long, void*, int*)>:
c000b1e4:	55                   	push   ebp
c000b1e5:	57                   	push   edi
c000b1e6:	56                   	push   esi
c000b1e7:	53                   	push   ebx
c000b1e8:	83 ec 0c             	sub    esp,0xc
c000b1eb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000b1ef:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000b1f3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000b1f7:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000b1fe:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000b201:	39 eb                	cmp    ebx,ebp
c000b203:	74 13                	je     c000b218 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000b205:	43                   	inc    ebx
c000b206:	50                   	push   eax
c000b207:	50                   	push   eax
c000b208:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000b20c:	50                   	push   eax
c000b20d:	56                   	push   esi
c000b20e:	e8 17 fc ff ff       	call   c000ae2a <VgaText::putchar(char)>
c000b213:	83 c4 10             	add    esp,0x10
c000b216:	eb e9                	jmp    c000b201 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000b218:	83 ec 0c             	sub    esp,0xc
c000b21b:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000b222:	56                   	push   esi
c000b223:	e8 22 fa ff ff       	call   c000ac4a <VgaText::doUpdate()>
c000b228:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b22c:	89 38                	mov    DWORD PTR [eax],edi
c000b22e:	83 c4 1c             	add    esp,0x1c
c000b231:	31 c0                	xor    eax,eax
c000b233:	5b                   	pop    ebx
c000b234:	5e                   	pop    esi
c000b235:	5f                   	pop    edi
c000b236:	5d                   	pop    ebp
c000b237:	c3                   	ret    

c000b238 <newTerminal(char*)>:
c000b238:	83 ec 28             	sub    esp,0x28
c000b23b:	68 b4 01 00 00       	push   0x1b4
c000b240:	e8 26 e7 ff ff       	call   c000996b <malloc>
c000b245:	5a                   	pop    edx
c000b246:	59                   	pop    ecx
c000b247:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b24b:	50                   	push   eax
c000b24c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b250:	e8 2d fd ff ff       	call   c000af82 <VgaText::VgaText(char const*)>
c000b255:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b259:	83 c4 2c             	add    esp,0x2c
c000b25c:	c3                   	ret    
c000b25d:	66 90                	xchg   ax,ax
c000b25f:	90                   	nop

c000b260 <TSS::TSS()>:
c000b260:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b264:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b26b:	90                   	nop
c000b26c:	c3                   	ret    
c000b26d:	90                   	nop
c000b26e:	66 90                	xchg   ax,ax

c000b270 <TSS::setESP(unsigned long)>:
c000b270:	55                   	push   ebp
c000b271:	89 e5                	mov    ebp,esp
c000b273:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b276:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b279:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b27c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b27f:	90                   	nop
c000b280:	5d                   	pop    ebp
c000b281:	c3                   	ret    
c000b282:	66 90                	xchg   ax,ax

c000b284 <TSS::flush()>:
c000b284:	55                   	push   ebp
c000b285:	89 e5                	mov    ebp,esp
c000b287:	83 ec 10             	sub    esp,0x10
c000b28a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b28d:	8b 00                	mov    eax,DWORD PTR [eax]
c000b28f:	83 c8 03             	or     eax,0x3
c000b292:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b296:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b29a:	66 89 d0             	mov    ax,dx
c000b29d:	0f 00 d8             	ltr    ax
c000b2a0:	90                   	nop
c000b2a1:	c9                   	leave  
c000b2a2:	c3                   	ret    
c000b2a3:	90                   	nop

c000b2a4 <TSS::setup(unsigned long, unsigned long)>:
c000b2a4:	55                   	push   ebp
c000b2a5:	89 e5                	mov    ebp,esp
c000b2a7:	83 ec 18             	sub    esp,0x18
c000b2aa:	83 ec 0c             	sub    esp,0xc
c000b2ad:	6a 68                	push   0x68
c000b2af:	e8 b7 e6 ff ff       	call   c000996b <malloc>
c000b2b4:	83 c4 10             	add    esp,0x10
c000b2b7:	89 c2                	mov    edx,eax
c000b2b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b2bc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b2bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b2c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b2c5:	83 ec 04             	sub    esp,0x4
c000b2c8:	6a 68                	push   0x68
c000b2ca:	6a 00                	push   0x0
c000b2cc:	50                   	push   eax
c000b2cd:	e8 aa 53 ff ff       	call   c000067c <memset>
c000b2d2:	83 c4 10             	add    esp,0x10
c000b2d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b2d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b2db:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b2e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b2e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b2e7:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b2ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b2f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b2f3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b2f6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b2f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b2fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b2ff:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b305:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b308:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b30b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b311:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b314:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b317:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b31d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b320:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b323:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b329:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b32c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b32f:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b335:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b338:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b33b:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b341:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b344:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b347:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b34a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b34d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b350:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b353:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b356:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b359:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b35c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b35f:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b366:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b369:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b36c:	0f 20 da             	mov    edx,cr3
c000b36f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b372:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b375:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b378:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b37b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b37e:	83 ec 08             	sub    esp,0x8
c000b381:	50                   	push   eax
c000b382:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b385:	50                   	push   eax
c000b386:	e8 19 de ff ff       	call   c00091a4 <GDTEntry::setBase(unsigned int)>
c000b38b:	83 c4 10             	add    esp,0x10
c000b38e:	83 ec 08             	sub    esp,0x8
c000b391:	6a 68                	push   0x68
c000b393:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b396:	50                   	push   eax
c000b397:	e8 24 de ff ff       	call   c00091c0 <GDTEntry::setLimit(unsigned int)>
c000b39c:	83 c4 10             	add    esp,0x10
c000b39f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b3a3:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b3a6:	83 e0 0f             	and    eax,0xf
c000b3a9:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b3ac:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b3af:	83 c8 40             	or     eax,0x40
c000b3b2:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b3b5:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c000b3ba:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b3c0:	05 78 01 00 00       	add    eax,0x178
c000b3c5:	83 ec 04             	sub    esp,0x4
c000b3c8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b3cb:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b3ce:	50                   	push   eax
c000b3cf:	e8 20 de ff ff       	call   c00091f4 <GDT::addEntry(GDTEntry)>
c000b3d4:	83 c4 10             	add    esp,0x10
c000b3d7:	89 c2                	mov    edx,eax
c000b3d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3dc:	89 10                	mov    DWORD PTR [eax],edx
c000b3de:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c000b3e3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b3e9:	05 78 01 00 00       	add    eax,0x178
c000b3ee:	83 ec 0c             	sub    esp,0xc
c000b3f1:	50                   	push   eax
c000b3f2:	e8 27 de ff ff       	call   c000921e <GDT::flush()>
c000b3f7:	83 c4 10             	add    esp,0x10
c000b3fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3fd:	8b 00                	mov    eax,DWORD PTR [eax]
c000b3ff:	c9                   	leave  
c000b400:	c3                   	ret    
c000b401:	90                   	nop

c000b402 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b402:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b406:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b40a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b40d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b412:	75 08                	jne    c000b41c <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b414:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b41a:	eb 38                	jmp    c000b454 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b41c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b421:	75 17                	jne    c000b43a <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b423:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b428:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b42b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b431:	8b 10                	mov    edx,DWORD PTR [eax]
c000b433:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b437:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b43a:	89 c1                	mov    ecx,eax
c000b43c:	83 e1 fd             	and    ecx,0xfffffffd
c000b43f:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b445:	74 cd                	je     c000b414 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b447:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b44c:	83 e0 ef             	and    eax,0xffffffef
c000b44f:	83 f8 08             	cmp    eax,0x8
c000b452:	76 c0                	jbe    c000b414 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b454:	31 c0                	xor    eax,eax
c000b456:	c3                   	ret    
c000b457:	90                   	nop

c000b458 <ReservedFilename::isAtty()>:
c000b458:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b45c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b45f:	31 c0                	xor    eax,eax
c000b461:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b467:	74 09                	je     c000b472 <ReservedFilename::isAtty()+0x1a>
c000b469:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b46f:	0f 94 c0             	sete   al
c000b472:	c3                   	ret    
c000b473:	90                   	nop

c000b474 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b478:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b47c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b47f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b483:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b488:	75 08                	jne    c000b492 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b48a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b490:	eb 3d                	jmp    c000b4cf <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b492:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b497:	75 17                	jne    c000b4b0 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b499:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b49e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b4a1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b4a7:	8b 10                	mov    edx,DWORD PTR [eax]
c000b4a9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b4ad:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b4b0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b4b5:	75 04                	jne    c000b4bb <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b4b7:	89 0a                	mov    DWORD PTR [edx],ecx
c000b4b9:	eb 14                	jmp    c000b4cf <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b4bb:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b4c0:	74 c8                	je     c000b48a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b4c2:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b4c7:	83 e0 ef             	and    eax,0xffffffef
c000b4ca:	83 f8 08             	cmp    eax,0x8
c000b4cd:	76 bb                	jbe    c000b48a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b4cf:	31 c0                	xor    eax,eax
c000b4d1:	c3                   	ret    

c000b4d2 <UnixFile::getFileDescriptor()>:
c000b4d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b4d9:	c3                   	ret    

c000b4da <UnixFile::UnixFile(int)>:
c000b4da:	53                   	push   ebx
c000b4db:	83 ec 28             	sub    esp,0x28
c000b4de:	ba 70 31 02 c0       	mov    edx,0xc0023170
c000b4e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b4e7:	89 10                	mov    DWORD PTR [eax],edx
c000b4e9:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b4f1:	0f 8f 8c 01 00 00    	jg     c000b683 <UnixFile::UnixFile(int)+0x1a9>
c000b4f7:	a1 80 5d 02 c0       	mov    eax,ds:0xc0025d80
c000b4fc:	8d 50 01             	lea    edx,[eax+0x1]
c000b4ff:	89 15 80 5d 02 c0    	mov    DWORD PTR ds:0xc0025d80,edx
c000b505:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b509:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b50c:	83 ec 08             	sub    esp,0x8
c000b50f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b513:	68 98 67 02 c0       	push   0xc0026798
c000b518:	e8 1b 65 01 00       	call   c0021a38 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b51d:	83 c4 10             	add    esp,0x10
c000b520:	a0 94 67 02 c0       	mov    al,ds:0xc0026794
c000b525:	83 f0 01             	xor    eax,0x1
c000b528:	84 c0                	test   al,al
c000b52a:	0f 84 54 01 00 00    	je     c000b684 <UnixFile::UnixFile(int)+0x1aa>
c000b530:	c6 05 94 67 02 c0 01 	mov    BYTE PTR ds:0xc0026794,0x1
c000b537:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b53f:	83 ec 0c             	sub    esp,0xc
c000b542:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b546:	e8 20 e4 ff ff       	call   c000996b <malloc>
c000b54b:	83 c4 10             	add    esp,0x10
c000b54e:	89 c3                	mov    ebx,eax
c000b550:	83 ec 08             	sub    esp,0x8
c000b553:	68 03 ff ff 0f       	push   0xfffff03
c000b558:	53                   	push   ebx
c000b559:	e8 2c 01 00 00       	call   c000b68a <ReservedFilename::ReservedFilename(int)>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 1d 8c 67 02 c0    	mov    DWORD PTR ds:0xc002678c,ebx
c000b567:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b56f:	83 ec 0c             	sub    esp,0xc
c000b572:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b576:	e8 f0 e3 ff ff       	call   c000996b <malloc>
c000b57b:	83 c4 10             	add    esp,0x10
c000b57e:	89 c3                	mov    ebx,eax
c000b580:	83 ec 08             	sub    esp,0x8
c000b583:	68 01 ff ff 0f       	push   0xfffff01
c000b588:	53                   	push   ebx
c000b589:	e8 fc 00 00 00       	call   c000b68a <ReservedFilename::ReservedFilename(int)>
c000b58e:	83 c4 10             	add    esp,0x10
c000b591:	89 1d 90 67 02 c0    	mov    DWORD PTR ds:0xc0026790,ebx
c000b597:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b59f:	83 ec 0c             	sub    esp,0xc
c000b5a2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b5a6:	e8 c0 e3 ff ff       	call   c000996b <malloc>
c000b5ab:	83 c4 10             	add    esp,0x10
c000b5ae:	89 c3                	mov    ebx,eax
c000b5b0:	83 ec 08             	sub    esp,0x8
c000b5b3:	68 00 ff ff 0f       	push   0xfffff00
c000b5b8:	53                   	push   ebx
c000b5b9:	e8 cc 00 00 00       	call   c000b68a <ReservedFilename::ReservedFilename(int)>
c000b5be:	83 c4 10             	add    esp,0x10
c000b5c1:	89 1d 84 67 02 c0    	mov    DWORD PTR ds:0xc0026784,ebx
c000b5c7:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b5cf:	83 ec 0c             	sub    esp,0xc
c000b5d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b5d6:	e8 90 e3 ff ff       	call   c000996b <malloc>
c000b5db:	83 c4 10             	add    esp,0x10
c000b5de:	89 c3                	mov    ebx,eax
c000b5e0:	83 ec 08             	sub    esp,0x8
c000b5e3:	68 02 ff ff 0f       	push   0xfffff02
c000b5e8:	53                   	push   ebx
c000b5e9:	e8 9c 00 00 00       	call   c000b68a <ReservedFilename::ReservedFilename(int)>
c000b5ee:	83 c4 10             	add    esp,0x10
c000b5f1:	89 1d 88 67 02 c0    	mov    DWORD PTR ds:0xc0026788,ebx
c000b5f7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b5ff:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b604:	7f 7e                	jg     c000b684 <UnixFile::UnixFile(int)+0x1aa>
c000b606:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000b60e:	83 ec 0c             	sub    esp,0xc
c000b611:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b615:	e8 51 e3 ff ff       	call   c000996b <malloc>
c000b61a:	83 c4 10             	add    esp,0x10
c000b61d:	89 c3                	mov    ebx,eax
c000b61f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b623:	05 10 ff ff 0f       	add    eax,0xfffff10
c000b628:	83 ec 08             	sub    esp,0x8
c000b62b:	50                   	push   eax
c000b62c:	53                   	push   ebx
c000b62d:	e8 58 00 00 00       	call   c000b68a <ReservedFilename::ReservedFilename(int)>
c000b632:	83 c4 10             	add    esp,0x10
c000b635:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b639:	89 1c 85 60 67 02 c0 	mov    DWORD PTR [eax*4-0x3ffd98a0],ebx
c000b640:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000b648:	83 ec 0c             	sub    esp,0xc
c000b64b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b64f:	e8 17 e3 ff ff       	call   c000996b <malloc>
c000b654:	83 c4 10             	add    esp,0x10
c000b657:	89 c3                	mov    ebx,eax
c000b659:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b65d:	05 20 ff ff 0f       	add    eax,0xfffff20
c000b662:	83 ec 08             	sub    esp,0x8
c000b665:	50                   	push   eax
c000b666:	53                   	push   ebx
c000b667:	e8 1e 00 00 00       	call   c000b68a <ReservedFilename::ReservedFilename(int)>
c000b66c:	83 c4 10             	add    esp,0x10
c000b66f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b673:	89 1c 85 20 67 02 c0 	mov    DWORD PTR [eax*4-0x3ffd98e0],ebx
c000b67a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b67e:	e9 7c ff ff ff       	jmp    c000b5ff <UnixFile::UnixFile(int)+0x125>
c000b683:	90                   	nop
c000b684:	83 c4 28             	add    esp,0x28
c000b687:	5b                   	pop    ebx
c000b688:	c3                   	ret    
c000b689:	90                   	nop

c000b68a <ReservedFilename::ReservedFilename(int)>:
c000b68a:	83 ec 0c             	sub    esp,0xc
c000b68d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b691:	83 ec 08             	sub    esp,0x8
c000b694:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b698:	50                   	push   eax
c000b699:	e8 3c fe ff ff       	call   c000b4da <UnixFile::UnixFile(int)>
c000b69e:	83 c4 10             	add    esp,0x10
c000b6a1:	ba 8c 31 02 c0       	mov    edx,0xc002318c
c000b6a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6aa:	89 10                	mov    DWORD PTR [eax],edx
c000b6ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6b0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b6b4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b6b7:	90                   	nop
c000b6b8:	83 c4 0c             	add    esp,0xc
c000b6bb:	c3                   	ret    

c000b6bc <UnixFile::~UnixFile()>:
c000b6bc:	83 ec 1c             	sub    esp,0x1c
c000b6bf:	ba 70 31 02 c0       	mov    edx,0xc0023170
c000b6c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b6c8:	89 10                	mov    DWORD PTR [eax],edx
c000b6ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b6ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6d1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000b6d6:	7f 73                	jg     c000b74b <UnixFile::~UnixFile()+0x8f>
c000b6d8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b6e0:	83 ec 0c             	sub    esp,0xc
c000b6e3:	68 98 67 02 c0       	push   0xc0026798
c000b6e8:	e8 1f 64 01 00       	call   c0021b0c <LinkedList<UnixFile>::getFirstElement()>
c000b6ed:	83 c4 10             	add    esp,0x10
c000b6f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6f4:	83 ec 0c             	sub    esp,0xc
c000b6f7:	68 98 67 02 c0       	push   0xc0026798
c000b6fc:	e8 13 64 01 00       	call   c0021b14 <LinkedList<UnixFile>::removeFirst()>
c000b701:	83 c4 10             	add    esp,0x10
c000b704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b708:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000b70c:	74 40                	je     c000b74e <UnixFile::~UnixFile()+0x92>
c000b70e:	83 ec 08             	sub    esp,0x8
c000b711:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b715:	68 98 67 02 c0       	push   0xc0026798
c000b71a:	e8 19 63 01 00       	call   c0021a38 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b71f:	83 c4 10             	add    esp,0x10
c000b722:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b726:	8d 50 01             	lea    edx,[eax+0x1]
c000b729:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b72d:	3d 88 13 00 00       	cmp    eax,0x1388
c000b732:	0f 94 c0             	sete   al
c000b735:	84 c0                	test   al,al
c000b737:	74 a7                	je     c000b6e0 <UnixFile::~UnixFile()+0x24>
c000b739:	83 ec 0c             	sub    esp,0xc
c000b73c:	68 48 31 02 c0       	push   0xc0023148
c000b741:	e8 c1 78 00 00       	call   c0013007 <Krnl::panic(char const*)>
c000b746:	83 c4 10             	add    esp,0x10
c000b749:	eb 95                	jmp    c000b6e0 <UnixFile::~UnixFile()+0x24>
c000b74b:	90                   	nop
c000b74c:	eb 01                	jmp    c000b74f <UnixFile::~UnixFile()+0x93>
c000b74e:	90                   	nop
c000b74f:	90                   	nop
c000b750:	83 c4 1c             	add    esp,0x1c
c000b753:	c3                   	ret    

c000b754 <UnixFile::~UnixFile()>:
c000b754:	83 ec 0c             	sub    esp,0xc
c000b757:	83 ec 0c             	sub    esp,0xc
c000b75a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b75e:	e8 59 ff ff ff       	call   c000b6bc <UnixFile::~UnixFile()>
c000b763:	83 c4 10             	add    esp,0x10
c000b766:	83 ec 08             	sub    esp,0x8
c000b769:	6a 0c                	push   0xc
c000b76b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b76f:	e8 24 14 00 00       	call   c000cb98 <operator delete(void*, unsigned long)>
c000b774:	83 c4 10             	add    esp,0x10
c000b777:	83 c4 0c             	add    esp,0xc
c000b77a:	c3                   	ret    
c000b77b:	90                   	nop

c000b77c <ReservedFilename::~ReservedFilename()>:
c000b77c:	83 ec 0c             	sub    esp,0xc
c000b77f:	ba 8c 31 02 c0       	mov    edx,0xc002318c
c000b784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b788:	89 10                	mov    DWORD PTR [eax],edx
c000b78a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b78e:	83 ec 0c             	sub    esp,0xc
c000b791:	50                   	push   eax
c000b792:	e8 25 ff ff ff       	call   c000b6bc <UnixFile::~UnixFile()>
c000b797:	83 c4 10             	add    esp,0x10
c000b79a:	90                   	nop
c000b79b:	83 c4 0c             	add    esp,0xc
c000b79e:	c3                   	ret    
c000b79f:	90                   	nop

c000b7a0 <ReservedFilename::~ReservedFilename()>:
c000b7a0:	83 ec 0c             	sub    esp,0xc
c000b7a3:	83 ec 0c             	sub    esp,0xc
c000b7a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7aa:	e8 cd ff ff ff       	call   c000b77c <ReservedFilename::~ReservedFilename()>
c000b7af:	83 c4 10             	add    esp,0x10
c000b7b2:	83 ec 08             	sub    esp,0x8
c000b7b5:	6a 0c                	push   0xc
c000b7b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7bb:	e8 d8 13 00 00       	call   c000cb98 <operator delete(void*, unsigned long)>
c000b7c0:	83 c4 10             	add    esp,0x10
c000b7c3:	83 c4 0c             	add    esp,0xc
c000b7c6:	c3                   	ret    

c000b7c7 <getFromFileDescriptor(int)>:
c000b7c7:	53                   	push   ebx
c000b7c8:	83 ec 08             	sub    esp,0x8
c000b7cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b7cf:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000b7d5:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000b7db:	7f 2c                	jg     c000b809 <getFromFileDescriptor(int)+0x42>
c000b7dd:	83 ec 0c             	sub    esp,0xc
c000b7e0:	68 98 67 02 c0       	push   0xc0026798
c000b7e5:	e8 22 63 01 00       	call   c0021b0c <LinkedList<UnixFile>::getFirstElement()>
c000b7ea:	83 c4 10             	add    esp,0x10
c000b7ed:	85 c0                	test   eax,eax
c000b7ef:	75 04                	jne    c000b7f5 <getFromFileDescriptor(int)+0x2e>
c000b7f1:	31 c0                	xor    eax,eax
c000b7f3:	eb 6e                	jmp    c000b863 <getFromFileDescriptor(int)+0x9c>
c000b7f5:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000b7f8:	74 69                	je     c000b863 <getFromFileDescriptor(int)+0x9c>
c000b7fa:	52                   	push   edx
c000b7fb:	52                   	push   edx
c000b7fc:	50                   	push   eax
c000b7fd:	68 98 67 02 c0       	push   0xc0026798
c000b802:	e8 af 63 01 00       	call   c0021bb6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000b807:	eb e1                	jmp    c000b7ea <getFromFileDescriptor(int)+0x23>
c000b809:	a1 8c 67 02 c0       	mov    eax,ds:0xc002678c
c000b80e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000b814:	74 4d                	je     c000b863 <getFromFileDescriptor(int)+0x9c>
c000b816:	a1 90 67 02 c0       	mov    eax,ds:0xc0026790
c000b81b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000b821:	74 40                	je     c000b863 <getFromFileDescriptor(int)+0x9c>
c000b823:	a1 88 67 02 c0       	mov    eax,ds:0xc0026788
c000b828:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000b82e:	74 33                	je     c000b863 <getFromFileDescriptor(int)+0x9c>
c000b830:	a1 84 67 02 c0       	mov    eax,ds:0xc0026784
c000b835:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000b83b:	74 26                	je     c000b863 <getFromFileDescriptor(int)+0x9c>
c000b83d:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000b843:	83 f8 08             	cmp    eax,0x8
c000b846:	77 09                	ja     c000b851 <getFromFileDescriptor(int)+0x8a>
c000b848:	8b 04 85 60 67 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd98a0]
c000b84f:	eb 12                	jmp    c000b863 <getFromFileDescriptor(int)+0x9c>
c000b851:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000b857:	83 fb 08             	cmp    ebx,0x8
c000b85a:	77 95                	ja     c000b7f1 <getFromFileDescriptor(int)+0x2a>
c000b85c:	8b 04 9d 20 67 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd98e0]
c000b863:	83 c4 08             	add    esp,0x8
c000b866:	5b                   	pop    ebx
c000b867:	c3                   	ret    

c000b868 <__static_initialization_and_destruction_0(int, int)>:
c000b868:	83 ec 0c             	sub    esp,0xc
c000b86b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b870:	75 34                	jne    c000b8a6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b872:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000b87a:	75 2a                	jne    c000b8a6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b87c:	83 ec 0c             	sub    esp,0xc
c000b87f:	68 98 67 02 c0       	push   0xc0026798
c000b884:	e8 6d 61 01 00       	call   c00219f6 <LinkedList<UnixFile>::LinkedList()>
c000b889:	83 c4 10             	add    esp,0x10
c000b88c:	83 ec 04             	sub    esp,0x4
c000b88f:	68 b8 5b 02 c0       	push   0xc0025bb8
c000b894:	68 98 67 02 c0       	push   0xc0026798
c000b899:	68 f4 19 02 c0       	push   0xc00219f4
c000b89e:	e8 6f 12 00 00       	call   c000cb12 <__cxa_atexit>
c000b8a3:	83 c4 10             	add    esp,0x10
c000b8a6:	90                   	nop
c000b8a7:	83 c4 0c             	add    esp,0xc
c000b8aa:	c3                   	ret    

c000b8ab <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000b8ab:	83 ec 0c             	sub    esp,0xc
c000b8ae:	83 ec 08             	sub    esp,0x8
c000b8b1:	68 ff ff 00 00       	push   0xffff
c000b8b6:	6a 01                	push   0x1
c000b8b8:	e8 ab ff ff ff       	call   c000b868 <__static_initialization_and_destruction_0(int, int)>
c000b8bd:	83 c4 10             	add    esp,0x10
c000b8c0:	83 c4 0c             	add    esp,0xc
c000b8c3:	c3                   	ret    

c000b8c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000b8c4:	53                   	push   ebx
c000b8c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b8c9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b8cd:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000b8d3:	89 c8                	mov    eax,ecx
c000b8d5:	d1 e8                	shr    eax,1
c000b8d7:	03 05 88 5d 02 c0    	add    eax,DWORD PTR ds:0xc0025d88
c000b8dd:	83 e1 01             	and    ecx,0x1
c000b8e0:	8a 10                	mov    dl,BYTE PTR [eax]
c000b8e2:	75 09                	jne    c000b8ed <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000b8e4:	83 e2 f0             	and    edx,0xfffffff0
c000b8e7:	09 da                	or     edx,ebx
c000b8e9:	88 10                	mov    BYTE PTR [eax],dl
c000b8eb:	5b                   	pop    ebx
c000b8ec:	c3                   	ret    
c000b8ed:	c1 e3 04             	shl    ebx,0x4
c000b8f0:	83 e2 0f             	and    edx,0xf
c000b8f3:	09 da                	or     edx,ebx
c000b8f5:	88 10                	mov    BYTE PTR [eax],dl
c000b8f7:	5b                   	pop    ebx
c000b8f8:	c3                   	ret    

c000b8f9 <Virt::getPageState(unsigned long)>:
c000b8f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8fd:	8b 0d 88 5d 02 c0    	mov    ecx,DWORD PTR ds:0xc0025d88
c000b903:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000b909:	89 d0                	mov    eax,edx
c000b90b:	d1 e8                	shr    eax,1
c000b90d:	83 e2 01             	and    edx,0x1
c000b910:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000b913:	75 04                	jne    c000b919 <Virt::getPageState(unsigned long)+0x20>
c000b915:	83 e0 0f             	and    eax,0xf
c000b918:	c3                   	ret    
c000b919:	c0 e8 04             	shr    al,0x4
c000b91c:	c3                   	ret    

c000b91d <Virt::allocateKernelVirtualPages(int)>:
c000b91d:	55                   	push   ebp
c000b91e:	31 ed                	xor    ebp,ebp
c000b920:	57                   	push   edi
c000b921:	56                   	push   esi
c000b922:	53                   	push   ebx
c000b923:	31 db                	xor    ebx,ebx
c000b925:	83 ec 1c             	sub    esp,0x1c
c000b928:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b92c:	8b 3d 84 5d 02 c0    	mov    edi,DWORD PTR ds:0xc0025d84
c000b932:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000b937:	57                   	push   edi
c000b938:	e8 bc ff ff ff       	call   c000b8f9 <Virt::getPageState(unsigned long)>
c000b93d:	5a                   	pop    edx
c000b93e:	84 c0                	test   al,al
c000b940:	75 3a                	jne    c000b97c <Virt::allocateKernelVirtualPages(int)+0x5f>
c000b942:	85 db                	test   ebx,ebx
c000b944:	75 02                	jne    c000b948 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000b946:	89 fd                	mov    ebp,edi
c000b948:	43                   	inc    ebx
c000b949:	39 f3                	cmp    ebx,esi
c000b94b:	74 5a                	je     c000b9a7 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000b94d:	47                   	inc    edi
c000b94e:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b954:	76 31                	jbe    c000b987 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000b956:	c7 05 84 5d 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0025d84,0xc8000
c000b960:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000b965:	75 28                	jne    c000b98f <Virt::allocateKernelVirtualPages(int)+0x72>
c000b967:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000b96c:	bf 00 80 0c 00       	mov    edi,0xc8000
c000b971:	57                   	push   edi
c000b972:	e8 82 ff ff ff       	call   c000b8f9 <Virt::getPageState(unsigned long)>
c000b977:	5a                   	pop    edx
c000b978:	84 c0                	test   al,al
c000b97a:	74 c6                	je     c000b942 <Virt::allocateKernelVirtualPages(int)+0x25>
c000b97c:	31 db                	xor    ebx,ebx
c000b97e:	47                   	inc    edi
c000b97f:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b985:	77 cf                	ja     c000b956 <Virt::allocateKernelVirtualPages(int)+0x39>
c000b987:	89 3d 84 5d 02 c0    	mov    DWORD PTR ds:0xc0025d84,edi
c000b98d:	eb a8                	jmp    c000b937 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b98f:	83 ec 0c             	sub    esp,0xc
c000b992:	68 a0 31 02 c0       	push   0xc00231a0
c000b997:	e8 6b 76 00 00       	call   c0013007 <Krnl::panic(char const*)>
c000b99c:	8b 3d 84 5d 02 c0    	mov    edi,DWORD PTR ds:0xc0025d84
c000b9a2:	83 c4 10             	add    esp,0x10
c000b9a5:	eb 90                	jmp    c000b937 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b9a7:	89 2d 84 5d 02 c0    	mov    DWORD PTR ds:0xc0025d84,ebp
c000b9ad:	4b                   	dec    ebx
c000b9ae:	74 5f                	je     c000ba0f <Virt::allocateKernelVirtualPages(int)+0xf2>
c000b9b0:	85 f6                	test   esi,esi
c000b9b2:	74 3d                	je     c000b9f1 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b9b4:	89 e8                	mov    eax,ebp
c000b9b6:	31 db                	xor    ebx,ebx
c000b9b8:	8d 7e ff             	lea    edi,[esi-0x1]
c000b9bb:	eb 14                	jmp    c000b9d1 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000b9bd:	6a 01                	push   0x1
c000b9bf:	43                   	inc    ebx
c000b9c0:	50                   	push   eax
c000b9c1:	e8 fe fe ff ff       	call   c000b8c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b9c6:	58                   	pop    eax
c000b9c7:	39 f3                	cmp    ebx,esi
c000b9c9:	5a                   	pop    edx
c000b9ca:	74 25                	je     c000b9f1 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b9cc:	a1 84 5d 02 c0       	mov    eax,ds:0xc0025d84
c000b9d1:	8d 50 01             	lea    edx,[eax+0x1]
c000b9d4:	85 db                	test   ebx,ebx
c000b9d6:	89 15 84 5d 02 c0    	mov    DWORD PTR ds:0xc0025d84,edx
c000b9dc:	74 20                	je     c000b9fe <Virt::allocateKernelVirtualPages(int)+0xe1>
c000b9de:	39 df                	cmp    edi,ebx
c000b9e0:	75 db                	jne    c000b9bd <Virt::allocateKernelVirtualPages(int)+0xa0>
c000b9e2:	6a 03                	push   0x3
c000b9e4:	43                   	inc    ebx
c000b9e5:	50                   	push   eax
c000b9e6:	e8 d9 fe ff ff       	call   c000b8c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b9eb:	59                   	pop    ecx
c000b9ec:	39 f3                	cmp    ebx,esi
c000b9ee:	58                   	pop    eax
c000b9ef:	75 db                	jne    c000b9cc <Virt::allocateKernelVirtualPages(int)+0xaf>
c000b9f1:	83 c4 1c             	add    esp,0x1c
c000b9f4:	89 e8                	mov    eax,ebp
c000b9f6:	5b                   	pop    ebx
c000b9f7:	c1 e0 0c             	shl    eax,0xc
c000b9fa:	5e                   	pop    esi
c000b9fb:	5f                   	pop    edi
c000b9fc:	5d                   	pop    ebp
c000b9fd:	c3                   	ret    
c000b9fe:	6a 02                	push   0x2
c000ba00:	bb 01 00 00 00       	mov    ebx,0x1
c000ba05:	50                   	push   eax
c000ba06:	e8 b9 fe ff ff       	call   c000b8c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000ba0b:	58                   	pop    eax
c000ba0c:	5a                   	pop    edx
c000ba0d:	eb bd                	jmp    c000b9cc <Virt::allocateKernelVirtualPages(int)+0xaf>
c000ba0f:	6a 04                	push   0x4
c000ba11:	8d 45 01             	lea    eax,[ebp+0x1]
c000ba14:	55                   	push   ebp
c000ba15:	a3 84 5d 02 c0       	mov    ds:0xc0025d84,eax
c000ba1a:	e8 a5 fe ff ff       	call   c000b8c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000ba1f:	59                   	pop    ecx
c000ba20:	89 e8                	mov    eax,ebp
c000ba22:	5b                   	pop    ebx
c000ba23:	c1 e0 0c             	shl    eax,0xc
c000ba26:	83 c4 1c             	add    esp,0x1c
c000ba29:	5b                   	pop    ebx
c000ba2a:	5e                   	pop    esi
c000ba2b:	5f                   	pop    edi
c000ba2c:	5d                   	pop    ebp
c000ba2d:	c3                   	ret    

c000ba2e <Virt::freeSwapfilePage(unsigned long)>:
c000ba2e:	53                   	push   ebx
c000ba2f:	8b 15 b0 67 02 c0    	mov    edx,DWORD PTR ds:0xc00267b0
c000ba35:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ba39:	b8 01 00 00 00       	mov    eax,0x1
c000ba3e:	89 cb                	mov    ebx,ecx
c000ba40:	d3 e0                	shl    eax,cl
c000ba42:	c1 eb 05             	shr    ebx,0x5
c000ba45:	f7 d0                	not    eax
c000ba47:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000ba4a:	5b                   	pop    ebx
c000ba4b:	c3                   	ret    

c000ba4c <Virt::swapIDToSector(unsigned long)>:
c000ba4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba50:	0f af 05 8c 5d 02 c0 	imul   eax,DWORD PTR ds:0xc0025d8c
c000ba57:	03 05 94 5d 02 c0    	add    eax,DWORD PTR ds:0xc0025d94
c000ba5d:	c3                   	ret    

c000ba5e <Virt::allocateSwapfilePage()>:
c000ba5e:	55                   	push   ebp
c000ba5f:	31 d2                	xor    edx,edx
c000ba61:	57                   	push   edi
c000ba62:	56                   	push   esi
c000ba63:	53                   	push   ebx
c000ba64:	83 ec 0c             	sub    esp,0xc
c000ba67:	8b 0d 8c 5d 02 c0    	mov    ecx,DWORD PTR ds:0xc0025d8c
c000ba6d:	a1 90 5d 02 c0       	mov    eax,ds:0xc0025d90
c000ba72:	f7 f1                	div    ecx
c000ba74:	39 0d 90 5d 02 c0    	cmp    DWORD PTR ds:0xc0025d90,ecx
c000ba7a:	72 2d                	jb     c000baa9 <Virt::allocateSwapfilePage()+0x4b>
c000ba7c:	8b 35 b0 67 02 c0    	mov    esi,DWORD PTR ds:0xc00267b0
c000ba82:	8b 16                	mov    edx,DWORD PTR [esi]
c000ba84:	f6 c2 01             	test   dl,0x1
c000ba87:	74 3c                	je     c000bac5 <Virt::allocateSwapfilePage()+0x67>
c000ba89:	31 c9                	xor    ecx,ecx
c000ba8b:	bf 01 00 00 00       	mov    edi,0x1
c000ba90:	eb 12                	jmp    c000baa4 <Virt::allocateSwapfilePage()+0x46>
c000ba92:	89 fd                	mov    ebp,edi
c000ba94:	89 ca                	mov    edx,ecx
c000ba96:	d3 e5                	shl    ebp,cl
c000ba98:	c1 ea 05             	shr    edx,0x5
c000ba9b:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000ba9e:	8b 13                	mov    edx,DWORD PTR [ebx]
c000baa0:	85 ea                	test   edx,ebp
c000baa2:	74 2a                	je     c000bace <Virt::allocateSwapfilePage()+0x70>
c000baa4:	41                   	inc    ecx
c000baa5:	39 c8                	cmp    eax,ecx
c000baa7:	77 e9                	ja     c000ba92 <Virt::allocateSwapfilePage()+0x34>
c000baa9:	83 ec 0c             	sub    esp,0xc
c000baac:	68 58 33 02 c0       	push   0xc0023358
c000bab1:	e8 51 75 00 00       	call   c0013007 <Krnl::panic(char const*)>
c000bab6:	83 c4 10             	add    esp,0x10
c000bab9:	31 c9                	xor    ecx,ecx
c000babb:	83 c4 0c             	add    esp,0xc
c000babe:	89 c8                	mov    eax,ecx
c000bac0:	5b                   	pop    ebx
c000bac1:	5e                   	pop    esi
c000bac2:	5f                   	pop    edi
c000bac3:	5d                   	pop    ebp
c000bac4:	c3                   	ret    
c000bac5:	89 f3                	mov    ebx,esi
c000bac7:	bd 01 00 00 00       	mov    ebp,0x1
c000bacc:	31 c9                	xor    ecx,ecx
c000bace:	09 ea                	or     edx,ebp
c000bad0:	89 c8                	mov    eax,ecx
c000bad2:	89 13                	mov    DWORD PTR [ebx],edx
c000bad4:	83 c4 0c             	add    esp,0xc
c000bad7:	5b                   	pop    ebx
c000bad8:	5e                   	pop    esi
c000bad9:	5f                   	pop    edi
c000bada:	5d                   	pop    ebp
c000badb:	c3                   	ret    

c000badc <Virt::virtualMemorySetup()>:
c000badc:	53                   	push   ebx
c000badd:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bae2:	6a 0f                	push   0xf
c000bae4:	53                   	push   ebx
c000bae5:	43                   	inc    ebx
c000bae6:	e8 d9 fd ff ff       	call   c000b8c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000baeb:	58                   	pop    eax
c000baec:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000baf2:	5a                   	pop    edx
c000baf3:	75 ed                	jne    c000bae2 <Virt::virtualMemorySetup()+0x6>
c000baf5:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bafa:	6a 00                	push   0x0
c000bafc:	53                   	push   ebx
c000bafd:	43                   	inc    ebx
c000bafe:	e8 c1 fd ff ff       	call   c000b8c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bb03:	59                   	pop    ecx
c000bb04:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bb0a:	58                   	pop    eax
c000bb0b:	75 ed                	jne    c000bafa <Virt::virtualMemorySetup()+0x1e>
c000bb0d:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000bb12:	6a 0f                	push   0xf
c000bb14:	53                   	push   ebx
c000bb15:	43                   	inc    ebx
c000bb16:	e8 a9 fd ff ff       	call   c000b8c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bb1b:	58                   	pop    eax
c000bb1c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000bb22:	5a                   	pop    edx
c000bb23:	75 ed                	jne    c000bb12 <Virt::virtualMemorySetup()+0x36>
c000bb25:	5b                   	pop    ebx
c000bb26:	c3                   	ret    

c000bb27 <Virt::setupPageSwapping(int)>:
c000bb27:	53                   	push   ebx
c000bb28:	83 ec 0c             	sub    esp,0xc
c000bb2b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bb2f:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c000bb34:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000bb3a:	8b 10                	mov    edx,DWORD PTR [eax]
c000bb3c:	53                   	push   ebx
c000bb3d:	c1 e3 0b             	shl    ebx,0xb
c000bb40:	68 6f 33 02 c0       	push   0xc002336f
c000bb45:	50                   	push   eax
c000bb46:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000bb49:	89 1d 90 5d 02 c0    	mov    DWORD PTR ds:0xc0025d90,ebx
c000bb4f:	c6 05 98 5d 02 c0 43 	mov    BYTE PTR ds:0xc0025d98,0x43
c000bb56:	c1 eb 08             	shr    ebx,0x8
c000bb59:	a3 94 5d 02 c0       	mov    ds:0xc0025d94,eax
c000bb5e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bb61:	c7 05 8c 5d 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0025d8c,0x8
c000bb6b:	e8 fb dd ff ff       	call   c000996b <malloc>
c000bb70:	83 c4 0c             	add    esp,0xc
c000bb73:	89 c1                	mov    ecx,eax
c000bb75:	a3 b0 67 02 c0       	mov    ds:0xc00267b0,eax
c000bb7a:	31 d2                	xor    edx,edx
c000bb7c:	a1 90 5d 02 c0       	mov    eax,ds:0xc0025d90
c000bb81:	f7 35 8c 5d 02 c0    	div    DWORD PTR ds:0xc0025d8c
c000bb87:	c1 e8 05             	shr    eax,0x5
c000bb8a:	50                   	push   eax
c000bb8b:	6a 00                	push   0x0
c000bb8d:	51                   	push   ecx
c000bb8e:	e8 e9 4a ff ff       	call   c000067c <memset>
c000bb93:	83 c4 18             	add    esp,0x18
c000bb96:	5b                   	pop    ebx
c000bb97:	c3                   	ret    

c000bb98 <VAS::VAS(VAS*)>:
c000bb98:	83 ec 0c             	sub    esp,0xc
c000bb9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb9f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbaa:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000bbb1:	83 ec 0c             	sub    esp,0xc
c000bbb4:	68 c0 31 02 c0       	push   0xc00231c0
c000bbb9:	e8 49 74 00 00       	call   c0013007 <Krnl::panic(char const*)>
c000bbbe:	83 c4 10             	add    esp,0x10
c000bbc1:	90                   	nop
c000bbc2:	83 c4 0c             	add    esp,0xc
c000bbc5:	c3                   	ret    

c000bbc6 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000bbc6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bbca:	89 c2                	mov    edx,eax
c000bbcc:	c1 e8 0a             	shr    eax,0xa
c000bbcf:	c1 ea 16             	shr    edx,0x16
c000bbd2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bbd7:	19 c9                	sbb    ecx,ecx
c000bbd9:	c1 e2 0c             	shl    edx,0xc
c000bbdc:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000bbe2:	25 fc 0f 00 00       	and    eax,0xffc
c000bbe7:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000bbee:	01 d0                	add    eax,edx
c000bbf0:	c3                   	ret    
c000bbf1:	90                   	nop

c000bbf2 <VAS::getPageTableEntry(unsigned long)>:
c000bbf2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bbf6:	89 ca                	mov    edx,ecx
c000bbf8:	c1 e9 0a             	shr    ecx,0xa
c000bbfb:	c1 ea 16             	shr    edx,0x16
c000bbfe:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000bc04:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000bc0a:	c1 e0 0c             	shl    eax,0xc
c000bc0d:	8d 04 08             	lea    eax,[eax+ecx*1]
c000bc10:	c3                   	ret    

c000bc11 <Virt::freeKernelVirtualPages(unsigned long)>:
c000bc11:	57                   	push   edi
c000bc12:	56                   	push   esi
c000bc13:	be 01 00 00 00       	mov    esi,0x1
c000bc18:	53                   	push   ebx
c000bc19:	83 ec 10             	sub    esp,0x10
c000bc1c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bc20:	c1 eb 0c             	shr    ebx,0xc
c000bc23:	eb 3f                	jmp    c000bc64 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000bc25:	83 ec 08             	sub    esp,0x8
c000bc28:	57                   	push   edi
c000bc29:	ff 35 b4 67 02 c0    	push   DWORD PTR ds:0xc00267b4
c000bc2f:	e8 be ff ff ff       	call   c000bbf2 <VAS::getPageTableEntry(unsigned long)>
c000bc34:	83 c4 10             	add    esp,0x10
c000bc37:	8b 00                	mov    eax,DWORD PTR [eax]
c000bc39:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bc3d:	f6 c4 04             	test   ah,0x4
c000bc40:	75 5f                	jne    c000bca1 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000bc42:	80 fa 04             	cmp    dl,0x4
c000bc45:	74 78                	je     c000bcbf <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000bc47:	80 fa 02             	cmp    dl,0x2
c000bc4a:	0f 84 88 00 00 00    	je     c000bcd8 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000bc50:	80 fa 03             	cmp    dl,0x3
c000bc53:	0f 84 ad 00 00 00    	je     c000bd06 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000bc59:	fe ca                	dec    dl
c000bc5b:	0f 84 92 00 00 00    	je     c000bcf3 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000bc61:	43                   	inc    ebx
c000bc62:	31 f6                	xor    esi,esi
c000bc64:	53                   	push   ebx
c000bc65:	89 df                	mov    edi,ebx
c000bc67:	e8 8d fc ff ff       	call   c000b8f9 <Virt::getPageState(unsigned long)>
c000bc6c:	c1 e7 0c             	shl    edi,0xc
c000bc6f:	59                   	pop    ecx
c000bc70:	84 c0                	test   al,al
c000bc72:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000bc76:	75 ad                	jne    c000bc25 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000bc78:	83 ec 0c             	sub    esp,0xc
c000bc7b:	68 86 33 02 c0       	push   0xc0023386
c000bc80:	e8 82 73 00 00       	call   c0013007 <Krnl::panic(char const*)>
c000bc85:	58                   	pop    eax
c000bc86:	5a                   	pop    edx
c000bc87:	57                   	push   edi
c000bc88:	ff 35 b4 67 02 c0    	push   DWORD PTR ds:0xc00267b4
c000bc8e:	e8 5f ff ff ff       	call   c000bbf2 <VAS::getPageTableEntry(unsigned long)>
c000bc93:	83 c4 10             	add    esp,0x10
c000bc96:	8b 00                	mov    eax,DWORD PTR [eax]
c000bc98:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bc9c:	f6 c4 04             	test   ah,0x4
c000bc9f:	74 c0                	je     c000bc61 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bca1:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000bca5:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bcaa:	83 ec 0c             	sub    esp,0xc
c000bcad:	50                   	push   eax
c000bcae:	e8 ec e2 ff ff       	call   c0009f9f <Phys::freePage(unsigned long)>
c000bcb3:	83 c4 10             	add    esp,0x10
c000bcb6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bcba:	80 fa 04             	cmp    dl,0x4
c000bcbd:	75 88                	jne    c000bc47 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000bcbf:	89 f0                	mov    eax,esi
c000bcc1:	84 c0                	test   al,al
c000bcc3:	75 47                	jne    c000bd0c <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000bcc5:	c7 44 24 20 e4 31 02 c0 	mov    DWORD PTR [esp+0x20],0xc00231e4
c000bccd:	83 c4 10             	add    esp,0x10
c000bcd0:	5b                   	pop    ebx
c000bcd1:	5e                   	pop    esi
c000bcd2:	5f                   	pop    edi
c000bcd3:	e9 2f 73 00 00       	jmp    c0013007 <Krnl::panic(char const*)>
c000bcd8:	89 f0                	mov    eax,esi
c000bcda:	84 c0                	test   al,al
c000bcdc:	75 15                	jne    c000bcf3 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000bcde:	83 ec 0c             	sub    esp,0xc
c000bce1:	68 a2 33 02 c0       	push   0xc00233a2
c000bce6:	e8 1c 73 00 00       	call   c0013007 <Krnl::panic(char const*)>
c000bceb:	83 c4 10             	add    esp,0x10
c000bcee:	e9 6e ff ff ff       	jmp    c000bc61 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bcf3:	83 ec 08             	sub    esp,0x8
c000bcf6:	6a 00                	push   0x0
c000bcf8:	53                   	push   ebx
c000bcf9:	e8 c6 fb ff ff       	call   c000b8c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bcfe:	83 c4 10             	add    esp,0x10
c000bd01:	e9 5b ff ff ff       	jmp    c000bc61 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bd06:	89 f0                	mov    eax,esi
c000bd08:	84 c0                	test   al,al
c000bd0a:	75 15                	jne    c000bd21 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000bd0c:	83 ec 08             	sub    esp,0x8
c000bd0f:	6a 00                	push   0x0
c000bd11:	53                   	push   ebx
c000bd12:	e8 ad fb ff ff       	call   c000b8c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bd17:	83 c4 10             	add    esp,0x10
c000bd1a:	83 c4 10             	add    esp,0x10
c000bd1d:	5b                   	pop    ebx
c000bd1e:	5e                   	pop    esi
c000bd1f:	5f                   	pop    edi
c000bd20:	c3                   	ret    
c000bd21:	c7 44 24 20 be 33 02 c0 	mov    DWORD PTR [esp+0x20],0xc00233be
c000bd29:	83 c4 10             	add    esp,0x10
c000bd2c:	5b                   	pop    ebx
c000bd2d:	5e                   	pop    esi
c000bd2e:	5f                   	pop    edi
c000bd2f:	e9 d3 72 00 00       	jmp    c0013007 <Krnl::panic(char const*)>

c000bd34 <VAS::freeAllocatedPages(unsigned long)>:
c000bd34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd38:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bd3c:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000bd40:	74 09                	je     c000bd4b <VAS::freeAllocatedPages(unsigned long)+0x17>
c000bd42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bd46:	e9 c6 fe ff ff       	jmp    c000bc11 <Virt::freeKernelVirtualPages(unsigned long)>
c000bd4b:	c7 44 24 04 08 32 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023208
c000bd53:	e9 21 0f 00 00       	jmp    c000cc79 <Dbg::kprintf(char const*, ...)>

c000bd58 <VAS::virtualToPhysical(unsigned long)>:
c000bd58:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000bd5c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000bd60:	e8 8d fe ff ff       	call   c000bbf2 <VAS::getPageTableEntry(unsigned long)>
c000bd65:	5a                   	pop    edx
c000bd66:	8b 00                	mov    eax,DWORD PTR [eax]
c000bd68:	59                   	pop    ecx
c000bd69:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bd6e:	c3                   	ret    
c000bd6f:	90                   	nop

c000bd70 <VAS::reflagRange(unsigned long, int, int, int)>:
c000bd70:	55                   	push   ebp
c000bd71:	57                   	push   edi
c000bd72:	56                   	push   esi
c000bd73:	53                   	push   ebx
c000bd74:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bd78:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000bd7c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bd80:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bd84:	85 db                	test   ebx,ebx
c000bd86:	7e 22                	jle    c000bdaa <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000bd88:	c1 e3 0c             	shl    ebx,0xc
c000bd8b:	01 f3                	add    ebx,esi
c000bd8d:	56                   	push   esi
c000bd8e:	81 c6 00 10 00 00    	add    esi,0x1000
c000bd94:	55                   	push   ebp
c000bd95:	e8 58 fe ff ff       	call   c000bbf2 <VAS::getPageTableEntry(unsigned long)>
c000bd9a:	5a                   	pop    edx
c000bd9b:	59                   	pop    ecx
c000bd9c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bd9e:	21 f9                	and    ecx,edi
c000bda0:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000bda4:	39 f3                	cmp    ebx,esi
c000bda6:	89 08                	mov    DWORD PTR [eax],ecx
c000bda8:	75 e3                	jne    c000bd8d <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000bdaa:	5b                   	pop    ebx
c000bdab:	5e                   	pop    esi
c000bdac:	5f                   	pop    edi
c000bdad:	5d                   	pop    ebp
c000bdae:	c3                   	ret    
c000bdaf:	90                   	nop

c000bdb0 <VAS::setToWriteCombining(unsigned long, int)>:
c000bdb0:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c000bdb5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bdbb:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c000bdc2:	75 01                	jne    c000bdc5 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000bdc4:	c3                   	ret    
c000bdc5:	68 80 00 00 00       	push   0x80
c000bdca:	6a ff                	push   0xffffffff
c000bdcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bdd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bdd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bdd8:	e8 93 ff ff ff       	call   c000bd70 <VAS::reflagRange(unsigned long, int, int, int)>
c000bddd:	83 c4 14             	add    esp,0x14
c000bde0:	c3                   	ret    
c000bde1:	90                   	nop

c000bde2 <VAS::mapOtherVASIn(bool, VAS*)>:
c000bde2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bde7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bdeb:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000bdee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bdf2:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000bdf5:	19 c0                	sbb    eax,eax
c000bdf7:	83 ca 03             	or     edx,0x3
c000bdfa:	83 e0 fc             	and    eax,0xfffffffc
c000bdfd:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000be04:	0f 20 d8             	mov    eax,cr3
c000be07:	0f 22 d8             	mov    cr3,eax
c000be0a:	c3                   	ret    
c000be0b:	90                   	nop

c000be0c <VAS::~VAS()>:
c000be0c:	83 ec 2c             	sub    esp,0x2c
c000be0f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000be17:	fa                   	cli    
c000be18:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c000be1d:	40                   	inc    eax
c000be1e:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c000be23:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000be28:	8b 00                	mov    eax,DWORD PTR [eax]
c000be2a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000be2d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000be33:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000be37:	6a 01                	push   0x1
c000be39:	50                   	push   eax
c000be3a:	e8 a3 ff ff ff       	call   c000bde2 <VAS::mapOtherVASIn(bool, VAS*)>
c000be3f:	83 c4 0c             	add    esp,0xc
c000be42:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000be4a:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000be52:	0f 8f d4 00 00 00    	jg     c000bf2c <VAS::~VAS()+0x120>
c000be58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000be5c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000be5f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000be63:	c1 e2 02             	shl    edx,0x2
c000be66:	01 d0                	add    eax,edx
c000be68:	8b 00                	mov    eax,DWORD PTR [eax]
c000be6a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be72:	83 e0 01             	and    eax,0x1
c000be75:	0f 84 a8 00 00 00    	je     c000bf23 <VAS::~VAS()+0x117>
c000be7b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000be83:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000be8b:	7f 72                	jg     c000beff <VAS::~VAS()+0xf3>
c000be8d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000be91:	c1 e0 0a             	shl    eax,0xa
c000be94:	89 c2                	mov    edx,eax
c000be96:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000be9a:	01 d0                	add    eax,edx
c000be9c:	c1 e0 0c             	shl    eax,0xc
c000be9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bea3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bea8:	8b 00                	mov    eax,DWORD PTR [eax]
c000beaa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bead:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000beb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000beb7:	6a 01                	push   0x1
c000beb9:	50                   	push   eax
c000beba:	e8 07 fd ff ff       	call   c000bbc6 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000bebf:	83 c4 0c             	add    esp,0xc
c000bec2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bec6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000beca:	8b 00                	mov    eax,DWORD PTR [eax]
c000becc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bed0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bed4:	25 01 04 00 00       	and    eax,0x401
c000bed9:	3d 01 04 00 00       	cmp    eax,0x401
c000bede:	75 19                	jne    c000bef9 <VAS::~VAS()+0xed>
c000bee0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bee4:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bee9:	83 ec 0c             	sub    esp,0xc
c000beec:	50                   	push   eax
c000beed:	e8 ad e0 ff ff       	call   c0009f9f <Phys::freePage(unsigned long)>
c000bef2:	83 c4 10             	add    esp,0x10
c000bef5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bef9:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000befd:	eb 84                	jmp    c000be83 <VAS::~VAS()+0x77>
c000beff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf03:	25 00 04 00 00       	and    eax,0x400
c000bf08:	74 19                	je     c000bf23 <VAS::~VAS()+0x117>
c000bf0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf0e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bf13:	83 ec 0c             	sub    esp,0xc
c000bf16:	50                   	push   eax
c000bf17:	e8 83 e0 ff ff       	call   c0009f9f <Phys::freePage(unsigned long)>
c000bf1c:	83 c4 10             	add    esp,0x10
c000bf1f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bf23:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000bf27:	e9 1e ff ff ff       	jmp    c000be4a <VAS::~VAS()+0x3e>
c000bf2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf30:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bf33:	83 ec 0c             	sub    esp,0xc
c000bf36:	50                   	push   eax
c000bf37:	e8 d5 fc ff ff       	call   c000bc11 <Virt::freeKernelVirtualPages(unsigned long)>
c000bf3c:	83 c4 10             	add    esp,0x10
c000bf3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf43:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000bf46:	83 ec 0c             	sub    esp,0xc
c000bf49:	50                   	push   eax
c000bf4a:	e8 50 e0 ff ff       	call   c0009f9f <Phys::freePage(unsigned long)>
c000bf4f:	83 c4 10             	add    esp,0x10
c000bf52:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bf56:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bf5a:	c1 e0 02             	shl    eax,0x2
c000bf5d:	83 ec 08             	sub    esp,0x8
c000bf60:	50                   	push   eax
c000bf61:	68 2c 32 02 c0       	push   0xc002322c
c000bf66:	e8 0e 0d 00 00       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c000bf6b:	83 c4 10             	add    esp,0x10
c000bf6e:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c000bf73:	48                   	dec    eax
c000bf74:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c000bf79:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c000bf7e:	85 c0                	test   eax,eax
c000bf80:	75 01                	jne    c000bf83 <VAS::~VAS()+0x177>
c000bf82:	fb                   	sti    
c000bf83:	90                   	nop
c000bf84:	83 c4 2c             	add    esp,0x2c
c000bf87:	c3                   	ret    

c000bf88 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000bf88:	55                   	push   ebp
c000bf89:	57                   	push   edi
c000bf8a:	56                   	push   esi
c000bf8b:	53                   	push   ebx
c000bf8c:	83 ec 1c             	sub    esp,0x1c
c000bf8f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000bf93:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000bf97:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000bf9d:	77 0b                	ja     c000bfaa <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c000bf9f:	0f 20 d8             	mov    eax,cr3
c000bfa2:	0f 20 d8             	mov    eax,cr3
c000bfa5:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000bfa8:	75 47                	jne    c000bff1 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c000bfaa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bfae:	09 d8                	or     eax,ebx
c000bfb0:	a9 ff 0f 00 00       	test   eax,0xfff
c000bfb5:	75 57                	jne    c000c00e <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c000bfb7:	89 de                	mov    esi,ebx
c000bfb9:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000bfbc:	c1 ee 16             	shr    esi,0x16
c000bfbf:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000bfc6:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000bfca:	74 54                	je     c000c020 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c000bfcc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bfd0:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000bfd6:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000bfda:	c1 e6 0c             	shl    esi,0xc
c000bfdd:	c1 eb 0a             	shr    ebx,0xa
c000bfe0:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000bfe6:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000bfe9:	83 c4 1c             	add    esp,0x1c
c000bfec:	5b                   	pop    ebx
c000bfed:	5e                   	pop    esi
c000bfee:	5f                   	pop    edi
c000bfef:	5d                   	pop    ebp
c000bff0:	c3                   	ret    
c000bff1:	83 ec 0c             	sub    esp,0xc
c000bff4:	68 4c 32 02 c0       	push   0xc002324c
c000bff9:	e8 7b 0c 00 00       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c000bffe:	83 c4 10             	add    esp,0x10
c000c001:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c005:	09 d8                	or     eax,ebx
c000c007:	a9 ff 0f 00 00       	test   eax,0xfff
c000c00c:	74 a9                	je     c000bfb7 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000c00e:	83 ec 0c             	sub    esp,0xc
c000c011:	68 b4 32 02 c0       	push   0xc00232b4
c000c016:	e8 ec 6f 00 00       	call   c0013007 <Krnl::panic(char const*)>
c000c01b:	83 c4 10             	add    esp,0x10
c000c01e:	eb 97                	jmp    c000bfb7 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000c020:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c024:	e8 f9 df ff ff       	call   c000a022 <Phys::allocatePage()>
c000c029:	83 ec 0c             	sub    esp,0xc
c000c02c:	89 c5                	mov    ebp,eax
c000c02e:	8b 0d b4 67 02 c0    	mov    ecx,DWORD PTR ds:0xc00267b4
c000c034:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c038:	6a 01                	push   0x1
c000c03a:	e8 de f8 ff ff       	call   c000b91d <Virt::allocateKernelVirtualPages(int)>
c000c03f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c046:	6a 01                	push   0x1
c000c048:	50                   	push   eax
c000c049:	55                   	push   ebp
c000c04a:	81 cd 07 04 00 00    	or     ebp,0x407
c000c050:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c054:	51                   	push   ecx
c000c055:	e8 26 02 00 00       	call   c000c280 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c05a:	83 c4 1c             	add    esp,0x1c
c000c05d:	68 00 10 00 00       	push   0x1000
c000c062:	6a 00                	push   0x0
c000c064:	50                   	push   eax
c000c065:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c069:	e8 0e 46 ff ff       	call   c000067c <memset>
c000c06e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c072:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c075:	e8 97 fb ff ff       	call   c000bc11 <Virt::freeKernelVirtualPages(unsigned long)>
c000c07a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c07e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000c087:	e9 40 ff ff ff       	jmp    c000bfcc <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c000c08c <VAS::allocatePages(int, int)>:
c000c08c:	55                   	push   ebp
c000c08d:	57                   	push   edi
c000c08e:	56                   	push   esi
c000c08f:	53                   	push   ebx
c000c090:	83 ec 1c             	sub    esp,0x1c
c000c093:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c097:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c000c09c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c0a2:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000c0a8:	83 e0 01             	and    eax,0x1
c000c0ab:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000c0af:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c0b3:	0f 85 cc 00 00 00    	jne    c000c185 <VAS::allocatePages(int, int)+0xf9>
c000c0b9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c0bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c0c0:	85 c0                	test   eax,eax
c000c0c2:	0f 84 a1 00 00 00    	je     c000c169 <VAS::allocatePages(int, int)+0xdd>
c000c0c8:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000c0cc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c0d0:	c1 e6 0c             	shl    esi,0xc
c000c0d3:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000c0d7:	85 c0                	test   eax,eax
c000c0d9:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000c0dc:	7e 33                	jle    c000c111 <VAS::allocatePages(int, int)+0x85>
c000c0de:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c0e2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c0e6:	81 cd 00 04 00 00    	or     ebp,0x400
c000c0ec:	e8 31 df ff ff       	call   c000a022 <Phys::allocatePage()>
c000c0f1:	55                   	push   ebp
c000c0f2:	53                   	push   ebx
c000c0f3:	50                   	push   eax
c000c0f4:	57                   	push   edi
c000c0f5:	e8 8e fe ff ff       	call   c000bf88 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c0fa:	83 c4 10             	add    esp,0x10
c000c0fd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c102:	74 03                	je     c000c107 <VAS::allocatePages(int, int)+0x7b>
c000c104:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c107:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c10d:	39 de                	cmp    esi,ebx
c000c10f:	75 db                	jne    c000c0ec <VAS::allocatePages(int, int)+0x60>
c000c111:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c116:	75 12                	jne    c000c12a <VAS::allocatePages(int, int)+0x9e>
c000c118:	0f 20 d8             	mov    eax,cr3
c000c11b:	0f 22 d8             	mov    cr3,eax
c000c11e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c122:	83 c4 1c             	add    esp,0x1c
c000c125:	5b                   	pop    ebx
c000c126:	5e                   	pop    esi
c000c127:	5f                   	pop    edi
c000c128:	5d                   	pop    ebp
c000c129:	c3                   	ret    
c000c12a:	c1 ee 0a             	shr    esi,0xa
c000c12d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c131:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000c137:	c1 eb 0a             	shr    ebx,0xa
c000c13a:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000c140:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c146:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c14c:	39 c3                	cmp    ebx,eax
c000c14e:	77 ce                	ja     c000c11e <VAS::allocatePages(int, int)+0x92>
c000c150:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c153:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c159:	39 d8                	cmp    eax,ebx
c000c15b:	73 f3                	jae    c000c150 <VAS::allocatePages(int, int)+0xc4>
c000c15d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c161:	83 c4 1c             	add    esp,0x1c
c000c164:	5b                   	pop    ebx
c000c165:	5e                   	pop    esi
c000c166:	5f                   	pop    edi
c000c167:	5d                   	pop    ebp
c000c168:	c3                   	ret    
c000c169:	83 ec 0c             	sub    esp,0xc
c000c16c:	68 d8 32 02 c0       	push   0xc00232d8
c000c171:	e8 91 6e 00 00       	call   c0013007 <Krnl::panic(char const*)>
c000c176:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c179:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c17d:	83 c4 10             	add    esp,0x10
c000c180:	e9 43 ff ff ff       	jmp    c000c0c8 <VAS::allocatePages(int, int)+0x3c>
c000c185:	83 ec 0c             	sub    esp,0xc
c000c188:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c18c:	e8 8c f7 ff ff       	call   c000b91d <Virt::allocateKernelVirtualPages(int)>
c000c191:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c195:	83 c4 10             	add    esp,0x10
c000c198:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000c19d:	0f 87 9b 00 00 00    	ja     c000c23e <VAS::allocatePages(int, int)+0x1b2>
c000c1a3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c1a7:	85 d2                	test   edx,edx
c000c1a9:	7e 3c                	jle    c000c1e7 <VAS::allocatePages(int, int)+0x15b>
c000c1ab:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c1af:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c1b3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c1b7:	c1 e5 0c             	shl    ebp,0xc
c000c1ba:	81 ce 00 04 00 00    	or     esi,0x400
c000c1c0:	01 dd                	add    ebp,ebx
c000c1c2:	e8 5b de ff ff       	call   c000a022 <Phys::allocatePage()>
c000c1c7:	56                   	push   esi
c000c1c8:	53                   	push   ebx
c000c1c9:	50                   	push   eax
c000c1ca:	57                   	push   edi
c000c1cb:	e8 b8 fd ff ff       	call   c000bf88 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c1d0:	83 c4 10             	add    esp,0x10
c000c1d3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c1d8:	74 03                	je     c000c1dd <VAS::allocatePages(int, int)+0x151>
c000c1da:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c1dd:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c1e3:	39 dd                	cmp    ebp,ebx
c000c1e5:	75 db                	jne    c000c1c2 <VAS::allocatePages(int, int)+0x136>
c000c1e7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c1ec:	0f 84 26 ff ff ff    	je     c000c118 <VAS::allocatePages(int, int)+0x8c>
c000c1f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c1f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c1fa:	89 d3                	mov    ebx,edx
c000c1fc:	c1 e0 0c             	shl    eax,0xc
c000c1ff:	c1 eb 0a             	shr    ebx,0xa
c000c202:	01 d0                	add    eax,edx
c000c204:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c20a:	c1 e8 0a             	shr    eax,0xa
c000c20d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c213:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c218:	2d 00 00 40 00       	sub    eax,0x400000
c000c21d:	39 c3                	cmp    ebx,eax
c000c21f:	0f 87 f9 fe ff ff    	ja     c000c11e <VAS::allocatePages(int, int)+0x92>
c000c225:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c228:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c22e:	39 d8                	cmp    eax,ebx
c000c230:	73 f3                	jae    c000c225 <VAS::allocatePages(int, int)+0x199>
c000c232:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c236:	83 c4 1c             	add    esp,0x1c
c000c239:	5b                   	pop    ebx
c000c23a:	5e                   	pop    esi
c000c23b:	5f                   	pop    edi
c000c23c:	5d                   	pop    ebp
c000c23d:	c3                   	ret    
c000c23e:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c000c243:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c249:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c000c250:	0f 84 4d ff ff ff    	je     c000c1a3 <VAS::allocatePages(int, int)+0x117>
c000c256:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c25e:	e9 40 ff ff ff       	jmp    c000c1a3 <VAS::allocatePages(int, int)+0x117>
c000c263:	90                   	nop

c000c264 <VAS::setCPUSpecific(unsigned long)>:
c000c264:	83 ec 0c             	sub    esp,0xc
c000c267:	6a 05                	push   0x5
c000c269:	68 00 00 40 c2       	push   0xc2400000
c000c26e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c276:	e8 0d fd ff ff       	call   c000bf88 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c27b:	83 c4 1c             	add    esp,0x1c
c000c27e:	c3                   	ret    
c000c27f:	90                   	nop

c000c280 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c280:	55                   	push   ebp
c000c281:	57                   	push   edi
c000c282:	56                   	push   esi
c000c283:	53                   	push   ebx
c000c284:	83 ec 1c             	sub    esp,0x1c
c000c287:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c000c28c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c290:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c296:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c29a:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000c2a0:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c2a4:	83 e0 01             	and    eax,0x1
c000c2a7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c2ab:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c2af:	85 c0                	test   eax,eax
c000c2b1:	7e 39                	jle    c000c2ec <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c2b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c2b7:	89 f3                	mov    ebx,esi
c000c2b9:	c1 e0 0c             	shl    eax,0xc
c000c2bc:	01 f0                	add    eax,esi
c000c2be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c2c2:	55                   	push   ebp
c000c2c3:	53                   	push   ebx
c000c2c4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c2c8:	29 f0                	sub    eax,esi
c000c2ca:	01 d8                	add    eax,ebx
c000c2cc:	50                   	push   eax
c000c2cd:	57                   	push   edi
c000c2ce:	e8 b5 fc ff ff       	call   c000bf88 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c2d3:	83 c4 10             	add    esp,0x10
c000c2d6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c2db:	74 03                	je     c000c2e0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c2dd:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c2e0:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c2e6:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c2ea:	75 d6                	jne    c000c2c2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c2ec:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c2f1:	75 10                	jne    c000c303 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c2f3:	0f 20 d8             	mov    eax,cr3
c000c2f6:	0f 22 d8             	mov    cr3,eax
c000c2f9:	83 c4 1c             	add    esp,0x1c
c000c2fc:	89 f0                	mov    eax,esi
c000c2fe:	5b                   	pop    ebx
c000c2ff:	5e                   	pop    esi
c000c300:	5f                   	pop    edi
c000c301:	5d                   	pop    ebp
c000c302:	c3                   	ret    
c000c303:	89 f3                	mov    ebx,esi
c000c305:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c309:	c1 eb 0a             	shr    ebx,0xa
c000c30c:	c1 e0 0c             	shl    eax,0xc
c000c30f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c315:	01 f0                	add    eax,esi
c000c317:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c31d:	c1 e8 0a             	shr    eax,0xa
c000c320:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c325:	2d 00 00 40 00       	sub    eax,0x400000
c000c32a:	39 c3                	cmp    ebx,eax
c000c32c:	77 cb                	ja     c000c2f9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c32e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c331:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c337:	39 d8                	cmp    eax,ebx
c000c339:	73 f3                	jae    c000c32e <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c33b:	83 c4 1c             	add    esp,0x1c
c000c33e:	89 f0                	mov    eax,esi
c000c340:	5b                   	pop    ebx
c000c341:	5e                   	pop    esi
c000c342:	5f                   	pop    edi
c000c343:	5d                   	pop    ebp
c000c344:	c3                   	ret    
c000c345:	90                   	nop

c000c346 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c346:	55                   	push   ebp
c000c347:	57                   	push   edi
c000c348:	56                   	push   esi
c000c349:	53                   	push   ebx
c000c34a:	83 ec 1c             	sub    esp,0x1c
c000c34d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c351:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c355:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c359:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c35d:	a9 ff 0f 00 00       	test   eax,0xfff
c000c362:	75 4a                	jne    c000c3ae <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c364:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c368:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c36b:	c1 eb 16             	shr    ebx,0x16
c000c36e:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c375:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c379:	74 4d                	je     c000c3c8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c37b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c37f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c383:	c1 e8 0a             	shr    eax,0xa
c000c386:	80 fa 01             	cmp    dl,0x1
c000c389:	19 d2                	sbb    edx,edx
c000c38b:	c1 e3 0c             	shl    ebx,0xc
c000c38e:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c392:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c398:	25 fc 0f 00 00       	and    eax,0xffc
c000c39d:	01 d8                	add    eax,ebx
c000c39f:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c3a6:	83 c4 1c             	add    esp,0x1c
c000c3a9:	5b                   	pop    ebx
c000c3aa:	5e                   	pop    esi
c000c3ab:	5f                   	pop    edi
c000c3ac:	5d                   	pop    ebp
c000c3ad:	c3                   	ret    
c000c3ae:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c3b2:	83 ec 0c             	sub    esp,0xc
c000c3b5:	68 04 33 02 c0       	push   0xc0023304
c000c3ba:	e8 48 6c 00 00       	call   c0013007 <Krnl::panic(char const*)>
c000c3bf:	83 c4 10             	add    esp,0x10
c000c3c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c3c6:	eb 9c                	jmp    c000c364 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c3c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c3cc:	e8 51 dc ff ff       	call   c000a022 <Phys::allocatePage()>
c000c3d1:	83 ec 0c             	sub    esp,0xc
c000c3d4:	89 c5                	mov    ebp,eax
c000c3d6:	8b 0d b4 67 02 c0    	mov    ecx,DWORD PTR ds:0xc00267b4
c000c3dc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c3e0:	6a 01                	push   0x1
c000c3e2:	e8 36 f5 ff ff       	call   c000b91d <Virt::allocateKernelVirtualPages(int)>
c000c3e7:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c3ee:	6a 01                	push   0x1
c000c3f0:	50                   	push   eax
c000c3f1:	55                   	push   ebp
c000c3f2:	81 cd 07 04 00 00    	or     ebp,0x407
c000c3f8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c3fc:	51                   	push   ecx
c000c3fd:	e8 7e fe ff ff       	call   c000c280 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c402:	83 c4 1c             	add    esp,0x1c
c000c405:	68 00 10 00 00       	push   0x1000
c000c40a:	6a 00                	push   0x0
c000c40c:	50                   	push   eax
c000c40d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c411:	e8 66 42 ff ff       	call   c000067c <memset>
c000c416:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c41a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c41d:	e8 ef f7 ff ff       	call   c000bc11 <Virt::freeKernelVirtualPages(unsigned long)>
c000c422:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c425:	83 c4 10             	add    esp,0x10
c000c428:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c42b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c42f:	e9 47 ff ff ff       	jmp    c000c37b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c434 <VAS::VAS(bool)>:
c000c434:	53                   	push   ebx
c000c435:	83 ec 28             	sub    esp,0x28
c000c438:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c43c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c440:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c444:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c44b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c44f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c456:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c45a:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c45e:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c461:	e8 bc db ff ff       	call   c000a022 <Phys::allocatePage()>
c000c466:	89 c2                	mov    edx,eax
c000c468:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c46c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c46f:	8b 1d b4 67 02 c0    	mov    ebx,DWORD PTR ds:0xc00267b4
c000c475:	83 ec 0c             	sub    esp,0xc
c000c478:	6a 01                	push   0x1
c000c47a:	e8 9e f4 ff ff       	call   c000b91d <Virt::allocateKernelVirtualPages(int)>
c000c47f:	83 c4 10             	add    esp,0x10
c000c482:	89 c2                	mov    edx,eax
c000c484:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c488:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c48b:	83 ec 0c             	sub    esp,0xc
c000c48e:	6a 03                	push   0x3
c000c490:	6a 01                	push   0x1
c000c492:	52                   	push   edx
c000c493:	50                   	push   eax
c000c494:	53                   	push   ebx
c000c495:	e8 e6 fd ff ff       	call   c000c280 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c49a:	83 c4 20             	add    esp,0x20
c000c49d:	89 c2                	mov    edx,eax
c000c49f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c4a3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c4a6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c4ae:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c4b6:	7f 1c                	jg     c000c4d4 <VAS::VAS(bool)+0xa0>
c000c4b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c4bc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c4bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c4c3:	c1 e2 02             	shl    edx,0x2
c000c4c6:	01 d0                	add    eax,edx
c000c4c8:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c4ce:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c4d2:	eb da                	jmp    c000c4ae <VAS::VAS(bool)+0x7a>
c000c4d4:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c4dc:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c4e4:	7f 7a                	jg     c000c560 <VAS::VAS(bool)+0x12c>
c000c4e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c4ea:	2d 00 02 00 00       	sub    eax,0x200
c000c4ef:	c1 e0 0c             	shl    eax,0xc
c000c4f2:	83 c8 03             	or     eax,0x3
c000c4f5:	89 c2                	mov    edx,eax
c000c4f7:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c000c4fc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c502:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000c508:	83 e0 10             	and    eax,0x10
c000c50b:	84 c0                	test   al,al
c000c50d:	74 07                	je     c000c516 <VAS::VAS(bool)+0xe2>
c000c50f:	b8 00 01 00 00       	mov    eax,0x100
c000c514:	eb 05                	jmp    c000c51b <VAS::VAS(bool)+0xe7>
c000c516:	b8 00 00 00 00       	mov    eax,0x0
c000c51b:	09 d0                	or     eax,edx
c000c51d:	89 c1                	mov    ecx,eax
c000c51f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c523:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c526:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c52a:	c1 e2 02             	shl    edx,0x2
c000c52d:	01 d0                	add    eax,edx
c000c52f:	89 ca                	mov    edx,ecx
c000c531:	89 10                	mov    DWORD PTR [eax],edx
c000c533:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c537:	2d 40 03 00 00       	sub    eax,0x340
c000c53c:	83 f8 7f             	cmp    eax,0x7f
c000c53f:	77 16                	ja     c000c557 <VAS::VAS(bool)+0x123>
c000c541:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c545:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c548:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c54c:	c1 e2 02             	shl    edx,0x2
c000c54f:	01 d0                	add    eax,edx
c000c551:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c557:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c55b:	e9 7c ff ff ff       	jmp    c000c4dc <VAS::VAS(bool)+0xa8>
c000c560:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c000c565:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c56b:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000c571:	83 e0 10             	and    eax,0x10
c000c574:	84 c0                	test   al,al
c000c576:	74 07                	je     c000c57f <VAS::VAS(bool)+0x14b>
c000c578:	b8 03 41 00 00       	mov    eax,0x4103
c000c57d:	eb 05                	jmp    c000c584 <VAS::VAS(bool)+0x150>
c000c57f:	b8 03 40 00 00       	mov    eax,0x4003
c000c584:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c588:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c58b:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c591:	89 02                	mov    DWORD PTR [edx],eax
c000c593:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c000c598:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c59e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c5a4:	83 ec 08             	sub    esp,0x8
c000c5a7:	50                   	push   eax
c000c5a8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c5ac:	e8 b3 fc ff ff       	call   c000c264 <VAS::setCPUSpecific(unsigned long)>
c000c5b1:	83 c4 10             	add    esp,0x10
c000c5b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c5b8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c5bb:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c000c5c0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c5c6:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000c5cc:	83 e0 10             	and    eax,0x10
c000c5cf:	84 c0                	test   al,al
c000c5d1:	74 07                	je     c000c5da <VAS::VAS(bool)+0x1a6>
c000c5d3:	b8 00 01 00 00       	mov    eax,0x100
c000c5d8:	eb 05                	jmp    c000c5df <VAS::VAS(bool)+0x1ab>
c000c5da:	b8 00 00 00 00       	mov    eax,0x0
c000c5df:	09 c2                	or     edx,eax
c000c5e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c5e5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c5e8:	05 fc 0f 00 00       	add    eax,0xffc
c000c5ed:	83 ca 03             	or     edx,0x3
c000c5f0:	89 10                	mov    DWORD PTR [eax],edx
c000c5f2:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c000c5f7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c5fd:	83 ec 0c             	sub    esp,0xc
c000c600:	50                   	push   eax
c000c601:	e8 f0 1d 00 00       	call   c000e3f6 <Device::getName()>
c000c606:	83 c4 10             	add    esp,0x10
c000c609:	83 ec 08             	sub    esp,0x8
c000c60c:	68 d8 33 02 c0       	push   0xc00233d8
c000c611:	50                   	push   eax
c000c612:	e8 ad 41 ff ff       	call   c00007c4 <strcmp>
c000c617:	83 c4 10             	add    esp,0x10
c000c61a:	85 c0                	test   eax,eax
c000c61c:	0f 94 c0             	sete   al
c000c61f:	84 c0                	test   al,al
c000c621:	0f 84 87 00 00 00    	je     c000c6ae <VAS::VAS(bool)+0x27a>
c000c627:	fa                   	cli    
c000c628:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c000c62d:	40                   	inc    eax
c000c62e:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c000c633:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c000c638:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c63e:	05 7c 09 00 00       	add    eax,0x97c
c000c643:	83 ec 0c             	sub    esp,0xc
c000c646:	50                   	push   eax
c000c647:	e8 0e ce ff ff       	call   c000945a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c64c:	83 c4 10             	add    esp,0x10
c000c64f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c654:	89 c3                	mov    ebx,eax
c000c656:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c000c65b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c661:	05 7c 09 00 00       	add    eax,0x97c
c000c666:	83 ec 0c             	sub    esp,0xc
c000c669:	50                   	push   eax
c000c66a:	e8 eb cd ff ff       	call   c000945a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c66f:	83 c4 10             	add    esp,0x10
c000c672:	83 ec 08             	sub    esp,0x8
c000c675:	50                   	push   eax
c000c676:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c67a:	e8 73 f5 ff ff       	call   c000bbf2 <VAS::getPageTableEntry(unsigned long)>
c000c67f:	83 c4 10             	add    esp,0x10
c000c682:	8b 00                	mov    eax,DWORD PTR [eax]
c000c684:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c689:	6a 11                	push   0x11
c000c68b:	53                   	push   ebx
c000c68c:	50                   	push   eax
c000c68d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c691:	e8 f2 f8 ff ff       	call   c000bf88 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c696:	83 c4 10             	add    esp,0x10
c000c699:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c000c69e:	48                   	dec    eax
c000c69f:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c000c6a4:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c000c6a9:	85 c0                	test   eax,eax
c000c6ab:	75 01                	jne    c000c6ae <VAS::VAS(bool)+0x27a>
c000c6ad:	fb                   	sti    
c000c6ae:	90                   	nop
c000c6af:	83 c4 28             	add    esp,0x28
c000c6b2:	5b                   	pop    ebx
c000c6b3:	c3                   	ret    

c000c6b4 <VAS::VAS()>:
c000c6b4:	53                   	push   ebx
c000c6b5:	83 ec 18             	sub    esp,0x18
c000c6b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c6bc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c6c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c6c7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c6ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c6d2:	a3 b4 67 02 c0       	mov    ds:0xc00267b4,eax
c000c6d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c6db:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000c6df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c6e3:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000c6e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c6ea:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000c6f1:	c7 44 24 0c 14 00 00 00 	mov    DWORD PTR [esp+0xc],0x14
c000c6f9:	83 ec 0c             	sub    esp,0xc
c000c6fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c700:	e8 66 d2 ff ff       	call   c000996b <malloc>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 c3                	mov    ebx,eax
c000c70a:	83 ec 08             	sub    esp,0x8
c000c70d:	6a 01                	push   0x1
c000c70f:	53                   	push   ebx
c000c710:	e8 1f fd ff ff       	call   c000c434 <VAS::VAS(bool)>
c000c715:	83 c4 10             	add    esp,0x10
c000c718:	89 1d ac 67 02 c0    	mov    DWORD PTR ds:0xc00267ac,ebx
c000c71e:	90                   	nop
c000c71f:	83 c4 18             	add    esp,0x18
c000c722:	5b                   	pop    ebx
c000c723:	c3                   	ret    

c000c724 <VAS::evict(unsigned long)>:
c000c724:	55                   	push   ebp
c000c725:	57                   	push   edi
c000c726:	56                   	push   esi
c000c727:	53                   	push   ebx
c000c728:	83 ec 1c             	sub    esp,0x1c
c000c72b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c72f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c733:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c737:	e8 22 f3 ff ff       	call   c000ba5e <Virt::allocateSwapfilePage()>
c000c73c:	89 c7                	mov    edi,eax
c000c73e:	a1 8c 5d 02 c0       	mov    eax,ds:0xc0025d8c
c000c743:	85 c0                	test   eax,eax
c000c745:	7e 3d                	jle    c000c784 <VAS::evict(unsigned long)+0x60>
c000c747:	89 ee                	mov    esi,ebp
c000c749:	31 db                	xor    ebx,ebx
c000c74b:	83 ec 0c             	sub    esp,0xc
c000c74e:	57                   	push   edi
c000c74f:	e8 f8 f2 ff ff       	call   c000ba4c <Virt::swapIDToSector(unsigned long)>
c000c754:	89 34 24             	mov    DWORD PTR [esp],esi
c000c757:	01 d8                	add    eax,ebx
c000c759:	6a 01                	push   0x1
c000c75b:	31 d2                	xor    edx,edx
c000c75d:	43                   	inc    ebx
c000c75e:	52                   	push   edx
c000c75f:	81 c6 00 02 00 00    	add    esi,0x200
c000c765:	50                   	push   eax
c000c766:	0f be 05 98 5d 02 c0 	movsx  eax,BYTE PTR ds:0xc0025d98
c000c76d:	ff 34 85 3c 8b 02 c0 	push   DWORD PTR [eax*4-0x3ffd74c4]
c000c774:	e8 15 2d 00 00       	call   c000f48e <LogicalDisk::write(unsigned long long, int, void*)>
c000c779:	83 c4 20             	add    esp,0x20
c000c77c:	39 1d 8c 5d 02 c0    	cmp    DWORD PTR ds:0xc0025d8c,ebx
c000c782:	7f c7                	jg     c000c74b <VAS::evict(unsigned long)+0x27>
c000c784:	83 ec 08             	sub    esp,0x8
c000c787:	c1 e7 0b             	shl    edi,0xb
c000c78a:	55                   	push   ebp
c000c78b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c78f:	e8 5e f4 ff ff       	call   c000bbf2 <VAS::getPageTableEntry(unsigned long)>
c000c794:	8b 10                	mov    edx,DWORD PTR [eax]
c000c796:	89 d3                	mov    ebx,edx
c000c798:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000c79e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c7a4:	09 d7                	or     edi,edx
c000c7a6:	89 38                	mov    DWORD PTR [eax],edi
c000c7a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c7ab:	ff 05 a8 67 02 c0    	inc    DWORD PTR ds:0xc00267a8
c000c7b1:	e8 e9 d7 ff ff       	call   c0009f9f <Phys::freePage(unsigned long)>
c000c7b6:	0f 20 d8             	mov    eax,cr3
c000c7b9:	0f 22 d8             	mov    cr3,eax
c000c7bc:	ff 35 a8 67 02 c0    	push   DWORD PTR ds:0xc00267a8
c000c7c2:	55                   	push   ebp
c000c7c3:	53                   	push   ebx
c000c7c4:	68 28 33 02 c0       	push   0xc0023328
c000c7c9:	e8 ab 04 00 00       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c000c7ce:	a1 a4 67 02 c0       	mov    eax,ds:0xc00267a4
c000c7d3:	c7 44 24 50 e6 33 02 c0 	mov    DWORD PTR [esp+0x50],0xc00233e6
c000c7db:	8d 50 01             	lea    edx,[eax+0x1]
c000c7de:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000c7e2:	89 15 a4 67 02 c0    	mov    DWORD PTR ds:0xc00267a4,edx
c000c7e8:	83 c4 3c             	add    esp,0x3c
c000c7eb:	5b                   	pop    ebx
c000c7ec:	5e                   	pop    esi
c000c7ed:	5f                   	pop    edi
c000c7ee:	5d                   	pop    ebp
c000c7ef:	e9 85 04 00 00       	jmp    c000cc79 <Dbg::kprintf(char const*, ...)>

c000c7f4 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000c7f4:	55                   	push   ebp
c000c7f5:	57                   	push   edi
c000c7f6:	56                   	push   esi
c000c7f7:	53                   	push   ebx
c000c7f8:	83 ec 14             	sub    esp,0x14
c000c7fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7ff:	68 f7 33 02 c0       	push   0xc00233f7
c000c804:	e8 70 04 00 00       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c000c809:	83 c4 10             	add    esp,0x10
c000c80c:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000c810:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c000c816:	74 20                	je     c000c838 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000c818:	83 ec 08             	sub    esp,0x8
c000c81b:	55                   	push   ebp
c000c81c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c820:	e8 cd f3 ff ff       	call   c000bbf2 <VAS::getPageTableEntry(unsigned long)>
c000c825:	83 c4 10             	add    esp,0x10
c000c828:	89 c3                	mov    ebx,eax
c000c82a:	85 c0                	test   eax,eax
c000c82c:	74 0a                	je     c000c838 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000c82e:	8b 38                	mov    edi,DWORD PTR [eax]
c000c830:	f7 c7 01 00 00 00    	test   edi,0x1
c000c836:	74 0a                	je     c000c842 <VAS::tryLoadBackOffDisk(unsigned long)+0x4e>
c000c838:	31 c0                	xor    eax,eax
c000c83a:	83 c4 0c             	add    esp,0xc
c000c83d:	5b                   	pop    ebx
c000c83e:	5e                   	pop    esi
c000c83f:	5f                   	pop    edi
c000c840:	5d                   	pop    ebp
c000c841:	c3                   	ret    
c000c842:	e8 db d7 ff ff       	call   c000a022 <Phys::allocatePage()>
c000c847:	c1 ef 0b             	shr    edi,0xb
c000c84a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c84c:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000c852:	09 c2                	or     edx,eax
c000c854:	81 ca 01 08 00 00    	or     edx,0x801
c000c85a:	89 13                	mov    DWORD PTR [ebx],edx
c000c85c:	8b 0d 8c 5d 02 c0    	mov    ecx,DWORD PTR ds:0xc0025d8c
c000c862:	85 c9                	test   ecx,ecx
c000c864:	7e 3d                	jle    c000c8a3 <VAS::tryLoadBackOffDisk(unsigned long)+0xaf>
c000c866:	89 ee                	mov    esi,ebp
c000c868:	31 db                	xor    ebx,ebx
c000c86a:	83 ec 0c             	sub    esp,0xc
c000c86d:	57                   	push   edi
c000c86e:	e8 d9 f1 ff ff       	call   c000ba4c <Virt::swapIDToSector(unsigned long)>
c000c873:	89 34 24             	mov    DWORD PTR [esp],esi
c000c876:	01 d8                	add    eax,ebx
c000c878:	6a 01                	push   0x1
c000c87a:	31 d2                	xor    edx,edx
c000c87c:	43                   	inc    ebx
c000c87d:	52                   	push   edx
c000c87e:	81 c6 00 02 00 00    	add    esi,0x200
c000c884:	50                   	push   eax
c000c885:	0f be 05 98 5d 02 c0 	movsx  eax,BYTE PTR ds:0xc0025d98
c000c88c:	ff 34 85 3c 8b 02 c0 	push   DWORD PTR [eax*4-0x3ffd74c4]
c000c893:	e8 8a 2b 00 00       	call   c000f422 <LogicalDisk::read(unsigned long long, int, void*)>
c000c898:	83 c4 20             	add    esp,0x20
c000c89b:	39 1d 8c 5d 02 c0    	cmp    DWORD PTR ds:0xc0025d8c,ebx
c000c8a1:	7f c7                	jg     c000c86a <VAS::tryLoadBackOffDisk(unsigned long)+0x76>
c000c8a3:	a1 a8 67 02 c0       	mov    eax,ds:0xc00267a8
c000c8a8:	48                   	dec    eax
c000c8a9:	52                   	push   edx
c000c8aa:	a3 a8 67 02 c0       	mov    ds:0xc00267a8,eax
c000c8af:	50                   	push   eax
c000c8b0:	55                   	push   ebp
c000c8b1:	68 0a 34 02 c0       	push   0xc002340a
c000c8b6:	e8 be 03 00 00       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c000c8bb:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c8be:	e8 6b f1 ff ff       	call   c000ba2e <Virt::freeSwapfilePage(unsigned long)>
c000c8c3:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c000c8c8:	83 c4 10             	add    esp,0x10
c000c8cb:	48                   	dec    eax
c000c8cc:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c000c8d1:	85 c0                	test   eax,eax
c000c8d3:	74 1d                	je     c000c8f2 <VAS::tryLoadBackOffDisk(unsigned long)+0xfe>
c000c8d5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c8d9:	25 ff 0f 00 00       	and    eax,0xfff
c000c8de:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000c8e3:	77 10                	ja     c000c8f5 <VAS::tryLoadBackOffDisk(unsigned long)+0x101>
c000c8e5:	0f 20 d8             	mov    eax,cr3
c000c8e8:	0f 22 d8             	mov    cr3,eax
c000c8eb:	b0 01                	mov    al,0x1
c000c8ed:	e9 48 ff ff ff       	jmp    c000c83a <VAS::tryLoadBackOffDisk(unsigned long)+0x46>
c000c8f2:	fb                   	sti    
c000c8f3:	eb e0                	jmp    c000c8d5 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000c8f5:	83 ec 0c             	sub    esp,0xc
c000c8f8:	68 1f 34 02 c0       	push   0xc002341f
c000c8fd:	e8 77 03 00 00       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c000c902:	83 c4 10             	add    esp,0x10
c000c905:	eb de                	jmp    c000c8e5 <VAS::tryLoadBackOffDisk(unsigned long)+0xf1>
c000c907:	90                   	nop

c000c908 <VAS::scanForEviction()>:
c000c908:	57                   	push   edi
c000c909:	31 ff                	xor    edi,edi
c000c90b:	56                   	push   esi
c000c90c:	53                   	push   ebx
c000c90d:	83 ec 10             	sub    esp,0x10
c000c910:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c914:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c917:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c91d:	75 0e                	jne    c000c92d <VAS::scanForEviction()+0x25>
c000c91f:	89 da                	mov    edx,ebx
c000c921:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c924:	c1 ea 16             	shr    edx,0x16
c000c927:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c92b:	74 4e                	je     c000c97b <VAS::scanForEviction()+0x73>
c000c92d:	53                   	push   ebx
c000c92e:	56                   	push   esi
c000c92f:	e8 be f2 ff ff       	call   c000bbf2 <VAS::getPageTableEntry(unsigned long)>
c000c934:	5a                   	pop    edx
c000c935:	8b 10                	mov    edx,DWORD PTR [eax]
c000c937:	59                   	pop    ecx
c000c938:	89 d1                	mov    ecx,edx
c000c93a:	81 e1 01 08 00 00    	and    ecx,0x801
c000c940:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000c946:	74 3e                	je     c000c986 <VAS::scanForEviction()+0x7e>
c000c948:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c94e:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000c954:	76 2b                	jbe    c000c981 <VAS::scanForEviction()+0x79>
c000c956:	47                   	inc    edi
c000c957:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000c95e:	83 ff 03             	cmp    edi,0x3
c000c961:	74 32                	je     c000c995 <VAS::scanForEviction()+0x8d>
c000c963:	31 db                	xor    ebx,ebx
c000c965:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c96b:	75 c0                	jne    c000c92d <VAS::scanForEviction()+0x25>
c000c96d:	89 da                	mov    edx,ebx
c000c96f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c972:	c1 ea 16             	shr    edx,0x16
c000c975:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c979:	75 b2                	jne    c000c92d <VAS::scanForEviction()+0x25>
c000c97b:	81 c3 00 00 40 00    	add    ebx,0x400000
c000c981:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000c984:	eb 91                	jmp    c000c917 <VAS::scanForEviction()+0xf>
c000c986:	f6 c2 20             	test   dl,0x20
c000c989:	74 13                	je     c000c99e <VAS::scanForEviction()+0x96>
c000c98b:	83 e2 df             	and    edx,0xffffffdf
c000c98e:	89 10                	mov    DWORD PTR [eax],edx
c000c990:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c993:	eb b3                	jmp    c000c948 <VAS::scanForEviction()+0x40>
c000c995:	83 c4 10             	add    esp,0x10
c000c998:	31 c0                	xor    eax,eax
c000c99a:	5b                   	pop    ebx
c000c99b:	5e                   	pop    esi
c000c99c:	5f                   	pop    edi
c000c99d:	c3                   	ret    
c000c99e:	83 ec 08             	sub    esp,0x8
c000c9a1:	89 d0                	mov    eax,edx
c000c9a3:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c9a8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c9ac:	53                   	push   ebx
c000c9ad:	68 2f 34 02 c0       	push   0xc002342f
c000c9b2:	e8 c2 02 00 00       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c000c9b7:	58                   	pop    eax
c000c9b8:	5a                   	pop    edx
c000c9b9:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c9bc:	56                   	push   esi
c000c9bd:	e8 62 fd ff ff       	call   c000c724 <VAS::evict(unsigned long)>
c000c9c2:	59                   	pop    ecx
c000c9c3:	5b                   	pop    ebx
c000c9c4:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c9c7:	68 43 34 02 c0       	push   0xc0023443
c000c9cc:	e8 a8 02 00 00       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c000c9d1:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000c9d8:	83 c4 10             	add    esp,0x10
c000c9db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c9df:	83 c4 10             	add    esp,0x10
c000c9e2:	5b                   	pop    ebx
c000c9e3:	5e                   	pop    esi
c000c9e4:	5f                   	pop    edi
c000c9e5:	c3                   	ret    

c000c9e6 <mapVASFirstTime>:
c000c9e6:	55                   	push   ebp
c000c9e7:	57                   	push   edi
c000c9e8:	56                   	push   esi
c000c9e9:	53                   	push   ebx
c000c9ea:	83 ec 0c             	sub    esp,0xc
c000c9ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000c9f2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000c9f5:	4a                   	dec    edx
c000c9f6:	0f 84 fe 00 00 00    	je     c000cafa <mapVASFirstTime+0x114>
c000c9fc:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000c9ff:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000ca02:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000ca07:	c1 e5 15             	shl    ebp,0x15
c000ca0a:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000ca0f:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000ca15:	29 eb                	sub    ebx,ebp
c000ca17:	29 ef                	sub    edi,ebp
c000ca19:	83 ec 08             	sub    esp,0x8
c000ca1c:	53                   	push   ebx
c000ca1d:	68 6f 34 02 c0       	push   0xc002346f
c000ca22:	e8 52 02 00 00       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c000ca27:	e8 f6 d5 ff ff       	call   c000a022 <Phys::allocatePage()>
c000ca2c:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000ca33:	6a 01                	push   0x1
c000ca35:	53                   	push   ebx
c000ca36:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ca3c:	50                   	push   eax
c000ca3d:	56                   	push   esi
c000ca3e:	e8 3d f8 ff ff       	call   c000c280 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ca43:	83 c4 20             	add    esp,0x20
c000ca46:	39 fb                	cmp    ebx,edi
c000ca48:	75 cf                	jne    c000ca19 <mapVASFirstTime+0x33>
c000ca4a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000ca4f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000ca54:	29 eb                	sub    ebx,ebp
c000ca56:	29 ef                	sub    edi,ebp
c000ca58:	83 ec 08             	sub    esp,0x8
c000ca5b:	53                   	push   ebx
c000ca5c:	68 8b 34 02 c0       	push   0xc002348b
c000ca61:	e8 13 02 00 00       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c000ca66:	58                   	pop    eax
c000ca67:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000ca6b:	5a                   	pop    edx
c000ca6c:	19 c0                	sbb    eax,eax
c000ca6e:	83 e0 04             	and    eax,0x4
c000ca71:	05 03 04 00 00       	add    eax,0x403
c000ca76:	50                   	push   eax
c000ca77:	68 9f 34 02 c0       	push   0xc002349f
c000ca7c:	e8 f8 01 00 00       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c000ca81:	e8 9c d5 ff ff       	call   c000a022 <Phys::allocatePage()>
c000ca86:	59                   	pop    ecx
c000ca87:	89 c5                	mov    ebp,eax
c000ca89:	58                   	pop    eax
c000ca8a:	55                   	push   ebp
c000ca8b:	68 ad 34 02 c0       	push   0xc00234ad
c000ca90:	e8 e4 01 00 00       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c000ca95:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000ca99:	19 d2                	sbb    edx,edx
c000ca9b:	83 e2 04             	and    edx,0x4
c000ca9e:	81 c2 03 04 00 00    	add    edx,0x403
c000caa4:	89 14 24             	mov    DWORD PTR [esp],edx
c000caa7:	6a 01                	push   0x1
c000caa9:	53                   	push   ebx
c000caaa:	55                   	push   ebp
c000caab:	56                   	push   esi
c000caac:	e8 cf f7 ff ff       	call   c000c280 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cab1:	83 c4 18             	add    esp,0x18
c000cab4:	53                   	push   ebx
c000cab5:	56                   	push   esi
c000cab6:	e8 37 f1 ff ff       	call   c000bbf2 <VAS::getPageTableEntry(unsigned long)>
c000cabb:	5a                   	pop    edx
c000cabc:	59                   	pop    ecx
c000cabd:	ff 30                	push   DWORD PTR [eax]
c000cabf:	68 c9 34 02 c0       	push   0xc00234c9
c000cac4:	e8 b0 01 00 00       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c000cac9:	0f 20 d8             	mov    eax,cr3
c000cacc:	83 c4 0c             	add    esp,0xc
c000cacf:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000cad5:	56                   	push   esi
c000cad6:	50                   	push   eax
c000cad7:	68 d4 34 02 c0       	push   0xc00234d4
c000cadc:	e8 98 01 00 00       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c000cae1:	83 c4 10             	add    esp,0x10
c000cae4:	39 df                	cmp    edi,ebx
c000cae6:	0f 85 6c ff ff ff    	jne    c000ca58 <mapVASFirstTime+0x72>
c000caec:	0f 20 d8             	mov    eax,cr3
c000caef:	0f 22 d8             	mov    cr3,eax
c000caf2:	83 c4 0c             	add    esp,0xc
c000caf5:	5b                   	pop    ebx
c000caf6:	5e                   	pop    esi
c000caf7:	5f                   	pop    edi
c000caf8:	5d                   	pop    ebp
c000caf9:	c3                   	ret    
c000cafa:	83 ec 0c             	sub    esp,0xc
c000cafd:	68 56 34 02 c0       	push   0xc0023456
c000cb02:	e8 72 01 00 00       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c000cb07:	83 c4 10             	add    esp,0x10
c000cb0a:	83 c4 0c             	add    esp,0xc
c000cb0d:	5b                   	pop    ebx
c000cb0e:	5e                   	pop    esi
c000cb0f:	5f                   	pop    edi
c000cb10:	5d                   	pop    ebp
c000cb11:	c3                   	ret    

c000cb12 <__cxa_atexit>:
c000cb12:	31 c0                	xor    eax,eax
c000cb14:	c3                   	ret    

c000cb15 <__cxa_finalize>:
c000cb15:	c3                   	ret    

c000cb16 <__stack_chk_fail>:
c000cb16:	55                   	push   ebp
c000cb17:	89 e5                	mov    ebp,esp
c000cb19:	83 ec 14             	sub    esp,0x14
c000cb1c:	68 ec 34 02 c0       	push   0xc00234ec
c000cb21:	e8 53 01 00 00       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c000cb26:	58                   	pop    eax
c000cb27:	5a                   	pop    edx
c000cb28:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb2b:	68 3c 35 02 c0       	push   0xc002353c
c000cb30:	e8 44 01 00 00       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c000cb35:	59                   	pop    ecx
c000cb36:	58                   	pop    eax
c000cb37:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cb3a:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cb3d:	68 3c 35 02 c0       	push   0xc002353c
c000cb42:	e8 32 01 00 00       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c000cb47:	5a                   	pop    edx
c000cb48:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cb4b:	59                   	pop    ecx
c000cb4c:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb4e:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cb51:	68 3c 35 02 c0       	push   0xc002353c
c000cb56:	e8 1e 01 00 00       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c000cb5b:	5a                   	pop    edx
c000cb5c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cb5f:	59                   	pop    ecx
c000cb60:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb62:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb64:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cb67:	68 3c 35 02 c0       	push   0xc002353c
c000cb6c:	e8 08 01 00 00       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c000cb71:	c7 04 24 44 35 02 c0 	mov    DWORD PTR [esp],0xc0023544
c000cb78:	e8 8a 64 00 00       	call   c0013007 <Krnl::panic(char const*)>
c000cb7d:	83 c4 10             	add    esp,0x10
c000cb80:	c9                   	leave  
c000cb81:	c3                   	ret    

c000cb82 <__cxa_pure_virtual>:
c000cb82:	83 ec 18             	sub    esp,0x18
c000cb85:	68 5c 35 02 c0       	push   0xc002355c
c000cb8a:	e8 78 64 00 00       	call   c0013007 <Krnl::panic(char const*)>
c000cb8f:	83 c4 1c             	add    esp,0x1c
c000cb92:	c3                   	ret    

c000cb93 <operator new[](unsigned long)>:
c000cb93:	e9 d3 cd ff ff       	jmp    c000996b <malloc>

c000cb98 <operator delete(void*, unsigned long)>:
c000cb98:	e9 ee cd ff ff       	jmp    c000998b <rfree>

c000cb9d <operator delete[](void*)>:
c000cb9d:	e9 e9 cd ff ff       	jmp    c000998b <rfree>

c000cba2 <operator delete[](void*, unsigned long)>:
c000cba2:	e9 e4 cd ff ff       	jmp    c000998b <rfree>

c000cba7 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000cba7:	55                   	push   ebp
c000cba8:	b9 11 00 00 00       	mov    ecx,0x11
c000cbad:	57                   	push   edi
c000cbae:	56                   	push   esi
c000cbaf:	be 42 30 02 c0       	mov    esi,0xc0023042
c000cbb4:	53                   	push   ebx
c000cbb5:	83 ec 20             	sub    esp,0x20
c000cbb8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cbbc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000cbc0:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000cbc4:	fc                   	cld    
c000cbc5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cbc7:	89 ee                	mov    esi,ebp
c000cbc9:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cbcd:	eb 02                	jmp    c000cbd1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000cbcf:	89 c6                	mov    esi,eax
c000cbd1:	31 d2                	xor    edx,edx
c000cbd3:	41                   	inc    ecx
c000cbd4:	89 f0                	mov    eax,esi
c000cbd6:	f7 f3                	div    ebx
c000cbd8:	39 de                	cmp    esi,ebx
c000cbda:	73 f3                	jae    c000cbcf <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000cbdc:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000cbdf:	eb 02                	jmp    c000cbe3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000cbe1:	89 c5                	mov    ebp,eax
c000cbe3:	31 d2                	xor    edx,edx
c000cbe5:	49                   	dec    ecx
c000cbe6:	89 e8                	mov    eax,ebp
c000cbe8:	f7 f3                	div    ebx
c000cbea:	39 dd                	cmp    ebp,ebx
c000cbec:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000cbf0:	88 11                	mov    BYTE PTR [ecx],dl
c000cbf2:	73 ed                	jae    c000cbe1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000cbf4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cbf8:	83 c4 20             	add    esp,0x20
c000cbfb:	5b                   	pop    ebx
c000cbfc:	5e                   	pop    esi
c000cbfd:	5f                   	pop    edi
c000cbfe:	5d                   	pop    ebp
c000cbff:	c3                   	ret    

c000cc00 <Dbg::logc(char)>:
c000cc00:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cc04:	f6 05 a0 66 02 c0 10 	test   BYTE PTR ds:0xc00266a0,0x10
c000cc0b:	75 12                	jne    c000cc1f <Dbg::logc(char)+0x1f>
c000cc0d:	ba fd 03 00 00       	mov    edx,0x3fd
c000cc12:	ec                   	in     al,dx
c000cc13:	a8 20                	test   al,0x20
c000cc15:	74 fb                	je     c000cc12 <Dbg::logc(char)+0x12>
c000cc17:	ba f8 03 00 00       	mov    edx,0x3f8
c000cc1c:	88 c8                	mov    al,cl
c000cc1e:	ee                   	out    dx,al
c000cc1f:	c3                   	ret    

c000cc20 <Dbg::logs(char*)>:
c000cc20:	53                   	push   ebx
c000cc21:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000cc25:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000cc28:	84 c0                	test   al,al
c000cc2a:	74 0f                	je     c000cc3b <Dbg::logs(char*)+0x1b>
c000cc2c:	50                   	push   eax
c000cc2d:	43                   	inc    ebx
c000cc2e:	e8 cd ff ff ff       	call   c000cc00 <Dbg::logc(char)>
c000cc33:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000cc36:	5a                   	pop    edx
c000cc37:	84 c0                	test   al,al
c000cc39:	75 f1                	jne    c000cc2c <Dbg::logs(char*)+0xc>
c000cc3b:	5b                   	pop    ebx
c000cc3c:	c3                   	ret    

c000cc3d <Dbg::logWriteInt(unsigned int)>:
c000cc3d:	83 ec 10             	sub    esp,0x10
c000cc40:	6a 0a                	push   0xa
c000cc42:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc4b:	e8 57 ff ff ff       	call   c000cba7 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000cc50:	50                   	push   eax
c000cc51:	e8 ca ff ff ff       	call   c000cc20 <Dbg::logs(char*)>
c000cc56:	83 c4 20             	add    esp,0x20
c000cc59:	c3                   	ret    

c000cc5a <Dbg::logWriteIntBase(unsigned int, int)>:
c000cc5a:	83 ec 10             	sub    esp,0x10
c000cc5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cc61:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cc65:	50                   	push   eax
c000cc66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc6a:	e8 38 ff ff ff       	call   c000cba7 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000cc6f:	50                   	push   eax
c000cc70:	e8 ab ff ff ff       	call   c000cc20 <Dbg::logs(char*)>
c000cc75:	83 c4 20             	add    esp,0x20
c000cc78:	c3                   	ret    

c000cc79 <Dbg::kprintf(char const*, ...)>:
c000cc79:	55                   	push   ebp
c000cc7a:	57                   	push   edi
c000cc7b:	56                   	push   esi
c000cc7c:	53                   	push   ebx
c000cc7d:	83 ec 0c             	sub    esp,0xc
c000cc80:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cc84:	f6 05 a0 66 02 c0 10 	test   BYTE PTR ds:0xc00266a0,0x10
c000cc8b:	74 08                	je     c000cc95 <Dbg::kprintf(char const*, ...)+0x1c>
c000cc8d:	83 c4 0c             	add    esp,0xc
c000cc90:	5b                   	pop    ebx
c000cc91:	5e                   	pop    esi
c000cc92:	5f                   	pop    edi
c000cc93:	5d                   	pop    ebp
c000cc94:	c3                   	ret    
c000cc95:	8d 44 24 24          	lea    eax,[esp+0x24]
c000cc99:	31 db                	xor    ebx,ebx
c000cc9b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cc9f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000cca2:	84 c0                	test   al,al
c000cca4:	74 e7                	je     c000cc8d <Dbg::kprintf(char const*, ...)+0x14>
c000cca6:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cca9:	3c 25                	cmp    al,0x25
c000ccab:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000ccae:	75 44                	jne    c000ccf4 <Dbg::kprintf(char const*, ...)+0x7b>
c000ccb0:	83 c3 02             	add    ebx,0x2
c000ccb3:	8a 07                	mov    al,BYTE PTR [edi]
c000ccb5:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000ccb8:	83 e8 25             	sub    eax,0x25
c000ccbb:	3c 53                	cmp    al,0x53
c000ccbd:	0f 87 c9 00 00 00    	ja     c000cd8c <Dbg::kprintf(char const*, ...)+0x113>
c000ccc3:	0f b6 c0             	movzx  eax,al
c000ccc6:	ff 24 85 70 35 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdca90]
c000cccd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ccd1:	89 c8                	mov    eax,ecx
c000ccd3:	83 c1 04             	add    ecx,0x4
c000ccd6:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ccda:	ff 30                	push   DWORD PTR [eax]
c000ccdc:	e8 5c ff ff ff       	call   c000cc3d <Dbg::logWriteInt(unsigned int)>
c000cce1:	5f                   	pop    edi
c000cce2:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000cce6:	84 c0                	test   al,al
c000cce8:	74 a3                	je     c000cc8d <Dbg::kprintf(char const*, ...)+0x14>
c000ccea:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cced:	3c 25                	cmp    al,0x25
c000ccef:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000ccf2:	74 bc                	je     c000ccb0 <Dbg::kprintf(char const*, ...)+0x37>
c000ccf4:	50                   	push   eax
c000ccf5:	89 eb                	mov    ebx,ebp
c000ccf7:	e8 04 ff ff ff       	call   c000cc00 <Dbg::logc(char)>
c000ccfc:	89 fd                	mov    ebp,edi
c000ccfe:	58                   	pop    eax
c000ccff:	eb e1                	jmp    c000cce2 <Dbg::kprintf(char const*, ...)+0x69>
c000cd01:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cd05:	89 c8                	mov    eax,ecx
c000cd07:	83 c1 04             	add    ecx,0x4
c000cd0a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cd0e:	ff 30                	push   DWORD PTR [eax]
c000cd10:	e8 0b ff ff ff       	call   c000cc20 <Dbg::logs(char*)>
c000cd15:	58                   	pop    eax
c000cd16:	eb ca                	jmp    c000cce2 <Dbg::kprintf(char const*, ...)+0x69>
c000cd18:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cd1c:	89 d0                	mov    eax,edx
c000cd1e:	83 c2 04             	add    edx,0x4
c000cd21:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cd25:	ff 30                	push   DWORD PTR [eax]
c000cd27:	e8 11 ff ff ff       	call   c000cc3d <Dbg::logWriteInt(unsigned int)>
c000cd2c:	58                   	pop    eax
c000cd2d:	eb b3                	jmp    c000cce2 <Dbg::kprintf(char const*, ...)+0x69>
c000cd2f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cd33:	89 d0                	mov    eax,edx
c000cd35:	83 c2 04             	add    edx,0x4
c000cd38:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000cd3b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cd3f:	50                   	push   eax
c000cd40:	e8 bb fe ff ff       	call   c000cc00 <Dbg::logc(char)>
c000cd45:	58                   	pop    eax
c000cd46:	eb 9a                	jmp    c000cce2 <Dbg::kprintf(char const*, ...)+0x69>
c000cd48:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cd4c:	89 c8                	mov    eax,ecx
c000cd4e:	83 c1 04             	add    ecx,0x4
c000cd51:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cd55:	6a 10                	push   0x10
c000cd57:	ff 30                	push   DWORD PTR [eax]
c000cd59:	e8 fc fe ff ff       	call   c000cc5a <Dbg::logWriteIntBase(unsigned int, int)>
c000cd5e:	59                   	pop    ecx
c000cd5f:	5f                   	pop    edi
c000cd60:	eb 80                	jmp    c000cce2 <Dbg::kprintf(char const*, ...)+0x69>
c000cd62:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cd66:	89 d0                	mov    eax,edx
c000cd68:	83 c2 08             	add    edx,0x8
c000cd6b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cd6f:	6a 10                	push   0x10
c000cd71:	ff 30                	push   DWORD PTR [eax]
c000cd73:	e8 e2 fe ff ff       	call   c000cc5a <Dbg::logWriteIntBase(unsigned int, int)>
c000cd78:	58                   	pop    eax
c000cd79:	5a                   	pop    edx
c000cd7a:	e9 63 ff ff ff       	jmp    c000cce2 <Dbg::kprintf(char const*, ...)+0x69>
c000cd7f:	6a 25                	push   0x25
c000cd81:	e8 7a fe ff ff       	call   c000cc00 <Dbg::logc(char)>
c000cd86:	58                   	pop    eax
c000cd87:	e9 56 ff ff ff       	jmp    c000cce2 <Dbg::kprintf(char const*, ...)+0x69>
c000cd8c:	6a 25                	push   0x25
c000cd8e:	e8 6d fe ff ff       	call   c000cc00 <Dbg::logc(char)>
c000cd93:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000cd96:	50                   	push   eax
c000cd97:	e8 64 fe ff ff       	call   c000cc00 <Dbg::logc(char)>
c000cd9c:	5a                   	pop    edx
c000cd9d:	59                   	pop    ecx
c000cd9e:	e9 3f ff ff ff       	jmp    c000cce2 <Dbg::kprintf(char const*, ...)+0x69>
c000cda3:	90                   	nop

c000cda4 <File::read(unsigned long long, void*, int*)>:
c000cda4:	53                   	push   ebx
c000cda5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cda9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cdad:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cdb4:	3c 19                	cmp    al,0x19
c000cdb6:	77 35                	ja     c000cded <File::read(unsigned long long, void*, int*)+0x49>
c000cdb8:	8b 04 85 40 8c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd73c0]
c000cdbf:	85 c0                	test   eax,eax
c000cdc1:	74 2a                	je     c000cded <File::read(unsigned long long, void*, int*)+0x49>
c000cdc3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cdc9:	85 c0                	test   eax,eax
c000cdcb:	74 20                	je     c000cded <File::read(unsigned long long, void*, int*)+0x49>
c000cdcd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cdd1:	74 21                	je     c000cdf4 <File::read(unsigned long long, void*, int*)+0x50>
c000cdd3:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cdd5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cdd9:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cddf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cde3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cde7:	5b                   	pop    ebx
c000cde8:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000cdeb:	ff e0                	jmp    eax
c000cded:	b8 0b 00 00 00       	mov    eax,0xb
c000cdf2:	eb 05                	jmp    c000cdf9 <File::read(unsigned long long, void*, int*)+0x55>
c000cdf4:	b8 05 00 00 00       	mov    eax,0x5
c000cdf9:	5b                   	pop    ebx
c000cdfa:	c3                   	ret    
c000cdfb:	90                   	nop

c000cdfc <File::write(unsigned long long, void*, int*)>:
c000cdfc:	53                   	push   ebx
c000cdfd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce01:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ce05:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ce0c:	3c 19                	cmp    al,0x19
c000ce0e:	77 35                	ja     c000ce45 <File::write(unsigned long long, void*, int*)+0x49>
c000ce10:	8b 04 85 40 8c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd73c0]
c000ce17:	85 c0                	test   eax,eax
c000ce19:	74 2a                	je     c000ce45 <File::write(unsigned long long, void*, int*)+0x49>
c000ce1b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ce21:	85 c0                	test   eax,eax
c000ce23:	74 20                	je     c000ce45 <File::write(unsigned long long, void*, int*)+0x49>
c000ce25:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ce29:	74 21                	je     c000ce4c <File::write(unsigned long long, void*, int*)+0x50>
c000ce2b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ce2d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce31:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ce37:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce3b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce3f:	5b                   	pop    ebx
c000ce40:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000ce43:	ff e0                	jmp    eax
c000ce45:	b8 0b 00 00 00       	mov    eax,0xb
c000ce4a:	eb 05                	jmp    c000ce51 <File::write(unsigned long long, void*, int*)+0x55>
c000ce4c:	b8 05 00 00 00       	mov    eax,0x5
c000ce51:	5b                   	pop    ebx
c000ce52:	c3                   	ret    
c000ce53:	90                   	nop

c000ce54 <Directory::read(unsigned long long, void*, int*)>:
c000ce54:	53                   	push   ebx
c000ce55:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce59:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ce5d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ce64:	3c 19                	cmp    al,0x19
c000ce66:	77 35                	ja     c000ce9d <Directory::read(unsigned long long, void*, int*)+0x49>
c000ce68:	8b 04 85 40 8c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd73c0]
c000ce6f:	85 c0                	test   eax,eax
c000ce71:	74 2a                	je     c000ce9d <Directory::read(unsigned long long, void*, int*)+0x49>
c000ce73:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ce79:	85 c0                	test   eax,eax
c000ce7b:	74 20                	je     c000ce9d <Directory::read(unsigned long long, void*, int*)+0x49>
c000ce7d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ce81:	74 21                	je     c000cea4 <Directory::read(unsigned long long, void*, int*)+0x50>
c000ce83:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ce85:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce89:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ce8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce97:	5b                   	pop    ebx
c000ce98:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000ce9b:	ff e0                	jmp    eax
c000ce9d:	b8 0b 00 00 00       	mov    eax,0xb
c000cea2:	eb 05                	jmp    c000cea9 <Directory::read(unsigned long long, void*, int*)+0x55>
c000cea4:	b8 05 00 00 00       	mov    eax,0x5
c000cea9:	5b                   	pop    ebx
c000ceaa:	c3                   	ret    
c000ceab:	90                   	nop

c000ceac <Directory::write(unsigned long long, void*, int*)>:
c000ceac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ceb0:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000ceb7:	b8 0b 00 00 00       	mov    eax,0xb
c000cebc:	80 fa 19             	cmp    dl,0x19
c000cebf:	77 18                	ja     c000ced9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000cec1:	8b 14 95 40 8c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd73c0]
c000cec8:	85 d2                	test   edx,edx
c000ceca:	74 0d                	je     c000ced9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000cecc:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000ced3:	19 c0                	sbb    eax,eax
c000ced5:	83 e0 0a             	and    eax,0xa
c000ced8:	40                   	inc    eax
c000ced9:	c3                   	ret    

c000ceda <File::isAtty()>:
c000ceda:	31 c0                	xor    eax,eax
c000cedc:	c3                   	ret    
c000cedd:	90                   	nop

c000cede <Directory::isAtty()>:
c000cede:	31 c0                	xor    eax,eax
c000cee0:	c3                   	ret    
c000cee1:	90                   	nop

c000cee2 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000cee2:	b8 0a 00 00 00       	mov    eax,0xa
c000cee7:	c3                   	ret    

c000cee8 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000cee8:	b8 0a 00 00 00       	mov    eax,0xa
c000ceed:	c3                   	ret    

c000ceee <Filesystem::allocateSwapfile(char const*, int)>:
c000ceee:	31 c0                	xor    eax,eax
c000cef0:	31 d2                	xor    edx,edx
c000cef2:	c3                   	ret    
c000cef3:	90                   	nop

c000cef4 <File::~File()>:
c000cef4:	83 ec 0c             	sub    esp,0xc
c000cef7:	ba ac 37 02 c0       	mov    edx,0xc00237ac
c000cefc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf00:	89 10                	mov    DWORD PTR [eax],edx
c000cf02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf06:	83 ec 0c             	sub    esp,0xc
c000cf09:	50                   	push   eax
c000cf0a:	e8 ad e7 ff ff       	call   c000b6bc <UnixFile::~UnixFile()>
c000cf0f:	83 c4 10             	add    esp,0x10
c000cf12:	90                   	nop
c000cf13:	83 c4 0c             	add    esp,0xc
c000cf16:	c3                   	ret    
c000cf17:	90                   	nop

c000cf18 <File::~File()>:
c000cf18:	83 ec 0c             	sub    esp,0xc
c000cf1b:	83 ec 0c             	sub    esp,0xc
c000cf1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf22:	e8 cd ff ff ff       	call   c000cef4 <File::~File()>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	83 ec 08             	sub    esp,0x8
c000cf2d:	68 14 01 00 00       	push   0x114
c000cf32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf36:	e8 5d fc ff ff       	call   c000cb98 <operator delete(void*, unsigned long)>
c000cf3b:	83 c4 10             	add    esp,0x10
c000cf3e:	83 c4 0c             	add    esp,0xc
c000cf41:	c3                   	ret    

c000cf42 <Directory::~Directory()>:
c000cf42:	83 ec 0c             	sub    esp,0xc
c000cf45:	ba c8 37 02 c0       	mov    edx,0xc00237c8
c000cf4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf4e:	89 10                	mov    DWORD PTR [eax],edx
c000cf50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf54:	83 ec 0c             	sub    esp,0xc
c000cf57:	50                   	push   eax
c000cf58:	e8 5f e7 ff ff       	call   c000b6bc <UnixFile::~UnixFile()>
c000cf5d:	83 c4 10             	add    esp,0x10
c000cf60:	90                   	nop
c000cf61:	83 c4 0c             	add    esp,0xc
c000cf64:	c3                   	ret    
c000cf65:	90                   	nop

c000cf66 <Directory::~Directory()>:
c000cf66:	83 ec 0c             	sub    esp,0xc
c000cf69:	83 ec 0c             	sub    esp,0xc
c000cf6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf70:	e8 cd ff ff ff       	call   c000cf42 <Directory::~Directory()>
c000cf75:	83 c4 10             	add    esp,0x10
c000cf78:	83 ec 08             	sub    esp,0x8
c000cf7b:	68 14 01 00 00       	push   0x114
c000cf80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf84:	e8 0f fc ff ff       	call   c000cb98 <operator delete(void*, unsigned long)>
c000cf89:	83 c4 10             	add    esp,0x10
c000cf8c:	83 c4 0c             	add    esp,0xc
c000cf8f:	c3                   	ret    

c000cf90 <Filesystem::Filesystem()>:
c000cf90:	ba 44 37 02 c0       	mov    edx,0xc0023744
c000cf95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cf99:	89 10                	mov    DWORD PTR [eax],edx
c000cf9b:	8b 15 b8 67 02 c0    	mov    edx,DWORD PTR ds:0xc00267b8
c000cfa1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cfa5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000cfa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cfac:	a3 b8 67 02 c0       	mov    ds:0xc00267b8,eax
c000cfb1:	90                   	nop
c000cfb2:	c3                   	ret    
c000cfb3:	90                   	nop

c000cfb4 <Filesystem::~Filesystem()>:
c000cfb4:	ba 44 37 02 c0       	mov    edx,0xc0023744
c000cfb9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cfbd:	89 10                	mov    DWORD PTR [eax],edx
c000cfbf:	90                   	nop
c000cfc0:	c3                   	ret    
c000cfc1:	90                   	nop

c000cfc2 <Filesystem::~Filesystem()>:
c000cfc2:	83 ec 0c             	sub    esp,0xc
c000cfc5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cfc9:	e8 e6 ff ff ff       	call   c000cfb4 <Filesystem::~Filesystem()>
c000cfce:	83 c4 04             	add    esp,0x4
c000cfd1:	83 ec 08             	sub    esp,0x8
c000cfd4:	6a 08                	push   0x8
c000cfd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfda:	e8 b9 fb ff ff       	call   c000cb98 <operator delete(void*, unsigned long)>
c000cfdf:	83 c4 10             	add    esp,0x10
c000cfe2:	83 c4 0c             	add    esp,0xc
c000cfe5:	c3                   	ret    

c000cfe6 <Fs::getcwd(Process*, char*, int)>:
c000cfe6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cfea:	31 c0                	xor    eax,eax
c000cfec:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000cfef:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000cff3:	7d 15                	jge    c000d00a <Fs::getcwd(Process*, char*, int)+0x24>
c000cff5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cff9:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000d000:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000d003:	84 c9                	test   cl,cl
c000d005:	74 06                	je     c000d00d <Fs::getcwd(Process*, char*, int)+0x27>
c000d007:	40                   	inc    eax
c000d008:	eb e2                	jmp    c000cfec <Fs::getcwd(Process*, char*, int)+0x6>
c000d00a:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000d00d:	31 c0                	xor    eax,eax
c000d00f:	c3                   	ret    

c000d010 <Fs::initVFS()>:
c000d010:	83 ec 18             	sub    esp,0x18
c000d013:	6a 08                	push   0x8
c000d015:	e8 51 c9 ff ff       	call   c000996b <malloc>
c000d01a:	89 04 24             	mov    DWORD PTR [esp],eax
c000d01d:	e8 1a e4 00 00       	call   c001b43c <FAT::FAT()>
c000d022:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000d029:	e8 3d c9 ff ff       	call   c000996b <malloc>
c000d02e:	89 04 24             	mov    DWORD PTR [esp],eax
c000d031:	e8 96 f6 00 00       	call   c001c6cc <ISO9660::ISO9660()>
c000d036:	83 c4 1c             	add    esp,0x1c
c000d039:	c3                   	ret    

c000d03a <Fs::standardiseFiles(char*, char const*, char const*)>:
c000d03a:	55                   	push   ebp
c000d03b:	57                   	push   edi
c000d03c:	56                   	push   esi
c000d03d:	53                   	push   ebx
c000d03e:	81 ec 10 04 00 00    	sub    esp,0x410
c000d044:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000d04b:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000d052:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000d059:	68 00 04 00 00       	push   0x400
c000d05e:	6a 00                	push   0x0
c000d060:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000d064:	56                   	push   esi
c000d065:	e8 12 36 ff ff       	call   c000067c <memset>
c000d06a:	83 c4 10             	add    esp,0x10
c000d06d:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000d071:	75 0b                	jne    c000d07e <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000d073:	50                   	push   eax
c000d074:	50                   	push   eax
c000d075:	57                   	push   edi
c000d076:	56                   	push   esi
c000d077:	e8 bc 36 ff ff       	call   c0000738 <strcpy>
c000d07c:	eb 41                	jmp    c000d0bf <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000d07e:	8a 07                	mov    al,BYTE PTR [edi]
c000d080:	3c 5c                	cmp    al,0x5c
c000d082:	74 04                	je     c000d088 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000d084:	3c 2f                	cmp    al,0x2f
c000d086:	75 18                	jne    c000d0a0 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000d088:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000d08b:	3c 60                	cmp    al,0x60
c000d08d:	7e 03                	jle    c000d092 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000d08f:	83 e8 20             	sub    eax,0x20
c000d092:	88 04 24             	mov    BYTE PTR [esp],al
c000d095:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d09c:	50                   	push   eax
c000d09d:	50                   	push   eax
c000d09e:	eb 18                	jmp    c000d0b8 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000d0a0:	50                   	push   eax
c000d0a1:	50                   	push   eax
c000d0a2:	55                   	push   ebp
c000d0a3:	56                   	push   esi
c000d0a4:	e8 8f 36 ff ff       	call   c0000738 <strcpy>
c000d0a9:	5a                   	pop    edx
c000d0aa:	59                   	pop    ecx
c000d0ab:	68 8f 48 02 c0       	push   0xc002488f
c000d0b0:	56                   	push   esi
c000d0b1:	e8 c2 37 ff ff       	call   c0000878 <strcat>
c000d0b6:	5d                   	pop    ebp
c000d0b7:	58                   	pop    eax
c000d0b8:	57                   	push   edi
c000d0b9:	56                   	push   esi
c000d0ba:	e8 b9 37 ff ff       	call   c0000878 <strcat>
c000d0bf:	83 c4 10             	add    esp,0x10
c000d0c2:	8a 04 24             	mov    al,BYTE PTR [esp]
c000d0c5:	3c 60                	cmp    al,0x60
c000d0c7:	7e 03                	jle    c000d0cc <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000d0c9:	83 e8 20             	sub    eax,0x20
c000d0cc:	88 04 24             	mov    BYTE PTR [esp],al
c000d0cf:	88 03                	mov    BYTE PTR [ebx],al
c000d0d1:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d0d8:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000d0de:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000d0e2:	bf 03 00 00 00       	mov    edi,0x3
c000d0e7:	b8 03 00 00 00       	mov    eax,0x3
c000d0ec:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000d0ef:	84 d2                	test   dl,dl
c000d0f1:	0f 84 91 00 00 00    	je     c000d188 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000d0f7:	8d 4f 01             	lea    ecx,[edi+0x1]
c000d0fa:	80 fa 5c             	cmp    dl,0x5c
c000d0fd:	74 05                	je     c000d104 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000d0ff:	80 fa 2f             	cmp    dl,0x2f
c000d102:	75 12                	jne    c000d116 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d104:	89 c5                	mov    ebp,eax
c000d106:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d10b:	74 09                	je     c000d116 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d10d:	40                   	inc    eax
c000d10e:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000d112:	89 cf                	mov    edi,ecx
c000d114:	eb d6                	jmp    c000d0ec <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000d116:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000d11b:	75 5b                	jne    c000d178 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d11d:	80 fa 2e             	cmp    dl,0x2e
c000d120:	75 56                	jne    c000d178 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d122:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000d126:	74 19                	je     c000d141 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000d128:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d12d:	74 53                	je     c000d182 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d12f:	89 f9                	mov    ecx,edi
c000d131:	41                   	inc    ecx
c000d132:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d135:	80 fa 2f             	cmp    dl,0x2f
c000d138:	74 f7                	je     c000d131 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d13a:	80 fa 5c             	cmp    dl,0x5c
c000d13d:	74 f2                	je     c000d131 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d13f:	eb d1                	jmp    c000d112 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d141:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d146:	74 3a                	je     c000d182 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d148:	83 f8 03             	cmp    eax,0x3
c000d14b:	74 c5                	je     c000d112 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d14d:	41                   	inc    ecx
c000d14e:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d151:	80 fa 2f             	cmp    dl,0x2f
c000d154:	74 f7                	je     c000d14d <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d156:	80 fa 5c             	cmp    dl,0x5c
c000d159:	74 f2                	je     c000d14d <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d15b:	48                   	dec    eax
c000d15c:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d160:	75 06                	jne    c000d168 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d162:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d166:	eb f3                	jmp    c000d15b <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000d168:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d16c:	74 07                	je     c000d175 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000d16e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d172:	48                   	dec    eax
c000d173:	eb f3                	jmp    c000d168 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d175:	40                   	inc    eax
c000d176:	eb 9a                	jmp    c000d112 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d178:	80 fa 2f             	cmp    dl,0x2f
c000d17b:	74 95                	je     c000d112 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d17d:	80 fa 5c             	cmp    dl,0x5c
c000d180:	74 90                	je     c000d112 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d182:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000d185:	40                   	inc    eax
c000d186:	eb 8a                	jmp    c000d112 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d188:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d18c:	83 ec 0c             	sub    esp,0xc
c000d18f:	53                   	push   ebx
c000d190:	e8 03 35 ff ff       	call   c0000698 <strlen>
c000d195:	83 c4 10             	add    esp,0x10
c000d198:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000d19d:	75 26                	jne    c000d1c5 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000d19f:	83 ec 0c             	sub    esp,0xc
c000d1a2:	53                   	push   ebx
c000d1a3:	e8 f0 34 ff ff       	call   c0000698 <strlen>
c000d1a8:	83 c4 10             	add    esp,0x10
c000d1ab:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000d1b0:	74 26                	je     c000d1d8 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000d1b2:	83 ec 0c             	sub    esp,0xc
c000d1b5:	53                   	push   ebx
c000d1b6:	e8 dd 34 ff ff       	call   c0000698 <strlen>
c000d1bb:	83 c4 10             	add    esp,0x10
c000d1be:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000d1c3:	eb c7                	jmp    c000d18c <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000d1c5:	83 ec 0c             	sub    esp,0xc
c000d1c8:	53                   	push   ebx
c000d1c9:	e8 ca 34 ff ff       	call   c0000698 <strlen>
c000d1ce:	83 c4 10             	add    esp,0x10
c000d1d1:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d1d6:	74 c7                	je     c000d19f <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000d1d8:	81 c4 0c 04 00 00    	add    esp,0x40c
c000d1de:	5b                   	pop    ebx
c000d1df:	5e                   	pop    esi
c000d1e0:	5f                   	pop    edi
c000d1e1:	5d                   	pop    ebp
c000d1e2:	c3                   	ret    
c000d1e3:	90                   	nop

c000d1e4 <File::File(char const*, Process*)>:
c000d1e4:	83 ec 0c             	sub    esp,0xc
c000d1e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1eb:	83 ec 08             	sub    esp,0x8
c000d1ee:	6a 00                	push   0x0
c000d1f0:	50                   	push   eax
c000d1f1:	e8 e4 e2 ff ff       	call   c000b4da <UnixFile::UnixFile(int)>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	ba ac 37 02 c0       	mov    edx,0xc00237ac
c000d1fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d202:	89 10                	mov    DWORD PTR [eax],edx
c000d204:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d208:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d20e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d212:	83 c0 0d             	add    eax,0xd
c000d215:	83 ec 04             	sub    esp,0x4
c000d218:	52                   	push   edx
c000d219:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d21d:	50                   	push   eax
c000d21e:	e8 17 fe ff ff       	call   c000d03a <Fs::standardiseFiles(char*, char const*, char const*)>
c000d223:	83 c4 10             	add    esp,0x10
c000d226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d22a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d22d:	8d 50 bf             	lea    edx,[eax-0x41]
c000d230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d234:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d23a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d23e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d246:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d24c:	0f b6 c0             	movzx  eax,al
c000d24f:	8b 04 85 40 8c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd73c0]
c000d256:	85 c0                	test   eax,eax
c000d258:	74 5e                	je     c000d2b8 <File::File(char const*, Process*)+0xd4>
c000d25a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d25e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d264:	0f b6 c0             	movzx  eax,al
c000d267:	8b 04 85 40 8c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd73c0]
c000d26e:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d274:	85 c0                	test   eax,eax
c000d276:	75 40                	jne    c000d2b8 <File::File(char const*, Process*)+0xd4>
c000d278:	83 ec 0c             	sub    esp,0xc
c000d27b:	68 e8 36 02 c0       	push   0xc00236e8
c000d280:	e8 f4 f9 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c000d285:	83 c4 10             	add    esp,0x10
c000d288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d28c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d292:	0f b6 c0             	movzx  eax,al
c000d295:	8b 04 85 40 8c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd73c0]
c000d29c:	83 ec 0c             	sub    esp,0xc
c000d29f:	50                   	push   eax
c000d2a0:	e8 7b 20 00 00       	call   c000f320 <LogicalDisk::mount()>
c000d2a5:	83 c4 10             	add    esp,0x10
c000d2a8:	83 ec 0c             	sub    esp,0xc
c000d2ab:	68 db 56 02 c0       	push   0xc00256db
c000d2b0:	e8 c4 f9 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c000d2b5:	83 c4 10             	add    esp,0x10
c000d2b8:	90                   	nop
c000d2b9:	83 c4 0c             	add    esp,0xc
c000d2bc:	c3                   	ret    
c000d2bd:	90                   	nop

c000d2be <File::open(FileOpenMode)>:
c000d2be:	53                   	push   ebx
c000d2bf:	b8 0b 00 00 00       	mov    eax,0xb
c000d2c4:	83 ec 08             	sub    esp,0x8
c000d2c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d2cb:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d2d2:	80 fa 19             	cmp    dl,0x19
c000d2d5:	77 40                	ja     c000d317 <File::open(FileOpenMode)+0x59>
c000d2d7:	8b 14 95 40 8c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd73c0]
c000d2de:	85 d2                	test   edx,edx
c000d2e0:	74 35                	je     c000d317 <File::open(FileOpenMode)+0x59>
c000d2e2:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d2e8:	85 d2                	test   edx,edx
c000d2ea:	74 2b                	je     c000d317 <File::open(FileOpenMode)+0x59>
c000d2ec:	b8 06 00 00 00       	mov    eax,0x6
c000d2f1:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d2f5:	75 20                	jne    c000d317 <File::open(FileOpenMode)+0x59>
c000d2f7:	8b 02                	mov    eax,DWORD PTR [edx]
c000d2f9:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d2ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d303:	51                   	push   ecx
c000d304:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d307:	51                   	push   ecx
c000d308:	52                   	push   edx
c000d309:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d30c:	83 c4 10             	add    esp,0x10
c000d30f:	85 c0                	test   eax,eax
c000d311:	75 04                	jne    c000d317 <File::open(FileOpenMode)+0x59>
c000d313:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d317:	83 c4 08             	add    esp,0x8
c000d31a:	5b                   	pop    ebx
c000d31b:	c3                   	ret    

c000d31c <File::close()>:
c000d31c:	53                   	push   ebx
c000d31d:	b8 0b 00 00 00       	mov    eax,0xb
c000d322:	83 ec 08             	sub    esp,0x8
c000d325:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d329:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d330:	80 fa 19             	cmp    dl,0x19
c000d333:	77 41                	ja     c000d376 <File::close()+0x5a>
c000d335:	8b 1c 95 40 8c 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd73c0]
c000d33c:	85 db                	test   ebx,ebx
c000d33e:	74 36                	je     c000d376 <File::close()+0x5a>
c000d340:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d347:	74 2d                	je     c000d376 <File::close()+0x5a>
c000d349:	b8 05 00 00 00       	mov    eax,0x5
c000d34e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d352:	74 22                	je     c000d376 <File::close()+0x5a>
c000d354:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d358:	8b 04 95 40 8c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd73c0]
c000d35f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d365:	53                   	push   ebx
c000d366:	53                   	push   ebx
c000d367:	8b 10                	mov    edx,DWORD PTR [eax]
c000d369:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d36f:	50                   	push   eax
c000d370:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	83 c4 08             	add    esp,0x8
c000d379:	5b                   	pop    ebx
c000d37a:	c3                   	ret    
c000d37b:	90                   	nop

c000d37c <File::seek(unsigned long long)>:
c000d37c:	56                   	push   esi
c000d37d:	53                   	push   ebx
c000d37e:	b8 0b 00 00 00       	mov    eax,0xb
c000d383:	51                   	push   ecx
c000d384:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d388:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d38c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d393:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d397:	80 fa 19             	cmp    dl,0x19
c000d39a:	77 31                	ja     c000d3cd <File::seek(unsigned long long)+0x51>
c000d39c:	8b 14 95 40 8c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd73c0]
c000d3a3:	85 d2                	test   edx,edx
c000d3a5:	74 26                	je     c000d3cd <File::seek(unsigned long long)+0x51>
c000d3a7:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d3ad:	85 d2                	test   edx,edx
c000d3af:	74 1c                	je     c000d3cd <File::seek(unsigned long long)+0x51>
c000d3b1:	b8 05 00 00 00       	mov    eax,0x5
c000d3b6:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d3ba:	74 11                	je     c000d3cd <File::seek(unsigned long long)+0x51>
c000d3bc:	8b 02                	mov    eax,DWORD PTR [edx]
c000d3be:	53                   	push   ebx
c000d3bf:	51                   	push   ecx
c000d3c0:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d3c6:	52                   	push   edx
c000d3c7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d3ca:	83 c4 10             	add    esp,0x10
c000d3cd:	5a                   	pop    edx
c000d3ce:	5b                   	pop    ebx
c000d3cf:	5e                   	pop    esi
c000d3d0:	c3                   	ret    
c000d3d1:	90                   	nop

c000d3d2 <File::tell(unsigned long long*)>:
c000d3d2:	83 ec 0c             	sub    esp,0xc
c000d3d5:	b8 0b 00 00 00       	mov    eax,0xb
c000d3da:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d3de:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d3e5:	80 fa 19             	cmp    dl,0x19
c000d3e8:	77 34                	ja     c000d41e <File::tell(unsigned long long*)+0x4c>
c000d3ea:	8b 14 95 40 8c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd73c0]
c000d3f1:	85 d2                	test   edx,edx
c000d3f3:	74 29                	je     c000d41e <File::tell(unsigned long long*)+0x4c>
c000d3f5:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d3fb:	85 d2                	test   edx,edx
c000d3fd:	74 1f                	je     c000d41e <File::tell(unsigned long long*)+0x4c>
c000d3ff:	b8 05 00 00 00       	mov    eax,0x5
c000d404:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d408:	74 14                	je     c000d41e <File::tell(unsigned long long*)+0x4c>
c000d40a:	50                   	push   eax
c000d40b:	8b 02                	mov    eax,DWORD PTR [edx]
c000d40d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d411:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d417:	52                   	push   edx
c000d418:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d41b:	83 c4 10             	add    esp,0x10
c000d41e:	83 c4 0c             	add    esp,0xc
c000d421:	c3                   	ret    

c000d422 <File::rewind()>:
c000d422:	83 ec 10             	sub    esp,0x10
c000d425:	6a 00                	push   0x0
c000d427:	6a 00                	push   0x0
c000d429:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d42d:	e8 4a ff ff ff       	call   c000d37c <File::seek(unsigned long long)>
c000d432:	83 c4 1c             	add    esp,0x1c
c000d435:	c3                   	ret    

c000d436 <File::unlink()>:
c000d436:	83 ec 0c             	sub    esp,0xc
c000d439:	b8 0b 00 00 00       	mov    eax,0xb
c000d43e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d442:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d449:	80 f9 19             	cmp    cl,0x19
c000d44c:	77 2f                	ja     c000d47d <File::unlink()+0x47>
c000d44e:	8b 0c 8d 40 8c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd73c0]
c000d455:	85 c9                	test   ecx,ecx
c000d457:	74 24                	je     c000d47d <File::unlink()+0x47>
c000d459:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d45f:	85 c9                	test   ecx,ecx
c000d461:	74 1a                	je     c000d47d <File::unlink()+0x47>
c000d463:	b8 06 00 00 00       	mov    eax,0x6
c000d468:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d46c:	75 0f                	jne    c000d47d <File::unlink()+0x47>
c000d46e:	83 c2 0d             	add    edx,0xd
c000d471:	50                   	push   eax
c000d472:	50                   	push   eax
c000d473:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d475:	52                   	push   edx
c000d476:	51                   	push   ecx
c000d477:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d47a:	83 c4 10             	add    esp,0x10
c000d47d:	83 c4 0c             	add    esp,0xc
c000d480:	c3                   	ret    
c000d481:	90                   	nop

c000d482 <File::rename(char const*)>:
c000d482:	83 ec 0c             	sub    esp,0xc
c000d485:	b8 0b 00 00 00       	mov    eax,0xb
c000d48a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d48e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d495:	80 f9 19             	cmp    cl,0x19
c000d498:	77 32                	ja     c000d4cc <File::rename(char const*)+0x4a>
c000d49a:	8b 0c 8d 40 8c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd73c0]
c000d4a1:	85 c9                	test   ecx,ecx
c000d4a3:	74 27                	je     c000d4cc <File::rename(char const*)+0x4a>
c000d4a5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d4ab:	85 c9                	test   ecx,ecx
c000d4ad:	74 1d                	je     c000d4cc <File::rename(char const*)+0x4a>
c000d4af:	b8 06 00 00 00       	mov    eax,0x6
c000d4b4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d4b8:	75 12                	jne    c000d4cc <File::rename(char const*)+0x4a>
c000d4ba:	83 c2 0d             	add    edx,0xd
c000d4bd:	50                   	push   eax
c000d4be:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d4c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d4c4:	52                   	push   edx
c000d4c5:	51                   	push   ecx
c000d4c6:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d4c9:	83 c4 10             	add    esp,0x10
c000d4cc:	83 c4 0c             	add    esp,0xc
c000d4cf:	c3                   	ret    

c000d4d0 <File::chfatattr(unsigned char, unsigned char)>:
c000d4d0:	57                   	push   edi
c000d4d1:	b8 0b 00 00 00       	mov    eax,0xb
c000d4d6:	56                   	push   esi
c000d4d7:	53                   	push   ebx
c000d4d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d4dc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d4e0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d4e7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d4eb:	80 f9 19             	cmp    cl,0x19
c000d4ee:	77 37                	ja     c000d527 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d4f0:	8b 0c 8d 40 8c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd73c0]
c000d4f7:	85 c9                	test   ecx,ecx
c000d4f9:	74 2c                	je     c000d527 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d4fb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d501:	85 c9                	test   ecx,ecx
c000d503:	74 22                	je     c000d527 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d505:	b8 06 00 00 00       	mov    eax,0x6
c000d50a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d50e:	75 17                	jne    c000d527 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d510:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d512:	89 f0                	mov    eax,esi
c000d514:	83 c2 0d             	add    edx,0xd
c000d517:	0f b6 f0             	movzx  esi,al
c000d51a:	0f b6 db             	movzx  ebx,bl
c000d51d:	56                   	push   esi
c000d51e:	53                   	push   ebx
c000d51f:	52                   	push   edx
c000d520:	51                   	push   ecx
c000d521:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d524:	83 c4 10             	add    esp,0x10
c000d527:	5b                   	pop    ebx
c000d528:	5e                   	pop    esi
c000d529:	5f                   	pop    edi
c000d52a:	c3                   	ret    
c000d52b:	90                   	nop

c000d52c <File::exists()>:
c000d52c:	83 ec 0c             	sub    esp,0xc
c000d52f:	31 c0                	xor    eax,eax
c000d531:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d535:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d53c:	80 f9 19             	cmp    cl,0x19
c000d53f:	77 24                	ja     c000d565 <File::exists()+0x39>
c000d541:	8b 0c 8d 40 8c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd73c0]
c000d548:	85 c9                	test   ecx,ecx
c000d54a:	74 19                	je     c000d565 <File::exists()+0x39>
c000d54c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d552:	85 c9                	test   ecx,ecx
c000d554:	74 0f                	je     c000d565 <File::exists()+0x39>
c000d556:	83 c2 0d             	add    edx,0xd
c000d559:	50                   	push   eax
c000d55a:	50                   	push   eax
c000d55b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d55d:	52                   	push   edx
c000d55e:	51                   	push   ecx
c000d55f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d562:	83 c4 10             	add    esp,0x10
c000d565:	83 c4 0c             	add    esp,0xc
c000d568:	c3                   	ret    
c000d569:	90                   	nop

c000d56a <File::stat(unsigned long long*, bool*)>:
c000d56a:	56                   	push   esi
c000d56b:	53                   	push   ebx
c000d56c:	50                   	push   eax
c000d56d:	b8 0b 00 00 00       	mov    eax,0xb
c000d572:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d576:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d57a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d581:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d585:	80 f9 19             	cmp    cl,0x19
c000d588:	77 3d                	ja     c000d5c7 <File::stat(unsigned long long*, bool*)+0x5d>
c000d58a:	8b 0c 8d 40 8c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd73c0]
c000d591:	85 c9                	test   ecx,ecx
c000d593:	74 32                	je     c000d5c7 <File::stat(unsigned long long*, bool*)+0x5d>
c000d595:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d59b:	85 c9                	test   ecx,ecx
c000d59d:	74 28                	je     c000d5c7 <File::stat(unsigned long long*, bool*)+0x5d>
c000d59f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d5a1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d5a5:	74 13                	je     c000d5ba <File::stat(unsigned long long*, bool*)+0x50>
c000d5a7:	83 ec 04             	sub    esp,0x4
c000d5aa:	56                   	push   esi
c000d5ab:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d5b1:	51                   	push   ecx
c000d5b2:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d5b5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d5b8:	eb 0a                	jmp    c000d5c4 <File::stat(unsigned long long*, bool*)+0x5a>
c000d5ba:	53                   	push   ebx
c000d5bb:	83 c2 0d             	add    edx,0xd
c000d5be:	56                   	push   esi
c000d5bf:	52                   	push   edx
c000d5c0:	51                   	push   ecx
c000d5c1:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d5c4:	83 c4 10             	add    esp,0x10
c000d5c7:	5a                   	pop    edx
c000d5c8:	5b                   	pop    ebx
c000d5c9:	5e                   	pop    esi
c000d5ca:	c3                   	ret    

c000d5cb <Fs::setcwd(Process*, char*)>:
c000d5cb:	55                   	push   ebp
c000d5cc:	57                   	push   edi
c000d5cd:	56                   	push   esi
c000d5ce:	53                   	push   ebx
c000d5cf:	81 ec 20 02 00 00    	sub    esp,0x220
c000d5d5:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d5dc:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d5e2:	57                   	push   edi
c000d5e3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d5ea:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d5ee:	56                   	push   esi
c000d5ef:	e8 46 fa ff ff       	call   c000d03a <Fs::standardiseFiles(char*, char const*, char const*)>
c000d5f4:	89 34 24             	mov    DWORD PTR [esp],esi
c000d5f7:	e8 9c 30 ff ff       	call   c0000698 <strlen>
c000d5fc:	83 c4 10             	add    esp,0x10
c000d5ff:	83 f8 02             	cmp    eax,0x2
c000d602:	77 15                	ja     c000d619 <Fs::setcwd(Process*, char*)+0x4e>
c000d604:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000d609:	83 eb 41             	sub    ebx,0x41
c000d60c:	8b 04 9d 40 8c 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd73c0]
c000d613:	85 c0                	test   eax,eax
c000d615:	75 1c                	jne    c000d633 <Fs::setcwd(Process*, char*)+0x68>
c000d617:	eb 4c                	jmp    c000d665 <Fs::setcwd(Process*, char*)+0x9a>
c000d619:	83 ec 0c             	sub    esp,0xc
c000d61c:	56                   	push   esi
c000d61d:	e8 76 30 ff ff       	call   c0000698 <strlen>
c000d622:	83 c4 10             	add    esp,0x10
c000d625:	83 f8 03             	cmp    eax,0x3
c000d628:	75 74                	jne    c000d69e <Fs::setcwd(Process*, char*)+0xd3>
c000d62a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d62f:	75 6d                	jne    c000d69e <Fs::setcwd(Process*, char*)+0xd3>
c000d631:	eb d1                	jmp    c000d604 <Fs::setcwd(Process*, char*)+0x39>
c000d633:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000d63a:	75 29                	jne    c000d665 <Fs::setcwd(Process*, char*)+0x9a>
c000d63c:	83 ec 0c             	sub    esp,0xc
c000d63f:	68 c0 36 02 c0       	push   0xc00236c0
c000d644:	e8 30 f6 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c000d649:	5a                   	pop    edx
c000d64a:	ff 34 9d 40 8c 02 c0 	push   DWORD PTR [ebx*4-0x3ffd73c0]
c000d651:	e8 ca 1c 00 00       	call   c000f320 <LogicalDisk::mount()>
c000d656:	c7 04 24 db 56 02 c0 	mov    DWORD PTR [esp],0xc00256db
c000d65d:	e8 17 f6 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c000d662:	83 c4 10             	add    esp,0x10
c000d665:	b8 03 00 00 00       	mov    eax,0x3
c000d66a:	83 fb 19             	cmp    ebx,0x19
c000d66d:	0f 87 c6 00 00 00    	ja     c000d739 <Fs::setcwd(Process*, char*)+0x16e>
c000d673:	8b 14 9d 40 8c 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd73c0]
c000d67a:	b8 05 00 00 00       	mov    eax,0x5
c000d67f:	85 d2                	test   edx,edx
c000d681:	0f 84 b2 00 00 00    	je     c000d739 <Fs::setcwd(Process*, char*)+0x16e>
c000d687:	b8 06 00 00 00       	mov    eax,0x6
c000d68c:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d693:	0f 85 92 00 00 00    	jne    c000d72b <Fs::setcwd(Process*, char*)+0x160>
c000d699:	e9 9b 00 00 00       	jmp    c000d739 <Fs::setcwd(Process*, char*)+0x16e>
c000d69e:	83 ec 0c             	sub    esp,0xc
c000d6a1:	68 14 01 00 00       	push   0x114
c000d6a6:	e8 c0 c2 ff ff       	call   c000996b <malloc>
c000d6ab:	83 c4 0c             	add    esp,0xc
c000d6ae:	89 c3                	mov    ebx,eax
c000d6b0:	55                   	push   ebp
c000d6b1:	56                   	push   esi
c000d6b2:	50                   	push   eax
c000d6b3:	e8 2c fb ff ff       	call   c000d1e4 <File::File(char const*, Process*)>
c000d6b8:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000d6bd:	83 c4 0c             	add    esp,0xc
c000d6c0:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000d6c4:	50                   	push   eax
c000d6c5:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d6c9:	50                   	push   eax
c000d6ca:	53                   	push   ebx
c000d6cb:	e8 9a fe ff ff       	call   c000d56a <File::stat(unsigned long long*, bool*)>
c000d6d0:	83 c4 10             	add    esp,0x10
c000d6d3:	83 f8 02             	cmp    eax,0x2
c000d6d6:	74 04                	je     c000d6dc <Fs::setcwd(Process*, char*)+0x111>
c000d6d8:	85 c0                	test   eax,eax
c000d6da:	74 1c                	je     c000d6f8 <Fs::setcwd(Process*, char*)+0x12d>
c000d6dc:	b8 01 00 00 00       	mov    eax,0x1
c000d6e1:	85 db                	test   ebx,ebx
c000d6e3:	74 54                	je     c000d739 <Fs::setcwd(Process*, char*)+0x16e>
c000d6e5:	83 ec 0c             	sub    esp,0xc
c000d6e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d6ea:	53                   	push   ebx
c000d6eb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d6ee:	83 c4 10             	add    esp,0x10
c000d6f1:	b8 01 00 00 00       	mov    eax,0x1
c000d6f6:	eb 41                	jmp    c000d739 <Fs::setcwd(Process*, char*)+0x16e>
c000d6f8:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d6fd:	75 1c                	jne    c000d71b <Fs::setcwd(Process*, char*)+0x150>
c000d6ff:	b8 02 00 00 00       	mov    eax,0x2
c000d704:	85 db                	test   ebx,ebx
c000d706:	74 31                	je     c000d739 <Fs::setcwd(Process*, char*)+0x16e>
c000d708:	83 ec 0c             	sub    esp,0xc
c000d70b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d70d:	53                   	push   ebx
c000d70e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d711:	83 c4 10             	add    esp,0x10
c000d714:	b8 02 00 00 00       	mov    eax,0x2
c000d719:	eb 1e                	jmp    c000d739 <Fs::setcwd(Process*, char*)+0x16e>
c000d71b:	85 db                	test   ebx,ebx
c000d71d:	74 0c                	je     c000d72b <Fs::setcwd(Process*, char*)+0x160>
c000d71f:	83 ec 0c             	sub    esp,0xc
c000d722:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d724:	53                   	push   ebx
c000d725:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d728:	83 c4 10             	add    esp,0x10
c000d72b:	50                   	push   eax
c000d72c:	50                   	push   eax
c000d72d:	56                   	push   esi
c000d72e:	57                   	push   edi
c000d72f:	e8 04 30 ff ff       	call   c0000738 <strcpy>
c000d734:	83 c4 10             	add    esp,0x10
c000d737:	31 c0                	xor    eax,eax
c000d739:	81 c4 1c 02 00 00    	add    esp,0x21c
c000d73f:	5b                   	pop    ebx
c000d740:	5e                   	pop    esi
c000d741:	5f                   	pop    edi
c000d742:	5d                   	pop    ebp
c000d743:	c3                   	ret    

c000d744 <Directory::Directory(char const*, Process*)>:
c000d744:	83 ec 0c             	sub    esp,0xc
c000d747:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d74b:	83 ec 08             	sub    esp,0x8
c000d74e:	6a 00                	push   0x0
c000d750:	50                   	push   eax
c000d751:	e8 84 dd ff ff       	call   c000b4da <UnixFile::UnixFile(int)>
c000d756:	83 c4 10             	add    esp,0x10
c000d759:	ba c8 37 02 c0       	mov    edx,0xc00237c8
c000d75e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d762:	89 10                	mov    DWORD PTR [eax],edx
c000d764:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d768:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d76e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d772:	83 c0 0d             	add    eax,0xd
c000d775:	83 ec 04             	sub    esp,0x4
c000d778:	52                   	push   edx
c000d779:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d77d:	50                   	push   eax
c000d77e:	e8 b7 f8 ff ff       	call   c000d03a <Fs::standardiseFiles(char*, char const*, char const*)>
c000d783:	83 c4 10             	add    esp,0x10
c000d786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d78a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d78d:	8d 50 bf             	lea    edx,[eax-0x41]
c000d790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d794:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d79e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d7a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7a6:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d7ac:	0f b6 c0             	movzx  eax,al
c000d7af:	8b 04 85 40 8c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd73c0]
c000d7b6:	85 c0                	test   eax,eax
c000d7b8:	74 5e                	je     c000d818 <Directory::Directory(char const*, Process*)+0xd4>
c000d7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7be:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d7c4:	0f b6 c0             	movzx  eax,al
c000d7c7:	8b 04 85 40 8c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd73c0]
c000d7ce:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d7d4:	85 c0                	test   eax,eax
c000d7d6:	75 40                	jne    c000d818 <Directory::Directory(char const*, Process*)+0xd4>
c000d7d8:	83 ec 0c             	sub    esp,0xc
c000d7db:	68 10 37 02 c0       	push   0xc0023710
c000d7e0:	e8 94 f4 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c000d7e5:	83 c4 10             	add    esp,0x10
c000d7e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ec:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d7f2:	0f b6 c0             	movzx  eax,al
c000d7f5:	8b 04 85 40 8c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd73c0]
c000d7fc:	83 ec 0c             	sub    esp,0xc
c000d7ff:	50                   	push   eax
c000d800:	e8 1b 1b 00 00       	call   c000f320 <LogicalDisk::mount()>
c000d805:	83 c4 10             	add    esp,0x10
c000d808:	83 ec 0c             	sub    esp,0xc
c000d80b:	68 db 56 02 c0       	push   0xc00256db
c000d810:	e8 64 f4 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c000d815:	83 c4 10             	add    esp,0x10
c000d818:	90                   	nop
c000d819:	83 c4 0c             	add    esp,0xc
c000d81c:	c3                   	ret    
c000d81d:	90                   	nop

c000d81e <Directory::open()>:
c000d81e:	53                   	push   ebx
c000d81f:	b8 0b 00 00 00       	mov    eax,0xb
c000d824:	83 ec 08             	sub    esp,0x8
c000d827:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d82b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d832:	80 fa 19             	cmp    dl,0x19
c000d835:	77 3d                	ja     c000d874 <Directory::open()+0x56>
c000d837:	8b 14 95 40 8c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd73c0]
c000d83e:	85 d2                	test   edx,edx
c000d840:	74 32                	je     c000d874 <Directory::open()+0x56>
c000d842:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d848:	85 d2                	test   edx,edx
c000d84a:	74 28                	je     c000d874 <Directory::open()+0x56>
c000d84c:	b8 06 00 00 00       	mov    eax,0x6
c000d851:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d855:	75 1d                	jne    c000d874 <Directory::open()+0x56>
c000d857:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d85d:	50                   	push   eax
c000d85e:	8b 02                	mov    eax,DWORD PTR [edx]
c000d860:	51                   	push   ecx
c000d861:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d864:	51                   	push   ecx
c000d865:	52                   	push   edx
c000d866:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000d869:	83 c4 10             	add    esp,0x10
c000d86c:	85 c0                	test   eax,eax
c000d86e:	75 04                	jne    c000d874 <Directory::open()+0x56>
c000d870:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d874:	83 c4 08             	add    esp,0x8
c000d877:	5b                   	pop    ebx
c000d878:	c3                   	ret    
c000d879:	90                   	nop

c000d87a <Directory::close()>:
c000d87a:	53                   	push   ebx
c000d87b:	b8 0b 00 00 00       	mov    eax,0xb
c000d880:	83 ec 08             	sub    esp,0x8
c000d883:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d887:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d88e:	80 fa 19             	cmp    dl,0x19
c000d891:	77 41                	ja     c000d8d4 <Directory::close()+0x5a>
c000d893:	8b 1c 95 40 8c 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd73c0]
c000d89a:	85 db                	test   ebx,ebx
c000d89c:	74 36                	je     c000d8d4 <Directory::close()+0x5a>
c000d89e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d8a5:	74 2d                	je     c000d8d4 <Directory::close()+0x5a>
c000d8a7:	b8 05 00 00 00       	mov    eax,0x5
c000d8ac:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d8b0:	74 22                	je     c000d8d4 <Directory::close()+0x5a>
c000d8b2:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d8b6:	8b 04 95 40 8c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd73c0]
c000d8bd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d8c3:	53                   	push   ebx
c000d8c4:	53                   	push   ebx
c000d8c5:	8b 10                	mov    edx,DWORD PTR [eax]
c000d8c7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d8cd:	50                   	push   eax
c000d8ce:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000d8d1:	83 c4 10             	add    esp,0x10
c000d8d4:	83 c4 08             	add    esp,0x8
c000d8d7:	5b                   	pop    ebx
c000d8d8:	c3                   	ret    
c000d8d9:	90                   	nop

c000d8da <Directory::unlink()>:
c000d8da:	83 ec 0c             	sub    esp,0xc
c000d8dd:	b8 0b 00 00 00       	mov    eax,0xb
c000d8e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d8e6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d8ed:	80 f9 19             	cmp    cl,0x19
c000d8f0:	77 2f                	ja     c000d921 <Directory::unlink()+0x47>
c000d8f2:	8b 0c 8d 40 8c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd73c0]
c000d8f9:	85 c9                	test   ecx,ecx
c000d8fb:	74 24                	je     c000d921 <Directory::unlink()+0x47>
c000d8fd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d903:	85 c9                	test   ecx,ecx
c000d905:	74 1a                	je     c000d921 <Directory::unlink()+0x47>
c000d907:	b8 06 00 00 00       	mov    eax,0x6
c000d90c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d910:	75 0f                	jne    c000d921 <Directory::unlink()+0x47>
c000d912:	83 c2 0d             	add    edx,0xd
c000d915:	50                   	push   eax
c000d916:	50                   	push   eax
c000d917:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d919:	52                   	push   edx
c000d91a:	51                   	push   ecx
c000d91b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d91e:	83 c4 10             	add    esp,0x10
c000d921:	83 c4 0c             	add    esp,0xc
c000d924:	c3                   	ret    
c000d925:	90                   	nop

c000d926 <Directory::rename(char const*)>:
c000d926:	83 ec 0c             	sub    esp,0xc
c000d929:	b8 0b 00 00 00       	mov    eax,0xb
c000d92e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d932:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d939:	80 f9 19             	cmp    cl,0x19
c000d93c:	77 32                	ja     c000d970 <Directory::rename(char const*)+0x4a>
c000d93e:	8b 0c 8d 40 8c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd73c0]
c000d945:	85 c9                	test   ecx,ecx
c000d947:	74 27                	je     c000d970 <Directory::rename(char const*)+0x4a>
c000d949:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d94f:	85 c9                	test   ecx,ecx
c000d951:	74 1d                	je     c000d970 <Directory::rename(char const*)+0x4a>
c000d953:	b8 06 00 00 00       	mov    eax,0x6
c000d958:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d95c:	75 12                	jne    c000d970 <Directory::rename(char const*)+0x4a>
c000d95e:	83 c2 0d             	add    edx,0xd
c000d961:	50                   	push   eax
c000d962:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d964:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d968:	52                   	push   edx
c000d969:	51                   	push   ecx
c000d96a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d96d:	83 c4 10             	add    esp,0x10
c000d970:	83 c4 0c             	add    esp,0xc
c000d973:	c3                   	ret    

c000d974 <Directory::exists()>:
c000d974:	83 ec 0c             	sub    esp,0xc
c000d977:	31 c0                	xor    eax,eax
c000d979:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d97d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d984:	80 f9 19             	cmp    cl,0x19
c000d987:	77 24                	ja     c000d9ad <Directory::exists()+0x39>
c000d989:	8b 0c 8d 40 8c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd73c0]
c000d990:	85 c9                	test   ecx,ecx
c000d992:	74 19                	je     c000d9ad <Directory::exists()+0x39>
c000d994:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d99a:	85 c9                	test   ecx,ecx
c000d99c:	74 0f                	je     c000d9ad <Directory::exists()+0x39>
c000d99e:	83 c2 0d             	add    edx,0xd
c000d9a1:	50                   	push   eax
c000d9a2:	50                   	push   eax
c000d9a3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d9a5:	52                   	push   edx
c000d9a6:	51                   	push   ecx
c000d9a7:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d9aa:	83 c4 10             	add    esp,0x10
c000d9ad:	83 c4 0c             	add    esp,0xc
c000d9b0:	c3                   	ret    
c000d9b1:	90                   	nop

c000d9b2 <Directory::read(dirent*)>:
c000d9b2:	83 ec 1c             	sub    esp,0x1c
c000d9b5:	b8 0b 00 00 00       	mov    eax,0xb
c000d9ba:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d9be:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d9c5:	80 fa 19             	cmp    dl,0x19
c000d9c8:	77 30                	ja     c000d9fa <Directory::read(dirent*)+0x48>
c000d9ca:	8b 14 95 40 8c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd73c0]
c000d9d1:	85 d2                	test   edx,edx
c000d9d3:	74 25                	je     c000d9fa <Directory::read(dirent*)+0x48>
c000d9d5:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d9dc:	74 1c                	je     c000d9fa <Directory::read(dirent*)+0x48>
c000d9de:	83 ec 0c             	sub    esp,0xc
c000d9e1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d9e3:	8d 54 24 18          	lea    edx,[esp+0x18]
c000d9e7:	52                   	push   edx
c000d9e8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ec:	6a 00                	push   0x0
c000d9ee:	68 10 01 00 00       	push   0x110
c000d9f3:	51                   	push   ecx
c000d9f4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000d9f7:	83 c4 20             	add    esp,0x20
c000d9fa:	83 c4 1c             	add    esp,0x1c
c000d9fd:	c3                   	ret    

c000d9fe <Directory::create()>:
c000d9fe:	83 ec 0c             	sub    esp,0xc
c000da01:	b8 0b 00 00 00       	mov    eax,0xb
c000da06:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000da0a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000da11:	80 f9 19             	cmp    cl,0x19
c000da14:	77 2f                	ja     c000da45 <Directory::create()+0x47>
c000da16:	8b 0c 8d 40 8c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd73c0]
c000da1d:	85 c9                	test   ecx,ecx
c000da1f:	74 24                	je     c000da45 <Directory::create()+0x47>
c000da21:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000da27:	85 c9                	test   ecx,ecx
c000da29:	74 1a                	je     c000da45 <Directory::create()+0x47>
c000da2b:	b8 06 00 00 00       	mov    eax,0x6
c000da30:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000da34:	75 0f                	jne    c000da45 <Directory::create()+0x47>
c000da36:	83 c2 0d             	add    edx,0xd
c000da39:	50                   	push   eax
c000da3a:	50                   	push   eax
c000da3b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000da3d:	52                   	push   edx
c000da3e:	51                   	push   ecx
c000da3f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000da42:	83 c4 10             	add    esp,0x10
c000da45:	83 c4 0c             	add    esp,0xc
c000da48:	c3                   	ret    
c000da49:	90                   	nop

c000da4a <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000da4a:	b8 0a 00 00 00       	mov    eax,0xa
c000da4f:	c3                   	ret    

c000da50 <Bus::Bus(char const*)>:
c000da50:	83 ec 0c             	sub    esp,0xc
c000da53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da57:	83 ec 08             	sub    esp,0x8
c000da5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da5e:	50                   	push   eax
c000da5f:	e8 96 08 00 00       	call   c000e2fa <Device::Device(char const*)>
c000da64:	83 c4 10             	add    esp,0x10
c000da67:	ba e4 37 02 c0       	mov    edx,0xc00237e4
c000da6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da70:	89 10                	mov    DWORD PTR [eax],edx
c000da72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da76:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000da80:	90                   	nop
c000da81:	83 c4 0c             	add    esp,0xc
c000da84:	c3                   	ret    
c000da85:	90                   	nop
c000da86:	66 90                	xchg   ax,ax

c000da88 <Bus::~Bus()>:
c000da88:	83 ec 0c             	sub    esp,0xc
c000da8b:	ba e4 37 02 c0       	mov    edx,0xc00237e4
c000da90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da94:	89 10                	mov    DWORD PTR [eax],edx
c000da96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da9a:	83 ec 0c             	sub    esp,0xc
c000da9d:	50                   	push   eax
c000da9e:	e8 55 05 00 00       	call   c000dff8 <Device::~Device()>
c000daa3:	83 c4 10             	add    esp,0x10
c000daa6:	90                   	nop
c000daa7:	83 c4 0c             	add    esp,0xc
c000daaa:	c3                   	ret    
c000daab:	90                   	nop

c000daac <Bus::~Bus()>:
c000daac:	83 ec 0c             	sub    esp,0xc
c000daaf:	83 ec 0c             	sub    esp,0xc
c000dab2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dab6:	e8 cd ff ff ff       	call   c000da88 <Bus::~Bus()>
c000dabb:	83 c4 10             	add    esp,0x10
c000dabe:	83 ec 08             	sub    esp,0x8
c000dac1:	68 58 01 00 00       	push   0x158
c000dac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000daca:	e8 c9 f0 ff ff       	call   c000cb98 <operator delete(void*, unsigned long)>
c000dacf:	83 c4 10             	add    esp,0x10
c000dad2:	83 c4 0c             	add    esp,0xc
c000dad5:	c3                   	ret    

c000dad6 <beepThread(void*)>:
c000dad6:	83 ec 0c             	sub    esp,0xc
c000dad9:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c000dade:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dae2:	48                   	dec    eax
c000dae3:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c000dae8:	75 01                	jne    c000daeb <beepThread(void*)+0x15>
c000daea:	fb                   	sti    
c000daeb:	83 ec 0c             	sub    esp,0xc
c000daee:	6b c2 0a             	imul   eax,edx,0xa
c000daf1:	50                   	push   eax
c000daf2:	e8 6d 8e 00 00       	call   c0016964 <milliTenthSleep(unsigned int)>
c000daf7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000dafe:	e8 1e c2 00 00       	call   c0019d21 <Hal::makeBeep(int)>
c000db03:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000db0b:	83 c4 1c             	add    esp,0x1c
c000db0e:	e9 51 8d 00 00       	jmp    c0016864 <blockTask(TaskState)>

c000db13 <Krnl::beep(int, int, bool)>:
c000db13:	56                   	push   esi
c000db14:	53                   	push   ebx
c000db15:	83 ec 10             	sub    esp,0x10
c000db18:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000db1c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000db20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db24:	e8 f8 c1 00 00       	call   c0019d21 <Hal::makeBeep(int)>
c000db29:	83 c4 10             	add    esp,0x10
c000db2c:	89 f0                	mov    eax,esi
c000db2e:	84 c0                	test   al,al
c000db30:	74 1e                	je     c000db50 <Krnl::beep(int, int, bool)+0x3d>
c000db32:	83 ec 0c             	sub    esp,0xc
c000db35:	6b db 0a             	imul   ebx,ebx,0xa
c000db38:	53                   	push   ebx
c000db39:	e8 26 8e 00 00       	call   c0016964 <milliTenthSleep(unsigned int)>
c000db3e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000db46:	83 c4 14             	add    esp,0x14
c000db49:	5b                   	pop    ebx
c000db4a:	5e                   	pop    esi
c000db4b:	e9 d1 c1 00 00       	jmp    c0019d21 <Hal::makeBeep(int)>
c000db50:	68 e6 00 00 00       	push   0xe6
c000db55:	53                   	push   ebx
c000db56:	68 d6 da 00 c0       	push   0xc000dad6
c000db5b:	ff 35 d0 9b 02 c0    	push   DWORD PTR ds:0xc0029bd0
c000db61:	e8 ea 88 00 00       	call   c0016450 <Process::createThread(void (*)(void*), void*, int)>
c000db66:	83 c4 14             	add    esp,0x14
c000db69:	5b                   	pop    ebx
c000db6a:	5e                   	pop    esi
c000db6b:	c3                   	ret    

c000db6c <User::loadClockSettings(int)>:
c000db6c:	53                   	push   ebx
c000db6d:	83 ec 14             	sub    esp,0x14
c000db70:	68 14 01 00 00       	push   0x114
c000db75:	e8 f1 bd ff ff       	call   c000996b <malloc>
c000db7a:	83 c4 0c             	add    esp,0xc
c000db7d:	89 c3                	mov    ebx,eax
c000db7f:	ff 35 d0 9b 02 c0    	push   DWORD PTR ds:0xc0029bd0
c000db85:	68 08 38 02 c0       	push   0xc0023808
c000db8a:	50                   	push   eax
c000db8b:	e8 54 f6 ff ff       	call   c000d1e4 <File::File(char const*, Process*)>
c000db90:	58                   	pop    eax
c000db91:	5a                   	pop    edx
c000db92:	6a 01                	push   0x1
c000db94:	53                   	push   ebx
c000db95:	e8 24 f7 ff ff       	call   c000d2be <File::open(FileOpenMode)>
c000db9a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000db9d:	e8 7a f7 ff ff       	call   c000d31c <File::close()>
c000dba2:	83 c4 10             	add    esp,0x10
c000dba5:	85 db                	test   ebx,ebx
c000dba7:	74 0f                	je     c000dbb8 <User::loadClockSettings(int)+0x4c>
c000dba9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dbab:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000dbaf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000dbb2:	83 c4 08             	add    esp,0x8
c000dbb5:	5b                   	pop    ebx
c000dbb6:	ff e0                	jmp    eax
c000dbb8:	83 c4 08             	add    esp,0x8
c000dbbb:	5b                   	pop    ebx
c000dbbc:	c3                   	ret    
c000dbbd:	90                   	nop

c000dbbe <Clock::Clock(char const*)>:
c000dbbe:	83 ec 0c             	sub    esp,0xc
c000dbc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbc5:	83 ec 08             	sub    esp,0x8
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	50                   	push   eax
c000dbcd:	e8 28 07 00 00       	call   c000e2fa <Device::Device(char const*)>
c000dbd2:	83 c4 10             	add    esp,0x10
c000dbd5:	ba 30 38 02 c0       	mov    edx,0xc0023830
c000dbda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbde:	89 10                	mov    DWORD PTR [eax],edx
c000dbe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbe4:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000dbee:	90                   	nop
c000dbef:	83 c4 0c             	add    esp,0xc
c000dbf2:	c3                   	ret    
c000dbf3:	90                   	nop

c000dbf4 <Clock::~Clock()>:
c000dbf4:	83 ec 0c             	sub    esp,0xc
c000dbf7:	ba 30 38 02 c0       	mov    edx,0xc0023830
c000dbfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc00:	89 10                	mov    DWORD PTR [eax],edx
c000dc02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc06:	83 ec 0c             	sub    esp,0xc
c000dc09:	50                   	push   eax
c000dc0a:	e8 e9 03 00 00       	call   c000dff8 <Device::~Device()>
c000dc0f:	83 c4 10             	add    esp,0x10
c000dc12:	90                   	nop
c000dc13:	83 c4 0c             	add    esp,0xc
c000dc16:	c3                   	ret    
c000dc17:	90                   	nop

c000dc18 <Clock::~Clock()>:
c000dc18:	83 ec 0c             	sub    esp,0xc
c000dc1b:	83 ec 0c             	sub    esp,0xc
c000dc1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc22:	e8 cd ff ff ff       	call   c000dbf4 <Clock::~Clock()>
c000dc27:	83 c4 10             	add    esp,0x10
c000dc2a:	83 ec 08             	sub    esp,0x8
c000dc2d:	68 58 01 00 00       	push   0x158
c000dc32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc36:	e8 5d ef ff ff       	call   c000cb98 <operator delete(void*, unsigned long)>
c000dc3b:	83 c4 10             	add    esp,0x10
c000dc3e:	83 c4 0c             	add    esp,0xc
c000dc41:	c3                   	ret    

c000dc42 <Clock::timeInSecondsLocal()>:
c000dc42:	53                   	push   ebx
c000dc43:	83 ec 14             	sub    esp,0x14
c000dc46:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dc4a:	8b 10                	mov    edx,DWORD PTR [eax]
c000dc4c:	50                   	push   eax
c000dc4d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000dc50:	0f b6 0d bc 67 02 c0 	movzx  ecx,BYTE PTR ds:0xc00267bc
c000dc57:	03 0d c0 67 02 c0    	add    ecx,DWORD PTR ds:0xc00267c0
c000dc5d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000dc63:	89 cb                	mov    ebx,ecx
c000dc65:	c1 fb 1f             	sar    ebx,0x1f
c000dc68:	01 c8                	add    eax,ecx
c000dc6a:	11 da                	adc    edx,ebx
c000dc6c:	83 c4 10             	add    esp,0x10
c000dc6f:	31 c9                	xor    ecx,ecx
c000dc71:	80 3d bd 67 02 c0 00 	cmp    BYTE PTR ds:0xc00267bd,0x0
c000dc78:	74 05                	je     c000dc7f <Clock::timeInSecondsLocal()+0x3d>
c000dc7a:	b9 08 07 00 00       	mov    ecx,0x708
c000dc7f:	31 db                	xor    ebx,ebx
c000dc81:	01 c8                	add    eax,ecx
c000dc83:	11 da                	adc    edx,ebx
c000dc85:	83 c4 08             	add    esp,0x8
c000dc88:	5b                   	pop    ebx
c000dc89:	c3                   	ret    

c000dc8a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000dc8a:	57                   	push   edi
c000dc8b:	56                   	push   esi
c000dc8c:	53                   	push   ebx
c000dc8d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dc91:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000dc95:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dc97:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000dc9b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000dc9e:	0f b6 05 bc 67 02 c0 	movzx  eax,BYTE PTR ds:0xc00267bc
c000dca5:	03 05 c0 67 02 c0    	add    eax,DWORD PTR ds:0xc00267c0
c000dcab:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000dcb1:	99                   	cdq    
c000dcb2:	29 c6                	sub    esi,eax
c000dcb4:	19 d7                	sbb    edi,edx
c000dcb6:	89 f0                	mov    eax,esi
c000dcb8:	89 fa                	mov    edx,edi
c000dcba:	31 f6                	xor    esi,esi
c000dcbc:	80 3d bd 67 02 c0 00 	cmp    BYTE PTR ds:0xc00267bd,0x0
c000dcc3:	74 05                	je     c000dcca <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000dcc5:	be 08 07 00 00       	mov    esi,0x708
c000dcca:	31 ff                	xor    edi,edi
c000dccc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000dcd0:	29 f0                	sub    eax,esi
c000dcd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dcd6:	19 fa                	sbb    edx,edi
c000dcd8:	89 d8                	mov    eax,ebx
c000dcda:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dcde:	5b                   	pop    ebx
c000dcdf:	5e                   	pop    esi
c000dce0:	5f                   	pop    edi
c000dce1:	ff e0                	jmp    eax

c000dce3 <datetimeToSeconds(datetime_t)>:
c000dce3:	55                   	push   ebp
c000dce4:	57                   	push   edi
c000dce5:	56                   	push   esi
c000dce6:	53                   	push   ebx
c000dce7:	83 ec 14             	sub    esp,0x14
c000dcea:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dcee:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000dcf2:	89 d3                	mov    ebx,edx
c000dcf4:	0f b6 c6             	movzx  eax,dh
c000dcf7:	c1 eb 10             	shr    ebx,0x10
c000dcfa:	48                   	dec    eax
c000dcfb:	66 81 eb 6c 07       	sub    bx,0x76c
c000dd00:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000dd04:	0f b6 f5             	movzx  esi,ch
c000dd07:	89 cf                	mov    edi,ecx
c000dd09:	6b f6 3c             	imul   esi,esi,0x3c
c000dd0c:	c1 ef 10             	shr    edi,0x10
c000dd0f:	0f b6 c9             	movzx  ecx,cl
c000dd12:	89 f8                	mov    eax,edi
c000dd14:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000dd1a:	0f b6 f8             	movzx  edi,al
c000dd1d:	0f b6 d2             	movzx  edx,dl
c000dd20:	01 fe                	add    esi,edi
c000dd22:	01 f1                	add    ecx,esi
c000dd24:	0f b7 f3             	movzx  esi,bx
c000dd27:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000dd2b:	c1 f9 1f             	sar    ecx,0x1f
c000dd2e:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000dd33:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dd37:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000dd3c:	8b 0c 8d 80 38 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc780]
c000dd43:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000dd47:	76 29                	jbe    c000dd72 <datetimeToSeconds(datetime_t)+0x8f>
c000dd49:	f6 c3 03             	test   bl,0x3
c000dd4c:	75 24                	jne    c000dd72 <datetimeToSeconds(datetime_t)+0x8f>
c000dd4e:	31 d2                	xor    edx,edx
c000dd50:	bf 64 00 00 00       	mov    edi,0x64
c000dd55:	89 d8                	mov    eax,ebx
c000dd57:	66 f7 f7             	div    di
c000dd5a:	66 85 d2             	test   dx,dx
c000dd5d:	75 12                	jne    c000dd71 <datetimeToSeconds(datetime_t)+0x8e>
c000dd5f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000dd65:	bf 90 01 00 00       	mov    edi,0x190
c000dd6a:	99                   	cdq    
c000dd6b:	f7 ff                	idiv   edi
c000dd6d:	85 d2                	test   edx,edx
c000dd6f:	75 01                	jne    c000dd72 <datetimeToSeconds(datetime_t)+0x8f>
c000dd71:	41                   	inc    ecx
c000dd72:	66 83 fb 46          	cmp    bx,0x46
c000dd76:	76 45                	jbe    c000ddbd <datetimeToSeconds(datetime_t)+0xda>
c000dd78:	bb 46 00 00 00       	mov    ebx,0x46
c000dd7d:	bf 64 00 00 00       	mov    edi,0x64
c000dd82:	bd 90 01 00 00       	mov    ebp,0x190
c000dd87:	b8 6d 01 00 00       	mov    eax,0x16d
c000dd8c:	f6 c3 03             	test   bl,0x3
c000dd8f:	75 23                	jne    c000ddb4 <datetimeToSeconds(datetime_t)+0xd1>
c000dd91:	89 d8                	mov    eax,ebx
c000dd93:	99                   	cdq    
c000dd94:	f7 ff                	idiv   edi
c000dd96:	b8 6e 01 00 00       	mov    eax,0x16e
c000dd9b:	85 d2                	test   edx,edx
c000dd9d:	75 15                	jne    c000ddb4 <datetimeToSeconds(datetime_t)+0xd1>
c000dd9f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000dda5:	99                   	cdq    
c000dda6:	f7 fd                	idiv   ebp
c000dda8:	83 fa 01             	cmp    edx,0x1
c000ddab:	19 c0                	sbb    eax,eax
c000ddad:	f7 d0                	not    eax
c000ddaf:	05 6e 01 00 00       	add    eax,0x16e
c000ddb4:	01 c1                	add    ecx,eax
c000ddb6:	43                   	inc    ebx
c000ddb7:	39 f3                	cmp    ebx,esi
c000ddb9:	7c cc                	jl     c000dd87 <datetimeToSeconds(datetime_t)+0xa4>
c000ddbb:	eb 35                	jmp    c000ddf2 <datetimeToSeconds(datetime_t)+0x10f>
c000ddbd:	74 33                	je     c000ddf2 <datetimeToSeconds(datetime_t)+0x10f>
c000ddbf:	b8 45 00 00 00       	mov    eax,0x45
c000ddc4:	89 c2                	mov    edx,eax
c000ddc6:	83 e2 03             	and    edx,0x3
c000ddc9:	39 f0                	cmp    eax,esi
c000ddcb:	7e 0f                	jle    c000dddc <datetimeToSeconds(datetime_t)+0xf9>
c000ddcd:	83 fa 01             	cmp    edx,0x1
c000ddd0:	19 d2                	sbb    edx,edx
c000ddd2:	48                   	dec    eax
c000ddd3:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000ddda:	eb e8                	jmp    c000ddc4 <datetimeToSeconds(datetime_t)+0xe1>
c000dddc:	b8 6d 01 00 00       	mov    eax,0x16d
c000dde1:	85 d2                	test   edx,edx
c000dde3:	75 0b                	jne    c000ddf0 <datetimeToSeconds(datetime_t)+0x10d>
c000dde5:	66 83 fb 01          	cmp    bx,0x1
c000dde9:	19 c0                	sbb    eax,eax
c000ddeb:	05 6e 01 00 00       	add    eax,0x16e
c000ddf0:	29 c1                	sub    ecx,eax
c000ddf2:	b8 80 51 01 00       	mov    eax,0x15180
c000ddf7:	f7 e9                	imul   ecx
c000ddf9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ddfd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000de01:	83 c4 14             	add    esp,0x14
c000de04:	5b                   	pop    ebx
c000de05:	5e                   	pop    esi
c000de06:	5f                   	pop    edi
c000de07:	5d                   	pop    ebp
c000de08:	c3                   	ret    
c000de09:	90                   	nop

c000de0a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000de0a:	57                   	push   edi
c000de0b:	56                   	push   esi
c000de0c:	53                   	push   ebx
c000de0d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de11:	8b 06                	mov    eax,DWORD PTR [esi]
c000de13:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000de16:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000de1a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000de1e:	e8 c0 fe ff ff       	call   c000dce3 <datetimeToSeconds(datetime_t)>
c000de23:	59                   	pop    ecx
c000de24:	0f b6 0d bc 67 02 c0 	movzx  ecx,BYTE PTR ds:0xc00267bc
c000de2b:	5b                   	pop    ebx
c000de2c:	03 0d c0 67 02 c0    	add    ecx,DWORD PTR ds:0xc00267c0
c000de32:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000de38:	89 cb                	mov    ebx,ecx
c000de3a:	c1 fb 1f             	sar    ebx,0x1f
c000de3d:	29 c8                	sub    eax,ecx
c000de3f:	19 da                	sbb    edx,ebx
c000de41:	31 c9                	xor    ecx,ecx
c000de43:	80 3d bd 67 02 c0 00 	cmp    BYTE PTR ds:0xc00267bd,0x0
c000de4a:	74 05                	je     c000de51 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000de4c:	b9 08 07 00 00       	mov    ecx,0x708
c000de51:	31 db                	xor    ebx,ebx
c000de53:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000de57:	29 c8                	sub    eax,ecx
c000de59:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000de5d:	19 da                	sbb    edx,ebx
c000de5f:	89 f8                	mov    eax,edi
c000de61:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000de65:	5b                   	pop    ebx
c000de66:	5e                   	pop    esi
c000de67:	5f                   	pop    edi
c000de68:	ff e0                	jmp    eax

c000de6a <secondsToDatetime(unsigned long long)>:
c000de6a:	55                   	push   ebp
c000de6b:	57                   	push   edi
c000de6c:	56                   	push   esi
c000de6d:	53                   	push   ebx
c000de6e:	83 ec 1c             	sub    esp,0x1c
c000de71:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000de75:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000de79:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000de7d:	6a 00                	push   0x0
c000de7f:	68 80 51 01 00       	push   0x15180
c000de84:	55                   	push   ebp
c000de85:	57                   	push   edi
c000de86:	e8 c5 38 01 00       	call   c0021750 <__udivdi3>
c000de8b:	83 c4 10             	add    esp,0x10
c000de8e:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000de94:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de98:	6a 00                	push   0x0
c000de9a:	68 80 51 01 00       	push   0x15180
c000de9f:	55                   	push   ebp
c000dea0:	57                   	push   edi
c000dea1:	bf 10 0e 00 00       	mov    edi,0xe10
c000dea6:	e8 a5 39 01 00       	call   c0021850 <__umoddi3>
c000deab:	83 c4 10             	add    esp,0x10
c000deae:	99                   	cdq    
c000deaf:	f7 ff                	idiv   edi
c000deb1:	bf 3c 00 00 00       	mov    edi,0x3c
c000deb6:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000deb9:	89 d0                	mov    eax,edx
c000debb:	99                   	cdq    
c000debc:	f7 ff                	idiv   edi
c000debe:	85 db                	test   ebx,ebx
c000dec0:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000dec3:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000dec6:	79 11                	jns    c000ded9 <secondsToDatetime(unsigned long long)+0x6f>
c000dec8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000decc:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000ded2:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000ded7:	eb 07                	jmp    c000dee0 <secondsToDatetime(unsigned long long)+0x76>
c000ded9:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000dede:	89 d8                	mov    eax,ebx
c000dee0:	bf b4 05 00 00       	mov    edi,0x5b4
c000dee5:	99                   	cdq    
c000dee6:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000deeb:	f7 f9                	idiv   ecx
c000deed:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000def2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000def6:	31 d2                	xor    edx,edx
c000def8:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000df00:	01 c3                	add    ebx,eax
c000df02:	89 d8                	mov    eax,ebx
c000df04:	f7 f1                	div    ecx
c000df06:	31 d2                	xor    edx,edx
c000df08:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000df0b:	89 d8                	mov    eax,ebx
c000df0d:	f7 f7                	div    edi
c000df0f:	31 d2                	xor    edx,edx
c000df11:	29 c1                	sub    ecx,eax
c000df13:	89 d8                	mov    eax,ebx
c000df15:	f7 f5                	div    ebp
c000df17:	bd 6d 01 00 00       	mov    ebp,0x16d
c000df1c:	29 c1                	sub    ecx,eax
c000df1e:	31 d2                	xor    edx,edx
c000df20:	89 c8                	mov    eax,ecx
c000df22:	f7 f5                	div    ebp
c000df24:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000df29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000df2d:	31 d2                	xor    edx,edx
c000df2f:	89 c8                	mov    eax,ecx
c000df31:	f7 f5                	div    ebp
c000df33:	31 d2                	xor    edx,edx
c000df35:	01 c3                	add    ebx,eax
c000df37:	89 c8                	mov    eax,ecx
c000df39:	f7 f7                	div    edi
c000df3b:	bf 99 00 00 00       	mov    edi,0x99
c000df40:	29 c3                	sub    ebx,eax
c000df42:	31 d2                	xor    edx,edx
c000df44:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000df4c:	29 c3                	sub    ebx,eax
c000df4e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000df51:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000df54:	bb 05 00 00 00       	mov    ebx,0x5
c000df59:	83 c1 02             	add    ecx,0x2
c000df5c:	89 c8                	mov    eax,ecx
c000df5e:	f7 f7                	div    edi
c000df60:	31 d2                	xor    edx,edx
c000df62:	89 c7                	mov    edi,eax
c000df64:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000df6a:	83 c0 02             	add    eax,0x2
c000df6d:	f7 f3                	div    ebx
c000df6f:	89 eb                	mov    ebx,ebp
c000df71:	29 c3                	sub    ebx,eax
c000df73:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000df79:	88 1e                	mov    BYTE PTR [esi],bl
c000df7b:	19 c0                	sbb    eax,eax
c000df7d:	31 d2                	xor    edx,edx
c000df7f:	83 e0 0c             	and    eax,0xc
c000df82:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000df86:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000df8e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000df92:	83 f9 01             	cmp    ecx,0x1
c000df95:	0f 96 c2             	setbe  dl
c000df98:	41                   	inc    ecx
c000df99:	01 d0                	add    eax,edx
c000df9b:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000df9e:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000dfa2:	83 c4 1c             	add    esp,0x1c
c000dfa5:	89 f0                	mov    eax,esi
c000dfa7:	5b                   	pop    ebx
c000dfa8:	5e                   	pop    esi
c000dfa9:	5f                   	pop    edi
c000dfaa:	5d                   	pop    ebp
c000dfab:	c2 04 00             	ret    0x4

c000dfae <Clock::timeInDatetimeLocal()>:
c000dfae:	53                   	push   ebx
c000dfaf:	83 ec 14             	sub    esp,0x14
c000dfb2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dfb6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000dfba:	e8 83 fc ff ff       	call   c000dc42 <Clock::timeInSecondsLocal()>
c000dfbf:	83 c4 0c             	add    esp,0xc
c000dfc2:	52                   	push   edx
c000dfc3:	50                   	push   eax
c000dfc4:	53                   	push   ebx
c000dfc5:	e8 a0 fe ff ff       	call   c000de6a <secondsToDatetime(unsigned long long)>
c000dfca:	89 d8                	mov    eax,ebx
c000dfcc:	83 c4 14             	add    esp,0x14
c000dfcf:	5b                   	pop    ebx
c000dfd0:	c2 04 00             	ret    0x4
c000dfd3:	90                   	nop

c000dfd4 <Device::hibernate()>:
c000dfd4:	c3                   	ret    
c000dfd5:	90                   	nop

c000dfd6 <Device::wake()>:
c000dfd6:	c3                   	ret    
c000dfd7:	90                   	nop

c000dfd8 <Device::detect()>:
c000dfd8:	c3                   	ret    
c000dfd9:	90                   	nop

c000dfda <Device::disableLegacy()>:
c000dfda:	c3                   	ret    
c000dfdb:	90                   	nop

c000dfdc <Device::powerSaving(PowerSavingLevel)>:
c000dfdc:	c3                   	ret    
c000dfdd:	90                   	nop

c000dfde <DriverlessDevice::close(int, int, void*)>:
c000dfde:	31 c0                	xor    eax,eax
c000dfe0:	c3                   	ret    
c000dfe1:	90                   	nop

c000dfe2 <DriverlessDevice::detect()>:
c000dfe2:	c3                   	ret    
c000dfe3:	90                   	nop

c000dfe4 <DriverlessDevice::open(int, int, void*)>:
c000dfe4:	83 ec 18             	sub    esp,0x18
c000dfe7:	68 b0 38 02 c0       	push   0xc00238b0
c000dfec:	e8 16 50 00 00       	call   c0013007 <Krnl::panic(char const*)>
c000dff1:	83 c8 ff             	or     eax,0xffffffff
c000dff4:	83 c4 1c             	add    esp,0x1c
c000dff7:	c3                   	ret    

c000dff8 <Device::~Device()>:
c000dff8:	ba 10 39 02 c0       	mov    edx,0xc0023910
c000dffd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e001:	89 10                	mov    DWORD PTR [eax],edx
c000e003:	90                   	nop
c000e004:	c3                   	ret    
c000e005:	90                   	nop

c000e006 <Device::~Device()>:
c000e006:	83 ec 0c             	sub    esp,0xc
c000e009:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e00d:	e8 e6 ff ff ff       	call   c000dff8 <Device::~Device()>
c000e012:	83 c4 04             	add    esp,0x4
c000e015:	83 ec 08             	sub    esp,0x8
c000e018:	68 58 01 00 00       	push   0x158
c000e01d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e021:	e8 72 eb ff ff       	call   c000cb98 <operator delete(void*, unsigned long)>
c000e026:	83 c4 10             	add    esp,0x10
c000e029:	83 c4 0c             	add    esp,0xc
c000e02c:	c3                   	ret    
c000e02d:	90                   	nop

c000e02e <Device::findAndLoadDriver()>:
c000e02e:	c7 44 24 04 ce 38 02 c0 	mov    DWORD PTR [esp+0x4],0xc00238ce
c000e036:	e9 3e ec ff ff       	jmp    c000cc79 <Dbg::kprintf(char const*, ...)>
c000e03b:	90                   	nop

c000e03c <Device::preOpenPCI(PCIDeviceInfo)>:
c000e03c:	57                   	push   edi
c000e03d:	b9 09 00 00 00       	mov    ecx,0x9
c000e042:	56                   	push   esi
c000e043:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e047:	8d 74 24 10          	lea    esi,[esp+0x10]
c000e04b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000e055:	81 c7 18 01 00 00    	add    edi,0x118
c000e05b:	fc                   	cld    
c000e05c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e05e:	5e                   	pop    esi
c000e05f:	5f                   	pop    edi
c000e060:	c3                   	ret    
c000e061:	90                   	nop

c000e062 <Device::preOpenACPI(void*, char*, char*)>:
c000e062:	57                   	push   edi
c000e063:	b9 1e 00 00 00       	mov    ecx,0x1e
c000e068:	56                   	push   esi
c000e069:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e06d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e071:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000e07b:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000e081:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000e087:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e08b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e08d:	b9 0e 00 00 00       	mov    ecx,0xe
c000e092:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000e098:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e09c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e09e:	5e                   	pop    esi
c000e09f:	5f                   	pop    edi
c000e0a0:	c3                   	ret    
c000e0a1:	90                   	nop

c000e0a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e0a2:	53                   	push   ebx
c000e0a3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e0a7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e0ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e0af:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e0b3:	0f b6 c0             	movzx  eax,al
c000e0b6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000e0ba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0be:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e0c2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e0c6:	5b                   	pop    ebx
c000e0c7:	e9 10 06 00 00       	jmp    c000e6dc <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000e0cc <Device::getParent()>:
c000e0cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e0d0:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000e0d6:	c3                   	ret    
c000e0d7:	90                   	nop

c000e0d8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e0d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e0dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e0e0:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000e0e5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e0e9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e0ed:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e0f1:	e9 45 07 00 00       	jmp    c000e83b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000e0f6 <Device::addChild(Device*)>:
c000e0f6:	53                   	push   ebx
c000e0f7:	83 ec 08             	sub    esp,0x8
c000e0fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e0fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e102:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000e108:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000e10e:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e110:	85 d2                	test   edx,edx
c000e112:	74 04                	je     c000e118 <Device::addChild(Device*)+0x22>
c000e114:	89 d3                	mov    ebx,edx
c000e116:	eb f6                	jmp    c000e10e <Device::addChild(Device*)+0x18>
c000e118:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e11b:	83 ec 0c             	sub    esp,0xc
c000e11e:	6a 08                	push   0x8
c000e120:	e8 46 b8 ff ff       	call   c000996b <malloc>
c000e125:	89 03                	mov    DWORD PTR [ebx],eax
c000e127:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e12d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e134:	83 c4 18             	add    esp,0x18
c000e137:	5b                   	pop    ebx
c000e138:	c3                   	ret    
c000e139:	90                   	nop

c000e13a <Device::removeAllChildren()>:
c000e13a:	56                   	push   esi
c000e13b:	53                   	push   ebx
c000e13c:	52                   	push   edx
c000e13d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e141:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000e147:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e14a:	74 17                	je     c000e163 <Device::removeAllChildren()+0x29>
c000e14c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e14f:	85 c0                	test   eax,eax
c000e151:	74 0c                	je     c000e15f <Device::removeAllChildren()+0x25>
c000e153:	83 ec 0c             	sub    esp,0xc
c000e156:	8b 10                	mov    edx,DWORD PTR [eax]
c000e158:	50                   	push   eax
c000e159:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000e15c:	83 c4 10             	add    esp,0x10
c000e15f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e161:	eb e4                	jmp    c000e147 <Device::removeAllChildren()+0xd>
c000e163:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e169:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e16f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e175:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e17c:	58                   	pop    eax
c000e17d:	5b                   	pop    ebx
c000e17e:	5e                   	pop    esi
c000e17f:	c3                   	ret    

c000e180 <Device::hibernateAll()>:
c000e180:	53                   	push   ebx
c000e181:	83 ec 14             	sub    esp,0x14
c000e184:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e188:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e18a:	53                   	push   ebx
c000e18b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e18e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e194:	83 c4 10             	add    esp,0x10
c000e197:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e19a:	74 0f                	je     c000e1ab <Device::hibernateAll()+0x2b>
c000e19c:	83 ec 0c             	sub    esp,0xc
c000e19f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e1a2:	e8 d9 ff ff ff       	call   c000e180 <Device::hibernateAll()>
c000e1a7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e1a9:	eb e9                	jmp    c000e194 <Device::hibernateAll()+0x14>
c000e1ab:	83 c4 08             	add    esp,0x8
c000e1ae:	5b                   	pop    ebx
c000e1af:	c3                   	ret    

c000e1b0 <Device::wakeAll()>:
c000e1b0:	53                   	push   ebx
c000e1b1:	83 ec 14             	sub    esp,0x14
c000e1b4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e1b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e1ba:	53                   	push   ebx
c000e1bb:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000e1be:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e1c4:	83 c4 10             	add    esp,0x10
c000e1c7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e1ca:	74 0f                	je     c000e1db <Device::wakeAll()+0x2b>
c000e1cc:	83 ec 0c             	sub    esp,0xc
c000e1cf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e1d2:	e8 d9 ff ff ff       	call   c000e1b0 <Device::wakeAll()>
c000e1d7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e1d9:	eb e9                	jmp    c000e1c4 <Device::wakeAll()+0x14>
c000e1db:	83 c4 08             	add    esp,0x8
c000e1de:	5b                   	pop    ebx
c000e1df:	c3                   	ret    

c000e1e0 <Device::detectAll()>:
c000e1e0:	53                   	push   ebx
c000e1e1:	83 ec 14             	sub    esp,0x14
c000e1e4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e1e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e1ea:	53                   	push   ebx
c000e1eb:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000e1ee:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e1f4:	83 c4 10             	add    esp,0x10
c000e1f7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e1fa:	74 0f                	je     c000e20b <Device::detectAll()+0x2b>
c000e1fc:	83 ec 0c             	sub    esp,0xc
c000e1ff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e202:	e8 d9 ff ff ff       	call   c000e1e0 <Device::detectAll()>
c000e207:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e209:	eb e9                	jmp    c000e1f4 <Device::detectAll()+0x14>
c000e20b:	83 c4 08             	add    esp,0x8
c000e20e:	5b                   	pop    ebx
c000e20f:	c3                   	ret    

c000e210 <Device::disableLegacyAll()>:
c000e210:	53                   	push   ebx
c000e211:	83 ec 14             	sub    esp,0x14
c000e214:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e218:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e21a:	53                   	push   ebx
c000e21b:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000e21e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e224:	83 c4 10             	add    esp,0x10
c000e227:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e22a:	74 0f                	je     c000e23b <Device::disableLegacyAll()+0x2b>
c000e22c:	83 ec 0c             	sub    esp,0xc
c000e22f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e232:	e8 d9 ff ff ff       	call   c000e210 <Device::disableLegacyAll()>
c000e237:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e239:	eb e9                	jmp    c000e224 <Device::disableLegacyAll()+0x14>
c000e23b:	83 c4 08             	add    esp,0x8
c000e23e:	5b                   	pop    ebx
c000e23f:	c3                   	ret    

c000e240 <Device::loadDriversForAll()>:
c000e240:	53                   	push   ebx
c000e241:	83 ec 08             	sub    esp,0x8
c000e244:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e248:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000e24f:	75 0c                	jne    c000e25d <Device::loadDriversForAll()+0x1d>
c000e251:	83 ec 0c             	sub    esp,0xc
c000e254:	53                   	push   ebx
c000e255:	e8 d4 fd ff ff       	call   c000e02e <Device::findAndLoadDriver()>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e263:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e266:	74 12                	je     c000e27a <Device::loadDriversForAll()+0x3a>
c000e268:	83 ec 0c             	sub    esp,0xc
c000e26b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e26e:	e8 cd ff ff ff       	call   c000e240 <Device::loadDriversForAll()>
c000e273:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e275:	83 c4 10             	add    esp,0x10
c000e278:	eb e9                	jmp    c000e263 <Device::loadDriversForAll()+0x23>
c000e27a:	83 c4 08             	add    esp,0x8
c000e27d:	5b                   	pop    ebx
c000e27e:	c3                   	ret    
c000e27f:	90                   	nop

c000e280 <Device::closeAll()>:
c000e280:	53                   	push   ebx
c000e281:	83 ec 08             	sub    esp,0x8
c000e284:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e288:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e28a:	6a 00                	push   0x0
c000e28c:	6a 00                	push   0x0
c000e28e:	6a 00                	push   0x0
c000e290:	53                   	push   ebx
c000e291:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e294:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e29a:	83 c4 10             	add    esp,0x10
c000e29d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e2a0:	74 0f                	je     c000e2b1 <Device::closeAll()+0x31>
c000e2a2:	83 ec 0c             	sub    esp,0xc
c000e2a5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e2a8:	e8 d3 ff ff ff       	call   c000e280 <Device::closeAll()>
c000e2ad:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e2af:	eb e9                	jmp    c000e29a <Device::closeAll()+0x1a>
c000e2b1:	83 c4 08             	add    esp,0x8
c000e2b4:	5b                   	pop    ebx
c000e2b5:	c3                   	ret    

c000e2b6 <Device::powerSavingAll(PowerSavingLevel)>:
c000e2b6:	56                   	push   esi
c000e2b7:	53                   	push   ebx
c000e2b8:	83 ec 0c             	sub    esp,0xc
c000e2bb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e2bf:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e2c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e2c5:	56                   	push   esi
c000e2c6:	53                   	push   ebx
c000e2c7:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e2ca:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e2d0:	83 c4 10             	add    esp,0x10
c000e2d3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e2d6:	74 0f                	je     c000e2e7 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e2d8:	52                   	push   edx
c000e2d9:	52                   	push   edx
c000e2da:	56                   	push   esi
c000e2db:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e2de:	e8 d3 ff ff ff       	call   c000e2b6 <Device::powerSavingAll(PowerSavingLevel)>
c000e2e3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e2e5:	eb e9                	jmp    c000e2d0 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e2e7:	58                   	pop    eax
c000e2e8:	5b                   	pop    ebx
c000e2e9:	5e                   	pop    esi
c000e2ea:	c3                   	ret    
c000e2eb:	90                   	nop

c000e2ec <Device::setName(char const*)>:
c000e2ec:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e2f4:	e9 3f 24 ff ff       	jmp    c0000738 <strcpy>
c000e2f9:	90                   	nop

c000e2fa <Device::Device(char const*)>:
c000e2fa:	83 ec 1c             	sub    esp,0x1c
c000e2fd:	ba 10 39 02 c0       	mov    edx,0xc0023910
c000e302:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e306:	89 10                	mov    DWORD PTR [eax],edx
c000e308:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e30c:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e316:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e31a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e324:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e328:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e332:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e336:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e340:	83 ec 08             	sub    esp,0x8
c000e343:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e347:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34b:	e8 9c ff ff ff       	call   c000e2ec <Device::setName(char const*)>
c000e350:	83 c4 10             	add    esp,0x10
c000e353:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e35b:	83 ec 0c             	sub    esp,0xc
c000e35e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e362:	e8 04 b6 ff ff       	call   c000996b <malloc>
c000e367:	83 c4 10             	add    esp,0x10
c000e36a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e370:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e377:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e37b:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e381:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e385:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e38b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e391:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e395:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e39b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e3a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3a6:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e3ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3b1:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e3b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3bc:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e3c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3ca:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e3d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3d8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e3e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3e6:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e3f0:	90                   	nop
c000e3f1:	83 c4 1c             	add    esp,0x1c
c000e3f4:	c3                   	ret    
c000e3f5:	90                   	nop

c000e3f6 <Device::getName()>:
c000e3f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3fa:	05 d0 00 00 00       	add    eax,0xd0
c000e3ff:	c3                   	ret    

c000e400 <DriverlessDevice::DriverlessDevice(char const*)>:
c000e400:	83 ec 0c             	sub    esp,0xc
c000e403:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e407:	83 ec 08             	sub    esp,0x8
c000e40a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e40e:	50                   	push   eax
c000e40f:	e8 e6 fe ff ff       	call   c000e2fa <Device::Device(char const*)>
c000e414:	83 c4 10             	add    esp,0x10
c000e417:	ba 3c 39 02 c0       	mov    edx,0xc002393c
c000e41c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e420:	89 10                	mov    DWORD PTR [eax],edx
c000e422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e426:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e430:	90                   	nop
c000e431:	83 c4 0c             	add    esp,0xc
c000e434:	c3                   	ret    
c000e435:	90                   	nop

c000e436 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e436:	57                   	push   edi
c000e437:	56                   	push   esi
c000e438:	53                   	push   ebx
c000e439:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e43d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e441:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e445:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e44b:	75 0c                	jne    c000e459 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e44d:	52                   	push   edx
c000e44e:	52                   	push   edx
c000e44f:	53                   	push   ebx
c000e450:	56                   	push   esi
c000e451:	e8 ac 37 01 00       	call   c0021c02 <LinkedList<Device>::addElement(Device*)>
c000e456:	83 c4 10             	add    esp,0x10
c000e459:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e45f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e462:	74 12                	je     c000e476 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e464:	50                   	push   eax
c000e465:	57                   	push   edi
c000e466:	56                   	push   esi
c000e467:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e46a:	e8 c7 ff ff ff       	call   c000e436 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e46f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e471:	83 c4 10             	add    esp,0x10
c000e474:	eb e9                	jmp    c000e45f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e476:	5b                   	pop    ebx
c000e477:	5e                   	pop    esi
c000e478:	5f                   	pop    edi
c000e479:	c3                   	ret    

c000e47a <getDevicesOfType(DeviceType)>:
c000e47a:	53                   	push   ebx
c000e47b:	83 ec 14             	sub    esp,0x14
c000e47e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e482:	53                   	push   ebx
c000e483:	e8 56 38 01 00       	call   c0021cde <LinkedList<Device>::LinkedList()>
c000e488:	83 c4 0c             	add    esp,0xc
c000e48b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e48f:	53                   	push   ebx
c000e490:	ff 35 88 66 02 c0    	push   DWORD PTR ds:0xc0026688
c000e496:	e8 9b ff ff ff       	call   c000e436 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e49b:	89 d8                	mov    eax,ebx
c000e49d:	83 c4 18             	add    esp,0x18
c000e4a0:	5b                   	pop    ebx
c000e4a1:	c2 04 00             	ret    0x4

c000e4a4 <HardDiskController::HardDiskController(char const*)>:
c000e4a4:	83 ec 0c             	sub    esp,0xc
c000e4a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4ab:	83 ec 08             	sub    esp,0x8
c000e4ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4b2:	50                   	push   eax
c000e4b3:	e8 42 fe ff ff       	call   c000e2fa <Device::Device(char const*)>
c000e4b8:	83 c4 10             	add    esp,0x10
c000e4bb:	ba 68 39 02 c0       	mov    edx,0xc0023968
c000e4c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4c4:	89 10                	mov    DWORD PTR [eax],edx
c000e4c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4ca:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000e4d4:	90                   	nop
c000e4d5:	83 c4 0c             	add    esp,0xc
c000e4d8:	c3                   	ret    
c000e4d9:	90                   	nop
c000e4da:	66 90                	xchg   ax,ax

c000e4dc <HardDiskController::~HardDiskController()>:
c000e4dc:	83 ec 0c             	sub    esp,0xc
c000e4df:	ba 68 39 02 c0       	mov    edx,0xc0023968
c000e4e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4e8:	89 10                	mov    DWORD PTR [eax],edx
c000e4ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4ee:	83 ec 0c             	sub    esp,0xc
c000e4f1:	50                   	push   eax
c000e4f2:	e8 01 fb ff ff       	call   c000dff8 <Device::~Device()>
c000e4f7:	83 c4 10             	add    esp,0x10
c000e4fa:	90                   	nop
c000e4fb:	83 c4 0c             	add    esp,0xc
c000e4fe:	c3                   	ret    
c000e4ff:	90                   	nop

c000e500 <HardDiskController::~HardDiskController()>:
c000e500:	83 ec 0c             	sub    esp,0xc
c000e503:	83 ec 0c             	sub    esp,0xc
c000e506:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e50a:	e8 cd ff ff ff       	call   c000e4dc <HardDiskController::~HardDiskController()>
c000e50f:	83 c4 10             	add    esp,0x10
c000e512:	83 ec 08             	sub    esp,0x8
c000e515:	68 58 01 00 00       	push   0x158
c000e51a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e51e:	e8 75 e6 ff ff       	call   c000cb98 <operator delete(void*, unsigned long)>
c000e523:	83 c4 10             	add    esp,0x10
c000e526:	83 c4 0c             	add    esp,0xc
c000e529:	c3                   	ret    

c000e52a <PhysicalDisk::eject()>:
c000e52a:	83 c8 ff             	or     eax,0xffffffff
c000e52d:	c3                   	ret    

c000e52e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000e52e:	83 ec 0c             	sub    esp,0xc
c000e531:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e535:	83 ec 08             	sub    esp,0x8
c000e538:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e53c:	50                   	push   eax
c000e53d:	e8 b8 fd ff ff       	call   c000e2fa <Device::Device(char const*)>
c000e542:	83 c4 10             	add    esp,0x10
c000e545:	ba 94 39 02 c0       	mov    edx,0xc0023994
c000e54a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e54e:	89 10                	mov    DWORD PTR [eax],edx
c000e550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e554:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000e55b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e55f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000e566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e56a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000e574:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e578:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e57c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000e582:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e586:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e590:	90                   	nop
c000e591:	83 c4 0c             	add    esp,0xc
c000e594:	c3                   	ret    
c000e595:	90                   	nop

c000e596 <PhysicalDisk::startCache()>:
c000e596:	56                   	push   esi
c000e597:	53                   	push   ebx
c000e598:	83 ec 10             	sub    esp,0x10
c000e59b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e59f:	6a 44                	push   0x44
c000e5a1:	e8 c5 b3 ff ff       	call   c000996b <malloc>
c000e5a6:	89 c6                	mov    esi,eax
c000e5a8:	58                   	pop    eax
c000e5a9:	5a                   	pop    edx
c000e5aa:	53                   	push   ebx
c000e5ab:	56                   	push   esi
c000e5ac:	e8 c7 15 00 00       	call   c000fb78 <VCache::VCache(PhysicalDisk*)>
c000e5b1:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e5b7:	83 c4 14             	add    esp,0x14
c000e5ba:	5b                   	pop    ebx
c000e5bb:	5e                   	pop    esi
c000e5bc:	c3                   	ret    
c000e5bd:	90                   	nop

c000e5be <PhysicalDisk::~PhysicalDisk()>:
c000e5be:	83 ec 0c             	sub    esp,0xc
c000e5c1:	ba 94 39 02 c0       	mov    edx,0xc0023994
c000e5c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5ca:	89 10                	mov    DWORD PTR [eax],edx
c000e5cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5d0:	83 ec 0c             	sub    esp,0xc
c000e5d3:	50                   	push   eax
c000e5d4:	e8 1f fa ff ff       	call   c000dff8 <Device::~Device()>
c000e5d9:	83 c4 10             	add    esp,0x10
c000e5dc:	90                   	nop
c000e5dd:	83 c4 0c             	add    esp,0xc
c000e5e0:	c3                   	ret    
c000e5e1:	90                   	nop

c000e5e2 <PhysicalDisk::~PhysicalDisk()>:
c000e5e2:	83 ec 0c             	sub    esp,0xc
c000e5e5:	83 ec 0c             	sub    esp,0xc
c000e5e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5ec:	e8 cd ff ff ff       	call   c000e5be <PhysicalDisk::~PhysicalDisk()>
c000e5f1:	83 c4 10             	add    esp,0x10
c000e5f4:	83 ec 08             	sub    esp,0x8
c000e5f7:	68 6c 01 00 00       	push   0x16c
c000e5fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e600:	e8 93 e5 ff ff       	call   c000cb98 <operator delete(void*, unsigned long)>
c000e605:	83 c4 10             	add    esp,0x10
c000e608:	83 c4 0c             	add    esp,0xc
c000e60b:	c3                   	ret    

c000e60c <int_handler>:
c000e60c:	55                   	push   ebp
c000e60d:	57                   	push   edi
c000e60e:	56                   	push   esi
c000e60f:	53                   	push   ebx
c000e610:	83 ec 0c             	sub    esp,0xc
c000e613:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000e617:	80 3d 64 91 02 c0 00 	cmp    BYTE PTR ds:0xc0029164,0x0
c000e61e:	74 0b                	je     c000e62b <int_handler+0x1f>
c000e620:	fa                   	cli    
c000e621:	f4                   	hlt    
c000e622:	80 3d 64 91 02 c0 00 	cmp    BYTE PTR ds:0xc0029164,0x0
c000e629:	75 f5                	jne    c000e620 <int_handler+0x14>
c000e62b:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000e62e:	8d 46 e0             	lea    eax,[esi-0x20]
c000e631:	83 f8 17             	cmp    eax,0x17
c000e634:	76 3e                	jbe    c000e674 <int_handler+0x68>
c000e636:	c1 e6 04             	shl    esi,0x4
c000e639:	31 db                	xor    ebx,ebx
c000e63b:	8d ae e0 77 02 c0    	lea    ebp,[esi-0x3ffd8820]
c000e641:	81 c6 e0 67 02 c0    	add    esi,0xc00267e0
c000e647:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000e64b:	85 c0                	test   eax,eax
c000e64d:	74 13                	je     c000e662 <int_handler+0x56>
c000e64f:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000e652:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000e656:	74 2a                	je     c000e682 <int_handler+0x76>
c000e658:	83 ec 08             	sub    esp,0x8
c000e65b:	52                   	push   edx
c000e65c:	57                   	push   edi
c000e65d:	ff d0                	call   eax
c000e65f:	83 c4 10             	add    esp,0x10
c000e662:	43                   	inc    ebx
c000e663:	83 fb 04             	cmp    ebx,0x4
c000e666:	75 df                	jne    c000e647 <int_handler+0x3b>
c000e668:	83 c4 0c             	add    esp,0xc
c000e66b:	31 c0                	xor    eax,eax
c000e66d:	5b                   	pop    ebx
c000e66e:	31 d2                	xor    edx,edx
c000e670:	5e                   	pop    esi
c000e671:	5f                   	pop    edi
c000e672:	5d                   	pop    ebp
c000e673:	c3                   	ret    
c000e674:	83 ec 0c             	sub    esp,0xc
c000e677:	50                   	push   eax
c000e678:	e8 e1 b6 00 00       	call   c0019d5e <Hal::endOfInterrupt(int)>
c000e67d:	83 c4 10             	add    esp,0x10
c000e680:	eb b4                	jmp    c000e636 <int_handler+0x2a>
c000e682:	83 ec 08             	sub    esp,0x8
c000e685:	52                   	push   edx
c000e686:	57                   	push   edi
c000e687:	ff d0                	call   eax
c000e689:	83 c4 10             	add    esp,0x10
c000e68c:	83 c4 0c             	add    esp,0xc
c000e68f:	5b                   	pop    ebx
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	5d                   	pop    ebp
c000e693:	c3                   	ret    

c000e694 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000e694:	56                   	push   esi
c000e695:	31 c0                	xor    eax,eax
c000e697:	53                   	push   ebx
c000e698:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e69c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e6a0:	89 ca                	mov    edx,ecx
c000e6a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e6a6:	c1 e2 04             	shl    edx,0x4
c000e6a9:	83 bc 82 e0 77 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd8820],0x0
c000e6b1:	74 15                	je     c000e6c8 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000e6b3:	40                   	inc    eax
c000e6b4:	83 f8 04             	cmp    eax,0x4
c000e6b7:	75 f0                	jne    c000e6a9 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000e6b9:	c7 44 24 0c c4 39 02 c0 	mov    DWORD PTR [esp+0xc],0xc00239c4
c000e6c1:	5b                   	pop    ebx
c000e6c2:	5e                   	pop    esi
c000e6c3:	e9 3f 49 00 00       	jmp    c0013007 <Krnl::panic(char const*)>
c000e6c8:	8d 04 88             	lea    eax,[eax+ecx*4]
c000e6cb:	89 1c 85 e0 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8820],ebx
c000e6d2:	89 34 85 e0 67 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9820],esi
c000e6d9:	5b                   	pop    ebx
c000e6da:	5e                   	pop    esi
c000e6db:	c3                   	ret    

c000e6dc <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e6dc:	57                   	push   edi
c000e6dd:	8b 15 88 66 02 c0    	mov    edx,DWORD PTR ds:0xc0026688
c000e6e3:	56                   	push   esi
c000e6e4:	53                   	push   ebx
c000e6e5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e6e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e6ed:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c000e6f4:	74 55                	je     c000e74b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6f>
c000e6f6:	89 c7                	mov    edi,eax
c000e6f8:	84 c0                	test   al,al
c000e6fa:	74 1e                	je     c000e71a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c000e6fc:	83 fe 0f             	cmp    esi,0xf
c000e6ff:	0f 8f cc 00 00 00    	jg     c000e7d1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf5>
c000e705:	0f b6 b6 a0 5d 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffda260]
c000e70c:	66 8b bc 36 80 8f 02 c0 	mov    di,WORD PTR [esi+esi*1-0x3ffd7080]
c000e714:	66 d1 ef             	shr    di,1
c000e717:	83 e7 01             	and    edi,0x1
c000e71a:	83 ec 08             	sub    esp,0x8
c000e71d:	31 db                	xor    ebx,ebx
c000e71f:	ff 35 00 a6 02 c0    	push   DWORD PTR ds:0xc002a600
c000e725:	68 d1 39 02 c0       	push   0xc00239d1
c000e72a:	e8 4a e5 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c000e72f:	83 c4 10             	add    esp,0x10
c000e732:	a1 00 a6 02 c0       	mov    eax,ds:0xc002a600
c000e737:	85 c0                	test   eax,eax
c000e739:	7f 51                	jg     c000e78c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb0>
c000e73b:	83 ec 0c             	sub    esp,0xc
c000e73e:	68 e8 39 02 c0       	push   0xc00239e8
c000e743:	e8 bf 48 00 00       	call   c0013007 <Krnl::panic(char const*)>
c000e748:	83 c4 10             	add    esp,0x10
c000e74b:	8d 4e 20             	lea    ecx,[esi+0x20]
c000e74e:	31 d2                	xor    edx,edx
c000e750:	89 c8                	mov    eax,ecx
c000e752:	c1 e0 04             	shl    eax,0x4
c000e755:	8b 9c 90 e0 77 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffd8820]
c000e75c:	85 db                	test   ebx,ebx
c000e75e:	0f 84 84 00 00 00    	je     c000e7e8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x10c>
c000e764:	42                   	inc    edx
c000e765:	83 fa 04             	cmp    edx,0x4
c000e768:	75 eb                	jne    c000e755 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x79>
c000e76a:	83 ec 0c             	sub    esp,0xc
c000e76d:	68 3c 3a 02 c0       	push   0xc0023a3c
c000e772:	e8 90 48 00 00       	call   c0013007 <Krnl::panic(char const*)>
c000e777:	83 c4 10             	add    esp,0x10
c000e77a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e77f:	5b                   	pop    ebx
c000e780:	5e                   	pop    esi
c000e781:	5f                   	pop    edi
c000e782:	c3                   	ret    
c000e783:	43                   	inc    ebx
c000e784:	39 1d 00 a6 02 c0    	cmp    DWORD PTR ds:0xc002a600,ebx
c000e78a:	7e af                	jle    c000e73b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c000e78c:	83 ec 08             	sub    esp,0x8
c000e78f:	56                   	push   esi
c000e790:	ff 34 9d 20 a6 02 c0 	push   DWORD PTR [ebx*4-0x3ffd59e0]
c000e797:	e8 80 26 01 00       	call   c0020e1c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000e79c:	83 c4 10             	add    esp,0x10
c000e79f:	84 c0                	test   al,al
c000e7a1:	74 e0                	je     c000e783 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa7>
c000e7a3:	50                   	push   eax
c000e7a4:	89 f8                	mov    eax,edi
c000e7a6:	0f b6 f8             	movzx  edi,al
c000e7a9:	8d 46 20             	lea    eax,[esi+0x20]
c000e7ac:	57                   	push   edi
c000e7ad:	0f b6 c0             	movzx  eax,al
c000e7b0:	6a 00                	push   0x0
c000e7b2:	50                   	push   eax
c000e7b3:	89 f0                	mov    eax,esi
c000e7b5:	6a 00                	push   0x0
c000e7b7:	0f b6 c0             	movzx  eax,al
c000e7ba:	6a 00                	push   0x0
c000e7bc:	50                   	push   eax
c000e7bd:	ff 34 9d 20 a6 02 c0 	push   DWORD PTR [ebx*4-0x3ffd59e0]
c000e7c4:	e8 cf 27 01 00       	call   c0020f98 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000e7c9:	83 c4 20             	add    esp,0x20
c000e7cc:	e9 7a ff ff ff       	jmp    c000e74b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6f>
c000e7d1:	83 ec 0c             	sub    esp,0xc
c000e7d4:	31 ff                	xor    edi,edi
c000e7d6:	68 04 3a 02 c0       	push   0xc0023a04
c000e7db:	e8 27 48 00 00       	call   c0013007 <Krnl::panic(char const*)>
c000e7e0:	83 c4 10             	add    esp,0x10
c000e7e3:	e9 32 ff ff ff       	jmp    c000e71a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c000e7e8:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000e7eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e7ef:	89 14 85 e0 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8820],edx
c000e7f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e7fa:	5b                   	pop    ebx
c000e7fb:	89 14 85 e0 67 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9820],edx
c000e802:	89 f0                	mov    eax,esi
c000e804:	5e                   	pop    esi
c000e805:	5f                   	pop    edi
c000e806:	c3                   	ret    

c000e807 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000e807:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e80b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e80f:	c1 e0 04             	shl    eax,0x4
c000e812:	8d 50 10             	lea    edx,[eax+0x10]
c000e815:	39 88 e0 77 02 c0    	cmp    DWORD PTR [eax-0x3ffd8820],ecx
c000e81b:	74 08                	je     c000e825 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000e81d:	83 c0 04             	add    eax,0x4
c000e820:	39 d0                	cmp    eax,edx
c000e822:	75 f1                	jne    c000e815 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000e824:	c3                   	ret    
c000e825:	c7 80 e0 77 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8820],0x0
c000e82f:	c7 80 e0 67 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9820],0x0
c000e839:	eb e2                	jmp    c000e81d <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000e83b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e83b:	53                   	push   ebx
c000e83c:	83 ec 08             	sub    esp,0x8
c000e83f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e843:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000e848:	74 0e                	je     c000e858 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000e84a:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c000e84f:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c000e856:	75 37                	jne    c000e88f <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000e858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85c:	83 c0 20             	add    eax,0x20
c000e85f:	c1 e0 04             	shl    eax,0x4
c000e862:	8d 50 10             	lea    edx,[eax+0x10]
c000e865:	39 98 e0 77 02 c0    	cmp    DWORD PTR [eax-0x3ffd8820],ebx
c000e86b:	74 0c                	je     c000e879 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000e86d:	83 c0 04             	add    eax,0x4
c000e870:	39 d0                	cmp    eax,edx
c000e872:	75 f1                	jne    c000e865 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000e874:	83 c4 08             	add    esp,0x8
c000e877:	5b                   	pop    ebx
c000e878:	c3                   	ret    
c000e879:	c7 80 e0 77 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8820],0x0
c000e883:	c7 80 e0 67 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9820],0x0
c000e88d:	eb de                	jmp    c000e86d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000e88f:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000e894:	7f 11                	jg     c000e8a7 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000e896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89a:	0f b6 80 a0 5d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda260]
c000e8a1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e8a5:	eb b1                	jmp    c000e858 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000e8a7:	83 ec 0c             	sub    esp,0xc
c000e8aa:	68 f5 39 02 c0       	push   0xc00239f5
c000e8af:	e8 53 47 00 00       	call   c0013007 <Krnl::panic(char const*)>
c000e8b4:	83 c4 10             	add    esp,0x10
c000e8b7:	eb 9f                	jmp    c000e858 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000e8b9 <setupINTS()>:
c000e8b9:	31 c0                	xor    eax,eax
c000e8bb:	c7 80 e0 77 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8820],0x0
c000e8c5:	c7 80 e0 67 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9820],0x0
c000e8cf:	c7 80 e4 77 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd881c],0x0
c000e8d9:	c7 80 e4 67 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd981c],0x0
c000e8e3:	c7 80 e8 77 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8818],0x0
c000e8ed:	c7 80 e8 67 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9818],0x0
c000e8f7:	c7 80 ec 77 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8814],0x0
c000e901:	c7 80 ec 67 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9814],0x0
c000e90b:	83 c0 10             	add    eax,0x10
c000e90e:	3d 00 10 00 00       	cmp    eax,0x1000
c000e913:	75 a6                	jne    c000e8bb <setupINTS()+0x2>
c000e915:	c3                   	ret    

c000e916 <convertLegacyIRQNumber(int)>:
c000e916:	83 ec 0c             	sub    esp,0xc
c000e919:	8b 15 88 66 02 c0    	mov    edx,DWORD PTR ds:0xc0026688
c000e91f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e923:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c000e92a:	74 0c                	je     c000e938 <convertLegacyIRQNumber(int)+0x22>
c000e92c:	83 f8 0f             	cmp    eax,0xf
c000e92f:	7f 0b                	jg     c000e93c <convertLegacyIRQNumber(int)+0x26>
c000e931:	0f b6 80 a0 5d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda260]
c000e938:	83 c4 0c             	add    esp,0xc
c000e93b:	c3                   	ret    
c000e93c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e940:	83 ec 0c             	sub    esp,0xc
c000e943:	68 04 3a 02 c0       	push   0xc0023a04
c000e948:	e8 ba 46 00 00       	call   c0013007 <Krnl::panic(char const*)>
c000e94d:	83 c4 10             	add    esp,0x10
c000e950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e954:	83 c4 0c             	add    esp,0xc
c000e957:	c3                   	ret    

c000e958 <startGUI(void*)>:
c000e958:	55                   	push   ebp
c000e959:	89 e5                	mov    ebp,esp
c000e95b:	53                   	push   ebx
c000e95c:	83 ec 04             	sub    esp,0x4
c000e95f:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c000e964:	48                   	dec    eax
c000e965:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c000e96a:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c000e96f:	85 c0                	test   eax,eax
c000e971:	75 01                	jne    c000e974 <startGUI(void*)+0x1c>
c000e973:	fb                   	sti    
c000e974:	8b 1d 88 66 02 c0    	mov    ebx,DWORD PTR ds:0xc0026688
c000e97a:	83 ec 08             	sub    esp,0x8
c000e97d:	6a 01                	push   0x1
c000e97f:	68 61 3a 02 c0       	push   0xc0023a61
c000e984:	e8 03 73 00 00       	call   c0015c8c <Thr::loadDLL(char const*, bool)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 ec 08             	sub    esp,0x8
c000e98f:	53                   	push   ebx
c000e990:	50                   	push   eax
c000e991:	e8 27 75 00 00       	call   c0015ebd <Thr::executeDLL(unsigned long, void*)>
c000e996:	83 c4 10             	add    esp,0x10
c000e999:	8b 1d 88 66 02 c0    	mov    ebx,DWORD PTR ds:0xc0026688
c000e99f:	83 ec 08             	sub    esp,0x8
c000e9a2:	6a 01                	push   0x1
c000e9a4:	68 7b 3a 02 c0       	push   0xc0023a7b
c000e9a9:	e8 de 72 00 00       	call   c0015c8c <Thr::loadDLL(char const*, bool)>
c000e9ae:	83 c4 10             	add    esp,0x10
c000e9b1:	83 ec 08             	sub    esp,0x8
c000e9b4:	53                   	push   ebx
c000e9b5:	50                   	push   eax
c000e9b6:	e8 02 75 00 00       	call   c0015ebd <Thr::executeDLL(unsigned long, void*)>
c000e9bb:	83 c4 10             	add    esp,0x10
c000e9be:	90                   	nop
c000e9bf:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000e9c2:	c9                   	leave  
c000e9c3:	c3                   	ret    

c000e9c4 <startGUIVESA(void*)>:
c000e9c4:	55                   	push   ebp
c000e9c5:	89 e5                	mov    ebp,esp
c000e9c7:	53                   	push   ebx
c000e9c8:	83 ec 04             	sub    esp,0x4
c000e9cb:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c000e9d0:	48                   	dec    eax
c000e9d1:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c000e9d6:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c000e9db:	85 c0                	test   eax,eax
c000e9dd:	75 01                	jne    c000e9e0 <startGUIVESA(void*)+0x1c>
c000e9df:	fb                   	sti    
c000e9e0:	8b 1d 88 66 02 c0    	mov    ebx,DWORD PTR ds:0xc0026688
c000e9e6:	83 ec 08             	sub    esp,0x8
c000e9e9:	6a 01                	push   0x1
c000e9eb:	68 99 3a 02 c0       	push   0xc0023a99
c000e9f0:	e8 97 72 00 00       	call   c0015c8c <Thr::loadDLL(char const*, bool)>
c000e9f5:	83 c4 10             	add    esp,0x10
c000e9f8:	83 ec 08             	sub    esp,0x8
c000e9fb:	53                   	push   ebx
c000e9fc:	50                   	push   eax
c000e9fd:	e8 bb 74 00 00       	call   c0015ebd <Thr::executeDLL(unsigned long, void*)>
c000ea02:	83 c4 10             	add    esp,0x10
c000ea05:	8b 1d 88 66 02 c0    	mov    ebx,DWORD PTR ds:0xc0026688
c000ea0b:	83 ec 08             	sub    esp,0x8
c000ea0e:	6a 01                	push   0x1
c000ea10:	68 7b 3a 02 c0       	push   0xc0023a7b
c000ea15:	e8 72 72 00 00       	call   c0015c8c <Thr::loadDLL(char const*, bool)>
c000ea1a:	83 c4 10             	add    esp,0x10
c000ea1d:	83 ec 08             	sub    esp,0x8
c000ea20:	53                   	push   ebx
c000ea21:	50                   	push   eax
c000ea22:	e8 96 74 00 00       	call   c0015ebd <Thr::executeDLL(unsigned long, void*)>
c000ea27:	83 c4 10             	add    esp,0x10
c000ea2a:	90                   	nop
c000ea2b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000ea2e:	c9                   	leave  
c000ea2f:	c3                   	ret    

c000ea30 <sendKeyToTerminal(unsigned char)>:
c000ea30:	55                   	push   ebp
c000ea31:	89 e5                	mov    ebp,esp
c000ea33:	83 ec 28             	sub    esp,0x28
c000ea36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ea39:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000ea3c:	a1 04 67 02 c0       	mov    eax,ds:0xc0026704
c000ea41:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000ea45:	83 ec 08             	sub    esp,0x8
c000ea48:	52                   	push   edx
c000ea49:	50                   	push   eax
c000ea4a:	e8 af c6 ff ff       	call   c000b0fe <VgaText::receiveKey(unsigned char)>
c000ea4f:	83 c4 10             	add    esp,0x10
c000ea52:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000ea56:	0f 85 8f 00 00 00    	jne    c000eaeb <sendKeyToTerminal(unsigned char)+0xbb>
c000ea5c:	fa                   	cli    
c000ea5d:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c000ea62:	40                   	inc    eax
c000ea63:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c000ea68:	a1 a4 9b 02 c0       	mov    eax,ds:0xc0029ba4
c000ea6d:	40                   	inc    eax
c000ea6e:	a3 a4 9b 02 c0       	mov    ds:0xc0029ba4,eax
c000ea73:	a1 e0 87 02 c0       	mov    eax,ds:0xc00287e0
c000ea78:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000ea7b:	c7 05 e0 87 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00287e0,0x0
c000ea85:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000ea89:	74 1f                	je     c000eaaa <sendKeyToTerminal(unsigned char)+0x7a>
c000ea8b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ea8e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000ea91:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000ea94:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ea97:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000ea9a:	83 ec 0c             	sub    esp,0xc
c000ea9d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000eaa0:	e8 83 80 00 00       	call   c0016b28 <unblockTask(ThreadControlBlock*)>
c000eaa5:	83 c4 10             	add    esp,0x10
c000eaa8:	eb db                	jmp    c000ea85 <sendKeyToTerminal(unsigned char)+0x55>
c000eaaa:	a1 a4 9b 02 c0       	mov    eax,ds:0xc0029ba4
c000eaaf:	48                   	dec    eax
c000eab0:	a3 a4 9b 02 c0       	mov    ds:0xc0029ba4,eax
c000eab5:	a1 a4 9b 02 c0       	mov    eax,ds:0xc0029ba4
c000eaba:	85 c0                	test   eax,eax
c000eabc:	75 18                	jne    c000ead6 <sendKeyToTerminal(unsigned char)+0xa6>
c000eabe:	a1 a0 9b 02 c0       	mov    eax,ds:0xc0029ba0
c000eac3:	85 c0                	test   eax,eax
c000eac5:	74 0f                	je     c000ead6 <sendKeyToTerminal(unsigned char)+0xa6>
c000eac7:	c7 05 a0 9b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029ba0,0x0
c000ead1:	e8 96 7b 00 00       	call   c001666c <schedule()>
c000ead6:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c000eadb:	48                   	dec    eax
c000eadc:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c000eae1:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c000eae6:	85 c0                	test   eax,eax
c000eae8:	75 01                	jne    c000eaeb <sendKeyToTerminal(unsigned char)+0xbb>
c000eaea:	fb                   	sti    
c000eaeb:	90                   	nop
c000eaec:	c9                   	leave  
c000eaed:	c3                   	ret    

c000eaee <sendKeyboardToken(KeyboardToken)>:
c000eaee:	55                   	push   ebp
c000eaef:	89 e5                	mov    ebp,esp
c000eaf1:	83 ec 18             	sub    esp,0x18
c000eaf4:	e8 e7 47 00 00       	call   c00132e0 <Krnl::userIOReceived()>
c000eaf9:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000eafc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eaff:	0f b7 c0             	movzx  eax,ax
c000eb02:	83 f2 01             	xor    edx,0x1
c000eb05:	88 90 00 88 02 c0    	mov    BYTE PTR [eax-0x3ffd7800],dl
c000eb0b:	a1 e8 87 02 c0       	mov    eax,ds:0xc00287e8
c000eb10:	85 c0                	test   eax,eax
c000eb12:	74 24                	je     c000eb38 <sendKeyboardToken(KeyboardToken)+0x4a>
c000eb14:	8b 0d e8 87 02 c0    	mov    ecx,DWORD PTR ds:0xc00287e8
c000eb1a:	83 ec 04             	sub    esp,0x4
c000eb1d:	68 00 88 02 c0       	push   0xc0028800
c000eb22:	83 ec 08             	sub    esp,0x8
c000eb25:	89 e2                	mov    edx,esp
c000eb27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eb2a:	89 02                	mov    DWORD PTR [edx],eax
c000eb2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000eb2f:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000eb33:	ff d1                	call   ecx
c000eb35:	83 c4 10             	add    esp,0x10
c000eb38:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000eb3c:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000eb3f:	a0 08 8c 02 c0       	mov    al,ds:0xc0028c08
c000eb44:	38 c2                	cmp    dl,al
c000eb46:	74 1c                	je     c000eb64 <sendKeyboardToken(KeyboardToken)+0x76>
c000eb48:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000eb4b:	a2 08 8c 02 c0       	mov    ds:0xc0028c08,al
c000eb50:	a0 08 8c 02 c0       	mov    al,ds:0xc0028c08
c000eb55:	0f b6 c0             	movzx  eax,al
c000eb58:	83 ec 0c             	sub    esp,0xc
c000eb5b:	50                   	push   eax
c000eb5c:	e8 e9 bb ff ff       	call   c000a74a <setTerminalScrollLock(bool)>
c000eb61:	83 c4 10             	add    esp,0x10
c000eb64:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000eb67:	84 c0                	test   al,al
c000eb69:	0f 84 ae 00 00 00    	je     c000ec1d <sendKeyboardToken(KeyboardToken)+0x12f>
c000eb6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eb72:	66 3d 10 03          	cmp    ax,0x310
c000eb76:	75 06                	jne    c000eb7e <sendKeyboardToken(KeyboardToken)+0x90>
c000eb78:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000eb7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eb81:	66 3d 11 03          	cmp    ax,0x311
c000eb85:	75 06                	jne    c000eb8d <sendKeyboardToken(KeyboardToken)+0x9f>
c000eb87:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000eb8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eb90:	66 3d 12 03          	cmp    ax,0x312
c000eb94:	75 06                	jne    c000eb9c <sendKeyboardToken(KeyboardToken)+0xae>
c000eb96:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000eb9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eb9f:	66 3d 13 03          	cmp    ax,0x313
c000eba3:	75 06                	jne    c000ebab <sendKeyboardToken(KeyboardToken)+0xbd>
c000eba5:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000ebab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ebae:	66 3d 14 03          	cmp    ax,0x314
c000ebb2:	75 06                	jne    c000ebba <sendKeyboardToken(KeyboardToken)+0xcc>
c000ebb4:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000ebba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ebbd:	66 3d 15 03          	cmp    ax,0x315
c000ebc1:	75 06                	jne    c000ebc9 <sendKeyboardToken(KeyboardToken)+0xdb>
c000ebc3:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000ebc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ebcc:	66 3d 16 03          	cmp    ax,0x316
c000ebd0:	75 06                	jne    c000ebd8 <sendKeyboardToken(KeyboardToken)+0xea>
c000ebd2:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000ebd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ebdb:	66 3d 17 03          	cmp    ax,0x317
c000ebdf:	75 06                	jne    c000ebe7 <sendKeyboardToken(KeyboardToken)+0xf9>
c000ebe1:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000ebe7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ebea:	66 3d 18 03          	cmp    ax,0x318
c000ebee:	75 06                	jne    c000ebf6 <sendKeyboardToken(KeyboardToken)+0x108>
c000ebf0:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000ebf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ebf9:	66 3d 19 03          	cmp    ax,0x319
c000ebfd:	75 06                	jne    c000ec05 <sendKeyboardToken(KeyboardToken)+0x117>
c000ebff:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000ec05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ec08:	66 3d 1a 03          	cmp    ax,0x31a
c000ec0c:	0f 85 c9 00 00 00    	jne    c000ecdb <sendKeyboardToken(KeyboardToken)+0x1ed>
c000ec12:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000ec18:	e9 be 00 00 00       	jmp    c000ecdb <sendKeyboardToken(KeyboardToken)+0x1ed>
c000ec1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ec20:	66 3d 10 03          	cmp    ax,0x310
c000ec24:	75 0a                	jne    c000ec30 <sendKeyboardToken(KeyboardToken)+0x142>
c000ec26:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000ec2c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ec30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ec33:	66 3d 11 03          	cmp    ax,0x311
c000ec37:	75 0a                	jne    c000ec43 <sendKeyboardToken(KeyboardToken)+0x155>
c000ec39:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000ec3f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ec43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ec46:	66 3d 12 03          	cmp    ax,0x312
c000ec4a:	75 0a                	jne    c000ec56 <sendKeyboardToken(KeyboardToken)+0x168>
c000ec4c:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000ec52:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ec56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ec59:	66 3d 13 03          	cmp    ax,0x313
c000ec5d:	75 0a                	jne    c000ec69 <sendKeyboardToken(KeyboardToken)+0x17b>
c000ec5f:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000ec65:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ec69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ec6c:	66 3d 14 03          	cmp    ax,0x314
c000ec70:	75 0a                	jne    c000ec7c <sendKeyboardToken(KeyboardToken)+0x18e>
c000ec72:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000ec78:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ec7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ec7f:	66 3d 15 03          	cmp    ax,0x315
c000ec83:	75 0a                	jne    c000ec8f <sendKeyboardToken(KeyboardToken)+0x1a1>
c000ec85:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000ec8b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ec8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ec92:	66 3d 16 03          	cmp    ax,0x316
c000ec96:	75 0a                	jne    c000eca2 <sendKeyboardToken(KeyboardToken)+0x1b4>
c000ec98:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000ec9e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000eca2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eca5:	66 3d 17 03          	cmp    ax,0x317
c000eca9:	75 0a                	jne    c000ecb5 <sendKeyboardToken(KeyboardToken)+0x1c7>
c000ecab:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000ecb1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ecb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ecb8:	66 3d 18 03          	cmp    ax,0x318
c000ecbc:	75 0a                	jne    c000ecc8 <sendKeyboardToken(KeyboardToken)+0x1da>
c000ecbe:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000ecc4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ecc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eccb:	66 3d 19 03          	cmp    ax,0x319
c000eccf:	75 0a                	jne    c000ecdb <sendKeyboardToken(KeyboardToken)+0x1ed>
c000ecd1:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000ecd7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ecdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ecde:	66 3d 00 02          	cmp    ax,0x200
c000ece2:	75 2c                	jne    c000ed10 <sendKeyboardToken(KeyboardToken)+0x222>
c000ece4:	a0 00 8c 02 c0       	mov    al,ds:0xc0028c00
c000ece9:	83 f0 01             	xor    eax,0x1
c000ecec:	84 c0                	test   al,al
c000ecee:	74 20                	je     c000ed10 <sendKeyboardToken(KeyboardToken)+0x222>
c000ecf0:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c000ecf5:	6a 01                	push   0x1
c000ecf7:	6a 00                	push   0x0
c000ecf9:	68 58 e9 00 c0       	push   0xc000e958
c000ecfe:	50                   	push   eax
c000ecff:	e8 4c 77 00 00       	call   c0016450 <Process::createThread(void (*)(void*), void*, int)>
c000ed04:	83 c4 10             	add    esp,0x10
c000ed07:	c6 05 00 8c 02 c0 01 	mov    BYTE PTR ds:0xc0028c00,0x1
c000ed0e:	eb 33                	jmp    c000ed43 <sendKeyboardToken(KeyboardToken)+0x255>
c000ed10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ed13:	66 3d 01 02          	cmp    ax,0x201
c000ed17:	75 2a                	jne    c000ed43 <sendKeyboardToken(KeyboardToken)+0x255>
c000ed19:	a0 00 8c 02 c0       	mov    al,ds:0xc0028c00
c000ed1e:	83 f0 01             	xor    eax,0x1
c000ed21:	84 c0                	test   al,al
c000ed23:	74 1e                	je     c000ed43 <sendKeyboardToken(KeyboardToken)+0x255>
c000ed25:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c000ed2a:	6a 01                	push   0x1
c000ed2c:	6a 00                	push   0x0
c000ed2e:	68 c4 e9 00 c0       	push   0xc000e9c4
c000ed33:	50                   	push   eax
c000ed34:	e8 17 77 00 00       	call   c0016450 <Process::createThread(void (*)(void*), void*, int)>
c000ed39:	83 c4 10             	add    esp,0x10
c000ed3c:	c6 05 00 8c 02 c0 01 	mov    BYTE PTR ds:0xc0028c00,0x1
c000ed43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ed46:	66 3d 1d 03          	cmp    ax,0x31d
c000ed4a:	75 06                	jne    c000ed52 <sendKeyboardToken(KeyboardToken)+0x264>
c000ed4c:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000ed52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ed55:	66 3d 1c 03          	cmp    ax,0x31c
c000ed59:	75 06                	jne    c000ed61 <sendKeyboardToken(KeyboardToken)+0x273>
c000ed5b:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000ed61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ed64:	66 3d 1b 03          	cmp    ax,0x31b
c000ed68:	75 06                	jne    c000ed70 <sendKeyboardToken(KeyboardToken)+0x282>
c000ed6a:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000ed70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ed73:	66 3d 1e 03          	cmp    ax,0x31e
c000ed77:	75 06                	jne    c000ed7f <sendKeyboardToken(KeyboardToken)+0x291>
c000ed79:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000ed7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ed82:	66 3d 1f 03          	cmp    ax,0x31f
c000ed86:	75 06                	jne    c000ed8e <sendKeyboardToken(KeyboardToken)+0x2a0>
c000ed88:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000ed8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ed91:	66 3d 1a 03          	cmp    ax,0x31a
c000ed95:	75 06                	jne    c000ed9d <sendKeyboardToken(KeyboardToken)+0x2af>
c000ed97:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000ed9d:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000eda1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000eda4:	83 f0 01             	xor    eax,0x1
c000eda7:	84 c0                	test   al,al
c000eda9:	74 77                	je     c000ee22 <sendKeyboardToken(KeyboardToken)+0x334>
c000edab:	a0 01 89 02 c0       	mov    al,ds:0xc0028901
c000edb0:	84 c0                	test   al,al
c000edb2:	74 41                	je     c000edf5 <sendKeyboardToken(KeyboardToken)+0x307>
c000edb4:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000edb8:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000edbc:	74 2b                	je     c000ede9 <sendKeyboardToken(KeyboardToken)+0x2fb>
c000edbe:	8b 15 04 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c04
c000edc4:	89 d0                	mov    eax,edx
c000edc6:	c1 e0 02             	shl    eax,0x2
c000edc9:	01 d0                	add    eax,edx
c000edcb:	01 c0                	add    eax,eax
c000edcd:	a3 04 8c 02 c0       	mov    ds:0xc0028c04,eax
c000edd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000edd5:	0f b7 c0             	movzx  eax,ax
c000edd8:	8d 50 d0             	lea    edx,[eax-0x30]
c000eddb:	a1 04 8c 02 c0       	mov    eax,ds:0xc0028c04
c000ede0:	01 d0                	add    eax,edx
c000ede2:	a3 04 8c 02 c0       	mov    ds:0xc0028c04,eax
c000ede7:	eb 6d                	jmp    c000ee56 <sendKeyboardToken(KeyboardToken)+0x368>
c000ede9:	c7 05 04 8c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028c04,0x0
c000edf3:	eb 61                	jmp    c000ee56 <sendKeyboardToken(KeyboardToken)+0x368>
c000edf5:	a1 04 8c 02 c0       	mov    eax,ds:0xc0028c04
c000edfa:	85 c0                	test   eax,eax
c000edfc:	74 18                	je     c000ee16 <sendKeyboardToken(KeyboardToken)+0x328>
c000edfe:	a1 04 8c 02 c0       	mov    eax,ds:0xc0028c04
c000ee03:	0f b6 c0             	movzx  eax,al
c000ee06:	83 ec 0c             	sub    esp,0xc
c000ee09:	50                   	push   eax
c000ee0a:	e8 21 fc ff ff       	call   c000ea30 <sendKeyToTerminal(unsigned char)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ee16:	c7 05 04 8c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028c04,0x0
c000ee20:	eb 34                	jmp    c000ee56 <sendKeyboardToken(KeyboardToken)+0x368>
c000ee22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ee25:	66 3d 01 01          	cmp    ax,0x101
c000ee29:	75 2b                	jne    c000ee56 <sendKeyboardToken(KeyboardToken)+0x368>
c000ee2b:	a1 04 8c 02 c0       	mov    eax,ds:0xc0028c04
c000ee30:	85 c0                	test   eax,eax
c000ee32:	74 18                	je     c000ee4c <sendKeyboardToken(KeyboardToken)+0x35e>
c000ee34:	a1 04 8c 02 c0       	mov    eax,ds:0xc0028c04
c000ee39:	0f b6 c0             	movzx  eax,al
c000ee3c:	83 ec 0c             	sub    esp,0xc
c000ee3f:	50                   	push   eax
c000ee40:	e8 eb fb ff ff       	call   c000ea30 <sendKeyToTerminal(unsigned char)>
c000ee45:	83 c4 10             	add    esp,0x10
c000ee48:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ee4c:	c7 05 04 8c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028c04,0x0
c000ee56:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000ee59:	83 f0 01             	xor    eax,0x1
c000ee5c:	84 c0                	test   al,al
c000ee5e:	74 4c                	je     c000eeac <sendKeyboardToken(KeyboardToken)+0x3be>
c000ee60:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ee63:	83 f0 01             	xor    eax,0x1
c000ee66:	84 c0                	test   al,al
c000ee68:	74 42                	je     c000eeac <sendKeyboardToken(KeyboardToken)+0x3be>
c000ee6a:	a0 00 89 02 c0       	mov    al,ds:0xc0028900
c000ee6f:	83 f0 01             	xor    eax,0x1
c000ee72:	84 c0                	test   al,al
c000ee74:	74 36                	je     c000eeac <sendKeyboardToken(KeyboardToken)+0x3be>
c000ee76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ee79:	66 83 f8 1f          	cmp    ax,0x1f
c000ee7d:	76 09                	jbe    c000ee88 <sendKeyboardToken(KeyboardToken)+0x39a>
c000ee7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ee82:	66 83 f8 7e          	cmp    ax,0x7e
c000ee86:	76 12                	jbe    c000ee9a <sendKeyboardToken(KeyboardToken)+0x3ac>
c000ee88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ee8b:	66 83 f8 0a          	cmp    ax,0xa
c000ee8f:	74 09                	je     c000ee9a <sendKeyboardToken(KeyboardToken)+0x3ac>
c000ee91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ee94:	66 83 f8 08          	cmp    ax,0x8
c000ee98:	75 12                	jne    c000eeac <sendKeyboardToken(KeyboardToken)+0x3be>
c000ee9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ee9d:	0f b6 c0             	movzx  eax,al
c000eea0:	83 ec 0c             	sub    esp,0xc
c000eea3:	50                   	push   eax
c000eea4:	e8 87 fb ff ff       	call   c000ea30 <sendKeyToTerminal(unsigned char)>
c000eea9:	83 c4 10             	add    esp,0x10
c000eeac:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000eeaf:	83 f0 01             	xor    eax,0x1
c000eeb2:	84 c0                	test   al,al
c000eeb4:	74 4f                	je     c000ef05 <sendKeyboardToken(KeyboardToken)+0x417>
c000eeb6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000eeb9:	83 f0 01             	xor    eax,0x1
c000eebc:	84 c0                	test   al,al
c000eebe:	74 45                	je     c000ef05 <sendKeyboardToken(KeyboardToken)+0x417>
c000eec0:	a0 00 89 02 c0       	mov    al,ds:0xc0028900
c000eec5:	84 c0                	test   al,al
c000eec7:	74 3c                	je     c000ef05 <sendKeyboardToken(KeyboardToken)+0x417>
c000eec9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eecc:	66 83 f8 3f          	cmp    ax,0x3f
c000eed0:	76 33                	jbe    c000ef05 <sendKeyboardToken(KeyboardToken)+0x417>
c000eed2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eed5:	66 83 f8 7f          	cmp    ax,0x7f
c000eed9:	77 2a                	ja     c000ef05 <sendKeyboardToken(KeyboardToken)+0x417>
c000eedb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eede:	88 c2                	mov    dl,al
c000eee0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eee3:	66 83 f8 5f          	cmp    ax,0x5f
c000eee7:	76 04                	jbe    c000eeed <sendKeyboardToken(KeyboardToken)+0x3ff>
c000eee9:	b0 20                	mov    al,0x20
c000eeeb:	eb 02                	jmp    c000eeef <sendKeyboardToken(KeyboardToken)+0x401>
c000eeed:	b0 00                	mov    al,0x0
c000eeef:	29 c2                	sub    edx,eax
c000eef1:	88 d0                	mov    al,dl
c000eef3:	83 e8 40             	sub    eax,0x40
c000eef6:	0f b6 c0             	movzx  eax,al
c000eef9:	83 ec 0c             	sub    esp,0xc
c000eefc:	50                   	push   eax
c000eefd:	e8 2e fb ff ff       	call   c000ea30 <sendKeyToTerminal(unsigned char)>
c000ef02:	83 c4 10             	add    esp,0x10
c000ef05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef08:	66 3d 00 03          	cmp    ax,0x300
c000ef0c:	75 0f                	jne    c000ef1d <sendKeyboardToken(KeyboardToken)+0x42f>
c000ef0e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ef11:	83 f0 01             	xor    eax,0x1
c000ef14:	84 c0                	test   al,al
c000ef16:	74 05                	je     c000ef1d <sendKeyboardToken(KeyboardToken)+0x42f>
c000ef18:	e8 9e bb ff ff       	call   c000aabb <doTerminalCycle()>
c000ef1d:	90                   	nop
c000ef1e:	c9                   	leave  
c000ef1f:	c3                   	ret    

c000ef20 <clearInternalKeybuffer(VgaText*)>:
c000ef20:	55                   	push   ebp
c000ef21:	89 e5                	mov    ebp,esp
c000ef23:	83 ec 08             	sub    esp,0x8
c000ef26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef29:	05 32 01 00 00       	add    eax,0x132
c000ef2e:	83 ec 0c             	sub    esp,0xc
c000ef31:	50                   	push   eax
c000ef32:	e8 61 17 ff ff       	call   c0000698 <strlen>
c000ef37:	83 c4 10             	add    esp,0x10
c000ef3a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ef3d:	81 c2 32 01 00 00    	add    edx,0x132
c000ef43:	83 ec 04             	sub    esp,0x4
c000ef46:	50                   	push   eax
c000ef47:	6a 00                	push   0x0
c000ef49:	52                   	push   edx
c000ef4a:	e8 2d 17 ff ff       	call   c000067c <memset>
c000ef4f:	83 c4 10             	add    esp,0x10
c000ef52:	90                   	nop
c000ef53:	c9                   	leave  
c000ef54:	c3                   	ret    

c000ef55 <readKeyboard(VgaText*, char*, unsigned long)>:
c000ef55:	55                   	push   ebp
c000ef56:	89 e5                	mov    ebp,esp
c000ef58:	83 ec 18             	sub    esp,0x18
c000ef5b:	a1 e8 87 02 c0       	mov    eax,ds:0xc00287e8
c000ef60:	85 c0                	test   eax,eax
c000ef62:	74 2a                	je     c000ef8e <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000ef64:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000ef6a:	8b 0d e8 87 02 c0    	mov    ecx,DWORD PTR ds:0xc00287e8
c000ef70:	83 ec 04             	sub    esp,0x4
c000ef73:	68 00 88 02 c0       	push   0xc0028800
c000ef78:	83 ec 08             	sub    esp,0x8
c000ef7b:	89 e2                	mov    edx,esp
c000ef7d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000ef80:	89 02                	mov    DWORD PTR [edx],eax
c000ef82:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000ef85:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000ef89:	ff d1                	call   ecx
c000ef8b:	83 c4 10             	add    esp,0x10
c000ef8e:	fb                   	sti    
c000ef8f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000ef96:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000ef9a:	0f 84 a1 00 00 00    	je     c000f041 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000efa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efa3:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c000efa9:	84 c0                	test   al,al
c000efab:	75 28                	jne    c000efd5 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000efad:	fa                   	cli    
c000efae:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c000efb3:	40                   	inc    eax
c000efb4:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c000efb9:	e8 ae 76 00 00       	call   c001666c <schedule()>
c000efbe:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c000efc3:	48                   	dec    eax
c000efc4:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c000efc9:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c000efce:	85 c0                	test   eax,eax
c000efd0:	75 ce                	jne    c000efa0 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000efd2:	fb                   	sti    
c000efd3:	eb cb                	jmp    c000efa0 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000efd5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000efd8:	8d 50 01             	lea    edx,[eax+0x1]
c000efdb:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000efde:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000efe1:	8a 92 32 01 00 00    	mov    dl,BYTE PTR [edx+0x132]
c000efe7:	88 10                	mov    BYTE PTR [eax],dl
c000efe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efec:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c000eff2:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000eff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eff8:	05 32 01 00 00       	add    eax,0x132
c000effd:	83 ec 0c             	sub    esp,0xc
c000f000:	50                   	push   eax
c000f001:	e8 92 16 ff ff       	call   c0000698 <strlen>
c000f006:	83 c4 10             	add    esp,0x10
c000f009:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000f00c:	81 c2 32 01 00 00    	add    edx,0x132
c000f012:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f015:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000f018:	81 c2 32 01 00 00    	add    edx,0x132
c000f01e:	83 ec 04             	sub    esp,0x4
c000f021:	50                   	push   eax
c000f022:	51                   	push   ecx
c000f023:	52                   	push   edx
c000f024:	e8 8b 15 ff ff       	call   c00005b4 <memmove>
c000f029:	83 c4 10             	add    esp,0x10
c000f02c:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000f02f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f032:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000f036:	0f 85 5a ff ff ff    	jne    c000ef96 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000f03c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f03f:	eb 03                	jmp    c000f044 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000f041:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f044:	c9                   	leave  
c000f045:	c3                   	ret    

c000f046 <Keyboard::Keyboard(char const*)>:
c000f046:	83 ec 0c             	sub    esp,0xc
c000f049:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f04d:	83 ec 08             	sub    esp,0x8
c000f050:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f054:	50                   	push   eax
c000f055:	e8 a0 f2 ff ff       	call   c000e2fa <Device::Device(char const*)>
c000f05a:	83 c4 10             	add    esp,0x10
c000f05d:	ba bc 3a 02 c0       	mov    edx,0xc0023abc
c000f062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f066:	89 10                	mov    DWORD PTR [eax],edx
c000f068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f06c:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000f076:	c6 05 e4 87 02 c0 01 	mov    BYTE PTR ds:0xc00287e4,0x1
c000f07d:	90                   	nop
c000f07e:	83 c4 0c             	add    esp,0xc
c000f081:	c3                   	ret    

c000f082 <Keyboard::~Keyboard()>:
c000f082:	83 ec 0c             	sub    esp,0xc
c000f085:	ba bc 3a 02 c0       	mov    edx,0xc0023abc
c000f08a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f08e:	89 10                	mov    DWORD PTR [eax],edx
c000f090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f094:	83 ec 0c             	sub    esp,0xc
c000f097:	50                   	push   eax
c000f098:	e8 5b ef ff ff       	call   c000dff8 <Device::~Device()>
c000f09d:	83 c4 10             	add    esp,0x10
c000f0a0:	90                   	nop
c000f0a1:	83 c4 0c             	add    esp,0xc
c000f0a4:	c3                   	ret    
c000f0a5:	90                   	nop

c000f0a6 <Keyboard::~Keyboard()>:
c000f0a6:	83 ec 0c             	sub    esp,0xc
c000f0a9:	83 ec 0c             	sub    esp,0xc
c000f0ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f0b0:	e8 cd ff ff ff       	call   c000f082 <Keyboard::~Keyboard()>
c000f0b5:	83 c4 10             	add    esp,0x10
c000f0b8:	83 ec 08             	sub    esp,0x8
c000f0bb:	68 5c 01 00 00       	push   0x15c
c000f0c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f0c4:	e8 cf da ff ff       	call   c000cb98 <operator delete(void*, unsigned long)>
c000f0c9:	83 c4 10             	add    esp,0x10
c000f0cc:	83 c4 0c             	add    esp,0xc
c000f0cf:	c3                   	ret    

c000f0d0 <LogicalDisk::close(int, int, void*)>:
c000f0d0:	83 c8 ff             	or     eax,0xffffffff
c000f0d3:	c3                   	ret    

c000f0d4 <LogicalDisk::~LogicalDisk()>:
c000f0d4:	83 ec 0c             	sub    esp,0xc
c000f0d7:	ba 8c 3b 02 c0       	mov    edx,0xc0023b8c
c000f0dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0e0:	89 10                	mov    DWORD PTR [eax],edx
c000f0e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0e6:	83 ec 0c             	sub    esp,0xc
c000f0e9:	50                   	push   eax
c000f0ea:	e8 09 ef ff ff       	call   c000dff8 <Device::~Device()>
c000f0ef:	83 c4 10             	add    esp,0x10
c000f0f2:	90                   	nop
c000f0f3:	83 c4 0c             	add    esp,0xc
c000f0f6:	c3                   	ret    
c000f0f7:	90                   	nop

c000f0f8 <LogicalDisk::~LogicalDisk()>:
c000f0f8:	83 ec 0c             	sub    esp,0xc
c000f0fb:	83 ec 0c             	sub    esp,0xc
c000f0fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f102:	e8 cd ff ff ff       	call   c000f0d4 <LogicalDisk::~LogicalDisk()>
c000f107:	83 c4 10             	add    esp,0x10
c000f10a:	83 ec 08             	sub    esp,0x8
c000f10d:	68 74 01 00 00       	push   0x174
c000f112:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f116:	e8 7d da ff ff       	call   c000cb98 <operator delete(void*, unsigned long)>
c000f11b:	83 c4 10             	add    esp,0x10
c000f11e:	83 c4 0c             	add    esp,0xc
c000f121:	c3                   	ret    

c000f122 <LogicalDisk::open(int, int, void*)>:
c000f122:	83 ec 18             	sub    esp,0x18
c000f125:	68 e8 3a 02 c0       	push   0xc0023ae8
c000f12a:	e8 d8 3e 00 00       	call   c0013007 <Krnl::panic(char const*)>
c000f12f:	83 c8 ff             	or     eax,0xffffffff
c000f132:	83 c4 1c             	add    esp,0x1c
c000f135:	c3                   	ret    

c000f136 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000f136:	53                   	push   ebx
c000f137:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f13b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f13f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f143:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000f149:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000f14f:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000f155:	77 10                	ja     c000f167 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000f157:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000f15d:	89 d3                	mov    ebx,edx
c000f15f:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000f165:	72 05                	jb     c000f16c <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000f167:	83 c8 ff             	or     eax,0xffffffff
c000f16a:	89 c2                	mov    edx,eax
c000f16c:	5b                   	pop    ebx
c000f16d:	c3                   	ret    

c000f16e <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000f16e:	56                   	push   esi
c000f16f:	83 c8 ff             	or     eax,0xffffffff
c000f172:	53                   	push   ebx
c000f173:	89 c2                	mov    edx,eax
c000f175:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f179:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f17d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f181:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000f187:	77 27                	ja     c000f1b0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000f189:	89 d8                	mov    eax,ebx
c000f18b:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000f191:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000f197:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f19c:	89 c2                	mov    edx,eax
c000f19e:	73 10                	jae    c000f1b0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000f1a0:	89 c8                	mov    eax,ecx
c000f1a2:	89 da                	mov    edx,ebx
c000f1a4:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000f1aa:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000f1b0:	5b                   	pop    ebx
c000f1b1:	5e                   	pop    esi
c000f1b2:	c3                   	ret    
c000f1b3:	90                   	nop

c000f1b4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000f1b4:	83 ec 1c             	sub    esp,0x1c
c000f1b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f1bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f1bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f1c7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f1cb:	89 04 24             	mov    DWORD PTR [esp],eax
c000f1ce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f1d2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f1d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f1da:	83 ec 08             	sub    esp,0x8
c000f1dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1e1:	50                   	push   eax
c000f1e2:	e8 13 f1 ff ff       	call   c000e2fa <Device::Device(char const*)>
c000f1e7:	83 c4 10             	add    esp,0x10
c000f1ea:	ba 8c 3b 02 c0       	mov    edx,0xc0023b8c
c000f1ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f1f3:	89 10                	mov    DWORD PTR [eax],edx
c000f1f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f1f9:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000f200:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f204:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000f20b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f20f:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000f219:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f21d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f221:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f225:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000f22b:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000f231:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f235:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000f238:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f23c:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000f242:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000f248:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f24c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f250:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000f256:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f25a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000f264:	90                   	nop
c000f265:	83 c4 1c             	add    esp,0x1c
c000f268:	c3                   	ret    
c000f269:	90                   	nop

c000f26a <LogicalDisk::assignDriveLetter()>:
c000f26a:	55                   	push   ebp
c000f26b:	57                   	push   edi
c000f26c:	56                   	push   esi
c000f26d:	53                   	push   ebx
c000f26e:	83 ec 14             	sub    esp,0x14
c000f271:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f275:	8b 3d 20 8c 02 c0    	mov    edi,DWORD PTR ds:0xc0028c20
c000f27b:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000f281:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000f285:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000f28b:	8b 3d 24 8c 02 c0    	mov    edi,DWORD PTR ds:0xc0028c24
c000f291:	3c 01                	cmp    al,0x1
c000f293:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000f297:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000f29b:	19 c0                	sbb    eax,eax
c000f29d:	83 e0 02             	and    eax,0x2
c000f2a0:	83 c0 41             	add    eax,0x41
c000f2a3:	0f be e8             	movsx  ebp,al
c000f2a6:	3c 43                	cmp    al,0x43
c000f2a8:	75 10                	jne    c000f2ba <LogicalDisk::assignDriveLetter()+0x50>
c000f2aa:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000f2b1:	75 5d                	jne    c000f310 <LogicalDisk::assignDriveLetter()+0xa6>
c000f2b3:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000f2b8:	75 56                	jne    c000f310 <LogicalDisk::assignDriveLetter()+0xa6>
c000f2ba:	8d 75 bf             	lea    esi,[ebp-0x41]
c000f2bd:	ba 01 00 00 00       	mov    edx,0x1
c000f2c2:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000f2c6:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000f2ca:	d3 e2                	shl    edx,cl
c000f2cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d0:	89 d7                	mov    edi,edx
c000f2d2:	89 d6                	mov    esi,edx
c000f2d4:	c1 ff 1f             	sar    edi,0x1f
c000f2d7:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000f2db:	21 f9                	and    ecx,edi
c000f2dd:	09 d1                	or     ecx,edx
c000f2df:	75 2f                	jne    c000f310 <LogicalDisk::assignDriveLetter()+0xa6>
c000f2e1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000f2e5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f2e9:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000f2ef:	09 f2                	or     edx,esi
c000f2f1:	89 15 20 8c 02 c0    	mov    DWORD PTR ds:0xc0028c20,edx
c000f2f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f2fb:	09 fa                	or     edx,edi
c000f2fd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000f301:	89 15 24 8c 02 c0    	mov    DWORD PTR ds:0xc0028c24,edx
c000f307:	89 1c bd 40 8c 02 c0 	mov    DWORD PTR [edi*4-0x3ffd73c0],ebx
c000f30e:	eb 08                	jmp    c000f318 <LogicalDisk::assignDriveLetter()+0xae>
c000f310:	45                   	inc    ebp
c000f311:	40                   	inc    eax
c000f312:	3c 5b                	cmp    al,0x5b
c000f314:	75 90                	jne    c000f2a6 <LogicalDisk::assignDriveLetter()+0x3c>
c000f316:	31 c0                	xor    eax,eax
c000f318:	83 c4 14             	add    esp,0x14
c000f31b:	5b                   	pop    ebx
c000f31c:	5e                   	pop    esi
c000f31d:	5f                   	pop    edi
c000f31e:	5d                   	pop    ebp
c000f31f:	c3                   	ret    

c000f320 <LogicalDisk::mount()>:
c000f320:	56                   	push   esi
c000f321:	53                   	push   ebx
c000f322:	83 ec 1c             	sub    esp,0x1c
c000f325:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000f329:	8b 1d b8 67 02 c0    	mov    ebx,DWORD PTR ds:0xc00267b8
c000f32f:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000f336:	50                   	push   eax
c000f337:	68 0c 3b 02 c0       	push   0xc0023b0c
c000f33c:	e8 38 d9 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c000f341:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000f34b:	83 c4 10             	add    esp,0x10
c000f34e:	85 db                	test   ebx,ebx
c000f350:	74 4e                	je     c000f3a0 <LogicalDisk::mount()+0x80>
c000f352:	83 ec 0c             	sub    esp,0xc
c000f355:	68 2d 3b 02 c0       	push   0xc0023b2d
c000f35a:	e8 1a d9 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c000f35f:	83 c4 0c             	add    esp,0xc
c000f362:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000f369:	8b 13                	mov    edx,DWORD PTR [ebx]
c000f36b:	83 e8 41             	sub    eax,0x41
c000f36e:	50                   	push   eax
c000f36f:	56                   	push   esi
c000f370:	53                   	push   ebx
c000f371:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000f374:	83 c4 10             	add    esp,0x10
c000f377:	84 c0                	test   al,al
c000f379:	74 20                	je     c000f39b <LogicalDisk::mount()+0x7b>
c000f37b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f37f:	83 ec 0c             	sub    esp,0xc
c000f382:	68 49 3b 02 c0       	push   0xc0023b49
c000f387:	e8 ed d8 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c000f38c:	83 c4 10             	add    esp,0x10
c000f38f:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000f395:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f399:	eb 07                	jmp    c000f3a2 <LogicalDisk::mount()+0x82>
c000f39b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000f39e:	eb ae                	jmp    c000f34e <LogicalDisk::mount()+0x2e>
c000f3a0:	31 c0                	xor    eax,eax
c000f3a2:	83 c4 14             	add    esp,0x14
c000f3a5:	5b                   	pop    ebx
c000f3a6:	5e                   	pop    esi
c000f3a7:	c3                   	ret    

c000f3a8 <LogicalDisk::unmount()>:
c000f3a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f3ac:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000f3b6:	c3                   	ret    
c000f3b7:	90                   	nop

c000f3b8 <LogicalDisk::eject()>:
c000f3b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f3bc:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000f3c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000f3c4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f3c8:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000f3cb:	90                   	nop

c000f3cc <LogicalDisk::unassignDriveLetter()>:
c000f3cc:	57                   	push   edi
c000f3cd:	56                   	push   esi
c000f3ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f3d2:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000f3d9:	84 c9                	test   cl,cl
c000f3db:	75 0f                	jne    c000f3ec <LogicalDisk::unassignDriveLetter()+0x20>
c000f3dd:	c7 44 24 0c 62 3b 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023b62
c000f3e5:	5e                   	pop    esi
c000f3e6:	5f                   	pop    edi
c000f3e7:	e9 1b 3c 00 00       	jmp    c0013007 <Krnl::panic(char const*)>
c000f3ec:	83 e9 41             	sub    ecx,0x41
c000f3ef:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000f3f6:	b8 01 00 00 00       	mov    eax,0x1
c000f3fb:	c7 04 8d 40 8c 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd73c0],0x0
c000f406:	d3 e0                	shl    eax,cl
c000f408:	89 c7                	mov    edi,eax
c000f40a:	f7 d0                	not    eax
c000f40c:	c1 ff 1f             	sar    edi,0x1f
c000f40f:	21 05 20 8c 02 c0    	and    DWORD PTR ds:0xc0028c20,eax
c000f415:	89 fe                	mov    esi,edi
c000f417:	f7 d6                	not    esi
c000f419:	21 35 24 8c 02 c0    	and    DWORD PTR ds:0xc0028c24,esi
c000f41f:	5e                   	pop    esi
c000f420:	5f                   	pop    edi
c000f421:	c3                   	ret    

c000f422 <LogicalDisk::read(unsigned long long, int, void*)>:
c000f422:	57                   	push   edi
c000f423:	56                   	push   esi
c000f424:	53                   	push   ebx
c000f425:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f429:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f42d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f431:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f435:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000f43b:	77 41                	ja     c000f47e <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000f43d:	99                   	cdq    
c000f43e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000f444:	01 c8                	add    eax,ecx
c000f446:	11 da                	adc    edx,ebx
c000f448:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000f44e:	19 d7                	sbb    edi,edx
c000f450:	72 33                	jb     c000f485 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000f452:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000f458:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000f45e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000f462:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000f466:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000f46c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000f472:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f476:	5b                   	pop    ebx
c000f477:	5e                   	pop    esi
c000f478:	5f                   	pop    edi
c000f479:	e9 34 0a 00 00       	jmp    c000feb2 <VCache::read(unsigned long long, int, void*)>
c000f47e:	b8 05 00 00 00       	mov    eax,0x5
c000f483:	eb 05                	jmp    c000f48a <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000f485:	b8 07 00 00 00       	mov    eax,0x7
c000f48a:	5b                   	pop    ebx
c000f48b:	5e                   	pop    esi
c000f48c:	5f                   	pop    edi
c000f48d:	c3                   	ret    

c000f48e <LogicalDisk::write(unsigned long long, int, void*)>:
c000f48e:	57                   	push   edi
c000f48f:	56                   	push   esi
c000f490:	53                   	push   ebx
c000f491:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f495:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f499:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f49d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f4a1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000f4a7:	77 41                	ja     c000f4ea <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000f4a9:	99                   	cdq    
c000f4aa:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000f4b0:	01 c8                	add    eax,ecx
c000f4b2:	11 da                	adc    edx,ebx
c000f4b4:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000f4ba:	19 d7                	sbb    edi,edx
c000f4bc:	72 33                	jb     c000f4f1 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000f4be:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000f4c4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000f4ca:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000f4ce:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000f4d2:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000f4d8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000f4de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f4e2:	5b                   	pop    ebx
c000f4e3:	5e                   	pop    esi
c000f4e4:	5f                   	pop    edi
c000f4e5:	e9 ce 08 00 00       	jmp    c000fdb8 <VCache::write(unsigned long long, int, void*)>
c000f4ea:	b8 05 00 00 00       	mov    eax,0x5
c000f4ef:	eb 05                	jmp    c000f4f6 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000f4f1:	b8 07 00 00 00       	mov    eax,0x7
c000f4f6:	5b                   	pop    ebx
c000f4f7:	5e                   	pop    esi
c000f4f8:	5f                   	pop    edi
c000f4f9:	c3                   	ret    
c000f4fa:	66 90                	xchg   ax,ax

c000f4fc <Mouse::Mouse(char const*)>:
c000f4fc:	83 ec 0c             	sub    esp,0xc
c000f4ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f503:	83 ec 08             	sub    esp,0x8
c000f506:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f50a:	50                   	push   eax
c000f50b:	e8 ea ed ff ff       	call   c000e2fa <Device::Device(char const*)>
c000f510:	83 c4 10             	add    esp,0x10
c000f513:	ba b8 3b 02 c0       	mov    edx,0xc0023bb8
c000f518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f51c:	89 10                	mov    DWORD PTR [eax],edx
c000f51e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f522:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000f52c:	90                   	nop
c000f52d:	83 c4 0c             	add    esp,0xc
c000f530:	c3                   	ret    
c000f531:	90                   	nop
c000f532:	66 90                	xchg   ax,ax

c000f534 <Mouse::~Mouse()>:
c000f534:	83 ec 0c             	sub    esp,0xc
c000f537:	ba b8 3b 02 c0       	mov    edx,0xc0023bb8
c000f53c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f540:	89 10                	mov    DWORD PTR [eax],edx
c000f542:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f546:	83 ec 0c             	sub    esp,0xc
c000f549:	50                   	push   eax
c000f54a:	e8 a9 ea ff ff       	call   c000dff8 <Device::~Device()>
c000f54f:	83 c4 10             	add    esp,0x10
c000f552:	90                   	nop
c000f553:	83 c4 0c             	add    esp,0xc
c000f556:	c3                   	ret    
c000f557:	90                   	nop

c000f558 <Mouse::~Mouse()>:
c000f558:	83 ec 0c             	sub    esp,0xc
c000f55b:	83 ec 0c             	sub    esp,0xc
c000f55e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f562:	e8 cd ff ff ff       	call   c000f534 <Mouse::~Mouse()>
c000f567:	83 c4 10             	add    esp,0x10
c000f56a:	83 ec 08             	sub    esp,0x8
c000f56d:	68 58 01 00 00       	push   0x158
c000f572:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f576:	e8 1d d6 ff ff       	call   c000cb98 <operator delete(void*, unsigned long)>
c000f57b:	83 c4 10             	add    esp,0x10
c000f57e:	83 c4 0c             	add    esp,0xc
c000f581:	c3                   	ret    

c000f582 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000f582:	55                   	push   ebp
c000f583:	57                   	push   edi
c000f584:	56                   	push   esi
c000f585:	53                   	push   ebx
c000f586:	81 ec 28 01 00 00    	sub    esp,0x128
c000f58c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000f593:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000f59a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000f5a1:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000f5a8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f5ac:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000f5b0:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000f5b7:	e8 3a ee ff ff       	call   c000e3f6 <Device::getName()>
c000f5bc:	5a                   	pop    edx
c000f5bd:	59                   	pop    ecx
c000f5be:	50                   	push   eax
c000f5bf:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000f5c3:	55                   	push   ebp
c000f5c4:	e8 6f 11 ff ff       	call   c0000738 <strcpy>
c000f5c9:	5b                   	pop    ebx
c000f5ca:	58                   	pop    eax
c000f5cb:	68 dc 3b 02 c0       	push   0xc0023bdc
c000f5d0:	55                   	push   ebp
c000f5d1:	e8 a2 12 ff ff       	call   c0000878 <strcat>
c000f5d6:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000f5dd:	e8 89 a3 ff ff       	call   c000996b <malloc>
c000f5e2:	83 c4 0c             	add    esp,0xc
c000f5e5:	89 c3                	mov    ebx,eax
c000f5e7:	57                   	push   edi
c000f5e8:	56                   	push   esi
c000f5e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f5ed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f5f1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000f5f8:	55                   	push   ebp
c000f5f9:	50                   	push   eax
c000f5fa:	e8 b5 fb ff ff       	call   c000f1b4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000f5ff:	83 c4 14             	add    esp,0x14
c000f602:	53                   	push   ebx
c000f603:	e8 62 fc ff ff       	call   c000f26a <LogicalDisk::assignDriveLetter()>
c000f608:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f60b:	e8 10 fd ff ff       	call   c000f320 <LogicalDisk::mount()>
c000f610:	58                   	pop    eax
c000f611:	5a                   	pop    edx
c000f612:	53                   	push   ebx
c000f613:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000f61a:	e8 d7 ea ff ff       	call   c000e0f6 <Device::addChild(Device*)>
c000f61f:	81 c4 2c 01 00 00    	add    esp,0x12c
c000f625:	5b                   	pop    ebx
c000f626:	5e                   	pop    esi
c000f627:	5f                   	pop    edi
c000f628:	5d                   	pop    ebp
c000f629:	c3                   	ret    

c000f62a <createPartitionsForDisk(PhysicalDisk*)>:
c000f62a:	55                   	push   ebp
c000f62b:	57                   	push   edi
c000f62c:	56                   	push   esi
c000f62d:	53                   	push   ebx
c000f62e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000f634:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000f63b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f641:	3d 00 02 00 00       	cmp    eax,0x200
c000f646:	74 27                	je     c000f66f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000f648:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000f64e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000f654:	83 ec 10             	sub    esp,0x10
c000f657:	0f a4 f7 0a          	shld   edi,esi,0xa
c000f65b:	99                   	cdq    
c000f65c:	c1 e6 0a             	shl    esi,0xa
c000f65f:	52                   	push   edx
c000f660:	89 fd                	mov    ebp,edi
c000f662:	50                   	push   eax
c000f663:	55                   	push   ebp
c000f664:	56                   	push   esi
c000f665:	e8 e6 20 01 00       	call   c0021750 <__udivdi3>
c000f66a:	e9 b1 00 00 00       	jmp    c000f720 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000f66f:	83 ec 0c             	sub    esp,0xc
c000f672:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f674:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000f678:	56                   	push   esi
c000f679:	6a 01                	push   0x1
c000f67b:	6a 00                	push   0x0
c000f67d:	6a 00                	push   0x0
c000f67f:	53                   	push   ebx
c000f680:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f683:	83 c4 20             	add    esp,0x20
c000f686:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000f68e:	75 0a                	jne    c000f69a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000f690:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000f698:	74 2c                	je     c000f6c6 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000f69a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000f6a0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000f6a6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000f6ac:	83 ec 10             	sub    esp,0x10
c000f6af:	0f a4 c2 0a          	shld   edx,eax,0xa
c000f6b3:	89 f7                	mov    edi,esi
c000f6b5:	c1 e0 0a             	shl    eax,0xa
c000f6b8:	c1 ff 1f             	sar    edi,0x1f
c000f6bb:	57                   	push   edi
c000f6bc:	56                   	push   esi
c000f6bd:	52                   	push   edx
c000f6be:	50                   	push   eax
c000f6bf:	e8 8c 20 01 00       	call   c0021750 <__udivdi3>
c000f6c4:	eb 5a                	jmp    c000f720 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000f6c6:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000f6cd:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000f6d4:	83 e1 7f             	and    ecx,0x7f
c000f6d7:	83 e0 7f             	and    eax,0x7f
c000f6da:	01 c1                	add    ecx,eax
c000f6dc:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000f6e3:	83 e0 7f             	and    eax,0x7f
c000f6e6:	01 c1                	add    ecx,eax
c000f6e8:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000f6ef:	83 e0 7f             	and    eax,0x7f
c000f6f2:	00 c1                	add    cl,al
c000f6f4:	74 41                	je     c000f737 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000f6f6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000f6fc:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000f702:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000f708:	83 ec 10             	sub    esp,0x10
c000f70b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000f70f:	89 f7                	mov    edi,esi
c000f711:	c1 e0 0a             	shl    eax,0xa
c000f714:	c1 ff 1f             	sar    edi,0x1f
c000f717:	57                   	push   edi
c000f718:	56                   	push   esi
c000f719:	52                   	push   edx
c000f71a:	50                   	push   eax
c000f71b:	e8 30 20 01 00       	call   c0021750 <__udivdi3>
c000f720:	83 c4 14             	add    esp,0x14
c000f723:	52                   	push   edx
c000f724:	50                   	push   eax
c000f725:	6a 00                	push   0x0
c000f727:	6a 00                	push   0x0
c000f729:	53                   	push   ebx
c000f72a:	e8 53 fe ff ff       	call   c000f582 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000f72f:	83 c4 20             	add    esp,0x20
c000f732:	e9 79 01 00 00       	jmp    c000f8b0 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000f737:	89 f0                	mov    eax,esi
c000f739:	31 f6                	xor    esi,esi
c000f73b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000f742:	75 02                	jne    c000f746 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000f744:	89 f1                	mov    ecx,esi
c000f746:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000f74d:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000f754:	c1 e2 08             	shl    edx,0x8
c000f757:	c1 e7 10             	shl    edi,0x10
c000f75a:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000f762:	09 fa                	or     edx,edi
c000f764:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000f76c:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000f773:	83 c0 10             	add    eax,0x10
c000f776:	09 fa                	or     edx,edi
c000f778:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000f77f:	c1 e7 18             	shl    edi,0x18
c000f782:	09 fa                	or     edx,edi
c000f784:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000f78b:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000f78f:	c1 e7 10             	shl    edi,0x10
c000f792:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000f799:	c1 e2 08             	shl    edx,0x8
c000f79c:	09 fa                	or     edx,edi
c000f79e:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000f7a5:	09 fa                	or     edx,edi
c000f7a7:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000f7ae:	c1 e7 18             	shl    edi,0x18
c000f7b1:	09 fa                	or     edx,edi
c000f7b3:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000f7b7:	46                   	inc    esi
c000f7b8:	83 fe 04             	cmp    esi,0x4
c000f7bb:	0f 85 7a ff ff ff    	jne    c000f73b <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000f7c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7c5:	83 f0 01             	xor    eax,0x1
c000f7c8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f7cc:	75 57                	jne    c000f825 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000f7ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f7d2:	83 f0 01             	xor    eax,0x1
c000f7d5:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000f7d9:	75 4a                	jne    c000f825 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000f7db:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000f7df:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000f7e7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000f7ef:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000f7f5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000f7fb:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000f801:	0f a4 c2 0a          	shld   edx,eax,0xa
c000f805:	89 f7                	mov    edi,esi
c000f807:	c1 e0 0a             	shl    eax,0xa
c000f80a:	c1 ff 1f             	sar    edi,0x1f
c000f80d:	57                   	push   edi
c000f80e:	56                   	push   esi
c000f80f:	52                   	push   edx
c000f810:	50                   	push   eax
c000f811:	e8 3a 1f 01 00       	call   c0021750 <__udivdi3>
c000f816:	83 c4 10             	add    esp,0x10
c000f819:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f81d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f821:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000f825:	84 c9                	test   cl,cl
c000f827:	74 53                	je     c000f87c <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000f829:	0f b6 c9             	movzx  ecx,cl
c000f82c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f830:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f834:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000f838:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000f83c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f840:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f844:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000f848:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000f84c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f850:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000f854:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f858:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f85c:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000f860:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000f864:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000f868:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000f86c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f870:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f874:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000f878:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000f87c:	31 ed                	xor    ebp,ebp
c000f87e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000f882:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000f886:	89 f8                	mov    eax,edi
c000f888:	09 f0                	or     eax,esi
c000f88a:	74 1e                	je     c000f8aa <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000f88c:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000f890:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000f894:	89 d1                	mov    ecx,edx
c000f896:	09 c1                	or     ecx,eax
c000f898:	74 10                	je     c000f8aa <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000f89a:	83 ec 0c             	sub    esp,0xc
c000f89d:	57                   	push   edi
c000f89e:	56                   	push   esi
c000f89f:	52                   	push   edx
c000f8a0:	50                   	push   eax
c000f8a1:	53                   	push   ebx
c000f8a2:	e8 db fc ff ff       	call   c000f582 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000f8a7:	83 c4 20             	add    esp,0x20
c000f8aa:	45                   	inc    ebp
c000f8ab:	83 fd 04             	cmp    ebp,0x4
c000f8ae:	75 ce                	jne    c000f87e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000f8b0:	81 c4 5c 02 00 00    	add    esp,0x25c
c000f8b6:	5b                   	pop    ebx
c000f8b7:	5e                   	pop    esi
c000f8b8:	5f                   	pop    edi
c000f8b9:	5d                   	pop    ebp
c000f8ba:	c3                   	ret    
c000f8bb:	90                   	nop

c000f8bc <Serial::Serial(char const*)>:
c000f8bc:	83 ec 0c             	sub    esp,0xc
c000f8bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8c3:	83 ec 08             	sub    esp,0x8
c000f8c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8ca:	50                   	push   eax
c000f8cb:	e8 2a ea ff ff       	call   c000e2fa <Device::Device(char const*)>
c000f8d0:	83 c4 10             	add    esp,0x10
c000f8d3:	ba f0 3b 02 c0       	mov    edx,0xc0023bf0
c000f8d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8dc:	89 10                	mov    DWORD PTR [eax],edx
c000f8de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8e2:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000f8ec:	90                   	nop
c000f8ed:	83 c4 0c             	add    esp,0xc
c000f8f0:	c3                   	ret    
c000f8f1:	90                   	nop
c000f8f2:	66 90                	xchg   ax,ax

c000f8f4 <Serial::~Serial()>:
c000f8f4:	83 ec 0c             	sub    esp,0xc
c000f8f7:	ba f0 3b 02 c0       	mov    edx,0xc0023bf0
c000f8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f900:	89 10                	mov    DWORD PTR [eax],edx
c000f902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f906:	83 ec 0c             	sub    esp,0xc
c000f909:	50                   	push   eax
c000f90a:	e8 e9 e6 ff ff       	call   c000dff8 <Device::~Device()>
c000f90f:	83 c4 10             	add    esp,0x10
c000f912:	90                   	nop
c000f913:	83 c4 0c             	add    esp,0xc
c000f916:	c3                   	ret    
c000f917:	90                   	nop

c000f918 <Serial::~Serial()>:
c000f918:	83 ec 0c             	sub    esp,0xc
c000f91b:	83 ec 0c             	sub    esp,0xc
c000f91e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f922:	e8 cd ff ff ff       	call   c000f8f4 <Serial::~Serial()>
c000f927:	83 c4 10             	add    esp,0x10
c000f92a:	83 ec 08             	sub    esp,0x8
c000f92d:	68 58 01 00 00       	push   0x158
c000f932:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f936:	e8 5d d2 ff ff       	call   c000cb98 <operator delete(void*, unsigned long)>
c000f93b:	83 c4 10             	add    esp,0x10
c000f93e:	83 c4 0c             	add    esp,0xc
c000f941:	c3                   	ret    
c000f942:	66 90                	xchg   ax,ax

c000f944 <Timer::Timer(char const*)>:
c000f944:	83 ec 0c             	sub    esp,0xc
c000f947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f94b:	83 ec 08             	sub    esp,0x8
c000f94e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f952:	50                   	push   eax
c000f953:	e8 a2 e9 ff ff       	call   c000e2fa <Device::Device(char const*)>
c000f958:	83 c4 10             	add    esp,0x10
c000f95b:	ba 34 3c 02 c0       	mov    edx,0xc0023c34
c000f960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f964:	89 10                	mov    DWORD PTR [eax],edx
c000f966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f96a:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000f974:	90                   	nop
c000f975:	83 c4 0c             	add    esp,0xc
c000f978:	c3                   	ret    
c000f979:	90                   	nop
c000f97a:	66 90                	xchg   ax,ax

c000f97c <Timer::~Timer()>:
c000f97c:	83 ec 0c             	sub    esp,0xc
c000f97f:	ba 34 3c 02 c0       	mov    edx,0xc0023c34
c000f984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f988:	89 10                	mov    DWORD PTR [eax],edx
c000f98a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f98e:	83 ec 0c             	sub    esp,0xc
c000f991:	50                   	push   eax
c000f992:	e8 61 e6 ff ff       	call   c000dff8 <Device::~Device()>
c000f997:	83 c4 10             	add    esp,0x10
c000f99a:	90                   	nop
c000f99b:	83 c4 0c             	add    esp,0xc
c000f99e:	c3                   	ret    
c000f99f:	90                   	nop

c000f9a0 <Timer::~Timer()>:
c000f9a0:	83 ec 0c             	sub    esp,0xc
c000f9a3:	83 ec 0c             	sub    esp,0xc
c000f9a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f9aa:	e8 cd ff ff ff       	call   c000f97c <Timer::~Timer()>
c000f9af:	83 c4 10             	add    esp,0x10
c000f9b2:	83 ec 08             	sub    esp,0x8
c000f9b5:	68 5c 01 00 00       	push   0x15c
c000f9ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f9be:	e8 d5 d1 ff ff       	call   c000cb98 <operator delete(void*, unsigned long)>
c000f9c3:	83 c4 10             	add    esp,0x10
c000f9c6:	83 c4 0c             	add    esp,0xc
c000f9c9:	c3                   	ret    

c000f9ca <Timer::read()>:
c000f9ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f9ce:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000f9d4:	c3                   	ret    

c000f9d5 <setupTimer(int)>:
c000f9d5:	53                   	push   ebx
c000f9d6:	83 ec 14             	sub    esp,0x14
c000f9d9:	68 5c 01 00 00       	push   0x15c
c000f9de:	e8 88 9f ff ff       	call   c000996b <malloc>
c000f9e3:	89 04 24             	mov    DWORD PTR [esp],eax
c000f9e6:	89 c3                	mov    ebx,eax
c000f9e8:	e8 bb 18 01 00       	call   c00212a8 <PIT::PIT()>
c000f9ed:	58                   	pop    eax
c000f9ee:	5a                   	pop    edx
c000f9ef:	53                   	push   ebx
c000f9f0:	ff 35 88 66 02 c0    	push   DWORD PTR ds:0xc0026688
c000f9f6:	e8 fb e6 ff ff       	call   c000e0f6 <Device::addChild(Device*)>
c000f9fb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f9fd:	6a 00                	push   0x0
c000f9ff:	6a 00                	push   0x0
c000fa01:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fa05:	53                   	push   ebx
c000fa06:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000fa09:	89 d8                	mov    eax,ebx
c000fa0b:	83 c4 28             	add    esp,0x28
c000fa0e:	5b                   	pop    ebx
c000fa0f:	c3                   	ret    

c000fa10 <timerHandler(unsigned int)>:
c000fa10:	56                   	push   esi
c000fa11:	53                   	push   ebx
c000fa12:	51                   	push   ecx
c000fa13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa17:	01 05 ac 8c 02 c0    	add    DWORD PTR ds:0xc0028cac,eax
c000fa1d:	80 3d 8d 66 02 c0 00 	cmp    BYTE PTR ds:0xc002668d,0x0
c000fa24:	0f 84 4a 01 00 00    	je     c000fb74 <timerHandler(unsigned int)+0x164>
c000fa2a:	fa                   	cli    
c000fa2b:	ff 05 a8 9b 02 c0    	inc    DWORD PTR ds:0xc0029ba8
c000fa31:	83 ec 0c             	sub    esp,0xc
c000fa34:	ff 05 a4 9b 02 c0    	inc    DWORD PTR ds:0xc0029ba4
c000fa3a:	68 b8 9b 02 c0       	push   0xc0029bb8
c000fa3f:	e8 dc 22 01 00       	call   c0021d20 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000fa44:	83 c4 10             	add    esp,0x10
c000fa47:	84 c0                	test   al,al
c000fa49:	0f 85 a1 00 00 00    	jne    c000faf0 <timerHandler(unsigned int)+0xe0>
c000fa4f:	83 ec 0c             	sub    esp,0xc
c000fa52:	68 b8 9b 02 c0       	push   0xc0029bb8
c000fa57:	e8 e0 22 01 00       	call   c0021d3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000fa5c:	83 c4 10             	add    esp,0x10
c000fa5f:	89 c6                	mov    esi,eax
c000fa61:	8d 76 00             	lea    esi,[esi+0x0]
c000fa64:	83 ec 0c             	sub    esp,0xc
c000fa67:	68 b8 9b 02 c0       	push   0xc0029bb8
c000fa6c:	e8 cb 22 01 00       	call   c0021d3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000fa71:	c7 04 24 b8 9b 02 c0 	mov    DWORD PTR [esp],0xc0029bb8
c000fa78:	89 c3                	mov    ebx,eax
c000fa7a:	e8 c5 22 01 00       	call   c0021d44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000fa7f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000fa82:	83 c4 10             	add    esp,0x10
c000fa85:	3b 05 ac 8c 02 c0    	cmp    eax,DWORD PTR ds:0xc0028cac
c000fa8b:	77 23                	ja     c000fab0 <timerHandler(unsigned int)+0xa0>
c000fa8d:	83 ec 0c             	sub    esp,0xc
c000fa90:	53                   	push   ebx
c000fa91:	e8 92 70 00 00       	call   c0016b28 <unblockTask(ThreadControlBlock*)>
c000fa96:	83 c4 10             	add    esp,0x10
c000fa99:	39 de                	cmp    esi,ebx
c000fa9b:	75 27                	jne    c000fac4 <timerHandler(unsigned int)+0xb4>
c000fa9d:	83 ec 0c             	sub    esp,0xc
c000faa0:	68 b8 9b 02 c0       	push   0xc0029bb8
c000faa5:	e8 92 22 01 00       	call   c0021d3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000faaa:	89 c6                	mov    esi,eax
c000faac:	eb 12                	jmp    c000fac0 <timerHandler(unsigned int)+0xb0>
c000faae:	66 90                	xchg   ax,ax
c000fab0:	52                   	push   edx
c000fab1:	52                   	push   edx
c000fab2:	53                   	push   ebx
c000fab3:	68 b8 9b 02 c0       	push   0xc0029bb8
c000fab8:	e8 3f 23 01 00       	call   c0021dfc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000fabd:	8d 76 00             	lea    esi,[esi+0x0]
c000fac0:	83 c4 10             	add    esp,0x10
c000fac3:	90                   	nop
c000fac4:	83 ec 0c             	sub    esp,0xc
c000fac7:	68 b8 9b 02 c0       	push   0xc0029bb8
c000facc:	e8 4f 22 01 00       	call   c0021d20 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000fad1:	83 c4 10             	add    esp,0x10
c000fad4:	84 c0                	test   al,al
c000fad6:	75 18                	jne    c000faf0 <timerHandler(unsigned int)+0xe0>
c000fad8:	83 ec 0c             	sub    esp,0xc
c000fadb:	68 b8 9b 02 c0       	push   0xc0029bb8
c000fae0:	e8 57 22 01 00       	call   c0021d3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000fae5:	83 c4 10             	add    esp,0x10
c000fae8:	39 f0                	cmp    eax,esi
c000faea:	0f 85 74 ff ff ff    	jne    c000fa64 <timerHandler(unsigned int)+0x54>
c000faf0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000faf5:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000faf9:	74 41                	je     c000fb3c <timerHandler(unsigned int)+0x12c>
c000fafb:	80 3d 8c 66 02 c0 00 	cmp    BYTE PTR ds:0xc002668c,0x0
c000fb02:	74 38                	je     c000fb3c <timerHandler(unsigned int)+0x12c>
c000fb04:	fa                   	cli    
c000fb05:	ff 05 a8 9b 02 c0    	inc    DWORD PTR ds:0xc0029ba8
c000fb0b:	a1 ac 8c 02 c0       	mov    eax,ds:0xc0028cac
c000fb10:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000fb16:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000fb19:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000fb1f:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000fb22:	72 08                	jb     c000fb2c <timerHandler(unsigned int)+0x11c>
c000fb24:	e8 43 6b 00 00       	call   c001666c <schedule()>
c000fb29:	8d 76 00             	lea    esi,[esi+0x0]
c000fb2c:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c000fb31:	48                   	dec    eax
c000fb32:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c000fb37:	75 03                	jne    c000fb3c <timerHandler(unsigned int)+0x12c>
c000fb39:	fb                   	sti    
c000fb3a:	66 90                	xchg   ax,ax
c000fb3c:	a1 a4 9b 02 c0       	mov    eax,ds:0xc0029ba4
c000fb41:	48                   	dec    eax
c000fb42:	a3 a4 9b 02 c0       	mov    ds:0xc0029ba4,eax
c000fb47:	75 1b                	jne    c000fb64 <timerHandler(unsigned int)+0x154>
c000fb49:	83 3d a0 9b 02 c0 00 	cmp    DWORD PTR ds:0xc0029ba0,0x0
c000fb50:	74 12                	je     c000fb64 <timerHandler(unsigned int)+0x154>
c000fb52:	c7 05 a0 9b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029ba0,0x0
c000fb5c:	e8 0b 6b 00 00       	call   c001666c <schedule()>
c000fb61:	8d 76 00             	lea    esi,[esi+0x0]
c000fb64:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c000fb69:	48                   	dec    eax
c000fb6a:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c000fb6f:	75 03                	jne    c000fb74 <timerHandler(unsigned int)+0x164>
c000fb71:	fb                   	sti    
c000fb72:	66 90                	xchg   ax,ax
c000fb74:	58                   	pop    eax
c000fb75:	5b                   	pop    ebx
c000fb76:	5e                   	pop    esi
c000fb77:	c3                   	ret    

c000fb78 <VCache::VCache(PhysicalDisk*)>:
c000fb78:	53                   	push   ebx
c000fb79:	83 ec 18             	sub    esp,0x18
c000fb7c:	ba 64 3c 02 c0       	mov    edx,0xc0023c64
c000fb81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb85:	89 10                	mov    DWORD PTR [eax],edx
c000fb87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb8b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000fb92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb96:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000fb9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fba1:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000fba8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000fbaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbb3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000fbba:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000fbc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbc5:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000fbcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbd0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000fbd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbd8:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000fbdf:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000fbe6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbea:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000fbee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbf2:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000fbf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbfa:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000fbfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc02:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000fc09:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000fc11:	83 ec 0c             	sub    esp,0xc
c000fc14:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc18:	e8 4e 9d ff ff       	call   c000996b <malloc>
c000fc1d:	83 c4 10             	add    esp,0x10
c000fc20:	89 c3                	mov    ebx,eax
c000fc22:	83 ec 0c             	sub    esp,0xc
c000fc25:	53                   	push   ebx
c000fc26:	e8 11 68 00 00       	call   c001643c <Mutex::Mutex()>
c000fc2b:	83 c4 10             	add    esp,0x10
c000fc2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc32:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000fc35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc39:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fc3d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000fc40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc44:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000fc4b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc4f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000fc55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc59:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fc5c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc60:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000fc66:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000fc6c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000fc70:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000fc73:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000fc76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc7a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000fc7e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc82:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000fc88:	05 00 01 00 00       	add    eax,0x100
c000fc8d:	c1 e0 04             	shl    eax,0x4
c000fc90:	83 ec 0c             	sub    esp,0xc
c000fc93:	50                   	push   eax
c000fc94:	e8 d2 9c ff ff       	call   c000996b <malloc>
c000fc99:	83 c4 10             	add    esp,0x10
c000fc9c:	89 c2                	mov    edx,eax
c000fc9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fca2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000fca5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fca9:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000fcb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcb4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000fcb8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcbc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000fcc2:	c1 e0 06             	shl    eax,0x6
c000fcc5:	83 ec 0c             	sub    esp,0xc
c000fcc8:	50                   	push   eax
c000fcc9:	e8 9d 9c ff ff       	call   c000996b <malloc>
c000fcce:	83 c4 10             	add    esp,0x10
c000fcd1:	89 c2                	mov    edx,eax
c000fcd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcd7:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000fcda:	90                   	nop
c000fcdb:	83 c4 18             	add    esp,0x18
c000fcde:	5b                   	pop    ebx
c000fcdf:	c3                   	ret    

c000fce0 <VCache::invalidateReadBuffer()>:
c000fce0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fce4:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000fcea:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000fcee:	c3                   	ret    
c000fcef:	90                   	nop

c000fcf0 <VCache::writeWriteBuffer()>:
c000fcf0:	53                   	push   ebx
c000fcf1:	83 ec 08             	sub    esp,0x8
c000fcf4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fcf8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000fcfc:	74 1e                	je     c000fd1c <VCache::writeWriteBuffer()+0x2c>
c000fcfe:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fd01:	83 ec 0c             	sub    esp,0xc
c000fd04:	8b 10                	mov    edx,DWORD PTR [eax]
c000fd06:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000fd09:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000fd0c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000fd0f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000fd12:	50                   	push   eax
c000fd13:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000fd16:	83 c4 20             	add    esp,0x20
c000fd19:	8d 76 00             	lea    esi,[esi+0x0]
c000fd1c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000fd23:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000fd2a:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000fd2e:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000fd35:	83 c4 08             	add    esp,0x8
c000fd38:	5b                   	pop    ebx
c000fd39:	c3                   	ret    
c000fd3a:	66 90                	xchg   ax,ax

c000fd3c <VCache::~VCache()>:
c000fd3c:	83 ec 0c             	sub    esp,0xc
c000fd3f:	ba 64 3c 02 c0       	mov    edx,0xc0023c64
c000fd44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd48:	89 10                	mov    DWORD PTR [eax],edx
c000fd4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd4e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000fd51:	84 c0                	test   al,al
c000fd53:	74 0f                	je     c000fd64 <VCache::~VCache()+0x28>
c000fd55:	83 ec 0c             	sub    esp,0xc
c000fd58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd5c:	e8 8f ff ff ff       	call   c000fcf0 <VCache::writeWriteBuffer()>
c000fd61:	83 c4 10             	add    esp,0x10
c000fd64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd68:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000fd6b:	83 ec 0c             	sub    esp,0xc
c000fd6e:	50                   	push   eax
c000fd6f:	e8 07 9c ff ff       	call   c000997b <free>
c000fd74:	83 c4 10             	add    esp,0x10
c000fd77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd7b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000fd7e:	83 ec 0c             	sub    esp,0xc
c000fd81:	50                   	push   eax
c000fd82:	e8 f4 9b ff ff       	call   c000997b <free>
c000fd87:	83 c4 10             	add    esp,0x10
c000fd8a:	90                   	nop
c000fd8b:	83 c4 0c             	add    esp,0xc
c000fd8e:	c3                   	ret    
c000fd8f:	90                   	nop

c000fd90 <VCache::~VCache()>:
c000fd90:	83 ec 0c             	sub    esp,0xc
c000fd93:	83 ec 0c             	sub    esp,0xc
c000fd96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd9a:	e8 9d ff ff ff       	call   c000fd3c <VCache::~VCache()>
c000fd9f:	83 c4 10             	add    esp,0x10
c000fda2:	83 ec 08             	sub    esp,0x8
c000fda5:	6a 44                	push   0x44
c000fda7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdab:	e8 e8 cd ff ff       	call   c000cb98 <operator delete(void*, unsigned long)>
c000fdb0:	83 c4 10             	add    esp,0x10
c000fdb3:	83 c4 0c             	add    esp,0xc
c000fdb6:	c3                   	ret    
c000fdb7:	90                   	nop

c000fdb8 <VCache::write(unsigned long long, int, void*)>:
c000fdb8:	55                   	push   ebp
c000fdb9:	31 c0                	xor    eax,eax
c000fdbb:	57                   	push   edi
c000fdbc:	56                   	push   esi
c000fdbd:	53                   	push   ebx
c000fdbe:	83 ec 0c             	sub    esp,0xc
c000fdc1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000fdc5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fdc9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000fdcd:	8d 76 00             	lea    esi,[esi+0x0]
c000fdd0:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c000fdd4:	7d 1a                	jge    c000fdf0 <VCache::write(unsigned long long, int, void*)+0x38>
c000fdd6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000fdd9:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000fddf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fde3:	0f af c8             	imul   ecx,eax
c000fde6:	01 ca                	add    edx,ecx
c000fde8:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000fdea:	40                   	inc    eax
c000fdeb:	eb e3                	jmp    c000fdd0 <VCache::write(unsigned long long, int, void*)+0x18>
c000fded:	8d 76 00             	lea    esi,[esi+0x0]
c000fdf0:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000fdf4:	74 0a                	je     c000fe00 <VCache::write(unsigned long long, int, void*)+0x48>
c000fdf6:	53                   	push   ebx
c000fdf7:	e8 e4 fe ff ff       	call   c000fce0 <VCache::invalidateReadBuffer()>
c000fdfc:	58                   	pop    eax
c000fdfd:	8d 76 00             	lea    esi,[esi+0x0]
c000fe00:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000fe04:	74 5e                	je     c000fe64 <VCache::write(unsigned long long, int, void*)+0xac>
c000fe06:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c000fe09:	89 e8                	mov    eax,ebp
c000fe0b:	99                   	cdq    
c000fe0c:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000fe0f:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000fe12:	89 c1                	mov    ecx,eax
c000fe14:	89 d0                	mov    eax,edx
c000fe16:	31 f1                	xor    ecx,esi
c000fe18:	31 f8                	xor    eax,edi
c000fe1a:	09 c1                	or     ecx,eax
c000fe1c:	75 3a                	jne    c000fe58 <VCache::write(unsigned long long, int, void*)+0xa0>
c000fe1e:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c000fe23:	75 33                	jne    c000fe58 <VCache::write(unsigned long long, int, void*)+0xa0>
c000fe25:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fe28:	89 ef                	mov    edi,ebp
c000fe2a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000fe30:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000fe34:	0f af f9             	imul   edi,ecx
c000fe37:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000fe3a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe3c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000fe3f:	40                   	inc    eax
c000fe40:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000fe43:	83 f8 40             	cmp    eax,0x40
c000fe46:	75 60                	jne    c000fea8 <VCache::write(unsigned long long, int, void*)+0xf0>
c000fe48:	83 ec 0c             	sub    esp,0xc
c000fe4b:	53                   	push   ebx
c000fe4c:	e8 9f fe ff ff       	call   c000fcf0 <VCache::writeWriteBuffer()>
c000fe51:	83 c4 10             	add    esp,0x10
c000fe54:	eb 52                	jmp    c000fea8 <VCache::write(unsigned long long, int, void*)+0xf0>
c000fe56:	66 90                	xchg   ax,ax
c000fe58:	83 ec 0c             	sub    esp,0xc
c000fe5b:	53                   	push   ebx
c000fe5c:	e8 8f fe ff ff       	call   c000fcf0 <VCache::writeWriteBuffer()>
c000fe61:	83 c4 10             	add    esp,0x10
c000fe64:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fe67:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c000fe6c:	7f 22                	jg     c000fe90 <VCache::write(unsigned long long, int, void*)+0xd8>
c000fe6e:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000fe71:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c000fe74:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fe78:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000fe7c:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000fe7f:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000fe82:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000fe88:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000fe8c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe8e:	eb 18                	jmp    c000fea8 <VCache::write(unsigned long long, int, void*)+0xf0>
c000fe90:	83 ec 0c             	sub    esp,0xc
c000fe93:	8b 10                	mov    edx,DWORD PTR [eax]
c000fe95:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000fe99:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000fe9d:	57                   	push   edi
c000fe9e:	56                   	push   esi
c000fe9f:	50                   	push   eax
c000fea0:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000fea3:	83 c4 20             	add    esp,0x20
c000fea6:	66 90                	xchg   ax,ax
c000fea8:	83 c4 0c             	add    esp,0xc
c000feab:	31 c0                	xor    eax,eax
c000fead:	5b                   	pop    ebx
c000feae:	5e                   	pop    esi
c000feaf:	5f                   	pop    edi
c000feb0:	5d                   	pop    ebp
c000feb1:	c3                   	ret    

c000feb2 <VCache::read(unsigned long long, int, void*)>:
c000feb2:	55                   	push   ebp
c000feb3:	31 c0                	xor    eax,eax
c000feb5:	57                   	push   edi
c000feb6:	56                   	push   esi
c000feb7:	53                   	push   ebx
c000feb8:	83 ec 1c             	sub    esp,0x1c
c000febb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000febf:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000fec3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000fec7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fecb:	90                   	nop
c000fecc:	39 e8                	cmp    eax,ebp
c000fece:	7d 18                	jge    c000fee8 <VCache::read(unsigned long long, int, void*)+0x36>
c000fed0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000fed3:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000fed9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000fedd:	0f af c8             	imul   ecx,eax
c000fee0:	01 ca                	add    edx,ecx
c000fee2:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000fee4:	40                   	inc    eax
c000fee5:	eb e5                	jmp    c000fecc <VCache::read(unsigned long long, int, void*)+0x1a>
c000fee7:	90                   	nop
c000fee8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000feec:	74 0e                	je     c000fefc <VCache::read(unsigned long long, int, void*)+0x4a>
c000feee:	83 ec 0c             	sub    esp,0xc
c000fef1:	53                   	push   ebx
c000fef2:	e8 f9 fd ff ff       	call   c000fcf0 <VCache::writeWriteBuffer()>
c000fef7:	83 c4 10             	add    esp,0x10
c000fefa:	66 90                	xchg   ax,ax
c000fefc:	83 fd 01             	cmp    ebp,0x1
c000feff:	0f 85 87 00 00 00    	jne    c000ff8c <VCache::read(unsigned long long, int, void*)+0xda>
c000ff05:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ff08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ff0c:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000ff13:	75 77                	jne    c000ff8c <VCache::read(unsigned long long, int, void*)+0xda>
c000ff15:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000ff18:	89 e9                	mov    ecx,ebp
c000ff1a:	f7 d9                	neg    ecx
c000ff1c:	89 c8                	mov    eax,ecx
c000ff1e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ff22:	c1 f8 1f             	sar    eax,0x1f
c000ff25:	21 f1                	and    ecx,esi
c000ff27:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ff2b:	89 c8                	mov    eax,ecx
c000ff2d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ff31:	21 f9                	and    ecx,edi
c000ff33:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000ff37:	89 ca                	mov    edx,ecx
c000ff39:	74 0d                	je     c000ff48 <VCache::read(unsigned long long, int, void*)+0x96>
c000ff3b:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c000ff3e:	75 08                	jne    c000ff48 <VCache::read(unsigned long long, int, void*)+0x96>
c000ff40:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000ff43:	74 27                	je     c000ff6c <VCache::read(unsigned long long, int, void*)+0xba>
c000ff45:	8d 76 00             	lea    esi,[esi+0x0]
c000ff48:	83 ec 0c             	sub    esp,0xc
c000ff4b:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000ff4f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ff53:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000ff56:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ff59:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000ff5b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ff5e:	55                   	push   ebp
c000ff5f:	52                   	push   edx
c000ff60:	50                   	push   eax
c000ff61:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ff65:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000ff68:	83 c4 20             	add    esp,0x20
c000ff6b:	90                   	nop
c000ff6c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ff6f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ff73:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ff79:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ff7c:	48                   	dec    eax
c000ff7d:	21 c6                	and    esi,eax
c000ff7f:	0f af f1             	imul   esi,ecx
c000ff82:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000ff85:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff87:	eb 23                	jmp    c000ffac <VCache::read(unsigned long long, int, void*)+0xfa>
c000ff89:	8d 76 00             	lea    esi,[esi+0x0]
c000ff8c:	83 ec 0c             	sub    esp,0xc
c000ff8f:	53                   	push   ebx
c000ff90:	e8 4b fd ff ff       	call   c000fce0 <VCache::invalidateReadBuffer()>
c000ff95:	5a                   	pop    edx
c000ff96:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ff99:	8b 10                	mov    edx,DWORD PTR [eax]
c000ff9b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ff9f:	55                   	push   ebp
c000ffa0:	57                   	push   edi
c000ffa1:	56                   	push   esi
c000ffa2:	50                   	push   eax
c000ffa3:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000ffa6:	83 c4 20             	add    esp,0x20
c000ffa9:	8d 76 00             	lea    esi,[esi+0x0]
c000ffac:	83 c4 1c             	add    esp,0x1c
c000ffaf:	31 c0                	xor    eax,eax
c000ffb1:	5b                   	pop    ebx
c000ffb2:	5e                   	pop    esi
c000ffb3:	5f                   	pop    edi
c000ffb4:	5d                   	pop    ebp
c000ffb5:	c3                   	ret    

c000ffb6 <Video::putrect(int, int, int, int, unsigned int)>:
c000ffb6:	55                   	push   ebp
c000ffb7:	57                   	push   edi
c000ffb8:	56                   	push   esi
c000ffb9:	53                   	push   ebx
c000ffba:	83 ec 1c             	sub    esp,0x1c
c000ffbd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ffc1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ffc5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ffc9:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000ffcd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ffd1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ffd5:	01 df                	add    edi,ebx
c000ffd7:	39 fb                	cmp    ebx,edi
c000ffd9:	7d 1f                	jge    c000fffa <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ffdb:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ffdf:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000ffe3:	7d 12                	jge    c000fff7 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000ffe5:	8b 16                	mov    edx,DWORD PTR [esi]
c000ffe7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ffeb:	53                   	push   ebx
c000ffec:	55                   	push   ebp
c000ffed:	45                   	inc    ebp
c000ffee:	56                   	push   esi
c000ffef:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000fff2:	83 c4 10             	add    esp,0x10
c000fff5:	eb e8                	jmp    c000ffdf <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000fff7:	43                   	inc    ebx
c000fff8:	eb dd                	jmp    c000ffd7 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000fffa:	83 c4 1c             	add    esp,0x1c
c000fffd:	5b                   	pop    ebx
c000fffe:	5e                   	pop    esi
c000ffff:	5f                   	pop    edi
c0010000:	5d                   	pop    ebp
c0010001:	c3                   	ret    

c0010002 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0010002:	55                   	push   ebp
c0010003:	57                   	push   edi
c0010004:	31 ff                	xor    edi,edi
c0010006:	56                   	push   esi
c0010007:	53                   	push   ebx
c0010008:	83 ec 1c             	sub    esp,0x1c
c001000b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001000f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010013:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001001a:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001001f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010023:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0010027:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001002b:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001002e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0010032:	01 f9                	add    ecx,edi
c0010034:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0010038:	7d 2f                	jge    c0010069 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001003a:	31 f6                	xor    esi,esi
c001003c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0010040:	01 f2                	add    edx,esi
c0010042:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0010046:	7d 1a                	jge    c0010062 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0010048:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001004b:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001004e:	46                   	inc    esi
c001004f:	51                   	push   ecx
c0010050:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010054:	52                   	push   edx
c0010055:	55                   	push   ebp
c0010056:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0010059:	83 c4 10             	add    esp,0x10
c001005c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010060:	eb da                	jmp    c001003c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0010062:	47                   	inc    edi
c0010063:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0010067:	eb c5                	jmp    c001002e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0010069:	83 c4 1c             	add    esp,0x1c
c001006c:	5b                   	pop    ebx
c001006d:	5e                   	pop    esi
c001006e:	5f                   	pop    edi
c001006f:	5d                   	pop    ebp
c0010070:	c3                   	ret    
c0010071:	90                   	nop

c0010072 <Video::blit(unsigned int*, int, int, int, int)>:
c0010072:	55                   	push   ebp
c0010073:	57                   	push   edi
c0010074:	56                   	push   esi
c0010075:	53                   	push   ebx
c0010076:	83 ec 1c             	sub    esp,0x1c
c0010079:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001007d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010081:	85 c0                	test   eax,eax
c0010083:	79 02                	jns    c0010087 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0010085:	31 c0                	xor    eax,eax
c0010087:	c1 e0 02             	shl    eax,0x2
c001008a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001008e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010092:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0010096:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001009a:	39 d8                	cmp    eax,ebx
c001009c:	7e 49                	jle    c00100e7 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001009e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00100a4:	7c 41                	jl     c00100e7 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00100a6:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00100aa:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00100ae:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00100b2:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00100b6:	39 f9                	cmp    ecx,edi
c00100b8:	7e 22                	jle    c00100dc <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00100ba:	83 c5 04             	add    ebp,0x4
c00100bd:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00100c3:	7c 14                	jl     c00100d9 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00100c5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00100c7:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00100ca:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00100ce:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00100d2:	56                   	push   esi
c00100d3:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00100d6:	83 c4 10             	add    esp,0x10
c00100d9:	47                   	inc    edi
c00100da:	eb d2                	jmp    c00100ae <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00100dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00100e0:	43                   	inc    ebx
c00100e1:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00100e5:	eb ab                	jmp    c0010092 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00100e7:	83 c4 1c             	add    esp,0x1c
c00100ea:	5b                   	pop    ebx
c00100eb:	5e                   	pop    esi
c00100ec:	5f                   	pop    edi
c00100ed:	5d                   	pop    ebp
c00100ee:	c3                   	ret    
c00100ef:	90                   	nop

c00100f0 <Video::clearScreen(unsigned int)>:
c00100f0:	57                   	push   edi
c00100f1:	56                   	push   esi
c00100f2:	53                   	push   ebx
c00100f3:	31 db                	xor    ebx,ebx
c00100f5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00100f9:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00100ff:	7e 1f                	jle    c0010120 <Video::clearScreen(unsigned int)+0x30>
c0010101:	31 ff                	xor    edi,edi
c0010103:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0010109:	7e 12                	jle    c001011d <Video::clearScreen(unsigned int)+0x2d>
c001010b:	8b 06                	mov    eax,DWORD PTR [esi]
c001010d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010111:	53                   	push   ebx
c0010112:	57                   	push   edi
c0010113:	47                   	inc    edi
c0010114:	56                   	push   esi
c0010115:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0010118:	83 c4 10             	add    esp,0x10
c001011b:	eb e6                	jmp    c0010103 <Video::clearScreen(unsigned int)+0x13>
c001011d:	43                   	inc    ebx
c001011e:	eb d9                	jmp    c00100f9 <Video::clearScreen(unsigned int)+0x9>
c0010120:	5b                   	pop    ebx
c0010121:	5e                   	pop    esi
c0010122:	5f                   	pop    edi
c0010123:	c3                   	ret    

c0010124 <Video::putpixel(int, int, unsigned int)>:
c0010124:	c7 44 24 04 6c 3c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023c6c
c001012c:	e9 d6 2e 00 00       	jmp    c0013007 <Krnl::panic(char const*)>
c0010131:	90                   	nop

c0010132 <Video::Video(char const*)>:
c0010132:	83 ec 0c             	sub    esp,0xc
c0010135:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010139:	83 ec 08             	sub    esp,0x8
c001013c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010140:	50                   	push   eax
c0010141:	e8 b4 e1 ff ff       	call   c000e2fa <Device::Device(char const*)>
c0010146:	83 c4 10             	add    esp,0x10
c0010149:	ba dc 3c 02 c0       	mov    edx,0xc0023cdc
c001014e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010152:	89 10                	mov    DWORD PTR [eax],edx
c0010154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010158:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0010162:	90                   	nop
c0010163:	83 c4 0c             	add    esp,0xc
c0010166:	c3                   	ret    
c0010167:	90                   	nop

c0010168 <Video::~Video()>:
c0010168:	83 ec 0c             	sub    esp,0xc
c001016b:	ba dc 3c 02 c0       	mov    edx,0xc0023cdc
c0010170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010174:	89 10                	mov    DWORD PTR [eax],edx
c0010176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001017a:	83 ec 0c             	sub    esp,0xc
c001017d:	50                   	push   eax
c001017e:	e8 75 de ff ff       	call   c000dff8 <Device::~Device()>
c0010183:	83 c4 10             	add    esp,0x10
c0010186:	90                   	nop
c0010187:	83 c4 0c             	add    esp,0xc
c001018a:	c3                   	ret    
c001018b:	90                   	nop

c001018c <Video::~Video()>:
c001018c:	83 ec 0c             	sub    esp,0xc
c001018f:	83 ec 0c             	sub    esp,0xc
c0010192:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010196:	e8 cd ff ff ff       	call   c0010168 <Video::~Video()>
c001019b:	83 c4 10             	add    esp,0x10
c001019e:	83 ec 08             	sub    esp,0x8
c00101a1:	68 64 01 00 00       	push   0x164
c00101a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101aa:	e8 e9 c9 ff ff       	call   c000cb98 <operator delete(void*, unsigned long)>
c00101af:	83 c4 10             	add    esp,0x10
c00101b2:	83 c4 0c             	add    esp,0xc
c00101b5:	c3                   	ret    

c00101b6 <Video::isMonochrome()>:
c00101b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101ba:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00101c0:	c3                   	ret    
c00101c1:	90                   	nop

c00101c2 <Video::getWidth()>:
c00101c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101c6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00101cc:	c3                   	ret    
c00101cd:	90                   	nop

c00101ce <Video::getHeight()>:
c00101ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101d2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00101d8:	c3                   	ret    
c00101d9:	90                   	nop

c00101da <Video::drawCursor(int, int, unsigned char*, int)>:
c00101da:	55                   	push   ebp
c00101db:	57                   	push   edi
c00101dc:	56                   	push   esi
c00101dd:	53                   	push   ebx
c00101de:	83 ec 2c             	sub    esp,0x2c
c00101e1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00101e5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00101e9:	83 f8 01             	cmp    eax,0x1
c00101ec:	19 c9                	sbb    ecx,ecx
c00101ee:	31 db                	xor    ebx,ebx
c00101f0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00101f4:	89 cd                	mov    ebp,ecx
c00101f6:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00101fe:	f7 d5                	not    ebp
c0010200:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0010206:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001020a:	01 d8                	add    eax,ebx
c001020c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010210:	56                   	push   esi
c0010211:	e8 b8 ff ff ff       	call   c00101ce <Video::getHeight()>
c0010216:	59                   	pop    ecx
c0010217:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001021b:	7e 70                	jle    c001028d <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c001021d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0010221:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0010225:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0010228:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001022c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0010230:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0010237:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001023b:	89 f8                	mov    eax,edi
c001023d:	83 c0 20             	add    eax,0x20
c0010240:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010244:	56                   	push   esi
c0010245:	e8 78 ff ff ff       	call   c00101c2 <Video::getWidth()>
c001024a:	5a                   	pop    edx
c001024b:	39 c7                	cmp    edi,eax
c001024d:	7d 34                	jge    c0010283 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001024f:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0010254:	74 05                	je     c001025b <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0010256:	8b 06                	mov    eax,DWORD PTR [esi]
c0010258:	55                   	push   ebp
c0010259:	eb 0d                	jmp    c0010268 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001025b:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0010260:	74 12                	je     c0010274 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0010262:	8b 06                	mov    eax,DWORD PTR [esi]
c0010264:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010268:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001026c:	57                   	push   edi
c001026d:	56                   	push   esi
c001026e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0010271:	83 c4 10             	add    esp,0x10
c0010274:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0010278:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001027c:	47                   	inc    edi
c001027d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0010281:	75 c1                	jne    c0010244 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0010283:	43                   	inc    ebx
c0010284:	83 fb 20             	cmp    ebx,0x20
c0010287:	0f 85 79 ff ff ff    	jne    c0010206 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c001028d:	83 c4 2c             	add    esp,0x2c
c0010290:	5b                   	pop    ebx
c0010291:	5e                   	pop    esi
c0010292:	5f                   	pop    edi
c0010293:	5d                   	pop    ebp
c0010294:	c3                   	ret    
c0010295:	90                   	nop

c0010296 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0010296:	55                   	push   ebp
c0010297:	57                   	push   edi
c0010298:	56                   	push   esi
c0010299:	53                   	push   ebx
c001029a:	83 ec 28             	sub    esp,0x28
c001029d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00102a1:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00102a5:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c00102a9:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00102ad:	c1 e6 08             	shl    esi,0x8
c00102b0:	01 c6                	add    esi,eax
c00102b2:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00102b6:	c1 e0 08             	shl    eax,0x8
c00102b9:	01 d0                	add    eax,edx
c00102bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00102bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00102c3:	0f af c6             	imul   eax,esi
c00102c6:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00102cd:	50                   	push   eax
c00102ce:	e8 98 96 ff ff       	call   c000996b <malloc>
c00102d3:	83 c4 10             	add    esp,0x10
c00102d6:	89 c7                	mov    edi,eax
c00102d8:	85 c0                	test   eax,eax
c00102da:	75 10                	jne    c00102ec <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c00102dc:	83 ec 0c             	sub    esp,0xc
c00102df:	68 8d 3c 02 c0       	push   0xc0023c8d
c00102e4:	e8 1e 2d 00 00       	call   c0013007 <Krnl::panic(char const*)>
c00102e9:	83 c4 10             	add    esp,0x10
c00102ec:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00102ef:	ba 12 00 00 00       	mov    edx,0x12
c00102f4:	84 c0                	test   al,al
c00102f6:	74 11                	je     c0010309 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c00102f8:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c00102fc:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0010300:	c1 fa 03             	sar    edx,0x3
c0010303:	0f af d1             	imul   edx,ecx
c0010306:	83 c2 12             	add    edx,0x12
c0010309:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001030d:	74 04                	je     c0010313 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c001030f:	85 f6                	test   esi,esi
c0010311:	75 12                	jne    c0010325 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0010313:	83 ec 0c             	sub    esp,0xc
c0010316:	68 9d 3c 02 c0       	push   0xc0023c9d
c001031b:	e8 59 c9 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0010320:	e9 b8 00 00 00       	jmp    c00103dd <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0010325:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0010329:	80 f9 02             	cmp    cl,0x2
c001032c:	0f 85 96 00 00 00    	jne    c00103c8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0010332:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0010337:	75 0e                	jne    c0010347 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0010339:	84 c0                	test   al,al
c001033b:	75 0a                	jne    c0010347 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c001033d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0010340:	83 e8 18             	sub    eax,0x18
c0010343:	a8 f7                	test   al,0xf7
c0010345:	74 0a                	je     c0010351 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0010347:	83 ec 0c             	sub    esp,0xc
c001034a:	68 b2 3c 02 c0       	push   0xc0023cb2
c001034f:	eb 7f                	jmp    c00103d0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0010351:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010359:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0010361:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0010365:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001036d:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0010371:	75 0c                	jne    c001037f <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0010373:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0010378:	c1 e0 18             	shl    eax,0x18
c001037b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001037f:	45                   	inc    ebp
c0010380:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0010385:	c1 e1 10             	shl    ecx,0x10
c0010388:	89 c8                	mov    eax,ecx
c001038a:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c001038f:	c1 e1 08             	shl    ecx,0x8
c0010392:	09 c1                	or     ecx,eax
c0010394:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0010398:	09 c1                	or     ecx,eax
c001039a:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c001039e:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c00103a2:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00103a6:	c1 f8 03             	sar    eax,0x3
c00103a9:	01 c2                	add    edx,eax
c00103ab:	89 e8                	mov    eax,ebp
c00103ad:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00103b1:	39 c6                	cmp    esi,eax
c00103b3:	7f b0                	jg     c0010365 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c00103b5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00103b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00103bd:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00103c0:	7e 22                	jle    c00103e4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c00103c2:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c00103c6:	eb 99                	jmp    c0010361 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00103c8:	50                   	push   eax
c00103c9:	50                   	push   eax
c00103ca:	51                   	push   ecx
c00103cb:	68 c0 3c 02 c0       	push   0xc0023cc0
c00103d0:	e8 a4 c8 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c00103d5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00103d8:	e8 9e 95 ff ff       	call   c000997b <free>
c00103dd:	83 c4 10             	add    esp,0x10
c00103e0:	31 ff                	xor    edi,edi
c00103e2:	eb 0f                	jmp    c00103f3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c00103e4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00103e8:	89 30                	mov    DWORD PTR [eax],esi
c00103ea:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00103ee:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00103f1:	89 30                	mov    DWORD PTR [eax],esi
c00103f3:	83 c4 1c             	add    esp,0x1c
c00103f6:	89 f8                	mov    eax,edi
c00103f8:	5b                   	pop    ebx
c00103f9:	5e                   	pop    esi
c00103fa:	5f                   	pop    edi
c00103fb:	5d                   	pop    ebp
c00103fc:	c3                   	ret    
c00103fd:	90                   	nop

c00103fe <Video::putTGA(int, int, unsigned char*, int)>:
c00103fe:	55                   	push   ebp
c00103ff:	57                   	push   edi
c0010400:	56                   	push   esi
c0010401:	53                   	push   ebx
c0010402:	83 ec 28             	sub    esp,0x28
c0010405:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010409:	8d 44 24 18          	lea    eax,[esp+0x18]
c001040d:	50                   	push   eax
c001040e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0010412:	50                   	push   eax
c0010413:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0010417:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001041b:	56                   	push   esi
c001041c:	e8 75 fe ff ff       	call   c0010296 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0010421:	83 c4 20             	add    esp,0x20
c0010424:	85 c0                	test   eax,eax
c0010426:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001042a:	74 35                	je     c0010461 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001042c:	89 c7                	mov    edi,eax
c001042e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0010432:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0010436:	39 d8                	cmp    eax,ebx
c0010438:	7e 27                	jle    c0010461 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001043a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001043e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010442:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010446:	39 e8                	cmp    eax,ebp
c0010448:	7e 14                	jle    c001045e <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001044a:	8b 06                	mov    eax,DWORD PTR [esi]
c001044c:	83 c7 04             	add    edi,0x4
c001044f:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0010452:	53                   	push   ebx
c0010453:	55                   	push   ebp
c0010454:	45                   	inc    ebp
c0010455:	56                   	push   esi
c0010456:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0010459:	83 c4 10             	add    esp,0x10
c001045c:	eb e0                	jmp    c001043e <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001045e:	43                   	inc    ebx
c001045f:	eb cd                	jmp    c001042e <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0010461:	83 c4 1c             	add    esp,0x1c
c0010464:	5b                   	pop    ebx
c0010465:	5e                   	pop    esi
c0010466:	5f                   	pop    edi
c0010467:	5d                   	pop    ebp
c0010468:	c3                   	ret    
c0010469:	66 90                	xchg   ax,ax
c001046b:	90                   	nop

c001046c <ACPI::close(int, int, void*)>:
c001046c:	83 ec 1c             	sub    esp,0x1c
c001046f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0010477:	74 0b                	je     c0010484 <ACPI::close(int, int, void*)+0x18>
c0010479:	b8 00 00 00 00       	mov    eax,0x0
c001047e:	e9 99 00 00 00       	jmp    c001051c <ACPI::close(int, int, void*)+0xb0>
c0010483:	90                   	nop
c0010484:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0010489:	75 29                	jne    c00104b4 <ACPI::close(int, int, void*)+0x48>
c001048b:	a1 c8 8c 02 c0       	mov    eax,ds:0xc0028cc8
c0010490:	85 c0                	test   eax,eax
c0010492:	74 08                	je     c001049c <ACPI::close(int, int, void*)+0x30>
c0010494:	a1 c8 8c 02 c0       	mov    eax,ds:0xc0028cc8
c0010499:	ff d0                	call   eax
c001049b:	90                   	nop
c001049c:	83 ec 0c             	sub    esp,0xc
c001049f:	68 1c 3d 02 c0       	push   0xc0023d1c
c00104a4:	e8 5e 2b 00 00       	call   c0013007 <Krnl::panic(char const*)>
c00104a9:	83 c4 10             	add    esp,0x10
c00104ac:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00104b1:	eb 69                	jmp    c001051c <ACPI::close(int, int, void*)+0xb0>
c00104b3:	90                   	nop
c00104b4:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00104b9:	75 59                	jne    c0010514 <ACPI::close(int, int, void*)+0xa8>
c00104bb:	a1 c4 8c 02 c0       	mov    eax,ds:0xc0028cc4
c00104c0:	85 c0                	test   eax,eax
c00104c2:	74 08                	je     c00104cc <ACPI::close(int, int, void*)+0x60>
c00104c4:	a1 c4 8c 02 c0       	mov    eax,ds:0xc0028cc4
c00104c9:	ff d0                	call   eax
c00104cb:	90                   	nop
c00104cc:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00104d1:	8d 76 00             	lea    esi,[esi+0x0]
c00104d4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00104d9:	83 e0 02             	and    eax,0x2
c00104dc:	74 1e                	je     c00104fc <ACPI::close(int, int, void*)+0x90>
c00104de:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00104e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00104e9:	89 c2                	mov    edx,eax
c00104eb:	ec                   	in     al,dx
c00104ec:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00104f0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00104f4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00104f8:	eb da                	jmp    c00104d4 <ACPI::close(int, int, void*)+0x68>
c00104fa:	66 90                	xchg   ax,ax
c00104fc:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0010503:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0010508:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001050c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010510:	ee                   	out    dx,al
c0010511:	8d 76 00             	lea    esi,[esi+0x0]
c0010514:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010519:	8d 76 00             	lea    esi,[esi+0x0]
c001051c:	83 c4 1c             	add    esp,0x1c
c001051f:	c3                   	ret    

c0010520 <findRSDP()>:
c0010520:	83 ec 1c             	sub    esp,0x1c
c0010523:	83 ec 0c             	sub    esp,0xc
c0010526:	68 3f 3e 02 c0       	push   0xc0023e3f
c001052b:	e8 95 94 ff ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0010530:	83 c4 10             	add    esp,0x10
c0010533:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c0010538:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001053e:	83 e0 04             	and    eax,0x4
c0010541:	84 c0                	test   al,al
c0010543:	75 0b                	jne    c0010550 <findRSDP()+0x30>
c0010545:	b8 00 00 00 00       	mov    eax,0x0
c001054a:	e9 a1 00 00 00       	jmp    c00105f0 <findRSDP()+0xd0>
c001054f:	90                   	nop
c0010550:	a1 b8 66 02 c0       	mov    eax,ds:0xc00266b8
c0010555:	3d ff 07 00 00       	cmp    eax,0x7ff
c001055a:	7f 1c                	jg     c0010578 <findRSDP()+0x58>
c001055c:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c0010561:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0010567:	83 e2 fb             	and    edx,0xfffffffb
c001056a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0010570:	b8 00 00 00 00       	mov    eax,0x0
c0010575:	eb 79                	jmp    c00105f0 <findRSDP()+0xd0>
c0010577:	90                   	nop
c0010578:	83 ec 0c             	sub    esp,0xc
c001057b:	68 4f 3e 02 c0       	push   0xc0023e4f
c0010580:	e8 40 94 ff ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0010585:	83 c4 10             	add    esp,0x10
c0010588:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0010590:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0010598:	77 3e                	ja     c00105d8 <findRSDP()+0xb8>
c001059a:	83 ec 04             	sub    esp,0x4
c001059d:	6a 08                	push   0x8
c001059f:	68 68 3e 02 c0       	push   0xc0023e68
c00105a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105a8:	e8 cb ff fe ff       	call   c0000578 <memcmp>
c00105ad:	83 c4 10             	add    esp,0x10
c00105b0:	85 c0                	test   eax,eax
c00105b2:	0f 94 c0             	sete   al
c00105b5:	84 c0                	test   al,al
c00105b7:	74 17                	je     c00105d0 <findRSDP()+0xb0>
c00105b9:	83 ec 0c             	sub    esp,0xc
c00105bc:	68 71 3e 02 c0       	push   0xc0023e71
c00105c1:	e8 ff 93 ff ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c00105c6:	83 c4 10             	add    esp,0x10
c00105c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00105cd:	eb 21                	jmp    c00105f0 <findRSDP()+0xd0>
c00105cf:	90                   	nop
c00105d0:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00105d5:	eb b9                	jmp    c0010590 <findRSDP()+0x70>
c00105d7:	90                   	nop
c00105d8:	83 ec 0c             	sub    esp,0xc
c00105db:	68 7f 3e 02 c0       	push   0xc0023e7f
c00105e0:	e8 e0 93 ff ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c00105e5:	83 c4 10             	add    esp,0x10
c00105e8:	b8 00 00 00 00       	mov    eax,0x0
c00105ed:	8d 76 00             	lea    esi,[esi+0x0]
c00105f0:	83 c4 1c             	add    esp,0x1c
c00105f3:	c3                   	ret    

c00105f4 <loadACPITables(unsigned char*)>:
c00105f4:	57                   	push   edi
c00105f5:	56                   	push   esi
c00105f6:	53                   	push   ebx
c00105f7:	83 ec 60             	sub    esp,0x60
c00105fa:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c00105ff:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010605:	83 e0 04             	and    eax,0x4
c0010608:	84 c0                	test   al,al
c001060a:	0f 84 3c 02 00 00    	je     c001084c <loadACPITables(unsigned char*)+0x258>
c0010610:	a0 e0 8e 02 c0       	mov    al,ds:0xc0028ee0
c0010615:	84 c0                	test   al,al
c0010617:	74 77                	je     c0010690 <loadACPITables(unsigned char*)+0x9c>
c0010619:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001061d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0010621:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0010625:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010628:	83 e8 24             	sub    eax,0x24
c001062b:	c1 e8 03             	shr    eax,0x3
c001062e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0010632:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001063a:	66 90                	xchg   ax,ax
c001063c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0010640:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0010644:	0f 8d b6 00 00 00    	jge    c0010700 <loadACPITables(unsigned char*)+0x10c>
c001064a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001064e:	83 c0 24             	add    eax,0x24
c0010651:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0010655:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0010659:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001065d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0010661:	c1 e0 03             	shl    eax,0x3
c0010664:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0010668:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001066c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001066f:	8b 00                	mov    eax,DWORD PTR [eax]
c0010671:	89 c1                	mov    ecx,eax
c0010673:	a1 cc 8c 02 c0       	mov    eax,ds:0xc0028ccc
c0010678:	8d 50 01             	lea    edx,[eax+0x1]
c001067b:	89 15 cc 8c 02 c0    	mov    DWORD PTR ds:0xc0028ccc,edx
c0010681:	89 ca                	mov    edx,ecx
c0010683:	89 14 c5 e4 8c 02 c0 	mov    DWORD PTR [eax*8-0x3ffd731c],edx
c001068a:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001068e:	eb ac                	jmp    c001063c <loadACPITables(unsigned char*)+0x48>
c0010690:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0010694:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0010698:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001069c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001069f:	83 e8 24             	sub    eax,0x24
c00106a2:	c1 e8 02             	shr    eax,0x2
c00106a5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00106a9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00106b1:	8d 76 00             	lea    esi,[esi+0x0]
c00106b4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00106b8:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c00106bc:	7d 42                	jge    c0010700 <loadACPITables(unsigned char*)+0x10c>
c00106be:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00106c2:	83 c0 24             	add    eax,0x24
c00106c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00106c9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00106cd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00106d1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00106d5:	c1 e0 02             	shl    eax,0x2
c00106d8:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00106dc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00106e0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00106e2:	a1 cc 8c 02 c0       	mov    eax,ds:0xc0028ccc
c00106e7:	8d 50 01             	lea    edx,[eax+0x1]
c00106ea:	89 15 cc 8c 02 c0    	mov    DWORD PTR ds:0xc0028ccc,edx
c00106f0:	89 ca                	mov    edx,ecx
c00106f2:	89 14 c5 e4 8c 02 c0 	mov    DWORD PTR [eax*8-0x3ffd731c],edx
c00106f9:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c00106fd:	eb b5                	jmp    c00106b4 <loadACPITables(unsigned char*)+0xc0>
c00106ff:	90                   	nop
c0010700:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0010708:	a1 cc 8c 02 c0       	mov    eax,ds:0xc0028ccc
c001070d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0010711:	0f 8d 39 01 00 00    	jge    c0010850 <loadACPITables(unsigned char*)+0x25c>
c0010717:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001071b:	8b 04 c5 e4 8c 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd731c]
c0010722:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010726:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001072a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001072e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010732:	25 ff 0f 00 00       	and    eax,0xfff
c0010737:	89 c6                	mov    esi,eax
c0010739:	8b 1d b4 67 02 c0    	mov    ebx,DWORD PTR ds:0xc00267b4
c001073f:	83 ec 0c             	sub    esp,0xc
c0010742:	6a 01                	push   0x1
c0010744:	e8 d4 b1 ff ff       	call   c000b91d <Virt::allocateKernelVirtualPages(int)>
c0010749:	83 c4 10             	add    esp,0x10
c001074c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010750:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0010756:	83 ec 0c             	sub    esp,0xc
c0010759:	6a 01                	push   0x1
c001075b:	6a 01                	push   0x1
c001075d:	50                   	push   eax
c001075e:	52                   	push   edx
c001075f:	53                   	push   ebx
c0010760:	e8 1b bb ff ff       	call   c000c280 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0010765:	83 c4 20             	add    esp,0x20
c0010768:	09 f0                	or     eax,esi
c001076a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001076e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0010772:	c1 e0 03             	shl    eax,0x3
c0010775:	05 e0 8c 02 c0       	add    eax,0xc0028ce0
c001077a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001077e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010782:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010786:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001078e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010792:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010796:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001079a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001079e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00107a2:	89 c6                	mov    esi,eax
c00107a4:	89 d7                	mov    edi,edx
c00107a6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00107a8:	89 c8                	mov    eax,ecx
c00107aa:	89 fa                	mov    edx,edi
c00107ac:	89 f3                	mov    ebx,esi
c00107ae:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00107b2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00107b6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00107ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00107be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00107c1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00107c5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00107c9:	05 00 10 00 00       	add    eax,0x1000
c00107ce:	c1 e8 0c             	shr    eax,0xc
c00107d1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00107d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00107d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00107dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00107e1:	25 ff 0f 00 00       	and    eax,0xfff
c00107e6:	89 c6                	mov    esi,eax
c00107e8:	8b 1d b4 67 02 c0    	mov    ebx,DWORD PTR ds:0xc00267b4
c00107ee:	83 ec 0c             	sub    esp,0xc
c00107f1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00107f5:	e8 23 b1 ff ff       	call   c000b91d <Virt::allocateKernelVirtualPages(int)>
c00107fa:	83 c4 10             	add    esp,0x10
c00107fd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010801:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0010807:	83 ec 0c             	sub    esp,0xc
c001080a:	6a 01                	push   0x1
c001080c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0010810:	50                   	push   eax
c0010811:	52                   	push   edx
c0010812:	53                   	push   ebx
c0010813:	e8 68 ba ff ff       	call   c000c280 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0010818:	83 c4 20             	add    esp,0x20
c001081b:	09 f0                	or     eax,esi
c001081d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010821:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010825:	83 ec 0c             	sub    esp,0xc
c0010828:	50                   	push   eax
c0010829:	e8 e3 b3 ff ff       	call   c000bc11 <Virt::freeKernelVirtualPages(unsigned long)>
c001082e:	83 c4 10             	add    esp,0x10
c0010831:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0010835:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010839:	89 14 c5 e4 8c 02 c0 	mov    DWORD PTR [eax*8-0x3ffd731c],edx
c0010840:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0010844:	e9 bf fe ff ff       	jmp    c0010708 <loadACPITables(unsigned char*)+0x114>
c0010849:	8d 76 00             	lea    esi,[esi+0x0]
c001084c:	90                   	nop
c001084d:	8d 76 00             	lea    esi,[esi+0x0]
c0010850:	83 c4 60             	add    esp,0x60
c0010853:	5b                   	pop    ebx
c0010854:	5e                   	pop    esi
c0010855:	5f                   	pop    edi
c0010856:	c3                   	ret    
c0010857:	90                   	nop

c0010858 <findRSDT(unsigned char*)>:
c0010858:	57                   	push   edi
c0010859:	56                   	push   esi
c001085a:	53                   	push   ebx
c001085b:	83 ec 50             	sub    esp,0x50
c001085e:	83 ec 0c             	sub    esp,0xc
c0010861:	68 93 3e 02 c0       	push   0xc0023e93
c0010866:	e8 5a 91 ff ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c001086b:	83 c4 10             	add    esp,0x10
c001086e:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c0010873:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010879:	83 e0 04             	and    eax,0x4
c001087c:	84 c0                	test   al,al
c001087e:	75 0c                	jne    c001088c <findRSDT(unsigned char*)+0x34>
c0010880:	b8 00 00 00 00       	mov    eax,0x0
c0010885:	e9 86 01 00 00       	jmp    c0010a10 <findRSDT(unsigned char*)+0x1b8>
c001088a:	66 90                	xchg   ax,ax
c001088c:	83 ec 0c             	sub    esp,0xc
c001088f:	68 a5 3e 02 c0       	push   0xc0023ea5
c0010894:	e8 2c 91 ff ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0010899:	83 c4 10             	add    esp,0x10
c001089c:	89 e0                	mov    eax,esp
c001089e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00108a2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00108a6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00108aa:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c00108b2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00108b6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00108ba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00108be:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00108c2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00108c6:	89 c6                	mov    esi,eax
c00108c8:	89 d7                	mov    edi,edx
c00108ca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00108cc:	89 c8                	mov    eax,ecx
c00108ce:	89 fa                	mov    edx,edi
c00108d0:	89 f3                	mov    ebx,esi
c00108d2:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00108d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00108da:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00108de:	83 ec 0c             	sub    esp,0xc
c00108e1:	68 b7 3e 02 c0       	push   0xc0023eb7
c00108e6:	e8 da 90 ff ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c00108eb:	83 c4 10             	add    esp,0x10
c00108ee:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00108f2:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c00108f6:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c00108fe:	83 ec 0c             	sub    esp,0xc
c0010901:	68 c9 3e 02 c0       	push   0xc0023ec9
c0010906:	e8 ba 90 ff ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c001090b:	83 c4 10             	add    esp,0x10
c001090e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010912:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010916:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001091a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001091e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0010922:	83 ec 04             	sub    esp,0x4
c0010925:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010929:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001092d:	68 40 3d 02 c0       	push   0xc0023d40
c0010932:	e8 42 c3 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0010937:	83 c4 10             	add    esp,0x10
c001093a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001093e:	25 ff 0f 00 00       	and    eax,0xfff
c0010943:	89 c6                	mov    esi,eax
c0010945:	8b 1d b4 67 02 c0    	mov    ebx,DWORD PTR ds:0xc00267b4
c001094b:	83 ec 0c             	sub    esp,0xc
c001094e:	6a 02                	push   0x2
c0010950:	e8 c8 af ff ff       	call   c000b91d <Virt::allocateKernelVirtualPages(int)>
c0010955:	83 c4 10             	add    esp,0x10
c0010958:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001095c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0010962:	83 ec 0c             	sub    esp,0xc
c0010965:	6a 01                	push   0x1
c0010967:	6a 02                	push   0x2
c0010969:	50                   	push   eax
c001096a:	52                   	push   edx
c001096b:	53                   	push   ebx
c001096c:	e8 0f b9 ff ff       	call   c000c280 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0010971:	83 c4 20             	add    esp,0x20
c0010974:	09 f0                	or     eax,esi
c0010976:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001097a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001097e:	25 ff 0f 00 00       	and    eax,0xfff
c0010983:	89 c6                	mov    esi,eax
c0010985:	8b 1d b4 67 02 c0    	mov    ebx,DWORD PTR ds:0xc00267b4
c001098b:	83 ec 0c             	sub    esp,0xc
c001098e:	6a 02                	push   0x2
c0010990:	e8 88 af ff ff       	call   c000b91d <Virt::allocateKernelVirtualPages(int)>
c0010995:	83 c4 10             	add    esp,0x10
c0010998:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001099c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00109a2:	83 ec 0c             	sub    esp,0xc
c00109a5:	6a 01                	push   0x1
c00109a7:	6a 02                	push   0x2
c00109a9:	50                   	push   eax
c00109aa:	52                   	push   edx
c00109ab:	53                   	push   ebx
c00109ac:	e8 cf b8 ff ff       	call   c000c280 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00109b1:	83 c4 20             	add    esp,0x20
c00109b4:	09 f0                	or     eax,esi
c00109b6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00109ba:	83 ec 04             	sub    esp,0x4
c00109bd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00109c1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00109c5:	68 60 3d 02 c0       	push   0xc0023d60
c00109ca:	e8 aa c2 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c00109cf:	83 c4 10             	add    esp,0x10
c00109d2:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00109d7:	75 13                	jne    c00109ec <findRSDT(unsigned char*)+0x194>
c00109d9:	c6 05 e0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ee0,0x0
c00109e0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00109e4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00109e8:	eb 22                	jmp    c0010a0c <findRSDT(unsigned char*)+0x1b4>
c00109ea:	66 90                	xchg   ax,ax
c00109ec:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c00109f1:	75 11                	jne    c0010a04 <findRSDT(unsigned char*)+0x1ac>
c00109f3:	c6 05 e0 8e 02 c0 01 	mov    BYTE PTR ds:0xc0028ee0,0x1
c00109fa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00109fe:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0010a02:	eb 08                	jmp    c0010a0c <findRSDT(unsigned char*)+0x1b4>
c0010a04:	b8 00 00 00 00       	mov    eax,0x0
c0010a09:	eb 05                	jmp    c0010a10 <findRSDT(unsigned char*)+0x1b8>
c0010a0b:	90                   	nop
c0010a0c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0010a10:	83 c4 50             	add    esp,0x50
c0010a13:	5b                   	pop    ebx
c0010a14:	5e                   	pop    esi
c0010a15:	5f                   	pop    edi
c0010a16:	c3                   	ret    
c0010a17:	90                   	nop

c0010a18 <findDataTable(unsigned char*, char*)>:
c0010a18:	83 ec 1c             	sub    esp,0x1c
c0010a1b:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c0010a20:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010a26:	83 e0 04             	and    eax,0x4
c0010a29:	84 c0                	test   al,al
c0010a2b:	75 07                	jne    c0010a34 <findDataTable(unsigned char*, char*)+0x1c>
c0010a2d:	b8 00 00 00 00       	mov    eax,0x0
c0010a32:	eb 58                	jmp    c0010a8c <findDataTable(unsigned char*, char*)+0x74>
c0010a34:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010a3c:	a1 cc 8c 02 c0       	mov    eax,ds:0xc0028ccc
c0010a41:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0010a45:	7d 3d                	jge    c0010a84 <findDataTable(unsigned char*, char*)+0x6c>
c0010a47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a4b:	c1 e0 03             	shl    eax,0x3
c0010a4e:	05 e0 8c 02 c0       	add    eax,0xc0028ce0
c0010a53:	83 ec 04             	sub    esp,0x4
c0010a56:	6a 04                	push   0x4
c0010a58:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010a5c:	50                   	push   eax
c0010a5d:	e8 16 fb fe ff       	call   c0000578 <memcmp>
c0010a62:	83 c4 10             	add    esp,0x10
c0010a65:	85 c0                	test   eax,eax
c0010a67:	0f 94 c0             	sete   al
c0010a6a:	84 c0                	test   al,al
c0010a6c:	74 0e                	je     c0010a7c <findDataTable(unsigned char*, char*)+0x64>
c0010a6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a72:	8b 04 c5 e4 8c 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd731c]
c0010a79:	eb 11                	jmp    c0010a8c <findDataTable(unsigned char*, char*)+0x74>
c0010a7b:	90                   	nop
c0010a7c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010a80:	eb ba                	jmp    c0010a3c <findDataTable(unsigned char*, char*)+0x24>
c0010a82:	66 90                	xchg   ax,ax
c0010a84:	b8 00 00 00 00       	mov    eax,0x0
c0010a89:	8d 76 00             	lea    esi,[esi+0x0]
c0010a8c:	83 c4 1c             	add    esp,0x1c
c0010a8f:	c3                   	ret    

c0010a90 <scanMADT()>:
c0010a90:	53                   	push   ebx
c0010a91:	83 ec 38             	sub    esp,0x38
c0010a94:	83 ec 0c             	sub    esp,0xc
c0010a97:	68 db 3e 02 c0       	push   0xc0023edb
c0010a9c:	e8 24 8f ff ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0010aa1:	83 c4 10             	add    esp,0x10
c0010aa4:	a1 a0 66 02 c0       	mov    eax,ds:0xc00266a0
c0010aa9:	25 00 04 00 00       	and    eax,0x400
c0010aae:	74 14                	je     c0010ac4 <scanMADT()+0x34>
c0010ab0:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c0010ab5:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0010abb:	83 e2 fb             	and    edx,0xfffffffb
c0010abe:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0010ac4:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c0010ac9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010acf:	83 e0 04             	and    eax,0x4
c0010ad2:	84 c0                	test   al,al
c0010ad4:	0f 84 82 04 00 00    	je     c0010f5c <scanMADT()+0x4cc>
c0010ada:	83 ec 0c             	sub    esp,0xc
c0010add:	68 e8 3e 02 c0       	push   0xc0023ee8
c0010ae2:	e8 de 8e ff ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0010ae7:	83 c4 10             	add    esp,0x10
c0010aea:	e8 31 fa ff ff       	call   c0010520 <findRSDP()>
c0010aef:	a3 ec 8e 02 c0       	mov    ds:0xc0028eec,eax
c0010af4:	a1 ec 8e 02 c0       	mov    eax,ds:0xc0028eec
c0010af9:	85 c0                	test   eax,eax
c0010afb:	75 1b                	jne    c0010b18 <scanMADT()+0x88>
c0010afd:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c0010b02:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0010b08:	83 e2 fb             	and    edx,0xfffffffb
c0010b0b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0010b11:	e9 4e 04 00 00       	jmp    c0010f64 <scanMADT()+0x4d4>
c0010b16:	66 90                	xchg   ax,ax
c0010b18:	83 ec 0c             	sub    esp,0xc
c0010b1b:	68 fa 3e 02 c0       	push   0xc0023efa
c0010b20:	e8 a0 8e ff ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0010b25:	83 c4 10             	add    esp,0x10
c0010b28:	a1 ec 8e 02 c0       	mov    eax,ds:0xc0028eec
c0010b2d:	83 ec 0c             	sub    esp,0xc
c0010b30:	50                   	push   eax
c0010b31:	e8 22 fd ff ff       	call   c0010858 <findRSDT(unsigned char*)>
c0010b36:	83 c4 10             	add    esp,0x10
c0010b39:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c0010b3e:	a1 e8 8e 02 c0       	mov    eax,ds:0xc0028ee8
c0010b43:	85 c0                	test   eax,eax
c0010b45:	75 19                	jne    c0010b60 <scanMADT()+0xd0>
c0010b47:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c0010b4c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0010b52:	83 e2 fb             	and    edx,0xfffffffb
c0010b55:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0010b5b:	e9 04 04 00 00       	jmp    c0010f64 <scanMADT()+0x4d4>
c0010b60:	83 ec 0c             	sub    esp,0xc
c0010b63:	68 0a 3f 02 c0       	push   0xc0023f0a
c0010b68:	e8 58 8e ff ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0010b6d:	83 c4 10             	add    esp,0x10
c0010b70:	a1 e8 8e 02 c0       	mov    eax,ds:0xc0028ee8
c0010b75:	83 ec 0c             	sub    esp,0xc
c0010b78:	50                   	push   eax
c0010b79:	e8 76 fa ff ff       	call   c00105f4 <loadACPITables(unsigned char*)>
c0010b7e:	83 c4 10             	add    esp,0x10
c0010b81:	a1 e8 8e 02 c0       	mov    eax,ds:0xc0028ee8
c0010b86:	83 ec 08             	sub    esp,0x8
c0010b89:	68 22 3f 02 c0       	push   0xc0023f22
c0010b8e:	50                   	push   eax
c0010b8f:	e8 84 fe ff ff       	call   c0010a18 <findDataTable(unsigned char*, char*)>
c0010b94:	83 c4 10             	add    esp,0x10
c0010b97:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010b9b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0010ba0:	75 1a                	jne    c0010bbc <scanMADT()+0x12c>
c0010ba2:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c0010ba7:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0010bad:	83 e2 fe             	and    edx,0xfffffffe
c0010bb0:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0010bb6:	e9 a9 03 00 00       	jmp    c0010f64 <scanMADT()+0x4d4>
c0010bbb:	90                   	nop
c0010bbc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0010bc4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010bc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bcb:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0010bcf:	0f 87 8f 03 00 00    	ja     c0010f64 <scanMADT()+0x4d4>
c0010bd5:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0010bdd:	0f 87 81 03 00 00    	ja     c0010f64 <scanMADT()+0x4d4>
c0010be3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010be7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0010beb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010bef:	8d 50 01             	lea    edx,[eax+0x1]
c0010bf2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010bf6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010bfa:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0010bfe:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0010c02:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010c06:	8d 50 01             	lea    edx,[eax+0x1]
c0010c09:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010c0d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010c11:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0010c15:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0010c19:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0010c1e:	0f 86 3c 03 00 00    	jbe    c0010f60 <scanMADT()+0x4d0>
c0010c24:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0010c29:	75 59                	jne    c0010c84 <scanMADT()+0x1f4>
c0010c2b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010c2f:	8d 50 01             	lea    edx,[eax+0x1]
c0010c32:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010c36:	8a 15 e0 90 02 c0    	mov    dl,BYTE PTR ds:0xc00290e0
c0010c3c:	0f b6 d2             	movzx  edx,dl
c0010c3f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0010c43:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0010c47:	88 82 20 91 02 c0    	mov    BYTE PTR [edx-0x3ffd6ee0],al
c0010c4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010c51:	8d 50 01             	lea    edx,[eax+0x1]
c0010c54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010c58:	8a 15 e0 90 02 c0    	mov    dl,BYTE PTR ds:0xc00290e0
c0010c5e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010c61:	88 0d e0 90 02 c0    	mov    BYTE PTR ds:0xc00290e0,cl
c0010c67:	0f b6 d2             	movzx  edx,dl
c0010c6a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0010c6e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0010c72:	88 82 00 91 02 c0    	mov    BYTE PTR [edx-0x3ffd6f00],al
c0010c78:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0010c7d:	e9 c6 02 00 00       	jmp    c0010f48 <scanMADT()+0x4b8>
c0010c82:	66 90                	xchg   ax,ax
c0010c84:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0010c89:	0f 85 15 01 00 00    	jne    c0010da4 <scanMADT()+0x314>
c0010c8f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010c93:	8d 50 01             	lea    edx,[eax+0x1]
c0010c96:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010c9a:	8a 15 a0 8f 02 c0    	mov    dl,BYTE PTR ds:0xc0028fa0
c0010ca0:	0f b6 d2             	movzx  edx,dl
c0010ca3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0010ca7:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0010cab:	88 82 c0 8f 02 c0    	mov    BYTE PTR [edx-0x3ffd7040],al
c0010cb1:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0010cb5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010cb9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010cbd:	01 d0                	add    eax,edx
c0010cbf:	83 c0 2c             	add    eax,0x2c
c0010cc2:	8a 00                	mov    al,BYTE PTR [eax]
c0010cc4:	0f b6 d0             	movzx  edx,al
c0010cc7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010ccb:	8d 48 01             	lea    ecx,[eax+0x1]
c0010cce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010cd2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0010cd6:	0f b6 c0             	movzx  eax,al
c0010cd9:	c1 e0 08             	shl    eax,0x8
c0010cdc:	89 d1                	mov    ecx,edx
c0010cde:	09 c1                	or     ecx,eax
c0010ce0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010ce4:	8d 50 02             	lea    edx,[eax+0x2]
c0010ce7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010ceb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0010cef:	0f b6 c0             	movzx  eax,al
c0010cf2:	c1 e0 10             	shl    eax,0x10
c0010cf5:	09 c1                	or     ecx,eax
c0010cf7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010cfb:	8d 50 03             	lea    edx,[eax+0x3]
c0010cfe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010d02:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0010d06:	0f b6 c0             	movzx  eax,al
c0010d09:	c1 e0 18             	shl    eax,0x18
c0010d0c:	09 c1                	or     ecx,eax
c0010d0e:	89 ca                	mov    edx,ecx
c0010d10:	a0 a0 8f 02 c0       	mov    al,ds:0xc0028fa0
c0010d15:	0f b6 c0             	movzx  eax,al
c0010d18:	89 14 85 e0 8f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7020],edx
c0010d1f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0010d24:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010d28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010d2c:	01 d0                	add    eax,edx
c0010d2e:	83 c0 2c             	add    eax,0x2c
c0010d31:	8a 00                	mov    al,BYTE PTR [eax]
c0010d33:	0f b6 d0             	movzx  edx,al
c0010d36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010d3a:	8d 48 01             	lea    ecx,[eax+0x1]
c0010d3d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010d41:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0010d45:	0f b6 c0             	movzx  eax,al
c0010d48:	c1 e0 08             	shl    eax,0x8
c0010d4b:	89 d1                	mov    ecx,edx
c0010d4d:	09 c1                	or     ecx,eax
c0010d4f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010d53:	8d 50 02             	lea    edx,[eax+0x2]
c0010d56:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010d5a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0010d5e:	0f b6 c0             	movzx  eax,al
c0010d61:	c1 e0 10             	shl    eax,0x10
c0010d64:	09 c1                	or     ecx,eax
c0010d66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010d6a:	8d 50 03             	lea    edx,[eax+0x3]
c0010d6d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010d71:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0010d75:	0f b6 c0             	movzx  eax,al
c0010d78:	c1 e0 18             	shl    eax,0x18
c0010d7b:	09 c1                	or     ecx,eax
c0010d7d:	89 ca                	mov    edx,ecx
c0010d7f:	a0 a0 8f 02 c0       	mov    al,ds:0xc0028fa0
c0010d84:	0f b6 c0             	movzx  eax,al
c0010d87:	89 14 85 60 90 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6fa0],edx
c0010d8e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0010d93:	a0 a0 8f 02 c0       	mov    al,ds:0xc0028fa0
c0010d98:	40                   	inc    eax
c0010d99:	a2 a0 8f 02 c0       	mov    ds:0xc0028fa0,al
c0010d9e:	e9 a5 01 00 00       	jmp    c0010f48 <scanMADT()+0x4b8>
c0010da3:	90                   	nop
c0010da4:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0010da9:	0f 85 e9 00 00 00    	jne    c0010e98 <scanMADT()+0x408>
c0010daf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010db3:	8d 50 01             	lea    edx,[eax+0x1]
c0010db6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010dba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010dbe:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0010dc2:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0010dc6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010dca:	8d 50 01             	lea    edx,[eax+0x1]
c0010dcd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010dd1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010dd5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0010dd9:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0010ddd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010de1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010de5:	01 d0                	add    eax,edx
c0010de7:	83 c0 2c             	add    eax,0x2c
c0010dea:	8a 00                	mov    al,BYTE PTR [eax]
c0010dec:	0f b6 d0             	movzx  edx,al
c0010def:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010df3:	8d 48 01             	lea    ecx,[eax+0x1]
c0010df6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010dfa:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0010dfe:	0f b6 c0             	movzx  eax,al
c0010e01:	c1 e0 08             	shl    eax,0x8
c0010e04:	89 d1                	mov    ecx,edx
c0010e06:	09 c1                	or     ecx,eax
c0010e08:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010e0c:	8d 50 02             	lea    edx,[eax+0x2]
c0010e0f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010e13:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0010e17:	0f b6 c0             	movzx  eax,al
c0010e1a:	c1 e0 10             	shl    eax,0x10
c0010e1d:	09 c1                	or     ecx,eax
c0010e1f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010e23:	8d 50 03             	lea    edx,[eax+0x3]
c0010e26:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010e2a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0010e2e:	0f b6 c0             	movzx  eax,al
c0010e31:	c1 e0 18             	shl    eax,0x18
c0010e34:	09 c8                	or     eax,ecx
c0010e36:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010e3a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0010e3f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010e43:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010e47:	01 d0                	add    eax,edx
c0010e49:	83 c0 2c             	add    eax,0x2c
c0010e4c:	8a 00                	mov    al,BYTE PTR [eax]
c0010e4e:	0f b6 c0             	movzx  eax,al
c0010e51:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010e55:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010e58:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010e5c:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0010e60:	0f b6 d2             	movzx  edx,dl
c0010e63:	c1 e2 08             	shl    edx,0x8
c0010e66:	09 d0                	or     eax,edx
c0010e68:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0010e6d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0010e72:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0010e77:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010e7b:	88 90 a0 5d 02 c0    	mov    BYTE PTR [eax-0x3ffda260],dl
c0010e81:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0010e86:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0010e8b:	66 89 84 12 80 8f 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd7080],ax
c0010e93:	e9 b0 00 00 00       	jmp    c0010f48 <scanMADT()+0x4b8>
c0010e98:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0010e9d:	0f 85 99 00 00 00    	jne    c0010f3c <scanMADT()+0x4ac>
c0010ea3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010ea7:	8d 50 01             	lea    edx,[eax+0x1]
c0010eaa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010eae:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010eb2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0010eb6:	0f b6 c0             	movzx  eax,al
c0010eb9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010ebd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010ec1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010ec5:	01 d0                	add    eax,edx
c0010ec7:	83 c0 2c             	add    eax,0x2c
c0010eca:	8a 00                	mov    al,BYTE PTR [eax]
c0010ecc:	0f b6 d0             	movzx  edx,al
c0010ecf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010ed3:	8d 48 01             	lea    ecx,[eax+0x1]
c0010ed6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010eda:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0010ede:	0f b6 c0             	movzx  eax,al
c0010ee1:	c1 e0 08             	shl    eax,0x8
c0010ee4:	09 d0                	or     eax,edx
c0010ee6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010eea:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0010eef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010ef3:	8d 50 01             	lea    edx,[eax+0x1]
c0010ef6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010efa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010efe:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0010f02:	0f b6 c0             	movzx  eax,al
c0010f05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f0d:	c1 e0 08             	shl    eax,0x8
c0010f10:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010f14:	89 c1                	mov    ecx,eax
c0010f16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f1a:	c1 e0 18             	shl    eax,0x18
c0010f1d:	89 c3                	mov    ebx,eax
c0010f1f:	a1 f0 8e 02 c0       	mov    eax,ds:0xc0028ef0
c0010f24:	8d 50 01             	lea    edx,[eax+0x1]
c0010f27:	89 15 f0 8e 02 c0    	mov    DWORD PTR ds:0xc0028ef0,edx
c0010f2d:	09 d9                	or     ecx,ebx
c0010f2f:	89 ca                	mov    edx,ecx
c0010f31:	89 14 85 00 8f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7100],edx
c0010f38:	eb 0e                	jmp    c0010f48 <scanMADT()+0x4b8>
c0010f3a:	66 90                	xchg   ax,ax
c0010f3c:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0010f41:	75 05                	jne    c0010f48 <scanMADT()+0x4b8>
c0010f43:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0010f48:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0010f4d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010f51:	01 d0                	add    eax,edx
c0010f53:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010f57:	e9 68 fc ff ff       	jmp    c0010bc4 <scanMADT()+0x134>
c0010f5c:	90                   	nop
c0010f5d:	eb 05                	jmp    c0010f64 <scanMADT()+0x4d4>
c0010f5f:	90                   	nop
c0010f60:	90                   	nop
c0010f61:	8d 76 00             	lea    esi,[esi+0x0]
c0010f64:	83 c4 38             	add    esp,0x38
c0010f67:	5b                   	pop    ebx
c0010f68:	c3                   	ret    
c0010f69:	90                   	nop
c0010f6a:	66 90                	xchg   ax,ax

c0010f6c <ACPI::ACPI()>:
c0010f6c:	83 ec 0c             	sub    esp,0xc
c0010f6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f73:	83 ec 08             	sub    esp,0x8
c0010f76:	68 27 3f 02 c0       	push   0xc0023f27
c0010f7b:	50                   	push   eax
c0010f7c:	e8 79 d3 ff ff       	call   c000e2fa <Device::Device(char const*)>
c0010f81:	83 c4 10             	add    esp,0x10
c0010f84:	ba cc 40 02 c0       	mov    edx,0xc00240cc
c0010f89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f8d:	89 10                	mov    DWORD PTR [eax],edx
c0010f8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f93:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0010f9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f9e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0010fa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fac:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0010fb6:	83 ec 0c             	sub    esp,0xc
c0010fb9:	68 2c 3f 02 c0       	push   0xc0023f2c
c0010fbe:	e8 02 8a ff ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0010fc3:	83 c4 10             	add    esp,0x10
c0010fc6:	e8 c5 fa ff ff       	call   c0010a90 <scanMADT()>
c0010fcb:	90                   	nop
c0010fcc:	83 c4 0c             	add    esp,0xc
c0010fcf:	c3                   	ret    

c0010fd0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0010fd0:	83 ec 2c             	sub    esp,0x2c
c0010fd3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0010fd7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0010fdb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0010fdf:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0010fe3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0010fe8:	88 d0                	mov    al,dl
c0010fea:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0010fee:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010ff3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0010ffb:	90                   	nop
c0010ffc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011000:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011006:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001100a:	0f 8d 9c 00 00 00    	jge    c00110ac <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c0011010:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011014:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011018:	83 c2 2a             	add    edx,0x2a
c001101b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001101f:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0011024:	75 7a                	jne    c00110a0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0011026:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001102a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001102e:	83 c2 2a             	add    edx,0x2a
c0011031:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0011035:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0011039:	75 65                	jne    c00110a0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c001103b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011040:	74 3a                	je     c001107c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c0011042:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011046:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001104a:	83 c2 2a             	add    edx,0x2a
c001104d:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0011051:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011055:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011058:	39 c2                	cmp    edx,eax
c001105a:	74 10                	je     c001106c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c001105c:	83 ec 0c             	sub    esp,0xc
c001105f:	68 80 3d 02 c0       	push   0xc0023d80
c0011064:	e8 9e 1f 00 00       	call   c0013007 <Krnl::panic(char const*)>
c0011069:	83 c4 10             	add    esp,0x10
c001106c:	83 ec 0c             	sub    esp,0xc
c001106f:	68 3a 3f 02 c0       	push   0xc0023f3a
c0011074:	e8 8e 1f 00 00       	call   c0013007 <Krnl::panic(char const*)>
c0011079:	83 c4 10             	add    esp,0x10
c001107c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0011080:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011084:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011088:	83 c2 2a             	add    edx,0x2a
c001108b:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001108f:	8b 02                	mov    eax,DWORD PTR [edx]
c0011091:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0011094:	89 01                	mov    DWORD PTR [ecx],eax
c0011096:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0011099:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001109e:	66 90                	xchg   ax,ax
c00110a0:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00110a4:	e9 53 ff ff ff       	jmp    c0010ffc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c00110a9:	8d 76 00             	lea    esi,[esi+0x0]
c00110ac:	90                   	nop
c00110ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00110b1:	83 c4 2c             	add    esp,0x2c
c00110b4:	c2 04 00             	ret    0x4
c00110b7:	90                   	nop

c00110b8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00110b8:	83 ec 1c             	sub    esp,0x1c
c00110bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00110bf:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00110c3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00110c7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00110cc:	88 c8                	mov    al,cl
c00110ce:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00110d2:	88 d0                	mov    al,dl
c00110d4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00110d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00110dc:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00110e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00110e6:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00110e9:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00110ed:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00110f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00110f5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00110fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00110ff:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0011102:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011106:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c001110b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001110f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0011115:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0011119:	8d 48 01             	lea    ecx,[eax+0x1]
c001111c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011120:	83 c2 2a             	add    edx,0x2a
c0011123:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0011127:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001112b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0011131:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011135:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0011138:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001113c:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0011140:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011144:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001114a:	8d 50 01             	lea    edx,[eax+0x1]
c001114d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011151:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0011157:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001115b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011161:	3d 00 02 00 00       	cmp    eax,0x200
c0011166:	75 10                	jne    c0011178 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0011168:	83 ec 0c             	sub    esp,0xc
c001116b:	68 49 3f 02 c0       	push   0xc0023f49
c0011170:	e8 92 1e 00 00       	call   c0013007 <Krnl::panic(char const*)>
c0011175:	83 c4 10             	add    esp,0x10
c0011178:	90                   	nop
c0011179:	83 c4 1c             	add    esp,0x1c
c001117c:	c3                   	ret    
c001117d:	90                   	nop
c001117e:	66 90                	xchg   ax,ax

c0011180 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0011180:	b8 00 00 00 00       	mov    eax,0x0
c0011185:	c3                   	ret    
c0011186:	66 90                	xchg   ax,ax

c0011188 <ACPI::detectPCI()>:
c0011188:	53                   	push   ebx
c0011189:	83 ec 68             	sub    esp,0x68
c001118c:	c6 44 24 5f 00       	mov    BYTE PTR [esp+0x5f],0x0
c0011191:	c6 44 24 5e 00       	mov    BYTE PTR [esp+0x5e],0x0
c0011196:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c001119b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00111a1:	83 e0 04             	and    eax,0x4
c00111a4:	84 c0                	test   al,al
c00111a6:	74 2c                	je     c00111d4 <ACPI::detectPCI()+0x4c>
c00111a8:	a1 e8 8e 02 c0       	mov    eax,ds:0xc0028ee8
c00111ad:	83 ec 08             	sub    esp,0x8
c00111b0:	68 66 3f 02 c0       	push   0xc0023f66
c00111b5:	50                   	push   eax
c00111b6:	e8 5d f8 ff ff       	call   c0010a18 <findDataTable(unsigned char*, char*)>
c00111bb:	83 c4 10             	add    esp,0x10
c00111be:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00111c2:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
c00111c7:	74 0b                	je     c00111d4 <ACPI::detectPCI()+0x4c>
c00111c9:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00111ce:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c00111d3:	90                   	nop
c00111d4:	c7 44 24 54 5f 0c 00 00 	mov    DWORD PTR [esp+0x54],0xc5f
c00111dc:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00111e0:	8a 00                	mov    al,BYTE PTR [eax]
c00111e2:	3c 01                	cmp    al,0x1
c00111e4:	75 0e                	jne    c00111f4 <ACPI::detectPCI()+0x6c>
c00111e6:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00111eb:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c00111f0:	eb 2a                	jmp    c001121c <ACPI::detectPCI()+0x94>
c00111f2:	66 90                	xchg   ax,ax
c00111f4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00111f8:	8a 00                	mov    al,BYTE PTR [eax]
c00111fa:	3c 02                	cmp    al,0x2
c00111fc:	75 1e                	jne    c001121c <ACPI::detectPCI()+0x94>
c00111fe:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0011203:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0011208:	74 12                	je     c001121c <ACPI::detectPCI()+0x94>
c001120a:	83 ec 0c             	sub    esp,0xc
c001120d:	68 b0 3d 02 c0       	push   0xc0023db0
c0011212:	e8 f0 1d 00 00       	call   c0013007 <Krnl::panic(char const*)>
c0011217:	83 c4 10             	add    esp,0x10
c001121a:	66 90                	xchg   ax,ax
c001121c:	8a 44 24 5f          	mov    al,BYTE PTR [esp+0x5f]
c0011220:	83 f0 01             	xor    eax,0x1
c0011223:	84 c0                	test   al,al
c0011225:	74 41                	je     c0011268 <ACPI::detectPCI()+0xe0>
c0011227:	e8 24 ef fe ff       	call   c0000150 <manualPCIProbe>
c001122c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0011230:	83 7c 24 50 01       	cmp    DWORD PTR [esp+0x50],0x1
c0011235:	75 0d                	jne    c0011244 <ACPI::detectPCI()+0xbc>
c0011237:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c001123c:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0011241:	eb 25                	jmp    c0011268 <ACPI::detectPCI()+0xe0>
c0011243:	90                   	nop
c0011244:	83 7c 24 50 02       	cmp    DWORD PTR [esp+0x50],0x2
c0011249:	75 1d                	jne    c0011268 <ACPI::detectPCI()+0xe0>
c001124b:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0011250:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0011255:	74 11                	je     c0011268 <ACPI::detectPCI()+0xe0>
c0011257:	83 ec 0c             	sub    esp,0xc
c001125a:	68 b0 3d 02 c0       	push   0xc0023db0
c001125f:	e8 a3 1d 00 00       	call   c0013007 <Krnl::panic(char const*)>
c0011264:	83 c4 10             	add    esp,0x10
c0011267:	90                   	nop
c0011268:	80 7c 24 5f 00       	cmp    BYTE PTR [esp+0x5f],0x0
c001126d:	0f 84 49 03 00 00    	je     c00115bc <ACPI::detectPCI()+0x434>
c0011273:	83 ec 0c             	sub    esp,0xc
c0011276:	68 6b 3f 02 c0       	push   0xc0023f6b
c001127b:	e8 45 87 ff ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0011280:	83 c4 10             	add    esp,0x10
c0011283:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0011288:	0f 84 8e 00 00 00    	je     c001131c <ACPI::detectPCI()+0x194>
c001128e:	a1 a0 66 02 c0       	mov    eax,ds:0xc00266a0
c0011293:	25 00 08 00 00       	and    eax,0x800
c0011298:	0f 84 16 01 00 00    	je     c00113b4 <ACPI::detectPCI()+0x22c>
c001129e:	83 ec 0c             	sub    esp,0xc
c00112a1:	68 d8 3d 02 c0       	push   0xc0023dd8
c00112a6:	e8 1a 87 ff ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c00112ab:	83 c4 10             	add    esp,0x10
c00112ae:	a1 a0 66 02 c0       	mov    eax,ds:0xc00266a0
c00112b3:	25 80 00 00 00       	and    eax,0x80
c00112b8:	0f 85 f6 00 00 00    	jne    c00113b4 <ACPI::detectPCI()+0x22c>
c00112be:	66 90                	xchg   ax,ax
c00112c0:	66 c7 44 24 3a 60 00 	mov    WORD PTR [esp+0x3a],0x60
c00112c7:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c00112cc:	89 c2                	mov    edx,eax
c00112ce:	ec                   	in     al,dx
c00112cf:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c00112d3:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c00112d7:	88 44 24 4f          	mov    BYTE PTR [esp+0x4f],al
c00112db:	80 7c 24 4f 5a       	cmp    BYTE PTR [esp+0x4f],0x5a
c00112e0:	74 0a                	je     c00112ec <ACPI::detectPCI()+0x164>
c00112e2:	80 7c 24 4f 1c       	cmp    BYTE PTR [esp+0x4f],0x1c
c00112e7:	74 03                	je     c00112ec <ACPI::detectPCI()+0x164>
c00112e9:	eb d5                	jmp    c00112c0 <ACPI::detectPCI()+0x138>
c00112eb:	90                   	nop
c00112ec:	66 c7 44 24 36 60 00 	mov    WORD PTR [esp+0x36],0x60
c00112f3:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c00112f8:	89 c2                	mov    edx,eax
c00112fa:	ec                   	in     al,dx
c00112fb:	88 44 24 35          	mov    BYTE PTR [esp+0x35],al
c00112ff:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c0011303:	88 44 24 4e          	mov    BYTE PTR [esp+0x4e],al
c0011307:	80 7c 24 4e 5a       	cmp    BYTE PTR [esp+0x4e],0x5a
c001130c:	74 de                	je     c00112ec <ACPI::detectPCI()+0x164>
c001130e:	80 7c 24 4e 1c       	cmp    BYTE PTR [esp+0x4e],0x1c
c0011313:	0f 85 93 00 00 00    	jne    c00113ac <ACPI::detectPCI()+0x224>
c0011319:	eb d1                	jmp    c00112ec <ACPI::detectPCI()+0x164>
c001131b:	90                   	nop
c001131c:	8a 44 24 5e          	mov    al,BYTE PTR [esp+0x5e]
c0011320:	83 f0 01             	xor    eax,0x1
c0011323:	84 c0                	test   al,al
c0011325:	0f 84 89 00 00 00    	je     c00113b4 <ACPI::detectPCI()+0x22c>
c001132b:	a1 a0 66 02 c0       	mov    eax,ds:0xc00266a0
c0011330:	25 00 08 00 00       	and    eax,0x800
c0011335:	74 7d                	je     c00113b4 <ACPI::detectPCI()+0x22c>
c0011337:	83 ec 0c             	sub    esp,0xc
c001133a:	68 fc 3d 02 c0       	push   0xc0023dfc
c001133f:	e8 81 86 ff ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0011344:	83 c4 10             	add    esp,0x10
c0011347:	a1 a0 66 02 c0       	mov    eax,ds:0xc00266a0
c001134c:	25 80 00 00 00       	and    eax,0x80
c0011351:	75 61                	jne    c00113b4 <ACPI::detectPCI()+0x22c>
c0011353:	90                   	nop
c0011354:	66 c7 44 24 32 60 00 	mov    WORD PTR [esp+0x32],0x60
c001135b:	66 8b 44 24 32       	mov    ax,WORD PTR [esp+0x32]
c0011360:	89 c2                	mov    edx,eax
c0011362:	ec                   	in     al,dx
c0011363:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0011367:	8a 44 24 31          	mov    al,BYTE PTR [esp+0x31]
c001136b:	88 44 24 4d          	mov    BYTE PTR [esp+0x4d],al
c001136f:	80 7c 24 4d 5a       	cmp    BYTE PTR [esp+0x4d],0x5a
c0011374:	74 0a                	je     c0011380 <ACPI::detectPCI()+0x1f8>
c0011376:	80 7c 24 4d 1c       	cmp    BYTE PTR [esp+0x4d],0x1c
c001137b:	74 03                	je     c0011380 <ACPI::detectPCI()+0x1f8>
c001137d:	eb d5                	jmp    c0011354 <ACPI::detectPCI()+0x1cc>
c001137f:	90                   	nop
c0011380:	66 c7 44 24 2e 60 00 	mov    WORD PTR [esp+0x2e],0x60
c0011387:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c001138c:	89 c2                	mov    edx,eax
c001138e:	ec                   	in     al,dx
c001138f:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0011393:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c0011397:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c001139b:	80 7c 24 4c 5a       	cmp    BYTE PTR [esp+0x4c],0x5a
c00113a0:	74 de                	je     c0011380 <ACPI::detectPCI()+0x1f8>
c00113a2:	80 7c 24 4c 1c       	cmp    BYTE PTR [esp+0x4c],0x1c
c00113a7:	75 07                	jne    c00113b0 <ACPI::detectPCI()+0x228>
c00113a9:	eb d5                	jmp    c0011380 <ACPI::detectPCI()+0x1f8>
c00113ab:	90                   	nop
c00113ac:	90                   	nop
c00113ad:	eb 05                	jmp    c00113b4 <ACPI::detectPCI()+0x22c>
c00113af:	90                   	nop
c00113b0:	90                   	nop
c00113b1:	8d 76 00             	lea    esi,[esi+0x0]
c00113b4:	c7 44 24 28 5c 01 00 00 	mov    DWORD PTR [esp+0x28],0x15c
c00113bc:	83 ec 0c             	sub    esp,0xc
c00113bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00113c3:	e8 a3 85 ff ff       	call   c000996b <malloc>
c00113c8:	83 c4 10             	add    esp,0x10
c00113cb:	89 c3                	mov    ebx,eax
c00113cd:	83 ec 0c             	sub    esp,0xc
c00113d0:	53                   	push   ebx
c00113d1:	e8 d0 b9 00 00       	call   c001cda6 <PCI::PCI()>
c00113d6:	83 c4 10             	add    esp,0x10
c00113d9:	89 5c 24 48          	mov    DWORD PTR [esp+0x48],ebx
c00113dd:	a1 a0 66 02 c0       	mov    eax,ds:0xc00266a0
c00113e2:	25 00 08 00 00       	and    eax,0x800
c00113e7:	74 7b                	je     c0011464 <ACPI::detectPCI()+0x2dc>
c00113e9:	83 ec 0c             	sub    esp,0xc
c00113ec:	68 83 3f 02 c0       	push   0xc0023f83
c00113f1:	e8 cf 85 ff ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c00113f6:	83 c4 10             	add    esp,0x10
c00113f9:	a1 a0 66 02 c0       	mov    eax,ds:0xc00266a0
c00113fe:	25 80 00 00 00       	and    eax,0x80
c0011403:	75 5f                	jne    c0011464 <ACPI::detectPCI()+0x2dc>
c0011405:	8d 76 00             	lea    esi,[esi+0x0]
c0011408:	66 c7 44 24 26 60 00 	mov    WORD PTR [esp+0x26],0x60
c001140f:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0011414:	89 c2                	mov    edx,eax
c0011416:	ec                   	in     al,dx
c0011417:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c001141b:	8a 44 24 25          	mov    al,BYTE PTR [esp+0x25]
c001141f:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0011423:	80 7c 24 47 5a       	cmp    BYTE PTR [esp+0x47],0x5a
c0011428:	74 0a                	je     c0011434 <ACPI::detectPCI()+0x2ac>
c001142a:	80 7c 24 47 1c       	cmp    BYTE PTR [esp+0x47],0x1c
c001142f:	74 03                	je     c0011434 <ACPI::detectPCI()+0x2ac>
c0011431:	eb d5                	jmp    c0011408 <ACPI::detectPCI()+0x280>
c0011433:	90                   	nop
c0011434:	66 c7 44 24 22 60 00 	mov    WORD PTR [esp+0x22],0x60
c001143b:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c0011440:	89 c2                	mov    edx,eax
c0011442:	ec                   	in     al,dx
c0011443:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0011447:	8a 44 24 21          	mov    al,BYTE PTR [esp+0x21]
c001144b:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001144f:	80 7c 24 46 5a       	cmp    BYTE PTR [esp+0x46],0x5a
c0011454:	74 de                	je     c0011434 <ACPI::detectPCI()+0x2ac>
c0011456:	80 7c 24 46 1c       	cmp    BYTE PTR [esp+0x46],0x1c
c001145b:	75 03                	jne    c0011460 <ACPI::detectPCI()+0x2d8>
c001145d:	eb d5                	jmp    c0011434 <ACPI::detectPCI()+0x2ac>
c001145f:	90                   	nop
c0011460:	90                   	nop
c0011461:	8d 76 00             	lea    esi,[esi+0x0]
c0011464:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011468:	83 ec 08             	sub    esp,0x8
c001146b:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001146f:	50                   	push   eax
c0011470:	e8 81 cc ff ff       	call   c000e0f6 <Device::addChild(Device*)>
c0011475:	83 c4 10             	add    esp,0x10
c0011478:	a1 a0 66 02 c0       	mov    eax,ds:0xc00266a0
c001147d:	25 00 08 00 00       	and    eax,0x800
c0011482:	74 78                	je     c00114fc <ACPI::detectPCI()+0x374>
c0011484:	83 ec 0c             	sub    esp,0xc
c0011487:	68 89 3f 02 c0       	push   0xc0023f89
c001148c:	e8 34 85 ff ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0011491:	83 c4 10             	add    esp,0x10
c0011494:	a1 a0 66 02 c0       	mov    eax,ds:0xc00266a0
c0011499:	25 80 00 00 00       	and    eax,0x80
c001149e:	75 5c                	jne    c00114fc <ACPI::detectPCI()+0x374>
c00114a0:	66 c7 44 24 1e 60 00 	mov    WORD PTR [esp+0x1e],0x60
c00114a7:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00114ac:	89 c2                	mov    edx,eax
c00114ae:	ec                   	in     al,dx
c00114af:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c00114b3:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c00114b7:	88 44 24 45          	mov    BYTE PTR [esp+0x45],al
c00114bb:	80 7c 24 45 5a       	cmp    BYTE PTR [esp+0x45],0x5a
c00114c0:	74 0a                	je     c00114cc <ACPI::detectPCI()+0x344>
c00114c2:	80 7c 24 45 1c       	cmp    BYTE PTR [esp+0x45],0x1c
c00114c7:	74 03                	je     c00114cc <ACPI::detectPCI()+0x344>
c00114c9:	eb d5                	jmp    c00114a0 <ACPI::detectPCI()+0x318>
c00114cb:	90                   	nop
c00114cc:	66 c7 44 24 1a 60 00 	mov    WORD PTR [esp+0x1a],0x60
c00114d3:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00114d8:	89 c2                	mov    edx,eax
c00114da:	ec                   	in     al,dx
c00114db:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c00114df:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c00114e3:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c00114e7:	80 7c 24 44 5a       	cmp    BYTE PTR [esp+0x44],0x5a
c00114ec:	74 de                	je     c00114cc <ACPI::detectPCI()+0x344>
c00114ee:	80 7c 24 44 1c       	cmp    BYTE PTR [esp+0x44],0x1c
c00114f3:	75 03                	jne    c00114f8 <ACPI::detectPCI()+0x370>
c00114f5:	eb d5                	jmp    c00114cc <ACPI::detectPCI()+0x344>
c00114f7:	90                   	nop
c00114f8:	90                   	nop
c00114f9:	8d 76 00             	lea    esi,[esi+0x0]
c00114fc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0011500:	8b 00                	mov    eax,DWORD PTR [eax]
c0011502:	83 c0 08             	add    eax,0x8
c0011505:	8b 00                	mov    eax,DWORD PTR [eax]
c0011507:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c001150c:	74 0a                	je     c0011518 <ACPI::detectPCI()+0x390>
c001150e:	ba 01 00 00 00       	mov    edx,0x1
c0011513:	eb 0b                	jmp    c0011520 <ACPI::detectPCI()+0x398>
c0011515:	8d 76 00             	lea    esi,[esi+0x0]
c0011518:	ba 02 00 00 00       	mov    edx,0x2
c001151d:	8d 76 00             	lea    esi,[esi+0x0]
c0011520:	6a 00                	push   0x0
c0011522:	6a 00                	push   0x0
c0011524:	52                   	push   edx
c0011525:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011529:	ff d0                	call   eax
c001152b:	83 c4 10             	add    esp,0x10
c001152e:	a1 a0 66 02 c0       	mov    eax,ds:0xc00266a0
c0011533:	25 00 08 00 00       	and    eax,0x800
c0011538:	0f 84 26 01 00 00    	je     c0011664 <ACPI::detectPCI()+0x4dc>
c001153e:	83 ec 0c             	sub    esp,0xc
c0011541:	68 8f 3f 02 c0       	push   0xc0023f8f
c0011546:	e8 7a 84 ff ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c001154b:	83 c4 10             	add    esp,0x10
c001154e:	a1 a0 66 02 c0       	mov    eax,ds:0xc00266a0
c0011553:	25 80 00 00 00       	and    eax,0x80
c0011558:	0f 85 06 01 00 00    	jne    c0011664 <ACPI::detectPCI()+0x4dc>
c001155e:	66 90                	xchg   ax,ax
c0011560:	66 c7 44 24 16 60 00 	mov    WORD PTR [esp+0x16],0x60
c0011567:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c001156c:	89 c2                	mov    edx,eax
c001156e:	ec                   	in     al,dx
c001156f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0011573:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0011577:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001157b:	80 7c 24 43 5a       	cmp    BYTE PTR [esp+0x43],0x5a
c0011580:	74 0a                	je     c001158c <ACPI::detectPCI()+0x404>
c0011582:	80 7c 24 43 1c       	cmp    BYTE PTR [esp+0x43],0x1c
c0011587:	74 03                	je     c001158c <ACPI::detectPCI()+0x404>
c0011589:	eb d5                	jmp    c0011560 <ACPI::detectPCI()+0x3d8>
c001158b:	90                   	nop
c001158c:	66 c7 44 24 12 60 00 	mov    WORD PTR [esp+0x12],0x60
c0011593:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0011598:	89 c2                	mov    edx,eax
c001159a:	ec                   	in     al,dx
c001159b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001159f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00115a3:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c00115a7:	80 7c 24 42 5a       	cmp    BYTE PTR [esp+0x42],0x5a
c00115ac:	74 de                	je     c001158c <ACPI::detectPCI()+0x404>
c00115ae:	80 7c 24 42 1c       	cmp    BYTE PTR [esp+0x42],0x1c
c00115b3:	0f 85 a7 00 00 00    	jne    c0011660 <ACPI::detectPCI()+0x4d8>
c00115b9:	eb d1                	jmp    c001158c <ACPI::detectPCI()+0x404>
c00115bb:	90                   	nop
c00115bc:	83 ec 0c             	sub    esp,0xc
c00115bf:	68 95 3f 02 c0       	push   0xc0023f95
c00115c4:	e8 b0 b6 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c00115c9:	83 c4 10             	add    esp,0x10
c00115cc:	83 ec 0c             	sub    esp,0xc
c00115cf:	68 a0 3f 02 c0       	push   0xc0023fa0
c00115d4:	e8 ec 83 ff ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c00115d9:	83 c4 10             	add    esp,0x10
c00115dc:	c7 44 24 0c 70 02 00 00 	mov    DWORD PTR [esp+0xc],0x270
c00115e4:	83 ec 0c             	sub    esp,0xc
c00115e7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00115eb:	e8 7b 83 ff ff       	call   c000996b <malloc>
c00115f0:	83 c4 10             	add    esp,0x10
c00115f3:	89 c3                	mov    ebx,eax
c00115f5:	83 ec 0c             	sub    esp,0xc
c00115f8:	53                   	push   ebx
c00115f9:	e8 12 c9 00 00       	call   c001df10 <IDE::IDE()>
c00115fe:	83 c4 10             	add    esp,0x10
c0011601:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0011605:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011609:	83 ec 08             	sub    esp,0x8
c001160c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011610:	50                   	push   eax
c0011611:	e8 e0 ca ff ff       	call   c000e0f6 <Device::addChild(Device*)>
c0011616:	83 c4 10             	add    esp,0x10
c0011619:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001161d:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0011627:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001162b:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0011634:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011638:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0011641:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011645:	8b 00                	mov    eax,DWORD PTR [eax]
c0011647:	83 c0 08             	add    eax,0x8
c001164a:	8b 00                	mov    eax,DWORD PTR [eax]
c001164c:	6a 00                	push   0x0
c001164e:	6a 00                	push   0x0
c0011650:	6a 00                	push   0x0
c0011652:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011656:	ff d0                	call   eax
c0011658:	83 c4 10             	add    esp,0x10
c001165b:	eb 07                	jmp    c0011664 <ACPI::detectPCI()+0x4dc>
c001165d:	8d 76 00             	lea    esi,[esi+0x0]
c0011660:	90                   	nop
c0011661:	8d 76 00             	lea    esi,[esi+0x0]
c0011664:	90                   	nop
c0011665:	83 c4 68             	add    esp,0x68
c0011668:	5b                   	pop    ebx
c0011669:	c3                   	ret    
c001166a:	66 90                	xchg   ax,ax

c001166c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001166c:	83 ec 1c             	sub    esp,0x1c
c001166f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011673:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0011676:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001167a:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c001167f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0011684:	83 ec 08             	sub    esp,0x8
c0011687:	52                   	push   edx
c0011688:	50                   	push   eax
c0011689:	e8 48 79 ff ff       	call   c0008fd6 <Computer::readCMOS(unsigned char)>
c001168e:	83 c4 10             	add    esp,0x10
c0011691:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0011695:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c001169a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001169f:	83 ec 04             	sub    esp,0x4
c00116a2:	6a 01                	push   0x1
c00116a4:	52                   	push   edx
c00116a5:	50                   	push   eax
c00116a6:	e8 49 7a ff ff       	call   c00090f4 <Computer::writeCMOS(unsigned char, unsigned char)>
c00116ab:	83 c4 10             	add    esp,0x10
c00116ae:	90                   	nop
c00116af:	83 c4 1c             	add    esp,0x1c
c00116b2:	c3                   	ret    
c00116b3:	90                   	nop

c00116b4 <ACPI::sleep()>:
c00116b4:	83 ec 0c             	sub    esp,0xc
c00116b7:	83 ec 0c             	sub    esp,0xc
c00116ba:	68 b5 3f 02 c0       	push   0xc0023fb5
c00116bf:	e8 b5 b5 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c00116c4:	83 c4 10             	add    esp,0x10
c00116c7:	a1 c0 8c 02 c0       	mov    eax,ds:0xc0028cc0
c00116cc:	85 c0                	test   eax,eax
c00116ce:	74 18                	je     c00116e8 <ACPI::sleep()+0x34>
c00116d0:	83 ec 0c             	sub    esp,0xc
c00116d3:	68 c2 3f 02 c0       	push   0xc0023fc2
c00116d8:	e8 9c b5 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c00116dd:	83 c4 10             	add    esp,0x10
c00116e0:	a1 c0 8c 02 c0       	mov    eax,ds:0xc0028cc0
c00116e5:	ff d0                	call   eax
c00116e7:	90                   	nop
c00116e8:	90                   	nop
c00116e9:	83 c4 0c             	add    esp,0xc
c00116ec:	c3                   	ret    
c00116ed:	90                   	nop
c00116ee:	66 90                	xchg   ax,ax

c00116f0 <ACPI::open(int, int, void*)>:
c00116f0:	57                   	push   edi
c00116f1:	56                   	push   esi
c00116f2:	53                   	push   ebx
c00116f3:	81 ec 70 01 00 00    	sub    esp,0x170
c00116f9:	83 ec 0c             	sub    esp,0xc
c00116fc:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0011703:	e8 80 fa ff ff       	call   c0011188 <ACPI::detectPCI()>
c0011708:	83 c4 10             	add    esp,0x10
c001170b:	83 ec 0c             	sub    esp,0xc
c001170e:	68 20 3e 02 c0       	push   0xc0023e20
c0011713:	e8 ad 82 ff ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0011718:	83 c4 10             	add    esp,0x10
c001171b:	83 ec 0c             	sub    esp,0xc
c001171e:	68 dc 3f 02 c0       	push   0xc0023fdc
c0011723:	e8 ed 3a 00 00       	call   c0015215 <Thr::loadKernelSymbolTable(char const*)>
c0011728:	83 c4 10             	add    esp,0x10
c001172b:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c0011733:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c001173e:	83 ec 0c             	sub    esp,0xc
c0011741:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0011748:	e8 1e 82 ff ff       	call   c000996b <malloc>
c001174d:	83 c4 10             	add    esp,0x10
c0011750:	89 c3                	mov    ebx,eax
c0011752:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c0011757:	83 ec 04             	sub    esp,0x4
c001175a:	50                   	push   eax
c001175b:	68 fa 3f 02 c0       	push   0xc0023ffa
c0011760:	53                   	push   ebx
c0011761:	e8 7e ba ff ff       	call   c000d1e4 <File::File(char const*, Process*)>
c0011766:	83 c4 10             	add    esp,0x10
c0011769:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c0011770:	83 ec 08             	sub    esp,0x8
c0011773:	6a 01                	push   0x1
c0011775:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001177c:	e8 3d bb ff ff       	call   c000d2be <File::open(FileOpenMode)>
c0011781:	83 c4 10             	add    esp,0x10
c0011784:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c001178b:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c0011793:	75 17                	jne    c00117ac <ACPI::open(int, int, void*)+0xbc>
c0011795:	83 ec 0c             	sub    esp,0xc
c0011798:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001179f:	e8 78 bb ff ff       	call   c000d31c <File::close()>
c00117a4:	83 c4 10             	add    esp,0x10
c00117a7:	eb 0b                	jmp    c00117b4 <ACPI::open(int, int, void*)+0xc4>
c00117a9:	8d 76 00             	lea    esi,[esi+0x0]
c00117ac:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c00117b4:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c00117bc:	74 1e                	je     c00117dc <ACPI::open(int, int, void*)+0xec>
c00117be:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c00117c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00117c7:	83 c0 08             	add    eax,0x8
c00117ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00117cc:	83 ec 0c             	sub    esp,0xc
c00117cf:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c00117d6:	ff d0                	call   eax
c00117d8:	83 c4 10             	add    esp,0x10
c00117db:	90                   	nop
c00117dc:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c00117e3:	83 f0 01             	xor    eax,0x1
c00117e6:	84 c0                	test   al,al
c00117e8:	74 42                	je     c001182c <ACPI::open(int, int, void*)+0x13c>
c00117ea:	83 ec 0c             	sub    esp,0xc
c00117ed:	68 18 40 02 c0       	push   0xc0024018
c00117f2:	e8 ce 81 ff ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c00117f7:	83 c4 10             	add    esp,0x10
c00117fa:	83 ec 04             	sub    esp,0x4
c00117fd:	6a 0c                	push   0xc
c00117ff:	68 33 40 02 c0       	push   0xc0024033
c0011804:	68 44 40 02 c0       	push   0xc0024044
c0011809:	e8 71 20 00 00       	call   c001387f <Reg::readIntWithDefault(char*, char*, int)>
c001180e:	83 c4 10             	add    esp,0x10
c0011811:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c0011818:	83 ec 0c             	sub    esp,0xc
c001181b:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c0011822:	e8 00 a3 ff ff       	call   c000bb27 <Virt::setupPageSwapping(int)>
c0011827:	83 c4 10             	add    esp,0x10
c001182a:	66 90                	xchg   ax,ax
c001182c:	83 ec 0c             	sub    esp,0xc
c001182f:	68 66 2b 02 c0       	push   0xc0022b66
c0011834:	e8 8c 81 ff ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0011839:	83 c4 10             	add    esp,0x10
c001183c:	8b 1d 88 66 02 c0    	mov    ebx,DWORD PTR ds:0xc0026688
c0011842:	83 ec 08             	sub    esp,0x8
c0011845:	6a 01                	push   0x1
c0011847:	68 4b 40 02 c0       	push   0xc002404b
c001184c:	e8 3b 44 00 00       	call   c0015c8c <Thr::loadDLL(char const*, bool)>
c0011851:	83 c4 10             	add    esp,0x10
c0011854:	83 ec 08             	sub    esp,0x8
c0011857:	53                   	push   ebx
c0011858:	50                   	push   eax
c0011859:	e8 5f 46 00 00       	call   c0015ebd <Thr::executeDLL(unsigned long, void*)>
c001185e:	83 c4 10             	add    esp,0x10
c0011861:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0011868:	83 ec 08             	sub    esp,0x8
c001186b:	6a 12                	push   0x12
c001186d:	50                   	push   eax
c001186e:	e8 07 cc ff ff       	call   c000e47a <getDevicesOfType(DeviceType)>
c0011873:	83 c4 0c             	add    esp,0xc
c0011876:	66 90                	xchg   ax,ax
c0011878:	83 ec 0c             	sub    esp,0xc
c001187b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0011882:	50                   	push   eax
c0011883:	e8 a4 06 01 00       	call   c0021f2c <LinkedList<Device>::isEmpty()>
c0011888:	83 c4 10             	add    esp,0x10
c001188b:	83 f0 01             	xor    eax,0x1
c001188e:	84 c0                	test   al,al
c0011890:	0f 84 46 01 00 00    	je     c00119dc <ACPI::open(int, int, void*)+0x2ec>
c0011896:	83 ec 0c             	sub    esp,0xc
c0011899:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00118a0:	50                   	push   eax
c00118a1:	e8 a2 06 01 00       	call   c0021f48 <LinkedList<Device>::getFirstElement()>
c00118a6:	83 c4 10             	add    esp,0x10
c00118a9:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c00118b0:	83 ec 0c             	sub    esp,0xc
c00118b3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00118ba:	50                   	push   eax
c00118bb:	e8 90 06 01 00       	call   c0021f50 <LinkedList<Device>::removeFirst()>
c00118c0:	83 c4 10             	add    esp,0x10
c00118c3:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c00118ca:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c00118d1:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c00118d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00118dc:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c00118e2:	ba 09 00 00 00       	mov    edx,0x9
c00118e7:	fc                   	cld    
c00118e8:	89 c7                	mov    edi,eax
c00118ea:	89 de                	mov    esi,ebx
c00118ec:	89 d1                	mov    ecx,edx
c00118ee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00118f0:	83 ec 08             	sub    esp,0x8
c00118f3:	8d 44 24 38          	lea    eax,[esp+0x38]
c00118f7:	50                   	push   eax
c00118f8:	83 ec 24             	sub    esp,0x24
c00118fb:	89 e0                	mov    eax,esp
c00118fd:	89 c3                	mov    ebx,eax
c00118ff:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0011903:	ba 09 00 00 00       	mov    edx,0x9
c0011908:	89 df                	mov    edi,ebx
c001190a:	89 c6                	mov    esi,eax
c001190c:	89 d1                	mov    ecx,edx
c001190e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011910:	e8 6f b9 00 00       	call   c001d284 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0011915:	83 c4 30             	add    esp,0x30
c0011918:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c001191f:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c0011927:	0f 84 4b ff ff ff    	je     c0011878 <ACPI::open(int, int, void*)+0x188>
c001192d:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0011938:	83 ec 0c             	sub    esp,0xc
c001193b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0011942:	e8 24 80 ff ff       	call   c000996b <malloc>
c0011947:	83 c4 10             	add    esp,0x10
c001194a:	89 c3                	mov    ebx,eax
c001194c:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c0011951:	83 ec 04             	sub    esp,0x4
c0011954:	50                   	push   eax
c0011955:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001195c:	53                   	push   ebx
c001195d:	e8 82 b8 ff ff       	call   c000d1e4 <File::File(char const*, Process*)>
c0011962:	83 c4 10             	add    esp,0x10
c0011965:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c001196c:	83 ec 0c             	sub    esp,0xc
c001196f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0011976:	e8 b1 bb ff ff       	call   c000d52c <File::exists()>
c001197b:	83 c4 10             	add    esp,0x10
c001197e:	84 c0                	test   al,al
c0011980:	74 2a                	je     c00119ac <ACPI::open(int, int, void*)+0x2bc>
c0011982:	83 ec 08             	sub    esp,0x8
c0011985:	6a 01                	push   0x1
c0011987:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c001198e:	e8 f9 42 00 00       	call   c0015c8c <Thr::loadDLL(char const*, bool)>
c0011993:	83 c4 10             	add    esp,0x10
c0011996:	83 ec 08             	sub    esp,0x8
c0011999:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c00119a0:	50                   	push   eax
c00119a1:	e8 17 45 00 00       	call   c0015ebd <Thr::executeDLL(unsigned long, void*)>
c00119a6:	83 c4 10             	add    esp,0x10
c00119a9:	8d 76 00             	lea    esi,[esi+0x0]
c00119ac:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c00119b4:	0f 84 be fe ff ff    	je     c0011878 <ACPI::open(int, int, void*)+0x188>
c00119ba:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c00119c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00119c3:	83 c0 08             	add    eax,0x8
c00119c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00119c8:	83 ec 0c             	sub    esp,0xc
c00119cb:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00119d2:	ff d0                	call   eax
c00119d4:	83 c4 10             	add    esp,0x10
c00119d7:	e9 9c fe ff ff       	jmp    c0011878 <ACPI::open(int, int, void*)+0x188>
c00119dc:	83 ec 0c             	sub    esp,0xc
c00119df:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00119e6:	50                   	push   eax
c00119e7:	e8 3c 05 01 00       	call   c0021f28 <LinkedList<Device>::~LinkedList()>
c00119ec:	83 c4 10             	add    esp,0x10
c00119ef:	8b 1d 88 66 02 c0    	mov    ebx,DWORD PTR ds:0xc0026688
c00119f5:	83 ec 08             	sub    esp,0x8
c00119f8:	6a 01                	push   0x1
c00119fa:	68 66 40 02 c0       	push   0xc0024066
c00119ff:	e8 88 42 00 00       	call   c0015c8c <Thr::loadDLL(char const*, bool)>
c0011a04:	83 c4 10             	add    esp,0x10
c0011a07:	83 ec 08             	sub    esp,0x8
c0011a0a:	53                   	push   ebx
c0011a0b:	50                   	push   eax
c0011a0c:	e8 ac 44 00 00       	call   c0015ebd <Thr::executeDLL(unsigned long, void*)>
c0011a11:	83 c4 10             	add    esp,0x10
c0011a14:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c0011a19:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011a1f:	83 e0 04             	and    eax,0x4
c0011a22:	84 c0                	test   al,al
c0011a24:	0f 84 16 01 00 00    	je     c0011b40 <ACPI::open(int, int, void*)+0x450>
c0011a2a:	83 ec 0c             	sub    esp,0xc
c0011a2d:	68 83 40 02 c0       	push   0xc0024083
c0011a32:	e8 8e 7f ff ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0011a37:	83 c4 10             	add    esp,0x10
c0011a3a:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0011a45:	83 ec 0c             	sub    esp,0xc
c0011a48:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0011a4f:	e8 17 7f ff ff       	call   c000996b <malloc>
c0011a54:	83 c4 10             	add    esp,0x10
c0011a57:	89 c3                	mov    ebx,eax
c0011a59:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c0011a5e:	83 ec 04             	sub    esp,0x4
c0011a61:	50                   	push   eax
c0011a62:	68 a0 40 02 c0       	push   0xc00240a0
c0011a67:	53                   	push   ebx
c0011a68:	e8 77 b7 ff ff       	call   c000d1e4 <File::File(char const*, Process*)>
c0011a6d:	83 c4 10             	add    esp,0x10
c0011a70:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0011a77:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0011a7f:	74 1b                	je     c0011a9c <ACPI::open(int, int, void*)+0x3ac>
c0011a81:	83 ec 0c             	sub    esp,0xc
c0011a84:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0011a8b:	e8 9c ba ff ff       	call   c000d52c <File::exists()>
c0011a90:	83 c4 10             	add    esp,0x10
c0011a93:	84 c0                	test   al,al
c0011a95:	74 05                	je     c0011a9c <ACPI::open(int, int, void*)+0x3ac>
c0011a97:	b0 01                	mov    al,0x1
c0011a99:	eb 05                	jmp    c0011aa0 <ACPI::open(int, int, void*)+0x3b0>
c0011a9b:	90                   	nop
c0011a9c:	b0 00                	mov    al,0x0
c0011a9e:	66 90                	xchg   ax,ax
c0011aa0:	84 c0                	test   al,al
c0011aa2:	74 28                	je     c0011acc <ACPI::open(int, int, void*)+0x3dc>
c0011aa4:	83 ec 08             	sub    esp,0x8
c0011aa7:	6a 01                	push   0x1
c0011aa9:	68 a0 40 02 c0       	push   0xc00240a0
c0011aae:	e8 d9 41 00 00       	call   c0015c8c <Thr::loadDLL(char const*, bool)>
c0011ab3:	83 c4 10             	add    esp,0x10
c0011ab6:	83 ec 08             	sub    esp,0x8
c0011ab9:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0011ac0:	50                   	push   eax
c0011ac1:	e8 f7 43 00 00       	call   c0015ebd <Thr::executeDLL(unsigned long, void*)>
c0011ac6:	83 c4 10             	add    esp,0x10
c0011ac9:	8d 76 00             	lea    esi,[esi+0x0]
c0011acc:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0011ad4:	74 2a                	je     c0011b00 <ACPI::open(int, int, void*)+0x410>
c0011ad6:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0011ade:	74 20                	je     c0011b00 <ACPI::open(int, int, void*)+0x410>
c0011ae0:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0011ae7:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ae9:	83 c0 08             	add    eax,0x8
c0011aec:	8b 00                	mov    eax,DWORD PTR [eax]
c0011aee:	83 ec 0c             	sub    esp,0xc
c0011af1:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0011af8:	ff d0                	call   eax
c0011afa:	83 c4 10             	add    esp,0x10
c0011afd:	8d 76 00             	lea    esi,[esi+0x0]
c0011b00:	a1 e8 8e 02 c0       	mov    eax,ds:0xc0028ee8
c0011b05:	83 ec 08             	sub    esp,0x8
c0011b08:	68 bd 40 02 c0       	push   0xc00240bd
c0011b0d:	50                   	push   eax
c0011b0e:	e8 05 ef ff ff       	call   c0010a18 <findDataTable(unsigned char*, char*)>
c0011b13:	83 c4 10             	add    esp,0x10
c0011b16:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0011b1d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0011b25:	74 19                	je     c0011b40 <ACPI::open(int, int, void*)+0x450>
c0011b27:	83 ec 08             	sub    esp,0x8
c0011b2a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0011b31:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0011b38:	e8 2f fb ff ff       	call   c001166c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0011b3d:	83 c4 10             	add    esp,0x10
c0011b40:	b8 00 00 00 00       	mov    eax,0x0
c0011b45:	81 c4 70 01 00 00    	add    esp,0x170
c0011b4b:	5b                   	pop    ebx
c0011b4c:	5e                   	pop    esi
c0011b4d:	5f                   	pop    edi
c0011b4e:	c3                   	ret    
c0011b4f:	90                   	nop

c0011b50 <CPU::close(int, int, void*)>:
c0011b50:	31 c0                	xor    eax,eax
c0011b52:	c3                   	ret    
c0011b53:	90                   	nop

c0011b54 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0011b54:	60                   	pusha  
c0011b55:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0011b59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b5d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011b61:	9c                   	pushf  
c0011b62:	fa                   	cli    
c0011b63:	0f 09                	wbinvd 
c0011b65:	0f 30                	wrmsr  
c0011b67:	9d                   	popf   
c0011b68:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011b6c:	89 02                	mov    DWORD PTR [edx],eax
c0011b6e:	61                   	popa   
c0011b6f:	c3                   	ret    

c0011b70 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0011b70:	60                   	pusha  
c0011b71:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0011b75:	9c                   	pushf  
c0011b76:	fa                   	cli    
c0011b77:	0f 09                	wbinvd 
c0011b79:	31 c0                	xor    eax,eax
c0011b7b:	31 d2                	xor    edx,edx
c0011b7d:	0f 32                	rdmsr  
c0011b7f:	9d                   	popf   
c0011b80:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011b84:	89 02                	mov    DWORD PTR [edx],eax
c0011b86:	61                   	popa   
c0011b87:	c3                   	ret    

c0011b88 <CPU::AMD_K6_writeback(int, int, int)>:
c0011b88:	56                   	push   esi
c0011b89:	53                   	push   ebx
c0011b8a:	83 ec 10             	sub    esp,0x10
c0011b8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011b91:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0011b96:	75 5d                	jne    c0011bf5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0011b98:	83 f8 08             	cmp    eax,0x8
c0011b9b:	75 09                	jne    c0011ba6 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0011b9d:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0011ba2:	7e 13                	jle    c0011bb7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0011ba4:	eb 30                	jmp    c0011bd6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0011ba6:	83 f8 06             	cmp    eax,0x6
c0011ba9:	7c 4a                	jl     c0011bf5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0011bab:	83 f8 07             	cmp    eax,0x7
c0011bae:	7e 07                	jle    c0011bb7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0011bb0:	83 f8 09             	cmp    eax,0x9
c0011bb3:	74 21                	je     c0011bd6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0011bb5:	eb 3e                	jmp    c0011bf5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0011bb7:	89 e6                	mov    esi,esp
c0011bb9:	8b 1d ac 66 02 c0    	mov    ebx,DWORD PTR ds:0xc00266ac
c0011bbf:	56                   	push   esi
c0011bc0:	c1 eb 15             	shr    ebx,0x15
c0011bc3:	68 82 00 00 c0       	push   0xc0000082
c0011bc8:	83 e3 7e             	and    ebx,0x7e
c0011bcb:	e8 a0 ff ff ff       	call   c0011b70 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0011bd0:	56                   	push   esi
c0011bd1:	6a 00                	push   0x0
c0011bd3:	53                   	push   ebx
c0011bd4:	eb 12                	jmp    c0011be8 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0011bd6:	89 e3                	mov    ebx,esp
c0011bd8:	53                   	push   ebx
c0011bd9:	68 82 00 00 c0       	push   0xc0000082
c0011bde:	e8 8d ff ff ff       	call   c0011b70 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0011be3:	53                   	push   ebx
c0011be4:	6a 00                	push   0x0
c0011be6:	6a 00                	push   0x0
c0011be8:	68 82 00 00 c0       	push   0xc0000082
c0011bed:	e8 62 ff ff ff       	call   c0011b54 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0011bf2:	83 c4 18             	add    esp,0x18
c0011bf5:	83 c4 10             	add    esp,0x10
c0011bf8:	5b                   	pop    ebx
c0011bf9:	5e                   	pop    esi
c0011bfa:	c3                   	ret    
c0011bfb:	90                   	nop

c0011bfc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0011bfc:	55                   	push   ebp
c0011bfd:	57                   	push   edi
c0011bfe:	56                   	push   esi
c0011bff:	53                   	push   ebx
c0011c00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011c04:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011c08:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0011c0c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0011c10:	39 05 b0 5d 02 c0    	cmp    DWORD PTR ds:0xc0025db0,eax
c0011c16:	75 23                	jne    c0011c3b <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0011c18:	a1 4c 91 02 c0       	mov    eax,ds:0xc002914c
c0011c1d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011c21:	89 06                	mov    DWORD PTR [esi],eax
c0011c23:	a1 48 91 02 c0       	mov    eax,ds:0xc0029148
c0011c28:	89 07                	mov    DWORD PTR [edi],eax
c0011c2a:	a1 44 91 02 c0       	mov    eax,ds:0xc0029144
c0011c2f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0011c32:	a1 40 91 02 c0       	mov    eax,ds:0xc0029140
c0011c37:	89 02                	mov    DWORD PTR [edx],eax
c0011c39:	eb 3f                	jmp    c0011c7a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0011c3b:	31 c9                	xor    ecx,ecx
c0011c3d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011c41:	0f a2                	cpuid  
c0011c43:	89 06                	mov    DWORD PTR [esi],eax
c0011c45:	89 1f                	mov    DWORD PTR [edi],ebx
c0011c47:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011c4b:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0011c4e:	89 10                	mov    DWORD PTR [eax],edx
c0011c50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011c54:	a3 b0 5d 02 c0       	mov    ds:0xc0025db0,eax
c0011c59:	8b 06                	mov    eax,DWORD PTR [esi]
c0011c5b:	a3 4c 91 02 c0       	mov    ds:0xc002914c,eax
c0011c60:	8b 07                	mov    eax,DWORD PTR [edi]
c0011c62:	a3 48 91 02 c0       	mov    ds:0xc0029148,eax
c0011c67:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011c6a:	a3 44 91 02 c0       	mov    ds:0xc0029144,eax
c0011c6f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011c73:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c75:	a3 40 91 02 c0       	mov    ds:0xc0029140,eax
c0011c7a:	5b                   	pop    ebx
c0011c7b:	5e                   	pop    esi
c0011c7c:	5f                   	pop    edi
c0011c7d:	5d                   	pop    ebp
c0011c7e:	c3                   	ret    
c0011c7f:	90                   	nop

c0011c80 <CPU::cpuidCheckEDX(unsigned int)>:
c0011c80:	83 ec 10             	sub    esp,0x10
c0011c83:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011c87:	50                   	push   eax
c0011c88:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011c8c:	50                   	push   eax
c0011c8d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011c91:	50                   	push   eax
c0011c92:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011c96:	50                   	push   eax
c0011c97:	6a 01                	push   0x1
c0011c99:	e8 5e ff ff ff       	call   c0011bfc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0011c9e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ca2:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0011ca6:	0f 95 c0             	setne  al
c0011ca9:	83 c4 24             	add    esp,0x24
c0011cac:	c3                   	ret    
c0011cad:	90                   	nop

c0011cae <CPU::cpuidCheckECX(unsigned int)>:
c0011cae:	83 ec 10             	sub    esp,0x10
c0011cb1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011cb5:	50                   	push   eax
c0011cb6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011cba:	50                   	push   eax
c0011cbb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011cbf:	50                   	push   eax
c0011cc0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011cc4:	50                   	push   eax
c0011cc5:	6a 01                	push   0x1
c0011cc7:	e8 30 ff ff ff       	call   c0011bfc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0011ccc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011cd0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0011cd4:	0f 95 c0             	setne  al
c0011cd7:	83 c4 24             	add    esp,0x24
c0011cda:	c3                   	ret    
c0011cdb:	90                   	nop

c0011cdc <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0011cdc:	83 ec 10             	sub    esp,0x10
c0011cdf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011ce3:	50                   	push   eax
c0011ce4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011ce8:	50                   	push   eax
c0011ce9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011ced:	50                   	push   eax
c0011cee:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011cf2:	50                   	push   eax
c0011cf3:	6a 07                	push   0x7
c0011cf5:	e8 02 ff ff ff       	call   c0011bfc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0011cfa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011cfe:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0011d02:	0f 95 c0             	setne  al
c0011d05:	83 c4 24             	add    esp,0x24
c0011d08:	c3                   	ret    
c0011d09:	90                   	nop

c0011d0a <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0011d0a:	83 ec 10             	sub    esp,0x10
c0011d0d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011d11:	50                   	push   eax
c0011d12:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011d16:	50                   	push   eax
c0011d17:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011d1b:	50                   	push   eax
c0011d1c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011d20:	50                   	push   eax
c0011d21:	6a 07                	push   0x7
c0011d23:	e8 d4 fe ff ff       	call   c0011bfc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0011d28:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011d2c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0011d30:	0f 95 c0             	setne  al
c0011d33:	83 c4 24             	add    esp,0x24
c0011d36:	c3                   	ret    
c0011d37:	90                   	nop

c0011d38 <CPU::CPU()>:
c0011d38:	83 ec 0c             	sub    esp,0xc
c0011d3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d3f:	83 ec 08             	sub    esp,0x8
c0011d42:	68 e1 41 02 c0       	push   0xc00241e1
c0011d47:	50                   	push   eax
c0011d48:	e8 ad c5 ff ff       	call   c000e2fa <Device::Device(char const*)>
c0011d4d:	83 c4 10             	add    esp,0x10
c0011d50:	ba b8 42 02 c0       	mov    edx,0xc00242b8
c0011d55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d59:	89 10                	mov    DWORD PTR [eax],edx
c0011d5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d5f:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0011d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d6d:	05 78 01 00 00       	add    eax,0x178
c0011d72:	83 ec 0c             	sub    esp,0xc
c0011d75:	50                   	push   eax
c0011d76:	e8 63 74 ff ff       	call   c00091de <GDT::GDT()>
c0011d7b:	83 c4 10             	add    esp,0x10
c0011d7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d82:	05 7c 09 00 00       	add    eax,0x97c
c0011d87:	83 ec 0c             	sub    esp,0xc
c0011d8a:	50                   	push   eax
c0011d8b:	e8 c8 76 ff ff       	call   c0009458 <IDT::IDT()>
c0011d90:	83 c4 10             	add    esp,0x10
c0011d93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d97:	05 7c 11 00 00       	add    eax,0x117c
c0011d9c:	83 ec 0c             	sub    esp,0xc
c0011d9f:	50                   	push   eax
c0011da0:	e8 bb 94 ff ff       	call   c000b260 <TSS::TSS()>
c0011da5:	83 c4 10             	add    esp,0x10
c0011da8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dac:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c0011db3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011db7:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0011dc1:	90                   	nop
c0011dc2:	83 c4 0c             	add    esp,0xc
c0011dc5:	c3                   	ret    

c0011dc6 <CPU::displayFeatures()>:
c0011dc6:	c3                   	ret    
c0011dc7:	90                   	nop

c0011dc8 <CPU::detectFeatures()>:
c0011dc8:	55                   	push   ebp
c0011dc9:	57                   	push   edi
c0011dca:	56                   	push   esi
c0011dcb:	53                   	push   ebx
c0011dcc:	83 ec 30             	sub    esp,0x30
c0011dcf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0011dd3:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c0011ddd:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c0011de4:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0011dea:	6a 0d                	push   0xd
c0011dec:	6a 00                	push   0x0
c0011dee:	55                   	push   ebp
c0011def:	e8 88 e8 fe ff       	call   c000067c <memset>
c0011df4:	83 c4 10             	add    esp,0x10
c0011df7:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c0011dfc:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0011e03:	0f 84 e8 05 00 00    	je     c00123f1 <CPU::detectFeatures()+0x629>
c0011e09:	83 ec 0c             	sub    esp,0xc
c0011e0c:	89 ef                	mov    edi,ebp
c0011e0e:	6a 10                	push   0x10
c0011e10:	e8 6b fe ff ff       	call   c0011c80 <CPU::cpuidCheckEDX(unsigned int)>
c0011e15:	83 e0 01             	and    eax,0x1
c0011e18:	8d 14 00             	lea    edx,[eax+eax*1]
c0011e1b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0011e21:	83 e0 fd             	and    eax,0xfffffffd
c0011e24:	09 d0                	or     eax,edx
c0011e26:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0011e2c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0011e33:	e8 48 fe ff ff       	call   c0011c80 <CPU::cpuidCheckEDX(unsigned int)>
c0011e38:	83 e0 01             	and    eax,0x1
c0011e3b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0011e42:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0011e48:	83 e0 fb             	and    eax,0xfffffffb
c0011e4b:	09 d0                	or     eax,edx
c0011e4d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0011e53:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0011e5a:	e8 21 fe ff ff       	call   c0011c80 <CPU::cpuidCheckEDX(unsigned int)>
c0011e5f:	83 e0 01             	and    eax,0x1
c0011e62:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0011e69:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0011e6f:	83 e0 f7             	and    eax,0xfffffff7
c0011e72:	09 d0                	or     eax,edx
c0011e74:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0011e7a:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0011e81:	e8 fa fd ff ff       	call   c0011c80 <CPU::cpuidCheckEDX(unsigned int)>
c0011e86:	83 e0 01             	and    eax,0x1
c0011e89:	c1 e0 04             	shl    eax,0x4
c0011e8c:	88 c2                	mov    dl,al
c0011e8e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0011e94:	83 e0 ef             	and    eax,0xffffffef
c0011e97:	09 d0                	or     eax,edx
c0011e99:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0011e9f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0011ea6:	e8 d5 fd ff ff       	call   c0011c80 <CPU::cpuidCheckEDX(unsigned int)>
c0011eab:	83 e0 01             	and    eax,0x1
c0011eae:	c1 e0 05             	shl    eax,0x5
c0011eb1:	88 c2                	mov    dl,al
c0011eb3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0011eb9:	83 e0 df             	and    eax,0xffffffdf
c0011ebc:	09 d0                	or     eax,edx
c0011ebe:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0011ec4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0011ecb:	e8 b0 fd ff ff       	call   c0011c80 <CPU::cpuidCheckEDX(unsigned int)>
c0011ed0:	83 e0 01             	and    eax,0x1
c0011ed3:	8d 14 00             	lea    edx,[eax+eax*1]
c0011ed6:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0011edc:	83 e0 fd             	and    eax,0xfffffffd
c0011edf:	09 d0                	or     eax,edx
c0011ee1:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0011ee7:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0011eee:	e8 8d fd ff ff       	call   c0011c80 <CPU::cpuidCheckEDX(unsigned int)>
c0011ef3:	83 e0 01             	and    eax,0x1
c0011ef6:	c1 e0 06             	shl    eax,0x6
c0011ef9:	88 c2                	mov    dl,al
c0011efb:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0011f01:	83 e0 bf             	and    eax,0xffffffbf
c0011f04:	09 d0                	or     eax,edx
c0011f06:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0011f0c:	58                   	pop    eax
c0011f0d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011f11:	50                   	push   eax
c0011f12:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011f16:	50                   	push   eax
c0011f17:	8d 74 24 28          	lea    esi,[esp+0x28]
c0011f1b:	56                   	push   esi
c0011f1c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011f20:	50                   	push   eax
c0011f21:	6a 00                	push   0x0
c0011f23:	e8 d4 fc ff ff       	call   c0011bfc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0011f28:	b8 04 00 00 00       	mov    eax,0x4
c0011f2d:	89 c1                	mov    ecx,eax
c0011f2f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011f31:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0011f37:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0011f3b:	89 c1                	mov    ecx,eax
c0011f3d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011f3f:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0011f45:	8d 74 24 38          	lea    esi,[esp+0x38]
c0011f49:	89 c1                	mov    ecx,eax
c0011f4b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011f4d:	83 c4 18             	add    esp,0x18
c0011f50:	68 f0 40 02 c0       	push   0xc00240f0
c0011f55:	55                   	push   ebp
c0011f56:	e8 69 e8 fe ff       	call   c00007c4 <strcmp>
c0011f5b:	83 c4 10             	add    esp,0x10
c0011f5e:	85 c0                	test   eax,eax
c0011f60:	75 0f                	jne    c0011f71 <CPU::detectFeatures()+0x1a9>
c0011f62:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0011f6c:	e9 22 02 00 00       	jmp    c0012193 <CPU::detectFeatures()+0x3cb>
c0011f71:	50                   	push   eax
c0011f72:	50                   	push   eax
c0011f73:	68 fd 40 02 c0       	push   0xc00240fd
c0011f78:	55                   	push   ebp
c0011f79:	e8 46 e8 fe ff       	call   c00007c4 <strcmp>
c0011f7e:	83 c4 10             	add    esp,0x10
c0011f81:	85 c0                	test   eax,eax
c0011f83:	74 dd                	je     c0011f62 <CPU::detectFeatures()+0x19a>
c0011f85:	50                   	push   eax
c0011f86:	50                   	push   eax
c0011f87:	68 0a 41 02 c0       	push   0xc002410a
c0011f8c:	55                   	push   ebp
c0011f8d:	e8 32 e8 fe ff       	call   c00007c4 <strcmp>
c0011f92:	83 c4 10             	add    esp,0x10
c0011f95:	85 c0                	test   eax,eax
c0011f97:	74 2a                	je     c0011fc3 <CPU::detectFeatures()+0x1fb>
c0011f99:	50                   	push   eax
c0011f9a:	50                   	push   eax
c0011f9b:	68 17 41 02 c0       	push   0xc0024117
c0011fa0:	55                   	push   ebp
c0011fa1:	e8 1e e8 fe ff       	call   c00007c4 <strcmp>
c0011fa6:	83 c4 10             	add    esp,0x10
c0011fa9:	85 c0                	test   eax,eax
c0011fab:	74 16                	je     c0011fc3 <CPU::detectFeatures()+0x1fb>
c0011fad:	50                   	push   eax
c0011fae:	50                   	push   eax
c0011faf:	68 24 41 02 c0       	push   0xc0024124
c0011fb4:	55                   	push   ebp
c0011fb5:	e8 0a e8 fe ff       	call   c00007c4 <strcmp>
c0011fba:	83 c4 10             	add    esp,0x10
c0011fbd:	85 c0                	test   eax,eax
c0011fbf:	74 48                	je     c0012009 <CPU::detectFeatures()+0x241>
c0011fc1:	eb 0f                	jmp    c0011fd2 <CPU::detectFeatures()+0x20a>
c0011fc3:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0011fcd:	e9 c1 01 00 00       	jmp    c0012193 <CPU::detectFeatures()+0x3cb>
c0011fd2:	50                   	push   eax
c0011fd3:	50                   	push   eax
c0011fd4:	68 31 41 02 c0       	push   0xc0024131
c0011fd9:	55                   	push   ebp
c0011fda:	e8 e5 e7 fe ff       	call   c00007c4 <strcmp>
c0011fdf:	83 c4 10             	add    esp,0x10
c0011fe2:	85 c0                	test   eax,eax
c0011fe4:	74 23                	je     c0012009 <CPU::detectFeatures()+0x241>
c0011fe6:	57                   	push   edi
c0011fe7:	57                   	push   edi
c0011fe8:	68 3e 41 02 c0       	push   0xc002413e
c0011fed:	55                   	push   ebp
c0011fee:	e8 d1 e7 fe ff       	call   c00007c4 <strcmp>
c0011ff3:	83 c4 10             	add    esp,0x10
c0011ff6:	85 c0                	test   eax,eax
c0011ff8:	75 1e                	jne    c0012018 <CPU::detectFeatures()+0x250>
c0011ffa:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0012004:	e9 8a 01 00 00       	jmp    c0012193 <CPU::detectFeatures()+0x3cb>
c0012009:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0012013:	e9 7b 01 00 00       	jmp    c0012193 <CPU::detectFeatures()+0x3cb>
c0012018:	56                   	push   esi
c0012019:	56                   	push   esi
c001201a:	68 4b 41 02 c0       	push   0xc002414b
c001201f:	55                   	push   ebp
c0012020:	e8 9f e7 fe ff       	call   c00007c4 <strcmp>
c0012025:	83 c4 10             	add    esp,0x10
c0012028:	85 c0                	test   eax,eax
c001202a:	75 0f                	jne    c001203b <CPU::detectFeatures()+0x273>
c001202c:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0012036:	e9 58 01 00 00       	jmp    c0012193 <CPU::detectFeatures()+0x3cb>
c001203b:	51                   	push   ecx
c001203c:	51                   	push   ecx
c001203d:	68 0a 41 02 c0       	push   0xc002410a
c0012042:	55                   	push   ebp
c0012043:	e8 7c e7 fe ff       	call   c00007c4 <strcmp>
c0012048:	83 c4 10             	add    esp,0x10
c001204b:	85 c0                	test   eax,eax
c001204d:	75 0f                	jne    c001205e <CPU::detectFeatures()+0x296>
c001204f:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0012059:	e9 35 01 00 00       	jmp    c0012193 <CPU::detectFeatures()+0x3cb>
c001205e:	52                   	push   edx
c001205f:	52                   	push   edx
c0012060:	68 58 41 02 c0       	push   0xc0024158
c0012065:	55                   	push   ebp
c0012066:	e8 59 e7 fe ff       	call   c00007c4 <strcmp>
c001206b:	83 c4 10             	add    esp,0x10
c001206e:	85 c0                	test   eax,eax
c0012070:	75 0f                	jne    c0012081 <CPU::detectFeatures()+0x2b9>
c0012072:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001207c:	e9 12 01 00 00       	jmp    c0012193 <CPU::detectFeatures()+0x3cb>
c0012081:	50                   	push   eax
c0012082:	50                   	push   eax
c0012083:	68 65 41 02 c0       	push   0xc0024165
c0012088:	55                   	push   ebp
c0012089:	e8 36 e7 fe ff       	call   c00007c4 <strcmp>
c001208e:	83 c4 10             	add    esp,0x10
c0012091:	85 c0                	test   eax,eax
c0012093:	75 0f                	jne    c00120a4 <CPU::detectFeatures()+0x2dc>
c0012095:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001209f:	e9 ef 00 00 00       	jmp    c0012193 <CPU::detectFeatures()+0x3cb>
c00120a4:	50                   	push   eax
c00120a5:	50                   	push   eax
c00120a6:	68 72 41 02 c0       	push   0xc0024172
c00120ab:	55                   	push   ebp
c00120ac:	e8 13 e7 fe ff       	call   c00007c4 <strcmp>
c00120b1:	83 c4 10             	add    esp,0x10
c00120b4:	85 c0                	test   eax,eax
c00120b6:	75 0f                	jne    c00120c7 <CPU::detectFeatures()+0x2ff>
c00120b8:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00120c2:	e9 cc 00 00 00       	jmp    c0012193 <CPU::detectFeatures()+0x3cb>
c00120c7:	50                   	push   eax
c00120c8:	50                   	push   eax
c00120c9:	68 7f 41 02 c0       	push   0xc002417f
c00120ce:	55                   	push   ebp
c00120cf:	e8 f0 e6 fe ff       	call   c00007c4 <strcmp>
c00120d4:	83 c4 10             	add    esp,0x10
c00120d7:	85 c0                	test   eax,eax
c00120d9:	75 0f                	jne    c00120ea <CPU::detectFeatures()+0x322>
c00120db:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00120e5:	e9 a9 00 00 00       	jmp    c0012193 <CPU::detectFeatures()+0x3cb>
c00120ea:	50                   	push   eax
c00120eb:	50                   	push   eax
c00120ec:	68 8c 41 02 c0       	push   0xc002418c
c00120f1:	55                   	push   ebp
c00120f2:	e8 cd e6 fe ff       	call   c00007c4 <strcmp>
c00120f7:	83 c4 10             	add    esp,0x10
c00120fa:	85 c0                	test   eax,eax
c00120fc:	75 0f                	jne    c001210d <CPU::detectFeatures()+0x345>
c00120fe:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0012108:	e9 86 00 00 00       	jmp    c0012193 <CPU::detectFeatures()+0x3cb>
c001210d:	50                   	push   eax
c001210e:	50                   	push   eax
c001210f:	68 99 41 02 c0       	push   0xc0024199
c0012114:	55                   	push   ebp
c0012115:	e8 aa e6 fe ff       	call   c00007c4 <strcmp>
c001211a:	83 c4 10             	add    esp,0x10
c001211d:	85 c0                	test   eax,eax
c001211f:	75 0c                	jne    c001212d <CPU::detectFeatures()+0x365>
c0012121:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001212b:	eb 66                	jmp    c0012193 <CPU::detectFeatures()+0x3cb>
c001212d:	50                   	push   eax
c001212e:	50                   	push   eax
c001212f:	68 a6 41 02 c0       	push   0xc00241a6
c0012134:	55                   	push   ebp
c0012135:	e8 8a e6 fe ff       	call   c00007c4 <strcmp>
c001213a:	83 c4 10             	add    esp,0x10
c001213d:	85 c0                	test   eax,eax
c001213f:	75 0c                	jne    c001214d <CPU::detectFeatures()+0x385>
c0012141:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001214b:	eb 46                	jmp    c0012193 <CPU::detectFeatures()+0x3cb>
c001214d:	57                   	push   edi
c001214e:	57                   	push   edi
c001214f:	68 b3 41 02 c0       	push   0xc00241b3
c0012154:	55                   	push   ebp
c0012155:	e8 6a e6 fe ff       	call   c00007c4 <strcmp>
c001215a:	83 c4 10             	add    esp,0x10
c001215d:	85 c0                	test   eax,eax
c001215f:	74 e0                	je     c0012141 <CPU::detectFeatures()+0x379>
c0012161:	56                   	push   esi
c0012162:	56                   	push   esi
c0012163:	68 c0 41 02 c0       	push   0xc00241c0
c0012168:	55                   	push   ebp
c0012169:	e8 56 e6 fe ff       	call   c00007c4 <strcmp>
c001216e:	83 c4 10             	add    esp,0x10
c0012171:	85 c0                	test   eax,eax
c0012173:	74 cc                	je     c0012141 <CPU::detectFeatures()+0x379>
c0012175:	51                   	push   ecx
c0012176:	51                   	push   ecx
c0012177:	68 cd 41 02 c0       	push   0xc00241cd
c001217c:	55                   	push   ebp
c001217d:	e8 42 e6 fe ff       	call   c00007c4 <strcmp>
c0012182:	83 c4 10             	add    esp,0x10
c0012185:	85 c0                	test   eax,eax
c0012187:	74 b8                	je     c0012141 <CPU::detectFeatures()+0x379>
c0012189:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0012193:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0012198:	0f 86 be 00 00 00    	jbe    c001225c <CPU::detectFeatures()+0x494>
c001219e:	83 ec 0c             	sub    esp,0xc
c00121a1:	68 80 00 00 00       	push   0x80
c00121a6:	e8 31 fb ff ff       	call   c0011cdc <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00121ab:	83 e0 01             	and    eax,0x1
c00121ae:	c1 e0 06             	shl    eax,0x6
c00121b1:	88 c2                	mov    dl,al
c00121b3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00121b9:	83 e0 bf             	and    eax,0xffffffbf
c00121bc:	09 d0                	or     eax,edx
c00121be:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00121c4:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00121cb:	e8 0c fb ff ff       	call   c0011cdc <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00121d0:	83 e0 01             	and    eax,0x1
c00121d3:	c1 e0 04             	shl    eax,0x4
c00121d6:	88 c2                	mov    dl,al
c00121d8:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00121de:	83 e0 ef             	and    eax,0xffffffef
c00121e1:	09 d0                	or     eax,edx
c00121e3:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00121e9:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00121f0:	e8 e7 fa ff ff       	call   c0011cdc <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00121f5:	c1 e0 07             	shl    eax,0x7
c00121f8:	88 c2                	mov    dl,al
c00121fa:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0012200:	83 e0 7f             	and    eax,0x7f
c0012203:	09 d0                	or     eax,edx
c0012205:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001220b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0012212:	e8 f3 fa ff ff       	call   c0011d0a <CPU::cpuidCheckExtendedECX(unsigned int)>
c0012217:	83 e0 01             	and    eax,0x1
c001221a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0012221:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0012227:	83 e0 f7             	and    eax,0xfffffff7
c001222a:	09 d0                	or     eax,edx
c001222c:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0012232:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0012239:	e8 cc fa ff ff       	call   c0011d0a <CPU::cpuidCheckExtendedECX(unsigned int)>
c001223e:	83 c4 10             	add    esp,0x10
c0012241:	83 e0 01             	and    eax,0x1
c0012244:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001224b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0012251:	83 e0 fb             	and    eax,0xfffffffb
c0012254:	09 d0                	or     eax,edx
c0012256:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001225c:	83 ec 0c             	sub    esp,0xc
c001225f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012263:	50                   	push   eax
c0012264:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012268:	50                   	push   eax
c0012269:	8d 74 24 28          	lea    esi,[esp+0x28]
c001226d:	56                   	push   esi
c001226e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012272:	50                   	push   eax
c0012273:	6a 01                	push   0x1
c0012275:	e8 82 f9 ff ff       	call   c0011bfc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001227a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001227e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0012284:	88 ca                	mov    dl,cl
c0012286:	83 e0 f0             	and    eax,0xfffffff0
c0012289:	83 e2 0f             	and    edx,0xf
c001228c:	09 d0                	or     eax,edx
c001228e:	88 ca                	mov    dl,cl
c0012290:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0012296:	c0 ea 04             	shr    dl,0x4
c0012299:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001229d:	0f b6 c2             	movzx  eax,dl
c00122a0:	83 c4 20             	add    esp,0x20
c00122a3:	c1 e0 06             	shl    eax,0x6
c00122a6:	89 c7                	mov    edi,eax
c00122a8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00122ae:	66 25 3f c0          	and    ax,0xc03f
c00122b2:	09 f8                	or     eax,edi
c00122b4:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00122bb:	89 c8                	mov    eax,ecx
c00122bd:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c00122c4:	c1 e8 08             	shr    eax,0x8
c00122c7:	83 e5 3f             	and    ebp,0x3f
c00122ca:	83 e0 0f             	and    eax,0xf
c00122cd:	89 c7                	mov    edi,eax
c00122cf:	c1 e7 06             	shl    edi,0x6
c00122d2:	09 ef                	or     edi,ebp
c00122d4:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c00122db:	89 fa                	mov    edx,edi
c00122dd:	83 e5 c0             	and    ebp,0xffffffc0
c00122e0:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00122e6:	88 c2                	mov    dl,al
c00122e8:	c0 ea 02             	shr    dl,0x2
c00122eb:	89 d7                	mov    edi,edx
c00122ed:	09 ef                	or     edi,ebp
c00122ef:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00122f5:	89 fa                	mov    edx,edi
c00122f7:	83 e5 cf             	and    ebp,0xffffffcf
c00122fa:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0012300:	89 cf                	mov    edi,ecx
c0012302:	c1 ef 0c             	shr    edi,0xc
c0012305:	83 e7 03             	and    edi,0x3
c0012308:	c1 e7 04             	shl    edi,0x4
c001230b:	09 ef                	or     edi,ebp
c001230d:	3c 06                	cmp    al,0x6
c001230f:	89 fa                	mov    edx,edi
c0012311:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0012317:	74 04                	je     c001231d <CPU::detectFeatures()+0x555>
c0012319:	3c 0f                	cmp    al,0xf
c001231b:	75 5c                	jne    c0012379 <CPU::detectFeatures()+0x5b1>
c001231d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012321:	89 cf                	mov    edi,ecx
c0012323:	c1 ef 10             	shr    edi,0x10
c0012326:	c1 e7 04             	shl    edi,0x4
c0012329:	09 fa                	or     edx,edi
c001232b:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0012331:	0f b6 d2             	movzx  edx,dl
c0012334:	66 81 e7 3f c0       	and    di,0xc03f
c0012339:	c1 e2 06             	shl    edx,0x6
c001233c:	09 fa                	or     edx,edi
c001233e:	3c 0f                	cmp    al,0xf
c0012340:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0012347:	75 30                	jne    c0012379 <CPU::detectFeatures()+0x5b1>
c0012349:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001234f:	c1 e9 14             	shr    ecx,0x14
c0012352:	83 e0 3f             	and    eax,0x3f
c0012355:	83 c1 0f             	add    ecx,0xf
c0012358:	88 ca                	mov    dl,cl
c001235a:	c0 e9 02             	shr    cl,0x2
c001235d:	c1 e2 06             	shl    edx,0x6
c0012360:	09 d0                	or     eax,edx
c0012362:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0012368:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001236e:	83 e0 c0             	and    eax,0xffffffc0
c0012371:	09 c1                	or     ecx,eax
c0012373:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0012379:	83 ec 0c             	sub    esp,0xc
c001237c:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c0012383:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012387:	50                   	push   eax
c0012388:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001238c:	55                   	push   ebp
c001238d:	56                   	push   esi
c001238e:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0012392:	57                   	push   edi
c0012393:	68 00 00 00 80       	push   0x80000000
c0012398:	e8 5f f8 ff ff       	call   c0011bfc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001239d:	83 c4 20             	add    esp,0x20
c00123a0:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00123a8:	76 22                	jbe    c00123cc <CPU::detectFeatures()+0x604>
c00123aa:	83 ec 0c             	sub    esp,0xc
c00123ad:	8d 44 24 28          	lea    eax,[esp+0x28]
c00123b1:	50                   	push   eax
c00123b2:	55                   	push   ebp
c00123b3:	56                   	push   esi
c00123b4:	57                   	push   edi
c00123b5:	68 01 00 00 80       	push   0x80000001
c00123ba:	e8 3d f8 ff ff       	call   c0011bfc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00123bf:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c00123c9:	83 c4 20             	add    esp,0x20
c00123cc:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00123d2:	8d 50 ff             	lea    edx,[eax-0x1]
c00123d5:	83 fa 03             	cmp    edx,0x3
c00123d8:	76 7e                	jbe    c0012458 <CPU::detectFeatures()+0x690>
c00123da:	83 f8 06             	cmp    eax,0x6
c00123dd:	74 79                	je     c0012458 <CPU::detectFeatures()+0x690>
c00123df:	52                   	push   edx
c00123e0:	52                   	push   edx
c00123e1:	68 d9 41 02 c0       	push   0xc00241d9
c00123e6:	53                   	push   ebx
c00123e7:	e8 00 bf ff ff       	call   c000e2ec <Device::setName(char const*)>
c00123ec:	83 c4 10             	add    esp,0x10
c00123ef:	eb 67                	jmp    c0012458 <CPU::detectFeatures()+0x690>
c00123f1:	50                   	push   eax
c00123f2:	50                   	push   eax
c00123f3:	68 3e 41 02 c0       	push   0xc002413e
c00123f8:	55                   	push   ebp
c00123f9:	e8 3a e3 fe ff       	call   c0000738 <strcpy>
c00123fe:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0012408:	e8 d6 dd fe ff       	call   c00001e3 <is486>
c001240d:	83 c4 10             	add    esp,0x10
c0012410:	85 c0                	test   eax,eax
c0012412:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0012418:	74 1d                	je     c0012437 <CPU::detectFeatures()+0x66f>
c001241a:	83 c8 07             	or     eax,0x7
c001241d:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0012423:	0f 20 c0             	mov    eax,cr0
c0012426:	83 e0 14             	and    eax,0x14
c0012429:	83 f8 04             	cmp    eax,0x4
c001242c:	75 0e                	jne    c001243c <CPU::detectFeatures()+0x674>
c001242e:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c0012435:	eb 21                	jmp    c0012458 <CPU::detectFeatures()+0x690>
c0012437:	83 e0 f8             	and    eax,0xfffffff8
c001243a:	eb e1                	jmp    c001241d <CPU::detectFeatures()+0x655>
c001243c:	e8 7d dd fe ff       	call   c00001be <hasLegacyFPU>
c0012441:	83 e0 01             	and    eax,0x1
c0012444:	8d 14 00             	lea    edx,[eax+eax*1]
c0012447:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001244d:	83 e0 fd             	and    eax,0xfffffffd
c0012450:	09 d0                	or     eax,edx
c0012452:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0012458:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c001245f:	74 0e                	je     c001246f <CPU::detectFeatures()+0x6a7>
c0012461:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c0012466:	80 88 e8 01 00 00 10 	or     BYTE PTR [eax+0x1e8],0x10
c001246d:	eb 20                	jmp    c001248f <CPU::detectFeatures()+0x6c7>
c001246f:	e8 4a dd fe ff       	call   c00001be <hasLegacyFPU>
c0012474:	83 e0 01             	and    eax,0x1
c0012477:	8d 14 00             	lea    edx,[eax+eax*1]
c001247a:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0012480:	83 e0 fd             	and    eax,0xfffffffd
c0012483:	09 d0                	or     eax,edx
c0012485:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001248b:	a8 02                	test   al,0x2
c001248d:	75 d2                	jne    c0012461 <CPU::detectFeatures()+0x699>
c001248f:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0012496:	83 c4 2c             	add    esp,0x2c
c0012499:	5b                   	pop    ebx
c001249a:	5e                   	pop    esi
c001249b:	5f                   	pop    edi
c001249c:	5d                   	pop    ebp
c001249d:	c3                   	ret    

c001249e <CPU::setupSMEP()>:
c001249e:	0f 20 e0             	mov    eax,cr4
c00124a1:	0d 00 00 10 00       	or     eax,0x100000
c00124a6:	0f 22 e0             	mov    cr4,eax
c00124a9:	c3                   	ret    

c00124aa <CPU::setupUMIP()>:
c00124aa:	0f 20 e0             	mov    eax,cr4
c00124ad:	80 cc 08             	or     ah,0x8
c00124b0:	0f 22 e0             	mov    cr4,eax
c00124b3:	c3                   	ret    

c00124b4 <CPU::setupTSC()>:
c00124b4:	0f 20 e0             	mov    eax,cr4
c00124b7:	83 c8 04             	or     eax,0x4
c00124ba:	0f 22 e0             	mov    cr4,eax
c00124bd:	c3                   	ret    

c00124be <CPU::setupLargePages()>:
c00124be:	0f 20 e0             	mov    eax,cr4
c00124c1:	83 c8 10             	or     eax,0x10
c00124c4:	0f 22 e0             	mov    cr4,eax
c00124c7:	c3                   	ret    

c00124c8 <CPU::setupPAT()>:
c00124c8:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c00124cd:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00124d4:	74 2c                	je     c0012502 <CPU::setupPAT()+0x3a>
c00124d6:	53                   	push   ebx
c00124d7:	83 ec 10             	sub    esp,0x10
c00124da:	68 77 02 00 00       	push   0x277
c00124df:	50                   	push   eax
c00124e0:	e8 3d 6a ff ff       	call   c0008f22 <Computer::rdmsr(unsigned int)>
c00124e5:	83 e2 f8             	and    edx,0xfffffff8
c00124e8:	83 ca 01             	or     edx,0x1
c00124eb:	52                   	push   edx
c00124ec:	50                   	push   eax
c00124ed:	68 77 02 00 00       	push   0x277
c00124f2:	ff 35 88 66 02 c0    	push   DWORD PTR ds:0xc0026688
c00124f8:	e8 51 6a ff ff       	call   c0008f4e <Computer::wrmsr(unsigned int, unsigned long long)>
c00124fd:	83 c4 28             	add    esp,0x28
c0012500:	5b                   	pop    ebx
c0012501:	c3                   	ret    
c0012502:	c3                   	ret    
c0012503:	90                   	nop

c0012504 <CPU::setupMTRR()>:
c0012504:	c3                   	ret    
c0012505:	90                   	nop

c0012506 <CPU::setupGlobalPages()>:
c0012506:	0f 20 e0             	mov    eax,cr4
c0012509:	0c 80                	or     al,0x80
c001250b:	0f 22 e0             	mov    cr4,eax
c001250e:	c3                   	ret    
c001250f:	90                   	nop

c0012510 <CPU::allowUsermodeDataAccess()>:
c0012510:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012514:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001251b:	74 03                	je     c0012520 <CPU::allowUsermodeDataAccess()+0x10>
c001251d:	0f 01 cb             	stac   
c0012520:	c3                   	ret    
c0012521:	90                   	nop

c0012522 <CPU::prohibitUsermodeDataAccess()>:
c0012522:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012526:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001252d:	74 03                	je     c0012532 <CPU::prohibitUsermodeDataAccess()+0x10>
c001252f:	0f 01 ca             	clac   
c0012532:	c3                   	ret    
c0012533:	90                   	nop

c0012534 <CPU::setupSMAP()>:
c0012534:	0f 20 e0             	mov    eax,cr4
c0012537:	0d 00 00 20 00       	or     eax,0x200000
c001253c:	0f 22 e0             	mov    cr4,eax
c001253f:	eb e1                	jmp    c0012522 <CPU::prohibitUsermodeDataAccess()>
c0012541:	90                   	nop

c0012542 <CPU::setupFeatures()>:
c0012542:	53                   	push   ebx
c0012543:	83 ec 08             	sub    esp,0x8
c0012546:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001254a:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0012551:	74 18                	je     c001256b <CPU::setupFeatures()+0x29>
c0012553:	83 ec 0c             	sub    esp,0xc
c0012556:	68 e5 41 02 c0       	push   0xc00241e5
c001255b:	e8 19 a7 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0012560:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012563:	e8 42 ff ff ff       	call   c00124aa <CPU::setupUMIP()>
c0012568:	83 c4 10             	add    esp,0x10
c001256b:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0012572:	74 18                	je     c001258c <CPU::setupFeatures()+0x4a>
c0012574:	83 ec 0c             	sub    esp,0xc
c0012577:	68 ef 41 02 c0       	push   0xc00241ef
c001257c:	e8 f8 a6 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0012581:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012584:	e8 2b ff ff ff       	call   c00124b4 <CPU::setupTSC()>
c0012589:	83 c4 10             	add    esp,0x10
c001258c:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0012593:	74 18                	je     c00125ad <CPU::setupFeatures()+0x6b>
c0012595:	83 ec 0c             	sub    esp,0xc
c0012598:	68 f8 41 02 c0       	push   0xc00241f8
c001259d:	e8 d7 a6 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c00125a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00125a5:	e8 14 ff ff ff       	call   c00124be <CPU::setupLargePages()>
c00125aa:	83 c4 10             	add    esp,0x10
c00125ad:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c00125b4:	74 18                	je     c00125ce <CPU::setupFeatures()+0x8c>
c00125b6:	83 ec 0c             	sub    esp,0xc
c00125b9:	68 01 42 02 c0       	push   0xc0024201
c00125be:	e8 b6 a6 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c00125c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00125c6:	e8 3b ff ff ff       	call   c0012506 <CPU::setupGlobalPages()>
c00125cb:	83 c4 10             	add    esp,0x10
c00125ce:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c00125d5:	74 18                	je     c00125ef <CPU::setupFeatures()+0xad>
c00125d7:	83 ec 0c             	sub    esp,0xc
c00125da:	68 13 42 02 c0       	push   0xc0024213
c00125df:	e8 95 a6 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c00125e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00125e7:	e8 dc fe ff ff       	call   c00124c8 <CPU::setupPAT()>
c00125ec:	83 c4 10             	add    esp,0x10
c00125ef:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c00125f6:	74 11                	je     c0012609 <CPU::setupFeatures()+0xc7>
c00125f8:	c7 44 24 10 1c 42 02 c0 	mov    DWORD PTR [esp+0x10],0xc002421c
c0012600:	83 c4 08             	add    esp,0x8
c0012603:	5b                   	pop    ebx
c0012604:	e9 70 a6 ff ff       	jmp    c000cc79 <Dbg::kprintf(char const*, ...)>
c0012609:	83 c4 08             	add    esp,0x8
c001260c:	5b                   	pop    ebx
c001260d:	c3                   	ret    

c001260e <CPU::open(int, int, void*)>:
c001260e:	57                   	push   edi
c001260f:	56                   	push   esi
c0012610:	53                   	push   ebx
c0012611:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012615:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012619:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001261f:	83 ec 0c             	sub    esp,0xc
c0012622:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0012628:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001262e:	50                   	push   eax
c001262f:	e8 0c 6c ff ff       	call   c0009240 <GDT::setup()>
c0012634:	83 c4 0c             	add    esp,0xc
c0012637:	6a 00                	push   0x0
c0012639:	68 ef be ad de       	push   0xdeadbeef
c001263e:	57                   	push   edi
c001263f:	e8 60 8c ff ff       	call   c000b2a4 <TSS::setup(unsigned long, unsigned long)>
c0012644:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012647:	e8 38 8c ff ff       	call   c000b284 <TSS::flush()>
c001264c:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0012652:	89 04 24             	mov    DWORD PTR [esp],eax
c0012655:	e8 74 6e ff ff       	call   c00094ce <IDT::setup()>
c001265a:	b8 00 04 00 00       	mov    eax,0x400
c001265f:	0f 23 f8             	mov    db7,eax
c0012662:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001266c:	e8 b1 79 ff ff       	call   c000a022 <Phys::allocatePage()>
c0012671:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0012677:	89 30                	mov    DWORD PTR [eax],esi
c0012679:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001267f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0012682:	58                   	pop    eax
c0012683:	5a                   	pop    edx
c0012684:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001268a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001268e:	e8 d1 9b ff ff       	call   c000c264 <VAS::setCPUSpecific(unsigned long)>
c0012693:	c7 04 24 26 42 02 c0 	mov    DWORD PTR [esp],0xc0024226
c001269a:	e8 26 73 ff ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c001269f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00126a2:	e8 21 f7 ff ff       	call   c0011dc8 <CPU::detectFeatures()>
c00126a7:	c7 04 24 49 42 02 c0 	mov    DWORD PTR [esp],0xc0024249
c00126ae:	e8 12 73 ff ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c00126b3:	e8 29 74 00 00       	call   c0019ae1 <Hal::initialise()>
c00126b8:	c7 04 24 5d 42 02 c0 	mov    DWORD PTR [esp],0xc002425d
c00126bf:	e8 01 73 ff ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c00126c4:	a1 a0 66 02 c0       	mov    eax,ds:0xc00266a0
c00126c9:	83 e0 10             	and    eax,0x10
c00126cc:	83 f8 01             	cmp    eax,0x1
c00126cf:	19 c0                	sbb    eax,eax
c00126d1:	83 e0 46             	and    eax,0x46
c00126d4:	83 c0 1e             	add    eax,0x1e
c00126d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00126da:	e8 f6 d2 ff ff       	call   c000f9d5 <setupTimer(int)>
c00126df:	83 c4 10             	add    esp,0x10
c00126e2:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00126e8:	f6 05 a0 66 02 c0 20 	test   BYTE PTR ds:0xc00266a0,0x20
c00126ef:	74 18                	je     c0012709 <CPU::open(int, int, void*)+0xfb>
c00126f1:	83 ec 0c             	sub    esp,0xc
c00126f4:	68 78 42 02 c0       	push   0xc0024278
c00126f9:	e8 c7 72 ff ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c00126fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012701:	e8 3c fe ff ff       	call   c0012542 <CPU::setupFeatures()>
c0012706:	83 c4 10             	add    esp,0x10
c0012709:	83 ec 0c             	sub    esp,0xc
c001270c:	68 93 42 02 c0       	push   0xc0024293
c0012711:	e8 af 72 ff ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0012716:	83 c4 10             	add    esp,0x10
c0012719:	31 c0                	xor    eax,eax
c001271b:	5b                   	pop    ebx
c001271c:	5e                   	pop    esi
c001271d:	5f                   	pop    edi
c001271e:	c3                   	ret    
c001271f:	90                   	nop

c0012720 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0012720:	57                   	push   edi
c0012721:	56                   	push   esi
c0012722:	53                   	push   ebx
c0012723:	51                   	push   ecx
c0012724:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012728:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c001272b:	0f 02 c0             	lar    eax,ax
c001272e:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0012731:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012735:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0012738:	88 ca                	mov    dl,cl
c001273a:	c0 ea 06             	shr    dl,0x6
c001273d:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0012741:	89 ca                	mov    edx,ecx
c0012743:	66 c1 ea 03          	shr    dx,0x3
c0012747:	83 e2 07             	and    edx,0x7
c001274a:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001274f:	88 17                	mov    BYTE PTR [edi],dl
c0012751:	0f 84 a6 01 00 00    	je     c00128fd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0012757:	83 e1 07             	and    ecx,0x7
c001275a:	80 f9 04             	cmp    cl,0x4
c001275d:	0f 84 98 00 00 00    	je     c00127fb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0012763:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0012768:	0f 95 c0             	setne  al
c001276b:	80 f9 05             	cmp    cl,0x5
c001276e:	0f 95 c2             	setne  dl
c0012771:	08 c2                	or     dl,al
c0012773:	74 79                	je     c00127ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0012775:	84 c9                	test   cl,cl
c0012777:	75 05                	jne    c001277e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0012779:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001277c:	eb 3c                	jmp    c00127ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001277e:	80 f9 01             	cmp    cl,0x1
c0012781:	75 05                	jne    c0012788 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0012783:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0012786:	eb 32                	jmp    c00127ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0012788:	80 f9 02             	cmp    cl,0x2
c001278b:	75 05                	jne    c0012792 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c001278d:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0012790:	eb 28                	jmp    c00127ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0012792:	31 c0                	xor    eax,eax
c0012794:	80 f9 03             	cmp    cl,0x3
c0012797:	75 05                	jne    c001279e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0012799:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001279c:	eb 1c                	jmp    c00127ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001279e:	80 f9 05             	cmp    cl,0x5
c00127a1:	75 05                	jne    c00127a8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c00127a3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00127a6:	eb 12                	jmp    c00127ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00127a8:	80 f9 06             	cmp    cl,0x6
c00127ab:	75 05                	jne    c00127b2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c00127ad:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00127b0:	eb 08                	jmp    c00127ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00127b2:	80 f9 07             	cmp    cl,0x7
c00127b5:	75 03                	jne    c00127ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00127b7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00127ba:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00127bf:	75 10                	jne    c00127d1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00127c1:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00127c5:	b9 03 00 00 00       	mov    ecx,0x3
c00127ca:	01 d0                	add    eax,edx
c00127cc:	e9 37 01 00 00       	jmp    c0012908 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00127d1:	b9 02 00 00 00       	mov    ecx,0x2
c00127d6:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00127db:	0f 85 27 01 00 00    	jne    c0012908 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00127e1:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00127e4:	b9 06 00 00 00       	mov    ecx,0x6
c00127e9:	e9 1a 01 00 00       	jmp    c0012908 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00127ee:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00127f1:	b9 06 00 00 00       	mov    ecx,0x6
c00127f6:	e9 0f 01 00 00       	jmp    c001290a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00127fb:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00127fe:	88 ca                	mov    dl,cl
c0012800:	c0 ea 06             	shr    dl,0x6
c0012803:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0012807:	89 ca                	mov    edx,ecx
c0012809:	66 c1 ea 03          	shr    dx,0x3
c001280d:	83 e2 07             	and    edx,0x7
c0012810:	80 e1 07             	and    cl,0x7
c0012813:	75 05                	jne    c001281a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0012815:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0012818:	eb 4c                	jmp    c0012866 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001281a:	80 f9 01             	cmp    cl,0x1
c001281d:	75 05                	jne    c0012824 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c001281f:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0012822:	eb 42                	jmp    c0012866 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0012824:	80 f9 02             	cmp    cl,0x2
c0012827:	75 05                	jne    c001282e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0012829:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001282c:	eb 38                	jmp    c0012866 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001282e:	80 f9 03             	cmp    cl,0x3
c0012831:	75 05                	jne    c0012838 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0012833:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0012836:	eb 2e                	jmp    c0012866 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0012838:	80 f9 04             	cmp    cl,0x4
c001283b:	75 12                	jne    c001284f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c001283d:	f6 c4 60             	test   ah,0x60
c0012840:	75 08                	jne    c001284a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0012842:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0012845:	8d 78 14             	lea    edi,[eax+0x14]
c0012848:	eb 1c                	jmp    c0012866 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001284a:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c001284d:	eb 17                	jmp    c0012866 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001284f:	80 f9 05             	cmp    cl,0x5
c0012852:	75 05                	jne    c0012859 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0012854:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0012857:	eb 0d                	jmp    c0012866 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0012859:	80 f9 06             	cmp    cl,0x6
c001285c:	75 05                	jne    c0012863 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001285e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0012861:	eb 03                	jmp    c0012866 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0012863:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0012866:	84 d2                	test   dl,dl
c0012868:	75 05                	jne    c001286f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001286a:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001286d:	eb 3c                	jmp    c00128ab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001286f:	80 fa 01             	cmp    dl,0x1
c0012872:	75 05                	jne    c0012879 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0012874:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0012877:	eb 32                	jmp    c00128ab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0012879:	80 fa 02             	cmp    dl,0x2
c001287c:	75 05                	jne    c0012883 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001287e:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0012881:	eb 28                	jmp    c00128ab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0012883:	80 fa 03             	cmp    dl,0x3
c0012886:	75 05                	jne    c001288d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0012888:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001288b:	eb 1e                	jmp    c00128ab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001288d:	31 c0                	xor    eax,eax
c001288f:	80 fa 04             	cmp    dl,0x4
c0012892:	74 17                	je     c00128ab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0012894:	80 fa 05             	cmp    dl,0x5
c0012897:	75 05                	jne    c001289e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0012899:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001289c:	eb 0d                	jmp    c00128ab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001289e:	80 fa 06             	cmp    dl,0x6
c00128a1:	75 05                	jne    c00128a8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00128a3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00128a6:	eb 03                	jmp    c00128ab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00128a8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00128ab:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00128b0:	0f 94 c2             	sete   dl
c00128b3:	80 f9 05             	cmp    cl,0x5
c00128b6:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00128ba:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00128bf:	d3 e0                	shl    eax,cl
c00128c1:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00128c5:	74 0a                	je     c00128d1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c00128c7:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00128ca:	b9 07 00 00 00       	mov    ecx,0x7
c00128cf:	eb 37                	jmp    c0012908 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00128d1:	01 f8                	add    eax,edi
c00128d3:	b9 03 00 00 00       	mov    ecx,0x3
c00128d8:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00128dd:	74 2b                	je     c001290a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00128df:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00128e4:	75 0d                	jne    c00128f3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00128e6:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00128ea:	01 c8                	add    eax,ecx
c00128ec:	b9 04 00 00 00       	mov    ecx,0x4
c00128f1:	eb 17                	jmp    c001290a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00128f3:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00128f6:	b9 07 00 00 00       	mov    ecx,0x7
c00128fb:	eb 0d                	jmp    c001290a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00128fd:	b9 02 00 00 00       	mov    ecx,0x2
c0012902:	b2 01                	mov    dl,0x1
c0012904:	31 c0                	xor    eax,eax
c0012906:	eb 02                	jmp    c001290a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0012908:	31 d2                	xor    edx,edx
c001290a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001290e:	89 0b                	mov    DWORD PTR [ebx],ecx
c0012910:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0012914:	88 11                	mov    BYTE PTR [ecx],dl
c0012916:	5a                   	pop    edx
c0012917:	5b                   	pop    ebx
c0012918:	5e                   	pop    esi
c0012919:	5f                   	pop    edi
c001291a:	c3                   	ret    

c001291b <Krnl::smpEntry()>:
c001291b:	eb fe                	jmp    c001291b <Krnl::smpEntry()>

c001291d <Krnl::startCPU(int)>:
c001291d:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c0012922:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0012929:	0f 84 36 01 00 00    	je     c0012a65 <Krnl::startCPU(int)+0x148>
c001292f:	53                   	push   ebx
c0012930:	83 ec 10             	sub    esp,0x10
c0012933:	fa                   	cli    
c0012934:	ff 05 a8 9b 02 c0    	inc    DWORD PTR ds:0xc0029ba8
c001293a:	6a 1b                	push   0x1b
c001293c:	ff 35 88 66 02 c0    	push   DWORD PTR ds:0xc0026688
c0012942:	e8 db 65 ff ff       	call   c0008f22 <Computer::rdmsr(unsigned int)>
c0012947:	25 00 f0 ff ff       	and    eax,0xfffff000
c001294c:	89 c3                	mov    ebx,eax
c001294e:	58                   	pop    eax
c001294f:	5a                   	pop    edx
c0012950:	53                   	push   ebx
c0012951:	68 dc 42 02 c0       	push   0xc00242dc
c0012956:	e8 1e a3 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001295b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0012965:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012969:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0012973:	c1 e0 18             	shl    eax,0x18
c0012976:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c001297c:	83 c4 10             	add    esp,0x10
c001297f:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012985:	09 c2                	or     edx,eax
c0012987:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c001298d:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0012993:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0012999:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001299f:	80 cd c5             	or     ch,0xc5
c00129a2:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00129a8:	f3 90                	pause  
c00129aa:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00129ac:	0f ba e1 0c          	bt     ecx,0xc
c00129b0:	72 f6                	jb     c00129a8 <Krnl::startCPU(int)+0x8b>
c00129b2:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00129b8:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00129be:	09 c1                	or     ecx,eax
c00129c0:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c00129c6:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00129cc:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00129d2:	80 cd 85             	or     ch,0x85
c00129d5:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00129db:	f3 90                	pause  
c00129dd:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00129df:	0f ba e1 0c          	bt     ecx,0xc
c00129e3:	72 f6                	jb     c00129db <Krnl::startCPU(int)+0xbe>
c00129e5:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00129ef:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00129f5:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00129fb:	09 c1                	or     ecx,eax
c00129fd:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0012a03:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0012a09:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0012a0f:	81 c9 02 06 00 00    	or     ecx,0x602
c0012a15:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0012a1b:	f3 90                	pause  
c0012a1d:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0012a1f:	0f ba e1 0c          	bt     ecx,0xc
c0012a23:	72 f6                	jb     c0012a1b <Krnl::startCPU(int)+0xfe>
c0012a25:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0012a2f:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0012a35:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0012a3b:	09 c8                	or     eax,ecx
c0012a3d:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0012a43:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0012a49:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0012a4e:	0d 02 06 00 00       	or     eax,0x602
c0012a53:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0012a59:	f3 90                	pause  
c0012a5b:	8b 02                	mov    eax,DWORD PTR [edx]
c0012a5d:	0f ba e0 0c          	bt     eax,0xc
c0012a61:	72 f6                	jb     c0012a59 <Krnl::startCPU(int)+0x13c>
c0012a63:	eb fe                	jmp    c0012a63 <Krnl::startCPU(int)+0x146>
c0012a65:	c3                   	ret    

c0012a66 <Krnl::startCPUs()>:
c0012a66:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c0012a6b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012a71:	88 c2                	mov    dl,al
c0012a73:	83 e2 0a             	and    edx,0xa
c0012a76:	80 fa 0a             	cmp    dl,0xa
c0012a79:	75 09                	jne    c0012a84 <Krnl::startCPUs()+0x1e>
c0012a7b:	a8 01                	test   al,0x1
c0012a7d:	74 05                	je     c0012a84 <Krnl::startCPUs()+0x1e>
c0012a7f:	e9 17 d7 fe ff       	jmp    c000019b <prepareTramp>
c0012a84:	c3                   	ret    
c0012a85:	90                   	nop

c0012a86 <EnvVarContainer::getEnv(char const*)>:
c0012a86:	57                   	push   edi
c0012a87:	56                   	push   esi
c0012a88:	53                   	push   ebx
c0012a89:	31 db                	xor    ebx,ebx
c0012a8b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012a8f:	39 1e                	cmp    DWORD PTR [esi],ebx
c0012a91:	7e 2b                	jle    c0012abe <EnvVarContainer::getEnv(char const*)+0x38>
c0012a93:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0012a9a:	50                   	push   eax
c0012a9b:	50                   	push   eax
c0012a9c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0012a9f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0012aa2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012aa6:	e8 19 dd fe ff       	call   c00007c4 <strcmp>
c0012aab:	83 c4 10             	add    esp,0x10
c0012aae:	85 c0                	test   eax,eax
c0012ab0:	75 09                	jne    c0012abb <EnvVarContainer::getEnv(char const*)+0x35>
c0012ab2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0012ab5:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0012ab9:	eb 05                	jmp    c0012ac0 <EnvVarContainer::getEnv(char const*)+0x3a>
c0012abb:	43                   	inc    ebx
c0012abc:	eb d1                	jmp    c0012a8f <EnvVarContainer::getEnv(char const*)+0x9>
c0012abe:	31 c0                	xor    eax,eax
c0012ac0:	5b                   	pop    ebx
c0012ac1:	5e                   	pop    esi
c0012ac2:	5f                   	pop    edi
c0012ac3:	c3                   	ret    

c0012ac4 <EnvVarContainer::setEnv(char const*, char const*)>:
c0012ac4:	55                   	push   ebp
c0012ac5:	57                   	push   edi
c0012ac6:	56                   	push   esi
c0012ac7:	53                   	push   ebx
c0012ac8:	83 ec 28             	sub    esp,0x28
c0012acb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0012acf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0012ad3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0012ad7:	56                   	push   esi
c0012ad8:	e8 bb db fe ff       	call   c0000698 <strlen>
c0012add:	40                   	inc    eax
c0012ade:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ae1:	e8 85 6e ff ff       	call   c000996b <malloc>
c0012ae6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012ae9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012aed:	e8 a6 db fe ff       	call   c0000698 <strlen>
c0012af2:	40                   	inc    eax
c0012af3:	89 04 24             	mov    DWORD PTR [esp],eax
c0012af6:	e8 70 6e ff ff       	call   c000996b <malloc>
c0012afb:	89 34 24             	mov    DWORD PTR [esp],esi
c0012afe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012b02:	e8 91 db fe ff       	call   c0000698 <strlen>
c0012b07:	83 c4 0c             	add    esp,0xc
c0012b0a:	40                   	inc    eax
c0012b0b:	50                   	push   eax
c0012b0c:	6a 00                	push   0x0
c0012b0e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012b12:	e8 65 db fe ff       	call   c000067c <memset>
c0012b17:	89 34 24             	mov    DWORD PTR [esp],esi
c0012b1a:	e8 79 db fe ff       	call   c0000698 <strlen>
c0012b1f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012b23:	8d 48 01             	lea    ecx,[eax+0x1]
c0012b26:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012b28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012b2b:	89 de                	mov    esi,ebx
c0012b2d:	e8 66 db fe ff       	call   c0000698 <strlen>
c0012b32:	83 c4 0c             	add    esp,0xc
c0012b35:	40                   	inc    eax
c0012b36:	50                   	push   eax
c0012b37:	6a 00                	push   0x0
c0012b39:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012b3d:	e8 3a db fe ff       	call   c000067c <memset>
c0012b42:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012b45:	e8 4e db fe ff       	call   c0000698 <strlen>
c0012b4a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0012b4e:	8d 48 01             	lea    ecx,[eax+0x1]
c0012b51:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012b53:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012b56:	40                   	inc    eax
c0012b57:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0012b5a:	c1 e0 03             	shl    eax,0x3
c0012b5d:	5a                   	pop    edx
c0012b5e:	59                   	pop    ecx
c0012b5f:	50                   	push   eax
c0012b60:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012b63:	e8 ef 6d ff ff       	call   c0009957 <realloc>
c0012b68:	8d 74 24 18          	lea    esi,[esp+0x18]
c0012b6c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012b6f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0012b72:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0012b76:	b9 08 00 00 00       	mov    ecx,0x8
c0012b7b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012b7d:	83 c4 2c             	add    esp,0x2c
c0012b80:	5b                   	pop    ebx
c0012b81:	5e                   	pop    esi
c0012b82:	5f                   	pop    edi
c0012b83:	5d                   	pop    ebp
c0012b84:	c3                   	ret    
c0012b85:	90                   	nop

c0012b86 <EnvVarContainer::deleteEnv(char const*)>:
c0012b86:	c3                   	ret    
c0012b87:	90                   	nop

c0012b88 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0012b88:	55                   	push   ebp
c0012b89:	57                   	push   edi
c0012b8a:	56                   	push   esi
c0012b8b:	53                   	push   ebx
c0012b8c:	81 ec 38 01 00 00    	sub    esp,0x138
c0012b92:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0012b99:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0012ba0:	68 14 01 00 00       	push   0x114
c0012ba5:	e8 c1 6d ff ff       	call   c000996b <malloc>
c0012baa:	83 c4 0c             	add    esp,0xc
c0012bad:	89 c3                	mov    ebx,eax
c0012baf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0012bb2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0012bb9:	50                   	push   eax
c0012bba:	e8 25 a6 ff ff       	call   c000d1e4 <File::File(char const*, Process*)>
c0012bbf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012bc2:	e8 65 a9 ff ff       	call   c000d52c <File::exists()>
c0012bc7:	83 c4 10             	add    esp,0x10
c0012bca:	84 c0                	test   al,al
c0012bcc:	75 31                	jne    c0012bff <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0012bce:	50                   	push   eax
c0012bcf:	50                   	push   eax
c0012bd0:	6a 12                	push   0x12
c0012bd2:	53                   	push   ebx
c0012bd3:	e8 e6 a6 ff ff       	call   c000d2be <File::open(FileOpenMode)>
c0012bd8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012bda:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0012bdd:	89 34 24             	mov    DWORD PTR [esp],esi
c0012be0:	e8 b3 da fe ff       	call   c0000698 <strlen>
c0012be5:	5a                   	pop    edx
c0012be6:	31 d2                	xor    edx,edx
c0012be8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0012bec:	51                   	push   ecx
c0012bed:	56                   	push   esi
c0012bee:	52                   	push   edx
c0012bef:	50                   	push   eax
c0012bf0:	53                   	push   ebx
c0012bf1:	ff d7                	call   edi
c0012bf3:	83 c4 14             	add    esp,0x14
c0012bf6:	53                   	push   ebx
c0012bf7:	e8 20 a7 ff ff       	call   c000d31c <File::close()>
c0012bfc:	83 c4 10             	add    esp,0x10
c0012bff:	56                   	push   esi
c0012c00:	31 f6                	xor    esi,esi
c0012c02:	68 00 01 00 00       	push   0x100
c0012c07:	6a 00                	push   0x0
c0012c09:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0012c0d:	50                   	push   eax
c0012c0e:	e8 69 da fe ff       	call   c000067c <memset>
c0012c13:	5f                   	pop    edi
c0012c14:	58                   	pop    eax
c0012c15:	6a 01                	push   0x1
c0012c17:	53                   	push   ebx
c0012c18:	e8 a1 a6 ff ff       	call   c000d2be <File::open(FileOpenMode)>
c0012c1d:	83 c4 10             	add    esp,0x10
c0012c20:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012c28:	83 ec 0c             	sub    esp,0xc
c0012c2b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c2d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0012c31:	51                   	push   ecx
c0012c32:	8d 54 24 23          	lea    edx,[esp+0x23]
c0012c36:	52                   	push   edx
c0012c37:	6a 00                	push   0x0
c0012c39:	6a 01                	push   0x1
c0012c3b:	53                   	push   ebx
c0012c3c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012c3f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0012c43:	83 c4 20             	add    esp,0x20
c0012c46:	3c 0d                	cmp    al,0xd
c0012c48:	0f 84 09 01 00 00    	je     c0012d57 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0012c4e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0012c53:	0f 84 ef 00 00 00    	je     c0012d48 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0012c59:	3c 0a                	cmp    al,0xa
c0012c5b:	74 13                	je     c0012c70 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0012c5d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012c62:	74 0c                	je     c0012c70 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0012c64:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0012c6a:	0f 8e d8 00 00 00    	jle    c0012d48 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0012c70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012c74:	83 ec 0c             	sub    esp,0xc
c0012c77:	8d 78 01             	lea    edi,[eax+0x1]
c0012c7a:	57                   	push   edi
c0012c7b:	e8 eb 6c ff ff       	call   c000996b <malloc>
c0012c80:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0012c84:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012c88:	8d 56 04             	lea    edx,[esi+0x4]
c0012c8b:	89 14 24             	mov    DWORD PTR [esp],edx
c0012c8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0012c92:	e8 d4 6c ff ff       	call   c000996b <malloc>
c0012c97:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012c9b:	83 c4 0c             	add    esp,0xc
c0012c9e:	57                   	push   edi
c0012c9f:	6a 00                	push   0x0
c0012ca1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012ca5:	e8 d2 d9 fe ff       	call   c000067c <memset>
c0012caa:	8d 74 24 30          	lea    esi,[esp+0x30]
c0012cae:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0012cb2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012cb6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012cb8:	83 c4 0c             	add    esp,0xc
c0012cbb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012cbf:	52                   	push   edx
c0012cc0:	6a 00                	push   0x0
c0012cc2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012cc6:	e8 b1 d9 fe ff       	call   c000067c <memset>
c0012ccb:	8d 74 24 30          	lea    esi,[esp+0x30]
c0012ccf:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0012cd3:	89 34 24             	mov    DWORD PTR [esp],esi
c0012cd6:	e8 bd d9 fe ff       	call   c0000698 <strlen>
c0012cdb:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0012cdf:	89 c1                	mov    ecx,eax
c0012ce1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012ce3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012ce6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0012ce9:	40                   	inc    eax
c0012cea:	83 c4 10             	add    esp,0x10
c0012ced:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0012cf0:	85 d2                	test   edx,edx
c0012cf2:	75 0c                	jne    c0012d00 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0012cf4:	83 ec 0c             	sub    esp,0xc
c0012cf7:	6a 08                	push   0x8
c0012cf9:	e8 6d 6c ff ff       	call   c000996b <malloc>
c0012cfe:	eb 0c                	jmp    c0012d0c <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0012d00:	c1 e0 03             	shl    eax,0x3
c0012d03:	51                   	push   ecx
c0012d04:	51                   	push   ecx
c0012d05:	50                   	push   eax
c0012d06:	52                   	push   edx
c0012d07:	e8 4b 6c ff ff       	call   c0009957 <realloc>
c0012d0c:	83 c4 10             	add    esp,0x10
c0012d0f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0012d12:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012d15:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0012d18:	8d 74 24 18          	lea    esi,[esp+0x18]
c0012d1c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0012d20:	b9 08 00 00 00       	mov    ecx,0x8
c0012d25:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012d27:	31 f6                	xor    esi,esi
c0012d29:	50                   	push   eax
c0012d2a:	68 00 01 00 00       	push   0x100
c0012d2f:	6a 00                	push   0x0
c0012d31:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0012d35:	50                   	push   eax
c0012d36:	e8 41 d9 fe ff       	call   c000067c <memset>
c0012d3b:	83 c4 10             	add    esp,0x10
c0012d3e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012d46:	eb 0f                	jmp    c0012d57 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0012d48:	3c 3d                	cmp    al,0x3d
c0012d4a:	74 07                	je     c0012d53 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0012d4c:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0012d50:	46                   	inc    esi
c0012d51:	eb 04                	jmp    c0012d57 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0012d53:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0012d57:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012d5c:	0f 85 c6 fe ff ff    	jne    c0012c28 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0012d62:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012d68:	5b                   	pop    ebx
c0012d69:	5e                   	pop    esi
c0012d6a:	5f                   	pop    edi
c0012d6b:	5d                   	pop    ebp
c0012d6c:	c3                   	ret    
c0012d6d:	90                   	nop

c0012d6e <EnvVarContainer::__loadSystem()>:
c0012d6e:	83 ec 10             	sub    esp,0x10
c0012d71:	68 c0 5d 02 c0       	push   0xc0025dc0
c0012d76:	68 ed 42 02 c0       	push   0xc00242ed
c0012d7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d7f:	e8 04 fe ff ff       	call   c0012b88 <EnvVarContainer::loadFrom(char const*, char const*)>
c0012d84:	83 c4 1c             	add    esp,0x1c
c0012d87:	c3                   	ret    

c0012d88 <EnvVarContainer::__loadUser()>:
c0012d88:	c3                   	ret    
c0012d89:	90                   	nop

c0012d8a <EnvVarContainer::EnvVarContainer(Process*)>:
c0012d8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d8e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012d94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d98:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012d9c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012d9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012da3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012daa:	90                   	nop
c0012dab:	c3                   	ret    

c0012dac <EnvVarContainer::~EnvVarContainer()>:
c0012dac:	83 ec 0c             	sub    esp,0xc
c0012daf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012db3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012db6:	85 c0                	test   eax,eax
c0012db8:	74 1d                	je     c0012dd7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0012dba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0012dc0:	85 c0                	test   eax,eax
c0012dc2:	74 13                	je     c0012dd7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0012dc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012dcb:	83 ec 0c             	sub    esp,0xc
c0012dce:	50                   	push   eax
c0012dcf:	e8 a7 6b ff ff       	call   c000997b <free>
c0012dd4:	83 c4 10             	add    esp,0x10
c0012dd7:	90                   	nop
c0012dd8:	83 c4 0c             	add    esp,0xc
c0012ddb:	c3                   	ret    

c0012ddc <Krnl::getEnv(Process*, char const*)>:
c0012ddc:	53                   	push   ebx
c0012ddd:	83 ec 08             	sub    esp,0x8
c0012de0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012de4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012de8:	39 05 d0 9b 02 c0    	cmp    DWORD PTR ds:0xc0029bd0,eax
c0012dee:	74 04                	je     c0012df4 <Krnl::getEnv(Process*, char const*)+0x18>
c0012df0:	85 c0                	test   eax,eax
c0012df2:	75 0b                	jne    c0012dff <Krnl::getEnv(Process*, char const*)+0x23>
c0012df4:	a1 54 91 02 c0       	mov    eax,ds:0xc0029154
c0012df9:	85 c0                	test   eax,eax
c0012dfb:	75 19                	jne    c0012e16 <Krnl::getEnv(Process*, char const*)+0x3a>
c0012dfd:	eb 27                	jmp    c0012e26 <Krnl::getEnv(Process*, char const*)+0x4a>
c0012dff:	52                   	push   edx
c0012e00:	52                   	push   edx
c0012e01:	53                   	push   ebx
c0012e02:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0012e08:	e8 79 fc ff ff       	call   c0012a86 <EnvVarContainer::getEnv(char const*)>
c0012e0d:	83 c4 10             	add    esp,0x10
c0012e10:	85 c0                	test   eax,eax
c0012e12:	75 28                	jne    c0012e3c <Krnl::getEnv(Process*, char const*)+0x60>
c0012e14:	eb de                	jmp    c0012df4 <Krnl::getEnv(Process*, char const*)+0x18>
c0012e16:	52                   	push   edx
c0012e17:	52                   	push   edx
c0012e18:	53                   	push   ebx
c0012e19:	50                   	push   eax
c0012e1a:	e8 67 fc ff ff       	call   c0012a86 <EnvVarContainer::getEnv(char const*)>
c0012e1f:	83 c4 10             	add    esp,0x10
c0012e22:	85 c0                	test   eax,eax
c0012e24:	75 16                	jne    c0012e3c <Krnl::getEnv(Process*, char const*)+0x60>
c0012e26:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0012e2a:	a1 58 91 02 c0       	mov    eax,ds:0xc0029158
c0012e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012e33:	83 c4 08             	add    esp,0x8
c0012e36:	5b                   	pop    ebx
c0012e37:	e9 4a fc ff ff       	jmp    c0012a86 <EnvVarContainer::getEnv(char const*)>
c0012e3c:	83 c4 08             	add    esp,0x8
c0012e3f:	5b                   	pop    ebx
c0012e40:	c3                   	ret    

c0012e41 <Krnl::setEnvSystem(char const*, char const*)>:
c0012e41:	83 ec 10             	sub    esp,0x10
c0012e44:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e4c:	ff 35 58 91 02 c0    	push   DWORD PTR ds:0xc0029158
c0012e52:	e8 6d fc ff ff       	call   c0012ac4 <EnvVarContainer::setEnv(char const*, char const*)>
c0012e57:	83 c4 1c             	add    esp,0x1c
c0012e5a:	c3                   	ret    

c0012e5b <Krnl::setEnvUser(char const*, char const*)>:
c0012e5b:	a1 54 91 02 c0       	mov    eax,ds:0xc0029154
c0012e60:	85 c0                	test   eax,eax
c0012e62:	74 15                	je     c0012e79 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0012e64:	83 ec 10             	sub    esp,0x10
c0012e67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e6b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e6f:	50                   	push   eax
c0012e70:	e8 4f fc ff ff       	call   c0012ac4 <EnvVarContainer::setEnv(char const*, char const*)>
c0012e75:	83 c4 1c             	add    esp,0x1c
c0012e78:	c3                   	ret    
c0012e79:	c3                   	ret    

c0012e7a <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0012e7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e7e:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0012e84:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012e88:	e9 37 fc ff ff       	jmp    c0012ac4 <EnvVarContainer::setEnv(char const*, char const*)>

c0012e8d <Krnl::deleteEnvSystem(char const*)>:
c0012e8d:	c3                   	ret    

c0012e8e <Krnl::deleteEnvUser(char const*)>:
c0012e8e:	c3                   	ret    

c0012e8f <Krnl::deleteEnvProcess(Process*, char const*)>:
c0012e8f:	c3                   	ret    

c0012e90 <Krnl::newProcessEnv(Process*)>:
c0012e90:	83 ec 28             	sub    esp,0x28
c0012e93:	6a 0c                	push   0xc
c0012e95:	e8 d1 6a ff ff       	call   c000996b <malloc>
c0012e9a:	5a                   	pop    edx
c0012e9b:	59                   	pop    ecx
c0012e9c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012ea0:	50                   	push   eax
c0012ea1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012ea5:	e8 e0 fe ff ff       	call   c0012d8a <EnvVarContainer::EnvVarContainer(Process*)>
c0012eaa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012eae:	83 c4 2c             	add    esp,0x2c
c0012eb1:	c3                   	ret    

c0012eb2 <Krnl::copyProcessEnv(Process*, Process*)>:
c0012eb2:	57                   	push   edi
c0012eb3:	56                   	push   esi
c0012eb4:	53                   	push   ebx
c0012eb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012eb9:	83 ec 0c             	sub    esp,0xc
c0012ebc:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0012ec2:	6a 0c                	push   0xc
c0012ec4:	e8 a2 6a ff ff       	call   c000996b <malloc>
c0012ec9:	89 c3                	mov    ebx,eax
c0012ecb:	58                   	pop    eax
c0012ecc:	5a                   	pop    edx
c0012ecd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ed1:	53                   	push   ebx
c0012ed2:	e8 b3 fe ff ff       	call   c0012d8a <EnvVarContainer::EnvVarContainer(Process*)>
c0012ed7:	8b 07                	mov    eax,DWORD PTR [edi]
c0012ed9:	89 03                	mov    DWORD PTR [ebx],eax
c0012edb:	c1 e0 03             	shl    eax,0x3
c0012ede:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ee1:	e8 85 6a ff ff       	call   c000996b <malloc>
c0012ee6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0012ee9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0012eeb:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0012eee:	c1 e1 03             	shl    ecx,0x3
c0012ef1:	89 c7                	mov    edi,eax
c0012ef3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012ef5:	83 c4 10             	add    esp,0x10
c0012ef8:	89 d8                	mov    eax,ebx
c0012efa:	5b                   	pop    ebx
c0012efb:	5e                   	pop    esi
c0012efc:	5f                   	pop    edi
c0012efd:	c3                   	ret    

c0012efe <Krnl::loadSystemEnv()>:
c0012efe:	53                   	push   ebx
c0012eff:	83 ec 14             	sub    esp,0x14
c0012f02:	6a 0c                	push   0xc
c0012f04:	e8 62 6a ff ff       	call   c000996b <malloc>
c0012f09:	89 c3                	mov    ebx,eax
c0012f0b:	58                   	pop    eax
c0012f0c:	5a                   	pop    edx
c0012f0d:	ff 35 d0 9b 02 c0    	push   DWORD PTR ds:0xc0029bd0
c0012f13:	53                   	push   ebx
c0012f14:	e8 71 fe ff ff       	call   c0012d8a <EnvVarContainer::EnvVarContainer(Process*)>
c0012f19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012f1c:	89 1d 58 91 02 c0    	mov    DWORD PTR ds:0xc0029158,ebx
c0012f22:	e8 47 fe ff ff       	call   c0012d6e <EnvVarContainer::__loadSystem()>
c0012f27:	83 c4 18             	add    esp,0x18
c0012f2a:	5b                   	pop    ebx
c0012f2b:	c3                   	ret    

c0012f2c <Krnl::loadUserEnv()>:
c0012f2c:	53                   	push   ebx
c0012f2d:	83 ec 14             	sub    esp,0x14
c0012f30:	6a 0c                	push   0xc
c0012f32:	e8 34 6a ff ff       	call   c000996b <malloc>
c0012f37:	89 c3                	mov    ebx,eax
c0012f39:	58                   	pop    eax
c0012f3a:	5a                   	pop    edx
c0012f3b:	ff 35 d0 9b 02 c0    	push   DWORD PTR ds:0xc0029bd0
c0012f41:	53                   	push   ebx
c0012f42:	e8 43 fe ff ff       	call   c0012d8a <EnvVarContainer::EnvVarContainer(Process*)>
c0012f47:	89 1d 54 91 02 c0    	mov    DWORD PTR ds:0xc0029154,ebx
c0012f4d:	83 c4 18             	add    esp,0x18
c0012f50:	5b                   	pop    ebx
c0012f51:	c3                   	ret    

c0012f52 <Krnl::flushEnv()>:
c0012f52:	c3                   	ret    

c0012f53 <Krnl::getProcessTotalEnvCount(Process*)>:
c0012f53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012f57:	8b 15 54 91 02 c0    	mov    edx,DWORD PTR ds:0xc0029154
c0012f5d:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0012f63:	a1 58 91 02 c0       	mov    eax,ds:0xc0029158
c0012f68:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f6a:	03 01                	add    eax,DWORD PTR [ecx]
c0012f6c:	85 d2                	test   edx,edx
c0012f6e:	74 02                	je     c0012f72 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0012f70:	03 02                	add    eax,DWORD PTR [edx]
c0012f72:	c3                   	ret    

c0012f73 <Krnl::getProcessEnvPair(Process*, int)>:
c0012f73:	57                   	push   edi
c0012f74:	56                   	push   esi
c0012f75:	8b 35 54 91 02 c0    	mov    esi,DWORD PTR ds:0xc0029154
c0012f7b:	53                   	push   ebx
c0012f7c:	85 f6                	test   esi,esi
c0012f7e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f82:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012f86:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0012f8c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012f90:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f92:	75 16                	jne    c0012faa <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0012f94:	39 c2                	cmp    edx,eax
c0012f96:	7c 16                	jl     c0012fae <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0012f98:	8b 0d 58 91 02 c0    	mov    ecx,DWORD PTR ds:0xc0029158
c0012f9e:	8b 31                	mov    esi,DWORD PTR [ecx]
c0012fa0:	01 c6                	add    esi,eax
c0012fa2:	39 d6                	cmp    esi,edx
c0012fa4:	7e 3c                	jle    c0012fe2 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0012fa6:	29 c2                	sub    edx,eax
c0012fa8:	eb 04                	jmp    c0012fae <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0012faa:	39 c2                	cmp    edx,eax
c0012fac:	7d 05                	jge    c0012fb3 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0012fae:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0012fb1:	eb 20                	jmp    c0012fd3 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0012fb3:	8b 3e                	mov    edi,DWORD PTR [esi]
c0012fb5:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0012fb8:	39 d1                	cmp    ecx,edx
c0012fba:	7e 04                	jle    c0012fc0 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0012fbc:	29 c2                	sub    edx,eax
c0012fbe:	eb 10                	jmp    c0012fd0 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0012fc0:	8b 35 58 91 02 c0    	mov    esi,DWORD PTR ds:0xc0029158
c0012fc6:	03 0e                	add    ecx,DWORD PTR [esi]
c0012fc8:	39 d1                	cmp    ecx,edx
c0012fca:	7e 16                	jle    c0012fe2 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0012fcc:	29 c2                	sub    edx,eax
c0012fce:	29 fa                	sub    edx,edi
c0012fd0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0012fd3:	8d 14 d0             	lea    edx,[eax+edx*8]
c0012fd6:	8b 02                	mov    eax,DWORD PTR [edx]
c0012fd8:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0012fdb:	89 03                	mov    DWORD PTR [ebx],eax
c0012fdd:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0012fe0:	eb 1d                	jmp    c0012fff <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0012fe2:	83 ec 0c             	sub    esp,0xc
c0012fe5:	68 0f 43 02 c0       	push   0xc002430f
c0012fea:	e8 18 00 00 00       	call   c0013007 <Krnl::panic(char const*)>
c0012fef:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0012ff5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0012ffc:	83 c4 10             	add    esp,0x10
c0012fff:	89 d8                	mov    eax,ebx
c0013001:	5b                   	pop    ebx
c0013002:	5e                   	pop    esi
c0013003:	5f                   	pop    edi
c0013004:	c2 04 00             	ret    0x4

c0013007 <Krnl::panic(char const*)>:
c0013007:	53                   	push   ebx
c0013008:	83 ec 10             	sub    esp,0x10
c001300b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001300f:	fa                   	cli    
c0013010:	c6 05 64 91 02 c0 01 	mov    BYTE PTR ds:0xc0029164,0x1
c0013017:	53                   	push   ebx
c0013018:	68 29 43 02 c0       	push   0xc0024329
c001301d:	e8 57 9c ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0013022:	83 c4 0c             	add    esp,0xc
c0013025:	6a 01                	push   0x1
c0013027:	6a 0f                	push   0xf
c0013029:	ff 35 04 67 02 c0    	push   DWORD PTR ds:0xc0026704
c001302f:	e8 84 78 ff ff       	call   c000a8b8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0013034:	59                   	pop    ecx
c0013035:	ff 35 04 67 02 c0    	push   DWORD PTR ds:0xc0026704
c001303b:	e8 90 7d ff ff       	call   c000add0 <VgaText::clearScreen()>
c0013040:	58                   	pop    eax
c0013041:	5a                   	pop    edx
c0013042:	68 80 43 02 c0       	push   0xc0024380
c0013047:	ff 35 04 67 02 c0    	push   DWORD PTR ds:0xc0026704
c001304d:	e8 a6 78 ff ff       	call   c000a8f8 <VgaText::setTitle(char*)>
c0013052:	83 c4 0c             	add    esp,0xc
c0013055:	6a 01                	push   0x1
c0013057:	6a 0f                	push   0xf
c0013059:	ff 35 04 67 02 c0    	push   DWORD PTR ds:0xc0026704
c001305f:	e8 54 78 ff ff       	call   c000a8b8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0013064:	59                   	pop    ecx
c0013065:	58                   	pop    eax
c0013066:	68 42 43 02 c0       	push   0xc0024342
c001306b:	ff 35 04 67 02 c0    	push   DWORD PTR ds:0xc0026704
c0013071:	e8 e6 7e ff ff       	call   c000af5c <VgaText::puts(char const*)>
c0013076:	58                   	pop    eax
c0013077:	5a                   	pop    edx
c0013078:	68 cc 43 02 c0       	push   0xc00243cc
c001307d:	ff 35 04 67 02 c0    	push   DWORD PTR ds:0xc0026704
c0013083:	e8 d4 7e ff ff       	call   c000af5c <VgaText::puts(char const*)>
c0013088:	59                   	pop    ecx
c0013089:	58                   	pop    eax
c001308a:	68 5e 43 02 c0       	push   0xc002435e
c001308f:	ff 35 04 67 02 c0    	push   DWORD PTR ds:0xc0026704
c0013095:	e8 c2 7e ff ff       	call   c000af5c <VgaText::puts(char const*)>
c001309a:	58                   	pop    eax
c001309b:	5a                   	pop    edx
c001309c:	53                   	push   ebx
c001309d:	ff 35 04 67 02 c0    	push   DWORD PTR ds:0xc0026704
c00130a3:	e8 b4 7e ff ff       	call   c000af5c <VgaText::puts(char const*)>
c00130a8:	59                   	pop    ecx
c00130a9:	5b                   	pop    ebx
c00130aa:	68 7e 43 02 c0       	push   0xc002437e
c00130af:	ff 35 04 67 02 c0    	push   DWORD PTR ds:0xc0026704
c00130b5:	e8 a2 7e ff ff       	call   c000af5c <VgaText::puts(char const*)>
c00130ba:	58                   	pop    eax
c00130bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00130bf:	e8 77 2b 00 00       	call   c0015c3b <Thr::getDriverNameFromAddress(unsigned long)>
c00130c4:	83 c4 10             	add    esp,0x10
c00130c7:	85 c0                	test   eax,eax
c00130c9:	0f 84 36 01 00 00    	je     c0013205 <Krnl::panic(char const*)+0x1fe>
c00130cf:	83 ec 08             	sub    esp,0x8
c00130d2:	89 c3                	mov    ebx,eax
c00130d4:	68 08 44 02 c0       	push   0xc0024408
c00130d9:	ff 35 04 67 02 c0    	push   DWORD PTR ds:0xc0026704
c00130df:	e8 78 7e ff ff       	call   c000af5c <VgaText::puts(char const*)>
c00130e4:	59                   	pop    ecx
c00130e5:	58                   	pop    eax
c00130e6:	68 5e 43 02 c0       	push   0xc002435e
c00130eb:	ff 35 04 67 02 c0    	push   DWORD PTR ds:0xc0026704
c00130f1:	e8 66 7e ff ff       	call   c000af5c <VgaText::puts(char const*)>
c00130f6:	58                   	pop    eax
c00130f7:	5a                   	pop    edx
c00130f8:	53                   	push   ebx
c00130f9:	ff 35 04 67 02 c0    	push   DWORD PTR ds:0xc0026704
c00130ff:	e8 58 7e ff ff       	call   c000af5c <VgaText::puts(char const*)>
c0013104:	83 c4 10             	add    esp,0x10
c0013107:	83 ec 08             	sub    esp,0x8
c001310a:	68 7d 43 02 c0       	push   0xc002437d
c001310f:	ff 35 04 67 02 c0    	push   DWORD PTR ds:0xc0026704
c0013115:	e8 42 7e ff ff       	call   c000af5c <VgaText::puts(char const*)>
c001311a:	58                   	pop    eax
c001311b:	5a                   	pop    edx
c001311c:	68 60 44 02 c0       	push   0xc0024460
c0013121:	ff 35 04 67 02 c0    	push   DWORD PTR ds:0xc0026704
c0013127:	e8 30 7e ff ff       	call   c000af5c <VgaText::puts(char const*)>
c001312c:	59                   	pop    ecx
c001312d:	5b                   	pop    ebx
c001312e:	68 a0 44 02 c0       	push   0xc00244a0
c0013133:	ff 35 04 67 02 c0    	push   DWORD PTR ds:0xc0026704
c0013139:	e8 1e 7e ff ff       	call   c000af5c <VgaText::puts(char const*)>
c001313e:	58                   	pop    eax
c001313f:	5a                   	pop    edx
c0013140:	68 69 43 02 c0       	push   0xc0024369
c0013145:	ff 35 04 67 02 c0    	push   DWORD PTR ds:0xc0026704
c001314b:	e8 0c 7e ff ff       	call   c000af5c <VgaText::puts(char const*)>
c0013150:	59                   	pop    ecx
c0013151:	5b                   	pop    ebx
c0013152:	68 e4 44 02 c0       	push   0xc00244e4
c0013157:	ff 35 04 67 02 c0    	push   DWORD PTR ds:0xc0026704
c001315d:	e8 fa 7d ff ff       	call   c000af5c <VgaText::puts(char const*)>
c0013162:	58                   	pop    eax
c0013163:	5a                   	pop    edx
c0013164:	68 81 43 02 c0       	push   0xc0024381
c0013169:	ff 35 04 67 02 c0    	push   DWORD PTR ds:0xc0026704
c001316f:	e8 e8 7d ff ff       	call   c000af5c <VgaText::puts(char const*)>
c0013174:	0f 20 c0             	mov    eax,cr0
c0013177:	59                   	pop    ecx
c0013178:	5b                   	pop    ebx
c0013179:	50                   	push   eax
c001317a:	ff 35 04 67 02 c0    	push   DWORD PTR ds:0xc0026704
c0013180:	e8 91 7d ff ff       	call   c000af16 <VgaText::putx(unsigned int)>
c0013185:	58                   	pop    eax
c0013186:	5a                   	pop    edx
c0013187:	68 8b 43 02 c0       	push   0xc002438b
c001318c:	ff 35 04 67 02 c0    	push   DWORD PTR ds:0xc0026704
c0013192:	e8 c5 7d ff ff       	call   c000af5c <VgaText::puts(char const*)>
c0013197:	0f 20 d0             	mov    eax,cr2
c001319a:	59                   	pop    ecx
c001319b:	5b                   	pop    ebx
c001319c:	50                   	push   eax
c001319d:	ff 35 04 67 02 c0    	push   DWORD PTR ds:0xc0026704
c00131a3:	e8 6e 7d ff ff       	call   c000af16 <VgaText::putx(unsigned int)>
c00131a8:	58                   	pop    eax
c00131a9:	5a                   	pop    edx
c00131aa:	68 95 43 02 c0       	push   0xc0024395
c00131af:	ff 35 04 67 02 c0    	push   DWORD PTR ds:0xc0026704
c00131b5:	e8 a2 7d ff ff       	call   c000af5c <VgaText::puts(char const*)>
c00131ba:	0f 20 d8             	mov    eax,cr3
c00131bd:	59                   	pop    ecx
c00131be:	5b                   	pop    ebx
c00131bf:	50                   	push   eax
c00131c0:	ff 35 04 67 02 c0    	push   DWORD PTR ds:0xc0026704
c00131c6:	e8 4b 7d ff ff       	call   c000af16 <VgaText::putx(unsigned int)>
c00131cb:	58                   	pop    eax
c00131cc:	5a                   	pop    edx
c00131cd:	68 a8 43 02 c0       	push   0xc00243a8
c00131d2:	ff 35 04 67 02 c0    	push   DWORD PTR ds:0xc0026704
c00131d8:	e8 7f 7d ff ff       	call   c000af5c <VgaText::puts(char const*)>
c00131dd:	0f 20 e0             	mov    eax,cr4
c00131e0:	59                   	pop    ecx
c00131e1:	5b                   	pop    ebx
c00131e2:	50                   	push   eax
c00131e3:	ff 35 04 67 02 c0    	push   DWORD PTR ds:0xc0026704
c00131e9:	e8 28 7d ff ff       	call   c000af16 <VgaText::putx(unsigned int)>
c00131ee:	58                   	pop    eax
c00131ef:	5a                   	pop    edx
c00131f0:	68 b2 43 02 c0       	push   0xc00243b2
c00131f5:	ff 35 04 67 02 c0    	push   DWORD PTR ds:0xc0026704
c00131fb:	e8 5c 7d ff ff       	call   c000af5c <VgaText::puts(char const*)>
c0013200:	83 c4 10             	add    esp,0x10
c0013203:	eb fe                	jmp    c0013203 <Krnl::panic(char const*)+0x1fc>
c0013205:	51                   	push   ecx
c0013206:	51                   	push   ecx
c0013207:	68 34 44 02 c0       	push   0xc0024434
c001320c:	ff 35 04 67 02 c0    	push   DWORD PTR ds:0xc0026704
c0013212:	e8 45 7d ff ff       	call   c000af5c <VgaText::puts(char const*)>
c0013217:	5b                   	pop    ebx
c0013218:	58                   	pop    eax
c0013219:	68 5e 43 02 c0       	push   0xc002435e
c001321e:	ff 35 04 67 02 c0    	push   DWORD PTR ds:0xc0026704
c0013224:	e8 33 7d ff ff       	call   c000af5c <VgaText::puts(char const*)>
c0013229:	58                   	pop    eax
c001322a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001322f:	5a                   	pop    edx
c0013230:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013233:	83 c0 0c             	add    eax,0xc
c0013236:	50                   	push   eax
c0013237:	ff 35 04 67 02 c0    	push   DWORD PTR ds:0xc0026704
c001323d:	e8 1a 7d ff ff       	call   c000af5c <VgaText::puts(char const*)>
c0013242:	83 c4 10             	add    esp,0x10
c0013245:	e9 bd fe ff ff       	jmp    c0013107 <Krnl::panic(char const*)+0x100>

c001324a <Krnl::powerThread(void*)>:
c001324a:	53                   	push   ebx
c001324b:	83 ec 08             	sub    esp,0x8
c001324e:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c0013253:	48                   	dec    eax
c0013254:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c0013259:	75 01                	jne    c001325c <Krnl::powerThread(void*)+0x12>
c001325b:	fb                   	sti    
c001325c:	52                   	push   edx
c001325d:	52                   	push   edx
c001325e:	ff 35 c4 91 02 c0    	push   DWORD PTR ds:0xc00291c4
c0013264:	68 0a 45 02 c0       	push   0xc002450a
c0013269:	e8 0b 9a ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001326e:	59                   	pop    ecx
c001326f:	8b 1d b4 91 02 c0    	mov    ebx,DWORD PTR ds:0xc00291b4
c0013275:	58                   	pop    eax
c0013276:	c6 05 80 91 02 c0 00 	mov    BYTE PTR ds:0xc0029180,0x0
c001327d:	53                   	push   ebx
c001327e:	68 14 45 02 c0       	push   0xc0024514
c0013283:	e8 f1 99 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0013288:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001328f:	e8 e0 36 00 00       	call   c0016974 <sleep(unsigned int)>
c0013294:	a1 c4 91 02 c0       	mov    eax,ds:0xc00291c4
c0013299:	83 c4 10             	add    esp,0x10
c001329c:	83 c0 0a             	add    eax,0xa
c001329f:	85 db                	test   ebx,ebx
c00132a1:	a3 c4 91 02 c0       	mov    ds:0xc00291c4,eax
c00132a6:	74 b4                	je     c001325c <Krnl::powerThread(void*)+0x12>
c00132a8:	39 d8                	cmp    eax,ebx
c00132aa:	7e b0                	jle    c001325c <Krnl::powerThread(void*)+0x12>
c00132ac:	83 ec 0c             	sub    esp,0xc
c00132af:	68 2c 45 02 c0       	push   0xc002452c
c00132b4:	e8 c0 99 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c00132b9:	58                   	pop    eax
c00132ba:	ff 35 88 66 02 c0    	push   DWORD PTR ds:0xc0026688
c00132c0:	e8 f1 5c ff ff       	call   c0008fb6 <Computer::sleep()>
c00132c5:	83 c4 10             	add    esp,0x10
c00132c8:	eb 92                	jmp    c001325c <Krnl::powerThread(void*)+0x12>

c00132ca <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c00132ca:	57                   	push   edi
c00132cb:	b9 09 00 00 00       	mov    ecx,0x9
c00132d0:	56                   	push   esi
c00132d1:	bf a0 91 02 c0       	mov    edi,0xc00291a0
c00132d6:	fc                   	cld    
c00132d7:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00132db:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00132dd:	5e                   	pop    esi
c00132de:	5f                   	pop    edi
c00132df:	c3                   	ret    

c00132e0 <Krnl::userIOReceived()>:
c00132e0:	c7 05 c4 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291c4,0x0
c00132ea:	c3                   	ret    

c00132eb <Krnl::handlePowerButton()>:
c00132eb:	83 ec 0c             	sub    esp,0xc
c00132ee:	a1 a0 91 02 c0       	mov    eax,ds:0xc00291a0
c00132f3:	83 f8 02             	cmp    eax,0x2
c00132f6:	75 10                	jne    c0013308 <Krnl::handlePowerButton()+0x1d>
c00132f8:	83 ec 0c             	sub    esp,0xc
c00132fb:	ff 35 88 66 02 c0    	push   DWORD PTR ds:0xc0026688
c0013301:	e8 80 5c ff ff       	call   c0008f86 <Computer::shutdown()>
c0013306:	eb 11                	jmp    c0013319 <Krnl::handlePowerButton()+0x2e>
c0013308:	48                   	dec    eax
c0013309:	75 11                	jne    c001331c <Krnl::handlePowerButton()+0x31>
c001330b:	83 ec 0c             	sub    esp,0xc
c001330e:	ff 35 88 66 02 c0    	push   DWORD PTR ds:0xc0026688
c0013314:	e8 9d 5c ff ff       	call   c0008fb6 <Computer::sleep()>
c0013319:	83 c4 10             	add    esp,0x10
c001331c:	83 c4 0c             	add    esp,0xc
c001331f:	c3                   	ret    

c0013320 <Krnl::handleSleepButton()>:
c0013320:	83 ec 0c             	sub    esp,0xc
c0013323:	a1 a4 91 02 c0       	mov    eax,ds:0xc00291a4
c0013328:	83 f8 02             	cmp    eax,0x2
c001332b:	75 10                	jne    c001333d <Krnl::handleSleepButton()+0x1d>
c001332d:	83 ec 0c             	sub    esp,0xc
c0013330:	ff 35 88 66 02 c0    	push   DWORD PTR ds:0xc0026688
c0013336:	e8 4b 5c ff ff       	call   c0008f86 <Computer::shutdown()>
c001333b:	eb 11                	jmp    c001334e <Krnl::handleSleepButton()+0x2e>
c001333d:	48                   	dec    eax
c001333e:	75 11                	jne    c0013351 <Krnl::handleSleepButton()+0x31>
c0013340:	83 ec 0c             	sub    esp,0xc
c0013343:	ff 35 88 66 02 c0    	push   DWORD PTR ds:0xc0026688
c0013349:	e8 68 5c ff ff       	call   c0008fb6 <Computer::sleep()>
c001334e:	83 c4 10             	add    esp,0x10
c0013351:	83 c4 0c             	add    esp,0xc
c0013354:	c3                   	ret    

c0013355 <Krnl::setupPowerManager()>:
c0013355:	83 ec 0c             	sub    esp,0xc
c0013358:	c7 05 c4 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291c4,0x0
c0013362:	68 f0 00 00 00       	push   0xf0
c0013367:	c6 05 80 91 02 c0 00 	mov    BYTE PTR ds:0xc0029180,0x0
c001336e:	6a 00                	push   0x0
c0013370:	68 4a 32 01 c0       	push   0xc001324a
c0013375:	ff 35 d0 9b 02 c0    	push   DWORD PTR ds:0xc0029bd0
c001337b:	e8 d0 30 00 00       	call   c0016450 <Process::createThread(void (*)(void*), void*, int)>
c0013380:	c7 05 a0 91 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc00291a0,0x2
c001338a:	c7 05 a4 91 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00291a4,0x1
c0013394:	c7 05 a8 91 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc00291a8,0x3
c001339e:	c7 05 ac 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291ac,0x0
c00133a8:	c7 05 b8 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291b8,0x0
c00133b2:	c7 05 b0 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291b0,0x0
c00133bc:	c7 05 bc 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291bc,0x0
c00133c6:	c7 05 b4 91 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00291b4,0x3c
c00133d0:	c7 05 c0 91 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00291c0,0x3c
c00133da:	83 c4 1c             	add    esp,0x1c
c00133dd:	c3                   	ret    

c00133de <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00133de:	55                   	push   ebp
c00133df:	57                   	push   edi
c00133e0:	56                   	push   esi
c00133e1:	53                   	push   ebx
c00133e2:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00133e8:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00133ef:	8a 1e                	mov    bl,BYTE PTR [esi]
c00133f1:	8d 6e 01             	lea    ebp,[esi+0x1]
c00133f4:	80 fb 40             	cmp    bl,0x40
c00133f7:	75 1b                	jne    c0013414 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c00133f9:	8a 16                	mov    dl,BYTE PTR [esi]
c00133fb:	84 d2                	test   dl,dl
c00133fd:	0f 84 f1 00 00 00    	je     c00134f4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0013403:	8d 46 01             	lea    eax,[esi+0x1]
c0013406:	80 fa 3a             	cmp    dl,0x3a
c0013409:	74 04                	je     c001340f <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001340b:	89 c6                	mov    esi,eax
c001340d:	eb ea                	jmp    c00133f9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001340f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0013412:	89 c6                	mov    esi,eax
c0013414:	50                   	push   eax
c0013415:	6a 40                	push   0x40
c0013417:	6a 00                	push   0x0
c0013419:	8d 44 24 24          	lea    eax,[esp+0x24]
c001341d:	50                   	push   eax
c001341e:	e8 59 d2 fe ff       	call   c000067c <memset>
c0013423:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001342a:	31 c0                	xor    eax,eax
c001342c:	83 c4 10             	add    esp,0x10
c001342f:	8a 0f                	mov    cl,BYTE PTR [edi]
c0013431:	84 c9                	test   cl,cl
c0013433:	0f 84 bb 00 00 00    	je     c00134f4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0013439:	3d c7 00 00 00       	cmp    eax,0xc7
c001343e:	0f 8f b0 00 00 00    	jg     c00134f4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0013444:	80 f9 0a             	cmp    cl,0xa
c0013447:	0f 85 98 00 00 00    	jne    c00134e5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001344d:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0013452:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0013456:	a8 df                	test   al,0xdf
c0013458:	0f 94 c1             	sete   cl
c001345b:	3c 23                	cmp    al,0x23
c001345d:	0f 94 c2             	sete   dl
c0013460:	08 d1                	or     cl,dl
c0013462:	75 4a                	jne    c00134ae <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0013464:	8d 50 f7             	lea    edx,[eax-0x9]
c0013467:	80 fa 01             	cmp    dl,0x1
c001346a:	76 42                	jbe    c00134ae <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001346c:	3c 5b                	cmp    al,0x5b
c001346e:	75 42                	jne    c00134b2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0013470:	80 fb 40             	cmp    bl,0x40
c0013473:	75 39                	jne    c00134ae <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0013475:	83 ec 0c             	sub    esp,0xc
c0013478:	8d 54 24 65          	lea    edx,[esp+0x65]
c001347c:	52                   	push   edx
c001347d:	e8 16 d2 fe ff       	call   c0000698 <strlen>
c0013482:	83 c4 10             	add    esp,0x10
c0013485:	83 f8 3f             	cmp    eax,0x3f
c0013488:	77 6a                	ja     c00134f4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001348a:	50                   	push   eax
c001348b:	50                   	push   eax
c001348c:	8d 54 24 61          	lea    edx,[esp+0x61]
c0013490:	52                   	push   edx
c0013491:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013495:	52                   	push   edx
c0013496:	e8 9d d2 fe ff       	call   c0000738 <strcpy>
c001349b:	58                   	pop    eax
c001349c:	8d 54 24 24          	lea    edx,[esp+0x24]
c00134a0:	52                   	push   edx
c00134a1:	e8 f2 d1 fe ff       	call   c0000698 <strlen>
c00134a6:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00134ab:	83 c4 10             	add    esp,0x10
c00134ae:	31 d2                	xor    edx,edx
c00134b0:	eb 3a                	jmp    c00134ec <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c00134b2:	80 fb 40             	cmp    bl,0x40
c00134b5:	74 06                	je     c00134bd <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c00134b7:	8d 44 24 58          	lea    eax,[esp+0x58]
c00134bb:	eb 20                	jmp    c00134dd <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c00134bd:	50                   	push   eax
c00134be:	50                   	push   eax
c00134bf:	55                   	push   ebp
c00134c0:	8d 44 24 24          	lea    eax,[esp+0x24]
c00134c4:	50                   	push   eax
c00134c5:	e8 fa d2 fe ff       	call   c00007c4 <strcmp>
c00134ca:	83 c4 10             	add    esp,0x10
c00134cd:	85 c0                	test   eax,eax
c00134cf:	75 dd                	jne    c00134ae <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00134d1:	eb e4                	jmp    c00134b7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c00134d3:	8d 50 01             	lea    edx,[eax+0x1]
c00134d6:	80 f9 3d             	cmp    cl,0x3d
c00134d9:	74 1d                	je     c00134f8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c00134db:	89 d0                	mov    eax,edx
c00134dd:	8a 08                	mov    cl,BYTE PTR [eax]
c00134df:	84 c9                	test   cl,cl
c00134e1:	75 f0                	jne    c00134d3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c00134e3:	eb 0f                	jmp    c00134f4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00134e5:	8d 50 01             	lea    edx,[eax+0x1]
c00134e8:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00134ec:	47                   	inc    edi
c00134ed:	89 d0                	mov    eax,edx
c00134ef:	e9 3b ff ff ff       	jmp    c001342f <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c00134f4:	31 c0                	xor    eax,eax
c00134f6:	eb 33                	jmp    c001352b <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c00134f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00134fc:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00134ff:	50                   	push   eax
c0013500:	50                   	push   eax
c0013501:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013505:	50                   	push   eax
c0013506:	56                   	push   esi
c0013507:	e8 b8 d2 fe ff       	call   c00007c4 <strcmp>
c001350c:	83 c4 10             	add    esp,0x10
c001350f:	85 c0                	test   eax,eax
c0013511:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013515:	75 97                	jne    c00134ae <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0013517:	51                   	push   ecx
c0013518:	51                   	push   ecx
c0013519:	52                   	push   edx
c001351a:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013521:	e8 12 d2 fe ff       	call   c0000738 <strcpy>
c0013526:	83 c4 10             	add    esp,0x10
c0013529:	b0 01                	mov    al,0x1
c001352b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013531:	5b                   	pop    ebx
c0013532:	5e                   	pop    esi
c0013533:	5f                   	pop    edi
c0013534:	5d                   	pop    ebp
c0013535:	c3                   	ret    

c0013536 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0013536:	57                   	push   edi
c0013537:	56                   	push   esi
c0013538:	53                   	push   ebx
c0013539:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001353f:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0013546:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001354d:	53                   	push   ebx
c001354e:	e8 45 d1 fe ff       	call   c0000698 <strlen>
c0013553:	89 34 24             	mov    DWORD PTR [esp],esi
c0013556:	89 c7                	mov    edi,eax
c0013558:	e8 3b d1 fe ff       	call   c0000698 <strlen>
c001355d:	83 c4 10             	add    esp,0x10
c0013560:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013564:	3d ff 00 00 00       	cmp    eax,0xff
c0013569:	0f 87 d3 00 00 00    	ja     c0013642 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001356f:	57                   	push   edi
c0013570:	57                   	push   edi
c0013571:	56                   	push   esi
c0013572:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013576:	56                   	push   esi
c0013577:	e8 bc d1 fe ff       	call   c0000738 <strcpy>
c001357c:	58                   	pop    eax
c001357d:	5a                   	pop    edx
c001357e:	68 8f 48 02 c0       	push   0xc002488f
c0013583:	56                   	push   esi
c0013584:	e8 ef d2 fe ff       	call   c0000878 <strcat>
c0013589:	59                   	pop    ecx
c001358a:	5f                   	pop    edi
c001358b:	53                   	push   ebx
c001358c:	56                   	push   esi
c001358d:	e8 e6 d2 fe ff       	call   c0000878 <strcat>
c0013592:	58                   	pop    eax
c0013593:	5a                   	pop    edx
c0013594:	68 39 45 02 c0       	push   0xc0024539
c0013599:	56                   	push   esi
c001359a:	e8 d9 d2 fe ff       	call   c0000878 <strcat>
c001359f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00135a6:	e8 c0 63 ff ff       	call   c000996b <malloc>
c00135ab:	83 c4 0c             	add    esp,0xc
c00135ae:	89 c3                	mov    ebx,eax
c00135b0:	ff 35 d0 9b 02 c0    	push   DWORD PTR ds:0xc0029bd0
c00135b6:	56                   	push   esi
c00135b7:	50                   	push   eax
c00135b8:	e8 27 9c ff ff       	call   c000d1e4 <File::File(char const*, Process*)>
c00135bd:	83 c4 10             	add    esp,0x10
c00135c0:	85 db                	test   ebx,ebx
c00135c2:	74 7e                	je     c0013642 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00135c4:	51                   	push   ecx
c00135c5:	51                   	push   ecx
c00135c6:	6a 01                	push   0x1
c00135c8:	53                   	push   ebx
c00135c9:	e8 f0 9c ff ff       	call   c000d2be <File::open(FileOpenMode)>
c00135ce:	83 c4 10             	add    esp,0x10
c00135d1:	85 c0                	test   eax,eax
c00135d3:	74 08                	je     c00135dd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c00135d5:	83 ec 0c             	sub    esp,0xc
c00135d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00135da:	53                   	push   ebx
c00135db:	eb 5f                	jmp    c001363c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00135dd:	52                   	push   edx
c00135de:	8d 44 24 17          	lea    eax,[esp+0x17]
c00135e2:	50                   	push   eax
c00135e3:	8d 44 24 20          	lea    eax,[esp+0x20]
c00135e7:	50                   	push   eax
c00135e8:	53                   	push   ebx
c00135e9:	e8 7c 9f ff ff       	call   c000d56a <File::stat(unsigned long long*, bool*)>
c00135ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00135f2:	83 c4 10             	add    esp,0x10
c00135f5:	89 c1                	mov    ecx,eax
c00135f7:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c00135fb:	74 31                	je     c001362e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00135fd:	83 ec 0c             	sub    esp,0xc
c0013600:	50                   	push   eax
c0013601:	e8 65 63 ff ff       	call   c000996b <malloc>
c0013606:	89 c6                	mov    esi,eax
c0013608:	58                   	pop    eax
c0013609:	8b 03                	mov    eax,DWORD PTR [ebx]
c001360b:	8d 54 24 20          	lea    edx,[esp+0x20]
c001360f:	52                   	push   edx
c0013610:	56                   	push   esi
c0013611:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013615:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013619:	53                   	push   ebx
c001361a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001361d:	83 c4 20             	add    esp,0x20
c0013620:	85 c0                	test   eax,eax
c0013622:	75 0a                	jne    c001362e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013624:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013628:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001362c:	74 18                	je     c0013646 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001362e:	83 ec 0c             	sub    esp,0xc
c0013631:	53                   	push   ebx
c0013632:	e8 e5 9c ff ff       	call   c000d31c <File::close()>
c0013637:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013639:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001363c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001363f:	83 c4 10             	add    esp,0x10
c0013642:	31 c0                	xor    eax,eax
c0013644:	eb 3b                	jmp    c0013681 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0013646:	83 ec 0c             	sub    esp,0xc
c0013649:	53                   	push   ebx
c001364a:	e8 cd 9c ff ff       	call   c000d31c <File::close()>
c001364f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013651:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013654:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013657:	83 c4 0c             	add    esp,0xc
c001365a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013661:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013668:	56                   	push   esi
c0013669:	e8 70 fd ff ff       	call   c00133de <Reg::findLineFromLoadedData(char*, char*, char*)>
c001366e:	89 34 24             	mov    DWORD PTR [esp],esi
c0013671:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013675:	e8 01 63 ff ff       	call   c000997b <free>
c001367a:	83 c4 10             	add    esp,0x10
c001367d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013681:	81 c4 20 01 00 00    	add    esp,0x120
c0013687:	5b                   	pop    ebx
c0013688:	5e                   	pop    esi
c0013689:	5f                   	pop    edi
c001368a:	c3                   	ret    

c001368b <Reg::getLine(char*, char*, char*)>:
c001368b:	57                   	push   edi
c001368c:	56                   	push   esi
c001368d:	53                   	push   ebx
c001368e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013692:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013696:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001369a:	57                   	push   edi
c001369b:	56                   	push   esi
c001369c:	53                   	push   ebx
c001369d:	68 3e 45 02 c0       	push   0xc002453e
c00136a2:	e8 8f fe ff ff       	call   c0013536 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00136a7:	83 c4 10             	add    esp,0x10
c00136aa:	84 c0                	test   al,al
c00136ac:	75 10                	jne    c00136be <Reg::getLine(char*, char*, char*)+0x33>
c00136ae:	57                   	push   edi
c00136af:	56                   	push   esi
c00136b0:	53                   	push   ebx
c00136b1:	68 63 45 02 c0       	push   0xc0024563
c00136b6:	e8 7b fe ff ff       	call   c0013536 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00136bb:	83 c4 10             	add    esp,0x10
c00136be:	5b                   	pop    ebx
c00136bf:	5e                   	pop    esi
c00136c0:	5f                   	pop    edi
c00136c1:	c3                   	ret    

c00136c2 <Reg::readInt(char*, char*, int*)>:
c00136c2:	55                   	push   ebp
c00136c3:	57                   	push   edi
c00136c4:	56                   	push   esi
c00136c5:	53                   	push   ebx
c00136c6:	81 ec f0 00 00 00    	sub    esp,0xf0
c00136cc:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00136d0:	57                   	push   edi
c00136d1:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00136d8:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00136df:	e8 a7 ff ff ff       	call   c001368b <Reg::getLine(char*, char*, char*)>
c00136e4:	83 c4 10             	add    esp,0x10
c00136e7:	84 c0                	test   al,al
c00136e9:	0f 84 b3 00 00 00    	je     c00137a2 <Reg::readInt(char*, char*, int*)+0xe0>
c00136ef:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00136f3:	80 fa 2b             	cmp    dl,0x2b
c00136f6:	74 0c                	je     c0013704 <Reg::readInt(char*, char*, int*)+0x42>
c00136f8:	80 fa 2d             	cmp    dl,0x2d
c00136fb:	75 0e                	jne    c001370b <Reg::readInt(char*, char*, int*)+0x49>
c00136fd:	ba 01 00 00 00       	mov    edx,0x1
c0013702:	eb 0b                	jmp    c001370f <Reg::readInt(char*, char*, int*)+0x4d>
c0013704:	ba 01 00 00 00       	mov    edx,0x1
c0013709:	eb 02                	jmp    c001370d <Reg::readInt(char*, char*, int*)+0x4b>
c001370b:	31 d2                	xor    edx,edx
c001370d:	31 c0                	xor    eax,eax
c001370f:	be 0a 00 00 00       	mov    esi,0xa
c0013714:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013719:	75 20                	jne    c001373b <Reg::readInt(char*, char*, int*)+0x79>
c001371b:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001371f:	80 f9 78             	cmp    cl,0x78
c0013722:	75 0a                	jne    c001372e <Reg::readInt(char*, char*, int*)+0x6c>
c0013724:	83 c2 02             	add    edx,0x2
c0013727:	be 10 00 00 00       	mov    esi,0x10
c001372c:	eb 0d                	jmp    c001373b <Reg::readInt(char*, char*, int*)+0x79>
c001372e:	80 f9 62             	cmp    cl,0x62
c0013731:	75 08                	jne    c001373b <Reg::readInt(char*, char*, int*)+0x79>
c0013733:	83 c2 02             	add    edx,0x2
c0013736:	be 02 00 00 00       	mov    esi,0x2
c001373b:	01 d7                	add    edi,edx
c001373d:	31 d2                	xor    edx,edx
c001373f:	8a 1f                	mov    bl,BYTE PTR [edi]
c0013741:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0013745:	80 fb 0d             	cmp    bl,0xd
c0013748:	0f 94 c3             	sete   bl
c001374b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013750:	0f 94 c1             	sete   cl
c0013753:	08 cb                	or     bl,cl
c0013755:	75 3a                	jne    c0013791 <Reg::readInt(char*, char*, int*)+0xcf>
c0013757:	0f af d6             	imul   edx,esi
c001375a:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001375f:	83 fe 10             	cmp    esi,0x10
c0013762:	75 26                	jne    c001378a <Reg::readInt(char*, char*, int*)+0xc8>
c0013764:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0013768:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001376b:	89 e9                	mov    ecx,ebp
c001376d:	80 f9 05             	cmp    cl,0x5
c0013770:	77 06                	ja     c0013778 <Reg::readInt(char*, char*, int*)+0xb6>
c0013772:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0013776:	eb 16                	jmp    c001378e <Reg::readInt(char*, char*, int*)+0xcc>
c0013778:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001377c:	83 e9 61             	sub    ecx,0x61
c001377f:	80 f9 05             	cmp    cl,0x5
c0013782:	77 06                	ja     c001378a <Reg::readInt(char*, char*, int*)+0xc8>
c0013784:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0013788:	eb 04                	jmp    c001378e <Reg::readInt(char*, char*, int*)+0xcc>
c001378a:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001378e:	47                   	inc    edi
c001378f:	eb ae                	jmp    c001373f <Reg::readInt(char*, char*, int*)+0x7d>
c0013791:	84 c0                	test   al,al
c0013793:	74 02                	je     c0013797 <Reg::readInt(char*, char*, int*)+0xd5>
c0013795:	f7 da                	neg    edx
c0013797:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001379e:	89 10                	mov    DWORD PTR [eax],edx
c00137a0:	88 d8                	mov    al,bl
c00137a2:	81 c4 ec 00 00 00    	add    esp,0xec
c00137a8:	5b                   	pop    ebx
c00137a9:	5e                   	pop    esi
c00137aa:	5f                   	pop    edi
c00137ab:	5d                   	pop    ebp
c00137ac:	c3                   	ret    

c00137ad <Reg::readString(char*, char*, char*, int)>:
c00137ad:	57                   	push   edi
c00137ae:	56                   	push   esi
c00137af:	53                   	push   ebx
c00137b0:	81 ec d4 00 00 00    	sub    esp,0xd4
c00137b6:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00137bd:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00137c1:	57                   	push   edi
c00137c2:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00137c9:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00137d0:	e8 b6 fe ff ff       	call   c001368b <Reg::getLine(char*, char*, char*)>
c00137d5:	83 c4 10             	add    esp,0x10
c00137d8:	89 c6                	mov    esi,eax
c00137da:	84 c0                	test   al,al
c00137dc:	74 44                	je     c0013822 <Reg::readString(char*, char*, char*, int)+0x75>
c00137de:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00137e5:	31 c0                	xor    eax,eax
c00137e7:	4a                   	dec    edx
c00137e8:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00137eb:	84 c9                	test   cl,cl
c00137ed:	74 0f                	je     c00137fe <Reg::readString(char*, char*, char*, int)+0x51>
c00137ef:	39 c2                	cmp    edx,eax
c00137f1:	7e 0b                	jle    c00137fe <Reg::readString(char*, char*, char*, int)+0x51>
c00137f3:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00137f6:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00137fb:	40                   	inc    eax
c00137fc:	eb ea                	jmp    c00137e8 <Reg::readString(char*, char*, char*, int)+0x3b>
c00137fe:	83 ec 0c             	sub    esp,0xc
c0013801:	53                   	push   ebx
c0013802:	e8 91 ce fe ff       	call   c0000698 <strlen>
c0013807:	83 c4 10             	add    esp,0x10
c001380a:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001380f:	75 11                	jne    c0013822 <Reg::readString(char*, char*, char*, int)+0x75>
c0013811:	83 ec 0c             	sub    esp,0xc
c0013814:	53                   	push   ebx
c0013815:	e8 7e ce fe ff       	call   c0000698 <strlen>
c001381a:	83 c4 10             	add    esp,0x10
c001381d:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013822:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013828:	89 f0                	mov    eax,esi
c001382a:	5b                   	pop    ebx
c001382b:	5e                   	pop    esi
c001382c:	5f                   	pop    edi
c001382d:	c3                   	ret    

c001382e <Reg::readBool(char*, char*, bool*)>:
c001382e:	83 ec 20             	sub    esp,0x20
c0013831:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013835:	50                   	push   eax
c0013836:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001383a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001383e:	e8 7f fe ff ff       	call   c00136c2 <Reg::readInt(char*, char*, int*)>
c0013843:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013848:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001384c:	0f 95 02             	setne  BYTE PTR [edx]
c001384f:	83 c4 2c             	add    esp,0x2c
c0013852:	c3                   	ret    

c0013853 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013853:	53                   	push   ebx
c0013854:	83 ec 1c             	sub    esp,0x1c
c0013857:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001385b:	8d 44 24 13          	lea    eax,[esp+0x13]
c001385f:	50                   	push   eax
c0013860:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013864:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013868:	e8 c1 ff ff ff       	call   c001382e <Reg::readBool(char*, char*, bool*)>
c001386d:	83 c4 10             	add    esp,0x10
c0013870:	84 c0                	test   al,al
c0013872:	74 04                	je     c0013878 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013874:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013878:	88 d8                	mov    al,bl
c001387a:	83 c4 18             	add    esp,0x18
c001387d:	5b                   	pop    ebx
c001387e:	c3                   	ret    

c001387f <Reg::readIntWithDefault(char*, char*, int)>:
c001387f:	53                   	push   ebx
c0013880:	83 ec 1c             	sub    esp,0x1c
c0013883:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013887:	8d 44 24 10          	lea    eax,[esp+0x10]
c001388b:	50                   	push   eax
c001388c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013890:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013894:	e8 29 fe ff ff       	call   c00136c2 <Reg::readInt(char*, char*, int*)>
c0013899:	83 c4 10             	add    esp,0x10
c001389c:	84 c0                	test   al,al
c001389e:	74 04                	je     c00138a4 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00138a0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00138a4:	89 d8                	mov    eax,ebx
c00138a6:	83 c4 18             	add    esp,0x18
c00138a9:	5b                   	pop    ebx
c00138aa:	c3                   	ret    

c00138ab <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00138ab:	57                   	push   edi
c00138ac:	56                   	push   esi
c00138ad:	56                   	push   esi
c00138ae:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00138b2:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00138b6:	56                   	push   esi
c00138b7:	57                   	push   edi
c00138b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138c0:	e8 e8 fe ff ff       	call   c00137ad <Reg::readString(char*, char*, char*, int)>
c00138c5:	83 c4 10             	add    esp,0x10
c00138c8:	84 c0                	test   al,al
c00138ca:	75 1a                	jne    c00138e6 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c00138cc:	51                   	push   ecx
c00138cd:	56                   	push   esi
c00138ce:	6a 00                	push   0x0
c00138d0:	57                   	push   edi
c00138d1:	e8 a6 cd fe ff       	call   c000067c <memset>
c00138d6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00138d9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00138dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00138df:	83 c4 10             	add    esp,0x10
c00138e2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00138e6:	89 f8                	mov    eax,edi
c00138e8:	5a                   	pop    edx
c00138e9:	5e                   	pop    esi
c00138ea:	5f                   	pop    edi
c00138eb:	c3                   	ret    

c00138ec <Sys::eject(regs*)>:
c00138ec:	83 ec 0c             	sub    esp,0xc
c00138ef:	83 ca ff             	or     edx,0xffffffff
c00138f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138f6:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00138f9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00138fe:	83 e9 41             	sub    ecx,0x41
c0013901:	83 f9 19             	cmp    ecx,0x19
c0013904:	77 18                	ja     c001391e <Sys::eject(regs*)+0x32>
c0013906:	8b 0c 8d 40 8c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd73c0]
c001390d:	85 c9                	test   ecx,ecx
c001390f:	74 0d                	je     c001391e <Sys::eject(regs*)+0x32>
c0013911:	83 ec 0c             	sub    esp,0xc
c0013914:	51                   	push   ecx
c0013915:	e8 9e ba ff ff       	call   c000f3b8 <LogicalDisk::eject()>
c001391a:	83 c4 10             	add    esp,0x10
c001391d:	99                   	cdq    
c001391e:	83 c4 0c             	add    esp,0xc
c0013921:	c3                   	ret    

c0013922 <Sys::exit(regs*)>:
c0013922:	83 ec 18             	sub    esp,0x18
c0013925:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013929:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001392c:	e8 53 36 00 00       	call   c0016f84 <terminateTask(int)>
c0013931:	83 c8 ff             	or     eax,0xffffffff
c0013934:	83 c4 1c             	add    esp,0x1c
c0013937:	89 c2                	mov    edx,eax
c0013939:	c3                   	ret    

c001393a <Sys::getCwd(regs*)>:
c001393a:	83 ec 10             	sub    esp,0x10
c001393d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013941:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013944:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013947:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001394c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001394f:	e8 92 96 ff ff       	call   c000cfe6 <Fs::getcwd(Process*, char*, int)>
c0013954:	83 c4 1c             	add    esp,0x1c
c0013957:	99                   	cdq    
c0013958:	c3                   	ret    

c0013959 <Sys::getPID(regs*)>:
c0013959:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001395e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013961:	8b 00                	mov    eax,DWORD PTR [eax]
c0013963:	99                   	cdq    
c0013964:	c3                   	ret    

c0013965 <Sys::getRAMData(regs*)>:
c0013965:	8b 0d b8 66 02 c0    	mov    ecx,DWORD PTR ds:0xc00266b8
c001396b:	69 05 b4 66 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc00266b4,0xc8
c0013975:	99                   	cdq    
c0013976:	f7 f9                	idiv   ecx
c0013978:	c1 e0 18             	shl    eax,0x18
c001397b:	09 c8                	or     eax,ecx
c001397d:	99                   	cdq    
c001397e:	c3                   	ret    

c001397f <Sys::getVGAPtr(regs*)>:
c001397f:	55                   	push   ebp
c0013980:	57                   	push   edi
c0013981:	56                   	push   esi
c0013982:	53                   	push   ebx
c0013983:	83 ec 18             	sub    esp,0x18
c0013986:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001398a:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001398d:	e8 f6 30 00 00       	call   c0016a88 <Thr::processFromPID(int)>
c0013992:	83 c4 10             	add    esp,0x10
c0013995:	89 c1                	mov    ecx,eax
c0013997:	b8 01 00 00 00       	mov    eax,0x1
c001399c:	85 c9                	test   ecx,ecx
c001399e:	74 59                	je     c00139f9 <Sys::getVGAPtr(regs*)+0x7a>
c00139a0:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c00139a6:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00139aa:	74 0c                	je     c00139b8 <Sys::getVGAPtr(regs*)+0x39>
c00139ac:	83 ec 0c             	sub    esp,0xc
c00139af:	53                   	push   ebx
c00139b0:	e8 a4 70 ff ff       	call   c000aa59 <setActiveTerminal(VgaText*)>
c00139b5:	83 c4 10             	add    esp,0x10
c00139b8:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00139bb:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c00139be:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00139c3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00139c5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00139c8:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00139cb:	81 c3 82 00 00 00    	add    ebx,0x82
c00139d1:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00139d7:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00139da:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c00139dd:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00139e3:	50                   	push   eax
c00139e4:	50                   	push   eax
c00139e5:	53                   	push   ebx
c00139e6:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00139e9:	05 a8 0f 00 00       	add    eax,0xfa8
c00139ee:	50                   	push   eax
c00139ef:	e8 44 cd fe ff       	call   c0000738 <strcpy>
c00139f4:	83 c4 10             	add    esp,0x10
c00139f7:	31 c0                	xor    eax,eax
c00139f9:	83 c4 0c             	add    esp,0xc
c00139fc:	31 d2                	xor    edx,edx
c00139fe:	5b                   	pop    ebx
c00139ff:	5e                   	pop    esi
c0013a00:	5f                   	pop    edi
c0013a01:	5d                   	pop    ebp
c0013a02:	c3                   	ret    

c0013a03 <Sys::loadDLL(regs*)>:
c0013a03:	56                   	push   esi
c0013a04:	53                   	push   ebx
c0013a05:	31 d2                	xor    edx,edx
c0013a07:	51                   	push   ecx
c0013a08:	b8 01 00 00 00       	mov    eax,0x1
c0013a0d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013a11:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013a15:	0f 84 8c 00 00 00    	je     c0013aa7 <Sys::loadDLL(regs*)+0xa4>
c0013a1b:	83 ec 0c             	sub    esp,0xc
c0013a1e:	68 14 01 00 00       	push   0x114
c0013a23:	e8 43 5f ff ff       	call   c000996b <malloc>
c0013a28:	83 c4 0c             	add    esp,0xc
c0013a2b:	89 c3                	mov    ebx,eax
c0013a2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a32:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013a35:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013a38:	53                   	push   ebx
c0013a39:	e8 a6 97 ff ff       	call   c000d1e4 <File::File(char const*, Process*)>
c0013a3e:	83 c4 10             	add    esp,0x10
c0013a41:	31 d2                	xor    edx,edx
c0013a43:	b8 02 00 00 00       	mov    eax,0x2
c0013a48:	85 db                	test   ebx,ebx
c0013a4a:	74 5b                	je     c0013aa7 <Sys::loadDLL(regs*)+0xa4>
c0013a4c:	83 ec 0c             	sub    esp,0xc
c0013a4f:	53                   	push   ebx
c0013a50:	e8 d7 9a ff ff       	call   c000d52c <File::exists()>
c0013a55:	83 c4 10             	add    esp,0x10
c0013a58:	84 c0                	test   al,al
c0013a5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013a5c:	75 11                	jne    c0013a6f <Sys::loadDLL(regs*)+0x6c>
c0013a5e:	83 ec 0c             	sub    esp,0xc
c0013a61:	53                   	push   ebx
c0013a62:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013a65:	83 c4 10             	add    esp,0x10
c0013a68:	b8 03 00 00 00       	mov    eax,0x3
c0013a6d:	eb 36                	jmp    c0013aa5 <Sys::loadDLL(regs*)+0xa2>
c0013a6f:	83 ec 0c             	sub    esp,0xc
c0013a72:	53                   	push   ebx
c0013a73:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013a76:	58                   	pop    eax
c0013a77:	5a                   	pop    edx
c0013a78:	6a 00                	push   0x0
c0013a7a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013a7d:	e8 0a 22 00 00       	call   c0015c8c <Thr::loadDLL(char const*, bool)>
c0013a82:	83 c4 10             	add    esp,0x10
c0013a85:	89 c1                	mov    ecx,eax
c0013a87:	31 d2                	xor    edx,edx
c0013a89:	b8 04 00 00 00       	mov    eax,0x4
c0013a8e:	85 c9                	test   ecx,ecx
c0013a90:	74 15                	je     c0013aa7 <Sys::loadDLL(regs*)+0xa4>
c0013a92:	53                   	push   ebx
c0013a93:	53                   	push   ebx
c0013a94:	ff 35 88 66 02 c0    	push   DWORD PTR ds:0xc0026688
c0013a9a:	51                   	push   ecx
c0013a9b:	e8 1d 24 00 00       	call   c0015ebd <Thr::executeDLL(unsigned long, void*)>
c0013aa0:	83 c4 10             	add    esp,0x10
c0013aa3:	31 c0                	xor    eax,eax
c0013aa5:	31 d2                	xor    edx,edx
c0013aa7:	59                   	pop    ecx
c0013aa8:	5b                   	pop    ebx
c0013aa9:	5e                   	pop    esi
c0013aaa:	c3                   	ret    

c0013aab <Sys::read(regs*)>:
c0013aab:	57                   	push   edi
c0013aac:	56                   	push   esi
c0013aad:	53                   	push   ebx
c0013aae:	83 ec 10             	sub    esp,0x10
c0013ab1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013ab5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013ab8:	83 f8 02             	cmp    eax,0x2
c0013abb:	77 10                	ja     c0013acd <Sys::read(regs*)+0x22>
c0013abd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ac2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013ac5:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013acb:	eb 0e                	jmp    c0013adb <Sys::read(regs*)+0x30>
c0013acd:	83 ec 0c             	sub    esp,0xc
c0013ad0:	50                   	push   eax
c0013ad1:	e8 f1 7c ff ff       	call   c000b7c7 <getFromFileDescriptor(int)>
c0013ad6:	83 c4 10             	add    esp,0x10
c0013ad9:	89 c1                	mov    ecx,eax
c0013adb:	83 c8 ff             	or     eax,0xffffffff
c0013ade:	85 c9                	test   ecx,ecx
c0013ae0:	89 c2                	mov    edx,eax
c0013ae2:	74 28                	je     c0013b0c <Sys::read(regs*)+0x61>
c0013ae4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013aec:	31 ff                	xor    edi,edi
c0013aee:	83 ec 0c             	sub    esp,0xc
c0013af1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013af3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013af7:	52                   	push   edx
c0013af8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013afb:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013afe:	57                   	push   edi
c0013aff:	56                   	push   esi
c0013b00:	51                   	push   ecx
c0013b01:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013b08:	83 c4 20             	add    esp,0x20
c0013b0b:	99                   	cdq    
c0013b0c:	83 c4 10             	add    esp,0x10
c0013b0f:	5b                   	pop    ebx
c0013b10:	5e                   	pop    esi
c0013b11:	5f                   	pop    edi
c0013b12:	c3                   	ret    

c0013b13 <Sys::sbrk(regs*)>:
c0013b13:	56                   	push   esi
c0013b14:	53                   	push   ebx
c0013b15:	50                   	push   eax
c0013b16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b1b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b1f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b22:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013b25:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013b2b:	85 db                	test   ebx,ebx
c0013b2d:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013b30:	74 02                	je     c0013b34 <Sys::sbrk(regs*)+0x21>
c0013b32:	79 06                	jns    c0013b3a <Sys::sbrk(regs*)+0x27>
c0013b34:	89 f0                	mov    eax,esi
c0013b36:	31 d2                	xor    edx,edx
c0013b38:	eb 2a                	jmp    c0013b64 <Sys::sbrk(regs*)+0x51>
c0013b3a:	83 c8 ff             	or     eax,0xffffffff
c0013b3d:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0013b43:	89 c2                	mov    edx,eax
c0013b45:	77 1d                	ja     c0013b64 <Sys::sbrk(regs*)+0x51>
c0013b47:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013b4d:	50                   	push   eax
c0013b4e:	c1 ea 0c             	shr    edx,0xc
c0013b51:	68 07 0c 00 00       	push   0xc07
c0013b56:	52                   	push   edx
c0013b57:	51                   	push   ecx
c0013b58:	e8 2f 85 ff ff       	call   c000c08c <VAS::allocatePages(int, int)>
c0013b5d:	89 f0                	mov    eax,esi
c0013b5f:	31 d2                	xor    edx,edx
c0013b61:	83 c4 10             	add    esp,0x10
c0013b64:	59                   	pop    ecx
c0013b65:	5b                   	pop    ebx
c0013b66:	5e                   	pop    esi
c0013b67:	c3                   	ret    

c0013b68 <Sys::setCwd(regs*)>:
c0013b68:	83 ec 14             	sub    esp,0x14
c0013b6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b6f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013b72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b77:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013b7a:	e8 4c 9a ff ff       	call   c000d5cb <Fs::setcwd(Process*, char*)>
c0013b7f:	83 c4 1c             	add    esp,0x1c
c0013b82:	99                   	cdq    
c0013b83:	c3                   	ret    

c0013b84 <Sys::setTime(regs*)>:
c0013b84:	55                   	push   ebp
c0013b85:	31 c9                	xor    ecx,ecx
c0013b87:	57                   	push   edi
c0013b88:	bd 0c 00 00 00       	mov    ebp,0xc
c0013b8d:	56                   	push   esi
c0013b8e:	53                   	push   ebx
c0013b8f:	31 db                	xor    ebx,ebx
c0013b91:	83 ec 10             	sub    esp,0x10
c0013b94:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013b98:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013b9b:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013b9e:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013ba1:	89 c2                	mov    edx,eax
c0013ba3:	66 81 ef 6c 07       	sub    di,0x76c
c0013ba8:	83 e2 1f             	and    edx,0x1f
c0013bab:	c1 e7 10             	shl    edi,0x10
c0013bae:	42                   	inc    edx
c0013baf:	c1 e8 05             	shr    eax,0x5
c0013bb2:	88 d1                	mov    cl,dl
c0013bb4:	31 d2                	xor    edx,edx
c0013bb6:	f7 f5                	div    ebp
c0013bb8:	89 dd                	mov    ebp,ebx
c0013bba:	88 d5                	mov    ch,dl
c0013bbc:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0013bc2:	0f b7 c1             	movzx  eax,cx
c0013bc5:	31 d2                	xor    edx,edx
c0013bc7:	09 f8                	or     eax,edi
c0013bc9:	bf 3c 00 00 00       	mov    edi,0x3c
c0013bce:	89 c1                	mov    ecx,eax
c0013bd0:	89 f0                	mov    eax,esi
c0013bd2:	f7 f7                	div    edi
c0013bd4:	c1 e2 10             	shl    edx,0x10
c0013bd7:	09 d5                	or     ebp,edx
c0013bd9:	31 d2                	xor    edx,edx
c0013bdb:	89 eb                	mov    ebx,ebp
c0013bdd:	f7 f7                	div    edi
c0013bdf:	bf 10 0e 00 00       	mov    edi,0xe10
c0013be4:	88 d7                	mov    bh,dl
c0013be6:	89 f0                	mov    eax,esi
c0013be8:	31 d2                	xor    edx,edx
c0013bea:	f7 f7                	div    edi
c0013bec:	bf 18 00 00 00       	mov    edi,0x18
c0013bf1:	31 d2                	xor    edx,edx
c0013bf3:	f7 f7                	div    edi
c0013bf5:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c0013bfa:	88 d3                	mov    bl,dl
c0013bfc:	53                   	push   ebx
c0013bfd:	51                   	push   ecx
c0013bfe:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013c04:	e8 01 a2 ff ff       	call   c000de0a <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013c09:	83 c4 1c             	add    esp,0x1c
c0013c0c:	83 f0 01             	xor    eax,0x1
c0013c0f:	5b                   	pop    ebx
c0013c10:	0f b6 c0             	movzx  eax,al
c0013c13:	5e                   	pop    esi
c0013c14:	31 d2                	xor    edx,edx
c0013c16:	5f                   	pop    edi
c0013c17:	5d                   	pop    ebp
c0013c18:	c3                   	ret    

c0013c19 <Sys::timezone(regs*)>:
c0013c19:	53                   	push   ebx
c0013c1a:	83 ec 08             	sub    esp,0x8
c0013c1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c21:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013c25:	75 17                	jne    c0013c3e <Sys::timezone(regs*)+0x25>
c0013c27:	83 ec 0c             	sub    esp,0xc
c0013c2a:	68 7e 45 02 c0       	push   0xc002457e
c0013c2f:	e8 45 90 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0013c34:	83 c8 ff             	or     eax,0xffffffff
c0013c37:	83 c4 10             	add    esp,0x10
c0013c3a:	89 c2                	mov    edx,eax
c0013c3c:	eb 20                	jmp    c0013c5e <Sys::timezone(regs*)+0x45>
c0013c3e:	83 ec 0c             	sub    esp,0xc
c0013c41:	68 93 45 02 c0       	push   0xc0024593
c0013c46:	e8 2e 90 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0013c4b:	58                   	pop    eax
c0013c4c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013c4f:	e8 18 9f ff ff       	call   c000db6c <User::loadClockSettings(int)>
c0013c54:	83 c4 10             	add    esp,0x10
c0013c57:	b8 01 00 00 00       	mov    eax,0x1
c0013c5c:	31 d2                	xor    edx,edx
c0013c5e:	83 c4 08             	add    esp,0x8
c0013c61:	5b                   	pop    ebx
c0013c62:	c3                   	ret    

c0013c63 <Sys::write(regs*)>:
c0013c63:	57                   	push   edi
c0013c64:	56                   	push   esi
c0013c65:	53                   	push   ebx
c0013c66:	83 ec 10             	sub    esp,0x10
c0013c69:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013c6d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013c70:	83 f8 02             	cmp    eax,0x2
c0013c73:	77 10                	ja     c0013c85 <Sys::write(regs*)+0x22>
c0013c75:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c7a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013c7d:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013c83:	eb 0e                	jmp    c0013c93 <Sys::write(regs*)+0x30>
c0013c85:	83 ec 0c             	sub    esp,0xc
c0013c88:	50                   	push   eax
c0013c89:	e8 39 7b ff ff       	call   c000b7c7 <getFromFileDescriptor(int)>
c0013c8e:	83 c4 10             	add    esp,0x10
c0013c91:	89 c1                	mov    ecx,eax
c0013c93:	83 c8 ff             	or     eax,0xffffffff
c0013c96:	85 c9                	test   ecx,ecx
c0013c98:	89 c2                	mov    edx,eax
c0013c9a:	74 28                	je     c0013cc4 <Sys::write(regs*)+0x61>
c0013c9c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013ca4:	31 ff                	xor    edi,edi
c0013ca6:	83 ec 0c             	sub    esp,0xc
c0013ca9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013cab:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013caf:	52                   	push   edx
c0013cb0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013cb3:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013cb6:	57                   	push   edi
c0013cb7:	56                   	push   esi
c0013cb8:	51                   	push   ecx
c0013cb9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013cbc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013cc0:	83 c4 20             	add    esp,0x20
c0013cc3:	99                   	cdq    
c0013cc4:	83 c4 10             	add    esp,0x10
c0013cc7:	5b                   	pop    ebx
c0013cc8:	5e                   	pop    esi
c0013cc9:	5f                   	pop    edi
c0013cca:	c3                   	ret    

c0013ccb <Sys::wsbe(regs*)>:
c0013ccb:	57                   	push   edi
c0013ccc:	b9 0b 00 00 00       	mov    ecx,0xb
c0013cd1:	56                   	push   esi
c0013cd2:	be d2 45 02 c0       	mov    esi,0xc00245d2
c0013cd7:	53                   	push   ebx
c0013cd8:	83 ec 30             	sub    esp,0x30
c0013cdb:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0013cdf:	fc                   	cld    
c0013ce0:	83 ec 0c             	sub    esp,0xc
c0013ce3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013ce5:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0013ce9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013cf1:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0013cf7:	8b 06                	mov    eax,DWORD PTR [esi]
c0013cf9:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0013cfc:	57                   	push   edi
c0013cfd:	e8 96 c9 fe ff       	call   c0000698 <strlen>
c0013d02:	5a                   	pop    edx
c0013d03:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013d07:	52                   	push   edx
c0013d08:	31 d2                	xor    edx,edx
c0013d0a:	57                   	push   edi
c0013d0b:	52                   	push   edx
c0013d0c:	50                   	push   eax
c0013d0d:	56                   	push   esi
c0013d0e:	ff d3                	call   ebx
c0013d10:	83 c4 14             	add    esp,0x14
c0013d13:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0013d17:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013d1a:	e8 65 32 00 00       	call   c0016f84 <terminateTask(int)>
c0013d1f:	83 c4 40             	add    esp,0x40
c0013d22:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0013d27:	5b                   	pop    ebx
c0013d28:	31 d2                	xor    edx,edx
c0013d2a:	5e                   	pop    esi
c0013d2b:	5f                   	pop    edi
c0013d2c:	c3                   	ret    

c0013d2d <Sys::yield(regs*)>:
c0013d2d:	83 ec 0c             	sub    esp,0xc
c0013d30:	fa                   	cli    
c0013d31:	ff 05 a8 9b 02 c0    	inc    DWORD PTR ds:0xc0029ba8
c0013d37:	e8 30 29 00 00       	call   c001666c <schedule()>
c0013d3c:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c0013d41:	48                   	dec    eax
c0013d42:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c0013d47:	75 01                	jne    c0013d4a <Sys::yield(regs*)+0x1d>
c0013d49:	fb                   	sti    
c0013d4a:	8b 15 ac 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028cac
c0013d50:	83 c4 0c             	add    esp,0xc
c0013d53:	89 d0                	mov    eax,edx
c0013d55:	c1 ea 11             	shr    edx,0x11
c0013d58:	c1 e0 07             	shl    eax,0x7
c0013d5b:	25 80 30 0f 00       	and    eax,0xf3080
c0013d60:	31 d0                	xor    eax,edx
c0013d62:	31 d2                	xor    edx,edx
c0013d64:	c3                   	ret    

c0013d65 <sysCallSeekDir(regs*)>:
c0013d65:	31 c0                	xor    eax,eax
c0013d67:	31 d2                	xor    edx,edx
c0013d69:	c3                   	ret    

c0013d6a <sysCallTellDir(regs*)>:
c0013d6a:	31 c0                	xor    eax,eax
c0013d6c:	31 d2                	xor    edx,edx
c0013d6e:	c3                   	ret    

c0013d6f <sysCallVerify(regs*)>:
c0013d6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d73:	31 d2                	xor    edx,edx
c0013d75:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013d78:	c3                   	ret    

c0013d79 <sysCallGetArgc(regs*)>:
c0013d79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d7e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013d81:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0013d87:	99                   	cdq    
c0013d88:	c3                   	ret    

c0013d89 <sysFormatDisk(regs*)>:
c0013d89:	56                   	push   esi
c0013d8a:	53                   	push   ebx
c0013d8b:	53                   	push   ebx
c0013d8c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d90:	8b 1d b8 67 02 c0    	mov    ebx,DWORD PTR ds:0xc00267b8
c0013d96:	eb 25                	jmp    c0013dbd <sysFormatDisk(regs*)+0x34>
c0013d98:	83 ec 0c             	sub    esp,0xc
c0013d9b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013d9e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013da0:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013da3:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013da6:	50                   	push   eax
c0013da7:	ff 34 85 40 8c 02 c0 	push   DWORD PTR [eax*4-0x3ffd73c0]
c0013dae:	53                   	push   ebx
c0013daf:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0013db2:	83 c4 20             	add    esp,0x20
c0013db5:	83 f8 08             	cmp    eax,0x8
c0013db8:	75 12                	jne    c0013dcc <sysFormatDisk(regs*)+0x43>
c0013dba:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0013dbd:	85 db                	test   ebx,ebx
c0013dbf:	75 d7                	jne    c0013d98 <sysFormatDisk(regs*)+0xf>
c0013dc1:	59                   	pop    ecx
c0013dc2:	b8 03 00 00 00       	mov    eax,0x3
c0013dc7:	31 d2                	xor    edx,edx
c0013dc9:	5b                   	pop    ebx
c0013dca:	5e                   	pop    esi
c0013dcb:	c3                   	ret    
c0013dcc:	85 c0                	test   eax,eax
c0013dce:	74 1b                	je     c0013deb <sysFormatDisk(regs*)+0x62>
c0013dd0:	83 f8 09             	cmp    eax,0x9
c0013dd3:	74 0b                	je     c0013de0 <sysFormatDisk(regs*)+0x57>
c0013dd5:	59                   	pop    ecx
c0013dd6:	b8 02 00 00 00       	mov    eax,0x2
c0013ddb:	31 d2                	xor    edx,edx
c0013ddd:	5b                   	pop    ebx
c0013dde:	5e                   	pop    esi
c0013ddf:	c3                   	ret    
c0013de0:	59                   	pop    ecx
c0013de1:	b8 01 00 00 00       	mov    eax,0x1
c0013de6:	31 d2                	xor    edx,edx
c0013de8:	5b                   	pop    ebx
c0013de9:	5e                   	pop    esi
c0013dea:	c3                   	ret    
c0013deb:	59                   	pop    ecx
c0013dec:	31 c0                	xor    eax,eax
c0013dee:	31 d2                	xor    edx,edx
c0013df0:	5b                   	pop    ebx
c0013df1:	5e                   	pop    esi
c0013df2:	c3                   	ret    

c0013df3 <sysSetDiskVolumeLabel(regs*)>:
c0013df3:	56                   	push   esi
c0013df4:	53                   	push   ebx
c0013df5:	53                   	push   ebx
c0013df6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013dfa:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0013dfd:	83 f8 19             	cmp    eax,0x19
c0013e00:	77 2d                	ja     c0013e2f <sysSetDiskVolumeLabel(regs*)+0x3c>
c0013e02:	8b 0c 85 40 8c 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd73c0]
c0013e09:	85 c9                	test   ecx,ecx
c0013e0b:	74 22                	je     c0013e2f <sysSetDiskVolumeLabel(regs*)+0x3c>
c0013e0d:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0013e10:	85 db                	test   ebx,ebx
c0013e12:	74 1b                	je     c0013e2f <sysSetDiskVolumeLabel(regs*)+0x3c>
c0013e14:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0013e1a:	85 d2                	test   edx,edx
c0013e1c:	74 11                	je     c0013e2f <sysSetDiskVolumeLabel(regs*)+0x3c>
c0013e1e:	8b 32                	mov    esi,DWORD PTR [edx]
c0013e20:	53                   	push   ebx
c0013e21:	50                   	push   eax
c0013e22:	51                   	push   ecx
c0013e23:	52                   	push   edx
c0013e24:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0013e27:	83 c4 10             	add    esp,0x10
c0013e2a:	99                   	cdq    
c0013e2b:	59                   	pop    ecx
c0013e2c:	5b                   	pop    ebx
c0013e2d:	5e                   	pop    esi
c0013e2e:	c3                   	ret    
c0013e2f:	59                   	pop    ecx
c0013e30:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013e35:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013e3a:	5b                   	pop    ebx
c0013e3b:	5e                   	pop    esi
c0013e3c:	c3                   	ret    

c0013e3d <sysGetDiskVolumeLabel(regs*)>:
c0013e3d:	57                   	push   edi
c0013e3e:	56                   	push   esi
c0013e3f:	53                   	push   ebx
c0013e40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e44:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0013e47:	83 fa 19             	cmp    edx,0x19
c0013e4a:	77 38                	ja     c0013e84 <sysGetDiskVolumeLabel(regs*)+0x47>
c0013e4c:	8b 0c 95 40 8c 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd73c0]
c0013e53:	85 c9                	test   ecx,ecx
c0013e55:	74 2d                	je     c0013e84 <sysGetDiskVolumeLabel(regs*)+0x47>
c0013e57:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0013e5a:	85 db                	test   ebx,ebx
c0013e5c:	74 26                	je     c0013e84 <sysGetDiskVolumeLabel(regs*)+0x47>
c0013e5e:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0013e61:	85 f6                	test   esi,esi
c0013e63:	74 1f                	je     c0013e84 <sysGetDiskVolumeLabel(regs*)+0x47>
c0013e65:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0013e6b:	85 c0                	test   eax,eax
c0013e6d:	74 15                	je     c0013e84 <sysGetDiskVolumeLabel(regs*)+0x47>
c0013e6f:	83 ec 0c             	sub    esp,0xc
c0013e72:	8b 38                	mov    edi,DWORD PTR [eax]
c0013e74:	56                   	push   esi
c0013e75:	53                   	push   ebx
c0013e76:	52                   	push   edx
c0013e77:	51                   	push   ecx
c0013e78:	50                   	push   eax
c0013e79:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0013e7c:	83 c4 20             	add    esp,0x20
c0013e7f:	99                   	cdq    
c0013e80:	5b                   	pop    ebx
c0013e81:	5e                   	pop    esi
c0013e82:	5f                   	pop    edi
c0013e83:	c3                   	ret    
c0013e84:	5b                   	pop    ebx
c0013e85:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013e8a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013e8f:	5e                   	pop    esi
c0013e90:	5f                   	pop    edi
c0013e91:	c3                   	ret    

c0013e92 <sysShutdown(regs*)>:
c0013e92:	83 ec 0c             	sub    esp,0xc
c0013e95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e99:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013e9c:	85 c0                	test   eax,eax
c0013e9e:	74 18                	je     c0013eb8 <sysShutdown(regs*)+0x26>
c0013ea0:	83 f8 01             	cmp    eax,0x1
c0013ea3:	74 38                	je     c0013edd <sysShutdown(regs*)+0x4b>
c0013ea5:	83 f8 02             	cmp    eax,0x2
c0013ea8:	74 24                	je     c0013ece <sysShutdown(regs*)+0x3c>
c0013eaa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013eaf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013eb4:	83 c4 0c             	add    esp,0xc
c0013eb7:	c3                   	ret    
c0013eb8:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c0013ebd:	8b 10                	mov    edx,DWORD PTR [eax]
c0013ebf:	6a 00                	push   0x0
c0013ec1:	6a 00                	push   0x0
c0013ec3:	6a 00                	push   0x0
c0013ec5:	50                   	push   eax
c0013ec6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0013ec9:	83 c4 10             	add    esp,0x10
c0013ecc:	eb dc                	jmp    c0013eaa <sysShutdown(regs*)+0x18>
c0013ece:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c0013ed3:	8b 10                	mov    edx,DWORD PTR [eax]
c0013ed5:	6a 00                	push   0x0
c0013ed7:	6a 00                	push   0x0
c0013ed9:	6a 01                	push   0x1
c0013edb:	eb e8                	jmp    c0013ec5 <sysShutdown(regs*)+0x33>
c0013edd:	a1 c0 8c 02 c0       	mov    eax,ds:0xc0028cc0
c0013ee2:	85 c0                	test   eax,eax
c0013ee4:	74 02                	je     c0013ee8 <sysShutdown(regs*)+0x56>
c0013ee6:	ff d0                	call   eax
c0013ee8:	31 c0                	xor    eax,eax
c0013eea:	31 d2                	xor    edx,edx
c0013eec:	83 c4 0c             	add    esp,0xc
c0013eef:	c3                   	ret    

c0013ef0 <sysCallRealpath(regs*)>:
c0013ef0:	83 ec 0c             	sub    esp,0xc
c0013ef3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ef7:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0013efa:	85 d2                	test   edx,edx
c0013efc:	74 07                	je     c0013f05 <sysCallRealpath(regs*)+0x15>
c0013efe:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0013f01:	85 c0                	test   eax,eax
c0013f03:	75 0b                	jne    c0013f10 <sysCallRealpath(regs*)+0x20>
c0013f05:	b8 01 00 00 00       	mov    eax,0x1
c0013f0a:	31 d2                	xor    edx,edx
c0013f0c:	83 c4 0c             	add    esp,0xc
c0013f0f:	c3                   	ret    
c0013f10:	51                   	push   ecx
c0013f11:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013f17:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0013f1a:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0013f20:	51                   	push   ecx
c0013f21:	52                   	push   edx
c0013f22:	50                   	push   eax
c0013f23:	e8 12 91 ff ff       	call   c000d03a <Fs::standardiseFiles(char*, char const*, char const*)>
c0013f28:	83 c4 10             	add    esp,0x10
c0013f2b:	31 c0                	xor    eax,eax
c0013f2d:	31 d2                	xor    edx,edx
c0013f2f:	83 c4 0c             	add    esp,0xc
c0013f32:	c3                   	ret    

c0013f33 <sysCallReadDir(regs*)>:
c0013f33:	53                   	push   ebx
c0013f34:	83 ec 18             	sub    esp,0x18
c0013f37:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013f3b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0013f3e:	83 f8 02             	cmp    eax,0x2
c0013f41:	76 60                	jbe    c0013fa3 <sysCallReadDir(regs*)+0x70>
c0013f43:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0013f4a:	77 48                	ja     c0013f94 <sysCallReadDir(regs*)+0x61>
c0013f4c:	83 ec 0c             	sub    esp,0xc
c0013f4f:	50                   	push   eax
c0013f50:	e8 72 78 ff ff       	call   c000b7c7 <getFromFileDescriptor(int)>
c0013f55:	83 c4 10             	add    esp,0x10
c0013f58:	85 c0                	test   eax,eax
c0013f5a:	74 38                	je     c0013f94 <sysCallReadDir(regs*)+0x61>
c0013f5c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013f64:	83 ec 0c             	sub    esp,0xc
c0013f67:	8b 10                	mov    edx,DWORD PTR [eax]
c0013f69:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0013f6d:	51                   	push   ecx
c0013f6e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013f71:	6a 00                	push   0x0
c0013f73:	68 10 01 00 00       	push   0x110
c0013f78:	50                   	push   eax
c0013f79:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0013f7c:	83 c4 20             	add    esp,0x20
c0013f7f:	85 c0                	test   eax,eax
c0013f81:	74 29                	je     c0013fac <sysCallReadDir(regs*)+0x79>
c0013f83:	83 f8 07             	cmp    eax,0x7
c0013f86:	74 1b                	je     c0013fa3 <sysCallReadDir(regs*)+0x70>
c0013f88:	b8 02 00 00 00       	mov    eax,0x2
c0013f8d:	31 d2                	xor    edx,edx
c0013f8f:	83 c4 18             	add    esp,0x18
c0013f92:	5b                   	pop    ebx
c0013f93:	c3                   	ret    
c0013f94:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013f99:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013f9e:	83 c4 18             	add    esp,0x18
c0013fa1:	5b                   	pop    ebx
c0013fa2:	c3                   	ret    
c0013fa3:	b8 01 00 00 00       	mov    eax,0x1
c0013fa8:	31 d2                	xor    edx,edx
c0013faa:	eb e3                	jmp    c0013f8f <sysCallReadDir(regs*)+0x5c>
c0013fac:	31 c0                	xor    eax,eax
c0013fae:	31 d2                	xor    edx,edx
c0013fb0:	eb dd                	jmp    c0013f8f <sysCallReadDir(regs*)+0x5c>

c0013fb2 <sysCallIsATTY(regs*)>:
c0013fb2:	83 ec 0c             	sub    esp,0xc
c0013fb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fb9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013fbc:	83 f8 02             	cmp    eax,0x2
c0013fbf:	76 07                	jbe    c0013fc8 <sysCallIsATTY(regs*)+0x16>
c0013fc1:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0013fc6:	75 26                	jne    c0013fee <sysCallIsATTY(regs*)+0x3c>
c0013fc8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013fcd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013fd0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013fd6:	85 c0                	test   eax,eax
c0013fd8:	74 24                	je     c0013ffe <sysCallIsATTY(regs*)+0x4c>
c0013fda:	83 ec 0c             	sub    esp,0xc
c0013fdd:	8b 10                	mov    edx,DWORD PTR [eax]
c0013fdf:	50                   	push   eax
c0013fe0:	ff 12                	call   DWORD PTR [edx]
c0013fe2:	31 d2                	xor    edx,edx
c0013fe4:	0f b6 c0             	movzx  eax,al
c0013fe7:	83 c4 10             	add    esp,0x10
c0013fea:	83 c4 0c             	add    esp,0xc
c0013fed:	c3                   	ret    
c0013fee:	83 ec 0c             	sub    esp,0xc
c0013ff1:	50                   	push   eax
c0013ff2:	e8 d0 77 ff ff       	call   c000b7c7 <getFromFileDescriptor(int)>
c0013ff7:	83 c4 10             	add    esp,0x10
c0013ffa:	85 c0                	test   eax,eax
c0013ffc:	75 dc                	jne    c0013fda <sysCallIsATTY(regs*)+0x28>
c0013ffe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014003:	ba ff ff ff ff       	mov    edx,0xffffffff
c0014008:	83 c4 0c             	add    esp,0xc
c001400b:	c3                   	ret    

c001400c <sysCallSeek(regs*)>:
c001400c:	53                   	push   ebx
c001400d:	83 ec 08             	sub    esp,0x8
c0014010:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014014:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014017:	8d 50 fd             	lea    edx,[eax-0x3]
c001401a:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0014020:	77 32                	ja     c0014054 <sysCallSeek(regs*)+0x48>
c0014022:	83 ec 0c             	sub    esp,0xc
c0014025:	50                   	push   eax
c0014026:	e8 9c 77 ff ff       	call   c000b7c7 <getFromFileDescriptor(int)>
c001402b:	83 c4 0c             	add    esp,0xc
c001402e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014031:	31 db                	xor    ebx,ebx
c0014033:	53                   	push   ebx
c0014034:	51                   	push   ecx
c0014035:	50                   	push   eax
c0014036:	e8 41 93 ff ff       	call   c000d37c <File::seek(unsigned long long)>
c001403b:	83 c4 10             	add    esp,0x10
c001403e:	85 c0                	test   eax,eax
c0014040:	0f 95 c0             	setne  al
c0014043:	31 d2                	xor    edx,edx
c0014045:	0f b6 c0             	movzx  eax,al
c0014048:	f7 d8                	neg    eax
c001404a:	83 d2 00             	adc    edx,0x0
c001404d:	83 c4 08             	add    esp,0x8
c0014050:	f7 da                	neg    edx
c0014052:	5b                   	pop    ebx
c0014053:	c3                   	ret    
c0014054:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014059:	ba ff ff ff ff       	mov    edx,0xffffffff
c001405e:	83 c4 08             	add    esp,0x8
c0014061:	5b                   	pop    ebx
c0014062:	c3                   	ret    

c0014063 <sysCallTell(regs*)>:
c0014063:	53                   	push   ebx
c0014064:	83 ec 08             	sub    esp,0x8
c0014067:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001406b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001406e:	83 f8 02             	cmp    eax,0x2
c0014071:	76 4d                	jbe    c00140c0 <sysCallTell(regs*)+0x5d>
c0014073:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0014078:	76 19                	jbe    c0014093 <sysCallTell(regs*)+0x30>
c001407a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001407d:	31 d2                	xor    edx,edx
c001407f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014085:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001408c:	31 c0                	xor    eax,eax
c001408e:	83 c4 08             	add    esp,0x8
c0014091:	5b                   	pop    ebx
c0014092:	c3                   	ret    
c0014093:	83 ec 0c             	sub    esp,0xc
c0014096:	50                   	push   eax
c0014097:	e8 2b 77 ff ff       	call   c000b7c7 <getFromFileDescriptor(int)>
c001409c:	5a                   	pop    edx
c001409d:	59                   	pop    ecx
c001409e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00140a1:	50                   	push   eax
c00140a2:	e8 2b 93 ff ff       	call   c000d3d2 <File::tell(unsigned long long*)>
c00140a7:	83 c4 10             	add    esp,0x10
c00140aa:	85 c0                	test   eax,eax
c00140ac:	0f 95 c0             	setne  al
c00140af:	31 d2                	xor    edx,edx
c00140b1:	0f b6 c0             	movzx  eax,al
c00140b4:	f7 d8                	neg    eax
c00140b6:	83 d2 00             	adc    edx,0x0
c00140b9:	83 c4 08             	add    esp,0x8
c00140bc:	f7 da                	neg    edx
c00140be:	5b                   	pop    ebx
c00140bf:	c3                   	ret    
c00140c0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00140c5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00140ca:	83 c4 08             	add    esp,0x8
c00140cd:	5b                   	pop    ebx
c00140ce:	c3                   	ret    

c00140cf <sysCallSize(regs*)>:
c00140cf:	53                   	push   ebx
c00140d0:	83 ec 18             	sub    esp,0x18
c00140d3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00140d7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00140da:	83 f8 02             	cmp    eax,0x2
c00140dd:	76 53                	jbe    c0014132 <sysCallSize(regs*)+0x63>
c00140df:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00140e4:	76 19                	jbe    c00140ff <sysCallSize(regs*)+0x30>
c00140e6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00140e9:	31 d2                	xor    edx,edx
c00140eb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00140f1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00140f8:	31 c0                	xor    eax,eax
c00140fa:	83 c4 18             	add    esp,0x18
c00140fd:	5b                   	pop    ebx
c00140fe:	c3                   	ret    
c00140ff:	83 ec 0c             	sub    esp,0xc
c0014102:	50                   	push   eax
c0014103:	e8 bf 76 ff ff       	call   c000b7c7 <getFromFileDescriptor(int)>
c0014108:	83 c4 0c             	add    esp,0xc
c001410b:	8d 54 24 13          	lea    edx,[esp+0x13]
c001410f:	52                   	push   edx
c0014110:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014113:	50                   	push   eax
c0014114:	e8 51 94 ff ff       	call   c000d56a <File::stat(unsigned long long*, bool*)>
c0014119:	83 c4 10             	add    esp,0x10
c001411c:	85 c0                	test   eax,eax
c001411e:	0f 95 c0             	setne  al
c0014121:	31 d2                	xor    edx,edx
c0014123:	0f b6 c0             	movzx  eax,al
c0014126:	f7 d8                	neg    eax
c0014128:	83 d2 00             	adc    edx,0x0
c001412b:	83 c4 18             	add    esp,0x18
c001412e:	f7 da                	neg    edx
c0014130:	5b                   	pop    ebx
c0014131:	c3                   	ret    
c0014132:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014137:	ba ff ff ff ff       	mov    edx,0xffffffff
c001413c:	83 c4 18             	add    esp,0x18
c001413f:	5b                   	pop    ebx
c0014140:	c3                   	ret    

c0014141 <sysCallSizeFromFilename(regs*)>:
c0014141:	57                   	push   edi
c0014142:	56                   	push   esi
c0014143:	53                   	push   ebx
c0014144:	83 ec 20             	sub    esp,0x20
c0014147:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001414b:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001414e:	83 fb 02             	cmp    ebx,0x2
c0014151:	0f 86 88 00 00 00    	jbe    c00141df <sysCallSizeFromFilename(regs*)+0x9e>
c0014157:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001415d:	76 1b                	jbe    c001417a <sysCallSizeFromFilename(regs*)+0x39>
c001415f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0014162:	31 d2                	xor    edx,edx
c0014164:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001416a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014171:	83 c4 20             	add    esp,0x20
c0014174:	31 c0                	xor    eax,eax
c0014176:	5b                   	pop    ebx
c0014177:	5e                   	pop    esi
c0014178:	5f                   	pop    edi
c0014179:	c3                   	ret    
c001417a:	83 ec 0c             	sub    esp,0xc
c001417d:	68 14 01 00 00       	push   0x114
c0014182:	e8 e4 57 ff ff       	call   c000996b <malloc>
c0014187:	83 c4 0c             	add    esp,0xc
c001418a:	89 c7                	mov    edi,eax
c001418c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014191:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014194:	53                   	push   ebx
c0014195:	57                   	push   edi
c0014196:	e8 49 90 ff ff       	call   c000d1e4 <File::File(char const*, Process*)>
c001419b:	83 c4 0c             	add    esp,0xc
c001419e:	8d 44 24 23          	lea    eax,[esp+0x23]
c00141a2:	50                   	push   eax
c00141a3:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00141a6:	57                   	push   edi
c00141a7:	e8 be 93 ff ff       	call   c000d56a <File::stat(unsigned long long*, bool*)>
c00141ac:	83 c4 10             	add    esp,0x10
c00141af:	85 ff                	test   edi,edi
c00141b1:	74 14                	je     c00141c7 <sysCallSizeFromFilename(regs*)+0x86>
c00141b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00141b7:	8b 17                	mov    edx,DWORD PTR [edi]
c00141b9:	83 ec 0c             	sub    esp,0xc
c00141bc:	57                   	push   edi
c00141bd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00141c0:	83 c4 10             	add    esp,0x10
c00141c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00141c7:	85 c0                	test   eax,eax
c00141c9:	0f 95 c0             	setne  al
c00141cc:	31 d2                	xor    edx,edx
c00141ce:	0f b6 c0             	movzx  eax,al
c00141d1:	f7 d8                	neg    eax
c00141d3:	83 d2 00             	adc    edx,0x0
c00141d6:	83 c4 20             	add    esp,0x20
c00141d9:	f7 da                	neg    edx
c00141db:	5b                   	pop    ebx
c00141dc:	5e                   	pop    esi
c00141dd:	5f                   	pop    edi
c00141de:	c3                   	ret    
c00141df:	83 c4 20             	add    esp,0x20
c00141e2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00141e7:	5b                   	pop    ebx
c00141e8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00141ed:	5e                   	pop    esi
c00141ee:	5f                   	pop    edi
c00141ef:	c3                   	ret    

c00141f0 <sysCallClose(regs*)>:
c00141f0:	53                   	push   ebx
c00141f1:	83 ec 08             	sub    esp,0x8
c00141f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141f8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00141fb:	83 f8 02             	cmp    eax,0x2
c00141fe:	76 41                	jbe    c0014241 <sysCallClose(regs*)+0x51>
c0014200:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0014206:	83 fa 01             	cmp    edx,0x1
c0014209:	76 2d                	jbe    c0014238 <sysCallClose(regs*)+0x48>
c001420b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0014210:	77 2f                	ja     c0014241 <sysCallClose(regs*)+0x51>
c0014212:	83 ec 0c             	sub    esp,0xc
c0014215:	50                   	push   eax
c0014216:	e8 ac 75 ff ff       	call   c000b7c7 <getFromFileDescriptor(int)>
c001421b:	89 c3                	mov    ebx,eax
c001421d:	89 04 24             	mov    DWORD PTR [esp],eax
c0014220:	e8 f7 90 ff ff       	call   c000d31c <File::close()>
c0014225:	83 c4 10             	add    esp,0x10
c0014228:	85 db                	test   ebx,ebx
c001422a:	74 0c                	je     c0014238 <sysCallClose(regs*)+0x48>
c001422c:	83 ec 0c             	sub    esp,0xc
c001422f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014231:	53                   	push   ebx
c0014232:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014235:	83 c4 10             	add    esp,0x10
c0014238:	31 c0                	xor    eax,eax
c001423a:	31 d2                	xor    edx,edx
c001423c:	83 c4 08             	add    esp,0x8
c001423f:	5b                   	pop    ebx
c0014240:	c3                   	ret    
c0014241:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014246:	ba ff ff ff ff       	mov    edx,0xffffffff
c001424b:	83 c4 08             	add    esp,0x8
c001424e:	5b                   	pop    ebx
c001424f:	c3                   	ret    

c0014250 <sysCallOpenDir(regs*)>:
c0014250:	56                   	push   esi
c0014251:	53                   	push   ebx
c0014252:	53                   	push   ebx
c0014253:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014257:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001425a:	85 f6                	test   esi,esi
c001425c:	74 59                	je     c00142b7 <sysCallOpenDir(regs*)+0x67>
c001425e:	83 ec 0c             	sub    esp,0xc
c0014261:	68 14 01 00 00       	push   0x114
c0014266:	e8 00 57 ff ff       	call   c000996b <malloc>
c001426b:	83 c4 0c             	add    esp,0xc
c001426e:	89 c6                	mov    esi,eax
c0014270:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014275:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014278:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001427b:	56                   	push   esi
c001427c:	e8 c3 94 ff ff       	call   c000d744 <Directory::Directory(char const*, Process*)>
c0014281:	83 c4 10             	add    esp,0x10
c0014284:	85 f6                	test   esi,esi
c0014286:	74 2f                	je     c00142b7 <sysCallOpenDir(regs*)+0x67>
c0014288:	83 ec 0c             	sub    esp,0xc
c001428b:	56                   	push   esi
c001428c:	e8 8d 95 ff ff       	call   c000d81e <Directory::open()>
c0014291:	83 c4 10             	add    esp,0x10
c0014294:	85 c0                	test   eax,eax
c0014296:	75 1f                	jne    c00142b7 <sysCallOpenDir(regs*)+0x67>
c0014298:	83 ec 0c             	sub    esp,0xc
c001429b:	56                   	push   esi
c001429c:	e8 31 72 ff ff       	call   c000b4d2 <UnixFile::getFileDescriptor()>
c00142a1:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00142a4:	83 c4 10             	add    esp,0x10
c00142a7:	89 02                	mov    DWORD PTR [edx],eax
c00142a9:	c1 f8 1f             	sar    eax,0x1f
c00142ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00142af:	31 c0                	xor    eax,eax
c00142b1:	59                   	pop    ecx
c00142b2:	31 d2                	xor    edx,edx
c00142b4:	5b                   	pop    ebx
c00142b5:	5e                   	pop    esi
c00142b6:	c3                   	ret    
c00142b7:	59                   	pop    ecx
c00142b8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00142bd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00142c2:	5b                   	pop    ebx
c00142c3:	5e                   	pop    esi
c00142c4:	c3                   	ret    

c00142c5 <sysCallCloseDir(regs*)>:
c00142c5:	53                   	push   ebx
c00142c6:	83 ec 08             	sub    esp,0x8
c00142c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142cd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00142d0:	8d 50 fd             	lea    edx,[eax-0x3]
c00142d3:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00142d9:	77 2f                	ja     c001430a <sysCallCloseDir(regs*)+0x45>
c00142db:	83 ec 0c             	sub    esp,0xc
c00142de:	50                   	push   eax
c00142df:	e8 e3 74 ff ff       	call   c000b7c7 <getFromFileDescriptor(int)>
c00142e4:	89 c3                	mov    ebx,eax
c00142e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00142e9:	e8 8c 95 ff ff       	call   c000d87a <Directory::close()>
c00142ee:	83 c4 10             	add    esp,0x10
c00142f1:	85 db                	test   ebx,ebx
c00142f3:	74 0c                	je     c0014301 <sysCallCloseDir(regs*)+0x3c>
c00142f5:	83 ec 0c             	sub    esp,0xc
c00142f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00142fa:	53                   	push   ebx
c00142fb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00142fe:	83 c4 10             	add    esp,0x10
c0014301:	31 c0                	xor    eax,eax
c0014303:	31 d2                	xor    edx,edx
c0014305:	83 c4 08             	add    esp,0x8
c0014308:	5b                   	pop    ebx
c0014309:	c3                   	ret    
c001430a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001430f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0014314:	83 c4 08             	add    esp,0x8
c0014317:	5b                   	pop    ebx
c0014318:	c3                   	ret    

c0014319 <sysCallMakeDir(regs*)>:
c0014319:	56                   	push   esi
c001431a:	53                   	push   ebx
c001431b:	83 ec 10             	sub    esp,0x10
c001431e:	68 14 01 00 00       	push   0x114
c0014323:	e8 43 56 ff ff       	call   c000996b <malloc>
c0014328:	83 c4 0c             	add    esp,0xc
c001432b:	89 c3                	mov    ebx,eax
c001432d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014332:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014335:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014339:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001433c:	53                   	push   ebx
c001433d:	e8 02 94 ff ff       	call   c000d744 <Directory::Directory(char const*, Process*)>
c0014342:	83 c4 10             	add    esp,0x10
c0014345:	85 db                	test   ebx,ebx
c0014347:	74 32                	je     c001437b <sysCallMakeDir(regs*)+0x62>
c0014349:	83 ec 0c             	sub    esp,0xc
c001434c:	53                   	push   ebx
c001434d:	e8 ac 96 ff ff       	call   c000d9fe <Directory::create()>
c0014352:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014355:	89 c6                	mov    esi,eax
c0014357:	e8 1e 95 ff ff       	call   c000d87a <Directory::close()>
c001435c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001435e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014361:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014364:	83 c4 10             	add    esp,0x10
c0014367:	31 c0                	xor    eax,eax
c0014369:	59                   	pop    ecx
c001436a:	85 f6                	test   esi,esi
c001436c:	5b                   	pop    ebx
c001436d:	0f 95 c0             	setne  al
c0014370:	5e                   	pop    esi
c0014371:	31 d2                	xor    edx,edx
c0014373:	f7 d8                	neg    eax
c0014375:	83 d2 00             	adc    edx,0x0
c0014378:	f7 da                	neg    edx
c001437a:	c3                   	ret    
c001437b:	59                   	pop    ecx
c001437c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014381:	ba ff ff ff ff       	mov    edx,0xffffffff
c0014386:	5b                   	pop    ebx
c0014387:	5e                   	pop    esi
c0014388:	c3                   	ret    

c0014389 <sysCallWait(regs*)>:
c0014389:	83 ec 10             	sub    esp,0x10
c001438c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014390:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014393:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014396:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014399:	e8 f6 24 00 00       	call   c0016894 <waitTask(int, int*, int)>
c001439e:	83 c4 1c             	add    esp,0x1c
c00143a1:	99                   	cdq    
c00143a2:	c3                   	ret    

c00143a3 <sysCallNotImpl(regs*)>:
c00143a3:	83 ec 18             	sub    esp,0x18
c00143a6:	68 fe 45 02 c0       	push   0xc00245fe
c00143ab:	e8 57 ec ff ff       	call   c0013007 <Krnl::panic(char const*)>
c00143b0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00143b5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00143ba:	83 c4 1c             	add    esp,0x1c
c00143bd:	c3                   	ret    

c00143be <sysPanic(regs*)>:
c00143be:	83 ec 18             	sub    esp,0x18
c00143c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00143c5:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00143c8:	e8 3a ec ff ff       	call   c0013007 <Krnl::panic(char const*)>
c00143cd:	b8 01 00 00 00       	mov    eax,0x1
c00143d2:	31 d2                	xor    edx,edx
c00143d4:	83 c4 1c             	add    esp,0x1c
c00143d7:	c3                   	ret    

c00143d8 <sysCallRmdir(regs*)>:
c00143d8:	56                   	push   esi
c00143d9:	53                   	push   ebx
c00143da:	83 ec 20             	sub    esp,0x20
c00143dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00143e1:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00143e4:	68 14 01 00 00       	push   0x114
c00143e9:	e8 7d 55 ff ff       	call   c000996b <malloc>
c00143ee:	83 c4 0c             	add    esp,0xc
c00143f1:	89 c3                	mov    ebx,eax
c00143f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143f8:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00143fb:	56                   	push   esi
c00143fc:	53                   	push   ebx
c00143fd:	e8 e2 8d ff ff       	call   c000d1e4 <File::File(char const*, Process*)>
c0014402:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014405:	e8 2c 90 ff ff       	call   c000d436 <File::unlink()>
c001440a:	83 c4 10             	add    esp,0x10
c001440d:	85 db                	test   ebx,ebx
c001440f:	74 14                	je     c0014425 <sysCallRmdir(regs*)+0x4d>
c0014411:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014415:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014417:	83 ec 0c             	sub    esp,0xc
c001441a:	53                   	push   ebx
c001441b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001441e:	83 c4 10             	add    esp,0x10
c0014421:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014425:	85 c0                	test   eax,eax
c0014427:	0f 95 c0             	setne  al
c001442a:	31 d2                	xor    edx,edx
c001442c:	0f b6 c0             	movzx  eax,al
c001442f:	f7 d8                	neg    eax
c0014431:	83 d2 00             	adc    edx,0x0
c0014434:	83 c4 14             	add    esp,0x14
c0014437:	f7 da                	neg    edx
c0014439:	5b                   	pop    ebx
c001443a:	5e                   	pop    esi
c001443b:	c3                   	ret    

c001443c <sysCallUnlink(regs*)>:
c001443c:	56                   	push   esi
c001443d:	53                   	push   ebx
c001443e:	83 ec 20             	sub    esp,0x20
c0014441:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014445:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0014448:	68 14 01 00 00       	push   0x114
c001444d:	e8 19 55 ff ff       	call   c000996b <malloc>
c0014452:	83 c4 0c             	add    esp,0xc
c0014455:	89 c3                	mov    ebx,eax
c0014457:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001445c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001445f:	56                   	push   esi
c0014460:	53                   	push   ebx
c0014461:	e8 7e 8d ff ff       	call   c000d1e4 <File::File(char const*, Process*)>
c0014466:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014469:	e8 c8 8f ff ff       	call   c000d436 <File::unlink()>
c001446e:	83 c4 10             	add    esp,0x10
c0014471:	85 db                	test   ebx,ebx
c0014473:	74 14                	je     c0014489 <sysCallUnlink(regs*)+0x4d>
c0014475:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014479:	8b 13                	mov    edx,DWORD PTR [ebx]
c001447b:	83 ec 0c             	sub    esp,0xc
c001447e:	53                   	push   ebx
c001447f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0014482:	83 c4 10             	add    esp,0x10
c0014485:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014489:	85 c0                	test   eax,eax
c001448b:	0f 95 c0             	setne  al
c001448e:	31 d2                	xor    edx,edx
c0014490:	0f b6 c0             	movzx  eax,al
c0014493:	f7 d8                	neg    eax
c0014495:	83 d2 00             	adc    edx,0x0
c0014498:	83 c4 14             	add    esp,0x14
c001449b:	f7 da                	neg    edx
c001449d:	5b                   	pop    ebx
c001449e:	5e                   	pop    esi
c001449f:	c3                   	ret    

c00144a0 <sysCallGetArgv(regs*)>:
c00144a0:	83 ec 0c             	sub    esp,0xc
c00144a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00144a7:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00144aa:	85 c0                	test   eax,eax
c00144ac:	78 2b                	js     c00144d9 <sysCallGetArgv(regs*)+0x39>
c00144ae:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00144b4:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00144b7:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00144bd:	7d 1a                	jge    c00144d9 <sysCallGetArgv(regs*)+0x39>
c00144bf:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00144c6:	85 c0                	test   eax,eax
c00144c8:	74 17                	je     c00144e1 <sysCallGetArgv(regs*)+0x41>
c00144ca:	83 ec 08             	sub    esp,0x8
c00144cd:	50                   	push   eax
c00144ce:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00144d1:	e8 62 c2 fe ff       	call   c0000738 <strcpy>
c00144d6:	83 c4 10             	add    esp,0x10
c00144d9:	31 c0                	xor    eax,eax
c00144db:	31 d2                	xor    edx,edx
c00144dd:	83 c4 0c             	add    esp,0xc
c00144e0:	c3                   	ret    
c00144e1:	b8 01 00 00 00       	mov    eax,0x1
c00144e6:	31 d2                	xor    edx,edx
c00144e8:	83 c4 0c             	add    esp,0xc
c00144eb:	c3                   	ret    

c00144ec <sysCallTTYName(regs*)>:
c00144ec:	56                   	push   esi
c00144ed:	53                   	push   ebx
c00144ee:	53                   	push   ebx
c00144ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00144f3:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00144f6:	85 c0                	test   eax,eax
c00144f8:	74 5f                	je     c0014559 <sysCallTTYName(regs*)+0x6d>
c00144fa:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00144fd:	83 f8 02             	cmp    eax,0x2
c0014500:	77 3e                	ja     c0014540 <sysCallTTYName(regs*)+0x54>
c0014502:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014507:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001450a:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c0014510:	85 db                	test   ebx,ebx
c0014512:	74 45                	je     c0014559 <sysCallTTYName(regs*)+0x6d>
c0014514:	83 ec 0c             	sub    esp,0xc
c0014517:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014519:	53                   	push   ebx
c001451a:	ff 10                	call   DWORD PTR [eax]
c001451c:	83 c4 10             	add    esp,0x10
c001451f:	84 c0                	test   al,al
c0014521:	74 41                	je     c0014564 <sysCallTTYName(regs*)+0x78>
c0014523:	83 ec 08             	sub    esp,0x8
c0014526:	81 c3 82 00 00 00    	add    ebx,0x82
c001452c:	53                   	push   ebx
c001452d:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014530:	e8 03 c2 fe ff       	call   c0000738 <strcpy>
c0014535:	83 c4 10             	add    esp,0x10
c0014538:	31 c0                	xor    eax,eax
c001453a:	59                   	pop    ecx
c001453b:	31 d2                	xor    edx,edx
c001453d:	5b                   	pop    ebx
c001453e:	5e                   	pop    esi
c001453f:	c3                   	ret    
c0014540:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0014545:	74 bb                	je     c0014502 <sysCallTTYName(regs*)+0x16>
c0014547:	83 ec 0c             	sub    esp,0xc
c001454a:	50                   	push   eax
c001454b:	e8 77 72 ff ff       	call   c000b7c7 <getFromFileDescriptor(int)>
c0014550:	83 c4 10             	add    esp,0x10
c0014553:	89 c3                	mov    ebx,eax
c0014555:	85 db                	test   ebx,ebx
c0014557:	75 bb                	jne    c0014514 <sysCallTTYName(regs*)+0x28>
c0014559:	59                   	pop    ecx
c001455a:	b8 01 00 00 00       	mov    eax,0x1
c001455f:	31 d2                	xor    edx,edx
c0014561:	5b                   	pop    ebx
c0014562:	5e                   	pop    esi
c0014563:	c3                   	ret    
c0014564:	59                   	pop    ecx
c0014565:	b8 02 00 00 00       	mov    eax,0x2
c001456a:	31 d2                	xor    edx,edx
c001456c:	5b                   	pop    ebx
c001456d:	5e                   	pop    esi
c001456e:	c3                   	ret    

c001456f <sysCallUSleep(regs*)>:
c001456f:	83 ec 1c             	sub    esp,0x1c
c0014572:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014576:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0014579:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c001457c:	6a 00                	push   0x0
c001457e:	6a 64                	push   0x64
c0014580:	52                   	push   edx
c0014581:	50                   	push   eax
c0014582:	e8 c9 d1 00 00       	call   c0021750 <__udivdi3>
c0014587:	83 c4 14             	add    esp,0x14
c001458a:	50                   	push   eax
c001458b:	e8 d4 23 00 00       	call   c0016964 <milliTenthSleep(unsigned int)>
c0014590:	31 c0                	xor    eax,eax
c0014592:	31 d2                	xor    edx,edx
c0014594:	83 c4 1c             	add    esp,0x1c
c0014597:	c3                   	ret    

c0014598 <sysCallSpawn(regs*)>:
c0014598:	56                   	push   esi
c0014599:	53                   	push   ebx
c001459a:	50                   	push   eax
c001459b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001459f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00145a2:	85 c0                	test   eax,eax
c00145a4:	75 08                	jne    c00145ae <sysCallSpawn(regs*)+0x16>
c00145a6:	59                   	pop    ecx
c00145a7:	31 c0                	xor    eax,eax
c00145a9:	31 d2                	xor    edx,edx
c00145ab:	5b                   	pop    ebx
c00145ac:	5e                   	pop    esi
c00145ad:	c3                   	ret    
c00145ae:	83 ec 0c             	sub    esp,0xc
c00145b1:	68 1f 07 00 00       	push   0x71f
c00145b6:	e8 b0 53 ff ff       	call   c000996b <malloc>
c00145bb:	83 c4 10             	add    esp,0x10
c00145be:	89 c6                	mov    esi,eax
c00145c0:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00145c3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00145c6:	85 c0                	test   eax,eax
c00145c8:	75 32                	jne    c00145fc <sysCallSpawn(regs*)+0x64>
c00145ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145cf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00145d2:	52                   	push   edx
c00145d3:	50                   	push   eax
c00145d4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00145d7:	56                   	push   esi
c00145d8:	e8 7f 1a 00 00       	call   c001605c <Process::Process(char const*, Process*, char**)>
c00145dd:	83 c4 10             	add    esp,0x10
c00145e0:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00145e7:	75 bd                	jne    c00145a6 <sysCallSpawn(regs*)+0xe>
c00145e9:	83 ec 0c             	sub    esp,0xc
c00145ec:	56                   	push   esi
c00145ed:	e8 56 1f 00 00       	call   c0016548 <Process::createUserThread()>
c00145f2:	8b 06                	mov    eax,DWORD PTR [esi]
c00145f4:	83 c4 10             	add    esp,0x10
c00145f7:	99                   	cdq    
c00145f8:	59                   	pop    ecx
c00145f9:	5b                   	pop    ebx
c00145fa:	5e                   	pop    esi
c00145fb:	c3                   	ret    
c00145fc:	31 c0                	xor    eax,eax
c00145fe:	eb d2                	jmp    c00145d2 <sysCallSpawn(regs*)+0x3a>

c0014600 <sysCallGetEnv(regs*)>:
c0014600:	57                   	push   edi
c0014601:	56                   	push   esi
c0014602:	53                   	push   ebx
c0014603:	83 ec 1c             	sub    esp,0x1c
c0014606:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001460a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001460f:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0014612:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0014615:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014618:	e8 36 e9 ff ff       	call   c0012f53 <Krnl::getProcessTotalEnvCount(Process*)>
c001461d:	83 c4 10             	add    esp,0x10
c0014620:	39 c7                	cmp    edi,eax
c0014622:	7c 14                	jl     c0014638 <sysCallGetEnv(regs*)+0x38>
c0014624:	85 f6                	test   esi,esi
c0014626:	75 0b                	jne    c0014633 <sysCallGetEnv(regs*)+0x33>
c0014628:	83 c4 10             	add    esp,0x10
c001462b:	31 c0                	xor    eax,eax
c001462d:	5b                   	pop    ebx
c001462e:	31 d2                	xor    edx,edx
c0014630:	5e                   	pop    esi
c0014631:	5f                   	pop    edi
c0014632:	c3                   	ret    
c0014633:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0014636:	eb f0                	jmp    c0014628 <sysCallGetEnv(regs*)+0x28>
c0014638:	8d 44 24 08          	lea    eax,[esp+0x8]
c001463c:	52                   	push   edx
c001463d:	57                   	push   edi
c001463e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014644:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c0014647:	50                   	push   eax
c0014648:	e8 26 e9 ff ff       	call   c0012f73 <Krnl::getProcessEnvPair(Process*, int)>
c001464d:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014650:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014654:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014658:	83 c4 0c             	add    esp,0xc
c001465b:	85 c9                	test   ecx,ecx
c001465d:	75 23                	jne    c0014682 <sysCallGetEnv(regs*)+0x82>
c001465f:	83 ec 0c             	sub    esp,0xc
c0014662:	50                   	push   eax
c0014663:	e8 30 c0 fe ff       	call   c0000698 <strlen>
c0014668:	89 3c 24             	mov    DWORD PTR [esp],edi
c001466b:	89 c3                	mov    ebx,eax
c001466d:	e8 26 c0 fe ff       	call   c0000698 <strlen>
c0014672:	83 c4 10             	add    esp,0x10
c0014675:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0014679:	83 c4 10             	add    esp,0x10
c001467c:	31 d2                	xor    edx,edx
c001467e:	5b                   	pop    ebx
c001467f:	5e                   	pop    esi
c0014680:	5f                   	pop    edi
c0014681:	c3                   	ret    
c0014682:	83 ec 08             	sub    esp,0x8
c0014685:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0014688:	50                   	push   eax
c0014689:	56                   	push   esi
c001468a:	e8 a9 c0 fe ff       	call   c0000738 <strcpy>
c001468f:	58                   	pop    eax
c0014690:	5a                   	pop    edx
c0014691:	68 18 46 02 c0       	push   0xc0024618
c0014696:	56                   	push   esi
c0014697:	e8 dc c1 fe ff       	call   c0000878 <strcat>
c001469c:	59                   	pop    ecx
c001469d:	5b                   	pop    ebx
c001469e:	57                   	push   edi
c001469f:	56                   	push   esi
c00146a0:	e8 d3 c1 fe ff       	call   c0000878 <strcat>
c00146a5:	83 c4 10             	add    esp,0x10
c00146a8:	e9 7b ff ff ff       	jmp    c0014628 <sysCallGetEnv(regs*)+0x28>

c00146ad <sysAppSettings(regs*)>:
c00146ad:	57                   	push   edi
c00146ae:	56                   	push   esi
c00146af:	56                   	push   esi
c00146b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146b4:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00146b7:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c00146bd:	25 e0 1f 00 00       	and    eax,0x1fe0
c00146c2:	66 3d c0 09          	cmp    ax,0x9c0
c00146c6:	75 2e                	jne    c00146f6 <sysAppSettings(regs*)+0x49>
c00146c8:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c00146ce:	83 e0 1f             	and    eax,0x1f
c00146d1:	3c 01                	cmp    al,0x1
c00146d3:	74 2c                	je     c0014701 <sysAppSettings(regs*)+0x54>
c00146d5:	3c 07                	cmp    al,0x7
c00146d7:	0f 84 b3 00 00 00    	je     c0014790 <sysAppSettings(regs*)+0xe3>
c00146dd:	84 c0                	test   al,al
c00146df:	0f 84 d2 00 00 00    	je     c00147b7 <sysAppSettings(regs*)+0x10a>
c00146e5:	3c 08                	cmp    al,0x8
c00146e7:	74 63                	je     c001474c <sysAppSettings(regs*)+0x9f>
c00146e9:	59                   	pop    ecx
c00146ea:	0f b6 c0             	movzx  eax,al
c00146ed:	5e                   	pop    esi
c00146ee:	05 e8 03 00 00       	add    eax,0x3e8
c00146f3:	5f                   	pop    edi
c00146f4:	99                   	cdq    
c00146f5:	c3                   	ret    
c00146f6:	b8 01 00 00 00       	mov    eax,0x1
c00146fb:	59                   	pop    ecx
c00146fc:	31 d2                	xor    edx,edx
c00146fe:	5e                   	pop    esi
c00146ff:	5f                   	pop    edi
c0014700:	c3                   	ret    
c0014701:	50                   	push   eax
c0014702:	68 00 01 00 00       	push   0x100
c0014707:	6a 00                	push   0x0
c0014709:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001470e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014711:	83 c0 0c             	add    eax,0xc
c0014714:	50                   	push   eax
c0014715:	e8 62 bf fe ff       	call   c000067c <memset>
c001471a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001471f:	b9 ff 00 00 00       	mov    ecx,0xff
c0014724:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c0014727:	83 c7 0c             	add    edi,0xc
c001472a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001472c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014731:	5a                   	pop    edx
c0014732:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014735:	59                   	pop    ecx
c0014736:	8d 50 0c             	lea    edx,[eax+0xc]
c0014739:	52                   	push   edx
c001473a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014740:	e8 b3 61 ff ff       	call   c000a8f8 <VgaText::setTitle(char*)>
c0014745:	83 c4 10             	add    esp,0x10
c0014748:	31 c0                	xor    eax,eax
c001474a:	eb af                	jmp    c00146fb <sysAppSettings(regs*)+0x4e>
c001474c:	83 ec 08             	sub    esp,0x8
c001474f:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0014755:	83 e0 0f             	and    eax,0xf
c0014758:	50                   	push   eax
c0014759:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001475e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014761:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014767:	e8 7c 61 ff ff       	call   c000a8e8 <VgaText::setTitleColour(VgaColour)>
c001476c:	5f                   	pop    edi
c001476d:	58                   	pop    eax
c001476e:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0014774:	c1 e8 04             	shr    eax,0x4
c0014777:	83 e0 0f             	and    eax,0xf
c001477a:	50                   	push   eax
c001477b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014780:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014783:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014789:	e8 4a 61 ff ff       	call   c000a8d8 <VgaText::setTitleTextColour(VgaColour)>
c001478e:	eb b5                	jmp    c0014745 <sysAppSettings(regs*)+0x98>
c0014790:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014795:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014798:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001479e:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c00147a4:	c0 e8 06             	shr    al,0x6
c00147a7:	83 e0 01             	and    eax,0x1
c00147aa:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c00147b0:	31 c0                	xor    eax,eax
c00147b2:	e9 44 ff ff ff       	jmp    c00146fb <sysAppSettings(regs*)+0x4e>
c00147b7:	b8 02 00 00 00       	mov    eax,0x2
c00147bc:	e9 3a ff ff ff       	jmp    c00146fb <sysAppSettings(regs*)+0x4e>

c00147c1 <sysSetFatAttrib(regs*)>:
c00147c1:	57                   	push   edi
c00147c2:	56                   	push   esi
c00147c3:	53                   	push   ebx
c00147c4:	83 ec 1c             	sub    esp,0x1c
c00147c7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00147cb:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00147ce:	68 14 01 00 00       	push   0x114
c00147d3:	e8 93 51 ff ff       	call   c000996b <malloc>
c00147d8:	83 c4 0c             	add    esp,0xc
c00147db:	89 c3                	mov    ebx,eax
c00147dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147e2:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00147e5:	57                   	push   edi
c00147e6:	53                   	push   ebx
c00147e7:	e8 f8 89 ff ff       	call   c000d1e4 <File::File(char const*, Process*)>
c00147ec:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00147ef:	83 c4 0c             	add    esp,0xc
c00147f2:	0f b6 d4             	movzx  edx,ah
c00147f5:	0f b6 c0             	movzx  eax,al
c00147f8:	52                   	push   edx
c00147f9:	50                   	push   eax
c00147fa:	53                   	push   ebx
c00147fb:	e8 d0 8c ff ff       	call   c000d4d0 <File::chfatattr(unsigned char, unsigned char)>
c0014800:	83 c4 10             	add    esp,0x10
c0014803:	85 db                	test   ebx,ebx
c0014805:	74 14                	je     c001481b <sysSetFatAttrib(regs*)+0x5a>
c0014807:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001480b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001480d:	83 ec 0c             	sub    esp,0xc
c0014810:	53                   	push   ebx
c0014811:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0014814:	83 c4 10             	add    esp,0x10
c0014817:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001481b:	85 c0                	test   eax,eax
c001481d:	0f 95 c0             	setne  al
c0014820:	31 d2                	xor    edx,edx
c0014822:	0f b6 c0             	movzx  eax,al
c0014825:	f7 d8                	neg    eax
c0014827:	83 d2 00             	adc    edx,0x0
c001482a:	83 c4 10             	add    esp,0x10
c001482d:	f7 da                	neg    edx
c001482f:	5b                   	pop    ebx
c0014830:	5e                   	pop    esi
c0014831:	5f                   	pop    edi
c0014832:	c3                   	ret    

c0014833 <sysPipe(regs*)>:
c0014833:	57                   	push   edi
c0014834:	56                   	push   esi
c0014835:	53                   	push   ebx
c0014836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001483a:	83 ec 0c             	sub    esp,0xc
c001483d:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0014840:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0014843:	6a 20                	push   0x20
c0014845:	e8 21 51 ff ff       	call   c000996b <malloc>
c001484a:	89 c3                	mov    ebx,eax
c001484c:	58                   	pop    eax
c001484d:	5a                   	pop    edx
c001484e:	68 00 50 00 00       	push   0x5000
c0014853:	53                   	push   ebx
c0014854:	e8 17 5e ff ff       	call   c000a670 <Pipe::Pipe(int)>
c0014859:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001485c:	e8 71 6c ff ff       	call   c000b4d2 <UnixFile::getFileDescriptor()>
c0014861:	89 07                	mov    DWORD PTR [edi],eax
c0014863:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014866:	e8 67 6c ff ff       	call   c000b4d2 <UnixFile::getFileDescriptor()>
c001486b:	83 c4 10             	add    esp,0x10
c001486e:	89 06                	mov    DWORD PTR [esi],eax
c0014870:	31 d2                	xor    edx,edx
c0014872:	5b                   	pop    ebx
c0014873:	31 c0                	xor    eax,eax
c0014875:	5e                   	pop    esi
c0014876:	5f                   	pop    edi
c0014877:	c3                   	ret    

c0014878 <sysGetUnixTime(regs*)>:
c0014878:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c001487d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0014883:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014887:	e9 b6 93 ff ff       	jmp    c000dc42 <Clock::timeInSecondsLocal()>

c001488c <string_ends_with(char const*, char const*)>:
c001488c:	57                   	push   edi
c001488d:	56                   	push   esi
c001488e:	53                   	push   ebx
c001488f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014893:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0014897:	83 ec 0c             	sub    esp,0xc
c001489a:	53                   	push   ebx
c001489b:	e8 f8 bd fe ff       	call   c0000698 <strlen>
c00148a0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00148a3:	89 c6                	mov    esi,eax
c00148a5:	e8 ee bd fe ff       	call   c0000698 <strlen>
c00148aa:	83 c4 10             	add    esp,0x10
c00148ad:	39 c6                	cmp    esi,eax
c00148af:	7d 06                	jge    c00148b7 <string_ends_with(char const*, char const*)+0x2b>
c00148b1:	5b                   	pop    ebx
c00148b2:	31 c0                	xor    eax,eax
c00148b4:	5e                   	pop    esi
c00148b5:	5f                   	pop    edi
c00148b6:	c3                   	ret    
c00148b7:	83 ec 08             	sub    esp,0x8
c00148ba:	29 c6                	sub    esi,eax
c00148bc:	57                   	push   edi
c00148bd:	01 f3                	add    ebx,esi
c00148bf:	53                   	push   ebx
c00148c0:	e8 ff be fe ff       	call   c00007c4 <strcmp>
c00148c5:	83 c4 10             	add    esp,0x10
c00148c8:	85 c0                	test   eax,eax
c00148ca:	5b                   	pop    ebx
c00148cb:	0f 94 c0             	sete   al
c00148ce:	5e                   	pop    esi
c00148cf:	0f b6 c0             	movzx  eax,al
c00148d2:	5f                   	pop    edi
c00148d3:	c3                   	ret    

c00148d4 <sysCallOpen(regs*)>:
c00148d4:	56                   	push   esi
c00148d5:	53                   	push   ebx
c00148d6:	81 ec 04 01 00 00    	sub    esp,0x104
c00148dc:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00148e3:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00148e6:	85 c9                	test   ecx,ecx
c00148e8:	0f 84 ad 01 00 00    	je     c0014a9b <sysCallOpen(regs*)+0x1c7>
c00148ee:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00148f1:	85 c0                	test   eax,eax
c00148f3:	0f 84 a2 01 00 00    	je     c0014a9b <sysCallOpen(regs*)+0x1c7>
c00148f9:	52                   	push   edx
c00148fa:	68 1a 46 02 c0       	push   0xc002461a
c00148ff:	50                   	push   eax
c0014900:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0014904:	56                   	push   esi
c0014905:	e8 30 87 ff ff       	call   c000d03a <Fs::standardiseFiles(char*, char const*, char const*)>
c001490a:	89 34 24             	mov    DWORD PTR [esp],esi
c001490d:	e8 86 bd fe ff       	call   c0000698 <strlen>
c0014912:	83 c4 10             	add    esp,0x10
c0014915:	48                   	dec    eax
c0014916:	74 1d                	je     c0014935 <sysCallOpen(regs*)+0x61>
c0014918:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001491b:	eb 0f                	jmp    c001492c <sysCallOpen(regs*)+0x58>
c001491d:	80 fa 3a             	cmp    dl,0x3a
c0014920:	74 0f                	je     c0014931 <sysCallOpen(regs*)+0x5d>
c0014922:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0014926:	48                   	dec    eax
c0014927:	74 0c                	je     c0014935 <sysCallOpen(regs*)+0x61>
c0014929:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001492c:	80 fa 2e             	cmp    dl,0x2e
c001492f:	75 ec                	jne    c001491d <sysCallOpen(regs*)+0x49>
c0014931:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0014935:	83 ec 08             	sub    esp,0x8
c0014938:	68 1e 46 02 c0       	push   0xc002461e
c001493d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014940:	e8 47 ff ff ff       	call   c001488c <string_ends_with(char const*, char const*)>
c0014945:	83 c4 10             	add    esp,0x10
c0014948:	85 c0                	test   eax,eax
c001494a:	74 1d                	je     c0014969 <sysCallOpen(regs*)+0x95>
c001494c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001494f:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0014955:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001495c:	81 c4 04 01 00 00    	add    esp,0x104
c0014962:	31 c0                	xor    eax,eax
c0014964:	31 d2                	xor    edx,edx
c0014966:	5b                   	pop    ebx
c0014967:	5e                   	pop    esi
c0014968:	c3                   	ret    
c0014969:	83 ec 08             	sub    esp,0x8
c001496c:	68 23 46 02 c0       	push   0xc0024623
c0014971:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014974:	e8 13 ff ff ff       	call   c001488c <string_ends_with(char const*, char const*)>
c0014979:	83 c4 10             	add    esp,0x10
c001497c:	85 c0                	test   eax,eax
c001497e:	75 cc                	jne    c001494c <sysCallOpen(regs*)+0x78>
c0014980:	83 ec 08             	sub    esp,0x8
c0014983:	68 1f 46 02 c0       	push   0xc002461f
c0014988:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001498b:	e8 34 be fe ff       	call   c00007c4 <strcmp>
c0014990:	83 c4 10             	add    esp,0x10
c0014993:	85 c0                	test   eax,eax
c0014995:	74 b5                	je     c001494c <sysCallOpen(regs*)+0x78>
c0014997:	83 ec 08             	sub    esp,0x8
c001499a:	68 1e 46 02 c0       	push   0xc002461e
c001499f:	56                   	push   esi
c00149a0:	e8 e7 fe ff ff       	call   c001488c <string_ends_with(char const*, char const*)>
c00149a5:	83 c4 10             	add    esp,0x10
c00149a8:	85 c0                	test   eax,eax
c00149aa:	75 a0                	jne    c001494c <sysCallOpen(regs*)+0x78>
c00149ac:	83 ec 08             	sub    esp,0x8
c00149af:	68 28 46 02 c0       	push   0xc0024628
c00149b4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00149b7:	e8 d0 fe ff ff       	call   c001488c <string_ends_with(char const*, char const*)>
c00149bc:	83 c4 10             	add    esp,0x10
c00149bf:	85 c0                	test   eax,eax
c00149c1:	0f 85 e7 00 00 00    	jne    c0014aae <sysCallOpen(regs*)+0x1da>
c00149c7:	83 ec 08             	sub    esp,0x8
c00149ca:	68 2d 46 02 c0       	push   0xc002462d
c00149cf:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00149d2:	e8 b5 fe ff ff       	call   c001488c <string_ends_with(char const*, char const*)>
c00149d7:	83 c4 10             	add    esp,0x10
c00149da:	85 c0                	test   eax,eax
c00149dc:	0f 85 cc 00 00 00    	jne    c0014aae <sysCallOpen(regs*)+0x1da>
c00149e2:	83 ec 08             	sub    esp,0x8
c00149e5:	68 29 46 02 c0       	push   0xc0024629
c00149ea:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00149ed:	e8 d2 bd fe ff       	call   c00007c4 <strcmp>
c00149f2:	83 c4 10             	add    esp,0x10
c00149f5:	85 c0                	test   eax,eax
c00149f7:	0f 84 b1 00 00 00    	je     c0014aae <sysCallOpen(regs*)+0x1da>
c00149fd:	83 ec 08             	sub    esp,0x8
c0014a00:	68 28 46 02 c0       	push   0xc0024628
c0014a05:	56                   	push   esi
c0014a06:	e8 81 fe ff ff       	call   c001488c <string_ends_with(char const*, char const*)>
c0014a0b:	83 c4 10             	add    esp,0x10
c0014a0e:	85 c0                	test   eax,eax
c0014a10:	0f 85 98 00 00 00    	jne    c0014aae <sysCallOpen(regs*)+0x1da>
c0014a16:	83 ec 0c             	sub    esp,0xc
c0014a19:	68 14 01 00 00       	push   0x114
c0014a1e:	e8 48 4f ff ff       	call   c000996b <malloc>
c0014a23:	83 c4 0c             	add    esp,0xc
c0014a26:	89 c6                	mov    esi,eax
c0014a28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a2d:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014a30:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014a33:	56                   	push   esi
c0014a34:	e8 ab 87 ff ff       	call   c000d1e4 <File::File(char const*, Process*)>
c0014a39:	83 c4 10             	add    esp,0x10
c0014a3c:	85 f6                	test   esi,esi
c0014a3e:	74 5b                	je     c0014a9b <sysCallOpen(regs*)+0x1c7>
c0014a40:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0014a43:	0f b6 c2             	movzx  eax,dl
c0014a46:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0014a49:	89 d0                	mov    eax,edx
c0014a4b:	83 e0 01             	and    eax,0x1
c0014a4e:	f6 c2 02             	test   dl,0x2
c0014a51:	74 03                	je     c0014a56 <sysCallOpen(regs*)+0x182>
c0014a53:	83 c8 02             	or     eax,0x2
c0014a56:	f6 c2 04             	test   dl,0x4
c0014a59:	74 03                	je     c0014a5e <sysCallOpen(regs*)+0x18a>
c0014a5b:	83 c8 04             	or     eax,0x4
c0014a5e:	f6 c2 08             	test   dl,0x8
c0014a61:	74 03                	je     c0014a66 <sysCallOpen(regs*)+0x192>
c0014a63:	83 c8 0a             	or     eax,0xa
c0014a66:	83 e2 10             	and    edx,0x10
c0014a69:	74 03                	je     c0014a6e <sysCallOpen(regs*)+0x19a>
c0014a6b:	83 c8 12             	or     eax,0x12
c0014a6e:	83 ec 08             	sub    esp,0x8
c0014a71:	50                   	push   eax
c0014a72:	56                   	push   esi
c0014a73:	e8 46 88 ff ff       	call   c000d2be <File::open(FileOpenMode)>
c0014a78:	83 c4 10             	add    esp,0x10
c0014a7b:	85 c0                	test   eax,eax
c0014a7d:	75 1c                	jne    c0014a9b <sysCallOpen(regs*)+0x1c7>
c0014a7f:	83 ec 0c             	sub    esp,0xc
c0014a82:	56                   	push   esi
c0014a83:	e8 4a 6a ff ff       	call   c000b4d2 <UnixFile::getFileDescriptor()>
c0014a88:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0014a8b:	83 c4 10             	add    esp,0x10
c0014a8e:	89 02                	mov    DWORD PTR [edx],eax
c0014a90:	c1 f8 1f             	sar    eax,0x1f
c0014a93:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014a96:	e9 c1 fe ff ff       	jmp    c001495c <sysCallOpen(regs*)+0x88>
c0014a9b:	81 c4 04 01 00 00    	add    esp,0x104
c0014aa1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014aa6:	ba ff ff ff ff       	mov    edx,0xffffffff
c0014aab:	5b                   	pop    ebx
c0014aac:	5e                   	pop    esi
c0014aad:	c3                   	ret    
c0014aae:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014ab1:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0014ab7:	e9 99 fe ff ff       	jmp    c0014955 <sysCallOpen(regs*)+0x81>

c0014abc <Sys::loadSyscalls()>:
c0014abc:	c7 05 e0 91 02 c0 2d 3d 01 c0 	mov    DWORD PTR ds:0xc00291e0,0xc0013d2d
c0014ac6:	c7 05 e4 91 02 c0 22 39 01 c0 	mov    DWORD PTR ds:0xc00291e4,0xc0013922
c0014ad0:	c7 05 e8 91 02 c0 13 3b 01 c0 	mov    DWORD PTR ds:0xc00291e8,0xc0013b13
c0014ada:	c7 05 ec 91 02 c0 63 3c 01 c0 	mov    DWORD PTR ds:0xc00291ec,0xc0013c63
c0014ae4:	c7 05 f0 91 02 c0 ab 3a 01 c0 	mov    DWORD PTR ds:0xc00291f0,0xc0013aab
c0014aee:	c7 05 f4 91 02 c0 59 39 01 c0 	mov    DWORD PTR ds:0xc00291f4,0xc0013959
c0014af8:	c7 05 f8 91 02 c0 3a 39 01 c0 	mov    DWORD PTR ds:0xc00291f8,0xc001393a
c0014b02:	c7 05 fc 91 02 c0 68 3b 01 c0 	mov    DWORD PTR ds:0xc00291fc,0xc0013b68
c0014b0c:	c7 05 04 92 02 c0 f0 41 01 c0 	mov    DWORD PTR ds:0xc0029204,0xc00141f0
c0014b16:	c7 05 00 92 02 c0 d4 48 01 c0 	mov    DWORD PTR ds:0xc0029200,0xc00148d4
c0014b20:	c7 05 08 92 02 c0 50 42 01 c0 	mov    DWORD PTR ds:0xc0029208,0xc0014250
c0014b2a:	c7 05 0c 92 02 c0 33 3f 01 c0 	mov    DWORD PTR ds:0xc002920c,0xc0013f33
c0014b34:	c7 05 10 92 02 c0 65 3d 01 c0 	mov    DWORD PTR ds:0xc0029210,0xc0013d65
c0014b3e:	c7 05 14 92 02 c0 6a 3d 01 c0 	mov    DWORD PTR ds:0xc0029214,0xc0013d6a
c0014b48:	c7 05 18 92 02 c0 19 43 01 c0 	mov    DWORD PTR ds:0xc0029218,0xc0014319
c0014b52:	c7 05 1c 92 02 c0 c5 42 01 c0 	mov    DWORD PTR ds:0xc002921c,0xc00142c5
c0014b5c:	c7 05 20 92 02 c0 0c 40 01 c0 	mov    DWORD PTR ds:0xc0029220,0xc001400c
c0014b66:	c7 05 24 92 02 c0 63 40 01 c0 	mov    DWORD PTR ds:0xc0029224,0xc0014063
c0014b70:	c7 05 28 92 02 c0 cf 40 01 c0 	mov    DWORD PTR ds:0xc0029228,0xc00140cf
c0014b7a:	c7 05 2c 92 02 c0 6f 3d 01 c0 	mov    DWORD PTR ds:0xc002922c,0xc0013d6f
c0014b84:	c7 05 30 92 02 c0 89 43 01 c0 	mov    DWORD PTR ds:0xc0029230,0xc0014389
c0014b8e:	c7 05 34 92 02 c0 a3 43 01 c0 	mov    DWORD PTR ds:0xc0029234,0xc00143a3
c0014b98:	c7 05 38 92 02 c0 a3 43 01 c0 	mov    DWORD PTR ds:0xc0029238,0xc00143a3
c0014ba2:	c7 05 3c 92 02 c0 d8 43 01 c0 	mov    DWORD PTR ds:0xc002923c,0xc00143d8
c0014bac:	c7 05 40 92 02 c0 3c 44 01 c0 	mov    DWORD PTR ds:0xc0029240,0xc001443c
c0014bb6:	c7 05 44 92 02 c0 79 3d 01 c0 	mov    DWORD PTR ds:0xc0029244,0xc0013d79
c0014bc0:	c7 05 48 92 02 c0 a0 44 01 c0 	mov    DWORD PTR ds:0xc0029248,0xc00144a0
c0014bca:	c7 05 4c 92 02 c0 f0 3e 01 c0 	mov    DWORD PTR ds:0xc002924c,0xc0013ef0
c0014bd4:	c7 05 50 92 02 c0 ec 44 01 c0 	mov    DWORD PTR ds:0xc0029250,0xc00144ec
c0014bde:	c7 05 54 92 02 c0 b2 3f 01 c0 	mov    DWORD PTR ds:0xc0029254,0xc0013fb2
c0014be8:	c7 05 58 92 02 c0 6f 45 01 c0 	mov    DWORD PTR ds:0xc0029258,0xc001456f
c0014bf2:	c7 05 5c 92 02 c0 41 41 01 c0 	mov    DWORD PTR ds:0xc002925c,0xc0014141
c0014bfc:	c7 05 60 92 02 c0 98 45 01 c0 	mov    DWORD PTR ds:0xc0029260,0xc0014598
c0014c06:	c7 05 64 92 02 c0 00 46 01 c0 	mov    DWORD PTR ds:0xc0029264,0xc0014600
c0014c10:	c7 05 68 92 02 c0 ad 46 01 c0 	mov    DWORD PTR ds:0xc0029268,0xc00146ad
c0014c1a:	c7 05 6c 92 02 c0 89 3d 01 c0 	mov    DWORD PTR ds:0xc002926c,0xc0013d89
c0014c24:	c7 05 70 92 02 c0 f3 3d 01 c0 	mov    DWORD PTR ds:0xc0029270,0xc0013df3
c0014c2e:	c7 05 74 92 02 c0 3d 3e 01 c0 	mov    DWORD PTR ds:0xc0029274,0xc0013e3d
c0014c38:	c7 05 78 92 02 c0 c1 47 01 c0 	mov    DWORD PTR ds:0xc0029278,0xc00147c1
c0014c42:	c7 05 7c 92 02 c0 be 43 01 c0 	mov    DWORD PTR ds:0xc002927c,0xc00143be
c0014c4c:	c7 05 80 92 02 c0 92 3e 01 c0 	mov    DWORD PTR ds:0xc0029280,0xc0013e92
c0014c56:	c7 05 84 92 02 c0 33 48 01 c0 	mov    DWORD PTR ds:0xc0029284,0xc0014833
c0014c60:	c7 05 88 92 02 c0 78 48 01 c0 	mov    DWORD PTR ds:0xc0029288,0xc0014878
c0014c6a:	c7 05 8c 92 02 c0 03 3a 01 c0 	mov    DWORD PTR ds:0xc002928c,0xc0013a03
c0014c74:	c7 05 90 92 02 c0 84 3b 01 c0 	mov    DWORD PTR ds:0xc0029290,0xc0013b84
c0014c7e:	c7 05 94 92 02 c0 19 3c 01 c0 	mov    DWORD PTR ds:0xc0029294,0xc0013c19
c0014c88:	c7 05 98 92 02 c0 ec 38 01 c0 	mov    DWORD PTR ds:0xc0029298,0xc00138ec
c0014c92:	c7 05 9c 92 02 c0 cb 3c 01 c0 	mov    DWORD PTR ds:0xc002929c,0xc0013ccb
c0014c9c:	c7 05 a0 92 02 c0 65 39 01 c0 	mov    DWORD PTR ds:0xc00292a0,0xc0013965
c0014ca6:	c7 05 a4 92 02 c0 7f 39 01 c0 	mov    DWORD PTR ds:0xc00292a4,0xc001397f
c0014cb0:	c3                   	ret    

c0014cb1 <Sys::systemCall(regs*, void*)>:
c0014cb1:	53                   	push   ebx
c0014cb2:	83 ec 08             	sub    esp,0x8
c0014cb5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014cb9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014cbc:	83 f8 7f             	cmp    eax,0x7f
c0014cbf:	77 16                	ja     c0014cd7 <Sys::systemCall(regs*, void*)+0x26>
c0014cc1:	8b 14 85 e0 91 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6e20]
c0014cc8:	85 d2                	test   edx,edx
c0014cca:	74 0b                	je     c0014cd7 <Sys::systemCall(regs*, void*)+0x26>
c0014ccc:	83 ec 0c             	sub    esp,0xc
c0014ccf:	53                   	push   ebx
c0014cd0:	ff d2                	call   edx
c0014cd2:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014cd5:	eb 0d                	jmp    c0014ce4 <Sys::systemCall(regs*, void*)+0x33>
c0014cd7:	52                   	push   edx
c0014cd8:	52                   	push   edx
c0014cd9:	50                   	push   eax
c0014cda:	68 32 46 02 c0       	push   0xc0024632
c0014cdf:	e8 95 7f ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0014ce4:	83 c4 10             	add    esp,0x10
c0014ce7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014cec:	31 d2                	xor    edx,edx
c0014cee:	83 c4 08             	add    esp,0x8
c0014cf1:	5b                   	pop    ebx
c0014cf2:	c3                   	ret    

c0014cf3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0014cf3:	55                   	push   ebp
c0014cf4:	57                   	push   edi
c0014cf5:	56                   	push   esi
c0014cf6:	53                   	push   ebx
c0014cf7:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0014cfd:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014d04:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c0014d0b:	85 c0                	test   eax,eax
c0014d0d:	0f 95 c1             	setne  cl
c0014d10:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0014d18:	0f 94 c2             	sete   dl
c0014d1b:	84 d1                	test   cl,dl
c0014d1d:	74 23                	je     c0014d42 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0014d1f:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c0014d25:	74 1b                	je     c0014d42 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0014d27:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014d2d:	89 da                	mov    edx,ebx
c0014d2f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0014d35:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0014d3b:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0014d42:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c0014d49:	05 ff 0f 00 00       	add    eax,0xfff
c0014d4e:	83 ec 0c             	sub    esp,0xc
c0014d51:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014d55:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c0014d5b:	c1 e8 0c             	shr    eax,0xc
c0014d5e:	89 fe                	mov    esi,edi
c0014d60:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014d64:	c1 ee 0c             	shr    esi,0xc
c0014d67:	6a 01                	push   0x1
c0014d69:	e8 af 6b ff ff       	call   c000b91d <Virt::allocateKernelVirtualPages(int)>
c0014d6e:	89 c5                	mov    ebp,eax
c0014d70:	58                   	pop    eax
c0014d71:	5a                   	pop    edx
c0014d72:	56                   	push   esi
c0014d73:	68 46 46 02 c0       	push   0xc0024646
c0014d78:	e8 fc 7e ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0014d7d:	59                   	pop    ecx
c0014d7e:	58                   	pop    eax
c0014d7f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014d83:	68 58 46 02 c0       	push   0xc0024658
c0014d88:	e8 ec 7e ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0014d8d:	83 c4 10             	add    esp,0x10
c0014d90:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c0014d96:	0f 86 31 01 00 00    	jbe    c0014ecd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c0014d9c:	c1 e6 0c             	shl    esi,0xc
c0014d9f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014da2:	8d 04 1e             	lea    eax,[esi+ebx*1]
c0014da5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014da9:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0014db0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014db3:	01 df                	add    edi,ebx
c0014db5:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c0014db8:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0014dbc:	0f 84 08 01 00 00    	je     c0014eca <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c0014dc2:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0014dc8:	76 05                	jbe    c0014dcf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c0014dca:	bf 00 10 00 00       	mov    edi,0x1000
c0014dcf:	83 ec 0c             	sub    esp,0xc
c0014dd2:	31 d2                	xor    edx,edx
c0014dd4:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014ddb:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014ddd:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014de1:	50                   	push   eax
c0014de2:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014de6:	56                   	push   esi
c0014de7:	52                   	push   edx
c0014de8:	57                   	push   edi
c0014de9:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0014df0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014df3:	83 c4 20             	add    esp,0x20
c0014df6:	85 c0                	test   eax,eax
c0014df8:	74 0a                	je     c0014e04 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c0014dfa:	53                   	push   ebx
c0014dfb:	53                   	push   ebx
c0014dfc:	50                   	push   eax
c0014dfd:	68 6a 46 02 c0       	push   0xc002466a
c0014e02:	eb 0f                	jmp    c0014e13 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c0014e04:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0014e08:	74 20                	je     c0014e2a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c0014e0a:	51                   	push   ecx
c0014e0b:	51                   	push   ecx
c0014e0c:	6a 00                	push   0x0
c0014e0e:	68 95 46 02 c0       	push   0xc0024695
c0014e13:	e8 61 7e ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0014e18:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014e1b:	e8 f1 6d ff ff       	call   c000bc11 <Virt::freeKernelVirtualPages(unsigned long)>
c0014e20:	83 c4 10             	add    esp,0x10
c0014e23:	31 c0                	xor    eax,eax
c0014e25:	e9 68 01 00 00       	jmp    c0014f92 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c0014e2a:	fa                   	cli    
c0014e2b:	ff 05 a8 9b 02 c0    	inc    DWORD PTR ds:0xc0029ba8
c0014e31:	e8 ec 51 ff ff       	call   c000a022 <Phys::allocatePage()>
c0014e36:	6a 07                	push   0x7
c0014e38:	89 c7                	mov    edi,eax
c0014e3a:	55                   	push   ebp
c0014e3b:	50                   	push   eax
c0014e3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e41:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e44:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014e4a:	e8 39 71 ff ff       	call   c000bf88 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014e4f:	83 c4 0c             	add    esp,0xc
c0014e52:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014e59:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014e5f:	6a 00                	push   0x0
c0014e61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e66:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e69:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014e6f:	e8 6e 6f ff ff       	call   c000bde2 <VAS::mapOtherVASIn(bool, VAS*)>
c0014e74:	58                   	pop    eax
c0014e75:	5a                   	pop    edx
c0014e76:	68 07 0c 00 00       	push   0xc07
c0014e7b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014e7f:	57                   	push   edi
c0014e80:	89 ef                	mov    edi,ebp
c0014e82:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014e89:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014e8f:	6a 00                	push   0x0
c0014e91:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e96:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e99:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014e9f:	e8 a2 74 ff ff       	call   c000c346 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014ea4:	b9 00 10 00 00       	mov    ecx,0x1000
c0014ea9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014eab:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c0014eb0:	83 c4 20             	add    esp,0x20
c0014eb3:	48                   	dec    eax
c0014eb4:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c0014eb9:	85 c0                	test   eax,eax
c0014ebb:	75 01                	jne    c0014ebe <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c0014ebd:	fb                   	sti    
c0014ebe:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c0014ec5:	e9 df fe ff ff       	jmp    c0014da9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c0014eca:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0014ecd:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c0014ed5:	0f 86 a9 00 00 00    	jbe    c0014f84 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0014edb:	fa                   	cli    
c0014edc:	ff 05 a8 9b 02 c0    	inc    DWORD PTR ds:0xc0029ba8
c0014ee2:	51                   	push   ecx
c0014ee3:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014eea:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014ef0:	6a 00                	push   0x0
c0014ef2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ef7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014efa:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014f00:	e8 dd 6e ff ff       	call   c000bde2 <VAS::mapOtherVASIn(bool, VAS*)>
c0014f05:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014f09:	c1 e6 0c             	shl    esi,0xc
c0014f0c:	01 de                	add    esi,ebx
c0014f0e:	83 c4 10             	add    esp,0x10
c0014f11:	39 de                	cmp    esi,ebx
c0014f13:	74 61                	je     c0014f76 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0014f15:	e8 08 51 ff ff       	call   c000a022 <Phys::allocatePage()>
c0014f1a:	6a 07                	push   0x7
c0014f1c:	89 c7                	mov    edi,eax
c0014f1e:	55                   	push   ebp
c0014f1f:	50                   	push   eax
c0014f20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f25:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014f28:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014f2e:	e8 55 70 ff ff       	call   c000bf88 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014f33:	58                   	pop    eax
c0014f34:	5a                   	pop    edx
c0014f35:	68 07 0c 00 00       	push   0xc07
c0014f3a:	53                   	push   ebx
c0014f3b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014f41:	57                   	push   edi
c0014f42:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014f49:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014f4f:	6a 00                	push   0x0
c0014f51:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f56:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014f59:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014f5f:	e8 e2 73 ff ff       	call   c000c346 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014f64:	83 c4 1c             	add    esp,0x1c
c0014f67:	68 00 10 00 00       	push   0x1000
c0014f6c:	6a 00                	push   0x0
c0014f6e:	55                   	push   ebp
c0014f6f:	e8 08 b7 fe ff       	call   c000067c <memset>
c0014f74:	eb 98                	jmp    c0014f0e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c0014f76:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c0014f7b:	48                   	dec    eax
c0014f7c:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c0014f81:	75 01                	jne    c0014f84 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0014f83:	fb                   	sti    
c0014f84:	83 ec 0c             	sub    esp,0xc
c0014f87:	55                   	push   ebp
c0014f88:	e8 84 6c ff ff       	call   c000bc11 <Virt::freeKernelVirtualPages(unsigned long)>
c0014f8d:	83 c4 10             	add    esp,0x10
c0014f90:	b0 01                	mov    al,0x1
c0014f92:	81 c4 2c 10 00 00    	add    esp,0x102c
c0014f98:	5b                   	pop    ebx
c0014f99:	5e                   	pop    esi
c0014f9a:	5f                   	pop    edi
c0014f9b:	5d                   	pop    ebp
c0014f9c:	c3                   	ret    

c0014f9d <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014f9d:	55                   	push   ebp
c0014f9e:	57                   	push   edi
c0014f9f:	56                   	push   esi
c0014fa0:	53                   	push   ebx
c0014fa1:	83 ec 48             	sub    esp,0x48
c0014fa4:	68 14 01 00 00       	push   0x114
c0014fa9:	e8 bd 49 ff ff       	call   c000996b <malloc>
c0014fae:	83 c4 0c             	add    esp,0xc
c0014fb1:	89 c6                	mov    esi,eax
c0014fb3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0014fb7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014fbb:	50                   	push   eax
c0014fbc:	e8 23 82 ff ff       	call   c000d1e4 <File::File(char const*, Process*)>
c0014fc1:	58                   	pop    eax
c0014fc2:	5a                   	pop    edx
c0014fc3:	6a 01                	push   0x1
c0014fc5:	56                   	push   esi
c0014fc6:	e8 f3 82 ff ff       	call   c000d2be <File::open(FileOpenMode)>
c0014fcb:	83 c4 10             	add    esp,0x10
c0014fce:	85 c0                	test   eax,eax
c0014fd0:	0f 85 47 01 00 00    	jne    c001511d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0014fd6:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0014fde:	83 ec 0c             	sub    esp,0xc
c0014fe1:	6a 34                	push   0x34
c0014fe3:	e8 83 49 ff ff       	call   c000996b <malloc>
c0014fe8:	89 c3                	mov    ebx,eax
c0014fea:	58                   	pop    eax
c0014feb:	8b 06                	mov    eax,DWORD PTR [esi]
c0014fed:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0014ff1:	57                   	push   edi
c0014ff2:	53                   	push   ebx
c0014ff3:	6a 00                	push   0x0
c0014ff5:	6a 34                	push   0x34
c0014ff7:	56                   	push   esi
c0014ff8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014ffb:	83 c4 20             	add    esp,0x20
c0014ffe:	85 c0                	test   eax,eax
c0015000:	0f 85 17 01 00 00    	jne    c001511d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0015006:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001500c:	0f 85 0b 01 00 00    	jne    c001511d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0015012:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015015:	85 c0                	test   eax,eax
c0015017:	0f 84 00 01 00 00    	je     c001511d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001501d:	31 d2                	xor    edx,edx
c001501f:	55                   	push   ebp
c0015020:	52                   	push   edx
c0015021:	50                   	push   eax
c0015022:	56                   	push   esi
c0015023:	e8 54 83 ff ff       	call   c000d37c <File::seek(unsigned long long)>
c0015028:	83 c4 10             	add    esp,0x10
c001502b:	85 c0                	test   eax,eax
c001502d:	0f 85 ea 00 00 00    	jne    c001511d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0015033:	83 ec 0c             	sub    esp,0xc
c0015036:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015039:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001503d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015041:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0015045:	0f af c2             	imul   eax,edx
c0015048:	50                   	push   eax
c0015049:	e8 1d 49 ff ff       	call   c000996b <malloc>
c001504e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0015050:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015054:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015057:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001505b:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001505f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0015063:	0f af c2             	imul   eax,edx
c0015066:	99                   	cdq    
c0015067:	52                   	push   edx
c0015068:	50                   	push   eax
c0015069:	56                   	push   esi
c001506a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001506d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0015070:	83 c4 20             	add    esp,0x20
c0015073:	85 c0                	test   eax,eax
c0015075:	0f 84 a2 00 00 00    	je     c001511d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001507b:	31 d2                	xor    edx,edx
c001507d:	51                   	push   ecx
c001507e:	52                   	push   edx
c001507f:	50                   	push   eax
c0015080:	56                   	push   esi
c0015081:	e8 f6 82 ff ff       	call   c000d37c <File::seek(unsigned long long)>
c0015086:	83 c4 10             	add    esp,0x10
c0015089:	85 c0                	test   eax,eax
c001508b:	0f 85 8c 00 00 00    	jne    c001511d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0015091:	83 ec 0c             	sub    esp,0xc
c0015094:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0015098:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001509c:	31 ed                	xor    ebp,ebp
c001509e:	0f af c2             	imul   eax,edx
c00150a1:	50                   	push   eax
c00150a2:	e8 c4 48 ff ff       	call   c000996b <malloc>
c00150a7:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00150a9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00150ad:	89 3c 24             	mov    DWORD PTR [esp],edi
c00150b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00150b4:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00150b8:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00150bc:	0f af c2             	imul   eax,edx
c00150bf:	99                   	cdq    
c00150c0:	52                   	push   edx
c00150c1:	50                   	push   eax
c00150c2:	56                   	push   esi
c00150c3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00150c6:	83 c4 20             	add    esp,0x20
c00150c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00150d1:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00150d5:	0f 86 80 00 00 00    	jbe    c001515b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00150db:	0f b7 fd             	movzx  edi,bp
c00150de:	c1 e7 05             	shl    edi,0x5
c00150e1:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00150e5:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00150e8:	75 6b                	jne    c0015155 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00150ea:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00150ed:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00150f1:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00150f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00150f8:	52                   	push   edx
c00150f9:	31 d2                	xor    edx,edx
c00150fb:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00150fe:	52                   	push   edx
c00150ff:	50                   	push   eax
c0015100:	56                   	push   esi
c0015101:	e8 76 82 ff ff       	call   c000d37c <File::seek(unsigned long long)>
c0015106:	83 c4 10             	add    esp,0x10
c0015109:	85 c0                	test   eax,eax
c001510b:	74 17                	je     c0015124 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001510d:	83 ec 0c             	sub    esp,0xc
c0015110:	68 c1 46 02 c0       	push   0xc00246c1
c0015115:	e8 5f 7b ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001511a:	83 c4 10             	add    esp,0x10
c001511d:	31 c0                	xor    eax,eax
c001511f:	e9 87 00 00 00       	jmp    c00151ab <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0015124:	83 ec 0c             	sub    esp,0xc
c0015127:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001512a:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001512d:	50                   	push   eax
c001512e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015132:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015136:	56                   	push   esi
c0015137:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001513b:	e8 b3 fb ff ff       	call   c0014cf3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0015140:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015144:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0015148:	83 c4 20             	add    esp,0x20
c001514b:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001514f:	73 04                	jae    c0015155 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0015151:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015155:	45                   	inc    ebp
c0015156:	e9 76 ff ff ff       	jmp    c00150d1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001515b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001515f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015163:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015167:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c001516d:	83 ec 0c             	sub    esp,0xc
c0015170:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0015176:	25 00 f0 ff ff       	and    eax,0xfffff000
c001517b:	05 00 10 00 00       	add    eax,0x1000
c0015180:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015183:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015187:	e8 ef 47 ff ff       	call   c000997b <free>
c001518c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001518f:	e8 e7 47 ff ff       	call   c000997b <free>
c0015194:	58                   	pop    eax
c0015195:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015199:	e8 dd 47 ff ff       	call   c000997b <free>
c001519e:	89 34 24             	mov    DWORD PTR [esp],esi
c00151a1:	e8 76 81 ff ff       	call   c000d31c <File::close()>
c00151a6:	83 c4 10             	add    esp,0x10
c00151a9:	b0 01                	mov    al,0x1
c00151ab:	83 c4 3c             	add    esp,0x3c
c00151ae:	5b                   	pop    ebx
c00151af:	5e                   	pop    esi
c00151b0:	5f                   	pop    edi
c00151b1:	5d                   	pop    ebp
c00151b2:	c3                   	ret    

c00151b3 <Thr::runtimeReferenceHelper()>:
c00151b3:	83 ec 18             	sub    esp,0x18
c00151b6:	68 c9 46 02 c0       	push   0xc00246c9
c00151bb:	e8 b9 7a ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c00151c0:	fa                   	cli    
c00151c1:	83 c4 10             	add    esp,0x10
c00151c4:	eb fe                	jmp    c00151c4 <Thr::runtimeReferenceHelper()+0x11>

c00151c6 <Thr::getAddressOfKernelSymbol(char const*)>:
c00151c6:	57                   	push   edi
c00151c7:	56                   	push   esi
c00151c8:	53                   	push   ebx
c00151c9:	31 db                	xor    ebx,ebx
c00151cb:	39 1d 80 9b 02 c0    	cmp    DWORD PTR ds:0xc0029b80,ebx
c00151d1:	7e 3c                	jle    c001520f <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00151d3:	8b 34 9d 00 9b 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd6500]
c00151da:	31 ff                	xor    edi,edi
c00151dc:	39 3c 9d 00 9a 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6600],edi
c00151e3:	7e 27                	jle    c001520c <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00151e5:	50                   	push   eax
c00151e6:	50                   	push   eax
c00151e7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00151eb:	8b 06                	mov    eax,DWORD PTR [esi]
c00151ed:	03 04 9d 80 9a 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6580]
c00151f4:	50                   	push   eax
c00151f5:	e8 ca b5 fe ff       	call   c00007c4 <strcmp>
c00151fa:	83 c4 10             	add    esp,0x10
c00151fd:	85 c0                	test   eax,eax
c00151ff:	75 05                	jne    c0015206 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0015201:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0015204:	eb 0b                	jmp    c0015211 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0015206:	83 c6 10             	add    esi,0x10
c0015209:	47                   	inc    edi
c001520a:	eb d0                	jmp    c00151dc <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001520c:	43                   	inc    ebx
c001520d:	eb bc                	jmp    c00151cb <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001520f:	31 c0                	xor    eax,eax
c0015211:	5b                   	pop    ebx
c0015212:	5e                   	pop    esi
c0015213:	5f                   	pop    edi
c0015214:	c3                   	ret    

c0015215 <Thr::loadKernelSymbolTable(char const*)>:
c0015215:	55                   	push   ebp
c0015216:	57                   	push   edi
c0015217:	56                   	push   esi
c0015218:	53                   	push   ebx
c0015219:	83 ec 68             	sub    esp,0x68
c001521c:	8b 35 d0 9b 02 c0    	mov    esi,DWORD PTR ds:0xc0029bd0
c0015222:	68 14 01 00 00       	push   0x114
c0015227:	e8 3f 47 ff ff       	call   c000996b <malloc>
c001522c:	83 c4 0c             	add    esp,0xc
c001522f:	89 c3                	mov    ebx,eax
c0015231:	56                   	push   esi
c0015232:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0015236:	50                   	push   eax
c0015237:	e8 a8 7f ff ff       	call   c000d1e4 <File::File(char const*, Process*)>
c001523c:	5e                   	pop    esi
c001523d:	5f                   	pop    edi
c001523e:	6a 01                	push   0x1
c0015240:	53                   	push   ebx
c0015241:	e8 78 80 ff ff       	call   c000d2be <File::open(FileOpenMode)>
c0015246:	83 c4 10             	add    esp,0x10
c0015249:	85 c0                	test   eax,eax
c001524b:	74 0a                	je     c0015257 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001524d:	83 ec 0c             	sub    esp,0xc
c0015250:	68 eb 46 02 c0       	push   0xc00246eb
c0015255:	eb 34                	jmp    c001528b <Thr::loadKernelSymbolTable(char const*)+0x76>
c0015257:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001525f:	83 ec 0c             	sub    esp,0xc
c0015262:	6a 34                	push   0x34
c0015264:	e8 02 47 ff ff       	call   c000996b <malloc>
c0015269:	59                   	pop    ecx
c001526a:	89 c7                	mov    edi,eax
c001526c:	8d 74 24 34          	lea    esi,[esp+0x34]
c0015270:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015272:	56                   	push   esi
c0015273:	57                   	push   edi
c0015274:	6a 00                	push   0x0
c0015276:	6a 34                	push   0x34
c0015278:	53                   	push   ebx
c0015279:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001527c:	83 c4 20             	add    esp,0x20
c001527f:	85 c0                	test   eax,eax
c0015281:	74 17                	je     c001529a <Thr::loadKernelSymbolTable(char const*)+0x85>
c0015283:	83 ec 0c             	sub    esp,0xc
c0015286:	68 02 47 02 c0       	push   0xc0024702
c001528b:	e8 77 dd ff ff       	call   c0013007 <Krnl::panic(char const*)>
c0015290:	83 c4 10             	add    esp,0x10
c0015293:	31 c0                	xor    eax,eax
c0015295:	e9 31 02 00 00       	jmp    c00154cb <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001529a:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00152a0:	75 e1                	jne    c0015283 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00152a2:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00152a5:	85 c0                	test   eax,eax
c00152a7:	74 da                	je     c0015283 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00152a9:	52                   	push   edx
c00152aa:	31 d2                	xor    edx,edx
c00152ac:	52                   	push   edx
c00152ad:	50                   	push   eax
c00152ae:	53                   	push   ebx
c00152af:	e8 c8 80 ff ff       	call   c000d37c <File::seek(unsigned long long)>
c00152b4:	83 c4 10             	add    esp,0x10
c00152b7:	85 c0                	test   eax,eax
c00152b9:	75 c8                	jne    c0015283 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00152bb:	83 ec 0c             	sub    esp,0xc
c00152be:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00152c2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00152c6:	31 ed                	xor    ebp,ebp
c00152c8:	0f af c2             	imul   eax,edx
c00152cb:	50                   	push   eax
c00152cc:	e8 9a 46 ff ff       	call   c000996b <malloc>
c00152d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00152d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00152d7:	89 34 24             	mov    DWORD PTR [esp],esi
c00152da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00152de:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00152e2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00152e6:	0f af c2             	imul   eax,edx
c00152e9:	99                   	cdq    
c00152ea:	52                   	push   edx
c00152eb:	50                   	push   eax
c00152ec:	53                   	push   ebx
c00152ed:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00152f0:	83 c4 20             	add    esp,0x20
c00152f3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00152fb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015303:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001530b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015313:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0015317:	0f 86 aa 00 00 00    	jbe    c00153c7 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001531d:	0f b7 f5             	movzx  esi,bp
c0015320:	6b f6 28             	imul   esi,esi,0x28
c0015323:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0015327:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001532a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001532e:	50                   	push   eax
c001532f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015333:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0015337:	8b 16                	mov    edx,DWORD PTR [esi]
c0015339:	6b c0 28             	imul   eax,eax,0x28
c001533c:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0015340:	89 d0                	mov    eax,edx
c0015342:	31 d2                	xor    edx,edx
c0015344:	52                   	push   edx
c0015345:	50                   	push   eax
c0015346:	53                   	push   ebx
c0015347:	e8 30 80 ff ff       	call   c000d37c <File::seek(unsigned long long)>
c001534c:	83 c4 0c             	add    esp,0xc
c001534f:	6a 20                	push   0x20
c0015351:	6a 00                	push   0x0
c0015353:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0015357:	52                   	push   edx
c0015358:	e8 1f b3 fe ff       	call   c000067c <memset>
c001535d:	58                   	pop    eax
c001535e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015360:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0015364:	51                   	push   ecx
c0015365:	8d 54 24 40          	lea    edx,[esp+0x40]
c0015369:	52                   	push   edx
c001536a:	6a 00                	push   0x0
c001536c:	6a 1f                	push   0x1f
c001536e:	53                   	push   ebx
c001536f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015372:	83 c4 18             	add    esp,0x18
c0015375:	68 19 47 02 c0       	push   0xc0024719
c001537a:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001537e:	52                   	push   edx
c001537f:	e8 40 b4 fe ff       	call   c00007c4 <strcmp>
c0015384:	83 c4 10             	add    esp,0x10
c0015387:	85 c0                	test   eax,eax
c0015389:	75 0f                	jne    c001539a <Thr::loadKernelSymbolTable(char const*)+0x185>
c001538b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001538e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015392:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015396:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001539a:	50                   	push   eax
c001539b:	50                   	push   eax
c001539c:	68 21 47 02 c0       	push   0xc0024721
c00153a1:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00153a5:	50                   	push   eax
c00153a6:	e8 19 b4 fe ff       	call   c00007c4 <strcmp>
c00153ab:	83 c4 10             	add    esp,0x10
c00153ae:	85 c0                	test   eax,eax
c00153b0:	75 0f                	jne    c00153c1 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00153b2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00153b5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00153b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00153bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00153c1:	45                   	inc    ebp
c00153c2:	e9 4c ff ff ff       	jmp    c0015313 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00153c7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00153cc:	75 10                	jne    c00153de <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00153ce:	83 ec 0c             	sub    esp,0xc
c00153d1:	68 29 47 02 c0       	push   0xc0024729
c00153d6:	e8 2c dc ff ff       	call   c0013007 <Krnl::panic(char const*)>
c00153db:	83 c4 10             	add    esp,0x10
c00153de:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00153e3:	75 10                	jne    c00153f5 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00153e5:	83 ec 0c             	sub    esp,0xc
c00153e8:	68 29 47 02 c0       	push   0xc0024729
c00153ed:	e8 15 dc ff ff       	call   c0013007 <Krnl::panic(char const*)>
c00153f2:	83 c4 10             	add    esp,0x10
c00153f5:	31 d2                	xor    edx,edx
c00153f7:	50                   	push   eax
c00153f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00153fc:	52                   	push   edx
c00153fd:	50                   	push   eax
c00153fe:	53                   	push   ebx
c00153ff:	e8 78 7f ff ff       	call   c000d37c <File::seek(unsigned long long)>
c0015404:	5a                   	pop    edx
c0015405:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015409:	e8 5d 45 ff ff       	call   c000996b <malloc>
c001540e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015412:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015416:	31 c9                	xor    ecx,ecx
c0015418:	5e                   	pop    esi
c0015419:	8b 03                	mov    eax,DWORD PTR [ebx]
c001541b:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001541f:	55                   	push   ebp
c0015420:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015424:	51                   	push   ecx
c0015425:	52                   	push   edx
c0015426:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001542a:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001542e:	53                   	push   ebx
c001542f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015432:	83 c4 14             	add    esp,0x14
c0015435:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015439:	e8 2d 45 ff ff       	call   c000996b <malloc>
c001543e:	89 c6                	mov    esi,eax
c0015440:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015442:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015445:	56                   	push   esi
c0015446:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001544a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001544e:	51                   	push   ecx
c001544f:	52                   	push   edx
c0015450:	53                   	push   ebx
c0015451:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015454:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015458:	8b 15 80 9b 02 c0    	mov    edx,DWORD PTR ds:0xc0029b80
c001545e:	83 c4 1c             	add    esp,0x1c
c0015461:	c1 e8 04             	shr    eax,0x4
c0015464:	89 04 95 00 9a 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6600],eax
c001546b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001546f:	31 d2                	xor    edx,edx
c0015471:	52                   	push   edx
c0015472:	50                   	push   eax
c0015473:	53                   	push   ebx
c0015474:	e8 03 7f ff ff       	call   c000d37c <File::seek(unsigned long long)>
c0015479:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001547b:	31 d2                	xor    edx,edx
c001547d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015480:	56                   	push   esi
c0015481:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015485:	52                   	push   edx
c0015486:	50                   	push   eax
c0015487:	53                   	push   ebx
c0015488:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001548b:	83 c4 14             	add    esp,0x14
c001548e:	53                   	push   ebx
c001548f:	e8 88 7e ff ff       	call   c000d31c <File::close()>
c0015494:	5d                   	pop    ebp
c0015495:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015499:	e8 dd 44 ff ff       	call   c000997b <free>
c001549e:	89 3c 24             	mov    DWORD PTR [esp],edi
c00154a1:	e8 d5 44 ff ff       	call   c000997b <free>
c00154a6:	a1 80 9b 02 c0       	mov    eax,ds:0xc0029b80
c00154ab:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00154af:	8d 50 01             	lea    edx,[eax+0x1]
c00154b2:	89 0c 85 00 9b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6500],ecx
c00154b9:	89 34 85 80 9a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6580],esi
c00154c0:	89 15 80 9b 02 c0    	mov    DWORD PTR ds:0xc0029b80,edx
c00154c6:	83 c4 10             	add    esp,0x10
c00154c9:	b0 01                	mov    al,0x1
c00154cb:	83 c4 5c             	add    esp,0x5c
c00154ce:	5b                   	pop    ebx
c00154cf:	5e                   	pop    esi
c00154d0:	5f                   	pop    edi
c00154d1:	5d                   	pop    ebp
c00154d2:	c3                   	ret    

c00154d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00154d3:	55                   	push   ebp
c00154d4:	57                   	push   edi
c00154d5:	56                   	push   esi
c00154d6:	53                   	push   ebx
c00154d7:	81 ec 68 03 00 00    	sub    esp,0x368
c00154dd:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00154e4:	8b 1d d0 9b 02 c0    	mov    ebx,DWORD PTR ds:0xc0029bd0
c00154ea:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00154ee:	68 14 01 00 00       	push   0x114
c00154f3:	e8 73 44 ff ff       	call   c000996b <malloc>
c00154f8:	83 c4 0c             	add    esp,0xc
c00154fb:	89 c5                	mov    ebp,eax
c00154fd:	53                   	push   ebx
c00154fe:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0015505:	50                   	push   eax
c0015506:	e8 d9 7c ff ff       	call   c000d1e4 <File::File(char const*, Process*)>
c001550b:	5e                   	pop    esi
c001550c:	5f                   	pop    edi
c001550d:	6a 01                	push   0x1
c001550f:	55                   	push   ebp
c0015510:	e8 a9 7d ff ff       	call   c000d2be <File::open(FileOpenMode)>
c0015515:	83 c4 10             	add    esp,0x10
c0015518:	85 c0                	test   eax,eax
c001551a:	0f 85 a7 06 00 00    	jne    c0015bc7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0015520:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0015528:	83 ec 0c             	sub    esp,0xc
c001552b:	6a 34                	push   0x34
c001552d:	e8 39 44 ff ff       	call   c000996b <malloc>
c0015532:	5b                   	pop    ebx
c0015533:	89 c7                	mov    edi,eax
c0015535:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0015539:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001553c:	53                   	push   ebx
c001553d:	57                   	push   edi
c001553e:	6a 00                	push   0x0
c0015540:	6a 34                	push   0x34
c0015542:	55                   	push   ebp
c0015543:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015546:	83 c4 20             	add    esp,0x20
c0015549:	85 c0                	test   eax,eax
c001554b:	0f 85 76 06 00 00    	jne    c0015bc7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0015551:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0015557:	0f 85 6a 06 00 00    	jne    c0015bc7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001555d:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0015560:	85 c0                	test   eax,eax
c0015562:	0f 84 5f 06 00 00    	je     c0015bc7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0015568:	31 d2                	xor    edx,edx
c001556a:	51                   	push   ecx
c001556b:	52                   	push   edx
c001556c:	50                   	push   eax
c001556d:	55                   	push   ebp
c001556e:	e8 09 7e ff ff       	call   c000d37c <File::seek(unsigned long long)>
c0015573:	83 c4 10             	add    esp,0x10
c0015576:	85 c0                	test   eax,eax
c0015578:	0f 85 49 06 00 00    	jne    c0015bc7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001557e:	83 ec 0c             	sub    esp,0xc
c0015581:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0015584:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015588:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001558c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015590:	0f af c2             	imul   eax,edx
c0015593:	50                   	push   eax
c0015594:	e8 d2 43 ff ff       	call   c000996b <malloc>
c0015599:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001559c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00155a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00155a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00155a7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00155ab:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00155af:	0f af c2             	imul   eax,edx
c00155b2:	99                   	cdq    
c00155b3:	52                   	push   edx
c00155b4:	50                   	push   eax
c00155b5:	55                   	push   ebp
c00155b6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00155b9:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00155bc:	83 c4 20             	add    esp,0x20
c00155bf:	85 c0                	test   eax,eax
c00155c1:	0f 84 00 06 00 00    	je     c0015bc7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00155c7:	52                   	push   edx
c00155c8:	31 d2                	xor    edx,edx
c00155ca:	52                   	push   edx
c00155cb:	50                   	push   eax
c00155cc:	55                   	push   ebp
c00155cd:	e8 aa 7d ff ff       	call   c000d37c <File::seek(unsigned long long)>
c00155d2:	83 c4 10             	add    esp,0x10
c00155d5:	85 c0                	test   eax,eax
c00155d7:	0f 85 ea 05 00 00    	jne    c0015bc7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00155dd:	83 ec 0c             	sub    esp,0xc
c00155e0:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00155e4:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00155e8:	31 f6                	xor    esi,esi
c00155ea:	0f af c2             	imul   eax,edx
c00155ed:	50                   	push   eax
c00155ee:	e8 78 43 ff ff       	call   c000996b <malloc>
c00155f3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00155f6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00155fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00155fd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015601:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015605:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0015609:	0f af c2             	imul   eax,edx
c001560c:	99                   	cdq    
c001560d:	52                   	push   edx
c001560e:	50                   	push   eax
c001560f:	55                   	push   ebp
c0015610:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015613:	83 c4 20             	add    esp,0x20
c0015616:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001561a:	0f 86 8a 00 00 00    	jbe    c00156aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0015620:	0f b7 de             	movzx  ebx,si
c0015623:	c1 e3 05             	shl    ebx,0x5
c0015626:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001562a:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001562d:	75 75                	jne    c00156a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001562f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015632:	31 d2                	xor    edx,edx
c0015634:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015638:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001563b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001563f:	50                   	push   eax
c0015640:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0015643:	52                   	push   edx
c0015644:	50                   	push   eax
c0015645:	55                   	push   ebp
c0015646:	e8 31 7d ff ff       	call   c000d37c <File::seek(unsigned long long)>
c001564b:	83 c4 10             	add    esp,0x10
c001564e:	85 c0                	test   eax,eax
c0015650:	0f 85 71 05 00 00    	jne    c0015bc7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0015656:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001565d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015660:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0015664:	31 d2                	xor    edx,edx
c0015666:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001566a:	83 ec 0c             	sub    esp,0xc
c001566d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015671:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015678:	50                   	push   eax
c0015679:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001567d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015681:	52                   	push   edx
c0015682:	50                   	push   eax
c0015683:	55                   	push   ebp
c0015684:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015687:	83 c4 1c             	add    esp,0x1c
c001568a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001568d:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0015690:	50                   	push   eax
c0015691:	6a 00                	push   0x0
c0015693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015697:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001569b:	50                   	push   eax
c001569c:	e8 db af fe ff       	call   c000067c <memset>
c00156a1:	83 c4 10             	add    esp,0x10
c00156a4:	46                   	inc    esi
c00156a5:	e9 6c ff ff ff       	jmp    c0015616 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c00156aa:	53                   	push   ebx
c00156ab:	31 db                	xor    ebx,ebx
c00156ad:	68 00 01 00 00       	push   0x100
c00156b2:	6a 00                	push   0x0
c00156b4:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00156b8:	50                   	push   eax
c00156b9:	e8 be af fe ff       	call   c000067c <memset>
c00156be:	83 c4 0c             	add    esp,0xc
c00156c1:	68 00 01 00 00       	push   0x100
c00156c6:	6a 00                	push   0x0
c00156c8:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00156cf:	50                   	push   eax
c00156d0:	e8 a7 af fe ff       	call   c000067c <memset>
c00156d5:	83 c4 10             	add    esp,0x10
c00156d8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00156e0:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00156e8:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00156f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00156f8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015700:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0015704:	0f 86 30 01 00 00    	jbe    c001583a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001570a:	0f b7 f3             	movzx  esi,bx
c001570d:	6b f6 28             	imul   esi,esi,0x28
c0015710:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0015714:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0015717:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001571b:	52                   	push   edx
c001571c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015720:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0015724:	8b 06                	mov    eax,DWORD PTR [esi]
c0015726:	6b d2 28             	imul   edx,edx,0x28
c0015729:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001572d:	31 d2                	xor    edx,edx
c001572f:	52                   	push   edx
c0015730:	50                   	push   eax
c0015731:	55                   	push   ebp
c0015732:	e8 45 7c ff ff       	call   c000d37c <File::seek(unsigned long long)>
c0015737:	83 c4 0c             	add    esp,0xc
c001573a:	6a 20                	push   0x20
c001573c:	6a 00                	push   0x0
c001573e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015745:	51                   	push   ecx
c0015746:	e8 31 af fe ff       	call   c000067c <memset>
c001574b:	59                   	pop    ecx
c001574c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001574f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0015753:	52                   	push   edx
c0015754:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001575b:	51                   	push   ecx
c001575c:	6a 00                	push   0x0
c001575e:	6a 1f                	push   0x1f
c0015760:	55                   	push   ebp
c0015761:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015764:	83 c4 1c             	add    esp,0x1c
c0015767:	6a 09                	push   0x9
c0015769:	68 43 47 02 c0       	push   0xc0024743
c001576e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015775:	51                   	push   ecx
c0015776:	e8 fd ad fe ff       	call   c0000578 <memcmp>
c001577b:	83 c4 10             	add    esp,0x10
c001577e:	85 c0                	test   eax,eax
c0015780:	75 21                	jne    c00157a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0015782:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015786:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001578a:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001578e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015792:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015795:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001579c:	89 d0                	mov    eax,edx
c001579e:	40                   	inc    eax
c001579f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00157a3:	50                   	push   eax
c00157a4:	6a 09                	push   0x9
c00157a6:	68 4d 47 02 c0       	push   0xc002474d
c00157ab:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00157b2:	50                   	push   eax
c00157b3:	e8 c0 ad fe ff       	call   c0000578 <memcmp>
c00157b8:	83 c4 10             	add    esp,0x10
c00157bb:	85 c0                	test   eax,eax
c00157bd:	75 21                	jne    c00157e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00157bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00157c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00157c7:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00157cb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00157cf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00157d2:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00157d9:	89 d0                	mov    eax,edx
c00157db:	40                   	inc    eax
c00157dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00157e0:	50                   	push   eax
c00157e1:	50                   	push   eax
c00157e2:	68 19 47 02 c0       	push   0xc0024719
c00157e7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00157ee:	50                   	push   eax
c00157ef:	e8 d0 af fe ff       	call   c00007c4 <strcmp>
c00157f4:	83 c4 10             	add    esp,0x10
c00157f7:	85 c0                	test   eax,eax
c00157f9:	75 0f                	jne    c001580a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00157fb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00157fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015802:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015806:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001580a:	50                   	push   eax
c001580b:	50                   	push   eax
c001580c:	68 21 47 02 c0       	push   0xc0024721
c0015811:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015818:	50                   	push   eax
c0015819:	e8 a6 af fe ff       	call   c00007c4 <strcmp>
c001581e:	83 c4 10             	add    esp,0x10
c0015821:	85 c0                	test   eax,eax
c0015823:	75 0f                	jne    c0015834 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0015825:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015828:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001582c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015830:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015834:	43                   	inc    ebx
c0015835:	e9 c6 fe ff ff       	jmp    c0015700 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001583a:	31 d2                	xor    edx,edx
c001583c:	50                   	push   eax
c001583d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015841:	52                   	push   edx
c0015842:	50                   	push   eax
c0015843:	55                   	push   ebp
c0015844:	e8 33 7b ff ff       	call   c000d37c <File::seek(unsigned long long)>
c0015849:	58                   	pop    eax
c001584a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001584e:	e8 18 41 ff ff       	call   c000996b <malloc>
c0015853:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015856:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001585a:	31 d2                	xor    edx,edx
c001585c:	58                   	pop    eax
c001585d:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0015861:	53                   	push   ebx
c0015862:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0015866:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001586a:	52                   	push   edx
c001586b:	50                   	push   eax
c001586c:	55                   	push   ebp
c001586d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015870:	83 c4 14             	add    esp,0x14
c0015873:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015877:	e8 ef 40 ff ff       	call   c000996b <malloc>
c001587c:	31 d2                	xor    edx,edx
c001587e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015882:	83 c4 0c             	add    esp,0xc
c0015885:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015889:	52                   	push   edx
c001588a:	50                   	push   eax
c001588b:	55                   	push   ebp
c001588c:	e8 eb 7a ff ff       	call   c000d37c <File::seek(unsigned long long)>
c0015891:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015894:	31 d2                	xor    edx,edx
c0015896:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015899:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001589d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00158a1:	52                   	push   edx
c00158a2:	50                   	push   eax
c00158a3:	55                   	push   ebp
c00158a4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00158a7:	83 c4 20             	add    esp,0x20
c00158aa:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00158b2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00158b6:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00158ba:	0f 84 0b 03 00 00    	je     c0015bcb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c00158c0:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00158c7:	31 d2                	xor    edx,edx
c00158c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00158cd:	c1 e8 03             	shr    eax,0x3
c00158d0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00158d4:	51                   	push   ecx
c00158d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00158d9:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00158dd:	52                   	push   edx
c00158de:	50                   	push   eax
c00158df:	55                   	push   ebp
c00158e0:	e8 97 7a ff ff       	call   c000d37c <File::seek(unsigned long long)>
c00158e5:	5b                   	pop    ebx
c00158e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00158ea:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00158f1:	e8 75 40 ff ff       	call   c000996b <malloc>
c00158f6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00158f9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00158fd:	31 d2                	xor    edx,edx
c00158ff:	5e                   	pop    esi
c0015900:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015904:	50                   	push   eax
c0015905:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015909:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001590d:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0015914:	52                   	push   edx
c0015915:	50                   	push   eax
c0015916:	55                   	push   ebp
c0015917:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001591a:	83 c4 20             	add    esp,0x20
c001591d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015925:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0015929:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001592d:	0f 8d 7c 02 00 00    	jge    c0015baf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0015933:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015937:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001593b:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0015940:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0015943:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015947:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001594b:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001594f:	89 d8                	mov    eax,ebx
c0015951:	c1 e8 08             	shr    eax,0x8
c0015954:	89 c6                	mov    esi,eax
c0015956:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001595a:	c1 e6 04             	shl    esi,0x4
c001595d:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0015961:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0015964:	85 d2                	test   edx,edx
c0015966:	0f 85 bf 00 00 00    	jne    c0015a2b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001596c:	83 ec 0c             	sub    esp,0xc
c001596f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015973:	03 06                	add    eax,DWORD PTR [esi]
c0015975:	50                   	push   eax
c0015976:	e8 4b f8 ff ff       	call   c00151c6 <Thr::getAddressOfKernelSymbol(char const*)>
c001597b:	83 c4 10             	add    esp,0x10
c001597e:	89 c2                	mov    edx,eax
c0015980:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0015985:	85 c0                	test   eax,eax
c0015987:	0f 85 9e 00 00 00    	jne    c0015a2b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001598d:	83 ec 0c             	sub    esp,0xc
c0015990:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015994:	03 06                	add    eax,DWORD PTR [esi]
c0015996:	50                   	push   eax
c0015997:	e8 6c 2f ff ff       	call   c0008908 <Krnl::resolveCompatibilitySymbol(char*)>
c001599c:	83 c4 10             	add    esp,0x10
c001599f:	89 c2                	mov    edx,eax
c00159a1:	85 c0                	test   eax,eax
c00159a3:	0f 85 82 00 00 00    	jne    c0015a2b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00159a9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00159ad:	50                   	push   eax
c00159ae:	50                   	push   eax
c00159af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00159b3:	03 06                	add    eax,DWORD PTR [esi]
c00159b5:	50                   	push   eax
c00159b6:	68 57 47 02 c0       	push   0xc0024757
c00159bb:	e8 b9 72 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c00159c0:	58                   	pop    eax
c00159c1:	5a                   	pop    edx
c00159c2:	68 71 47 02 c0       	push   0xc0024771
c00159c7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00159ce:	50                   	push   eax
c00159cf:	e8 64 ad fe ff       	call   c0000738 <strcpy>
c00159d4:	59                   	pop    ecx
c00159d5:	58                   	pop    eax
c00159d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00159da:	03 06                	add    eax,DWORD PTR [esi]
c00159dc:	50                   	push   eax
c00159dd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00159e4:	50                   	push   eax
c00159e5:	e8 8e ae fe ff       	call   c0000878 <strcat>
c00159ea:	58                   	pop    eax
c00159eb:	5a                   	pop    edx
c00159ec:	68 07 48 02 c0       	push   0xc0024807
c00159f1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00159f8:	50                   	push   eax
c00159f9:	e8 7a ae fe ff       	call   c0000878 <strcat>
c00159fe:	83 c4 10             	add    esp,0x10
c0015a01:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0015a06:	0f 84 5d 01 00 00    	je     c0015b69 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0015a0c:	83 ec 0c             	sub    esp,0xc
c0015a0f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015a16:	50                   	push   eax
c0015a17:	e8 eb d5 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c0015a1c:	83 c4 10             	add    esp,0x10
c0015a1f:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0015a23:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015a27:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015a2b:	80 fb 01             	cmp    bl,0x1
c0015a2e:	0f 85 88 00 00 00    	jne    c0015abc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0015a34:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0015a3b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0015a3f:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0015a43:	01 ce                	add    esi,ecx
c0015a45:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0015a4b:	0f 94 c0             	sete   al
c0015a4e:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0015a54:	0f 94 c3             	sete   bl
c0015a57:	09 c3                	or     ebx,eax
c0015a59:	8b 06                	mov    eax,DWORD PTR [esi]
c0015a5b:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0015a60:	74 41                	je     c0015aa3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0015a62:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0015a65:	84 db                	test   bl,bl
c0015a67:	75 15                	jne    c0015a7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0015a69:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015a6d:	66 83 f8 0c          	cmp    ax,0xc
c0015a71:	76 05                	jbe    c0015a78 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0015a73:	b8 0c 00 00 00       	mov    eax,0xc
c0015a78:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0015a7c:	76 37                	jbe    c0015ab5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0015a7e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0015a82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0015a87:	0f 84 dc 00 00 00    	je     c0015b69 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0015a8d:	83 ec 0c             	sub    esp,0xc
c0015a90:	68 88 47 02 c0       	push   0xc0024788
c0015a95:	e8 6d d5 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c0015a9a:	83 c4 10             	add    esp,0x10
c0015a9d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0015aa1:	eb 12                	jmp    c0015ab5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0015aa3:	01 c1                	add    ecx,eax
c0015aa5:	84 db                	test   bl,bl
c0015aa7:	75 0c                	jne    c0015ab5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0015aa9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015aad:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0015ab1:	77 02                	ja     c0015ab5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0015ab3:	01 d1                	add    ecx,edx
c0015ab5:	89 0e                	mov    DWORD PTR [esi],ecx
c0015ab7:	e9 ea 00 00 00       	jmp    c0015ba6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0015abc:	80 fb 02             	cmp    bl,0x2
c0015abf:	75 7c                	jne    c0015b3d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0015ac1:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0015ac8:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0015acc:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0015ad0:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0015ad6:	74 20                	je     c0015af8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0015ad8:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0015ade:	74 18                	je     c0015af8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0015ae0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015ae4:	b9 0a 00 00 00       	mov    ecx,0xa
c0015ae9:	66 83 f8 0e          	cmp    ax,0xe
c0015aed:	77 03                	ja     c0015af2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0015aef:	8d 48 fc             	lea    ecx,[eax-0x4]
c0015af2:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0015af6:	76 1f                	jbe    c0015b17 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0015af8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0015afc:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0015b01:	74 66                	je     c0015b69 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0015b03:	83 ec 0c             	sub    esp,0xc
c0015b06:	68 a4 47 02 c0       	push   0xc00247a4
c0015b0b:	e8 f7 d4 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c0015b10:	83 c4 10             	add    esp,0x10
c0015b13:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015b17:	8b 06                	mov    eax,DWORD PTR [esi]
c0015b19:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0015b1e:	74 13                	je     c0015b33 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0015b20:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0015b24:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0015b2b:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0015b2f:	01 c8                	add    eax,ecx
c0015b31:	eb 04                	jmp    c0015b37 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0015b33:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0015b37:	01 c2                	add    edx,eax
c0015b39:	89 16                	mov    DWORD PTR [esi],edx
c0015b3b:	eb 69                	jmp    c0015ba6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0015b3d:	0f b6 db             	movzx  ebx,bl
c0015b40:	50                   	push   eax
c0015b41:	50                   	push   eax
c0015b42:	53                   	push   ebx
c0015b43:	68 c0 47 02 c0       	push   0xc00247c0
c0015b48:	e8 2c 71 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0015b4d:	83 c4 10             	add    esp,0x10
c0015b50:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0015b55:	74 12                	je     c0015b69 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0015b57:	83 ec 0c             	sub    esp,0xc
c0015b5a:	68 cb 47 02 c0       	push   0xc00247cb
c0015b5f:	e8 a3 d4 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c0015b64:	83 c4 10             	add    esp,0x10
c0015b67:	eb 3d                	jmp    c0015ba6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0015b69:	83 ec 0c             	sub    esp,0xc
c0015b6c:	55                   	push   ebp
c0015b6d:	e8 aa 77 ff ff       	call   c000d31c <File::close()>
c0015b72:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015b75:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015b78:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015b7b:	59                   	pop    ecx
c0015b7c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015b80:	e8 f6 3d ff ff       	call   c000997b <free>
c0015b85:	5b                   	pop    ebx
c0015b86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015b8a:	e8 ec 3d ff ff       	call   c000997b <free>
c0015b8f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015b92:	e8 e4 3d ff ff       	call   c000997b <free>
c0015b97:	5e                   	pop    esi
c0015b98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b9c:	e8 da 3d ff ff       	call   c000997b <free>
c0015ba1:	83 c4 10             	add    esp,0x10
c0015ba4:	eb 21                	jmp    c0015bc7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0015ba6:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0015baa:	e9 76 fd ff ff       	jmp    c0015925 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0015baf:	83 ec 0c             	sub    esp,0xc
c0015bb2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015bb6:	e8 c0 3d ff ff       	call   c000997b <free>
c0015bbb:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0015bbf:	83 c4 10             	add    esp,0x10
c0015bc2:	e9 eb fc ff ff       	jmp    c00158b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0015bc7:	31 c0                	xor    eax,eax
c0015bc9:	eb 33                	jmp    c0015bfe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0015bcb:	83 ec 0c             	sub    esp,0xc
c0015bce:	55                   	push   ebp
c0015bcf:	e8 48 77 ff ff       	call   c000d31c <File::close()>
c0015bd4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015bd7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015bda:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015bdd:	58                   	pop    eax
c0015bde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015be2:	e8 94 3d ff ff       	call   c000997b <free>
c0015be7:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015bea:	e8 8c 3d ff ff       	call   c000997b <free>
c0015bef:	5a                   	pop    edx
c0015bf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015bf4:	e8 82 3d ff ff       	call   c000997b <free>
c0015bf9:	83 c4 10             	add    esp,0x10
c0015bfc:	b0 01                	mov    al,0x1
c0015bfe:	81 c4 5c 03 00 00    	add    esp,0x35c
c0015c04:	5b                   	pop    ebx
c0015c05:	5e                   	pop    esi
c0015c06:	5f                   	pop    edi
c0015c07:	5d                   	pop    ebp
c0015c08:	c3                   	ret    

c0015c09 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0015c09:	56                   	push   esi
c0015c0a:	31 d2                	xor    edx,edx
c0015c0c:	53                   	push   ebx
c0015c0d:	8b 1d e0 93 02 c0    	mov    ebx,DWORD PTR ds:0xc00293e0
c0015c13:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015c17:	39 d3                	cmp    ebx,edx
c0015c19:	7e 1b                	jle    c0015c36 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0015c1b:	8b 04 95 00 96 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6a00]
c0015c22:	39 c8                	cmp    eax,ecx
c0015c24:	77 0d                	ja     c0015c33 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0015c26:	8b 34 95 00 94 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd6c00]
c0015c2d:	01 c6                	add    esi,eax
c0015c2f:	39 ce                	cmp    esi,ecx
c0015c31:	77 05                	ja     c0015c38 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0015c33:	42                   	inc    edx
c0015c34:	eb e1                	jmp    c0015c17 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0015c36:	31 c0                	xor    eax,eax
c0015c38:	5b                   	pop    ebx
c0015c39:	5e                   	pop    esi
c0015c3a:	c3                   	ret    

c0015c3b <Thr::getDriverNameFromAddress(unsigned long)>:
c0015c3b:	53                   	push   ebx
c0015c3c:	31 c0                	xor    eax,eax
c0015c3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015c42:	8b 1d e0 93 02 c0    	mov    ebx,DWORD PTR ds:0xc00293e0
c0015c48:	39 c3                	cmp    ebx,eax
c0015c4a:	7e 22                	jle    c0015c6e <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0015c4c:	8b 14 85 00 96 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6a00]
c0015c53:	39 ca                	cmp    edx,ecx
c0015c55:	77 14                	ja     c0015c6b <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015c57:	03 14 85 00 94 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd6c00]
c0015c5e:	39 ca                	cmp    edx,ecx
c0015c60:	76 09                	jbe    c0015c6b <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015c62:	8b 04 85 00 98 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6800]
c0015c69:	eb 05                	jmp    c0015c70 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0015c6b:	40                   	inc    eax
c0015c6c:	eb da                	jmp    c0015c48 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0015c6e:	31 c0                	xor    eax,eax
c0015c70:	5b                   	pop    ebx
c0015c71:	c3                   	ret    

c0015c72 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0015c72:	53                   	push   ebx
c0015c73:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015c77:	53                   	push   ebx
c0015c78:	e8 8c ff ff ff       	call   c0015c09 <Thr::getDriverBaseFromAddress(unsigned long)>
c0015c7d:	5a                   	pop    edx
c0015c7e:	31 d2                	xor    edx,edx
c0015c80:	85 c0                	test   eax,eax
c0015c82:	74 04                	je     c0015c88 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0015c84:	89 da                	mov    edx,ebx
c0015c86:	29 c2                	sub    edx,eax
c0015c88:	89 d0                	mov    eax,edx
c0015c8a:	5b                   	pop    ebx
c0015c8b:	c3                   	ret    

c0015c8c <Thr::loadDLL(char const*, bool)>:
c0015c8c:	55                   	push   ebp
c0015c8d:	57                   	push   edi
c0015c8e:	56                   	push   esi
c0015c8f:	53                   	push   ebx
c0015c90:	81 ec 34 01 00 00    	sub    esp,0x134
c0015c96:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015c9d:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015ca4:	56                   	push   esi
c0015ca5:	68 e3 47 02 c0       	push   0xc00247e3
c0015caa:	e8 ca 6f ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0015caf:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015cb6:	e8 b0 3c ff ff       	call   c000996b <malloc>
c0015cbb:	83 c4 0c             	add    esp,0xc
c0015cbe:	89 c3                	mov    ebx,eax
c0015cc0:	ff 35 d0 9b 02 c0    	push   DWORD PTR ds:0xc0029bd0
c0015cc6:	56                   	push   esi
c0015cc7:	50                   	push   eax
c0015cc8:	e8 17 75 ff ff       	call   c000d1e4 <File::File(char const*, Process*)>
c0015ccd:	83 c4 10             	add    esp,0x10
c0015cd0:	85 db                	test   ebx,ebx
c0015cd2:	75 3c                	jne    c0015d10 <Thr::loadDLL(char const*, bool)+0x84>
c0015cd4:	89 f8                	mov    eax,edi
c0015cd6:	84 c0                	test   al,al
c0015cd8:	0f 84 d2 01 00 00    	je     c0015eb0 <Thr::loadDLL(char const*, bool)+0x224>
c0015cde:	55                   	push   ebp
c0015cdf:	55                   	push   ebp
c0015ce0:	68 f4 47 02 c0       	push   0xc00247f4
c0015ce5:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0015ce9:	55                   	push   ebp
c0015cea:	e8 49 aa fe ff       	call   c0000738 <strcpy>
c0015cef:	58                   	pop    eax
c0015cf0:	5a                   	pop    edx
c0015cf1:	56                   	push   esi
c0015cf2:	55                   	push   ebp
c0015cf3:	e8 80 ab fe ff       	call   c0000878 <strcat>
c0015cf8:	59                   	pop    ecx
c0015cf9:	58                   	pop    eax
c0015cfa:	68 07 48 02 c0       	push   0xc0024807
c0015cff:	55                   	push   ebp
c0015d00:	e8 73 ab fe ff       	call   c0000878 <strcat>
c0015d05:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015d08:	e8 fa d2 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c0015d0d:	83 c4 10             	add    esp,0x10
c0015d10:	51                   	push   ecx
c0015d11:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0015d15:	50                   	push   eax
c0015d16:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015d1a:	50                   	push   eax
c0015d1b:	53                   	push   ebx
c0015d1c:	e8 49 78 ff ff       	call   c000d56a <File::stat(unsigned long long*, bool*)>
c0015d21:	83 c4 10             	add    esp,0x10
c0015d24:	85 db                	test   ebx,ebx
c0015d26:	74 0c                	je     c0015d34 <Thr::loadDLL(char const*, bool)+0xa8>
c0015d28:	83 ec 0c             	sub    esp,0xc
c0015d2b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015d2d:	53                   	push   ebx
c0015d2e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015d31:	83 c4 10             	add    esp,0x10
c0015d34:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0015d39:	75 0a                	jne    c0015d45 <Thr::loadDLL(char const*, bool)+0xb9>
c0015d3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015d3f:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0015d43:	75 3c                	jne    c0015d81 <Thr::loadDLL(char const*, bool)+0xf5>
c0015d45:	89 f8                	mov    eax,edi
c0015d47:	84 c0                	test   al,al
c0015d49:	0f 84 49 01 00 00    	je     c0015e98 <Thr::loadDLL(char const*, bool)+0x20c>
c0015d4f:	51                   	push   ecx
c0015d50:	51                   	push   ecx
c0015d51:	68 f4 47 02 c0       	push   0xc00247f4
c0015d56:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0015d5a:	53                   	push   ebx
c0015d5b:	e8 d8 a9 fe ff       	call   c0000738 <strcpy>
c0015d60:	5d                   	pop    ebp
c0015d61:	58                   	pop    eax
c0015d62:	56                   	push   esi
c0015d63:	53                   	push   ebx
c0015d64:	e8 0f ab fe ff       	call   c0000878 <strcat>
c0015d69:	58                   	pop    eax
c0015d6a:	5a                   	pop    edx
c0015d6b:	68 07 48 02 c0       	push   0xc0024807
c0015d70:	53                   	push   ebx
c0015d71:	e8 02 ab fe ff       	call   c0000878 <strcat>
c0015d76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015d79:	e8 89 d2 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c0015d7e:	83 c4 10             	add    esp,0x10
c0015d81:	52                   	push   edx
c0015d82:	6a 03                	push   0x3
c0015d84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d88:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015d8c:	05 ff 0f 00 00       	add    eax,0xfff
c0015d91:	83 d2 00             	adc    edx,0x0
c0015d94:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015d98:	50                   	push   eax
c0015d99:	ff 35 b4 67 02 c0    	push   DWORD PTR ds:0xc00267b4
c0015d9f:	e8 e8 62 ff ff       	call   c000c08c <VAS::allocatePages(int, int)>
c0015da4:	59                   	pop    ecx
c0015da5:	89 c3                	mov    ebx,eax
c0015da7:	5d                   	pop    ebp
c0015da8:	50                   	push   eax
c0015da9:	68 da 2e 02 c0       	push   0xc0022eda
c0015dae:	e8 c6 6e ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0015db3:	89 34 24             	mov    DWORD PTR [esp],esi
c0015db6:	e8 dd a8 fe ff       	call   c0000698 <strlen>
c0015dbb:	8b 2d e0 93 02 c0    	mov    ebp,DWORD PTR ds:0xc00293e0
c0015dc1:	40                   	inc    eax
c0015dc2:	89 04 24             	mov    DWORD PTR [esp],eax
c0015dc5:	e8 a1 3b ff ff       	call   c000996b <malloc>
c0015dca:	89 04 ad 00 98 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd6800],eax
c0015dd1:	58                   	pop    eax
c0015dd2:	a1 e0 93 02 c0       	mov    eax,ds:0xc00293e0
c0015dd7:	5a                   	pop    edx
c0015dd8:	56                   	push   esi
c0015dd9:	ff 34 85 00 98 02 c0 	push   DWORD PTR [eax*4-0x3ffd6800]
c0015de0:	e8 53 a9 fe ff       	call   c0000738 <strcpy>
c0015de5:	a1 e0 93 02 c0       	mov    eax,ds:0xc00293e0
c0015dea:	8d 50 01             	lea    edx,[eax+0x1]
c0015ded:	89 1c 85 00 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a00],ebx
c0015df4:	89 15 e0 93 02 c0    	mov    DWORD PTR ds:0xc00293e0,edx
c0015dfa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015dfe:	83 c4 0c             	add    esp,0xc
c0015e01:	89 14 85 00 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6c00],edx
c0015e08:	6a 01                	push   0x1
c0015e0a:	53                   	push   ebx
c0015e0b:	56                   	push   esi
c0015e0c:	e8 c2 f6 ff ff       	call   c00154d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0015e11:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015e15:	83 c4 10             	add    esp,0x10
c0015e18:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015e1d:	0f 85 89 00 00 00    	jne    c0015eac <Thr::loadDLL(char const*, bool)+0x220>
c0015e23:	89 f8                	mov    eax,edi
c0015e25:	84 c0                	test   al,al
c0015e27:	74 73                	je     c0015e9c <Thr::loadDLL(char const*, bool)+0x210>
c0015e29:	83 ec 0c             	sub    esp,0xc
c0015e2c:	68 09 48 02 c0       	push   0xc0024809
c0015e31:	e8 d1 d1 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c0015e36:	83 c4 10             	add    esp,0x10
c0015e39:	eb 61                	jmp    c0015e9c <Thr::loadDLL(char const*, bool)+0x210>
c0015e3b:	50                   	push   eax
c0015e3c:	50                   	push   eax
c0015e3d:	89 e8                	mov    eax,ebp
c0015e3f:	c1 e0 0c             	shl    eax,0xc
c0015e42:	01 d8                	add    eax,ebx
c0015e44:	50                   	push   eax
c0015e45:	ff 35 b4 67 02 c0    	push   DWORD PTR ds:0xc00267b4
c0015e4b:	e8 a2 5d ff ff       	call   c000bbf2 <VAS::getPageTableEntry(unsigned long)>
c0015e50:	83 c4 10             	add    esp,0x10
c0015e53:	8b 00                	mov    eax,DWORD PTR [eax]
c0015e55:	a8 60                	test   al,0x60
c0015e57:	75 11                	jne    c0015e6a <Thr::loadDLL(char const*, bool)+0x1de>
c0015e59:	83 ec 0c             	sub    esp,0xc
c0015e5c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015e61:	50                   	push   eax
c0015e62:	e8 38 41 ff ff       	call   c0009f9f <Phys::freePage(unsigned long)>
c0015e67:	83 c4 10             	add    esp,0x10
c0015e6a:	45                   	inc    ebp
c0015e6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015e6f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015e73:	05 ff 0f 00 00       	add    eax,0xfff
c0015e78:	bf 00 00 00 00       	mov    edi,0x0
c0015e7d:	83 d2 00             	adc    edx,0x0
c0015e80:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015e84:	c1 ea 0c             	shr    edx,0xc
c0015e87:	39 c5                	cmp    ebp,eax
c0015e89:	89 d1                	mov    ecx,edx
c0015e8b:	89 f8                	mov    eax,edi
c0015e8d:	19 c8                	sbb    eax,ecx
c0015e8f:	72 aa                	jb     c0015e3b <Thr::loadDLL(char const*, bool)+0x1af>
c0015e91:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015e96:	75 18                	jne    c0015eb0 <Thr::loadDLL(char const*, bool)+0x224>
c0015e98:	31 db                	xor    ebx,ebx
c0015e9a:	eb 14                	jmp    c0015eb0 <Thr::loadDLL(char const*, bool)+0x224>
c0015e9c:	83 ec 0c             	sub    esp,0xc
c0015e9f:	68 28 48 02 c0       	push   0xc0024828
c0015ea4:	e8 5e d1 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c0015ea9:	83 c4 10             	add    esp,0x10
c0015eac:	31 ed                	xor    ebp,ebp
c0015eae:	eb bb                	jmp    c0015e6b <Thr::loadDLL(char const*, bool)+0x1df>
c0015eb0:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015eb6:	89 d8                	mov    eax,ebx
c0015eb8:	5b                   	pop    ebx
c0015eb9:	5e                   	pop    esi
c0015eba:	5f                   	pop    edi
c0015ebb:	5d                   	pop    ebp
c0015ebc:	c3                   	ret    

c0015ebd <Thr::executeDLL(unsigned long, void*)>:
c0015ebd:	56                   	push   esi
c0015ebe:	53                   	push   ebx
c0015ebf:	52                   	push   edx
c0015ec0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015ec4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015ec8:	85 db                	test   ebx,ebx
c0015eca:	75 10                	jne    c0015edc <Thr::executeDLL(unsigned long, void*)+0x1f>
c0015ecc:	83 ec 0c             	sub    esp,0xc
c0015ecf:	68 44 48 02 c0       	push   0xc0024844
c0015ed4:	e8 2e d1 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c0015ed9:	83 c4 10             	add    esp,0x10
c0015edc:	50                   	push   eax
c0015edd:	50                   	push   eax
c0015ede:	53                   	push   ebx
c0015edf:	68 6e 48 02 c0       	push   0xc002486e
c0015ee4:	e8 90 6d ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0015ee9:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015eed:	89 d8                	mov    eax,ebx
c0015eef:	83 c4 14             	add    esp,0x14
c0015ef2:	5b                   	pop    ebx
c0015ef3:	5e                   	pop    esi
c0015ef4:	ff e0                	jmp    eax
c0015ef6:	66 90                	xchg   ax,ax

c0015ef8 <userModeEntryPoint(void*)>:
c0015ef8:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c0015efd:	48                   	dec    eax
c0015efe:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c0015f03:	75 03                	jne    c0015f08 <userModeEntryPoint(void*)+0x10>
c0015f05:	fb                   	sti    
c0015f06:	66 90                	xchg   ax,ax
c0015f08:	fb                   	sti    
c0015f09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f0e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015f11:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0015f17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015f1b:	e9 3f a3 fe ff       	jmp    c000025f <goToUsermode>

c0015f20 <changeTSS>:
c0015f20:	83 ec 14             	sub    esp,0x14
c0015f23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f28:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015f2b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015f30:	c1 e2 15             	shl    edx,0x15
c0015f33:	29 d0                	sub    eax,edx
c0015f35:	50                   	push   eax
c0015f36:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c0015f3b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015f41:	05 7c 11 00 00       	add    eax,0x117c
c0015f46:	50                   	push   eax
c0015f47:	e8 24 53 ff ff       	call   c000b270 <TSS::setESP(unsigned long)>
c0015f4c:	83 c4 1c             	add    esp,0x1c
c0015f4f:	c3                   	ret    

c0015f50 <switchToThread(ThreadControlBlock*)>:
c0015f50:	57                   	push   edi
c0015f51:	a1 a4 9b 02 c0       	mov    eax,ds:0xc0029ba4
c0015f56:	56                   	push   esi
c0015f57:	85 c0                	test   eax,eax
c0015f59:	53                   	push   ebx
c0015f5a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015f5e:	0f 85 88 00 00 00    	jne    c0015fec <switchToThread(ThreadControlBlock*)+0x9c>
c0015f64:	8a 43 40             	mov    al,BYTE PTR [ebx+0x40]
c0015f67:	3c ff                	cmp    al,0xff
c0015f69:	74 7d                	je     c0015fe8 <switchToThread(ThreadControlBlock*)+0x98>
c0015f6b:	0f b6 d0             	movzx  edx,al
c0015f6e:	b8 00 04 00 00       	mov    eax,0x400
c0015f73:	29 d0                	sub    eax,edx
c0015f75:	d1 f8                	sar    eax,1
c0015f77:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c0015f7a:	66 90                	xchg   ax,ax
c0015f7c:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0015f7f:	ff 15 98 9c 02 c0    	call   DWORD PTR ds:0xc0029c98
c0015f85:	a3 e8 9b 02 c0       	mov    ds:0xc0029be8,eax
c0015f8a:	89 15 ec 9b 02 c0    	mov    DWORD PTR ds:0xc0029bec,edx
c0015f90:	89 c6                	mov    esi,eax
c0015f92:	89 d7                	mov    edi,edx
c0015f94:	2b 35 d8 9b 02 c0    	sub    esi,DWORD PTR ds:0xc0029bd8
c0015f9a:	a3 d8 9b 02 c0       	mov    ds:0xc0029bd8,eax
c0015f9f:	1b 3d dc 9b 02 c0    	sbb    edi,DWORD PTR ds:0xc0029bdc
c0015fa5:	89 35 e0 9b 02 c0    	mov    DWORD PTR ds:0xc0029be0,esi
c0015fab:	89 3d e4 9b 02 c0    	mov    DWORD PTR ds:0xc0029be4,edi
c0015fb1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015fb7:	89 15 dc 9b 02 c0    	mov    DWORD PTR ds:0xc0029bdc,edx
c0015fbd:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0015fc0:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0015fc3:	01 c6                	add    esi,eax
c0015fc5:	11 d7                	adc    edi,edx
c0015fc7:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0015fca:	83 ec 0c             	sub    esp,0xc
c0015fcd:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0015fd0:	53                   	push   ebx
c0015fd1:	e8 c1 a2 fe ff       	call   c0000297 <switchToThreadASM>
c0015fd6:	0f 20 c0             	mov    eax,cr0
c0015fd9:	83 c8 08             	or     eax,0x8
c0015fdc:	0f 22 c0             	mov    cr0,eax
c0015fdf:	83 c4 10             	add    esp,0x10
c0015fe2:	5b                   	pop    ebx
c0015fe3:	5e                   	pop    esi
c0015fe4:	5f                   	pop    edi
c0015fe5:	c3                   	ret    
c0015fe6:	66 90                	xchg   ax,ax
c0015fe8:	31 c0                	xor    eax,eax
c0015fea:	eb 90                	jmp    c0015f7c <switchToThread(ThreadControlBlock*)+0x2c>
c0015fec:	5b                   	pop    ebx
c0015fed:	c7 05 a0 9b 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029ba0,0x1
c0015ff7:	5e                   	pop    esi
c0015ff8:	5f                   	pop    edi
c0015ff9:	c3                   	ret    
c0015ffa:	66 90                	xchg   ax,ax

c0015ffc <Process::addArgs(char**)>:
c0015ffc:	57                   	push   edi
c0015ffd:	56                   	push   esi
c0015ffe:	53                   	push   ebx
c0015fff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016003:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016007:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0016011:	85 ff                	test   edi,edi
c0016013:	74 43                	je     c0016058 <Process::addArgs(char**)+0x5c>
c0016015:	8b 07                	mov    eax,DWORD PTR [edi]
c0016017:	85 c0                	test   eax,eax
c0016019:	74 3d                	je     c0016058 <Process::addArgs(char**)+0x5c>
c001601b:	31 db                	xor    ebx,ebx
c001601d:	8d 76 00             	lea    esi,[esi+0x0]
c0016020:	83 ec 0c             	sub    esp,0xc
c0016023:	50                   	push   eax
c0016024:	e8 6f a6 fe ff       	call   c0000698 <strlen>
c0016029:	40                   	inc    eax
c001602a:	89 04 24             	mov    DWORD PTR [esp],eax
c001602d:	e8 39 39 ff ff       	call   c000996b <malloc>
c0016032:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0016039:	5a                   	pop    edx
c001603a:	59                   	pop    ecx
c001603b:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001603e:	43                   	inc    ebx
c001603f:	50                   	push   eax
c0016040:	e8 f3 a6 fe ff       	call   c0000738 <strcpy>
c0016045:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c001604b:	83 c4 10             	add    esp,0x10
c001604e:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0016051:	85 c0                	test   eax,eax
c0016053:	75 cb                	jne    c0016020 <Process::addArgs(char**)+0x24>
c0016055:	8d 76 00             	lea    esi,[esi+0x0]
c0016058:	5b                   	pop    ebx
c0016059:	5e                   	pop    esi
c001605a:	5f                   	pop    edi
c001605b:	c3                   	ret    

c001605c <Process::Process(char const*, Process*, char**)>:
c001605c:	56                   	push   esi
c001605d:	53                   	push   ebx
c001605e:	83 ec 14             	sub    esp,0x14
c0016061:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016065:	05 0c 02 00 00       	add    eax,0x20c
c001606a:	bb 07 00 00 00       	mov    ebx,0x7
c001606f:	89 c6                	mov    esi,eax
c0016071:	8d 76 00             	lea    esi,[esi+0x0]
c0016074:	85 db                	test   ebx,ebx
c0016076:	78 14                	js     c001608c <Process::Process(char const*, Process*, char**)+0x30>
c0016078:	83 ec 0c             	sub    esp,0xc
c001607b:	56                   	push   esi
c001607c:	e8 db bf 00 00       	call   c002205c <ThreadControlBlock::ThreadControlBlock()>
c0016081:	83 c4 10             	add    esp,0x10
c0016084:	83 c6 5f             	add    esi,0x5f
c0016087:	4b                   	dec    ebx
c0016088:	eb ea                	jmp    c0016074 <Process::Process(char const*, Process*, char**)+0x18>
c001608a:	66 90                	xchg   ax,ax
c001608c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016090:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0016097:	83 ec 0c             	sub    esp,0xc
c001609a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001609e:	e8 ed cd ff ff       	call   c0012e90 <Krnl::newProcessEnv(Process*)>
c00160a3:	83 c4 10             	add    esp,0x10
c00160a6:	89 c2                	mov    edx,eax
c00160a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160ac:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00160b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160b6:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00160bf:	a1 10 5e 02 c0       	mov    eax,ds:0xc0025e10
c00160c4:	8d 50 01             	lea    edx,[eax+0x1]
c00160c7:	89 15 10 5e 02 c0    	mov    DWORD PTR ds:0xc0025e10,edx
c00160cd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00160d1:	89 02                	mov    DWORD PTR [edx],eax
c00160d3:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00160db:	83 ec 0c             	sub    esp,0xc
c00160de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00160e2:	e8 84 38 ff ff       	call   c000996b <malloc>
c00160e7:	83 c4 10             	add    esp,0x10
c00160ea:	89 c3                	mov    ebx,eax
c00160ec:	83 ec 08             	sub    esp,0x8
c00160ef:	6a 00                	push   0x0
c00160f1:	53                   	push   ebx
c00160f2:	e8 3d 63 ff ff       	call   c000c434 <VAS::VAS(bool)>
c00160f7:	83 c4 10             	add    esp,0x10
c00160fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160fe:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0016104:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016108:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0016112:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016116:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001611a:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0016120:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016124:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001612a:	85 c0                	test   eax,eax
c001612c:	74 42                	je     c0016170 <Process::Process(char const*, Process*, char**)+0x114>
c001612e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016132:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0016138:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001613e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016142:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0016148:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001614c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0016152:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016158:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001615c:	05 0c 01 00 00       	add    eax,0x10c
c0016161:	83 ec 08             	sub    esp,0x8
c0016164:	52                   	push   edx
c0016165:	50                   	push   eax
c0016166:	e8 cd a5 fe ff       	call   c0000738 <strcpy>
c001616b:	83 c4 10             	add    esp,0x10
c001616e:	eb 64                	jmp    c00161d4 <Process::Process(char const*, Process*, char**)+0x178>
c0016170:	c7 44 24 04 b4 01 00 00 	mov    DWORD PTR [esp+0x4],0x1b4
c0016178:	83 ec 0c             	sub    esp,0xc
c001617b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001617f:	e8 e7 37 ff ff       	call   c000996b <malloc>
c0016184:	83 c4 10             	add    esp,0x10
c0016187:	89 c3                	mov    ebx,eax
c0016189:	83 ec 08             	sub    esp,0x8
c001618c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016190:	53                   	push   ebx
c0016191:	e8 ec 4d ff ff       	call   c000af82 <VgaText::VgaText(char const*)>
c0016196:	83 c4 10             	add    esp,0x10
c0016199:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001619d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00161a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161a7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00161ad:	83 ec 0c             	sub    esp,0xc
c00161b0:	50                   	push   eax
c00161b1:	e8 95 45 ff ff       	call   c000a74b <addToTerminalCycle(VgaText*)>
c00161b6:	83 c4 10             	add    esp,0x10
c00161b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161bd:	05 0c 01 00 00       	add    eax,0x10c
c00161c2:	83 ec 08             	sub    esp,0x8
c00161c5:	68 8d 48 02 c0       	push   0xc002488d
c00161ca:	50                   	push   eax
c00161cb:	e8 68 a5 fe ff       	call   c0000738 <strcpy>
c00161d0:	83 c4 10             	add    esp,0x10
c00161d3:	90                   	nop
c00161d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161d8:	83 c0 0c             	add    eax,0xc
c00161db:	83 ec 08             	sub    esp,0x8
c00161de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00161e2:	50                   	push   eax
c00161e3:	e8 50 a5 fe ff       	call   c0000738 <strcpy>
c00161e8:	83 c4 10             	add    esp,0x10
c00161eb:	83 ec 08             	sub    esp,0x8
c00161ee:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00161f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00161f6:	e8 01 fe ff ff       	call   c0015ffc <Process::addArgs(char**)>
c00161fb:	83 c4 10             	add    esp,0x10
c00161fe:	83 ec 08             	sub    esp,0x8
c0016201:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016205:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016209:	e8 8f ed ff ff       	call   c0014f9d <Thr::loadProgramIntoMemory(Process*, char const*)>
c001620e:	83 c4 10             	add    esp,0x10
c0016211:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016215:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016219:	83 f0 01             	xor    eax,0x1
c001621c:	88 c2                	mov    dl,al
c001621e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016222:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0016228:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001622d:	83 ec 08             	sub    esp,0x8
c0016230:	50                   	push   eax
c0016231:	68 e4 48 02 c0       	push   0xc00248e4
c0016236:	e8 3e 6a ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001623b:	83 c4 10             	add    esp,0x10
c001623e:	90                   	nop
c001623f:	83 c4 14             	add    esp,0x14
c0016242:	5b                   	pop    ebx
c0016243:	5e                   	pop    esi
c0016244:	c3                   	ret    
c0016245:	90                   	nop
c0016246:	66 90                	xchg   ax,ax

c0016248 <Process::Process(bool, char const*, Process*, char**)>:
c0016248:	56                   	push   esi
c0016249:	53                   	push   ebx
c001624a:	83 ec 24             	sub    esp,0x24
c001624d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016251:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016255:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016259:	05 0c 02 00 00       	add    eax,0x20c
c001625e:	bb 07 00 00 00       	mov    ebx,0x7
c0016263:	89 c6                	mov    esi,eax
c0016265:	8d 76 00             	lea    esi,[esi+0x0]
c0016268:	85 db                	test   ebx,ebx
c001626a:	78 14                	js     c0016280 <Process::Process(bool, char const*, Process*, char**)+0x38>
c001626c:	83 ec 0c             	sub    esp,0xc
c001626f:	56                   	push   esi
c0016270:	e8 e7 bd 00 00       	call   c002205c <ThreadControlBlock::ThreadControlBlock()>
c0016275:	83 c4 10             	add    esp,0x10
c0016278:	83 c6 5f             	add    esi,0x5f
c001627b:	4b                   	dec    ebx
c001627c:	eb ea                	jmp    c0016268 <Process::Process(bool, char const*, Process*, char**)+0x20>
c001627e:	66 90                	xchg   ax,ax
c0016280:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016284:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001628b:	83 ec 0c             	sub    esp,0xc
c001628e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016292:	e8 f9 cb ff ff       	call   c0012e90 <Krnl::newProcessEnv(Process*)>
c0016297:	83 c4 10             	add    esp,0x10
c001629a:	89 c2                	mov    edx,eax
c001629c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00162a0:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00162a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00162aa:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00162b3:	a1 10 5e 02 c0       	mov    eax,ds:0xc0025e10
c00162b8:	8d 50 01             	lea    edx,[eax+0x1]
c00162bb:	89 15 10 5e 02 c0    	mov    DWORD PTR ds:0xc0025e10,edx
c00162c1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00162c5:	89 02                	mov    DWORD PTR [edx],eax
c00162c7:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00162cf:	83 ec 0c             	sub    esp,0xc
c00162d2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00162d6:	e8 90 36 ff ff       	call   c000996b <malloc>
c00162db:	83 c4 10             	add    esp,0x10
c00162de:	89 c3                	mov    ebx,eax
c00162e0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00162e5:	83 ec 08             	sub    esp,0x8
c00162e8:	50                   	push   eax
c00162e9:	53                   	push   ebx
c00162ea:	e8 45 61 ff ff       	call   c000c434 <VAS::VAS(bool)>
c00162ef:	83 c4 10             	add    esp,0x10
c00162f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00162f6:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00162fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016300:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001630a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001630e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0016312:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0016318:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001631c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0016322:	85 c0                	test   eax,eax
c0016324:	74 42                	je     c0016368 <Process::Process(bool, char const*, Process*, char**)+0x120>
c0016326:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001632a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0016330:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016336:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001633a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0016340:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016344:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001634a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016350:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016354:	05 0c 01 00 00       	add    eax,0x10c
c0016359:	83 ec 08             	sub    esp,0x8
c001635c:	52                   	push   edx
c001635d:	50                   	push   eax
c001635e:	e8 d5 a3 fe ff       	call   c0000738 <strcpy>
c0016363:	83 c4 10             	add    esp,0x10
c0016366:	eb 64                	jmp    c00163cc <Process::Process(bool, char const*, Process*, char**)+0x184>
c0016368:	c7 44 24 18 b4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1b4
c0016370:	83 ec 0c             	sub    esp,0xc
c0016373:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016377:	e8 ef 35 ff ff       	call   c000996b <malloc>
c001637c:	83 c4 10             	add    esp,0x10
c001637f:	89 c3                	mov    ebx,eax
c0016381:	83 ec 08             	sub    esp,0x8
c0016384:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016388:	53                   	push   ebx
c0016389:	e8 f4 4b ff ff       	call   c000af82 <VgaText::VgaText(char const*)>
c001638e:	83 c4 10             	add    esp,0x10
c0016391:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016395:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001639b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001639f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00163a5:	83 ec 0c             	sub    esp,0xc
c00163a8:	50                   	push   eax
c00163a9:	e8 9d 43 ff ff       	call   c000a74b <addToTerminalCycle(VgaText*)>
c00163ae:	83 c4 10             	add    esp,0x10
c00163b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00163b5:	05 0c 01 00 00       	add    eax,0x10c
c00163ba:	83 ec 08             	sub    esp,0x8
c00163bd:	68 8d 48 02 c0       	push   0xc002488d
c00163c2:	50                   	push   eax
c00163c3:	e8 70 a3 fe ff       	call   c0000738 <strcpy>
c00163c8:	83 c4 10             	add    esp,0x10
c00163cb:	90                   	nop
c00163cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00163d0:	83 c0 0c             	add    eax,0xc
c00163d3:	83 ec 08             	sub    esp,0x8
c00163d6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00163da:	50                   	push   eax
c00163db:	e8 58 a3 fe ff       	call   c0000738 <strcpy>
c00163e0:	83 c4 10             	add    esp,0x10
c00163e3:	83 ec 08             	sub    esp,0x8
c00163e6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00163ea:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00163ee:	e8 09 fc ff ff       	call   c0015ffc <Process::addArgs(char**)>
c00163f3:	83 c4 10             	add    esp,0x10
c00163f6:	90                   	nop
c00163f7:	83 c4 24             	add    esp,0x24
c00163fa:	5b                   	pop    ebx
c00163fb:	5e                   	pop    esi
c00163fc:	c3                   	ret    
c00163fd:	8d 76 00             	lea    esi,[esi+0x0]

c0016400 <taskStartupFunction>:
c0016400:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016405:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0016408:	c3                   	ret    
c0016409:	90                   	nop
c001640a:	66 90                	xchg   ax,ax

c001640c <Semaphore::Semaphore(int)>:
c001640c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016410:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016414:	89 10                	mov    DWORD PTR [eax],edx
c0016416:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001641a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0016421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016425:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001642c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016430:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0016437:	90                   	nop
c0016438:	c3                   	ret    
c0016439:	90                   	nop
c001643a:	66 90                	xchg   ax,ax

c001643c <Mutex::Mutex()>:
c001643c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016440:	6a 01                	push   0x1
c0016442:	50                   	push   eax
c0016443:	e8 c4 ff ff ff       	call   c001640c <Semaphore::Semaphore(int)>
c0016448:	83 c4 08             	add    esp,0x8
c001644b:	90                   	nop
c001644c:	c3                   	ret    
c001644d:	90                   	nop
c001644e:	66 90                	xchg   ax,ax

c0016450 <Process::createThread(void (*)(void*), void*, int)>:
c0016450:	57                   	push   edi
c0016451:	31 c9                	xor    ecx,ecx
c0016453:	56                   	push   esi
c0016454:	53                   	push   ebx
c0016455:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016459:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0016460:	89 f2                	mov    edx,esi
c0016462:	66 90                	xchg   ax,ax
c0016464:	0f b7 c2             	movzx  eax,dx
c0016467:	83 e2 01             	and    edx,0x1
c001646a:	74 14                	je     c0016480 <Process::createThread(void (*)(void*), void*, int)+0x30>
c001646c:	d1 f8                	sar    eax,1
c001646e:	41                   	inc    ecx
c001646f:	89 c2                	mov    edx,eax
c0016471:	83 f9 10             	cmp    ecx,0x10
c0016474:	75 ee                	jne    c0016464 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0016476:	31 db                	xor    ebx,ebx
c0016478:	89 d8                	mov    eax,ebx
c001647a:	5b                   	pop    ebx
c001647b:	5e                   	pop    esi
c001647c:	5f                   	pop    edi
c001647d:	c3                   	ret    
c001647e:	66 90                	xchg   ax,ax
c0016480:	b8 01 00 00 00       	mov    eax,0x1
c0016485:	d3 e0                	shl    eax,cl
c0016487:	09 c6                	or     esi,eax
c0016489:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001648c:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0016493:	01 c0                	add    eax,eax
c0016495:	01 c8                	add    eax,ecx
c0016497:	8d 04 80             	lea    eax,[eax+eax*4]
c001649a:	01 d8                	add    eax,ebx
c001649c:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00164a3:	75 0b                	jne    c00164b0 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00164a5:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00164af:	90                   	nop
c00164b0:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00164b6:	83 ec 08             	sub    esp,0x8
c00164b9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00164bc:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00164bf:	01 c0                	add    eax,eax
c00164c1:	01 c8                	add    eax,ecx
c00164c3:	8d 3c 80             	lea    edi,[eax+eax*4]
c00164c6:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00164c9:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00164cf:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00164d5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00164d9:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00164df:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00164e5:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00164ec:	89 ca                	mov    edx,ecx
c00164ee:	f7 da                	neg    edx
c00164f0:	c1 e2 15             	shl    edx,0x15
c00164f3:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00164f9:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00164ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016503:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001650d:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0016513:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016517:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001651d:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0016527:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0016531:	53                   	push   ebx
c0016532:	68 c4 9b 02 c0       	push   0xc0029bc4
c0016537:	e8 c0 b8 00 00       	call   c0021dfc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001653c:	83 c4 10             	add    esp,0x10
c001653f:	89 d8                	mov    eax,ebx
c0016541:	5b                   	pop    ebx
c0016542:	5e                   	pop    esi
c0016543:	5f                   	pop    edi
c0016544:	c3                   	ret    
c0016545:	90                   	nop
c0016546:	66 90                	xchg   ax,ax

c0016548 <Process::createUserThread()>:
c0016548:	83 ec 0c             	sub    esp,0xc
c001654b:	68 80 00 00 00       	push   0x80
c0016550:	6a 00                	push   0x0
c0016552:	68 f8 5e 01 c0       	push   0xc0015ef8
c0016557:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001655b:	e8 f0 fe ff ff       	call   c0016450 <Process::createThread(void (*)(void*), void*, int)>
c0016560:	83 c4 1c             	add    esp,0x1c
c0016563:	c3                   	ret    

c0016564 <setupMultitasking(void (*)())>:
c0016564:	56                   	push   esi
c0016565:	53                   	push   ebx
c0016566:	51                   	push   ecx
c0016567:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001656b:	eb 13                	jmp    c0016580 <setupMultitasking(void (*)())+0x1c>
c001656d:	8d 76 00             	lea    esi,[esi+0x0]
c0016570:	83 ec 0c             	sub    esp,0xc
c0016573:	68 c4 9b 02 c0       	push   0xc0029bc4
c0016578:	e8 c7 b7 00 00       	call   c0021d44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001657d:	83 c4 10             	add    esp,0x10
c0016580:	83 ec 0c             	sub    esp,0xc
c0016583:	68 c4 9b 02 c0       	push   0xc0029bc4
c0016588:	e8 93 b7 00 00       	call   c0021d20 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001658d:	83 c4 10             	add    esp,0x10
c0016590:	84 c0                	test   al,al
c0016592:	74 dc                	je     c0016570 <setupMultitasking(void (*)())+0xc>
c0016594:	83 ec 0c             	sub    esp,0xc
c0016597:	68 1f 07 00 00       	push   0x71f
c001659c:	e8 ca 33 ff ff       	call   c000996b <malloc>
c00165a1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00165a8:	89 c3                	mov    ebx,eax
c00165aa:	6a 00                	push   0x0
c00165ac:	68 91 48 02 c0       	push   0xc0024891
c00165b1:	6a 01                	push   0x1
c00165b3:	50                   	push   eax
c00165b4:	e8 8f fc ff ff       	call   c0016248 <Process::Process(bool, char const*, Process*, char**)>
c00165b9:	83 c4 14             	add    esp,0x14
c00165bc:	89 1d d0 9b 02 c0    	mov    DWORD PTR ds:0xc0029bd0,ebx
c00165c2:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c00165c8:	e8 8c 44 ff ff       	call   c000aa59 <setActiveTerminal(VgaText*)>
c00165cd:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c00165d5:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00165df:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00165e5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00165e8:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00165f2:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00165f8:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00165fe:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0016608:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0016612:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001661c:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0016622:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001662c:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0016632:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001663c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0016642:	58                   	pop    eax
c0016643:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0016649:	5a                   	pop    edx
c001664a:	68 8d 48 02 c0       	push   0xc002488d
c001664f:	50                   	push   eax
c0016650:	e8 e3 a0 fe ff       	call   c0000738 <strcpy>
c0016655:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c001665c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016660:	83 c4 14             	add    esp,0x14
c0016663:	5b                   	pop    ebx
c0016664:	5e                   	pop    esi
c0016665:	e9 1f 9c fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c001666a:	66 90                	xchg   ax,ax

c001666c <schedule()>:
c001666c:	a1 a4 9b 02 c0       	mov    eax,ds:0xc0029ba4
c0016671:	85 c0                	test   eax,eax
c0016673:	74 0b                	je     c0016680 <schedule()+0x14>
c0016675:	c7 05 a0 9b 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029ba0,0x1
c001667f:	c3                   	ret    
c0016680:	53                   	push   ebx
c0016681:	83 ec 14             	sub    esp,0x14
c0016684:	68 c4 9b 02 c0       	push   0xc0029bc4
c0016689:	e8 92 b6 00 00       	call   c0021d20 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001668e:	83 c4 10             	add    esp,0x10
c0016691:	84 c0                	test   al,al
c0016693:	75 3b                	jne    c00166d0 <schedule()+0x64>
c0016695:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001669a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001669d:	4a                   	dec    edx
c001669e:	74 38                	je     c00166d8 <schedule()+0x6c>
c00166a0:	83 ec 0c             	sub    esp,0xc
c00166a3:	68 c4 9b 02 c0       	push   0xc0029bc4
c00166a8:	e8 8f b6 00 00       	call   c0021d3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00166ad:	c7 04 24 c4 9b 02 c0 	mov    DWORD PTR [esp],0xc0029bc4
c00166b4:	89 c3                	mov    ebx,eax
c00166b6:	e8 89 b6 00 00       	call   c0021d44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00166bb:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00166c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00166c5:	e8 86 f8 ff ff       	call   c0015f50 <switchToThread(ThreadControlBlock*)>
c00166ca:	83 c4 10             	add    esp,0x10
c00166cd:	8d 76 00             	lea    esi,[esi+0x0]
c00166d0:	83 c4 08             	add    esp,0x8
c00166d3:	5b                   	pop    ebx
c00166d4:	c3                   	ret    
c00166d5:	8d 76 00             	lea    esi,[esi+0x0]
c00166d8:	83 ec 08             	sub    esp,0x8
c00166db:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00166e2:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c00166e8:	68 c4 9b 02 c0       	push   0xc0029bc4
c00166ed:	e8 0a b7 00 00       	call   c0021dfc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00166f2:	83 c4 10             	add    esp,0x10
c00166f5:	eb a9                	jmp    c00166a0 <schedule()+0x34>
c00166f7:	90                   	nop

c00166f8 <Semaphore::tryAcquire()>:
c00166f8:	53                   	push   ebx
c00166f9:	83 ec 08             	sub    esp,0x8
c00166fc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016700:	fa                   	cli    
c0016701:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c0016706:	8d 50 01             	lea    edx,[eax+0x1]
c0016709:	89 15 a8 9b 02 c0    	mov    DWORD PTR ds:0xc0029ba8,edx
c001670f:	8b 15 a4 9b 02 c0    	mov    edx,DWORD PTR ds:0xc0029ba4
c0016715:	8d 5a 01             	lea    ebx,[edx+0x1]
c0016718:	89 1d a4 9b 02 c0    	mov    DWORD PTR ds:0xc0029ba4,ebx
c001671e:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0016721:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0016723:	7c 33                	jl     c0016758 <Semaphore::tryAcquire()+0x60>
c0016725:	89 15 a4 9b 02 c0    	mov    DWORD PTR ds:0xc0029ba4,edx
c001672b:	85 d2                	test   edx,edx
c001672d:	75 0d                	jne    c001673c <Semaphore::tryAcquire()+0x44>
c001672f:	8b 15 a0 9b 02 c0    	mov    edx,DWORD PTR ds:0xc0029ba0
c0016735:	85 d2                	test   edx,edx
c0016737:	75 6b                	jne    c00167a4 <Semaphore::tryAcquire()+0xac>
c0016739:	8d 76 00             	lea    esi,[esi+0x0]
c001673c:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c0016741:	85 c0                	test   eax,eax
c0016743:	74 0b                	je     c0016750 <Semaphore::tryAcquire()+0x58>
c0016745:	8d 76 00             	lea    esi,[esi+0x0]
c0016748:	31 c0                	xor    eax,eax
c001674a:	83 c4 08             	add    esp,0x8
c001674d:	5b                   	pop    ebx
c001674e:	c3                   	ret    
c001674f:	90                   	nop
c0016750:	fb                   	sti    
c0016751:	83 c4 08             	add    esp,0x8
c0016754:	5b                   	pop    ebx
c0016755:	c3                   	ret    
c0016756:	66 90                	xchg   ax,ax
c0016758:	43                   	inc    ebx
c0016759:	89 15 a4 9b 02 c0    	mov    DWORD PTR ds:0xc0029ba4,edx
c001675f:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0016762:	85 d2                	test   edx,edx
c0016764:	75 22                	jne    c0016788 <Semaphore::tryAcquire()+0x90>
c0016766:	8b 0d a0 9b 02 c0    	mov    ecx,DWORD PTR ds:0xc0029ba0
c001676c:	85 c9                	test   ecx,ecx
c001676e:	74 18                	je     c0016788 <Semaphore::tryAcquire()+0x90>
c0016770:	c7 05 a0 9b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029ba0,0x0
c001677a:	e8 ed fe ff ff       	call   c001666c <schedule()>
c001677f:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c0016784:	48                   	dec    eax
c0016785:	8d 76 00             	lea    esi,[esi+0x0]
c0016788:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c001678d:	85 c0                	test   eax,eax
c001678f:	75 0b                	jne    c001679c <Semaphore::tryAcquire()+0xa4>
c0016791:	fb                   	sti    
c0016792:	b0 01                	mov    al,0x1
c0016794:	83 c4 08             	add    esp,0x8
c0016797:	5b                   	pop    ebx
c0016798:	c3                   	ret    
c0016799:	8d 76 00             	lea    esi,[esi+0x0]
c001679c:	b0 01                	mov    al,0x1
c001679e:	83 c4 08             	add    esp,0x8
c00167a1:	5b                   	pop    ebx
c00167a2:	c3                   	ret    
c00167a3:	90                   	nop
c00167a4:	c7 05 a0 9b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029ba0,0x0
c00167ae:	e8 b9 fe ff ff       	call   c001666c <schedule()>
c00167b3:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c00167b8:	48                   	dec    eax
c00167b9:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c00167be:	85 c0                	test   eax,eax
c00167c0:	75 86                	jne    c0016748 <Semaphore::tryAcquire()+0x50>
c00167c2:	eb 8c                	jmp    c0016750 <Semaphore::tryAcquire()+0x58>

c00167c4 <Semaphore::assertLocked(char const*)>:
c00167c4:	83 ec 0c             	sub    esp,0xc
c00167c7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00167cb:	fa                   	cli    
c00167cc:	ff 05 a8 9b 02 c0    	inc    DWORD PTR ds:0xc0029ba8
c00167d2:	a1 a4 9b 02 c0       	mov    eax,ds:0xc0029ba4
c00167d7:	8d 48 01             	lea    ecx,[eax+0x1]
c00167da:	89 0d a4 9b 02 c0    	mov    DWORD PTR ds:0xc0029ba4,ecx
c00167e0:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00167e2:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00167e5:	7c 29                	jl     c0016810 <Semaphore::assertLocked(char const*)+0x4c>
c00167e7:	90                   	nop
c00167e8:	a3 a4 9b 02 c0       	mov    ds:0xc0029ba4,eax
c00167ed:	85 c0                	test   eax,eax
c00167ef:	75 0b                	jne    c00167fc <Semaphore::assertLocked(char const*)+0x38>
c00167f1:	a1 a0 9b 02 c0       	mov    eax,ds:0xc0029ba0
c00167f6:	85 c0                	test   eax,eax
c00167f8:	75 2e                	jne    c0016828 <Semaphore::assertLocked(char const*)+0x64>
c00167fa:	66 90                	xchg   ax,ax
c00167fc:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c0016801:	48                   	dec    eax
c0016802:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c0016807:	75 03                	jne    c001680c <Semaphore::assertLocked(char const*)+0x48>
c0016809:	fb                   	sti    
c001680a:	66 90                	xchg   ax,ax
c001680c:	83 c4 0c             	add    esp,0xc
c001680f:	c3                   	ret    
c0016810:	83 ec 0c             	sub    esp,0xc
c0016813:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016817:	e8 eb c7 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c001681c:	a1 a4 9b 02 c0       	mov    eax,ds:0xc0029ba4
c0016821:	83 c4 10             	add    esp,0x10
c0016824:	48                   	dec    eax
c0016825:	eb c1                	jmp    c00167e8 <Semaphore::assertLocked(char const*)+0x24>
c0016827:	90                   	nop
c0016828:	c7 05 a0 9b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029ba0,0x0
c0016832:	e8 35 fe ff ff       	call   c001666c <schedule()>
c0016837:	eb c3                	jmp    c00167fc <Semaphore::assertLocked(char const*)+0x38>
c0016839:	8d 76 00             	lea    esi,[esi+0x0]

c001683c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001683c:	83 ec 0c             	sub    esp,0xc
c001683f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016844:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016848:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001684b:	e8 1c fe ff ff       	call   c001666c <schedule()>
c0016850:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c0016855:	48                   	dec    eax
c0016856:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c001685b:	75 03                	jne    c0016860 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c001685d:	fb                   	sti    
c001685e:	66 90                	xchg   ax,ax
c0016860:	83 c4 0c             	add    esp,0xc
c0016863:	c3                   	ret    

c0016864 <blockTask(TaskState)>:
c0016864:	83 ec 0c             	sub    esp,0xc
c0016867:	fa                   	cli    
c0016868:	ff 05 a8 9b 02 c0    	inc    DWORD PTR ds:0xc0029ba8
c001686e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016872:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016877:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001687a:	e8 ed fd ff ff       	call   c001666c <schedule()>
c001687f:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c0016884:	48                   	dec    eax
c0016885:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c001688a:	75 04                	jne    c0016890 <blockTask(TaskState)+0x2c>
c001688c:	fb                   	sti    
c001688d:	8d 76 00             	lea    esi,[esi+0x0]
c0016890:	83 c4 0c             	add    esp,0xc
c0016893:	c3                   	ret    

c0016894 <waitTask(int, int*, int)>:
c0016894:	83 ec 18             	sub    esp,0x18
c0016897:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001689c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00168a0:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00168a3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00168a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168ac:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00168af:	6a 07                	push   0x7
c00168b1:	e8 ae ff ff ff       	call   c0016864 <blockTask(TaskState)>
c00168b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168bb:	83 c4 10             	add    esp,0x10
c00168be:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00168c1:	85 d2                	test   edx,edx
c00168c3:	74 0b                	je     c00168d0 <waitTask(int, int*, int)+0x3c>
c00168c5:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00168c8:	89 02                	mov    DWORD PTR [edx],eax
c00168ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168cf:	90                   	nop
c00168d0:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00168d3:	83 c4 0c             	add    esp,0xc
c00168d6:	c3                   	ret    
c00168d7:	90                   	nop

c00168d8 <milliTenthSleepUntil(unsigned int)>:
c00168d8:	83 ec 0c             	sub    esp,0xc
c00168db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168df:	39 05 ac 8c 02 c0    	cmp    DWORD PTR ds:0xc0028cac,eax
c00168e5:	76 05                	jbe    c00168ec <milliTenthSleepUntil(unsigned int)+0x14>
c00168e7:	90                   	nop
c00168e8:	83 c4 0c             	add    esp,0xc
c00168eb:	c3                   	ret    
c00168ec:	fa                   	cli    
c00168ed:	ff 05 a8 9b 02 c0    	inc    DWORD PTR ds:0xc0029ba8
c00168f3:	83 ec 08             	sub    esp,0x8
c00168f6:	ff 05 a4 9b 02 c0    	inc    DWORD PTR ds:0xc0029ba4
c00168fc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016902:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0016905:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001690b:	68 b8 9b 02 c0       	push   0xc0029bb8
c0016910:	e8 e7 b4 00 00       	call   c0021dfc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016915:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001691c:	e8 43 ff ff ff       	call   c0016864 <blockTask(TaskState)>
c0016921:	a1 a4 9b 02 c0       	mov    eax,ds:0xc0029ba4
c0016926:	83 c4 10             	add    esp,0x10
c0016929:	48                   	dec    eax
c001692a:	a3 a4 9b 02 c0       	mov    ds:0xc0029ba4,eax
c001692f:	85 c0                	test   eax,eax
c0016931:	75 09                	jne    c001693c <milliTenthSleepUntil(unsigned int)+0x64>
c0016933:	a1 a0 9b 02 c0       	mov    eax,ds:0xc0029ba0
c0016938:	85 c0                	test   eax,eax
c001693a:	75 14                	jne    c0016950 <milliTenthSleepUntil(unsigned int)+0x78>
c001693c:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c0016941:	48                   	dec    eax
c0016942:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c0016947:	75 9f                	jne    c00168e8 <milliTenthSleepUntil(unsigned int)+0x10>
c0016949:	fb                   	sti    
c001694a:	83 c4 0c             	add    esp,0xc
c001694d:	c3                   	ret    
c001694e:	66 90                	xchg   ax,ax
c0016950:	c7 05 a0 9b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029ba0,0x0
c001695a:	e8 0d fd ff ff       	call   c001666c <schedule()>
c001695f:	eb db                	jmp    c001693c <milliTenthSleepUntil(unsigned int)+0x64>
c0016961:	8d 76 00             	lea    esi,[esi+0x0]

c0016964 <milliTenthSleep(unsigned int)>:
c0016964:	a1 ac 8c 02 c0       	mov    eax,ds:0xc0028cac
c0016969:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001696d:	e9 66 ff ff ff       	jmp    c00168d8 <milliTenthSleepUntil(unsigned int)>
c0016972:	66 90                	xchg   ax,ax

c0016974 <sleep(unsigned int)>:
c0016974:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016978:	8d 04 80             	lea    eax,[eax+eax*4]
c001697b:	8d 04 80             	lea    eax,[eax+eax*4]
c001697e:	8d 04 80             	lea    eax,[eax+eax*4]
c0016981:	8d 04 80             	lea    eax,[eax+eax*4]
c0016984:	c1 e0 04             	shl    eax,0x4
c0016987:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001698b:	eb d7                	jmp    c0016964 <milliTenthSleep(unsigned int)>
c001698d:	90                   	nop
c001698e:	66 90                	xchg   ax,ax

c0016990 <Semaphore::acquire()>:
c0016990:	83 ec 0c             	sub    esp,0xc
c0016993:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016997:	fa                   	cli    
c0016998:	a1 a4 9b 02 c0       	mov    eax,ds:0xc0029ba4
c001699d:	ff 05 a8 9b 02 c0    	inc    DWORD PTR ds:0xc0029ba8
c00169a3:	8d 48 01             	lea    ecx,[eax+0x1]
c00169a6:	89 0d a4 9b 02 c0    	mov    DWORD PTR ds:0xc0029ba4,ecx
c00169ac:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00169af:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c00169b1:	7d 2d                	jge    c00169e0 <Semaphore::acquire()+0x50>
c00169b3:	41                   	inc    ecx
c00169b4:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00169b7:	90                   	nop
c00169b8:	a3 a4 9b 02 c0       	mov    ds:0xc0029ba4,eax
c00169bd:	85 c0                	test   eax,eax
c00169bf:	75 0b                	jne    c00169cc <Semaphore::acquire()+0x3c>
c00169c1:	a1 a0 9b 02 c0       	mov    eax,ds:0xc0029ba0
c00169c6:	85 c0                	test   eax,eax
c00169c8:	75 62                	jne    c0016a2c <Semaphore::acquire()+0x9c>
c00169ca:	66 90                	xchg   ax,ax
c00169cc:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c00169d1:	48                   	dec    eax
c00169d2:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c00169d7:	75 03                	jne    c00169dc <Semaphore::acquire()+0x4c>
c00169d9:	fb                   	sti    
c00169da:	66 90                	xchg   ax,ax
c00169dc:	83 c4 0c             	add    esp,0xc
c00169df:	c3                   	ret    
c00169e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169e5:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00169ec:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00169ef:	85 c9                	test   ecx,ecx
c00169f1:	74 4d                	je     c0016a40 <Semaphore::acquire()+0xb0>
c00169f3:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00169f6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00169fc:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00169ff:	90                   	nop
c0016a00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a05:	83 ec 0c             	sub    esp,0xc
c0016a08:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0016a0b:	68 0c 49 02 c0       	push   0xc002490c
c0016a10:	e8 64 62 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0016a15:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0016a1c:	e8 43 fe ff ff       	call   c0016864 <blockTask(TaskState)>
c0016a21:	a1 a4 9b 02 c0       	mov    eax,ds:0xc0029ba4
c0016a26:	83 c4 10             	add    esp,0x10
c0016a29:	48                   	dec    eax
c0016a2a:	eb 8c                	jmp    c00169b8 <Semaphore::acquire()+0x28>
c0016a2c:	c7 05 a0 9b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029ba0,0x0
c0016a36:	e8 31 fc ff ff       	call   c001666c <schedule()>
c0016a3b:	eb 8f                	jmp    c00169cc <Semaphore::acquire()+0x3c>
c0016a3d:	8d 76 00             	lea    esi,[esi+0x0]
c0016a40:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a45:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016a48:	eb b6                	jmp    c0016a00 <Semaphore::acquire()+0x70>
c0016a4a:	66 90                	xchg   ax,ax

c0016a4c <taskReturned>:
c0016a4c:	83 ec 18             	sub    esp,0x18
c0016a4f:	68 2c 49 02 c0       	push   0xc002492c
c0016a54:	e8 ae c5 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c0016a59:	83 c4 10             	add    esp,0x10
c0016a5c:	83 ec 0c             	sub    esp,0xc
c0016a5f:	6a 02                	push   0x2
c0016a61:	e8 fe fd ff ff       	call   c0016864 <blockTask(TaskState)>
c0016a66:	fa                   	cli    
c0016a67:	ff 05 a8 9b 02 c0    	inc    DWORD PTR ds:0xc0029ba8
c0016a6d:	e8 fa fb ff ff       	call   c001666c <schedule()>
c0016a72:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c0016a77:	83 c4 10             	add    esp,0x10
c0016a7a:	48                   	dec    eax
c0016a7b:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c0016a80:	85 c0                	test   eax,eax
c0016a82:	75 d8                	jne    c0016a5c <taskReturned+0x10>
c0016a84:	fb                   	sti    
c0016a85:	eb d5                	jmp    c0016a5c <taskReturned+0x10>
c0016a87:	90                   	nop

c0016a88 <Thr::processFromPID(int)>:
c0016a88:	57                   	push   edi
c0016a89:	56                   	push   esi
c0016a8a:	53                   	push   ebx
c0016a8b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016a8f:	fa                   	cli    
c0016a90:	ff 05 a8 9b 02 c0    	inc    DWORD PTR ds:0xc0029ba8
c0016a96:	83 ec 0c             	sub    esp,0xc
c0016a99:	68 c4 9b 02 c0       	push   0xc0029bc4
c0016a9e:	e8 99 b2 00 00       	call   c0021d3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016aa3:	83 c4 10             	add    esp,0x10
c0016aa6:	89 c7                	mov    edi,eax
c0016aa8:	eb 16                	jmp    c0016ac0 <Thr::processFromPID(int)+0x38>
c0016aaa:	66 90                	xchg   ax,ax
c0016aac:	83 ec 0c             	sub    esp,0xc
c0016aaf:	68 c4 9b 02 c0       	push   0xc0029bc4
c0016ab4:	e8 83 b2 00 00       	call   c0021d3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ab9:	83 c4 10             	add    esp,0x10
c0016abc:	39 f8                	cmp    eax,edi
c0016abe:	74 4c                	je     c0016b0c <Thr::processFromPID(int)+0x84>
c0016ac0:	83 ec 0c             	sub    esp,0xc
c0016ac3:	68 c4 9b 02 c0       	push   0xc0029bc4
c0016ac8:	e8 6f b2 00 00       	call   c0021d3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016acd:	c7 04 24 c4 9b 02 c0 	mov    DWORD PTR [esp],0xc0029bc4
c0016ad4:	89 c3                	mov    ebx,eax
c0016ad6:	e8 69 b2 00 00       	call   c0021d44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016adb:	58                   	pop    eax
c0016adc:	5a                   	pop    edx
c0016add:	53                   	push   ebx
c0016ade:	68 c4 9b 02 c0       	push   0xc0029bc4
c0016ae3:	e8 14 b3 00 00       	call   c0021dfc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016ae8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016aeb:	83 c4 10             	add    esp,0x10
c0016aee:	39 30                	cmp    DWORD PTR [eax],esi
c0016af0:	75 ba                	jne    c0016aac <Thr::processFromPID(int)+0x24>
c0016af2:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c0016af7:	48                   	dec    eax
c0016af8:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c0016afd:	74 09                	je     c0016b08 <Thr::processFromPID(int)+0x80>
c0016aff:	90                   	nop
c0016b00:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016b03:	5b                   	pop    ebx
c0016b04:	5e                   	pop    esi
c0016b05:	5f                   	pop    edi
c0016b06:	c3                   	ret    
c0016b07:	90                   	nop
c0016b08:	fb                   	sti    
c0016b09:	eb f5                	jmp    c0016b00 <Thr::processFromPID(int)+0x78>
c0016b0b:	90                   	nop
c0016b0c:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c0016b11:	48                   	dec    eax
c0016b12:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c0016b17:	75 07                	jne    c0016b20 <Thr::processFromPID(int)+0x98>
c0016b19:	fb                   	sti    
c0016b1a:	5b                   	pop    ebx
c0016b1b:	5e                   	pop    esi
c0016b1c:	5f                   	pop    edi
c0016b1d:	c3                   	ret    
c0016b1e:	66 90                	xchg   ax,ax
c0016b20:	5b                   	pop    ebx
c0016b21:	31 c0                	xor    eax,eax
c0016b23:	5e                   	pop    esi
c0016b24:	5f                   	pop    edi
c0016b25:	c3                   	ret    
c0016b26:	66 90                	xchg   ax,ax

c0016b28 <unblockTask(ThreadControlBlock*)>:
c0016b28:	53                   	push   ebx
c0016b29:	83 ec 08             	sub    esp,0x8
c0016b2c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016b30:	fa                   	cli    
c0016b31:	ff 05 a8 9b 02 c0    	inc    DWORD PTR ds:0xc0029ba8
c0016b37:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016b3a:	85 c0                	test   eax,eax
c0016b3c:	74 66                	je     c0016ba4 <unblockTask(ThreadControlBlock*)+0x7c>
c0016b3e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016b41:	48                   	dec    eax
c0016b42:	74 38                	je     c0016b7c <unblockTask(ThreadControlBlock*)+0x54>
c0016b44:	83 ec 0c             	sub    esp,0xc
c0016b47:	68 c4 9b 02 c0       	push   0xc0029bc4
c0016b4c:	e8 eb b1 00 00       	call   c0021d3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016b51:	83 c4 10             	add    esp,0x10
c0016b54:	85 c0                	test   eax,eax
c0016b56:	75 1c                	jne    c0016b74 <unblockTask(ThreadControlBlock*)+0x4c>
c0016b58:	eb 5e                	jmp    c0016bb8 <unblockTask(ThreadControlBlock*)+0x90>
c0016b5a:	66 90                	xchg   ax,ax
c0016b5c:	83 ec 08             	sub    esp,0x8
c0016b5f:	50                   	push   eax
c0016b60:	68 c4 9b 02 c0       	push   0xc0029bc4
c0016b65:	e8 82 b5 00 00       	call   c00220ec <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0016b6a:	83 c4 10             	add    esp,0x10
c0016b6d:	85 c0                	test   eax,eax
c0016b6f:	74 47                	je     c0016bb8 <unblockTask(ThreadControlBlock*)+0x90>
c0016b71:	8d 76 00             	lea    esi,[esi+0x0]
c0016b74:	39 c3                	cmp    ebx,eax
c0016b76:	75 e4                	jne    c0016b5c <unblockTask(ThreadControlBlock*)+0x34>
c0016b78:	eb 12                	jmp    c0016b8c <unblockTask(ThreadControlBlock*)+0x64>
c0016b7a:	66 90                	xchg   ax,ax
c0016b7c:	83 ec 0c             	sub    esp,0xc
c0016b7f:	68 af 48 02 c0       	push   0xc00248af
c0016b84:	e8 f0 60 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0016b89:	83 c4 10             	add    esp,0x10
c0016b8c:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c0016b91:	48                   	dec    eax
c0016b92:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c0016b97:	75 03                	jne    c0016b9c <unblockTask(ThreadControlBlock*)+0x74>
c0016b99:	fb                   	sti    
c0016b9a:	66 90                	xchg   ax,ax
c0016b9c:	83 c4 08             	add    esp,0x8
c0016b9f:	5b                   	pop    ebx
c0016ba0:	c3                   	ret    
c0016ba1:	8d 76 00             	lea    esi,[esi+0x0]
c0016ba4:	83 ec 0c             	sub    esp,0xc
c0016ba7:	68 98 48 02 c0       	push   0xc0024898
c0016bac:	e8 c8 60 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0016bb1:	83 c4 10             	add    esp,0x10
c0016bb4:	eb d6                	jmp    c0016b8c <unblockTask(ThreadControlBlock*)+0x64>
c0016bb6:	66 90                	xchg   ax,ax
c0016bb8:	83 ec 08             	sub    esp,0x8
c0016bbb:	53                   	push   ebx
c0016bbc:	68 c4 9b 02 c0       	push   0xc0029bc4
c0016bc1:	e8 36 b2 00 00       	call   c0021dfc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016bc6:	83 c4 10             	add    esp,0x10
c0016bc9:	eb c1                	jmp    c0016b8c <unblockTask(ThreadControlBlock*)+0x64>
c0016bcb:	90                   	nop

c0016bcc <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016bcc:	55                   	push   ebp
c0016bcd:	57                   	push   edi
c0016bce:	56                   	push   esi
c0016bcf:	53                   	push   ebx
c0016bd0:	83 ec 1c             	sub    esp,0x1c
c0016bd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016bd7:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016bda:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c0016be0:	85 ff                	test   edi,edi
c0016be2:	7e 24                	jle    c0016c08 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0016be4:	31 f6                	xor    esi,esi
c0016be6:	66 90                	xchg   ax,ax
c0016be8:	83 ec 0c             	sub    esp,0xc
c0016beb:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c0016bf2:	46                   	inc    esi
c0016bf3:	e8 83 2d ff ff       	call   c000997b <free>
c0016bf8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016bfb:	83 c4 10             	add    esp,0x10
c0016bfe:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0016c04:	7f e2                	jg     c0016be8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0016c06:	66 90                	xchg   ax,ax
c0016c08:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0016c12:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016c17:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016c1a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0016c1d:	d3 c0                	rol    eax,cl
c0016c1f:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0016c26:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016c29:	89 f7                	mov    edi,esi
c0016c2b:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0016c33:	0f 85 73 01 00 00    	jne    c0016dac <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0016c39:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0016c3f:	85 ed                	test   ebp,ebp
c0016c41:	74 1d                	je     c0016c60 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0016c43:	83 ec 0c             	sub    esp,0xc
c0016c46:	55                   	push   ebp
c0016c47:	e8 60 c1 ff ff       	call   c0012dac <EnvVarContainer::~EnvVarContainer()>
c0016c4c:	59                   	pop    ecx
c0016c4d:	5e                   	pop    esi
c0016c4e:	6a 0c                	push   0xc
c0016c50:	55                   	push   ebp
c0016c51:	e8 42 5f ff ff       	call   c000cb98 <operator delete(void*, unsigned long)>
c0016c56:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016c59:	83 c4 10             	add    esp,0x10
c0016c5c:	89 f7                	mov    edi,esi
c0016c5e:	66 90                	xchg   ax,ax
c0016c60:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016c66:	85 c0                	test   eax,eax
c0016c68:	0f 84 b2 00 00 00    	je     c0016d20 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0016c6e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0016c71:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016c75:	31 c9                	xor    ecx,ecx
c0016c77:	eb 17                	jmp    c0016c90 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0016c79:	8d 76 00             	lea    esi,[esi+0x0]
c0016c7c:	41                   	inc    ecx
c0016c7d:	83 f9 10             	cmp    ecx,0x10
c0016c80:	0f 84 9a 00 00 00    	je     c0016d20 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0016c86:	66 90                	xchg   ax,ax
c0016c88:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016c8e:	66 90                	xchg   ax,ax
c0016c90:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0016c97:	d3 fa                	sar    edx,cl
c0016c99:	83 e2 01             	and    edx,0x1
c0016c9c:	74 de                	je     c0016c7c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0016c9e:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0016ca1:	01 d2                	add    edx,edx
c0016ca3:	01 ca                	add    edx,ecx
c0016ca5:	8d 14 92             	lea    edx,[edx+edx*4]
c0016ca8:	01 d0                	add    eax,edx
c0016caa:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0016cb0:	83 fd 07             	cmp    ebp,0x7
c0016cb3:	75 c7                	jne    c0016c7c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0016cb5:	05 40 02 00 00       	add    eax,0x240
c0016cba:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0016cbd:	83 fd ff             	cmp    ebp,0xffffffff
c0016cc0:	0f 8c ee 00 00 00    	jl     c0016db4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0016cc6:	0f 84 ac 01 00 00    	je     c0016e78 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c0016ccc:	85 ed                	test   ebp,ebp
c0016cce:	0f 84 90 01 00 00    	je     c0016e64 <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c0016cd4:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0016cd6:	75 a4                	jne    c0016c7c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0016cd8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016cde:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016ce2:	01 d0                	add    eax,edx
c0016ce4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016ce8:	83 ec 0c             	sub    esp,0xc
c0016ceb:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0016cf1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016cf4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0016cfa:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0016d01:	50                   	push   eax
c0016d02:	e8 21 fe ff ff       	call   c0016b28 <unblockTask(ThreadControlBlock*)>
c0016d07:	83 c4 10             	add    esp,0x10
c0016d0a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016d0d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016d11:	89 f7                	mov    edi,esi
c0016d13:	41                   	inc    ecx
c0016d14:	83 f9 10             	cmp    ecx,0x10
c0016d17:	0f 85 6b ff ff ff    	jne    c0016c88 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016d1d:	8d 76 00             	lea    esi,[esi+0x0]
c0016d20:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0016d26:	85 c0                	test   eax,eax
c0016d28:	74 62                	je     c0016d8c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0016d2a:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0016d30:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0016d36:	74 54                	je     c0016d8c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0016d38:	83 ec 0c             	sub    esp,0xc
c0016d3b:	68 c4 9b 02 c0       	push   0xc0029bc4
c0016d40:	e8 f7 af 00 00       	call   c0021d3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d45:	c7 04 24 c4 9b 02 c0 	mov    DWORD PTR [esp],0xc0029bc4
c0016d4c:	89 c7                	mov    edi,eax
c0016d4e:	e8 cd af 00 00       	call   c0021d20 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016d53:	83 c4 10             	add    esp,0x10
c0016d56:	84 c0                	test   al,al
c0016d58:	0f 84 ce 00 00 00    	je     c0016e2c <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c0016d5e:	66 90                	xchg   ax,ax
c0016d60:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016d63:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016d69:	85 d2                	test   edx,edx
c0016d6b:	74 0f                	je     c0016d7c <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c0016d6d:	83 ec 0c             	sub    esp,0xc
c0016d70:	8b 02                	mov    eax,DWORD PTR [edx]
c0016d72:	52                   	push   edx
c0016d73:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016d76:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016d79:	83 c4 10             	add    esp,0x10
c0016d7c:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0016d86:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0016d89:	8d 76 00             	lea    esi,[esi+0x0]
c0016d8c:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0016d92:	85 db                	test   ebx,ebx
c0016d94:	74 16                	je     c0016dac <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0016d96:	83 ec 0c             	sub    esp,0xc
c0016d99:	53                   	push   ebx
c0016d9a:	e8 6d 50 ff ff       	call   c000be0c <VAS::~VAS()>
c0016d9f:	58                   	pop    eax
c0016da0:	5a                   	pop    edx
c0016da1:	6a 14                	push   0x14
c0016da3:	53                   	push   ebx
c0016da4:	e8 ef 5d ff ff       	call   c000cb98 <operator delete(void*, unsigned long)>
c0016da9:	83 c4 10             	add    esp,0x10
c0016dac:	83 c4 1c             	add    esp,0x1c
c0016daf:	5b                   	pop    ebx
c0016db0:	5e                   	pop    esi
c0016db1:	5f                   	pop    edi
c0016db2:	5d                   	pop    ebp
c0016db3:	c3                   	ret    
c0016db4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016db8:	83 ec 0c             	sub    esp,0xc
c0016dbb:	68 60 49 02 c0       	push   0xc0024960
c0016dc0:	e8 42 c2 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c0016dc5:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016dc8:	83 c4 10             	add    esp,0x10
c0016dcb:	89 f7                	mov    edi,esi
c0016dcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016dd1:	e9 a6 fe ff ff       	jmp    c0016c7c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0016dd6:	66 90                	xchg   ax,ax
c0016dd8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016dde:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0016de4:	75 1e                	jne    c0016e04 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0016de6:	83 ec 0c             	sub    esp,0xc
c0016de9:	68 c8 49 02 c0       	push   0xc00249c8
c0016dee:	e8 86 5e ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0016df3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0016dfa:	e8 65 fa ff ff       	call   c0016864 <blockTask(TaskState)>
c0016dff:	83 c4 10             	add    esp,0x10
c0016e02:	66 90                	xchg   ax,ax
c0016e04:	83 ec 08             	sub    esp,0x8
c0016e07:	56                   	push   esi
c0016e08:	68 c4 9b 02 c0       	push   0xc0029bc4
c0016e0d:	e8 ea af 00 00       	call   c0021dfc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e12:	c7 04 24 c4 9b 02 c0 	mov    DWORD PTR [esp],0xc0029bc4
c0016e19:	e8 1e af 00 00       	call   c0021d3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e1e:	83 c4 10             	add    esp,0x10
c0016e21:	39 f8                	cmp    eax,edi
c0016e23:	0f 84 37 ff ff ff    	je     c0016d60 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c0016e29:	8d 76 00             	lea    esi,[esi+0x0]
c0016e2c:	83 ec 0c             	sub    esp,0xc
c0016e2f:	68 c4 9b 02 c0       	push   0xc0029bc4
c0016e34:	e8 03 af 00 00       	call   c0021d3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e39:	c7 04 24 c4 9b 02 c0 	mov    DWORD PTR [esp],0xc0029bc4
c0016e40:	89 c6                	mov    esi,eax
c0016e42:	e8 fd ae 00 00       	call   c0021d44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016e47:	83 c4 10             	add    esp,0x10
c0016e4a:	39 f3                	cmp    ebx,esi
c0016e4c:	74 b6                	je     c0016e04 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0016e4e:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0016e51:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016e54:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0016e5a:	75 a8                	jne    c0016e04 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0016e5c:	e9 77 ff ff ff       	jmp    c0016dd8 <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c0016e61:	8d 76 00             	lea    esi,[esi+0x0]
c0016e64:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016e68:	83 ec 0c             	sub    esp,0xc
c0016e6b:	68 94 49 02 c0       	push   0xc0024994
c0016e70:	e9 4b ff ff ff       	jmp    c0016dc0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0016e75:	8d 76 00             	lea    esi,[esi+0x0]
c0016e78:	8b 36                	mov    esi,DWORD PTR [esi]
c0016e7a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016e7e:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0016e81:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016e84:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0016e8a:	01 d7                	add    edi,edx
c0016e8c:	89 f8                	mov    eax,edi
c0016e8e:	e9 51 fe ff ff       	jmp    c0016ce4 <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c0016e93:	90                   	nop

c0016e94 <cleanerTaskFunction(void*)>:
c0016e94:	53                   	push   ebx
c0016e95:	83 ec 08             	sub    esp,0x8
c0016e98:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c0016e9d:	48                   	dec    eax
c0016e9e:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c0016ea3:	75 03                	jne    c0016ea8 <cleanerTaskFunction(void*)+0x14>
c0016ea5:	fb                   	sti    
c0016ea6:	66 90                	xchg   ax,ax
c0016ea8:	fa                   	cli    
c0016ea9:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c0016eae:	80 3d 8c 9b 02 c0 00 	cmp    BYTE PTR ds:0xc0029b8c,0x0
c0016eb5:	8d 50 01             	lea    edx,[eax+0x1]
c0016eb8:	89 15 a8 9b 02 c0    	mov    DWORD PTR ds:0xc0029ba8,edx
c0016ebe:	0f 84 ac 00 00 00    	je     c0016f70 <cleanerTaskFunction(void*)+0xdc>
c0016ec4:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c0016ec9:	85 c0                	test   eax,eax
c0016ecb:	75 03                	jne    c0016ed0 <cleanerTaskFunction(void*)+0x3c>
c0016ecd:	fb                   	sti    
c0016ece:	66 90                	xchg   ax,ax
c0016ed0:	c6 05 8c 9b 02 c0 00 	mov    BYTE PTR ds:0xc0029b8c,0x0
c0016ed7:	fa                   	cli    
c0016ed8:	ff 05 a8 9b 02 c0    	inc    DWORD PTR ds:0xc0029ba8
c0016ede:	ff 05 a4 9b 02 c0    	inc    DWORD PTR ds:0xc0029ba4
c0016ee4:	fa                   	cli    
c0016ee5:	ff 05 a8 9b 02 c0    	inc    DWORD PTR ds:0xc0029ba8
c0016eeb:	eb 2b                	jmp    c0016f18 <cleanerTaskFunction(void*)+0x84>
c0016eed:	8d 76 00             	lea    esi,[esi+0x0]
c0016ef0:	83 ec 0c             	sub    esp,0xc
c0016ef3:	68 ac 9b 02 c0       	push   0xc0029bac
c0016ef8:	e8 3f ae 00 00       	call   c0021d3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016efd:	c7 04 24 ac 9b 02 c0 	mov    DWORD PTR [esp],0xc0029bac
c0016f04:	89 c3                	mov    ebx,eax
c0016f06:	e8 39 ae 00 00       	call   c0021d44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016f0b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016f0e:	e8 b9 fc ff ff       	call   c0016bcc <cleanupTerminatedTask(ThreadControlBlock*)>
c0016f13:	83 c4 10             	add    esp,0x10
c0016f16:	66 90                	xchg   ax,ax
c0016f18:	83 ec 0c             	sub    esp,0xc
c0016f1b:	68 ac 9b 02 c0       	push   0xc0029bac
c0016f20:	e8 fb ad 00 00       	call   c0021d20 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016f25:	83 c4 10             	add    esp,0x10
c0016f28:	84 c0                	test   al,al
c0016f2a:	74 c4                	je     c0016ef0 <cleanerTaskFunction(void*)+0x5c>
c0016f2c:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c0016f31:	48                   	dec    eax
c0016f32:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c0016f37:	75 03                	jne    c0016f3c <cleanerTaskFunction(void*)+0xa8>
c0016f39:	fb                   	sti    
c0016f3a:	66 90                	xchg   ax,ax
c0016f3c:	a1 a4 9b 02 c0       	mov    eax,ds:0xc0029ba4
c0016f41:	48                   	dec    eax
c0016f42:	a3 a4 9b 02 c0       	mov    ds:0xc0029ba4,eax
c0016f47:	0f 85 4b ff ff ff    	jne    c0016e98 <cleanerTaskFunction(void*)+0x4>
c0016f4d:	a1 a0 9b 02 c0       	mov    eax,ds:0xc0029ba0
c0016f52:	85 c0                	test   eax,eax
c0016f54:	0f 84 3e ff ff ff    	je     c0016e98 <cleanerTaskFunction(void*)+0x4>
c0016f5a:	c7 05 a0 9b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029ba0,0x0
c0016f64:	e8 03 f7 ff ff       	call   c001666c <schedule()>
c0016f69:	e9 2a ff ff ff       	jmp    c0016e98 <cleanerTaskFunction(void*)+0x4>
c0016f6e:	66 90                	xchg   ax,ax
c0016f70:	83 ec 0c             	sub    esp,0xc
c0016f73:	6a 02                	push   0x2
c0016f75:	e8 c2 f8 ff ff       	call   c001683c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016f7a:	83 c4 10             	add    esp,0x10
c0016f7d:	e9 4e ff ff ff       	jmp    c0016ed0 <cleanerTaskFunction(void*)+0x3c>
c0016f82:	66 90                	xchg   ax,ax

c0016f84 <terminateTask(int)>:
c0016f84:	83 ec 14             	sub    esp,0x14
c0016f87:	fa                   	cli    
c0016f88:	ff 05 a8 9b 02 c0    	inc    DWORD PTR ds:0xc0029ba8
c0016f8e:	ff 05 a4 9b 02 c0    	inc    DWORD PTR ds:0xc0029ba4
c0016f94:	fa                   	cli    
c0016f95:	ff 05 a8 9b 02 c0    	inc    DWORD PTR ds:0xc0029ba8
c0016f9b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016f9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fa4:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016fa7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fac:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016faf:	50                   	push   eax
c0016fb0:	68 ac 9b 02 c0       	push   0xc0029bac
c0016fb5:	e8 42 ae 00 00       	call   c0021dfc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016fba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fbf:	83 c4 10             	add    esp,0x10
c0016fc2:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016fc9:	a1 88 9b 02 c0       	mov    eax,ds:0xc0029b88
c0016fce:	85 c0                	test   eax,eax
c0016fd0:	74 5e                	je     c0017030 <terminateTask(int)+0xac>
c0016fd2:	83 ec 0c             	sub    esp,0xc
c0016fd5:	c6 05 8c 9b 02 c0 01 	mov    BYTE PTR ds:0xc0029b8c,0x1
c0016fdc:	50                   	push   eax
c0016fdd:	e8 46 fb ff ff       	call   c0016b28 <unblockTask(ThreadControlBlock*)>
c0016fe2:	83 c4 10             	add    esp,0x10
c0016fe5:	8d 76 00             	lea    esi,[esi+0x0]
c0016fe8:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c0016fed:	48                   	dec    eax
c0016fee:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c0016ff3:	75 03                	jne    c0016ff8 <terminateTask(int)+0x74>
c0016ff5:	fb                   	sti    
c0016ff6:	66 90                	xchg   ax,ax
c0016ff8:	a1 a4 9b 02 c0       	mov    eax,ds:0xc0029ba4
c0016ffd:	48                   	dec    eax
c0016ffe:	a3 a4 9b 02 c0       	mov    ds:0xc0029ba4,eax
c0017003:	75 0b                	jne    c0017010 <terminateTask(int)+0x8c>
c0017005:	83 3d a0 9b 02 c0 00 	cmp    DWORD PTR ds:0xc0029ba0,0x0
c001700c:	75 36                	jne    c0017044 <terminateTask(int)+0xc0>
c001700e:	66 90                	xchg   ax,ax
c0017010:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c0017015:	48                   	dec    eax
c0017016:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c001701b:	75 03                	jne    c0017020 <terminateTask(int)+0x9c>
c001701d:	fb                   	sti    
c001701e:	66 90                	xchg   ax,ax
c0017020:	fa                   	cli    
c0017021:	ff 05 a8 9b 02 c0    	inc    DWORD PTR ds:0xc0029ba8
c0017027:	90                   	nop
c0017028:	e8 3f f6 ff ff       	call   c001666c <schedule()>
c001702d:	eb e1                	jmp    c0017010 <terminateTask(int)+0x8c>
c001702f:	90                   	nop
c0017030:	83 ec 0c             	sub    esp,0xc
c0017033:	68 c6 48 02 c0       	push   0xc00248c6
c0017038:	e8 3c 5c ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001703d:	83 c4 10             	add    esp,0x10
c0017040:	eb a6                	jmp    c0016fe8 <terminateTask(int)+0x64>
c0017042:	66 90                	xchg   ax,ax
c0017044:	c7 05 a0 9b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029ba0,0x0
c001704e:	eb d8                	jmp    c0017028 <terminateTask(int)+0xa4>

c0017050 <Thr::terminateFromIRQ(int)>:
c0017050:	83 ec 18             	sub    esp,0x18
c0017053:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017057:	e8 28 ff ff ff       	call   c0016f84 <terminateTask(int)>

c001705c <Semaphore::release()>:
c001705c:	83 ec 0c             	sub    esp,0xc
c001705f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017063:	fa                   	cli    
c0017064:	a1 a4 9b 02 c0       	mov    eax,ds:0xc0029ba4
c0017069:	ff 05 a8 9b 02 c0    	inc    DWORD PTR ds:0xc0029ba8
c001706f:	8d 48 01             	lea    ecx,[eax+0x1]
c0017072:	89 0d a4 9b 02 c0    	mov    DWORD PTR ds:0xc0029ba4,ecx
c0017078:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001707b:	85 c9                	test   ecx,ecx
c001707d:	74 41                	je     c00170c0 <Semaphore::release()+0x64>
c001707f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0017082:	83 ec 0c             	sub    esp,0xc
c0017085:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017088:	51                   	push   ecx
c0017089:	e8 9a fa ff ff       	call   c0016b28 <unblockTask(ThreadControlBlock*)>
c001708e:	a1 a4 9b 02 c0       	mov    eax,ds:0xc0029ba4
c0017093:	83 c4 10             	add    esp,0x10
c0017096:	48                   	dec    eax
c0017097:	90                   	nop
c0017098:	a3 a4 9b 02 c0       	mov    ds:0xc0029ba4,eax
c001709d:	85 c0                	test   eax,eax
c001709f:	75 0b                	jne    c00170ac <Semaphore::release()+0x50>
c00170a1:	a1 a0 9b 02 c0       	mov    eax,ds:0xc0029ba0
c00170a6:	85 c0                	test   eax,eax
c00170a8:	75 1e                	jne    c00170c8 <Semaphore::release()+0x6c>
c00170aa:	66 90                	xchg   ax,ax
c00170ac:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c00170b1:	48                   	dec    eax
c00170b2:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c00170b7:	75 03                	jne    c00170bc <Semaphore::release()+0x60>
c00170b9:	fb                   	sti    
c00170ba:	66 90                	xchg   ax,ax
c00170bc:	83 c4 0c             	add    esp,0xc
c00170bf:	c3                   	ret    
c00170c0:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c00170c3:	eb d3                	jmp    c0017098 <Semaphore::release()+0x3c>
c00170c5:	8d 76 00             	lea    esi,[esi+0x0]
c00170c8:	c7 05 a0 9b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029ba0,0x0
c00170d2:	e8 95 f5 ff ff       	call   c001666c <schedule()>
c00170d7:	eb d3                	jmp    c00170ac <Semaphore::release()+0x50>
c00170d9:	8d 76 00             	lea    esi,[esi+0x0]

c00170dc <__static_initialization_and_destruction_0(int, int)>:
c00170dc:	83 ec 0c             	sub    esp,0xc
c00170df:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00170e4:	0f 85 8e 00 00 00    	jne    c0017178 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00170ea:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00170f2:	0f 85 80 00 00 00    	jne    c0017178 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00170f8:	83 ec 0c             	sub    esp,0xc
c00170fb:	68 c4 9b 02 c0       	push   0xc0029bc4
c0017100:	e8 a3 af 00 00       	call   c00220a8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017105:	83 c4 10             	add    esp,0x10
c0017108:	83 ec 04             	sub    esp,0x4
c001710b:	68 b8 5b 02 c0       	push   0xc0025bb8
c0017110:	68 c4 9b 02 c0       	push   0xc0029bc4
c0017115:	68 58 20 02 c0       	push   0xc0022058
c001711a:	e8 f3 59 ff ff       	call   c000cb12 <__cxa_atexit>
c001711f:	83 c4 10             	add    esp,0x10
c0017122:	83 ec 0c             	sub    esp,0xc
c0017125:	68 b8 9b 02 c0       	push   0xc0029bb8
c001712a:	e8 79 af 00 00       	call   c00220a8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001712f:	83 c4 10             	add    esp,0x10
c0017132:	83 ec 04             	sub    esp,0x4
c0017135:	68 b8 5b 02 c0       	push   0xc0025bb8
c001713a:	68 b8 9b 02 c0       	push   0xc0029bb8
c001713f:	68 58 20 02 c0       	push   0xc0022058
c0017144:	e8 c9 59 ff ff       	call   c000cb12 <__cxa_atexit>
c0017149:	83 c4 10             	add    esp,0x10
c001714c:	83 ec 0c             	sub    esp,0xc
c001714f:	68 ac 9b 02 c0       	push   0xc0029bac
c0017154:	e8 4f af 00 00       	call   c00220a8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017159:	83 c4 10             	add    esp,0x10
c001715c:	83 ec 04             	sub    esp,0x4
c001715f:	68 b8 5b 02 c0       	push   0xc0025bb8
c0017164:	68 ac 9b 02 c0       	push   0xc0029bac
c0017169:	68 58 20 02 c0       	push   0xc0022058
c001716e:	e8 9f 59 ff ff       	call   c000cb12 <__cxa_atexit>
c0017173:	83 c4 10             	add    esp,0x10
c0017176:	66 90                	xchg   ax,ax
c0017178:	90                   	nop
c0017179:	83 c4 0c             	add    esp,0xc
c001717c:	c3                   	ret    
c001717d:	8d 76 00             	lea    esi,[esi+0x0]

c0017180 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0017180:	83 ec 0c             	sub    esp,0xc
c0017183:	83 ec 08             	sub    esp,0x8
c0017186:	68 ff ff 00 00       	push   0xffff
c001718b:	6a 01                	push   0x1
c001718d:	e8 4a ff ff ff       	call   c00170dc <__static_initialization_and_destruction_0(int, int)>
c0017192:	83 c4 10             	add    esp,0x10
c0017195:	83 c4 0c             	add    esp,0xc
c0017198:	c3                   	ret    

c0017199 <Vm::inbv(unsigned short)>:
c0017199:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001719d:	66 81 fa fe fe       	cmp    dx,0xfefe
c00171a2:	75 06                	jne    c00171aa <Vm::inbv(unsigned short)+0x11>
c00171a4:	a0 0c 9c 02 c0       	mov    al,ds:0xc0029c0c
c00171a9:	c3                   	ret    
c00171aa:	ec                   	in     al,dx
c00171ab:	c3                   	ret    

c00171ac <Vm::outbv(unsigned short, unsigned char)>:
c00171ac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00171b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171b4:	66 81 fa fe fe       	cmp    dx,0xfefe
c00171b9:	75 25                	jne    c00171e0 <Vm::outbv(unsigned short, unsigned char)+0x34>
c00171bb:	8b 0d 0c 9c 02 c0    	mov    ecx,DWORD PTR ds:0xc0029c0c
c00171c1:	8d 51 01             	lea    edx,[ecx+0x1]
c00171c4:	88 81 20 9c 02 c0    	mov    BYTE PTR [ecx-0x3ffd63e0],al
c00171ca:	89 15 0c 9c 02 c0    	mov    DWORD PTR ds:0xc0029c0c,edx
c00171d0:	83 fa 20             	cmp    edx,0x20
c00171d3:	75 0c                	jne    c00171e1 <Vm::outbv(unsigned short, unsigned char)+0x35>
c00171d5:	c7 05 0c 9c 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0029c0c,0x1f
c00171df:	c3                   	ret    
c00171e0:	ee                   	out    dx,al
c00171e1:	c3                   	ret    

c00171e2 <Vm::realToLinear(unsigned short, unsigned short)>:
c00171e2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171e7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171ec:	c1 e0 04             	shl    eax,0x4
c00171ef:	01 d0                	add    eax,edx
c00171f1:	c3                   	ret    

c00171f2 <Vm::getSegment(unsigned int)>:
c00171f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00171f6:	c1 e8 10             	shr    eax,0x10
c00171f9:	c3                   	ret    

c00171fa <Vm::getOffset(unsigned int)>:
c00171fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00171fe:	c3                   	ret    

c00171ff <Vm::mainloop2()>:
c00171ff:	83 ec 18             	sub    esp,0x18
c0017202:	fa                   	cli    
c0017203:	ff 05 a8 9b 02 c0    	inc    DWORD PTR ds:0xc0029ba8
c0017209:	6a 02                	push   0x2
c001720b:	c6 05 05 9c 02 c0 01 	mov    BYTE PTR ds:0xc0029c05,0x1
c0017212:	e8 25 f6 ff ff       	call   c001683c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017217:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001721c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0017220:	52                   	push   edx
c0017221:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0017225:	52                   	push   edx
c0017226:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c001722a:	52                   	push   edx
c001722b:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c001722f:	50                   	push   eax
c0017230:	e8 fa 8f fe ff       	call   c000022f <goToVM86>
c0017235:	83 c4 2c             	add    esp,0x2c
c0017238:	c3                   	ret    

c0017239 <Vm::mainVm8086Loop(void*)>:
c0017239:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c001723e:	48                   	dec    eax
c001723f:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c0017244:	75 01                	jne    c0017247 <Vm::mainVm8086Loop(void*)+0xe>
c0017246:	fb                   	sti    
c0017247:	eb b6                	jmp    c00171ff <Vm::mainloop2()>

c0017249 <Vm::mainloop3(unsigned long)>:
c0017249:	83 ec 18             	sub    esp,0x18
c001724c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017250:	fa                   	cli    
c0017251:	ff 05 a8 9b 02 c0    	inc    DWORD PTR ds:0xc0029ba8
c0017257:	6a 02                	push   0x2
c0017259:	c6 05 04 9c 02 c0 01 	mov    BYTE PTR ds:0xc0029c04,0x1
c0017260:	a3 00 9c 02 c0       	mov    ds:0xc0029c00,eax
c0017265:	e8 d2 f5 ff ff       	call   c001683c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001726a:	83 c4 1c             	add    esp,0x1c
c001726d:	eb 90                	jmp    c00171ff <Vm::mainloop2()>

c001726f <Vm::initialise8086()>:
c001726f:	83 ec 0c             	sub    esp,0xc
c0017272:	68 80 00 00 00       	push   0x80
c0017277:	6a 00                	push   0x0
c0017279:	68 39 72 01 c0       	push   0xc0017239
c001727e:	ff 35 d0 9b 02 c0    	push   DWORD PTR ds:0xc0029bd0
c0017284:	e8 c7 f1 ff ff       	call   c0016450 <Process::createThread(void (*)(void*), void*, int)>
c0017289:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0017290:	a3 08 9c 02 c0       	mov    ds:0xc0029c08,eax
c0017295:	68 00 01 00 00       	push   0x100
c001729a:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c001729f:	6a 00                	push   0x0
c00172a1:	6a 00                	push   0x0
c00172a3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00172a9:	e8 d2 4f ff ff       	call   c000c280 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00172ae:	83 c4 2c             	add    esp,0x2c
c00172b1:	c3                   	ret    

c00172b2 <Vm::finish8086()>:
c00172b2:	53                   	push   ebx
c00172b3:	83 ec 08             	sub    esp,0x8
c00172b6:	fa                   	cli    
c00172b7:	ff 05 a8 9b 02 c0    	inc    DWORD PTR ds:0xc0029ba8
c00172bd:	80 3d 04 9c 02 c0 00 	cmp    BYTE PTR ds:0xc0029c04,0x0
c00172c4:	75 15                	jne    c00172db <Vm::finish8086()+0x29>
c00172c6:	e8 a1 f3 ff ff       	call   c001666c <schedule()>
c00172cb:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c00172d0:	48                   	dec    eax
c00172d1:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c00172d6:	75 de                	jne    c00172b6 <Vm::finish8086()+0x4>
c00172d8:	fb                   	sti    
c00172d9:	eb db                	jmp    c00172b6 <Vm::finish8086()+0x4>
c00172db:	83 ec 0c             	sub    esp,0xc
c00172de:	8b 1d 00 9c 02 c0    	mov    ebx,DWORD PTR ds:0xc0029c00
c00172e4:	ff 35 08 9c 02 c0    	push   DWORD PTR ds:0xc0029c08
c00172ea:	c6 05 04 9c 02 c0 00 	mov    BYTE PTR ds:0xc0029c04,0x0
c00172f1:	e8 32 f8 ff ff       	call   c0016b28 <unblockTask(ThreadControlBlock*)>
c00172f6:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c00172fb:	83 c4 10             	add    esp,0x10
c00172fe:	8d 50 ff             	lea    edx,[eax-0x1]
c0017301:	89 15 a8 9b 02 c0    	mov    DWORD PTR ds:0xc0029ba8,edx
c0017307:	85 d2                	test   edx,edx
c0017309:	75 01                	jne    c001730c <Vm::finish8086()+0x5a>
c001730b:	fb                   	sti    
c001730c:	89 d8                	mov    eax,ebx
c001730e:	83 c4 08             	add    esp,0x8
c0017311:	5b                   	pop    ebx
c0017312:	c3                   	ret    

c0017313 <Vm::getOutput8086(unsigned char*)>:
c0017313:	57                   	push   edi
c0017314:	8b 0d 0c 9c 02 c0    	mov    ecx,DWORD PTR ds:0xc0029c0c
c001731a:	56                   	push   esi
c001731b:	be 20 9c 02 c0       	mov    esi,0xc0029c20
c0017320:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0017324:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017326:	a1 0c 9c 02 c0       	mov    eax,ds:0xc0029c0c
c001732b:	5e                   	pop    esi
c001732c:	c7 05 0c 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c0c,0x0
c0017336:	5f                   	pop    edi
c0017337:	c3                   	ret    

c0017338 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017338:	55                   	push   ebp
c0017339:	57                   	push   edi
c001733a:	56                   	push   esi
c001733b:	53                   	push   ebx
c001733c:	83 ec 0c             	sub    esp,0xc
c001733f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0017343:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0017347:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001734b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001734f:	fa                   	cli    
c0017350:	ff 05 a8 9b 02 c0    	inc    DWORD PTR ds:0xc0029ba8
c0017356:	80 3d 05 9c 02 c0 00 	cmp    BYTE PTR ds:0xc0029c05,0x0
c001735d:	75 15                	jne    c0017374 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c001735f:	e8 08 f3 ff ff       	call   c001666c <schedule()>
c0017364:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c0017369:	48                   	dec    eax
c001736a:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c001736f:	75 de                	jne    c001734f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0017371:	fb                   	sti    
c0017372:	eb db                	jmp    c001734f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0017374:	a1 08 9c 02 c0       	mov    eax,ds:0xc0029c08
c0017379:	c7 05 0c 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c0c,0x0
c0017383:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0017387:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001738b:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001738f:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0017393:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0017397:	0f b7 ff             	movzx  edi,di
c001739a:	0f b7 f6             	movzx  esi,si
c001739d:	50                   	push   eax
c001739e:	6a 20                	push   0x20
c00173a0:	6a 00                	push   0x0
c00173a2:	68 20 9c 02 c0       	push   0xc0029c20
c00173a7:	e8 d0 92 fe ff       	call   c000067c <memset>
c00173ac:	5a                   	pop    edx
c00173ad:	59                   	pop    ecx
c00173ae:	57                   	push   edi
c00173af:	56                   	push   esi
c00173b0:	e8 2d fe ff ff       	call   c00171e2 <Vm::realToLinear(unsigned short, unsigned short)>
c00173b5:	83 c4 10             	add    esp,0x10
c00173b8:	89 c7                	mov    edi,eax
c00173ba:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00173be:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00173c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00173c4:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c00173c9:	c6 05 05 9c 02 c0 00 	mov    BYTE PTR ds:0xc0029c05,0x0
c00173d0:	48                   	dec    eax
c00173d1:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c00173d6:	75 01                	jne    c00173d9 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c00173d8:	fb                   	sti    
c00173d9:	83 ec 0c             	sub    esp,0xc
c00173dc:	ff 35 08 9c 02 c0    	push   DWORD PTR ds:0xc0029c08
c00173e2:	e8 41 f7 ff ff       	call   c0016b28 <unblockTask(ThreadControlBlock*)>
c00173e7:	83 c4 1c             	add    esp,0x1c
c00173ea:	b0 01                	mov    al,0x1
c00173ec:	5b                   	pop    ebx
c00173ed:	5e                   	pop    esi
c00173ee:	5f                   	pop    edi
c00173ef:	5d                   	pop    ebp
c00173f0:	c3                   	ret    

c00173f1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00173f1:	55                   	push   ebp
c00173f2:	57                   	push   edi
c00173f3:	56                   	push   esi
c00173f4:	53                   	push   ebx
c00173f5:	83 ec 2c             	sub    esp,0x2c
c00173f8:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00173fc:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0017400:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0017404:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0017408:	fa                   	cli    
c0017409:	ff 05 a8 9b 02 c0    	inc    DWORD PTR ds:0xc0029ba8
c001740f:	0f b6 35 05 9c 02 c0 	movzx  esi,BYTE PTR ds:0xc0029c05
c0017416:	89 f0                	mov    eax,esi
c0017418:	84 c0                	test   al,al
c001741a:	75 1d                	jne    c0017439 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001741c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017420:	e8 47 f2 ff ff       	call   c001666c <schedule()>
c0017425:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c001742a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001742e:	48                   	dec    eax
c001742f:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c0017434:	75 d2                	jne    c0017408 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0017436:	fb                   	sti    
c0017437:	eb cf                	jmp    c0017408 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0017439:	a1 08 9c 02 c0       	mov    eax,ds:0xc0029c08
c001743e:	c7 05 0c 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c0c,0x0
c0017448:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c001744c:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0017450:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0017454:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0017458:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001745c:	50                   	push   eax
c001745d:	6a 20                	push   0x20
c001745f:	6a 00                	push   0x0
c0017461:	68 20 9c 02 c0       	push   0xc0029c20
c0017466:	e8 11 92 fe ff       	call   c000067c <memset>
c001746b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017472:	e8 f4 24 ff ff       	call   c000996b <malloc>
c0017477:	83 c4 0c             	add    esp,0xc
c001747a:	89 c3                	mov    ebx,eax
c001747c:	ff 35 d0 9b 02 c0    	push   DWORD PTR ds:0xc0029bd0
c0017482:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017486:	50                   	push   eax
c0017487:	e8 58 5d ff ff       	call   c000d1e4 <File::File(char const*, Process*)>
c001748c:	83 c4 10             	add    esp,0x10
c001748f:	85 db                	test   ebx,ebx
c0017491:	75 0a                	jne    c001749d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0017493:	83 ec 0c             	sub    esp,0xc
c0017496:	68 f0 49 02 c0       	push   0xc00249f0
c001749b:	eb 3e                	jmp    c00174db <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001749d:	50                   	push   eax
c001749e:	8d 44 24 17          	lea    eax,[esp+0x17]
c00174a2:	50                   	push   eax
c00174a3:	8d 44 24 20          	lea    eax,[esp+0x20]
c00174a7:	50                   	push   eax
c00174a8:	53                   	push   ebx
c00174a9:	e8 bc 60 ff ff       	call   c000d56a <File::stat(unsigned long long*, bool*)>
c00174ae:	83 c4 10             	add    esp,0x10
c00174b1:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00174b6:	74 0a                	je     c00174c2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c00174b8:	83 ec 0c             	sub    esp,0xc
c00174bb:	68 04 4a 02 c0       	push   0xc0024a04
c00174c0:	eb 19                	jmp    c00174db <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00174c2:	51                   	push   ecx
c00174c3:	51                   	push   ecx
c00174c4:	6a 01                	push   0x1
c00174c6:	53                   	push   ebx
c00174c7:	e8 f2 5d ff ff       	call   c000d2be <File::open(FileOpenMode)>
c00174cc:	83 c4 10             	add    esp,0x10
c00174cf:	85 c0                	test   eax,eax
c00174d1:	74 24                	je     c00174f7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c00174d3:	83 ec 0c             	sub    esp,0xc
c00174d6:	68 1d 4a 02 c0       	push   0xc0024a1d
c00174db:	e8 27 bb ff ff       	call   c0013007 <Krnl::panic(char const*)>
c00174e0:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c00174e5:	83 c4 10             	add    esp,0x10
c00174e8:	48                   	dec    eax
c00174e9:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c00174ee:	85 c0                	test   eax,eax
c00174f0:	75 01                	jne    c00174f3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c00174f2:	fb                   	sti    
c00174f3:	31 f6                	xor    esi,esi
c00174f5:	eb 58                	jmp    c001754f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c00174f7:	0f b7 ed             	movzx  ebp,bp
c00174fa:	50                   	push   eax
c00174fb:	0f b7 ff             	movzx  edi,di
c00174fe:	50                   	push   eax
c00174ff:	55                   	push   ebp
c0017500:	57                   	push   edi
c0017501:	e8 dc fc ff ff       	call   c00171e2 <Vm::realToLinear(unsigned short, unsigned short)>
c0017506:	5a                   	pop    edx
c0017507:	8b 13                	mov    edx,DWORD PTR [ebx]
c0017509:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001750d:	51                   	push   ecx
c001750e:	50                   	push   eax
c001750f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017513:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017517:	53                   	push   ebx
c0017518:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001751b:	83 c4 14             	add    esp,0x14
c001751e:	53                   	push   ebx
c001751f:	e8 f8 5d ff ff       	call   c000d31c <File::close()>
c0017524:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c0017529:	83 c4 10             	add    esp,0x10
c001752c:	48                   	dec    eax
c001752d:	c6 05 05 9c 02 c0 00 	mov    BYTE PTR ds:0xc0029c05,0x0
c0017534:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c0017539:	85 c0                	test   eax,eax
c001753b:	75 01                	jne    c001753e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001753d:	fb                   	sti    
c001753e:	83 ec 0c             	sub    esp,0xc
c0017541:	ff 35 08 9c 02 c0    	push   DWORD PTR ds:0xc0029c08
c0017547:	e8 dc f5 ff ff       	call   c0016b28 <unblockTask(ThreadControlBlock*)>
c001754c:	83 c4 10             	add    esp,0x10
c001754f:	83 c4 2c             	add    esp,0x2c
c0017552:	89 f0                	mov    eax,esi
c0017554:	5b                   	pop    ebx
c0017555:	5e                   	pop    esi
c0017556:	5f                   	pop    edi
c0017557:	5d                   	pop    ebp
c0017558:	c3                   	ret    

c0017559 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0017559:	57                   	push   edi
c001755a:	56                   	push   esi
c001755b:	53                   	push   ebx
c001755c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017564:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017568:	83 e8 06             	sub    eax,0x6
c001756b:	0f b7 c0             	movzx  eax,ax
c001756e:	50                   	push   eax
c001756f:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0017574:	50                   	push   eax
c0017575:	e8 68 fc ff ff       	call   c00171e2 <Vm::realToLinear(unsigned short, unsigned short)>
c001757a:	5a                   	pop    edx
c001757b:	5e                   	pop    esi
c001757c:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001757f:	8d 56 fa             	lea    edx,[esi-0x6]
c0017582:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017588:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001758b:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001758e:	83 c2 02             	add    edx,0x2
c0017591:	66 89 10             	mov    WORD PTR [eax],dx
c0017594:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0017597:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001759b:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001759e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00175a2:	89 d6                	mov    esi,edx
c00175a4:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00175aa:	66 81 e6 ff fd       	and    si,0xfdff
c00175af:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c00175b3:	74 07                	je     c00175bc <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00175b5:	89 d6                	mov    esi,edx
c00175b7:	66 81 ce 00 02       	or     si,0x200
c00175bc:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00175c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00175c5:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00175c9:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c00175d1:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c00175d4:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c00175dc:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c00175df:	5b                   	pop    ebx
c00175e0:	5e                   	pop    esi
c00175e1:	5f                   	pop    edi
c00175e2:	c3                   	ret    

c00175e3 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00175e3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00175e8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00175ed:	c1 e0 04             	shl    eax,0x4
c00175f0:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00175f3:	c3                   	ret    

c00175f4 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00175f4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00175f9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00175fe:	c1 e0 04             	shl    eax,0x4
c0017601:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0017605:	c3                   	ret    

c0017606 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0017606:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001760b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017610:	c1 e0 04             	shl    eax,0x4
c0017613:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0017616:	c3                   	ret    

c0017617 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0017617:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001761c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017621:	c1 e0 04             	shl    eax,0x4
c0017624:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017628:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001762b:	c3                   	ret    

c001762c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001762c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017631:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017636:	c1 e0 04             	shl    eax,0x4
c0017639:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001763d:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0017641:	c3                   	ret    

c0017642 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0017642:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017647:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001764c:	c1 e0 04             	shl    eax,0x4
c001764f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017653:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0017656:	c3                   	ret    

c0017657 <Vm::faultHandler(regs*)>:
c0017657:	55                   	push   ebp
c0017658:	57                   	push   edi
c0017659:	56                   	push   esi
c001765a:	53                   	push   ebx
c001765b:	83 ec 1c             	sub    esp,0x1c
c001765e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017662:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017665:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0017669:	0f b7 f8             	movzx  edi,ax
c001766c:	52                   	push   edx
c001766d:	0f b7 c0             	movzx  eax,ax
c0017670:	50                   	push   eax
c0017671:	e8 6c fb ff ff       	call   c00171e2 <Vm::realToLinear(unsigned short, unsigned short)>
c0017676:	5a                   	pop    edx
c0017677:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001767a:	59                   	pop    ecx
c001767b:	89 c1                	mov    ecx,eax
c001767d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017680:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017684:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017689:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001768d:	0f b7 c5             	movzx  eax,bp
c0017690:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017694:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0017698:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001769c:	e8 41 fb ff ff       	call   c00171e2 <Vm::realToLinear(unsigned short, unsigned short)>
c00176a1:	5e                   	pop    esi
c00176a2:	be 06 00 00 00       	mov    esi,0x6
c00176a7:	5a                   	pop    edx
c00176a8:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00176ad:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00176b2:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00176b5:	80 fa 9d             	cmp    dl,0x9d
c00176b8:	0f 84 2c 02 00 00    	je     c00178ea <Vm::faultHandler(regs*)+0x293>
c00176be:	0f 87 91 00 00 00    	ja     c0017755 <Vm::faultHandler(regs*)+0xfe>
c00176c4:	80 fa 66             	cmp    dl,0x66
c00176c7:	0f 84 98 01 00 00    	je     c0017865 <Vm::faultHandler(regs*)+0x20e>
c00176cd:	77 47                	ja     c0017716 <Vm::faultHandler(regs*)+0xbf>
c00176cf:	80 fa 36             	cmp    dl,0x36
c00176d2:	0f 84 80 01 00 00    	je     c0017858 <Vm::faultHandler(regs*)+0x201>
c00176d8:	77 1a                	ja     c00176f4 <Vm::faultHandler(regs*)+0x9d>
c00176da:	80 fa 26             	cmp    dl,0x26
c00176dd:	0f 84 4e 01 00 00    	je     c0017831 <Vm::faultHandler(regs*)+0x1da>
c00176e3:	80 fa 2e             	cmp    dl,0x2e
c00176e6:	0f 85 e2 05 00 00    	jne    c0017cce <Vm::faultHandler(regs*)+0x677>
c00176ec:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00176ef:	31 f6                	xor    esi,esi
c00176f1:	41                   	inc    ecx
c00176f2:	eb be                	jmp    c00176b2 <Vm::faultHandler(regs*)+0x5b>
c00176f4:	80 fa 64             	cmp    dl,0x64
c00176f7:	0f 84 41 01 00 00    	je     c001783e <Vm::faultHandler(regs*)+0x1e7>
c00176fd:	0f 87 48 01 00 00    	ja     c001784b <Vm::faultHandler(regs*)+0x1f4>
c0017703:	80 fa 3e             	cmp    dl,0x3e
c0017706:	0f 85 c2 05 00 00    	jne    c0017cce <Vm::faultHandler(regs*)+0x677>
c001770c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001770f:	be 01 00 00 00       	mov    esi,0x1
c0017714:	eb db                	jmp    c00176f1 <Vm::faultHandler(regs*)+0x9a>
c0017716:	80 fa 6d             	cmp    dl,0x6d
c0017719:	0f 84 ec 02 00 00    	je     c0017a0b <Vm::faultHandler(regs*)+0x3b4>
c001771f:	77 17                	ja     c0017738 <Vm::faultHandler(regs*)+0xe1>
c0017721:	80 fa 67             	cmp    dl,0x67
c0017724:	0f 84 48 01 00 00    	je     c0017872 <Vm::faultHandler(regs*)+0x21b>
c001772a:	80 fa 6c             	cmp    dl,0x6c
c001772d:	0f 84 69 02 00 00    	je     c001799c <Vm::faultHandler(regs*)+0x345>
c0017733:	e9 96 05 00 00       	jmp    c0017cce <Vm::faultHandler(regs*)+0x677>
c0017738:	80 fa 6f             	cmp    dl,0x6f
c001773b:	0f 84 f4 03 00 00    	je     c0017b35 <Vm::faultHandler(regs*)+0x4de>
c0017741:	0f 82 59 03 00 00    	jb     c0017aa0 <Vm::faultHandler(regs*)+0x449>
c0017747:	80 fa 9c             	cmp    dl,0x9c
c001774a:	0f 84 2f 01 00 00    	je     c001787f <Vm::faultHandler(regs*)+0x228>
c0017750:	e9 79 05 00 00       	jmp    c0017cce <Vm::faultHandler(regs*)+0x677>
c0017755:	80 fa ec             	cmp    dl,0xec
c0017758:	0f 84 14 05 00 00    	je     c0017c72 <Vm::faultHandler(regs*)+0x61b>
c001775e:	77 7b                	ja     c00177db <Vm::faultHandler(regs*)+0x184>
c0017760:	80 fa e4             	cmp    dl,0xe4
c0017763:	0f 84 93 04 00 00    	je     c0017bfc <Vm::faultHandler(regs*)+0x5a5>
c0017769:	77 53                	ja     c00177be <Vm::faultHandler(regs*)+0x167>
c001776b:	80 fa cd             	cmp    dl,0xcd
c001776e:	0f 84 d9 01 00 00    	je     c001794d <Vm::faultHandler(regs*)+0x2f6>
c0017774:	80 fa cf             	cmp    dl,0xcf
c0017777:	0f 85 51 05 00 00    	jne    c0017cce <Vm::faultHandler(regs*)+0x677>
c001777d:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0017780:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017783:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0017787:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001778a:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001778e:	81 ca 00 02 02 00    	or     edx,0x20200
c0017794:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017797:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001779b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00177a1:	66 c1 e8 09          	shr    ax,0x9
c00177a5:	83 e0 01             	and    eax,0x1
c00177a8:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00177ab:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00177ae:	83 c0 06             	add    eax,0x6
c00177b1:	25 ff ff 00 00       	and    eax,0xffff
c00177b6:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00177b9:	e9 0c 05 00 00       	jmp    c0017cca <Vm::faultHandler(regs*)+0x673>
c00177be:	80 fa e6             	cmp    dl,0xe6
c00177c1:	0f 84 7f 04 00 00    	je     c0017c46 <Vm::faultHandler(regs*)+0x5ef>
c00177c7:	0f 82 4b 04 00 00    	jb     c0017c18 <Vm::faultHandler(regs*)+0x5c1>
c00177cd:	80 fa e7             	cmp    dl,0xe7
c00177d0:	0f 84 87 04 00 00    	je     c0017c5d <Vm::faultHandler(regs*)+0x606>
c00177d6:	e9 f3 04 00 00       	jmp    c0017cce <Vm::faultHandler(regs*)+0x677>
c00177db:	80 fa ef             	cmp    dl,0xef
c00177de:	0f 84 d1 04 00 00    	je     c0017cb5 <Vm::faultHandler(regs*)+0x65e>
c00177e4:	77 28                	ja     c001780e <Vm::faultHandler(regs*)+0x1b7>
c00177e6:	80 fa ed             	cmp    dl,0xed
c00177e9:	0f 84 9f 04 00 00    	je     c0017c8e <Vm::faultHandler(regs*)+0x637>
c00177ef:	80 fa ee             	cmp    dl,0xee
c00177f2:	0f 85 d6 04 00 00    	jne    c0017cce <Vm::faultHandler(regs*)+0x677>
c00177f8:	50                   	push   eax
c00177f9:	50                   	push   eax
c00177fa:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00177fe:	50                   	push   eax
c00177ff:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017803:	50                   	push   eax
c0017804:	e8 a3 f9 ff ff       	call   c00171ac <Vm::outbv(unsigned short, unsigned char)>
c0017809:	e9 9f 04 00 00       	jmp    c0017cad <Vm::faultHandler(regs*)+0x656>
c001780e:	80 fa fa             	cmp    dl,0xfa
c0017811:	0f 84 69 01 00 00    	je     c0017980 <Vm::faultHandler(regs*)+0x329>
c0017817:	80 fa fb             	cmp    dl,0xfb
c001781a:	0f 84 6e 01 00 00    	je     c001798e <Vm::faultHandler(regs*)+0x337>
c0017820:	80 fa f3             	cmp    dl,0xf3
c0017823:	0f 85 a5 04 00 00    	jne    c0017cce <Vm::faultHandler(regs*)+0x677>
c0017829:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001782c:	e9 c0 fe ff ff       	jmp    c00176f1 <Vm::faultHandler(regs*)+0x9a>
c0017831:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017834:	be 02 00 00 00       	mov    esi,0x2
c0017839:	e9 b3 fe ff ff       	jmp    c00176f1 <Vm::faultHandler(regs*)+0x9a>
c001783e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017841:	be 03 00 00 00       	mov    esi,0x3
c0017846:	e9 a6 fe ff ff       	jmp    c00176f1 <Vm::faultHandler(regs*)+0x9a>
c001784b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001784e:	be 04 00 00 00       	mov    esi,0x4
c0017853:	e9 99 fe ff ff       	jmp    c00176f1 <Vm::faultHandler(regs*)+0x9a>
c0017858:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001785b:	be 05 00 00 00       	mov    esi,0x5
c0017860:	e9 8c fe ff ff       	jmp    c00176f1 <Vm::faultHandler(regs*)+0x9a>
c0017865:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017868:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001786d:	e9 7f fe ff ff       	jmp    c00176f1 <Vm::faultHandler(regs*)+0x9a>
c0017872:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017875:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001787a:	e9 72 fe ff ff       	jmp    c00176f1 <Vm::faultHandler(regs*)+0x9a>
c001787f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017882:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017886:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001788b:	74 30                	je     c00178bd <Vm::faultHandler(regs*)+0x266>
c001788d:	83 e9 04             	sub    ecx,0x4
c0017890:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017896:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001789c:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001789f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00178a2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00178a8:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00178ac:	0f 84 15 04 00 00    	je     c0017cc7 <Vm::faultHandler(regs*)+0x670>
c00178b2:	80 ce 02             	or     dh,0x2
c00178b5:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00178b8:	e9 0a 04 00 00       	jmp    c0017cc7 <Vm::faultHandler(regs*)+0x670>
c00178bd:	83 e9 02             	sub    ecx,0x2
c00178c0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00178c6:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00178c9:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00178cd:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00178d3:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00178d7:	74 05                	je     c00178de <Vm::faultHandler(regs*)+0x287>
c00178d9:	80 ce 02             	or     dh,0x2
c00178dc:	eb 03                	jmp    c00178e1 <Vm::faultHandler(regs*)+0x28a>
c00178de:	80 e6 fd             	and    dh,0xfd
c00178e1:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00178e5:	e9 dd 03 00 00       	jmp    c0017cc7 <Vm::faultHandler(regs*)+0x670>
c00178ea:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00178ef:	74 2a                	je     c001791b <Vm::faultHandler(regs*)+0x2c4>
c00178f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00178f3:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00178f9:	81 ca 00 02 02 00    	or     edx,0x20200
c00178ff:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017902:	8b 00                	mov    eax,DWORD PTR [eax]
c0017904:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001790a:	c1 e8 09             	shr    eax,0x9
c001790d:	83 e0 01             	and    eax,0x1
c0017910:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017913:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017916:	83 c0 04             	add    eax,0x4
c0017919:	eb 25                	jmp    c0017940 <Vm::faultHandler(regs*)+0x2e9>
c001791b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001791e:	81 ca 00 02 02 00    	or     edx,0x20200
c0017924:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017927:	66 8b 00             	mov    ax,WORD PTR [eax]
c001792a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017930:	66 c1 e8 09          	shr    ax,0x9
c0017934:	83 e0 01             	and    eax,0x1
c0017937:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001793a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001793d:	83 c0 02             	add    eax,0x2
c0017940:	25 ff ff 00 00       	and    eax,0xffff
c0017945:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017948:	e9 7a 03 00 00       	jmp    c0017cc7 <Vm::faultHandler(regs*)+0x670>
c001794d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017951:	3c ee                	cmp    al,0xee
c0017953:	75 10                	jne    c0017965 <Vm::faultHandler(regs*)+0x30e>
c0017955:	83 ec 0c             	sub    esp,0xc
c0017958:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001795b:	e8 e9 f8 ff ff       	call   c0017249 <Vm::mainloop3(unsigned long)>
c0017960:	e9 4b 03 00 00       	jmp    c0017cb0 <Vm::faultHandler(regs*)+0x659>
c0017965:	83 ec 0c             	sub    esp,0xc
c0017968:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001796c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017970:	51                   	push   ecx
c0017971:	50                   	push   eax
c0017972:	53                   	push   ebx
c0017973:	e8 e1 fb ff ff       	call   c0017559 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0017978:	83 c4 20             	add    esp,0x20
c001797b:	e9 4a 03 00 00       	jmp    c0017cca <Vm::faultHandler(regs*)+0x673>
c0017980:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017985:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0017989:	e9 39 03 00 00       	jmp    c0017cc7 <Vm::faultHandler(regs*)+0x670>
c001798e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017993:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0017997:	e9 2b 03 00 00       	jmp    c0017cc7 <Vm::faultHandler(regs*)+0x670>
c001799c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001799f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00179a4:	74 2b                	je     c00179d1 <Vm::faultHandler(regs*)+0x37a>
c00179a6:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00179ad:	76 22                	jbe    c00179d1 <Vm::faultHandler(regs*)+0x37a>
c00179af:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00179b3:	50                   	push   eax
c00179b4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00179b8:	50                   	push   eax
c00179b9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00179bd:	50                   	push   eax
c00179be:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00179c2:	50                   	push   eax
c00179c3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00179c7:	50                   	push   eax
c00179c8:	6a 6c                	push   0x6c
c00179ca:	6a 6c                	push   0x6c
c00179cc:	e9 b9 01 00 00       	jmp    c0017b8a <Vm::faultHandler(regs*)+0x533>
c00179d1:	83 ec 0c             	sub    esp,0xc
c00179d4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00179d8:	0f b7 f6             	movzx  esi,si
c00179db:	50                   	push   eax
c00179dc:	e8 b8 f7 ff ff       	call   c0017199 <Vm::inbv(unsigned short)>
c00179e1:	83 c4 0c             	add    esp,0xc
c00179e4:	0f b6 c0             	movzx  eax,al
c00179e7:	50                   	push   eax
c00179e8:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00179ec:	50                   	push   eax
c00179ed:	56                   	push   esi
c00179ee:	e8 24 fc ff ff       	call   c0017617 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00179f3:	83 c4 10             	add    esp,0x10
c00179f6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00179f9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00179fd:	74 03                	je     c0017a02 <Vm::faultHandler(regs*)+0x3ab>
c00179ff:	48                   	dec    eax
c0017a00:	eb 01                	jmp    c0017a03 <Vm::faultHandler(regs*)+0x3ac>
c0017a02:	40                   	inc    eax
c0017a03:	0f b7 c0             	movzx  eax,ax
c0017a06:	e9 8d 00 00 00       	jmp    c0017a98 <Vm::faultHandler(regs*)+0x441>
c0017a0b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017a0e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017a11:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0017a16:	74 29                	je     c0017a41 <Vm::faultHandler(regs*)+0x3ea>
c0017a18:	3d ff ff 00 00       	cmp    eax,0xffff
c0017a1d:	76 22                	jbe    c0017a41 <Vm::faultHandler(regs*)+0x3ea>
c0017a1f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017a23:	50                   	push   eax
c0017a24:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017a28:	50                   	push   eax
c0017a29:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017a2d:	50                   	push   eax
c0017a2e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017a32:	50                   	push   eax
c0017a33:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017a37:	50                   	push   eax
c0017a38:	6a 6d                	push   0x6d
c0017a3a:	6a 6d                	push   0x6d
c0017a3c:	e9 49 01 00 00       	jmp    c0017b8a <Vm::faultHandler(regs*)+0x533>
c0017a41:	0f b7 c8             	movzx  ecx,ax
c0017a44:	0f b7 f6             	movzx  esi,si
c0017a47:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017a4a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0017a4f:	74 20                	je     c0017a71 <Vm::faultHandler(regs*)+0x41a>
c0017a51:	ed                   	in     eax,dx
c0017a52:	55                   	push   ebp
c0017a53:	50                   	push   eax
c0017a54:	51                   	push   ecx
c0017a55:	56                   	push   esi
c0017a56:	e8 e7 fb ff ff       	call   c0017642 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0017a5b:	83 c4 10             	add    esp,0x10
c0017a5e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017a61:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017a65:	74 05                	je     c0017a6c <Vm::faultHandler(regs*)+0x415>
c0017a67:	83 e8 04             	sub    eax,0x4
c0017a6a:	eb 27                	jmp    c0017a93 <Vm::faultHandler(regs*)+0x43c>
c0017a6c:	83 c0 04             	add    eax,0x4
c0017a6f:	eb 22                	jmp    c0017a93 <Vm::faultHandler(regs*)+0x43c>
c0017a71:	66 ed                	in     ax,dx
c0017a73:	0f b7 c0             	movzx  eax,ax
c0017a76:	57                   	push   edi
c0017a77:	50                   	push   eax
c0017a78:	51                   	push   ecx
c0017a79:	56                   	push   esi
c0017a7a:	e8 ad fb ff ff       	call   c001762c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0017a7f:	83 c4 10             	add    esp,0x10
c0017a82:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017a85:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017a89:	74 05                	je     c0017a90 <Vm::faultHandler(regs*)+0x439>
c0017a8b:	83 e8 02             	sub    eax,0x2
c0017a8e:	eb 03                	jmp    c0017a93 <Vm::faultHandler(regs*)+0x43c>
c0017a90:	83 c0 02             	add    eax,0x2
c0017a93:	25 ff ff 00 00       	and    eax,0xffff
c0017a98:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0017a9b:	e9 27 02 00 00       	jmp    c0017cc7 <Vm::faultHandler(regs*)+0x670>
c0017aa0:	8d 46 ff             	lea    eax,[esi-0x1]
c0017aa3:	3c 05                	cmp    al,0x5
c0017aa5:	77 24                	ja     c0017acb <Vm::faultHandler(regs*)+0x474>
c0017aa7:	0f b6 c0             	movzx  eax,al
c0017aaa:	ff 24 85 90 4a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb570]
c0017ab1:	0f b7 fd             	movzx  edi,bp
c0017ab4:	eb 15                	jmp    c0017acb <Vm::faultHandler(regs*)+0x474>
c0017ab6:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0017aba:	eb 0f                	jmp    c0017acb <Vm::faultHandler(regs*)+0x474>
c0017abc:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0017ac0:	eb 09                	jmp    c0017acb <Vm::faultHandler(regs*)+0x474>
c0017ac2:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0017ac6:	eb 03                	jmp    c0017acb <Vm::faultHandler(regs*)+0x474>
c0017ac8:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0017acb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017ace:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0017ad3:	74 29                	je     c0017afe <Vm::faultHandler(regs*)+0x4a7>
c0017ad5:	3d ff ff 00 00       	cmp    eax,0xffff
c0017ada:	76 22                	jbe    c0017afe <Vm::faultHandler(regs*)+0x4a7>
c0017adc:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017ae0:	50                   	push   eax
c0017ae1:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017ae5:	50                   	push   eax
c0017ae6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017aea:	50                   	push   eax
c0017aeb:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017aef:	50                   	push   eax
c0017af0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017af4:	50                   	push   eax
c0017af5:	6a 6e                	push   0x6e
c0017af7:	6a 6e                	push   0x6e
c0017af9:	e9 8c 00 00 00       	jmp    c0017b8a <Vm::faultHandler(regs*)+0x533>
c0017afe:	0f b7 c0             	movzx  eax,ax
c0017b01:	52                   	push   edx
c0017b02:	52                   	push   edx
c0017b03:	50                   	push   eax
c0017b04:	57                   	push   edi
c0017b05:	e8 d9 fa ff ff       	call   c00175e3 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0017b0a:	59                   	pop    ecx
c0017b0b:	0f b6 c0             	movzx  eax,al
c0017b0e:	5e                   	pop    esi
c0017b0f:	50                   	push   eax
c0017b10:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017b14:	50                   	push   eax
c0017b15:	e8 92 f6 ff ff       	call   c00171ac <Vm::outbv(unsigned short, unsigned char)>
c0017b1a:	83 c4 10             	add    esp,0x10
c0017b1d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017b20:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017b24:	74 03                	je     c0017b29 <Vm::faultHandler(regs*)+0x4d2>
c0017b26:	48                   	dec    eax
c0017b27:	eb 01                	jmp    c0017b2a <Vm::faultHandler(regs*)+0x4d3>
c0017b29:	40                   	inc    eax
c0017b2a:	0f b7 c0             	movzx  eax,ax
c0017b2d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017b30:	e9 92 01 00 00       	jmp    c0017cc7 <Vm::faultHandler(regs*)+0x670>
c0017b35:	8d 46 ff             	lea    eax,[esi-0x1]
c0017b38:	3c 05                	cmp    al,0x5
c0017b3a:	77 1f                	ja     c0017b5b <Vm::faultHandler(regs*)+0x504>
c0017b3c:	0f b6 c0             	movzx  eax,al
c0017b3f:	ff 24 85 a8 4a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb558]
c0017b46:	89 ef                	mov    edi,ebp
c0017b48:	eb 11                	jmp    c0017b5b <Vm::faultHandler(regs*)+0x504>
c0017b4a:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0017b4d:	eb 0c                	jmp    c0017b5b <Vm::faultHandler(regs*)+0x504>
c0017b4f:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0017b52:	eb 07                	jmp    c0017b5b <Vm::faultHandler(regs*)+0x504>
c0017b54:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0017b57:	eb 02                	jmp    c0017b5b <Vm::faultHandler(regs*)+0x504>
c0017b59:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0017b5b:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017b5e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0017b63:	74 37                	je     c0017b9c <Vm::faultHandler(regs*)+0x545>
c0017b65:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0017b6b:	76 2f                	jbe    c0017b9c <Vm::faultHandler(regs*)+0x545>
c0017b6d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017b71:	50                   	push   eax
c0017b72:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017b76:	50                   	push   eax
c0017b77:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017b7b:	50                   	push   eax
c0017b7c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017b80:	50                   	push   eax
c0017b81:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017b85:	50                   	push   eax
c0017b86:	6a 6f                	push   0x6f
c0017b88:	6a 6f                	push   0x6f
c0017b8a:	68 36 4a 02 c0       	push   0xc0024a36
c0017b8f:	e8 e5 50 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0017b94:	83 c4 20             	add    esp,0x20
c0017b97:	e9 86 01 00 00       	jmp    c0017d22 <Vm::faultHandler(regs*)+0x6cb>
c0017b9c:	0f b7 d7             	movzx  edx,di
c0017b9f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017ba2:	0f b7 c6             	movzx  eax,si
c0017ba5:	81 e1 00 04 00 00    	and    ecx,0x400
c0017bab:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0017bae:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0017bb3:	74 1d                	je     c0017bd2 <Vm::faultHandler(regs*)+0x57b>
c0017bb5:	55                   	push   ebp
c0017bb6:	55                   	push   ebp
c0017bb7:	50                   	push   eax
c0017bb8:	52                   	push   edx
c0017bb9:	e8 48 fa ff ff       	call   c0017606 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0017bbe:	83 c4 10             	add    esp,0x10
c0017bc1:	89 fa                	mov    edx,edi
c0017bc3:	ef                   	out    dx,eax
c0017bc4:	85 c9                	test   ecx,ecx
c0017bc6:	74 05                	je     c0017bcd <Vm::faultHandler(regs*)+0x576>
c0017bc8:	83 ee 04             	sub    esi,0x4
c0017bcb:	eb 21                	jmp    c0017bee <Vm::faultHandler(regs*)+0x597>
c0017bcd:	83 c6 04             	add    esi,0x4
c0017bd0:	eb 1c                	jmp    c0017bee <Vm::faultHandler(regs*)+0x597>
c0017bd2:	55                   	push   ebp
c0017bd3:	55                   	push   ebp
c0017bd4:	50                   	push   eax
c0017bd5:	52                   	push   edx
c0017bd6:	e8 19 fa ff ff       	call   c00175f4 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0017bdb:	83 c4 10             	add    esp,0x10
c0017bde:	89 fa                	mov    edx,edi
c0017be0:	66 ef                	out    dx,ax
c0017be2:	85 c9                	test   ecx,ecx
c0017be4:	74 05                	je     c0017beb <Vm::faultHandler(regs*)+0x594>
c0017be6:	83 ee 02             	sub    esi,0x2
c0017be9:	eb 03                	jmp    c0017bee <Vm::faultHandler(regs*)+0x597>
c0017beb:	83 c6 02             	add    esi,0x2
c0017bee:	81 e6 ff ff 00 00    	and    esi,0xffff
c0017bf4:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0017bf7:	e9 cb 00 00 00       	jmp    c0017cc7 <Vm::faultHandler(regs*)+0x670>
c0017bfc:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017c03:	83 ec 0c             	sub    esp,0xc
c0017c06:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017c0a:	50                   	push   eax
c0017c0b:	e8 89 f5 ff ff       	call   c0017199 <Vm::inbv(unsigned short)>
c0017c10:	0f b6 c0             	movzx  eax,al
c0017c13:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017c16:	eb 3f                	jmp    c0017c57 <Vm::faultHandler(regs*)+0x600>
c0017c18:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0017c1d:	74 07                	je     c0017c26 <Vm::faultHandler(regs*)+0x5cf>
c0017c1f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017c23:	ed                   	in     eax,dx
c0017c24:	eb 14                	jmp    c0017c3a <Vm::faultHandler(regs*)+0x5e3>
c0017c26:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0017c29:	66 31 f6             	xor    si,si
c0017c2c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0017c2f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017c33:	66 ed                	in     ax,dx
c0017c35:	0f b7 c0             	movzx  eax,ax
c0017c38:	09 f0                	or     eax,esi
c0017c3a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017c3d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017c41:	e9 84 00 00 00       	jmp    c0017cca <Vm::faultHandler(regs*)+0x673>
c0017c46:	52                   	push   edx
c0017c47:	52                   	push   edx
c0017c48:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017c4c:	50                   	push   eax
c0017c4d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017c51:	50                   	push   eax
c0017c52:	e8 55 f5 ff ff       	call   c00171ac <Vm::outbv(unsigned short, unsigned char)>
c0017c57:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017c5b:	eb 53                	jmp    c0017cb0 <Vm::faultHandler(regs*)+0x659>
c0017c5d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017c60:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017c64:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0017c69:	74 03                	je     c0017c6e <Vm::faultHandler(regs*)+0x617>
c0017c6b:	ef                   	out    dx,eax
c0017c6c:	eb cf                	jmp    c0017c3d <Vm::faultHandler(regs*)+0x5e6>
c0017c6e:	66 ef                	out    dx,ax
c0017c70:	eb cb                	jmp    c0017c3d <Vm::faultHandler(regs*)+0x5e6>
c0017c72:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017c79:	83 ec 0c             	sub    esp,0xc
c0017c7c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017c80:	50                   	push   eax
c0017c81:	e8 13 f5 ff ff       	call   c0017199 <Vm::inbv(unsigned short)>
c0017c86:	0f b6 c0             	movzx  eax,al
c0017c89:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017c8c:	eb 1f                	jmp    c0017cad <Vm::faultHandler(regs*)+0x656>
c0017c8e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017c91:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0017c96:	74 03                	je     c0017c9b <Vm::faultHandler(regs*)+0x644>
c0017c98:	ed                   	in     eax,dx
c0017c99:	eb 0d                	jmp    c0017ca8 <Vm::faultHandler(regs*)+0x651>
c0017c9b:	66 ed                	in     ax,dx
c0017c9d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0017ca0:	0f b7 c0             	movzx  eax,ax
c0017ca3:	66 31 d2             	xor    dx,dx
c0017ca6:	09 d0                	or     eax,edx
c0017ca8:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017cab:	eb 1a                	jmp    c0017cc7 <Vm::faultHandler(regs*)+0x670>
c0017cad:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017cb0:	83 c4 10             	add    esp,0x10
c0017cb3:	eb 15                	jmp    c0017cca <Vm::faultHandler(regs*)+0x673>
c0017cb5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017cb8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017cbb:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0017cc0:	74 03                	je     c0017cc5 <Vm::faultHandler(regs*)+0x66e>
c0017cc2:	ef                   	out    dx,eax
c0017cc3:	eb 02                	jmp    c0017cc7 <Vm::faultHandler(regs*)+0x670>
c0017cc5:	66 ef                	out    dx,ax
c0017cc7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017cca:	b0 01                	mov    al,0x1
c0017ccc:	eb 56                	jmp    c0017d24 <Vm::faultHandler(regs*)+0x6cd>
c0017cce:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017cd2:	50                   	push   eax
c0017cd3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017cd7:	50                   	push   eax
c0017cd8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017cdc:	50                   	push   eax
c0017cdd:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017ce1:	50                   	push   eax
c0017ce2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017ce6:	50                   	push   eax
c0017ce7:	52                   	push   edx
c0017ce8:	52                   	push   edx
c0017ce9:	68 63 4a 02 c0       	push   0xc0024a63
c0017cee:	e8 86 4f ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0017cf3:	83 c4 20             	add    esp,0x20
c0017cf6:	83 ec 0c             	sub    esp,0xc
c0017cf9:	6a 60                	push   0x60
c0017cfb:	e8 99 f4 ff ff       	call   c0017199 <Vm::inbv(unsigned short)>
c0017d00:	83 c4 10             	add    esp,0x10
c0017d03:	3c 1c                	cmp    al,0x1c
c0017d05:	74 04                	je     c0017d0b <Vm::faultHandler(regs*)+0x6b4>
c0017d07:	3c 5a                	cmp    al,0x5a
c0017d09:	75 eb                	jne    c0017cf6 <Vm::faultHandler(regs*)+0x69f>
c0017d0b:	3c 5a                	cmp    al,0x5a
c0017d0d:	74 04                	je     c0017d13 <Vm::faultHandler(regs*)+0x6bc>
c0017d0f:	3c 1c                	cmp    al,0x1c
c0017d11:	75 0f                	jne    c0017d22 <Vm::faultHandler(regs*)+0x6cb>
c0017d13:	83 ec 0c             	sub    esp,0xc
c0017d16:	6a 60                	push   0x60
c0017d18:	e8 7c f4 ff ff       	call   c0017199 <Vm::inbv(unsigned short)>
c0017d1d:	83 c4 10             	add    esp,0x10
c0017d20:	eb e9                	jmp    c0017d0b <Vm::faultHandler(regs*)+0x6b4>
c0017d22:	31 c0                	xor    eax,eax
c0017d24:	83 c4 1c             	add    esp,0x1c
c0017d27:	5b                   	pop    ebx
c0017d28:	5e                   	pop    esi
c0017d29:	5f                   	pop    edi
c0017d2a:	5d                   	pop    ebp
c0017d2b:	c3                   	ret    

c0017d2c <Vm::fpuInternalTo32(unsigned long long)>:
c0017d2c:	57                   	push   edi
c0017d2d:	56                   	push   esi
c0017d2e:	53                   	push   ebx
c0017d2f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d37:	89 d6                	mov    esi,edx
c0017d39:	89 d7                	mov    edi,edx
c0017d3b:	89 c1                	mov    ecx,eax
c0017d3d:	c1 ef 14             	shr    edi,0x14
c0017d40:	89 d3                	mov    ebx,edx
c0017d42:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0017d48:	31 d2                	xor    edx,edx
c0017d4a:	89 f8                	mov    eax,edi
c0017d4c:	81 e6 00 00 00 80    	and    esi,0x80000000
c0017d52:	bf ff 00 00 00       	mov    edi,0xff
c0017d57:	05 80 fc ff ff       	add    eax,0xfffffc80
c0017d5c:	83 d2 ff             	adc    edx,0xffffffff
c0017d5f:	39 c7                	cmp    edi,eax
c0017d61:	bf 00 00 00 00       	mov    edi,0x0
c0017d66:	19 d7                	sbb    edi,edx
c0017d68:	72 16                	jb     c0017d80 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c0017d6a:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c0017d6e:	c1 e0 17             	shl    eax,0x17
c0017d71:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c0017d77:	09 f1                	or     ecx,esi
c0017d79:	09 c1                	or     ecx,eax
c0017d7b:	89 cf                	mov    edi,ecx
c0017d7d:	eb 05                	jmp    c0017d84 <Vm::fpuInternalTo32(unsigned long long)+0x58>
c0017d7f:	90                   	nop
c0017d80:	31 ff                	xor    edi,edi
c0017d82:	66 90                	xchg   ax,ax
c0017d84:	89 f8                	mov    eax,edi
c0017d86:	5b                   	pop    ebx
c0017d87:	5e                   	pop    esi
c0017d88:	5f                   	pop    edi
c0017d89:	c3                   	ret    

c0017d8a <Vm::fpuInternalTo64(unsigned long long)>:
c0017d8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d8e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017d92:	c3                   	ret    

c0017d93 <Vm::fpu32ToInternal(unsigned int)>:
c0017d93:	57                   	push   edi
c0017d94:	31 ff                	xor    edi,edi
c0017d96:	56                   	push   esi
c0017d97:	53                   	push   ebx
c0017d98:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017d9c:	89 cb                	mov    ebx,ecx
c0017d9e:	89 ce                	mov    esi,ecx
c0017da0:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0017da6:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c0017dac:	c1 e9 17             	shr    ecx,0x17
c0017daf:	89 f0                	mov    eax,esi
c0017db1:	0f b6 d1             	movzx  edx,cl
c0017db4:	81 c2 80 03 00 00    	add    edx,0x380
c0017dba:	89 d1                	mov    ecx,edx
c0017dbc:	89 fa                	mov    edx,edi
c0017dbe:	c1 e1 14             	shl    ecx,0x14
c0017dc1:	0f a4 c2 1d          	shld   edx,eax,0x1d
c0017dc5:	c1 e0 1d             	shl    eax,0x1d
c0017dc8:	89 d7                	mov    edi,edx
c0017dca:	89 c6                	mov    esi,eax
c0017dcc:	89 ca                	mov    edx,ecx
c0017dce:	89 f0                	mov    eax,esi
c0017dd0:	09 fa                	or     edx,edi
c0017dd2:	09 da                	or     edx,ebx
c0017dd4:	5b                   	pop    ebx
c0017dd5:	5e                   	pop    esi
c0017dd6:	5f                   	pop    edi
c0017dd7:	c3                   	ret    

c0017dd8 <Vm::fpu64ToInternal(unsigned long long)>:
c0017dd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ddc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017de0:	c3                   	ret    

c0017de1 <Vm::fpuFloatToLong(unsigned long long)>:
c0017de1:	57                   	push   edi
c0017de2:	31 c0                	xor    eax,eax
c0017de4:	56                   	push   esi
c0017de5:	31 d2                	xor    edx,edx
c0017de7:	53                   	push   ebx
c0017de8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017dec:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017df0:	89 d9                	mov    ecx,ebx
c0017df2:	c1 e9 14             	shr    ecx,0x14
c0017df5:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0017dfb:	89 cf                	mov    edi,ecx
c0017dfd:	81 ef ff 03 00 00    	sub    edi,0x3ff
c0017e03:	78 37                	js     c0017e3c <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0017e05:	89 d9                	mov    ecx,ebx
c0017e07:	89 f0                	mov    eax,esi
c0017e09:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0017e0f:	81 c9 00 00 10 00    	or     ecx,0x100000
c0017e15:	89 ca                	mov    edx,ecx
c0017e17:	b9 34 00 00 00       	mov    ecx,0x34
c0017e1c:	29 f9                	sub    ecx,edi
c0017e1e:	0f ad d0             	shrd   eax,edx,cl
c0017e21:	d3 fa                	sar    edx,cl
c0017e23:	f6 c1 20             	test   cl,0x20
c0017e26:	74 08                	je     c0017e30 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c0017e28:	89 d0                	mov    eax,edx
c0017e2a:	c1 fa 1f             	sar    edx,0x1f
c0017e2d:	8d 76 00             	lea    esi,[esi+0x0]
c0017e30:	85 db                	test   ebx,ebx
c0017e32:	79 08                	jns    c0017e3c <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0017e34:	f7 d8                	neg    eax
c0017e36:	83 d2 00             	adc    edx,0x0
c0017e39:	f7 da                	neg    edx
c0017e3b:	90                   	nop
c0017e3c:	5b                   	pop    ebx
c0017e3d:	5e                   	pop    esi
c0017e3e:	5f                   	pop    edi
c0017e3f:	c3                   	ret    

c0017e40 <Vm::fpuULongToFloat(unsigned long long)>:
c0017e40:	57                   	push   edi
c0017e41:	31 c9                	xor    ecx,ecx
c0017e43:	56                   	push   esi
c0017e44:	53                   	push   ebx
c0017e45:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017e49:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017e4d:	8d 76 00             	lea    esi,[esi+0x0]
c0017e50:	0f ba e7 14          	bt     edi,0x14
c0017e54:	72 0a                	jb     c0017e60 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c0017e56:	01 f6                	add    esi,esi
c0017e58:	11 ff                	adc    edi,edi
c0017e5a:	41                   	inc    ecx
c0017e5b:	eb f3                	jmp    c0017e50 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c0017e5d:	8d 76 00             	lea    esi,[esi+0x0]
c0017e60:	89 fa                	mov    edx,edi
c0017e62:	89 f0                	mov    eax,esi
c0017e64:	bb 33 04 00 00       	mov    ebx,0x433
c0017e69:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0017e6f:	29 cb                	sub    ebx,ecx
c0017e71:	89 d9                	mov    ecx,ebx
c0017e73:	5b                   	pop    ebx
c0017e74:	c1 e1 14             	shl    ecx,0x14
c0017e77:	5e                   	pop    esi
c0017e78:	09 ca                	or     edx,ecx
c0017e7a:	5f                   	pop    edi
c0017e7b:	c3                   	ret    

c0017e7c <Vm::fpuLongToFloat(long long)>:
c0017e7c:	56                   	push   esi
c0017e7d:	31 c0                	xor    eax,eax
c0017e7f:	53                   	push   ebx
c0017e80:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017e84:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017e88:	39 c8                	cmp    eax,ecx
c0017e8a:	19 d8                	sbb    eax,ebx
c0017e8c:	7d 06                	jge    c0017e94 <Vm::fpuLongToFloat(long long)+0x18>
c0017e8e:	31 f6                	xor    esi,esi
c0017e90:	eb 0e                	jmp    c0017ea0 <Vm::fpuLongToFloat(long long)+0x24>
c0017e92:	66 90                	xchg   ax,ax
c0017e94:	f7 d9                	neg    ecx
c0017e96:	be 01 00 00 00       	mov    esi,0x1
c0017e9b:	83 d3 00             	adc    ebx,0x0
c0017e9e:	f7 db                	neg    ebx
c0017ea0:	31 c0                	xor    eax,eax
c0017ea2:	66 90                	xchg   ax,ax
c0017ea4:	0f ba e3 14          	bt     ebx,0x14
c0017ea8:	72 0a                	jb     c0017eb4 <Vm::fpuLongToFloat(long long)+0x38>
c0017eaa:	01 c9                	add    ecx,ecx
c0017eac:	11 db                	adc    ebx,ebx
c0017eae:	40                   	inc    eax
c0017eaf:	eb f3                	jmp    c0017ea4 <Vm::fpuLongToFloat(long long)+0x28>
c0017eb1:	8d 76 00             	lea    esi,[esi+0x0]
c0017eb4:	ba 33 04 00 00       	mov    edx,0x433
c0017eb9:	29 c2                	sub    edx,eax
c0017ebb:	89 c8                	mov    eax,ecx
c0017ebd:	c1 e2 14             	shl    edx,0x14
c0017ec0:	89 d9                	mov    ecx,ebx
c0017ec2:	89 f3                	mov    ebx,esi
c0017ec4:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0017eca:	09 ca                	or     edx,ecx
c0017ecc:	84 db                	test   bl,bl
c0017ece:	74 08                	je     c0017ed8 <Vm::fpuLongToFloat(long long)+0x5c>
c0017ed0:	81 ca 00 00 00 80    	or     edx,0x80000000
c0017ed6:	66 90                	xchg   ax,ax
c0017ed8:	5b                   	pop    ebx
c0017ed9:	5e                   	pop    esi
c0017eda:	c3                   	ret    

c0017edb <Vm::fpuGet0()>:
c0017edb:	31 c0                	xor    eax,eax
c0017edd:	31 d2                	xor    edx,edx
c0017edf:	c3                   	ret    

c0017ee0 <Vm::fpuGet1()>:
c0017ee0:	b8 01 00 00 00       	mov    eax,0x1
c0017ee5:	31 d2                	xor    edx,edx
c0017ee7:	c3                   	ret    

c0017ee8 <Vm::fpuGetPi()>:
c0017ee8:	b8 03 00 00 00       	mov    eax,0x3
c0017eed:	31 d2                	xor    edx,edx
c0017eef:	c3                   	ret    

c0017ef0 <Vm::fpuGetLog2E()>:
c0017ef0:	83 ec 18             	sub    esp,0x18
c0017ef3:	68 c0 4a 02 c0       	push   0xc0024ac0
c0017ef8:	e8 0a b1 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c0017efd:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0017f02:	31 d2                	xor    edx,edx
c0017f04:	83 c4 1c             	add    esp,0x1c
c0017f07:	c3                   	ret    

c0017f08 <Vm::fpuGetLogE2()>:
c0017f08:	83 ec 18             	sub    esp,0x18
c0017f0b:	68 cc 4a 02 c0       	push   0xc0024acc
c0017f10:	e8 f2 b0 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c0017f15:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0017f1a:	31 d2                	xor    edx,edx
c0017f1c:	83 c4 1c             	add    esp,0x1c
c0017f1f:	c3                   	ret    

c0017f20 <Vm::fpuGetLog210()>:
c0017f20:	83 ec 18             	sub    esp,0x18
c0017f23:	68 d8 4a 02 c0       	push   0xc0024ad8
c0017f28:	e8 da b0 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c0017f2d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0017f32:	31 d2                	xor    edx,edx
c0017f34:	83 c4 1c             	add    esp,0x1c
c0017f37:	c3                   	ret    

c0017f38 <Vm::fpuGetLog102()>:
c0017f38:	83 ec 18             	sub    esp,0x18
c0017f3b:	68 e5 4a 02 c0       	push   0xc0024ae5
c0017f40:	e8 c2 b0 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c0017f45:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0017f4a:	31 d2                	xor    edx,edx
c0017f4c:	83 c4 1c             	add    esp,0x1c
c0017f4f:	c3                   	ret    

c0017f50 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c0017f50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017f54:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0017f58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f5c:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c0017f60:	0f 92 c0             	setb   al
c0017f63:	c3                   	ret    

c0017f64 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c0017f64:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017f68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f6c:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c0017f70:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c0017f74:	09 c2                	or     edx,eax
c0017f76:	0f 94 c0             	sete   al
c0017f79:	c3                   	ret    

c0017f7a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c0017f7a:	57                   	push   edi
c0017f7b:	56                   	push   esi
c0017f7c:	53                   	push   ebx
c0017f7d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017f81:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017f85:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017f89:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017f8d:	57                   	push   edi
c0017f8e:	56                   	push   esi
c0017f8f:	53                   	push   ebx
c0017f90:	51                   	push   ecx
c0017f91:	e8 ce ff ff ff       	call   c0017f64 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c0017f96:	83 c4 10             	add    esp,0x10
c0017f99:	88 c2                	mov    dl,al
c0017f9b:	31 c0                	xor    eax,eax
c0017f9d:	84 d2                	test   dl,dl
c0017f9f:	75 0f                	jne    c0017fb0 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c0017fa1:	57                   	push   edi
c0017fa2:	56                   	push   esi
c0017fa3:	53                   	push   ebx
c0017fa4:	51                   	push   ecx
c0017fa5:	e8 a6 ff ff ff       	call   c0017f50 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c0017faa:	83 c4 10             	add    esp,0x10
c0017fad:	8d 76 00             	lea    esi,[esi+0x0]
c0017fb0:	83 e0 01             	and    eax,0x1
c0017fb3:	5b                   	pop    ebx
c0017fb4:	88 c1                	mov    cl,al
c0017fb6:	83 e2 01             	and    edx,0x1
c0017fb9:	a0 41 9c 02 c0       	mov    al,ds:0xc0029c41
c0017fbe:	c1 e2 06             	shl    edx,0x6
c0017fc1:	83 e0 ba             	and    eax,0xffffffba
c0017fc4:	5e                   	pop    esi
c0017fc5:	09 c8                	or     eax,ecx
c0017fc7:	5f                   	pop    edi
c0017fc8:	09 d0                	or     eax,edx
c0017fca:	a2 41 9c 02 c0       	mov    ds:0xc0029c41,al
c0017fcf:	c3                   	ret    

c0017fd0 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c0017fd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017fd4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0017fdc:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c0017fe0:	c3                   	ret    

c0017fe1 <Vm::fpuAbs(unsigned long long)>:
c0017fe1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017fe5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017fe9:	c3                   	ret    

c0017fea <Vm::fpuChs(unsigned long long)>:
c0017fea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017fee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017ff2:	f7 d8                	neg    eax
c0017ff4:	83 d2 00             	adc    edx,0x0
c0017ff7:	f7 da                	neg    edx
c0017ff9:	c3                   	ret    

c0017ffa <Vm::fpuSub(unsigned long long, unsigned long long)>:
c0017ffa:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c0017ffe:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c0018003:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c0018007:	eb c7                	jmp    c0017fd0 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c0018009 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c0018009:	53                   	push   ebx
c001800a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001800e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018012:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018016:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001801a:	0f af ca             	imul   ecx,edx
c001801d:	0f af d8             	imul   ebx,eax
c0018020:	f7 e2                	mul    edx
c0018022:	01 d9                	add    ecx,ebx
c0018024:	5b                   	pop    ebx
c0018025:	01 ca                	add    edx,ecx
c0018027:	c3                   	ret    

c0018028 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c0018028:	83 ec 0c             	sub    esp,0xc
c001802b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001802f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018033:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018037:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001803b:	e8 10 97 00 00       	call   c0021750 <__udivdi3>
c0018040:	83 c4 1c             	add    esp,0x1c
c0018043:	c3                   	ret    

c0018044 <Vm::fpuSquare(unsigned long long)>:
c0018044:	50                   	push   eax
c0018045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018049:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001804d:	52                   	push   edx
c001804e:	50                   	push   eax
c001804f:	52                   	push   edx
c0018050:	50                   	push   eax
c0018051:	e8 b3 ff ff ff       	call   c0018009 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0018056:	83 c4 14             	add    esp,0x14
c0018059:	c3                   	ret    

c001805a <Vm::fpuGetReg(int)>:
c001805a:	83 ec 0c             	sub    esp,0xc
c001805d:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0018062:	76 10                	jbe    c0018074 <Vm::fpuGetReg(int)+0x1a>
c0018064:	83 ec 0c             	sub    esp,0xc
c0018067:	68 f2 4a 02 c0       	push   0xc0024af2
c001806c:	e8 96 af ff ff       	call   c0013007 <Krnl::panic(char const*)>
c0018071:	83 c4 10             	add    esp,0x10
c0018074:	a0 41 9c 02 c0       	mov    al,ds:0xc0029c41
c0018079:	b9 08 00 00 00       	mov    ecx,0x8
c001807e:	c0 e8 03             	shr    al,0x3
c0018081:	83 e0 07             	and    eax,0x7
c0018084:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0018088:	99                   	cdq    
c0018089:	f7 f9                	idiv   ecx
c001808b:	8b 04 d5 44 9c 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd63bc]
c0018092:	8b 14 d5 48 9c 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd63b8]
c0018099:	83 c4 0c             	add    esp,0xc
c001809c:	c3                   	ret    

c001809d <Vm::fpuSetReg(int, unsigned long long)>:
c001809d:	57                   	push   edi
c001809e:	56                   	push   esi
c001809f:	52                   	push   edx
c00180a0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00180a4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00180a8:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c00180ad:	76 11                	jbe    c00180c0 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c00180af:	83 ec 0c             	sub    esp,0xc
c00180b2:	68 05 4b 02 c0       	push   0xc0024b05
c00180b7:	e8 4b af ff ff       	call   c0013007 <Krnl::panic(char const*)>
c00180bc:	83 c4 10             	add    esp,0x10
c00180bf:	90                   	nop
c00180c0:	a0 41 9c 02 c0       	mov    al,ds:0xc0029c41
c00180c5:	b9 08 00 00 00       	mov    ecx,0x8
c00180ca:	c0 e8 03             	shr    al,0x3
c00180cd:	83 e0 07             	and    eax,0x7
c00180d0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00180d4:	99                   	cdq    
c00180d5:	f7 f9                	idiv   ecx
c00180d7:	89 34 d5 44 9c 02 c0 	mov    DWORD PTR [edx*8-0x3ffd63bc],esi
c00180de:	89 3c d5 48 9c 02 c0 	mov    DWORD PTR [edx*8-0x3ffd63b8],edi
c00180e5:	58                   	pop    eax
c00180e6:	5e                   	pop    esi
c00180e7:	5f                   	pop    edi
c00180e8:	c3                   	ret    

c00180e9 <Vm::fpuPush(unsigned long long)>:
c00180e9:	a0 41 9c 02 c0       	mov    al,ds:0xc0029c41
c00180ee:	c0 e8 03             	shr    al,0x3
c00180f1:	83 e0 07             	and    eax,0x7
c00180f4:	83 c0 07             	add    eax,0x7
c00180f7:	88 c2                	mov    dl,al
c00180f9:	83 e0 07             	and    eax,0x7
c00180fc:	83 e2 07             	and    edx,0x7
c00180ff:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c0018106:	8a 15 41 9c 02 c0    	mov    dl,BYTE PTR ds:0xc0029c41
c001810c:	83 e2 c7             	and    edx,0xffffffc7
c001810f:	09 ca                	or     edx,ecx
c0018111:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018115:	88 15 41 9c 02 c0    	mov    BYTE PTR ds:0xc0029c41,dl
c001811b:	89 0c c5 48 9c 02 c0 	mov    DWORD PTR [eax*8-0x3ffd63b8],ecx
c0018122:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018126:	89 14 c5 44 9c 02 c0 	mov    DWORD PTR [eax*8-0x3ffd63bc],edx
c001812d:	a1 84 9c 02 c0       	mov    eax,ds:0xc0029c84
c0018132:	83 f8 08             	cmp    eax,0x8
c0018135:	75 09                	jne    c0018140 <Vm::fpuPush(unsigned long long)+0x57>
c0018137:	80 0d 40 9c 02 c0 40 	or     BYTE PTR ds:0xc0029c40,0x40
c001813e:	c3                   	ret    
c001813f:	90                   	nop
c0018140:	40                   	inc    eax
c0018141:	a3 84 9c 02 c0       	mov    ds:0xc0029c84,eax
c0018146:	c3                   	ret    

c0018147 <Vm::fpuPop()>:
c0018147:	8a 0d 41 9c 02 c0    	mov    cl,BYTE PTR ds:0xc0029c41
c001814d:	53                   	push   ebx
c001814e:	c0 e9 03             	shr    cl,0x3
c0018151:	8a 1d 41 9c 02 c0    	mov    bl,BYTE PTR ds:0xc0029c41
c0018157:	83 e1 07             	and    ecx,0x7
c001815a:	83 e3 c7             	and    ebx,0xffffffc7
c001815d:	8b 04 cd 44 9c 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd63bc]
c0018164:	8b 14 cd 48 9c 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd63b8]
c001816b:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c0018172:	83 e1 38             	and    ecx,0x38
c0018175:	09 d9                	or     ecx,ebx
c0018177:	88 0d 41 9c 02 c0    	mov    BYTE PTR ds:0xc0029c41,cl
c001817d:	8b 0d 84 9c 02 c0    	mov    ecx,DWORD PTR ds:0xc0029c84
c0018183:	85 c9                	test   ecx,ecx
c0018185:	74 09                	je     c0018190 <Vm::fpuPop()+0x49>
c0018187:	49                   	dec    ecx
c0018188:	89 0d 84 9c 02 c0    	mov    DWORD PTR ds:0xc0029c84,ecx
c001818e:	eb 08                	jmp    c0018198 <Vm::fpuPop()+0x51>
c0018190:	80 0d 40 9c 02 c0 40 	or     BYTE PTR ds:0xc0029c40,0x40
c0018197:	90                   	nop
c0018198:	5b                   	pop    ebx
c0018199:	c3                   	ret    

c001819a <Vm::x87Handler(regs*)>:
c001819a:	55                   	push   ebp
c001819b:	57                   	push   edi
c001819c:	56                   	push   esi
c001819d:	53                   	push   ebx
c001819e:	83 ec 1c             	sub    esp,0x1c
c00181a1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00181a5:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c00181aa:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00181ad:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00181b5:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00181b9:	50                   	push   eax
c00181ba:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00181be:	50                   	push   eax
c00181bf:	8d 44 24 14          	lea    eax,[esp+0x14]
c00181c3:	50                   	push   eax
c00181c4:	53                   	push   ebx
c00181c5:	e8 56 a5 ff ff       	call   c0012720 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00181ca:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c00181cd:	83 c4 10             	add    esp,0x10
c00181d0:	89 c6                	mov    esi,eax
c00181d2:	80 fa d9             	cmp    dl,0xd9
c00181d5:	0f 85 79 01 00 00    	jne    c0018354 <Vm::x87Handler(regs*)+0x1ba>
c00181db:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00181df:	8d 50 20             	lea    edx,[eax+0x20]
c00181e2:	80 fa 0e             	cmp    dl,0xe
c00181e5:	0f 87 a5 00 00 00    	ja     c0018290 <Vm::x87Handler(regs*)+0xf6>
c00181eb:	0f b6 d2             	movzx  edx,dl
c00181ee:	ff 24 95 18 4b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdb4e8]
c00181f5:	8d 76 00             	lea    esi,[esi+0x0]
c00181f8:	e8 de fc ff ff       	call   c0017edb <Vm::fpuGet0()>
c00181fd:	eb 09                	jmp    c0018208 <Vm::x87Handler(regs*)+0x6e>
c00181ff:	90                   	nop
c0018200:	e8 db fc ff ff       	call   c0017ee0 <Vm::fpuGet1()>
c0018205:	8d 76 00             	lea    esi,[esi+0x0]
c0018208:	57                   	push   edi
c0018209:	57                   	push   edi
c001820a:	66 90                	xchg   ax,ax
c001820c:	52                   	push   edx
c001820d:	50                   	push   eax
c001820e:	e8 d6 fe ff ff       	call   c00180e9 <Vm::fpuPush(unsigned long long)>
c0018213:	90                   	nop
c0018214:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018218:	83 c4 10             	add    esp,0x10
c001821b:	90                   	nop
c001821c:	b0 01                	mov    al,0x1
c001821e:	e9 89 0a 00 00       	jmp    c0018cac <Vm::x87Handler(regs*)+0xb12>
c0018223:	90                   	nop
c0018224:	83 ec 0c             	sub    esp,0xc
c0018227:	6a 00                	push   0x0
c0018229:	e8 2c fe ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c001822e:	59                   	pop    ecx
c001822f:	5e                   	pop    esi
c0018230:	52                   	push   edx
c0018231:	50                   	push   eax
c0018232:	e8 b3 fd ff ff       	call   c0017fea <Vm::fpuChs(unsigned long long)>
c0018237:	eb 17                	jmp    c0018250 <Vm::x87Handler(regs*)+0xb6>
c0018239:	8d 76 00             	lea    esi,[esi+0x0]
c001823c:	83 ec 0c             	sub    esp,0xc
c001823f:	6a 00                	push   0x0
c0018241:	e8 14 fe ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c0018246:	5f                   	pop    edi
c0018247:	5d                   	pop    ebp
c0018248:	52                   	push   edx
c0018249:	50                   	push   eax
c001824a:	e8 92 fd ff ff       	call   c0017fe1 <Vm::fpuAbs(unsigned long long)>
c001824f:	90                   	nop
c0018250:	83 c4 0c             	add    esp,0xc
c0018253:	90                   	nop
c0018254:	52                   	push   edx
c0018255:	50                   	push   eax
c0018256:	66 90                	xchg   ax,ax
c0018258:	6a 00                	push   0x0
c001825a:	66 90                	xchg   ax,ax
c001825c:	e8 3c fe ff ff       	call   c001809d <Vm::fpuSetReg(int, unsigned long long)>
c0018261:	eb b1                	jmp    c0018214 <Vm::x87Handler(regs*)+0x7a>
c0018263:	90                   	nop
c0018264:	e8 b7 fc ff ff       	call   c0017f20 <Vm::fpuGetLog210()>
c0018269:	eb 9d                	jmp    c0018208 <Vm::x87Handler(regs*)+0x6e>
c001826b:	90                   	nop
c001826c:	e8 7f fc ff ff       	call   c0017ef0 <Vm::fpuGetLog2E()>
c0018271:	eb 95                	jmp    c0018208 <Vm::x87Handler(regs*)+0x6e>
c0018273:	90                   	nop
c0018274:	e8 6f fc ff ff       	call   c0017ee8 <Vm::fpuGetPi()>
c0018279:	eb 8d                	jmp    c0018208 <Vm::x87Handler(regs*)+0x6e>
c001827b:	90                   	nop
c001827c:	e8 b7 fc ff ff       	call   c0017f38 <Vm::fpuGetLog102()>
c0018281:	eb 85                	jmp    c0018208 <Vm::x87Handler(regs*)+0x6e>
c0018283:	90                   	nop
c0018284:	e8 7f fc ff ff       	call   c0017f08 <Vm::fpuGetLogE2()>
c0018289:	e9 7a ff ff ff       	jmp    c0018208 <Vm::x87Handler(regs*)+0x6e>
c001828e:	66 90                	xchg   ax,ax
c0018290:	8d 50 40             	lea    edx,[eax+0x40]
c0018293:	80 fa 07             	cmp    dl,0x7
c0018296:	77 18                	ja     c00182b0 <Vm::x87Handler(regs*)+0x116>
c0018298:	83 ec 0c             	sub    esp,0xc
c001829b:	2d c0 00 00 00       	sub    eax,0xc0
c00182a0:	50                   	push   eax
c00182a1:	e8 b4 fd ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c00182a6:	59                   	pop    ecx
c00182a7:	5e                   	pop    esi
c00182a8:	e9 5f ff ff ff       	jmp    c001820c <Vm::x87Handler(regs*)+0x72>
c00182ad:	8d 76 00             	lea    esi,[esi+0x0]
c00182b0:	8d 50 38             	lea    edx,[eax+0x38]
c00182b3:	80 fa 07             	cmp    dl,0x7
c00182b6:	77 3c                	ja     c00182f4 <Vm::x87Handler(regs*)+0x15a>
c00182b8:	83 ec 0c             	sub    esp,0xc
c00182bb:	2d c8 00 00 00       	sub    eax,0xc8
c00182c0:	50                   	push   eax
c00182c1:	e8 94 fd ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c00182c6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00182cd:	89 c6                	mov    esi,eax
c00182cf:	89 d7                	mov    edi,edx
c00182d1:	e8 84 fd ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c00182d6:	83 c4 0c             	add    esp,0xc
c00182d9:	52                   	push   edx
c00182da:	50                   	push   eax
c00182db:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00182df:	2d c8 00 00 00       	sub    eax,0xc8
c00182e4:	50                   	push   eax
c00182e5:	e8 b3 fd ff ff       	call   c001809d <Vm::fpuSetReg(int, unsigned long long)>
c00182ea:	83 c4 0c             	add    esp,0xc
c00182ed:	57                   	push   edi
c00182ee:	56                   	push   esi
c00182ef:	e9 64 ff ff ff       	jmp    c0018258 <Vm::x87Handler(regs*)+0xbe>
c00182f4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00182f8:	84 d2                	test   dl,dl
c00182fa:	75 10                	jne    c001830c <Vm::x87Handler(regs*)+0x172>
c00182fc:	83 ec 0c             	sub    esp,0xc
c00182ff:	ff 36                	push   DWORD PTR [esi]
c0018301:	e8 8d fa ff ff       	call   c0017d93 <Vm::fpu32ToInternal(unsigned int)>
c0018306:	e9 c9 00 00 00       	jmp    c00183d4 <Vm::x87Handler(regs*)+0x23a>
c001830b:	90                   	nop
c001830c:	80 fa 03             	cmp    dl,0x3
c001830f:	75 13                	jne    c0018324 <Vm::x87Handler(regs*)+0x18a>
c0018311:	e8 31 fe ff ff       	call   c0018147 <Vm::fpuPop()>
c0018316:	55                   	push   ebp
c0018317:	55                   	push   ebp
c0018318:	52                   	push   edx
c0018319:	50                   	push   eax
c001831a:	e8 0d fa ff ff       	call   c0017d2c <Vm::fpuInternalTo32(unsigned long long)>
c001831f:	e9 90 00 00 00       	jmp    c00183b4 <Vm::x87Handler(regs*)+0x21a>
c0018324:	80 fa 05             	cmp    dl,0x5
c0018327:	75 0f                	jne    c0018338 <Vm::x87Handler(regs*)+0x19e>
c0018329:	66 8b 06             	mov    ax,WORD PTR [esi]
c001832c:	66 a3 42 9c 02 c0    	mov    ds:0xc0029c42,ax
c0018332:	e9 ed 00 00 00       	jmp    c0018424 <Vm::x87Handler(regs*)+0x28a>
c0018337:	90                   	nop
c0018338:	31 c0                	xor    eax,eax
c001833a:	80 fa 07             	cmp    dl,0x7
c001833d:	0f 85 69 09 00 00    	jne    c0018cac <Vm::x87Handler(regs*)+0xb12>
c0018343:	66 a1 42 9c 02 c0    	mov    ax,ds:0xc0029c42
c0018349:	66 89 06             	mov    WORD PTR [esi],ax
c001834c:	e9 d3 00 00 00       	jmp    c0018424 <Vm::x87Handler(regs*)+0x28a>
c0018351:	8d 76 00             	lea    esi,[esi+0x0]
c0018354:	80 fa d8             	cmp    dl,0xd8
c0018357:	0f 84 d3 00 00 00    	je     c0018430 <Vm::x87Handler(regs*)+0x296>
c001835d:	80 fa dc             	cmp    dl,0xdc
c0018360:	0f 84 2a 02 00 00    	je     c0018590 <Vm::x87Handler(regs*)+0x3f6>
c0018366:	80 fa de             	cmp    dl,0xde
c0018369:	0f 84 f1 02 00 00    	je     c0018660 <Vm::x87Handler(regs*)+0x4c6>
c001836f:	80 fa dd             	cmp    dl,0xdd
c0018372:	0f 84 94 04 00 00    	je     c001880c <Vm::x87Handler(regs*)+0x672>
c0018378:	80 fa da             	cmp    dl,0xda
c001837b:	0f 84 5f 05 00 00    	je     c00188e0 <Vm::x87Handler(regs*)+0x746>
c0018381:	80 fa df             	cmp    dl,0xdf
c0018384:	0f 84 aa 05 00 00    	je     c0018934 <Vm::x87Handler(regs*)+0x79a>
c001838a:	31 c0                	xor    eax,eax
c001838c:	80 fa db             	cmp    dl,0xdb
c001838f:	0f 85 17 09 00 00    	jne    c0018cac <Vm::x87Handler(regs*)+0xb12>
c0018395:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0018399:	80 fa 03             	cmp    dl,0x3
c001839c:	0f 85 c2 06 00 00    	jne    c0018a64 <Vm::x87Handler(regs*)+0x8ca>
c00183a2:	e8 a0 fd ff ff       	call   c0018147 <Vm::fpuPop()>
c00183a7:	55                   	push   ebp
c00183a8:	55                   	push   ebp
c00183a9:	8d 76 00             	lea    esi,[esi+0x0]
c00183ac:	52                   	push   edx
c00183ad:	50                   	push   eax
c00183ae:	e8 2e fa ff ff       	call   c0017de1 <Vm::fpuFloatToLong(unsigned long long)>
c00183b3:	90                   	nop
c00183b4:	83 c4 10             	add    esp,0x10
c00183b7:	89 06                	mov    DWORD PTR [esi],eax
c00183b9:	eb 69                	jmp    c0018424 <Vm::x87Handler(regs*)+0x28a>
c00183bb:	90                   	nop
c00183bc:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00183c0:	84 d2                	test   dl,dl
c00183c2:	0f 85 2c 06 00 00    	jne    c00189f4 <Vm::x87Handler(regs*)+0x85a>
c00183c8:	57                   	push   edi
c00183c9:	57                   	push   edi
c00183ca:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00183cd:	ff 36                	push   DWORD PTR [esi]
c00183cf:	e8 04 fa ff ff       	call   c0017dd8 <Vm::fpu64ToInternal(unsigned long long)>
c00183d4:	5e                   	pop    esi
c00183d5:	5f                   	pop    edi
c00183d6:	52                   	push   edx
c00183d7:	50                   	push   eax
c00183d8:	e8 0c fd ff ff       	call   c00180e9 <Vm::fpuPush(unsigned long long)>
c00183dd:	8d 76 00             	lea    esi,[esi+0x0]
c00183e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00183e4:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00183e7:	e9 2c fe ff ff       	jmp    c0018218 <Vm::x87Handler(regs*)+0x7e>
c00183ec:	80 fa 03             	cmp    dl,0x3
c00183ef:	0f 85 2b 07 00 00    	jne    c0018b20 <Vm::x87Handler(regs*)+0x986>
c00183f5:	57                   	push   edi
c00183f6:	57                   	push   edi
c00183f7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00183fa:	ff 36                	push   DWORD PTR [esi]
c00183fc:	e8 d7 f9 ff ff       	call   c0017dd8 <Vm::fpu64ToInternal(unsigned long long)>
c0018401:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018408:	89 c6                	mov    esi,eax
c001840a:	89 d7                	mov    edi,edx
c001840c:	e8 49 fc ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c0018411:	57                   	push   edi
c0018412:	56                   	push   esi
c0018413:	52                   	push   edx
c0018414:	50                   	push   eax
c0018415:	e8 60 fb ff ff       	call   c0017f7a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001841a:	83 c4 20             	add    esp,0x20
c001841d:	e8 25 fd ff ff       	call   c0018147 <Vm::fpuPop()>
c0018422:	66 90                	xchg   ax,ax
c0018424:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018428:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001842b:	e9 ec fd ff ff       	jmp    c001821c <Vm::x87Handler(regs*)+0x82>
c0018430:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018434:	8d 50 40             	lea    edx,[eax+0x40]
c0018437:	80 fa 07             	cmp    dl,0x7
c001843a:	77 2c                	ja     c0018468 <Vm::x87Handler(regs*)+0x2ce>
c001843c:	83 ec 0c             	sub    esp,0xc
c001843f:	2d c0 00 00 00       	sub    eax,0xc0
c0018444:	50                   	push   eax
c0018445:	e8 10 fc ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c001844a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018451:	89 c6                	mov    esi,eax
c0018453:	89 d7                	mov    edi,edx
c0018455:	e8 00 fc ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c001845a:	57                   	push   edi
c001845b:	56                   	push   esi
c001845c:	52                   	push   edx
c001845d:	50                   	push   eax
c001845e:	e8 6d fb ff ff       	call   c0017fd0 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0018463:	eb 33                	jmp    c0018498 <Vm::x87Handler(regs*)+0x2fe>
c0018465:	8d 76 00             	lea    esi,[esi+0x0]
c0018468:	8d 50 38             	lea    edx,[eax+0x38]
c001846b:	80 fa 07             	cmp    dl,0x7
c001846e:	77 30                	ja     c00184a0 <Vm::x87Handler(regs*)+0x306>
c0018470:	83 ec 0c             	sub    esp,0xc
c0018473:	2d c8 00 00 00       	sub    eax,0xc8
c0018478:	50                   	push   eax
c0018479:	e8 dc fb ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c001847e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018485:	89 c6                	mov    esi,eax
c0018487:	89 d7                	mov    edi,edx
c0018489:	e8 cc fb ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c001848e:	57                   	push   edi
c001848f:	56                   	push   esi
c0018490:	52                   	push   edx
c0018491:	50                   	push   eax
c0018492:	e8 72 fb ff ff       	call   c0018009 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0018497:	90                   	nop
c0018498:	83 c4 1c             	add    esp,0x1c
c001849b:	e9 b4 fd ff ff       	jmp    c0018254 <Vm::x87Handler(regs*)+0xba>
c00184a0:	8d 50 30             	lea    edx,[eax+0x30]
c00184a3:	80 fa 07             	cmp    dl,0x7
c00184a6:	77 10                	ja     c00184b8 <Vm::x87Handler(regs*)+0x31e>
c00184a8:	83 ec 0c             	sub    esp,0xc
c00184ab:	2d d0 00 00 00       	sub    eax,0xd0
c00184b0:	e9 c3 03 00 00       	jmp    c0018878 <Vm::x87Handler(regs*)+0x6de>
c00184b5:	8d 76 00             	lea    esi,[esi+0x0]
c00184b8:	8d 50 28             	lea    edx,[eax+0x28]
c00184bb:	80 fa 07             	cmp    dl,0x7
c00184be:	77 10                	ja     c00184d0 <Vm::x87Handler(regs*)+0x336>
c00184c0:	83 ec 0c             	sub    esp,0xc
c00184c3:	2d d8 00 00 00       	sub    eax,0xd8
c00184c8:	e9 e7 03 00 00       	jmp    c00188b4 <Vm::x87Handler(regs*)+0x71a>
c00184cd:	8d 76 00             	lea    esi,[esi+0x0]
c00184d0:	8d 50 20             	lea    edx,[eax+0x20]
c00184d3:	80 fa 07             	cmp    dl,0x7
c00184d6:	77 1c                	ja     c00184f4 <Vm::x87Handler(regs*)+0x35a>
c00184d8:	83 ec 0c             	sub    esp,0xc
c00184db:	2d e0 00 00 00       	sub    eax,0xe0
c00184e0:	50                   	push   eax
c00184e1:	e8 74 fb ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c00184e6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00184ed:	89 c6                	mov    esi,eax
c00184ef:	89 d7                	mov    edi,edx
c00184f1:	eb 25                	jmp    c0018518 <Vm::x87Handler(regs*)+0x37e>
c00184f3:	90                   	nop
c00184f4:	8d 50 18             	lea    edx,[eax+0x18]
c00184f7:	80 fa 07             	cmp    dl,0x7
c00184fa:	77 30                	ja     c001852c <Vm::x87Handler(regs*)+0x392>
c00184fc:	83 ec 0c             	sub    esp,0xc
c00184ff:	6a 00                	push   0x0
c0018501:	e8 54 fb ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c0018506:	89 c6                	mov    esi,eax
c0018508:	89 d7                	mov    edi,edx
c001850a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001850e:	2d e8 00 00 00       	sub    eax,0xe8
c0018513:	89 04 24             	mov    DWORD PTR [esp],eax
c0018516:	66 90                	xchg   ax,ax
c0018518:	e8 3d fb ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c001851d:	57                   	push   edi
c001851e:	56                   	push   esi
c001851f:	52                   	push   edx
c0018520:	50                   	push   eax
c0018521:	e8 d4 fa ff ff       	call   c0017ffa <Vm::fpuSub(unsigned long long, unsigned long long)>
c0018526:	e9 6d ff ff ff       	jmp    c0018498 <Vm::x87Handler(regs*)+0x2fe>
c001852b:	90                   	nop
c001852c:	8d 50 10             	lea    edx,[eax+0x10]
c001852f:	80 fa 07             	cmp    dl,0x7
c0018532:	77 1c                	ja     c0018550 <Vm::x87Handler(regs*)+0x3b6>
c0018534:	83 ec 0c             	sub    esp,0xc
c0018537:	2d f0 00 00 00       	sub    eax,0xf0
c001853c:	50                   	push   eax
c001853d:	e8 18 fb ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c0018542:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018549:	89 c6                	mov    esi,eax
c001854b:	89 d7                	mov    edi,edx
c001854d:	eb 25                	jmp    c0018574 <Vm::x87Handler(regs*)+0x3da>
c001854f:	90                   	nop
c0018550:	3c f7                	cmp    al,0xf7
c0018552:	0f 86 00 04 00 00    	jbe    c0018958 <Vm::x87Handler(regs*)+0x7be>
c0018558:	83 ec 0c             	sub    esp,0xc
c001855b:	6a 00                	push   0x0
c001855d:	e8 f8 fa ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c0018562:	89 c6                	mov    esi,eax
c0018564:	89 d7                	mov    edi,edx
c0018566:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001856a:	2d f8 00 00 00       	sub    eax,0xf8
c001856f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018572:	66 90                	xchg   ax,ax
c0018574:	e8 e1 fa ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c0018579:	57                   	push   edi
c001857a:	56                   	push   esi
c001857b:	52                   	push   edx
c001857c:	50                   	push   eax
c001857d:	e8 a6 fa ff ff       	call   c0018028 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0018582:	83 c4 1c             	add    esp,0x1c
c0018585:	52                   	push   edx
c0018586:	50                   	push   eax
c0018587:	6a 00                	push   0x0
c0018589:	e9 6a 02 00 00       	jmp    c00187f8 <Vm::x87Handler(regs*)+0x65e>
c001858e:	66 90                	xchg   ax,ax
c0018590:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018594:	8d 50 40             	lea    edx,[eax+0x40]
c0018597:	80 fa 07             	cmp    dl,0x7
c001859a:	77 38                	ja     c00185d4 <Vm::x87Handler(regs*)+0x43a>
c001859c:	83 ec 0c             	sub    esp,0xc
c001859f:	2d c0 00 00 00       	sub    eax,0xc0
c00185a4:	50                   	push   eax
c00185a5:	e8 b0 fa ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c00185aa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00185b1:	89 c6                	mov    esi,eax
c00185b3:	89 d7                	mov    edi,edx
c00185b5:	e8 a0 fa ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c00185ba:	57                   	push   edi
c00185bb:	56                   	push   esi
c00185bc:	52                   	push   edx
c00185bd:	50                   	push   eax
c00185be:	e8 0d fa ff ff       	call   c0017fd0 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00185c3:	83 c4 1c             	add    esp,0x1c
c00185c6:	52                   	push   edx
c00185c7:	50                   	push   eax
c00185c8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00185cc:	2d c0 00 00 00       	sub    eax,0xc0
c00185d1:	eb 41                	jmp    c0018614 <Vm::x87Handler(regs*)+0x47a>
c00185d3:	90                   	nop
c00185d4:	8d 50 38             	lea    edx,[eax+0x38]
c00185d7:	80 fa 07             	cmp    dl,0x7
c00185da:	77 40                	ja     c001861c <Vm::x87Handler(regs*)+0x482>
c00185dc:	83 ec 0c             	sub    esp,0xc
c00185df:	2d c8 00 00 00       	sub    eax,0xc8
c00185e4:	50                   	push   eax
c00185e5:	e8 70 fa ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c00185ea:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00185f1:	89 c6                	mov    esi,eax
c00185f3:	89 d7                	mov    edi,edx
c00185f5:	e8 60 fa ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c00185fa:	57                   	push   edi
c00185fb:	56                   	push   esi
c00185fc:	52                   	push   edx
c00185fd:	50                   	push   eax
c00185fe:	e8 06 fa ff ff       	call   c0018009 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0018603:	83 c4 1c             	add    esp,0x1c
c0018606:	52                   	push   edx
c0018607:	50                   	push   eax
c0018608:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001860c:	2d c8 00 00 00       	sub    eax,0xc8
c0018611:	8d 76 00             	lea    esi,[esi+0x0]
c0018614:	50                   	push   eax
c0018615:	e9 42 fc ff ff       	jmp    c001825c <Vm::x87Handler(regs*)+0xc2>
c001861a:	66 90                	xchg   ax,ax
c001861c:	83 c0 18             	add    eax,0x18
c001861f:	3c 07                	cmp    al,0x7
c0018621:	0f 87 6d 04 00 00    	ja     c0018a94 <Vm::x87Handler(regs*)+0x8fa>
c0018627:	83 ec 0c             	sub    esp,0xc
c001862a:	6a 00                	push   0x0
c001862c:	e8 29 fa ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c0018631:	89 c6                	mov    esi,eax
c0018633:	89 d7                	mov    edi,edx
c0018635:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018639:	2d e8 00 00 00       	sub    eax,0xe8
c001863e:	89 04 24             	mov    DWORD PTR [esp],eax
c0018641:	e8 14 fa ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c0018646:	57                   	push   edi
c0018647:	56                   	push   esi
c0018648:	52                   	push   edx
c0018649:	50                   	push   eax
c001864a:	e8 ab f9 ff ff       	call   c0017ffa <Vm::fpuSub(unsigned long long, unsigned long long)>
c001864f:	83 c4 1c             	add    esp,0x1c
c0018652:	52                   	push   edx
c0018653:	50                   	push   eax
c0018654:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018658:	2d e8 00 00 00       	sub    eax,0xe8
c001865d:	eb b5                	jmp    c0018614 <Vm::x87Handler(regs*)+0x47a>
c001865f:	90                   	nop
c0018660:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018664:	8d 50 40             	lea    edx,[eax+0x40]
c0018667:	80 fa 07             	cmp    dl,0x7
c001866a:	77 3c                	ja     c00186a8 <Vm::x87Handler(regs*)+0x50e>
c001866c:	83 ec 0c             	sub    esp,0xc
c001866f:	2d c0 00 00 00       	sub    eax,0xc0
c0018674:	50                   	push   eax
c0018675:	e8 e0 f9 ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c001867a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018681:	89 c6                	mov    esi,eax
c0018683:	89 d7                	mov    edi,edx
c0018685:	e8 d0 f9 ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c001868a:	57                   	push   edi
c001868b:	56                   	push   esi
c001868c:	52                   	push   edx
c001868d:	50                   	push   eax
c001868e:	e8 3d f9 ff ff       	call   c0017fd0 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0018693:	83 c4 1c             	add    esp,0x1c
c0018696:	52                   	push   edx
c0018697:	50                   	push   eax
c0018698:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001869c:	2d c0 00 00 00       	sub    eax,0xc0
c00186a1:	e9 b2 01 00 00       	jmp    c0018858 <Vm::x87Handler(regs*)+0x6be>
c00186a6:	66 90                	xchg   ax,ax
c00186a8:	8d 50 20             	lea    edx,[eax+0x20]
c00186ab:	80 fa 07             	cmp    dl,0x7
c00186ae:	77 3c                	ja     c00186ec <Vm::x87Handler(regs*)+0x552>
c00186b0:	83 ec 0c             	sub    esp,0xc
c00186b3:	2d e0 00 00 00       	sub    eax,0xe0
c00186b8:	50                   	push   eax
c00186b9:	e8 9c f9 ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c00186be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00186c5:	89 c6                	mov    esi,eax
c00186c7:	89 d7                	mov    edi,edx
c00186c9:	e8 8c f9 ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c00186ce:	57                   	push   edi
c00186cf:	56                   	push   esi
c00186d0:	52                   	push   edx
c00186d1:	50                   	push   eax
c00186d2:	e8 23 f9 ff ff       	call   c0017ffa <Vm::fpuSub(unsigned long long, unsigned long long)>
c00186d7:	83 c4 1c             	add    esp,0x1c
c00186da:	52                   	push   edx
c00186db:	50                   	push   eax
c00186dc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00186e0:	2d e0 00 00 00       	sub    eax,0xe0
c00186e5:	e9 6e 01 00 00       	jmp    c0018858 <Vm::x87Handler(regs*)+0x6be>
c00186ea:	66 90                	xchg   ax,ax
c00186ec:	8d 50 18             	lea    edx,[eax+0x18]
c00186ef:	80 fa 07             	cmp    dl,0x7
c00186f2:	77 3c                	ja     c0018730 <Vm::x87Handler(regs*)+0x596>
c00186f4:	83 ec 0c             	sub    esp,0xc
c00186f7:	6a 00                	push   0x0
c00186f9:	e8 5c f9 ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c00186fe:	89 c6                	mov    esi,eax
c0018700:	89 d7                	mov    edi,edx
c0018702:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018706:	2d e8 00 00 00       	sub    eax,0xe8
c001870b:	89 04 24             	mov    DWORD PTR [esp],eax
c001870e:	e8 47 f9 ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c0018713:	57                   	push   edi
c0018714:	56                   	push   esi
c0018715:	52                   	push   edx
c0018716:	50                   	push   eax
c0018717:	e8 de f8 ff ff       	call   c0017ffa <Vm::fpuSub(unsigned long long, unsigned long long)>
c001871c:	83 c4 1c             	add    esp,0x1c
c001871f:	52                   	push   edx
c0018720:	50                   	push   eax
c0018721:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018725:	2d e8 00 00 00       	sub    eax,0xe8
c001872a:	e9 29 01 00 00       	jmp    c0018858 <Vm::x87Handler(regs*)+0x6be>
c001872f:	90                   	nop
c0018730:	8d 50 38             	lea    edx,[eax+0x38]
c0018733:	80 fa 07             	cmp    dl,0x7
c0018736:	77 3c                	ja     c0018774 <Vm::x87Handler(regs*)+0x5da>
c0018738:	83 ec 0c             	sub    esp,0xc
c001873b:	2d c8 00 00 00       	sub    eax,0xc8
c0018740:	50                   	push   eax
c0018741:	e8 14 f9 ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c0018746:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001874d:	89 c6                	mov    esi,eax
c001874f:	89 d7                	mov    edi,edx
c0018751:	e8 04 f9 ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c0018756:	57                   	push   edi
c0018757:	56                   	push   esi
c0018758:	52                   	push   edx
c0018759:	50                   	push   eax
c001875a:	e8 aa f8 ff ff       	call   c0018009 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001875f:	83 c4 1c             	add    esp,0x1c
c0018762:	52                   	push   edx
c0018763:	50                   	push   eax
c0018764:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018768:	2d c8 00 00 00       	sub    eax,0xc8
c001876d:	e9 82 00 00 00       	jmp    c00187f4 <Vm::x87Handler(regs*)+0x65a>
c0018772:	66 90                	xchg   ax,ax
c0018774:	3c f7                	cmp    al,0xf7
c0018776:	76 38                	jbe    c00187b0 <Vm::x87Handler(regs*)+0x616>
c0018778:	83 ec 0c             	sub    esp,0xc
c001877b:	6a 00                	push   0x0
c001877d:	e8 d8 f8 ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c0018782:	89 c6                	mov    esi,eax
c0018784:	89 d7                	mov    edi,edx
c0018786:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001878a:	2d f8 00 00 00       	sub    eax,0xf8
c001878f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018792:	e8 c3 f8 ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c0018797:	57                   	push   edi
c0018798:	56                   	push   esi
c0018799:	52                   	push   edx
c001879a:	50                   	push   eax
c001879b:	e8 88 f8 ff ff       	call   c0018028 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00187a0:	83 c4 1c             	add    esp,0x1c
c00187a3:	52                   	push   edx
c00187a4:	50                   	push   eax
c00187a5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00187a9:	2d f8 00 00 00       	sub    eax,0xf8
c00187ae:	eb 44                	jmp    c00187f4 <Vm::x87Handler(regs*)+0x65a>
c00187b0:	8d 50 10             	lea    edx,[eax+0x10]
c00187b3:	80 fa 07             	cmp    dl,0x7
c00187b6:	0f 87 6c 01 00 00    	ja     c0018928 <Vm::x87Handler(regs*)+0x78e>
c00187bc:	83 ec 0c             	sub    esp,0xc
c00187bf:	2d f0 00 00 00       	sub    eax,0xf0
c00187c4:	50                   	push   eax
c00187c5:	e8 90 f8 ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c00187ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00187d1:	89 c6                	mov    esi,eax
c00187d3:	89 d7                	mov    edi,edx
c00187d5:	e8 80 f8 ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c00187da:	57                   	push   edi
c00187db:	56                   	push   esi
c00187dc:	52                   	push   edx
c00187dd:	50                   	push   eax
c00187de:	e8 45 f8 ff ff       	call   c0018028 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00187e3:	83 c4 1c             	add    esp,0x1c
c00187e6:	52                   	push   edx
c00187e7:	50                   	push   eax
c00187e8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00187ec:	2d f0 00 00 00       	sub    eax,0xf0
c00187f1:	8d 76 00             	lea    esi,[esi+0x0]
c00187f4:	50                   	push   eax
c00187f5:	8d 76 00             	lea    esi,[esi+0x0]
c00187f8:	e8 a0 f8 ff ff       	call   c001809d <Vm::fpuSetReg(int, unsigned long long)>
c00187fd:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018801:	e8 41 f9 ff ff       	call   c0018147 <Vm::fpuPop()>
c0018806:	e9 0d fa ff ff       	jmp    c0018218 <Vm::x87Handler(regs*)+0x7e>
c001880b:	90                   	nop
c001880c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018810:	8d 50 30             	lea    edx,[eax+0x30]
c0018813:	80 fa 07             	cmp    dl,0x7
c0018816:	77 20                	ja     c0018838 <Vm::x87Handler(regs*)+0x69e>
c0018818:	83 ec 0c             	sub    esp,0xc
c001881b:	6a 00                	push   0x0
c001881d:	e8 38 f8 ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c0018822:	83 c4 0c             	add    esp,0xc
c0018825:	52                   	push   edx
c0018826:	50                   	push   eax
c0018827:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001882b:	2d d0 00 00 00       	sub    eax,0xd0
c0018830:	e9 df fd ff ff       	jmp    c0018614 <Vm::x87Handler(regs*)+0x47a>
c0018835:	8d 76 00             	lea    esi,[esi+0x0]
c0018838:	8d 50 28             	lea    edx,[eax+0x28]
c001883b:	80 fa 07             	cmp    dl,0x7
c001883e:	77 28                	ja     c0018868 <Vm::x87Handler(regs*)+0x6ce>
c0018840:	83 ec 0c             	sub    esp,0xc
c0018843:	6a 00                	push   0x0
c0018845:	e8 10 f8 ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c001884a:	83 c4 0c             	add    esp,0xc
c001884d:	52                   	push   edx
c001884e:	50                   	push   eax
c001884f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018853:	2d d8 00 00 00       	sub    eax,0xd8
c0018858:	50                   	push   eax
c0018859:	e8 3f f8 ff ff       	call   c001809d <Vm::fpuSetReg(int, unsigned long long)>
c001885e:	e8 e4 f8 ff ff       	call   c0018147 <Vm::fpuPop()>
c0018863:	e9 ac f9 ff ff       	jmp    c0018214 <Vm::x87Handler(regs*)+0x7a>
c0018868:	8d 50 20             	lea    edx,[eax+0x20]
c001886b:	80 fa 07             	cmp    dl,0x7
c001886e:	77 30                	ja     c00188a0 <Vm::x87Handler(regs*)+0x706>
c0018870:	83 ec 0c             	sub    esp,0xc
c0018873:	2d e0 00 00 00       	sub    eax,0xe0
c0018878:	50                   	push   eax
c0018879:	e8 dc f7 ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c001887e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018885:	89 c6                	mov    esi,eax
c0018887:	89 d7                	mov    edi,edx
c0018889:	e8 cc f7 ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c001888e:	57                   	push   edi
c001888f:	56                   	push   esi
c0018890:	52                   	push   edx
c0018891:	50                   	push   eax
c0018892:	e8 e3 f6 ff ff       	call   c0017f7a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0018897:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001889b:	e9 78 02 00 00       	jmp    c0018b18 <Vm::x87Handler(regs*)+0x97e>
c00188a0:	8d 50 18             	lea    edx,[eax+0x18]
c00188a3:	80 fa 07             	cmp    dl,0x7
c00188a6:	0f 87 10 fb ff ff    	ja     c00183bc <Vm::x87Handler(regs*)+0x222>
c00188ac:	83 ec 0c             	sub    esp,0xc
c00188af:	2d e8 00 00 00       	sub    eax,0xe8
c00188b4:	50                   	push   eax
c00188b5:	e8 a0 f7 ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c00188ba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00188c1:	89 c6                	mov    esi,eax
c00188c3:	89 d7                	mov    edi,edx
c00188c5:	e8 90 f7 ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c00188ca:	57                   	push   edi
c00188cb:	56                   	push   esi
c00188cc:	52                   	push   edx
c00188cd:	50                   	push   eax
c00188ce:	e8 a7 f6 ff ff       	call   c0017f7a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00188d3:	83 c4 20             	add    esp,0x20
c00188d6:	e8 6c f8 ff ff       	call   c0018147 <Vm::fpuPop()>
c00188db:	eb 6f                	jmp    c001894c <Vm::x87Handler(regs*)+0x7b2>
c00188dd:	8d 76 00             	lea    esi,[esi+0x0]
c00188e0:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c00188e4:	0f 85 22 01 00 00    	jne    c0018a0c <Vm::x87Handler(regs*)+0x872>
c00188ea:	66 90                	xchg   ax,ax
c00188ec:	83 ec 0c             	sub    esp,0xc
c00188ef:	6a 01                	push   0x1
c00188f1:	e8 64 f7 ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c00188f6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00188fd:	89 c6                	mov    esi,eax
c00188ff:	89 d7                	mov    edi,edx
c0018901:	e8 54 f7 ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c0018906:	57                   	push   edi
c0018907:	56                   	push   esi
c0018908:	52                   	push   edx
c0018909:	50                   	push   eax
c001890a:	e8 6b f6 ff ff       	call   c0017f7a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001890f:	83 c4 20             	add    esp,0x20
c0018912:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018916:	e8 2c f8 ff ff       	call   c0018147 <Vm::fpuPop()>
c001891b:	e8 27 f8 ff ff       	call   c0018147 <Vm::fpuPop()>
c0018920:	e9 f7 f8 ff ff       	jmp    c001821c <Vm::x87Handler(regs*)+0x82>
c0018925:	8d 76 00             	lea    esi,[esi+0x0]
c0018928:	3c d9                	cmp    al,0xd9
c001892a:	0f 85 e8 02 00 00    	jne    c0018c18 <Vm::x87Handler(regs*)+0xa7e>
c0018930:	eb ba                	jmp    c00188ec <Vm::x87Handler(regs*)+0x752>
c0018932:	66 90                	xchg   ax,ax
c0018934:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0018938:	0f 85 2a 03 00 00    	jne    c0018c68 <Vm::x87Handler(regs*)+0xace>
c001893e:	0f b7 05 40 9c 02 c0 	movzx  eax,WORD PTR ds:0xc0029c40
c0018945:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0018949:	8d 76 00             	lea    esi,[esi+0x0]
c001894c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018950:	e9 c7 f8 ff ff       	jmp    c001821c <Vm::x87Handler(regs*)+0x82>
c0018955:	8d 76 00             	lea    esi,[esi+0x0]
c0018958:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001895c:	84 d2                	test   dl,dl
c001895e:	75 10                	jne    c0018970 <Vm::x87Handler(regs*)+0x7d6>
c0018960:	83 ec 0c             	sub    esp,0xc
c0018963:	ff 36                	push   DWORD PTR [esi]
c0018965:	e8 29 f4 ff ff       	call   c0017d93 <Vm::fpu32ToInternal(unsigned int)>
c001896a:	e9 39 01 00 00       	jmp    c0018aa8 <Vm::x87Handler(regs*)+0x90e>
c001896f:	90                   	nop
c0018970:	80 fa 01             	cmp    dl,0x1
c0018973:	75 0f                	jne    c0018984 <Vm::x87Handler(regs*)+0x7ea>
c0018975:	83 ec 0c             	sub    esp,0xc
c0018978:	ff 36                	push   DWORD PTR [esi]
c001897a:	e8 14 f4 ff ff       	call   c0017d93 <Vm::fpu32ToInternal(unsigned int)>
c001897f:	e9 b4 02 00 00       	jmp    c0018c38 <Vm::x87Handler(regs*)+0xa9e>
c0018984:	80 fa 04             	cmp    dl,0x4
c0018987:	75 0f                	jne    c0018998 <Vm::x87Handler(regs*)+0x7fe>
c0018989:	83 ec 0c             	sub    esp,0xc
c001898c:	ff 36                	push   DWORD PTR [esi]
c001898e:	e8 00 f4 ff ff       	call   c0017d93 <Vm::fpu32ToInternal(unsigned int)>
c0018993:	e9 9c 01 00 00       	jmp    c0018b34 <Vm::x87Handler(regs*)+0x99a>
c0018998:	80 fa 05             	cmp    dl,0x5
c001899b:	75 1b                	jne    c00189b8 <Vm::x87Handler(regs*)+0x81e>
c001899d:	83 ec 0c             	sub    esp,0xc
c00189a0:	6a 00                	push   0x0
c00189a2:	e8 b3 f6 ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c00189a7:	89 c7                	mov    edi,eax
c00189a9:	89 d5                	mov    ebp,edx
c00189ab:	58                   	pop    eax
c00189ac:	ff 36                	push   DWORD PTR [esi]
c00189ae:	e8 e0 f3 ff ff       	call   c0017d93 <Vm::fpu32ToInternal(unsigned int)>
c00189b3:	e9 bc 01 00 00       	jmp    c0018b74 <Vm::x87Handler(regs*)+0x9da>
c00189b8:	80 fa 06             	cmp    dl,0x6
c00189bb:	75 0f                	jne    c00189cc <Vm::x87Handler(regs*)+0x832>
c00189bd:	83 ec 0c             	sub    esp,0xc
c00189c0:	ff 36                	push   DWORD PTR [esi]
c00189c2:	e8 cc f3 ff ff       	call   c0017d93 <Vm::fpu32ToInternal(unsigned int)>
c00189c7:	e9 cc 01 00 00       	jmp    c0018b98 <Vm::x87Handler(regs*)+0x9fe>
c00189cc:	31 c0                	xor    eax,eax
c00189ce:	80 fa 07             	cmp    dl,0x7
c00189d1:	0f 85 d5 02 00 00    	jne    c0018cac <Vm::x87Handler(regs*)+0xb12>
c00189d7:	83 ec 0c             	sub    esp,0xc
c00189da:	6a 00                	push   0x0
c00189dc:	e8 79 f6 ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c00189e1:	89 c7                	mov    edi,eax
c00189e3:	89 d5                	mov    ebp,edx
c00189e5:	58                   	pop    eax
c00189e6:	ff 36                	push   DWORD PTR [esi]
c00189e8:	e8 a6 f3 ff ff       	call   c0017d93 <Vm::fpu32ToInternal(unsigned int)>
c00189ed:	e9 ee 01 00 00       	jmp    c0018be0 <Vm::x87Handler(regs*)+0xa46>
c00189f2:	66 90                	xchg   ax,ax
c00189f4:	80 fa 03             	cmp    dl,0x3
c00189f7:	0f 85 f7 01 00 00    	jne    c0018bf4 <Vm::x87Handler(regs*)+0xa5a>
c00189fd:	e8 45 f7 ff ff       	call   c0018147 <Vm::fpuPop()>
c0018a02:	51                   	push   ecx
c0018a03:	51                   	push   ecx
c0018a04:	e9 03 02 00 00       	jmp    c0018c0c <Vm::x87Handler(regs*)+0xa72>
c0018a09:	8d 76 00             	lea    esi,[esi+0x0]
c0018a0c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0018a10:	80 fa 01             	cmp    dl,0x1
c0018a13:	75 0b                	jne    c0018a20 <Vm::x87Handler(regs*)+0x886>
c0018a15:	57                   	push   edi
c0018a16:	57                   	push   edi
c0018a17:	8b 06                	mov    eax,DWORD PTR [esi]
c0018a19:	e9 0e 02 00 00       	jmp    c0018c2c <Vm::x87Handler(regs*)+0xa92>
c0018a1e:	66 90                	xchg   ax,ax
c0018a20:	80 fa 04             	cmp    dl,0x4
c0018a23:	75 13                	jne    c0018a38 <Vm::x87Handler(regs*)+0x89e>
c0018a25:	31 d2                	xor    edx,edx
c0018a27:	51                   	push   ecx
c0018a28:	51                   	push   ecx
c0018a29:	8b 06                	mov    eax,DWORD PTR [esi]
c0018a2b:	52                   	push   edx
c0018a2c:	50                   	push   eax
c0018a2d:	e8 4a f4 ff ff       	call   c0017e7c <Vm::fpuLongToFloat(long long)>
c0018a32:	e9 fd 00 00 00       	jmp    c0018b34 <Vm::x87Handler(regs*)+0x99a>
c0018a37:	90                   	nop
c0018a38:	31 c0                	xor    eax,eax
c0018a3a:	80 fa 07             	cmp    dl,0x7
c0018a3d:	0f 85 69 02 00 00    	jne    c0018cac <Vm::x87Handler(regs*)+0xb12>
c0018a43:	83 ec 0c             	sub    esp,0xc
c0018a46:	6a 00                	push   0x0
c0018a48:	e8 0d f6 ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c0018a4d:	89 c7                	mov    edi,eax
c0018a4f:	89 d5                	mov    ebp,edx
c0018a51:	58                   	pop    eax
c0018a52:	8b 06                	mov    eax,DWORD PTR [esi]
c0018a54:	5a                   	pop    edx
c0018a55:	31 d2                	xor    edx,edx
c0018a57:	52                   	push   edx
c0018a58:	50                   	push   eax
c0018a59:	e8 1e f4 ff ff       	call   c0017e7c <Vm::fpuLongToFloat(long long)>
c0018a5e:	e9 7d 01 00 00       	jmp    c0018be0 <Vm::x87Handler(regs*)+0xa46>
c0018a63:	90                   	nop
c0018a64:	84 d2                	test   dl,dl
c0018a66:	75 10                	jne    c0018a78 <Vm::x87Handler(regs*)+0x8de>
c0018a68:	31 d2                	xor    edx,edx
c0018a6a:	55                   	push   ebp
c0018a6b:	55                   	push   ebp
c0018a6c:	8b 06                	mov    eax,DWORD PTR [esi]
c0018a6e:	52                   	push   edx
c0018a6f:	50                   	push   eax
c0018a70:	e9 03 02 00 00       	jmp    c0018c78 <Vm::x87Handler(regs*)+0xade>
c0018a75:	8d 76 00             	lea    esi,[esi+0x0]
c0018a78:	31 c0                	xor    eax,eax
c0018a7a:	80 fa 02             	cmp    dl,0x2
c0018a7d:	0f 85 29 02 00 00    	jne    c0018cac <Vm::x87Handler(regs*)+0xb12>
c0018a83:	83 ec 0c             	sub    esp,0xc
c0018a86:	6a 00                	push   0x0
c0018a88:	e8 cd f5 ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c0018a8d:	59                   	pop    ecx
c0018a8e:	5f                   	pop    edi
c0018a8f:	e9 18 f9 ff ff       	jmp    c00183ac <Vm::x87Handler(regs*)+0x212>
c0018a94:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0018a98:	84 d2                	test   dl,dl
c0018a9a:	75 2c                	jne    c0018ac8 <Vm::x87Handler(regs*)+0x92e>
c0018a9c:	50                   	push   eax
c0018a9d:	50                   	push   eax
c0018a9e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0018aa1:	ff 36                	push   DWORD PTR [esi]
c0018aa3:	e8 30 f3 ff ff       	call   c0017dd8 <Vm::fpu64ToInternal(unsigned long long)>
c0018aa8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018aaf:	89 c6                	mov    esi,eax
c0018ab1:	89 d7                	mov    edi,edx
c0018ab3:	e8 a2 f5 ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c0018ab8:	57                   	push   edi
c0018ab9:	56                   	push   esi
c0018aba:	52                   	push   edx
c0018abb:	50                   	push   eax
c0018abc:	e8 0f f5 ff ff       	call   c0017fd0 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0018ac1:	e9 8e 01 00 00       	jmp    c0018c54 <Vm::x87Handler(regs*)+0xaba>
c0018ac6:	66 90                	xchg   ax,ax
c0018ac8:	80 fa 01             	cmp    dl,0x1
c0018acb:	75 13                	jne    c0018ae0 <Vm::x87Handler(regs*)+0x946>
c0018acd:	50                   	push   eax
c0018ace:	50                   	push   eax
c0018acf:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0018ad2:	ff 36                	push   DWORD PTR [esi]
c0018ad4:	e8 ff f2 ff ff       	call   c0017dd8 <Vm::fpu64ToInternal(unsigned long long)>
c0018ad9:	e9 5a 01 00 00       	jmp    c0018c38 <Vm::x87Handler(regs*)+0xa9e>
c0018ade:	66 90                	xchg   ax,ax
c0018ae0:	80 fa 02             	cmp    dl,0x2
c0018ae3:	0f 85 03 f9 ff ff    	jne    c00183ec <Vm::x87Handler(regs*)+0x252>
c0018ae9:	55                   	push   ebp
c0018aea:	55                   	push   ebp
c0018aeb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0018aee:	ff 36                	push   DWORD PTR [esi]
c0018af0:	e8 e3 f2 ff ff       	call   c0017dd8 <Vm::fpu64ToInternal(unsigned long long)>
c0018af5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018afc:	89 c6                	mov    esi,eax
c0018afe:	89 d7                	mov    edi,edx
c0018b00:	e8 55 f5 ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c0018b05:	57                   	push   edi
c0018b06:	56                   	push   esi
c0018b07:	52                   	push   edx
c0018b08:	50                   	push   eax
c0018b09:	e8 6c f4 ff ff       	call   c0017f7a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0018b0e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018b12:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0018b15:	8d 76 00             	lea    esi,[esi+0x0]
c0018b18:	83 c4 20             	add    esp,0x20
c0018b1b:	e9 fc f6 ff ff       	jmp    c001821c <Vm::x87Handler(regs*)+0x82>
c0018b20:	80 fa 04             	cmp    dl,0x4
c0018b23:	75 2f                	jne    c0018b54 <Vm::x87Handler(regs*)+0x9ba>
c0018b25:	51                   	push   ecx
c0018b26:	51                   	push   ecx
c0018b27:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0018b2a:	ff 36                	push   DWORD PTR [esi]
c0018b2c:	e8 a7 f2 ff ff       	call   c0017dd8 <Vm::fpu64ToInternal(unsigned long long)>
c0018b31:	8d 76 00             	lea    esi,[esi+0x0]
c0018b34:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018b3b:	89 c6                	mov    esi,eax
c0018b3d:	89 d7                	mov    edi,edx
c0018b3f:	e8 16 f5 ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c0018b44:	57                   	push   edi
c0018b45:	56                   	push   esi
c0018b46:	52                   	push   edx
c0018b47:	50                   	push   eax
c0018b48:	e8 ad f4 ff ff       	call   c0017ffa <Vm::fpuSub(unsigned long long, unsigned long long)>
c0018b4d:	e9 02 01 00 00       	jmp    c0018c54 <Vm::x87Handler(regs*)+0xaba>
c0018b52:	66 90                	xchg   ax,ax
c0018b54:	80 fa 05             	cmp    dl,0x5
c0018b57:	75 2b                	jne    c0018b84 <Vm::x87Handler(regs*)+0x9ea>
c0018b59:	83 ec 0c             	sub    esp,0xc
c0018b5c:	6a 00                	push   0x0
c0018b5e:	e8 f7 f4 ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c0018b63:	89 c7                	mov    edi,eax
c0018b65:	89 d5                	mov    ebp,edx
c0018b67:	58                   	pop    eax
c0018b68:	5a                   	pop    edx
c0018b69:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0018b6c:	ff 36                	push   DWORD PTR [esi]
c0018b6e:	e8 65 f2 ff ff       	call   c0017dd8 <Vm::fpu64ToInternal(unsigned long long)>
c0018b73:	90                   	nop
c0018b74:	83 c4 10             	add    esp,0x10
c0018b77:	55                   	push   ebp
c0018b78:	57                   	push   edi
c0018b79:	52                   	push   edx
c0018b7a:	50                   	push   eax
c0018b7b:	e8 7a f4 ff ff       	call   c0017ffa <Vm::fpuSub(unsigned long long, unsigned long long)>
c0018b80:	eb 6a                	jmp    c0018bec <Vm::x87Handler(regs*)+0xa52>
c0018b82:	66 90                	xchg   ax,ax
c0018b84:	80 fa 06             	cmp    dl,0x6
c0018b87:	75 2f                	jne    c0018bb8 <Vm::x87Handler(regs*)+0xa1e>
c0018b89:	51                   	push   ecx
c0018b8a:	51                   	push   ecx
c0018b8b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0018b8e:	ff 36                	push   DWORD PTR [esi]
c0018b90:	e8 43 f2 ff ff       	call   c0017dd8 <Vm::fpu64ToInternal(unsigned long long)>
c0018b95:	8d 76 00             	lea    esi,[esi+0x0]
c0018b98:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018b9f:	89 c6                	mov    esi,eax
c0018ba1:	89 d7                	mov    edi,edx
c0018ba3:	e8 b2 f4 ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c0018ba8:	57                   	push   edi
c0018ba9:	56                   	push   esi
c0018baa:	52                   	push   edx
c0018bab:	50                   	push   eax
c0018bac:	e8 77 f4 ff ff       	call   c0018028 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0018bb1:	e9 9e 00 00 00       	jmp    c0018c54 <Vm::x87Handler(regs*)+0xaba>
c0018bb6:	66 90                	xchg   ax,ax
c0018bb8:	31 c0                	xor    eax,eax
c0018bba:	80 fa 07             	cmp    dl,0x7
c0018bbd:	0f 85 e9 00 00 00    	jne    c0018cac <Vm::x87Handler(regs*)+0xb12>
c0018bc3:	83 ec 0c             	sub    esp,0xc
c0018bc6:	6a 00                	push   0x0
c0018bc8:	e8 8d f4 ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c0018bcd:	89 c7                	mov    edi,eax
c0018bcf:	89 d5                	mov    ebp,edx
c0018bd1:	58                   	pop    eax
c0018bd2:	5a                   	pop    edx
c0018bd3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0018bd6:	ff 36                	push   DWORD PTR [esi]
c0018bd8:	e8 fb f1 ff ff       	call   c0017dd8 <Vm::fpu64ToInternal(unsigned long long)>
c0018bdd:	8d 76 00             	lea    esi,[esi+0x0]
c0018be0:	83 c4 10             	add    esp,0x10
c0018be3:	55                   	push   ebp
c0018be4:	57                   	push   edi
c0018be5:	52                   	push   edx
c0018be6:	50                   	push   eax
c0018be7:	e8 3c f4 ff ff       	call   c0018028 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0018bec:	83 c4 0c             	add    esp,0xc
c0018bef:	eb 67                	jmp    c0018c58 <Vm::x87Handler(regs*)+0xabe>
c0018bf1:	8d 76 00             	lea    esi,[esi+0x0]
c0018bf4:	31 c0                	xor    eax,eax
c0018bf6:	80 fa 02             	cmp    dl,0x2
c0018bf9:	0f 85 ad 00 00 00    	jne    c0018cac <Vm::x87Handler(regs*)+0xb12>
c0018bff:	83 ec 0c             	sub    esp,0xc
c0018c02:	6a 00                	push   0x0
c0018c04:	e8 51 f4 ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c0018c09:	59                   	pop    ecx
c0018c0a:	5f                   	pop    edi
c0018c0b:	90                   	nop
c0018c0c:	52                   	push   edx
c0018c0d:	50                   	push   eax
c0018c0e:	e8 77 f1 ff ff       	call   c0017d8a <Vm::fpuInternalTo64(unsigned long long)>
c0018c13:	e9 84 00 00 00       	jmp    c0018c9c <Vm::x87Handler(regs*)+0xb02>
c0018c18:	31 c0                	xor    eax,eax
c0018c1a:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0018c1f:	0f 85 87 00 00 00    	jne    c0018cac <Vm::x87Handler(regs*)+0xb12>
c0018c25:	50                   	push   eax
c0018c26:	50                   	push   eax
c0018c27:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0018c2a:	66 90                	xchg   ax,ax
c0018c2c:	31 d2                	xor    edx,edx
c0018c2e:	52                   	push   edx
c0018c2f:	50                   	push   eax
c0018c30:	e8 47 f2 ff ff       	call   c0017e7c <Vm::fpuLongToFloat(long long)>
c0018c35:	8d 76 00             	lea    esi,[esi+0x0]
c0018c38:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018c3f:	89 c6                	mov    esi,eax
c0018c41:	89 d7                	mov    edi,edx
c0018c43:	e8 12 f4 ff ff       	call   c001805a <Vm::fpuGetReg(int)>
c0018c48:	57                   	push   edi
c0018c49:	56                   	push   esi
c0018c4a:	52                   	push   edx
c0018c4b:	50                   	push   eax
c0018c4c:	e8 b8 f3 ff ff       	call   c0018009 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0018c51:	8d 76 00             	lea    esi,[esi+0x0]
c0018c54:	83 c4 1c             	add    esp,0x1c
c0018c57:	90                   	nop
c0018c58:	52                   	push   edx
c0018c59:	50                   	push   eax
c0018c5a:	6a 00                	push   0x0
c0018c5c:	e8 3c f4 ff ff       	call   c001809d <Vm::fpuSetReg(int, unsigned long long)>
c0018c61:	e9 7a f7 ff ff       	jmp    c00183e0 <Vm::x87Handler(regs*)+0x246>
c0018c66:	66 90                	xchg   ax,ax
c0018c68:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0018c6c:	80 fa 05             	cmp    dl,0x5
c0018c6f:	75 13                	jne    c0018c84 <Vm::x87Handler(regs*)+0xaea>
c0018c71:	55                   	push   ebp
c0018c72:	55                   	push   ebp
c0018c73:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0018c76:	ff 36                	push   DWORD PTR [esi]
c0018c78:	e8 c3 f1 ff ff       	call   c0017e40 <Vm::fpuULongToFloat(unsigned long long)>
c0018c7d:	e9 52 f7 ff ff       	jmp    c00183d4 <Vm::x87Handler(regs*)+0x23a>
c0018c82:	66 90                	xchg   ax,ax
c0018c84:	31 c0                	xor    eax,eax
c0018c86:	80 fa 07             	cmp    dl,0x7
c0018c89:	75 21                	jne    c0018cac <Vm::x87Handler(regs*)+0xb12>
c0018c8b:	e8 b7 f4 ff ff       	call   c0018147 <Vm::fpuPop()>
c0018c90:	51                   	push   ecx
c0018c91:	51                   	push   ecx
c0018c92:	52                   	push   edx
c0018c93:	50                   	push   eax
c0018c94:	e8 48 f1 ff ff       	call   c0017de1 <Vm::fpuFloatToLong(unsigned long long)>
c0018c99:	8d 76 00             	lea    esi,[esi+0x0]
c0018c9c:	83 c4 10             	add    esp,0x10
c0018c9f:	89 06                	mov    DWORD PTR [esi],eax
c0018ca1:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0018ca4:	e9 7b f7 ff ff       	jmp    c0018424 <Vm::x87Handler(regs*)+0x28a>
c0018ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0018cac:	83 c4 1c             	add    esp,0x1c
c0018caf:	5b                   	pop    ebx
c0018cb0:	5e                   	pop    esi
c0018cb1:	5f                   	pop    edi
c0018cb2:	5d                   	pop    ebp
c0018cb3:	c3                   	ret    

c0018cb4 <__static_initialization_and_destruction_0(int, int)>:
c0018cb4:	83 ec 0c             	sub    esp,0xc
c0018cb7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0018cbc:	75 1a                	jne    c0018cd8 <__static_initialization_and_destruction_0(int, int)+0x24>
c0018cbe:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0018cc6:	75 10                	jne    c0018cd8 <__static_initialization_and_destruction_0(int, int)+0x24>
c0018cc8:	83 ec 0c             	sub    esp,0xc
c0018ccb:	68 40 9c 02 c0       	push   0xc0029c40
c0018cd0:	e8 1f 94 00 00       	call   c00220f4 <Vm::_FPUState::_FPUState()>
c0018cd5:	83 c4 10             	add    esp,0x10
c0018cd8:	90                   	nop
c0018cd9:	83 c4 0c             	add    esp,0xc
c0018cdc:	c3                   	ret    
c0018cdd:	8d 76 00             	lea    esi,[esi+0x0]

c0018ce0 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0018ce0:	83 ec 0c             	sub    esp,0xc
c0018ce3:	83 ec 08             	sub    esp,0x8
c0018ce6:	68 ff ff 00 00       	push   0xffff
c0018ceb:	6a 01                	push   0x1
c0018ced:	e8 c2 ff ff ff       	call   c0018cb4 <__static_initialization_and_destruction_0(int, int)>
c0018cf2:	83 c4 10             	add    esp,0x10
c0018cf5:	83 c4 0c             	add    esp,0xc
c0018cf8:	c3                   	ret    

c0018cf9 <Hal::noCopro(unsigned long)>:
c0018cf9:	c3                   	ret    

c0018cfa <Hal::noTSC()>:
c0018cfa:	31 c0                	xor    eax,eax
c0018cfc:	31 d2                	xor    edx,edx
c0018cfe:	c3                   	ret    

c0018cff <Hal::readTSC()>:
c0018cff:	0f 31                	rdtsc  
c0018d01:	c3                   	ret    

c0018d02 <nmiHandler(regs*, void*)>:
c0018d02:	83 ec 0c             	sub    esp,0xc
c0018d05:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c0018d0a:	83 ec 0c             	sub    esp,0xc
c0018d0d:	50                   	push   eax
c0018d0e:	e8 ff 03 ff ff       	call   c0009112 <Computer::handleNMI()>
c0018d13:	83 c4 10             	add    esp,0x10
c0018d16:	90                   	nop
c0018d17:	83 c4 0c             	add    esp,0xc
c0018d1a:	c3                   	ret    

c0018d1b <doubleFault(regs*, void*)>:
c0018d1b:	55                   	push   ebp
c0018d1c:	89 e5                	mov    ebp,esp
c0018d1e:	83 ec 08             	sub    esp,0x8
c0018d21:	83 ec 0c             	sub    esp,0xc
c0018d24:	68 54 4b 02 c0       	push   0xc0024b54
c0018d29:	e8 d9 a2 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c0018d2e:	83 c4 10             	add    esp,0x10
c0018d31:	90                   	nop
c0018d32:	c9                   	leave  
c0018d33:	c3                   	ret    

c0018d34 <displayDebugInfo(regs*)>:
c0018d34:	53                   	push   ebx
c0018d35:	83 ec 38             	sub    esp,0x38
c0018d38:	0f 20 c0             	mov    eax,cr0
c0018d3b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018d3f:	0f 20 d0             	mov    eax,cr2
c0018d42:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018d46:	0f 20 d8             	mov    eax,cr3
c0018d49:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018d4d:	0f 20 e0             	mov    eax,cr4
c0018d50:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018d54:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018d58:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018d5b:	83 ec 08             	sub    esp,0x8
c0018d5e:	50                   	push   eax
c0018d5f:	68 61 4b 02 c0       	push   0xc0024b61
c0018d64:	e8 10 3f ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0018d69:	83 c4 10             	add    esp,0x10
c0018d6c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018d70:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0018d73:	83 ec 08             	sub    esp,0x8
c0018d76:	50                   	push   eax
c0018d77:	68 6c 4b 02 c0       	push   0xc0024b6c
c0018d7c:	e8 f8 3e ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0018d81:	83 c4 10             	add    esp,0x10
c0018d84:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018d88:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0018d8b:	83 ec 08             	sub    esp,0x8
c0018d8e:	50                   	push   eax
c0018d8f:	68 77 4b 02 c0       	push   0xc0024b77
c0018d94:	e8 e0 3e ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0018d99:	83 c4 10             	add    esp,0x10
c0018d9c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018da0:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018da3:	83 ec 08             	sub    esp,0x8
c0018da6:	50                   	push   eax
c0018da7:	68 82 4b 02 c0       	push   0xc0024b82
c0018dac:	e8 c8 3e ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0018db1:	83 c4 10             	add    esp,0x10
c0018db4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018db8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018dbb:	83 ec 08             	sub    esp,0x8
c0018dbe:	50                   	push   eax
c0018dbf:	68 8d 4b 02 c0       	push   0xc0024b8d
c0018dc4:	e8 b0 3e ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0018dc9:	83 c4 10             	add    esp,0x10
c0018dcc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018dd0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018dd3:	83 ec 08             	sub    esp,0x8
c0018dd6:	50                   	push   eax
c0018dd7:	68 98 4b 02 c0       	push   0xc0024b98
c0018ddc:	e8 98 3e ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0018de1:	83 c4 10             	add    esp,0x10
c0018de4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018de8:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0018deb:	83 ec 08             	sub    esp,0x8
c0018dee:	50                   	push   eax
c0018def:	68 b2 4b 02 c0       	push   0xc0024bb2
c0018df4:	e8 80 3e ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0018df9:	83 c4 10             	add    esp,0x10
c0018dfc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018e00:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0018e03:	83 ec 08             	sub    esp,0x8
c0018e06:	50                   	push   eax
c0018e07:	68 a3 4b 02 c0       	push   0xc0024ba3
c0018e0c:	e8 68 3e ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0018e11:	83 c4 10             	add    esp,0x10
c0018e14:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018e18:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018e1b:	83 ec 08             	sub    esp,0x8
c0018e1e:	50                   	push   eax
c0018e1f:	68 ae 4b 02 c0       	push   0xc0024bae
c0018e24:	e8 50 3e ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0018e29:	83 c4 10             	add    esp,0x10
c0018e2c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018e30:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018e33:	83 ec 08             	sub    esp,0x8
c0018e36:	50                   	push   eax
c0018e37:	68 bd 4b 02 c0       	push   0xc0024bbd
c0018e3c:	e8 38 3e ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0018e41:	83 c4 10             	add    esp,0x10
c0018e44:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018e48:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0018e4b:	83 ec 08             	sub    esp,0x8
c0018e4e:	50                   	push   eax
c0018e4f:	68 c8 4b 02 c0       	push   0xc0024bc8
c0018e54:	e8 20 3e ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0018e59:	83 c4 10             	add    esp,0x10
c0018e5c:	83 ec 08             	sub    esp,0x8
c0018e5f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018e63:	68 d3 4b 02 c0       	push   0xc0024bd3
c0018e68:	e8 0c 3e ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0018e6d:	83 c4 10             	add    esp,0x10
c0018e70:	83 ec 08             	sub    esp,0x8
c0018e73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018e77:	68 de 4b 02 c0       	push   0xc0024bde
c0018e7c:	e8 f8 3d ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0018e81:	83 c4 10             	add    esp,0x10
c0018e84:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c0018e89:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018e8f:	83 ec 0c             	sub    esp,0xc
c0018e92:	50                   	push   eax
c0018e93:	e8 c1 1b ff ff       	call   c000aa59 <setActiveTerminal(VgaText*)>
c0018e98:	83 c4 10             	add    esp,0x10
c0018e9b:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c0018ea0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018ea6:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018eaa:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0018ead:	c1 e2 05             	shl    edx,0x5
c0018eb0:	81 c2 20 5e 02 c0    	add    edx,0xc0025e20
c0018eb6:	83 ec 08             	sub    esp,0x8
c0018eb9:	52                   	push   edx
c0018eba:	50                   	push   eax
c0018ebb:	e8 9c 20 ff ff       	call   c000af5c <VgaText::puts(char const*)>
c0018ec0:	83 c4 10             	add    esp,0x10
c0018ec3:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c0018ec8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018ece:	83 ec 08             	sub    esp,0x8
c0018ed1:	68 e9 4b 02 c0       	push   0xc0024be9
c0018ed6:	50                   	push   eax
c0018ed7:	e8 80 20 ff ff       	call   c000af5c <VgaText::puts(char const*)>
c0018edc:	83 c4 10             	add    esp,0x10
c0018edf:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c0018ee4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018eea:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0018eef:	8b 12                	mov    edx,DWORD PTR [edx]
c0018ef1:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0018ef4:	83 c2 0c             	add    edx,0xc
c0018ef7:	83 ec 08             	sub    esp,0x8
c0018efa:	52                   	push   edx
c0018efb:	50                   	push   eax
c0018efc:	e8 5b 20 ff ff       	call   c000af5c <VgaText::puts(char const*)>
c0018f01:	83 c4 10             	add    esp,0x10
c0018f04:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c0018f09:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018f0f:	83 ec 08             	sub    esp,0x8
c0018f12:	68 f2 4b 02 c0       	push   0xc0024bf2
c0018f17:	50                   	push   eax
c0018f18:	e8 3f 20 ff ff       	call   c000af5c <VgaText::puts(char const*)>
c0018f1d:	83 c4 10             	add    esp,0x10
c0018f20:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c0018f25:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018f2b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018f2f:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0018f32:	83 ec 08             	sub    esp,0x8
c0018f35:	52                   	push   edx
c0018f36:	50                   	push   eax
c0018f37:	e8 da 1f ff ff       	call   c000af16 <VgaText::putx(unsigned int)>
c0018f3c:	83 c4 10             	add    esp,0x10
c0018f3f:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c0018f44:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018f4a:	83 ec 08             	sub    esp,0x8
c0018f4d:	68 fa 4b 02 c0       	push   0xc0024bfa
c0018f52:	50                   	push   eax
c0018f53:	e8 04 20 ff ff       	call   c000af5c <VgaText::puts(char const*)>
c0018f58:	83 c4 10             	add    esp,0x10
c0018f5b:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c0018f60:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018f66:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018f6a:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0018f6d:	83 ec 08             	sub    esp,0x8
c0018f70:	52                   	push   edx
c0018f71:	50                   	push   eax
c0018f72:	e8 9f 1f ff ff       	call   c000af16 <VgaText::putx(unsigned int)>
c0018f77:	83 c4 10             	add    esp,0x10
c0018f7a:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c0018f7f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018f85:	83 ec 08             	sub    esp,0x8
c0018f88:	68 02 4c 02 c0       	push   0xc0024c02
c0018f8d:	50                   	push   eax
c0018f8e:	e8 c9 1f ff ff       	call   c000af5c <VgaText::puts(char const*)>
c0018f93:	83 c4 10             	add    esp,0x10
c0018f96:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c0018f9b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018fa1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018fa5:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0018fa8:	83 ec 08             	sub    esp,0x8
c0018fab:	52                   	push   edx
c0018fac:	50                   	push   eax
c0018fad:	e8 64 1f ff ff       	call   c000af16 <VgaText::putx(unsigned int)>
c0018fb2:	83 c4 10             	add    esp,0x10
c0018fb5:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c0018fba:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018fc0:	83 ec 08             	sub    esp,0x8
c0018fc3:	68 0a 4c 02 c0       	push   0xc0024c0a
c0018fc8:	50                   	push   eax
c0018fc9:	e8 8e 1f ff ff       	call   c000af5c <VgaText::puts(char const*)>
c0018fce:	83 c4 10             	add    esp,0x10
c0018fd1:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c0018fd6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018fdc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018fe0:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0018fe3:	83 ec 08             	sub    esp,0x8
c0018fe6:	52                   	push   edx
c0018fe7:	50                   	push   eax
c0018fe8:	e8 29 1f ff ff       	call   c000af16 <VgaText::putx(unsigned int)>
c0018fed:	83 c4 10             	add    esp,0x10
c0018ff0:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c0018ff5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018ffb:	83 ec 08             	sub    esp,0x8
c0018ffe:	68 12 4c 02 c0       	push   0xc0024c12
c0019003:	50                   	push   eax
c0019004:	e8 53 1f ff ff       	call   c000af5c <VgaText::puts(char const*)>
c0019009:	83 c4 10             	add    esp,0x10
c001900c:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c0019011:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019017:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001901b:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001901e:	83 ec 08             	sub    esp,0x8
c0019021:	52                   	push   edx
c0019022:	50                   	push   eax
c0019023:	e8 ee 1e ff ff       	call   c000af16 <VgaText::putx(unsigned int)>
c0019028:	83 c4 10             	add    esp,0x10
c001902b:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c0019030:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019036:	83 ec 08             	sub    esp,0x8
c0019039:	68 1a 4c 02 c0       	push   0xc0024c1a
c001903e:	50                   	push   eax
c001903f:	e8 18 1f ff ff       	call   c000af5c <VgaText::puts(char const*)>
c0019044:	83 c4 10             	add    esp,0x10
c0019047:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c001904c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019052:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0019056:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0019059:	83 ec 08             	sub    esp,0x8
c001905c:	52                   	push   edx
c001905d:	50                   	push   eax
c001905e:	e8 b3 1e ff ff       	call   c000af16 <VgaText::putx(unsigned int)>
c0019063:	83 c4 10             	add    esp,0x10
c0019066:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c001906b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019071:	83 ec 08             	sub    esp,0x8
c0019074:	68 22 4c 02 c0       	push   0xc0024c22
c0019079:	50                   	push   eax
c001907a:	e8 dd 1e ff ff       	call   c000af5c <VgaText::puts(char const*)>
c001907f:	83 c4 10             	add    esp,0x10
c0019082:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c0019087:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001908d:	83 ec 08             	sub    esp,0x8
c0019090:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019094:	50                   	push   eax
c0019095:	e8 7c 1e ff ff       	call   c000af16 <VgaText::putx(unsigned int)>
c001909a:	83 c4 10             	add    esp,0x10
c001909d:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c00190a2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00190a8:	83 ec 08             	sub    esp,0x8
c00190ab:	68 2b 4c 02 c0       	push   0xc0024c2b
c00190b0:	50                   	push   eax
c00190b1:	e8 a6 1e ff ff       	call   c000af5c <VgaText::puts(char const*)>
c00190b6:	83 c4 10             	add    esp,0x10
c00190b9:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c00190be:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00190c4:	83 ec 08             	sub    esp,0x8
c00190c7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00190cb:	50                   	push   eax
c00190cc:	e8 45 1e ff ff       	call   c000af16 <VgaText::putx(unsigned int)>
c00190d1:	83 c4 10             	add    esp,0x10
c00190d4:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c00190d9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00190df:	83 ec 08             	sub    esp,0x8
c00190e2:	68 33 4c 02 c0       	push   0xc0024c33
c00190e7:	50                   	push   eax
c00190e8:	e8 6f 1e ff ff       	call   c000af5c <VgaText::puts(char const*)>
c00190ed:	83 c4 10             	add    esp,0x10
c00190f0:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c00190f5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00190fb:	83 ec 08             	sub    esp,0x8
c00190fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019102:	50                   	push   eax
c0019103:	e8 0e 1e ff ff       	call   c000af16 <VgaText::putx(unsigned int)>
c0019108:	83 c4 10             	add    esp,0x10
c001910b:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c0019110:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019116:	83 ec 08             	sub    esp,0x8
c0019119:	68 3b 4c 02 c0       	push   0xc0024c3b
c001911e:	50                   	push   eax
c001911f:	e8 38 1e ff ff       	call   c000af5c <VgaText::puts(char const*)>
c0019124:	83 c4 10             	add    esp,0x10
c0019127:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c001912c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019132:	83 ec 08             	sub    esp,0x8
c0019135:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019139:	50                   	push   eax
c001913a:	e8 d7 1d ff ff       	call   c000af16 <VgaText::putx(unsigned int)>
c001913f:	83 c4 10             	add    esp,0x10
c0019142:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c0019147:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001914d:	83 ec 08             	sub    esp,0x8
c0019150:	68 43 4c 02 c0       	push   0xc0024c43
c0019155:	50                   	push   eax
c0019156:	e8 01 1e ff ff       	call   c000af5c <VgaText::puts(char const*)>
c001915b:	83 c4 10             	add    esp,0x10
c001915e:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c0019163:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019169:	0f 21 c2             	mov    edx,db0
c001916c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019170:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019174:	83 ec 08             	sub    esp,0x8
c0019177:	52                   	push   edx
c0019178:	50                   	push   eax
c0019179:	e8 98 1d ff ff       	call   c000af16 <VgaText::putx(unsigned int)>
c001917e:	83 c4 10             	add    esp,0x10
c0019181:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c0019186:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001918c:	83 ec 08             	sub    esp,0x8
c001918f:	68 4c 4c 02 c0       	push   0xc0024c4c
c0019194:	50                   	push   eax
c0019195:	e8 c2 1d ff ff       	call   c000af5c <VgaText::puts(char const*)>
c001919a:	83 c4 10             	add    esp,0x10
c001919d:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c00191a2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00191a8:	0f 21 ca             	mov    edx,db1
c00191ab:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00191af:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00191b3:	83 ec 08             	sub    esp,0x8
c00191b6:	52                   	push   edx
c00191b7:	50                   	push   eax
c00191b8:	e8 59 1d ff ff       	call   c000af16 <VgaText::putx(unsigned int)>
c00191bd:	83 c4 10             	add    esp,0x10
c00191c0:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c00191c5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00191cb:	83 ec 08             	sub    esp,0x8
c00191ce:	68 54 4c 02 c0       	push   0xc0024c54
c00191d3:	50                   	push   eax
c00191d4:	e8 83 1d ff ff       	call   c000af5c <VgaText::puts(char const*)>
c00191d9:	83 c4 10             	add    esp,0x10
c00191dc:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c00191e1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00191e7:	0f 21 d2             	mov    edx,db2
c00191ea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00191ee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00191f2:	83 ec 08             	sub    esp,0x8
c00191f5:	52                   	push   edx
c00191f6:	50                   	push   eax
c00191f7:	e8 1a 1d ff ff       	call   c000af16 <VgaText::putx(unsigned int)>
c00191fc:	83 c4 10             	add    esp,0x10
c00191ff:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c0019204:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001920a:	83 ec 08             	sub    esp,0x8
c001920d:	68 5c 4c 02 c0       	push   0xc0024c5c
c0019212:	50                   	push   eax
c0019213:	e8 44 1d ff ff       	call   c000af5c <VgaText::puts(char const*)>
c0019218:	83 c4 10             	add    esp,0x10
c001921b:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c0019220:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019226:	0f 21 da             	mov    edx,db3
c0019229:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001922d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019231:	83 ec 08             	sub    esp,0x8
c0019234:	52                   	push   edx
c0019235:	50                   	push   eax
c0019236:	e8 db 1c ff ff       	call   c000af16 <VgaText::putx(unsigned int)>
c001923b:	83 c4 10             	add    esp,0x10
c001923e:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c0019243:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019249:	83 ec 08             	sub    esp,0x8
c001924c:	68 64 4c 02 c0       	push   0xc0024c64
c0019251:	50                   	push   eax
c0019252:	e8 05 1d ff ff       	call   c000af5c <VgaText::puts(char const*)>
c0019257:	83 c4 10             	add    esp,0x10
c001925a:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c001925f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019265:	0f 21 f2             	mov    edx,db6
c0019268:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001926c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019270:	83 ec 08             	sub    esp,0x8
c0019273:	52                   	push   edx
c0019274:	50                   	push   eax
c0019275:	e8 9c 1c ff ff       	call   c000af16 <VgaText::putx(unsigned int)>
c001927a:	83 c4 10             	add    esp,0x10
c001927d:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c0019282:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019288:	83 ec 08             	sub    esp,0x8
c001928b:	68 6c 4c 02 c0       	push   0xc0024c6c
c0019290:	50                   	push   eax
c0019291:	e8 c6 1c ff ff       	call   c000af5c <VgaText::puts(char const*)>
c0019296:	83 c4 10             	add    esp,0x10
c0019299:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c001929e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00192a4:	0f 21 fa             	mov    edx,db7
c00192a7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00192ab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00192af:	83 ec 08             	sub    esp,0x8
c00192b2:	52                   	push   edx
c00192b3:	50                   	push   eax
c00192b4:	e8 5d 1c ff ff       	call   c000af16 <VgaText::putx(unsigned int)>
c00192b9:	83 c4 10             	add    esp,0x10
c00192bc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00192c0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00192c3:	83 ec 0c             	sub    esp,0xc
c00192c6:	50                   	push   eax
c00192c7:	e8 6f c9 ff ff       	call   c0015c3b <Thr::getDriverNameFromAddress(unsigned long)>
c00192cc:	83 c4 10             	add    esp,0x10
c00192cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00192d3:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00192d8:	0f 84 a6 00 00 00    	je     c0019384 <displayDebugInfo(regs*)+0x650>
c00192de:	83 ec 08             	sub    esp,0x8
c00192e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00192e5:	68 74 4c 02 c0       	push   0xc0024c74
c00192ea:	e8 8a 39 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c00192ef:	83 c4 10             	add    esp,0x10
c00192f2:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c00192f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00192fd:	83 ec 08             	sub    esp,0x8
c0019300:	68 82 4c 02 c0       	push   0xc0024c82
c0019305:	50                   	push   eax
c0019306:	e8 51 1c ff ff       	call   c000af5c <VgaText::puts(char const*)>
c001930b:	83 c4 10             	add    esp,0x10
c001930e:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c0019313:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019319:	83 ec 08             	sub    esp,0x8
c001931c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019320:	50                   	push   eax
c0019321:	e8 36 1c ff ff       	call   c000af5c <VgaText::puts(char const*)>
c0019326:	83 c4 10             	add    esp,0x10
c0019329:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c001932e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019334:	83 ec 08             	sub    esp,0x8
c0019337:	68 8e 4c 02 c0       	push   0xc0024c8e
c001933c:	50                   	push   eax
c001933d:	e8 1a 1c ff ff       	call   c000af5c <VgaText::puts(char const*)>
c0019342:	83 c4 10             	add    esp,0x10
c0019345:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c001934a:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c0019350:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019354:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019357:	83 ec 0c             	sub    esp,0xc
c001935a:	50                   	push   eax
c001935b:	e8 12 c9 ff ff       	call   c0015c72 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0019360:	83 c4 10             	add    esp,0x10
c0019363:	83 ec 08             	sub    esp,0x8
c0019366:	50                   	push   eax
c0019367:	53                   	push   ebx
c0019368:	e8 a9 1b ff ff       	call   c000af16 <VgaText::putx(unsigned int)>
c001936d:	83 c4 10             	add    esp,0x10
c0019370:	83 ec 08             	sub    esp,0x8
c0019373:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019377:	68 9a 4c 02 c0       	push   0xc0024c9a
c001937c:	e8 f8 38 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0019381:	83 c4 10             	add    esp,0x10
c0019384:	fa                   	cli    
c0019385:	f4                   	hlt    
c0019386:	eb fe                	jmp    c0019386 <displayDebugInfo(regs*)+0x652>

c0019388 <displayProgramFault(char const*)>:
c0019388:	83 ec 0c             	sub    esp,0xc
c001938b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0019390:	8b 00                	mov    eax,DWORD PTR [eax]
c0019392:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0019395:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001939b:	85 c0                	test   eax,eax
c001939d:	74 21                	je     c00193c0 <displayProgramFault(char const*)+0x38>
c001939f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00193a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00193a6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00193a9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00193af:	6a 04                	push   0x4
c00193b1:	6a 0f                	push   0xf
c00193b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00193b7:	50                   	push   eax
c00193b8:	e8 9b 18 ff ff       	call   c000ac58 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00193bd:	83 c4 10             	add    esp,0x10
c00193c0:	90                   	nop
c00193c1:	83 c4 0c             	add    esp,0xc
c00193c4:	c3                   	ret    

c00193c5 <gpFault(regs*, void*)>:
c00193c5:	83 ec 1c             	sub    esp,0x1c
c00193c8:	c7 05 9c 9c 02 c0 57 76 01 c0 	mov    DWORD PTR ds:0xc0029c9c,0xc0017657
c00193d2:	a1 9c 9c 02 c0       	mov    eax,ds:0xc0029c9c
c00193d7:	85 c0                	test   eax,eax
c00193d9:	74 1c                	je     c00193f7 <gpFault(regs*, void*)+0x32>
c00193db:	a1 9c 9c 02 c0       	mov    eax,ds:0xc0029c9c
c00193e0:	83 ec 0c             	sub    esp,0xc
c00193e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00193e7:	ff d0                	call   eax
c00193e9:	83 c4 10             	add    esp,0x10
c00193ec:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00193f0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00193f5:	75 3e                	jne    c0019435 <gpFault(regs*, void*)+0x70>
c00193f7:	83 ec 0c             	sub    esp,0xc
c00193fa:	68 aa 4c 02 c0       	push   0xc0024caa
c00193ff:	e8 75 38 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0019404:	83 c4 10             	add    esp,0x10
c0019407:	83 ec 0c             	sub    esp,0xc
c001940a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001940e:	e8 21 f9 ff ff       	call   c0018d34 <displayDebugInfo(regs*)>
c0019413:	83 c4 10             	add    esp,0x10
c0019416:	83 ec 0c             	sub    esp,0xc
c0019419:	68 c5 4c 02 c0       	push   0xc0024cc5
c001941e:	e8 65 ff ff ff       	call   c0019388 <displayProgramFault(char const*)>
c0019423:	83 c4 10             	add    esp,0x10
c0019426:	83 ec 0c             	sub    esp,0xc
c0019429:	6a 00                	push   0x0
c001942b:	e8 20 dc ff ff       	call   c0017050 <Thr::terminateFromIRQ(int)>
c0019430:	83 c4 10             	add    esp,0x10
c0019433:	eb 01                	jmp    c0019436 <gpFault(regs*, void*)+0x71>
c0019435:	90                   	nop
c0019436:	83 c4 1c             	add    esp,0x1c
c0019439:	c3                   	ret    

c001943a <pgFault(regs*, void*)>:
c001943a:	83 ec 1c             	sub    esp,0x1c
c001943d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019441:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019444:	83 ec 08             	sub    esp,0x8
c0019447:	50                   	push   eax
c0019448:	68 de 4c 02 c0       	push   0xc0024cde
c001944d:	e8 27 38 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0019452:	83 c4 10             	add    esp,0x10
c0019455:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001945a:	8b 00                	mov    eax,DWORD PTR [eax]
c001945c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001945f:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0019465:	0f 20 d2             	mov    edx,cr2
c0019468:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001946c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019470:	83 ec 08             	sub    esp,0x8
c0019473:	52                   	push   edx
c0019474:	50                   	push   eax
c0019475:	e8 7a 33 ff ff       	call   c000c7f4 <VAS::tryLoadBackOffDisk(unsigned long)>
c001947a:	83 c4 10             	add    esp,0x10
c001947d:	84 c0                	test   al,al
c001947f:	75 3e                	jne    c00194bf <pgFault(regs*, void*)+0x85>
c0019481:	83 ec 0c             	sub    esp,0xc
c0019484:	68 f3 4c 02 c0       	push   0xc0024cf3
c0019489:	e8 eb 37 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001948e:	83 c4 10             	add    esp,0x10
c0019491:	83 ec 0c             	sub    esp,0xc
c0019494:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019498:	e8 97 f8 ff ff       	call   c0018d34 <displayDebugInfo(regs*)>
c001949d:	83 c4 10             	add    esp,0x10
c00194a0:	83 ec 0c             	sub    esp,0xc
c00194a3:	68 00 4d 02 c0       	push   0xc0024d00
c00194a8:	e8 db fe ff ff       	call   c0019388 <displayProgramFault(char const*)>
c00194ad:	83 c4 10             	add    esp,0x10
c00194b0:	83 ec 0c             	sub    esp,0xc
c00194b3:	6a 00                	push   0x0
c00194b5:	e8 96 db ff ff       	call   c0017050 <Thr::terminateFromIRQ(int)>
c00194ba:	83 c4 10             	add    esp,0x10
c00194bd:	eb 01                	jmp    c00194c0 <pgFault(regs*, void*)+0x86>
c00194bf:	90                   	nop
c00194c0:	83 c4 1c             	add    esp,0x1c
c00194c3:	c3                   	ret    

c00194c4 <otherISRHandler(regs*, void*)>:
c00194c4:	83 ec 0c             	sub    esp,0xc
c00194c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00194cb:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c00194ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00194d2:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00194d5:	83 ec 04             	sub    esp,0x4
c00194d8:	52                   	push   edx
c00194d9:	50                   	push   eax
c00194da:	68 0b 4d 02 c0       	push   0xc0024d0b
c00194df:	e8 95 37 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c00194e4:	83 c4 10             	add    esp,0x10
c00194e7:	83 ec 0c             	sub    esp,0xc
c00194ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00194ee:	e8 41 f8 ff ff       	call   c0018d34 <displayDebugInfo(regs*)>
c00194f3:	83 c4 10             	add    esp,0x10
c00194f6:	83 ec 0c             	sub    esp,0xc
c00194f9:	68 d4 4d 02 c0       	push   0xc0024dd4
c00194fe:	e8 85 fe ff ff       	call   c0019388 <displayProgramFault(char const*)>
c0019503:	83 c4 10             	add    esp,0x10
c0019506:	83 ec 0c             	sub    esp,0xc
c0019509:	6a 00                	push   0x0
c001950b:	e8 40 db ff ff       	call   c0017050 <Thr::terminateFromIRQ(int)>
c0019510:	83 c4 10             	add    esp,0x10
c0019513:	90                   	nop
c0019514:	83 c4 0c             	add    esp,0xc
c0019517:	c3                   	ret    

c0019518 <opcodeFault(regs*, void*)>:
c0019518:	55                   	push   ebp
c0019519:	89 e5                	mov    ebp,esp
c001951b:	56                   	push   esi
c001951c:	53                   	push   ebx
c001951d:	83 ec 30             	sub    esp,0x30
c0019520:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019523:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019526:	83 ec 08             	sub    esp,0x8
c0019529:	50                   	push   eax
c001952a:	68 28 4d 02 c0       	push   0xc0024d28
c001952f:	e8 45 37 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0019534:	83 c4 10             	add    esp,0x10
c0019537:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c001953c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019542:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0019548:	84 c0                	test   al,al
c001954a:	74 24                	je     c0019570 <opcodeFault(regs*, void*)+0x58>
c001954c:	83 ec 0c             	sub    esp,0xc
c001954f:	68 fc 4d 02 c0       	push   0xc0024dfc
c0019554:	e8 20 37 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0019559:	83 c4 10             	add    esp,0x10
c001955c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001955f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019562:	8d 50 19             	lea    edx,[eax+0x19]
c0019565:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019568:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001956b:	e9 9b 03 00 00       	jmp    c001990b <opcodeFault(regs*, void*)+0x3f3>
c0019570:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019573:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019576:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0019579:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c001957d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019580:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019583:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0019586:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0019589:	8a 00                	mov    al,BYTE PTR [eax]
c001958b:	3c f0                	cmp    al,0xf0
c001958d:	75 17                	jne    c00195a6 <opcodeFault(regs*, void*)+0x8e>
c001958f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0019592:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019595:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019598:	8d 50 01             	lea    edx,[eax+0x1]
c001959b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001959e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00195a1:	e9 d6 00 00 00       	jmp    c001967c <opcodeFault(regs*, void*)+0x164>
c00195a6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00195a9:	8a 00                	mov    al,BYTE PTR [eax]
c00195ab:	3c f2                	cmp    al,0xf2
c00195ad:	74 09                	je     c00195b8 <opcodeFault(regs*, void*)+0xa0>
c00195af:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00195b2:	8a 00                	mov    al,BYTE PTR [eax]
c00195b4:	3c f3                	cmp    al,0xf3
c00195b6:	75 1b                	jne    c00195d3 <opcodeFault(regs*, void*)+0xbb>
c00195b8:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00195bc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00195bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00195c2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00195c5:	8d 50 01             	lea    edx,[eax+0x1]
c00195c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00195cb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00195ce:	e9 a9 00 00 00       	jmp    c001967c <opcodeFault(regs*, void*)+0x164>
c00195d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00195d6:	8a 00                	mov    al,BYTE PTR [eax]
c00195d8:	3c 66                	cmp    al,0x66
c00195da:	75 1b                	jne    c00195f7 <opcodeFault(regs*, void*)+0xdf>
c00195dc:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00195e0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00195e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00195e6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00195e9:	8d 50 01             	lea    edx,[eax+0x1]
c00195ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00195ef:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00195f2:	e9 85 00 00 00       	jmp    c001967c <opcodeFault(regs*, void*)+0x164>
c00195f7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00195fa:	8a 00                	mov    al,BYTE PTR [eax]
c00195fc:	3c 67                	cmp    al,0x67
c00195fe:	75 18                	jne    c0019618 <opcodeFault(regs*, void*)+0x100>
c0019600:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0019604:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0019607:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001960a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001960d:	8d 50 01             	lea    edx,[eax+0x1]
c0019610:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019613:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019616:	eb 64                	jmp    c001967c <opcodeFault(regs*, void*)+0x164>
c0019618:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001961b:	8a 00                	mov    al,BYTE PTR [eax]
c001961d:	3c 2e                	cmp    al,0x2e
c001961f:	74 09                	je     c001962a <opcodeFault(regs*, void*)+0x112>
c0019621:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0019624:	8a 00                	mov    al,BYTE PTR [eax]
c0019626:	3c 3e                	cmp    al,0x3e
c0019628:	75 18                	jne    c0019642 <opcodeFault(regs*, void*)+0x12a>
c001962a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001962e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0019631:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019634:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019637:	8d 50 01             	lea    edx,[eax+0x1]
c001963a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001963d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019640:	eb 3a                	jmp    c001967c <opcodeFault(regs*, void*)+0x164>
c0019642:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0019645:	8a 00                	mov    al,BYTE PTR [eax]
c0019647:	3c 36                	cmp    al,0x36
c0019649:	74 1b                	je     c0019666 <opcodeFault(regs*, void*)+0x14e>
c001964b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001964e:	8a 00                	mov    al,BYTE PTR [eax]
c0019650:	3c 26                	cmp    al,0x26
c0019652:	74 12                	je     c0019666 <opcodeFault(regs*, void*)+0x14e>
c0019654:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0019657:	8a 00                	mov    al,BYTE PTR [eax]
c0019659:	3c 64                	cmp    al,0x64
c001965b:	74 09                	je     c0019666 <opcodeFault(regs*, void*)+0x14e>
c001965d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0019660:	8a 00                	mov    al,BYTE PTR [eax]
c0019662:	3c 65                	cmp    al,0x65
c0019664:	75 16                	jne    c001967c <opcodeFault(regs*, void*)+0x164>
c0019666:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001966a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001966d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019670:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019673:	8d 50 01             	lea    edx,[eax+0x1]
c0019676:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019679:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001967c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001967f:	8a 00                	mov    al,BYTE PTR [eax]
c0019681:	3c 0f                	cmp    al,0xf
c0019683:	0f 85 8d 01 00 00    	jne    c0019816 <opcodeFault(regs*, void*)+0x2fe>
c0019689:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001968c:	40                   	inc    eax
c001968d:	8a 00                	mov    al,BYTE PTR [eax]
c001968f:	3c c7                	cmp    al,0xc7
c0019691:	0f 85 7f 01 00 00    	jne    c0019816 <opcodeFault(regs*, void*)+0x2fe>
c0019697:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001969a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001969d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00196a0:	8d 50 01             	lea    edx,[eax+0x1]
c00196a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00196a6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00196a9:	8d 45 d2             	lea    eax,[ebp-0x2e]
c00196ac:	50                   	push   eax
c00196ad:	8d 45 d3             	lea    eax,[ebp-0x2d]
c00196b0:	50                   	push   eax
c00196b1:	8d 45 d4             	lea    eax,[ebp-0x2c]
c00196b4:	50                   	push   eax
c00196b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00196b8:	e8 63 90 ff ff       	call   c0012720 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00196bd:	83 c4 10             	add    esp,0x10
c00196c0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00196c3:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00196c6:	83 f0 01             	xor    eax,0x1
c00196c9:	84 c0                	test   al,al
c00196cb:	0f 84 45 01 00 00    	je     c0019816 <opcodeFault(regs*, void*)+0x2fe>
c00196d1:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c00196d4:	3c 01                	cmp    al,0x1
c00196d6:	0f 85 3a 01 00 00    	jne    c0019816 <opcodeFault(regs*, void*)+0x2fe>
c00196dc:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00196df:	83 f0 01             	xor    eax,0x1
c00196e2:	84 c0                	test   al,al
c00196e4:	0f 84 2c 01 00 00    	je     c0019816 <opcodeFault(regs*, void*)+0x2fe>
c00196ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00196ed:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00196f0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00196f3:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00196fa:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00196fd:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0019700:	89 c2                	mov    edx,eax
c0019702:	b8 00 00 00 00       	mov    eax,0x0
c0019707:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001970a:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c001970d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019710:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019713:	ba 00 00 00 00       	mov    edx,0x0
c0019718:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c001971b:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c001971e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019721:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0019724:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0019727:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c001972e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0019731:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0019734:	89 c2                	mov    edx,eax
c0019736:	b8 00 00 00 00       	mov    eax,0x0
c001973b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001973e:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c0019741:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019744:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019747:	ba 00 00 00 00       	mov    edx,0x0
c001974c:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c001974f:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c0019752:	fa                   	cli    
c0019753:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c0019758:	40                   	inc    eax
c0019759:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c001975e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0019761:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0019764:	8b 00                	mov    eax,DWORD PTR [eax]
c0019766:	89 c1                	mov    ecx,eax
c0019768:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c001976b:	89 cb                	mov    ebx,ecx
c001976d:	89 d0                	mov    eax,edx
c001976f:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0019772:	89 c6                	mov    esi,eax
c0019774:	89 f0                	mov    eax,esi
c0019776:	09 d8                	or     eax,ebx
c0019778:	85 c0                	test   eax,eax
c001977a:	75 21                	jne    c001979d <opcodeFault(regs*, void*)+0x285>
c001977c:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c001977f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0019782:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0019785:	89 01                	mov    DWORD PTR [ecx],eax
c0019787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001978a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001978d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019790:	83 c8 40             	or     eax,0x40
c0019793:	89 c2                	mov    edx,eax
c0019795:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019798:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001979b:	eb 3e                	jmp    c00197db <opcodeFault(regs*, void*)+0x2c3>
c001979d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00197a0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00197a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00197a5:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00197a8:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00197ab:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00197ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00197b1:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00197b4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00197b7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00197ba:	89 d0                	mov    eax,edx
c00197bc:	31 d2                	xor    edx,edx
c00197be:	89 c3                	mov    ebx,eax
c00197c0:	89 d6                	mov    esi,edx
c00197c2:	89 da                	mov    edx,ebx
c00197c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00197c7:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00197ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00197cd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00197d0:	83 e0 bf             	and    eax,0xffffffbf
c00197d3:	89 c2                	mov    edx,eax
c00197d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00197d8:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00197db:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c00197e0:	48                   	dec    eax
c00197e1:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c00197e6:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c00197eb:	85 c0                	test   eax,eax
c00197ed:	75 01                	jne    c00197f0 <opcodeFault(regs*, void*)+0x2d8>
c00197ef:	fb                   	sti    
c00197f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00197f3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00197f6:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00197f9:	01 c2                	add    edx,eax
c00197fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00197fe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019801:	83 ec 0c             	sub    esp,0xc
c0019804:	68 36 4d 02 c0       	push   0xc0024d36
c0019809:	e8 6b 34 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001980e:	83 c4 10             	add    esp,0x10
c0019811:	e9 f5 00 00 00       	jmp    c001990b <opcodeFault(regs*, void*)+0x3f3>
c0019816:	83 ec 0c             	sub    esp,0xc
c0019819:	68 49 4d 02 c0       	push   0xc0024d49
c001981e:	e8 56 34 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0019823:	83 c4 10             	add    esp,0x10
c0019826:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019829:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001982c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001982f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0019832:	c1 e0 04             	shl    eax,0x4
c0019835:	01 d0                	add    eax,edx
c0019837:	83 c0 03             	add    eax,0x3
c001983a:	8a 00                	mov    al,BYTE PTR [eax]
c001983c:	0f b6 d8             	movzx  ebx,al
c001983f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019842:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0019845:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019848:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001984b:	c1 e0 04             	shl    eax,0x4
c001984e:	01 d0                	add    eax,edx
c0019850:	83 c0 02             	add    eax,0x2
c0019853:	8a 00                	mov    al,BYTE PTR [eax]
c0019855:	0f b6 c8             	movzx  ecx,al
c0019858:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001985b:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001985e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019861:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0019864:	c1 e0 04             	shl    eax,0x4
c0019867:	01 d0                	add    eax,edx
c0019869:	40                   	inc    eax
c001986a:	8a 00                	mov    al,BYTE PTR [eax]
c001986c:	0f b6 d0             	movzx  edx,al
c001986f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019872:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0019875:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019878:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001987b:	c1 e0 04             	shl    eax,0x4
c001987e:	01 f0                	add    eax,esi
c0019880:	8a 00                	mov    al,BYTE PTR [eax]
c0019882:	0f b6 c0             	movzx  eax,al
c0019885:	83 ec 0c             	sub    esp,0xc
c0019888:	53                   	push   ebx
c0019889:	51                   	push   ecx
c001988a:	52                   	push   edx
c001988b:	50                   	push   eax
c001988c:	68 20 4e 02 c0       	push   0xc0024e20
c0019891:	e8 e3 33 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0019896:	83 c4 20             	add    esp,0x20
c0019899:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001989c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001989f:	83 c0 03             	add    eax,0x3
c00198a2:	8a 00                	mov    al,BYTE PTR [eax]
c00198a4:	0f b6 d8             	movzx  ebx,al
c00198a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00198aa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00198ad:	83 c0 02             	add    eax,0x2
c00198b0:	8a 00                	mov    al,BYTE PTR [eax]
c00198b2:	0f b6 c8             	movzx  ecx,al
c00198b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00198b8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00198bb:	40                   	inc    eax
c00198bc:	8a 00                	mov    al,BYTE PTR [eax]
c00198be:	0f b6 d0             	movzx  edx,al
c00198c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00198c4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00198c7:	8a 00                	mov    al,BYTE PTR [eax]
c00198c9:	0f b6 c0             	movzx  eax,al
c00198cc:	83 ec 0c             	sub    esp,0xc
c00198cf:	53                   	push   ebx
c00198d0:	51                   	push   ecx
c00198d1:	52                   	push   edx
c00198d2:	50                   	push   eax
c00198d3:	68 48 4e 02 c0       	push   0xc0024e48
c00198d8:	e8 9c 33 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c00198dd:	83 c4 20             	add    esp,0x20
c00198e0:	83 ec 0c             	sub    esp,0xc
c00198e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00198e6:	e8 49 f4 ff ff       	call   c0018d34 <displayDebugInfo(regs*)>
c00198eb:	83 c4 10             	add    esp,0x10
c00198ee:	83 ec 0c             	sub    esp,0xc
c00198f1:	68 5a 4d 02 c0       	push   0xc0024d5a
c00198f6:	e8 8d fa ff ff       	call   c0019388 <displayProgramFault(char const*)>
c00198fb:	83 c4 10             	add    esp,0x10
c00198fe:	83 ec 0c             	sub    esp,0xc
c0019901:	6a 00                	push   0x0
c0019903:	e8 48 d7 ff ff       	call   c0017050 <Thr::terminateFromIRQ(int)>
c0019908:	83 c4 10             	add    esp,0x10
c001990b:	8d 65 f8             	lea    esp,[ebp-0x8]
c001990e:	5b                   	pop    ebx
c001990f:	5e                   	pop    esi
c0019910:	5d                   	pop    ebp
c0019911:	c3                   	ret    

c0019912 <i386SaveCoprocessor(void*)>:
c0019912:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019916:	83 c0 3f             	add    eax,0x3f
c0019919:	83 e0 c0             	and    eax,0xffffffc0
c001991c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019920:	ff 25 94 9c 02 c0    	jmp    DWORD PTR ds:0xc0029c94

c0019926 <i386LoadCoprocessor(void*)>:
c0019926:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001992a:	83 c0 3f             	add    eax,0x3f
c001992d:	83 e0 c0             	and    eax,0xffffffc0
c0019930:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019934:	ff 25 90 9c 02 c0    	jmp    DWORD PTR ds:0xc0029c90

c001993a <x87EmulHandler(regs*, void*)>:
c001993a:	53                   	push   ebx
c001993b:	83 ec 14             	sub    esp,0x14
c001993e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0019942:	68 67 4d 02 c0       	push   0xc0024d67
c0019947:	e8 2d 33 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001994c:	83 c4 10             	add    esp,0x10
c001994f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019954:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0019958:	74 10                	je     c001996a <x87EmulHandler(regs*, void*)+0x30>
c001995a:	83 ec 0c             	sub    esp,0xc
c001995d:	68 77 4d 02 c0       	push   0xc0024d77
c0019962:	e8 a0 96 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c0019967:	83 c4 10             	add    esp,0x10
c001996a:	0f 20 c0             	mov    eax,cr0
c001996d:	a8 08                	test   al,0x8
c001996f:	74 56                	je     c00199c7 <x87EmulHandler(regs*, void*)+0x8d>
c0019971:	0f 06                	clts   
c0019973:	a1 8c 9c 02 c0       	mov    eax,ds:0xc0029c8c
c0019978:	85 c0                	test   eax,eax
c001997a:	74 0e                	je     c001998a <x87EmulHandler(regs*, void*)+0x50>
c001997c:	83 ec 0c             	sub    esp,0xc
c001997f:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0019982:	e8 8b ff ff ff       	call   c0019912 <i386SaveCoprocessor(void*)>
c0019987:	83 c4 10             	add    esp,0x10
c001998a:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0019990:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0019994:	75 12                	jne    c00199a8 <x87EmulHandler(regs*, void*)+0x6e>
c0019996:	83 ec 0c             	sub    esp,0xc
c0019999:	68 40 02 00 00       	push   0x240
c001999e:	e8 c8 ff fe ff       	call   c000996b <malloc>
c00199a3:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00199a6:	eb 10                	jmp    c00199b8 <x87EmulHandler(regs*, void*)+0x7e>
c00199a8:	83 ec 0c             	sub    esp,0xc
c00199ab:	a1 8c 9c 02 c0       	mov    eax,ds:0xc0029c8c
c00199b0:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00199b3:	e8 6e ff ff ff       	call   c0019926 <i386LoadCoprocessor(void*)>
c00199b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00199bd:	83 c4 10             	add    esp,0x10
c00199c0:	a3 8c 9c 02 c0       	mov    ds:0xc0029c8c,eax
c00199c5:	eb 2e                	jmp    c00199f5 <x87EmulHandler(regs*, void*)+0xbb>
c00199c7:	83 ec 0c             	sub    esp,0xc
c00199ca:	53                   	push   ebx
c00199cb:	e8 ca e7 ff ff       	call   c001819a <Vm::x87Handler(regs*)>
c00199d0:	83 c4 10             	add    esp,0x10
c00199d3:	84 c0                	test   al,al
c00199d5:	75 1e                	jne    c00199f5 <x87EmulHandler(regs*, void*)+0xbb>
c00199d7:	83 ec 0c             	sub    esp,0xc
c00199da:	68 8b 4d 02 c0       	push   0xc0024d8b
c00199df:	e8 95 32 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c00199e4:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00199ec:	83 c4 18             	add    esp,0x18
c00199ef:	5b                   	pop    ebx
c00199f0:	e9 5b d6 ff ff       	jmp    c0017050 <Thr::terminateFromIRQ(int)>
c00199f5:	83 c4 08             	add    esp,0x8
c00199f8:	5b                   	pop    ebx
c00199f9:	c3                   	ret    

c00199fa <Hal::initialiseCoprocessor()>:
c00199fa:	83 ec 10             	sub    esp,0x10
c00199fd:	c7 05 8c 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c8c,0x0
c0019a07:	6a 00                	push   0x0
c0019a09:	68 3a 99 01 c0       	push   0xc001993a
c0019a0e:	6a 07                	push   0x7
c0019a10:	e8 7f 4c ff ff       	call   c000e694 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019a15:	e8 16 79 00 00       	call   c0021330 <avxDetect>
c0019a1a:	83 c4 10             	add    esp,0x10
c0019a1d:	85 c0                	test   eax,eax
c0019a1f:	74 29                	je     c0019a4a <Hal::initialiseCoprocessor()+0x50>
c0019a21:	83 ec 0c             	sub    esp,0xc
c0019a24:	68 a1 4d 02 c0       	push   0xc0024da1
c0019a29:	e8 4b 32 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0019a2e:	c7 05 94 9c 02 c0 5a 13 02 c0 	mov    DWORD PTR ds:0xc0029c94,0xc002135a
c0019a38:	c7 05 90 9c 02 c0 6b 13 02 c0 	mov    DWORD PTR ds:0xc0029c90,0xc002136b
c0019a42:	83 c4 1c             	add    esp,0x1c
c0019a45:	e9 32 79 00 00       	jmp    c002137c <avxInit>
c0019a4a:	e8 81 79 00 00       	call   c00213d0 <absolutelyNoChanceInHell>
c0019a4f:	85 c0                	test   eax,eax
c0019a51:	74 29                	je     c0019a7c <Hal::initialiseCoprocessor()+0x82>
c0019a53:	83 ec 0c             	sub    esp,0xc
c0019a56:	68 a7 4d 02 c0       	push   0xc0024da7
c0019a5b:	e8 19 32 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0019a60:	c7 05 94 9c 02 c0 e8 13 02 c0 	mov    DWORD PTR ds:0xc0029c94,0xc00213e8
c0019a6a:	c7 05 90 9c 02 c0 f0 13 02 c0 	mov    DWORD PTR ds:0xc0029c90,0xc00213f0
c0019a74:	83 c4 1c             	add    esp,0x1c
c0019a77:	e9 7c 79 00 00       	jmp    c00213f8 <sseInit>
c0019a7c:	e8 95 79 00 00       	call   c0021416 <x87Detect>
c0019a81:	85 c0                	test   eax,eax
c0019a83:	74 29                	je     c0019aae <Hal::initialiseCoprocessor()+0xb4>
c0019a85:	83 ec 0c             	sub    esp,0xc
c0019a88:	68 ad 4d 02 c0       	push   0xc0024dad
c0019a8d:	e8 e7 31 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0019a92:	c7 05 94 9c 02 c0 31 14 02 c0 	mov    DWORD PTR ds:0xc0029c94,0xc0021431
c0019a9c:	c7 05 90 9c 02 c0 38 14 02 c0 	mov    DWORD PTR ds:0xc0029c90,0xc0021438
c0019aa6:	83 c4 1c             	add    esp,0x1c
c0019aa9:	e9 91 79 00 00       	jmp    c002143f <x87Init>
c0019aae:	83 ec 0c             	sub    esp,0xc
c0019ab1:	68 b3 4d 02 c0       	push   0xc0024db3
c0019ab6:	e8 be 31 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0019abb:	c7 05 94 9c 02 c0 f9 8c 01 c0 	mov    DWORD PTR ds:0xc0029c94,0xc0018cf9
c0019ac5:	c7 05 90 9c 02 c0 f9 8c 01 c0 	mov    DWORD PTR ds:0xc0029c90,0xc0018cf9
c0019acf:	0f 20 c0             	mov    eax,cr0
c0019ad2:	83 c8 04             	or     eax,0x4
c0019ad5:	0f 22 c0             	mov    cr0,eax
c0019ad8:	83 c4 1c             	add    esp,0x1c
c0019adb:	c3                   	ret    

c0019adc <Hal::panic(char const*)>:
c0019adc:	e9 26 95 ff ff       	jmp    c0013007 <Krnl::panic(char const*)>

c0019ae1 <Hal::initialise()>:
c0019ae1:	53                   	push   ebx
c0019ae2:	83 ec 08             	sub    esp,0x8
c0019ae5:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c0019aea:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0019af0:	b8 fa 8c 01 c0       	mov    eax,0xc0018cfa
c0019af5:	f6 82 8c 11 00 00 02 	test   BYTE PTR [edx+0x118c],0x2
c0019afc:	74 05                	je     c0019b03 <Hal::initialise()+0x22>
c0019afe:	b8 ff 8c 01 c0       	mov    eax,0xc0018cff
c0019b03:	a3 98 9c 02 c0       	mov    ds:0xc0029c98,eax
c0019b08:	e8 ac 4d ff ff       	call   c000e8b9 <setupINTS()>
c0019b0d:	80 3d a0 8f 02 c0 00 	cmp    BYTE PTR ds:0xc0028fa0,0x0
c0019b14:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c0019b19:	75 07                	jne    c0019b22 <Hal::initialise()+0x41>
c0019b1b:	80 a0 e8 01 00 00 fe 	and    BYTE PTR [eax+0x1e8],0xfe
c0019b22:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019b28:	83 e0 01             	and    eax,0x1
c0019b2b:	a2 88 9c 02 c0       	mov    ds:0xc0029c88,al
c0019b30:	e8 13 03 00 00       	call   c0019e48 <picOpen()>
c0019b35:	80 3d 88 9c 02 c0 00 	cmp    BYTE PTR ds:0xc0029c88,0x0
c0019b3c:	74 0a                	je     c0019b48 <Hal::initialise()+0x67>
c0019b3e:	e8 55 02 00 00       	call   c0019d98 <picDisable()>
c0019b43:	e8 7a 71 00 00       	call   c0020cc2 <apicOpen()>
c0019b48:	50                   	push   eax
c0019b49:	6a 00                	push   0x0
c0019b4b:	68 c4 94 01 c0       	push   0xc00194c4
c0019b50:	6a 00                	push   0x0
c0019b52:	e8 3d 4b ff ff       	call   c000e694 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019b57:	83 c4 0c             	add    esp,0xc
c0019b5a:	6a 00                	push   0x0
c0019b5c:	68 c4 94 01 c0       	push   0xc00194c4
c0019b61:	6a 01                	push   0x1
c0019b63:	e8 2c 4b ff ff       	call   c000e694 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019b68:	83 c4 0c             	add    esp,0xc
c0019b6b:	6a 00                	push   0x0
c0019b6d:	68 02 8d 01 c0       	push   0xc0018d02
c0019b72:	6a 02                	push   0x2
c0019b74:	e8 1b 4b ff ff       	call   c000e694 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019b79:	83 c4 0c             	add    esp,0xc
c0019b7c:	6a 00                	push   0x0
c0019b7e:	68 c4 94 01 c0       	push   0xc00194c4
c0019b83:	6a 03                	push   0x3
c0019b85:	e8 0a 4b ff ff       	call   c000e694 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019b8a:	83 c4 0c             	add    esp,0xc
c0019b8d:	6a 00                	push   0x0
c0019b8f:	68 c4 94 01 c0       	push   0xc00194c4
c0019b94:	6a 04                	push   0x4
c0019b96:	e8 f9 4a ff ff       	call   c000e694 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019b9b:	83 c4 0c             	add    esp,0xc
c0019b9e:	6a 00                	push   0x0
c0019ba0:	68 c4 94 01 c0       	push   0xc00194c4
c0019ba5:	6a 05                	push   0x5
c0019ba7:	e8 e8 4a ff ff       	call   c000e694 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019bac:	83 c4 0c             	add    esp,0xc
c0019baf:	6a 00                	push   0x0
c0019bb1:	68 18 95 01 c0       	push   0xc0019518
c0019bb6:	6a 06                	push   0x6
c0019bb8:	e8 d7 4a ff ff       	call   c000e694 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019bbd:	83 c4 0c             	add    esp,0xc
c0019bc0:	6a 00                	push   0x0
c0019bc2:	68 1b 8d 01 c0       	push   0xc0018d1b
c0019bc7:	6a 08                	push   0x8
c0019bc9:	e8 c6 4a ff ff       	call   c000e694 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019bce:	83 c4 0c             	add    esp,0xc
c0019bd1:	6a 00                	push   0x0
c0019bd3:	68 c4 94 01 c0       	push   0xc00194c4
c0019bd8:	6a 09                	push   0x9
c0019bda:	e8 b5 4a ff ff       	call   c000e694 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019bdf:	83 c4 0c             	add    esp,0xc
c0019be2:	6a 00                	push   0x0
c0019be4:	68 c4 94 01 c0       	push   0xc00194c4
c0019be9:	6a 0a                	push   0xa
c0019beb:	e8 a4 4a ff ff       	call   c000e694 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019bf0:	83 c4 0c             	add    esp,0xc
c0019bf3:	6a 00                	push   0x0
c0019bf5:	68 c4 94 01 c0       	push   0xc00194c4
c0019bfa:	6a 0b                	push   0xb
c0019bfc:	e8 93 4a ff ff       	call   c000e694 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019c01:	83 c4 0c             	add    esp,0xc
c0019c04:	6a 00                	push   0x0
c0019c06:	68 c4 94 01 c0       	push   0xc00194c4
c0019c0b:	6a 0c                	push   0xc
c0019c0d:	e8 82 4a ff ff       	call   c000e694 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019c12:	83 c4 0c             	add    esp,0xc
c0019c15:	6a 00                	push   0x0
c0019c17:	68 c5 93 01 c0       	push   0xc00193c5
c0019c1c:	6a 0d                	push   0xd
c0019c1e:	e8 71 4a ff ff       	call   c000e694 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019c23:	83 c4 0c             	add    esp,0xc
c0019c26:	6a 00                	push   0x0
c0019c28:	68 3a 94 01 c0       	push   0xc001943a
c0019c2d:	6a 0e                	push   0xe
c0019c2f:	e8 60 4a ff ff       	call   c000e694 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019c34:	83 c4 0c             	add    esp,0xc
c0019c37:	6a 00                	push   0x0
c0019c39:	68 c4 94 01 c0       	push   0xc00194c4
c0019c3e:	6a 0f                	push   0xf
c0019c40:	e8 4f 4a ff ff       	call   c000e694 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019c45:	83 c4 0c             	add    esp,0xc
c0019c48:	6a 00                	push   0x0
c0019c4a:	68 c4 94 01 c0       	push   0xc00194c4
c0019c4f:	6a 10                	push   0x10
c0019c51:	e8 3e 4a ff ff       	call   c000e694 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019c56:	83 c4 0c             	add    esp,0xc
c0019c59:	6a 00                	push   0x0
c0019c5b:	68 c4 94 01 c0       	push   0xc00194c4
c0019c60:	6a 11                	push   0x11
c0019c62:	e8 2d 4a ff ff       	call   c000e694 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019c67:	83 c4 0c             	add    esp,0xc
c0019c6a:	6a 00                	push   0x0
c0019c6c:	68 c4 94 01 c0       	push   0xc00194c4
c0019c71:	6a 12                	push   0x12
c0019c73:	e8 1c 4a ff ff       	call   c000e694 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019c78:	83 c4 0c             	add    esp,0xc
c0019c7b:	6a 00                	push   0x0
c0019c7d:	68 c4 94 01 c0       	push   0xc00194c4
c0019c82:	6a 13                	push   0x13
c0019c84:	e8 0b 4a ff ff       	call   c000e694 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019c89:	83 c4 0c             	add    esp,0xc
c0019c8c:	6a 00                	push   0x0
c0019c8e:	68 c4 94 01 c0       	push   0xc00194c4
c0019c93:	6a 14                	push   0x14
c0019c95:	e8 fa 49 ff ff       	call   c000e694 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019c9a:	83 c4 0c             	add    esp,0xc
c0019c9d:	6a 00                	push   0x0
c0019c9f:	68 c4 94 01 c0       	push   0xc00194c4
c0019ca4:	6a 1e                	push   0x1e
c0019ca6:	e8 e9 49 ff ff       	call   c000e694 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019cab:	83 c4 0c             	add    esp,0xc
c0019cae:	6a 00                	push   0x0
c0019cb0:	68 b1 4c 01 c0       	push   0xc0014cb1
c0019cb5:	6a 60                	push   0x60
c0019cb7:	e8 d8 49 ff ff       	call   c000e694 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019cbc:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c0019cc1:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0019ccb:	c7 04 24 bc 4d 02 c0 	mov    DWORD PTR [esp],0xc0024dbc
c0019cd2:	e8 ee fc fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0019cd7:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0019cde:	e8 88 fc fe ff       	call   c000996b <malloc>
c0019ce3:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ce6:	89 c3                	mov    ebx,eax
c0019ce8:	e8 ed 09 00 00       	call   c001a6da <RTC::RTC()>
c0019ced:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0019cf7:	5a                   	pop    edx
c0019cf8:	59                   	pop    ecx
c0019cf9:	53                   	push   ebx
c0019cfa:	ff 35 88 66 02 c0    	push   DWORD PTR ds:0xc0026688
c0019d00:	e8 f1 43 ff ff       	call   c000e0f6 <Device::addChild(Device*)>
c0019d05:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d07:	6a 00                	push   0x0
c0019d09:	6a 00                	push   0x0
c0019d0b:	6a 00                	push   0x0
c0019d0d:	53                   	push   ebx
c0019d0e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019d11:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c0019d16:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0019d1c:	83 c4 28             	add    esp,0x28
c0019d1f:	5b                   	pop    ebx
c0019d20:	c3                   	ret    

c0019d21 <Hal::makeBeep(int)>:
c0019d21:	53                   	push   ebx
c0019d22:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0019d26:	85 db                	test   ebx,ebx
c0019d28:	75 07                	jne    c0019d31 <Hal::makeBeep(int)+0x10>
c0019d2a:	e4 61                	in     al,0x61
c0019d2c:	83 e0 fc             	and    eax,0xfffffffc
c0019d2f:	eb 26                	jmp    c0019d57 <Hal::makeBeep(int)+0x36>
c0019d31:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0019d36:	99                   	cdq    
c0019d37:	f7 fb                	idiv   ebx
c0019d39:	89 c1                	mov    ecx,eax
c0019d3b:	b0 b6                	mov    al,0xb6
c0019d3d:	e6 43                	out    0x43,al
c0019d3f:	88 c8                	mov    al,cl
c0019d41:	e6 42                	out    0x42,al
c0019d43:	89 c8                	mov    eax,ecx
c0019d45:	c1 e8 08             	shr    eax,0x8
c0019d48:	e6 42                	out    0x42,al
c0019d4a:	e4 61                	in     al,0x61
c0019d4c:	88 c2                	mov    dl,al
c0019d4e:	83 ca 03             	or     edx,0x3
c0019d51:	38 c2                	cmp    dl,al
c0019d53:	74 04                	je     c0019d59 <Hal::makeBeep(int)+0x38>
c0019d55:	88 d0                	mov    al,dl
c0019d57:	e6 61                	out    0x61,al
c0019d59:	5b                   	pop    ebx
c0019d5a:	c3                   	ret    

c0019d5b <Hal::getRand()>:
c0019d5b:	31 c0                	xor    eax,eax
c0019d5d:	c3                   	ret    

c0019d5e <Hal::endOfInterrupt(int)>:
c0019d5e:	80 3d 88 9c 02 c0 00 	cmp    BYTE PTR ds:0xc0029c88,0x0
c0019d65:	74 23                	je     c0019d8a <Hal::endOfInterrupt(int)+0x2c>
c0019d67:	83 ec 14             	sub    esp,0x14
c0019d6a:	6a 1b                	push   0x1b
c0019d6c:	ff 35 88 66 02 c0    	push   DWORD PTR ds:0xc0026688
c0019d72:	e8 ab f1 fe ff       	call   c0008f22 <Computer::rdmsr(unsigned int)>
c0019d77:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019d7c:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0019d86:	83 c4 1c             	add    esp,0x1c
c0019d89:	c3                   	ret    
c0019d8a:	e9 3d 02 00 00       	jmp    c0019fcc <picEOI(int)>
c0019d8f:	90                   	nop

c0019d90 <picIoWait()>:
c0019d90:	eb 00                	jmp    c0019d92 <picIoWait()+0x2>
c0019d92:	eb 00                	jmp    c0019d94 <picIoWait()+0x4>
c0019d94:	90                   	nop
c0019d95:	c3                   	ret    
c0019d96:	66 90                	xchg   ax,ax

c0019d98 <picDisable()>:
c0019d98:	83 ec 10             	sub    esp,0x10
c0019d9b:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0019da2:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0019da7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019dab:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0019db0:	ee                   	out    dx,al
c0019db1:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0019db8:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0019dbd:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0019dc1:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0019dc6:	ee                   	out    dx,al
c0019dc7:	90                   	nop
c0019dc8:	83 c4 10             	add    esp,0x10
c0019dcb:	c3                   	ret    

c0019dcc <picGetIRQReg(int)>:
c0019dcc:	83 ec 10             	sub    esp,0x10
c0019dcf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019dd3:	0f b6 c0             	movzx  eax,al
c0019dd6:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0019ddd:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0019de1:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0019de5:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0019dea:	ee                   	out    dx,al
c0019deb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019def:	0f b6 c0             	movzx  eax,al
c0019df2:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0019df9:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0019dfd:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0019e01:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0019e06:	ee                   	out    dx,al
c0019e07:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0019e0e:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0019e13:	89 c2                	mov    edx,eax
c0019e15:	ec                   	in     al,dx
c0019e16:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019e1a:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019e1e:	0f b6 c0             	movzx  eax,al
c0019e21:	c1 e0 08             	shl    eax,0x8
c0019e24:	89 c1                	mov    ecx,eax
c0019e26:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0019e2d:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0019e32:	89 c2                	mov    edx,eax
c0019e34:	ec                   	in     al,dx
c0019e35:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0019e39:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0019e3d:	0f b6 c0             	movzx  eax,al
c0019e40:	09 c8                	or     eax,ecx
c0019e42:	83 c4 10             	add    esp,0x10
c0019e45:	c3                   	ret    
c0019e46:	66 90                	xchg   ax,ax

c0019e48 <picOpen()>:
c0019e48:	83 ec 50             	sub    esp,0x50
c0019e4b:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0019e52:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0019e57:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019e5b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019e5f:	ee                   	out    dx,al
c0019e60:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0019e67:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019e6c:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0019e70:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019e74:	ee                   	out    dx,al
c0019e75:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0019e7d:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0019e85:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0019e8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019e90:	89 c2                	mov    edx,eax
c0019e92:	ec                   	in     al,dx
c0019e93:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0019e97:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0019e9b:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0019e9f:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0019ea6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019eaa:	89 c2                	mov    edx,eax
c0019eac:	ec                   	in     al,dx
c0019ead:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0019eb1:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0019eb5:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0019eb9:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0019ec0:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0019ec5:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0019ec9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019ecd:	ee                   	out    dx,al
c0019ece:	e8 bd fe ff ff       	call   c0019d90 <picIoWait()>
c0019ed3:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0019eda:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0019edf:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0019ee3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0019ee7:	ee                   	out    dx,al
c0019ee8:	e8 a3 fe ff ff       	call   c0019d90 <picIoWait()>
c0019eed:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0019ef1:	0f b6 c0             	movzx  eax,al
c0019ef4:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0019efb:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0019eff:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0019f03:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019f07:	ee                   	out    dx,al
c0019f08:	e8 83 fe ff ff       	call   c0019d90 <picIoWait()>
c0019f0d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0019f11:	0f b6 c0             	movzx  eax,al
c0019f14:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0019f1b:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0019f1f:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0019f23:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0019f27:	ee                   	out    dx,al
c0019f28:	e8 63 fe ff ff       	call   c0019d90 <picIoWait()>
c0019f2d:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0019f34:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0019f39:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0019f3d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019f41:	ee                   	out    dx,al
c0019f42:	e8 49 fe ff ff       	call   c0019d90 <picIoWait()>
c0019f47:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0019f4e:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0019f53:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019f57:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019f5b:	ee                   	out    dx,al
c0019f5c:	e8 2f fe ff ff       	call   c0019d90 <picIoWait()>
c0019f61:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0019f68:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0019f6d:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0019f71:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019f75:	ee                   	out    dx,al
c0019f76:	e8 15 fe ff ff       	call   c0019d90 <picIoWait()>
c0019f7b:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0019f82:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0019f87:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0019f8b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0019f8f:	ee                   	out    dx,al
c0019f90:	e8 fb fd ff ff       	call   c0019d90 <picIoWait()>
c0019f95:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0019f9a:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0019fa1:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0019fa5:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0019fa9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0019fad:	ee                   	out    dx,al
c0019fae:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0019fb3:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0019fba:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0019fbe:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0019fc2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0019fc6:	ee                   	out    dx,al
c0019fc7:	90                   	nop
c0019fc8:	83 c4 50             	add    esp,0x50
c0019fcb:	c3                   	ret    

c0019fcc <picEOI(int)>:
c0019fcc:	83 ec 10             	sub    esp,0x10
c0019fcf:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0019fd4:	75 1e                	jne    c0019ff4 <picEOI(int)+0x28>
c0019fd6:	6a 0b                	push   0xb
c0019fd8:	e8 ef fd ff ff       	call   c0019dcc <picGetIRQReg(int)>
c0019fdd:	83 c4 04             	add    esp,0x4
c0019fe0:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0019fe5:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0019fea:	25 80 00 00 00       	and    eax,0x80
c0019fef:	74 73                	je     c001a064 <picEOI(int)+0x98>
c0019ff1:	8d 76 00             	lea    esi,[esi+0x0]
c0019ff4:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0019ff9:	75 31                	jne    c001a02c <picEOI(int)+0x60>
c0019ffb:	6a 0b                	push   0xb
c0019ffd:	e8 ca fd ff ff       	call   c0019dcc <picGetIRQReg(int)>
c001a002:	83 c4 04             	add    esp,0x4
c001a005:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001a00a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a00e:	66 85 c0             	test   ax,ax
c001a011:	78 19                	js     c001a02c <picEOI(int)+0x60>
c001a013:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001a01a:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001a01f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a023:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001a028:	ee                   	out    dx,al
c001a029:	eb 3d                	jmp    c001a068 <picEOI(int)+0x9c>
c001a02b:	90                   	nop
c001a02c:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001a031:	7e 19                	jle    c001a04c <picEOI(int)+0x80>
c001a033:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001a03a:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001a03f:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001a043:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001a048:	ee                   	out    dx,al
c001a049:	8d 76 00             	lea    esi,[esi+0x0]
c001a04c:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001a053:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001a058:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001a05c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001a061:	ee                   	out    dx,al
c001a062:	eb 04                	jmp    c001a068 <picEOI(int)+0x9c>
c001a064:	90                   	nop
c001a065:	8d 76 00             	lea    esi,[esi+0x0]
c001a068:	83 c4 10             	add    esp,0x10
c001a06b:	c3                   	ret    

c001a06c <RTC::open(int, int, void*)>:
c001a06c:	31 c0                	xor    eax,eax
c001a06e:	c3                   	ret    
c001a06f:	90                   	nop

c001a070 <RTC::close(int, int, void*)>:
c001a070:	31 c0                	xor    eax,eax
c001a072:	c3                   	ret    
c001a073:	90                   	nop

c001a074 <RTC::timeInSecondsUTC()>:
c001a074:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a078:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001a07e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a084:	c3                   	ret    
c001a085:	90                   	nop

c001a086 <RTC::timeInDatetimeUTC()>:
c001a086:	53                   	push   ebx
c001a087:	83 ec 14             	sub    esp,0x14
c001a08a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a08e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a092:	8b 10                	mov    edx,DWORD PTR [eax]
c001a094:	50                   	push   eax
c001a095:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001a098:	83 c4 0c             	add    esp,0xc
c001a09b:	52                   	push   edx
c001a09c:	50                   	push   eax
c001a09d:	53                   	push   ebx
c001a09e:	e8 c7 3d ff ff       	call   c000de6a <secondsToDatetime(unsigned long long)>
c001a0a3:	89 d8                	mov    eax,ebx
c001a0a5:	83 c4 14             	add    esp,0x14
c001a0a8:	5b                   	pop    ebx
c001a0a9:	c2 04 00             	ret    0x4

c001a0ac <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001a0ac:	56                   	push   esi
c001a0ad:	53                   	push   ebx
c001a0ae:	83 ec 14             	sub    esp,0x14
c001a0b1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a0b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a0b7:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001a0ba:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a0be:	52                   	push   edx
c001a0bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a0c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a0c7:	50                   	push   eax
c001a0c8:	e8 9d 3d ff ff       	call   c000de6a <secondsToDatetime(unsigned long long)>
c001a0cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a0d1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a0d5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a0d9:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001a0dd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a0e1:	89 f0                	mov    eax,esi
c001a0e3:	83 c4 20             	add    esp,0x20
c001a0e6:	5b                   	pop    ebx
c001a0e7:	5e                   	pop    esi
c001a0e8:	ff e0                	jmp    eax

c001a0ea <RTC::~RTC()>:
c001a0ea:	83 ec 0c             	sub    esp,0xc
c001a0ed:	ba 3c 4f 02 c0       	mov    edx,0xc0024f3c
c001a0f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0f6:	89 10                	mov    DWORD PTR [eax],edx
c001a0f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0fc:	83 ec 0c             	sub    esp,0xc
c001a0ff:	50                   	push   eax
c001a100:	e8 ef 3a ff ff       	call   c000dbf4 <Clock::~Clock()>
c001a105:	83 c4 10             	add    esp,0x10
c001a108:	90                   	nop
c001a109:	83 c4 0c             	add    esp,0xc
c001a10c:	c3                   	ret    
c001a10d:	90                   	nop

c001a10e <RTC::~RTC()>:
c001a10e:	83 ec 0c             	sub    esp,0xc
c001a111:	83 ec 0c             	sub    esp,0xc
c001a114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a118:	e8 cd ff ff ff       	call   c001a0ea <RTC::~RTC()>
c001a11d:	83 c4 10             	add    esp,0x10
c001a120:	83 ec 08             	sub    esp,0x8
c001a123:	68 60 01 00 00       	push   0x160
c001a128:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a12c:	e8 67 2a ff ff       	call   c000cb98 <operator delete(void*, unsigned long)>
c001a131:	83 c4 10             	add    esp,0x10
c001a134:	83 c4 0c             	add    esp,0xc
c001a137:	c3                   	ret    

c001a138 <RTC::get_update_in_progress_flag()>:
c001a138:	83 ec 14             	sub    esp,0x14
c001a13b:	6a 0a                	push   0xa
c001a13d:	ff 35 88 66 02 c0    	push   DWORD PTR ds:0xc0026688
c001a143:	e8 8e ee fe ff       	call   c0008fd6 <Computer::readCMOS(unsigned char)>
c001a148:	83 c4 1c             	add    esp,0x1c
c001a14b:	c0 e8 07             	shr    al,0x7
c001a14e:	c3                   	ret    
c001a14f:	90                   	nop

c001a150 <RTC::completeRTCRefresh()>:
c001a150:	55                   	push   ebp
c001a151:	57                   	push   edi
c001a152:	56                   	push   esi
c001a153:	53                   	push   ebx
c001a154:	83 ec 2c             	sub    esp,0x2c
c001a157:	8b 1d ac 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028cac
c001a15d:	83 ec 0c             	sub    esp,0xc
c001a160:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a164:	e8 cf ff ff ff       	call   c001a138 <RTC::get_update_in_progress_flag()>
c001a169:	83 c4 10             	add    esp,0x10
c001a16c:	84 c0                	test   al,al
c001a16e:	74 0e                	je     c001a17e <RTC::completeRTCRefresh()+0x2e>
c001a170:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001a176:	3b 05 ac 8c 02 c0    	cmp    eax,DWORD PTR ds:0xc0028cac
c001a17c:	73 df                	jae    c001a15d <RTC::completeRTCRefresh()+0xd>
c001a17e:	55                   	push   ebp
c001a17f:	55                   	push   ebp
c001a180:	6a 00                	push   0x0
c001a182:	ff 35 88 66 02 c0    	push   DWORD PTR ds:0xc0026688
c001a188:	e8 49 ee fe ff       	call   c0008fd6 <Computer::readCMOS(unsigned char)>
c001a18d:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001a191:	58                   	pop    eax
c001a192:	5a                   	pop    edx
c001a193:	6a 02                	push   0x2
c001a195:	ff 35 88 66 02 c0    	push   DWORD PTR ds:0xc0026688
c001a19b:	e8 36 ee fe ff       	call   c0008fd6 <Computer::readCMOS(unsigned char)>
c001a1a0:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001a1a4:	59                   	pop    ecx
c001a1a5:	5b                   	pop    ebx
c001a1a6:	6a 04                	push   0x4
c001a1a8:	ff 35 88 66 02 c0    	push   DWORD PTR ds:0xc0026688
c001a1ae:	e8 23 ee fe ff       	call   c0008fd6 <Computer::readCMOS(unsigned char)>
c001a1b3:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001a1b7:	5e                   	pop    esi
c001a1b8:	5f                   	pop    edi
c001a1b9:	6a 07                	push   0x7
c001a1bb:	ff 35 88 66 02 c0    	push   DWORD PTR ds:0xc0026688
c001a1c1:	e8 10 ee fe ff       	call   c0008fd6 <Computer::readCMOS(unsigned char)>
c001a1c6:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c001a1ca:	5d                   	pop    ebp
c001a1cb:	58                   	pop    eax
c001a1cc:	6a 08                	push   0x8
c001a1ce:	ff 35 88 66 02 c0    	push   DWORD PTR ds:0xc0026688
c001a1d4:	e8 fd ed fe ff       	call   c0008fd6 <Computer::readCMOS(unsigned char)>
c001a1d9:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c001a1dd:	58                   	pop    eax
c001a1de:	5a                   	pop    edx
c001a1df:	6a 09                	push   0x9
c001a1e1:	ff 35 88 66 02 c0    	push   DWORD PTR ds:0xc0026688
c001a1e7:	e8 ea ed fe ff       	call   c0008fd6 <Computer::readCMOS(unsigned char)>
c001a1ec:	83 c4 10             	add    esp,0x10
c001a1ef:	0f b6 e8             	movzx  ebp,al
c001a1f2:	8b 1d ac 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028cac
c001a1f8:	83 ec 0c             	sub    esp,0xc
c001a1fb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a1ff:	e8 34 ff ff ff       	call   c001a138 <RTC::get_update_in_progress_flag()>
c001a204:	83 c4 10             	add    esp,0x10
c001a207:	84 c0                	test   al,al
c001a209:	74 0e                	je     c001a219 <RTC::completeRTCRefresh()+0xc9>
c001a20b:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001a211:	3b 05 ac 8c 02 c0    	cmp    eax,DWORD PTR ds:0xc0028cac
c001a217:	73 df                	jae    c001a1f8 <RTC::completeRTCRefresh()+0xa8>
c001a219:	50                   	push   eax
c001a21a:	50                   	push   eax
c001a21b:	6a 00                	push   0x0
c001a21d:	ff 35 88 66 02 c0    	push   DWORD PTR ds:0xc0026688
c001a223:	e8 ae ed fe ff       	call   c0008fd6 <Computer::readCMOS(unsigned char)>
c001a228:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001a22c:	58                   	pop    eax
c001a22d:	5a                   	pop    edx
c001a22e:	6a 02                	push   0x2
c001a230:	ff 35 88 66 02 c0    	push   DWORD PTR ds:0xc0026688
c001a236:	e8 9b ed fe ff       	call   c0008fd6 <Computer::readCMOS(unsigned char)>
c001a23b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a23f:	59                   	pop    ecx
c001a240:	5b                   	pop    ebx
c001a241:	6a 04                	push   0x4
c001a243:	ff 35 88 66 02 c0    	push   DWORD PTR ds:0xc0026688
c001a249:	e8 88 ed fe ff       	call   c0008fd6 <Computer::readCMOS(unsigned char)>
c001a24e:	5e                   	pop    esi
c001a24f:	88 c3                	mov    bl,al
c001a251:	5f                   	pop    edi
c001a252:	6a 07                	push   0x7
c001a254:	ff 35 88 66 02 c0    	push   DWORD PTR ds:0xc0026688
c001a25a:	e8 77 ed fe ff       	call   c0008fd6 <Computer::readCMOS(unsigned char)>
c001a25f:	89 c6                	mov    esi,eax
c001a261:	58                   	pop    eax
c001a262:	5a                   	pop    edx
c001a263:	6a 08                	push   0x8
c001a265:	ff 35 88 66 02 c0    	push   DWORD PTR ds:0xc0026688
c001a26b:	e8 66 ed fe ff       	call   c0008fd6 <Computer::readCMOS(unsigned char)>
c001a270:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001a274:	59                   	pop    ecx
c001a275:	5f                   	pop    edi
c001a276:	6a 09                	push   0x9
c001a278:	ff 35 88 66 02 c0    	push   DWORD PTR ds:0xc0026688
c001a27e:	e8 53 ed fe ff       	call   c0008fd6 <Computer::readCMOS(unsigned char)>
c001a283:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001a287:	0f b6 f8             	movzx  edi,al
c001a28a:	83 c4 10             	add    esp,0x10
c001a28d:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c001a290:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001a294:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c001a298:	89 f1                	mov    ecx,esi
c001a29a:	0f 94 c0             	sete   al
c001a29d:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c001a2a1:	0f 94 c2             	sete   dl
c001a2a4:	21 d0                	and    eax,edx
c001a2a6:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c001a2aa:	0f 94 c2             	sete   dl
c001a2ad:	21 c2                	and    edx,eax
c001a2af:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c001a2b3:	0f 94 c0             	sete   al
c001a2b6:	21 d0                	and    eax,edx
c001a2b8:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001a2bc:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c001a2c0:	0f 94 c1             	sete   cl
c001a2c3:	84 c8                	test   al,cl
c001a2c5:	75 28                	jne    c001a2ef <RTC::completeRTCRefresh()+0x19f>
c001a2c7:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a2cb:	89 fd                	mov    ebp,edi
c001a2cd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a2d1:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c001a2d5:	89 f0                	mov    eax,esi
c001a2d7:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c001a2db:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a2df:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a2e3:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a2e6:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001a2ea:	e9 03 ff ff ff       	jmp    c001a1f2 <RTC::completeRTCRefresh()+0xa2>
c001a2ef:	39 fd                	cmp    ebp,edi
c001a2f1:	75 d4                	jne    c001a2c7 <RTC::completeRTCRefresh()+0x177>
c001a2f3:	55                   	push   ebp
c001a2f4:	55                   	push   ebp
c001a2f5:	6a 0b                	push   0xb
c001a2f7:	ff 35 88 66 02 c0    	push   DWORD PTR ds:0xc0026688
c001a2fd:	e8 d4 ec fe ff       	call   c0008fd6 <Computer::readCMOS(unsigned char)>
c001a302:	83 c4 10             	add    esp,0x10
c001a305:	89 c5                	mov    ebp,eax
c001a307:	a8 04                	test   al,0x4
c001a309:	75 75                	jne    c001a380 <RTC::completeRTCRefresh()+0x230>
c001a30b:	b1 0a                	mov    cl,0xa
c001a30d:	8a 14 24             	mov    dl,BYTE PTR [esp]
c001a310:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a313:	83 e2 0f             	and    edx,0xf
c001a316:	c0 e8 04             	shr    al,0x4
c001a319:	c1 ef 04             	shr    edi,0x4
c001a31c:	f6 e1                	mul    cl
c001a31e:	6b ff 0a             	imul   edi,edi,0xa
c001a321:	01 d0                	add    eax,edx
c001a323:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001a327:	88 04 24             	mov    BYTE PTR [esp],al
c001a32a:	83 e2 0f             	and    edx,0xf
c001a32d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a331:	c0 e8 04             	shr    al,0x4
c001a334:	f6 e1                	mul    cl
c001a336:	01 d0                	add    eax,edx
c001a338:	88 da                	mov    dl,bl
c001a33a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a33e:	83 e2 0f             	and    edx,0xf
c001a341:	88 d8                	mov    al,bl
c001a343:	83 e3 80             	and    ebx,0xffffff80
c001a346:	c0 e8 04             	shr    al,0x4
c001a349:	83 e0 07             	and    eax,0x7
c001a34c:	f6 e1                	mul    cl
c001a34e:	01 d0                	add    eax,edx
c001a350:	89 f2                	mov    edx,esi
c001a352:	09 c3                	or     ebx,eax
c001a354:	83 e2 0f             	and    edx,0xf
c001a357:	89 f0                	mov    eax,esi
c001a359:	c0 e8 04             	shr    al,0x4
c001a35c:	f6 e1                	mul    cl
c001a35e:	8d 34 02             	lea    esi,[edx+eax*1]
c001a361:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001a365:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a369:	83 e2 0f             	and    edx,0xf
c001a36c:	c0 e8 04             	shr    al,0x4
c001a36f:	f6 e1                	mul    cl
c001a371:	01 d0                	add    eax,edx
c001a373:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001a377:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a37b:	83 e0 0f             	and    eax,0xf
c001a37e:	01 c7                	add    edi,eax
c001a380:	83 e5 02             	and    ebp,0x2
c001a383:	75 14                	jne    c001a399 <RTC::completeRTCRefresh()+0x249>
c001a385:	84 db                	test   bl,bl
c001a387:	79 10                	jns    c001a399 <RTC::completeRTCRefresh()+0x249>
c001a389:	83 e3 7f             	and    ebx,0x7f
c001a38c:	b9 18 00 00 00       	mov    ecx,0x18
c001a391:	8d 43 0c             	lea    eax,[ebx+0xc]
c001a394:	99                   	cdq    
c001a395:	f7 f9                	idiv   ecx
c001a397:	88 d3                	mov    bl,dl
c001a399:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c001a39f:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c001a3a5:	77 06                	ja     c001a3ad <RTC::completeRTCRefresh()+0x25d>
c001a3a7:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c001a3ad:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001a3b1:	31 d2                	xor    edx,edx
c001a3b3:	c1 e1 10             	shl    ecx,0x10
c001a3b6:	89 d7                	mov    edi,edx
c001a3b8:	c1 e5 10             	shl    ebp,0x10
c001a3bb:	31 c0                	xor    eax,eax
c001a3bd:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c001a3c3:	09 cf                	or     edi,ecx
c001a3c5:	89 f1                	mov    ecx,esi
c001a3c7:	89 fa                	mov    edx,edi
c001a3c9:	88 c8                	mov    al,cl
c001a3cb:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c001a3cf:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c001a3d3:	88 da                	mov    dl,bl
c001a3d5:	0f b7 c8             	movzx  ecx,ax
c001a3d8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a3dc:	09 e9                	or     ecx,ebp
c001a3de:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a3e1:	0f b6 db             	movzx  ebx,bl
c001a3e4:	50                   	push   eax
c001a3e5:	50                   	push   eax
c001a3e6:	53                   	push   ebx
c001a3e7:	68 6d 4e 02 c0       	push   0xc0024e6d
c001a3ec:	e8 88 28 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001a3f1:	5a                   	pop    edx
c001a3f2:	59                   	pop    ecx
c001a3f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a3f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a3fb:	52                   	push   edx
c001a3fc:	50                   	push   eax
c001a3fd:	e8 e1 38 ff ff       	call   c000dce3 <datetimeToSeconds(datetime_t)>
c001a402:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001a406:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001a40c:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001a412:	83 c4 3c             	add    esp,0x3c
c001a415:	5b                   	pop    ebx
c001a416:	5e                   	pop    esi
c001a417:	5f                   	pop    edi
c001a418:	5d                   	pop    ebp
c001a419:	c3                   	ret    

c001a41a <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001a41a:	55                   	push   ebp
c001a41b:	57                   	push   edi
c001a41c:	56                   	push   esi
c001a41d:	53                   	push   ebx
c001a41e:	83 ec 40             	sub    esp,0x40
c001a421:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001a425:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a429:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a42d:	0f b6 6c 24 10       	movzx  ebp,BYTE PTR [esp+0x10]
c001a432:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a436:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a43a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a43e:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001a442:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c001a446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a44a:	0f b6 fe             	movzx  edi,dh
c001a44d:	0f b6 c4             	movzx  eax,ah
c001a450:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001a454:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a458:	89 d7                	mov    edi,edx
c001a45a:	0f b6 4c 24 1c       	movzx  ecx,BYTE PTR [esp+0x1c]
c001a45f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a463:	c1 ef 10             	shr    edi,0x10
c001a466:	c1 e8 10             	shr    eax,0x10
c001a469:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c001a46d:	89 c6                	mov    esi,eax
c001a46f:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c001a474:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c001a478:	89 fa                	mov    edx,edi
c001a47a:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001a47f:	88 54 24 2c          	mov    BYTE PTR [esp+0x2c],dl
c001a483:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c001a487:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a48b:	0f b6 fb             	movzx  edi,bl
c001a48e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a492:	57                   	push   edi
c001a493:	50                   	push   eax
c001a494:	51                   	push   ecx
c001a495:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c001a499:	55                   	push   ebp
c001a49a:	68 83 4e 02 c0       	push   0xc0024e83
c001a49f:	e8 d5 27 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001a4a4:	83 c4 1c             	add    esp,0x1c
c001a4a7:	6a 00                	push   0x0
c001a4a9:	6a 00                	push   0x0
c001a4ab:	ff 35 88 66 02 c0    	push   DWORD PTR ds:0xc0026688
c001a4b1:	e8 3e ec fe ff       	call   c00090f4 <Computer::writeCMOS(unsigned char, unsigned char)>
c001a4b6:	83 c4 0c             	add    esp,0xc
c001a4b9:	6a 00                	push   0x0
c001a4bb:	6a 02                	push   0x2
c001a4bd:	ff 35 88 66 02 c0    	push   DWORD PTR ds:0xc0026688
c001a4c3:	e8 2c ec fe ff       	call   c00090f4 <Computer::writeCMOS(unsigned char, unsigned char)>
c001a4c8:	b9 64 00 00 00       	mov    ecx,0x64
c001a4cd:	89 f0                	mov    eax,esi
c001a4cf:	31 d2                	xor    edx,edx
c001a4d1:	66 f7 f1             	div    cx
c001a4d4:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001a4d8:	89 d6                	mov    esi,edx
c001a4da:	58                   	pop    eax
c001a4db:	5a                   	pop    edx
c001a4dc:	6a 0b                	push   0xb
c001a4de:	ff 35 88 66 02 c0    	push   DWORD PTR ds:0xc0026688
c001a4e4:	e8 ed ea fe ff       	call   c0008fd6 <Computer::readCMOS(unsigned char)>
c001a4e9:	c7 04 24 9e 4e 02 c0 	mov    DWORD PTR [esp],0xc0024e9e
c001a4f0:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c001a4f4:	e8 80 27 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001a4f9:	83 c4 0c             	add    esp,0xc
c001a4fc:	0f b7 c6             	movzx  eax,si
c001a4ff:	50                   	push   eax
c001a500:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001a504:	51                   	push   ecx
c001a505:	55                   	push   ebp
c001a506:	57                   	push   edi
c001a507:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001a50b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001a50f:	68 b4 4e 02 c0       	push   0xc0024eb4
c001a514:	e8 60 27 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001a519:	83 c4 20             	add    esp,0x20
c001a51c:	f6 44 24 2b 04       	test   BYTE PTR [esp+0x2b],0x4
c001a521:	0f 85 88 00 00 00    	jne    c001a5af <RTC::setTimeInDatetimeUTC(datetime_t)+0x195>
c001a527:	83 ec 0c             	sub    esp,0xc
c001a52a:	68 f4 4e 02 c0       	push   0xc0024ef4
c001a52f:	e8 45 27 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001a534:	b2 0a                	mov    dl,0xa
c001a536:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a53b:	f6 f2                	div    dl
c001a53d:	88 c1                	mov    cl,al
c001a53f:	88 e0                	mov    al,ah
c001a541:	c1 e1 04             	shl    ecx,0x4
c001a544:	09 c1                	or     ecx,eax
c001a546:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c001a54b:	88 4c 24 38          	mov    BYTE PTR [esp+0x38],cl
c001a54f:	f6 f2                	div    dl
c001a551:	88 c1                	mov    cl,al
c001a553:	88 e0                	mov    al,ah
c001a555:	c1 e1 04             	shl    ecx,0x4
c001a558:	09 c1                	or     ecx,eax
c001a55a:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001a55f:	88 4c 24 24          	mov    BYTE PTR [esp+0x24],cl
c001a563:	f6 f2                	div    dl
c001a565:	88 c3                	mov    bl,al
c001a567:	88 e0                	mov    al,ah
c001a569:	c1 e3 04             	shl    ebx,0x4
c001a56c:	09 c3                	or     ebx,eax
c001a56e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001a573:	f6 f2                	div    dl
c001a575:	88 c1                	mov    cl,al
c001a577:	88 e0                	mov    al,ah
c001a579:	c1 e1 04             	shl    ecx,0x4
c001a57c:	09 c1                	or     ecx,eax
c001a57e:	0f b6 44 24 28       	movzx  eax,BYTE PTR [esp+0x28]
c001a583:	88 4c 24 39          	mov    BYTE PTR [esp+0x39],cl
c001a587:	f6 f2                	div    dl
c001a589:	88 c1                	mov    cl,al
c001a58b:	88 e0                	mov    al,ah
c001a58d:	c1 e1 04             	shl    ecx,0x4
c001a590:	09 c1                	or     ecx,eax
c001a592:	89 f0                	mov    eax,esi
c001a594:	88 4c 24 28          	mov    BYTE PTR [esp+0x28],cl
c001a598:	0f b6 c0             	movzx  eax,al
c001a59b:	83 c4 10             	add    esp,0x10
c001a59e:	f6 f2                	div    dl
c001a5a0:	89 c6                	mov    esi,eax
c001a5a2:	88 e0                	mov    al,ah
c001a5a4:	c1 e6 04             	shl    esi,0x4
c001a5a7:	09 c6                	or     esi,eax
c001a5a9:	89 f0                	mov    eax,esi
c001a5ab:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c001a5af:	f6 44 24 2b 02       	test   BYTE PTR [esp+0x2b],0x2
c001a5b4:	75 27                	jne    c001a5dd <RTC::setTimeInDatetimeUTC(datetime_t)+0x1c3>
c001a5b6:	83 ec 0c             	sub    esp,0xc
c001a5b9:	68 05 4f 02 c0       	push   0xc0024f05
c001a5be:	e8 b6 26 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001a5c3:	83 c4 10             	add    esp,0x10
c001a5c6:	80 fb 0b             	cmp    bl,0xb
c001a5c9:	76 0c                	jbe    c001a5d7 <RTC::setTimeInDatetimeUTC(datetime_t)+0x1bd>
c001a5cb:	80 eb 0c             	sub    bl,0xc
c001a5ce:	75 02                	jne    c001a5d2 <RTC::setTimeInDatetimeUTC(datetime_t)+0x1b8>
c001a5d0:	b3 0c                	mov    bl,0xc
c001a5d2:	83 cb 80             	or     ebx,0xffffff80
c001a5d5:	eb 06                	jmp    c001a5dd <RTC::setTimeInDatetimeUTC(datetime_t)+0x1c3>
c001a5d7:	84 db                	test   bl,bl
c001a5d9:	75 02                	jne    c001a5dd <RTC::setTimeInDatetimeUTC(datetime_t)+0x1c3>
c001a5db:	b3 0c                	mov    bl,0xc
c001a5dd:	0f b6 54 24 29       	movzx  edx,BYTE PTR [esp+0x29]
c001a5e2:	0f b6 74 24 2a       	movzx  esi,BYTE PTR [esp+0x2a]
c001a5e7:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001a5ec:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001a5f1:	0f b6 44 24 28       	movzx  eax,BYTE PTR [esp+0x28]
c001a5f6:	0f b6 db             	movzx  ebx,bl
c001a5f9:	51                   	push   ecx
c001a5fa:	56                   	push   esi
c001a5fb:	55                   	push   ebp
c001a5fc:	52                   	push   edx
c001a5fd:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a601:	53                   	push   ebx
c001a602:	57                   	push   edi
c001a603:	50                   	push   eax
c001a604:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a608:	68 b4 4e 02 c0       	push   0xc0024eb4
c001a60d:	e8 67 26 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001a612:	83 c4 1c             	add    esp,0x1c
c001a615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a619:	50                   	push   eax
c001a61a:	6a 00                	push   0x0
c001a61c:	ff 35 88 66 02 c0    	push   DWORD PTR ds:0xc0026688
c001a622:	e8 cd ea fe ff       	call   c00090f4 <Computer::writeCMOS(unsigned char, unsigned char)>
c001a627:	83 c4 0c             	add    esp,0xc
c001a62a:	57                   	push   edi
c001a62b:	6a 02                	push   0x2
c001a62d:	ff 35 88 66 02 c0    	push   DWORD PTR ds:0xc0026688
c001a633:	e8 bc ea fe ff       	call   c00090f4 <Computer::writeCMOS(unsigned char, unsigned char)>
c001a638:	83 c4 0c             	add    esp,0xc
c001a63b:	53                   	push   ebx
c001a63c:	6a 04                	push   0x4
c001a63e:	ff 35 88 66 02 c0    	push   DWORD PTR ds:0xc0026688
c001a644:	e8 ab ea fe ff       	call   c00090f4 <Computer::writeCMOS(unsigned char, unsigned char)>
c001a649:	83 c4 0c             	add    esp,0xc
c001a64c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a650:	52                   	push   edx
c001a651:	6a 07                	push   0x7
c001a653:	ff 35 88 66 02 c0    	push   DWORD PTR ds:0xc0026688
c001a659:	e8 96 ea fe ff       	call   c00090f4 <Computer::writeCMOS(unsigned char, unsigned char)>
c001a65e:	83 c4 0c             	add    esp,0xc
c001a661:	55                   	push   ebp
c001a662:	6a 08                	push   0x8
c001a664:	ff 35 88 66 02 c0    	push   DWORD PTR ds:0xc0026688
c001a66a:	e8 85 ea fe ff       	call   c00090f4 <Computer::writeCMOS(unsigned char, unsigned char)>
c001a66f:	83 c4 0c             	add    esp,0xc
c001a672:	56                   	push   esi
c001a673:	6a 09                	push   0x9
c001a675:	ff 35 88 66 02 c0    	push   DWORD PTR ds:0xc0026688
c001a67b:	e8 74 ea fe ff       	call   c00090f4 <Computer::writeCMOS(unsigned char, unsigned char)>
c001a680:	5b                   	pop    ebx
c001a681:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a685:	e8 c6 fa ff ff       	call   c001a150 <RTC::completeRTCRefresh()>
c001a68a:	83 c4 4c             	add    esp,0x4c
c001a68d:	b0 01                	mov    al,0x1
c001a68f:	5b                   	pop    ebx
c001a690:	5e                   	pop    esi
c001a691:	5f                   	pop    edi
c001a692:	5d                   	pop    ebp
c001a693:	c3                   	ret    

c001a694 <rtcIRQHandler(regs*, void*)>:
c001a694:	53                   	push   ebx
c001a695:	83 ec 10             	sub    esp,0x10
c001a698:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a69c:	6a 0c                	push   0xc
c001a69e:	ff 35 88 66 02 c0    	push   DWORD PTR ds:0xc0026688
c001a6a4:	e8 2d e9 fe ff       	call   c0008fd6 <Computer::readCMOS(unsigned char)>
c001a6a9:	83 c4 10             	add    esp,0x10
c001a6ac:	84 c0                	test   al,al
c001a6ae:	79 24                	jns    c001a6d4 <rtcIRQHandler(regs*, void*)+0x40>
c001a6b0:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001a6b7:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001a6be:	66 ff 05 a0 9c 02 c0 	inc    WORD PTR ds:0xc0029ca0
c001a6c5:	75 0d                	jne    c001a6d4 <rtcIRQHandler(regs*, void*)+0x40>
c001a6c7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001a6cb:	83 c4 08             	add    esp,0x8
c001a6ce:	5b                   	pop    ebx
c001a6cf:	e9 7c fa ff ff       	jmp    c001a150 <RTC::completeRTCRefresh()>
c001a6d4:	83 c4 08             	add    esp,0x8
c001a6d7:	5b                   	pop    ebx
c001a6d8:	c3                   	ret    
c001a6d9:	90                   	nop

c001a6da <RTC::RTC()>:
c001a6da:	83 ec 1c             	sub    esp,0x1c
c001a6dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6e1:	83 ec 08             	sub    esp,0x8
c001a6e4:	68 1d 4f 02 c0       	push   0xc0024f1d
c001a6e9:	50                   	push   eax
c001a6ea:	e8 cf 34 ff ff       	call   c000dbbe <Clock::Clock(char const*)>
c001a6ef:	83 c4 10             	add    esp,0x10
c001a6f2:	ba 3c 4f 02 c0       	mov    edx,0xc0024f3c
c001a6f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6fb:	89 10                	mov    DWORD PTR [eax],edx
c001a6fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a701:	83 ec 0c             	sub    esp,0xc
c001a704:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a708:	6a 01                	push   0x1
c001a70a:	68 94 a6 01 c0       	push   0xc001a694
c001a70f:	6a 08                	push   0x8
c001a711:	50                   	push   eax
c001a712:	e8 8b 39 ff ff       	call   c000e0a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001a717:	83 c4 20             	add    esp,0x20
c001a71a:	89 c2                	mov    edx,eax
c001a71c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a720:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001a726:	fa                   	cli    
c001a727:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c001a72c:	40                   	inc    eax
c001a72d:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c001a732:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c001a737:	83 ec 08             	sub    esp,0x8
c001a73a:	6a 0b                	push   0xb
c001a73c:	50                   	push   eax
c001a73d:	e8 94 e8 fe ff       	call   c0008fd6 <Computer::readCMOS(unsigned char)>
c001a742:	83 c4 10             	add    esp,0x10
c001a745:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a749:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c001a74e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001a752:	83 ca 10             	or     edx,0x10
c001a755:	0f b6 d2             	movzx  edx,dl
c001a758:	83 ec 04             	sub    esp,0x4
c001a75b:	52                   	push   edx
c001a75c:	6a 0b                	push   0xb
c001a75e:	50                   	push   eax
c001a75f:	e8 90 e9 fe ff       	call   c00090f4 <Computer::writeCMOS(unsigned char, unsigned char)>
c001a764:	83 c4 10             	add    esp,0x10
c001a767:	83 ec 0c             	sub    esp,0xc
c001a76a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a76e:	e8 dd f9 ff ff       	call   c001a150 <RTC::completeRTCRefresh()>
c001a773:	83 c4 10             	add    esp,0x10
c001a776:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c001a77b:	48                   	dec    eax
c001a77c:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c001a781:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c001a786:	85 c0                	test   eax,eax
c001a788:	75 01                	jne    c001a78b <RTC::RTC()+0xb1>
c001a78a:	fb                   	sti    
c001a78b:	90                   	nop
c001a78c:	83 c4 1c             	add    esp,0x1c
c001a78f:	c3                   	ret    

c001a790 <FAT::getName()>:
c001a790:	b8 70 4f 02 c0       	mov    eax,0xc0024f70
c001a795:	c3                   	ret    
c001a796:	66 90                	xchg   ax,ax

c001a798 <FAT::tell(void*, unsigned long long*)>:
c001a798:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a79d:	75 09                	jne    c001a7a8 <FAT::tell(void*, unsigned long long*)+0x10>
c001a79f:	b8 04 00 00 00       	mov    eax,0x4
c001a7a4:	c3                   	ret    
c001a7a5:	8d 76 00             	lea    esi,[esi+0x0]
c001a7a8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a7ad:	75 09                	jne    c001a7b8 <FAT::tell(void*, unsigned long long*)+0x20>
c001a7af:	b8 04 00 00 00       	mov    eax,0x4
c001a7b4:	c3                   	ret    
c001a7b5:	8d 76 00             	lea    esi,[esi+0x0]
c001a7b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7bc:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001a7bf:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001a7c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a7c6:	89 01                	mov    DWORD PTR [ecx],eax
c001a7c8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a7cb:	b8 00 00 00 00       	mov    eax,0x0
c001a7d0:	c3                   	ret    
c001a7d1:	90                   	nop
c001a7d2:	66 90                	xchg   ax,ax

c001a7d4 <FAT::stat(void*, unsigned long long*)>:
c001a7d4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a7d9:	75 09                	jne    c001a7e4 <FAT::stat(void*, unsigned long long*)+0x10>
c001a7db:	b8 04 00 00 00       	mov    eax,0x4
c001a7e0:	c3                   	ret    
c001a7e1:	8d 76 00             	lea    esi,[esi+0x0]
c001a7e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a7e9:	75 09                	jne    c001a7f4 <FAT::stat(void*, unsigned long long*)+0x20>
c001a7eb:	b8 04 00 00 00       	mov    eax,0x4
c001a7f0:	c3                   	ret    
c001a7f1:	8d 76 00             	lea    esi,[esi+0x0]
c001a7f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7f8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001a7fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a7fe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a802:	89 01                	mov    DWORD PTR [ecx],eax
c001a804:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a807:	b8 00 00 00 00       	mov    eax,0x0
c001a80c:	c3                   	ret    
c001a80d:	90                   	nop
c001a80e:	66 90                	xchg   ax,ax

c001a810 <FAT::~FAT()>:
c001a810:	83 ec 0c             	sub    esp,0xc
c001a813:	ba bc 4f 02 c0       	mov    edx,0xc0024fbc
c001a818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a81c:	89 10                	mov    DWORD PTR [eax],edx
c001a81e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a822:	83 ec 0c             	sub    esp,0xc
c001a825:	50                   	push   eax
c001a826:	e8 89 27 ff ff       	call   c000cfb4 <Filesystem::~Filesystem()>
c001a82b:	83 c4 10             	add    esp,0x10
c001a82e:	90                   	nop
c001a82f:	83 c4 0c             	add    esp,0xc
c001a832:	c3                   	ret    
c001a833:	90                   	nop

c001a834 <FAT::~FAT()>:
c001a834:	83 ec 0c             	sub    esp,0xc
c001a837:	83 ec 0c             	sub    esp,0xc
c001a83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a83e:	e8 cd ff ff ff       	call   c001a810 <FAT::~FAT()>
c001a843:	83 c4 10             	add    esp,0x10
c001a846:	83 ec 08             	sub    esp,0x8
c001a849:	6a 08                	push   0x8
c001a84b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a84f:	e8 44 23 ff ff       	call   c000cb98 <operator delete(void*, unsigned long)>
c001a854:	83 c4 10             	add    esp,0x10
c001a857:	83 c4 0c             	add    esp,0xc
c001a85a:	c3                   	ret    
c001a85b:	90                   	nop

c001a85c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001a85c:	83 ec 1c             	sub    esp,0x1c
c001a85f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001a866:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001a86b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a86f:	8b 04 85 e0 9c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6320]
c001a876:	83 f8 ff             	cmp    eax,0xffffffff
c001a879:	75 35                	jne    c001a8b0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001a87b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a87f:	88 c2                	mov    dl,al
c001a881:	a1 c0 9c 02 c0       	mov    eax,ds:0xc0029cc0
c001a886:	01 d0                	add    eax,edx
c001a888:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a88c:	8b 15 c0 9c 02 c0    	mov    edx,DWORD PTR ds:0xc0029cc0
c001a892:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a896:	89 14 85 e0 9c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6320],edx
c001a89d:	a1 c0 9c 02 c0       	mov    eax,ds:0xc0029cc0
c001a8a2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a8a6:	89 14 85 60 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd62a0],edx
c001a8ad:	eb 19                	jmp    c001a8c8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001a8af:	90                   	nop
c001a8b0:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a8b4:	88 c2                	mov    dl,al
c001a8b6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a8ba:	8b 04 85 e0 9c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6320]
c001a8c1:	01 d0                	add    eax,edx
c001a8c3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a8c7:	90                   	nop
c001a8c8:	83 ec 04             	sub    esp,0x4
c001a8cb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a8d3:	8d 44 24 15          	lea    eax,[esp+0x15]
c001a8d7:	50                   	push   eax
c001a8d8:	e8 4d c3 fe ff       	call   c0006c2a <f_getlabel>
c001a8dd:	83 c4 10             	add    esp,0x10
c001a8e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a8e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a8e9:	75 09                	jne    c001a8f4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001a8eb:	b8 00 00 00 00       	mov    eax,0x0
c001a8f0:	eb 0a                	jmp    c001a8fc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001a8f2:	66 90                	xchg   ax,ax
c001a8f4:	b8 01 00 00 00       	mov    eax,0x1
c001a8f9:	8d 76 00             	lea    esi,[esi+0x0]
c001a8fc:	83 c4 1c             	add    esp,0x1c
c001a8ff:	c3                   	ret    

c001a900 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001a900:	57                   	push   edi
c001a901:	83 ec 58             	sub    esp,0x58
c001a904:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001a90c:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a910:	b9 0f 00 00 00       	mov    ecx,0xf
c001a915:	b8 00 00 00 00       	mov    eax,0x0
c001a91a:	fc                   	cld    
c001a91b:	89 d7                	mov    edi,edx
c001a91d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a91f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a923:	8b 04 85 e0 9c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6320]
c001a92a:	83 f8 ff             	cmp    eax,0xffffffff
c001a92d:	75 35                	jne    c001a964 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001a92f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a933:	88 c2                	mov    dl,al
c001a935:	a1 c0 9c 02 c0       	mov    eax,ds:0xc0029cc0
c001a93a:	01 d0                	add    eax,edx
c001a93c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a940:	8b 15 c0 9c 02 c0    	mov    edx,DWORD PTR ds:0xc0029cc0
c001a946:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a94a:	89 14 85 e0 9c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6320],edx
c001a951:	a1 c0 9c 02 c0       	mov    eax,ds:0xc0029cc0
c001a956:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001a95a:	89 14 85 60 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd62a0],edx
c001a961:	eb 19                	jmp    c001a97c <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001a963:	90                   	nop
c001a964:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a968:	88 c2                	mov    dl,al
c001a96a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a96e:	8b 04 85 e0 9c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6320]
c001a975:	01 d0                	add    eax,edx
c001a977:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a97b:	90                   	nop
c001a97c:	83 ec 08             	sub    esp,0x8
c001a97f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001a983:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a987:	50                   	push   eax
c001a988:	e8 eb 5e fe ff       	call   c0000878 <strcat>
c001a98d:	83 c4 10             	add    esp,0x10
c001a990:	83 ec 0c             	sub    esp,0xc
c001a993:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a997:	50                   	push   eax
c001a998:	e8 7b c4 fe ff       	call   c0006e18 <f_setlabel>
c001a99d:	83 c4 10             	add    esp,0x10
c001a9a0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a9a4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001a9a9:	75 09                	jne    c001a9b4 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001a9ab:	b8 00 00 00 00       	mov    eax,0x0
c001a9b0:	eb 0a                	jmp    c001a9bc <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001a9b2:	66 90                	xchg   ax,ax
c001a9b4:	b8 01 00 00 00       	mov    eax,0x1
c001a9b9:	8d 76 00             	lea    esi,[esi+0x0]
c001a9bc:	83 c4 58             	add    esp,0x58
c001a9bf:	5f                   	pop    edi
c001a9c0:	c3                   	ret    
c001a9c1:	90                   	nop
c001a9c2:	66 90                	xchg   ax,ax

c001a9c4 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001a9c4:	83 ec 2c             	sub    esp,0x2c
c001a9c7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a9cf:	83 ec 08             	sub    esp,0x8
c001a9d2:	68 94 4f 02 c0       	push   0xc0024f94
c001a9d7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a9db:	e8 e4 5d fe ff       	call   c00007c4 <strcmp>
c001a9e0:	83 c4 10             	add    esp,0x10
c001a9e3:	85 c0                	test   eax,eax
c001a9e5:	0f 94 c0             	sete   al
c001a9e8:	84 c0                	test   al,al
c001a9ea:	74 10                	je     c001a9fc <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001a9ec:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a9f4:	e9 b3 00 00 00       	jmp    c001aaac <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a9f9:	8d 76 00             	lea    esi,[esi+0x0]
c001a9fc:	83 ec 08             	sub    esp,0x8
c001a9ff:	68 86 4f 02 c0       	push   0xc0024f86
c001aa04:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001aa08:	e8 b7 5d fe ff       	call   c00007c4 <strcmp>
c001aa0d:	83 c4 10             	add    esp,0x10
c001aa10:	85 c0                	test   eax,eax
c001aa12:	0f 94 c0             	sete   al
c001aa15:	84 c0                	test   al,al
c001aa17:	74 0f                	je     c001aa28 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001aa19:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001aa21:	e9 86 00 00 00       	jmp    c001aaac <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001aa26:	66 90                	xchg   ax,ax
c001aa28:	83 ec 08             	sub    esp,0x8
c001aa2b:	68 8c 4f 02 c0       	push   0xc0024f8c
c001aa30:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001aa34:	e8 8b 5d fe ff       	call   c00007c4 <strcmp>
c001aa39:	83 c4 10             	add    esp,0x10
c001aa3c:	85 c0                	test   eax,eax
c001aa3e:	0f 94 c0             	sete   al
c001aa41:	84 c0                	test   al,al
c001aa43:	74 0b                	je     c001aa50 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001aa45:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001aa4d:	eb 5d                	jmp    c001aaac <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001aa4f:	90                   	nop
c001aa50:	83 ec 08             	sub    esp,0x8
c001aa53:	68 8c 26 02 c0       	push   0xc002268c
c001aa58:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001aa5c:	e8 63 5d fe ff       	call   c00007c4 <strcmp>
c001aa61:	83 c4 10             	add    esp,0x10
c001aa64:	85 c0                	test   eax,eax
c001aa66:	0f 94 c0             	sete   al
c001aa69:	84 c0                	test   al,al
c001aa6b:	74 0b                	je     c001aa78 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001aa6d:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001aa75:	eb 35                	jmp    c001aaac <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001aa77:	90                   	nop
c001aa78:	83 ec 08             	sub    esp,0x8
c001aa7b:	68 92 4f 02 c0       	push   0xc0024f92
c001aa80:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001aa84:	e8 3b 5d fe ff       	call   c00007c4 <strcmp>
c001aa89:	83 c4 10             	add    esp,0x10
c001aa8c:	85 c0                	test   eax,eax
c001aa8e:	0f 94 c0             	sete   al
c001aa91:	84 c0                	test   al,al
c001aa93:	74 0b                	je     c001aaa0 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001aa95:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001aa9d:	eb 0d                	jmp    c001aaac <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001aa9f:	90                   	nop
c001aaa0:	b8 08 00 00 00       	mov    eax,0x8
c001aaa5:	e9 ea 00 00 00       	jmp    c001ab94 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001aaaa:	66 90                	xchg   ax,ax
c001aaac:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001aab3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001aab8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aabc:	8b 04 85 e0 9c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6320]
c001aac3:	83 f8 ff             	cmp    eax,0xffffffff
c001aac6:	75 34                	jne    c001aafc <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001aac8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001aacc:	88 c2                	mov    dl,al
c001aace:	a1 c0 9c 02 c0       	mov    eax,ds:0xc0029cc0
c001aad3:	01 d0                	add    eax,edx
c001aad5:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001aad9:	8b 15 c0 9c 02 c0    	mov    edx,DWORD PTR ds:0xc0029cc0
c001aadf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aae3:	89 14 85 e0 9c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6320],edx
c001aaea:	a1 c0 9c 02 c0       	mov    eax,ds:0xc0029cc0
c001aaef:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001aaf3:	89 14 85 60 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd62a0],edx
c001aafa:	eb 18                	jmp    c001ab14 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001aafc:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001ab00:	88 c2                	mov    dl,al
c001ab02:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab06:	8b 04 85 e0 9c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6320]
c001ab0d:	01 d0                	add    eax,edx
c001ab0f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001ab13:	90                   	nop
c001ab14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab18:	88 04 24             	mov    BYTE PTR [esp],al
c001ab1b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001ab1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab23:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ab2b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001ab30:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ab38:	83 ec 0c             	sub    esp,0xc
c001ab3b:	68 00 20 00 00       	push   0x2000
c001ab40:	e8 26 ee fe ff       	call   c000996b <malloc>
c001ab45:	83 c4 10             	add    esp,0x10
c001ab48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ab4c:	68 00 20 00 00       	push   0x2000
c001ab51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ab55:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ab59:	50                   	push   eax
c001ab5a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001ab5e:	50                   	push   eax
c001ab5f:	e8 35 c9 fe ff       	call   c0007499 <f_mkfs>
c001ab64:	83 c4 10             	add    esp,0x10
c001ab67:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ab6b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ab70:	75 0a                	jne    c001ab7c <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001ab72:	b8 00 00 00 00       	mov    eax,0x0
c001ab77:	eb 1b                	jmp    c001ab94 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001ab79:	8d 76 00             	lea    esi,[esi+0x0]
c001ab7c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001ab81:	75 09                	jne    c001ab8c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001ab83:	b8 09 00 00 00       	mov    eax,0x9
c001ab88:	eb 0a                	jmp    c001ab94 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001ab8a:	66 90                	xchg   ax,ax
c001ab8c:	b8 01 00 00 00       	mov    eax,0x1
c001ab91:	8d 76 00             	lea    esi,[esi+0x0]
c001ab94:	83 c4 2c             	add    esp,0x2c
c001ab97:	c3                   	ret    

c001ab98 <FAT::tryMount(LogicalDisk*, int)>:
c001ab98:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001ab9e:	a1 c0 9c 02 c0       	mov    eax,ds:0xc0029cc0
c001aba3:	83 f8 14             	cmp    eax,0x14
c001aba6:	75 18                	jne    c001abc0 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001aba8:	83 ec 0c             	sub    esp,0xc
c001abab:	68 98 4f 02 c0       	push   0xc0024f98
c001abb0:	e8 52 84 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c001abb5:	83 c4 10             	add    esp,0x10
c001abb8:	b0 00                	mov    al,0x0
c001abba:	e9 e9 01 00 00       	jmp    c001ada8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001abbf:	90                   	nop
c001abc0:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001abc7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001abcd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001abd3:	3d 00 02 00 00       	cmp    eax,0x200
c001abd8:	74 0a                	je     c001abe4 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001abda:	b0 00                	mov    al,0x0
c001abdc:	e9 c7 01 00 00       	jmp    c001ada8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001abe1:	8d 76 00             	lea    esi,[esi+0x0]
c001abe4:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001abec:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001abf3:	8b 04 85 e0 9c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6320]
c001abfa:	83 f8 ff             	cmp    eax,0xffffffff
c001abfd:	74 09                	je     c001ac08 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001abff:	b0 01                	mov    al,0x1
c001ac01:	e9 a2 01 00 00       	jmp    c001ada8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001ac06:	66 90                	xchg   ax,ax
c001ac08:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001ac12:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001ac1a:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001ac21:	88 c2                	mov    dl,al
c001ac23:	a1 c0 9c 02 c0       	mov    eax,ds:0xc0029cc0
c001ac28:	01 d0                	add    eax,edx
c001ac2a:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001ac31:	8b 15 c0 9c 02 c0    	mov    edx,DWORD PTR ds:0xc0029cc0
c001ac37:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001ac3e:	89 14 85 e0 9c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6320],edx
c001ac45:	a1 c0 9c 02 c0       	mov    eax,ds:0xc0029cc0
c001ac4a:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001ac51:	89 14 85 60 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd62a0],edx
c001ac58:	83 ec 0c             	sub    esp,0xc
c001ac5b:	68 54 02 00 00       	push   0x254
c001ac60:	e8 06 ed fe ff       	call   c000996b <malloc>
c001ac65:	83 c4 10             	add    esp,0x10
c001ac68:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001ac6f:	83 ec 04             	sub    esp,0x4
c001ac72:	6a 00                	push   0x0
c001ac74:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001ac7b:	50                   	push   eax
c001ac7c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001ac83:	e8 99 a1 fe ff       	call   c0004e21 <f_mount>
c001ac88:	83 c4 10             	add    esp,0x10
c001ac8b:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001ac92:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001ac9a:	74 1c                	je     c001acb8 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001ac9c:	83 ec 0c             	sub    esp,0xc
c001ac9f:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001aca6:	e8 e0 ec fe ff       	call   c000998b <rfree>
c001acab:	83 c4 10             	add    esp,0x10
c001acae:	b0 00                	mov    al,0x0
c001acb0:	e9 f3 00 00 00       	jmp    c001ada8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001acb5:	8d 76 00             	lea    esi,[esi+0x0]
c001acb8:	83 ec 04             	sub    esp,0x4
c001acbb:	68 00 01 00 00       	push   0x100
c001acc0:	6a 00                	push   0x0
c001acc2:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001acc9:	50                   	push   eax
c001acca:	e8 ad 59 fe ff       	call   c000067c <memset>
c001accf:	83 c4 10             	add    esp,0x10
c001acd2:	83 ec 08             	sub    esp,0x8
c001acd5:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001acdc:	50                   	push   eax
c001acdd:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001ace4:	50                   	push   eax
c001ace5:	e8 8e 5b fe ff       	call   c0000878 <strcat>
c001acea:	83 c4 10             	add    esp,0x10
c001aced:	83 ec 08             	sub    esp,0x8
c001acf0:	68 a6 4f 02 c0       	push   0xc0024fa6
c001acf5:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001acfc:	50                   	push   eax
c001acfd:	e8 76 5b fe ff       	call   c0000878 <strcat>
c001ad02:	83 c4 10             	add    esp,0x10
c001ad05:	83 ec 04             	sub    esp,0x4
c001ad08:	6a 01                	push   0x1
c001ad0a:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001ad11:	50                   	push   eax
c001ad12:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ad16:	50                   	push   eax
c001ad17:	e8 67 a1 fe ff       	call   c0004e83 <f_open>
c001ad1c:	83 c4 10             	add    esp,0x10
c001ad1f:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001ad26:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001ad2d:	85 c0                	test   eax,eax
c001ad2f:	74 0b                	je     c001ad3c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001ad31:	78 31                	js     c001ad64 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001ad33:	83 e8 04             	sub    eax,0x4
c001ad36:	83 f8 01             	cmp    eax,0x1
c001ad39:	77 29                	ja     c001ad64 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001ad3b:	90                   	nop
c001ad3c:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001ad44:	83 ec 0c             	sub    esp,0xc
c001ad47:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ad4b:	50                   	push   eax
c001ad4c:	e8 84 ac fe ff       	call   c00059d5 <f_close>
c001ad51:	83 c4 10             	add    esp,0x10
c001ad54:	90                   	nop
c001ad55:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001ad5d:	74 41                	je     c001ada0 <FAT::tryMount(LogicalDisk*, int)+0x208>
c001ad5f:	eb 33                	jmp    c001ad94 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001ad61:	8d 76 00             	lea    esi,[esi+0x0]
c001ad64:	83 ec 0c             	sub    esp,0xc
c001ad67:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001ad6e:	e8 18 ec fe ff       	call   c000998b <rfree>
c001ad73:	83 c4 10             	add    esp,0x10
c001ad76:	83 ec 04             	sub    esp,0x4
c001ad79:	6a 00                	push   0x0
c001ad7b:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001ad82:	50                   	push   eax
c001ad83:	6a 00                	push   0x0
c001ad85:	e8 97 a0 fe ff       	call   c0004e21 <f_mount>
c001ad8a:	83 c4 10             	add    esp,0x10
c001ad8d:	b0 00                	mov    al,0x0
c001ad8f:	eb 17                	jmp    c001ada8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001ad91:	8d 76 00             	lea    esi,[esi+0x0]
c001ad94:	a1 c0 9c 02 c0       	mov    eax,ds:0xc0029cc0
c001ad99:	40                   	inc    eax
c001ad9a:	a3 c0 9c 02 c0       	mov    ds:0xc0029cc0,eax
c001ad9f:	90                   	nop
c001ada0:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001ada7:	90                   	nop
c001ada8:	81 c4 6c 03 00 00    	add    esp,0x36c
c001adae:	c3                   	ret    
c001adaf:	90                   	nop

c001adb0 <FAT::allocateSwapfile(char const*, int)>:
c001adb0:	55                   	push   ebp
c001adb1:	57                   	push   edi
c001adb2:	56                   	push   esi
c001adb3:	53                   	push   ebx
c001adb4:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001adba:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001adc5:	83 ec 0c             	sub    esp,0xc
c001adc8:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001adcf:	e8 97 eb fe ff       	call   c000996b <malloc>
c001add4:	83 c4 10             	add    esp,0x10
c001add7:	89 c7                	mov    edi,eax
c001add9:	a1 d0 9b 02 c0       	mov    eax,ds:0xc0029bd0
c001adde:	83 ec 04             	sub    esp,0x4
c001ade1:	50                   	push   eax
c001ade2:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001ade9:	57                   	push   edi
c001adea:	e8 f5 23 ff ff       	call   c000d1e4 <File::File(char const*, Process*)>
c001adef:	83 c4 10             	add    esp,0x10
c001adf2:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001adf9:	83 ec 04             	sub    esp,0x4
c001adfc:	8d 44 24 13          	lea    eax,[esp+0x13]
c001ae00:	50                   	push   eax
c001ae01:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ae05:	50                   	push   eax
c001ae06:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ae0d:	e8 58 27 ff ff       	call   c000d56a <File::stat(unsigned long long*, bool*)>
c001ae12:	83 c4 10             	add    esp,0x10
c001ae15:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001ae1c:	c1 e0 14             	shl    eax,0x14
c001ae1f:	89 c7                	mov    edi,eax
c001ae21:	89 c5                	mov    ebp,eax
c001ae23:	c1 fd 1f             	sar    ebp,0x1f
c001ae26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae2a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ae2e:	89 f9                	mov    ecx,edi
c001ae30:	31 c1                	xor    ecx,eax
c001ae32:	89 cb                	mov    ebx,ecx
c001ae34:	89 e9                	mov    ecx,ebp
c001ae36:	31 d1                	xor    ecx,edx
c001ae38:	89 ce                	mov    esi,ecx
c001ae3a:	89 f0                	mov    eax,esi
c001ae3c:	09 d8                	or     eax,ebx
c001ae3e:	0f 84 98 00 00 00    	je     c001aedc <FAT::allocateSwapfile(char const*, int)+0x12c>
c001ae44:	83 ec 0c             	sub    esp,0xc
c001ae47:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ae4e:	e8 e3 25 ff ff       	call   c000d436 <File::unlink()>
c001ae53:	83 c4 10             	add    esp,0x10
c001ae56:	83 ec 08             	sub    esp,0x8
c001ae59:	6a 12                	push   0x12
c001ae5b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ae62:	e8 57 24 ff ff       	call   c000d2be <File::open(FileOpenMode)>
c001ae67:	83 c4 10             	add    esp,0x10
c001ae6a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ae71:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001ae77:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001ae7e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001ae85:	c1 e0 14             	shl    eax,0x14
c001ae88:	99                   	cdq    
c001ae89:	6a 01                	push   0x1
c001ae8b:	52                   	push   edx
c001ae8c:	50                   	push   eax
c001ae8d:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001ae94:	e8 ec c1 fe ff       	call   c0007085 <f_expand>
c001ae99:	83 c4 10             	add    esp,0x10
c001ae9c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001aea3:	8b 00                	mov    eax,DWORD PTR [eax]
c001aea5:	83 c0 10             	add    eax,0x10
c001aea8:	8b 00                	mov    eax,DWORD PTR [eax]
c001aeaa:	83 ec 0c             	sub    esp,0xc
c001aead:	8d 54 24 24          	lea    edx,[esp+0x24]
c001aeb1:	52                   	push   edx
c001aeb2:	8d 54 24 30          	lea    edx,[esp+0x30]
c001aeb6:	52                   	push   edx
c001aeb7:	6a 00                	push   0x0
c001aeb9:	68 00 04 00 00       	push   0x400
c001aebe:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001aec5:	ff d0                	call   eax
c001aec7:	83 c4 20             	add    esp,0x20
c001aeca:	83 ec 0c             	sub    esp,0xc
c001aecd:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001aed4:	e8 43 24 ff ff       	call   c000d31c <File::close()>
c001aed9:	83 c4 10             	add    esp,0x10
c001aedc:	83 ec 08             	sub    esp,0x8
c001aedf:	6a 01                	push   0x1
c001aee1:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001aee8:	e8 d1 23 ff ff       	call   c000d2be <File::open(FileOpenMode)>
c001aeed:	83 c4 10             	add    esp,0x10
c001aef0:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001aef7:	8b 00                	mov    eax,DWORD PTR [eax]
c001aef9:	83 c0 0c             	add    eax,0xc
c001aefc:	8b 00                	mov    eax,DWORD PTR [eax]
c001aefe:	83 ec 0c             	sub    esp,0xc
c001af01:	8d 54 24 24          	lea    edx,[esp+0x24]
c001af05:	52                   	push   edx
c001af06:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001af0a:	52                   	push   edx
c001af0b:	6a 00                	push   0x0
c001af0d:	6a 04                	push   0x4
c001af0f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001af16:	ff d0                	call   eax
c001af18:	83 c4 20             	add    esp,0x20
c001af1b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001af22:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001af28:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001af2f:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001af36:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001af39:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001af3c:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001af43:	83 ec 0c             	sub    esp,0xc
c001af46:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001af4d:	e8 ca 23 ff ff       	call   c000d31c <File::close()>
c001af52:	83 c4 10             	add    esp,0x10
c001af55:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001af5c:	ba 00 00 00 00       	mov    edx,0x0
c001af61:	81 c4 3c 04 00 00    	add    esp,0x43c
c001af67:	5b                   	pop    ebx
c001af68:	5e                   	pop    esi
c001af69:	5f                   	pop    edi
c001af6a:	5d                   	pop    ebp
c001af6b:	c3                   	ret    

c001af6c <FAT::readDir(void*, unsigned long, void*, int*)>:
c001af6c:	57                   	push   edi
c001af6d:	56                   	push   esi
c001af6e:	53                   	push   ebx
c001af6f:	81 ec 50 02 00 00    	sub    esp,0x250
c001af75:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001af7d:	74 0d                	je     c001af8c <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001af7f:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001af87:	75 0f                	jne    c001af98 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001af89:	8d 76 00             	lea    esi,[esi+0x0]
c001af8c:	b8 04 00 00 00       	mov    eax,0x4
c001af91:	e9 36 01 00 00       	jmp    c001b0cc <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001af96:	66 90                	xchg   ax,ax
c001af98:	83 ec 08             	sub    esp,0x8
c001af9b:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001afa2:	50                   	push   eax
c001afa3:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001afaa:	e8 30 b0 fe ff       	call   c0005fdf <f_readdir>
c001afaf:	83 c4 10             	add    esp,0x10
c001afb2:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001afb9:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001afc0:	83 ec 0c             	sub    esp,0xc
c001afc3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001afca:	83 c0 1a             	add    eax,0x1a
c001afcd:	50                   	push   eax
c001afce:	e8 c5 56 fe ff       	call   c0000698 <strlen>
c001afd3:	83 c4 10             	add    esp,0x10
c001afd6:	ba 00 00 00 00       	mov    edx,0x0
c001afdb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001afdf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001afe3:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001afea:	0f b6 c0             	movzx  eax,al
c001afed:	83 e0 10             	and    eax,0x10
c001aff0:	74 0a                	je     c001affc <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001aff2:	b8 02 00 00 00       	mov    eax,0x2
c001aff7:	eb 0b                	jmp    c001b004 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001aff9:	8d 76 00             	lea    esi,[esi+0x0]
c001affc:	b8 01 00 00 00       	mov    eax,0x1
c001b001:	8d 76 00             	lea    esi,[esi+0x0]
c001b004:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b008:	83 ec 08             	sub    esp,0x8
c001b00b:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001b012:	83 c0 1a             	add    eax,0x1a
c001b015:	50                   	push   eax
c001b016:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b01a:	83 c0 10             	add    eax,0x10
c001b01d:	50                   	push   eax
c001b01e:	e8 15 57 fe ff       	call   c0000738 <strcpy>
c001b023:	83 c4 10             	add    esp,0x10
c001b026:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001b02d:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001b034:	8d 44 24 04          	lea    eax,[esp+0x4]
c001b038:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001b03f:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001b046:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001b04d:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001b054:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001b05b:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001b062:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001b069:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001b070:	89 c6                	mov    esi,eax
c001b072:	89 d7                	mov    edi,edx
c001b074:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b076:	89 c8                	mov    eax,ecx
c001b078:	89 fa                	mov    edx,edi
c001b07a:	89 f3                	mov    ebx,esi
c001b07c:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001b083:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001b08a:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001b091:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001b098:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b09e:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001b0a5:	84 c0                	test   al,al
c001b0a7:	75 07                	jne    c001b0b0 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001b0a9:	b8 07 00 00 00       	mov    eax,0x7
c001b0ae:	eb 1c                	jmp    c001b0cc <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b0b0:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001b0b7:	85 c0                	test   eax,eax
c001b0b9:	75 09                	jne    c001b0c4 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001b0bb:	b8 00 00 00 00       	mov    eax,0x0
c001b0c0:	eb 0a                	jmp    c001b0cc <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b0c2:	66 90                	xchg   ax,ax
c001b0c4:	b8 01 00 00 00       	mov    eax,0x1
c001b0c9:	8d 76 00             	lea    esi,[esi+0x0]
c001b0cc:	81 c4 50 02 00 00    	add    esp,0x250
c001b0d2:	5b                   	pop    ebx
c001b0d3:	5e                   	pop    esi
c001b0d4:	5f                   	pop    edi
c001b0d5:	c3                   	ret    
c001b0d6:	66 90                	xchg   ax,ax

c001b0d8 <FAT::read(void*, unsigned long, void*, int*)>:
c001b0d8:	83 ec 1c             	sub    esp,0x1c
c001b0db:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b0e0:	74 0a                	je     c001b0ec <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001b0e2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b0e7:	75 0b                	jne    c001b0f4 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001b0e9:	8d 76 00             	lea    esi,[esi+0x0]
c001b0ec:	b8 04 00 00 00       	mov    eax,0x4
c001b0f1:	eb 41                	jmp    c001b134 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b0f3:	90                   	nop
c001b0f4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b0f8:	50                   	push   eax
c001b0f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b101:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b105:	e8 b5 a1 fe ff       	call   c00052bf <f_read>
c001b10a:	83 c4 10             	add    esp,0x10
c001b10d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b115:	89 c2                	mov    edx,eax
c001b117:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b11b:	89 10                	mov    DWORD PTR [eax],edx
c001b11d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b121:	85 c0                	test   eax,eax
c001b123:	75 07                	jne    c001b12c <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001b125:	b8 00 00 00 00       	mov    eax,0x0
c001b12a:	eb 08                	jmp    c001b134 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b12c:	b8 01 00 00 00       	mov    eax,0x1
c001b131:	8d 76 00             	lea    esi,[esi+0x0]
c001b134:	83 c4 1c             	add    esp,0x1c
c001b137:	c3                   	ret    

c001b138 <FAT::write(void*, unsigned long, void*, int*)>:
c001b138:	83 ec 1c             	sub    esp,0x1c
c001b13b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b140:	74 0a                	je     c001b14c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001b142:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b147:	75 0b                	jne    c001b154 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001b149:	8d 76 00             	lea    esi,[esi+0x0]
c001b14c:	b8 04 00 00 00       	mov    eax,0x4
c001b151:	eb 41                	jmp    c001b194 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b153:	90                   	nop
c001b154:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b158:	50                   	push   eax
c001b159:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b15d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b161:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b165:	e8 d5 a3 fe ff       	call   c000553f <f_write>
c001b16a:	83 c4 10             	add    esp,0x10
c001b16d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b171:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b175:	89 c2                	mov    edx,eax
c001b177:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b17b:	89 10                	mov    DWORD PTR [eax],edx
c001b17d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b181:	85 c0                	test   eax,eax
c001b183:	75 07                	jne    c001b18c <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001b185:	b8 00 00 00 00       	mov    eax,0x0
c001b18a:	eb 08                	jmp    c001b194 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b18c:	b8 01 00 00 00       	mov    eax,0x1
c001b191:	8d 76 00             	lea    esi,[esi+0x0]
c001b194:	83 c4 1c             	add    esp,0x1c
c001b197:	c3                   	ret    

c001b198 <FAT::close(void*)>:
c001b198:	83 ec 1c             	sub    esp,0x1c
c001b19b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b1a0:	75 0a                	jne    c001b1ac <FAT::close(void*)+0x14>
c001b1a2:	b8 04 00 00 00       	mov    eax,0x4
c001b1a7:	eb 3f                	jmp    c001b1e8 <FAT::close(void*)+0x50>
c001b1a9:	8d 76 00             	lea    esi,[esi+0x0]
c001b1ac:	83 ec 0c             	sub    esp,0xc
c001b1af:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b1b3:	e8 1d a8 fe ff       	call   c00059d5 <f_close>
c001b1b8:	83 c4 10             	add    esp,0x10
c001b1bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b1bf:	83 ec 0c             	sub    esp,0xc
c001b1c2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b1c6:	e8 b0 e7 fe ff       	call   c000997b <free>
c001b1cb:	83 c4 10             	add    esp,0x10
c001b1ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b1d2:	85 c0                	test   eax,eax
c001b1d4:	75 0a                	jne    c001b1e0 <FAT::close(void*)+0x48>
c001b1d6:	b8 00 00 00 00       	mov    eax,0x0
c001b1db:	eb 0b                	jmp    c001b1e8 <FAT::close(void*)+0x50>
c001b1dd:	8d 76 00             	lea    esi,[esi+0x0]
c001b1e0:	b8 01 00 00 00       	mov    eax,0x1
c001b1e5:	8d 76 00             	lea    esi,[esi+0x0]
c001b1e8:	83 c4 1c             	add    esp,0x1c
c001b1eb:	c3                   	ret    

c001b1ec <FAT::closeDir(void*)>:
c001b1ec:	83 ec 1c             	sub    esp,0x1c
c001b1ef:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b1f4:	75 0a                	jne    c001b200 <FAT::closeDir(void*)+0x14>
c001b1f6:	b8 04 00 00 00       	mov    eax,0x4
c001b1fb:	eb 3f                	jmp    c001b23c <FAT::closeDir(void*)+0x50>
c001b1fd:	8d 76 00             	lea    esi,[esi+0x0]
c001b200:	83 ec 0c             	sub    esp,0xc
c001b203:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b207:	e8 b1 ad fe ff       	call   c0005fbd <f_closedir>
c001b20c:	83 c4 10             	add    esp,0x10
c001b20f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b213:	83 ec 0c             	sub    esp,0xc
c001b216:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b21a:	e8 5c e7 fe ff       	call   c000997b <free>
c001b21f:	83 c4 10             	add    esp,0x10
c001b222:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b226:	85 c0                	test   eax,eax
c001b228:	75 0a                	jne    c001b234 <FAT::closeDir(void*)+0x48>
c001b22a:	b8 00 00 00 00       	mov    eax,0x0
c001b22f:	eb 0b                	jmp    c001b23c <FAT::closeDir(void*)+0x50>
c001b231:	8d 76 00             	lea    esi,[esi+0x0]
c001b234:	b8 01 00 00 00       	mov    eax,0x1
c001b239:	8d 76 00             	lea    esi,[esi+0x0]
c001b23c:	83 c4 1c             	add    esp,0x1c
c001b23f:	c3                   	ret    

c001b240 <FAT::seek(void*, unsigned long long)>:
c001b240:	83 ec 2c             	sub    esp,0x2c
c001b243:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b247:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b24b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b24f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b253:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001b258:	75 0a                	jne    c001b264 <FAT::seek(void*, unsigned long long)+0x24>
c001b25a:	b8 04 00 00 00       	mov    eax,0x4
c001b25f:	eb 37                	jmp    c001b298 <FAT::seek(void*, unsigned long long)+0x58>
c001b261:	8d 76 00             	lea    esi,[esi+0x0]
c001b264:	83 ec 04             	sub    esp,0x4
c001b267:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b26b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b26f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001b273:	e8 8c a7 fe ff       	call   c0005a04 <f_lseek>
c001b278:	83 c4 10             	add    esp,0x10
c001b27b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b27f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b283:	85 c0                	test   eax,eax
c001b285:	75 09                	jne    c001b290 <FAT::seek(void*, unsigned long long)+0x50>
c001b287:	b8 00 00 00 00       	mov    eax,0x0
c001b28c:	eb 0a                	jmp    c001b298 <FAT::seek(void*, unsigned long long)+0x58>
c001b28e:	66 90                	xchg   ax,ax
c001b290:	b8 01 00 00 00       	mov    eax,0x1
c001b295:	8d 76 00             	lea    esi,[esi+0x0]
c001b298:	83 c4 2c             	add    esp,0x2c
c001b29b:	c3                   	ret    

c001b29c <fatWrapperReadDisk>:
c001b29c:	83 ec 1c             	sub    esp,0x1c
c001b29f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b2a3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b2a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b2ab:	89 04 24             	mov    DWORD PTR [esp],eax
c001b2ae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b2b2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b2b6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b2bb:	8b 04 85 40 8c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd73c0]
c001b2c2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b2c6:	83 ec 0c             	sub    esp,0xc
c001b2c9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b2cd:	52                   	push   edx
c001b2ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b2d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b2d6:	50                   	push   eax
c001b2d7:	e8 46 41 ff ff       	call   c000f422 <LogicalDisk::read(unsigned long long, int, void*)>
c001b2dc:	83 c4 20             	add    esp,0x20
c001b2df:	83 c4 1c             	add    esp,0x1c
c001b2e2:	c3                   	ret    
c001b2e3:	90                   	nop

c001b2e4 <fatWrapperWriteDisk>:
c001b2e4:	83 ec 1c             	sub    esp,0x1c
c001b2e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b2eb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b2ef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b2f3:	89 04 24             	mov    DWORD PTR [esp],eax
c001b2f6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b2fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b2fe:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b303:	8b 04 85 40 8c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd73c0]
c001b30a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b30e:	83 ec 0c             	sub    esp,0xc
c001b311:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b315:	52                   	push   edx
c001b316:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b31a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b31e:	50                   	push   eax
c001b31f:	e8 6a 41 ff ff       	call   c000f48e <LogicalDisk::write(unsigned long long, int, void*)>
c001b324:	83 c4 20             	add    esp,0x20
c001b327:	83 c4 1c             	add    esp,0x1c
c001b32a:	c3                   	ret    
c001b32b:	90                   	nop

c001b32c <fatWrapperIoctl>:
c001b32c:	53                   	push   ebx
c001b32d:	83 ec 28             	sub    esp,0x28
c001b330:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b334:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b338:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b33c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b340:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001b345:	75 31                	jne    c001b378 <fatWrapperIoctl+0x4c>
c001b347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b34b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b34f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b354:	8b 04 85 40 8c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd73c0]
c001b35b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b361:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b367:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b36b:	66 89 02             	mov    WORD PTR [edx],ax
c001b36e:	b8 00 00 00 00       	mov    eax,0x0
c001b373:	e9 bc 00 00 00       	jmp    c001b434 <fatWrapperIoctl+0x108>
c001b378:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001b37d:	75 6d                	jne    c001b3ec <fatWrapperIoctl+0xc0>
c001b37f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b387:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b38c:	8b 04 85 40 8c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd73c0]
c001b393:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b399:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001b39f:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001b3a5:	89 c8                	mov    eax,ecx
c001b3a7:	89 da                	mov    edx,ebx
c001b3a9:	0f a4 c2 0a          	shld   edx,eax,0xa
c001b3ad:	c1 e0 0a             	shl    eax,0xa
c001b3b0:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b3b5:	8b 0c 8d 40 8c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd73c0]
c001b3bc:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001b3c2:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001b3c8:	89 cb                	mov    ebx,ecx
c001b3ca:	c1 fb 1f             	sar    ebx,0x1f
c001b3cd:	53                   	push   ebx
c001b3ce:	51                   	push   ecx
c001b3cf:	52                   	push   edx
c001b3d0:	50                   	push   eax
c001b3d1:	e8 7a 63 00 00       	call   c0021750 <__udivdi3>
c001b3d6:	83 c4 10             	add    esp,0x10
c001b3d9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b3dd:	89 01                	mov    DWORD PTR [ecx],eax
c001b3df:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b3e2:	b8 00 00 00 00       	mov    eax,0x0
c001b3e7:	eb 4b                	jmp    c001b434 <fatWrapperIoctl+0x108>
c001b3e9:	8d 76 00             	lea    esi,[esi+0x0]
c001b3ec:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001b3f1:	75 09                	jne    c001b3fc <fatWrapperIoctl+0xd0>
c001b3f3:	b8 00 00 00 00       	mov    eax,0x0
c001b3f8:	eb 3a                	jmp    c001b434 <fatWrapperIoctl+0x108>
c001b3fa:	66 90                	xchg   ax,ax
c001b3fc:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001b401:	75 19                	jne    c001b41c <fatWrapperIoctl+0xf0>
c001b403:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b407:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b40b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b40f:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001b415:	b8 00 00 00 00       	mov    eax,0x0
c001b41a:	eb 18                	jmp    c001b434 <fatWrapperIoctl+0x108>
c001b41c:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001b421:	75 09                	jne    c001b42c <fatWrapperIoctl+0x100>
c001b423:	b8 00 00 00 00       	mov    eax,0x0
c001b428:	eb 0a                	jmp    c001b434 <fatWrapperIoctl+0x108>
c001b42a:	66 90                	xchg   ax,ax
c001b42c:	b8 04 00 00 00       	mov    eax,0x4
c001b431:	8d 76 00             	lea    esi,[esi+0x0]
c001b434:	83 c4 28             	add    esp,0x28
c001b437:	5b                   	pop    ebx
c001b438:	c3                   	ret    
c001b439:	90                   	nop
c001b43a:	66 90                	xchg   ax,ax

c001b43c <FAT::FAT()>:
c001b43c:	83 ec 1c             	sub    esp,0x1c
c001b43f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b443:	83 ec 0c             	sub    esp,0xc
c001b446:	50                   	push   eax
c001b447:	e8 44 1b ff ff       	call   c000cf90 <Filesystem::Filesystem()>
c001b44c:	83 c4 10             	add    esp,0x10
c001b44f:	ba bc 4f 02 c0       	mov    edx,0xc0024fbc
c001b454:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b458:	89 10                	mov    DWORD PTR [eax],edx
c001b45a:	c7 05 c0 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029cc0,0x0
c001b464:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b46c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001b471:	7f 15                	jg     c001b488 <FAT::FAT()+0x4c>
c001b473:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b477:	c7 04 85 e0 9c 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6320],0xffffffff
c001b482:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b486:	eb e4                	jmp    c001b46c <FAT::FAT()+0x30>
c001b488:	90                   	nop
c001b489:	83 c4 1c             	add    esp,0x1c
c001b48c:	c3                   	ret    
c001b48d:	90                   	nop
c001b48e:	66 90                	xchg   ax,ax

c001b490 <FAT::fixFilepath(char*)>:
c001b490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b494:	8a 00                	mov    al,BYTE PTR [eax]
c001b496:	3c 40                	cmp    al,0x40
c001b498:	7e 2e                	jle    c001b4c8 <FAT::fixFilepath(char*)+0x38>
c001b49a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b49e:	8a 00                	mov    al,BYTE PTR [eax]
c001b4a0:	83 e8 41             	sub    eax,0x41
c001b4a3:	88 c2                	mov    dl,al
c001b4a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b4a9:	88 10                	mov    BYTE PTR [eax],dl
c001b4ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b4af:	8a 00                	mov    al,BYTE PTR [eax]
c001b4b1:	0f be c0             	movsx  eax,al
c001b4b4:	8b 04 85 e0 9c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6320]
c001b4bb:	83 c0 30             	add    eax,0x30
c001b4be:	88 c2                	mov    dl,al
c001b4c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b4c4:	88 10                	mov    BYTE PTR [eax],dl
c001b4c6:	66 90                	xchg   ax,ax
c001b4c8:	90                   	nop
c001b4c9:	c3                   	ret    
c001b4ca:	66 90                	xchg   ax,ax

c001b4cc <FAT::open(char const*, void**, FileOpenMode)>:
c001b4cc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b4d2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b4da:	74 0c                	je     c001b4e8 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001b4dc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b4e4:	75 0e                	jne    c001b4f4 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001b4e6:	66 90                	xchg   ax,ax
c001b4e8:	b8 04 00 00 00       	mov    eax,0x4
c001b4ed:	e9 06 01 00 00       	jmp    c001b5f8 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b4f2:	66 90                	xchg   ax,ax
c001b4f4:	83 ec 08             	sub    esp,0x8
c001b4f7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b4fe:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b502:	50                   	push   eax
c001b503:	e8 30 52 fe ff       	call   c0000738 <strcpy>
c001b508:	83 c4 10             	add    esp,0x10
c001b50b:	83 ec 08             	sub    esp,0x8
c001b50e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b512:	50                   	push   eax
c001b513:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b51a:	e8 71 ff ff ff       	call   c001b490 <FAT::fixFilepath(char*)>
c001b51f:	83 c4 10             	add    esp,0x10
c001b522:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001b52a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b531:	83 e0 01             	and    eax,0x1
c001b534:	74 0a                	je     c001b540 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001b536:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001b53e:	66 90                	xchg   ax,ax
c001b540:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b547:	83 e0 04             	and    eax,0x4
c001b54a:	74 10                	je     c001b55c <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001b54c:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001b554:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b55c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b563:	83 e0 02             	and    eax,0x2
c001b566:	74 08                	je     c001b570 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001b568:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b570:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b577:	83 e0 08             	and    eax,0x8
c001b57a:	74 08                	je     c001b584 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001b57c:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001b584:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b58b:	83 e0 10             	and    eax,0x10
c001b58e:	74 08                	je     c001b598 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001b590:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001b598:	83 ec 0c             	sub    esp,0xc
c001b59b:	68 50 02 00 00       	push   0x250
c001b5a0:	e8 c6 e3 fe ff       	call   c000996b <malloc>
c001b5a5:	83 c4 10             	add    esp,0x10
c001b5a8:	89 c2                	mov    edx,eax
c001b5aa:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b5b1:	89 10                	mov    DWORD PTR [eax],edx
c001b5b3:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001b5bb:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b5c2:	8b 00                	mov    eax,DWORD PTR [eax]
c001b5c4:	83 ec 04             	sub    esp,0x4
c001b5c7:	52                   	push   edx
c001b5c8:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b5cc:	52                   	push   edx
c001b5cd:	50                   	push   eax
c001b5ce:	e8 b0 98 fe ff       	call   c0004e83 <f_open>
c001b5d3:	83 c4 10             	add    esp,0x10
c001b5d6:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001b5dd:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001b5e5:	74 09                	je     c001b5f0 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001b5e7:	b8 01 00 00 00       	mov    eax,0x1
c001b5ec:	eb 0a                	jmp    c001b5f8 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b5ee:	66 90                	xchg   ax,ax
c001b5f0:	b8 00 00 00 00       	mov    eax,0x0
c001b5f5:	8d 76 00             	lea    esi,[esi+0x0]
c001b5f8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b5fe:	c3                   	ret    
c001b5ff:	90                   	nop

c001b600 <FAT::openDir(char const*, void**)>:
c001b600:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b606:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b60e:	74 0c                	je     c001b61c <FAT::openDir(char const*, void**)+0x1c>
c001b610:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b618:	75 0e                	jne    c001b628 <FAT::openDir(char const*, void**)+0x28>
c001b61a:	66 90                	xchg   ax,ax
c001b61c:	b8 04 00 00 00       	mov    eax,0x4
c001b621:	e9 82 00 00 00       	jmp    c001b6a8 <FAT::openDir(char const*, void**)+0xa8>
c001b626:	66 90                	xchg   ax,ax
c001b628:	83 ec 08             	sub    esp,0x8
c001b62b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b632:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b636:	50                   	push   eax
c001b637:	e8 fc 50 fe ff       	call   c0000738 <strcpy>
c001b63c:	83 c4 10             	add    esp,0x10
c001b63f:	83 ec 08             	sub    esp,0x8
c001b642:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b646:	50                   	push   eax
c001b647:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b64e:	e8 3d fe ff ff       	call   c001b490 <FAT::fixFilepath(char*)>
c001b653:	83 c4 10             	add    esp,0x10
c001b656:	83 ec 0c             	sub    esp,0xc
c001b659:	6a 4c                	push   0x4c
c001b65b:	e8 0b e3 fe ff       	call   c000996b <malloc>
c001b660:	83 c4 10             	add    esp,0x10
c001b663:	89 c2                	mov    edx,eax
c001b665:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b66c:	89 10                	mov    DWORD PTR [eax],edx
c001b66e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b675:	8b 00                	mov    eax,DWORD PTR [eax]
c001b677:	83 ec 08             	sub    esp,0x8
c001b67a:	8d 54 24 14          	lea    edx,[esp+0x14]
c001b67e:	52                   	push   edx
c001b67f:	50                   	push   eax
c001b680:	e8 36 a8 fe ff       	call   c0005ebb <f_opendir>
c001b685:	83 c4 10             	add    esp,0x10
c001b688:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b68f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001b697:	74 07                	je     c001b6a0 <FAT::openDir(char const*, void**)+0xa0>
c001b699:	b8 01 00 00 00       	mov    eax,0x1
c001b69e:	eb 08                	jmp    c001b6a8 <FAT::openDir(char const*, void**)+0xa8>
c001b6a0:	b8 00 00 00 00       	mov    eax,0x0
c001b6a5:	8d 76 00             	lea    esi,[esi+0x0]
c001b6a8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b6ae:	c3                   	ret    
c001b6af:	90                   	nop

c001b6b0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001b6b0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b6b6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001b6be:	75 0c                	jne    c001b6cc <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001b6c0:	b8 04 00 00 00       	mov    eax,0x4
c001b6c5:	e9 d2 00 00 00       	jmp    c001b79c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b6ca:	66 90                	xchg   ax,ax
c001b6cc:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001b6d4:	75 0a                	jne    c001b6e0 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001b6d6:	b8 04 00 00 00       	mov    eax,0x4
c001b6db:	e9 bc 00 00 00       	jmp    c001b79c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b6e0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001b6e8:	75 0a                	jne    c001b6f4 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001b6ea:	b8 04 00 00 00       	mov    eax,0x4
c001b6ef:	e9 a8 00 00 00       	jmp    c001b79c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b6f4:	83 ec 08             	sub    esp,0x8
c001b6f7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b6fe:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b705:	50                   	push   eax
c001b706:	e8 2d 50 fe ff       	call   c0000738 <strcpy>
c001b70b:	83 c4 10             	add    esp,0x10
c001b70e:	83 ec 08             	sub    esp,0x8
c001b711:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001b718:	50                   	push   eax
c001b719:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b720:	e8 6b fd ff ff       	call   c001b490 <FAT::fixFilepath(char*)>
c001b725:	83 c4 10             	add    esp,0x10
c001b728:	83 ec 08             	sub    esp,0x8
c001b72b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b72f:	50                   	push   eax
c001b730:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b737:	50                   	push   eax
c001b738:	e8 3d a9 fe ff       	call   c000607a <f_stat>
c001b73d:	83 c4 10             	add    esp,0x10
c001b740:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b747:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b74e:	85 c0                	test   eax,eax
c001b750:	74 0a                	je     c001b75c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001b752:	83 f8 04             	cmp    eax,0x4
c001b755:	74 35                	je     c001b78c <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001b757:	eb 3b                	jmp    c001b794 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001b759:	8d 76 00             	lea    esi,[esi+0x0]
c001b75c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b760:	0f b6 c0             	movzx  eax,al
c001b763:	83 e0 10             	and    eax,0x10
c001b766:	0f 95 c2             	setne  dl
c001b769:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001b770:	88 10                	mov    BYTE PTR [eax],dl
c001b772:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b775:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b779:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001b780:	89 01                	mov    DWORD PTR [ecx],eax
c001b782:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b785:	b8 00 00 00 00       	mov    eax,0x0
c001b78a:	eb 10                	jmp    c001b79c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b78c:	b8 02 00 00 00       	mov    eax,0x2
c001b791:	eb 09                	jmp    c001b79c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b793:	90                   	nop
c001b794:	b8 01 00 00 00       	mov    eax,0x1
c001b799:	8d 76 00             	lea    esi,[esi+0x0]
c001b79c:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b7a2:	c3                   	ret    
c001b7a3:	90                   	nop

c001b7a4 <FAT::unlink(char const*)>:
c001b7a4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b7aa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b7b2:	75 08                	jne    c001b7bc <FAT::unlink(char const*)+0x18>
c001b7b4:	b8 04 00 00 00       	mov    eax,0x4
c001b7b9:	eb 61                	jmp    c001b81c <FAT::unlink(char const*)+0x78>
c001b7bb:	90                   	nop
c001b7bc:	83 ec 08             	sub    esp,0x8
c001b7bf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b7c6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b7ca:	50                   	push   eax
c001b7cb:	e8 68 4f fe ff       	call   c0000738 <strcpy>
c001b7d0:	83 c4 10             	add    esp,0x10
c001b7d3:	83 ec 08             	sub    esp,0x8
c001b7d6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b7da:	50                   	push   eax
c001b7db:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b7e2:	e8 a9 fc ff ff       	call   c001b490 <FAT::fixFilepath(char*)>
c001b7e7:	83 c4 10             	add    esp,0x10
c001b7ea:	83 ec 0c             	sub    esp,0xc
c001b7ed:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b7f1:	50                   	push   eax
c001b7f2:	e8 d5 ab fe ff       	call   c00063cc <f_unlink>
c001b7f7:	83 c4 10             	add    esp,0x10
c001b7fa:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b801:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b808:	85 c0                	test   eax,eax
c001b80a:	75 08                	jne    c001b814 <FAT::unlink(char const*)+0x70>
c001b80c:	b8 00 00 00 00       	mov    eax,0x0
c001b811:	eb 09                	jmp    c001b81c <FAT::unlink(char const*)+0x78>
c001b813:	90                   	nop
c001b814:	b8 01 00 00 00       	mov    eax,0x1
c001b819:	8d 76 00             	lea    esi,[esi+0x0]
c001b81c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b822:	c3                   	ret    
c001b823:	90                   	nop

c001b824 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001b824:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b82a:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001b831:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001b838:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b83c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b840:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001b848:	75 0a                	jne    c001b854 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001b84a:	b8 04 00 00 00       	mov    eax,0x4
c001b84f:	e9 30 01 00 00       	jmp    c001b984 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001b854:	83 ec 08             	sub    esp,0x8
c001b857:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b85e:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b862:	50                   	push   eax
c001b863:	e8 d0 4e fe ff       	call   c0000738 <strcpy>
c001b868:	83 c4 10             	add    esp,0x10
c001b86b:	83 ec 08             	sub    esp,0x8
c001b86e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b872:	50                   	push   eax
c001b873:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b87a:	e8 11 fc ff ff       	call   c001b490 <FAT::fixFilepath(char*)>
c001b87f:	83 c4 10             	add    esp,0x10
c001b882:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001b88a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001b892:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b897:	83 e0 01             	and    eax,0x1
c001b89a:	74 08                	je     c001b8a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001b89c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001b8a4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b8a9:	83 e0 02             	and    eax,0x2
c001b8ac:	74 0a                	je     c001b8b8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001b8ae:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001b8b6:	66 90                	xchg   ax,ax
c001b8b8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b8bd:	83 e0 04             	and    eax,0x4
c001b8c0:	74 0a                	je     c001b8cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001b8c2:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001b8ca:	66 90                	xchg   ax,ax
c001b8cc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b8d1:	83 e0 08             	and    eax,0x8
c001b8d4:	74 0a                	je     c001b8e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001b8d6:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001b8de:	66 90                	xchg   ax,ax
c001b8e0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b8e5:	83 e0 01             	and    eax,0x1
c001b8e8:	74 0a                	je     c001b8f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001b8ea:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001b8f2:	66 90                	xchg   ax,ax
c001b8f4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b8f9:	83 e0 02             	and    eax,0x2
c001b8fc:	74 0a                	je     c001b908 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001b8fe:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001b906:	66 90                	xchg   ax,ax
c001b908:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b90d:	83 e0 04             	and    eax,0x4
c001b910:	74 0a                	je     c001b91c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001b912:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001b91a:	66 90                	xchg   ax,ax
c001b91c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b921:	83 e0 08             	and    eax,0x8
c001b924:	74 0a                	je     c001b930 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001b926:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001b92e:	66 90                	xchg   ax,ax
c001b930:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001b937:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001b93e:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001b946:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001b94e:	83 ec 04             	sub    esp,0x4
c001b951:	52                   	push   edx
c001b952:	50                   	push   eax
c001b953:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b957:	50                   	push   eax
c001b958:	e8 11 b1 fe ff       	call   c0006a6e <f_chmod>
c001b95d:	83 c4 10             	add    esp,0x10
c001b960:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001b967:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001b96e:	85 c0                	test   eax,eax
c001b970:	75 0a                	jne    c001b97c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001b972:	b8 00 00 00 00       	mov    eax,0x0
c001b977:	eb 0b                	jmp    c001b984 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001b979:	8d 76 00             	lea    esi,[esi+0x0]
c001b97c:	b8 01 00 00 00       	mov    eax,0x1
c001b981:	8d 76 00             	lea    esi,[esi+0x0]
c001b984:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b98a:	c3                   	ret    
c001b98b:	90                   	nop

c001b98c <FAT::rename(char const*, char const*)>:
c001b98c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b992:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001b99a:	74 0c                	je     c001b9a8 <FAT::rename(char const*, char const*)+0x1c>
c001b99c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001b9a4:	75 0e                	jne    c001b9b4 <FAT::rename(char const*, char const*)+0x28>
c001b9a6:	66 90                	xchg   ax,ax
c001b9a8:	b8 04 00 00 00       	mov    eax,0x4
c001b9ad:	e9 9e 00 00 00       	jmp    c001ba50 <FAT::rename(char const*, char const*)+0xc4>
c001b9b2:	66 90                	xchg   ax,ax
c001b9b4:	83 ec 08             	sub    esp,0x8
c001b9b7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b9be:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b9c5:	50                   	push   eax
c001b9c6:	e8 6d 4d fe ff       	call   c0000738 <strcpy>
c001b9cb:	83 c4 10             	add    esp,0x10
c001b9ce:	83 ec 08             	sub    esp,0x8
c001b9d1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001b9d8:	50                   	push   eax
c001b9d9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b9e0:	e8 ab fa ff ff       	call   c001b490 <FAT::fixFilepath(char*)>
c001b9e5:	83 c4 10             	add    esp,0x10
c001b9e8:	83 ec 08             	sub    esp,0x8
c001b9eb:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001b9f2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b9f6:	50                   	push   eax
c001b9f7:	e8 3c 4d fe ff       	call   c0000738 <strcpy>
c001b9fc:	83 c4 10             	add    esp,0x10
c001b9ff:	83 ec 08             	sub    esp,0x8
c001ba02:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ba06:	50                   	push   eax
c001ba07:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ba0e:	e8 7d fa ff ff       	call   c001b490 <FAT::fixFilepath(char*)>
c001ba13:	83 c4 10             	add    esp,0x10
c001ba16:	83 ec 08             	sub    esp,0x8
c001ba19:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ba1d:	50                   	push   eax
c001ba1e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ba25:	50                   	push   eax
c001ba26:	e8 50 ad fe ff       	call   c000677b <f_rename>
c001ba2b:	83 c4 10             	add    esp,0x10
c001ba2e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001ba35:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001ba3c:	85 c0                	test   eax,eax
c001ba3e:	75 08                	jne    c001ba48 <FAT::rename(char const*, char const*)+0xbc>
c001ba40:	b8 00 00 00 00       	mov    eax,0x0
c001ba45:	eb 09                	jmp    c001ba50 <FAT::rename(char const*, char const*)+0xc4>
c001ba47:	90                   	nop
c001ba48:	b8 01 00 00 00       	mov    eax,0x1
c001ba4d:	8d 76 00             	lea    esi,[esi+0x0]
c001ba50:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ba56:	c3                   	ret    
c001ba57:	90                   	nop

c001ba58 <FAT::mkdir(char const*)>:
c001ba58:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ba5e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ba66:	75 08                	jne    c001ba70 <FAT::mkdir(char const*)+0x18>
c001ba68:	b8 04 00 00 00       	mov    eax,0x4
c001ba6d:	eb 61                	jmp    c001bad0 <FAT::mkdir(char const*)+0x78>
c001ba6f:	90                   	nop
c001ba70:	83 ec 08             	sub    esp,0x8
c001ba73:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ba7a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ba7e:	50                   	push   eax
c001ba7f:	e8 b4 4c fe ff       	call   c0000738 <strcpy>
c001ba84:	83 c4 10             	add    esp,0x10
c001ba87:	83 ec 08             	sub    esp,0x8
c001ba8a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ba8e:	50                   	push   eax
c001ba8f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ba96:	e8 f5 f9 ff ff       	call   c001b490 <FAT::fixFilepath(char*)>
c001ba9b:	83 c4 10             	add    esp,0x10
c001ba9e:	83 ec 0c             	sub    esp,0xc
c001baa1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001baa5:	50                   	push   eax
c001baa6:	e8 a4 aa fe ff       	call   c000654f <f_mkdir>
c001baab:	83 c4 10             	add    esp,0x10
c001baae:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001bab5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001babc:	85 c0                	test   eax,eax
c001babe:	75 08                	jne    c001bac8 <FAT::mkdir(char const*)+0x70>
c001bac0:	b8 00 00 00 00       	mov    eax,0x0
c001bac5:	eb 09                	jmp    c001bad0 <FAT::mkdir(char const*)+0x78>
c001bac7:	90                   	nop
c001bac8:	b8 01 00 00 00       	mov    eax,0x1
c001bacd:	8d 76 00             	lea    esi,[esi+0x0]
c001bad0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bad6:	c3                   	ret    
c001bad7:	90                   	nop

c001bad8 <FAT::exists(char const*)>:
c001bad8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001bade:	83 ec 08             	sub    esp,0x8
c001bae1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bae8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001baec:	50                   	push   eax
c001baed:	e8 46 4c fe ff       	call   c0000738 <strcpy>
c001baf2:	83 c4 10             	add    esp,0x10
c001baf5:	83 ec 08             	sub    esp,0x8
c001baf8:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bafc:	50                   	push   eax
c001bafd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bb04:	e8 87 f9 ff ff       	call   c001b490 <FAT::fixFilepath(char*)>
c001bb09:	83 c4 10             	add    esp,0x10
c001bb0c:	83 ec 08             	sub    esp,0x8
c001bb0f:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001bb16:	50                   	push   eax
c001bb17:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001bb1b:	50                   	push   eax
c001bb1c:	e8 59 a5 fe ff       	call   c000607a <f_stat>
c001bb21:	83 c4 10             	add    esp,0x10
c001bb24:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001bb2b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001bb32:	85 c0                	test   eax,eax
c001bb34:	75 06                	jne    c001bb3c <FAT::exists(char const*)+0x64>
c001bb36:	b0 01                	mov    al,0x1
c001bb38:	eb 06                	jmp    c001bb40 <FAT::exists(char const*)+0x68>
c001bb3a:	66 90                	xchg   ax,ax
c001bb3c:	b0 00                	mov    al,0x0
c001bb3e:	66 90                	xchg   ax,ax
c001bb40:	81 c4 2c 02 00 00    	add    esp,0x22c
c001bb46:	c3                   	ret    
c001bb47:	90                   	nop

c001bb48 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001bb48:	b8 08 00 00 00       	mov    eax,0x8
c001bb4d:	c3                   	ret    

c001bb4e <ISO9660::seek(void*, unsigned long long)>:
c001bb4e:	53                   	push   ebx
c001bb4f:	b8 04 00 00 00       	mov    eax,0x4
c001bb54:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bb58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb5c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001bb60:	85 d2                	test   edx,edx
c001bb62:	74 17                	je     c001bb7b <ISO9660::seek(void*, unsigned long long)+0x2d>
c001bb64:	89 c8                	mov    eax,ecx
c001bb66:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001bb69:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001bb6c:	b8 01 00 00 00       	mov    eax,0x1
c001bb71:	73 08                	jae    c001bb7b <ISO9660::seek(void*, unsigned long long)+0x2d>
c001bb73:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001bb76:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001bb79:	31 c0                	xor    eax,eax
c001bb7b:	5b                   	pop    ebx
c001bb7c:	c3                   	ret    
c001bb7d:	90                   	nop

c001bb7e <ISO9660::tell(void*, unsigned long long*)>:
c001bb7e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bb82:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb86:	85 d2                	test   edx,edx
c001bb88:	74 12                	je     c001bb9c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001bb8a:	85 c0                	test   eax,eax
c001bb8c:	74 0e                	je     c001bb9c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001bb8e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001bb91:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001bb94:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001bb97:	89 10                	mov    DWORD PTR [eax],edx
c001bb99:	31 c0                	xor    eax,eax
c001bb9b:	c3                   	ret    
c001bb9c:	b8 04 00 00 00       	mov    eax,0x4
c001bba1:	c3                   	ret    

c001bba2 <ISO9660::getName()>:
c001bba2:	b8 1c 50 02 c0       	mov    eax,0xc002501c
c001bba7:	c3                   	ret    

c001bba8 <ISO9660::stat(void*, unsigned long long*)>:
c001bba8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bbac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bbb0:	85 d2                	test   edx,edx
c001bbb2:	74 12                	je     c001bbc6 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001bbb4:	85 c0                	test   eax,eax
c001bbb6:	74 0e                	je     c001bbc6 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001bbb8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001bbbb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001bbbe:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001bbc1:	89 10                	mov    DWORD PTR [eax],edx
c001bbc3:	31 c0                	xor    eax,eax
c001bbc5:	c3                   	ret    
c001bbc6:	b8 04 00 00 00       	mov    eax,0x4
c001bbcb:	c3                   	ret    

c001bbcc <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001bbcc:	b8 01 00 00 00       	mov    eax,0x1
c001bbd1:	c3                   	ret    

c001bbd2 <ISO9660::unlink(char const*)>:
c001bbd2:	b8 01 00 00 00       	mov    eax,0x1
c001bbd7:	c3                   	ret    

c001bbd8 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001bbd8:	b8 01 00 00 00       	mov    eax,0x1
c001bbdd:	c3                   	ret    

c001bbde <ISO9660::rename(char const*, char const*)>:
c001bbde:	b8 01 00 00 00       	mov    eax,0x1
c001bbe3:	c3                   	ret    

c001bbe4 <ISO9660::mkdir(char const*)>:
c001bbe4:	b8 01 00 00 00       	mov    eax,0x1
c001bbe9:	c3                   	ret    

c001bbea <ISO9660::close(void*)>:
c001bbea:	83 ec 0c             	sub    esp,0xc
c001bbed:	b8 04 00 00 00       	mov    eax,0x4
c001bbf2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bbf6:	85 d2                	test   edx,edx
c001bbf8:	74 0e                	je     c001bc08 <ISO9660::close(void*)+0x1e>
c001bbfa:	83 ec 0c             	sub    esp,0xc
c001bbfd:	52                   	push   edx
c001bbfe:	e8 78 dd fe ff       	call   c000997b <free>
c001bc03:	83 c4 10             	add    esp,0x10
c001bc06:	31 c0                	xor    eax,eax
c001bc08:	83 c4 0c             	add    esp,0xc
c001bc0b:	c3                   	ret    

c001bc0c <ISO9660::closeDir(void*)>:
c001bc0c:	83 ec 0c             	sub    esp,0xc
c001bc0f:	b8 04 00 00 00       	mov    eax,0x4
c001bc14:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bc18:	85 d2                	test   edx,edx
c001bc1a:	74 0e                	je     c001bc2a <ISO9660::closeDir(void*)+0x1e>
c001bc1c:	83 ec 0c             	sub    esp,0xc
c001bc1f:	52                   	push   edx
c001bc20:	e8 56 dd fe ff       	call   c000997b <free>
c001bc25:	83 c4 10             	add    esp,0x10
c001bc28:	31 c0                	xor    eax,eax
c001bc2a:	83 c4 0c             	add    esp,0xc
c001bc2d:	c3                   	ret    

c001bc2e <ISO9660::~ISO9660()>:
c001bc2e:	83 ec 0c             	sub    esp,0xc
c001bc31:	ba 40 50 02 c0       	mov    edx,0xc0025040
c001bc36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc3a:	89 10                	mov    DWORD PTR [eax],edx
c001bc3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc40:	83 ec 0c             	sub    esp,0xc
c001bc43:	50                   	push   eax
c001bc44:	e8 6b 13 ff ff       	call   c000cfb4 <Filesystem::~Filesystem()>
c001bc49:	83 c4 10             	add    esp,0x10
c001bc4c:	90                   	nop
c001bc4d:	83 c4 0c             	add    esp,0xc
c001bc50:	c3                   	ret    
c001bc51:	90                   	nop

c001bc52 <ISO9660::~ISO9660()>:
c001bc52:	83 ec 0c             	sub    esp,0xc
c001bc55:	83 ec 0c             	sub    esp,0xc
c001bc58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bc5c:	e8 cd ff ff ff       	call   c001bc2e <ISO9660::~ISO9660()>
c001bc61:	83 c4 10             	add    esp,0x10
c001bc64:	83 ec 08             	sub    esp,0x8
c001bc67:	6a 08                	push   0x8
c001bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bc6d:	e8 26 0f ff ff       	call   c000cb98 <operator delete(void*, unsigned long)>
c001bc72:	83 c4 10             	add    esp,0x10
c001bc75:	83 c4 0c             	add    esp,0xc
c001bc78:	c3                   	ret    

c001bc79 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001bc79:	55                   	push   ebp
c001bc7a:	31 c9                	xor    ecx,ecx
c001bc7c:	57                   	push   edi
c001bc7d:	56                   	push   esi
c001bc7e:	53                   	push   ebx
c001bc7f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001bc83:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001bc87:	89 eb                	mov    ebx,ebp
c001bc89:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001bc8d:	39 ce                	cmp    esi,ecx
c001bc8f:	7e 17                	jle    c001bca8 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001bc91:	31 d2                	xor    edx,edx
c001bc93:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001bc97:	7d 13                	jge    c001bcac <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001bc99:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001bc9d:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001bca0:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001bca3:	75 0d                	jne    c001bcb2 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001bca5:	42                   	inc    edx
c001bca6:	eb eb                	jmp    c001bc93 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001bca8:	31 c0                	xor    eax,eax
c001bcaa:	eb 0a                	jmp    c001bcb6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001bcac:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001bcb0:	eb 04                	jmp    c001bcb6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001bcb2:	41                   	inc    ecx
c001bcb3:	43                   	inc    ebx
c001bcb4:	eb d7                	jmp    c001bc8d <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001bcb6:	5b                   	pop    ebx
c001bcb7:	5e                   	pop    esi
c001bcb8:	5f                   	pop    edi
c001bcb9:	5d                   	pop    ebp
c001bcba:	c3                   	ret    

c001bcbb <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001bcbb:	57                   	push   edi
c001bcbc:	56                   	push   esi
c001bcbd:	53                   	push   ebx
c001bcbe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bcc2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bcc6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001bcca:	39 35 c0 9d 02 c0    	cmp    DWORD PTR ds:0xc0029dc0,esi
c001bcd0:	75 08                	jne    c001bcda <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001bcd2:	38 1d c0 60 02 c0    	cmp    BYTE PTR ds:0xc00260c0,bl
c001bcd8:	74 4a                	je     c001bd24 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001bcda:	83 ec 0c             	sub    esp,0xc
c001bcdd:	31 d2                	xor    edx,edx
c001bcdf:	68 e0 9d 02 c0       	push   0xc0029de0
c001bce4:	0f be c3             	movsx  eax,bl
c001bce7:	6a 01                	push   0x1
c001bce9:	52                   	push   edx
c001bcea:	56                   	push   esi
c001bceb:	ff 34 85 3c 8b 02 c0 	push   DWORD PTR [eax*4-0x3ffd74c4]
c001bcf2:	e8 2b 37 ff ff       	call   c000f422 <LogicalDisk::read(unsigned long long, int, void*)>
c001bcf7:	83 c4 20             	add    esp,0x20
c001bcfa:	85 c0                	test   eax,eax
c001bcfc:	75 0e                	jne    c001bd0c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c001bcfe:	89 35 c0 9d 02 c0    	mov    DWORD PTR ds:0xc0029dc0,esi
c001bd04:	88 1d c0 60 02 c0    	mov    BYTE PTR ds:0xc00260c0,bl
c001bd0a:	eb 18                	jmp    c001bd24 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001bd0c:	50                   	push   eax
c001bd0d:	68 00 08 00 00       	push   0x800
c001bd12:	6a 00                	push   0x0
c001bd14:	57                   	push   edi
c001bd15:	e8 62 49 fe ff       	call   c000067c <memset>
c001bd1a:	83 c4 10             	add    esp,0x10
c001bd1d:	b8 01 00 00 00       	mov    eax,0x1
c001bd22:	eb 0e                	jmp    c001bd32 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c001bd24:	be e0 9d 02 c0       	mov    esi,0xc0029de0
c001bd29:	b9 00 08 00 00       	mov    ecx,0x800
c001bd2e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bd30:	31 c0                	xor    eax,eax
c001bd32:	5b                   	pop    ebx
c001bd33:	5e                   	pop    esi
c001bd34:	5f                   	pop    edi
c001bd35:	c3                   	ret    

c001bd36 <ISO9660::tryMount(LogicalDisk*, int)>:
c001bd36:	81 ec 10 08 00 00    	sub    esp,0x810
c001bd3c:	c7 05 c0 9d 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0029dc0,0xdeadbeef
c001bd46:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001bd4d:	83 c0 41             	add    eax,0x41
c001bd50:	0f be c0             	movsx  eax,al
c001bd53:	50                   	push   eax
c001bd54:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bd58:	50                   	push   eax
c001bd59:	6a 10                	push   0x10
c001bd5b:	e8 5b ff ff ff       	call   c001bcbb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bd60:	83 c4 10             	add    esp,0x10
c001bd63:	31 d2                	xor    edx,edx
c001bd65:	85 c0                	test   eax,eax
c001bd67:	75 24                	jne    c001bd8d <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001bd69:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001bd6e:	75 1d                	jne    c001bd8d <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001bd70:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001bd75:	75 16                	jne    c001bd8d <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001bd77:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001bd7c:	75 0f                	jne    c001bd8d <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001bd7e:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001bd83:	75 08                	jne    c001bd8d <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001bd85:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001bd8a:	0f 94 c2             	sete   dl
c001bd8d:	88 d0                	mov    al,dl
c001bd8f:	81 c4 0c 08 00 00    	add    esp,0x80c
c001bd95:	c3                   	ret    

c001bd96 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001bd96:	55                   	push   ebp
c001bd97:	57                   	push   edi
c001bd98:	56                   	push   esi
c001bd99:	53                   	push   ebx
c001bd9a:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001bda0:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001bda7:	85 ed                	test   ebp,ebp
c001bda9:	0f 84 da 01 00 00    	je     c001bf89 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001bdaf:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001bdb7:	0f 84 cc 01 00 00    	je     c001bf89 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001bdbd:	b8 01 00 00 00       	mov    eax,0x1
c001bdc2:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001bdc6:	0f 85 c2 01 00 00    	jne    c001bf8e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001bdcc:	31 d2                	xor    edx,edx
c001bdce:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001bdd5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001bdd8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001bddb:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001bdde:	89 04 24             	mov    DWORD PTR [esp],eax
c001bde1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bde5:	01 c8                	add    eax,ecx
c001bde7:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001bdea:	11 da                	adc    edx,ebx
c001bdec:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001bdf0:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bdf4:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001bdf8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bdfc:	19 d7                	sbb    edi,edx
c001bdfe:	72 11                	jb     c001be11 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001be00:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001be03:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001be07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001be0b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001be0f:	eb 0c                	jmp    c001be1d <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001be11:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001be15:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001be19:	29 ce                	sub    esi,ecx
c001be1b:	19 df                	sbb    edi,ebx
c001be1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001be20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001be23:	0f a4 c2 0b          	shld   edx,eax,0xb
c001be27:	c1 e0 0b             	shl    eax,0xb
c001be2a:	01 c8                	add    eax,ecx
c001be2c:	11 da                	adc    edx,ebx
c001be2e:	89 04 24             	mov    DWORD PTR [esp],eax
c001be31:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001be35:	51                   	push   ecx
c001be36:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001be3a:	50                   	push   eax
c001be3b:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001be3f:	53                   	push   ebx
c001be40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001be44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be48:	0f ac d0 0b          	shrd   eax,edx,0xb
c001be4c:	50                   	push   eax
c001be4d:	e8 69 fe ff ff       	call   c001bcbb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001be52:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001be55:	b8 00 08 00 00       	mov    eax,0x800
c001be5a:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001be60:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001be64:	29 d0                	sub    eax,edx
c001be66:	83 c4 10             	add    esp,0x10
c001be69:	89 f9                	mov    ecx,edi
c001be6b:	39 c6                	cmp    esi,eax
c001be6d:	83 d9 00             	sbb    ecx,0x0
c001be70:	7d 1b                	jge    c001be8d <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001be72:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001be77:	75 12                	jne    c001be8b <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001be79:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001be80:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001be86:	e9 fa 00 00 00       	jmp    c001bf85 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001be8b:	89 f0                	mov    eax,esi
c001be8d:	01 d3                	add    ebx,edx
c001be8f:	31 d2                	xor    edx,edx
c001be91:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001be95:	39 c2                	cmp    edx,eax
c001be97:	7d 14                	jge    c001bead <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001be99:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001bea0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001bea4:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001bea7:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001beaa:	42                   	inc    edx
c001beab:	eb e8                	jmp    c001be95 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001bead:	89 c2                	mov    edx,eax
c001beaf:	85 c0                	test   eax,eax
c001beb1:	79 02                	jns    c001beb5 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001beb3:	31 d2                	xor    edx,edx
c001beb5:	01 c2                	add    edx,eax
c001beb7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001beba:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001bec1:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001bec5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001bec9:	99                   	cdq    
c001beca:	01 c1                	add    ecx,eax
c001becc:	11 d3                	adc    ebx,edx
c001bece:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001bed2:	29 c6                	sub    esi,eax
c001bed4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001bed8:	19 d7                	sbb    edi,edx
c001beda:	89 34 24             	mov    DWORD PTR [esp],esi
c001bedd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001bee1:	b8 ff 07 00 00       	mov    eax,0x7ff
c001bee6:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001bee9:	b8 00 00 00 00       	mov    eax,0x0
c001beee:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001bef2:	7d 43                	jge    c001bf37 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001bef4:	52                   	push   edx
c001bef5:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bef9:	50                   	push   eax
c001befa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001befe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bf02:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bf06:	0f ac d0 0b          	shrd   eax,edx,0xb
c001bf0a:	50                   	push   eax
c001bf0b:	e8 ab fd ff ff       	call   c001bcbb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bf10:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001bf18:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001bf1d:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001bf25:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001bf2d:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001bf32:	83 c4 10             	add    esp,0x10
c001bf35:	eb aa                	jmp    c001bee1 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001bf37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf3b:	0b 04 24             	or     eax,DWORD PTR [esp]
c001bf3e:	74 2a                	je     c001bf6a <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001bf40:	50                   	push   eax
c001bf41:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bf45:	50                   	push   eax
c001bf46:	8d 74 24 28          	lea    esi,[esp+0x28]
c001bf4a:	56                   	push   esi
c001bf4b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bf4f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bf53:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001bf57:	51                   	push   ecx
c001bf58:	e8 5e fd ff ff       	call   c001bcbb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bf5d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001bf61:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bf65:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bf67:	83 c4 10             	add    esp,0x10
c001bf6a:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bf71:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001bf75:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bf79:	89 18                	mov    DWORD PTR [eax],ebx
c001bf7b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bf7f:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bf82:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001bf85:	31 c0                	xor    eax,eax
c001bf87:	eb 05                	jmp    c001bf8e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001bf89:	b8 04 00 00 00       	mov    eax,0x4
c001bf8e:	81 c4 2c 08 00 00    	add    esp,0x82c
c001bf94:	5b                   	pop    ebx
c001bf95:	5e                   	pop    esi
c001bf96:	5f                   	pop    edi
c001bf97:	5d                   	pop    ebp
c001bf98:	c3                   	ret    
c001bf99:	90                   	nop

c001bf9a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001bf9a:	55                   	push   ebp
c001bf9b:	57                   	push   edi
c001bf9c:	56                   	push   esi
c001bf9d:	53                   	push   ebx
c001bf9e:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001bfa4:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001bfab:	85 ed                	test   ebp,ebp
c001bfad:	0f 84 51 02 00 00    	je     c001c204 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001bfb3:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001bfbb:	0f 84 43 02 00 00    	je     c001c204 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001bfc1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bfc4:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001bfc7:	75 0a                	jne    c001bfd3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001bfc9:	b8 07 00 00 00       	mov    eax,0x7
c001bfce:	e9 36 02 00 00       	jmp    c001c209 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001bfd3:	50                   	push   eax
c001bfd4:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bfd8:	50                   	push   eax
c001bfd9:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001bfe0:	53                   	push   ebx
c001bfe1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bfe4:	c1 e0 0b             	shl    eax,0xb
c001bfe7:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001bfea:	c1 e8 0b             	shr    eax,0xb
c001bfed:	50                   	push   eax
c001bfee:	e8 c8 fc ff ff       	call   c001bcbb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bff3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bff6:	83 c4 10             	add    esp,0x10
c001bff9:	89 c1                	mov    ecx,eax
c001bffb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001bffe:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001c004:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001c007:	84 db                	test   bl,bl
c001c009:	0f 85 8b 00 00 00    	jne    c001c09a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001c00f:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001c015:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001c018:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001c01e:	29 c6                	sub    esi,eax
c001c020:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001c024:	89 f3                	mov    ebx,esi
c001c026:	89 f1                	mov    ecx,esi
c001c028:	c1 fb 1f             	sar    ebx,0x1f
c001c02b:	01 f0                	add    eax,esi
c001c02d:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001c030:	11 da                	adc    edx,ebx
c001c032:	89 04 24             	mov    DWORD PTR [esp],eax
c001c035:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c039:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001c03c:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c03f:	89 d8                	mov    eax,ebx
c001c041:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001c045:	ba 00 00 00 00       	mov    edx,0x0
c001c04a:	19 f8                	sbb    eax,edi
c001c04c:	b8 00 00 00 00       	mov    eax,0x0
c001c051:	73 08                	jae    c001c05b <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001c053:	89 f0                	mov    eax,esi
c001c055:	89 fa                	mov    edx,edi
c001c057:	29 c8                	sub    eax,ecx
c001c059:	19 da                	sbb    edx,ebx
c001c05b:	89 d7                	mov    edi,edx
c001c05d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001c060:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c063:	09 c7                	or     edi,eax
c001c065:	0f 84 5e ff ff ff    	je     c001bfc9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001c06b:	57                   	push   edi
c001c06c:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c070:	50                   	push   eax
c001c071:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001c078:	53                   	push   ebx
c001c079:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c07c:	c1 e0 0b             	shl    eax,0xb
c001c07f:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001c083:	c1 e8 0b             	shr    eax,0xb
c001c086:	50                   	push   eax
c001c087:	e8 2f fc ff ff       	call   c001bcbb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c08c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c08f:	83 c4 10             	add    esp,0x10
c001c092:	25 ff 07 00 00       	and    eax,0x7ff
c001c097:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001c09a:	31 ff                	xor    edi,edi
c001c09c:	56                   	push   esi
c001c09d:	6a 28                	push   0x28
c001c09f:	6a 00                	push   0x0
c001c0a1:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c0a5:	50                   	push   eax
c001c0a6:	e8 d1 45 fe ff       	call   c000067c <memset>
c001c0ab:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c0ae:	25 ff 07 00 00       	and    eax,0x7ff
c001c0b3:	89 c6                	mov    esi,eax
c001c0b5:	83 c6 21             	add    esi,0x21
c001c0b8:	83 d7 00             	adc    edi,0x0
c001c0bb:	83 c4 10             	add    esp,0x10
c001c0be:	31 c9                	xor    ecx,ecx
c001c0c0:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001c0c7:	83 f9 28             	cmp    ecx,0x28
c001c0ca:	88 04 24             	mov    BYTE PTR [esp],al
c001c0cd:	0f 94 c2             	sete   dl
c001c0d0:	88 d0                	mov    al,dl
c001c0d2:	ba ff 07 00 00       	mov    edx,0x7ff
c001c0d7:	39 f2                	cmp    edx,esi
c001c0d9:	ba 00 00 00 00       	mov    edx,0x0
c001c0de:	19 fa                	sbb    edx,edi
c001c0e0:	0f 92 c2             	setb   dl
c001c0e3:	09 c2                	or     edx,eax
c001c0e5:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001c0e9:	0f 94 c0             	sete   al
c001c0ec:	08 d0                	or     al,dl
c001c0ee:	75 16                	jne    c001c106 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001c0f0:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001c0f4:	74 10                	je     c001c106 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001c0f6:	8a 04 24             	mov    al,BYTE PTR [esp]
c001c0f9:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001c0fd:	41                   	inc    ecx
c001c0fe:	83 c6 01             	add    esi,0x1
c001c101:	83 d7 00             	adc    edi,0x0
c001c104:	eb ba                	jmp    c001c0c0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001c106:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001c10d:	83 ec 0c             	sub    esp,0xc
c001c110:	8d 74 24 24          	lea    esi,[esp+0x24]
c001c114:	56                   	push   esi
c001c115:	e8 7e 45 fe ff       	call   c0000698 <strlen>
c001c11a:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001c121:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001c125:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001c12d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c130:	5a                   	pop    edx
c001c131:	25 ff 07 00 00       	and    eax,0x7ff
c001c136:	59                   	pop    ecx
c001c137:	01 f8                	add    eax,edi
c001c139:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001c13f:	83 e0 02             	and    eax,0x2
c001c142:	3c 01                	cmp    al,0x1
c001c144:	19 c0                	sbb    eax,eax
c001c146:	83 c0 02             	add    eax,0x2
c001c149:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001c14d:	56                   	push   esi
c001c14e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c152:	50                   	push   eax
c001c153:	e8 e0 45 fe ff       	call   c0000738 <strcpy>
c001c158:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001c15c:	83 c4 10             	add    esp,0x10
c001c15f:	84 c0                	test   al,al
c001c161:	75 21                	jne    c001c184 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001c163:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001c16b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c173:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001c17b:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001c182:	eb 28                	jmp    c001c1ac <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001c184:	fe c8                	dec    al
c001c186:	75 24                	jne    c001c1ac <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001c188:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001c190:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c198:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001c1a0:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001c1a7:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001c1ac:	8d 74 24 40          	lea    esi,[esp+0x40]
c001c1b0:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001c1b7:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001c1be:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c1c0:	0f b6 f3             	movzx  esi,bl
c001c1c3:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001c1ca:	31 db                	xor    ebx,ebx
c001c1cc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001c1d2:	89 df                	mov    edi,ebx
c001c1d4:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001c1d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1da:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001c1dd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001c1e0:	39 c6                	cmp    esi,eax
c001c1e2:	19 d7                	sbb    edi,edx
c001c1e4:	72 10                	jb     c001c1f6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001c1e6:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001c1ed:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001c1f4:	eb 0a                	jmp    c001c200 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001c1f6:	29 f0                	sub    eax,esi
c001c1f8:	19 da                	sbb    edx,ebx
c001c1fa:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001c1fd:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c200:	31 c0                	xor    eax,eax
c001c202:	eb 05                	jmp    c001c209 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001c204:	b8 04 00 00 00       	mov    eax,0x4
c001c209:	81 c4 5c 09 00 00    	add    esp,0x95c
c001c20f:	5b                   	pop    ebx
c001c210:	5e                   	pop    esi
c001c211:	5f                   	pop    edi
c001c212:	5d                   	pop    ebp
c001c213:	c3                   	ret    

c001c214 <readRoot(unsigned int*, unsigned int*, char)>:
c001c214:	57                   	push   edi
c001c215:	56                   	push   esi
c001c216:	81 ec 38 08 00 00    	sub    esp,0x838
c001c21c:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001c224:	50                   	push   eax
c001c225:	8d 44 24 38          	lea    eax,[esp+0x38]
c001c229:	50                   	push   eax
c001c22a:	6a 10                	push   0x10
c001c22c:	e8 8a fa ff ff       	call   c001bcbb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c231:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001c238:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001c23c:	b9 22 00 00 00       	mov    ecx,0x22
c001c241:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c243:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c24a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c24e:	89 10                	mov    DWORD PTR [eax],edx
c001c250:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001c257:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c25b:	89 10                	mov    DWORD PTR [eax],edx
c001c25d:	81 c4 44 08 00 00    	add    esp,0x844
c001c263:	b0 01                	mov    al,0x1
c001c265:	5e                   	pop    esi
c001c266:	5f                   	pop    edi
c001c267:	c3                   	ret    

c001c268 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001c268:	55                   	push   ebp
c001c269:	57                   	push   edi
c001c26a:	56                   	push   esi
c001c26b:	53                   	push   ebx
c001c26c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c272:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001c279:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001c280:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c284:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001c288:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c28c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c290:	75 03                	jne    c001c295 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001c292:	83 c3 02             	add    ebx,0x2
c001c295:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001c298:	75 03                	jne    c001c29d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001c29a:	43                   	inc    ebx
c001c29b:	eb f8                	jmp    c001c295 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001c29d:	52                   	push   edx
c001c29e:	68 00 01 00 00       	push   0x100
c001c2a3:	6a 00                	push   0x0
c001c2a5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c2a9:	50                   	push   eax
c001c2aa:	e8 cd 43 fe ff       	call   c000067c <memset>
c001c2af:	83 c4 10             	add    esp,0x10
c001c2b2:	31 d2                	xor    edx,edx
c001c2b4:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001c2b7:	84 c0                	test   al,al
c001c2b9:	74 21                	je     c001c2dc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001c2bb:	3c 2f                	cmp    al,0x2f
c001c2bd:	75 0b                	jne    c001c2ca <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001c2bf:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001c2c3:	bd 01 00 00 00       	mov    ebp,0x1
c001c2c8:	eb 14                	jmp    c001c2de <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001c2ca:	8d 48 9f             	lea    ecx,[eax-0x61]
c001c2cd:	80 f9 19             	cmp    cl,0x19
c001c2d0:	77 03                	ja     c001c2d5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c2d2:	83 e8 20             	sub    eax,0x20
c001c2d5:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001c2d9:	42                   	inc    edx
c001c2da:	eb d8                	jmp    c001c2b4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001c2dc:	31 ed                	xor    ebp,ebp
c001c2de:	83 ec 0c             	sub    esp,0xc
c001c2e1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001c2e8:	e8 7e d6 fe ff       	call   c000996b <malloc>
c001c2ed:	89 c6                	mov    esi,eax
c001c2ef:	89 c2                	mov    edx,eax
c001c2f1:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001c2f8:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001c2fe:	c1 ef 0b             	shr    edi,0xb
c001c301:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001c308:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001c30c:	83 c4 10             	add    esp,0x10
c001c30f:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001c314:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c318:	3b 84 24 34 01 00 00 	cmp    eax,DWORD PTR [esp+0x134]
c001c31f:	74 29                	je     c001c34a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xe2>
c001c321:	50                   	push   eax
c001c322:	57                   	push   edi
c001c323:	52                   	push   edx
c001c324:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c328:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001c32f:	e8 87 f9 ff ff       	call   c001bcbb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c334:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c338:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001c33f:	81 c2 00 08 00 00    	add    edx,0x800
c001c345:	83 c4 10             	add    esp,0x10
c001c348:	eb ca                	jmp    c001c314 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xac>
c001c34a:	83 ec 0c             	sub    esp,0xc
c001c34d:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c351:	57                   	push   edi
c001c352:	e8 41 43 fe ff       	call   c0000698 <strlen>
c001c357:	50                   	push   eax
c001c358:	57                   	push   edi
c001c359:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001c360:	56                   	push   esi
c001c361:	e8 13 f9 ff ff       	call   c001bc79 <__memmem(unsigned char*, int, unsigned char*, int)>
c001c366:	83 c4 20             	add    esp,0x20
c001c369:	85 c0                	test   eax,eax
c001c36b:	75 13                	jne    c001c380 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x118>
c001c36d:	83 ec 0c             	sub    esp,0xc
c001c370:	56                   	push   esi
c001c371:	e8 05 d6 fe ff       	call   c000997b <free>
c001c376:	83 c4 10             	add    esp,0x10
c001c379:	31 c0                	xor    eax,eax
c001c37b:	e9 b3 00 00 00       	jmp    c001c433 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001c380:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001c384:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001c388:	c1 e7 08             	shl    edi,0x8
c001c38b:	c1 e2 10             	shl    edx,0x10
c001c38e:	09 d7                	or     edi,edx
c001c390:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001c394:	09 d7                	or     edi,edx
c001c396:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001c39a:	c1 e2 18             	shl    edx,0x18
c001c39d:	09 d7                	or     edi,edx
c001c39f:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001c3a3:	89 d1                	mov    ecx,edx
c001c3a5:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001c3a9:	c1 e1 08             	shl    ecx,0x8
c001c3ac:	c1 e2 10             	shl    edx,0x10
c001c3af:	09 ca                	or     edx,ecx
c001c3b1:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001c3b5:	09 ca                	or     edx,ecx
c001c3b7:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001c3bb:	c1 e1 18             	shl    ecx,0x18
c001c3be:	09 ca                	or     edx,ecx
c001c3c0:	89 e9                	mov    ecx,ebp
c001c3c2:	84 c9                	test   cl,cl
c001c3c4:	74 3c                	je     c001c402 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x19a>
c001c3c6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c3ca:	83 ec 0c             	sub    esp,0xc
c001c3cd:	56                   	push   esi
c001c3ce:	e8 a8 d5 fe ff       	call   c000997b <free>
c001c3d3:	83 c4 0c             	add    esp,0xc
c001c3d6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c3dd:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001c3e2:	50                   	push   eax
c001c3e3:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c3ea:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c3f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c3f5:	52                   	push   edx
c001c3f6:	57                   	push   edi
c001c3f7:	53                   	push   ebx
c001c3f8:	e8 6b fe ff ff       	call   c001c268 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c3fd:	83 c4 20             	add    esp,0x20
c001c400:	eb 31                	jmp    c001c433 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001c402:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001c405:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001c40c:	d0 e8                	shr    al,1
c001c40e:	89 3b                	mov    DWORD PTR [ebx],edi
c001c410:	83 e0 01             	and    eax,0x1
c001c413:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001c41a:	83 ec 0c             	sub    esp,0xc
c001c41d:	89 13                	mov    DWORD PTR [ebx],edx
c001c41f:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001c426:	89 03                	mov    DWORD PTR [ebx],eax
c001c428:	56                   	push   esi
c001c429:	e8 4d d5 fe ff       	call   c000997b <free>
c001c42e:	83 c4 10             	add    esp,0x10
c001c431:	b0 01                	mov    al,0x1
c001c433:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c439:	5b                   	pop    ebx
c001c43a:	5e                   	pop    esi
c001c43b:	5f                   	pop    edi
c001c43c:	5d                   	pop    ebp
c001c43d:	c3                   	ret    

c001c43e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001c43e:	55                   	push   ebp
c001c43f:	57                   	push   edi
c001c440:	56                   	push   esi
c001c441:	53                   	push   ebx
c001c442:	83 ec 20             	sub    esp,0x20
c001c445:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c449:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c44d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c451:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c459:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c461:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001c466:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001c46c:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001c472:	57                   	push   edi
c001c473:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c477:	50                   	push   eax
c001c478:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c47c:	50                   	push   eax
c001c47d:	e8 92 fd ff ff       	call   c001c214 <readRoot(unsigned int*, unsigned int*, char)>
c001c482:	5a                   	pop    edx
c001c483:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c487:	e8 0c 42 fe ff       	call   c0000698 <strlen>
c001c48c:	83 c4 10             	add    esp,0x10
c001c48f:	83 f8 03             	cmp    eax,0x3
c001c492:	77 17                	ja     c001c4ab <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c494:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c498:	89 03                	mov    DWORD PTR [ebx],eax
c001c49a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c49e:	89 06                	mov    DWORD PTR [esi],eax
c001c4a0:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001c4a7:	b0 01                	mov    al,0x1
c001c4a9:	eb 19                	jmp    c001c4c4 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001c4ab:	50                   	push   eax
c001c4ac:	55                   	push   ebp
c001c4ad:	57                   	push   edi
c001c4ae:	56                   	push   esi
c001c4af:	53                   	push   ebx
c001c4b0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c4b4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c4b8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c4bc:	e8 a7 fd ff ff       	call   c001c268 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c4c1:	83 c4 20             	add    esp,0x20
c001c4c4:	83 c4 1c             	add    esp,0x1c
c001c4c7:	5b                   	pop    ebx
c001c4c8:	5e                   	pop    esi
c001c4c9:	5f                   	pop    edi
c001c4ca:	5d                   	pop    ebp
c001c4cb:	c3                   	ret    

c001c4cc <ISO9660::open(char const*, void**, FileOpenMode)>:
c001c4cc:	57                   	push   edi
c001c4cd:	56                   	push   esi
c001c4ce:	53                   	push   ebx
c001c4cf:	83 ec 10             	sub    esp,0x10
c001c4d2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c4d6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c4da:	85 ff                	test   edi,edi
c001c4dc:	0f 84 8b 00 00 00    	je     c001c56d <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c4e2:	85 f6                	test   esi,esi
c001c4e4:	0f 84 83 00 00 00    	je     c001c56d <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c4ea:	b8 03 00 00 00       	mov    eax,0x3
c001c4ef:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001c4f4:	75 7c                	jne    c001c572 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c4f6:	83 ec 0c             	sub    esp,0xc
c001c4f9:	6a 1c                	push   0x1c
c001c4fb:	e8 6b d4 fe ff       	call   c000996b <malloc>
c001c500:	89 07                	mov    DWORD PTR [edi],eax
c001c502:	89 c3                	mov    ebx,eax
c001c504:	58                   	pop    eax
c001c505:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c509:	50                   	push   eax
c001c50a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c50d:	50                   	push   eax
c001c50e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c512:	50                   	push   eax
c001c513:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c517:	50                   	push   eax
c001c518:	56                   	push   esi
c001c519:	e8 20 ff ff ff       	call   c001c43e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c51e:	83 c4 20             	add    esp,0x20
c001c521:	84 c0                	test   al,al
c001c523:	74 07                	je     c001c52c <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001c525:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c52a:	74 0b                	je     c001c537 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001c52c:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c530:	b8 01 00 00 00       	mov    eax,0x1
c001c535:	eb 3b                	jmp    c001c572 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c537:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c53b:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c53f:	89 03                	mov    DWORD PTR [ebx],eax
c001c541:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c548:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c54c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c553:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c55a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c55d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c564:	8a 06                	mov    al,BYTE PTR [esi]
c001c566:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c569:	31 c0                	xor    eax,eax
c001c56b:	eb 05                	jmp    c001c572 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c56d:	b8 04 00 00 00       	mov    eax,0x4
c001c572:	83 c4 10             	add    esp,0x10
c001c575:	5b                   	pop    ebx
c001c576:	5e                   	pop    esi
c001c577:	5f                   	pop    edi
c001c578:	c3                   	ret    
c001c579:	90                   	nop

c001c57a <ISO9660::exists(char const*)>:
c001c57a:	83 ec 28             	sub    esp,0x28
c001c57d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c581:	8d 54 24 18          	lea    edx,[esp+0x18]
c001c585:	52                   	push   edx
c001c586:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001c589:	52                   	push   edx
c001c58a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c58e:	52                   	push   edx
c001c58f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c593:	52                   	push   edx
c001c594:	50                   	push   eax
c001c595:	e8 a4 fe ff ff       	call   c001c43e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c59a:	83 c4 3c             	add    esp,0x3c
c001c59d:	c3                   	ret    

c001c59e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001c59e:	56                   	push   esi
c001c59f:	53                   	push   ebx
c001c5a0:	83 ec 14             	sub    esp,0x14
c001c5a3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c5a7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c5ab:	85 db                	test   ebx,ebx
c001c5ad:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c5b1:	0f 94 c2             	sete   dl
c001c5b4:	85 f6                	test   esi,esi
c001c5b6:	0f 94 c0             	sete   al
c001c5b9:	08 c2                	or     dl,al
c001c5bb:	75 68                	jne    c001c625 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c5bd:	85 c9                	test   ecx,ecx
c001c5bf:	74 64                	je     c001c625 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c5c1:	83 ec 0c             	sub    esp,0xc
c001c5c4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001c5c7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c5cb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c5d1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c5d8:	50                   	push   eax
c001c5d9:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001c5dc:	50                   	push   eax
c001c5dd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c5e1:	50                   	push   eax
c001c5e2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c5e6:	50                   	push   eax
c001c5e7:	51                   	push   ecx
c001c5e8:	e8 51 fe ff ff       	call   c001c43e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c5ed:	83 c4 20             	add    esp,0x20
c001c5f0:	ba 01 00 00 00       	mov    edx,0x1
c001c5f5:	84 c0                	test   al,al
c001c5f7:	74 31                	je     c001c62a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c5f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c5fd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c604:	89 03                	mov    DWORD PTR [ebx],eax
c001c606:	ba 00 00 00 00       	mov    edx,0x0
c001c60b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c60f:	85 c0                	test   eax,eax
c001c611:	0f 95 06             	setne  BYTE PTR [esi]
c001c614:	74 14                	je     c001c62a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c616:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c61c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c623:	eb 05                	jmp    c001c62a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c625:	ba 04 00 00 00       	mov    edx,0x4
c001c62a:	83 c4 14             	add    esp,0x14
c001c62d:	89 d0                	mov    eax,edx
c001c62f:	5b                   	pop    ebx
c001c630:	5e                   	pop    esi
c001c631:	c3                   	ret    

c001c632 <ISO9660::openDir(char const*, void**)>:
c001c632:	57                   	push   edi
c001c633:	56                   	push   esi
c001c634:	53                   	push   ebx
c001c635:	83 ec 10             	sub    esp,0x10
c001c638:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c63c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c640:	85 ff                	test   edi,edi
c001c642:	74 7b                	je     c001c6bf <ISO9660::openDir(char const*, void**)+0x8d>
c001c644:	85 f6                	test   esi,esi
c001c646:	74 77                	je     c001c6bf <ISO9660::openDir(char const*, void**)+0x8d>
c001c648:	83 ec 0c             	sub    esp,0xc
c001c64b:	6a 1c                	push   0x1c
c001c64d:	e8 19 d3 fe ff       	call   c000996b <malloc>
c001c652:	89 07                	mov    DWORD PTR [edi],eax
c001c654:	89 c3                	mov    ebx,eax
c001c656:	58                   	pop    eax
c001c657:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c65b:	50                   	push   eax
c001c65c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c65f:	50                   	push   eax
c001c660:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c664:	50                   	push   eax
c001c665:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c669:	50                   	push   eax
c001c66a:	56                   	push   esi
c001c66b:	e8 ce fd ff ff       	call   c001c43e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c670:	83 c4 20             	add    esp,0x20
c001c673:	84 c0                	test   al,al
c001c675:	74 07                	je     c001c67e <ISO9660::openDir(char const*, void**)+0x4c>
c001c677:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c67c:	75 0b                	jne    c001c689 <ISO9660::openDir(char const*, void**)+0x57>
c001c67e:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c682:	b8 01 00 00 00       	mov    eax,0x1
c001c687:	eb 3b                	jmp    c001c6c4 <ISO9660::openDir(char const*, void**)+0x92>
c001c689:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c68d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c691:	89 03                	mov    DWORD PTR [ebx],eax
c001c693:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c69a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c69e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c6a5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c6ac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c6af:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c6b6:	8a 06                	mov    al,BYTE PTR [esi]
c001c6b8:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c6bb:	31 c0                	xor    eax,eax
c001c6bd:	eb 05                	jmp    c001c6c4 <ISO9660::openDir(char const*, void**)+0x92>
c001c6bf:	b8 04 00 00 00       	mov    eax,0x4
c001c6c4:	83 c4 10             	add    esp,0x10
c001c6c7:	5b                   	pop    ebx
c001c6c8:	5e                   	pop    esi
c001c6c9:	5f                   	pop    edi
c001c6ca:	c3                   	ret    
c001c6cb:	90                   	nop

c001c6cc <ISO9660::ISO9660()>:
c001c6cc:	83 ec 0c             	sub    esp,0xc
c001c6cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6d3:	83 ec 0c             	sub    esp,0xc
c001c6d6:	50                   	push   eax
c001c6d7:	e8 b4 08 ff ff       	call   c000cf90 <Filesystem::Filesystem()>
c001c6dc:	83 c4 10             	add    esp,0x10
c001c6df:	ba 40 50 02 c0       	mov    edx,0xc0025040
c001c6e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6e8:	89 10                	mov    DWORD PTR [eax],edx
c001c6ea:	90                   	nop
c001c6eb:	83 c4 0c             	add    esp,0xc
c001c6ee:	c3                   	ret    
c001c6ef:	90                   	nop

c001c6f0 <SoundCard::beginPlayback()>:
c001c6f0:	c7 44 24 04 a0 50 02 c0 	mov    DWORD PTR [esp+0x4],0xc00250a0
c001c6f8:	e9 0a 69 ff ff       	jmp    c0013007 <Krnl::panic(char const*)>
c001c6fd:	90                   	nop

c001c6fe <SoundCard::stopPlayback()>:
c001c6fe:	c7 44 24 04 d4 50 02 c0 	mov    DWORD PTR [esp+0x4],0xc00250d4
c001c706:	e9 fc 68 ff ff       	jmp    c0013007 <Krnl::panic(char const*)>
c001c70b:	90                   	nop

c001c70c <SoundCard::SoundCard(char const*)>:
c001c70c:	83 ec 1c             	sub    esp,0x1c
c001c70f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c713:	83 ec 08             	sub    esp,0x8
c001c716:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c71a:	50                   	push   eax
c001c71b:	e8 da 1b ff ff       	call   c000e2fa <Device::Device(char const*)>
c001c720:	83 c4 10             	add    esp,0x10
c001c723:	ba 6c 51 02 c0       	mov    edx,0xc002516c
c001c728:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c72c:	89 10                	mov    DWORD PTR [eax],edx
c001c72e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c732:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c739:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c73d:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001c747:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c74b:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001c755:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c759:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001c763:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c767:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001c771:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c779:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001c77e:	7f 19                	jg     c001c799 <SoundCard::SoundCard(char const*)+0x8d>
c001c780:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c784:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c788:	83 c2 54             	add    edx,0x54
c001c78b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001c793:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001c797:	eb e0                	jmp    c001c779 <SoundCard::SoundCard(char const*)+0x6d>
c001c799:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c79d:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c7a4:	90                   	nop
c001c7a5:	83 c4 1c             	add    esp,0x1c
c001c7a8:	c3                   	ret    
c001c7a9:	90                   	nop

c001c7aa <SoundCard::~SoundCard()>:
c001c7aa:	83 ec 0c             	sub    esp,0xc
c001c7ad:	ba 6c 51 02 c0       	mov    edx,0xc002516c
c001c7b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7b6:	89 10                	mov    DWORD PTR [eax],edx
c001c7b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7bc:	83 ec 0c             	sub    esp,0xc
c001c7bf:	50                   	push   eax
c001c7c0:	e8 33 18 ff ff       	call   c000dff8 <Device::~Device()>
c001c7c5:	83 c4 10             	add    esp,0x10
c001c7c8:	90                   	nop
c001c7c9:	83 c4 0c             	add    esp,0xc
c001c7cc:	c3                   	ret    
c001c7cd:	90                   	nop

c001c7ce <SoundCard::~SoundCard()>:
c001c7ce:	83 ec 0c             	sub    esp,0xc
c001c7d1:	83 ec 0c             	sub    esp,0xc
c001c7d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7d8:	e8 cd ff ff ff       	call   c001c7aa <SoundCard::~SoundCard()>
c001c7dd:	83 c4 10             	add    esp,0x10
c001c7e0:	83 ec 08             	sub    esp,0x8
c001c7e3:	68 e8 01 00 00       	push   0x1e8
c001c7e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7ec:	e8 a7 03 ff ff       	call   c000cb98 <operator delete(void*, unsigned long)>
c001c7f1:	83 c4 10             	add    esp,0x10
c001c7f4:	83 c4 0c             	add    esp,0xc
c001c7f7:	c3                   	ret    

c001c7f8 <SoundCard::configureRates(int, int, int)>:
c001c7f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c7fc:	31 c0                	xor    eax,eax
c001c7fe:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001c805:	75 20                	jne    c001c827 <SoundCard::configureRates(int, int, int)+0x2f>
c001c807:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c80b:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001c811:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c815:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001c81b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c81f:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001c825:	b0 01                	mov    al,0x1
c001c827:	c3                   	ret    

c001c828 <SoundCard::getSamples16(int, short*)>:
c001c828:	55                   	push   ebp
c001c829:	57                   	push   edi
c001c82a:	31 ff                	xor    edi,edi
c001c82c:	56                   	push   esi
c001c82d:	53                   	push   ebx
c001c82e:	31 db                	xor    ebx,ebx
c001c830:	83 ec 18             	sub    esp,0x18
c001c833:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c837:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c83b:	68 07 51 02 c0       	push   0xc0025107
c001c840:	e8 34 04 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001c845:	83 c4 0c             	add    esp,0xc
c001c848:	8d 04 36             	lea    eax,[esi+esi*1]
c001c84b:	50                   	push   eax
c001c84c:	6a 00                	push   0x0
c001c84e:	55                   	push   ebp
c001c84f:	e8 28 3e fe ff       	call   c000067c <memset>
c001c854:	83 c4 10             	add    esp,0x10
c001c857:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c85b:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001c862:	85 c0                	test   eax,eax
c001c864:	74 1b                	je     c001c881 <SoundCard::getSamples16(int, short*)+0x59>
c001c866:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c86a:	75 15                	jne    c001c881 <SoundCard::getSamples16(int, short*)+0x59>
c001c86c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c870:	55                   	push   ebp
c001c871:	56                   	push   esi
c001c872:	50                   	push   eax
c001c873:	e8 58 03 00 00       	call   c001cbd0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001c878:	83 c4 10             	add    esp,0x10
c001c87b:	39 c7                	cmp    edi,eax
c001c87d:	7d 02                	jge    c001c881 <SoundCard::getSamples16(int, short*)+0x59>
c001c87f:	89 c7                	mov    edi,eax
c001c881:	43                   	inc    ebx
c001c882:	83 fb 20             	cmp    ebx,0x20
c001c885:	75 d0                	jne    c001c857 <SoundCard::getSamples16(int, short*)+0x2f>
c001c887:	83 c4 0c             	add    esp,0xc
c001c88a:	89 f8                	mov    eax,edi
c001c88c:	5b                   	pop    ebx
c001c88d:	5e                   	pop    esi
c001c88e:	5f                   	pop    edi
c001c88f:	5d                   	pop    ebp
c001c890:	c3                   	ret    
c001c891:	90                   	nop

c001c892 <SoundCard::getSamples32(int, int*)>:
c001c892:	55                   	push   ebp
c001c893:	57                   	push   edi
c001c894:	31 ff                	xor    edi,edi
c001c896:	56                   	push   esi
c001c897:	31 f6                	xor    esi,esi
c001c899:	53                   	push   ebx
c001c89a:	83 ec 10             	sub    esp,0x10
c001c89d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c8a1:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c8a5:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001c8a9:	c1 e0 02             	shl    eax,0x2
c001c8ac:	50                   	push   eax
c001c8ad:	6a 00                	push   0x0
c001c8af:	55                   	push   ebp
c001c8b0:	e8 c7 3d fe ff       	call   c000067c <memset>
c001c8b5:	83 c4 10             	add    esp,0x10
c001c8b8:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001c8bf:	85 c0                	test   eax,eax
c001c8c1:	74 1b                	je     c001c8de <SoundCard::getSamples32(int, int*)+0x4c>
c001c8c3:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c8c7:	75 15                	jne    c001c8de <SoundCard::getSamples32(int, int*)+0x4c>
c001c8c9:	53                   	push   ebx
c001c8ca:	55                   	push   ebp
c001c8cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c8cf:	50                   	push   eax
c001c8d0:	e8 f7 03 00 00       	call   c001cccc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001c8d5:	83 c4 10             	add    esp,0x10
c001c8d8:	39 c6                	cmp    esi,eax
c001c8da:	7d 02                	jge    c001c8de <SoundCard::getSamples32(int, int*)+0x4c>
c001c8dc:	89 c6                	mov    esi,eax
c001c8de:	47                   	inc    edi
c001c8df:	83 ff 20             	cmp    edi,0x20
c001c8e2:	75 d4                	jne    c001c8b8 <SoundCard::getSamples32(int, int*)+0x26>
c001c8e4:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001c8ea:	85 f6                	test   esi,esi
c001c8ec:	75 0f                	jne    c001c8fd <SoundCard::getSamples32(int, int*)+0x6b>
c001c8ee:	84 c0                	test   al,al
c001c8f0:	74 1b                	je     c001c90d <SoundCard::getSamples32(int, int*)+0x7b>
c001c8f2:	83 ec 0c             	sub    esp,0xc
c001c8f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c8f7:	53                   	push   ebx
c001c8f8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001c8fb:	eb 0d                	jmp    c001c90a <SoundCard::getSamples32(int, int*)+0x78>
c001c8fd:	84 c0                	test   al,al
c001c8ff:	75 0c                	jne    c001c90d <SoundCard::getSamples32(int, int*)+0x7b>
c001c901:	83 ec 0c             	sub    esp,0xc
c001c904:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c906:	53                   	push   ebx
c001c907:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001c90a:	83 c4 10             	add    esp,0x10
c001c90d:	83 c4 0c             	add    esp,0xc
c001c910:	89 f0                	mov    eax,esi
c001c912:	5b                   	pop    ebx
c001c913:	5e                   	pop    esi
c001c914:	5f                   	pop    edi
c001c915:	5d                   	pop    ebp
c001c916:	c3                   	ret    
c001c917:	90                   	nop

c001c918 <SoundCard::addChannel(SoundPort*)>:
c001c918:	56                   	push   esi
c001c919:	53                   	push   ebx
c001c91a:	53                   	push   ebx
c001c91b:	31 db                	xor    ebx,ebx
c001c91d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c921:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001c929:	74 27                	je     c001c952 <SoundCard::addChannel(SoundPort*)+0x3a>
c001c92b:	43                   	inc    ebx
c001c92c:	83 fb 20             	cmp    ebx,0x20
c001c92f:	75 f0                	jne    c001c921 <SoundCard::addChannel(SoundPort*)+0x9>
c001c931:	83 ec 0c             	sub    esp,0xc
c001c934:	83 cb ff             	or     ebx,0xffffffff
c001c937:	68 2d 51 02 c0       	push   0xc002512d
c001c93c:	e8 38 03 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001c941:	c7 04 24 26 51 02 c0 	mov    DWORD PTR [esp],0xc0025126
c001c948:	e8 ba 66 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c001c94d:	83 c4 10             	add    esp,0x10
c001c950:	eb 1b                	jmp    c001c96d <SoundCard::addChannel(SoundPort*)+0x55>
c001c952:	51                   	push   ecx
c001c953:	51                   	push   ecx
c001c954:	53                   	push   ebx
c001c955:	68 45 51 02 c0       	push   0xc0025145
c001c95a:	e8 1a 03 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001c95f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c963:	83 c4 10             	add    esp,0x10
c001c966:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001c96d:	89 d8                	mov    eax,ebx
c001c96f:	5a                   	pop    edx
c001c970:	5b                   	pop    ebx
c001c971:	5e                   	pop    esi
c001c972:	c3                   	ret    
c001c973:	90                   	nop

c001c974 <SoundCard::removeChannel(int)>:
c001c974:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c978:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c97c:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001c987:	c3                   	ret    

c001c988 <SoundPort::SoundPort(int, int, int, int)>:
c001c988:	83 ec 0c             	sub    esp,0xc
c001c98b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c98f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c99a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c99e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c9a6:	89 10                	mov    DWORD PTR [eax],edx
c001c9a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9ac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c9b0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c9b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c9bb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c9be:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001c9c3:	75 13                	jne    c001c9d8 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001c9c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9c9:	8b 00                	mov    eax,DWORD PTR [eax]
c001c9cb:	05 a0 0f 00 00       	add    eax,0xfa0
c001c9d0:	01 c0                	add    eax,eax
c001c9d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c9d6:	66 90                	xchg   ax,ax
c001c9d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9dc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c9e0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001c9e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9e7:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001c9ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c9f5:	c1 e0 02             	shl    eax,0x2
c001c9f8:	83 ec 0c             	sub    esp,0xc
c001c9fb:	50                   	push   eax
c001c9fc:	e8 6a cf fe ff       	call   c000996b <malloc>
c001ca01:	83 c4 10             	add    esp,0x10
c001ca04:	89 c2                	mov    edx,eax
c001ca06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca0a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001ca0d:	90                   	nop
c001ca0e:	83 c4 0c             	add    esp,0xc
c001ca11:	c3                   	ret    
c001ca12:	66 90                	xchg   ax,ax

c001ca14 <SoundPort::~SoundPort()>:
c001ca14:	83 ec 0c             	sub    esp,0xc
c001ca17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca1b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ca1e:	85 c0                	test   eax,eax
c001ca20:	74 1e                	je     c001ca40 <SoundPort::~SoundPort()+0x2c>
c001ca22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca26:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ca29:	83 ec 0c             	sub    esp,0xc
c001ca2c:	50                   	push   eax
c001ca2d:	e8 49 cf fe ff       	call   c000997b <free>
c001ca32:	83 c4 10             	add    esp,0x10
c001ca35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca39:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ca40:	90                   	nop
c001ca41:	83 c4 0c             	add    esp,0xc
c001ca44:	c3                   	ret    
c001ca45:	90                   	nop
c001ca46:	66 90                	xchg   ax,ax

c001ca48 <SoundPort::unpause()>:
c001ca48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca4c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001ca50:	c3                   	ret    
c001ca51:	90                   	nop
c001ca52:	66 90                	xchg   ax,ax

c001ca54 <SoundPort::pause()>:
c001ca54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca58:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001ca5c:	c3                   	ret    
c001ca5d:	90                   	nop
c001ca5e:	66 90                	xchg   ax,ax

c001ca60 <SoundPort::getBufferUsed()>:
c001ca60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca64:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ca67:	c3                   	ret    

c001ca68 <SoundPort::getBufferSize()>:
c001ca68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca6c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ca6f:	c3                   	ret    

c001ca70 <SoundPort::buffer16(short*, int)>:
c001ca70:	55                   	push   ebp
c001ca71:	57                   	push   edi
c001ca72:	56                   	push   esi
c001ca73:	53                   	push   ebx
c001ca74:	83 ec 1c             	sub    esp,0x1c
c001ca77:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ca7b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001ca7f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001ca82:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001ca85:	0f 84 85 00 00 00    	je     c001cb10 <SoundPort::buffer16(short*, int)+0xa0>
c001ca8b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001ca8f:	85 c9                	test   ecx,ecx
c001ca91:	7e 7d                	jle    c001cb10 <SoundPort::buffer16(short*, int)+0xa0>
c001ca93:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001ca97:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001ca9a:	c1 e1 0f             	shl    ecx,0xf
c001ca9d:	8d 70 01             	lea    esi,[eax+0x1]
c001caa0:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001caa3:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001caa6:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001caa9:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001caac:	74 6e                	je     c001cb1c <SoundPort::buffer16(short*, int)+0xac>
c001caae:	31 f6                	xor    esi,esi
c001cab0:	eb 22                	jmp    c001cad4 <SoundPort::buffer16(short*, int)+0x64>
c001cab2:	66 90                	xchg   ax,ax
c001cab4:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001cab9:	8d 79 01             	lea    edi,[ecx+0x1]
c001cabc:	c1 e3 0f             	shl    ebx,0xf
c001cabf:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001cac2:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001cac5:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001cac8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cacb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cace:	74 1c                	je     c001caec <SoundPort::buffer16(short*, int)+0x7c>
c001cad0:	89 c6                	mov    esi,eax
c001cad2:	66 90                	xchg   ax,ax
c001cad4:	8d 46 01             	lea    eax,[esi+0x1]
c001cad7:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001cadb:	75 d7                	jne    c001cab4 <SoundPort::buffer16(short*, int)+0x44>
c001cadd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cae1:	83 c4 1c             	add    esp,0x1c
c001cae4:	5b                   	pop    ebx
c001cae5:	5e                   	pop    esi
c001cae6:	5f                   	pop    edi
c001cae7:	5d                   	pop    ebp
c001cae8:	c3                   	ret    
c001cae9:	8d 76 00             	lea    esi,[esi+0x0]
c001caec:	8d 46 02             	lea    eax,[esi+0x2]
c001caef:	90                   	nop
c001caf0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001caf4:	83 ec 0c             	sub    esp,0xc
c001caf7:	68 98 51 02 c0       	push   0xc0025198
c001cafc:	e8 78 01 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001cb01:	83 c4 10             	add    esp,0x10
c001cb04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb08:	83 c4 1c             	add    esp,0x1c
c001cb0b:	5b                   	pop    ebx
c001cb0c:	5e                   	pop    esi
c001cb0d:	5f                   	pop    edi
c001cb0e:	5d                   	pop    ebp
c001cb0f:	c3                   	ret    
c001cb10:	83 c4 1c             	add    esp,0x1c
c001cb13:	31 c0                	xor    eax,eax
c001cb15:	5b                   	pop    ebx
c001cb16:	5e                   	pop    esi
c001cb17:	5f                   	pop    edi
c001cb18:	5d                   	pop    ebp
c001cb19:	c3                   	ret    
c001cb1a:	66 90                	xchg   ax,ax
c001cb1c:	b8 01 00 00 00       	mov    eax,0x1
c001cb21:	eb cd                	jmp    c001caf0 <SoundPort::buffer16(short*, int)+0x80>
c001cb23:	90                   	nop

c001cb24 <SoundPort::buffer32(int*, int)>:
c001cb24:	55                   	push   ebp
c001cb25:	57                   	push   edi
c001cb26:	56                   	push   esi
c001cb27:	53                   	push   ebx
c001cb28:	83 ec 1c             	sub    esp,0x1c
c001cb2b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cb2f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cb33:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cb36:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001cb3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cb3e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cb41:	74 79                	je     c001cbbc <SoundPort::buffer32(int*, int)+0x98>
c001cb43:	85 c0                	test   eax,eax
c001cb45:	7e 75                	jle    c001cbbc <SoundPort::buffer32(int*, int)+0x98>
c001cb47:	8d 71 01             	lea    esi,[ecx+0x1]
c001cb4a:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001cb4d:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001cb50:	8b 37                	mov    esi,DWORD PTR [edi]
c001cb52:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001cb55:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cb58:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cb5b:	74 6b                	je     c001cbc8 <SoundPort::buffer32(int*, int)+0xa4>
c001cb5d:	31 f6                	xor    esi,esi
c001cb5f:	eb 1f                	jmp    c001cb80 <SoundPort::buffer32(int*, int)+0x5c>
c001cb61:	8d 76 00             	lea    esi,[esi+0x0]
c001cb64:	8d 69 01             	lea    ebp,[ecx+0x1]
c001cb67:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001cb6a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001cb6d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001cb70:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001cb74:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cb77:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cb7a:	74 1c                	je     c001cb98 <SoundPort::buffer32(int*, int)+0x74>
c001cb7c:	89 de                	mov    esi,ebx
c001cb7e:	66 90                	xchg   ax,ax
c001cb80:	8d 5e 01             	lea    ebx,[esi+0x1]
c001cb83:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001cb87:	75 db                	jne    c001cb64 <SoundPort::buffer32(int*, int)+0x40>
c001cb89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb8d:	83 c4 1c             	add    esp,0x1c
c001cb90:	5b                   	pop    ebx
c001cb91:	5e                   	pop    esi
c001cb92:	5f                   	pop    edi
c001cb93:	5d                   	pop    ebp
c001cb94:	c3                   	ret    
c001cb95:	8d 76 00             	lea    esi,[esi+0x0]
c001cb98:	8d 46 02             	lea    eax,[esi+0x2]
c001cb9b:	90                   	nop
c001cb9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cba0:	83 ec 0c             	sub    esp,0xc
c001cba3:	68 b3 51 02 c0       	push   0xc00251b3
c001cba8:	e8 cc 00 ff ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001cbad:	83 c4 10             	add    esp,0x10
c001cbb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbb4:	83 c4 1c             	add    esp,0x1c
c001cbb7:	5b                   	pop    ebx
c001cbb8:	5e                   	pop    esi
c001cbb9:	5f                   	pop    edi
c001cbba:	5d                   	pop    ebp
c001cbbb:	c3                   	ret    
c001cbbc:	83 c4 1c             	add    esp,0x1c
c001cbbf:	31 c0                	xor    eax,eax
c001cbc1:	5b                   	pop    ebx
c001cbc2:	5e                   	pop    esi
c001cbc3:	5f                   	pop    edi
c001cbc4:	5d                   	pop    ebp
c001cbc5:	c3                   	ret    
c001cbc6:	66 90                	xchg   ax,ax
c001cbc8:	b8 01 00 00 00       	mov    eax,0x1
c001cbcd:	eb cd                	jmp    c001cb9c <SoundPort::buffer32(int*, int)+0x78>
c001cbcf:	90                   	nop

c001cbd0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001cbd0:	57                   	push   edi
c001cbd1:	56                   	push   esi
c001cbd2:	53                   	push   ebx
c001cbd3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cbd7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001cbdb:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001cbe1:	39 03                	cmp    DWORD PTR [ebx],eax
c001cbe3:	74 13                	je     c001cbf8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001cbe5:	83 ec 0c             	sub    esp,0xc
c001cbe8:	68 08 52 02 c0       	push   0xc0025208
c001cbed:	e8 15 64 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c001cbf2:	83 c4 10             	add    esp,0x10
c001cbf5:	8d 76 00             	lea    esi,[esi+0x0]
c001cbf8:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001cbfe:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001cc01:	74 11                	je     c001cc14 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001cc03:	83 ec 0c             	sub    esp,0xc
c001cc06:	68 ce 51 02 c0       	push   0xc00251ce
c001cc0b:	e8 f7 63 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c001cc10:	83 c4 10             	add    esp,0x10
c001cc13:	90                   	nop
c001cc14:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001cc1a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001cc1d:	74 11                	je     c001cc30 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001cc1f:	83 ec 0c             	sub    esp,0xc
c001cc22:	68 ce 51 02 c0       	push   0xc00251ce
c001cc27:	e8 db 63 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c001cc2c:	83 c4 10             	add    esp,0x10
c001cc2f:	90                   	nop
c001cc30:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cc33:	89 c6                	mov    esi,eax
c001cc35:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001cc39:	7e 05                	jle    c001cc40 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001cc3b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001cc3f:	90                   	nop
c001cc40:	85 f6                	test   esi,esi
c001cc42:	7e 30                	jle    c001cc74 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001cc44:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cc48:	8d 3c 36             	lea    edi,[esi+esi*1]
c001cc4b:	31 c9                	xor    ecx,ecx
c001cc4d:	01 d7                	add    edi,edx
c001cc4f:	90                   	nop
c001cc50:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001cc53:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001cc56:	85 c0                	test   eax,eax
c001cc58:	79 06                	jns    c001cc60 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001cc5a:	05 ff 7f 00 00       	add    eax,0x7fff
c001cc5f:	90                   	nop
c001cc60:	c1 f8 0f             	sar    eax,0xf
c001cc63:	83 c1 04             	add    ecx,0x4
c001cc66:	66 01 02             	add    WORD PTR [edx],ax
c001cc69:	83 c2 02             	add    edx,0x2
c001cc6c:	39 d7                	cmp    edi,edx
c001cc6e:	75 e0                	jne    c001cc50 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001cc70:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cc73:	90                   	nop
c001cc74:	56                   	push   esi
c001cc75:	89 c2                	mov    edx,eax
c001cc77:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001cc7e:	29 f2                	sub    edx,esi
c001cc80:	52                   	push   edx
c001cc81:	50                   	push   eax
c001cc82:	68 28 52 02 c0       	push   0xc0025228
c001cc87:	e8 ed ff fe ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001cc8c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001cc8f:	50                   	push   eax
c001cc90:	01 f8                	add    eax,edi
c001cc92:	50                   	push   eax
c001cc93:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cc96:	29 f0                	sub    eax,esi
c001cc98:	c1 e0 02             	shl    eax,0x2
c001cc9b:	50                   	push   eax
c001cc9c:	68 58 52 02 c0       	push   0xc0025258
c001cca1:	e8 d3 ff fe ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001cca6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001cca9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ccac:	83 c4 1c             	add    esp,0x1c
c001ccaf:	01 d7                	add    edi,edx
c001ccb1:	29 f0                	sub    eax,esi
c001ccb3:	c1 e0 02             	shl    eax,0x2
c001ccb6:	50                   	push   eax
c001ccb7:	57                   	push   edi
c001ccb8:	52                   	push   edx
c001ccb9:	e8 f6 38 fe ff       	call   c00005b4 <memmove>
c001ccbe:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001ccc1:	83 c4 10             	add    esp,0x10
c001ccc4:	89 f0                	mov    eax,esi
c001ccc6:	5b                   	pop    ebx
c001ccc7:	5e                   	pop    esi
c001ccc8:	5f                   	pop    edi
c001ccc9:	c3                   	ret    
c001ccca:	66 90                	xchg   ax,ax

c001cccc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001cccc:	57                   	push   edi
c001cccd:	56                   	push   esi
c001ccce:	53                   	push   ebx
c001cccf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ccd3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ccd7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ccdb:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001cce1:	39 06                	cmp    DWORD PTR [esi],eax
c001cce3:	74 13                	je     c001ccf8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001cce5:	83 ec 0c             	sub    esp,0xc
c001cce8:	68 7c 52 02 c0       	push   0xc002527c
c001cced:	e8 15 63 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c001ccf2:	83 c4 10             	add    esp,0x10
c001ccf5:	8d 76 00             	lea    esi,[esi+0x0]
c001ccf8:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001ccfe:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001cd01:	74 11                	je     c001cd14 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001cd03:	83 ec 0c             	sub    esp,0xc
c001cd06:	68 ea 51 02 c0       	push   0xc00251ea
c001cd0b:	e8 f7 62 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c001cd10:	83 c4 10             	add    esp,0x10
c001cd13:	90                   	nop
c001cd14:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001cd1a:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001cd1d:	74 11                	je     c001cd30 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001cd1f:	83 ec 0c             	sub    esp,0xc
c001cd22:	68 ea 51 02 c0       	push   0xc00251ea
c001cd27:	e8 db 62 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c001cd2c:	83 c4 10             	add    esp,0x10
c001cd2f:	90                   	nop
c001cd30:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001cd33:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001cd37:	7e 07                	jle    c001cd40 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001cd39:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cd3d:	8d 76 00             	lea    esi,[esi+0x0]
c001cd40:	85 ff                	test   edi,edi
c001cd42:	7e 1c                	jle    c001cd60 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001cd44:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001cd4b:	31 c0                	xor    eax,eax
c001cd4d:	8d 76 00             	lea    esi,[esi+0x0]
c001cd50:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001cd53:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001cd56:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001cd59:	83 c0 04             	add    eax,0x4
c001cd5c:	39 c1                	cmp    ecx,eax
c001cd5e:	75 f0                	jne    c001cd50 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001cd60:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001cd63:	50                   	push   eax
c001cd64:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cd67:	29 f8                	sub    eax,edi
c001cd69:	c1 e0 02             	shl    eax,0x2
c001cd6c:	50                   	push   eax
c001cd6d:	8d 04 ba             	lea    eax,[edx+edi*4]
c001cd70:	50                   	push   eax
c001cd71:	52                   	push   edx
c001cd72:	e8 3d 38 fe ff       	call   c00005b4 <memmove>
c001cd77:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001cd7a:	83 c4 10             	add    esp,0x10
c001cd7d:	89 f8                	mov    eax,edi
c001cd7f:	5b                   	pop    ebx
c001cd80:	5e                   	pop    esi
c001cd81:	5f                   	pop    edi
c001cd82:	c3                   	ret    
c001cd83:	90                   	nop

c001cd84 <PCI::open(int, int, void*)>:
c001cd84:	83 ec 18             	sub    esp,0x18
c001cd87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cd8b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cd8f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001cd95:	8b 10                	mov    edx,DWORD PTR [eax]
c001cd97:	50                   	push   eax
c001cd98:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001cd9b:	31 c0                	xor    eax,eax
c001cd9d:	83 c4 1c             	add    esp,0x1c
c001cda0:	c3                   	ret    
c001cda1:	90                   	nop

c001cda2 <PCI::close(int, int, void*)>:
c001cda2:	31 c0                	xor    eax,eax
c001cda4:	c3                   	ret    
c001cda5:	90                   	nop

c001cda6 <PCI::PCI()>:
c001cda6:	83 ec 0c             	sub    esp,0xc
c001cda9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdad:	83 ec 08             	sub    esp,0x8
c001cdb0:	68 9b 52 02 c0       	push   0xc002529b
c001cdb5:	50                   	push   eax
c001cdb6:	e8 95 0c ff ff       	call   c000da50 <Bus::Bus(char const*)>
c001cdbb:	83 c4 10             	add    esp,0x10
c001cdbe:	ba 70 54 02 c0       	mov    edx,0xc0025470
c001cdc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdc7:	89 10                	mov    DWORD PTR [eax],edx
c001cdc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdcd:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001cdd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cddb:	a3 e0 a5 02 c0       	mov    ds:0xc002a5e0,eax
c001cde0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cde4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cdea:	0f b6 d0             	movzx  edx,al
c001cded:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdf1:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001cdf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdfc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ce02:	0f b6 d0             	movzx  edx,al
c001ce05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce09:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001ce0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce12:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ce18:	8d 50 01             	lea    edx,[eax+0x1]
c001ce1b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ce1f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ce25:	0f b6 d0             	movzx  edx,al
c001ce28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce2c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ce30:	83 c9 c0             	or     ecx,0xffffffc0
c001ce33:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ce37:	90                   	nop
c001ce38:	83 c4 0c             	add    esp,0xc
c001ce3b:	c3                   	ret    

c001ce3c <PCI::readBAR8(unsigned int, int)>:
c001ce3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ce40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ce44:	f6 c2 01             	test   dl,0x1
c001ce47:	74 07                	je     c001ce50 <PCI::readBAR8(unsigned int, int)+0x14>
c001ce49:	83 e2 fc             	and    edx,0xfffffffc
c001ce4c:	01 c2                	add    edx,eax
c001ce4e:	ec                   	in     al,dx
c001ce4f:	c3                   	ret    
c001ce50:	83 e2 f0             	and    edx,0xfffffff0
c001ce53:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001ce56:	c3                   	ret    
c001ce57:	90                   	nop

c001ce58 <PCI::readBAR16(unsigned int, int)>:
c001ce58:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ce5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ce60:	f6 c2 01             	test   dl,0x1
c001ce63:	74 08                	je     c001ce6d <PCI::readBAR16(unsigned int, int)+0x15>
c001ce65:	83 e2 fc             	and    edx,0xfffffffc
c001ce68:	01 c2                	add    edx,eax
c001ce6a:	66 ed                	in     ax,dx
c001ce6c:	c3                   	ret    
c001ce6d:	83 e2 f0             	and    edx,0xfffffff0
c001ce70:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001ce74:	c3                   	ret    
c001ce75:	90                   	nop

c001ce76 <PCI::readBAR32(unsigned int, int)>:
c001ce76:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ce7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ce7e:	f6 c2 01             	test   dl,0x1
c001ce81:	74 07                	je     c001ce8a <PCI::readBAR32(unsigned int, int)+0x14>
c001ce83:	83 e2 fc             	and    edx,0xfffffffc
c001ce86:	01 c2                	add    edx,eax
c001ce88:	ed                   	in     eax,dx
c001ce89:	c3                   	ret    
c001ce8a:	83 e2 f0             	and    edx,0xfffffff0
c001ce8d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001ce90:	c3                   	ret    
c001ce91:	90                   	nop

c001ce92 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001ce92:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ce96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ce9a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ce9e:	f6 c2 01             	test   dl,0x1
c001cea1:	74 07                	je     c001ceaa <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001cea3:	83 e2 fc             	and    edx,0xfffffffc
c001cea6:	01 ca                	add    edx,ecx
c001cea8:	ee                   	out    dx,al
c001cea9:	c3                   	ret    
c001ceaa:	83 e2 f0             	and    edx,0xfffffff0
c001cead:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001ceb0:	c3                   	ret    
c001ceb1:	90                   	nop

c001ceb2 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001ceb2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ceb6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ceba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cebe:	f6 c2 01             	test   dl,0x1
c001cec1:	74 08                	je     c001cecb <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001cec3:	83 e2 fc             	and    edx,0xfffffffc
c001cec6:	01 ca                	add    edx,ecx
c001cec8:	66 ef                	out    dx,ax
c001ceca:	c3                   	ret    
c001cecb:	83 e2 f0             	and    edx,0xfffffff0
c001cece:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001ced2:	c3                   	ret    
c001ced3:	90                   	nop

c001ced4 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001ced4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ced8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cedc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cee0:	f6 c2 01             	test   dl,0x1
c001cee3:	74 07                	je     c001ceec <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001cee5:	83 e2 fc             	and    edx,0xfffffffc
c001cee8:	01 ca                	add    edx,ecx
c001ceea:	ef                   	out    dx,eax
c001ceeb:	c3                   	ret    
c001ceec:	83 e2 f0             	and    edx,0xfffffff0
c001ceef:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001cef2:	c3                   	ret    
c001cef3:	90                   	nop

c001cef4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cef4:	55                   	push   ebp
c001cef5:	57                   	push   edi
c001cef6:	56                   	push   esi
c001cef7:	53                   	push   ebx
c001cef8:	83 ec 0c             	sub    esp,0xc
c001cefb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001ceff:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001cf03:	89 f0                	mov    eax,esi
c001cf05:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001cf09:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001cf0d:	3c 07                	cmp    al,0x7
c001cf0f:	76 10                	jbe    c001cf21 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001cf11:	83 ec 0c             	sub    esp,0xc
c001cf14:	68 a3 52 02 c0       	push   0xc00252a3
c001cf19:	e8 e9 60 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c001cf1e:	83 c4 10             	add    esp,0x10
c001cf21:	80 fb 0f             	cmp    bl,0xf
c001cf24:	76 10                	jbe    c001cf36 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001cf26:	83 ec 0c             	sub    esp,0xc
c001cf29:	68 d3 52 02 c0       	push   0xc00252d3
c001cf2e:	e8 d4 60 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c001cf33:	83 c4 10             	add    esp,0x10
c001cf36:	8d 04 36             	lea    eax,[esi+esi*1]
c001cf39:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cf3e:	83 c8 f0             	or     eax,0xfffffff0
c001cf41:	ee                   	out    dx,al
c001cf42:	ba fa 0c 00 00       	mov    edx,0xcfa
c001cf47:	89 e8                	mov    eax,ebp
c001cf49:	ee                   	out    dx,al
c001cf4a:	83 c4 0c             	add    esp,0xc
c001cf4d:	89 d8                	mov    eax,ebx
c001cf4f:	66 81 e7 fc 00       	and    di,0xfc
c001cf54:	5b                   	pop    ebx
c001cf55:	c1 e0 08             	shl    eax,0x8
c001cf58:	5e                   	pop    esi
c001cf59:	09 f8                	or     eax,edi
c001cf5b:	5f                   	pop    edi
c001cf5c:	66 0d 00 c0          	or     ax,0xc000
c001cf60:	5d                   	pop    ebp
c001cf61:	c3                   	ret    

c001cf62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cf62:	57                   	push   edi
c001cf63:	56                   	push   esi
c001cf64:	53                   	push   ebx
c001cf65:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cf69:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cf6d:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001cf73:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cf77:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cf7b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cf7f:	83 ff 01             	cmp    edi,0x1
c001cf82:	75 3e                	jne    c001cfc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001cf84:	89 de                	mov    esi,ebx
c001cf86:	0f b6 c0             	movzx  eax,al
c001cf89:	81 e6 fc 00 00 00    	and    esi,0xfc
c001cf8f:	c1 e0 10             	shl    eax,0x10
c001cf92:	0f b6 c9             	movzx  ecx,cl
c001cf95:	09 f0                	or     eax,esi
c001cf97:	c1 e1 08             	shl    ecx,0x8
c001cf9a:	0f b6 d2             	movzx  edx,dl
c001cf9d:	09 c8                	or     eax,ecx
c001cf9f:	c1 e2 0b             	shl    edx,0xb
c001cfa2:	09 d0                	or     eax,edx
c001cfa4:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cfa9:	0d 00 00 00 80       	or     eax,0x80000000
c001cfae:	ef                   	out    dx,eax
c001cfaf:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cfb4:	ed                   	in     eax,dx
c001cfb5:	83 e3 02             	and    ebx,0x2
c001cfb8:	0f b6 cb             	movzx  ecx,bl
c001cfbb:	c1 e1 03             	shl    ecx,0x3
c001cfbe:	d3 e8                	shr    eax,cl
c001cfc0:	eb 43                	jmp    c001d005 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001cfc2:	83 ff 02             	cmp    edi,0x2
c001cfc5:	75 2c                	jne    c001cff3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001cfc7:	83 ec 0c             	sub    esp,0xc
c001cfca:	0f b6 c9             	movzx  ecx,cl
c001cfcd:	0f b6 d2             	movzx  edx,dl
c001cfd0:	0f b6 fb             	movzx  edi,bl
c001cfd3:	0f b6 c0             	movzx  eax,al
c001cfd6:	57                   	push   edi
c001cfd7:	51                   	push   ecx
c001cfd8:	52                   	push   edx
c001cfd9:	50                   	push   eax
c001cfda:	56                   	push   esi
c001cfdb:	e8 14 ff ff ff       	call   c001cef4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cfe0:	89 c2                	mov    edx,eax
c001cfe2:	ed                   	in     eax,dx
c001cfe3:	83 e3 02             	and    ebx,0x2
c001cfe6:	83 c4 20             	add    esp,0x20
c001cfe9:	0f b6 cb             	movzx  ecx,bl
c001cfec:	c1 e1 03             	shl    ecx,0x3
c001cfef:	d3 e8                	shr    eax,cl
c001cff1:	eb 12                	jmp    c001d005 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001cff3:	83 ec 0c             	sub    esp,0xc
c001cff6:	68 03 53 02 c0       	push   0xc0025303
c001cffb:	e8 07 60 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c001d000:	83 c4 10             	add    esp,0x10
c001d003:	31 c0                	xor    eax,eax
c001d005:	5b                   	pop    ebx
c001d006:	5e                   	pop    esi
c001d007:	5f                   	pop    edi
c001d008:	c3                   	ret    
c001d009:	90                   	nop

c001d00a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001d00a:	83 ec 18             	sub    esp,0x18
c001d00d:	6a 00                	push   0x0
c001d00f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d014:	50                   	push   eax
c001d015:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d01a:	50                   	push   eax
c001d01b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d020:	50                   	push   eax
c001d021:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d025:	e8 38 ff ff ff       	call   c001cf62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d02a:	83 c4 2c             	add    esp,0x2c
c001d02d:	c3                   	ret    

c001d02e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001d02e:	83 ec 18             	sub    esp,0x18
c001d031:	6a 0e                	push   0xe
c001d033:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d038:	50                   	push   eax
c001d039:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d03e:	50                   	push   eax
c001d03f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d044:	50                   	push   eax
c001d045:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d049:	e8 14 ff ff ff       	call   c001cf62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d04e:	83 c4 2c             	add    esp,0x2c
c001d051:	0f b6 c0             	movzx  eax,al
c001d054:	c3                   	ret    
c001d055:	90                   	nop

c001d056 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001d056:	55                   	push   ebp
c001d057:	57                   	push   edi
c001d058:	56                   	push   esi
c001d059:	53                   	push   ebx
c001d05a:	83 ec 18             	sub    esp,0x18
c001d05d:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001d062:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001d067:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001d06c:	6a 0a                	push   0xa
c001d06e:	56                   	push   esi
c001d06f:	55                   	push   ebp
c001d070:	57                   	push   edi
c001d071:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d075:	e8 e8 fe ff ff       	call   c001cf62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d07a:	83 c4 14             	add    esp,0x14
c001d07d:	89 c3                	mov    ebx,eax
c001d07f:	6a 0a                	push   0xa
c001d081:	0f b6 db             	movzx  ebx,bl
c001d084:	56                   	push   esi
c001d085:	55                   	push   ebp
c001d086:	57                   	push   edi
c001d087:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d08b:	e8 d2 fe ff ff       	call   c001cf62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d090:	83 c4 2c             	add    esp,0x2c
c001d093:	25 00 ff 00 00       	and    eax,0xff00
c001d098:	09 d8                	or     eax,ebx
c001d09a:	5b                   	pop    ebx
c001d09b:	5e                   	pop    esi
c001d09c:	5f                   	pop    edi
c001d09d:	5d                   	pop    ebp
c001d09e:	c3                   	ret    
c001d09f:	90                   	nop

c001d0a0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001d0a0:	83 ec 18             	sub    esp,0x18
c001d0a3:	6a 08                	push   0x8
c001d0a5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d0aa:	50                   	push   eax
c001d0ab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d0b0:	50                   	push   eax
c001d0b1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d0b6:	50                   	push   eax
c001d0b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d0bb:	e8 a2 fe ff ff       	call   c001cf62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d0c0:	83 c4 2c             	add    esp,0x2c
c001d0c3:	0f b6 c4             	movzx  eax,ah
c001d0c6:	c3                   	ret    
c001d0c7:	90                   	nop

c001d0c8 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001d0c8:	83 ec 18             	sub    esp,0x18
c001d0cb:	6a 08                	push   0x8
c001d0cd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d0d2:	50                   	push   eax
c001d0d3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d0d8:	50                   	push   eax
c001d0d9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d0de:	50                   	push   eax
c001d0df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d0e3:	e8 7a fe ff ff       	call   c001cf62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d0e8:	83 c4 2c             	add    esp,0x2c
c001d0eb:	c3                   	ret    

c001d0ec <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001d0ec:	83 ec 18             	sub    esp,0x18
c001d0ef:	6a 3c                	push   0x3c
c001d0f1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d0f6:	50                   	push   eax
c001d0f7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d0fc:	50                   	push   eax
c001d0fd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d102:	50                   	push   eax
c001d103:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d107:	e8 56 fe ff ff       	call   c001cf62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d10c:	83 c4 2c             	add    esp,0x2c
c001d10f:	c3                   	ret    

c001d110 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001d110:	83 ec 18             	sub    esp,0x18
c001d113:	6a 18                	push   0x18
c001d115:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d11a:	50                   	push   eax
c001d11b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d120:	50                   	push   eax
c001d121:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d126:	50                   	push   eax
c001d127:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d12b:	e8 32 fe ff ff       	call   c001cf62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d130:	83 c4 2c             	add    esp,0x2c
c001d133:	0f b6 c4             	movzx  eax,ah
c001d136:	c3                   	ret    
c001d137:	90                   	nop

c001d138 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d138:	55                   	push   ebp
c001d139:	57                   	push   edi
c001d13a:	56                   	push   esi
c001d13b:	53                   	push   ebx
c001d13c:	83 ec 28             	sub    esp,0x28
c001d13f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d143:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001d148:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001d14d:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001d152:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001d159:	8d 43 12             	lea    eax,[ebx+0x12]
c001d15c:	83 c3 10             	add    ebx,0x10
c001d15f:	0f b6 c0             	movzx  eax,al
c001d162:	0f b6 db             	movzx  ebx,bl
c001d165:	50                   	push   eax
c001d166:	51                   	push   ecx
c001d167:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001d16b:	57                   	push   edi
c001d16c:	55                   	push   ebp
c001d16d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d171:	e8 ec fd ff ff       	call   c001cf62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d176:	83 c4 14             	add    esp,0x14
c001d179:	89 c6                	mov    esi,eax
c001d17b:	53                   	push   ebx
c001d17c:	c1 e6 10             	shl    esi,0x10
c001d17f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d183:	51                   	push   ecx
c001d184:	57                   	push   edi
c001d185:	55                   	push   ebp
c001d186:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d18a:	e8 d3 fd ff ff       	call   c001cf62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d18f:	83 c4 3c             	add    esp,0x3c
c001d192:	0f b7 c0             	movzx  eax,ax
c001d195:	5b                   	pop    ebx
c001d196:	09 f0                	or     eax,esi
c001d198:	5e                   	pop    esi
c001d199:	5f                   	pop    edi
c001d19a:	5d                   	pop    ebp
c001d19b:	c3                   	ret    

c001d19c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001d19c:	55                   	push   ebp
c001d19d:	57                   	push   edi
c001d19e:	56                   	push   esi
c001d19f:	53                   	push   ebx
c001d1a0:	83 ec 0c             	sub    esp,0xc
c001d1a3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d1a7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d1ab:	89 f5                	mov    ebp,esi
c001d1ad:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001d1b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d1b7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d1bb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d1bf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d1c3:	83 f9 01             	cmp    ecx,0x1
c001d1c6:	75 5d                	jne    c001d225 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001d1c8:	0f b6 c8             	movzx  ecx,al
c001d1cb:	0f b6 d2             	movzx  edx,dl
c001d1ce:	c1 e1 10             	shl    ecx,0x10
c001d1d1:	c1 e2 0b             	shl    edx,0xb
c001d1d4:	89 f0                	mov    eax,esi
c001d1d6:	25 fc 00 00 00       	and    eax,0xfc
c001d1db:	09 c1                	or     ecx,eax
c001d1dd:	89 e8                	mov    eax,ebp
c001d1df:	0f b6 c0             	movzx  eax,al
c001d1e2:	c1 e0 08             	shl    eax,0x8
c001d1e5:	09 c1                	or     ecx,eax
c001d1e7:	09 d1                	or     ecx,edx
c001d1e9:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d1ee:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001d1f4:	89 c8                	mov    eax,ecx
c001d1f6:	ef                   	out    dx,eax
c001d1f7:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d1fc:	ed                   	in     eax,dx
c001d1fd:	0f b7 db             	movzx  ebx,bx
c001d200:	83 e6 02             	and    esi,0x2
c001d203:	74 0a                	je     c001d20f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001d205:	0f b7 d0             	movzx  edx,ax
c001d208:	c1 e3 10             	shl    ebx,0x10
c001d20b:	09 d3                	or     ebx,edx
c001d20d:	eb 05                	jmp    c001d214 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001d20f:	66 31 c0             	xor    ax,ax
c001d212:	09 c3                	or     ebx,eax
c001d214:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d219:	89 c8                	mov    eax,ecx
c001d21b:	ef                   	out    dx,eax
c001d21c:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d221:	89 d8                	mov    eax,ebx
c001d223:	eb 41                	jmp    c001d266 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d225:	83 f9 02             	cmp    ecx,0x2
c001d228:	75 45                	jne    c001d26f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001d22a:	83 ec 0c             	sub    esp,0xc
c001d22d:	0f b6 d2             	movzx  edx,dl
c001d230:	89 f1                	mov    ecx,esi
c001d232:	0f b6 c0             	movzx  eax,al
c001d235:	0f b6 f1             	movzx  esi,cl
c001d238:	89 e9                	mov    ecx,ebp
c001d23a:	56                   	push   esi
c001d23b:	0f b6 c9             	movzx  ecx,cl
c001d23e:	51                   	push   ecx
c001d23f:	52                   	push   edx
c001d240:	50                   	push   eax
c001d241:	57                   	push   edi
c001d242:	e8 ad fc ff ff       	call   c001cef4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d247:	89 c2                	mov    edx,eax
c001d249:	ed                   	in     eax,dx
c001d24a:	83 c4 20             	add    esp,0x20
c001d24d:	0f b7 db             	movzx  ebx,bx
c001d250:	f6 c2 02             	test   dl,0x2
c001d253:	74 0c                	je     c001d261 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001d255:	0f b7 c8             	movzx  ecx,ax
c001d258:	89 d8                	mov    eax,ebx
c001d25a:	c1 e0 10             	shl    eax,0x10
c001d25d:	09 c8                	or     eax,ecx
c001d25f:	eb 05                	jmp    c001d266 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d261:	66 31 c0             	xor    ax,ax
c001d264:	09 d8                	or     eax,ebx
c001d266:	ef                   	out    dx,eax
c001d267:	83 c4 0c             	add    esp,0xc
c001d26a:	5b                   	pop    ebx
c001d26b:	5e                   	pop    esi
c001d26c:	5f                   	pop    edi
c001d26d:	5d                   	pop    ebp
c001d26e:	c3                   	ret    
c001d26f:	c7 44 24 20 03 53 02 c0 	mov    DWORD PTR [esp+0x20],0xc0025303
c001d277:	83 c4 0c             	add    esp,0xc
c001d27a:	5b                   	pop    ebx
c001d27b:	5e                   	pop    esi
c001d27c:	5f                   	pop    edi
c001d27d:	5d                   	pop    ebp
c001d27e:	e9 84 5d ff ff       	jmp    c0013007 <Krnl::panic(char const*)>
c001d283:	90                   	nop

c001d284 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001d284:	55                   	push   ebp
c001d285:	57                   	push   edi
c001d286:	56                   	push   esi
c001d287:	53                   	push   ebx
c001d288:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001d28e:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c001d295:	75 0f                	jne    c001d2a6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x22>
c001d297:	80 3d ec a5 02 c0 00 	cmp    BYTE PTR ds:0xc002a5ec,0x0
c001d29e:	0f 85 fa 00 00 00    	jne    c001d39e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001d2a4:	eb 2f                	jmp    c001d2d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x51>
c001d2a6:	83 ec 0c             	sub    esp,0xc
c001d2a9:	68 09 53 02 c0       	push   0xc0025309
c001d2ae:	e8 12 c7 fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c001d2b3:	83 c4 10             	add    esp,0x10
c001d2b6:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c001d2bd:	75 d8                	jne    c001d297 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001d2bf:	e4 60                	in     al,0x60
c001d2c1:	3c 1c                	cmp    al,0x1c
c001d2c3:	74 04                	je     c001d2c9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d2c5:	3c 5a                	cmp    al,0x5a
c001d2c7:	75 f6                	jne    c001d2bf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3b>
c001d2c9:	e4 60                	in     al,0x60
c001d2cb:	3c 5a                	cmp    al,0x5a
c001d2cd:	74 fa                	je     c001d2c9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d2cf:	3c 1c                	cmp    al,0x1c
c001d2d1:	74 f6                	je     c001d2c9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d2d3:	eb c2                	jmp    c001d297 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001d2d5:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c001d2dc:	0f 85 86 00 00 00    	jne    c001d368 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xe4>
c001d2e2:	83 ec 0c             	sub    esp,0xc
c001d2e5:	68 14 01 00 00       	push   0x114
c001d2ea:	e8 7c c6 fe ff       	call   c000996b <malloc>
c001d2ef:	83 c4 0c             	add    esp,0xc
c001d2f2:	89 c3                	mov    ebx,eax
c001d2f4:	ff 35 d0 9b 02 c0    	push   DWORD PTR ds:0xc0029bd0
c001d2fa:	68 23 53 02 c0       	push   0xc0025323
c001d2ff:	50                   	push   eax
c001d300:	e8 df fe fe ff       	call   c000d1e4 <File::File(char const*, Process*)>
c001d305:	5a                   	pop    edx
c001d306:	59                   	pop    ecx
c001d307:	6a 01                	push   0x1
c001d309:	53                   	push   ebx
c001d30a:	e8 af ff fe ff       	call   c000d2be <File::open(FileOpenMode)>
c001d30f:	83 c4 0c             	add    esp,0xc
c001d312:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001d316:	50                   	push   eax
c001d317:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d31b:	50                   	push   eax
c001d31c:	53                   	push   ebx
c001d31d:	e8 48 02 ff ff       	call   c000d56a <File::stat(unsigned long long*, bool*)>
c001d322:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d326:	40                   	inc    eax
c001d327:	89 04 24             	mov    DWORD PTR [esp],eax
c001d32a:	e8 3c c6 fe ff       	call   c000996b <malloc>
c001d32f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d333:	a3 e8 a5 02 c0       	mov    ds:0xc002a5e8,eax
c001d338:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001d33c:	5e                   	pop    esi
c001d33d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001d33f:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001d343:	51                   	push   ecx
c001d344:	50                   	push   eax
c001d345:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d349:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d34d:	53                   	push   ebx
c001d34e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001d351:	83 c4 14             	add    esp,0x14
c001d354:	53                   	push   ebx
c001d355:	e8 c2 ff fe ff       	call   c000d31c <File::close()>
c001d35a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d35e:	83 c4 10             	add    esp,0x10
c001d361:	a3 e4 a5 02 c0       	mov    ds:0xc002a5e4,eax
c001d366:	eb 36                	jmp    c001d39e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001d368:	83 ec 0c             	sub    esp,0xc
c001d36b:	68 3c 53 02 c0       	push   0xc002533c
c001d370:	e8 50 c6 fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c001d375:	83 c4 10             	add    esp,0x10
c001d378:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c001d37f:	0f 85 5d ff ff ff    	jne    c001d2e2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001d385:	e4 60                	in     al,0x60
c001d387:	3c 1c                	cmp    al,0x1c
c001d389:	74 04                	je     c001d38f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d38b:	3c 5a                	cmp    al,0x5a
c001d38d:	75 f6                	jne    c001d385 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x101>
c001d38f:	e4 60                	in     al,0x60
c001d391:	3c 5a                	cmp    al,0x5a
c001d393:	74 fa                	je     c001d38f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d395:	3c 1c                	cmp    al,0x1c
c001d397:	74 f6                	je     c001d38f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d399:	e9 44 ff ff ff       	jmp    c001d2e2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001d39e:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c001d3a5:	75 0b                	jne    c001d3b2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x12e>
c001d3a7:	31 f6                	xor    esi,esi
c001d3a9:	31 db                	xor    ebx,ebx
c001d3ab:	31 ed                	xor    ebp,ebp
c001d3ad:	e9 a3 01 00 00       	jmp    c001d555 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001d3b2:	83 ec 0c             	sub    esp,0xc
c001d3b5:	68 4e 53 02 c0       	push   0xc002534e
c001d3ba:	e8 06 c6 fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c001d3bf:	8b 15 a0 66 02 c0    	mov    edx,DWORD PTR ds:0xc00266a0
c001d3c5:	83 c4 10             	add    esp,0x10
c001d3c8:	f6 c2 80             	test   dl,0x80
c001d3cb:	74 0c                	je     c001d3d9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x155>
c001d3cd:	0f ba e2 0b          	bt     edx,0xb
c001d3d1:	72 1a                	jb     c001d3ed <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x169>
c001d3d3:	eb d2                	jmp    c001d3a7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001d3d5:	3c 5a                	cmp    al,0x5a
c001d3d7:	74 0c                	je     c001d3e5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001d3d9:	e4 60                	in     al,0x60
c001d3db:	3c 1c                	cmp    al,0x1c
c001d3dd:	75 f6                	jne    c001d3d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x151>
c001d3df:	eb 04                	jmp    c001d3e5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001d3e1:	3c 1c                	cmp    al,0x1c
c001d3e3:	75 e8                	jne    c001d3cd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x149>
c001d3e5:	e4 60                	in     al,0x60
c001d3e7:	3c 5a                	cmp    al,0x5a
c001d3e9:	74 fa                	je     c001d3e5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001d3eb:	eb f4                	jmp    c001d3e1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x15d>
c001d3ed:	83 ec 0c             	sub    esp,0xc
c001d3f0:	68 53 53 02 c0       	push   0xc0025353
c001d3f5:	e8 cb c5 fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c001d3fa:	83 c4 10             	add    esp,0x10
c001d3fd:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c001d404:	75 a1                	jne    c001d3a7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001d406:	e4 60                	in     al,0x60
c001d408:	3c 5a                	cmp    al,0x5a
c001d40a:	74 04                	je     c001d410 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d40c:	3c 1c                	cmp    al,0x1c
c001d40e:	75 f6                	jne    c001d406 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x182>
c001d410:	e4 60                	in     al,0x60
c001d412:	3c 5a                	cmp    al,0x5a
c001d414:	74 fa                	je     c001d410 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d416:	3c 1c                	cmp    al,0x1c
c001d418:	74 f6                	je     c001d410 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d41a:	eb 8b                	jmp    c001d3a7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001d41c:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c001d423:	0f 85 3d 01 00 00    	jne    c001d566 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2e2>
c001d429:	a1 e8 a5 02 c0       	mov    eax,ds:0xc002a5e8
c001d42e:	8d 7e 01             	lea    edi,[esi+0x1]
c001d431:	8a 04 30             	mov    al,BYTE PTR [eax+esi*1]
c001d434:	d4 40                	aam    0x40
c001d436:	d5 39                	aad    0x39
c001d438:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c001d43f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d443:	0f 85 53 01 00 00    	jne    c001d59c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x318>
c001d449:	8b 15 e8 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a5e8
c001d44f:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001d452:	d4 40                	aam    0x40
c001d454:	d5 39                	aad    0x39
c001d456:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d45a:	8a 44 32 03          	mov    al,BYTE PTR [edx+esi*1+0x3]
c001d45e:	d4 40                	aam    0x40
c001d460:	d5 39                	aad    0x39
c001d462:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001d466:	8a 44 32 04          	mov    al,BYTE PTR [edx+esi*1+0x4]
c001d46a:	d4 40                	aam    0x40
c001d46c:	d5 39                	aad    0x39
c001d46e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d472:	8a 44 32 06          	mov    al,BYTE PTR [edx+esi*1+0x6]
c001d476:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001d47a:	3c 56                	cmp    al,0x56
c001d47c:	74 49                	je     c001d4c7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x243>
c001d47e:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001d482:	d4 40                	aam    0x40
c001d484:	d5 39                	aad    0x39
c001d486:	8d 48 d0             	lea    ecx,[eax-0x30]
c001d489:	8a 44 32 07          	mov    al,BYTE PTR [edx+esi*1+0x7]
c001d48d:	0f b6 c9             	movzx  ecx,cl
c001d490:	c1 e1 04             	shl    ecx,0x4
c001d493:	d4 40                	aam    0x40
c001d495:	d5 39                	aad    0x39
c001d497:	83 e8 30             	sub    eax,0x30
c001d49a:	0f b6 c0             	movzx  eax,al
c001d49d:	09 c1                	or     ecx,eax
c001d49f:	8a 44 32 08          	mov    al,BYTE PTR [edx+esi*1+0x8]
c001d4a3:	c1 e1 04             	shl    ecx,0x4
c001d4a6:	d4 40                	aam    0x40
c001d4a8:	d5 39                	aad    0x39
c001d4aa:	83 e8 30             	sub    eax,0x30
c001d4ad:	0f b6 c0             	movzx  eax,al
c001d4b0:	09 c1                	or     ecx,eax
c001d4b2:	8a 44 32 09          	mov    al,BYTE PTR [edx+esi*1+0x9]
c001d4b6:	c1 e1 04             	shl    ecx,0x4
c001d4b9:	d4 40                	aam    0x40
c001d4bb:	d5 39                	aad    0x39
c001d4bd:	83 e8 30             	sub    eax,0x30
c001d4c0:	0f b6 c0             	movzx  eax,al
c001d4c3:	09 c8                	or     eax,ecx
c001d4c5:	89 c5                	mov    ebp,eax
c001d4c7:	8a 4c 32 0b          	mov    cl,BYTE PTR [edx+esi*1+0xb]
c001d4cb:	80 f9 44             	cmp    cl,0x44
c001d4ce:	74 47                	je     c001d517 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x293>
c001d4d0:	88 c8                	mov    al,cl
c001d4d2:	d4 40                	aam    0x40
c001d4d4:	d5 39                	aad    0x39
c001d4d6:	83 e8 30             	sub    eax,0x30
c001d4d9:	0f b6 f8             	movzx  edi,al
c001d4dc:	8a 44 32 0c          	mov    al,BYTE PTR [edx+esi*1+0xc]
c001d4e0:	c1 e7 04             	shl    edi,0x4
c001d4e3:	d4 40                	aam    0x40
c001d4e5:	d5 39                	aad    0x39
c001d4e7:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d4ea:	8a 44 32 0d          	mov    al,BYTE PTR [edx+esi*1+0xd]
c001d4ee:	0f b6 db             	movzx  ebx,bl
c001d4f1:	09 fb                	or     ebx,edi
c001d4f3:	c1 e3 04             	shl    ebx,0x4
c001d4f6:	d4 40                	aam    0x40
c001d4f8:	d5 39                	aad    0x39
c001d4fa:	83 e8 30             	sub    eax,0x30
c001d4fd:	0f b6 f8             	movzx  edi,al
c001d500:	8a 44 32 0e          	mov    al,BYTE PTR [edx+esi*1+0xe]
c001d504:	09 fb                	or     ebx,edi
c001d506:	89 df                	mov    edi,ebx
c001d508:	c1 e7 04             	shl    edi,0x4
c001d50b:	d4 40                	aam    0x40
c001d50d:	d5 39                	aad    0x39
c001d50f:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d512:	0f b6 db             	movzx  ebx,bl
c001d515:	09 fb                	or     ebx,edi
c001d517:	a1 e4 a5 02 c0       	mov    eax,ds:0xc002a5e4
c001d51c:	83 c6 10             	add    esi,0x10
c001d51f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d523:	8d 7c 24 20          	lea    edi,[esp+0x20]
c001d527:	8a 04 32             	mov    al,BYTE PTR [edx+esi*1]
c001d52a:	3c 0a                	cmp    al,0xa
c001d52c:	0f 85 a0 00 00 00    	jne    c001d5d2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x34e>
c001d532:	3c 0a                	cmp    al,0xa
c001d534:	0f 94 c0             	sete   al
c001d537:	0f b6 c0             	movzx  eax,al
c001d53a:	01 c6                	add    esi,eax
c001d53c:	80 7c 24 07 56       	cmp    BYTE PTR [esp+0x7],0x56
c001d541:	0f 84 a2 00 00 00    	je     c001d5e9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001d547:	66 39 ac 24 42 01 00 00 	cmp    WORD PTR [esp+0x142],bp
c001d54f:	0f 84 94 00 00 00    	je     c001d5e9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001d555:	39 35 e4 a5 02 c0    	cmp    DWORD PTR ds:0xc002a5e4,esi
c001d55b:	0f 8f bb fe ff ff    	jg     c001d41c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x198>
c001d561:	e9 e8 00 00 00       	jmp    c001d64e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3ca>
c001d566:	83 ec 0c             	sub    esp,0xc
c001d569:	68 5a 53 02 c0       	push   0xc002535a
c001d56e:	e8 52 c4 fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c001d573:	83 c4 10             	add    esp,0x10
c001d576:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c001d57d:	0f 85 a6 fe ff ff    	jne    c001d429 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001d583:	e4 60                	in     al,0x60
c001d585:	3c 5a                	cmp    al,0x5a
c001d587:	74 04                	je     c001d58d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001d589:	3c 1c                	cmp    al,0x1c
c001d58b:	75 f6                	jne    c001d583 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ff>
c001d58d:	e4 60                	in     al,0x60
c001d58f:	3c 5a                	cmp    al,0x5a
c001d591:	74 fa                	je     c001d58d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001d593:	3c 1c                	cmp    al,0x1c
c001d595:	74 f6                	je     c001d58d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001d597:	e9 8d fe ff ff       	jmp    c001d429 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001d59c:	83 ec 0c             	sub    esp,0xc
c001d59f:	68 62 53 02 c0       	push   0xc0025362
c001d5a4:	e8 1c c4 fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c001d5a9:	83 c4 10             	add    esp,0x10
c001d5ac:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c001d5b3:	0f 85 90 fe ff ff    	jne    c001d449 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001d5b9:	e4 60                	in     al,0x60
c001d5bb:	3c 5a                	cmp    al,0x5a
c001d5bd:	74 04                	je     c001d5c3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001d5bf:	3c 1c                	cmp    al,0x1c
c001d5c1:	75 f6                	jne    c001d5b9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x335>
c001d5c3:	e4 60                	in     al,0x60
c001d5c5:	3c 5a                	cmp    al,0x5a
c001d5c7:	74 fa                	je     c001d5c3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001d5c9:	3c 1c                	cmp    al,0x1c
c001d5cb:	74 f6                	je     c001d5c3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001d5cd:	e9 77 fe ff ff       	jmp    c001d449 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001d5d2:	47                   	inc    edi
c001d5d3:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001d5d7:	0f 84 55 ff ff ff    	je     c001d532 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ae>
c001d5dd:	46                   	inc    esi
c001d5de:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
c001d5e1:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001d5e4:	e9 3e ff ff ff       	jmp    c001d527 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a3>
c001d5e9:	80 f9 44             	cmp    cl,0x44
c001d5ec:	74 0e                	je     c001d5fc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x378>
c001d5ee:	66 39 9c 24 62 01 00 00 	cmp    WORD PTR [esp+0x162],bx
c001d5f6:	0f 85 59 ff ff ff    	jne    c001d555 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001d5fc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001d600:	8a 54 24 0d          	mov    dl,BYTE PTR [esp+0xd]
c001d604:	c1 e0 04             	shl    eax,0x4
c001d607:	83 ea 30             	sub    edx,0x30
c001d60a:	09 d0                	or     eax,edx
c001d60c:	38 84 24 40 01 00 00 	cmp    BYTE PTR [esp+0x140],al
c001d613:	0f 85 3c ff ff ff    	jne    c001d555 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001d619:	8a 54 24 0e          	mov    dl,BYTE PTR [esp+0xe]
c001d61d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d621:	c1 e2 04             	shl    edx,0x4
c001d624:	83 e8 30             	sub    eax,0x30
c001d627:	09 d0                	or     eax,edx
c001d629:	38 84 24 41 01 00 00 	cmp    BYTE PTR [esp+0x141],al
c001d630:	0f 85 1f ff ff ff    	jne    c001d555 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001d636:	50                   	push   eax
c001d637:	50                   	push   eax
c001d638:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d63c:	50                   	push   eax
c001d63d:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001d644:	e8 ef 30 fe ff       	call   c0000738 <strcpy>
c001d649:	83 c4 10             	add    esp,0x10
c001d64c:	eb 15                	jmp    c001d663 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3df>
c001d64e:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d655:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001d660:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001d663:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d66a:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d670:	5b                   	pop    ebx
c001d671:	5e                   	pop    esi
c001d672:	5f                   	pop    edi
c001d673:	5d                   	pop    ebp
c001d674:	c3                   	ret    
c001d675:	90                   	nop

c001d676 <PCI::checkBus(unsigned char)>:
c001d676:	56                   	push   esi
c001d677:	53                   	push   ebx
c001d678:	31 db                	xor    ebx,ebx
c001d67a:	51                   	push   ecx
c001d67b:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d680:	52                   	push   edx
c001d681:	53                   	push   ebx
c001d682:	43                   	inc    ebx
c001d683:	56                   	push   esi
c001d684:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d688:	e8 bf 07 00 00       	call   c001de4c <PCI::checkDevice(unsigned char, unsigned char)>
c001d68d:	83 c4 10             	add    esp,0x10
c001d690:	83 fb 20             	cmp    ebx,0x20
c001d693:	75 eb                	jne    c001d680 <PCI::checkBus(unsigned char)+0xa>
c001d695:	58                   	pop    eax
c001d696:	5b                   	pop    ebx
c001d697:	5e                   	pop    esi
c001d698:	c3                   	ret    
c001d699:	90                   	nop

c001d69a <PCI::foundDevice(PCIDeviceInfo)>:
c001d69a:	55                   	push   ebp
c001d69b:	57                   	push   edi
c001d69c:	56                   	push   esi
c001d69d:	53                   	push   ebx
c001d69e:	83 ec 1c             	sub    esp,0x1c
c001d6a1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d6a5:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001d6ab:	0f 84 20 04 00 00    	je     c001dad1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d6b1:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c001d6b8:	75 37                	jne    c001d6f1 <PCI::foundDevice(PCIDeviceInfo)+0x57>
c001d6ba:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001d6be:	66 81 f9 06 04       	cmp    cx,0x406
c001d6c3:	75 5b                	jne    c001d720 <PCI::foundDevice(PCIDeviceInfo)+0x86>
c001d6c5:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001d6ca:	50                   	push   eax
c001d6cb:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001d6d0:	50                   	push   eax
c001d6d1:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001d6d6:	50                   	push   eax
c001d6d7:	53                   	push   ebx
c001d6d8:	e8 33 fa ff ff       	call   c001d110 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001d6dd:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001d6e1:	0f b6 c0             	movzx  eax,al
c001d6e4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d6e8:	83 c4 2c             	add    esp,0x2c
c001d6eb:	5b                   	pop    ebx
c001d6ec:	5e                   	pop    esi
c001d6ed:	5f                   	pop    edi
c001d6ee:	5d                   	pop    ebp
c001d6ef:	eb 85                	jmp    c001d676 <PCI::checkBus(unsigned char)>
c001d6f1:	83 ec 0c             	sub    esp,0xc
c001d6f4:	68 6b 53 02 c0       	push   0xc002536b
c001d6f9:	e8 c7 c2 fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c001d6fe:	83 c4 10             	add    esp,0x10
c001d701:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c001d708:	75 b0                	jne    c001d6ba <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001d70a:	e4 60                	in     al,0x60
c001d70c:	3c 5a                	cmp    al,0x5a
c001d70e:	74 04                	je     c001d714 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001d710:	3c 1c                	cmp    al,0x1c
c001d712:	75 f6                	jne    c001d70a <PCI::foundDevice(PCIDeviceInfo)+0x70>
c001d714:	e4 60                	in     al,0x60
c001d716:	3c 5a                	cmp    al,0x5a
c001d718:	74 fa                	je     c001d714 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001d71a:	3c 1c                	cmp    al,0x1c
c001d71c:	74 f6                	je     c001d714 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001d71e:	eb 9a                	jmp    c001d6ba <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001d720:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001d726:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001d72a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d72e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d732:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001d736:	88 d0                	mov    al,dl
c001d738:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d73d:	74 3b                	je     c001d77a <PCI::foundDevice(PCIDeviceInfo)+0xe0>
c001d73f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d743:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001d746:	85 d2                	test   edx,edx
c001d748:	74 24                	je     c001d76e <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001d74a:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001d750:	31 ef                	xor    edi,ebp
c001d752:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001d758:	75 14                	jne    c001d76e <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001d75a:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001d760:	75 0c                	jne    c001d76e <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001d762:	38 82 38 01 00 00    	cmp    BYTE PTR [edx+0x138],al
c001d768:	0f 84 63 03 00 00    	je     c001dad1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d76e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d772:	8b 12                	mov    edx,DWORD PTR [edx]
c001d774:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d778:	eb be                	jmp    c001d738 <PCI::foundDevice(PCIDeviceInfo)+0x9e>
c001d77a:	66 81 f9 01 06       	cmp    cx,0x601
c001d77f:	0f 85 81 01 00 00    	jne    c001d906 <PCI::foundDevice(PCIDeviceInfo)+0x26c>
c001d785:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c001d78c:	75 25                	jne    c001d7b3 <PCI::foundDevice(PCIDeviceInfo)+0x119>
c001d78e:	83 ec 0c             	sub    esp,0xc
c001d791:	68 64 01 00 00       	push   0x164
c001d796:	e8 d0 c1 fe ff       	call   c000996b <malloc>
c001d79b:	89 04 24             	mov    DWORD PTR [esp],eax
c001d79e:	89 c5                	mov    ebp,eax
c001d7a0:	e8 d3 12 00 00       	call   c001ea78 <SATABus::SATABus()>
c001d7a5:	83 c4 10             	add    esp,0x10
c001d7a8:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c001d7af:	74 4a                	je     c001d7fb <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001d7b1:	eb 2f                	jmp    c001d7e2 <PCI::foundDevice(PCIDeviceInfo)+0x148>
c001d7b3:	83 ec 0c             	sub    esp,0xc
c001d7b6:	68 7b 53 02 c0       	push   0xc002537b
c001d7bb:	e8 05 c2 fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c001d7c0:	83 c4 10             	add    esp,0x10
c001d7c3:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c001d7ca:	75 c2                	jne    c001d78e <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001d7cc:	e4 60                	in     al,0x60
c001d7ce:	3c 1c                	cmp    al,0x1c
c001d7d0:	74 04                	je     c001d7d6 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001d7d2:	3c 5a                	cmp    al,0x5a
c001d7d4:	75 f6                	jne    c001d7cc <PCI::foundDevice(PCIDeviceInfo)+0x132>
c001d7d6:	e4 60                	in     al,0x60
c001d7d8:	3c 5a                	cmp    al,0x5a
c001d7da:	74 fa                	je     c001d7d6 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001d7dc:	3c 1c                	cmp    al,0x1c
c001d7de:	74 f6                	je     c001d7d6 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001d7e0:	eb ac                	jmp    c001d78e <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001d7e2:	83 ec 0c             	sub    esp,0xc
c001d7e5:	68 81 53 02 c0       	push   0xc0025381
c001d7ea:	e8 d6 c1 fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c001d7ef:	83 c4 10             	add    esp,0x10
c001d7f2:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c001d7f9:	74 1b                	je     c001d816 <PCI::foundDevice(PCIDeviceInfo)+0x17c>
c001d7fb:	50                   	push   eax
c001d7fc:	50                   	push   eax
c001d7fd:	55                   	push   ebp
c001d7fe:	53                   	push   ebx
c001d7ff:	e8 f2 08 ff ff       	call   c000e0f6 <Device::addChild(Device*)>
c001d804:	83 c4 10             	add    esp,0x10
c001d807:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c001d80e:	74 33                	je     c001d843 <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001d810:	eb 18                	jmp    c001d82a <PCI::foundDevice(PCIDeviceInfo)+0x190>
c001d812:	3c 1c                	cmp    al,0x1c
c001d814:	74 0c                	je     c001d822 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001d816:	e4 60                	in     al,0x60
c001d818:	3c 5a                	cmp    al,0x5a
c001d81a:	75 f6                	jne    c001d812 <PCI::foundDevice(PCIDeviceInfo)+0x178>
c001d81c:	eb 04                	jmp    c001d822 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001d81e:	3c 1c                	cmp    al,0x1c
c001d820:	75 d9                	jne    c001d7fb <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001d822:	e4 60                	in     al,0x60
c001d824:	3c 5a                	cmp    al,0x5a
c001d826:	74 fa                	je     c001d822 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001d828:	eb f4                	jmp    c001d81e <PCI::foundDevice(PCIDeviceInfo)+0x184>
c001d82a:	83 ec 0c             	sub    esp,0xc
c001d82d:	68 89 53 02 c0       	push   0xc0025389
c001d832:	e8 8e c1 fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c001d837:	83 c4 10             	add    esp,0x10
c001d83a:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c001d841:	74 29                	je     c001d86c <PCI::foundDevice(PCIDeviceInfo)+0x1d2>
c001d843:	83 ec 2c             	sub    esp,0x2c
c001d846:	b9 09 00 00 00       	mov    ecx,0x9
c001d84b:	8d 74 24 60          	lea    esi,[esp+0x60]
c001d84f:	fc                   	cld    
c001d850:	89 e7                	mov    edi,esp
c001d852:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d854:	55                   	push   ebp
c001d855:	e8 e2 07 ff ff       	call   c000e03c <Device::preOpenPCI(PCIDeviceInfo)>
c001d85a:	83 c4 30             	add    esp,0x30
c001d85d:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c001d864:	74 33                	je     c001d899 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001d866:	eb 18                	jmp    c001d880 <PCI::foundDevice(PCIDeviceInfo)+0x1e6>
c001d868:	3c 1c                	cmp    al,0x1c
c001d86a:	74 0c                	je     c001d878 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001d86c:	e4 60                	in     al,0x60
c001d86e:	3c 5a                	cmp    al,0x5a
c001d870:	75 f6                	jne    c001d868 <PCI::foundDevice(PCIDeviceInfo)+0x1ce>
c001d872:	eb 04                	jmp    c001d878 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001d874:	3c 1c                	cmp    al,0x1c
c001d876:	75 cb                	jne    c001d843 <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001d878:	e4 60                	in     al,0x60
c001d87a:	3c 5a                	cmp    al,0x5a
c001d87c:	74 fa                	je     c001d878 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001d87e:	eb f4                	jmp    c001d874 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001d880:	83 ec 0c             	sub    esp,0xc
c001d883:	68 91 53 02 c0       	push   0xc0025391
c001d888:	e8 38 c1 fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c001d88d:	83 c4 10             	add    esp,0x10
c001d890:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c001d897:	74 23                	je     c001d8bc <PCI::foundDevice(PCIDeviceInfo)+0x222>
c001d899:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d89c:	6a 00                	push   0x0
c001d89e:	6a 00                	push   0x0
c001d8a0:	6a 00                	push   0x0
c001d8a2:	55                   	push   ebp
c001d8a3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d8a6:	83 c4 10             	add    esp,0x10
c001d8a9:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c001d8b0:	0f 84 1b 02 00 00    	je     c001dad1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d8b6:	eb 18                	jmp    c001d8d0 <PCI::foundDevice(PCIDeviceInfo)+0x236>
c001d8b8:	3c 1c                	cmp    al,0x1c
c001d8ba:	74 0c                	je     c001d8c8 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001d8bc:	e4 60                	in     al,0x60
c001d8be:	3c 5a                	cmp    al,0x5a
c001d8c0:	75 f6                	jne    c001d8b8 <PCI::foundDevice(PCIDeviceInfo)+0x21e>
c001d8c2:	eb 04                	jmp    c001d8c8 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001d8c4:	3c 1c                	cmp    al,0x1c
c001d8c6:	75 d1                	jne    c001d899 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001d8c8:	e4 60                	in     al,0x60
c001d8ca:	3c 5a                	cmp    al,0x5a
c001d8cc:	74 fa                	je     c001d8c8 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001d8ce:	eb f4                	jmp    c001d8c4 <PCI::foundDevice(PCIDeviceInfo)+0x22a>
c001d8d0:	83 ec 0c             	sub    esp,0xc
c001d8d3:	68 99 53 02 c0       	push   0xc0025399
c001d8d8:	e8 e8 c0 fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c001d8dd:	83 c4 10             	add    esp,0x10
c001d8e0:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c001d8e7:	0f 85 e4 01 00 00    	jne    c001dad1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d8ed:	e4 60                	in     al,0x60
c001d8ef:	3c 5a                	cmp    al,0x5a
c001d8f1:	74 04                	je     c001d8f7 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001d8f3:	3c 1c                	cmp    al,0x1c
c001d8f5:	75 f6                	jne    c001d8ed <PCI::foundDevice(PCIDeviceInfo)+0x253>
c001d8f7:	e4 60                	in     al,0x60
c001d8f9:	3c 5a                	cmp    al,0x5a
c001d8fb:	74 fa                	je     c001d8f7 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001d8fd:	3c 1c                	cmp    al,0x1c
c001d8ff:	74 f6                	je     c001d8f7 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001d901:	e9 cb 01 00 00       	jmp    c001dad1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d906:	66 81 f9 01 01       	cmp    cx,0x101
c001d90b:	0f 85 7a 01 00 00    	jne    c001da8b <PCI::foundDevice(PCIDeviceInfo)+0x3f1>
c001d911:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c001d918:	75 25                	jne    c001d93f <PCI::foundDevice(PCIDeviceInfo)+0x2a5>
c001d91a:	83 ec 0c             	sub    esp,0xc
c001d91d:	68 70 02 00 00       	push   0x270
c001d922:	e8 44 c0 fe ff       	call   c000996b <malloc>
c001d927:	89 04 24             	mov    DWORD PTR [esp],eax
c001d92a:	89 c5                	mov    ebp,eax
c001d92c:	e8 df 05 00 00       	call   c001df10 <IDE::IDE()>
c001d931:	83 c4 10             	add    esp,0x10
c001d934:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c001d93b:	74 4a                	je     c001d987 <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001d93d:	eb 2f                	jmp    c001d96e <PCI::foundDevice(PCIDeviceInfo)+0x2d4>
c001d93f:	83 ec 0c             	sub    esp,0xc
c001d942:	68 a1 53 02 c0       	push   0xc00253a1
c001d947:	e8 79 c0 fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c001d94c:	83 c4 10             	add    esp,0x10
c001d94f:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c001d956:	75 c2                	jne    c001d91a <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001d958:	e4 60                	in     al,0x60
c001d95a:	3c 5a                	cmp    al,0x5a
c001d95c:	74 04                	je     c001d962 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001d95e:	3c 1c                	cmp    al,0x1c
c001d960:	75 f6                	jne    c001d958 <PCI::foundDevice(PCIDeviceInfo)+0x2be>
c001d962:	e4 60                	in     al,0x60
c001d964:	3c 5a                	cmp    al,0x5a
c001d966:	74 fa                	je     c001d962 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001d968:	3c 1c                	cmp    al,0x1c
c001d96a:	74 f6                	je     c001d962 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001d96c:	eb ac                	jmp    c001d91a <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001d96e:	83 ec 0c             	sub    esp,0xc
c001d971:	68 a8 53 02 c0       	push   0xc00253a8
c001d976:	e8 4a c0 fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c001d97b:	83 c4 10             	add    esp,0x10
c001d97e:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c001d985:	74 1b                	je     c001d9a2 <PCI::foundDevice(PCIDeviceInfo)+0x308>
c001d987:	57                   	push   edi
c001d988:	57                   	push   edi
c001d989:	55                   	push   ebp
c001d98a:	53                   	push   ebx
c001d98b:	e8 66 07 ff ff       	call   c000e0f6 <Device::addChild(Device*)>
c001d990:	83 c4 10             	add    esp,0x10
c001d993:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c001d99a:	74 33                	je     c001d9cf <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001d99c:	eb 18                	jmp    c001d9b6 <PCI::foundDevice(PCIDeviceInfo)+0x31c>
c001d99e:	3c 1c                	cmp    al,0x1c
c001d9a0:	74 0c                	je     c001d9ae <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001d9a2:	e4 60                	in     al,0x60
c001d9a4:	3c 5a                	cmp    al,0x5a
c001d9a6:	75 f6                	jne    c001d99e <PCI::foundDevice(PCIDeviceInfo)+0x304>
c001d9a8:	eb 04                	jmp    c001d9ae <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001d9aa:	3c 1c                	cmp    al,0x1c
c001d9ac:	75 d9                	jne    c001d987 <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001d9ae:	e4 60                	in     al,0x60
c001d9b0:	3c 5a                	cmp    al,0x5a
c001d9b2:	74 fa                	je     c001d9ae <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001d9b4:	eb f4                	jmp    c001d9aa <PCI::foundDevice(PCIDeviceInfo)+0x310>
c001d9b6:	83 ec 0c             	sub    esp,0xc
c001d9b9:	68 af 53 02 c0       	push   0xc00253af
c001d9be:	e8 02 c0 fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c001d9c3:	83 c4 10             	add    esp,0x10
c001d9c6:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c001d9cd:	74 29                	je     c001d9f8 <PCI::foundDevice(PCIDeviceInfo)+0x35e>
c001d9cf:	83 ec 2c             	sub    esp,0x2c
c001d9d2:	b9 09 00 00 00       	mov    ecx,0x9
c001d9d7:	8d 74 24 60          	lea    esi,[esp+0x60]
c001d9db:	fc                   	cld    
c001d9dc:	89 e7                	mov    edi,esp
c001d9de:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d9e0:	55                   	push   ebp
c001d9e1:	e8 56 06 ff ff       	call   c000e03c <Device::preOpenPCI(PCIDeviceInfo)>
c001d9e6:	83 c4 30             	add    esp,0x30
c001d9e9:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c001d9f0:	74 33                	je     c001da25 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001d9f2:	eb 18                	jmp    c001da0c <PCI::foundDevice(PCIDeviceInfo)+0x372>
c001d9f4:	3c 1c                	cmp    al,0x1c
c001d9f6:	74 0c                	je     c001da04 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001d9f8:	e4 60                	in     al,0x60
c001d9fa:	3c 5a                	cmp    al,0x5a
c001d9fc:	75 f6                	jne    c001d9f4 <PCI::foundDevice(PCIDeviceInfo)+0x35a>
c001d9fe:	eb 04                	jmp    c001da04 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001da00:	3c 1c                	cmp    al,0x1c
c001da02:	75 cb                	jne    c001d9cf <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001da04:	e4 60                	in     al,0x60
c001da06:	3c 5a                	cmp    al,0x5a
c001da08:	74 fa                	je     c001da04 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001da0a:	eb f4                	jmp    c001da00 <PCI::foundDevice(PCIDeviceInfo)+0x366>
c001da0c:	83 ec 0c             	sub    esp,0xc
c001da0f:	68 b6 53 02 c0       	push   0xc00253b6
c001da14:	e8 ac bf fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c001da19:	83 c4 10             	add    esp,0x10
c001da1c:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c001da23:	74 23                	je     c001da48 <PCI::foundDevice(PCIDeviceInfo)+0x3ae>
c001da25:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001da28:	6a 00                	push   0x0
c001da2a:	6a 00                	push   0x0
c001da2c:	6a 00                	push   0x0
c001da2e:	55                   	push   ebp
c001da2f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001da32:	83 c4 10             	add    esp,0x10
c001da35:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c001da3c:	0f 84 8f 00 00 00    	je     c001dad1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001da42:	eb 18                	jmp    c001da5c <PCI::foundDevice(PCIDeviceInfo)+0x3c2>
c001da44:	3c 1c                	cmp    al,0x1c
c001da46:	74 0c                	je     c001da54 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001da48:	e4 60                	in     al,0x60
c001da4a:	3c 5a                	cmp    al,0x5a
c001da4c:	75 f6                	jne    c001da44 <PCI::foundDevice(PCIDeviceInfo)+0x3aa>
c001da4e:	eb 04                	jmp    c001da54 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001da50:	3c 1c                	cmp    al,0x1c
c001da52:	75 d1                	jne    c001da25 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001da54:	e4 60                	in     al,0x60
c001da56:	3c 5a                	cmp    al,0x5a
c001da58:	74 fa                	je     c001da54 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001da5a:	eb f4                	jmp    c001da50 <PCI::foundDevice(PCIDeviceInfo)+0x3b6>
c001da5c:	83 ec 0c             	sub    esp,0xc
c001da5f:	68 bd 53 02 c0       	push   0xc00253bd
c001da64:	e8 5c bf fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c001da69:	83 c4 10             	add    esp,0x10
c001da6c:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c001da73:	75 5c                	jne    c001dad1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001da75:	e4 60                	in     al,0x60
c001da77:	3c 5a                	cmp    al,0x5a
c001da79:	74 04                	je     c001da7f <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001da7b:	3c 1c                	cmp    al,0x1c
c001da7d:	75 f6                	jne    c001da75 <PCI::foundDevice(PCIDeviceInfo)+0x3db>
c001da7f:	e4 60                	in     al,0x60
c001da81:	3c 5a                	cmp    al,0x5a
c001da83:	74 fa                	je     c001da7f <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001da85:	3c 1c                	cmp    al,0x1c
c001da87:	74 f6                	je     c001da7f <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001da89:	eb 46                	jmp    c001dad1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001da8b:	83 ec 0c             	sub    esp,0xc
c001da8e:	68 58 01 00 00       	push   0x158
c001da93:	e8 d3 be fe ff       	call   c000996b <malloc>
c001da98:	89 c5                	mov    ebp,eax
c001da9a:	58                   	pop    eax
c001da9b:	5a                   	pop    edx
c001da9c:	68 c4 53 02 c0       	push   0xc00253c4
c001daa1:	55                   	push   ebp
c001daa2:	e8 59 09 ff ff       	call   c000e400 <DriverlessDevice::DriverlessDevice(char const*)>
c001daa7:	59                   	pop    ecx
c001daa8:	5e                   	pop    esi
c001daa9:	55                   	push   ebp
c001daaa:	53                   	push   ebx
c001daab:	e8 46 06 ff ff       	call   c000e0f6 <Device::addChild(Device*)>
c001dab0:	83 c4 10             	add    esp,0x10
c001dab3:	b9 09 00 00 00       	mov    ecx,0x9
c001dab8:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001dabc:	fc                   	cld    
c001dabd:	89 fe                	mov    esi,edi
c001dabf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001dac1:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001dac5:	83 c4 1c             	add    esp,0x1c
c001dac8:	5b                   	pop    ebx
c001dac9:	5e                   	pop    esi
c001daca:	5f                   	pop    edi
c001dacb:	5d                   	pop    ebp
c001dacc:	e9 6b 05 ff ff       	jmp    c000e03c <Device::preOpenPCI(PCIDeviceInfo)>
c001dad1:	83 c4 1c             	add    esp,0x1c
c001dad4:	5b                   	pop    ebx
c001dad5:	5e                   	pop    esi
c001dad6:	5f                   	pop    edi
c001dad7:	5d                   	pop    ebp
c001dad8:	c3                   	ret    
c001dad9:	90                   	nop

c001dada <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001dada:	55                   	push   ebp
c001dadb:	57                   	push   edi
c001dadc:	56                   	push   esi
c001dadd:	53                   	push   ebx
c001dade:	81 ec b4 00 00 00    	sub    esp,0xb4
c001dae4:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
c001daeb:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c001daf2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001daf6:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c001dafd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001db01:	8b 84 24 d4 00 00 00 	mov    eax,DWORD PTR [esp+0xd4]
c001db08:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001db0c:	68 de 53 02 c0       	push   0xc00253de
c001db11:	8d 5c 24 48          	lea    ebx,[esp+0x48]
c001db15:	53                   	push   ebx
c001db16:	e8 1d 2c fe ff       	call   c0000738 <strcpy>
c001db1b:	0f b6 4c 24 24       	movzx  ecx,BYTE PTR [esp+0x24]
c001db20:	b2 64                	mov    dl,0x64
c001db22:	89 c8                	mov    eax,ecx
c001db24:	f6 f2                	div    dl
c001db26:	b2 0a                	mov    dl,0xa
c001db28:	83 c0 30             	add    eax,0x30
c001db2b:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001db2f:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c001db33:	83 c4 10             	add    esp,0x10
c001db36:	89 c8                	mov    eax,ecx
c001db38:	f6 f2                	div    dl
c001db3a:	89 c1                	mov    ecx,eax
c001db3c:	0f b6 c0             	movzx  eax,al
c001db3f:	88 e9                	mov    cl,ch
c001db41:	f6 f2                	div    dl
c001db43:	88 e0                	mov    al,ah
c001db45:	83 c0 30             	add    eax,0x30
c001db48:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001db4c:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001db50:	8d 41 30             	lea    eax,[ecx+0x30]
c001db53:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c001db57:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c001db5b:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001db60:	f6 f2                	div    dl
c001db62:	89 c1                	mov    ecx,eax
c001db64:	0f b6 c0             	movzx  eax,al
c001db67:	88 e9                	mov    cl,ch
c001db69:	f6 f2                	div    dl
c001db6b:	88 e0                	mov    al,ah
c001db6d:	83 c0 30             	add    eax,0x30
c001db70:	88 44 24 26          	mov    BYTE PTR [esp+0x26],al
c001db74:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c001db78:	8d 41 30             	lea    eax,[ecx+0x30]
c001db7b:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001db7f:	88 44 24 41          	mov    BYTE PTR [esp+0x41],al
c001db83:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001db88:	f6 f2                	div    dl
c001db8a:	89 c1                	mov    ecx,eax
c001db8c:	0f b6 c0             	movzx  eax,al
c001db8f:	88 e9                	mov    cl,ch
c001db91:	f6 f2                	div    dl
c001db93:	88 e0                	mov    al,ah
c001db95:	83 c0 30             	add    eax,0x30
c001db98:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c001db9f:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001dba3:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001dba7:	8d 41 30             	lea    eax,[ecx+0x30]
c001dbaa:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001dbae:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c001dbb2:	74 29                	je     c001dbdd <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001dbb4:	83 ec 0c             	sub    esp,0xc
c001dbb7:	53                   	push   ebx
c001dbb8:	e8 08 be fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c001dbbd:	83 c4 10             	add    esp,0x10
c001dbc0:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c001dbc7:	75 14                	jne    c001dbdd <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001dbc9:	e4 60                	in     al,0x60
c001dbcb:	3c 1c                	cmp    al,0x1c
c001dbcd:	74 04                	je     c001dbd3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001dbcf:	3c 5a                	cmp    al,0x5a
c001dbd1:	75 f6                	jne    c001dbc9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xef>
c001dbd3:	e4 60                	in     al,0x60
c001dbd5:	3c 5a                	cmp    al,0x5a
c001dbd7:	74 fa                	je     c001dbd3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001dbd9:	3c 1c                	cmp    al,0x1c
c001dbdb:	74 f6                	je     c001dbd3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001dbdd:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001dbe2:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001dbe7:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001dbec:	83 ec 0c             	sub    esp,0xc
c001dbef:	6a 0c                	push   0xc
c001dbf1:	56                   	push   esi
c001dbf2:	53                   	push   ebx
c001dbf3:	57                   	push   edi
c001dbf4:	55                   	push   ebp
c001dbf5:	e8 68 f3 ff ff       	call   c001cf62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dbfa:	83 c4 20             	add    esp,0x20
c001dbfd:	56                   	push   esi
c001dbfe:	53                   	push   ebx
c001dbff:	57                   	push   edi
c001dc00:	55                   	push   ebp
c001dc01:	e8 50 f4 ff ff       	call   c001d056 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001dc06:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c001dc0b:	56                   	push   esi
c001dc0c:	53                   	push   ebx
c001dc0d:	57                   	push   edi
c001dc0e:	55                   	push   ebp
c001dc0f:	e8 d8 f4 ff ff       	call   c001d0ec <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001dc14:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001dc18:	83 c4 14             	add    esp,0x14
c001dc1b:	6a 3c                	push   0x3c
c001dc1d:	56                   	push   esi
c001dc1e:	53                   	push   ebx
c001dc1f:	57                   	push   edi
c001dc20:	55                   	push   ebp
c001dc21:	e8 3c f3 ff ff       	call   c001cf62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dc26:	0f b6 c4             	movzx  eax,ah
c001dc29:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001dc2d:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001dc31:	88 84 24 bd 00 00 00 	mov    BYTE PTR [esp+0xbd],al
c001dc38:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c001dc3d:	83 c4 20             	add    esp,0x20
c001dc40:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001dc46:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001dc4d:	0f 84 38 01 00 00    	je     c001dd8b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001dc53:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001dc5b:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c001dc60:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dc64:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001dc6a:	39 88 5c 11 00 00    	cmp    DWORD PTR [eax+0x115c],ecx
c001dc70:	0f 8e 15 01 00 00    	jle    c001dd8b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001dc76:	50                   	push   eax
c001dc77:	50                   	push   eax
c001dc78:	68 f9 53 02 c0       	push   0xc00253f9
c001dc7d:	8d 44 24 68          	lea    eax,[esp+0x68]
c001dc81:	50                   	push   eax
c001dc82:	e8 b1 2a fe ff       	call   c0000738 <strcpy>
c001dc87:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001dc8b:	b9 0a 00 00 00       	mov    ecx,0xa
c001dc90:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001dc94:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001dc98:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001dc9c:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c001dca0:	88 44 24 6e          	mov    BYTE PTR [esp+0x6e],al
c001dca4:	8a 44 24 36          	mov    al,BYTE PTR [esp+0x36]
c001dca8:	88 44 24 70          	mov    BYTE PTR [esp+0x70],al
c001dcac:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001dcb0:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001dcb4:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001dcb8:	88 44 24 73          	mov    BYTE PTR [esp+0x73],al
c001dcbc:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c001dcc0:	88 44 24 74          	mov    BYTE PTR [esp+0x74],al
c001dcc4:	83 c4 10             	add    esp,0x10
c001dcc7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dccb:	99                   	cdq    
c001dccc:	f7 f9                	idiv   ecx
c001dcce:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001dcd2:	99                   	cdq    
c001dcd3:	f7 f9                	idiv   ecx
c001dcd5:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001dcd9:	83 c2 30             	add    edx,0x30
c001dcdc:	83 c0 30             	add    eax,0x30
c001dcdf:	88 54 24 66          	mov    BYTE PTR [esp+0x66],dl
c001dce3:	88 44 24 67          	mov    BYTE PTR [esp+0x67],al
c001dce7:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c001dcee:	74 2d                	je     c001dd1d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001dcf0:	83 ec 0c             	sub    esp,0xc
c001dcf3:	8d 44 24 68          	lea    eax,[esp+0x68]
c001dcf7:	50                   	push   eax
c001dcf8:	e8 c8 bc fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c001dcfd:	83 c4 10             	add    esp,0x10
c001dd00:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c001dd07:	75 14                	jne    c001dd1d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001dd09:	e4 60                	in     al,0x60
c001dd0b:	3c 5a                	cmp    al,0x5a
c001dd0d:	74 04                	je     c001dd13 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001dd0f:	3c 1c                	cmp    al,0x1c
c001dd11:	75 f6                	jne    c001dd09 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x22f>
c001dd13:	e4 60                	in     al,0x60
c001dd15:	3c 5a                	cmp    al,0x5a
c001dd17:	74 fa                	je     c001dd13 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001dd19:	3c 1c                	cmp    al,0x1c
c001dd1b:	74 f6                	je     c001dd13 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001dd1d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001dd21:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c001dd26:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001dd2c:	8d 04 d0             	lea    eax,[eax+edx*8]
c001dd2f:	0f b7 90 5c 01 00 00 	movzx  edx,WORD PTR [eax+0x15c]
c001dd36:	39 d3                	cmp    ebx,edx
c001dd38:	75 48                	jne    c001dd82 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001dd3a:	0f b6 80 5e 01 00 00 	movzx  eax,BYTE PTR [eax+0x15e]
c001dd41:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c001dd45:	75 3b                	jne    c001dd82 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001dd47:	83 ec 0c             	sub    esp,0xc
c001dd4a:	68 28 54 02 c0       	push   0xc0025428
c001dd4f:	e8 25 ef fe ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001dd54:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dd58:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c001dd5d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001dd63:	0f b6 84 d0 5f 01 00 00 	movzx  eax,BYTE PTR [eax+edx*8+0x15f]
c001dd6b:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001dd6f:	50                   	push   eax
c001dd70:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dd74:	53                   	push   ebx
c001dd75:	68 4d 54 02 c0       	push   0xc002544d
c001dd7a:	e8 fa ee fe ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001dd7f:	83 c4 20             	add    esp,0x20
c001dd82:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001dd86:	e9 d0 fe ff ff       	jmp    c001dc5b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x181>
c001dd8b:	31 d2                	xor    edx,edx
c001dd8d:	83 ec 0c             	sub    esp,0xc
c001dd90:	56                   	push   esi
c001dd91:	53                   	push   ebx
c001dd92:	57                   	push   edi
c001dd93:	52                   	push   edx
c001dd94:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001dd98:	55                   	push   ebp
c001dd99:	e8 9a f3 ff ff       	call   c001d138 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dd9e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001dda2:	89 84 94 a4 00 00 00 	mov    DWORD PTR [esp+edx*4+0xa4],eax
c001dda9:	42                   	inc    edx
c001ddaa:	83 c4 20             	add    esp,0x20
c001ddad:	83 fa 06             	cmp    edx,0x6
c001ddb0:	75 db                	jne    c001dd8d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b3>
c001ddb2:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c001ddb7:	83 ec 0c             	sub    esp,0xc
c001ddba:	86 e0                	xchg   al,ah
c001ddbc:	66 89 84 24 88 00 00 00 	mov    WORD PTR [esp+0x88],ax
c001ddc4:	6a 02                	push   0x2
c001ddc6:	56                   	push   esi
c001ddc7:	53                   	push   ebx
c001ddc8:	57                   	push   edi
c001ddc9:	55                   	push   ebp
c001ddca:	e8 93 f1 ff ff       	call   c001cf62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ddcf:	66 89 84 24 be 00 00 00 	mov    WORD PTR [esp+0xbe],ax
c001ddd7:	83 c4 20             	add    esp,0x20
c001ddda:	56                   	push   esi
c001dddb:	53                   	push   ebx
c001dddc:	57                   	push   edi
c001dddd:	55                   	push   ebp
c001ddde:	e8 bd f2 ff ff       	call   c001d0a0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001dde3:	88 84 24 93 00 00 00 	mov    BYTE PTR [esp+0x93],al
c001ddea:	56                   	push   esi
c001ddeb:	53                   	push   ebx
c001ddec:	57                   	push   edi
c001dded:	55                   	push   ebp
c001ddee:	e8 17 f2 ff ff       	call   c001d00a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ddf3:	b9 09 00 00 00       	mov    ecx,0x9
c001ddf8:	66 89 84 24 9e 00 00 00 	mov    WORD PTR [esp+0x9e],ax
c001de00:	8a 44 24 42          	mov    al,BYTE PTR [esp+0x42]
c001de04:	88 84 24 bc 00 00 00 	mov    BYTE PTR [esp+0xbc],al
c001de0b:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001de0f:	88 84 24 a0 00 00 00 	mov    BYTE PTR [esp+0xa0],al
c001de16:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001de1a:	88 84 24 a1 00 00 00 	mov    BYTE PTR [esp+0xa1],al
c001de21:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001de25:	88 84 24 a2 00 00 00 	mov    BYTE PTR [esp+0xa2],al
c001de2c:	83 ec 0c             	sub    esp,0xc
c001de2f:	fc                   	cld    
c001de30:	89 e7                	mov    edi,esp
c001de32:	8d b4 24 a8 00 00 00 	lea    esi,[esp+0xa8]
c001de39:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001de3b:	55                   	push   ebp
c001de3c:	e8 59 f8 ff ff       	call   c001d69a <PCI::foundDevice(PCIDeviceInfo)>
c001de41:	81 c4 dc 00 00 00    	add    esp,0xdc
c001de47:	5b                   	pop    ebx
c001de48:	5e                   	pop    esi
c001de49:	5f                   	pop    edi
c001de4a:	5d                   	pop    ebp
c001de4b:	c3                   	ret    

c001de4c <PCI::checkDevice(unsigned char, unsigned char)>:
c001de4c:	55                   	push   ebp
c001de4d:	57                   	push   edi
c001de4e:	56                   	push   esi
c001de4f:	53                   	push   ebx
c001de50:	83 ec 0c             	sub    esp,0xc
c001de53:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001de57:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001de5c:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001de61:	6a 00                	push   0x0
c001de63:	56                   	push   esi
c001de64:	57                   	push   edi
c001de65:	55                   	push   ebp
c001de66:	e8 9f f1 ff ff       	call   c001d00a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001de6b:	6a 00                	push   0x0
c001de6d:	56                   	push   esi
c001de6e:	57                   	push   edi
c001de6f:	55                   	push   ebp
c001de70:	e8 65 fc ff ff       	call   c001dada <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001de75:	83 c4 20             	add    esp,0x20
c001de78:	6a 00                	push   0x0
c001de7a:	56                   	push   esi
c001de7b:	57                   	push   edi
c001de7c:	55                   	push   ebp
c001de7d:	e8 ac f1 ff ff       	call   c001d02e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001de82:	83 c4 10             	add    esp,0x10
c001de85:	84 c0                	test   al,al
c001de87:	79 27                	jns    c001deb0 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001de89:	bb 01 00 00 00       	mov    ebx,0x1
c001de8e:	53                   	push   ebx
c001de8f:	56                   	push   esi
c001de90:	57                   	push   edi
c001de91:	55                   	push   ebp
c001de92:	e8 73 f1 ff ff       	call   c001d00a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001de97:	83 c4 10             	add    esp,0x10
c001de9a:	66 40                	inc    ax
c001de9c:	74 0c                	je     c001deaa <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001de9e:	53                   	push   ebx
c001de9f:	56                   	push   esi
c001dea0:	57                   	push   edi
c001dea1:	55                   	push   ebp
c001dea2:	e8 33 fc ff ff       	call   c001dada <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001dea7:	83 c4 10             	add    esp,0x10
c001deaa:	43                   	inc    ebx
c001deab:	83 fb 08             	cmp    ebx,0x8
c001deae:	75 de                	jne    c001de8e <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001deb0:	83 c4 0c             	add    esp,0xc
c001deb3:	5b                   	pop    ebx
c001deb4:	5e                   	pop    esi
c001deb5:	5f                   	pop    edi
c001deb6:	5d                   	pop    ebp
c001deb7:	c3                   	ret    

c001deb8 <PCI::detect()>:
c001deb8:	56                   	push   esi
c001deb9:	53                   	push   ebx
c001deba:	53                   	push   ebx
c001debb:	31 db                	xor    ebx,ebx
c001debd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dec1:	6a 00                	push   0x0
c001dec3:	6a 00                	push   0x0
c001dec5:	6a 00                	push   0x0
c001dec7:	56                   	push   esi
c001dec8:	e8 61 f1 ff ff       	call   c001d02e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001decd:	83 c4 10             	add    esp,0x10
c001ded0:	a8 80                	test   al,0x80
c001ded2:	75 21                	jne    c001def5 <PCI::detect()+0x3d>
c001ded4:	51                   	push   ecx
c001ded5:	51                   	push   ecx
c001ded6:	6a 00                	push   0x0
c001ded8:	56                   	push   esi
c001ded9:	e8 98 f7 ff ff       	call   c001d676 <PCI::checkBus(unsigned char)>
c001dede:	83 c4 10             	add    esp,0x10
c001dee1:	eb 24                	jmp    c001df07 <PCI::detect()+0x4f>
c001dee3:	52                   	push   edx
c001dee4:	52                   	push   edx
c001dee5:	53                   	push   ebx
c001dee6:	43                   	inc    ebx
c001dee7:	56                   	push   esi
c001dee8:	e8 89 f7 ff ff       	call   c001d676 <PCI::checkBus(unsigned char)>
c001deed:	83 c4 10             	add    esp,0x10
c001def0:	83 fb 08             	cmp    ebx,0x8
c001def3:	74 12                	je     c001df07 <PCI::detect()+0x4f>
c001def5:	53                   	push   ebx
c001def6:	6a 00                	push   0x0
c001def8:	6a 00                	push   0x0
c001defa:	56                   	push   esi
c001defb:	e8 0a f1 ff ff       	call   c001d00a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001df00:	83 c4 10             	add    esp,0x10
c001df03:	66 40                	inc    ax
c001df05:	74 dc                	je     c001dee3 <PCI::detect()+0x2b>
c001df07:	58                   	pop    eax
c001df08:	5b                   	pop    ebx
c001df09:	5e                   	pop    esi
c001df0a:	c3                   	ret    
c001df0b:	90                   	nop

c001df0c <IDE::close(int, int, void*)>:
c001df0c:	83 c8 ff             	or     eax,0xffffffff
c001df0f:	c3                   	ret    

c001df10 <IDE::IDE()>:
c001df10:	83 ec 0c             	sub    esp,0xc
c001df13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df17:	83 ec 08             	sub    esp,0x8
c001df1a:	68 94 54 02 c0       	push   0xc0025494
c001df1f:	50                   	push   eax
c001df20:	e8 7f 05 ff ff       	call   c000e4a4 <HardDiskController::HardDiskController(char const*)>
c001df25:	83 c4 10             	add    esp,0x10
c001df28:	ba 40 55 02 c0       	mov    edx,0xc0025540
c001df2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df31:	89 10                	mov    DWORD PTR [eax],edx
c001df33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df37:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001df3e:	90                   	nop
c001df3f:	83 c4 0c             	add    esp,0xc
c001df42:	c3                   	ret    
c001df43:	90                   	nop

c001df44 <IDE::prepareInterrupt(unsigned char)>:
c001df44:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001df49:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001df4d:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001df55:	c3                   	ret    

c001df56 <selectDrive(unsigned char, unsigned char)>:
c001df56:	c3                   	ret    
c001df57:	90                   	nop

c001df58 <IDE::getBase(unsigned char)>:
c001df58:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001df5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df61:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001df69:	c3                   	ret    

c001df6a <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001df6a:	55                   	push   ebp
c001df6b:	57                   	push   edi
c001df6c:	56                   	push   esi
c001df6d:	53                   	push   ebx
c001df6e:	83 ec 1c             	sub    esp,0x1c
c001df71:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001df75:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001df79:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001df7c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001df80:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001df84:	80 f9 03             	cmp    cl,0x3
c001df87:	77 51                	ja     c001dfda <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001df89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001df8d:	0f b6 f2             	movzx  esi,dl
c001df90:	0f b6 db             	movzx  ebx,bl
c001df93:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001df96:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001df9a:	83 ca 80             	or     edx,0xffffff80
c001df9d:	0f b6 d2             	movzx  edx,dl
c001dfa0:	52                   	push   edx
c001dfa1:	6a 0c                	push   0xc
c001dfa3:	56                   	push   esi
c001dfa4:	57                   	push   edi
c001dfa5:	e8 c0 ff ff ff       	call   c001df6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dfaa:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001dfaf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dfb3:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001dfb7:	ee                   	out    dx,al
c001dfb8:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001dfbd:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001dfc1:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001dfc5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001dfc9:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001dfd1:	83 c4 2c             	add    esp,0x2c
c001dfd4:	5b                   	pop    ebx
c001dfd5:	5e                   	pop    esi
c001dfd6:	5f                   	pop    edi
c001dfd7:	5d                   	pop    ebp
c001dfd8:	eb 90                	jmp    c001df6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dfda:	80 fb 07             	cmp    bl,0x7
c001dfdd:	77 12                	ja     c001dff1 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001dfdf:	0f b6 d2             	movzx  edx,dl
c001dfe2:	0f b6 db             	movzx  ebx,bl
c001dfe5:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001dfed:	89 da                	mov    edx,ebx
c001dfef:	eb 2f                	jmp    c001e020 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001dff1:	80 fb 0d             	cmp    bl,0xd
c001dff4:	77 13                	ja     c001e009 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001dff6:	0f b6 d2             	movzx  edx,dl
c001dff9:	0f b6 db             	movzx  ebx,bl
c001dffc:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001e003:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001e007:	eb 17                	jmp    c001e020 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001e009:	80 fb 15             	cmp    bl,0x15
c001e00c:	77 13                	ja     c001e021 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e00e:	0f b6 d2             	movzx  edx,dl
c001e011:	0f b6 db             	movzx  ebx,bl
c001e014:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001e01c:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001e020:	ee                   	out    dx,al
c001e021:	83 c4 1c             	add    esp,0x1c
c001e024:	5b                   	pop    ebx
c001e025:	5e                   	pop    esi
c001e026:	5f                   	pop    edi
c001e027:	5d                   	pop    ebp
c001e028:	c3                   	ret    
c001e029:	90                   	nop

c001e02a <IDE::read(unsigned char, unsigned char)>:
c001e02a:	55                   	push   ebp
c001e02b:	57                   	push   edi
c001e02c:	56                   	push   esi
c001e02d:	53                   	push   ebx
c001e02e:	83 ec 1c             	sub    esp,0x1c
c001e031:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e035:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e039:	8d 43 f8             	lea    eax,[ebx-0x8]
c001e03c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e040:	3c 03                	cmp    al,0x3
c001e042:	77 43                	ja     c001e087 <IDE::read(unsigned char, unsigned char)+0x5d>
c001e044:	0f b6 f2             	movzx  esi,dl
c001e047:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001e04a:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001e04e:	83 c8 80             	or     eax,0xffffff80
c001e051:	0f b6 c0             	movzx  eax,al
c001e054:	50                   	push   eax
c001e055:	6a 0c                	push   0xc
c001e057:	56                   	push   esi
c001e058:	57                   	push   edi
c001e059:	e8 0c ff ff ff       	call   c001df6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e05e:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001e063:	0f b6 c3             	movzx  eax,bl
c001e066:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001e06a:	ec                   	in     al,dx
c001e06b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e06f:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001e074:	52                   	push   edx
c001e075:	6a 0c                	push   0xc
c001e077:	56                   	push   esi
c001e078:	57                   	push   edi
c001e079:	e8 ec fe ff ff       	call   c001df6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e07e:	83 c4 20             	add    esp,0x20
c001e081:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e085:	eb 49                	jmp    c001e0d0 <IDE::read(unsigned char, unsigned char)+0xa6>
c001e087:	80 fb 07             	cmp    bl,0x7
c001e08a:	77 12                	ja     c001e09e <IDE::read(unsigned char, unsigned char)+0x74>
c001e08c:	0f b6 d2             	movzx  edx,dl
c001e08f:	0f b6 c3             	movzx  eax,bl
c001e092:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001e09a:	89 c2                	mov    edx,eax
c001e09c:	eb 31                	jmp    c001e0cf <IDE::read(unsigned char, unsigned char)+0xa5>
c001e09e:	80 fb 0d             	cmp    bl,0xd
c001e0a1:	77 13                	ja     c001e0b6 <IDE::read(unsigned char, unsigned char)+0x8c>
c001e0a3:	0f b6 d2             	movzx  edx,dl
c001e0a6:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001e0ad:	0f b6 d3             	movzx  edx,bl
c001e0b0:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001e0b4:	eb 19                	jmp    c001e0cf <IDE::read(unsigned char, unsigned char)+0xa5>
c001e0b6:	31 c0                	xor    eax,eax
c001e0b8:	80 fb 15             	cmp    bl,0x15
c001e0bb:	77 13                	ja     c001e0d0 <IDE::read(unsigned char, unsigned char)+0xa6>
c001e0bd:	0f b6 d2             	movzx  edx,dl
c001e0c0:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001e0c8:	0f b6 d3             	movzx  edx,bl
c001e0cb:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001e0cf:	ec                   	in     al,dx
c001e0d0:	83 c4 1c             	add    esp,0x1c
c001e0d3:	5b                   	pop    ebx
c001e0d4:	5e                   	pop    esi
c001e0d5:	5f                   	pop    edi
c001e0d6:	5d                   	pop    ebp
c001e0d7:	c3                   	ret    

c001e0d8 <IDE::waitInterrupt(unsigned char)>:
c001e0d8:	55                   	push   ebp
c001e0d9:	57                   	push   edi
c001e0da:	56                   	push   esi
c001e0db:	53                   	push   ebx
c001e0dc:	31 db                	xor    ebx,ebx
c001e0de:	83 ec 0c             	sub    esp,0xc
c001e0e1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001e0e5:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001e0ea:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001e0f2:	89 e8                	mov    eax,ebp
c001e0f4:	84 c0                	test   al,al
c001e0f6:	75 30                	jne    c001e128 <IDE::waitInterrupt(unsigned char)+0x50>
c001e0f8:	50                   	push   eax
c001e0f9:	6a 0c                	push   0xc
c001e0fb:	56                   	push   esi
c001e0fc:	57                   	push   edi
c001e0fd:	e8 28 ff ff ff       	call   c001e02a <IDE::read(unsigned char, unsigned char)>
c001e102:	83 c4 10             	add    esp,0x10
c001e105:	a8 01                	test   al,0x1
c001e107:	75 27                	jne    c001e130 <IDE::waitInterrupt(unsigned char)+0x58>
c001e109:	f6 c3 04             	test   bl,0x4
c001e10c:	75 12                	jne    c001e120 <IDE::waitInterrupt(unsigned char)+0x48>
c001e10e:	83 fb 32             	cmp    ebx,0x32
c001e111:	7e 0d                	jle    c001e120 <IDE::waitInterrupt(unsigned char)+0x48>
c001e113:	83 ec 0c             	sub    esp,0xc
c001e116:	6a 64                	push   0x64
c001e118:	e8 47 88 ff ff       	call   c0016964 <milliTenthSleep(unsigned int)>
c001e11d:	83 c4 10             	add    esp,0x10
c001e120:	83 fb 3c             	cmp    ebx,0x3c
c001e123:	74 0b                	je     c001e130 <IDE::waitInterrupt(unsigned char)+0x58>
c001e125:	43                   	inc    ebx
c001e126:	eb c2                	jmp    c001e0ea <IDE::waitInterrupt(unsigned char)+0x12>
c001e128:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001e130:	83 c4 0c             	add    esp,0xc
c001e133:	89 e8                	mov    eax,ebp
c001e135:	5b                   	pop    ebx
c001e136:	5e                   	pop    esi
c001e137:	5f                   	pop    edi
c001e138:	5d                   	pop    ebp
c001e139:	c3                   	ret    

c001e13a <ideChannel0IRQHandler(regs*, void*)>:
c001e13a:	83 ec 10             	sub    esp,0x10
c001e13d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e141:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001e148:	6a 07                	push   0x7
c001e14a:	6a 00                	push   0x0
c001e14c:	50                   	push   eax
c001e14d:	e8 d8 fe ff ff       	call   c001e02a <IDE::read(unsigned char, unsigned char)>
c001e152:	83 c4 1c             	add    esp,0x1c
c001e155:	c3                   	ret    

c001e156 <ideChannel1IRQHandler(regs*, void*)>:
c001e156:	83 ec 10             	sub    esp,0x10
c001e159:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e15d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001e164:	6a 07                	push   0x7
c001e166:	6a 01                	push   0x1
c001e168:	50                   	push   eax
c001e169:	e8 bc fe ff ff       	call   c001e02a <IDE::read(unsigned char, unsigned char)>
c001e16e:	83 c4 1c             	add    esp,0x1c
c001e171:	c3                   	ret    

c001e172 <IDE::enableIRQs(unsigned char, bool)>:
c001e172:	57                   	push   edi
c001e173:	56                   	push   esi
c001e174:	be 04 00 00 00       	mov    esi,0x4
c001e179:	53                   	push   ebx
c001e17a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001e17f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e183:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001e188:	0f 94 c0             	sete   al
c001e18b:	d1 e0                	shl    eax,1
c001e18d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001e194:	0f b6 c0             	movzx  eax,al
c001e197:	50                   	push   eax
c001e198:	6a 0c                	push   0xc
c001e19a:	57                   	push   edi
c001e19b:	53                   	push   ebx
c001e19c:	e8 c9 fd ff ff       	call   c001df6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e1a1:	83 c4 10             	add    esp,0x10
c001e1a4:	50                   	push   eax
c001e1a5:	6a 0c                	push   0xc
c001e1a7:	57                   	push   edi
c001e1a8:	53                   	push   ebx
c001e1a9:	e8 7c fe ff ff       	call   c001e02a <IDE::read(unsigned char, unsigned char)>
c001e1ae:	83 c4 10             	add    esp,0x10
c001e1b1:	4e                   	dec    esi
c001e1b2:	75 f0                	jne    c001e1a4 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001e1b4:	5b                   	pop    ebx
c001e1b5:	5e                   	pop    esi
c001e1b6:	5f                   	pop    edi
c001e1b7:	c3                   	ret    

c001e1b8 <IDE::open(int, int, void*)>:
c001e1b8:	55                   	push   ebp
c001e1b9:	57                   	push   edi
c001e1ba:	56                   	push   esi
c001e1bb:	53                   	push   ebx
c001e1bc:	83 ec 1c             	sub    esp,0x1c
c001e1bf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e1c3:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001e1cc:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001e1d5:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001e1dc:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001e1e3:	0f 85 cb 02 00 00    	jne    c001e4b4 <IDE::open(int, int, void*)+0x2fc>
c001e1e9:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001e1ef:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001e1f3:	83 e0 7f             	and    eax,0x7f
c001e1f6:	3c 05                	cmp    al,0x5
c001e1f8:	74 04                	je     c001e1fe <IDE::open(int, int, void*)+0x46>
c001e1fa:	3c 0f                	cmp    al,0xf
c001e1fc:	75 32                	jne    c001e230 <IDE::open(int, int, void*)+0x78>
c001e1fe:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001e204:	83 e0 fc             	and    eax,0xfffffffc
c001e207:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e20e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001e214:	83 e0 fc             	and    eax,0xfffffffc
c001e217:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e21e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001e224:	83 e0 fc             	and    eax,0xfffffffc
c001e227:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e22e:	eb 14                	jmp    c001e244 <IDE::open(int, int, void*)+0x8c>
c001e230:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001e23a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001e244:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001e24b:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001e252:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e256:	89 c6                	mov    esi,eax
c001e258:	bf f8 0c 00 00       	mov    edi,0xcf8
c001e25d:	c1 e6 10             	shl    esi,0x10
c001e260:	89 e8                	mov    eax,ebp
c001e262:	89 fa                	mov    edx,edi
c001e264:	c1 e0 0b             	shl    eax,0xb
c001e267:	09 f0                	or     eax,esi
c001e269:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001e270:	c1 e6 08             	shl    esi,0x8
c001e273:	09 c6                	or     esi,eax
c001e275:	89 f0                	mov    eax,esi
c001e277:	0d 08 00 00 80       	or     eax,0x80000008
c001e27c:	ef                   	out    dx,eax
c001e27d:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001e282:	89 ca                	mov    edx,ecx
c001e284:	ed                   	in     eax,dx
c001e285:	c1 e8 10             	shr    eax,0x10
c001e288:	3d ff ff 00 00       	cmp    eax,0xffff
c001e28d:	0f 84 f5 00 00 00    	je     c001e388 <IDE::open(int, int, void*)+0x1d0>
c001e293:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001e299:	89 fa                	mov    edx,edi
c001e29b:	89 f0                	mov    eax,esi
c001e29d:	ef                   	out    dx,eax
c001e29e:	b0 fe                	mov    al,0xfe
c001e2a0:	89 ca                	mov    edx,ecx
c001e2a2:	ee                   	out    dx,al
c001e2a3:	89 f0                	mov    eax,esi
c001e2a5:	89 fa                	mov    edx,edi
c001e2a7:	ef                   	out    dx,eax
c001e2a8:	89 ca                	mov    edx,ecx
c001e2aa:	ed                   	in     eax,dx
c001e2ab:	3c fe                	cmp    al,0xfe
c001e2ad:	0f 85 a9 00 00 00    	jne    c001e35c <IDE::open(int, int, void*)+0x1a4>
c001e2b3:	8b 15 88 66 02 c0    	mov    edx,DWORD PTR ds:0xc0026688
c001e2b9:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001e2c0:	74 33                	je     c001e2f5 <IDE::open(int, int, void*)+0x13d>
c001e2c2:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001e2c8:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001e2cc:	40                   	inc    eax
c001e2cd:	83 ec 0c             	sub    esp,0xc
c001e2d0:	0f b6 c0             	movzx  eax,al
c001e2d3:	50                   	push   eax
c001e2d4:	55                   	push   ebp
c001e2d5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e2d9:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001e2df:	51                   	push   ecx
c001e2e0:	e8 eb 2c ff ff       	call   c0010fd0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001e2e5:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001e2ea:	83 c4 1c             	add    esp,0x1c
c001e2ed:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001e2f3:	eb 0a                	jmp    c001e2ff <IDE::open(int, int, void*)+0x147>
c001e2f5:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001e2ff:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001e306:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e30d:	c1 e1 10             	shl    ecx,0x10
c001e310:	c1 e0 08             	shl    eax,0x8
c001e313:	bf f8 0c 00 00       	mov    edi,0xcf8
c001e318:	09 c1                	or     ecx,eax
c001e31a:	89 fa                	mov    edx,edi
c001e31c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e323:	c1 e0 0b             	shl    eax,0xb
c001e326:	09 c1                	or     ecx,eax
c001e328:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001e32e:	89 c8                	mov    eax,ecx
c001e330:	ef                   	out    dx,eax
c001e331:	be fc 0c 00 00       	mov    esi,0xcfc
c001e336:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001e33c:	89 f2                	mov    edx,esi
c001e33e:	ee                   	out    dx,al
c001e33f:	89 c8                	mov    eax,ecx
c001e341:	89 fa                	mov    edx,edi
c001e343:	ef                   	out    dx,eax
c001e344:	89 f2                	mov    edx,esi
c001e346:	ed                   	in     eax,dx
c001e347:	0f b6 c0             	movzx  eax,al
c001e34a:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001e350:	74 46                	je     c001e398 <IDE::open(int, int, void*)+0x1e0>
c001e352:	83 ec 0c             	sub    esp,0xc
c001e355:	68 ac 54 02 c0       	push   0xc00254ac
c001e35a:	eb 34                	jmp    c001e390 <IDE::open(int, int, void*)+0x1d8>
c001e35c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001e365:	75 17                	jne    c001e37e <IDE::open(int, int, void*)+0x1c6>
c001e367:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001e36c:	74 07                	je     c001e375 <IDE::open(int, int, void*)+0x1bd>
c001e36e:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001e373:	75 09                	jne    c001e37e <IDE::open(int, int, void*)+0x1c6>
c001e375:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e37c:	eb 1a                	jmp    c001e398 <IDE::open(int, int, void*)+0x1e0>
c001e37e:	83 ec 0c             	sub    esp,0xc
c001e381:	68 b4 54 02 c0       	push   0xc00254b4
c001e386:	eb 08                	jmp    c001e390 <IDE::open(int, int, void*)+0x1d8>
c001e388:	83 ec 0c             	sub    esp,0xc
c001e38b:	68 e5 54 02 c0       	push   0xc00254e5
c001e390:	e8 72 4c ff ff       	call   c0013007 <Krnl::panic(char const*)>
c001e395:	83 c4 10             	add    esp,0x10
c001e398:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001e39f:	79 1a                	jns    c001e3bb <IDE::open(int, int, void*)+0x203>
c001e3a1:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001e3a7:	83 e0 fc             	and    eax,0xfffffffc
c001e3aa:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001e3b1:	83 c0 08             	add    eax,0x8
c001e3b4:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001e3bb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001e3c1:	89 c2                	mov    edx,eax
c001e3c3:	83 e2 0f             	and    edx,0xf
c001e3c6:	66 83 fa 08          	cmp    dx,0x8
c001e3ca:	75 0a                	jne    c001e3d6 <IDE::open(int, int, void*)+0x21e>
c001e3cc:	83 e8 02             	sub    eax,0x2
c001e3cf:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e3d6:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001e3dc:	89 c2                	mov    edx,eax
c001e3de:	83 e2 0f             	and    edx,0xf
c001e3e1:	66 83 fa 08          	cmp    dx,0x8
c001e3e5:	75 0a                	jne    c001e3f1 <IDE::open(int, int, void*)+0x239>
c001e3e7:	83 e8 02             	sub    eax,0x2
c001e3ea:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001e3f1:	0f b6 8b c4 00 00 00 	movzx  ecx,BYTE PTR [ebx+0xc4]
c001e3f8:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001e3ff:	89 c8                	mov    eax,ecx
c001e401:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001e404:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001e408:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001e40c:	8d 51 01             	lea    edx,[ecx+0x1]
c001e40f:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001e414:	0f b6 d2             	movzx  edx,dl
c001e417:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001e41e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e421:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e425:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001e429:	8d 48 02             	lea    ecx,[eax+0x2]
c001e42c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001e431:	0f b6 c9             	movzx  ecx,cl
c001e434:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001e43a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001e43d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001e441:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001e445:	8d 50 03             	lea    edx,[eax+0x3]
c001e448:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001e44d:	0f b6 d2             	movzx  edx,dl
c001e450:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001e456:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e459:	83 c0 04             	add    eax,0x4
c001e45c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e460:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001e464:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001e46a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001e46f:	56                   	push   esi
c001e470:	56                   	push   esi
c001e471:	0f b7 83 5e 01 00 00 	movzx  eax,WORD PTR [ebx+0x15e]
c001e478:	50                   	push   eax
c001e479:	68 0f 55 02 c0       	push   0xc002550f
c001e47e:	e8 f6 e7 fe ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001e483:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001e48a:	83 c4 10             	add    esp,0x10
c001e48d:	66 85 f6             	test   si,si
c001e490:	74 5f                	je     c001e4f1 <IDE::open(int, int, void*)+0x339>
c001e492:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001e499:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e49c:	89 d0                	mov    eax,edx
c001e49e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e4a2:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001e4a6:	40                   	inc    eax
c001e4a7:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001e4ad:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001e4b2:	eb 3d                	jmp    c001e4f1 <IDE::open(int, int, void*)+0x339>
c001e4b4:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001e4ba:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e4c1:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e4c8:	66 05 06 02          	add    ax,0x206
c001e4cc:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e4d3:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001e4da:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e4e1:	66 05 06 02          	add    ax,0x206
c001e4e5:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001e4ec:	e9 ca fe ff ff       	jmp    c001e3bb <IDE::open(int, int, void*)+0x203>
c001e4f1:	50                   	push   eax
c001e4f2:	50                   	push   eax
c001e4f3:	6a 00                	push   0x0
c001e4f5:	53                   	push   ebx
c001e4f6:	e8 49 fa ff ff       	call   c001df44 <IDE::prepareInterrupt(unsigned char)>
c001e4fb:	5a                   	pop    edx
c001e4fc:	59                   	pop    ecx
c001e4fd:	6a 01                	push   0x1
c001e4ff:	53                   	push   ebx
c001e500:	e8 3f fa ff ff       	call   c001df44 <IDE::prepareInterrupt(unsigned char)>
c001e505:	83 c4 0c             	add    esp,0xc
c001e508:	6a 00                	push   0x0
c001e50a:	6a 00                	push   0x0
c001e50c:	53                   	push   ebx
c001e50d:	e8 60 fc ff ff       	call   c001e172 <IDE::enableIRQs(unsigned char, bool)>
c001e512:	83 c4 0c             	add    esp,0xc
c001e515:	6a 00                	push   0x0
c001e517:	6a 01                	push   0x1
c001e519:	53                   	push   ebx
c001e51a:	e8 53 fc ff ff       	call   c001e172 <IDE::enableIRQs(unsigned char, bool)>
c001e51f:	83 c4 10             	add    esp,0x10
c001e522:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001e529:	74 34                	je     c001e55f <IDE::open(int, int, void*)+0x3a7>
c001e52b:	83 ec 0c             	sub    esp,0xc
c001e52e:	53                   	push   ebx
c001e52f:	6a 01                	push   0x1
c001e531:	68 3a e1 01 c0       	push   0xc001e13a
c001e536:	6a 0e                	push   0xe
c001e538:	53                   	push   ebx
c001e539:	e8 64 fb fe ff       	call   c000e0a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e53e:	83 c4 14             	add    esp,0x14
c001e541:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001e547:	53                   	push   ebx
c001e548:	6a 01                	push   0x1
c001e54a:	68 56 e1 01 c0       	push   0xc001e156
c001e54f:	6a 0f                	push   0xf
c001e551:	53                   	push   ebx
c001e552:	e8 4b fb fe ff       	call   c000e0a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e557:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001e55d:	eb 38                	jmp    c001e597 <IDE::open(int, int, void*)+0x3df>
c001e55f:	83 ec 0c             	sub    esp,0xc
c001e562:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001e56c:	53                   	push   ebx
c001e56d:	6a 00                	push   0x0
c001e56f:	68 3a e1 01 c0       	push   0xc001e13a
c001e574:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001e57a:	53                   	push   ebx
c001e57b:	e8 22 fb fe ff       	call   c000e0a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e580:	83 c4 14             	add    esp,0x14
c001e583:	53                   	push   ebx
c001e584:	6a 00                	push   0x0
c001e586:	68 56 e1 01 c0       	push   0xc001e156
c001e58b:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001e591:	53                   	push   ebx
c001e592:	e8 0b fb fe ff       	call   c000e0a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e597:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e599:	83 c4 20             	add    esp,0x20
c001e59c:	83 ec 0c             	sub    esp,0xc
c001e59f:	53                   	push   ebx
c001e5a0:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001e5a3:	83 c4 0c             	add    esp,0xc
c001e5a6:	6a 07                	push   0x7
c001e5a8:	6a 00                	push   0x0
c001e5aa:	53                   	push   ebx
c001e5ab:	e8 7a fa ff ff       	call   c001e02a <IDE::read(unsigned char, unsigned char)>
c001e5b0:	83 c4 0c             	add    esp,0xc
c001e5b3:	6a 07                	push   0x7
c001e5b5:	6a 01                	push   0x1
c001e5b7:	53                   	push   ebx
c001e5b8:	e8 6d fa ff ff       	call   c001e02a <IDE::read(unsigned char, unsigned char)>
c001e5bd:	83 c4 0c             	add    esp,0xc
c001e5c0:	6a 01                	push   0x1
c001e5c2:	6a 00                	push   0x0
c001e5c4:	53                   	push   ebx
c001e5c5:	e8 a8 fb ff ff       	call   c001e172 <IDE::enableIRQs(unsigned char, bool)>
c001e5ca:	83 c4 0c             	add    esp,0xc
c001e5cd:	6a 01                	push   0x1
c001e5cf:	6a 01                	push   0x1
c001e5d1:	53                   	push   ebx
c001e5d2:	e8 9b fb ff ff       	call   c001e172 <IDE::enableIRQs(unsigned char, bool)>
c001e5d7:	83 c4 2c             	add    esp,0x2c
c001e5da:	31 c0                	xor    eax,eax
c001e5dc:	5b                   	pop    ebx
c001e5dd:	5e                   	pop    esi
c001e5de:	5f                   	pop    edi
c001e5df:	5d                   	pop    ebp
c001e5e0:	c3                   	ret    
c001e5e1:	90                   	nop

c001e5e2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001e5e2:	55                   	push   ebp
c001e5e3:	57                   	push   edi
c001e5e4:	56                   	push   esi
c001e5e5:	53                   	push   ebx
c001e5e6:	83 ec 1c             	sub    esp,0x1c
c001e5e9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e5ed:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e5f1:	8d 50 f8             	lea    edx,[eax-0x8]
c001e5f4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e5f8:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001e5fc:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e600:	80 fa 03             	cmp    dl,0x3
c001e603:	77 5d                	ja     c001e662 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001e605:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e609:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e60d:	0f b6 db             	movzx  ebx,bl
c001e610:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001e613:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001e617:	83 ca 80             	or     edx,0xffffff80
c001e61a:	0f b6 d2             	movzx  edx,dl
c001e61d:	52                   	push   edx
c001e61e:	6a 0c                	push   0xc
c001e620:	53                   	push   ebx
c001e621:	56                   	push   esi
c001e622:	e8 43 f9 ff ff       	call   c001df6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e627:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001e62c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e630:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e634:	0f b6 c0             	movzx  eax,al
c001e637:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001e63b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001e63d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001e642:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001e646:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001e64a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e64e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e656:	83 c4 2c             	add    esp,0x2c
c001e659:	5b                   	pop    ebx
c001e65a:	5e                   	pop    esi
c001e65b:	5f                   	pop    edi
c001e65c:	5d                   	pop    ebp
c001e65d:	e9 08 f9 ff ff       	jmp    c001df6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e662:	3c 07                	cmp    al,0x7
c001e664:	77 10                	ja     c001e676 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001e666:	0f b6 db             	movzx  ebx,bl
c001e669:	0f b6 d0             	movzx  edx,al
c001e66c:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001e674:	eb 2d                	jmp    c001e6a3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001e676:	3c 0d                	cmp    al,0xd
c001e678:	77 13                	ja     c001e68d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001e67a:	0f b6 db             	movzx  ebx,bl
c001e67d:	0f b6 c0             	movzx  eax,al
c001e680:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001e687:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001e68b:	eb 16                	jmp    c001e6a3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001e68d:	3c 15                	cmp    al,0x15
c001e68f:	77 14                	ja     c001e6a5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001e691:	0f b6 db             	movzx  ebx,bl
c001e694:	0f b6 c0             	movzx  eax,al
c001e697:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001e69f:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001e6a3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001e6a5:	83 c4 1c             	add    esp,0x1c
c001e6a8:	5b                   	pop    ebx
c001e6a9:	5e                   	pop    esi
c001e6aa:	5f                   	pop    edi
c001e6ab:	5d                   	pop    ebp
c001e6ac:	c3                   	ret    
c001e6ad:	90                   	nop

c001e6ae <IDE::detect()>:
c001e6ae:	55                   	push   ebp
c001e6af:	57                   	push   edi
c001e6b0:	56                   	push   esi
c001e6b1:	53                   	push   ebx
c001e6b2:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001e6b8:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001e6bf:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001e6c6:	0f 85 97 02 00 00    	jne    c001e963 <IDE::detect()+0x2b5>
c001e6cc:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001e6d3:	31 f6                	xor    esi,esi
c001e6d5:	31 ed                	xor    ebp,ebp
c001e6d7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001e6df:	89 e8                	mov    eax,ebp
c001e6e1:	c1 e0 06             	shl    eax,0x6
c001e6e4:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001e6ec:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001e6f0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e6f4:	c1 e0 04             	shl    eax,0x4
c001e6f7:	83 c8 a0             	or     eax,0xffffffa0
c001e6fa:	0f b6 c0             	movzx  eax,al
c001e6fd:	50                   	push   eax
c001e6fe:	6a 06                	push   0x6
c001e700:	56                   	push   esi
c001e701:	53                   	push   ebx
c001e702:	e8 63 f8 ff ff       	call   c001df6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e707:	83 c4 0c             	add    esp,0xc
c001e70a:	6a 0c                	push   0xc
c001e70c:	56                   	push   esi
c001e70d:	53                   	push   ebx
c001e70e:	e8 17 f9 ff ff       	call   c001e02a <IDE::read(unsigned char, unsigned char)>
c001e713:	83 c4 0c             	add    esp,0xc
c001e716:	6a 0c                	push   0xc
c001e718:	56                   	push   esi
c001e719:	53                   	push   ebx
c001e71a:	e8 0b f9 ff ff       	call   c001e02a <IDE::read(unsigned char, unsigned char)>
c001e71f:	83 c4 0c             	add    esp,0xc
c001e722:	6a 0c                	push   0xc
c001e724:	56                   	push   esi
c001e725:	53                   	push   ebx
c001e726:	e8 ff f8 ff ff       	call   c001e02a <IDE::read(unsigned char, unsigned char)>
c001e72b:	83 c4 0c             	add    esp,0xc
c001e72e:	6a 0c                	push   0xc
c001e730:	56                   	push   esi
c001e731:	53                   	push   ebx
c001e732:	e8 f3 f8 ff ff       	call   c001e02a <IDE::read(unsigned char, unsigned char)>
c001e737:	68 ec 00 00 00       	push   0xec
c001e73c:	6a 07                	push   0x7
c001e73e:	56                   	push   esi
c001e73f:	53                   	push   ebx
c001e740:	e8 25 f8 ff ff       	call   c001df6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e745:	83 c4 1c             	add    esp,0x1c
c001e748:	6a 0c                	push   0xc
c001e74a:	56                   	push   esi
c001e74b:	53                   	push   ebx
c001e74c:	e8 d9 f8 ff ff       	call   c001e02a <IDE::read(unsigned char, unsigned char)>
c001e751:	83 c4 0c             	add    esp,0xc
c001e754:	6a 0c                	push   0xc
c001e756:	56                   	push   esi
c001e757:	53                   	push   ebx
c001e758:	e8 cd f8 ff ff       	call   c001e02a <IDE::read(unsigned char, unsigned char)>
c001e75d:	83 c4 0c             	add    esp,0xc
c001e760:	6a 0c                	push   0xc
c001e762:	56                   	push   esi
c001e763:	53                   	push   ebx
c001e764:	e8 c1 f8 ff ff       	call   c001e02a <IDE::read(unsigned char, unsigned char)>
c001e769:	83 c4 0c             	add    esp,0xc
c001e76c:	6a 0c                	push   0xc
c001e76e:	56                   	push   esi
c001e76f:	53                   	push   ebx
c001e770:	e8 b5 f8 ff ff       	call   c001e02a <IDE::read(unsigned char, unsigned char)>
c001e775:	83 c4 0c             	add    esp,0xc
c001e778:	6a 0c                	push   0xc
c001e77a:	56                   	push   esi
c001e77b:	53                   	push   ebx
c001e77c:	e8 a9 f8 ff ff       	call   c001e02a <IDE::read(unsigned char, unsigned char)>
c001e781:	83 c4 10             	add    esp,0x10
c001e784:	84 c0                	test   al,al
c001e786:	0f 84 5f 01 00 00    	je     c001e8eb <IDE::detect()+0x23d>
c001e78c:	31 ff                	xor    edi,edi
c001e78e:	50                   	push   eax
c001e78f:	6a 0c                	push   0xc
c001e791:	56                   	push   esi
c001e792:	53                   	push   ebx
c001e793:	e8 92 f8 ff ff       	call   c001e02a <IDE::read(unsigned char, unsigned char)>
c001e798:	83 c4 10             	add    esp,0x10
c001e79b:	a8 01                	test   al,0x1
c001e79d:	0f 85 69 01 00 00    	jne    c001e90c <IDE::detect()+0x25e>
c001e7a3:	84 c0                	test   al,al
c001e7a5:	78 04                	js     c001e7ab <IDE::detect()+0xfd>
c001e7a7:	a8 08                	test   al,0x8
c001e7a9:	75 23                	jne    c001e7ce <IDE::detect()+0x120>
c001e7ab:	47                   	inc    edi
c001e7ac:	81 ff 17 01 00 00    	cmp    edi,0x117
c001e7b2:	7e da                	jle    c001e78e <IDE::detect()+0xe0>
c001e7b4:	83 ec 0c             	sub    esp,0xc
c001e7b7:	6a 32                	push   0x32
c001e7b9:	e8 a6 81 ff ff       	call   c0016964 <milliTenthSleep(unsigned int)>
c001e7be:	83 c4 10             	add    esp,0x10
c001e7c1:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001e7c7:	75 c5                	jne    c001e78e <IDE::detect()+0xe0>
c001e7c9:	e9 3e 01 00 00       	jmp    c001e90c <IDE::detect()+0x25e>
c001e7ce:	31 c9                	xor    ecx,ecx
c001e7d0:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001e7d4:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001e7d8:	83 ec 0c             	sub    esp,0xc
c001e7db:	68 80 00 00 00       	push   0x80
c001e7e0:	57                   	push   edi
c001e7e1:	6a 00                	push   0x0
c001e7e3:	56                   	push   esi
c001e7e4:	53                   	push   ebx
c001e7e5:	e8 f8 fd ff ff       	call   c001e5e2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001e7ea:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001e7ef:	89 e8                	mov    eax,ebp
c001e7f1:	89 d1                	mov    ecx,edx
c001e7f3:	c1 e0 06             	shl    eax,0x6
c001e7f6:	01 d8                	add    eax,ebx
c001e7f8:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001e7ff:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001e806:	89 f2                	mov    edx,esi
c001e808:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001e80e:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001e812:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001e818:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e81c:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001e823:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001e82b:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001e832:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001e83a:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001e840:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001e847:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001e84d:	8d 54 24 58          	lea    edx,[esp+0x58]
c001e851:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001e855:	83 c4 20             	add    esp,0x20
c001e858:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001e85b:	83 c0 02             	add    eax,0x2
c001e85e:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001e864:	83 c7 02             	add    edi,0x2
c001e867:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001e86a:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001e870:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001e874:	75 e2                	jne    c001e858 <IDE::detect()+0x1aa>
c001e876:	89 e8                	mov    eax,ebp
c001e878:	c1 e0 06             	shl    eax,0x6
c001e87b:	01 d8                	add    eax,ebx
c001e87d:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001e883:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001e88a:	66 c1 ea 09          	shr    dx,0x9
c001e88e:	83 e2 01             	and    edx,0x1
c001e891:	84 c9                	test   cl,cl
c001e893:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001e899:	75 22                	jne    c001e8bd <IDE::detect()+0x20f>
c001e89b:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001e8a2:	74 46                	je     c001e8ea <IDE::detect()+0x23c>
c001e8a4:	83 ec 0c             	sub    esp,0xc
c001e8a7:	68 7c 01 00 00       	push   0x17c
c001e8ac:	e8 ba b0 fe ff       	call   c000996b <malloc>
c001e8b1:	89 c7                	mov    edi,eax
c001e8b3:	89 04 24             	mov    DWORD PTR [esp],eax
c001e8b6:	e8 49 06 00 00       	call   c001ef04 <ATA::ATA()>
c001e8bb:	eb 17                	jmp    c001e8d4 <IDE::detect()+0x226>
c001e8bd:	83 ec 0c             	sub    esp,0xc
c001e8c0:	68 84 01 00 00       	push   0x184
c001e8c5:	e8 a1 b0 fe ff       	call   c000996b <malloc>
c001e8ca:	89 c7                	mov    edi,eax
c001e8cc:	89 04 24             	mov    DWORD PTR [esp],eax
c001e8cf:	e8 b8 0c 00 00       	call   c001f58c <ATAPI::ATAPI()>
c001e8d4:	5a                   	pop    edx
c001e8d5:	59                   	pop    ecx
c001e8d6:	57                   	push   edi
c001e8d7:	53                   	push   ebx
c001e8d8:	e8 19 f8 fe ff       	call   c000e0f6 <Device::addChild(Device*)>
c001e8dd:	8b 07                	mov    eax,DWORD PTR [edi]
c001e8df:	53                   	push   ebx
c001e8e0:	55                   	push   ebp
c001e8e1:	6a 00                	push   0x0
c001e8e3:	57                   	push   edi
c001e8e4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e8e7:	83 c4 20             	add    esp,0x20
c001e8ea:	45                   	inc    ebp
c001e8eb:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001e8f0:	74 0d                	je     c001e8ff <IDE::detect()+0x251>
c001e8f2:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001e8fa:	e9 e0 fd ff ff       	jmp    c001e6df <IDE::detect()+0x31>
c001e8ff:	4e                   	dec    esi
c001e900:	74 61                	je     c001e963 <IDE::detect()+0x2b5>
c001e902:	be 01 00 00 00       	mov    esi,0x1
c001e907:	e9 cb fd ff ff       	jmp    c001e6d7 <IDE::detect()+0x29>
c001e90c:	50                   	push   eax
c001e90d:	6a 04                	push   0x4
c001e90f:	56                   	push   esi
c001e910:	53                   	push   ebx
c001e911:	e8 14 f7 ff ff       	call   c001e02a <IDE::read(unsigned char, unsigned char)>
c001e916:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e91a:	83 c4 0c             	add    esp,0xc
c001e91d:	6a 05                	push   0x5
c001e91f:	56                   	push   esi
c001e920:	53                   	push   ebx
c001e921:	e8 04 f7 ff ff       	call   c001e02a <IDE::read(unsigned char, unsigned char)>
c001e926:	83 c4 10             	add    esp,0x10
c001e929:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001e92d:	80 fa 14             	cmp    dl,0x14
c001e930:	75 04                	jne    c001e936 <IDE::detect()+0x288>
c001e932:	3c eb                	cmp    al,0xeb
c001e934:	eb 07                	jmp    c001e93d <IDE::detect()+0x28f>
c001e936:	3c 96                	cmp    al,0x96
c001e938:	75 b1                	jne    c001e8eb <IDE::detect()+0x23d>
c001e93a:	80 fa 69             	cmp    dl,0x69
c001e93d:	75 ac                	jne    c001e8eb <IDE::detect()+0x23d>
c001e93f:	68 a1 00 00 00       	push   0xa1
c001e944:	6a 07                	push   0x7
c001e946:	56                   	push   esi
c001e947:	53                   	push   ebx
c001e948:	e8 1d f6 ff ff       	call   c001df6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e94d:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001e954:	e8 0b 80 ff ff       	call   c0016964 <milliTenthSleep(unsigned int)>
c001e959:	83 c4 10             	add    esp,0x10
c001e95c:	b1 01                	mov    cl,0x1
c001e95e:	e9 6d fe ff ff       	jmp    c001e7d0 <IDE::detect()+0x122>
c001e963:	81 c4 1c 02 00 00    	add    esp,0x21c
c001e969:	5b                   	pop    ebx
c001e96a:	5e                   	pop    esi
c001e96b:	5f                   	pop    edi
c001e96c:	5d                   	pop    ebp
c001e96d:	c3                   	ret    

c001e96e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001e96e:	55                   	push   ebp
c001e96f:	57                   	push   edi
c001e970:	56                   	push   esi
c001e971:	53                   	push   ebx
c001e972:	83 ec 1c             	sub    esp,0x1c
c001e975:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e979:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e97d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e981:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001e985:	88 c3                	mov    bl,al
c001e987:	84 c0                	test   al,al
c001e989:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e98d:	0f 84 81 00 00 00    	je     c001ea14 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e993:	83 ec 0c             	sub    esp,0xc
c001e996:	68 2b 55 02 c0       	push   0xc002552b
c001e99b:	e8 d9 e2 fe ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001e9a0:	83 c4 10             	add    esp,0x10
c001e9a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e9a7:	3c 01                	cmp    al,0x1
c001e9a9:	74 63                	je     c001ea0e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001e9ab:	3c 02                	cmp    al,0x2
c001e9ad:	75 53                	jne    c001ea02 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001e9af:	d1 e6                	shl    esi,1
c001e9b1:	09 ee                	or     esi,ebp
c001e9b3:	50                   	push   eax
c001e9b4:	89 f0                	mov    eax,esi
c001e9b6:	6a 01                	push   0x1
c001e9b8:	0f b6 f0             	movzx  esi,al
c001e9bb:	c1 e6 06             	shl    esi,0x6
c001e9be:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001e9c6:	50                   	push   eax
c001e9c7:	57                   	push   edi
c001e9c8:	e8 5d f6 ff ff       	call   c001e02a <IDE::read(unsigned char, unsigned char)>
c001e9cd:	83 c4 10             	add    esp,0x10
c001e9d0:	a8 01                	test   al,0x1
c001e9d2:	74 02                	je     c001e9d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001e9d4:	b3 07                	mov    bl,0x7
c001e9d6:	a8 02                	test   al,0x2
c001e9d8:	74 02                	je     c001e9dc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001e9da:	b3 03                	mov    bl,0x3
c001e9dc:	a8 04                	test   al,0x4
c001e9de:	74 02                	je     c001e9e2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001e9e0:	b3 14                	mov    bl,0x14
c001e9e2:	a8 08                	test   al,0x8
c001e9e4:	74 02                	je     c001e9e8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001e9e6:	b3 03                	mov    bl,0x3
c001e9e8:	a8 10                	test   al,0x10
c001e9ea:	74 02                	je     c001e9ee <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001e9ec:	b3 15                	mov    bl,0x15
c001e9ee:	a8 20                	test   al,0x20
c001e9f0:	74 02                	je     c001e9f4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001e9f2:	b3 03                	mov    bl,0x3
c001e9f4:	a8 40                	test   al,0x40
c001e9f6:	74 02                	je     c001e9fa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001e9f8:	b3 16                	mov    bl,0x16
c001e9fa:	84 c0                	test   al,al
c001e9fc:	79 16                	jns    c001ea14 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e9fe:	b3 0d                	mov    bl,0xd
c001ea00:	eb 12                	jmp    c001ea14 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ea02:	3c 03                	cmp    al,0x3
c001ea04:	74 0c                	je     c001ea12 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001ea06:	3c 04                	cmp    al,0x4
c001ea08:	75 0a                	jne    c001ea14 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ea0a:	b3 08                	mov    bl,0x8
c001ea0c:	eb 06                	jmp    c001ea14 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ea0e:	b3 13                	mov    bl,0x13
c001ea10:	eb 02                	jmp    c001ea14 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ea12:	b3 17                	mov    bl,0x17
c001ea14:	83 c4 1c             	add    esp,0x1c
c001ea17:	88 d8                	mov    al,bl
c001ea19:	5b                   	pop    ebx
c001ea1a:	5e                   	pop    esi
c001ea1b:	5f                   	pop    edi
c001ea1c:	5d                   	pop    ebp
c001ea1d:	c3                   	ret    

c001ea1e <IDE::polling(unsigned char, unsigned int)>:
c001ea1e:	57                   	push   edi
c001ea1f:	56                   	push   esi
c001ea20:	53                   	push   ebx
c001ea21:	bb 04 00 00 00       	mov    ebx,0x4
c001ea26:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001ea2a:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001ea2f:	52                   	push   edx
c001ea30:	6a 0c                	push   0xc
c001ea32:	56                   	push   esi
c001ea33:	57                   	push   edi
c001ea34:	e8 f1 f5 ff ff       	call   c001e02a <IDE::read(unsigned char, unsigned char)>
c001ea39:	83 c4 10             	add    esp,0x10
c001ea3c:	4b                   	dec    ebx
c001ea3d:	75 f0                	jne    c001ea2f <IDE::polling(unsigned char, unsigned int)+0x11>
c001ea3f:	bb a0 86 01 00       	mov    ebx,0x186a0
c001ea44:	50                   	push   eax
c001ea45:	6a 0c                	push   0xc
c001ea47:	56                   	push   esi
c001ea48:	57                   	push   edi
c001ea49:	e8 dc f5 ff ff       	call   c001e02a <IDE::read(unsigned char, unsigned char)>
c001ea4e:	83 c4 10             	add    esp,0x10
c001ea51:	a8 01                	test   al,0x1
c001ea53:	75 17                	jne    c001ea6c <IDE::polling(unsigned char, unsigned int)+0x4e>
c001ea55:	a8 20                	test   al,0x20
c001ea57:	75 0f                	jne    c001ea68 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001ea59:	4b                   	dec    ebx
c001ea5a:	74 10                	je     c001ea6c <IDE::polling(unsigned char, unsigned int)+0x4e>
c001ea5c:	84 c0                	test   al,al
c001ea5e:	78 e4                	js     c001ea44 <IDE::polling(unsigned char, unsigned int)+0x26>
c001ea60:	a8 08                	test   al,0x8
c001ea62:	74 e0                	je     c001ea44 <IDE::polling(unsigned char, unsigned int)+0x26>
c001ea64:	31 c0                	xor    eax,eax
c001ea66:	eb 06                	jmp    c001ea6e <IDE::polling(unsigned char, unsigned int)+0x50>
c001ea68:	b0 01                	mov    al,0x1
c001ea6a:	eb 02                	jmp    c001ea6e <IDE::polling(unsigned char, unsigned int)+0x50>
c001ea6c:	b0 02                	mov    al,0x2
c001ea6e:	5b                   	pop    ebx
c001ea6f:	5e                   	pop    esi
c001ea70:	5f                   	pop    edi
c001ea71:	c3                   	ret    

c001ea72 <SATABus::close(int, int, void*)>:
c001ea72:	31 c0                	xor    eax,eax
c001ea74:	c3                   	ret    
c001ea75:	90                   	nop

c001ea76 <SATABus::detect()>:
c001ea76:	c3                   	ret    
c001ea77:	90                   	nop

c001ea78 <SATABus::SATABus()>:
c001ea78:	83 ec 0c             	sub    esp,0xc
c001ea7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea7f:	83 ec 08             	sub    esp,0x8
c001ea82:	68 64 55 02 c0       	push   0xc0025564
c001ea87:	50                   	push   eax
c001ea88:	e8 17 fa fe ff       	call   c000e4a4 <HardDiskController::HardDiskController(char const*)>
c001ea8d:	83 c4 10             	add    esp,0x10
c001ea90:	ba 0c 56 02 c0       	mov    edx,0xc002560c
c001ea95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea99:	89 10                	mov    DWORD PTR [eax],edx
c001ea9b:	83 ec 0c             	sub    esp,0xc
c001ea9e:	6a 50                	push   0x50
c001eaa0:	e8 68 b6 fe ff       	call   c000a10d <Phys::allocateContiguousPages(int)>
c001eaa5:	83 c4 10             	add    esp,0x10
c001eaa8:	89 c2                	mov    edx,eax
c001eaaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaae:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001eab4:	83 ec 0c             	sub    esp,0xc
c001eab7:	6a 50                	push   0x50
c001eab9:	e8 5f ce fe ff       	call   c000b91d <Virt::allocateKernelVirtualPages(int)>
c001eabe:	83 c4 10             	add    esp,0x10
c001eac1:	89 c2                	mov    edx,eax
c001eac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eac7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eacd:	a1 b4 67 02 c0       	mov    eax,ds:0xc00267b4
c001ead2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ead6:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001eadc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eae0:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001eae6:	83 ec 0c             	sub    esp,0xc
c001eae9:	6a 03                	push   0x3
c001eaeb:	6a 50                	push   0x50
c001eaed:	51                   	push   ecx
c001eaee:	52                   	push   edx
c001eaef:	50                   	push   eax
c001eaf0:	e8 8b d7 fe ff       	call   c000c280 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001eaf5:	83 c4 20             	add    esp,0x20
c001eaf8:	90                   	nop
c001eaf9:	83 c4 0c             	add    esp,0xc
c001eafc:	c3                   	ret    
c001eafd:	90                   	nop

c001eafe <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001eafe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eb02:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001eb05:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001eb08:	09 c2                	or     edx,eax
c001eb0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb0e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001eb14:	8b 08                	mov    ecx,DWORD PTR [eax]
c001eb16:	31 c0                	xor    eax,eax
c001eb18:	c1 e9 08             	shr    ecx,0x8
c001eb1b:	83 e1 0f             	and    ecx,0xf
c001eb1e:	39 c8                	cmp    eax,ecx
c001eb20:	74 0a                	je     c001eb2c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001eb22:	f6 c2 01             	test   dl,0x1
c001eb25:	74 08                	je     c001eb2f <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001eb27:	d1 ea                	shr    edx,1
c001eb29:	40                   	inc    eax
c001eb2a:	eb f2                	jmp    c001eb1e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001eb2c:	83 c8 ff             	or     eax,0xffffffff
c001eb2f:	c3                   	ret    

c001eb30 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001eb30:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001eb34:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001eb37:	89 c2                	mov    edx,eax
c001eb39:	c1 ea 08             	shr    edx,0x8
c001eb3c:	83 e2 0f             	and    edx,0xf
c001eb3f:	fe ca                	dec    dl
c001eb41:	75 31                	jne    c001eb74 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001eb43:	83 e0 0f             	and    eax,0xf
c001eb46:	3c 03                	cmp    al,0x3
c001eb48:	75 2a                	jne    c001eb74 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001eb4a:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001eb4d:	b8 02 00 00 00       	mov    eax,0x2
c001eb52:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001eb58:	74 1c                	je     c001eb76 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001eb5a:	b8 04 00 00 00       	mov    eax,0x4
c001eb5f:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001eb65:	74 0f                	je     c001eb76 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001eb67:	31 c0                	xor    eax,eax
c001eb69:	83 fa 03             	cmp    edx,0x3
c001eb6c:	0f 94 c0             	sete   al
c001eb6f:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001eb73:	c3                   	ret    
c001eb74:	31 c0                	xor    eax,eax
c001eb76:	c3                   	ret    
c001eb77:	90                   	nop

c001eb78 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001eb78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eb7c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001eb7f:	0f ba e2 0f          	bt     edx,0xf
c001eb83:	72 f7                	jb     c001eb7c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001eb85:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001eb88:	83 ca 10             	or     edx,0x10
c001eb8b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001eb8e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001eb91:	83 ca 01             	or     edx,0x1
c001eb94:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001eb97:	c3                   	ret    

c001eb98 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001eb98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eb9c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001eb9f:	83 e2 fe             	and    edx,0xfffffffe
c001eba2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001eba5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001eba8:	83 e2 ef             	and    edx,0xffffffef
c001ebab:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ebae:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ebb1:	0f ba e2 0e          	bt     edx,0xe
c001ebb5:	72 f7                	jb     c001ebae <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001ebb7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ebba:	0f ba e2 0f          	bt     edx,0xf
c001ebbe:	72 ee                	jb     c001ebae <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001ebc0:	c3                   	ret    
c001ebc1:	90                   	nop

c001ebc2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001ebc2:	55                   	push   ebp
c001ebc3:	57                   	push   edi
c001ebc4:	56                   	push   esi
c001ebc5:	53                   	push   ebx
c001ebc6:	83 ec 1c             	sub    esp,0x1c
c001ebc9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ebcd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ebd1:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001ebd5:	53                   	push   ebx
c001ebd6:	89 fd                	mov    ebp,edi
c001ebd8:	56                   	push   esi
c001ebd9:	c1 e5 0a             	shl    ebp,0xa
c001ebdc:	e8 b7 ff ff ff       	call   c001eb98 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001ebe1:	83 ec 0c             	sub    esp,0xc
c001ebe4:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001ebea:	01 e8                	add    eax,ebp
c001ebec:	89 03                	mov    DWORD PTR [ebx],eax
c001ebee:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ebf0:	68 00 04 00 00       	push   0x400
c001ebf5:	6a 00                	push   0x0
c001ebf7:	50                   	push   eax
c001ebf8:	e8 7f 1a fe ff       	call   c000067c <memset>
c001ebfd:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001ec03:	89 fa                	mov    edx,edi
c001ec05:	01 e8                	add    eax,ebp
c001ec07:	c1 e7 0d             	shl    edi,0xd
c001ec0a:	89 03                	mov    DWORD PTR [ebx],eax
c001ec0c:	c1 e2 08             	shl    edx,0x8
c001ec0f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ec16:	81 c2 00 80 00 00    	add    edx,0x8000
c001ec1c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001ec20:	89 d0                	mov    eax,edx
c001ec22:	83 c4 1c             	add    esp,0x1c
c001ec25:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001ec2b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ec2e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001ec31:	68 00 01 00 00       	push   0x100
c001ec36:	6a 00                	push   0x0
c001ec38:	50                   	push   eax
c001ec39:	e8 3e 1a fe ff       	call   c000067c <memset>
c001ec3e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ec42:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001ec48:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001ec4e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ec52:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001ec55:	83 c4 10             	add    esp,0x10
c001ec58:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ec5f:	31 ff                	xor    edi,edi
c001ec61:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001ec67:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001ec6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ec71:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001ec77:	83 c5 20             	add    ebp,0x20
c001ec7a:	01 f8                	add    eax,edi
c001ec7c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ec7f:	52                   	push   edx
c001ec80:	68 00 01 00 00       	push   0x100
c001ec85:	6a 00                	push   0x0
c001ec87:	50                   	push   eax
c001ec88:	e8 ef 19 fe ff       	call   c000067c <memset>
c001ec8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ec91:	83 c4 10             	add    esp,0x10
c001ec94:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001ec9a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001eca1:	01 f8                	add    eax,edi
c001eca3:	81 c7 00 01 00 00    	add    edi,0x100
c001eca9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ecac:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001ecb2:	75 b3                	jne    c001ec67 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001ecb4:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001ecb8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001ecbc:	83 c4 1c             	add    esp,0x1c
c001ecbf:	5b                   	pop    ebx
c001ecc0:	5e                   	pop    esi
c001ecc1:	5f                   	pop    edi
c001ecc2:	5d                   	pop    ebp
c001ecc3:	e9 b0 fe ff ff       	jmp    c001eb78 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001ecc8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001ecc8:	55                   	push   ebp
c001ecc9:	57                   	push   edi
c001ecca:	56                   	push   esi
c001eccb:	53                   	push   ebx
c001eccc:	83 ec 0c             	sub    esp,0xc
c001eccf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ecd3:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c001ecda:	74 2d                	je     c001ed09 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001ecdc:	83 ec 0c             	sub    esp,0xc
c001ecdf:	68 88 55 02 c0       	push   0xc0025588
c001ece4:	e8 dc ac fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c001ece9:	83 c4 10             	add    esp,0x10
c001ecec:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c001ecf3:	75 14                	jne    c001ed09 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001ecf5:	e4 60                	in     al,0x60
c001ecf7:	3c 1c                	cmp    al,0x1c
c001ecf9:	74 04                	je     c001ecff <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001ecfb:	3c 5a                	cmp    al,0x5a
c001ecfd:	75 f6                	jne    c001ecf5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2d>
c001ecff:	e4 60                	in     al,0x60
c001ed01:	3c 5a                	cmp    al,0x5a
c001ed03:	74 fa                	je     c001ecff <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001ed05:	3c 1c                	cmp    al,0x1c
c001ed07:	74 f6                	je     c001ecff <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001ed09:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ed0d:	31 db                	xor    ebx,ebx
c001ed0f:	8b 68 0c             	mov    ebp,DWORD PTR [eax+0xc]
c001ed12:	f7 c5 01 00 00 00    	test   ebp,0x1
c001ed18:	0f 84 78 01 00 00    	je     c001ee96 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001ed1e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ed22:	89 d8                	mov    eax,ebx
c001ed24:	c1 e0 07             	shl    eax,0x7
c001ed27:	8d bc 02 00 01 00 00 	lea    edi,[edx+eax*1+0x100]
c001ed2e:	50                   	push   eax
c001ed2f:	50                   	push   eax
c001ed30:	57                   	push   edi
c001ed31:	56                   	push   esi
c001ed32:	e8 f9 fd ff ff       	call   c001eb30 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001ed37:	83 c4 10             	add    esp,0x10
c001ed3a:	83 f8 01             	cmp    eax,0x1
c001ed3d:	0f 85 19 01 00 00    	jne    c001ee5c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x194>
c001ed43:	50                   	push   eax
c001ed44:	53                   	push   ebx
c001ed45:	57                   	push   edi
c001ed46:	56                   	push   esi
c001ed47:	e8 76 fe ff ff       	call   c001ebc2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ed4c:	83 c4 10             	add    esp,0x10
c001ed4f:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c001ed56:	74 2d                	je     c001ed85 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001ed58:	83 ec 0c             	sub    esp,0xc
c001ed5b:	68 9d 55 02 c0       	push   0xc002559d
c001ed60:	e8 60 ac fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c001ed65:	83 c4 10             	add    esp,0x10
c001ed68:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c001ed6f:	75 14                	jne    c001ed85 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001ed71:	e4 60                	in     al,0x60
c001ed73:	3c 1c                	cmp    al,0x1c
c001ed75:	74 04                	je     c001ed7b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001ed77:	3c 5a                	cmp    al,0x5a
c001ed79:	75 f6                	jne    c001ed71 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa9>
c001ed7b:	e4 60                	in     al,0x60
c001ed7d:	3c 5a                	cmp    al,0x5a
c001ed7f:	74 fa                	je     c001ed7b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001ed81:	3c 1c                	cmp    al,0x1c
c001ed83:	74 f6                	je     c001ed7b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001ed85:	83 ec 0c             	sub    esp,0xc
c001ed88:	68 7c 01 00 00       	push   0x17c
c001ed8d:	e8 d9 ab fe ff       	call   c000996b <malloc>
c001ed92:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed95:	89 c7                	mov    edi,eax
c001ed97:	e8 28 10 00 00       	call   c001fdc4 <SATA::SATA()>
c001ed9c:	83 c4 10             	add    esp,0x10
c001ed9f:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c001eda6:	74 2d                	je     c001edd5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001eda8:	83 ec 0c             	sub    esp,0xc
c001edab:	68 b2 55 02 c0       	push   0xc00255b2
c001edb0:	e8 10 ac fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c001edb5:	83 c4 10             	add    esp,0x10
c001edb8:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c001edbf:	75 14                	jne    c001edd5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001edc1:	e4 60                	in     al,0x60
c001edc3:	3c 5a                	cmp    al,0x5a
c001edc5:	74 04                	je     c001edcb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001edc7:	3c 1c                	cmp    al,0x1c
c001edc9:	75 f6                	jne    c001edc1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xf9>
c001edcb:	e4 60                	in     al,0x60
c001edcd:	3c 5a                	cmp    al,0x5a
c001edcf:	74 fa                	je     c001edcb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001edd1:	3c 1c                	cmp    al,0x1c
c001edd3:	74 f6                	je     c001edcb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001edd5:	50                   	push   eax
c001edd6:	50                   	push   eax
c001edd7:	57                   	push   edi
c001edd8:	56                   	push   esi
c001edd9:	e8 18 f3 fe ff       	call   c000e0f6 <Device::addChild(Device*)>
c001edde:	83 c4 10             	add    esp,0x10
c001ede1:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c001ede8:	74 2d                	je     c001ee17 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001edea:	83 ec 0c             	sub    esp,0xc
c001eded:	68 c7 55 02 c0       	push   0xc00255c7
c001edf2:	e8 ce ab fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c001edf7:	83 c4 10             	add    esp,0x10
c001edfa:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c001ee01:	75 14                	jne    c001ee17 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001ee03:	e4 60                	in     al,0x60
c001ee05:	3c 1c                	cmp    al,0x1c
c001ee07:	74 04                	je     c001ee0d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001ee09:	3c 5a                	cmp    al,0x5a
c001ee0b:	75 f6                	jne    c001ee03 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x13b>
c001ee0d:	e4 60                	in     al,0x60
c001ee0f:	3c 5a                	cmp    al,0x5a
c001ee11:	74 fa                	je     c001ee0d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001ee13:	3c 1c                	cmp    al,0x1c
c001ee15:	74 f6                	je     c001ee0d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001ee17:	8b 07                	mov    eax,DWORD PTR [edi]
c001ee19:	56                   	push   esi
c001ee1a:	6a 00                	push   0x0
c001ee1c:	53                   	push   ebx
c001ee1d:	57                   	push   edi
c001ee1e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ee21:	83 c4 10             	add    esp,0x10
c001ee24:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c001ee2b:	74 69                	je     c001ee96 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001ee2d:	83 ec 0c             	sub    esp,0xc
c001ee30:	68 dc 55 02 c0       	push   0xc00255dc
c001ee35:	e8 8b ab fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c001ee3a:	83 c4 10             	add    esp,0x10
c001ee3d:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c001ee44:	75 50                	jne    c001ee96 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001ee46:	e4 60                	in     al,0x60
c001ee48:	3c 1c                	cmp    al,0x1c
c001ee4a:	74 04                	je     c001ee50 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001ee4c:	3c 5a                	cmp    al,0x5a
c001ee4e:	75 f6                	jne    c001ee46 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x17e>
c001ee50:	e4 60                	in     al,0x60
c001ee52:	3c 5a                	cmp    al,0x5a
c001ee54:	74 fa                	je     c001ee50 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001ee56:	3c 1c                	cmp    al,0x1c
c001ee58:	74 f6                	je     c001ee50 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001ee5a:	eb 3a                	jmp    c001ee96 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001ee5c:	83 f8 04             	cmp    eax,0x4
c001ee5f:	75 35                	jne    c001ee96 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001ee61:	50                   	push   eax
c001ee62:	53                   	push   ebx
c001ee63:	57                   	push   edi
c001ee64:	56                   	push   esi
c001ee65:	e8 58 fd ff ff       	call   c001ebc2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ee6a:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001ee71:	e8 f5 aa fe ff       	call   c000996b <malloc>
c001ee76:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee79:	89 c7                	mov    edi,eax
c001ee7b:	e8 ba 17 00 00       	call   c002063a <SATAPI::SATAPI()>
c001ee80:	5a                   	pop    edx
c001ee81:	59                   	pop    ecx
c001ee82:	57                   	push   edi
c001ee83:	56                   	push   esi
c001ee84:	e8 6d f2 fe ff       	call   c000e0f6 <Device::addChild(Device*)>
c001ee89:	8b 07                	mov    eax,DWORD PTR [edi]
c001ee8b:	56                   	push   esi
c001ee8c:	6a 00                	push   0x0
c001ee8e:	53                   	push   ebx
c001ee8f:	57                   	push   edi
c001ee90:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ee93:	83 c4 20             	add    esp,0x20
c001ee96:	d1 ed                	shr    ebp,1
c001ee98:	43                   	inc    ebx
c001ee99:	83 fb 20             	cmp    ebx,0x20
c001ee9c:	0f 85 70 fe ff ff    	jne    c001ed12 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x4a>
c001eea2:	83 c4 0c             	add    esp,0xc
c001eea5:	5b                   	pop    ebx
c001eea6:	5e                   	pop    esi
c001eea7:	5f                   	pop    edi
c001eea8:	5d                   	pop    ebp
c001eea9:	c3                   	ret    

c001eeaa <SATABus::open(int, int, void*)>:
c001eeaa:	53                   	push   ebx
c001eeab:	83 ec 10             	sub    esp,0x10
c001eeae:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001eeb2:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001eeb8:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001eebe:	50                   	push   eax
c001eebf:	68 f1 55 02 c0       	push   0xc00255f1
c001eec4:	e8 b0 dd fe ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001eec9:	58                   	pop    eax
c001eeca:	5a                   	pop    edx
c001eecb:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001eed1:	53                   	push   ebx
c001eed2:	e8 f1 fd ff ff       	call   c001ecc8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001eed7:	31 c0                	xor    eax,eax
c001eed9:	83 c4 18             	add    esp,0x18
c001eedc:	5b                   	pop    ebx
c001eedd:	c3                   	ret    

c001eede <ATA::close(int, int, void*)>:
c001eede:	83 ec 0c             	sub    esp,0xc
c001eee1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eee5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001eeeb:	85 c0                	test   eax,eax
c001eeed:	74 0c                	je     c001eefb <ATA::close(int, int, void*)+0x1d>
c001eeef:	83 ec 0c             	sub    esp,0xc
c001eef2:	8b 10                	mov    edx,DWORD PTR [eax]
c001eef4:	50                   	push   eax
c001eef5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001eef8:	83 c4 10             	add    esp,0x10
c001eefb:	31 c0                	xor    eax,eax
c001eefd:	83 c4 0c             	add    esp,0xc
c001ef00:	c3                   	ret    
c001ef01:	90                   	nop

c001ef02 <ATA::powerSaving(PowerSavingLevel)>:
c001ef02:	c3                   	ret    
c001ef03:	90                   	nop

c001ef04 <ATA::ATA()>:
c001ef04:	83 ec 0c             	sub    esp,0xc
c001ef07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef0b:	83 ec 04             	sub    esp,0x4
c001ef0e:	68 00 02 00 00       	push   0x200
c001ef13:	68 8f 57 02 c0       	push   0xc002578f
c001ef18:	50                   	push   eax
c001ef19:	e8 10 f6 fe ff       	call   c000e52e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ef1e:	83 c4 10             	add    esp,0x10
c001ef21:	ba 84 56 02 c0       	mov    edx,0xc0025684
c001ef26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef2a:	89 10                	mov    DWORD PTR [eax],edx
c001ef2c:	90                   	nop
c001ef2d:	83 c4 0c             	add    esp,0xc
c001ef30:	c3                   	ret    
c001ef31:	90                   	nop

c001ef32 <ATA::flush(bool)>:
c001ef32:	53                   	push   ebx
c001ef33:	83 ec 08             	sub    esp,0x8
c001ef36:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001ef3b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ef3f:	19 c0                	sbb    eax,eax
c001ef41:	83 e0 fd             	and    eax,0xfffffffd
c001ef44:	05 ea 00 00 00       	add    eax,0xea
c001ef49:	50                   	push   eax
c001ef4a:	6a 07                	push   0x7
c001ef4c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ef53:	50                   	push   eax
c001ef54:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ef5a:	e8 0b f0 ff ff       	call   c001df6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ef5f:	83 c4 0c             	add    esp,0xc
c001ef62:	6a 00                	push   0x0
c001ef64:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ef6b:	50                   	push   eax
c001ef6c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ef72:	e8 a7 fa ff ff       	call   c001ea1e <IDE::polling(unsigned char, unsigned int)>
c001ef77:	83 c4 18             	add    esp,0x18
c001ef7a:	5b                   	pop    ebx
c001ef7b:	c3                   	ret    

c001ef7c <ATA::readyForCommand()>:
c001ef7c:	56                   	push   esi
c001ef7d:	53                   	push   ebx
c001ef7e:	53                   	push   ebx
c001ef7f:	31 db                	xor    ebx,ebx
c001ef81:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ef85:	51                   	push   ecx
c001ef86:	6a 0c                	push   0xc
c001ef88:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ef8f:	50                   	push   eax
c001ef90:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ef96:	e8 8f f0 ff ff       	call   c001e02a <IDE::read(unsigned char, unsigned char)>
c001ef9b:	83 c4 10             	add    esp,0x10
c001ef9e:	a8 88                	test   al,0x88
c001efa0:	74 1f                	je     c001efc1 <ATA::readyForCommand()+0x45>
c001efa2:	43                   	inc    ebx
c001efa3:	83 fb 63             	cmp    ebx,0x63
c001efa6:	7e dd                	jle    c001ef85 <ATA::readyForCommand()+0x9>
c001efa8:	83 ec 0c             	sub    esp,0xc
c001efab:	6a 0a                	push   0xa
c001efad:	e8 b2 79 ff ff       	call   c0016964 <milliTenthSleep(unsigned int)>
c001efb2:	83 c4 10             	add    esp,0x10
c001efb5:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001efbb:	75 c8                	jne    c001ef85 <ATA::readyForCommand()+0x9>
c001efbd:	31 c0                	xor    eax,eax
c001efbf:	eb 02                	jmp    c001efc3 <ATA::readyForCommand()+0x47>
c001efc1:	b0 01                	mov    al,0x1
c001efc3:	5a                   	pop    edx
c001efc4:	5b                   	pop    ebx
c001efc5:	5e                   	pop    esi
c001efc6:	c3                   	ret    
c001efc7:	90                   	nop

c001efc8 <ATA::access(unsigned long long, int, void*, bool)>:
c001efc8:	55                   	push   ebp
c001efc9:	57                   	push   edi
c001efca:	56                   	push   esi
c001efcb:	53                   	push   ebx
c001efcc:	83 ec 38             	sub    esp,0x38
c001efcf:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001efd3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001efd7:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001efdb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001efdf:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001efe3:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001efe7:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001efeb:	68 30 56 02 c0       	push   0xc0025630
c001eff0:	e8 84 dc fe ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001eff5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001effb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001efff:	83 c4 10             	add    esp,0x10
c001f002:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f008:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f00c:	c1 e0 06             	shl    eax,0x6
c001f00f:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001f017:	74 5d                	je     c001f076 <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001f019:	89 fa                	mov    edx,edi
c001f01b:	89 f0                	mov    eax,esi
c001f01d:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001f021:	c1 ea 1c             	shr    edx,0x1c
c001f024:	89 d1                	mov    ecx,edx
c001f026:	09 c1                	or     ecx,eax
c001f028:	74 25                	je     c001f04f <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001f02a:	31 ed                	xor    ebp,ebp
c001f02c:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001f033:	89 fa                	mov    edx,edi
c001f035:	89 f0                	mov    eax,esi
c001f037:	0f ad d0             	shrd   eax,edx,cl
c001f03a:	d3 ea                	shr    edx,cl
c001f03c:	f6 c1 20             	test   cl,0x20
c001f03f:	74 02                	je     c001f043 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001f041:	89 d0                	mov    eax,edx
c001f043:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001f047:	45                   	inc    ebp
c001f048:	83 fd 06             	cmp    ebp,0x6
c001f04b:	75 df                	jne    c001f02c <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001f04d:	eb 76                	jmp    c001f0c5 <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001f04f:	89 f0                	mov    eax,esi
c001f051:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001f056:	89 fa                	mov    edx,edi
c001f058:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f05f:	0f ac d0 10          	shrd   eax,edx,0x10
c001f063:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f068:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001f06c:	c1 ee 18             	shr    esi,0x18
c001f06f:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f074:	eb 56                	jmp    c001f0cc <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001f076:	6a 00                	push   0x0
c001f078:	6a 3f                	push   0x3f
c001f07a:	57                   	push   edi
c001f07b:	56                   	push   esi
c001f07c:	e8 cf 27 00 00       	call   c0021850 <__umoddi3>
c001f081:	83 c4 10             	add    esp,0x10
c001f084:	40                   	inc    eax
c001f085:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001f089:	6a 00                	push   0x0
c001f08b:	68 f0 03 00 00       	push   0x3f0
c001f090:	57                   	push   edi
c001f091:	56                   	push   esi
c001f092:	e8 b9 26 00 00       	call   c0021750 <__udivdi3>
c001f097:	83 c4 10             	add    esp,0x10
c001f09a:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001f09f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f0a6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f0ab:	6a 00                	push   0x0
c001f0ad:	6a 3f                	push   0x3f
c001f0af:	57                   	push   edi
c001f0b0:	56                   	push   esi
c001f0b1:	e8 9a 26 00 00       	call   c0021750 <__udivdi3>
c001f0b6:	83 c4 10             	add    esp,0x10
c001f0b9:	89 c6                	mov    esi,eax
c001f0bb:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f0c0:	83 e6 0f             	and    esi,0xf
c001f0c3:	eb 07                	jmp    c001f0cc <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001f0c5:	31 f6                	xor    esi,esi
c001f0c7:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001f0cc:	bf 01 00 00 00       	mov    edi,0x1
c001f0d1:	50                   	push   eax
c001f0d2:	6a 00                	push   0x0
c001f0d4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f0db:	50                   	push   eax
c001f0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f0e0:	e8 8d f0 ff ff       	call   c001e172 <IDE::enableIRQs(unsigned char, bool)>
c001f0e5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f0e8:	e8 8f fe ff ff       	call   c001ef7c <ATA::readyForCommand()>
c001f0ed:	83 c4 10             	add    esp,0x10
c001f0f0:	84 c0                	test   al,al
c001f0f2:	0f 84 bc 02 00 00    	je     c001f3b4 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001f0f8:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f0fe:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f104:	c1 e0 04             	shl    eax,0x4
c001f107:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001f10e:	09 c6                	or     esi,eax
c001f110:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f115:	75 05                	jne    c001f11c <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001f117:	83 ce a0             	or     esi,0xffffffa0
c001f11a:	eb 03                	jmp    c001f11f <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001f11c:	83 ce e0             	or     esi,0xffffffe0
c001f11f:	89 f0                	mov    eax,esi
c001f121:	0f b6 f0             	movzx  esi,al
c001f124:	56                   	push   esi
c001f125:	6a 06                	push   0x6
c001f127:	51                   	push   ecx
c001f128:	52                   	push   edx
c001f129:	e8 3c ee ff ff       	call   c001df6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f12e:	83 c4 10             	add    esp,0x10
c001f131:	6a 00                	push   0x0
c001f133:	6a 01                	push   0x1
c001f135:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f13c:	50                   	push   eax
c001f13d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f143:	e8 22 ee ff ff       	call   c001df6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f148:	83 c4 10             	add    esp,0x10
c001f14b:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001f150:	75 6e                	jne    c001f1c0 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001f152:	6a 00                	push   0x0
c001f154:	6a 08                	push   0x8
c001f156:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f15d:	50                   	push   eax
c001f15e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f164:	e8 01 ee ff ff       	call   c001df6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f169:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001f16e:	50                   	push   eax
c001f16f:	6a 09                	push   0x9
c001f171:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f178:	50                   	push   eax
c001f179:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f17f:	e8 e6 ed ff ff       	call   c001df6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f184:	83 c4 20             	add    esp,0x20
c001f187:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001f18c:	50                   	push   eax
c001f18d:	6a 0a                	push   0xa
c001f18f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f196:	50                   	push   eax
c001f197:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f19d:	e8 c8 ed ff ff       	call   c001df6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f1a2:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001f1a7:	50                   	push   eax
c001f1a8:	6a 0b                	push   0xb
c001f1aa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f1b1:	50                   	push   eax
c001f1b2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f1b8:	e8 ad ed ff ff       	call   c001df6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f1bd:	83 c4 20             	add    esp,0x20
c001f1c0:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001f1c5:	50                   	push   eax
c001f1c6:	6a 02                	push   0x2
c001f1c8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f1cf:	50                   	push   eax
c001f1d0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f1d6:	e8 8f ed ff ff       	call   c001df6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f1db:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001f1e0:	50                   	push   eax
c001f1e1:	6a 03                	push   0x3
c001f1e3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f1ea:	50                   	push   eax
c001f1eb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f1f1:	e8 74 ed ff ff       	call   c001df6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f1f6:	83 c4 20             	add    esp,0x20
c001f1f9:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001f1fe:	50                   	push   eax
c001f1ff:	6a 04                	push   0x4
c001f201:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f208:	50                   	push   eax
c001f209:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f20f:	e8 56 ed ff ff       	call   c001df6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f214:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f219:	50                   	push   eax
c001f21a:	6a 05                	push   0x5
c001f21c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f223:	50                   	push   eax
c001f224:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f22a:	e8 3b ed ff ff       	call   c001df6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f22f:	83 c4 20             	add    esp,0x20
c001f232:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001f237:	0f 94 c0             	sete   al
c001f23a:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f23f:	74 09                	je     c001f24a <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001f241:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001f248:	eb 07                	jmp    c001f251 <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001f24a:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001f251:	0f b6 c0             	movzx  eax,al
c001f254:	50                   	push   eax
c001f255:	6a 07                	push   0x7
c001f257:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f25e:	50                   	push   eax
c001f25f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f265:	e8 00 ed ff ff       	call   c001df6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f26a:	c7 04 24 3d 56 02 c0 	mov    DWORD PTR [esp],0xc002563d
c001f271:	e8 03 da fe ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001f276:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001f27a:	83 c4 10             	add    esp,0x10
c001f27d:	85 f6                	test   esi,esi
c001f27f:	0f 84 f7 00 00 00    	je     c001f37c <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001f285:	83 ec 0c             	sub    esp,0xc
c001f288:	68 40 56 02 c0       	push   0xc0025640
c001f28d:	e8 e7 d9 fe ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001f292:	83 c4 0c             	add    esp,0xc
c001f295:	6a 01                	push   0x1
c001f297:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f29e:	50                   	push   eax
c001f29f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f2a5:	e8 74 f7 ff ff       	call   c001ea1e <IDE::polling(unsigned char, unsigned int)>
c001f2aa:	c7 04 24 43 56 02 c0 	mov    DWORD PTR [esp],0xc0025643
c001f2b1:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001f2b5:	e8 bf d9 fe ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001f2ba:	83 c4 10             	add    esp,0x10
c001f2bd:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001f2c1:	84 c0                	test   al,al
c001f2c3:	74 2b                	je     c001f2f0 <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001f2c5:	0f b6 f8             	movzx  edi,al
c001f2c8:	57                   	push   edi
c001f2c9:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001f2d0:	50                   	push   eax
c001f2d1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f2d8:	50                   	push   eax
c001f2d9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f2df:	e8 8a f6 ff ff       	call   c001e96e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001f2e4:	c7 04 24 46 56 02 c0 	mov    DWORD PTR [esp],0xc0025646
c001f2eb:	e9 bc 00 00 00       	jmp    c001f3ac <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001f2f0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f2f5:	74 50                	je     c001f347 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001f2f7:	83 ec 0c             	sub    esp,0xc
c001f2fa:	31 ed                	xor    ebp,ebp
c001f2fc:	68 51 56 02 c0       	push   0xc0025651
c001f301:	e8 73 d9 fe ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001f306:	83 c4 10             	add    esp,0x10
c001f309:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001f30d:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001f311:	50                   	push   eax
c001f312:	50                   	push   eax
c001f313:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f31a:	50                   	push   eax
c001f31b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f321:	e8 32 ec ff ff       	call   c001df58 <IDE::getBase(unsigned char)>
c001f326:	89 c2                	mov    edx,eax
c001f328:	89 f8                	mov    eax,edi
c001f32a:	66 ef                	out    dx,ax
c001f32c:	45                   	inc    ebp
c001f32d:	83 c4 10             	add    esp,0x10
c001f330:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001f336:	75 d1                	jne    c001f309 <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001f338:	83 ec 0c             	sub    esp,0xc
c001f33b:	68 54 56 02 c0       	push   0xc0025654
c001f340:	e8 34 d9 fe ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001f345:	eb 24                	jmp    c001f36b <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001f347:	51                   	push   ecx
c001f348:	51                   	push   ecx
c001f349:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f350:	50                   	push   eax
c001f351:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f357:	e8 fc eb ff ff       	call   c001df58 <IDE::getBase(unsigned char)>
c001f35c:	b9 00 01 00 00       	mov    ecx,0x100
c001f361:	89 c2                	mov    edx,eax
c001f363:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001f367:	fc                   	cld    
c001f368:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001f36b:	83 c4 10             	add    esp,0x10
c001f36e:	4e                   	dec    esi
c001f36f:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001f377:	e9 01 ff ff ff       	jmp    c001f27d <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001f37c:	31 ff                	xor    edi,edi
c001f37e:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f383:	74 2f                	je     c001f3b4 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001f385:	83 ec 0c             	sub    esp,0xc
c001f388:	68 57 56 02 c0       	push   0xc0025657
c001f38d:	e8 e7 d8 fe ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001f392:	58                   	pop    eax
c001f393:	31 c0                	xor    eax,eax
c001f395:	5a                   	pop    edx
c001f396:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001f39b:	0f 94 c0             	sete   al
c001f39e:	50                   	push   eax
c001f39f:	53                   	push   ebx
c001f3a0:	e8 8d fb ff ff       	call   c001ef32 <ATA::flush(bool)>
c001f3a5:	c7 04 24 5a 56 02 c0 	mov    DWORD PTR [esp],0xc002565a
c001f3ac:	e8 c8 d8 fe ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001f3b1:	83 c4 10             	add    esp,0x10
c001f3b4:	83 c4 2c             	add    esp,0x2c
c001f3b7:	89 f8                	mov    eax,edi
c001f3b9:	5b                   	pop    ebx
c001f3ba:	5e                   	pop    esi
c001f3bb:	5f                   	pop    edi
c001f3bc:	5d                   	pop    ebp
c001f3bd:	c3                   	ret    

c001f3be <ATA::read(unsigned long long, int, void*)>:
c001f3be:	57                   	push   edi
c001f3bf:	b8 04 00 00 00       	mov    eax,0x4
c001f3c4:	56                   	push   esi
c001f3c5:	53                   	push   ebx
c001f3c6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f3ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f3ce:	8d 7a ff             	lea    edi,[edx-0x1]
c001f3d1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f3d5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f3d9:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f3df:	77 25                	ja     c001f406 <ATA::read(unsigned long long, int, void*)+0x48>
c001f3e1:	b8 06 00 00 00       	mov    eax,0x6
c001f3e6:	85 f6                	test   esi,esi
c001f3e8:	74 1c                	je     c001f406 <ATA::read(unsigned long long, int, void*)+0x48>
c001f3ea:	50                   	push   eax
c001f3eb:	50                   	push   eax
c001f3ec:	6a 00                	push   0x0
c001f3ee:	56                   	push   esi
c001f3ef:	52                   	push   edx
c001f3f0:	53                   	push   ebx
c001f3f1:	51                   	push   ecx
c001f3f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f3f6:	e8 cd fb ff ff       	call   c001efc8 <ATA::access(unsigned long long, int, void*, bool)>
c001f3fb:	83 c4 20             	add    esp,0x20
c001f3fe:	85 c0                	test   eax,eax
c001f400:	0f 95 c0             	setne  al
c001f403:	0f b6 c0             	movzx  eax,al
c001f406:	5b                   	pop    ebx
c001f407:	5e                   	pop    esi
c001f408:	5f                   	pop    edi
c001f409:	c3                   	ret    

c001f40a <ATA::write(unsigned long long, int, void*)>:
c001f40a:	55                   	push   ebp
c001f40b:	57                   	push   edi
c001f40c:	56                   	push   esi
c001f40d:	53                   	push   ebx
c001f40e:	83 ec 18             	sub    esp,0x18
c001f411:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001f415:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f419:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001f41d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001f421:	68 5d 56 02 c0       	push   0xc002565d
c001f426:	e8 4e d8 fe ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001f42b:	8d 53 ff             	lea    edx,[ebx-0x1]
c001f42e:	83 c4 10             	add    esp,0x10
c001f431:	b8 04 00 00 00       	mov    eax,0x4
c001f436:	81 fa fe 00 00 00    	cmp    edx,0xfe
c001f43c:	77 25                	ja     c001f463 <ATA::write(unsigned long long, int, void*)+0x59>
c001f43e:	b8 06 00 00 00       	mov    eax,0x6
c001f443:	85 f6                	test   esi,esi
c001f445:	74 1c                	je     c001f463 <ATA::write(unsigned long long, int, void*)+0x59>
c001f447:	50                   	push   eax
c001f448:	50                   	push   eax
c001f449:	6a 01                	push   0x1
c001f44b:	56                   	push   esi
c001f44c:	53                   	push   ebx
c001f44d:	55                   	push   ebp
c001f44e:	57                   	push   edi
c001f44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f453:	e8 70 fb ff ff       	call   c001efc8 <ATA::access(unsigned long long, int, void*, bool)>
c001f458:	83 c4 20             	add    esp,0x20
c001f45b:	85 c0                	test   eax,eax
c001f45d:	0f 95 c0             	setne  al
c001f460:	0f b6 c0             	movzx  eax,al
c001f463:	83 c4 0c             	add    esp,0xc
c001f466:	5b                   	pop    ebx
c001f467:	5e                   	pop    esi
c001f468:	5f                   	pop    edi
c001f469:	5d                   	pop    ebp
c001f46a:	c3                   	ret    
c001f46b:	90                   	nop

c001f46c <ATA::detectCHS()>:
c001f46c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f470:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001f476:	c1 e0 06             	shl    eax,0x6
c001f479:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001f47f:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001f489:	c7 44 24 04 69 56 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025669
c001f491:	e9 71 3b ff ff       	jmp    c0013007 <Krnl::panic(char const*)>

c001f496 <ATA::open(int, int, void*)>:
c001f496:	53                   	push   ebx
c001f497:	83 ec 08             	sub    esp,0x8
c001f49a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f49e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f4a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f4a6:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001f4ac:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f4b2:	c1 e0 06             	shl    eax,0x6
c001f4b5:	01 d0                	add    eax,edx
c001f4b7:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001f4be:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001f4c4:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001f4cb:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001f4d5:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001f4db:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001f4e2:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001f4e9:	75 0c                	jne    c001f4f7 <ATA::open(int, int, void*)+0x61>
c001f4eb:	83 ec 0c             	sub    esp,0xc
c001f4ee:	53                   	push   ebx
c001f4ef:	e8 78 ff ff ff       	call   c001f46c <ATA::detectCHS()>
c001f4f4:	83 c4 10             	add    esp,0x10
c001f4f7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f4fd:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f503:	c1 e0 06             	shl    eax,0x6
c001f506:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001f50d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f517:	d1 e8                	shr    eax,1
c001f519:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001f51f:	6a 04                	push   0x4
c001f521:	6a 0c                	push   0xc
c001f523:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f52a:	50                   	push   eax
c001f52b:	52                   	push   edx
c001f52c:	e8 39 ea ff ff       	call   c001df6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f531:	90                   	nop
c001f532:	90                   	nop
c001f533:	6a 00                	push   0x0
c001f535:	6a 0c                	push   0xc
c001f537:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f53e:	50                   	push   eax
c001f53f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f545:	e8 20 ea ff ff       	call   c001df6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f54a:	83 c4 14             	add    esp,0x14
c001f54d:	53                   	push   ebx
c001f54e:	e8 43 f0 fe ff       	call   c000e596 <PhysicalDisk::startCache()>
c001f553:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f556:	e8 cf 00 ff ff       	call   c000f62a <createPartitionsForDisk(PhysicalDisk*)>
c001f55b:	31 c0                	xor    eax,eax
c001f55d:	83 c4 18             	add    esp,0x18
c001f560:	5b                   	pop    ebx
c001f561:	c3                   	ret    

c001f562 <ATAPI::write(unsigned long long, int, void*)>:
c001f562:	b8 03 00 00 00       	mov    eax,0x3
c001f567:	c3                   	ret    

c001f568 <ATAPI::close(int, int, void*)>:
c001f568:	83 ec 0c             	sub    esp,0xc
c001f56b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f56f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f575:	85 c0                	test   eax,eax
c001f577:	74 0c                	je     c001f585 <ATAPI::close(int, int, void*)+0x1d>
c001f579:	83 ec 0c             	sub    esp,0xc
c001f57c:	8b 10                	mov    edx,DWORD PTR [eax]
c001f57e:	50                   	push   eax
c001f57f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f582:	83 c4 10             	add    esp,0x10
c001f585:	31 c0                	xor    eax,eax
c001f587:	83 c4 0c             	add    esp,0xc
c001f58a:	c3                   	ret    
c001f58b:	90                   	nop

c001f58c <ATAPI::ATAPI()>:
c001f58c:	83 ec 0c             	sub    esp,0xc
c001f58f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f593:	83 ec 04             	sub    esp,0x4
c001f596:	68 00 08 00 00       	push   0x800
c001f59b:	68 69 59 02 c0       	push   0xc0025969
c001f5a0:	50                   	push   eax
c001f5a1:	e8 88 ef fe ff       	call   c000e52e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f5a6:	83 c4 10             	add    esp,0x10
c001f5a9:	ba fc 56 02 c0       	mov    edx,0xc00256fc
c001f5ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5b2:	89 10                	mov    DWORD PTR [eax],edx
c001f5b4:	90                   	nop
c001f5b5:	83 c4 0c             	add    esp,0xc
c001f5b8:	c3                   	ret    
c001f5b9:	90                   	nop

c001f5ba <ATAPI::readyForCommand()>:
c001f5ba:	56                   	push   esi
c001f5bb:	53                   	push   ebx
c001f5bc:	53                   	push   ebx
c001f5bd:	31 db                	xor    ebx,ebx
c001f5bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f5c3:	51                   	push   ecx
c001f5c4:	6a 0c                	push   0xc
c001f5c6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001f5cd:	50                   	push   eax
c001f5ce:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001f5d4:	e8 51 ea ff ff       	call   c001e02a <IDE::read(unsigned char, unsigned char)>
c001f5d9:	83 c4 10             	add    esp,0x10
c001f5dc:	a8 88                	test   al,0x88
c001f5de:	74 25                	je     c001f605 <ATAPI::readyForCommand()+0x4b>
c001f5e0:	43                   	inc    ebx
c001f5e1:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001f5e7:	7e da                	jle    c001f5c3 <ATAPI::readyForCommand()+0x9>
c001f5e9:	83 ec 0c             	sub    esp,0xc
c001f5ec:	68 5e 01 00 00       	push   0x15e
c001f5f1:	e8 6e 73 ff ff       	call   c0016964 <milliTenthSleep(unsigned int)>
c001f5f6:	83 c4 10             	add    esp,0x10
c001f5f9:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001f5ff:	75 c2                	jne    c001f5c3 <ATAPI::readyForCommand()+0x9>
c001f601:	31 c0                	xor    eax,eax
c001f603:	eb 02                	jmp    c001f607 <ATAPI::readyForCommand()+0x4d>
c001f605:	b0 01                	mov    al,0x1
c001f607:	5a                   	pop    edx
c001f608:	5b                   	pop    ebx
c001f609:	5e                   	pop    esi
c001f60a:	c3                   	ret    
c001f60b:	90                   	nop

c001f60c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001f60c:	55                   	push   ebp
c001f60d:	57                   	push   edi
c001f60e:	56                   	push   esi
c001f60f:	53                   	push   ebx
c001f610:	83 ec 20             	sub    esp,0x20
c001f613:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001f617:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001f61b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001f61f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001f623:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f627:	6a 01                	push   0x1
c001f629:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f630:	50                   	push   eax
c001f631:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f637:	e8 36 eb ff ff       	call   c001e172 <IDE::enableIRQs(unsigned char, bool)>
c001f63c:	5e                   	pop    esi
c001f63d:	58                   	pop    eax
c001f63e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f645:	50                   	push   eax
c001f646:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f64c:	e8 f3 e8 ff ff       	call   c001df44 <IDE::prepareInterrupt(unsigned char)>
c001f651:	89 3c 24             	mov    DWORD PTR [esp],edi
c001f654:	e8 61 ff ff ff       	call   c001f5ba <ATAPI::readyForCommand()>
c001f659:	83 c4 10             	add    esp,0x10
c001f65c:	84 c0                	test   al,al
c001f65e:	75 0a                	jne    c001f66a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001f660:	bb 01 00 00 00       	mov    ebx,0x1
c001f665:	e9 57 02 00 00       	jmp    c001f8c1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001f66a:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001f670:	c1 e0 04             	shl    eax,0x4
c001f673:	0f b6 c0             	movzx  eax,al
c001f676:	50                   	push   eax
c001f677:	6a 06                	push   0x6
c001f679:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f680:	50                   	push   eax
c001f681:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f687:	e8 de e8 ff ff       	call   c001df6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f68c:	6a 00                	push   0x0
c001f68e:	6a 01                	push   0x1
c001f690:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f697:	50                   	push   eax
c001f698:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f69e:	e8 c7 e8 ff ff       	call   c001df6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f6a3:	83 c4 20             	add    esp,0x20
c001f6a6:	0f b6 c3             	movzx  eax,bl
c001f6a9:	0f b6 df             	movzx  ebx,bh
c001f6ac:	50                   	push   eax
c001f6ad:	6a 04                	push   0x4
c001f6af:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f6b6:	50                   	push   eax
c001f6b7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f6bd:	e8 a8 e8 ff ff       	call   c001df6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f6c2:	53                   	push   ebx
c001f6c3:	6a 05                	push   0x5
c001f6c5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f6cc:	50                   	push   eax
c001f6cd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f6d3:	e8 92 e8 ff ff       	call   c001df6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f6d8:	83 c4 20             	add    esp,0x20
c001f6db:	68 a0 00 00 00       	push   0xa0
c001f6e0:	6a 07                	push   0x7
c001f6e2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f6e9:	50                   	push   eax
c001f6ea:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f6f0:	e8 75 e8 ff ff       	call   c001df6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f6f5:	83 c4 0c             	add    esp,0xc
c001f6f8:	6a 01                	push   0x1
c001f6fa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f701:	50                   	push   eax
c001f702:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f708:	e8 11 f3 ff ff       	call   c001ea1e <IDE::polling(unsigned char, unsigned int)>
c001f70d:	83 c4 10             	add    esp,0x10
c001f710:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001f716:	84 c0                	test   al,al
c001f718:	74 23                	je     c001f73d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001f71a:	0f b6 d8             	movzx  ebx,al
c001f71d:	0f b6 d2             	movzx  edx,dl
c001f720:	53                   	push   ebx
c001f721:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001f728:	50                   	push   eax
c001f729:	52                   	push   edx
c001f72a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f730:	e8 39 f2 ff ff       	call   c001e96e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001f735:	83 c4 10             	add    esp,0x10
c001f738:	e9 84 01 00 00       	jmp    c001f8c1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001f73d:	0f b6 d2             	movzx  edx,dl
c001f740:	53                   	push   ebx
c001f741:	53                   	push   ebx
c001f742:	52                   	push   edx
c001f743:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f749:	e8 0a e8 ff ff       	call   c001df58 <IDE::getBase(unsigned char)>
c001f74e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001f752:	b9 06 00 00 00       	mov    ecx,0x6
c001f757:	89 c2                	mov    edx,eax
c001f759:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001f75c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001f760:	83 c4 10             	add    esp,0x10
c001f763:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001f769:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001f770:	85 db                	test   ebx,ebx
c001f772:	0f 84 ec 00 00 00    	je     c001f864 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001f778:	51                   	push   ecx
c001f779:	51                   	push   ecx
c001f77a:	52                   	push   edx
c001f77b:	50                   	push   eax
c001f77c:	e8 57 e9 ff ff       	call   c001e0d8 <IDE::waitInterrupt(unsigned char)>
c001f781:	83 c4 10             	add    esp,0x10
c001f784:	84 c0                	test   al,al
c001f786:	0f 84 d4 fe ff ff    	je     c001f660 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001f78c:	56                   	push   esi
c001f78d:	56                   	push   esi
c001f78e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f795:	50                   	push   eax
c001f796:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f79c:	e8 a3 e7 ff ff       	call   c001df44 <IDE::prepareInterrupt(unsigned char)>
c001f7a1:	83 c4 0c             	add    esp,0xc
c001f7a4:	6a 04                	push   0x4
c001f7a6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f7ad:	50                   	push   eax
c001f7ae:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f7b4:	e8 71 e8 ff ff       	call   c001e02a <IDE::read(unsigned char, unsigned char)>
c001f7b9:	83 c4 0c             	add    esp,0xc
c001f7bc:	89 c6                	mov    esi,eax
c001f7be:	6a 05                	push   0x5
c001f7c0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f7c7:	50                   	push   eax
c001f7c8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f7ce:	e8 57 e8 ff ff       	call   c001e02a <IDE::read(unsigned char, unsigned char)>
c001f7d3:	89 f1                	mov    ecx,esi
c001f7d5:	0f b6 c0             	movzx  eax,al
c001f7d8:	0f b6 f1             	movzx  esi,cl
c001f7db:	c1 e0 08             	shl    eax,0x8
c001f7de:	09 c6                	or     esi,eax
c001f7e0:	d1 fe                	sar    esi,1
c001f7e2:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001f7e6:	83 c4 10             	add    esp,0x10
c001f7e9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001f7ee:	74 41                	je     c001f831 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001f7f0:	31 c9                	xor    ecx,ecx
c001f7f2:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001f7f8:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001f7ff:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001f803:	75 0a                	jne    c001f80f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001f805:	01 c9                	add    ecx,ecx
c001f807:	01 cd                	add    ebp,ecx
c001f809:	4b                   	dec    ebx
c001f80a:	e9 54 ff ff ff       	jmp    c001f763 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001f80f:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001f814:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001f818:	51                   	push   ecx
c001f819:	51                   	push   ecx
c001f81a:	52                   	push   edx
c001f81b:	50                   	push   eax
c001f81c:	e8 37 e7 ff ff       	call   c001df58 <IDE::getBase(unsigned char)>
c001f821:	89 c2                	mov    edx,eax
c001f823:	89 f0                	mov    eax,esi
c001f825:	66 ef                	out    dx,ax
c001f827:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001f82b:	83 c4 10             	add    esp,0x10
c001f82e:	41                   	inc    ecx
c001f82f:	eb c1                	jmp    c001f7f2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001f831:	31 f6                	xor    esi,esi
c001f833:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001f839:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001f840:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001f844:	75 06                	jne    c001f84c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001f846:	01 f6                	add    esi,esi
c001f848:	01 f5                	add    ebp,esi
c001f84a:	eb bd                	jmp    c001f809 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001f84c:	51                   	push   ecx
c001f84d:	51                   	push   ecx
c001f84e:	52                   	push   edx
c001f84f:	50                   	push   eax
c001f850:	e8 03 e7 ff ff       	call   c001df58 <IDE::getBase(unsigned char)>
c001f855:	89 c2                	mov    edx,eax
c001f857:	66 ed                	in     ax,dx
c001f859:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001f85e:	83 c4 10             	add    esp,0x10
c001f861:	46                   	inc    esi
c001f862:	eb cf                	jmp    c001f833 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001f864:	51                   	push   ecx
c001f865:	51                   	push   ecx
c001f866:	52                   	push   edx
c001f867:	50                   	push   eax
c001f868:	e8 6b e8 ff ff       	call   c001e0d8 <IDE::waitInterrupt(unsigned char)>
c001f86d:	83 c4 10             	add    esp,0x10
c001f870:	84 c0                	test   al,al
c001f872:	0f 84 e8 fd ff ff    	je     c001f660 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001f878:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f87d:	52                   	push   edx
c001f87e:	52                   	push   edx
c001f87f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f886:	50                   	push   eax
c001f887:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f88d:	e8 b2 e6 ff ff       	call   c001df44 <IDE::prepareInterrupt(unsigned char)>
c001f892:	83 c4 10             	add    esp,0x10
c001f895:	50                   	push   eax
c001f896:	50                   	push   eax
c001f897:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f89e:	50                   	push   eax
c001f89f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f8a5:	e8 ae e6 ff ff       	call   c001df58 <IDE::getBase(unsigned char)>
c001f8aa:	8d 50 07             	lea    edx,[eax+0x7]
c001f8ad:	ec                   	in     al,dx
c001f8ae:	83 c4 10             	add    esp,0x10
c001f8b1:	a8 88                	test   al,0x88
c001f8b3:	74 0a                	je     c001f8bf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001f8b5:	4b                   	dec    ebx
c001f8b6:	75 dd                	jne    c001f895 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001f8b8:	bb 02 00 00 00       	mov    ebx,0x2
c001f8bd:	eb 02                	jmp    c001f8c1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001f8bf:	31 db                	xor    ebx,ebx
c001f8c1:	83 c4 1c             	add    esp,0x1c
c001f8c4:	89 d8                	mov    eax,ebx
c001f8c6:	5b                   	pop    ebx
c001f8c7:	5e                   	pop    esi
c001f8c8:	5f                   	pop    edi
c001f8c9:	5d                   	pop    ebp
c001f8ca:	c3                   	ret    
c001f8cb:	90                   	nop

c001f8cc <ATAPI::diskRemoved()>:
c001f8cc:	53                   	push   ebx
c001f8cd:	83 ec 14             	sub    esp,0x14
c001f8d0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001f8d4:	68 b4 56 02 c0       	push   0xc00256b4
c001f8d9:	e8 9b d3 fe ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001f8de:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001f8e5:	c7 04 24 ca 56 02 c0 	mov    DWORD PTR [esp],0xc00256ca
c001f8ec:	e8 88 d3 fe ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001f8f1:	58                   	pop    eax
c001f8f2:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001f8f8:	e8 ab fa fe ff       	call   c000f3a8 <LogicalDisk::unmount()>
c001f8fd:	c7 04 24 d9 56 02 c0 	mov    DWORD PTR [esp],0xc00256d9
c001f904:	e8 70 d3 fe ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001f909:	5a                   	pop    edx
c001f90a:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001f910:	e8 db 03 ff ff       	call   c000fcf0 <VCache::writeWriteBuffer()>
c001f915:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001f91b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f91f:	83 c4 18             	add    esp,0x18
c001f922:	5b                   	pop    ebx
c001f923:	e9 b8 03 ff ff       	jmp    c000fce0 <VCache::invalidateReadBuffer()>

c001f928 <ATAPI::eject()>:
c001f928:	57                   	push   edi
c001f929:	b9 03 00 00 00       	mov    ecx,0x3
c001f92e:	53                   	push   ebx
c001f92f:	83 ec 14             	sub    esp,0x14
c001f932:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001f936:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f93a:	fc                   	cld    
c001f93b:	31 c0                	xor    eax,eax
c001f93d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f93f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001f944:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001f949:	50                   	push   eax
c001f94a:	50                   	push   eax
c001f94b:	6a 00                	push   0x0
c001f94d:	6a 00                	push   0x0
c001f94f:	6a 00                	push   0x0
c001f951:	6a 02                	push   0x2
c001f953:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f957:	50                   	push   eax
c001f958:	53                   	push   ebx
c001f959:	e8 ae fc ff ff       	call   c001f60c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f95e:	83 c4 14             	add    esp,0x14
c001f961:	53                   	push   ebx
c001f962:	e8 65 ff ff ff       	call   c001f8cc <ATAPI::diskRemoved()>
c001f967:	83 c4 24             	add    esp,0x24
c001f96a:	31 c0                	xor    eax,eax
c001f96c:	5b                   	pop    ebx
c001f96d:	5f                   	pop    edi
c001f96e:	c3                   	ret    
c001f96f:	90                   	nop

c001f970 <ATAPI::diskInserted()>:
c001f970:	83 ec 18             	sub    esp,0x18
c001f973:	68 75 59 02 c0       	push   0xc0025975
c001f978:	e8 fc d2 fe ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001f97d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f981:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001f988:	83 c4 1c             	add    esp,0x1c
c001f98b:	c3                   	ret    

c001f98c <ATAPI::detectMedia()>:
c001f98c:	56                   	push   esi
c001f98d:	53                   	push   ebx
c001f98e:	83 ec 28             	sub    esp,0x28
c001f991:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f995:	6a 0c                	push   0xc
c001f997:	6a 00                	push   0x0
c001f999:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001f99d:	56                   	push   esi
c001f99e:	e8 d9 0c fe ff       	call   c000067c <memset>
c001f9a3:	58                   	pop    eax
c001f9a4:	5a                   	pop    edx
c001f9a5:	6a 00                	push   0x0
c001f9a7:	6a 00                	push   0x0
c001f9a9:	6a 00                	push   0x0
c001f9ab:	6a 00                	push   0x0
c001f9ad:	56                   	push   esi
c001f9ae:	53                   	push   ebx
c001f9af:	e8 58 fc ff ff       	call   c001f60c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f9b4:	83 c4 1c             	add    esp,0x1c
c001f9b7:	6a 0c                	push   0xc
c001f9b9:	6a 00                	push   0x0
c001f9bb:	56                   	push   esi
c001f9bc:	e8 bb 0c fe ff       	call   c000067c <memset>
c001f9c1:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001f9c6:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001f9cb:	59                   	pop    ecx
c001f9cc:	58                   	pop    eax
c001f9cd:	6a 01                	push   0x1
c001f9cf:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001f9d3:	50                   	push   eax
c001f9d4:	6a 00                	push   0x0
c001f9d6:	6a 12                	push   0x12
c001f9d8:	56                   	push   esi
c001f9d9:	53                   	push   ebx
c001f9da:	e8 2d fc ff ff       	call   c001f60c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f9df:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001f9e3:	83 c4 20             	add    esp,0x20
c001f9e6:	83 e0 7f             	and    eax,0x7f
c001f9e9:	3c 70                	cmp    al,0x70
c001f9eb:	74 15                	je     c001fa02 <ATAPI::detectMedia()+0x76>
c001f9ed:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f9f4:	75 0c                	jne    c001fa02 <ATAPI::detectMedia()+0x76>
c001f9f6:	83 ec 0c             	sub    esp,0xc
c001f9f9:	53                   	push   ebx
c001f9fa:	e8 71 ff ff ff       	call   c001f970 <ATAPI::diskInserted()>
c001f9ff:	83 c4 10             	add    esp,0x10
c001fa02:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001fa06:	83 e0 0f             	and    eax,0xf
c001fa09:	3c 02                	cmp    al,0x2
c001fa0b:	75 1b                	jne    c001fa28 <ATAPI::detectMedia()+0x9c>
c001fa0d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001fa12:	75 2d                	jne    c001fa41 <ATAPI::detectMedia()+0xb5>
c001fa14:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001fa1b:	74 24                	je     c001fa41 <ATAPI::detectMedia()+0xb5>
c001fa1d:	83 ec 0c             	sub    esp,0xc
c001fa20:	53                   	push   ebx
c001fa21:	e8 a6 fe ff ff       	call   c001f8cc <ATAPI::diskRemoved()>
c001fa26:	eb 16                	jmp    c001fa3e <ATAPI::detectMedia()+0xb2>
c001fa28:	84 c0                	test   al,al
c001fa2a:	75 15                	jne    c001fa41 <ATAPI::detectMedia()+0xb5>
c001fa2c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001fa33:	75 0c                	jne    c001fa41 <ATAPI::detectMedia()+0xb5>
c001fa35:	83 ec 0c             	sub    esp,0xc
c001fa38:	53                   	push   ebx
c001fa39:	e8 32 ff ff ff       	call   c001f970 <ATAPI::diskInserted()>
c001fa3e:	83 c4 10             	add    esp,0x10
c001fa41:	83 c4 24             	add    esp,0x24
c001fa44:	5b                   	pop    ebx
c001fa45:	5e                   	pop    esi
c001fa46:	c3                   	ret    
c001fa47:	90                   	nop

c001fa48 <ATAPI::open(int, int, void*)>:
c001fa48:	56                   	push   esi
c001fa49:	53                   	push   ebx
c001fa4a:	50                   	push   eax
c001fa4b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fa4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001fa53:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fa57:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001fa5d:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001fa63:	c1 e0 06             	shl    eax,0x6
c001fa66:	01 d0                	add    eax,edx
c001fa68:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001fa6f:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001fa75:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001fa7c:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001fa86:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001fa8c:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001fa93:	6a 04                	push   0x4
c001fa95:	6a 0c                	push   0xc
c001fa97:	51                   	push   ecx
c001fa98:	52                   	push   edx
c001fa99:	e8 cc e4 ff ff       	call   c001df6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa9e:	90                   	nop
c001fa9f:	90                   	nop
c001faa0:	6a 00                	push   0x0
c001faa2:	6a 0c                	push   0xc
c001faa4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001faab:	50                   	push   eax
c001faac:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fab2:	e8 b3 e4 ff ff       	call   c001df6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fab7:	83 c4 14             	add    esp,0x14
c001faba:	68 74 01 00 00       	push   0x174
c001fabf:	e8 a7 9e fe ff       	call   c000996b <malloc>
c001fac4:	83 c4 0c             	add    esp,0xc
c001fac7:	89 c6                	mov    esi,eax
c001fac9:	6a 00                	push   0x0
c001facb:	68 ff ff ff 7f       	push   0x7fffffff
c001fad0:	6a 00                	push   0x0
c001fad2:	6a 00                	push   0x0
c001fad4:	53                   	push   ebx
c001fad5:	68 52 5a 02 c0       	push   0xc0025a52
c001fada:	50                   	push   eax
c001fadb:	e8 d4 f6 fe ff       	call   c000f1b4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001fae0:	83 c4 14             	add    esp,0x14
c001fae3:	56                   	push   esi
c001fae4:	e8 81 f7 fe ff       	call   c000f26a <LogicalDisk::assignDriveLetter()>
c001fae9:	5a                   	pop    edx
c001faea:	0f be c0             	movsx  eax,al
c001faed:	59                   	pop    ecx
c001faee:	50                   	push   eax
c001faef:	68 e7 56 02 c0       	push   0xc00256e7
c001faf4:	e8 80 d1 fe ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c001faf9:	58                   	pop    eax
c001fafa:	5a                   	pop    edx
c001fafb:	56                   	push   esi
c001fafc:	53                   	push   ebx
c001fafd:	e8 f4 e5 fe ff       	call   c000e0f6 <Device::addChild(Device*)>
c001fb02:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001fb08:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fb0b:	e8 86 ea fe ff       	call   c000e596 <PhysicalDisk::startCache()>
c001fb10:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001fb17:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fb1a:	e8 6d fe ff ff       	call   c001f98c <ATAPI::detectMedia()>
c001fb1f:	83 c4 14             	add    esp,0x14
c001fb22:	31 c0                	xor    eax,eax
c001fb24:	5b                   	pop    ebx
c001fb25:	5e                   	pop    esi
c001fb26:	c3                   	ret    
c001fb27:	90                   	nop

c001fb28 <ATAPI::read(unsigned long long, int, void*)>:
c001fb28:	55                   	push   ebp
c001fb29:	57                   	push   edi
c001fb2a:	56                   	push   esi
c001fb2b:	53                   	push   ebx
c001fb2c:	83 ec 1c             	sub    esp,0x1c
c001fb2f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001fb33:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001fb37:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001fb3b:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001fb42:	74 41                	je     c001fb85 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001fb44:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001fb48:	b9 03 00 00 00       	mov    ecx,0x3
c001fb4d:	fc                   	cld    
c001fb4e:	31 c0                	xor    eax,eax
c001fb50:	86 fb                	xchg   bl,bh
c001fb52:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fb54:	c1 c3 10             	rol    ebx,0x10
c001fb57:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001fb5c:	89 e8                	mov    eax,ebp
c001fb5e:	86 fb                	xchg   bl,bh
c001fb60:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001fb64:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001fb68:	50                   	push   eax
c001fb69:	50                   	push   eax
c001fb6a:	55                   	push   ebp
c001fb6b:	c1 e5 0b             	shl    ebp,0xb
c001fb6e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001fb72:	6a 00                	push   0x0
c001fb74:	55                   	push   ebp
c001fb75:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fb79:	50                   	push   eax
c001fb7a:	56                   	push   esi
c001fb7b:	e8 8c fa ff ff       	call   c001f60c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001fb80:	83 c4 20             	add    esp,0x20
c001fb83:	eb 1a                	jmp    c001fb9f <ATAPI::read(unsigned long long, int, void*)+0x77>
c001fb85:	83 ec 0c             	sub    esp,0xc
c001fb88:	56                   	push   esi
c001fb89:	e8 fe fd ff ff       	call   c001f98c <ATAPI::detectMedia()>
c001fb8e:	83 c4 10             	add    esp,0x10
c001fb91:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001fb98:	75 aa                	jne    c001fb44 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001fb9a:	b8 02 00 00 00       	mov    eax,0x2
c001fb9f:	83 c4 1c             	add    esp,0x1c
c001fba2:	5b                   	pop    ebx
c001fba3:	5e                   	pop    esi
c001fba4:	5f                   	pop    edi
c001fba5:	5d                   	pop    ebp
c001fba6:	c3                   	ret    
c001fba7:	90                   	nop

c001fba8 <SATA::close(int, int, void*)>:
c001fba8:	83 ec 0c             	sub    esp,0xc
c001fbab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbaf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fbb5:	85 c0                	test   eax,eax
c001fbb7:	74 0c                	je     c001fbc5 <SATA::close(int, int, void*)+0x1d>
c001fbb9:	83 ec 0c             	sub    esp,0xc
c001fbbc:	8b 10                	mov    edx,DWORD PTR [eax]
c001fbbe:	50                   	push   eax
c001fbbf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001fbc2:	83 c4 10             	add    esp,0x10
c001fbc5:	31 c0                	xor    eax,eax
c001fbc7:	83 c4 0c             	add    esp,0xc
c001fbca:	c3                   	ret    
c001fbcb:	90                   	nop

c001fbcc <SATA::powerSaving(PowerSavingLevel)>:
c001fbcc:	c3                   	ret    
c001fbcd:	90                   	nop

c001fbce <SATA::open(int, int, void*)>:
c001fbce:	56                   	push   esi
c001fbcf:	53                   	push   ebx
c001fbd0:	51                   	push   ecx
c001fbd1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fbd5:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c001fbdc:	74 2d                	je     c001fc0b <SATA::open(int, int, void*)+0x3d>
c001fbde:	83 ec 0c             	sub    esp,0xc
c001fbe1:	68 2c 57 02 c0       	push   0xc002572c
c001fbe6:	e8 da 9d fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c001fbeb:	83 c4 10             	add    esp,0x10
c001fbee:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c001fbf5:	75 14                	jne    c001fc0b <SATA::open(int, int, void*)+0x3d>
c001fbf7:	e4 60                	in     al,0x60
c001fbf9:	3c 5a                	cmp    al,0x5a
c001fbfb:	74 04                	je     c001fc01 <SATA::open(int, int, void*)+0x33>
c001fbfd:	3c 1c                	cmp    al,0x1c
c001fbff:	75 f6                	jne    c001fbf7 <SATA::open(int, int, void*)+0x29>
c001fc01:	e4 60                	in     al,0x60
c001fc03:	3c 5a                	cmp    al,0x5a
c001fc05:	74 fa                	je     c001fc01 <SATA::open(int, int, void*)+0x33>
c001fc07:	3c 1c                	cmp    al,0x1c
c001fc09:	74 f6                	je     c001fc01 <SATA::open(int, int, void*)+0x33>
c001fc0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fc0f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001fc19:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001fc1f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001fc29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fc2d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001fc37:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001fc3d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001fc44:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c001fc4b:	74 2d                	je     c001fc7a <SATA::open(int, int, void*)+0xac>
c001fc4d:	83 ec 0c             	sub    esp,0xc
c001fc50:	68 39 57 02 c0       	push   0xc0025739
c001fc55:	e8 6b 9d fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c001fc5a:	83 c4 10             	add    esp,0x10
c001fc5d:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c001fc64:	75 14                	jne    c001fc7a <SATA::open(int, int, void*)+0xac>
c001fc66:	e4 60                	in     al,0x60
c001fc68:	3c 1c                	cmp    al,0x1c
c001fc6a:	74 04                	je     c001fc70 <SATA::open(int, int, void*)+0xa2>
c001fc6c:	3c 5a                	cmp    al,0x5a
c001fc6e:	75 f6                	jne    c001fc66 <SATA::open(int, int, void*)+0x98>
c001fc70:	e4 60                	in     al,0x60
c001fc72:	3c 5a                	cmp    al,0x5a
c001fc74:	74 fa                	je     c001fc70 <SATA::open(int, int, void*)+0xa2>
c001fc76:	3c 1c                	cmp    al,0x1c
c001fc78:	74 f6                	je     c001fc70 <SATA::open(int, int, void*)+0xa2>
c001fc7a:	e8 a3 a3 fe ff       	call   c000a022 <Phys::allocatePage()>
c001fc7f:	89 c6                	mov    esi,eax
c001fc81:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001fc87:	81 c6 00 10 00 00    	add    esi,0x1000
c001fc8d:	e8 90 a3 fe ff       	call   c000a022 <Phys::allocatePage()>
c001fc92:	39 c6                	cmp    esi,eax
c001fc94:	74 10                	je     c001fca6 <SATA::open(int, int, void*)+0xd8>
c001fc96:	83 ec 0c             	sub    esp,0xc
c001fc99:	68 46 57 02 c0       	push   0xc0025746
c001fc9e:	e8 64 33 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c001fca3:	83 c4 10             	add    esp,0x10
c001fca6:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c001fcad:	74 2d                	je     c001fcdc <SATA::open(int, int, void*)+0x10e>
c001fcaf:	83 ec 0c             	sub    esp,0xc
c001fcb2:	68 5a 57 02 c0       	push   0xc002575a
c001fcb7:	e8 09 9d fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c001fcbc:	83 c4 10             	add    esp,0x10
c001fcbf:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c001fcc6:	75 14                	jne    c001fcdc <SATA::open(int, int, void*)+0x10e>
c001fcc8:	e4 60                	in     al,0x60
c001fcca:	3c 1c                	cmp    al,0x1c
c001fccc:	74 04                	je     c001fcd2 <SATA::open(int, int, void*)+0x104>
c001fcce:	3c 5a                	cmp    al,0x5a
c001fcd0:	75 f6                	jne    c001fcc8 <SATA::open(int, int, void*)+0xfa>
c001fcd2:	e4 60                	in     al,0x60
c001fcd4:	3c 5a                	cmp    al,0x5a
c001fcd6:	74 fa                	je     c001fcd2 <SATA::open(int, int, void*)+0x104>
c001fcd8:	3c 1c                	cmp    al,0x1c
c001fcda:	74 f6                	je     c001fcd2 <SATA::open(int, int, void*)+0x104>
c001fcdc:	83 ec 0c             	sub    esp,0xc
c001fcdf:	6a 02                	push   0x2
c001fce1:	e8 37 bc fe ff       	call   c000b91d <Virt::allocateKernelVirtualPages(int)>
c001fce6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001fcec:	6a 03                	push   0x3
c001fcee:	50                   	push   eax
c001fcef:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001fcf5:	ff 35 b4 67 02 c0    	push   DWORD PTR ds:0xc00267b4
c001fcfb:	e8 88 c2 fe ff       	call   c000bf88 <VAS::mapPage(unsigned long, unsigned long, int)>
c001fd00:	83 c4 20             	add    esp,0x20
c001fd03:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c001fd0a:	74 2d                	je     c001fd39 <SATA::open(int, int, void*)+0x16b>
c001fd0c:	83 ec 0c             	sub    esp,0xc
c001fd0f:	68 67 57 02 c0       	push   0xc0025767
c001fd14:	e8 ac 9c fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c001fd19:	83 c4 10             	add    esp,0x10
c001fd1c:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c001fd23:	75 14                	jne    c001fd39 <SATA::open(int, int, void*)+0x16b>
c001fd25:	e4 60                	in     al,0x60
c001fd27:	3c 1c                	cmp    al,0x1c
c001fd29:	74 04                	je     c001fd2f <SATA::open(int, int, void*)+0x161>
c001fd2b:	3c 5a                	cmp    al,0x5a
c001fd2d:	75 f6                	jne    c001fd25 <SATA::open(int, int, void*)+0x157>
c001fd2f:	e4 60                	in     al,0x60
c001fd31:	3c 5a                	cmp    al,0x5a
c001fd33:	74 fa                	je     c001fd2f <SATA::open(int, int, void*)+0x161>
c001fd35:	3c 1c                	cmp    al,0x1c
c001fd37:	74 f6                	je     c001fd2f <SATA::open(int, int, void*)+0x161>
c001fd39:	83 ec 0c             	sub    esp,0xc
c001fd3c:	53                   	push   ebx
c001fd3d:	e8 54 e8 fe ff       	call   c000e596 <PhysicalDisk::startCache()>
c001fd42:	83 c4 10             	add    esp,0x10
c001fd45:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c001fd4c:	74 2d                	je     c001fd7b <SATA::open(int, int, void*)+0x1ad>
c001fd4e:	83 ec 0c             	sub    esp,0xc
c001fd51:	68 74 57 02 c0       	push   0xc0025774
c001fd56:	e8 6a 9c fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c001fd5b:	83 c4 10             	add    esp,0x10
c001fd5e:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c001fd65:	75 14                	jne    c001fd7b <SATA::open(int, int, void*)+0x1ad>
c001fd67:	e4 60                	in     al,0x60
c001fd69:	3c 1c                	cmp    al,0x1c
c001fd6b:	74 04                	je     c001fd71 <SATA::open(int, int, void*)+0x1a3>
c001fd6d:	3c 5a                	cmp    al,0x5a
c001fd6f:	75 f6                	jne    c001fd67 <SATA::open(int, int, void*)+0x199>
c001fd71:	e4 60                	in     al,0x60
c001fd73:	3c 5a                	cmp    al,0x5a
c001fd75:	74 fa                	je     c001fd71 <SATA::open(int, int, void*)+0x1a3>
c001fd77:	3c 1c                	cmp    al,0x1c
c001fd79:	74 f6                	je     c001fd71 <SATA::open(int, int, void*)+0x1a3>
c001fd7b:	83 ec 0c             	sub    esp,0xc
c001fd7e:	53                   	push   ebx
c001fd7f:	e8 a6 f8 fe ff       	call   c000f62a <createPartitionsForDisk(PhysicalDisk*)>
c001fd84:	83 c4 10             	add    esp,0x10
c001fd87:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c001fd8e:	74 2d                	je     c001fdbd <SATA::open(int, int, void*)+0x1ef>
c001fd90:	83 ec 0c             	sub    esp,0xc
c001fd93:	68 81 57 02 c0       	push   0xc0025781
c001fd98:	e8 28 9c fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c001fd9d:	83 c4 10             	add    esp,0x10
c001fda0:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c001fda7:	75 14                	jne    c001fdbd <SATA::open(int, int, void*)+0x1ef>
c001fda9:	e4 60                	in     al,0x60
c001fdab:	3c 1c                	cmp    al,0x1c
c001fdad:	74 04                	je     c001fdb3 <SATA::open(int, int, void*)+0x1e5>
c001fdaf:	3c 5a                	cmp    al,0x5a
c001fdb1:	75 f6                	jne    c001fda9 <SATA::open(int, int, void*)+0x1db>
c001fdb3:	e4 60                	in     al,0x60
c001fdb5:	3c 5a                	cmp    al,0x5a
c001fdb7:	74 fa                	je     c001fdb3 <SATA::open(int, int, void*)+0x1e5>
c001fdb9:	3c 1c                	cmp    al,0x1c
c001fdbb:	74 f6                	je     c001fdb3 <SATA::open(int, int, void*)+0x1e5>
c001fdbd:	5a                   	pop    edx
c001fdbe:	31 c0                	xor    eax,eax
c001fdc0:	5b                   	pop    ebx
c001fdc1:	5e                   	pop    esi
c001fdc2:	c3                   	ret    
c001fdc3:	90                   	nop

c001fdc4 <SATA::SATA()>:
c001fdc4:	83 ec 0c             	sub    esp,0xc
c001fdc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdcb:	83 ec 04             	sub    esp,0x4
c001fdce:	68 00 02 00 00       	push   0x200
c001fdd3:	68 8e 57 02 c0       	push   0xc002578e
c001fdd8:	50                   	push   eax
c001fdd9:	e8 50 e7 fe ff       	call   c000e52e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fdde:	83 c4 10             	add    esp,0x10
c001fde1:	ba 38 59 02 c0       	mov    edx,0xc0025938
c001fde6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdea:	89 10                	mov    DWORD PTR [eax],edx
c001fdec:	90                   	nop
c001fded:	83 c4 0c             	add    esp,0xc
c001fdf0:	c3                   	ret    
c001fdf1:	90                   	nop

c001fdf2 <SATA::access(unsigned long long, int, void*, bool)>:
c001fdf2:	55                   	push   ebp
c001fdf3:	57                   	push   edi
c001fdf4:	56                   	push   esi
c001fdf5:	53                   	push   ebx
c001fdf6:	83 ec 2c             	sub    esp,0x2c
c001fdf9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001fdfd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001fe01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001fe05:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c001fe0c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001fe10:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fe14:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001fe18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fe1c:	75 19                	jne    c001fe37 <SATA::access(unsigned long long, int, void*, bool)+0x45>
c001fe1e:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001fe23:	7e 41                	jle    c001fe66 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c001fe25:	83 ec 0c             	sub    esp,0xc
c001fe28:	68 ad 57 02 c0       	push   0xc00257ad
c001fe2d:	e8 d5 31 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c001fe32:	83 c4 10             	add    esp,0x10
c001fe35:	eb 2f                	jmp    c001fe66 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c001fe37:	83 ec 0c             	sub    esp,0xc
c001fe3a:	68 9e 57 02 c0       	push   0xc002579e
c001fe3f:	e8 81 9b fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c001fe44:	83 c4 10             	add    esp,0x10
c001fe47:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c001fe4e:	75 ce                	jne    c001fe1e <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c001fe50:	e4 60                	in     al,0x60
c001fe52:	3c 1c                	cmp    al,0x1c
c001fe54:	74 04                	je     c001fe5a <SATA::access(unsigned long long, int, void*, bool)+0x68>
c001fe56:	3c 5a                	cmp    al,0x5a
c001fe58:	75 f6                	jne    c001fe50 <SATA::access(unsigned long long, int, void*, bool)+0x5e>
c001fe5a:	e4 60                	in     al,0x60
c001fe5c:	3c 5a                	cmp    al,0x5a
c001fe5e:	74 fa                	je     c001fe5a <SATA::access(unsigned long long, int, void*, bool)+0x68>
c001fe60:	3c 1c                	cmp    al,0x1c
c001fe62:	74 f6                	je     c001fe5a <SATA::access(unsigned long long, int, void*, bool)+0x68>
c001fe64:	eb b8                	jmp    c001fe1e <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c001fe66:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c001fe6d:	75 29                	jne    c001fe98 <SATA::access(unsigned long long, int, void*, bool)+0xa6>
c001fe6f:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001fe75:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001fe7b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001fe81:	8d 75 02             	lea    esi,[ebp+0x2]
c001fe84:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fe88:	c1 e6 07             	shl    esi,0x7
c001fe8b:	01 c6                	add    esi,eax
c001fe8d:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c001fe94:	74 4a                	je     c001fee0 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c001fe96:	eb 2f                	jmp    c001fec7 <SATA::access(unsigned long long, int, void*, bool)+0xd5>
c001fe98:	83 ec 0c             	sub    esp,0xc
c001fe9b:	68 e6 57 02 c0       	push   0xc00257e6
c001fea0:	e8 20 9b fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c001fea5:	83 c4 10             	add    esp,0x10
c001fea8:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c001feaf:	75 be                	jne    c001fe6f <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c001feb1:	e4 60                	in     al,0x60
c001feb3:	3c 1c                	cmp    al,0x1c
c001feb5:	74 04                	je     c001febb <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c001feb7:	3c 5a                	cmp    al,0x5a
c001feb9:	75 f6                	jne    c001feb1 <SATA::access(unsigned long long, int, void*, bool)+0xbf>
c001febb:	e4 60                	in     al,0x60
c001febd:	3c 5a                	cmp    al,0x5a
c001febf:	74 fa                	je     c001febb <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c001fec1:	3c 1c                	cmp    al,0x1c
c001fec3:	74 f6                	je     c001febb <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c001fec5:	eb a8                	jmp    c001fe6f <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c001fec7:	83 ec 0c             	sub    esp,0xc
c001feca:	68 f5 57 02 c0       	push   0xc00257f5
c001fecf:	e8 f1 9a fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c001fed4:	83 c4 10             	add    esp,0x10
c001fed7:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c001fede:	74 3d                	je     c001ff1d <SATA::access(unsigned long long, int, void*, bool)+0x12b>
c001fee0:	89 e8                	mov    eax,ebp
c001fee2:	c1 e0 07             	shl    eax,0x7
c001fee5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001fee9:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001fef3:	52                   	push   edx
c001fef4:	52                   	push   edx
c001fef5:	56                   	push   esi
c001fef6:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001fefc:	e8 fd eb ff ff       	call   c001eafe <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001ff01:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ff05:	83 c4 10             	add    esp,0x10
c001ff08:	b8 01 00 00 00       	mov    eax,0x1
c001ff0d:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001ff12:	75 1d                	jne    c001ff31 <SATA::access(unsigned long long, int, void*, bool)+0x13f>
c001ff14:	e9 c8 04 00 00       	jmp    c00203e1 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c001ff19:	3c 5a                	cmp    al,0x5a
c001ff1b:	74 0c                	je     c001ff29 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c001ff1d:	e4 60                	in     al,0x60
c001ff1f:	3c 1c                	cmp    al,0x1c
c001ff21:	75 f6                	jne    c001ff19 <SATA::access(unsigned long long, int, void*, bool)+0x127>
c001ff23:	eb 04                	jmp    c001ff29 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c001ff25:	3c 1c                	cmp    al,0x1c
c001ff27:	75 b7                	jne    c001fee0 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c001ff29:	e4 60                	in     al,0x60
c001ff2b:	3c 5a                	cmp    al,0x5a
c001ff2d:	74 fa                	je     c001ff29 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c001ff2f:	eb f4                	jmp    c001ff25 <SATA::access(unsigned long long, int, void*, bool)+0x133>
c001ff31:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c001ff38:	74 3a                	je     c001ff74 <SATA::access(unsigned long long, int, void*, bool)+0x182>
c001ff3a:	83 ec 0c             	sub    esp,0xc
c001ff3d:	68 04 58 02 c0       	push   0xc0025804
c001ff42:	e8 7e 9a fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c001ff47:	83 c4 10             	add    esp,0x10
c001ff4a:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c001ff51:	74 0d                	je     c001ff60 <SATA::access(unsigned long long, int, void*, bool)+0x16e>
c001ff53:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ff58:	74 34                	je     c001ff8e <SATA::access(unsigned long long, int, void*, bool)+0x19c>
c001ff5a:	eb 1f                	jmp    c001ff7b <SATA::access(unsigned long long, int, void*, bool)+0x189>
c001ff5c:	3c 1c                	cmp    al,0x1c
c001ff5e:	74 0c                	je     c001ff6c <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001ff60:	e4 60                	in     al,0x60
c001ff62:	3c 5a                	cmp    al,0x5a
c001ff64:	75 f6                	jne    c001ff5c <SATA::access(unsigned long long, int, void*, bool)+0x16a>
c001ff66:	eb 04                	jmp    c001ff6c <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001ff68:	3c 1c                	cmp    al,0x1c
c001ff6a:	75 e7                	jne    c001ff53 <SATA::access(unsigned long long, int, void*, bool)+0x161>
c001ff6c:	e4 60                	in     al,0x60
c001ff6e:	3c 5a                	cmp    al,0x5a
c001ff70:	74 fa                	je     c001ff6c <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001ff72:	eb f4                	jmp    c001ff68 <SATA::access(unsigned long long, int, void*, bool)+0x176>
c001ff74:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ff79:	74 1c                	je     c001ff97 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c001ff7b:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c001ff7f:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001ff85:	c1 e1 09             	shl    ecx,0x9
c001ff88:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001ff8c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ff8e:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c001ff95:	75 55                	jne    c001ffec <SATA::access(unsigned long long, int, void*, bool)+0x1fa>
c001ff97:	8d 45 02             	lea    eax,[ebp+0x2]
c001ff9a:	c1 e0 07             	shl    eax,0x7
c001ff9d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ffa1:	8b 38                	mov    edi,DWORD PTR [eax]
c001ffa3:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001ffa9:	2b b8 5c 01 00 00    	sub    edi,DWORD PTR [eax+0x15c]
c001ffaf:	03 b8 58 01 00 00    	add    edi,DWORD PTR [eax+0x158]
c001ffb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffb9:	c1 e0 05             	shl    eax,0x5
c001ffbc:	01 c7                	add    edi,eax
c001ffbe:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ffc2:	83 e0 01             	and    eax,0x1
c001ffc5:	c1 e0 06             	shl    eax,0x6
c001ffc8:	88 c2                	mov    dl,al
c001ffca:	8a 07                	mov    al,BYTE PTR [edi]
c001ffcc:	83 e0 bf             	and    eax,0xffffffbf
c001ffcf:	09 d0                	or     eax,edx
c001ffd1:	88 07                	mov    BYTE PTR [edi],al
c001ffd3:	8b 07                	mov    eax,DWORD PTR [edi]
c001ffd5:	25 e0 ff 00 00       	and    eax,0xffe0
c001ffda:	0d 05 00 01 00       	or     eax,0x10005
c001ffdf:	89 07                	mov    DWORD PTR [edi],eax
c001ffe1:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c001ffe8:	74 4d                	je     c0020037 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c001ffea:	eb 32                	jmp    c002001e <SATA::access(unsigned long long, int, void*, bool)+0x22c>
c001ffec:	83 ec 0c             	sub    esp,0xc
c001ffef:	68 13 58 02 c0       	push   0xc0025813
c001fff4:	e8 cc 99 fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c001fff9:	83 c4 10             	add    esp,0x10
c001fffc:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c0020003:	75 92                	jne    c001ff97 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020005:	e4 60                	in     al,0x60
c0020007:	3c 1c                	cmp    al,0x1c
c0020009:	74 04                	je     c002000f <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c002000b:	3c 5a                	cmp    al,0x5a
c002000d:	75 f6                	jne    c0020005 <SATA::access(unsigned long long, int, void*, bool)+0x213>
c002000f:	e4 60                	in     al,0x60
c0020011:	3c 5a                	cmp    al,0x5a
c0020013:	74 fa                	je     c002000f <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020015:	3c 1c                	cmp    al,0x1c
c0020017:	74 f6                	je     c002000f <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020019:	e9 79 ff ff ff       	jmp    c001ff97 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c002001e:	83 ec 0c             	sub    esp,0xc
c0020021:	68 22 58 02 c0       	push   0xc0025822
c0020026:	e8 9a 99 fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c002002b:	83 c4 10             	add    esp,0x10
c002002e:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c0020035:	74 3b                	je     c0020072 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c0020037:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002003d:	8b b0 58 01 00 00    	mov    esi,DWORD PTR [eax+0x158]
c0020043:	2b b0 5c 01 00 00    	sub    esi,DWORD PTR [eax+0x15c]
c0020049:	03 77 08             	add    esi,DWORD PTR [edi+0x8]
c002004c:	50                   	push   eax
c002004d:	0f b7 47 02          	movzx  eax,WORD PTR [edi+0x2]
c0020051:	83 c0 08             	add    eax,0x8
c0020054:	c1 e0 04             	shl    eax,0x4
c0020057:	50                   	push   eax
c0020058:	6a 00                	push   0x0
c002005a:	56                   	push   esi
c002005b:	e8 1c 06 fe ff       	call   c000067c <memset>
c0020060:	83 c4 10             	add    esp,0x10
c0020063:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c002006a:	74 33                	je     c002009f <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c002006c:	eb 18                	jmp    c0020086 <SATA::access(unsigned long long, int, void*, bool)+0x294>
c002006e:	3c 1c                	cmp    al,0x1c
c0020070:	74 0c                	je     c002007e <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020072:	e4 60                	in     al,0x60
c0020074:	3c 5a                	cmp    al,0x5a
c0020076:	75 f6                	jne    c002006e <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c0020078:	eb 04                	jmp    c002007e <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c002007a:	3c 1c                	cmp    al,0x1c
c002007c:	75 b9                	jne    c0020037 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c002007e:	e4 60                	in     al,0x60
c0020080:	3c 5a                	cmp    al,0x5a
c0020082:	74 fa                	je     c002007e <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020084:	eb f4                	jmp    c002007a <SATA::access(unsigned long long, int, void*, bool)+0x288>
c0020086:	83 ec 0c             	sub    esp,0xc
c0020089:	68 31 58 02 c0       	push   0xc0025831
c002008e:	e8 32 99 fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0020093:	83 c4 10             	add    esp,0x10
c0020096:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c002009d:	74 48                	je     c00200e7 <SATA::access(unsigned long long, int, void*, bool)+0x2f5>
c002009f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00200a5:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c00200ab:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00200af:	c1 e0 09             	shl    eax,0x9
c00200b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00200b6:	48                   	dec    eax
c00200b7:	25 ff ff 3f 00       	and    eax,0x3fffff
c00200bc:	89 c2                	mov    edx,eax
c00200be:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c00200c4:	25 00 00 c0 ff       	and    eax,0xffc00000
c00200c9:	09 d0                	or     eax,edx
c00200cb:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c00200d1:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c00200d8:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c00200df:	74 33                	je     c0020114 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c00200e1:	eb 18                	jmp    c00200fb <SATA::access(unsigned long long, int, void*, bool)+0x309>
c00200e3:	3c 1c                	cmp    al,0x1c
c00200e5:	74 0c                	je     c00200f3 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c00200e7:	e4 60                	in     al,0x60
c00200e9:	3c 5a                	cmp    al,0x5a
c00200eb:	75 f6                	jne    c00200e3 <SATA::access(unsigned long long, int, void*, bool)+0x2f1>
c00200ed:	eb 04                	jmp    c00200f3 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c00200ef:	3c 1c                	cmp    al,0x1c
c00200f1:	75 ac                	jne    c002009f <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c00200f3:	e4 60                	in     al,0x60
c00200f5:	3c 5a                	cmp    al,0x5a
c00200f7:	74 fa                	je     c00200f3 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c00200f9:	eb f4                	jmp    c00200ef <SATA::access(unsigned long long, int, void*, bool)+0x2fd>
c00200fb:	83 ec 0c             	sub    esp,0xc
c00200fe:	68 40 58 02 c0       	push   0xc0025840
c0020103:	e8 bd 98 fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0020108:	83 c4 10             	add    esp,0x10
c002010b:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c0020112:	74 63                	je     c0020177 <SATA::access(unsigned long long, int, void*, bool)+0x385>
c0020114:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020117:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002011b:	66 25 00 7f          	and    ax,0x7f00
c002011f:	66 0d 27 80          	or     ax,0x8027
c0020123:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0020128:	66 89 06             	mov    WORD PTR [esi],ax
c002012b:	19 c0                	sbb    eax,eax
c002012d:	83 e0 f0             	and    eax,0xfffffff0
c0020130:	83 c0 35             	add    eax,0x35
c0020133:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0020136:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002013a:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c002013e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020142:	c1 e8 10             	shr    eax,0x10
c0020145:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0020148:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002014c:	c1 e8 18             	shr    eax,0x18
c002014f:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c0020156:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0020159:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c002015d:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0020160:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020164:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0020167:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002016b:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c002016f:	74 33                	je     c00201a4 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c0020171:	eb 18                	jmp    c002018b <SATA::access(unsigned long long, int, void*, bool)+0x399>
c0020173:	3c 1c                	cmp    al,0x1c
c0020175:	74 0c                	je     c0020183 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020177:	e4 60                	in     al,0x60
c0020179:	3c 5a                	cmp    al,0x5a
c002017b:	75 f6                	jne    c0020173 <SATA::access(unsigned long long, int, void*, bool)+0x381>
c002017d:	eb 04                	jmp    c0020183 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c002017f:	3c 1c                	cmp    al,0x1c
c0020181:	75 91                	jne    c0020114 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c0020183:	e4 60                	in     al,0x60
c0020185:	3c 5a                	cmp    al,0x5a
c0020187:	74 fa                	je     c0020183 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020189:	eb f4                	jmp    c002017f <SATA::access(unsigned long long, int, void*, bool)+0x38d>
c002018b:	83 ec 0c             	sub    esp,0xc
c002018e:	68 4f 58 02 c0       	push   0xc002584f
c0020193:	e8 2d 98 fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0020198:	83 c4 10             	add    esp,0x10
c002019b:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c00201a2:	74 11                	je     c00201b5 <SATA::access(unsigned long long, int, void*, bool)+0x3c3>
c00201a4:	89 e8                	mov    eax,ebp
c00201a6:	31 f6                	xor    esi,esi
c00201a8:	c1 e0 07             	shl    eax,0x7
c00201ab:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00201af:	eb 21                	jmp    c00201d2 <SATA::access(unsigned long long, int, void*, bool)+0x3e0>
c00201b1:	3c 1c                	cmp    al,0x1c
c00201b3:	74 0c                	je     c00201c1 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c00201b5:	e4 60                	in     al,0x60
c00201b7:	3c 5a                	cmp    al,0x5a
c00201b9:	75 f6                	jne    c00201b1 <SATA::access(unsigned long long, int, void*, bool)+0x3bf>
c00201bb:	eb 04                	jmp    c00201c1 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c00201bd:	3c 1c                	cmp    al,0x1c
c00201bf:	75 e3                	jne    c00201a4 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c00201c1:	e4 60                	in     al,0x60
c00201c3:	3c 5a                	cmp    al,0x5a
c00201c5:	74 fa                	je     c00201c1 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c00201c7:	eb f4                	jmp    c00201bd <SATA::access(unsigned long long, int, void*, bool)+0x3cb>
c00201c9:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c00201cf:	74 0c                	je     c00201dd <SATA::access(unsigned long long, int, void*, bool)+0x3eb>
c00201d1:	46                   	inc    esi
c00201d2:	8b 90 20 01 00 00    	mov    edx,DWORD PTR [eax+0x120]
c00201d8:	80 e2 88             	and    dl,0x88
c00201db:	75 ec                	jne    c00201c9 <SATA::access(unsigned long long, int, void*, bool)+0x3d7>
c00201dd:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c00201e4:	74 3d                	je     c0020223 <SATA::access(unsigned long long, int, void*, bool)+0x431>
c00201e6:	83 ec 0c             	sub    esp,0xc
c00201e9:	68 5e 58 02 c0       	push   0xc002585e
c00201ee:	e8 d2 97 fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c00201f3:	8b 15 a0 66 02 c0    	mov    edx,DWORD PTR ds:0xc00266a0
c00201f9:	83 c4 10             	add    esp,0x10
c00201fc:	f6 c2 80             	test   dl,0x80
c00201ff:	74 0e                	je     c002020f <SATA::access(unsigned long long, int, void*, bool)+0x41d>
c0020201:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020207:	75 2f                	jne    c0020238 <SATA::access(unsigned long long, int, void*, bool)+0x446>
c0020209:	eb 20                	jmp    c002022b <SATA::access(unsigned long long, int, void*, bool)+0x439>
c002020b:	3c 1c                	cmp    al,0x1c
c002020d:	74 0c                	je     c002021b <SATA::access(unsigned long long, int, void*, bool)+0x429>
c002020f:	e4 60                	in     al,0x60
c0020211:	3c 5a                	cmp    al,0x5a
c0020213:	75 f6                	jne    c002020b <SATA::access(unsigned long long, int, void*, bool)+0x419>
c0020215:	eb 04                	jmp    c002021b <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0020217:	3c 1c                	cmp    al,0x1c
c0020219:	75 e6                	jne    c0020201 <SATA::access(unsigned long long, int, void*, bool)+0x40f>
c002021b:	e4 60                	in     al,0x60
c002021d:	3c 5a                	cmp    al,0x5a
c002021f:	74 fa                	je     c002021b <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0020221:	eb f4                	jmp    c0020217 <SATA::access(unsigned long long, int, void*, bool)+0x425>
c0020223:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020229:	75 13                	jne    c002023e <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c002022b:	83 ec 0c             	sub    esp,0xc
c002022e:	68 6e 58 02 c0       	push   0xc002586e
c0020233:	e9 d2 00 00 00       	jmp    c002030a <SATA::access(unsigned long long, int, void*, bool)+0x518>
c0020238:	0f ba e2 0b          	bt     edx,0xb
c002023c:	72 25                	jb     c0020263 <SATA::access(unsigned long long, int, void*, bool)+0x471>
c002023e:	be 01 00 00 00       	mov    esi,0x1
c0020243:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020247:	89 e8                	mov    eax,ebp
c0020249:	d3 e6                	shl    esi,cl
c002024b:	c1 e0 07             	shl    eax,0x7
c002024e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020252:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c0020259:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c002025f:	74 4a                	je     c00202ab <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c0020261:	eb 2f                	jmp    c0020292 <SATA::access(unsigned long long, int, void*, bool)+0x4a0>
c0020263:	83 ec 0c             	sub    esp,0xc
c0020266:	68 7c 58 02 c0       	push   0xc002587c
c002026b:	e8 55 97 fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0020270:	83 c4 10             	add    esp,0x10
c0020273:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c002027a:	75 c2                	jne    c002023e <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c002027c:	e4 60                	in     al,0x60
c002027e:	3c 5a                	cmp    al,0x5a
c0020280:	74 04                	je     c0020286 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020282:	3c 1c                	cmp    al,0x1c
c0020284:	75 f6                	jne    c002027c <SATA::access(unsigned long long, int, void*, bool)+0x48a>
c0020286:	e4 60                	in     al,0x60
c0020288:	3c 5a                	cmp    al,0x5a
c002028a:	74 fa                	je     c0020286 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c002028c:	3c 1c                	cmp    al,0x1c
c002028e:	74 f6                	je     c0020286 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020290:	eb ac                	jmp    c002023e <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0020292:	83 ec 0c             	sub    esp,0xc
c0020295:	68 8c 58 02 c0       	push   0xc002588c
c002029a:	e8 26 97 fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c002029f:	83 c4 10             	add    esp,0x10
c00202a2:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c00202a9:	74 0f                	je     c00202ba <SATA::access(unsigned long long, int, void*, bool)+0x4c8>
c00202ab:	89 e8                	mov    eax,ebp
c00202ad:	c1 e0 07             	shl    eax,0x7
c00202b0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00202b4:	eb 24                	jmp    c00202da <SATA::access(unsigned long long, int, void*, bool)+0x4e8>
c00202b6:	3c 1c                	cmp    al,0x1c
c00202b8:	74 0c                	je     c00202c6 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c00202ba:	e4 60                	in     al,0x60
c00202bc:	3c 5a                	cmp    al,0x5a
c00202be:	75 f6                	jne    c00202b6 <SATA::access(unsigned long long, int, void*, bool)+0x4c4>
c00202c0:	eb 04                	jmp    c00202c6 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c00202c2:	3c 1c                	cmp    al,0x1c
c00202c4:	75 e5                	jne    c00202ab <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c00202c6:	e4 60                	in     al,0x60
c00202c8:	3c 5a                	cmp    al,0x5a
c00202ca:	74 fa                	je     c00202c6 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c00202cc:	eb f4                	jmp    c00202c2 <SATA::access(unsigned long long, int, void*, bool)+0x4d0>
c00202ce:	8b 90 10 01 00 00    	mov    edx,DWORD PTR [eax+0x110]
c00202d4:	0f ba e2 1e          	bt     edx,0x1e
c00202d8:	72 28                	jb     c0020302 <SATA::access(unsigned long long, int, void*, bool)+0x510>
c00202da:	8b 90 38 01 00 00    	mov    edx,DWORD PTR [eax+0x138]
c00202e0:	85 d6                	test   esi,edx
c00202e2:	75 ea                	jne    c00202ce <SATA::access(unsigned long long, int, void*, bool)+0x4dc>
c00202e4:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c00202eb:	75 2f                	jne    c002031c <SATA::access(unsigned long long, int, void*, bool)+0x52a>
c00202ed:	89 e8                	mov    eax,ebp
c00202ef:	c1 e0 07             	shl    eax,0x7
c00202f2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00202f6:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00202fc:	0f ba e0 1e          	bt     eax,0x1e
c0020300:	73 49                	jae    c002034b <SATA::access(unsigned long long, int, void*, bool)+0x559>
c0020302:	83 ec 0c             	sub    esp,0xc
c0020305:	68 9c 58 02 c0       	push   0xc002589c
c002030a:	e8 6a c9 fe ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c002030f:	83 c4 10             	add    esp,0x10
c0020312:	b8 01 00 00 00       	mov    eax,0x1
c0020317:	e9 c5 00 00 00       	jmp    c00203e1 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c002031c:	83 ec 0c             	sub    esp,0xc
c002031f:	68 ad 58 02 c0       	push   0xc00258ad
c0020324:	e8 9c 96 fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0020329:	83 c4 10             	add    esp,0x10
c002032c:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c0020333:	75 b8                	jne    c00202ed <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c0020335:	e4 60                	in     al,0x60
c0020337:	3c 5a                	cmp    al,0x5a
c0020339:	74 04                	je     c002033f <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c002033b:	3c 1c                	cmp    al,0x1c
c002033d:	75 f6                	jne    c0020335 <SATA::access(unsigned long long, int, void*, bool)+0x543>
c002033f:	e4 60                	in     al,0x60
c0020341:	3c 5a                	cmp    al,0x5a
c0020343:	74 fa                	je     c002033f <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0020345:	3c 1c                	cmp    al,0x1c
c0020347:	74 f6                	je     c002033f <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0020349:	eb a2                	jmp    c00202ed <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c002034b:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c0020352:	74 3a                	je     c002038e <SATA::access(unsigned long long, int, void*, bool)+0x59c>
c0020354:	83 ec 0c             	sub    esp,0xc
c0020357:	68 bd 58 02 c0       	push   0xc00258bd
c002035c:	e8 64 96 fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0020361:	83 c4 10             	add    esp,0x10
c0020364:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c002036b:	74 0d                	je     c002037a <SATA::access(unsigned long long, int, void*, bool)+0x588>
c002036d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020372:	75 31                	jne    c00203a5 <SATA::access(unsigned long long, int, void*, bool)+0x5b3>
c0020374:	eb 1f                	jmp    c0020395 <SATA::access(unsigned long long, int, void*, bool)+0x5a3>
c0020376:	3c 1c                	cmp    al,0x1c
c0020378:	74 0c                	je     c0020386 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c002037a:	e4 60                	in     al,0x60
c002037c:	3c 5a                	cmp    al,0x5a
c002037e:	75 f6                	jne    c0020376 <SATA::access(unsigned long long, int, void*, bool)+0x584>
c0020380:	eb 04                	jmp    c0020386 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0020382:	3c 1c                	cmp    al,0x1c
c0020384:	75 e7                	jne    c002036d <SATA::access(unsigned long long, int, void*, bool)+0x57b>
c0020386:	e4 60                	in     al,0x60
c0020388:	3c 5a                	cmp    al,0x5a
c002038a:	74 fa                	je     c0020386 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c002038c:	eb f4                	jmp    c0020382 <SATA::access(unsigned long long, int, void*, bool)+0x590>
c002038e:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020393:	75 19                	jne    c00203ae <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020395:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c002039b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c002039f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00203a3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00203a5:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c00203ac:	75 04                	jne    c00203b2 <SATA::access(unsigned long long, int, void*, bool)+0x5c0>
c00203ae:	31 c0                	xor    eax,eax
c00203b0:	eb 2f                	jmp    c00203e1 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c00203b2:	83 ec 0c             	sub    esp,0xc
c00203b5:	68 cd 58 02 c0       	push   0xc00258cd
c00203ba:	e8 06 96 fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c00203bf:	83 c4 10             	add    esp,0x10
c00203c2:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c00203c9:	75 e3                	jne    c00203ae <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c00203cb:	e4 60                	in     al,0x60
c00203cd:	3c 1c                	cmp    al,0x1c
c00203cf:	74 04                	je     c00203d5 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c00203d1:	3c 5a                	cmp    al,0x5a
c00203d3:	75 f6                	jne    c00203cb <SATA::access(unsigned long long, int, void*, bool)+0x5d9>
c00203d5:	e4 60                	in     al,0x60
c00203d7:	3c 5a                	cmp    al,0x5a
c00203d9:	74 fa                	je     c00203d5 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c00203db:	3c 1c                	cmp    al,0x1c
c00203dd:	74 f6                	je     c00203d5 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c00203df:	eb cd                	jmp    c00203ae <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c00203e1:	83 c4 2c             	add    esp,0x2c
c00203e4:	5b                   	pop    ebx
c00203e5:	5e                   	pop    esi
c00203e6:	5f                   	pop    edi
c00203e7:	5d                   	pop    ebp
c00203e8:	c3                   	ret    
c00203e9:	90                   	nop

c00203ea <SATA::read(unsigned long long, int, void*)>:
c00203ea:	55                   	push   ebp
c00203eb:	57                   	push   edi
c00203ec:	56                   	push   esi
c00203ed:	53                   	push   ebx
c00203ee:	83 ec 0c             	sub    esp,0xc
c00203f1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00203f5:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00203f9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00203fd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020401:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c0020408:	74 2d                	je     c0020437 <SATA::read(unsigned long long, int, void*)+0x4d>
c002040a:	83 ec 0c             	sub    esp,0xc
c002040d:	68 dd 58 02 c0       	push   0xc00258dd
c0020412:	e8 ae 95 fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0020417:	83 c4 10             	add    esp,0x10
c002041a:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c0020421:	75 14                	jne    c0020437 <SATA::read(unsigned long long, int, void*)+0x4d>
c0020423:	e4 60                	in     al,0x60
c0020425:	3c 1c                	cmp    al,0x1c
c0020427:	74 04                	je     c002042d <SATA::read(unsigned long long, int, void*)+0x43>
c0020429:	3c 5a                	cmp    al,0x5a
c002042b:	75 f6                	jne    c0020423 <SATA::read(unsigned long long, int, void*)+0x39>
c002042d:	e4 60                	in     al,0x60
c002042f:	3c 5a                	cmp    al,0x5a
c0020431:	74 fa                	je     c002042d <SATA::read(unsigned long long, int, void*)+0x43>
c0020433:	3c 1c                	cmp    al,0x1c
c0020435:	74 f6                	je     c002042d <SATA::read(unsigned long long, int, void*)+0x43>
c0020437:	8d 53 ff             	lea    edx,[ebx-0x1]
c002043a:	b8 04 00 00 00       	mov    eax,0x4
c002043f:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0020445:	0f 87 96 00 00 00    	ja     c00204e1 <SATA::read(unsigned long long, int, void*)+0xf7>
c002044b:	b8 06 00 00 00       	mov    eax,0x6
c0020450:	85 ed                	test   ebp,ebp
c0020452:	0f 84 89 00 00 00    	je     c00204e1 <SATA::read(unsigned long long, int, void*)+0xf7>
c0020458:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c002045f:	74 2d                	je     c002048e <SATA::read(unsigned long long, int, void*)+0xa4>
c0020461:	83 ec 0c             	sub    esp,0xc
c0020464:	68 ea 58 02 c0       	push   0xc00258ea
c0020469:	e8 57 95 fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c002046e:	83 c4 10             	add    esp,0x10
c0020471:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c0020478:	75 14                	jne    c002048e <SATA::read(unsigned long long, int, void*)+0xa4>
c002047a:	e4 60                	in     al,0x60
c002047c:	3c 5a                	cmp    al,0x5a
c002047e:	74 04                	je     c0020484 <SATA::read(unsigned long long, int, void*)+0x9a>
c0020480:	3c 1c                	cmp    al,0x1c
c0020482:	75 f6                	jne    c002047a <SATA::read(unsigned long long, int, void*)+0x90>
c0020484:	e4 60                	in     al,0x60
c0020486:	3c 5a                	cmp    al,0x5a
c0020488:	74 fa                	je     c0020484 <SATA::read(unsigned long long, int, void*)+0x9a>
c002048a:	3c 1c                	cmp    al,0x1c
c002048c:	74 f6                	je     c0020484 <SATA::read(unsigned long long, int, void*)+0x9a>
c002048e:	50                   	push   eax
c002048f:	50                   	push   eax
c0020490:	6a 00                	push   0x0
c0020492:	55                   	push   ebp
c0020493:	53                   	push   ebx
c0020494:	57                   	push   edi
c0020495:	56                   	push   esi
c0020496:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002049a:	e8 53 f9 ff ff       	call   c001fdf2 <SATA::access(unsigned long long, int, void*, bool)>
c002049f:	83 c4 20             	add    esp,0x20
c00204a2:	89 c3                	mov    ebx,eax
c00204a4:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c00204ab:	74 2d                	je     c00204da <SATA::read(unsigned long long, int, void*)+0xf0>
c00204ad:	83 ec 0c             	sub    esp,0xc
c00204b0:	68 f7 58 02 c0       	push   0xc00258f7
c00204b5:	e8 0b 95 fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c00204ba:	83 c4 10             	add    esp,0x10
c00204bd:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c00204c4:	75 14                	jne    c00204da <SATA::read(unsigned long long, int, void*)+0xf0>
c00204c6:	e4 60                	in     al,0x60
c00204c8:	3c 5a                	cmp    al,0x5a
c00204ca:	74 04                	je     c00204d0 <SATA::read(unsigned long long, int, void*)+0xe6>
c00204cc:	3c 1c                	cmp    al,0x1c
c00204ce:	75 f6                	jne    c00204c6 <SATA::read(unsigned long long, int, void*)+0xdc>
c00204d0:	e4 60                	in     al,0x60
c00204d2:	3c 5a                	cmp    al,0x5a
c00204d4:	74 fa                	je     c00204d0 <SATA::read(unsigned long long, int, void*)+0xe6>
c00204d6:	3c 1c                	cmp    al,0x1c
c00204d8:	74 f6                	je     c00204d0 <SATA::read(unsigned long long, int, void*)+0xe6>
c00204da:	31 c0                	xor    eax,eax
c00204dc:	85 db                	test   ebx,ebx
c00204de:	0f 95 c0             	setne  al
c00204e1:	83 c4 0c             	add    esp,0xc
c00204e4:	5b                   	pop    ebx
c00204e5:	5e                   	pop    esi
c00204e6:	5f                   	pop    edi
c00204e7:	5d                   	pop    ebp
c00204e8:	c3                   	ret    
c00204e9:	90                   	nop

c00204ea <SATA::write(unsigned long long, int, void*)>:
c00204ea:	55                   	push   ebp
c00204eb:	57                   	push   edi
c00204ec:	56                   	push   esi
c00204ed:	53                   	push   ebx
c00204ee:	83 ec 1c             	sub    esp,0x1c
c00204f1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00204f5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00204f9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00204fd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020501:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c0020508:	74 2d                	je     c0020537 <SATA::write(unsigned long long, int, void*)+0x4d>
c002050a:	83 ec 0c             	sub    esp,0xc
c002050d:	68 04 59 02 c0       	push   0xc0025904
c0020512:	e8 ae 94 fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c0020517:	83 c4 10             	add    esp,0x10
c002051a:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c0020521:	75 14                	jne    c0020537 <SATA::write(unsigned long long, int, void*)+0x4d>
c0020523:	e4 60                	in     al,0x60
c0020525:	3c 1c                	cmp    al,0x1c
c0020527:	74 04                	je     c002052d <SATA::write(unsigned long long, int, void*)+0x43>
c0020529:	3c 5a                	cmp    al,0x5a
c002052b:	75 f6                	jne    c0020523 <SATA::write(unsigned long long, int, void*)+0x39>
c002052d:	e4 60                	in     al,0x60
c002052f:	3c 5a                	cmp    al,0x5a
c0020531:	74 fa                	je     c002052d <SATA::write(unsigned long long, int, void*)+0x43>
c0020533:	3c 1c                	cmp    al,0x1c
c0020535:	74 f6                	je     c002052d <SATA::write(unsigned long long, int, void*)+0x43>
c0020537:	8d 55 ff             	lea    edx,[ebp-0x1]
c002053a:	b8 04 00 00 00       	mov    eax,0x4
c002053f:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0020545:	0f 87 bd 00 00 00    	ja     c0020608 <SATA::write(unsigned long long, int, void*)+0x11e>
c002054b:	b8 06 00 00 00       	mov    eax,0x6
c0020550:	85 db                	test   ebx,ebx
c0020552:	0f 84 b0 00 00 00    	je     c0020608 <SATA::write(unsigned long long, int, void*)+0x11e>
c0020558:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c002055f:	74 2d                	je     c002058e <SATA::write(unsigned long long, int, void*)+0xa4>
c0020561:	83 ec 0c             	sub    esp,0xc
c0020564:	68 12 59 02 c0       	push   0xc0025912
c0020569:	e8 57 94 fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c002056e:	83 c4 10             	add    esp,0x10
c0020571:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c0020578:	75 14                	jne    c002058e <SATA::write(unsigned long long, int, void*)+0xa4>
c002057a:	e4 60                	in     al,0x60
c002057c:	3c 1c                	cmp    al,0x1c
c002057e:	74 04                	je     c0020584 <SATA::write(unsigned long long, int, void*)+0x9a>
c0020580:	3c 5a                	cmp    al,0x5a
c0020582:	75 f6                	jne    c002057a <SATA::write(unsigned long long, int, void*)+0x90>
c0020584:	e4 60                	in     al,0x60
c0020586:	3c 5a                	cmp    al,0x5a
c0020588:	74 fa                	je     c0020584 <SATA::write(unsigned long long, int, void*)+0x9a>
c002058a:	3c 1c                	cmp    al,0x1c
c002058c:	74 f6                	je     c0020584 <SATA::write(unsigned long long, int, void*)+0x9a>
c002058e:	c1 e5 09             	shl    ebp,0x9
c0020591:	01 dd                	add    ebp,ebx
c0020593:	89 f0                	mov    eax,esi
c0020595:	89 fa                	mov    edx,edi
c0020597:	83 c0 01             	add    eax,0x1
c002059a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002059e:	83 d2 00             	adc    edx,0x0
c00205a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00205a5:	50                   	push   eax
c00205a6:	50                   	push   eax
c00205a7:	6a 01                	push   0x1
c00205a9:	53                   	push   ebx
c00205aa:	81 c3 00 02 00 00    	add    ebx,0x200
c00205b0:	6a 01                	push   0x1
c00205b2:	57                   	push   edi
c00205b3:	56                   	push   esi
c00205b4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00205b8:	e8 35 f8 ff ff       	call   c001fdf2 <SATA::access(unsigned long long, int, void*, bool)>
c00205bd:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00205c1:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00205c5:	83 c4 20             	add    esp,0x20
c00205c8:	39 dd                	cmp    ebp,ebx
c00205ca:	75 c7                	jne    c0020593 <SATA::write(unsigned long long, int, void*)+0xa9>
c00205cc:	f6 05 a1 66 02 c0 08 	test   BYTE PTR ds:0xc00266a1,0x8
c00205d3:	75 04                	jne    c00205d9 <SATA::write(unsigned long long, int, void*)+0xef>
c00205d5:	31 c0                	xor    eax,eax
c00205d7:	eb 2f                	jmp    c0020608 <SATA::write(unsigned long long, int, void*)+0x11e>
c00205d9:	83 ec 0c             	sub    esp,0xc
c00205dc:	68 20 59 02 c0       	push   0xc0025920
c00205e1:	e8 df 93 fe ff       	call   c00099c5 <Krnl::setBootMessage(char const*)>
c00205e6:	83 c4 10             	add    esp,0x10
c00205e9:	f6 05 a0 66 02 c0 80 	test   BYTE PTR ds:0xc00266a0,0x80
c00205f0:	75 e3                	jne    c00205d5 <SATA::write(unsigned long long, int, void*)+0xeb>
c00205f2:	e4 60                	in     al,0x60
c00205f4:	3c 5a                	cmp    al,0x5a
c00205f6:	74 04                	je     c00205fc <SATA::write(unsigned long long, int, void*)+0x112>
c00205f8:	3c 1c                	cmp    al,0x1c
c00205fa:	75 f6                	jne    c00205f2 <SATA::write(unsigned long long, int, void*)+0x108>
c00205fc:	e4 60                	in     al,0x60
c00205fe:	3c 5a                	cmp    al,0x5a
c0020600:	74 fa                	je     c00205fc <SATA::write(unsigned long long, int, void*)+0x112>
c0020602:	3c 1c                	cmp    al,0x1c
c0020604:	74 f6                	je     c00205fc <SATA::write(unsigned long long, int, void*)+0x112>
c0020606:	eb cd                	jmp    c00205d5 <SATA::write(unsigned long long, int, void*)+0xeb>
c0020608:	83 c4 1c             	add    esp,0x1c
c002060b:	5b                   	pop    ebx
c002060c:	5e                   	pop    esi
c002060d:	5f                   	pop    edi
c002060e:	5d                   	pop    ebp
c002060f:	c3                   	ret    

c0020610 <SATAPI::write(unsigned long long, int, void*)>:
c0020610:	b8 03 00 00 00       	mov    eax,0x3
c0020615:	c3                   	ret    

c0020616 <SATAPI::close(int, int, void*)>:
c0020616:	83 ec 0c             	sub    esp,0xc
c0020619:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002061d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020623:	85 c0                	test   eax,eax
c0020625:	74 0c                	je     c0020633 <SATAPI::close(int, int, void*)+0x1d>
c0020627:	83 ec 0c             	sub    esp,0xc
c002062a:	8b 10                	mov    edx,DWORD PTR [eax]
c002062c:	50                   	push   eax
c002062d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020630:	83 c4 10             	add    esp,0x10
c0020633:	31 c0                	xor    eax,eax
c0020635:	83 c4 0c             	add    esp,0xc
c0020638:	c3                   	ret    
c0020639:	90                   	nop

c002063a <SATAPI::SATAPI()>:
c002063a:	83 ec 0c             	sub    esp,0xc
c002063d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020641:	83 ec 04             	sub    esp,0x4
c0020644:	68 00 08 00 00       	push   0x800
c0020649:	68 68 59 02 c0       	push   0xc0025968
c002064e:	50                   	push   eax
c002064f:	e8 da de fe ff       	call   c000e52e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020654:	83 c4 10             	add    esp,0x10
c0020657:	ba a4 5a 02 c0       	mov    edx,0xc0025aa4
c002065c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020660:	89 10                	mov    DWORD PTR [eax],edx
c0020662:	90                   	nop
c0020663:	83 c4 0c             	add    esp,0xc
c0020666:	c3                   	ret    
c0020667:	90                   	nop

c0020668 <SATAPI::diskRemoved()>:
c0020668:	c3                   	ret    
c0020669:	90                   	nop

c002066a <SATAPI::diskInserted()>:
c002066a:	83 ec 18             	sub    esp,0x18
c002066d:	68 74 59 02 c0       	push   0xc0025974
c0020672:	e8 02 c6 fe ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0020677:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002067b:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0020682:	83 c4 1c             	add    esp,0x1c
c0020685:	c3                   	ret    

c0020686 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0020686:	55                   	push   ebp
c0020687:	57                   	push   edi
c0020688:	56                   	push   esi
c0020689:	53                   	push   ebx
c002068a:	83 ec 38             	sub    esp,0x38
c002068d:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0020691:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0020695:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0020699:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002069d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00206a1:	68 8c 59 02 c0       	push   0xc002598c
c00206a6:	e8 ce c5 fe ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c00206ab:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c00206b1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00206b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00206bb:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c00206c1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00206c5:	c1 e0 07             	shl    eax,0x7
c00206c8:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00206cc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00206d0:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00206da:	5a                   	pop    edx
c00206db:	59                   	pop    ecx
c00206dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00206e0:	8d 58 02             	lea    ebx,[eax+0x2]
c00206e3:	c1 e3 07             	shl    ebx,0x7
c00206e6:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00206ea:	53                   	push   ebx
c00206eb:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00206f1:	e8 08 e4 ff ff       	call   c001eafe <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00206f6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00206fa:	83 c4 10             	add    esp,0x10
c00206fd:	b8 01 00 00 00       	mov    eax,0x1
c0020702:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020707:	0f 84 ff 01 00 00    	je     c002090c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c002070d:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020713:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020715:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002071b:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020721:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020725:	c1 e1 05             	shl    ecx,0x5
c0020728:	01 c8                	add    eax,ecx
c002072a:	8b 08                	mov    ecx,DWORD PTR [eax]
c002072c:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0020732:	81 c9 25 00 01 00    	or     ecx,0x10025
c0020738:	89 08                	mov    DWORD PTR [eax],ecx
c002073a:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020740:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0020746:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002074c:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002074f:	8d 7b 40             	lea    edi,[ebx+0x40]
c0020752:	50                   	push   eax
c0020753:	68 90 00 00 00       	push   0x90
c0020758:	6a 00                	push   0x0
c002075a:	53                   	push   ebx
c002075b:	e8 1c ff fd ff       	call   c000067c <memset>
c0020760:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0020764:	b9 0c 00 00 00       	mov    ecx,0xc
c0020769:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002076b:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c0020771:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0020775:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002077b:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002077f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020783:	48                   	dec    eax
c0020784:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020789:	89 c1                	mov    ecx,eax
c002078b:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0020791:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020796:	09 c8                	or     eax,ecx
c0020798:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002079e:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00207a1:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00207a8:	66 25 00 7f          	and    ax,0x7f00
c00207ac:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00207b0:	66 0d 27 80          	or     ax,0x8027
c00207b4:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c00207b8:	66 89 03             	mov    WORD PTR [ebx],ax
c00207bb:	89 d0                	mov    eax,edx
c00207bd:	c1 ea 18             	shr    edx,0x18
c00207c0:	c1 e8 10             	shr    eax,0x10
c00207c3:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c00207c6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00207c9:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00207cd:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00207d0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00207d4:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00207d7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00207db:	83 c4 10             	add    esp,0x10
c00207de:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00207e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00207e6:	31 c0                	xor    eax,eax
c00207e8:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c00207ee:	80 e1 88             	and    cl,0x88
c00207f1:	74 0a                	je     c00207fd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c00207f3:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00207f8:	74 0a                	je     c0020804 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c00207fa:	40                   	inc    eax
c00207fb:	eb eb                	jmp    c00207e8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c00207fd:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020802:	75 0a                	jne    c002080e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c0020804:	83 ec 0c             	sub    esp,0xc
c0020807:	68 a6 59 02 c0       	push   0xc00259a6
c002080c:	eb 43                	jmp    c0020851 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c002080e:	be 01 00 00 00       	mov    esi,0x1
c0020813:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020817:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002081b:	d3 e6                	shl    esi,cl
c002081d:	c1 e7 07             	shl    edi,0x7
c0020820:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c0020826:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c002082b:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c002082f:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c0020835:	85 c6                	test   esi,eax
c0020837:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c002083d:	0f 84 96 00 00 00    	je     c00208d9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x253>
c0020843:	0f ba e0 1e          	bt     eax,0x1e
c0020847:	73 1a                	jae    c0020863 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1dd>
c0020849:	83 ec 0c             	sub    esp,0xc
c002084c:	68 bb 59 02 c0       	push   0xc00259bb
c0020851:	e8 23 c4 fe ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0020856:	83 c4 10             	add    esp,0x10
c0020859:	b8 01 00 00 00       	mov    eax,0x1
c002085e:	e9 a9 00 00 00       	jmp    c002090c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c0020863:	83 fb 0d             	cmp    ebx,0xd
c0020866:	77 12                	ja     c002087a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f4>
c0020868:	83 ec 0c             	sub    esp,0xc
c002086b:	68 c8 00 00 00       	push   0xc8
c0020870:	e8 ef 60 ff ff       	call   c0016964 <milliTenthSleep(unsigned int)>
c0020875:	83 c4 10             	add    esp,0x10
c0020878:	eb 2a                	jmp    c00208a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c002087a:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c0020880:	83 f8 0d             	cmp    eax,0xd
c0020883:	77 0a                	ja     c002088f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x209>
c0020885:	83 ec 0c             	sub    esp,0xc
c0020888:	68 58 02 00 00       	push   0x258
c002088d:	eb 28                	jmp    c00208b7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c002088f:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c0020895:	83 f8 0d             	cmp    eax,0xd
c0020898:	77 0a                	ja     c00208a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c002089a:	83 ec 0c             	sub    esp,0xc
c002089d:	68 dc 05 00 00       	push   0x5dc
c00208a2:	eb 13                	jmp    c00208b7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c00208a4:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c00208aa:	83 f8 0d             	cmp    eax,0xd
c00208ad:	77 10                	ja     c00208bf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x239>
c00208af:	83 ec 0c             	sub    esp,0xc
c00208b2:	68 c4 09 00 00       	push   0x9c4
c00208b7:	e8 a8 60 ff ff       	call   c0016964 <milliTenthSleep(unsigned int)>
c00208bc:	83 c4 10             	add    esp,0x10
c00208bf:	43                   	inc    ebx
c00208c0:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c00208c6:	0f 85 63 ff ff ff    	jne    c002082f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1a9>
c00208cc:	83 ec 0c             	sub    esp,0xc
c00208cf:	68 ce 59 02 c0       	push   0xc00259ce
c00208d4:	e9 78 ff ff ff       	jmp    c0020851 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c00208d9:	0f ba e0 1e          	bt     eax,0x1e
c00208dd:	73 0d                	jae    c00208ec <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c00208df:	83 ec 0c             	sub    esp,0xc
c00208e2:	68 e2 59 02 c0       	push   0xc00259e2
c00208e7:	e9 65 ff ff ff       	jmp    c0020851 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c00208ec:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c00208f1:	74 17                	je     c002090a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c00208f3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00208f8:	74 10                	je     c002090a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c00208fa:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c0020900:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0020904:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0020908:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002090a:	31 c0                	xor    eax,eax
c002090c:	83 c4 2c             	add    esp,0x2c
c002090f:	5b                   	pop    ebx
c0020910:	5e                   	pop    esi
c0020911:	5f                   	pop    edi
c0020912:	5d                   	pop    ebp
c0020913:	c3                   	ret    

c0020914 <SATAPI::eject()>:
c0020914:	57                   	push   edi
c0020915:	b9 03 00 00 00       	mov    ecx,0x3
c002091a:	83 ec 18             	sub    esp,0x18
c002091d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020921:	fc                   	cld    
c0020922:	31 c0                	xor    eax,eax
c0020924:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020926:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002092b:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0020930:	50                   	push   eax
c0020931:	6a 00                	push   0x0
c0020933:	6a 00                	push   0x0
c0020935:	6a 00                	push   0x0
c0020937:	6a 00                	push   0x0
c0020939:	6a 02                	push   0x2
c002093b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002093f:	50                   	push   eax
c0020940:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020944:	e8 3d fd ff ff       	call   c0020686 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020949:	31 c0                	xor    eax,eax
c002094b:	83 c4 38             	add    esp,0x38
c002094e:	5f                   	pop    edi
c002094f:	c3                   	ret    

c0020950 <SATAPI::detectMedia()>:
c0020950:	56                   	push   esi
c0020951:	53                   	push   ebx
c0020952:	83 ec 30             	sub    esp,0x30
c0020955:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0020959:	68 f7 59 02 c0       	push   0xc00259f7
c002095e:	e8 16 c3 fe ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0020963:	83 c4 0c             	add    esp,0xc
c0020966:	6a 0c                	push   0xc
c0020968:	6a 00                	push   0x0
c002096a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002096e:	56                   	push   esi
c002096f:	e8 08 fd fd ff       	call   c000067c <memset>
c0020974:	83 c4 0c             	add    esp,0xc
c0020977:	6a 00                	push   0x0
c0020979:	6a 00                	push   0x0
c002097b:	6a 00                	push   0x0
c002097d:	6a 00                	push   0x0
c002097f:	6a 00                	push   0x0
c0020981:	56                   	push   esi
c0020982:	53                   	push   ebx
c0020983:	e8 fe fc ff ff       	call   c0020686 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020988:	83 c4 20             	add    esp,0x20
c002098b:	48                   	dec    eax
c002098c:	74 34                	je     c00209c2 <SATAPI::detectMedia()+0x72>
c002098e:	50                   	push   eax
c002098f:	6a 0c                	push   0xc
c0020991:	6a 00                	push   0x0
c0020993:	56                   	push   esi
c0020994:	e8 e3 fc fd ff       	call   c000067c <memset>
c0020999:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002099e:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00209a3:	83 c4 0c             	add    esp,0xc
c00209a6:	6a 01                	push   0x1
c00209a8:	8d 44 24 16          	lea    eax,[esp+0x16]
c00209ac:	50                   	push   eax
c00209ad:	6a 00                	push   0x0
c00209af:	6a 00                	push   0x0
c00209b1:	6a 12                	push   0x12
c00209b3:	56                   	push   esi
c00209b4:	53                   	push   ebx
c00209b5:	e8 cc fc ff ff       	call   c0020686 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00209ba:	83 c4 20             	add    esp,0x20
c00209bd:	48                   	dec    eax
c00209be:	75 39                	jne    c00209f9 <SATAPI::detectMedia()+0xa9>
c00209c0:	eb 1e                	jmp    c00209e0 <SATAPI::detectMedia()+0x90>
c00209c2:	83 ec 0c             	sub    esp,0xc
c00209c5:	68 0b 5a 02 c0       	push   0xc0025a0b
c00209ca:	e8 aa c2 fe ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c00209cf:	83 c4 10             	add    esp,0x10
c00209d2:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00209d9:	74 b3                	je     c002098e <SATAPI::detectMedia()+0x3e>
c00209db:	e9 93 00 00 00       	jmp    c0020a73 <SATAPI::detectMedia()+0x123>
c00209e0:	83 ec 0c             	sub    esp,0xc
c00209e3:	68 15 5a 02 c0       	push   0xc0025a15
c00209e8:	e8 8c c2 fe ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c00209ed:	83 c4 10             	add    esp,0x10
c00209f0:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00209f7:	75 7a                	jne    c0020a73 <SATAPI::detectMedia()+0x123>
c00209f9:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c00209fd:	83 e0 7f             	and    eax,0x7f
c0020a00:	3c 70                	cmp    al,0x70
c0020a02:	74 25                	je     c0020a29 <SATAPI::detectMedia()+0xd9>
c0020a04:	83 ec 0c             	sub    esp,0xc
c0020a07:	68 1f 5a 02 c0       	push   0xc0025a1f
c0020a0c:	e8 68 c2 fe ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0020a11:	83 c4 10             	add    esp,0x10
c0020a14:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020a1b:	75 0c                	jne    c0020a29 <SATAPI::detectMedia()+0xd9>
c0020a1d:	83 ec 0c             	sub    esp,0xc
c0020a20:	53                   	push   ebx
c0020a21:	e8 44 fc ff ff       	call   c002066a <SATAPI::diskInserted()>
c0020a26:	83 c4 10             	add    esp,0x10
c0020a29:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020a2d:	83 e0 0f             	and    eax,0xf
c0020a30:	3c 02                	cmp    al,0x2
c0020a32:	75 16                	jne    c0020a4a <SATAPI::detectMedia()+0xfa>
c0020a34:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0020a39:	75 38                	jne    c0020a73 <SATAPI::detectMedia()+0x123>
c0020a3b:	83 ec 0c             	sub    esp,0xc
c0020a3e:	68 28 5a 02 c0       	push   0xc0025a28
c0020a43:	e8 31 c2 fe ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0020a48:	eb 26                	jmp    c0020a70 <SATAPI::detectMedia()+0x120>
c0020a4a:	84 c0                	test   al,al
c0020a4c:	75 25                	jne    c0020a73 <SATAPI::detectMedia()+0x123>
c0020a4e:	83 ec 0c             	sub    esp,0xc
c0020a51:	68 31 5a 02 c0       	push   0xc0025a31
c0020a56:	e8 1e c2 fe ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0020a5b:	83 c4 10             	add    esp,0x10
c0020a5e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020a65:	75 0c                	jne    c0020a73 <SATAPI::detectMedia()+0x123>
c0020a67:	83 ec 0c             	sub    esp,0xc
c0020a6a:	53                   	push   ebx
c0020a6b:	e8 fa fb ff ff       	call   c002066a <SATAPI::diskInserted()>
c0020a70:	83 c4 10             	add    esp,0x10
c0020a73:	83 c4 24             	add    esp,0x24
c0020a76:	5b                   	pop    ebx
c0020a77:	5e                   	pop    esi
c0020a78:	c3                   	ret    
c0020a79:	90                   	nop

c0020a7a <SATAPI::open(int, int, void*)>:
c0020a7a:	56                   	push   esi
c0020a7b:	53                   	push   ebx
c0020a7c:	51                   	push   ecx
c0020a7d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020a81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020a85:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020a8f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020a95:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020a9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020aa3:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0020aad:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020ab3:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0020aba:	e8 63 95 fe ff       	call   c000a022 <Phys::allocatePage()>
c0020abf:	89 c6                	mov    esi,eax
c0020ac1:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0020ac7:	81 c6 00 10 00 00    	add    esi,0x1000
c0020acd:	e8 50 95 fe ff       	call   c000a022 <Phys::allocatePage()>
c0020ad2:	39 c6                	cmp    esi,eax
c0020ad4:	74 10                	je     c0020ae6 <SATAPI::open(int, int, void*)+0x6c>
c0020ad6:	83 ec 0c             	sub    esp,0xc
c0020ad9:	68 3b 5a 02 c0       	push   0xc0025a3b
c0020ade:	e8 24 25 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c0020ae3:	83 c4 10             	add    esp,0x10
c0020ae6:	83 ec 0c             	sub    esp,0xc
c0020ae9:	6a 02                	push   0x2
c0020aeb:	e8 2d ae fe ff       	call   c000b91d <Virt::allocateKernelVirtualPages(int)>
c0020af0:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0020af6:	6a 03                	push   0x3
c0020af8:	50                   	push   eax
c0020af9:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0020aff:	ff 35 b4 67 02 c0    	push   DWORD PTR ds:0xc00267b4
c0020b05:	e8 7e b4 fe ff       	call   c000bf88 <VAS::mapPage(unsigned long, unsigned long, int)>
c0020b0a:	83 c4 14             	add    esp,0x14
c0020b0d:	68 74 01 00 00       	push   0x174
c0020b12:	e8 54 8e fe ff       	call   c000996b <malloc>
c0020b17:	83 c4 0c             	add    esp,0xc
c0020b1a:	89 c6                	mov    esi,eax
c0020b1c:	6a 00                	push   0x0
c0020b1e:	68 ff ff ff 7f       	push   0x7fffffff
c0020b23:	6a 00                	push   0x0
c0020b25:	6a 00                	push   0x0
c0020b27:	53                   	push   ebx
c0020b28:	68 51 5a 02 c0       	push   0xc0025a51
c0020b2d:	50                   	push   eax
c0020b2e:	e8 81 e6 fe ff       	call   c000f1b4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0020b33:	83 c4 14             	add    esp,0x14
c0020b36:	56                   	push   esi
c0020b37:	e8 2e e7 fe ff       	call   c000f26a <LogicalDisk::assignDriveLetter()>
c0020b3c:	5a                   	pop    edx
c0020b3d:	0f be c0             	movsx  eax,al
c0020b40:	59                   	pop    ecx
c0020b41:	50                   	push   eax
c0020b42:	68 e7 56 02 c0       	push   0xc00256e7
c0020b47:	e8 2d c1 fe ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0020b4c:	58                   	pop    eax
c0020b4d:	5a                   	pop    edx
c0020b4e:	56                   	push   esi
c0020b4f:	53                   	push   ebx
c0020b50:	e8 a1 d5 fe ff       	call   c000e0f6 <Device::addChild(Device*)>
c0020b55:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c0020b5b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020b5e:	e8 33 da fe ff       	call   c000e596 <PhysicalDisk::startCache()>
c0020b63:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0020b6a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020b6d:	e8 de fd ff ff       	call   c0020950 <SATAPI::detectMedia()>
c0020b72:	83 c4 14             	add    esp,0x14
c0020b75:	31 c0                	xor    eax,eax
c0020b77:	5b                   	pop    ebx
c0020b78:	5e                   	pop    esi
c0020b79:	c3                   	ret    

c0020b7a <SATAPI::read(unsigned long long, int, void*)>:
c0020b7a:	55                   	push   ebp
c0020b7b:	57                   	push   edi
c0020b7c:	56                   	push   esi
c0020b7d:	53                   	push   ebx
c0020b7e:	83 ec 48             	sub    esp,0x48
c0020b81:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0020b85:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0020b89:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0020b8d:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0020b91:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020b95:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0020b99:	68 5f 5a 02 c0       	push   0xc0025a5f
c0020b9e:	e8 d6 c0 fe ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0020ba3:	83 c4 10             	add    esp,0x10
c0020ba6:	83 fb 04             	cmp    ebx,0x4
c0020ba9:	7e 10                	jle    c0020bbb <SATAPI::read(unsigned long long, int, void*)+0x41>
c0020bab:	83 ec 0c             	sub    esp,0xc
c0020bae:	68 70 5a 02 c0       	push   0xc0025a70
c0020bb3:	e8 4f 24 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c0020bb8:	83 c4 10             	add    esp,0x10
c0020bbb:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0020bbf:	31 ed                	xor    ebp,ebp
c0020bc1:	b9 03 00 00 00       	mov    ecx,0x3
c0020bc6:	fc                   	cld    
c0020bc7:	89 e8                	mov    eax,ebp
c0020bc9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020bcb:	c6 44 24 18 1b       	mov    BYTE PTR [esp+0x18],0x1b
c0020bd0:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0020bd5:	50                   	push   eax
c0020bd6:	6a 00                	push   0x0
c0020bd8:	6a 00                	push   0x0
c0020bda:	6a 00                	push   0x0
c0020bdc:	6a 00                	push   0x0
c0020bde:	6a 02                	push   0x2
c0020be0:	8d 44 24 30          	lea    eax,[esp+0x30]
c0020be4:	50                   	push   eax
c0020be5:	56                   	push   esi
c0020be6:	e8 9b fa ff ff       	call   c0020686 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020beb:	8d 7c 24 44          	lea    edi,[esp+0x44]
c0020bef:	89 e8                	mov    eax,ebp
c0020bf1:	b9 03 00 00 00       	mov    ecx,0x3
c0020bf6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020bf8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020bfc:	88 5c 24 4d          	mov    BYTE PTR [esp+0x4d],bl
c0020c00:	c6 44 24 44 a8       	mov    BYTE PTR [esp+0x44],0xa8
c0020c05:	86 e0                	xchg   al,ah
c0020c07:	c1 c0 10             	rol    eax,0x10
c0020c0a:	86 e0                	xchg   al,ah
c0020c0c:	89 44 24 46          	mov    DWORD PTR [esp+0x46],eax
c0020c10:	83 c4 1c             	add    esp,0x1c
c0020c13:	53                   	push   ebx
c0020c14:	c1 e3 0b             	shl    ebx,0xb
c0020c17:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c0020c1b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020c1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020c23:	53                   	push   ebx
c0020c24:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0020c28:	50                   	push   eax
c0020c29:	56                   	push   esi
c0020c2a:	e8 57 fa ff ff       	call   c0020686 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020c2f:	83 c4 20             	add    esp,0x20
c0020c32:	85 c0                	test   eax,eax
c0020c34:	74 14                	je     c0020c4a <SATAPI::read(unsigned long long, int, void*)+0xd0>
c0020c36:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020c3a:	83 ec 0c             	sub    esp,0xc
c0020c3d:	56                   	push   esi
c0020c3e:	e8 0d fd ff ff       	call   c0020950 <SATAPI::detectMedia()>
c0020c43:	83 c4 10             	add    esp,0x10
c0020c46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c4a:	83 c4 3c             	add    esp,0x3c
c0020c4d:	5b                   	pop    ebx
c0020c4e:	5e                   	pop    esi
c0020c4f:	5f                   	pop    edi
c0020c50:	5d                   	pop    ebp
c0020c51:	c3                   	ret    

c0020c52 <IOAPIC::close(int, int, void*)>:
c0020c52:	b8 00 00 00 00       	mov    eax,0x0
c0020c57:	c3                   	ret    

c0020c58 <apicGetBase()>:
c0020c58:	55                   	push   ebp
c0020c59:	89 e5                	mov    ebp,esp
c0020c5b:	83 ec 18             	sub    esp,0x18
c0020c5e:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c0020c63:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0020c69:	83 e0 08             	and    eax,0x8
c0020c6c:	84 c0                	test   al,al
c0020c6e:	75 07                	jne    c0020c77 <apicGetBase()+0x1f>
c0020c70:	b8 00 00 00 00       	mov    eax,0x0
c0020c75:	eb 21                	jmp    c0020c98 <apicGetBase()+0x40>
c0020c77:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c0020c7c:	83 ec 08             	sub    esp,0x8
c0020c7f:	6a 1b                	push   0x1b
c0020c81:	50                   	push   eax
c0020c82:	e8 9b 82 fe ff       	call   c0008f22 <Computer::rdmsr(unsigned int)>
c0020c87:	83 c4 10             	add    esp,0x10
c0020c8a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0020c8d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0020c90:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020c93:	25 00 f0 ff ff       	and    eax,0xfffff000
c0020c98:	c9                   	leave  
c0020c99:	c3                   	ret    

c0020c9a <IOAPIC::IOAPIC()>:
c0020c9a:	83 ec 0c             	sub    esp,0xc
c0020c9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ca1:	83 ec 08             	sub    esp,0x8
c0020ca4:	68 d4 5a 02 c0       	push   0xc0025ad4
c0020ca9:	50                   	push   eax
c0020caa:	e8 4b d6 fe ff       	call   c000e2fa <Device::Device(char const*)>
c0020caf:	83 c4 10             	add    esp,0x10
c0020cb2:	ba f8 5a 02 c0       	mov    edx,0xc0025af8
c0020cb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020cbb:	89 10                	mov    DWORD PTR [eax],edx
c0020cbd:	90                   	nop
c0020cbe:	83 c4 0c             	add    esp,0xc
c0020cc1:	c3                   	ret    

c0020cc2 <apicOpen()>:
c0020cc2:	55                   	push   ebp
c0020cc3:	89 e5                	mov    ebp,esp
c0020cc5:	53                   	push   ebx
c0020cc6:	83 ec 34             	sub    esp,0x34
c0020cc9:	a0 40 a6 02 c0       	mov    al,ds:0xc002a640
c0020cce:	83 f0 01             	xor    eax,0x1
c0020cd1:	84 c0                	test   al,al
c0020cd3:	0f 84 91 00 00 00    	je     c0020d6a <apicOpen()+0xa8>
c0020cd9:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0020cdd:	a0 a0 8f 02 c0       	mov    al,ds:0xc0028fa0
c0020ce2:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c0020ce5:	73 7c                	jae    c0020d63 <apicOpen()+0xa1>
c0020ce7:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c0020cee:	83 ec 0c             	sub    esp,0xc
c0020cf1:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0020cf4:	e8 72 8c fe ff       	call   c000996b <malloc>
c0020cf9:	83 c4 10             	add    esp,0x10
c0020cfc:	89 c3                	mov    ebx,eax
c0020cfe:	83 ec 0c             	sub    esp,0xc
c0020d01:	53                   	push   ebx
c0020d02:	e8 93 ff ff ff       	call   c0020c9a <IOAPIC::IOAPIC()>
c0020d07:	83 c4 10             	add    esp,0x10
c0020d0a:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0020d0d:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c0020d11:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0020d14:	89 14 85 20 a6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd59e0],edx
c0020d1b:	a1 00 a6 02 c0       	mov    eax,ds:0xc002a600
c0020d20:	40                   	inc    eax
c0020d21:	a3 00 a6 02 c0       	mov    ds:0xc002a600,eax
c0020d26:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c0020d2b:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0020d31:	83 ec 08             	sub    esp,0x8
c0020d34:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0020d37:	50                   	push   eax
c0020d38:	e8 b9 d3 fe ff       	call   c000e0f6 <Device::addChild(Device*)>
c0020d3d:	83 c4 10             	add    esp,0x10
c0020d40:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020d43:	8b 00                	mov    eax,DWORD PTR [eax]
c0020d45:	83 c0 08             	add    eax,0x8
c0020d48:	8b 00                	mov    eax,DWORD PTR [eax]
c0020d4a:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0020d4e:	6a 00                	push   0x0
c0020d50:	6a 00                	push   0x0
c0020d52:	52                   	push   edx
c0020d53:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0020d56:	ff d0                	call   eax
c0020d58:	83 c4 10             	add    esp,0x10
c0020d5b:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c0020d5e:	e9 7a ff ff ff       	jmp    c0020cdd <apicOpen()+0x1b>
c0020d63:	c6 05 40 a6 02 c0 01 	mov    BYTE PTR ds:0xc002a640,0x1
c0020d6a:	e8 e9 fe ff ff       	call   c0020c58 <apicGetBase()>
c0020d6f:	05 f0 00 00 00       	add    eax,0xf0
c0020d74:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0020d77:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0020d7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0020d7c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0020d7f:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c0020d86:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c0020d8d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0020d90:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0020d93:	89 10                	mov    DWORD PTR [eax],edx
c0020d95:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0020d9c:	a1 f0 8e 02 c0       	mov    eax,ds:0xc0028ef0
c0020da1:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c0020da4:	7d 70                	jge    c0020e16 <apicOpen()+0x154>
c0020da6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020da9:	8b 04 85 00 8f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7100]
c0020db0:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c0020db3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020db6:	8b 04 85 00 8f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7100]
c0020dbd:	c1 e8 08             	shr    eax,0x8
c0020dc0:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0020dc4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020dc7:	8b 04 85 00 8f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7100]
c0020dce:	c1 e8 18             	shr    eax,0x18
c0020dd1:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0020dd4:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c0020dd8:	75 37                	jne    c0020e11 <apicOpen()+0x14f>
c0020dda:	e8 79 fe ff ff       	call   c0020c58 <apicGetBase()>
c0020ddf:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0020de3:	75 07                	jne    c0020dec <apicOpen()+0x12a>
c0020de5:	ba 60 03 00 00       	mov    edx,0x360
c0020dea:	eb 05                	jmp    c0020df1 <apicOpen()+0x12f>
c0020dec:	ba 50 03 00 00       	mov    edx,0x350
c0020df1:	01 d0                	add    eax,edx
c0020df3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0020df6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020df9:	8b 00                	mov    eax,DWORD PTR [eax]
c0020dfb:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0020dfe:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c0020e05:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c0020e09:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020e0c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0020e0f:	89 10                	mov    DWORD PTR [eax],edx
c0020e11:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c0020e14:	eb 86                	jmp    c0020d9c <apicOpen()+0xda>
c0020e16:	90                   	nop
c0020e17:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0020e1a:	c9                   	leave  
c0020e1b:	c3                   	ret    

c0020e1c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0020e1c:	55                   	push   ebp
c0020e1d:	89 e5                	mov    ebp,esp
c0020e1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020e22:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020e28:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0020e2b:	72 1d                	jb     c0020e4a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0020e2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020e30:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0020e36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020e39:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0020e3f:	01 d0                	add    eax,edx
c0020e41:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0020e44:	73 04                	jae    c0020e4a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0020e46:	b0 01                	mov    al,0x1
c0020e48:	eb 02                	jmp    c0020e4c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0020e4a:	b0 00                	mov    al,0x0
c0020e4c:	5d                   	pop    ebp
c0020e4d:	c3                   	ret    

c0020e4e <IOAPIC::read(int)>:
c0020e4e:	55                   	push   ebp
c0020e4f:	89 e5                	mov    ebp,esp
c0020e51:	83 ec 10             	sub    esp,0x10
c0020e54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020e57:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020e5d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0020e60:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020e63:	0f b6 d0             	movzx  edx,al
c0020e66:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020e69:	89 10                	mov    DWORD PTR [eax],edx
c0020e6b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020e6e:	83 c0 10             	add    eax,0x10
c0020e71:	8b 00                	mov    eax,DWORD PTR [eax]
c0020e73:	c9                   	leave  
c0020e74:	c3                   	ret    
c0020e75:	90                   	nop

c0020e76 <IOAPIC::open(int, int, void*)>:
c0020e76:	55                   	push   ebp
c0020e77:	89 e5                	mov    ebp,esp
c0020e79:	57                   	push   edi
c0020e7a:	56                   	push   esi
c0020e7b:	53                   	push   ebx
c0020e7c:	83 ec 0c             	sub    esp,0xc
c0020e7f:	83 ec 0c             	sub    esp,0xc
c0020e82:	68 dc 5a 02 c0       	push   0xc0025adc
c0020e87:	e8 ed bd fe ff       	call   c000cc79 <Dbg::kprintf(char const*, ...)>
c0020e8c:	83 c4 10             	add    esp,0x10
c0020e8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020e92:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0020e95:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020e9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020e9e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020ea4:	8b 14 85 e0 8f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7020]
c0020eab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020eae:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0020eb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020eb7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020ebd:	8b 14 85 60 90 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6fa0]
c0020ec4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020ec7:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0020ecd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020ed0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0020ed6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020ed9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020edf:	0f b6 f8             	movzx  edi,al
c0020ee2:	89 d0                	mov    eax,edx
c0020ee4:	ba 00 00 00 00       	mov    edx,0x0
c0020ee9:	89 c1                	mov    ecx,eax
c0020eeb:	80 e5 ff             	and    ch,0xff
c0020eee:	89 cb                	mov    ebx,ecx
c0020ef0:	0f b6 f2             	movzx  esi,dl
c0020ef3:	89 d8                	mov    eax,ebx
c0020ef5:	89 f2                	mov    edx,esi
c0020ef7:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0020efa:	8d 5f 08             	lea    ebx,[edi+0x8]
c0020efd:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0020f01:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0020f05:	83 e0 00             	and    eax,0x0
c0020f08:	09 d0                	or     eax,edx
c0020f0a:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0020f0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020f11:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020f17:	8d 50 01             	lea    edx,[eax+0x1]
c0020f1a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0020f1d:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0020f23:	0f b6 d0             	movzx  edx,al
c0020f26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020f29:	83 c2 08             	add    edx,0x8
c0020f2c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0020f30:	0f b6 c9             	movzx  ecx,cl
c0020f33:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0020f39:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0020f3d:	83 ec 08             	sub    esp,0x8
c0020f40:	6a 01                	push   0x1
c0020f42:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020f45:	e8 04 ff ff ff       	call   c0020e4e <IOAPIC::read(int)>
c0020f4a:	83 c4 10             	add    esp,0x10
c0020f4d:	c1 f8 10             	sar    eax,0x10
c0020f50:	0f b6 c0             	movzx  eax,al
c0020f53:	8d 50 01             	lea    edx,[eax+0x1]
c0020f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020f59:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0020f5f:	b8 00 00 00 00       	mov    eax,0x0
c0020f64:	8d 65 f4             	lea    esp,[ebp-0xc]
c0020f67:	5b                   	pop    ebx
c0020f68:	5e                   	pop    esi
c0020f69:	5f                   	pop    edi
c0020f6a:	5d                   	pop    ebp
c0020f6b:	c3                   	ret    

c0020f6c <IOAPIC::write(int, int)>:
c0020f6c:	55                   	push   ebp
c0020f6d:	89 e5                	mov    ebp,esp
c0020f6f:	83 ec 10             	sub    esp,0x10
c0020f72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020f75:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020f7b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0020f7e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020f81:	0f b6 d0             	movzx  edx,al
c0020f84:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020f87:	89 10                	mov    DWORD PTR [eax],edx
c0020f89:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020f8c:	8d 50 10             	lea    edx,[eax+0x10]
c0020f8f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0020f92:	89 02                	mov    DWORD PTR [edx],eax
c0020f94:	90                   	nop
c0020f95:	c9                   	leave  
c0020f96:	c3                   	ret    
c0020f97:	90                   	nop

c0020f98 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0020f98:	55                   	push   ebp
c0020f99:	89 e5                	mov    ebp,esp
c0020f9b:	53                   	push   ebx
c0020f9c:	83 ec 2c             	sub    esp,0x2c
c0020f9f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020fa2:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0020fa5:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0020fa8:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0020fab:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0020fae:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0020fb1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0020fb4:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0020fb7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0020fba:	88 d8                	mov    al,bl
c0020fbc:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0020fbf:	88 c8                	mov    al,cl
c0020fc1:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0020fc4:	88 d0                	mov    al,dl
c0020fc6:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0020fc9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0020fcd:	83 c0 08             	add    eax,0x8
c0020fd0:	01 c0                	add    eax,eax
c0020fd2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0020fd5:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0020fd9:	83 c0 08             	add    eax,0x8
c0020fdc:	01 c0                	add    eax,eax
c0020fde:	40                   	inc    eax
c0020fdf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0020fe2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020fe5:	50                   	push   eax
c0020fe6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020fe9:	e8 60 fe ff ff       	call   c0020e4e <IOAPIC::read(int)>
c0020fee:	83 c4 08             	add    esp,0x8
c0020ff1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0020ff4:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0020ffb:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020ffe:	c1 e0 18             	shl    eax,0x18
c0021001:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0021004:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0021007:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002100a:	52                   	push   edx
c002100b:	50                   	push   eax
c002100c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002100f:	e8 58 ff ff ff       	call   c0020f6c <IOAPIC::write(int, int)>
c0021014:	83 c4 0c             	add    esp,0xc
c0021017:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002101a:	50                   	push   eax
c002101b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002101e:	e8 2b fe ff ff       	call   c0020e4e <IOAPIC::read(int)>
c0021023:	83 c4 08             	add    esp,0x8
c0021026:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0021029:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0021030:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0021037:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002103e:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0021042:	74 09                	je     c002104d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0021044:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002104b:	eb 07                	jmp    c0021054 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c002104d:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0021054:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0021058:	74 09                	je     c0021063 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c002105a:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0021061:	eb 07                	jmp    c002106a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0021063:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002106a:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0021071:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0021075:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0021078:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002107b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002107e:	52                   	push   edx
c002107f:	50                   	push   eax
c0021080:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021083:	e8 e4 fe ff ff       	call   c0020f6c <IOAPIC::write(int, int)>
c0021088:	83 c4 0c             	add    esp,0xc
c002108b:	90                   	nop
c002108c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002108f:	c9                   	leave  
c0021090:	c3                   	ret    
c0021091:	66 90                	xchg   ax,ax
c0021093:	90                   	nop

c0021094 <APICTimer::close(int, int, void*)>:
c0021094:	b8 00 00 00 00       	mov    eax,0x0
c0021099:	c3                   	ret    
c002109a:	66 90                	xchg   ax,ax

c002109c <apicTimerHandler(regs*, void*)>:
c002109c:	83 ec 0c             	sub    esp,0xc
c002109f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00210a3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00210a5:	b8 10 27 00 00       	mov    eax,0x2710
c00210aa:	ba 00 00 00 00       	mov    edx,0x0
c00210af:	f7 f1                	div    ecx
c00210b1:	83 ec 0c             	sub    esp,0xc
c00210b4:	50                   	push   eax
c00210b5:	e8 56 e9 fe ff       	call   c000fa10 <timerHandler(unsigned int)>
c00210ba:	83 c4 10             	add    esp,0x10
c00210bd:	90                   	nop
c00210be:	83 c4 0c             	add    esp,0xc
c00210c1:	c3                   	ret    
c00210c2:	66 90                	xchg   ax,ax

c00210c4 <APICTimer::open(int, int, void*)>:
c00210c4:	83 ec 0c             	sub    esp,0xc
c00210c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00210cd:	83 c0 24             	add    eax,0x24
c00210d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00210d2:	83 ec 08             	sub    esp,0x8
c00210d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00210d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00210dd:	ff d0                	call   eax
c00210df:	83 c4 10             	add    esp,0x10
c00210e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210e6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00210ea:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00210f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00210f8:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00210fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021102:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0021108:	83 ec 0c             	sub    esp,0xc
c002110b:	51                   	push   ecx
c002110c:	6a 01                	push   0x1
c002110e:	68 9c 10 02 c0       	push   0xc002109c
c0021113:	52                   	push   edx
c0021114:	50                   	push   eax
c0021115:	e8 88 cf fe ff       	call   c000e0a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002111a:	83 c4 20             	add    esp,0x20
c002111d:	89 c2                	mov    edx,eax
c002111f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021123:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0021129:	b8 00 00 00 00       	mov    eax,0x0
c002112e:	83 c4 0c             	add    esp,0xc
c0021131:	c3                   	ret    
c0021132:	66 90                	xchg   ax,ax

c0021134 <APICTimer::write(int)>:
c0021134:	83 ec 0c             	sub    esp,0xc
c0021137:	83 ec 0c             	sub    esp,0xc
c002113a:	68 1c 5b 02 c0       	push   0xc0025b1c
c002113f:	e8 c3 1e ff ff       	call   c0013007 <Krnl::panic(char const*)>
c0021144:	83 c4 10             	add    esp,0x10
c0021147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002114b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002114f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021155:	90                   	nop
c0021156:	83 c4 0c             	add    esp,0xc
c0021159:	c3                   	ret    
c002115a:	66 90                	xchg   ax,ax

c002115c <APICTimer::APICTimer()>:
c002115c:	83 ec 0c             	sub    esp,0xc
c002115f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021163:	83 ec 08             	sub    esp,0x8
c0021166:	68 2c 5b 02 c0       	push   0xc0025b2c
c002116b:	50                   	push   eax
c002116c:	e8 d3 e7 fe ff       	call   c000f944 <Timer::Timer(char const*)>
c0021171:	83 c4 10             	add    esp,0x10
c0021174:	ba 40 5b 02 c0       	mov    edx,0xc0025b40
c0021179:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002117d:	89 10                	mov    DWORD PTR [eax],edx
c002117f:	90                   	nop
c0021180:	83 c4 0c             	add    esp,0xc
c0021183:	c3                   	ret    

c0021184 <PIT::write(int)>:
c0021184:	83 ec 10             	sub    esp,0x10
c0021187:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002118b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002118f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021195:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021199:	a3 44 a6 02 c0       	mov    ds:0xc002a644,eax
c002119e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00211a3:	99                   	cdq    
c00211a4:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00211a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00211ac:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00211b3:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00211b8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00211bc:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00211c1:	ee                   	out    dx,al
c00211c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00211c6:	0f b6 c0             	movzx  eax,al
c00211c9:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00211d0:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00211d4:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00211d8:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00211dd:	ee                   	out    dx,al
c00211de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00211e2:	c1 f8 08             	sar    eax,0x8
c00211e5:	0f b6 c0             	movzx  eax,al
c00211e8:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00211ef:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00211f3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00211f7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00211fc:	ee                   	out    dx,al
c00211fd:	90                   	nop
c00211fe:	83 c4 10             	add    esp,0x10
c0021201:	c3                   	ret    
c0021202:	66 90                	xchg   ax,ax

c0021204 <pitHandler(regs*, void*)>:
c0021204:	83 ec 0c             	sub    esp,0xc
c0021207:	8b 0d 44 a6 02 c0    	mov    ecx,DWORD PTR ds:0xc002a644
c002120d:	b8 10 27 00 00       	mov    eax,0x2710
c0021212:	99                   	cdq    
c0021213:	f7 f9                	idiv   ecx
c0021215:	83 ec 0c             	sub    esp,0xc
c0021218:	50                   	push   eax
c0021219:	e8 f2 e7 fe ff       	call   c000fa10 <timerHandler(unsigned int)>
c002121e:	83 c4 10             	add    esp,0x10
c0021221:	90                   	nop
c0021222:	83 c4 0c             	add    esp,0xc
c0021225:	c3                   	ret    
c0021226:	66 90                	xchg   ax,ax

c0021228 <PIT::open(int, int, void*)>:
c0021228:	83 ec 0c             	sub    esp,0xc
c002122b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002122f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021231:	83 c0 24             	add    eax,0x24
c0021234:	8b 00                	mov    eax,DWORD PTR [eax]
c0021236:	83 ec 08             	sub    esp,0x8
c0021239:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002123d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021241:	ff d0                	call   eax
c0021243:	83 c4 10             	add    esp,0x10
c0021246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002124a:	83 ec 0c             	sub    esp,0xc
c002124d:	6a 00                	push   0x0
c002124f:	6a 01                	push   0x1
c0021251:	68 04 12 02 c0       	push   0xc0021204
c0021256:	6a 00                	push   0x0
c0021258:	50                   	push   eax
c0021259:	e8 44 ce fe ff       	call   c000e0a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002125e:	83 c4 20             	add    esp,0x20
c0021261:	89 c2                	mov    edx,eax
c0021263:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021267:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002126d:	b8 00 00 00 00       	mov    eax,0x0
c0021272:	83 c4 0c             	add    esp,0xc
c0021275:	c3                   	ret    
c0021276:	66 90                	xchg   ax,ax

c0021278 <PIT::close(int, int, void*)>:
c0021278:	83 ec 0c             	sub    esp,0xc
c002127b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002127f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0021289:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002128d:	6a 01                	push   0x1
c002128f:	68 04 12 02 c0       	push   0xc0021204
c0021294:	6a 00                	push   0x0
c0021296:	50                   	push   eax
c0021297:	e8 3c ce fe ff       	call   c000e0d8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002129c:	83 c4 10             	add    esp,0x10
c002129f:	b8 00 00 00 00       	mov    eax,0x0
c00212a4:	83 c4 0c             	add    esp,0xc
c00212a7:	c3                   	ret    

c00212a8 <PIT::PIT()>:
c00212a8:	83 ec 0c             	sub    esp,0xc
c00212ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212af:	83 ec 08             	sub    esp,0x8
c00212b2:	68 68 5b 02 c0       	push   0xc0025b68
c00212b7:	50                   	push   eax
c00212b8:	e8 87 e6 fe ff       	call   c000f944 <Timer::Timer(char const*)>
c00212bd:	83 c4 10             	add    esp,0x10
c00212c0:	ba 90 5b 02 c0       	mov    edx,0xc0025b90
c00212c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212c9:	89 10                	mov    DWORD PTR [eax],edx
c00212cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212cf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00212d5:	0f b6 d0             	movzx  edx,al
c00212d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212dc:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00212e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00212ed:	0f b6 d0             	movzx  edx,al
c00212f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212f4:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00212f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212fd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021303:	8d 50 01             	lea    edx,[eax+0x1]
c0021306:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002130a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021310:	0f b6 d0             	movzx  edx,al
c0021313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021317:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002131b:	83 e1 3f             	and    ecx,0x3f
c002131e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021322:	90                   	nop
c0021323:	83 c4 0c             	add    esp,0xc
c0021326:	c3                   	ret    
c0021327:	66 90                	xchg   ax,ax
c0021329:	66 90                	xchg   ax,ax
c002132b:	66 90                	xchg   ax,ax
c002132d:	66 90                	xchg   ax,ax
c002132f:	90                   	nop

c0021330 <avxDetect>:
c0021330:	b8 01 00 00 00       	mov    eax,0x1
c0021335:	0f a2                	cpuid  
c0021337:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c002133d:	74 15                	je     c0021354 <avxDetect.noAVX>
c002133f:	b8 01 00 00 00       	mov    eax,0x1
c0021344:	0f a2                	cpuid  
c0021346:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002134c:	74 06                	je     c0021354 <avxDetect.noAVX>
c002134e:	b8 01 00 00 00       	mov    eax,0x1
c0021353:	c3                   	ret    

c0021354 <avxDetect.noAVX>:
c0021354:	b8 00 00 00 00       	mov    eax,0x0
c0021359:	c3                   	ret    

c002135a <avxSave>:
c002135a:	53                   	push   ebx
c002135b:	52                   	push   edx
c002135c:	31 c0                	xor    eax,eax
c002135e:	48                   	dec    eax
c002135f:	89 c2                	mov    edx,eax
c0021361:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021365:	0f ae 23             	xsave  [ebx]
c0021368:	5a                   	pop    edx
c0021369:	5b                   	pop    ebx
c002136a:	c3                   	ret    

c002136b <avxLoad>:
c002136b:	53                   	push   ebx
c002136c:	52                   	push   edx
c002136d:	31 c0                	xor    eax,eax
c002136f:	48                   	dec    eax
c0021370:	89 c2                	mov    edx,eax
c0021372:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021376:	0f ae 2b             	xrstor [ebx]
c0021379:	5a                   	pop    edx
c002137a:	5b                   	pop    ebx
c002137b:	c3                   	ret    

c002137c <avxInit>:
c002137c:	e8 77 00 00 00       	call   c00213f8 <sseInit>
c0021381:	50                   	push   eax
c0021382:	51                   	push   ecx
c0021383:	0f 20 e0             	mov    eax,cr4
c0021386:	0d 00 00 04 00       	or     eax,0x40000
c002138b:	0f 22 e0             	mov    cr4,eax
c002138e:	31 c9                	xor    ecx,ecx
c0021390:	0f 01 d0             	xgetbv 
c0021393:	0d 07 00 00 00       	or     eax,0x7
c0021398:	0f 01 d1             	xsetbv 
c002139b:	59                   	pop    ecx
c002139c:	58                   	pop    eax
c002139d:	c3                   	ret    

c002139e <avxClose>:
c002139e:	c3                   	ret    

c002139f <wouldSheSayYes>:
c002139f:	c3                   	ret    
c00213a0:	49                   	dec    ecx
c00213a1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00213a5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00213a9:	75 20                	jne    c00213cb <retry+0x6>
c00213ab:	4e                   	dec    esi
c00213ac:	79 61                	jns    c002140f <sseClose+0x7>
c00213ae:	68 2e 2e 2e 00       	push   0x2e2e2e
c00213b3:	66 90                	xchg   ax,ax
c00213b5:	66 90                	xchg   ax,ax
c00213b7:	66 90                	xchg   ax,ax
c00213b9:	66 90                	xchg   ax,ax
c00213bb:	66 90                	xchg   ax,ax
c00213bd:	66 90                	xchg   ax,ax
c00213bf:	90                   	nop

c00213c0 <i386GetRDRAND>:
c00213c0:	b9 64 00 00 00       	mov    ecx,0x64

c00213c5 <retry>:
c00213c5:	0f c7 f0             	rdrand eax
c00213c8:	72 05                	jb     c00213cf <retry.done>
c00213ca:	e2 f9                	loop   c00213c5 <retry>

c00213cc <retry.fail>:
c00213cc:	31 c0                	xor    eax,eax
c00213ce:	c3                   	ret    

c00213cf <retry.done>:
c00213cf:	c3                   	ret    

c00213d0 <absolutelyNoChanceInHell>:
c00213d0:	b8 01 00 00 00       	mov    eax,0x1
c00213d5:	0f a2                	cpuid  
c00213d7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00213dd:	74 06                	je     c00213e5 <sseDetect.noSSE>
c00213df:	b8 01 00 00 00       	mov    eax,0x1
c00213e4:	c3                   	ret    

c00213e5 <sseDetect.noSSE>:
c00213e5:	31 c0                	xor    eax,eax
c00213e7:	c3                   	ret    

c00213e8 <sseSave>:
c00213e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213ec:	0f ae 00             	fxsave [eax]
c00213ef:	c3                   	ret    

c00213f0 <sseLoad>:
c00213f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213f4:	0f ae 08             	fxrstor [eax]
c00213f7:	c3                   	ret    

c00213f8 <sseInit>:
c00213f8:	e8 42 00 00 00       	call   c002143f <x87Init>
c00213fd:	0f 20 e0             	mov    eax,cr4
c0021400:	66 0d 00 06          	or     ax,0x600
c0021404:	0f 22 e0             	mov    cr4,eax
c0021407:	c3                   	ret    

c0021408 <sseClose>:
c0021408:	c3                   	ret    
c0021409:	66 90                	xchg   ax,ax
c002140b:	66 90                	xchg   ax,ax
c002140d:	66 90                	xchg   ax,ax
c002140f:	90                   	nop

c0021410 <value_37F>:
c0021410:	7f 03                	jg     c0021415 <value_37A+0x1>

c0021412 <value_37E>:
c0021412:	7e 03                	jle    c0021417 <x87Detect+0x1>

c0021414 <value_37A>:
c0021414:	7a 03                	jp     c0021419 <x87Detect+0x3>

c0021416 <x87Detect>:
c0021416:	b8 01 00 00 00       	mov    eax,0x1
c002141b:	0f a2                	cpuid  
c002141d:	f7 c2 01 00 00 00    	test   edx,0x1
c0021423:	74 06                	je     c002142b <x87Detect.nox87>
c0021425:	b8 01 00 00 00       	mov    eax,0x1
c002142a:	c3                   	ret    

c002142b <x87Detect.nox87>:
c002142b:	b8 00 00 00 00       	mov    eax,0x0
c0021430:	c3                   	ret    

c0021431 <x87Save>:
c0021431:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021435:	dd 30                	fnsave [eax]
c0021437:	c3                   	ret    

c0021438 <x87Load>:
c0021438:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002143c:	dd 20                	frstor [eax]
c002143e:	c3                   	ret    

c002143f <x87Init>:
c002143f:	0f 20 c0             	mov    eax,cr0
c0021442:	66 25 fb ff          	and    ax,0xfffb
c0021446:	66 0d 22 00          	or     ax,0x22
c002144a:	0f 22 c0             	mov    cr0,eax
c002144d:	db e3                	fninit 
c002144f:	0f 06                	clts   
c0021451:	d9 2d 14 14 02 c0    	fldcw  WORD PTR ds:0xc0021414
c0021457:	c3                   	ret    

c0021458 <x87Close>:
c0021458:	c3                   	ret    
c0021459:	66 90                	xchg   ax,ax
c002145b:	90                   	nop

c002145c <__do_global_ctors_aux>:
c002145c:	a1 20 24 02 c0       	mov    eax,ds:0xc0022420
c0021461:	83 f8 ff             	cmp    eax,0xffffffff
c0021464:	74 1a                	je     c0021480 <__do_global_ctors_aux+0x24>
c0021466:	55                   	push   ebp
c0021467:	89 e5                	mov    ebp,esp
c0021469:	53                   	push   ebx
c002146a:	52                   	push   edx
c002146b:	bb 20 24 02 c0       	mov    ebx,0xc0022420
c0021470:	ff d0                	call   eax
c0021472:	83 eb 04             	sub    ebx,0x4
c0021475:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021477:	83 f8 ff             	cmp    eax,0xffffffff
c002147a:	75 f4                	jne    c0021470 <__do_global_ctors_aux+0x14>
c002147c:	58                   	pop    eax
c002147d:	5b                   	pop    ebx
c002147e:	5d                   	pop    ebp
c002147f:	c3                   	ret    
c0021480:	c3                   	ret    
c0021481:	66 90                	xchg   ax,ax
c0021483:	90                   	nop

c0021484 <__divdi3>:
c0021484:	55                   	push   ebp
c0021485:	57                   	push   edi
c0021486:	56                   	push   esi
c0021487:	53                   	push   ebx
c0021488:	83 ec 1c             	sub    esp,0x1c
c002148b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002148f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021493:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0021496:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002149a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002149e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00214a2:	85 db                	test   ebx,ebx
c00214a4:	0f 88 8e 00 00 00    	js     c0021538 <__divdi3+0xb4>
c00214aa:	89 dd                	mov    ebp,ebx
c00214ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00214b4:	89 d3                	mov    ebx,edx
c00214b6:	85 d2                	test   edx,edx
c00214b8:	79 0d                	jns    c00214c7 <__divdi3+0x43>
c00214ba:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00214be:	f7 d8                	neg    eax
c00214c0:	83 d2 00             	adc    edx,0x0
c00214c3:	f7 da                	neg    edx
c00214c5:	89 d3                	mov    ebx,edx
c00214c7:	89 c7                	mov    edi,eax
c00214c9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00214cc:	85 db                	test   ebx,ebx
c00214ce:	75 48                	jne    c0021518 <__divdi3+0x94>
c00214d0:	39 ef                	cmp    edi,ebp
c00214d2:	76 24                	jbe    c00214f8 <__divdi3+0x74>
c00214d4:	89 ea                	mov    edx,ebp
c00214d6:	f7 f7                	div    edi
c00214d8:	89 c1                	mov    ecx,eax
c00214da:	31 f6                	xor    esi,esi
c00214dc:	89 c8                	mov    eax,ecx
c00214de:	89 f2                	mov    edx,esi
c00214e0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00214e4:	85 c9                	test   ecx,ecx
c00214e6:	74 07                	je     c00214ef <__divdi3+0x6b>
c00214e8:	f7 d8                	neg    eax
c00214ea:	83 d2 00             	adc    edx,0x0
c00214ed:	f7 da                	neg    edx
c00214ef:	83 c4 1c             	add    esp,0x1c
c00214f2:	5b                   	pop    ebx
c00214f3:	5e                   	pop    esi
c00214f4:	5f                   	pop    edi
c00214f5:	5d                   	pop    ebp
c00214f6:	c3                   	ret    
c00214f7:	90                   	nop
c00214f8:	85 ff                	test   edi,edi
c00214fa:	75 0b                	jne    c0021507 <__divdi3+0x83>
c00214fc:	b8 01 00 00 00       	mov    eax,0x1
c0021501:	31 d2                	xor    edx,edx
c0021503:	f7 f3                	div    ebx
c0021505:	89 c7                	mov    edi,eax
c0021507:	31 d2                	xor    edx,edx
c0021509:	89 e8                	mov    eax,ebp
c002150b:	f7 f7                	div    edi
c002150d:	89 c6                	mov    esi,eax
c002150f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021512:	f7 f7                	div    edi
c0021514:	89 c1                	mov    ecx,eax
c0021516:	eb c4                	jmp    c00214dc <__divdi3+0x58>
c0021518:	39 eb                	cmp    ebx,ebp
c002151a:	77 3c                	ja     c0021558 <__divdi3+0xd4>
c002151c:	0f bd f3             	bsr    esi,ebx
c002151f:	83 f6 1f             	xor    esi,0x1f
c0021522:	75 40                	jne    c0021564 <__divdi3+0xe0>
c0021524:	39 eb                	cmp    ebx,ebp
c0021526:	72 09                	jb     c0021531 <__divdi3+0xad>
c0021528:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002152b:	0f 87 97 00 00 00    	ja     c00215c8 <__divdi3+0x144>
c0021531:	b9 01 00 00 00       	mov    ecx,0x1
c0021536:	eb a4                	jmp    c00214dc <__divdi3+0x58>
c0021538:	f7 d9                	neg    ecx
c002153a:	83 d3 00             	adc    ebx,0x0
c002153d:	f7 db                	neg    ebx
c002153f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0021542:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0021546:	89 dd                	mov    ebp,ebx
c0021548:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0021550:	e9 5f ff ff ff       	jmp    c00214b4 <__divdi3+0x30>
c0021555:	8d 76 00             	lea    esi,[esi+0x0]
c0021558:	31 f6                	xor    esi,esi
c002155a:	31 c9                	xor    ecx,ecx
c002155c:	e9 7b ff ff ff       	jmp    c00214dc <__divdi3+0x58>
c0021561:	8d 76 00             	lea    esi,[esi+0x0]
c0021564:	b8 20 00 00 00       	mov    eax,0x20
c0021569:	29 f0                	sub    eax,esi
c002156b:	89 f1                	mov    ecx,esi
c002156d:	d3 e3                	shl    ebx,cl
c002156f:	89 fa                	mov    edx,edi
c0021571:	88 c1                	mov    cl,al
c0021573:	d3 ea                	shr    edx,cl
c0021575:	09 da                	or     edx,ebx
c0021577:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002157b:	89 f1                	mov    ecx,esi
c002157d:	d3 e7                	shl    edi,cl
c002157f:	89 eb                	mov    ebx,ebp
c0021581:	88 c1                	mov    cl,al
c0021583:	d3 eb                	shr    ebx,cl
c0021585:	89 f1                	mov    ecx,esi
c0021587:	d3 e5                	shl    ebp,cl
c0021589:	8b 14 24             	mov    edx,DWORD PTR [esp]
c002158c:	88 c1                	mov    cl,al
c002158e:	d3 ea                	shr    edx,cl
c0021590:	09 d5                	or     ebp,edx
c0021592:	89 e8                	mov    eax,ebp
c0021594:	89 da                	mov    edx,ebx
c0021596:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002159a:	89 d3                	mov    ebx,edx
c002159c:	89 c5                	mov    ebp,eax
c002159e:	f7 e7                	mul    edi
c00215a0:	39 d3                	cmp    ebx,edx
c00215a2:	72 18                	jb     c00215bc <__divdi3+0x138>
c00215a4:	74 0a                	je     c00215b0 <__divdi3+0x12c>
c00215a6:	89 e9                	mov    ecx,ebp
c00215a8:	31 f6                	xor    esi,esi
c00215aa:	e9 2d ff ff ff       	jmp    c00214dc <__divdi3+0x58>
c00215af:	90                   	nop
c00215b0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00215b3:	89 f1                	mov    ecx,esi
c00215b5:	d3 e7                	shl    edi,cl
c00215b7:	39 c7                	cmp    edi,eax
c00215b9:	73 eb                	jae    c00215a6 <__divdi3+0x122>
c00215bb:	90                   	nop
c00215bc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00215bf:	31 f6                	xor    esi,esi
c00215c1:	e9 16 ff ff ff       	jmp    c00214dc <__divdi3+0x58>
c00215c6:	66 90                	xchg   ax,ax
c00215c8:	31 c9                	xor    ecx,ecx
c00215ca:	e9 0d ff ff ff       	jmp    c00214dc <__divdi3+0x58>
c00215cf:	90                   	nop

c00215d0 <__moddi3>:
c00215d0:	55                   	push   ebp
c00215d1:	57                   	push   edi
c00215d2:	56                   	push   esi
c00215d3:	53                   	push   ebx
c00215d4:	83 ec 2c             	sub    esp,0x2c
c00215d7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00215db:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00215df:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00215e3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00215e7:	85 db                	test   ebx,ebx
c00215e9:	0f 88 85 00 00 00    	js     c0021674 <__moddi3+0xa4>
c00215ef:	89 de                	mov    esi,ebx
c00215f1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00215f9:	89 d7                	mov    edi,edx
c00215fb:	85 d2                	test   edx,edx
c00215fd:	79 09                	jns    c0021608 <__moddi3+0x38>
c00215ff:	f7 d8                	neg    eax
c0021601:	83 d2 00             	adc    edx,0x0
c0021604:	f7 da                	neg    edx
c0021606:	89 d7                	mov    edi,edx
c0021608:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002160c:	89 cd                	mov    ebp,ecx
c002160e:	85 ff                	test   edi,edi
c0021610:	75 52                	jne    c0021664 <__moddi3+0x94>
c0021612:	89 c3                	mov    ebx,eax
c0021614:	39 f0                	cmp    eax,esi
c0021616:	76 24                	jbe    c002163c <__moddi3+0x6c>
c0021618:	89 c8                	mov    eax,ecx
c002161a:	89 f2                	mov    edx,esi
c002161c:	f7 f3                	div    ebx
c002161e:	89 d6                	mov    esi,edx
c0021620:	89 f0                	mov    eax,esi
c0021622:	31 d2                	xor    edx,edx
c0021624:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021628:	85 c9                	test   ecx,ecx
c002162a:	74 07                	je     c0021633 <__moddi3+0x63>
c002162c:	f7 d8                	neg    eax
c002162e:	83 d2 00             	adc    edx,0x0
c0021631:	f7 da                	neg    edx
c0021633:	83 c4 2c             	add    esp,0x2c
c0021636:	5b                   	pop    ebx
c0021637:	5e                   	pop    esi
c0021638:	5f                   	pop    edi
c0021639:	5d                   	pop    ebp
c002163a:	c3                   	ret    
c002163b:	90                   	nop
c002163c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021640:	85 db                	test   ebx,ebx
c0021642:	75 0d                	jne    c0021651 <__moddi3+0x81>
c0021644:	b8 01 00 00 00       	mov    eax,0x1
c0021649:	31 d2                	xor    edx,edx
c002164b:	f7 f7                	div    edi
c002164d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021651:	89 f0                	mov    eax,esi
c0021653:	31 d2                	xor    edx,edx
c0021655:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021659:	f7 f7                	div    edi
c002165b:	89 e8                	mov    eax,ebp
c002165d:	f7 f7                	div    edi
c002165f:	89 d6                	mov    esi,edx
c0021661:	eb bd                	jmp    c0021620 <__moddi3+0x50>
c0021663:	90                   	nop
c0021664:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0021668:	39 f7                	cmp    edi,esi
c002166a:	76 20                	jbe    c002168c <__moddi3+0xbc>
c002166c:	89 c8                	mov    eax,ecx
c002166e:	89 f2                	mov    edx,esi
c0021670:	eb b2                	jmp    c0021624 <__moddi3+0x54>
c0021672:	66 90                	xchg   ax,ax
c0021674:	f7 d9                	neg    ecx
c0021676:	83 d3 00             	adc    ebx,0x0
c0021679:	f7 db                	neg    ebx
c002167b:	89 de                	mov    esi,ebx
c002167d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0021685:	e9 6f ff ff ff       	jmp    c00215f9 <__moddi3+0x29>
c002168a:	66 90                	xchg   ax,ax
c002168c:	0f bd c7             	bsr    eax,edi
c002168f:	83 f0 1f             	xor    eax,0x1f
c0021692:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021696:	75 24                	jne    c00216bc <__moddi3+0xec>
c0021698:	39 f7                	cmp    edi,esi
c002169a:	72 06                	jb     c00216a2 <__moddi3+0xd2>
c002169c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00216a0:	77 0c                	ja     c00216ae <__moddi3+0xde>
c00216a2:	89 e9                	mov    ecx,ebp
c00216a4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00216a8:	19 fe                	sbb    esi,edi
c00216aa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00216ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00216b2:	89 f2                	mov    edx,esi
c00216b4:	e9 6b ff ff ff       	jmp    c0021624 <__moddi3+0x54>
c00216b9:	8d 76 00             	lea    esi,[esi+0x0]
c00216bc:	b8 20 00 00 00       	mov    eax,0x20
c00216c1:	89 c2                	mov    edx,eax
c00216c3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00216c7:	29 da                	sub    edx,ebx
c00216c9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00216cd:	88 d9                	mov    cl,bl
c00216cf:	d3 e7                	shl    edi,cl
c00216d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00216d5:	88 d1                	mov    cl,dl
c00216d7:	d3 e8                	shr    eax,cl
c00216d9:	09 c7                	or     edi,eax
c00216db:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00216df:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00216e3:	89 d8                	mov    eax,ebx
c00216e5:	88 d9                	mov    cl,bl
c00216e7:	d3 e7                	shl    edi,cl
c00216e9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00216ed:	89 f3                	mov    ebx,esi
c00216ef:	88 d1                	mov    cl,dl
c00216f1:	d3 eb                	shr    ebx,cl
c00216f3:	89 c7                	mov    edi,eax
c00216f5:	88 c1                	mov    cl,al
c00216f7:	d3 e6                	shl    esi,cl
c00216f9:	89 e8                	mov    eax,ebp
c00216fb:	88 d1                	mov    cl,dl
c00216fd:	d3 e8                	shr    eax,cl
c00216ff:	09 f0                	or     eax,esi
c0021701:	89 f9                	mov    ecx,edi
c0021703:	d3 e5                	shl    ebp,cl
c0021705:	89 da                	mov    edx,ebx
c0021707:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002170b:	89 d3                	mov    ebx,edx
c002170d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021711:	89 c6                	mov    esi,eax
c0021713:	89 d1                	mov    ecx,edx
c0021715:	39 d3                	cmp    ebx,edx
c0021717:	72 27                	jb     c0021740 <__moddi3+0x170>
c0021719:	74 21                	je     c002173c <__moddi3+0x16c>
c002171b:	29 f5                	sub    ebp,esi
c002171d:	19 cb                	sbb    ebx,ecx
c002171f:	89 de                	mov    esi,ebx
c0021721:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0021725:	d3 e6                	shl    esi,cl
c0021727:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002172b:	89 f9                	mov    ecx,edi
c002172d:	d3 ed                	shr    ebp,cl
c002172f:	09 ee                	or     esi,ebp
c0021731:	89 f0                	mov    eax,esi
c0021733:	d3 eb                	shr    ebx,cl
c0021735:	89 da                	mov    edx,ebx
c0021737:	e9 e8 fe ff ff       	jmp    c0021624 <__moddi3+0x54>
c002173c:	39 c5                	cmp    ebp,eax
c002173e:	73 db                	jae    c002171b <__moddi3+0x14b>
c0021740:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021744:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0021748:	89 d1                	mov    ecx,edx
c002174a:	89 c6                	mov    esi,eax
c002174c:	eb cd                	jmp    c002171b <__moddi3+0x14b>
c002174e:	66 90                	xchg   ax,ax

c0021750 <__udivdi3>:
c0021750:	55                   	push   ebp
c0021751:	57                   	push   edi
c0021752:	56                   	push   esi
c0021753:	53                   	push   ebx
c0021754:	83 ec 1c             	sub    esp,0x1c
c0021757:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002175b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002175f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021763:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021767:	85 d2                	test   edx,edx
c0021769:	75 41                	jne    c00217ac <__udivdi3+0x5c>
c002176b:	39 f7                	cmp    edi,esi
c002176d:	76 15                	jbe    c0021784 <__udivdi3+0x34>
c002176f:	89 e8                	mov    eax,ebp
c0021771:	89 f2                	mov    edx,esi
c0021773:	f7 f7                	div    edi
c0021775:	31 db                	xor    ebx,ebx
c0021777:	89 da                	mov    edx,ebx
c0021779:	83 c4 1c             	add    esp,0x1c
c002177c:	5b                   	pop    ebx
c002177d:	5e                   	pop    esi
c002177e:	5f                   	pop    edi
c002177f:	5d                   	pop    ebp
c0021780:	c3                   	ret    
c0021781:	8d 76 00             	lea    esi,[esi+0x0]
c0021784:	89 f9                	mov    ecx,edi
c0021786:	85 ff                	test   edi,edi
c0021788:	75 0b                	jne    c0021795 <__udivdi3+0x45>
c002178a:	b8 01 00 00 00       	mov    eax,0x1
c002178f:	31 d2                	xor    edx,edx
c0021791:	f7 f7                	div    edi
c0021793:	89 c1                	mov    ecx,eax
c0021795:	31 d2                	xor    edx,edx
c0021797:	89 f0                	mov    eax,esi
c0021799:	f7 f1                	div    ecx
c002179b:	89 c3                	mov    ebx,eax
c002179d:	89 e8                	mov    eax,ebp
c002179f:	f7 f1                	div    ecx
c00217a1:	89 da                	mov    edx,ebx
c00217a3:	83 c4 1c             	add    esp,0x1c
c00217a6:	5b                   	pop    ebx
c00217a7:	5e                   	pop    esi
c00217a8:	5f                   	pop    edi
c00217a9:	5d                   	pop    ebp
c00217aa:	c3                   	ret    
c00217ab:	90                   	nop
c00217ac:	39 f2                	cmp    edx,esi
c00217ae:	77 1c                	ja     c00217cc <__udivdi3+0x7c>
c00217b0:	0f bd da             	bsr    ebx,edx
c00217b3:	83 f3 1f             	xor    ebx,0x1f
c00217b6:	75 24                	jne    c00217dc <__udivdi3+0x8c>
c00217b8:	39 f2                	cmp    edx,esi
c00217ba:	72 08                	jb     c00217c4 <__udivdi3+0x74>
c00217bc:	39 ef                	cmp    edi,ebp
c00217be:	0f 87 84 00 00 00    	ja     c0021848 <__udivdi3+0xf8>
c00217c4:	b8 01 00 00 00       	mov    eax,0x1
c00217c9:	eb ac                	jmp    c0021777 <__udivdi3+0x27>
c00217cb:	90                   	nop
c00217cc:	31 db                	xor    ebx,ebx
c00217ce:	31 c0                	xor    eax,eax
c00217d0:	89 da                	mov    edx,ebx
c00217d2:	83 c4 1c             	add    esp,0x1c
c00217d5:	5b                   	pop    ebx
c00217d6:	5e                   	pop    esi
c00217d7:	5f                   	pop    edi
c00217d8:	5d                   	pop    ebp
c00217d9:	c3                   	ret    
c00217da:	66 90                	xchg   ax,ax
c00217dc:	b8 20 00 00 00       	mov    eax,0x20
c00217e1:	29 d8                	sub    eax,ebx
c00217e3:	88 d9                	mov    cl,bl
c00217e5:	d3 e2                	shl    edx,cl
c00217e7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00217eb:	89 fa                	mov    edx,edi
c00217ed:	88 c1                	mov    cl,al
c00217ef:	d3 ea                	shr    edx,cl
c00217f1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00217f5:	09 d1                	or     ecx,edx
c00217f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00217fb:	88 d9                	mov    cl,bl
c00217fd:	d3 e7                	shl    edi,cl
c00217ff:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021803:	89 f7                	mov    edi,esi
c0021805:	88 c1                	mov    cl,al
c0021807:	d3 ef                	shr    edi,cl
c0021809:	88 d9                	mov    cl,bl
c002180b:	d3 e6                	shl    esi,cl
c002180d:	89 ea                	mov    edx,ebp
c002180f:	88 c1                	mov    cl,al
c0021811:	d3 ea                	shr    edx,cl
c0021813:	09 d6                	or     esi,edx
c0021815:	89 f0                	mov    eax,esi
c0021817:	89 fa                	mov    edx,edi
c0021819:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002181d:	89 d7                	mov    edi,edx
c002181f:	89 c6                	mov    esi,eax
c0021821:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021825:	39 d7                	cmp    edi,edx
c0021827:	72 13                	jb     c002183c <__udivdi3+0xec>
c0021829:	74 09                	je     c0021834 <__udivdi3+0xe4>
c002182b:	89 f0                	mov    eax,esi
c002182d:	31 db                	xor    ebx,ebx
c002182f:	e9 43 ff ff ff       	jmp    c0021777 <__udivdi3+0x27>
c0021834:	88 d9                	mov    cl,bl
c0021836:	d3 e5                	shl    ebp,cl
c0021838:	39 c5                	cmp    ebp,eax
c002183a:	73 ef                	jae    c002182b <__udivdi3+0xdb>
c002183c:	8d 46 ff             	lea    eax,[esi-0x1]
c002183f:	31 db                	xor    ebx,ebx
c0021841:	e9 31 ff ff ff       	jmp    c0021777 <__udivdi3+0x27>
c0021846:	66 90                	xchg   ax,ax
c0021848:	31 c0                	xor    eax,eax
c002184a:	e9 28 ff ff ff       	jmp    c0021777 <__udivdi3+0x27>
c002184f:	90                   	nop

c0021850 <__umoddi3>:
c0021850:	55                   	push   ebp
c0021851:	57                   	push   edi
c0021852:	56                   	push   esi
c0021853:	53                   	push   ebx
c0021854:	83 ec 1c             	sub    esp,0x1c
c0021857:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002185b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002185f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021863:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021867:	89 da                	mov    edx,ebx
c0021869:	85 c0                	test   eax,eax
c002186b:	75 37                	jne    c00218a4 <__umoddi3+0x54>
c002186d:	39 df                	cmp    edi,ebx
c002186f:	76 13                	jbe    c0021884 <__umoddi3+0x34>
c0021871:	89 f0                	mov    eax,esi
c0021873:	f7 f7                	div    edi
c0021875:	89 d0                	mov    eax,edx
c0021877:	31 d2                	xor    edx,edx
c0021879:	83 c4 1c             	add    esp,0x1c
c002187c:	5b                   	pop    ebx
c002187d:	5e                   	pop    esi
c002187e:	5f                   	pop    edi
c002187f:	5d                   	pop    ebp
c0021880:	c3                   	ret    
c0021881:	8d 76 00             	lea    esi,[esi+0x0]
c0021884:	89 fd                	mov    ebp,edi
c0021886:	85 ff                	test   edi,edi
c0021888:	75 0b                	jne    c0021895 <__umoddi3+0x45>
c002188a:	b8 01 00 00 00       	mov    eax,0x1
c002188f:	31 d2                	xor    edx,edx
c0021891:	f7 f7                	div    edi
c0021893:	89 c5                	mov    ebp,eax
c0021895:	89 d8                	mov    eax,ebx
c0021897:	31 d2                	xor    edx,edx
c0021899:	f7 f5                	div    ebp
c002189b:	89 f0                	mov    eax,esi
c002189d:	f7 f5                	div    ebp
c002189f:	89 d0                	mov    eax,edx
c00218a1:	eb d4                	jmp    c0021877 <__umoddi3+0x27>
c00218a3:	90                   	nop
c00218a4:	89 f1                	mov    ecx,esi
c00218a6:	39 d8                	cmp    eax,ebx
c00218a8:	76 0a                	jbe    c00218b4 <__umoddi3+0x64>
c00218aa:	89 f0                	mov    eax,esi
c00218ac:	83 c4 1c             	add    esp,0x1c
c00218af:	5b                   	pop    ebx
c00218b0:	5e                   	pop    esi
c00218b1:	5f                   	pop    edi
c00218b2:	5d                   	pop    ebp
c00218b3:	c3                   	ret    
c00218b4:	0f bd e8             	bsr    ebp,eax
c00218b7:	83 f5 1f             	xor    ebp,0x1f
c00218ba:	75 1c                	jne    c00218d8 <__umoddi3+0x88>
c00218bc:	39 d8                	cmp    eax,ebx
c00218be:	72 04                	jb     c00218c4 <__umoddi3+0x74>
c00218c0:	39 f7                	cmp    edi,esi
c00218c2:	77 08                	ja     c00218cc <__umoddi3+0x7c>
c00218c4:	89 da                	mov    edx,ebx
c00218c6:	29 fe                	sub    esi,edi
c00218c8:	19 c2                	sbb    edx,eax
c00218ca:	89 f1                	mov    ecx,esi
c00218cc:	89 c8                	mov    eax,ecx
c00218ce:	83 c4 1c             	add    esp,0x1c
c00218d1:	5b                   	pop    ebx
c00218d2:	5e                   	pop    esi
c00218d3:	5f                   	pop    edi
c00218d4:	5d                   	pop    ebp
c00218d5:	c3                   	ret    
c00218d6:	66 90                	xchg   ax,ax
c00218d8:	ba 20 00 00 00       	mov    edx,0x20
c00218dd:	29 ea                	sub    edx,ebp
c00218df:	89 e9                	mov    ecx,ebp
c00218e1:	d3 e0                	shl    eax,cl
c00218e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00218e7:	89 f8                	mov    eax,edi
c00218e9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00218ed:	88 d1                	mov    cl,dl
c00218ef:	d3 e8                	shr    eax,cl
c00218f1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00218f5:	09 c1                	or     ecx,eax
c00218f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00218fb:	89 e9                	mov    ecx,ebp
c00218fd:	d3 e7                	shl    edi,cl
c00218ff:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021903:	89 d8                	mov    eax,ebx
c0021905:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021909:	88 d1                	mov    cl,dl
c002190b:	d3 e8                	shr    eax,cl
c002190d:	89 c7                	mov    edi,eax
c002190f:	89 e9                	mov    ecx,ebp
c0021911:	d3 e3                	shl    ebx,cl
c0021913:	89 f0                	mov    eax,esi
c0021915:	88 d1                	mov    cl,dl
c0021917:	d3 e8                	shr    eax,cl
c0021919:	09 d8                	or     eax,ebx
c002191b:	89 e9                	mov    ecx,ebp
c002191d:	d3 e6                	shl    esi,cl
c002191f:	89 f3                	mov    ebx,esi
c0021921:	89 fa                	mov    edx,edi
c0021923:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021927:	89 d1                	mov    ecx,edx
c0021929:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002192d:	89 c6                	mov    esi,eax
c002192f:	89 d7                	mov    edi,edx
c0021931:	39 d1                	cmp    ecx,edx
c0021933:	72 27                	jb     c002195c <__umoddi3+0x10c>
c0021935:	74 21                	je     c0021958 <__umoddi3+0x108>
c0021937:	89 ca                	mov    edx,ecx
c0021939:	29 f3                	sub    ebx,esi
c002193b:	19 fa                	sbb    edx,edi
c002193d:	89 d0                	mov    eax,edx
c002193f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0021943:	d3 e0                	shl    eax,cl
c0021945:	89 e9                	mov    ecx,ebp
c0021947:	d3 eb                	shr    ebx,cl
c0021949:	09 d8                	or     eax,ebx
c002194b:	d3 ea                	shr    edx,cl
c002194d:	83 c4 1c             	add    esp,0x1c
c0021950:	5b                   	pop    ebx
c0021951:	5e                   	pop    esi
c0021952:	5f                   	pop    edi
c0021953:	5d                   	pop    ebp
c0021954:	c3                   	ret    
c0021955:	8d 76 00             	lea    esi,[esi+0x0]
c0021958:	39 c3                	cmp    ebx,eax
c002195a:	73 db                	jae    c0021937 <__umoddi3+0xe7>
c002195c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021960:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0021964:	89 d7                	mov    edi,edx
c0021966:	89 c6                	mov    esi,eax
c0021968:	eb cd                	jmp    c0021937 <__umoddi3+0xe7>

Disassembly of section .init:

c002196a <_init>:
c002196a:	55                   	push   ebp
c002196b:	89 e5                	mov    ebp,esp
c002196d:	e8 a6 e7 fd ff       	call   c0000118 <frame_dummy>
c0021972:	e8 e5 fa ff ff       	call   c002145c <__do_global_ctors_aux>
c0021977:	5d                   	pop    ebp
c0021978:	c3                   	ret    

Disassembly of section .fini:

c0021979 <_fini>:
c0021979:	55                   	push   ebp
c002197a:	89 e5                	mov    ebp,esp
c002197c:	e8 27 e7 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0021981:	5d                   	pop    ebp
c0021982:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0021984 <Computer::~Computer()>:
c0021984:	83 ec 0c             	sub    esp,0xc
c0021987:	ba ec 2c 02 c0       	mov    edx,0xc0022cec
c002198c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021990:	89 10                	mov    DWORD PTR [eax],edx
c0021992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021996:	83 ec 0c             	sub    esp,0xc
c0021999:	50                   	push   eax
c002199a:	e8 59 c6 fe ff       	call   c000dff8 <Device::~Device()>
c002199f:	83 c4 10             	add    esp,0x10
c00219a2:	90                   	nop
c00219a3:	83 c4 0c             	add    esp,0xc
c00219a6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00219a8 <Computer::~Computer()>:
c00219a8:	83 ec 0c             	sub    esp,0xc
c00219ab:	83 ec 0c             	sub    esp,0xc
c00219ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219b2:	e8 cd ff ff ff       	call   c0021984 <Computer::~Computer()>
c00219b7:	83 c4 10             	add    esp,0x10
c00219ba:	83 ec 08             	sub    esp,0x8
c00219bd:	68 ec 01 00 00       	push   0x1ec
c00219c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219c6:	e8 cd b1 fe ff       	call   c000cb98 <operator delete(void*, unsigned long)>
c00219cb:	83 c4 10             	add    esp,0x10
c00219ce:	83 c4 0c             	add    esp,0xc
c00219d1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00219d2 <idleCommon()>:
c00219d2:	83 ec 0c             	sub    esp,0xc
c00219d5:	fa                   	cli    
c00219d6:	ff 05 a8 9b 02 c0    	inc    DWORD PTR ds:0xc0029ba8
c00219dc:	e8 8b 4c ff ff       	call   c001666c <schedule()>
c00219e1:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c00219e6:	48                   	dec    eax
c00219e7:	a3 a8 9b 02 c0       	mov    ds:0xc0029ba8,eax
c00219ec:	75 01                	jne    c00219ef <idleCommon()+0x1d>
c00219ee:	fb                   	sti    
c00219ef:	83 c4 0c             	add    esp,0xc
c00219f2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00219f4 <LinkedList<UnixFile>::~LinkedList()>:
c00219f4:	90                   	nop
c00219f5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00219f6 <LinkedList<UnixFile>::LinkedList()>:
c00219f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00219fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a04:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021a0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a0f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021a16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a1a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021a20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a24:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021a2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a2f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021a36:	90                   	nop
c0021a37:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0021a38 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0021a38:	83 ec 0c             	sub    esp,0xc
c0021a3b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021a40:	75 10                	jne    c0021a52 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0021a42:	83 ec 0c             	sub    esp,0xc
c0021a45:	68 bc 30 02 c0       	push   0xc00230bc
c0021a4a:	e8 b8 15 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c0021a4f:	83 c4 10             	add    esp,0x10
c0021a52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a56:	8b 00                	mov    eax,DWORD PTR [eax]
c0021a58:	85 c0                	test   eax,eax
c0021a5a:	74 34                	je     c0021a90 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0021a5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021a63:	85 c0                	test   eax,eax
c0021a65:	74 29                	je     c0021a90 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0021a67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a6b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021a6e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021a72:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021a75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a79:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021a7d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021a80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021a87:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021a8e:	eb 65                	jmp    c0021af5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021a90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a94:	8b 00                	mov    eax,DWORD PTR [eax]
c0021a96:	85 c0                	test   eax,eax
c0021a98:	75 4b                	jne    c0021ae5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0021a9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021aa1:	85 c0                	test   eax,eax
c0021aa3:	75 40                	jne    c0021ae5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0021aa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021aa9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021aad:	89 10                	mov    DWORD PTR [eax],edx
c0021aaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ab3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021ab7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021aba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021abe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ac1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021acc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021acf:	85 c0                	test   eax,eax
c0021ad1:	74 22                	je     c0021af5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021ad3:	83 ec 0c             	sub    esp,0xc
c0021ad6:	68 de 30 02 c0       	push   0xc00230de
c0021adb:	e8 27 15 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c0021ae0:	83 c4 10             	add    esp,0x10
c0021ae3:	eb 10                	jmp    c0021af5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021ae5:	83 ec 0c             	sub    esp,0xc
c0021ae8:	68 e8 30 02 c0       	push   0xc00230e8
c0021aed:	e8 15 15 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c0021af2:	83 c4 10             	add    esp,0x10
c0021af5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021af9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021afc:	8d 50 01             	lea    edx,[eax+0x1]
c0021aff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b03:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021b06:	90                   	nop
c0021b07:	83 c4 0c             	add    esp,0xc
c0021b0a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0021b0c <LinkedList<UnixFile>::getFirstElement()>:
c0021b0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b10:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b12:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0021b14 <LinkedList<UnixFile>::removeFirst()>:
c0021b14:	83 ec 0c             	sub    esp,0xc
c0021b17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b1d:	85 c0                	test   eax,eax
c0021b1f:	75 12                	jne    c0021b33 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0021b21:	83 ec 0c             	sub    esp,0xc
c0021b24:	68 f4 30 02 c0       	push   0xc00230f4
c0021b29:	e8 d9 14 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c0021b2e:	83 c4 10             	add    esp,0x10
c0021b31:	eb 7e                	jmp    c0021bb1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0021b33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b37:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b3a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021b3d:	85 c0                	test   eax,eax
c0021b3f:	74 10                	je     c0021b51 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0021b41:	83 ec 0c             	sub    esp,0xc
c0021b44:	68 3f 31 02 c0       	push   0xc002313f
c0021b49:	e8 b9 14 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c0021b4e:	83 c4 10             	add    esp,0x10
c0021b51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b55:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b57:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021b5a:	85 c0                	test   eax,eax
c0021b5c:	75 33                	jne    c0021b91 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0021b5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b62:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021b68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b6c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021b73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b77:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021b7a:	83 f8 01             	cmp    eax,0x1
c0021b7d:	74 21                	je     c0021ba0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0021b7f:	83 ec 0c             	sub    esp,0xc
c0021b82:	68 18 31 02 c0       	push   0xc0023118
c0021b87:	e8 7b 14 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c0021b8c:	83 c4 10             	add    esp,0x10
c0021b8f:	eb 0f                	jmp    c0021ba0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0021b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b95:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b97:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0021b9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b9e:	89 10                	mov    DWORD PTR [eax],edx
c0021ba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ba4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021ba7:	8d 50 ff             	lea    edx,[eax-0x1]
c0021baa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021bb1:	83 c4 0c             	add    esp,0xc
c0021bb4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0021bb6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0021bb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021bba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021bbd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0021bbe <DriverlessDevice::~DriverlessDevice()>:
c0021bbe:	ba 3c 39 02 c0       	mov    edx,0xc002393c
c0021bc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bc7:	89 10                	mov    DWORD PTR [eax],edx
c0021bc9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bcd:	50                   	push   eax
c0021bce:	e8 25 c4 fe ff       	call   c000dff8 <Device::~Device()>
c0021bd3:	83 c4 04             	add    esp,0x4
c0021bd6:	90                   	nop
c0021bd7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0021bd8 <DriverlessDevice::~DriverlessDevice()>:
c0021bd8:	83 ec 0c             	sub    esp,0xc
c0021bdb:	83 ec 0c             	sub    esp,0xc
c0021bde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021be2:	e8 d7 ff ff ff       	call   c0021bbe <DriverlessDevice::~DriverlessDevice()>
c0021be7:	83 c4 10             	add    esp,0x10
c0021bea:	83 ec 08             	sub    esp,0x8
c0021bed:	68 58 01 00 00       	push   0x158
c0021bf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021bf6:	e8 9d af fe ff       	call   c000cb98 <operator delete(void*, unsigned long)>
c0021bfb:	83 c4 10             	add    esp,0x10
c0021bfe:	83 c4 0c             	add    esp,0xc
c0021c01:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0021c02 <LinkedList<Device>::addElement(Device*)>:
c0021c02:	83 ec 0c             	sub    esp,0xc
c0021c05:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021c0a:	75 10                	jne    c0021c1c <LinkedList<Device>::addElement(Device*)+0x1a>
c0021c0c:	83 ec 0c             	sub    esp,0xc
c0021c0f:	68 bc 30 02 c0       	push   0xc00230bc
c0021c14:	e8 ee 13 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c0021c19:	83 c4 10             	add    esp,0x10
c0021c1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c20:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c22:	85 c0                	test   eax,eax
c0021c24:	74 3a                	je     c0021c60 <LinkedList<Device>::addElement(Device*)+0x5e>
c0021c26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021c2d:	85 c0                	test   eax,eax
c0021c2f:	74 2f                	je     c0021c60 <LinkedList<Device>::addElement(Device*)+0x5e>
c0021c31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c35:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021c38:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021c3c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0021c42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c46:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021c4a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021c4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c51:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021c54:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021c5e:	eb 68                	jmp    c0021cc8 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021c60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c64:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c66:	85 c0                	test   eax,eax
c0021c68:	75 4e                	jne    c0021cb8 <LinkedList<Device>::addElement(Device*)+0xb6>
c0021c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021c71:	85 c0                	test   eax,eax
c0021c73:	75 43                	jne    c0021cb8 <LinkedList<Device>::addElement(Device*)+0xb6>
c0021c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c79:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021c7d:	89 10                	mov    DWORD PTR [eax],edx
c0021c7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c83:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021c87:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021c91:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021c9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c9f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021ca2:	85 c0                	test   eax,eax
c0021ca4:	74 22                	je     c0021cc8 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021ca6:	83 ec 0c             	sub    esp,0xc
c0021ca9:	68 de 30 02 c0       	push   0xc00230de
c0021cae:	e8 54 13 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c0021cb3:	83 c4 10             	add    esp,0x10
c0021cb6:	eb 10                	jmp    c0021cc8 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021cb8:	83 ec 0c             	sub    esp,0xc
c0021cbb:	68 e8 30 02 c0       	push   0xc00230e8
c0021cc0:	e8 42 13 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c0021cc5:	83 c4 10             	add    esp,0x10
c0021cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ccc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021ccf:	8d 50 01             	lea    edx,[eax+0x1]
c0021cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cd6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021cd9:	90                   	nop
c0021cda:	83 c4 0c             	add    esp,0xc
c0021cdd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0021cde <LinkedList<Device>::LinkedList()>:
c0021cde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ce2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021ce8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021cf3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cf7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021cfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d02:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021d08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d0c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021d13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d17:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021d1e:	90                   	nop
c0021d1f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0021d20 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0021d20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d24:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d26:	85 c0                	test   eax,eax
c0021d28:	75 0e                	jne    c0021d38 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021d2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021d31:	85 c0                	test   eax,eax
c0021d33:	75 03                	jne    c0021d38 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021d35:	b0 01                	mov    al,0x1
c0021d37:	c3                   	ret    
c0021d38:	b0 00                	mov    al,0x0
c0021d3a:	90                   	nop
c0021d3b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0021d3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0021d3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d40:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d42:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0021d44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0021d44:	83 ec 0c             	sub    esp,0xc
c0021d47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d4d:	85 c0                	test   eax,eax
c0021d4f:	75 17                	jne    c0021d68 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0021d51:	83 ec 0c             	sub    esp,0xc
c0021d54:	68 f4 30 02 c0       	push   0xc00230f4
c0021d59:	e8 a9 12 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c0021d5e:	83 c4 10             	add    esp,0x10
c0021d61:	e9 92 00 00 00       	jmp    c0021df8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c0021d66:	66 90                	xchg   ax,ax
c0021d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021d6f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021d72:	85 c0                	test   eax,eax
c0021d74:	0f 95 c0             	setne  al
c0021d77:	84 c0                	test   al,al
c0021d79:	74 11                	je     c0021d8c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c0021d7b:	83 ec 0c             	sub    esp,0xc
c0021d7e:	68 3f 31 02 c0       	push   0xc002313f
c0021d83:	e8 7f 12 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c0021d88:	83 c4 10             	add    esp,0x10
c0021d8b:	90                   	nop
c0021d8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d90:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d92:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021d95:	85 c0                	test   eax,eax
c0021d97:	0f 94 c0             	sete   al
c0021d9a:	84 c0                	test   al,al
c0021d9c:	74 36                	je     c0021dd4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c0021d9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021da2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021da8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021db3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021db7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021dba:	83 f8 01             	cmp    eax,0x1
c0021dbd:	74 25                	je     c0021de4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0021dbf:	83 ec 0c             	sub    esp,0xc
c0021dc2:	68 18 31 02 c0       	push   0xc0023118
c0021dc7:	e8 3b 12 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c0021dcc:	83 c4 10             	add    esp,0x10
c0021dcf:	eb 13                	jmp    c0021de4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0021dd1:	8d 76 00             	lea    esi,[esi+0x0]
c0021dd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dd8:	8b 00                	mov    eax,DWORD PTR [eax]
c0021dda:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0021ddd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021de1:	89 10                	mov    DWORD PTR [eax],edx
c0021de3:	90                   	nop
c0021de4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021de8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021deb:	8d 50 ff             	lea    edx,[eax-0x1]
c0021dee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021df2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021df5:	8d 76 00             	lea    esi,[esi+0x0]
c0021df8:	83 c4 0c             	add    esp,0xc
c0021dfb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0021dfc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0021dfc:	83 ec 0c             	sub    esp,0xc
c0021dff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021e04:	75 12                	jne    c0021e18 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0021e06:	83 ec 0c             	sub    esp,0xc
c0021e09:	68 bc 30 02 c0       	push   0xc00230bc
c0021e0e:	e8 f4 11 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c0021e13:	83 c4 10             	add    esp,0x10
c0021e16:	66 90                	xchg   ax,ax
c0021e18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e1e:	85 c0                	test   eax,eax
c0021e20:	74 36                	je     c0021e58 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021e22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021e29:	85 c0                	test   eax,eax
c0021e2b:	74 2b                	je     c0021e58 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021e2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e31:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021e34:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021e38:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0021e3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e3f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021e43:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021e46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021e4d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021e54:	eb 6a                	jmp    c0021ec0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021e56:	66 90                	xchg   ax,ax
c0021e58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e5e:	85 c0                	test   eax,eax
c0021e60:	75 4e                	jne    c0021eb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021e62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021e69:	85 c0                	test   eax,eax
c0021e6b:	75 43                	jne    c0021eb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021e6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e71:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021e75:	89 10                	mov    DWORD PTR [eax],edx
c0021e77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e7b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021e7f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021e89:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e94:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021e97:	85 c0                	test   eax,eax
c0021e99:	74 25                	je     c0021ec0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021e9b:	83 ec 0c             	sub    esp,0xc
c0021e9e:	68 de 30 02 c0       	push   0xc00230de
c0021ea3:	e8 5f 11 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c0021ea8:	83 c4 10             	add    esp,0x10
c0021eab:	eb 13                	jmp    c0021ec0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021ead:	8d 76 00             	lea    esi,[esi+0x0]
c0021eb0:	83 ec 0c             	sub    esp,0xc
c0021eb3:	68 e8 30 02 c0       	push   0xc00230e8
c0021eb8:	e8 4a 11 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c0021ebd:	83 c4 10             	add    esp,0x10
c0021ec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ec4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021ec7:	8d 50 01             	lea    edx,[eax+0x1]
c0021eca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ece:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021ed1:	90                   	nop
c0021ed2:	83 c4 0c             	add    esp,0xc
c0021ed5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0021ed8 <ACPI::~ACPI()>:
c0021ed8:	83 ec 0c             	sub    esp,0xc
c0021edb:	ba cc 40 02 c0       	mov    edx,0xc00240cc
c0021ee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ee4:	89 10                	mov    DWORD PTR [eax],edx
c0021ee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021eea:	83 ec 0c             	sub    esp,0xc
c0021eed:	50                   	push   eax
c0021eee:	e8 05 c1 fe ff       	call   c000dff8 <Device::~Device()>
c0021ef3:	83 c4 10             	add    esp,0x10
c0021ef6:	90                   	nop
c0021ef7:	83 c4 0c             	add    esp,0xc
c0021efa:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0021efc <ACPI::~ACPI()>:
c0021efc:	83 ec 0c             	sub    esp,0xc
c0021eff:	83 ec 0c             	sub    esp,0xc
c0021f02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f06:	e8 cd ff ff ff       	call   c0021ed8 <ACPI::~ACPI()>
c0021f0b:	83 c4 10             	add    esp,0x10
c0021f0e:	83 ec 08             	sub    esp,0x8
c0021f11:	68 64 12 00 00       	push   0x1264
c0021f16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f1a:	e8 79 ac fe ff       	call   c000cb98 <operator delete(void*, unsigned long)>
c0021f1f:	83 c4 10             	add    esp,0x10
c0021f22:	83 c4 0c             	add    esp,0xc
c0021f25:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0021f28 <LinkedList<Device>::~LinkedList()>:
c0021f28:	90                   	nop
c0021f29:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0021f2c <LinkedList<Device>::isEmpty()>:
c0021f2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f30:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f32:	85 c0                	test   eax,eax
c0021f34:	75 0e                	jne    c0021f44 <LinkedList<Device>::isEmpty()+0x18>
c0021f36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021f3d:	85 c0                	test   eax,eax
c0021f3f:	75 03                	jne    c0021f44 <LinkedList<Device>::isEmpty()+0x18>
c0021f41:	b0 01                	mov    al,0x1
c0021f43:	c3                   	ret    
c0021f44:	b0 00                	mov    al,0x0
c0021f46:	90                   	nop
c0021f47:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0021f48 <LinkedList<Device>::getFirstElement()>:
c0021f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f4e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0021f50 <LinkedList<Device>::removeFirst()>:
c0021f50:	83 ec 0c             	sub    esp,0xc
c0021f53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f57:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f59:	85 c0                	test   eax,eax
c0021f5b:	75 17                	jne    c0021f74 <LinkedList<Device>::removeFirst()+0x24>
c0021f5d:	83 ec 0c             	sub    esp,0xc
c0021f60:	68 f4 30 02 c0       	push   0xc00230f4
c0021f65:	e8 9d 10 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c0021f6a:	83 c4 10             	add    esp,0x10
c0021f6d:	e9 92 00 00 00       	jmp    c0022004 <LinkedList<Device>::removeFirst()+0xb4>
c0021f72:	66 90                	xchg   ax,ax
c0021f74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021f7b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021f81:	85 c0                	test   eax,eax
c0021f83:	74 13                	je     c0021f98 <LinkedList<Device>::removeFirst()+0x48>
c0021f85:	83 ec 0c             	sub    esp,0xc
c0021f88:	68 3f 31 02 c0       	push   0xc002313f
c0021f8d:	e8 75 10 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c0021f92:	83 c4 10             	add    esp,0x10
c0021f95:	8d 76 00             	lea    esi,[esi+0x0]
c0021f98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f9e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021fa4:	85 c0                	test   eax,eax
c0021fa6:	75 34                	jne    c0021fdc <LinkedList<Device>::removeFirst()+0x8c>
c0021fa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021fb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fb6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021fbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fc1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021fc4:	83 f8 01             	cmp    eax,0x1
c0021fc7:	74 27                	je     c0021ff0 <LinkedList<Device>::removeFirst()+0xa0>
c0021fc9:	83 ec 0c             	sub    esp,0xc
c0021fcc:	68 18 31 02 c0       	push   0xc0023118
c0021fd1:	e8 31 10 ff ff       	call   c0013007 <Krnl::panic(char const*)>
c0021fd6:	83 c4 10             	add    esp,0x10
c0021fd9:	eb 15                	jmp    c0021ff0 <LinkedList<Device>::removeFirst()+0xa0>
c0021fdb:	90                   	nop
c0021fdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fe0:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fe2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0021fe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fec:	89 10                	mov    DWORD PTR [eax],edx
c0021fee:	66 90                	xchg   ax,ax
c0021ff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ff4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021ff7:	8d 50 ff             	lea    edx,[eax-0x1]
c0021ffa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ffe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022001:	8d 76 00             	lea    esi,[esi+0x0]
c0022004:	83 c4 0c             	add    esp,0xc
c0022007:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0022008 <CPU::~CPU()>:
c0022008:	83 ec 0c             	sub    esp,0xc
c002200b:	ba b8 42 02 c0       	mov    edx,0xc00242b8
c0022010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022014:	89 10                	mov    DWORD PTR [eax],edx
c0022016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002201a:	83 ec 0c             	sub    esp,0xc
c002201d:	50                   	push   eax
c002201e:	e8 d5 bf fe ff       	call   c000dff8 <Device::~Device()>
c0022023:	83 c4 10             	add    esp,0x10
c0022026:	90                   	nop
c0022027:	83 c4 0c             	add    esp,0xc
c002202a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c002202c <CPU::~CPU()>:
c002202c:	83 ec 0c             	sub    esp,0xc
c002202f:	83 ec 0c             	sub    esp,0xc
c0022032:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022036:	e8 cd ff ff ff       	call   c0022008 <CPU::~CPU()>
c002203b:	83 c4 10             	add    esp,0x10
c002203e:	83 ec 08             	sub    esp,0x8
c0022041:	68 94 11 00 00       	push   0x1194
c0022046:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002204a:	e8 49 ab fe ff       	call   c000cb98 <operator delete(void*, unsigned long)>
c002204f:	83 c4 10             	add    esp,0x10
c0022052:	83 c4 0c             	add    esp,0xc
c0022055:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0022058 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0022058:	90                   	nop
c0022059:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c002205c <ThreadControlBlock::ThreadControlBlock()>:
c002205c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022060:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022067:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002206b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0022072:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022076:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c002207d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022081:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0022088:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002208c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0022093:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022097:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002209b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002209f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c00220a3:	90                   	nop
c00220a4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00220a8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00220a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220ac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00220b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220b6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00220bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220c1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00220c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220cc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00220d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220d6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00220dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220e1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00220e8:	90                   	nop
c00220e9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00220ec <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00220ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00220f0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00220f3:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00220f4 <Vm::_FPUState::_FPUState()>:
c00220f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220f8:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00220ff:	90                   	nop
c0022100:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0022102 <PCI::~PCI()>:
c0022102:	83 ec 0c             	sub    esp,0xc
c0022105:	ba 70 54 02 c0       	mov    edx,0xc0025470
c002210a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002210e:	89 10                	mov    DWORD PTR [eax],edx
c0022110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022114:	83 ec 0c             	sub    esp,0xc
c0022117:	50                   	push   eax
c0022118:	e8 6b b9 fe ff       	call   c000da88 <Bus::~Bus()>
c002211d:	83 c4 10             	add    esp,0x10
c0022120:	90                   	nop
c0022121:	83 c4 0c             	add    esp,0xc
c0022124:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0022126 <PCI::~PCI()>:
c0022126:	83 ec 0c             	sub    esp,0xc
c0022129:	83 ec 0c             	sub    esp,0xc
c002212c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022130:	e8 cd ff ff ff       	call   c0022102 <PCI::~PCI()>
c0022135:	83 c4 10             	add    esp,0x10
c0022138:	83 ec 08             	sub    esp,0x8
c002213b:	68 5c 01 00 00       	push   0x15c
c0022140:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022144:	e8 4f aa fe ff       	call   c000cb98 <operator delete(void*, unsigned long)>
c0022149:	83 c4 10             	add    esp,0x10
c002214c:	83 c4 0c             	add    esp,0xc
c002214f:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0022150 <IDE::~IDE()>:
c0022150:	83 ec 0c             	sub    esp,0xc
c0022153:	ba 40 55 02 c0       	mov    edx,0xc0025540
c0022158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002215c:	89 10                	mov    DWORD PTR [eax],edx
c002215e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022162:	83 ec 0c             	sub    esp,0xc
c0022165:	50                   	push   eax
c0022166:	e8 71 c3 fe ff       	call   c000e4dc <HardDiskController::~HardDiskController()>
c002216b:	83 c4 10             	add    esp,0x10
c002216e:	90                   	nop
c002216f:	83 c4 0c             	add    esp,0xc
c0022172:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0022174 <IDE::~IDE()>:
c0022174:	83 ec 0c             	sub    esp,0xc
c0022177:	83 ec 0c             	sub    esp,0xc
c002217a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002217e:	e8 cd ff ff ff       	call   c0022150 <IDE::~IDE()>
c0022183:	83 c4 10             	add    esp,0x10
c0022186:	83 ec 08             	sub    esp,0x8
c0022189:	68 70 02 00 00       	push   0x270
c002218e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022192:	e8 01 aa fe ff       	call   c000cb98 <operator delete(void*, unsigned long)>
c0022197:	83 c4 10             	add    esp,0x10
c002219a:	83 c4 0c             	add    esp,0xc
c002219d:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002219e <SATABus::~SATABus()>:
c002219e:	83 ec 0c             	sub    esp,0xc
c00221a1:	ba 0c 56 02 c0       	mov    edx,0xc002560c
c00221a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221aa:	89 10                	mov    DWORD PTR [eax],edx
c00221ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221b0:	83 ec 0c             	sub    esp,0xc
c00221b3:	50                   	push   eax
c00221b4:	e8 23 c3 fe ff       	call   c000e4dc <HardDiskController::~HardDiskController()>
c00221b9:	83 c4 10             	add    esp,0x10
c00221bc:	90                   	nop
c00221bd:	83 c4 0c             	add    esp,0xc
c00221c0:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00221c2 <SATABus::~SATABus()>:
c00221c2:	83 ec 0c             	sub    esp,0xc
c00221c5:	83 ec 0c             	sub    esp,0xc
c00221c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00221cc:	e8 cd ff ff ff       	call   c002219e <SATABus::~SATABus()>
c00221d1:	83 c4 10             	add    esp,0x10
c00221d4:	83 ec 08             	sub    esp,0x8
c00221d7:	68 64 01 00 00       	push   0x164
c00221dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00221e0:	e8 b3 a9 fe ff       	call   c000cb98 <operator delete(void*, unsigned long)>
c00221e5:	83 c4 10             	add    esp,0x10
c00221e8:	83 c4 0c             	add    esp,0xc
c00221eb:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00221ec <ATA::~ATA()>:
c00221ec:	83 ec 0c             	sub    esp,0xc
c00221ef:	ba 84 56 02 c0       	mov    edx,0xc0025684
c00221f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221f8:	89 10                	mov    DWORD PTR [eax],edx
c00221fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221fe:	83 ec 0c             	sub    esp,0xc
c0022201:	50                   	push   eax
c0022202:	e8 b7 c3 fe ff       	call   c000e5be <PhysicalDisk::~PhysicalDisk()>
c0022207:	83 c4 10             	add    esp,0x10
c002220a:	90                   	nop
c002220b:	83 c4 0c             	add    esp,0xc
c002220e:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0022210 <ATA::~ATA()>:
c0022210:	83 ec 0c             	sub    esp,0xc
c0022213:	83 ec 0c             	sub    esp,0xc
c0022216:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002221a:	e8 cd ff ff ff       	call   c00221ec <ATA::~ATA()>
c002221f:	83 c4 10             	add    esp,0x10
c0022222:	83 ec 08             	sub    esp,0x8
c0022225:	68 7c 01 00 00       	push   0x17c
c002222a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002222e:	e8 65 a9 fe ff       	call   c000cb98 <operator delete(void*, unsigned long)>
c0022233:	83 c4 10             	add    esp,0x10
c0022236:	83 c4 0c             	add    esp,0xc
c0022239:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002223a <ATAPI::~ATAPI()>:
c002223a:	83 ec 0c             	sub    esp,0xc
c002223d:	ba fc 56 02 c0       	mov    edx,0xc00256fc
c0022242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022246:	89 10                	mov    DWORD PTR [eax],edx
c0022248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002224c:	83 ec 0c             	sub    esp,0xc
c002224f:	50                   	push   eax
c0022250:	e8 69 c3 fe ff       	call   c000e5be <PhysicalDisk::~PhysicalDisk()>
c0022255:	83 c4 10             	add    esp,0x10
c0022258:	90                   	nop
c0022259:	83 c4 0c             	add    esp,0xc
c002225c:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002225e <ATAPI::~ATAPI()>:
c002225e:	83 ec 0c             	sub    esp,0xc
c0022261:	83 ec 0c             	sub    esp,0xc
c0022264:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022268:	e8 cd ff ff ff       	call   c002223a <ATAPI::~ATAPI()>
c002226d:	83 c4 10             	add    esp,0x10
c0022270:	83 ec 08             	sub    esp,0x8
c0022273:	68 84 01 00 00       	push   0x184
c0022278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002227c:	e8 17 a9 fe ff       	call   c000cb98 <operator delete(void*, unsigned long)>
c0022281:	83 c4 10             	add    esp,0x10
c0022284:	83 c4 0c             	add    esp,0xc
c0022287:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0022288 <SATA::~SATA()>:
c0022288:	83 ec 0c             	sub    esp,0xc
c002228b:	ba 38 59 02 c0       	mov    edx,0xc0025938
c0022290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022294:	89 10                	mov    DWORD PTR [eax],edx
c0022296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002229a:	83 ec 0c             	sub    esp,0xc
c002229d:	50                   	push   eax
c002229e:	e8 1b c3 fe ff       	call   c000e5be <PhysicalDisk::~PhysicalDisk()>
c00222a3:	83 c4 10             	add    esp,0x10
c00222a6:	90                   	nop
c00222a7:	83 c4 0c             	add    esp,0xc
c00222aa:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00222ac <SATA::~SATA()>:
c00222ac:	83 ec 0c             	sub    esp,0xc
c00222af:	83 ec 0c             	sub    esp,0xc
c00222b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00222b6:	e8 cd ff ff ff       	call   c0022288 <SATA::~SATA()>
c00222bb:	83 c4 10             	add    esp,0x10
c00222be:	83 ec 08             	sub    esp,0x8
c00222c1:	68 7c 01 00 00       	push   0x17c
c00222c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00222ca:	e8 c9 a8 fe ff       	call   c000cb98 <operator delete(void*, unsigned long)>
c00222cf:	83 c4 10             	add    esp,0x10
c00222d2:	83 c4 0c             	add    esp,0xc
c00222d5:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00222d6 <SATAPI::~SATAPI()>:
c00222d6:	83 ec 0c             	sub    esp,0xc
c00222d9:	ba a4 5a 02 c0       	mov    edx,0xc0025aa4
c00222de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222e2:	89 10                	mov    DWORD PTR [eax],edx
c00222e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222e8:	83 ec 0c             	sub    esp,0xc
c00222eb:	50                   	push   eax
c00222ec:	e8 cd c2 fe ff       	call   c000e5be <PhysicalDisk::~PhysicalDisk()>
c00222f1:	83 c4 10             	add    esp,0x10
c00222f4:	90                   	nop
c00222f5:	83 c4 0c             	add    esp,0xc
c00222f8:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00222fa <SATAPI::~SATAPI()>:
c00222fa:	83 ec 0c             	sub    esp,0xc
c00222fd:	83 ec 0c             	sub    esp,0xc
c0022300:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022304:	e8 cd ff ff ff       	call   c00222d6 <SATAPI::~SATAPI()>
c0022309:	83 c4 10             	add    esp,0x10
c002230c:	83 ec 08             	sub    esp,0x8
c002230f:	68 84 01 00 00       	push   0x184
c0022314:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022318:	e8 7b a8 fe ff       	call   c000cb98 <operator delete(void*, unsigned long)>
c002231d:	83 c4 10             	add    esp,0x10
c0022320:	83 c4 0c             	add    esp,0xc
c0022323:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0022324 <IOAPIC::~IOAPIC()>:
c0022324:	83 ec 0c             	sub    esp,0xc
c0022327:	ba f8 5a 02 c0       	mov    edx,0xc0025af8
c002232c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022330:	89 10                	mov    DWORD PTR [eax],edx
c0022332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022336:	83 ec 0c             	sub    esp,0xc
c0022339:	50                   	push   eax
c002233a:	e8 b9 bc fe ff       	call   c000dff8 <Device::~Device()>
c002233f:	83 c4 10             	add    esp,0x10
c0022342:	90                   	nop
c0022343:	83 c4 0c             	add    esp,0xc
c0022346:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0022348 <IOAPIC::~IOAPIC()>:
c0022348:	83 ec 0c             	sub    esp,0xc
c002234b:	83 ec 0c             	sub    esp,0xc
c002234e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022352:	e8 cd ff ff ff       	call   c0022324 <IOAPIC::~IOAPIC()>
c0022357:	83 c4 10             	add    esp,0x10
c002235a:	83 ec 08             	sub    esp,0x8
c002235d:	68 68 01 00 00       	push   0x168
c0022362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022366:	e8 2d a8 fe ff       	call   c000cb98 <operator delete(void*, unsigned long)>
c002236b:	83 c4 10             	add    esp,0x10
c002236e:	83 c4 0c             	add    esp,0xc
c0022371:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0022374 <APICTimer::~APICTimer()>:
c0022374:	83 ec 0c             	sub    esp,0xc
c0022377:	ba 40 5b 02 c0       	mov    edx,0xc0025b40
c002237c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022380:	89 10                	mov    DWORD PTR [eax],edx
c0022382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022386:	83 ec 0c             	sub    esp,0xc
c0022389:	50                   	push   eax
c002238a:	e8 ed d5 fe ff       	call   c000f97c <Timer::~Timer()>
c002238f:	83 c4 10             	add    esp,0x10
c0022392:	90                   	nop
c0022393:	83 c4 0c             	add    esp,0xc
c0022396:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0022398 <APICTimer::~APICTimer()>:
c0022398:	83 ec 0c             	sub    esp,0xc
c002239b:	83 ec 0c             	sub    esp,0xc
c002239e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00223a2:	e8 cd ff ff ff       	call   c0022374 <APICTimer::~APICTimer()>
c00223a7:	83 c4 10             	add    esp,0x10
c00223aa:	83 ec 08             	sub    esp,0x8
c00223ad:	68 60 01 00 00       	push   0x160
c00223b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00223b6:	e8 dd a7 fe ff       	call   c000cb98 <operator delete(void*, unsigned long)>
c00223bb:	83 c4 10             	add    esp,0x10
c00223be:	83 c4 0c             	add    esp,0xc
c00223c1:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00223c4 <PIT::~PIT()>:
c00223c4:	83 ec 0c             	sub    esp,0xc
c00223c7:	ba 90 5b 02 c0       	mov    edx,0xc0025b90
c00223cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223d0:	89 10                	mov    DWORD PTR [eax],edx
c00223d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223d6:	83 ec 0c             	sub    esp,0xc
c00223d9:	50                   	push   eax
c00223da:	e8 9d d5 fe ff       	call   c000f97c <Timer::~Timer()>
c00223df:	83 c4 10             	add    esp,0x10
c00223e2:	90                   	nop
c00223e3:	83 c4 0c             	add    esp,0xc
c00223e6:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00223e8 <PIT::~PIT()>:
c00223e8:	83 ec 0c             	sub    esp,0xc
c00223eb:	83 ec 0c             	sub    esp,0xc
c00223ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00223f2:	e8 cd ff ff ff       	call   c00223c4 <PIT::~PIT()>
c00223f7:	83 c4 10             	add    esp,0x10
c00223fa:	83 ec 08             	sub    esp,0x8
c00223fd:	68 5c 01 00 00       	push   0x15c
c0022402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022406:	e8 8d a7 fe ff       	call   c000cb98 <operator delete(void*, unsigned long)>
c002240b:	83 c4 10             	add    esp,0x10
c002240e:	83 c4 0c             	add    esp,0xc
c0022411:	c3                   	ret    
