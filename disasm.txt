
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 3f f6 00 00       	call   c000f65f <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 e3 83 02 00       	call   c0028408 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 5c 90 02 c0       	mov    ebx,0xc002905c
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 68 90 02 c0    	cmp    ebx,0xc0029068
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 98 cf 02 c0       	mov    eax,0xc002cf98
c0000049:	3d 98 cf 02 c0       	cmp    eax,0xc002cf98
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 98 cf 02 c0       	push   0xc002cf98
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 98 cf 02 c0       	mov    eax,0xc002cf98
c0000075:	2d 98 cf 02 c0       	sub    eax,0xc002cf98
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 98 cf 02 c0       	push   0xc002cf98
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d c8 d5 02 c0 00 	cmp    BYTE PTR ds:0xc002d5c8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 70 90 02 c0       	mov    ebx,0xc0029070
c00000bb:	81 eb 6c 90 02 c0    	sub    ebx,0xc002906c
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 6c 90 02 c0       	mov    esi,0xc002906c
c00000ca:	a1 cc d5 02 c0       	mov    eax,ds:0xc002d5cc
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 cc d5 02 c0       	mov    ds:0xc002d5cc,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 cc d5 02 c0       	mov    eax,ds:0xc002d5cc
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 98 cf 02 c0       	push   0xc002cf98
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 c8 d5 02 c0 01 	mov    BYTE PTR ds:0xc002d5c8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 d0 d5 02 c0       	push   0xc002d5d0
c000012c:	68 98 cf 02 c0       	push   0xc002cf98
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 47 cf 01 00       	call   c001d2ea <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 de 20 01 00       	call   c0012499 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 25 cf 01 00       	call   c001d2ea <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 cd d3 01 00       	call   c001d7b1 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 e3 d9 01 00       	call   c001ddd0 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 10 da 02 c0 	lgdtd  ds:0xc002da10
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 47 3e 01 00       	call   c0014429 <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 e8 d5 02 c0       	mov    ds:0xc002d5e8,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 e8 d5 02 c0    	mov    DWORD PTR ds:0xc002d5e8,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d e8 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5e8
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 80 90 02 c0 02 	test   BYTE PTR [edx-0x3ffd6f80],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 80 90 02 c0 01 	test   BYTE PTR [edx-0x3ffd6f80],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 80 90 02 c0 08 	test   BYTE PTR [edx-0x3ffd6f80],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 80 90 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6f80],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 80 90 02 c0 01 	test   BYTE PTR [edx-0x3ffd6f80],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d 00 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d600
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d 00 d6 02 c0    	mov    DWORD PTR ds:0xc002d600,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 04 d6 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd29fc]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 04 d6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd29fc],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d 00 d6 02 c0    	mov    DWORD PTR ds:0xc002d600,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 2c d6 02 c0    	cmp    DWORD PTR ds:0xc002d62c,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d 3c d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d63c
c0000e38:	c7 42 0c 34 d6 02 c0 	mov    DWORD PTR [edx+0xc],0xc002d634
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 3c d6 02 c0    	mov    DWORD PTR ds:0xc002d63c,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 2c d6 02 c0    	mov    DWORD PTR ds:0xc002d62c,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 00 d6 02 c0 02 	test   BYTE PTR ds:0xc002d600,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 00 d6 02 c0       	mov    eax,0xc002d600
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 df e4 00 00       	call   c000f3f8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 21 e4 00 00       	call   c000f3f8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 0b e4 00 00       	call   c000f3f8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 e7 e3 00 00       	call   c000f3f8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d 00 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d600
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 00 d6 02 c0       	mov    eax,0xc002d600
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 04 d6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd29fc]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 04 d6 02 c0 	mov    DWORD PTR [edx*4-0x3ffd29fc],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 34 d6 02 c0 	lea    edx,[eax*8-0x3ffd29cc]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 00 d6 02 c0       	mov    eax,0xc002d600
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d 40 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d640
c00011ba:	81 fb 34 d6 02 c0    	cmp    ebx,0xc002d634
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d 34 d6 02 c0       	cmp    eax,0xc002d634
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d 30 d6 02 c0    	cmp    DWORD PTR ds:0xc002d630,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 3c d6 02 c0       	mov    ds:0xc002d63c,eax
c00011f6:	a3 40 d6 02 c0       	mov    ds:0xc002d640,eax
c00011fb:	a3 30 d6 02 c0       	mov    ds:0xc002d630,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 34 d6 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d634
c0001209:	c7 40 0c 34 d6 02 c0 	mov    DWORD PTR [eax+0xc],0xc002d634
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 40 d6 02 c0       	mov    ds:0xc002d640,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 34 d6 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d634
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 f8 d5 02 c0 	lea    ebp,[edx*4-0x3ffd2a08]
c000125a:	8b 14 95 00 d6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2a00]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 00 d6 02 c0 	lea    ecx,[edx*4-0x3ffd2a00]
c0001275:	8b 14 95 00 d6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2a00]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd 34 d9 02 c0 	or     DWORD PTR [edi*4-0x3ffd26cc],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 34 d6 02 c0 	lea    eax,[eax*8-0x3ffd29cc]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d 3c d6 02 c0    	mov    DWORD PTR ds:0xc002d63c,ecx
c000132f:	89 0d 40 d6 02 c0    	mov    DWORD PTR ds:0xc002d640,ecx
c0001335:	c7 41 08 34 d6 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002d634
c000133c:	c7 41 0c 34 d6 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002d634
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd 2c d6 02 c0 	lea    edx,[ecx*8-0x3ffd29d4]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d 34 d9 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd26cc]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d 34 d9 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd26cc]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 2c d6 02 c0 	lea    edx,[eax*4-0x3ffd29d4]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d 34 d9 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd26cc],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d 3c d6 02 c0    	mov    DWORD PTR ds:0xc002d63c,edi
c0001402:	89 3d 40 d6 02 c0    	mov    DWORD PTR ds:0xc002d640,edi
c0001408:	c7 47 08 34 d6 02 c0 	mov    DWORD PTR [edi+0x8],0xc002d634
c000140f:	c7 47 0c 34 d6 02 c0 	mov    DWORD PTR [edi+0xc],0xc002d634
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d 30 d6 02 c0    	mov    DWORD PTR ds:0xc002d630,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 2c d6 02 c0       	mov    eax,ds:0xc002d62c
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d 2c d6 02 c0    	mov    DWORD PTR ds:0xc002d62c,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba 00 d6 02 c0       	mov    edx,0xc002d600
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d 00 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d600,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 00 d6 02 c0       	mov    eax,0xc002d600
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d 54 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d954
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 54 d9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d954,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d 54 d9 02 c0    	mov    DWORD PTR ds:0xc002d954,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 2c d6 02 c0    	cmp    DWORD PTR ds:0xc002d62c,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d 2c d6 02 c0    	mov    DWORD PTR ds:0xc002d62c,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d 00 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d600,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 00 d6 02 c0       	mov    eax,0xc002d600
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 5c d9 02 c0    	push   DWORD PTR ds:0xc002d95c
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d 00 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d600,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 00 d6 02 c0       	mov    eax,0xc002d600
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 5c d9 02 c0       	mov    eax,ds:0xc002d95c
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 00 d6 02 c0       	mov    eax,0xc002d600
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d 2c d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d62c,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 00 d6 02 c0       	mov    eax,0xc002d600
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 2c d6 02 c0       	mov    eax,ds:0xc002d62c
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 04 d6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd29fc]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 34 d6 02 c0       	mov    eax,0xc002d634
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d 2c d9 02 c0       	cmp    eax,0xc002d92c
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 50 d9 02 c0    	mov    esi,DWORD PTR ds:0xc002d950
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 64 d9 02 c0    	mov    esi,DWORD PTR ds:0xc002d964
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 74 d9 02 c0    	mov    esi,DWORD PTR ds:0xc002d974
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 00 d6 02 c0       	mov    eax,0xc002d600
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 84 91 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6e7c]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 00 d6 02 c0       	mov    eax,ds:0xc002d600
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 00 d6 02 c0       	mov    ds:0xc002d600,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d 44 d9 02 c0    	mov    DWORD PTR ds:0xc002d944,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d 48 d9 02 c0    	mov    DWORD PTR ds:0xc002d948,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d 4c d9 02 c0    	mov    DWORD PTR ds:0xc002d94c,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 54 d9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d954,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 c0 10 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcef40]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 0e ec 01 00       	jmp    c0020800 <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 c0 10 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcef40]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 3f ec 01 00       	jmp    c0020847 <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 c0 10 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcef40]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 67 ec 01 00       	jmp    c002088e <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 5a 48 02 00       	call   c0026764 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 a0 92 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6d60]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 a0 92 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6d60]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba a0 91 02 c0       	mov    edx,0xc00291a0
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba c0 92 02 c0       	mov    edx,0xc00292c0
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba d4 be 02 c0       	mov    edx,0xc002bed4
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba cc 92 02 c0       	mov    edx,0xc00292cc
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba b0 92 02 c0       	mov    edx,0xc00292b0
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 a0 d9 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd2660]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 80 d9 02 c0    	mov    ax,ds:0xc002d980
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 80 d9 02 c0    	mov    ds:0xc002d980,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 57 36 02 00       	call   c0026764 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 d2 92 02 c0       	mov    eax,0xc00292d2
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad 20 92 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6de0]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 db 92 02 c0       	mov    eax,0xc00292db
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 a0 92 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6d60]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 22 20 02 00       	call   c0026764 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba b0 92 02 c0       	mov    edx,0xc00292b0
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba a0 91 02 c0       	mov    edx,0xc00291a0
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba b0 91 02 c0       	mov    edx,0xc00291b0
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 a0 d9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2660]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 a0 d9 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2660],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 e9 09 02 00       	call   c0026764 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 cf 09 02 00       	call   c0026764 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 f7 91 02 c0       	mov    eax,0xc00291f7
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 f0 91 02 c0       	mov    eax,0xc00291f0
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 a0 d9 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2660]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be e0 91 02 c0       	mov    esi,0xc00291e0
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 12 f1 01 00       	call   c0026764 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba c0 92 02 c0       	mov    edx,0xc00292c0
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba c0 91 02 c0       	mov    edx,0xc00291c0
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba d0 91 02 c0       	mov    edx,0xc00291d0
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba e2 92 02 c0       	mov    edx,0xc00292e2
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba ee 92 02 c0       	mov    edx,0xc00292ee
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba 02 93 02 c0       	mov    edx,0xc0029302
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 30 71 00 00       	call   c000f599 <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 2a 71 00 00       	call   c000f5a9 <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c 20 96 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029620
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 20 96 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029620
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 20 94 02 c0       	mov    eax,0xc0029420
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 60 93 02 c0       	mov    eax,0xc0029360
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 20 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ce0]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 6f 6e 00 00       	call   c000f5a9 <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 59 6e 00 00       	call   c000f5a9 <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 66 fa 01 00       	call   c0028237 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 29 fa 01 00       	call   c0028219 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 fd f9 01 00       	call   c0028237 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 b0 f0 01 00       	call   c002793c <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 32 fb 01 00       	call   c00283d0 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 77 f9 01 00       	call   c0028237 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 b9 f8 01 00       	call   c0028237 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 86 f8 01 00       	call   c0028219 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 73 f7 01 00       	call   c0028237 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 3b f7 01 00       	call   c0028219 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 38 6a 00 00       	call   c000f5c9 <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 d3 69 00 00       	call   c000f5a9 <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 20 97 02 c0       	mov    eax,0xc0029720
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 47 f5 01 00       	call   c0028237 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 0c f5 01 00       	call   c0028219 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 80 9b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6480]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 1c f2 01 00       	call   c0027fcb <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 9a eb 01 00       	call   c0027968 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 56 f4 01 00       	call   c002823b <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 44 f5 01 00       	call   c002835f <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 2e eb 01 00       	call   c0027968 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 d9 f3 01 00       	call   c0028235 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 ba f3 01 00       	call   c0028239 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 50 f5 01 00       	call   c00283f0 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 fa f0 01 00       	call   c0027fcb <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 78 ea 01 00       	call   c0027968 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 34 f3 01 00       	call   c002823b <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 22 f4 01 00       	call   c002835f <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 0c ea 01 00       	call   c0027968 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 b7 f2 01 00       	call   c0028235 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 97 f2 01 00       	call   c0028239 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 2c f4 01 00       	call   c00283f0 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 d2 f1 01 00       	call   c0028237 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 90 f1 01 00       	call   c0028219 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 78 f1 01 00       	call   c0028237 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 ea ee 01 00       	call   c0027fcb <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 ec e1 01 00       	call   c00272eb <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 4f e8 01 00       	call   c0027968 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 a1 ee 01 00       	call   c0027fcb <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 a7 e1 01 00       	call   c00272eb <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 76 ee 01 00       	call   c0027fcb <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 c6 f0 01 00       	call   c0028235 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 a3 e7 01 00       	call   c002793c <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 25 f2 01 00       	call   c00283d0 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 4c f0 01 00       	call   c0028219 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 47 e7 01 00       	call   c002793c <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 c5 ed 01 00       	call   c0027fcb <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 48 e7 01 00       	call   c0027968 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 9a ed 01 00       	call   c0027fcb <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 01 ea 01 00       	call   c0027c4c <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 80 e0 01 00       	call   c00272eb <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 e0 d9 01 00       	call   c0026c80 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 b7 f0 01 00       	call   c002835f <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 a0 e6 01 00       	call   c0027968 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 87 f0 01 00       	call   c002835f <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 f9 df 01 00       	call   c00272eb <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 32 ef 01 00       	call   c002823b <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 1a e9 01 00       	call   c0027c4c <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 a0 df 01 00       	call   c00272eb <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 8e f0 01 00       	call   c00283f0 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 60 ec 01 00       	call   c0027fcb <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 b7 e5 01 00       	call   c002793c <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 96 ee 01 00       	call   c0028237 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 2f df 01 00       	call   c00272eb <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 5b e5 01 00       	call   c002793c <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 fd ef 01 00       	call   c00283f0 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 ae eb 01 00       	call   c0027fcb <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 2b e5 01 00       	call   c0027968 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 7e eb 01 00       	call   c0027fcb <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 84 de 01 00       	call   c00272eb <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 54 eb 01 00       	call   c0027fcb <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 a6 ed 01 00       	call   c0028237 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 7d e4 01 00       	call   c002793c <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 ff ee 01 00       	call   c00283d0 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 26 ed 01 00       	call   c0028219 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 20 e4 01 00       	call   c002793c <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 9e ea 01 00       	call   c0027fcb <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 21 e4 01 00       	call   c0027968 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 73 ea 01 00       	call   c0027fcb <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 da e6 01 00       	call   c0027c4c <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 59 dd 01 00       	call   c00272eb <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 a9 d6 01 00       	call   c0026c80 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 80 ed 01 00       	call   c002835f <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 69 e3 01 00       	call   c0027968 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 50 ed 01 00       	call   c002835f <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 c2 dc 01 00       	call   c00272eb <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 fb eb 01 00       	call   c002823b <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 e2 e5 01 00       	call   c0027c4c <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 61 dc 01 00       	call   c00272eb <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 4f ed 01 00       	call   c00283f0 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 21 e9 01 00       	call   c0027fcb <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 78 e2 01 00       	call   c002793c <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 57 eb 01 00       	call   c0028237 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 f0 db 01 00       	call   c00272eb <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 1c e2 01 00       	call   c002793c <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 91 e8 01 00       	call   c0027fcb <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 97 db 01 00       	call   c00272eb <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 e0 9b 02 c0       	mov    eax,0xc0029be0
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 f4 9b 02 c0       	mov    eax,0xc0029bf4
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 6c 5d 00 00       	call   c000f5a9 <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 6e 5d 00 00       	call   c000f5c9 <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 0c e7 01 00       	call   c0027fcb <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 8a e0 01 00       	call   c0027968 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 1c d3 01 00       	call   c0026c80 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 f3 e9 01 00       	call   c002835f <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 dc df 01 00       	call   c0027968 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 bf e9 01 00       	call   c002835f <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 31 d9 01 00       	call   c00272eb <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 91 e9 01 00       	call   c002835f <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 80 df 01 00       	call   c0027968 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 e9 d8 01 00       	call   c00272eb <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 0a d2 01 00       	call   c0026c80 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 e1 e8 01 00       	call   c002835f <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 ca de 01 00       	call   c0027968 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 ad e8 01 00       	call   c002835f <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 1f d8 01 00       	call   c00272eb <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 7f e8 01 00       	call   c002835f <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 6e de 01 00       	call   c0027968 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 d7 d7 01 00       	call   c00272eb <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 b5 d7 01 00       	call   c00272eb <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 91 d0 01 00       	call   c0026c80 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 68 e7 01 00       	call   c002835f <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 51 dd 01 00       	call   c0027968 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 34 e7 01 00       	call   c002835f <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 a6 d6 01 00       	call   c00272eb <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 06 e7 01 00       	call   c002835f <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 ef dc 01 00       	call   c0027968 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 58 d6 01 00       	call   c00272eb <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 b8 e6 01 00       	call   c002835f <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 a1 dc 01 00       	call   c0027968 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 0a d6 01 00       	call   c00272eb <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 1f cf 01 00       	call   c0026c80 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 f6 e5 01 00       	call   c002835f <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 df db 01 00       	call   c0027968 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 c6 e5 01 00       	call   c002835f <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 38 d5 01 00       	call   c00272eb <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 98 e5 01 00       	call   c002835f <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 81 db 01 00       	call   c0027968 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 ea d4 01 00       	call   c00272eb <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 4a e5 01 00       	call   c002835f <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 33 db 01 00       	call   c0027968 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 9c d4 01 00       	call   c00272eb <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 70 d4 01 00       	call   c00272eb <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 cd da 01 00       	call   c0027968 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 89 e3 01 00       	call   c002823b <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 18 d4 01 00       	call   c00272eb <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 75 da 01 00       	call   c0027968 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 31 e3 01 00       	call   c002823b <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 ab cc 01 00       	call   c0026c80 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 82 e3 01 00       	call   c002835f <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 6b d9 01 00       	call   c0027968 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 4e e3 01 00       	call   c002835f <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 c0 d2 01 00       	call   c00272eb <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 20 e3 01 00       	call   c002835f <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 09 d9 01 00       	call   c0027968 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 72 d2 01 00       	call   c00272eb <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 d2 e2 01 00       	call   c002835f <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 bb d8 01 00       	call   c0027968 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 24 d2 01 00       	call   c00272eb <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 84 e2 01 00       	call   c002835f <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 6d d8 01 00       	call   c0027968 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 d6 d1 01 00       	call   c00272eb <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 36 e2 01 00       	call   c002835f <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 1f d8 01 00       	call   c0027968 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 88 d1 01 00       	call   c00272eb <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 8a ca 01 00       	call   c0026c80 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 61 e1 01 00       	call   c002835f <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 4a d7 01 00       	call   c0027968 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 31 e1 01 00       	call   c002835f <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 a3 d0 01 00       	call   c00272eb <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 03 e1 01 00       	call   c002835f <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 ec d6 01 00       	call   c0027968 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 55 d0 01 00       	call   c00272eb <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 b5 e0 01 00       	call   c002835f <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 9e d6 01 00       	call   c0027968 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 07 d0 01 00       	call   c00272eb <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 67 e0 01 00       	call   c002835f <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 50 d6 01 00       	call   c0027968 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 b9 cf 01 00       	call   c00272eb <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 19 e0 01 00       	call   c002835f <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 02 d6 01 00       	call   c0027968 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 6b cf 01 00       	call   c00272eb <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 3f cf 01 00       	call   c00272eb <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 9c d5 01 00       	call   c0027968 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 58 de 01 00       	call   c002823b <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 e7 ce 01 00       	call   c00272eb <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 44 d5 01 00       	call   c0027968 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 00 de 01 00       	call   c002823b <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 8e ce 01 00       	call   c00272eb <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 eb d4 01 00       	call   c0027968 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 a7 dd 01 00       	call   c002823b <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 35 ce 01 00       	call   c00272eb <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 92 d4 01 00       	call   c0027968 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 4e dd 01 00       	call   c002823b <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 ac c6 01 00       	call   c0026c80 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 83 dd 01 00       	call   c002835f <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 6c d3 01 00       	call   c0027968 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 4f dd 01 00       	call   c002835f <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 c1 cc 01 00       	call   c00272eb <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 21 dd 01 00       	call   c002835f <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 0a d3 01 00       	call   c0027968 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 73 cc 01 00       	call   c00272eb <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 d3 dc 01 00       	call   c002835f <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 bc d2 01 00       	call   c0027968 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 25 cc 01 00       	call   c00272eb <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 85 dc 01 00       	call   c002835f <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 6e d2 01 00       	call   c0027968 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 d7 cb 01 00       	call   c00272eb <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 37 dc 01 00       	call   c002835f <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 20 d2 01 00       	call   c0027968 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 89 cb 01 00       	call   c00272eb <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 e9 db 01 00       	call   c002835f <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 d2 d1 01 00       	call   c0027968 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 38 cb 01 00       	call   c00272eb <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 98 db 01 00       	call   c002835f <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 81 d1 01 00       	call   c0027968 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 ea ca 01 00       	call   c00272eb <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 e4 c3 01 00       	call   c0026c80 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 bb da 01 00       	call   c002835f <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 a4 d0 01 00       	call   c0027968 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 84 da 01 00       	call   c002835f <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 f6 c9 01 00       	call   c00272eb <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 56 da 01 00       	call   c002835f <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 3f d0 01 00       	call   c0027968 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 a8 c9 01 00       	call   c00272eb <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 08 da 01 00       	call   c002835f <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 f1 cf 01 00       	call   c0027968 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 5a c9 01 00       	call   c00272eb <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 ba d9 01 00       	call   c002835f <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 a3 cf 01 00       	call   c0027968 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 0c c9 01 00       	call   c00272eb <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 6c d9 01 00       	call   c002835f <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 55 cf 01 00       	call   c0027968 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 be c8 01 00       	call   c00272eb <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 1e d9 01 00       	call   c002835f <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 07 cf 01 00       	call   c0027968 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 6d c8 01 00       	call   c00272eb <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 cd d8 01 00       	call   c002835f <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 b6 ce 01 00       	call   c0027968 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 25 c8 01 00       	call   c00272eb <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 fe c7 01 00       	call   c00272eb <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 5c ce 01 00       	call   c0027968 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 18 d7 01 00       	call   c002823b <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 a7 c7 01 00       	call   c00272eb <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 05 ce 01 00       	call   c0027968 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 c1 d6 01 00       	call   c002823b <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 4f c7 01 00       	call   c00272eb <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 ad cd 01 00       	call   c0027968 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 69 d6 01 00       	call   c002823b <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 f7 c6 01 00       	call   c00272eb <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 55 cd 01 00       	call   c0027968 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 11 d6 01 00       	call   c002823b <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 9f c6 01 00       	call   c00272eb <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 fd cc 01 00       	call   c0027968 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 b9 d5 01 00       	call   c002823b <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 4d c6 01 00       	call   c00272eb <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 ab cc 01 00       	call   c0027968 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 67 d5 01 00       	call   c002823b <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 7b be 01 00       	call   c0026c80 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 52 d5 01 00       	call   c002835f <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 3b cb 01 00       	call   c0027968 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 22 d5 01 00       	call   c002835f <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 94 c4 01 00       	call   c00272eb <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 24 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd63dc]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 c8 d4 01 00       	call   c002835f <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 b1 ca 01 00       	call   c0027968 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 1c c4 01 00       	call   c00272eb <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 69 d4 01 00       	call   c002835f <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 52 ca 01 00       	call   c0027968 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 bd c3 01 00       	call   c00272eb <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 0a d4 01 00       	call   c002835f <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 f3 c9 01 00       	call   c0027968 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 5e c3 01 00       	call   c00272eb <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 ab d3 01 00       	call   c002835f <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 94 c9 01 00       	call   c0027968 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 ff c2 01 00       	call   c00272eb <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 4c d3 01 00       	call   c002835f <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 35 c9 01 00       	call   c0027968 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 a0 c2 01 00       	call   c00272eb <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 ed d2 01 00       	call   c002835f <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 d6 c8 01 00       	call   c0027968 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 41 c2 01 00       	call   c00272eb <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 8e d2 01 00       	call   c002835f <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 77 c8 01 00       	call   c0027968 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 e2 c1 01 00       	call   c00272eb <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 2f d2 01 00       	call   c002835f <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 18 c8 01 00       	call   c0027968 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 83 c1 01 00       	call   c00272eb <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 8d ba 01 00       	call   c0026c80 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 64 d1 01 00       	call   c002835f <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 4d c7 01 00       	call   c0027968 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 34 d1 01 00       	call   c002835f <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 a6 c0 01 00       	call   c00272eb <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 40 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd63c0]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 d9 d0 01 00       	call   c002835f <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 c2 c6 01 00       	call   c0027968 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 2d c0 01 00       	call   c00272eb <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 79 d0 01 00       	call   c002835f <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 62 c6 01 00       	call   c0027968 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 cd bf 01 00       	call   c00272eb <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 19 d0 01 00       	call   c002835f <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 02 c6 01 00       	call   c0027968 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 6d bf 01 00       	call   c00272eb <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 b9 cf 01 00       	call   c002835f <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 a2 c5 01 00       	call   c0027968 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 0d bf 01 00       	call   c00272eb <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 59 cf 01 00       	call   c002835f <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 42 c5 01 00       	call   c0027968 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 ad be 01 00       	call   c00272eb <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 f9 ce 01 00       	call   c002835f <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 e2 c4 01 00       	call   c0027968 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 4d be 01 00       	call   c00272eb <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 99 ce 01 00       	call   c002835f <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 82 c4 01 00       	call   c0027968 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 ed bd 01 00       	call   c00272eb <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 39 ce 01 00       	call   c002835f <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 22 c4 01 00       	call   c0027968 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 8d bd 01 00       	call   c00272eb <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 5c 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd63a4]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 32 bd 01 00       	call   c00272eb <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 8f c3 01 00       	call   c0027968 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 4b cc 01 00       	call   c002823b <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 d5 bc 01 00       	call   c00272eb <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 32 c3 01 00       	call   c0027968 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 ee cb 01 00       	call   c002823b <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 78 bc 01 00       	call   c00272eb <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 d5 c2 01 00       	call   c0027968 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 91 cb 01 00       	call   c002823b <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 1b bc 01 00       	call   c00272eb <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 78 c2 01 00       	call   c0027968 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 34 cb 01 00       	call   c002823b <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 be bb 01 00       	call   c00272eb <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 1b c2 01 00       	call   c0027968 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 d7 ca 01 00       	call   c002823b <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 61 bb 01 00       	call   c00272eb <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 be c1 01 00       	call   c0027968 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 7a ca 01 00       	call   c002823b <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 04 bb 01 00       	call   c00272eb <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 61 c1 01 00       	call   c0027968 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 1d ca 01 00       	call   c002823b <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 a7 ba 01 00       	call   c00272eb <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 04 c1 01 00       	call   c0027968 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 c0 c9 01 00       	call   c002823b <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 bc c0 01 00       	call   c0027968 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 34 cb 01 00       	jmp    c00283f0 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 9e c7 01 00       	call   c0028237 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 5c c7 01 00       	call   c0028219 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 f3 c4 01 00       	call   c0027fcb <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 f4 b7 01 00       	call   c00272eb <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 c3 c4 01 00       	call   c0027fcb <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 2a c1 01 00       	call   c0027c4c <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 c9 c6 01 00       	call   c0028219 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 cc c6 01 00       	call   c0028237 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 9f c6 01 00       	call   c0028237 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 98 c0 01 00       	call   c0027c4c <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 22 c8 01 00       	call   c00283f0 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 fd c7 01 00       	call   c00283f0 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 cf c3 01 00       	call   c0027fcb <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 26 bd 01 00       	call   c002793c <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 05 c6 01 00       	call   c0028237 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 9e b6 01 00       	call   c00272eb <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 c2 bc 01 00       	call   c002793c <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 64 c7 01 00       	call   c00283f0 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 9c bf 01 00       	call   c0027c4c <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 19 b6 01 00       	call   c00272eb <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 45 c2 01 00       	call   c0027fcb <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 45 b5 01 00       	call   c00272eb <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 25 b5 01 00       	call   c00272eb <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 f5 c1 01 00       	call   c0027fcb <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 45 c4 01 00       	call   c0028235 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 24 bb 01 00       	call   c002793c <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 a6 c5 01 00       	call   c00283d0 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 cd c3 01 00       	call   c0028219 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 cb ba 01 00       	call   c002793c <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 49 c1 01 00       	call   c0027fcb <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 cc ba 01 00       	call   c0027968 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 1e c1 01 00       	call   c0027fcb <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 85 bd 01 00       	call   c0027c4c <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 04 b4 01 00       	call   c00272eb <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 ce c0 01 00       	call   c0027fcb <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 1a c3 01 00       	call   c0028237 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 0f ba 01 00       	call   c0027968 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 e1 b9 01 00       	call   c0027968 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 1a c0 01 00       	call   c0027fcb <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 7e bc 01 00       	call   c0027c4c <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 46 bc 01 00       	call   c0027c4c <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 c5 b2 01 00       	call   c00272eb <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 b2 c3 01 00       	call   c00283f0 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 84 bf 01 00       	call   c0027fcb <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 db b8 01 00       	call   c002793c <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 ba c1 01 00       	call   c0028237 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 52 b2 01 00       	call   c00272eb <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 76 b8 01 00       	call   c002793c <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 18 c3 01 00       	call   c00283f0 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 d9 c0 01 00       	call   c0028237 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 97 c0 01 00       	call   c0028219 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 2e be 01 00       	call   c0027fcb <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 2f b1 01 00       	call   c00272eb <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 fe bd 01 00       	call   c0027fcb <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 65 ba 01 00       	call   c0027c4c <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 04 c0 01 00       	call   c0028219 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 07 c0 01 00       	call   c0028237 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 da bf 01 00       	call   c0028237 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 d3 b9 01 00       	call   c0027c4c <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 5d c1 01 00       	call   c00283f0 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 38 c1 01 00       	call   c00283f0 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 0a bd 01 00       	call   c0027fcb <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 61 b6 01 00       	call   c002793c <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 40 bf 01 00       	call   c0028237 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 d9 af 01 00       	call   c00272eb <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 fd b5 01 00       	call   c002793c <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 9f c0 01 00       	call   c00283f0 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 d7 b8 01 00       	call   c0027c4c <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 54 af 01 00       	call   c00272eb <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 7f bb 01 00       	call   c0027fcb <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 7f ae 01 00       	call   c00272eb <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 5f ae 01 00       	call   c00272eb <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 2f bb 01 00       	call   c0027fcb <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 7f bd 01 00       	call   c0028235 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 5d b4 01 00       	call   c002793c <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 df be 01 00       	call   c00283d0 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 06 bd 01 00       	call   c0028219 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 03 b4 01 00       	call   c002793c <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 81 ba 01 00       	call   c0027fcb <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 04 b4 01 00       	call   c0027968 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 56 ba 01 00       	call   c0027fcb <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 bd b6 01 00       	call   c0027c4c <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 3c ad 01 00       	call   c00272eb <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 06 ba 01 00       	call   c0027fcb <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 52 bc 01 00       	call   c0028237 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 47 b3 01 00       	call   c0027968 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 19 b3 01 00       	call   c0027968 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 50 b9 01 00       	call   c0027fcb <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 b4 b5 01 00       	call   c0027c4c <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 81 b5 01 00       	call   c0027c4c <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 00 ac 01 00       	call   c00272eb <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 ed bc 01 00       	call   c00283f0 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 bf b8 01 00       	call   c0027fcb <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 16 b2 01 00       	call   c002793c <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 f5 ba 01 00       	call   c0028237 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 8d ab 01 00       	call   c00272eb <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 b1 b1 01 00       	call   c002793c <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 53 bc 01 00       	call   c00283f0 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 14 ba 01 00       	call   c0028237 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 d2 b9 01 00       	call   c0028219 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 69 b7 01 00       	call   c0027fcb <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 6a aa 01 00       	call   c00272eb <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 39 b7 01 00       	call   c0027fcb <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 a0 b3 01 00       	call   c0027c4c <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 3f b9 01 00       	call   c0028219 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 42 b9 01 00       	call   c0028237 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 15 b9 01 00       	call   c0028237 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 0e b3 01 00       	call   c0027c4c <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 98 ba 01 00       	call   c00283f0 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 73 ba 01 00       	call   c00283f0 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 45 b6 01 00       	call   c0027fcb <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 9c af 01 00       	call   c002793c <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 7b b8 01 00       	call   c0028237 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 14 a9 01 00       	call   c00272eb <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 38 af 01 00       	call   c002793c <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 da b9 01 00       	call   c00283f0 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 12 b2 01 00       	call   c0027c4c <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 8f a8 01 00       	call   c00272eb <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 ba b4 01 00       	call   c0027fcb <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 ba a7 01 00       	call   c00272eb <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 9a a7 01 00       	call   c00272eb <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 6a b4 01 00       	call   c0027fcb <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 ba b6 01 00       	call   c0028235 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 98 ad 01 00       	call   c002793c <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 1a b8 01 00       	call   c00283d0 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 41 b6 01 00       	call   c0028219 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 3e ad 01 00       	call   c002793c <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 bc b3 01 00       	call   c0027fcb <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 3f ad 01 00       	call   c0027968 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 91 b3 01 00       	call   c0027fcb <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 f8 af 01 00       	call   c0027c4c <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 77 a6 01 00       	call   c00272eb <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 41 b3 01 00       	call   c0027fcb <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 8d b5 01 00       	call   c0028237 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 82 ac 01 00       	call   c0027968 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 54 ac 01 00       	call   c0027968 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 8b b2 01 00       	call   c0027fcb <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 ef ae 01 00       	call   c0027c4c <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 bc ae 01 00       	call   c0027c4c <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 3b a5 01 00       	call   c00272eb <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 28 b6 01 00       	call   c00283f0 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 fa b1 01 00       	call   c0027fcb <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 51 ab 01 00       	call   c002793c <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 30 b4 01 00       	call   c0028237 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 c8 a4 01 00       	call   c00272eb <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 ec aa 01 00       	call   c002793c <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 8e b5 01 00       	call   c00283f0 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 4f b3 01 00       	call   c0028237 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 0d b3 01 00       	call   c0028219 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 a4 b0 01 00       	call   c0027fcb <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 a5 a3 01 00       	call   c00272eb <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 74 b0 01 00       	call   c0027fcb <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 db ac 01 00       	call   c0027c4c <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 7a b2 01 00       	call   c0028219 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 7d b2 01 00       	call   c0028237 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 50 b2 01 00       	call   c0028237 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 49 ac 01 00       	call   c0027c4c <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 d3 b3 01 00       	call   c00283f0 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 ae b3 01 00       	call   c00283f0 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 80 af 01 00       	call   c0027fcb <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 d7 a8 01 00       	call   c002793c <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 b6 b1 01 00       	call   c0028237 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 4f a2 01 00       	call   c00272eb <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 73 a8 01 00       	call   c002793c <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 15 b3 01 00       	call   c00283f0 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 4d ab 01 00       	call   c0027c4c <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 ca a1 01 00       	call   c00272eb <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 f5 ad 01 00       	call   c0027fcb <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 f5 a0 01 00       	call   c00272eb <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 d5 a0 01 00       	call   c00272eb <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 a5 ad 01 00       	call   c0027fcb <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 f5 af 01 00       	call   c0028235 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 d3 a6 01 00       	call   c002793c <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 55 b1 01 00       	call   c00283d0 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 7c af 01 00       	call   c0028219 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 79 a6 01 00       	call   c002793c <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 f7 ac 01 00       	call   c0027fcb <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 7a a6 01 00       	call   c0027968 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 cc ac 01 00       	call   c0027fcb <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 33 a9 01 00       	call   c0027c4c <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 b2 9f 01 00       	call   c00272eb <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 7c ac 01 00       	call   c0027fcb <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 c8 ae 01 00       	call   c0028237 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 bd a5 01 00       	call   c0027968 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 8f a5 01 00       	call   c0027968 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 c6 ab 01 00       	call   c0027fcb <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 2a a8 01 00       	call   c0027c4c <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 f7 a7 01 00       	call   c0027c4c <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 76 9e 01 00       	call   c00272eb <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 63 af 01 00       	call   c00283f0 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 35 ab 01 00       	call   c0027fcb <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 8c a4 01 00       	call   c002793c <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 6b ad 01 00       	call   c0028237 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 03 9e 01 00       	call   c00272eb <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 27 a4 01 00       	call   c002793c <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 c9 ae 01 00       	call   c00283f0 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 87 ac 01 00       	call   c0028237 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 45 ac 01 00       	call   c0028219 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 dc a9 01 00       	call   c0027fcb <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 dd 9c 01 00       	call   c00272eb <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 ac a9 01 00       	call   c0027fcb <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 13 a6 01 00       	call   c0027c4c <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 b2 ab 01 00       	call   c0028219 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 b5 ab 01 00       	call   c0028237 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 88 ab 01 00       	call   c0028237 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 81 a5 01 00       	call   c0027c4c <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 0b ad 01 00       	call   c00283f0 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 e2 ac 01 00       	call   c00283f0 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 b4 a8 01 00       	call   c0027fcb <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 0b a2 01 00       	call   c002793c <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 ea aa 01 00       	call   c0028237 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 83 9b 01 00       	call   c00272eb <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 ab a1 01 00       	call   c002793c <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 4d ac 01 00       	call   c00283f0 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 86 a4 01 00       	call   c0027c4c <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 03 9b 01 00       	call   c00272eb <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 2f a7 01 00       	call   c0027fcb <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 2f 9a 01 00       	call   c00272eb <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 0f 9a 01 00       	call   c00272eb <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 df a6 01 00       	call   c0027fcb <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 13 a9 01 00       	call   c0028219 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 0a a0 01 00       	call   c002793c <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 8c aa 01 00       	call   c00283d0 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 b3 a8 01 00       	call   c0028219 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 ad 9f 01 00       	call   c002793c <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 2b a6 01 00       	call   c0027fcb <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 ae 9f 01 00       	call   c0027968 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 00 a6 01 00       	call   c0027fcb <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 67 a2 01 00       	call   c0027c4c <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 e6 98 01 00       	call   c00272eb <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 b0 a5 01 00       	call   c0027fcb <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 fc a7 01 00       	call   c0028237 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 f1 9e 01 00       	call   c0027968 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 c3 9e 01 00       	call   c0027968 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 07 a5 01 00       	call   c0027fcb <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 6e a1 01 00       	call   c0027c4c <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 57 9e 01 00       	call   c0027968 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 13 a7 01 00       	call   c002823b <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 06 a1 01 00       	call   c0027c4c <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 85 97 01 00       	call   c00272eb <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 72 a8 01 00       	call   c00283f0 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 44 a4 01 00       	call   c0027fcb <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 9b 9d 01 00       	call   c002793c <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 7a a6 01 00       	call   c0028237 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 12 97 01 00       	call   c00272eb <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 3a 9d 01 00       	call   c002793c <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 dc a7 01 00       	call   c00283f0 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 84 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd637c]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 78 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6388]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 32 19 00 00       	call   c000f5a9 <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 8f a4 01 00       	call   c0028237 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 4d a4 01 00       	call   c0028219 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 39 a4 01 00       	call   c0028237 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 ab a1 01 00       	call   c0027fcb <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 29 9b 01 00       	call   c0027968 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 7b a1 01 00       	call   c0027fcb <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 81 94 01 00       	call   c00272eb <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 50 a1 01 00       	call   c0027fcb <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 a0 a3 01 00       	call   c0028235 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 81 9a 01 00       	call   c002793c <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 03 a5 01 00       	call   c00283d0 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 2a a3 01 00       	call   c0028219 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 29 9a 01 00       	call   c002793c <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 a7 a0 01 00       	call   c0027fcb <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 2a 9a 01 00       	call   c0027968 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 7c a0 01 00       	call   c0027fcb <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 e3 9c 01 00       	call   c0027c4c <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 62 93 01 00       	call   c00272eb <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 8a 9c 01 00       	call   c0027c4c <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 10 93 01 00       	call   c00272eb <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 fe a3 01 00       	call   c00283f0 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 d0 9f 01 00       	call   c0027fcb <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 27 99 01 00       	call   c002793c <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 06 a2 01 00       	call   c0028237 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 9f 92 01 00       	call   c00272eb <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 cb 98 01 00       	call   c002793c <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 6d a3 01 00       	call   c00283f0 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 1a 9f 01 00       	call   c0027fcb <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 97 98 01 00       	call   c0027968 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 e8 9e 01 00       	call   c0027fcb <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 ee 91 01 00       	call   c00272eb <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 be 9e 01 00       	call   c0027fcb <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 12 a1 01 00       	call   c0028239 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 eb 97 01 00       	call   c002793c <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 6d a2 01 00       	call   c00283d0 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 94 a0 01 00       	call   c0028219 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 92 97 01 00       	call   c002793c <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 10 9e 01 00       	call   c0027fcb <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 93 97 01 00       	call   c0027968 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 e5 9d 01 00       	call   c0027fcb <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 4c 9a 01 00       	call   c0027c4c <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 cb 90 01 00       	call   c00272eb <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 e7 99 01 00       	call   c0027c4c <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 66 90 01 00       	call   c00272eb <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 54 a1 01 00       	call   c00283f0 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 26 9d 01 00       	call   c0027fcb <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 7d 96 01 00       	call   c002793c <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 5c 9f 01 00       	call   c0028237 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 f5 8f 01 00       	call   c00272eb <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 21 96 01 00       	call   c002793c <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 92 9c 01 00       	call   c0027fcb <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 98 8f 01 00       	call   c00272eb <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 9e 9d 02 c0       	mov    eax,0xc0029d9e
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 af 9d 02 c0       	mov    eax,0xc0029daf
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 74 11 00 00       	call   c000f5a9 <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 76 11 00 00       	call   c000f5c9 <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 f0 10 00 00       	jmp    c000f599 <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 0b 11 00 00       	jmp    c000f5b9 <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c000e4e3:	ff 05 24 0f 03 c0    	inc    DWORD PTR ds:0xc0030f24
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 24 0f 03 c0       	mov    eax,ds:0xc0030f24
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 24 0f 03 c0       	mov    ds:0xc0030f24,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d 20 0f 03 c0 00 	cmp    DWORD PTR ds:0xc0030f20,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 20 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f20,0x0
c000e50d:	e8 0d f5 00 00       	call   c001da1f <schedule()>
c000e512:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c000e517:	48                   	dec    eax
c000e518:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 70 db 02 c0       	mov    eax,ds:0xc002db70
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 e6 9d 02 c0       	push   0xc0029de6
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 08 da 02 c0       	mov    eax,0xc002da08
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 ef 9d 02 c0       	push   0xc0029def
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 64 67 02 c0       	mov    eax,0xc0026764
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 f9 9d 02 c0       	push   0xc0029df9
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 98 64 02 c0       	mov    eax,0xc0026498
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 02 9e 02 c0       	push   0xc0029e02
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 64 68 02 c0       	mov    eax,0xc0026864
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 0c 9e 02 c0       	push   0xc0029e0c
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 e4 65 02 c0       	mov    eax,0xc00265e4
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 15 9e 02 c0       	push   0xc0029e15
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 0c da 02 c0       	mov    eax,0xc002da0c
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 22 9e 02 c0       	push   0xc0029e22
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 0d da 02 c0       	mov    eax,0xc002da0d
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 79 56 00 00       	call   c0013ce6 <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 2f 9e 02 c0       	push   0xc0029e2f
c000e69e:	e8 50 0f 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e6a3:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c000e6aa:	e8 ea 0e 00 00       	call   c000f599 <malloc>
c000e6af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6b6:	89 c3                	mov    ebx,eax
c000e6b8:	ff 35 50 0f 03 c0    	push   DWORD PTR ds:0xc0030f50
c000e6be:	68 48 9e 02 c0       	push   0xc0029e48
c000e6c3:	6a 01                	push   0x1
c000e6c5:	50                   	push   eax
c000e6c6:	e8 37 ef 00 00       	call   c001d602 <Process::Process(bool, char const*, Process*, char**)>
c000e6cb:	83 c4 20             	add    esp,0x20
c000e6ce:	68 ff 00 00 00       	push   0xff
c000e6d3:	6a 00                	push   0x0
c000e6d5:	68 2f ef 00 c0       	push   0xc000ef2f
c000e6da:	53                   	push   ebx
c000e6db:	e8 1a f1 00 00       	call   c001d7fa <Process::createThread(void (*)(void*), void*, int)>
c000e6e0:	6a 7a                	push   0x7a
c000e6e2:	6a 00                	push   0x0
c000e6e4:	68 de e1 01 c0       	push   0xc001e1de
c000e6e9:	ff 35 50 0f 03 c0    	push   DWORD PTR ds:0xc0030f50
c000e6ef:	e8 06 f1 00 00       	call   c001d7fa <Process::createThread(void (*)(void*), void*, int)>
c000e6f4:	83 c4 14             	add    esp,0x14
c000e6f7:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c000e6fc:	68 2c 9f 02 c0       	push   0xc0029f2c
c000e701:	c6 05 0d da 02 c0 01 	mov    BYTE PTR ds:0xc002da0d,0x1
c000e708:	e8 e6 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e70d:	e8 77 fe 00 00       	call   c001e589 <Vm::initialise8086()>
c000e712:	e8 97 43 00 00       	call   c0012aae <Fs::initVFS()>
c000e717:	c7 04 24 55 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e55
c000e71e:	e8 d0 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e723:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c000e728:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e72e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e730:	6a 00                	push   0x0
c000e732:	6a 00                	push   0x0
c000e734:	6a 00                	push   0x0
c000e736:	50                   	push   eax
c000e737:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e73a:	83 c4 14             	add    esp,0x14
c000e73d:	68 2c 9f 02 c0       	push   0xc0029f2c
c000e742:	e8 ac 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e747:	e8 3d d7 00 00       	call   c001be89 <Sys::loadSyscalls()>
c000e74c:	e8 35 b6 00 00       	call   c0019d86 <Krnl::loadSystemEnv()>
c000e751:	83 c4 0c             	add    esp,0xc
c000e754:	6a 3a                	push   0x3a
c000e756:	68 6f 9e 02 c0       	push   0xc0029e6f
c000e75b:	68 78 9e 02 c0       	push   0xc0029e78
c000e760:	e8 e6 c4 00 00       	call   c001ac4b <Reg::readIntWithDefault(char*, char*, int)>
c000e765:	89 04 24             	mov    DWORD PTR [esp],eax
c000e768:	e8 31 4e 00 00       	call   c001359e <User::loadClockSettings(int)>
c000e76d:	c7 04 24 50 9f 02 c0 	mov    DWORD PTR [esp],0xc0029f50
c000e774:	e8 7a 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e779:	58                   	pop    eax
c000e77a:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c000e77f:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e785:	e8 1c 55 00 00       	call   c0013ca6 <Device::loadDriversForAll()>
c000e78a:	c7 04 24 80 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e80
c000e791:	e8 5d 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e796:	e8 53 b1 00 00       	call   c00198ee <Krnl::startCPUs()>
c000e79b:	c7 04 24 9a 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e9a
c000e7a2:	e8 4c 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e7a7:	5a                   	pop    edx
c000e7a8:	8b 1d 08 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da08
c000e7ae:	59                   	pop    ecx
c000e7af:	6a 01                	push   0x1
c000e7b1:	68 ab 9e 02 c0       	push   0xc0029eab
c000e7b6:	e8 9e e8 00 00       	call   c001d059 <Thr::loadDLL(char const*, bool)>
c000e7bb:	5a                   	pop    edx
c000e7bc:	59                   	pop    ecx
c000e7bd:	53                   	push   ebx
c000e7be:	50                   	push   eax
c000e7bf:	e8 c6 ea 00 00       	call   c001d28a <Thr::executeDLL(unsigned long, void*)>
c000e7c4:	83 c4 10             	add    esp,0x10
c000e7c7:	83 ec 0c             	sub    esp,0xc
c000e7ca:	6a 02                	push   0x2
c000e7cc:	e8 24 f4 00 00       	call   c001dbf5 <blockTask(TaskState)>
c000e7d1:	83 c4 10             	add    esp,0x10
c000e7d4:	eb f1                	jmp    c000e7c7 <Krnl::firstTask()+0x133>

c000e7d6 <Computer::Computer()>:
c000e7d6:	83 ec 0c             	sub    esp,0xc
c000e7d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7dd:	83 ec 08             	sub    esp,0x8
c000e7e0:	68 c7 9e 02 c0       	push   0xc0029ec7
c000e7e5:	50                   	push   eax
c000e7e6:	e8 75 55 00 00       	call   c0013d60 <Device::Device(char const*)>
c000e7eb:	83 c4 10             	add    esp,0x10
c000e7ee:	ba 9c 9f 02 c0       	mov    edx,0xc0029f9c
c000e7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f7:	89 10                	mov    DWORD PTR [eax],edx
c000e7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fd:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e819:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e81f:	83 ca 04             	or     edx,0x4
c000e822:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e832:	0f b6 d0             	movzx  edx,al
c000e835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e839:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e844:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84a:	0f b6 d0             	movzx  edx,al
c000e84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e851:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e860:	8d 50 01             	lea    edx,[eax+0x1]
c000e863:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e867:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e86d:	0f b6 d0             	movzx  edx,al
c000e870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e874:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e878:	83 e1 3f             	and    ecx,0x3f
c000e87b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e883:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e889:	0f b6 d0             	movzx  edx,al
c000e88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e890:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a1:	0f b6 d0             	movzx  edx,al
c000e8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a8:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8b7:	8d 50 01             	lea    edx,[eax+0x1]
c000e8ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8be:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c4:	0f b6 d0             	movzx  edx,al
c000e8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8cb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8cf:	83 e1 3f             	and    ecx,0x3f
c000e8d2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8e0:	0f b6 d0             	movzx  edx,al
c000e8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e7:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8f8:	0f b6 d0             	movzx  edx,al
c000e8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ff:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e908:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e90e:	8d 50 01             	lea    edx,[eax+0x1]
c000e911:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e915:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e91b:	0f b6 d0             	movzx  edx,al
c000e91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e922:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e926:	83 e1 3f             	and    ecx,0x3f
c000e929:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e92d:	90                   	nop
c000e92e:	83 c4 0c             	add    esp,0xc
c000e931:	c3                   	ret    

c000e932 <Computer::setBootMessage(char const*)>:
c000e932:	c3                   	ret    
c000e933:	90                   	nop

c000e934 <Computer::detectFeatures()>:
c000e934:	55                   	push   ebp
c000e935:	57                   	push   edi
c000e936:	56                   	push   esi
c000e937:	53                   	push   ebx
c000e938:	83 ec 1c             	sub    esp,0x1c
c000e93b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e93f:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e949:	e8 96 19 ff ff       	call   c00002e4 <detectCPUID>
c000e94e:	85 c0                	test   eax,eax
c000e950:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e956:	0f 95 c2             	setne  dl
c000e959:	83 e0 fd             	and    eax,0xfffffffd
c000e95c:	d1 e2                	shl    edx,1
c000e95e:	09 d0                	or     eax,edx
c000e960:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e966:	a8 02                	test   al,0x2
c000e968:	75 46                	jne    c000e9b0 <Computer::detectFeatures()+0x7c>
c000e96a:	f6 05 21 da 02 c0 04 	test   BYTE PTR ds:0xc002da21,0x4
c000e971:	74 07                	je     c000e97a <Computer::detectFeatures()+0x46>
c000e973:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e97a:	e8 a7 7a 01 00       	call   c0026426 <x87Detect>
c000e97f:	83 e0 01             	and    eax,0x1
c000e982:	c1 e0 04             	shl    eax,0x4
c000e985:	88 c2                	mov    dl,al
c000e987:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e98d:	83 e0 ef             	and    eax,0xffffffef
c000e990:	09 d0                	or     eax,edx
c000e992:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e998:	a8 10                	test   al,0x10
c000e99a:	0f 85 2a 01 00 00    	jne    c000eaca <Computer::detectFeatures()+0x196>
c000e9a0:	84 c0                	test   al,al
c000e9a2:	0f 88 45 01 00 00    	js     c000eaed <Computer::detectFeatures()+0x1b9>
c000e9a8:	83 c4 1c             	add    esp,0x1c
c000e9ab:	5b                   	pop    ebx
c000e9ac:	5e                   	pop    esi
c000e9ad:	5f                   	pop    edi
c000e9ae:	5d                   	pop    ebp
c000e9af:	c3                   	ret    
c000e9b0:	83 ec 0c             	sub    esp,0xc
c000e9b3:	6a 20                	push   0x20
c000e9b5:	e8 c6 9e 00 00       	call   c0018880 <CPU::cpuidCheckEDX(unsigned int)>
c000e9ba:	83 e0 01             	and    eax,0x1
c000e9bd:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9c4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9ca:	83 e0 f7             	and    eax,0xfffffff7
c000e9cd:	09 d0                	or     eax,edx
c000e9cf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d5:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9dc:	e8 9f 9e 00 00       	call   c0018880 <CPU::cpuidCheckEDX(unsigned int)>
c000e9e1:	83 e0 01             	and    eax,0x1
c000e9e4:	88 c2                	mov    dl,al
c000e9e6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9ec:	83 e0 fe             	and    eax,0xfffffffe
c000e9ef:	09 d0                	or     eax,edx
c000e9f1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9f7:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9fe:	e8 7d 9e 00 00       	call   c0018880 <CPU::cpuidCheckEDX(unsigned int)>
c000ea03:	c1 e0 07             	shl    eax,0x7
c000ea06:	88 c2                	mov    dl,al
c000ea08:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea0e:	83 e0 7f             	and    eax,0x7f
c000ea11:	09 d0                	or     eax,edx
c000ea13:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea19:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ea20:	e8 5b 9e 00 00       	call   c0018880 <CPU::cpuidCheckEDX(unsigned int)>
c000ea25:	83 c4 10             	add    esp,0x10
c000ea28:	83 e0 01             	and    eax,0x1
c000ea2b:	c1 e0 05             	shl    eax,0x5
c000ea2e:	88 c2                	mov    dl,al
c000ea30:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea36:	83 e0 df             	and    eax,0xffffffdf
c000ea39:	09 d0                	or     eax,edx
c000ea3b:	f7 05 20 da 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002da20,0x401
c000ea45:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea4b:	0f 84 c2 00 00 00    	je     c000eb13 <Computer::detectFeatures()+0x1df>
c000ea51:	83 e0 fe             	and    eax,0xfffffffe
c000ea54:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea5a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea60:	88 c2                	mov    dl,al
c000ea62:	83 e2 09             	and    edx,0x9
c000ea65:	fe ca                	dec    dl
c000ea67:	75 09                	jne    c000ea72 <Computer::detectFeatures()+0x13e>
c000ea69:	83 e0 fe             	and    eax,0xfffffffe
c000ea6c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea72:	83 ec 0c             	sub    esp,0xc
c000ea75:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea79:	50                   	push   eax
c000ea7a:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea7e:	55                   	push   ebp
c000ea7f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea83:	57                   	push   edi
c000ea84:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea88:	56                   	push   esi
c000ea89:	68 00 00 00 80       	push   0x80000000
c000ea8e:	e8 69 9d 00 00       	call   c00187fc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea93:	83 c4 20             	add    esp,0x20
c000ea96:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eaa1:	0f 86 c3 fe ff ff    	jbe    c000e96a <Computer::detectFeatures()+0x36>
c000eaa7:	83 ec 0c             	sub    esp,0xc
c000eaaa:	50                   	push   eax
c000eaab:	55                   	push   ebp
c000eaac:	57                   	push   edi
c000eaad:	56                   	push   esi
c000eaae:	68 01 00 00 80       	push   0x80000001
c000eab3:	e8 44 9d 00 00       	call   c00187fc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eab8:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000eac2:	83 c4 20             	add    esp,0x20
c000eac5:	e9 a0 fe ff ff       	jmp    c000e96a <Computer::detectFeatures()+0x36>
c000eaca:	e8 11 79 01 00       	call   c00263e0 <absolutelyNoChanceInHell>
c000eacf:	88 c2                	mov    dl,al
c000ead1:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ead7:	c1 e2 07             	shl    edx,0x7
c000eada:	83 e0 7f             	and    eax,0x7f
c000eadd:	09 d0                	or     eax,edx
c000eadf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae5:	84 c0                	test   al,al
c000eae7:	0f 89 bb fe ff ff    	jns    c000e9a8 <Computer::detectFeatures()+0x74>
c000eaed:	e8 ce 78 01 00       	call   c00263c0 <avxDetect>
c000eaf2:	83 e0 01             	and    eax,0x1
c000eaf5:	c1 e0 05             	shl    eax,0x5
c000eaf8:	88 c2                	mov    dl,al
c000eafa:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eb00:	83 e0 df             	and    eax,0xffffffdf
c000eb03:	09 d0                	or     eax,edx
c000eb05:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eb0b:	83 c4 1c             	add    esp,0x1c
c000eb0e:	5b                   	pop    ebx
c000eb0f:	5e                   	pop    esi
c000eb10:	5f                   	pop    edi
c000eb11:	5d                   	pop    ebp
c000eb12:	c3                   	ret    
c000eb13:	83 ec 0c             	sub    esp,0xc
c000eb16:	68 00 02 00 00       	push   0x200
c000eb1b:	e8 60 9d 00 00       	call   c0018880 <CPU::cpuidCheckEDX(unsigned int)>
c000eb20:	83 c4 10             	add    esp,0x10
c000eb23:	83 e0 01             	and    eax,0x1
c000eb26:	88 c2                	mov    dl,al
c000eb28:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb2e:	83 e0 fe             	and    eax,0xfffffffe
c000eb31:	09 d0                	or     eax,edx
c000eb33:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb39:	e9 1c ff ff ff       	jmp    c000ea5a <Computer::detectFeatures()+0x126>

c000eb3e <Computer::displayFeatures()>:
c000eb3e:	c3                   	ret    
c000eb3f:	90                   	nop

c000eb40 <Computer::rdmsr(unsigned int)>:
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb47:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb4e:	74 0a                	je     c000eb5a <Computer::rdmsr(unsigned int)+0x1a>
c000eb50:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb54:	0f 32                	rdmsr  
c000eb56:	83 c4 0c             	add    esp,0xc
c000eb59:	c3                   	ret    
c000eb5a:	83 ec 0c             	sub    esp,0xc
c000eb5d:	68 d0 9e 02 c0       	push   0xc0029ed0
c000eb62:	e8 28 b3 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	eb e4                	jmp    c000eb50 <Computer::rdmsr(unsigned int)+0x10>

c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eb6c:	57                   	push   edi
c000eb6d:	56                   	push   esi
c000eb6e:	52                   	push   edx
c000eb6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb73:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eb77:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eb7b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb82:	74 0e                	je     c000eb92 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eb84:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb88:	89 f0                	mov    eax,esi
c000eb8a:	89 fa                	mov    edx,edi
c000eb8c:	0f 30                	wrmsr  
c000eb8e:	58                   	pop    eax
c000eb8f:	5e                   	pop    esi
c000eb90:	5f                   	pop    edi
c000eb91:	c3                   	ret    
c000eb92:	83 ec 0c             	sub    esp,0xc
c000eb95:	68 d6 9e 02 c0       	push   0xc0029ed6
c000eb9a:	e8 f0 b2 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c000eb9f:	83 c4 10             	add    esp,0x10
c000eba2:	eb e0                	jmp    c000eb84 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eba4 <Computer::nmiEnabled()>:
c000eba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eba8:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ebae:	c3                   	ret    
c000ebaf:	90                   	nop

c000ebb0 <Computer::readCMOS(unsigned char)>:
c000ebb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebb4:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ebbb:	19 c0                	sbb    eax,eax
c000ebbd:	83 e0 80             	and    eax,0xffffff80
c000ebc0:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ebc4:	e6 70                	out    0x70,al
c000ebc6:	e4 71                	in     al,0x71
c000ebc8:	c3                   	ret    
c000ebc9:	90                   	nop

c000ebca <Computer::enableNMI(bool)>:
c000ebca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ebce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebd2:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ebd8:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ebe0:	eb ce                	jmp    c000ebb0 <Computer::readCMOS(unsigned char)>

c000ebe2 <Computer::open(int, int, void*)>:
c000ebe2:	56                   	push   esi
c000ebe3:	53                   	push   ebx
c000ebe4:	83 ec 10             	sub    esp,0x10
c000ebe7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ebeb:	68 70 9f 02 c0       	push   0xc0029f70
c000ebf0:	e8 fe 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ebf5:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000ebfc:	f6 05 20 da 02 c0 04 	test   BYTE PTR ds:0xc002da20,0x4
c000ec03:	0f 94 05 40 c9 02 c0 	sete   BYTE PTR ds:0xc002c940
c000ec0a:	e8 8a 09 00 00       	call   c000f599 <malloc>
c000ec0f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec12:	89 c6                	mov    esi,eax
c000ec14:	e8 db 8e 00 00       	call   c0017af4 <ACPI::ACPI()>
c000ec19:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ec1f:	58                   	pop    eax
c000ec20:	5a                   	pop    edx
c000ec21:	56                   	push   esi
c000ec22:	53                   	push   ebx
c000ec23:	e8 34 4f 00 00       	call   c0013b5c <Device::addChild(Device*)>
c000ec28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ec2b:	e8 04 fd ff ff       	call   c000e934 <Computer::detectFeatures()>
c000ec30:	59                   	pop    ecx
c000ec31:	5e                   	pop    esi
c000ec32:	6a 01                	push   0x1
c000ec34:	53                   	push   ebx
c000ec35:	e8 90 ff ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ec3a:	c7 04 24 80 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e80
c000ec41:	e8 ad 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ec46:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ec4d:	e8 47 09 00 00       	call   c000f599 <malloc>
c000ec52:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec55:	89 c6                	mov    esi,eax
c000ec57:	e8 dc 9c 00 00       	call   c0018938 <CPU::CPU()>
c000ec5c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ec62:	58                   	pop    eax
c000ec63:	5a                   	pop    edx
c000ec64:	56                   	push   esi
c000ec65:	53                   	push   ebx
c000ec66:	e8 f1 4e 00 00       	call   c0013b5c <Device::addChild(Device*)>
c000ec6b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ec71:	8b 10                	mov    edx,DWORD PTR [eax]
c000ec73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec77:	6a 00                	push   0x0
c000ec79:	6a 00                	push   0x0
c000ec7b:	50                   	push   eax
c000ec7c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ec7f:	83 c4 20             	add    esp,0x20
c000ec82:	e8 6d 54 00 00       	call   c00140f4 <setupFPU()>
c000ec87:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ec8d:	85 c0                	test   eax,eax
c000ec8f:	74 1f                	je     c000ecb0 <Computer::open(int, int, void*)+0xce>
c000ec91:	83 ec 08             	sub    esp,0x8
c000ec94:	50                   	push   eax
c000ec95:	53                   	push   ebx
c000ec96:	e8 c1 4e 00 00       	call   c0013b5c <Device::addChild(Device*)>
c000ec9b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000eca1:	8b 10                	mov    edx,DWORD PTR [eax]
c000eca3:	6a 00                	push   0x0
c000eca5:	6a 00                	push   0x0
c000eca7:	6a 00                	push   0x0
c000eca9:	50                   	push   eax
c000ecaa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ecad:	83 c4 20             	add    esp,0x20
c000ecb0:	83 ec 0c             	sub    esp,0xc
c000ecb3:	68 dc 9e 02 c0       	push   0xc0029edc
c000ecb8:	e8 36 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ecbd:	c7 04 24 94 e6 00 c0 	mov    DWORD PTR [esp],0xc000e694
c000ecc4:	e8 53 ec 00 00       	call   c001d91c <setupMultitasking(void (*)())>
c000ecc9:	83 c4 14             	add    esp,0x14
c000eccc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecd1:	5b                   	pop    ebx
c000ecd2:	5e                   	pop    esi
c000ecd3:	c3                   	ret    

c000ecd4 <Computer::disableNMI()>:
c000ecd4:	6a 00                	push   0x0
c000ecd6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ecda:	e8 eb fe ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ecdf:	58                   	pop    eax
c000ece0:	5a                   	pop    edx
c000ece1:	c3                   	ret    

c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ece2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ece6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eced:	19 c0                	sbb    eax,eax
c000ecef:	83 e0 80             	and    eax,0xffffff80
c000ecf2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ecf6:	e6 70                	out    0x70,al
c000ecf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecfc:	e6 71                	out    0x71,al
c000ecfe:	c3                   	ret    
c000ecff:	90                   	nop

c000ed00 <Computer::handleNMI()>:
c000ed00:	56                   	push   esi
c000ed01:	53                   	push   ebx
c000ed02:	83 ec 10             	sub    esp,0x10
c000ed05:	e4 92                	in     al,0x92
c000ed07:	89 c6                	mov    esi,eax
c000ed09:	e4 61                	in     al,0x61
c000ed0b:	68 f7 9e 02 c0       	push   0xc0029ef7
c000ed10:	88 c3                	mov    bl,al
c000ed12:	e8 0c 3a 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c000ed17:	83 c4 10             	add    esp,0x10
c000ed1a:	83 e6 10             	and    esi,0x10
c000ed1d:	75 0d                	jne    c000ed2c <Computer::handleNMI()+0x2c>
c000ed1f:	f6 c3 40             	test   bl,0x40
c000ed22:	75 1d                	jne    c000ed41 <Computer::handleNMI()+0x41>
c000ed24:	84 db                	test   bl,bl
c000ed26:	78 2d                	js     c000ed55 <Computer::handleNMI()+0x55>
c000ed28:	58                   	pop    eax
c000ed29:	5b                   	pop    ebx
c000ed2a:	5e                   	pop    esi
c000ed2b:	c3                   	ret    
c000ed2c:	83 ec 0c             	sub    esp,0xc
c000ed2f:	68 08 9f 02 c0       	push   0xc0029f08
c000ed34:	e8 56 b1 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c000ed39:	83 c4 10             	add    esp,0x10
c000ed3c:	f6 c3 40             	test   bl,0x40
c000ed3f:	74 e3                	je     c000ed24 <Computer::handleNMI()+0x24>
c000ed41:	83 ec 0c             	sub    esp,0xc
c000ed44:	68 15 9f 02 c0       	push   0xc0029f15
c000ed49:	e8 41 b1 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c000ed4e:	83 c4 10             	add    esp,0x10
c000ed51:	84 db                	test   bl,bl
c000ed53:	79 d3                	jns    c000ed28 <Computer::handleNMI()+0x28>
c000ed55:	c7 44 24 10 1f 9f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029f1f
c000ed5d:	5a                   	pop    edx
c000ed5e:	5b                   	pop    ebx
c000ed5f:	5e                   	pop    esi
c000ed60:	e9 2a b1 00 00       	jmp    c0019e8f <Krnl::panic(char const*)>
c000ed65:	90                   	nop

c000ed66 <Computer::setDiskActivityLight(int, bool)>:
c000ed66:	56                   	push   esi
c000ed67:	53                   	push   ebx
c000ed68:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ed6c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ed71:	77 1b                	ja     c000ed8e <Computer::setDiskActivityLight(int, bool)+0x28>
c000ed73:	e4 92                	in     al,0x92
c000ed75:	bb 40 00 00 00       	mov    ebx,0x40
c000ed7a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ed7e:	89 da                	mov    edx,ebx
c000ed80:	d3 e2                	shl    edx,cl
c000ed82:	89 f1                	mov    ecx,esi
c000ed84:	f7 d2                	not    edx
c000ed86:	d3 e3                	shl    ebx,cl
c000ed88:	21 d0                	and    eax,edx
c000ed8a:	09 d8                	or     eax,ebx
c000ed8c:	e6 92                	out    0x92,al
c000ed8e:	5b                   	pop    ebx
c000ed8f:	5e                   	pop    esi
c000ed90:	c3                   	ret    
c000ed91:	90                   	nop

c000ed92 <GDTEntry::setBase(unsigned int)>:
c000ed92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ed9a:	89 c1                	mov    ecx,eax
c000ed9c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000eda0:	c1 e9 10             	shr    ecx,0x10
c000eda3:	c1 e8 18             	shr    eax,0x18
c000eda6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000eda9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000edac:	c3                   	ret    
c000edad:	90                   	nop

c000edae <GDTEntry::setLimit(unsigned int)>:
c000edae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000edb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000edb6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000edb9:	66 89 01             	mov    WORD PTR [ecx],ax
c000edbc:	83 e2 f0             	and    edx,0xfffffff0
c000edbf:	c1 e8 10             	shr    eax,0x10
c000edc2:	83 e0 0f             	and    eax,0xf
c000edc5:	09 d0                	or     eax,edx
c000edc7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000edca:	c3                   	ret    
c000edcb:	90                   	nop

c000edcc <GDT::GDT()>:
c000edcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edd0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000edd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edda:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ede0:	90                   	nop
c000ede1:	c3                   	ret    

c000ede2 <GDT::addEntry(GDTEntry)>:
c000ede2:	53                   	push   ebx
c000ede3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ede7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edeb:	8b 02                	mov    eax,DWORD PTR [edx]
c000eded:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000edf1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000edf5:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000edf9:	8d 48 01             	lea    ecx,[eax+0x1]
c000edfc:	c1 e0 03             	shl    eax,0x3
c000edff:	89 0a                	mov    DWORD PTR [edx],ecx
c000ee01:	5b                   	pop    ebx
c000ee02:	c3                   	ret    
c000ee03:	90                   	nop

c000ee04 <GDT::getNumberOfEntries()>:
c000ee04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee08:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee0a:	c3                   	ret    
c000ee0b:	90                   	nop

c000ee0c <GDT::flush()>:
c000ee0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee10:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee12:	83 c0 04             	add    eax,0x4
c000ee15:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ee1c:	a3 12 da 02 c0       	mov    ds:0xc002da12,eax
c000ee21:	66 89 15 10 da 02 c0 	mov    WORD PTR ds:0xc002da10,dx
c000ee28:	e9 23 16 ff ff       	jmp    c0000450 <loadGDT>
c000ee2d:	90                   	nop

c000ee2e <GDT::setup()>:
c000ee2e:	55                   	push   ebp
c000ee2f:	57                   	push   edi
c000ee30:	56                   	push   esi
c000ee31:	53                   	push   ebx
c000ee32:	83 ec 3c             	sub    esp,0x3c
c000ee35:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ee39:	6a 00                	push   0x0
c000ee3b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ee3f:	53                   	push   ebx
c000ee40:	e8 4d ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee45:	6a 00                	push   0x0
c000ee47:	53                   	push   ebx
c000ee48:	e8 61 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee4d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ee55:	6a 00                	push   0x0
c000ee57:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ee5b:	53                   	push   ebx
c000ee5c:	e8 31 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee61:	68 ff ff ff 00       	push   0xffffff
c000ee66:	53                   	push   ebx
c000ee67:	e8 42 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee6c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ee70:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ee75:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ee7a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ee7e:	83 c4 20             	add    esp,0x20
c000ee81:	6a 00                	push   0x0
c000ee83:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ee87:	53                   	push   ebx
c000ee88:	e8 05 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee8d:	68 ff ff ff 00       	push   0xffffff
c000ee92:	53                   	push   ebx
c000ee93:	e8 16 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee98:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee9c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eea0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000eea4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000eea8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eeac:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000eeb1:	0d 00 92 c0 00       	or     eax,0xc09200
c000eeb6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eeba:	89 d8                	mov    eax,ebx
c000eebc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eec0:	80 cc 60             	or     ah,0x60
c000eec3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eec7:	83 c4 0c             	add    esp,0xc
c000eeca:	89 f8                	mov    eax,edi
c000eecc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed0:	80 cc 60             	or     ah,0x60
c000eed3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed7:	89 c7                	mov    edi,eax
c000eed9:	55                   	push   ebp
c000eeda:	e8 03 ff ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eedf:	83 c4 0c             	add    esp,0xc
c000eee2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eee6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eeea:	55                   	push   ebp
c000eeeb:	e8 f2 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eef0:	83 c4 0c             	add    esp,0xc
c000eef3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eef7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eefb:	55                   	push   ebp
c000eefc:	e8 e1 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef01:	83 c4 0c             	add    esp,0xc
c000ef04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef0c:	53                   	push   ebx
c000ef0d:	51                   	push   ecx
c000ef0e:	55                   	push   ebp
c000ef0f:	e8 ce fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef14:	83 c4 0c             	add    esp,0xc
c000ef17:	57                   	push   edi
c000ef18:	56                   	push   esi
c000ef19:	55                   	push   ebp
c000ef1a:	e8 c3 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef1f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ef22:	e8 e5 fe ff ff       	call   c000ee0c <GDT::flush()>
c000ef27:	83 c4 4c             	add    esp,0x4c
c000ef2a:	5b                   	pop    ebx
c000ef2b:	5e                   	pop    esi
c000ef2c:	5f                   	pop    edi
c000ef2d:	5d                   	pop    ebp
c000ef2e:	c3                   	ret    

c000ef2f <idleFunction(void*)>:
c000ef2f:	53                   	push   ebx
c000ef30:	83 ec 08             	sub    esp,0x8
c000ef33:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c000ef38:	48                   	dec    eax
c000ef39:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c000ef3e:	75 01                	jne    c000ef41 <idleFunction(void*)+0x12>
c000ef40:	fb                   	sti    
c000ef41:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c000ef46:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ef4c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ef53:	74 3c                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef55:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ef5c:	74 33                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef5e:	31 db                	xor    ebx,ebx
c000ef60:	52                   	push   edx
c000ef61:	52                   	push   edx
c000ef62:	68 e1 00 00 00       	push   0xe1
c000ef67:	50                   	push   eax
c000ef68:	e8 d3 fb ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c000ef6d:	53                   	push   ebx
c000ef6e:	83 e0 02             	and    eax,0x2
c000ef71:	50                   	push   eax
c000ef72:	68 e1 00 00 00       	push   0xe1
c000ef77:	ff 35 08 da 02 c0    	push   DWORD PTR ds:0xc002da08
c000ef7d:	e8 ea fb ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c000ef82:	83 c4 20             	add    esp,0x20
c000ef85:	e8 f5 12 ff ff       	call   c000027f <doTPAUSE>
c000ef8a:	e8 e1 94 01 00       	call   c0028470 <idleCommon()>
c000ef8f:	eb f4                	jmp    c000ef85 <idleFunction(void*)+0x56>
c000ef91:	fb                   	sti    
c000ef92:	f4                   	hlt    
c000ef93:	e8 d8 94 01 00       	call   c0028470 <idleCommon()>
c000ef98:	eb f7                	jmp    c000ef91 <idleFunction(void*)+0x62>

c000ef9a <IDTEntry::IDTEntry(bool)>:
c000ef9a:	83 ec 04             	sub    esp,0x4
c000ef9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efa1:	88 04 24             	mov    BYTE PTR [esp],al
c000efa4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efa8:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000efae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efb2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000efb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efbd:	83 e2 f0             	and    edx,0xfffffff0
c000efc0:	83 ca 0e             	or     edx,0xe
c000efc3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efca:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efcd:	83 e2 ef             	and    edx,0xffffffef
c000efd0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efd3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000efd7:	74 04                	je     c000efdd <IDTEntry::IDTEntry(bool)+0x43>
c000efd9:	b2 03                	mov    dl,0x3
c000efdb:	eb 02                	jmp    c000efdf <IDTEntry::IDTEntry(bool)+0x45>
c000efdd:	b2 00                	mov    dl,0x0
c000efdf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efe3:	83 e2 03             	and    edx,0x3
c000efe6:	88 d1                	mov    cl,dl
c000efe8:	c1 e1 05             	shl    ecx,0x5
c000efeb:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efee:	83 e2 9f             	and    edx,0xffffff9f
c000eff1:	09 ca                	or     edx,ecx
c000eff3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000effa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000effd:	83 ca 80             	or     edx,0xffffff80
c000f000:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f003:	90                   	nop
c000f004:	83 c4 04             	add    esp,0x4
c000f007:	c3                   	ret    

c000f008 <IDTEntry::setOffset(unsigned int)>:
c000f008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f00c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f010:	66 89 02             	mov    WORD PTR [edx],ax
c000f013:	c1 e8 10             	shr    eax,0x10
c000f016:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f01a:	c3                   	ret    
c000f01b:	90                   	nop

c000f01c <IDT::IDT()>:
c000f01c:	90                   	nop
c000f01d:	c3                   	ret    

c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f01e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f022:	83 c0 30             	add    eax,0x30
c000f025:	c3                   	ret    

c000f026 <IDT::addEntry(IDTEntry, int)>:
c000f026:	53                   	push   ebx
c000f027:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f02f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f033:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f037:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f03a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f03e:	5b                   	pop    ebx
c000f03f:	c3                   	ret    

c000f040 <IDT::addEntry(int, void (*)(), bool)>:
c000f040:	53                   	push   ebx
c000f041:	83 ec 10             	sub    esp,0x10
c000f044:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f049:	50                   	push   eax
c000f04a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f04e:	53                   	push   ebx
c000f04f:	e8 46 ff ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f054:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f058:	53                   	push   ebx
c000f059:	e8 aa ff ff ff       	call   c000f008 <IDTEntry::setOffset(unsigned int)>
c000f05e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f062:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f066:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f06a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f06e:	e8 b3 ff ff ff       	call   c000f026 <IDT::addEntry(IDTEntry, int)>
c000f073:	83 c4 30             	add    esp,0x30
c000f076:	5b                   	pop    ebx
c000f077:	c3                   	ret    

c000f078 <IDT::flush()>:
c000f078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f07c:	66 c7 05 18 da 02 c0 ff 07 	mov    WORD PTR ds:0xc002da18,0x7ff
c000f085:	a3 1a da 02 c0       	mov    ds:0xc002da1a,eax
c000f08a:	0f 01 1d 18 da 02 c0 	lidtd  ds:0xc002da18
c000f091:	c3                   	ret    

c000f092 <IDT::setup()>:
c000f092:	57                   	push   edi
c000f093:	56                   	push   esi
c000f094:	53                   	push   ebx
c000f095:	83 ec 10             	sub    esp,0x10
c000f098:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f09c:	6a 00                	push   0x0
c000f09e:	68 70 04 00 c0       	push   0xc0000470
c000f0a3:	6a 00                	push   0x0
c000f0a5:	53                   	push   ebx
c000f0a6:	e8 95 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ab:	6a 00                	push   0x0
c000f0ad:	68 80 04 00 c0       	push   0xc0000480
c000f0b2:	6a 01                	push   0x1
c000f0b4:	53                   	push   ebx
c000f0b5:	e8 86 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ba:	83 c4 20             	add    esp,0x20
c000f0bd:	6a 00                	push   0x0
c000f0bf:	68 8a 04 00 c0       	push   0xc000048a
c000f0c4:	6a 02                	push   0x2
c000f0c6:	53                   	push   ebx
c000f0c7:	e8 74 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0cc:	6a 00                	push   0x0
c000f0ce:	68 94 04 00 c0       	push   0xc0000494
c000f0d3:	6a 03                	push   0x3
c000f0d5:	53                   	push   ebx
c000f0d6:	e8 65 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0db:	83 c4 20             	add    esp,0x20
c000f0de:	6a 00                	push   0x0
c000f0e0:	68 9e 04 00 c0       	push   0xc000049e
c000f0e5:	6a 04                	push   0x4
c000f0e7:	53                   	push   ebx
c000f0e8:	e8 53 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ed:	6a 00                	push   0x0
c000f0ef:	68 a8 04 00 c0       	push   0xc00004a8
c000f0f4:	6a 05                	push   0x5
c000f0f6:	53                   	push   ebx
c000f0f7:	e8 44 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0fc:	83 c4 20             	add    esp,0x20
c000f0ff:	6a 00                	push   0x0
c000f101:	68 b2 04 00 c0       	push   0xc00004b2
c000f106:	6a 06                	push   0x6
c000f108:	53                   	push   ebx
c000f109:	e8 32 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f10e:	6a 00                	push   0x0
c000f110:	68 bc 04 00 c0       	push   0xc00004bc
c000f115:	6a 07                	push   0x7
c000f117:	53                   	push   ebx
c000f118:	e8 23 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f11d:	83 c4 20             	add    esp,0x20
c000f120:	6a 00                	push   0x0
c000f122:	68 c6 04 00 c0       	push   0xc00004c6
c000f127:	6a 08                	push   0x8
c000f129:	53                   	push   ebx
c000f12a:	e8 11 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f12f:	6a 00                	push   0x0
c000f131:	68 ce 04 00 c0       	push   0xc00004ce
c000f136:	6a 09                	push   0x9
c000f138:	53                   	push   ebx
c000f139:	e8 02 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f13e:	83 c4 20             	add    esp,0x20
c000f141:	6a 00                	push   0x0
c000f143:	68 d8 04 00 c0       	push   0xc00004d8
c000f148:	6a 0a                	push   0xa
c000f14a:	53                   	push   ebx
c000f14b:	e8 f0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f150:	6a 00                	push   0x0
c000f152:	68 e0 04 00 c0       	push   0xc00004e0
c000f157:	6a 0b                	push   0xb
c000f159:	53                   	push   ebx
c000f15a:	e8 e1 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f15f:	83 c4 20             	add    esp,0x20
c000f162:	6a 00                	push   0x0
c000f164:	68 e8 04 00 c0       	push   0xc00004e8
c000f169:	6a 0c                	push   0xc
c000f16b:	53                   	push   ebx
c000f16c:	e8 cf fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f171:	6a 00                	push   0x0
c000f173:	68 f0 04 00 c0       	push   0xc00004f0
c000f178:	6a 0d                	push   0xd
c000f17a:	53                   	push   ebx
c000f17b:	e8 c0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f180:	83 c4 20             	add    esp,0x20
c000f183:	6a 00                	push   0x0
c000f185:	68 f8 04 00 c0       	push   0xc00004f8
c000f18a:	6a 0e                	push   0xe
c000f18c:	53                   	push   ebx
c000f18d:	e8 ae fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f192:	6a 00                	push   0x0
c000f194:	68 00 05 00 c0       	push   0xc0000500
c000f199:	6a 0f                	push   0xf
c000f19b:	53                   	push   ebx
c000f19c:	e8 9f fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1a1:	83 c4 20             	add    esp,0x20
c000f1a4:	6a 00                	push   0x0
c000f1a6:	68 0a 05 00 c0       	push   0xc000050a
c000f1ab:	6a 10                	push   0x10
c000f1ad:	53                   	push   ebx
c000f1ae:	e8 8d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1b3:	6a 00                	push   0x0
c000f1b5:	68 14 05 00 c0       	push   0xc0000514
c000f1ba:	6a 11                	push   0x11
c000f1bc:	53                   	push   ebx
c000f1bd:	e8 7e fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1c2:	83 c4 20             	add    esp,0x20
c000f1c5:	6a 00                	push   0x0
c000f1c7:	68 1e 05 00 c0       	push   0xc000051e
c000f1cc:	6a 12                	push   0x12
c000f1ce:	53                   	push   ebx
c000f1cf:	e8 6c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1d4:	6a 01                	push   0x1
c000f1d6:	68 b8 05 00 c0       	push   0xc00005b8
c000f1db:	6a 60                	push   0x60
c000f1dd:	53                   	push   ebx
c000f1de:	e8 5d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1e3:	83 c4 20             	add    esp,0x20
c000f1e6:	6a 00                	push   0x0
c000f1e8:	68 bf 05 00 c0       	push   0xc00005bf
c000f1ed:	6a 20                	push   0x20
c000f1ef:	53                   	push   ebx
c000f1f0:	e8 4b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1f5:	6a 00                	push   0x0
c000f1f7:	68 aa 05 00 c0       	push   0xc00005aa
c000f1fc:	6a 21                	push   0x21
c000f1fe:	53                   	push   ebx
c000f1ff:	e8 3c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f204:	83 c4 20             	add    esp,0x20
c000f207:	6a 00                	push   0x0
c000f209:	68 b1 05 00 c0       	push   0xc00005b1
c000f20e:	6a 22                	push   0x22
c000f210:	53                   	push   ebx
c000f211:	e8 2a fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f216:	6a 00                	push   0x0
c000f218:	68 28 05 00 c0       	push   0xc0000528
c000f21d:	6a 23                	push   0x23
c000f21f:	53                   	push   ebx
c000f220:	e8 1b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f225:	83 c4 20             	add    esp,0x20
c000f228:	6a 00                	push   0x0
c000f22a:	68 32 05 00 c0       	push   0xc0000532
c000f22f:	6a 24                	push   0x24
c000f231:	53                   	push   ebx
c000f232:	e8 09 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f237:	6a 00                	push   0x0
c000f239:	68 3c 05 00 c0       	push   0xc000053c
c000f23e:	6a 25                	push   0x25
c000f240:	53                   	push   ebx
c000f241:	e8 fa fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f246:	83 c4 20             	add    esp,0x20
c000f249:	6a 00                	push   0x0
c000f24b:	68 46 05 00 c0       	push   0xc0000546
c000f250:	6a 26                	push   0x26
c000f252:	53                   	push   ebx
c000f253:	e8 e8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f258:	6a 00                	push   0x0
c000f25a:	68 50 05 00 c0       	push   0xc0000550
c000f25f:	6a 27                	push   0x27
c000f261:	53                   	push   ebx
c000f262:	e8 d9 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f267:	83 c4 20             	add    esp,0x20
c000f26a:	6a 00                	push   0x0
c000f26c:	68 5a 05 00 c0       	push   0xc000055a
c000f271:	6a 28                	push   0x28
c000f273:	53                   	push   ebx
c000f274:	e8 c7 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f279:	6a 00                	push   0x0
c000f27b:	68 64 05 00 c0       	push   0xc0000564
c000f280:	6a 29                	push   0x29
c000f282:	53                   	push   ebx
c000f283:	e8 b8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f288:	83 c4 20             	add    esp,0x20
c000f28b:	6a 00                	push   0x0
c000f28d:	68 6e 05 00 c0       	push   0xc000056e
c000f292:	6a 2a                	push   0x2a
c000f294:	53                   	push   ebx
c000f295:	e8 a6 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f29a:	6a 00                	push   0x0
c000f29c:	68 78 05 00 c0       	push   0xc0000578
c000f2a1:	6a 2b                	push   0x2b
c000f2a3:	53                   	push   ebx
c000f2a4:	e8 97 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2a9:	83 c4 20             	add    esp,0x20
c000f2ac:	6a 00                	push   0x0
c000f2ae:	68 82 05 00 c0       	push   0xc0000582
c000f2b3:	6a 2c                	push   0x2c
c000f2b5:	53                   	push   ebx
c000f2b6:	e8 85 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2bb:	6a 00                	push   0x0
c000f2bd:	68 8c 05 00 c0       	push   0xc000058c
c000f2c2:	6a 2d                	push   0x2d
c000f2c4:	53                   	push   ebx
c000f2c5:	e8 76 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2ca:	83 c4 20             	add    esp,0x20
c000f2cd:	6a 00                	push   0x0
c000f2cf:	68 96 05 00 c0       	push   0xc0000596
c000f2d4:	6a 2e                	push   0x2e
c000f2d6:	53                   	push   ebx
c000f2d7:	e8 64 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2dc:	6a 00                	push   0x0
c000f2de:	68 a0 05 00 c0       	push   0xc00005a0
c000f2e3:	6a 2f                	push   0x2f
c000f2e5:	53                   	push   ebx
c000f2e6:	e8 55 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2eb:	83 c4 20             	add    esp,0x20
c000f2ee:	6a 00                	push   0x0
c000f2f0:	68 f6 05 00 c0       	push   0xc00005f6
c000f2f5:	6a 30                	push   0x30
c000f2f7:	53                   	push   ebx
c000f2f8:	e8 43 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2fd:	6a 00                	push   0x0
c000f2ff:	68 00 06 00 c0       	push   0xc0000600
c000f304:	6a 31                	push   0x31
c000f306:	53                   	push   ebx
c000f307:	e8 34 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f30c:	83 c4 20             	add    esp,0x20
c000f30f:	6a 00                	push   0x0
c000f311:	68 0a 06 00 c0       	push   0xc000060a
c000f316:	6a 32                	push   0x32
c000f318:	53                   	push   ebx
c000f319:	e8 22 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f31e:	6a 00                	push   0x0
c000f320:	68 14 06 00 c0       	push   0xc0000614
c000f325:	6a 33                	push   0x33
c000f327:	53                   	push   ebx
c000f328:	e8 13 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f32d:	83 c4 20             	add    esp,0x20
c000f330:	6a 00                	push   0x0
c000f332:	68 1e 06 00 c0       	push   0xc000061e
c000f337:	6a 34                	push   0x34
c000f339:	53                   	push   ebx
c000f33a:	e8 01 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f33f:	6a 00                	push   0x0
c000f341:	68 28 06 00 c0       	push   0xc0000628
c000f346:	6a 35                	push   0x35
c000f348:	53                   	push   ebx
c000f349:	e8 f2 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f34e:	83 c4 20             	add    esp,0x20
c000f351:	6a 00                	push   0x0
c000f353:	68 32 06 00 c0       	push   0xc0000632
c000f358:	6a 36                	push   0x36
c000f35a:	53                   	push   ebx
c000f35b:	e8 e0 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f360:	6a 00                	push   0x0
c000f362:	68 3c 06 00 c0       	push   0xc000063c
c000f367:	6a 37                	push   0x37
c000f369:	53                   	push   ebx
c000f36a:	e8 d1 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f36f:	83 c4 1c             	add    esp,0x1c
c000f372:	6a 03                	push   0x3
c000f374:	6a 02                	push   0x2
c000f376:	ff 35 70 db 02 c0    	push   DWORD PTR ds:0xc002db70
c000f37c:	e8 b1 27 00 00       	call   c0011b32 <VAS::allocatePages(int, int)>
c000f381:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f388:	89 c6                	mov    esi,eax
c000f38a:	e8 0a 02 00 00       	call   c000f599 <malloc>
c000f38f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f395:	89 04 24             	mov    DWORD PTR [esp],eax
c000f398:	89 c7                	mov    edi,eax
c000f39a:	e8 c7 17 00 00       	call   c0010b66 <TSS::TSS()>
c000f39f:	83 c4 0c             	add    esp,0xc
c000f3a2:	68 c6 04 00 c0       	push   0xc00004c6
c000f3a7:	56                   	push   esi
c000f3a8:	57                   	push   edi
c000f3a9:	e8 f8 17 00 00       	call   c0010ba6 <TSS::setup(unsigned long, unsigned long)>
c000f3ae:	89 c6                	mov    esi,eax
c000f3b0:	58                   	pop    eax
c000f3b1:	5a                   	pop    edx
c000f3b2:	6a 00                	push   0x0
c000f3b4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f3b8:	50                   	push   eax
c000f3b9:	e8 dc fb ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f3be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3c2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f3c7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f3ce:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f3d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3d8:	80 ce 05             	or     dh,0x5
c000f3db:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f3de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f3e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3e6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f3e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f3ec:	e8 87 fc ff ff       	call   c000f078 <IDT::flush()>
c000f3f1:	83 c4 20             	add    esp,0x20
c000f3f4:	5b                   	pop    ebx
c000f3f5:	5e                   	pop    esi
c000f3f6:	5f                   	pop    edi
c000f3f7:	c3                   	ret    

c000f3f8 <sbrk>:
c000f3f8:	55                   	push   ebp
c000f3f9:	57                   	push   edi
c000f3fa:	56                   	push   esi
c000f3fb:	53                   	push   ebx
c000f3fc:	83 ec 1c             	sub    esp,0x1c
c000f3ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f403:	85 c0                	test   eax,eax
c000f405:	74 3e                	je     c000f445 <sbrk+0x4d>
c000f407:	78 43                	js     c000f44c <sbrk+0x54>
c000f409:	8b 15 08 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da08
c000f40f:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f415:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f41b:	83 e2 01             	and    edx,0x1
c000f41e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f422:	8b 0d dc c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c7dc
c000f428:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f42c:	05 ff 0f 00 00       	add    eax,0xfff
c000f431:	89 c2                	mov    edx,eax
c000f433:	78 2f                	js     c000f464 <sbrk+0x6c>
c000f435:	c1 fa 0c             	sar    edx,0xc
c000f438:	89 d7                	mov    edi,edx
c000f43a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f43e:	be 00 00 00 00       	mov    esi,0x0
c000f443:	eb 36                	jmp    c000f47b <sbrk+0x83>
c000f445:	a1 dc c7 02 c0       	mov    eax,ds:0xc002c7dc
c000f44a:	eb 73                	jmp    c000f4bf <sbrk+0xc7>
c000f44c:	83 ec 08             	sub    esp,0x8
c000f44f:	50                   	push   eax
c000f450:	68 c0 9f 02 c0       	push   0xc0029fc0
c000f455:	e8 c9 32 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c000f45a:	83 c4 10             	add    esp,0x10
c000f45d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f462:	eb 5b                	jmp    c000f4bf <sbrk+0xc7>
c000f464:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f46a:	eb c9                	jmp    c000f435 <sbrk+0x3d>
c000f46c:	81 05 dc c7 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002c7dc,0x1000
c000f476:	46                   	inc    esi
c000f477:	39 f7                	cmp    edi,esi
c000f479:	74 33                	je     c000f4ae <sbrk+0xb6>
c000f47b:	8b 1d 70 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db70
c000f481:	8b 2d dc c7 02 c0    	mov    ebp,DWORD PTR ds:0xc002c7dc
c000f487:	e8 09 05 00 00       	call   c000f995 <Phys::allocatePage()>
c000f48c:	68 01 04 00 00       	push   0x401
c000f491:	55                   	push   ebp
c000f492:	50                   	push   eax
c000f493:	53                   	push   ebx
c000f494:	e8 97 25 00 00       	call   c0011a30 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f499:	83 c4 10             	add    esp,0x10
c000f49c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4a1:	74 c9                	je     c000f46c <sbrk+0x74>
c000f4a3:	8b 1d dc c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c7dc
c000f4a9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4ac:	eb be                	jmp    c000f46c <sbrk+0x74>
c000f4ae:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4b3:	75 12                	jne    c000f4c7 <sbrk+0xcf>
c000f4b5:	0f 20 d8             	mov    eax,cr3
c000f4b8:	0f 22 d8             	mov    cr3,eax
c000f4bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f4bf:	83 c4 1c             	add    esp,0x1c
c000f4c2:	5b                   	pop    ebx
c000f4c3:	5e                   	pop    esi
c000f4c4:	5f                   	pop    edi
c000f4c5:	5d                   	pop    ebp
c000f4c6:	c3                   	ret    
c000f4c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f4cb:	89 cb                	mov    ebx,ecx
c000f4cd:	c1 eb 0a             	shr    ebx,0xa
c000f4d0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f4d6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f4dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4e0:	c1 e0 0c             	shl    eax,0xc
c000f4e3:	01 c8                	add    eax,ecx
c000f4e5:	c1 e8 0a             	shr    eax,0xa
c000f4e8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f4ed:	2d 00 00 40 00       	sub    eax,0x400000
c000f4f2:	39 c3                	cmp    ebx,eax
c000f4f4:	77 c5                	ja     c000f4bb <sbrk+0xc3>
c000f4f6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4f9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f4ff:	39 d8                	cmp    eax,ebx
c000f501:	73 f3                	jae    c000f4f6 <sbrk+0xfe>
c000f503:	eb b6                	jmp    c000f4bb <sbrk+0xc3>

c000f505 <mmap>:
c000f505:	83 ec 18             	sub    esp,0x18
c000f508:	68 f0 9f 02 c0       	push   0xc0029ff0
c000f50d:	e8 7d a9 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c000f512:	b8 00 00 00 00       	mov    eax,0x0
c000f517:	83 c4 1c             	add    esp,0x1c
c000f51a:	c3                   	ret    

c000f51b <munmap>:
c000f51b:	83 ec 18             	sub    esp,0x18
c000f51e:	68 f5 9f 02 c0       	push   0xc0029ff5
c000f523:	e8 67 a9 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c000f528:	b8 00 00 00 00       	mov    eax,0x0
c000f52d:	83 c4 1c             	add    esp,0x1c
c000f530:	c3                   	ret    

c000f531 <liballoc_lock()>:
c000f531:	fa                   	cli    
c000f532:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c000f538:	b8 00 00 00 00       	mov    eax,0x0
c000f53d:	c3                   	ret    

c000f53e <liballoc_unlock()>:
c000f53e:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c000f543:	48                   	dec    eax
c000f544:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c000f549:	75 01                	jne    c000f54c <liballoc_unlock()+0xe>
c000f54b:	fb                   	sti    
c000f54c:	b8 00 00 00 00       	mov    eax,0x0
c000f551:	c3                   	ret    

c000f552 <liballoc_alloc(int)>:
c000f552:	83 ec 10             	sub    esp,0x10
c000f555:	6a 01                	push   0x1
c000f557:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f55b:	ff 35 70 db 02 c0    	push   DWORD PTR ds:0xc002db70
c000f561:	e8 cc 25 00 00       	call   c0011b32 <VAS::allocatePages(int, int)>
c000f566:	83 c4 1c             	add    esp,0x1c
c000f569:	c3                   	ret    

c000f56a <liballoc_free(void*, int)>:
c000f56a:	83 ec 14             	sub    esp,0x14
c000f56d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f571:	ff 35 70 db 02 c0    	push   DWORD PTR ds:0xc002db70
c000f577:	e8 60 22 00 00       	call   c00117dc <VAS::freeAllocatedPages(unsigned long)>
c000f57c:	b8 00 00 00 00       	mov    eax,0x0
c000f581:	83 c4 1c             	add    esp,0x1c
c000f584:	c3                   	ret    

c000f585 <realloc>:
c000f585:	83 ec 14             	sub    esp,0x14
c000f588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f58c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f590:	e8 97 20 ff ff       	call   c000162c <dlrealloc>
c000f595:	83 c4 1c             	add    esp,0x1c
c000f598:	c3                   	ret    

c000f599 <malloc>:
c000f599:	83 ec 18             	sub    esp,0x18
c000f59c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5a0:	e8 4a 1b ff ff       	call   c00010ef <dlmalloc>
c000f5a5:	83 c4 1c             	add    esp,0x1c
c000f5a8:	c3                   	ret    

c000f5a9 <free>:
c000f5a9:	83 ec 18             	sub    esp,0x18
c000f5ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5b0:	e8 df 17 ff ff       	call   c0000d94 <dlfree>
c000f5b5:	83 c4 1c             	add    esp,0x1c
c000f5b8:	c3                   	ret    

c000f5b9 <rfree>:
c000f5b9:	83 ec 18             	sub    esp,0x18
c000f5bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5c0:	e8 cf 17 ff ff       	call   c0000d94 <dlfree>
c000f5c5:	83 c4 1c             	add    esp,0x1c
c000f5c8:	c3                   	ret    

c000f5c9 <calloc>:
c000f5c9:	56                   	push   esi
c000f5ca:	53                   	push   ebx
c000f5cb:	83 ec 10             	sub    esp,0x10
c000f5ce:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f5d2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 bc ff ff ff       	call   c000f599 <malloc>
c000f5dd:	89 c6                	mov    esi,eax
c000f5df:	83 c4 0c             	add    esp,0xc
c000f5e2:	53                   	push   ebx
c000f5e3:	6a 00                	push   0x0
c000f5e5:	50                   	push   eax
c000f5e6:	e8 65 11 ff ff       	call   c0000750 <memset>
c000f5eb:	89 f0                	mov    eax,esi
c000f5ed:	83 c4 14             	add    esp,0x14
c000f5f0:	5b                   	pop    ebx
c000f5f1:	5e                   	pop    esi
c000f5f2:	c3                   	ret    

c000f5f3 <Krnl::setBootMessage(char const*)>:
c000f5f3:	57                   	push   edi
c000f5f4:	56                   	push   esi
c000f5f5:	53                   	push   ebx
c000f5f6:	81 ec a4 00 00 00    	sub    esp,0xa4
c000f5fc:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000f603:	68 9e 00 00 00       	push   0x9e
c000f608:	6a 00                	push   0x0
c000f60a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000f60e:	56                   	push   esi
c000f60f:	e8 3c 11 ff ff       	call   c0000750 <memset>
c000f614:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f617:	e8 50 11 ff ff       	call   c000076c <strlen>
c000f61c:	ba 50 00 00 00       	mov    edx,0x50
c000f621:	83 c4 10             	add    esp,0x10
c000f624:	29 c2                	sub    edx,eax
c000f626:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000f62a:	d1 ea                	shr    edx,1
c000f62c:	84 c0                	test   al,al
c000f62e:	74 19                	je     c000f649 <Krnl::setBootMessage(char const*)+0x56>
c000f630:	01 d2                	add    edx,edx
c000f632:	43                   	inc    ebx
c000f633:	01 f2                	add    edx,esi
c000f635:	80 cc 0f             	or     ah,0xf
c000f638:	83 c2 02             	add    edx,0x2
c000f63b:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f63f:	43                   	inc    ebx
c000f640:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000f645:	84 c0                	test   al,al
c000f647:	75 ec                	jne    c000f635 <Krnl::setBootMessage(char const*)+0x42>
c000f649:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000f64e:	b9 9e 00 00 00       	mov    ecx,0x9e
c000f653:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f655:	81 c4 a0 00 00 00    	add    esp,0xa0
c000f65b:	5b                   	pop    ebx
c000f65c:	5e                   	pop    esi
c000f65d:	5f                   	pop    edi
c000f65e:	c3                   	ret    

c000f65f <kernel_main>:
c000f65f:	57                   	push   edi
c000f660:	bf f9 03 00 00       	mov    edi,0x3f9
c000f665:	56                   	push   esi
c000f666:	89 fa                	mov    edx,edi
c000f668:	53                   	push   ebx
c000f669:	31 f6                	xor    esi,esi
c000f66b:	83 ec 2c             	sub    esp,0x2c
c000f66e:	89 f0                	mov    eax,esi
c000f670:	ee                   	out    dx,al
c000f671:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f676:	b0 80                	mov    al,0x80
c000f678:	89 da                	mov    edx,ebx
c000f67a:	ee                   	out    dx,al
c000f67b:	b1 03                	mov    cl,0x3
c000f67d:	ba f8 03 00 00       	mov    edx,0x3f8
c000f682:	88 c8                	mov    al,cl
c000f684:	ee                   	out    dx,al
c000f685:	89 f0                	mov    eax,esi
c000f687:	89 fa                	mov    edx,edi
c000f689:	ee                   	out    dx,al
c000f68a:	88 c8                	mov    al,cl
c000f68c:	89 da                	mov    edx,ebx
c000f68e:	ee                   	out    dx,al
c000f68f:	b0 c7                	mov    al,0xc7
c000f691:	ba fa 03 00 00       	mov    edx,0x3fa
c000f696:	ee                   	out    dx,al
c000f697:	b0 0b                	mov    al,0xb
c000f699:	ba fc 03 00 00       	mov    edx,0x3fc
c000f69e:	ee                   	out    dx,al
c000f69f:	68 fc 9f 02 c0       	push   0xc0029ffc
c000f6a4:	e8 7a 30 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c000f6a9:	e8 b8 09 00 00       	call   c0010066 <installVgaTextImplementation()>
c000f6ae:	0f b6 05 e0 c7 02 c0 	movzx  eax,BYTE PTR ds:0xc002c7e0
c000f6b5:	83 c4 10             	add    esp,0x10
c000f6b8:	84 c0                	test   al,al
c000f6ba:	74 6c                	je     c000f728 <kernel_main+0xc9>
c000f6bc:	31 db                	xor    ebx,ebx
c000f6be:	bf 0a 00 00 00       	mov    edi,0xa
c000f6c3:	be 05 00 00 00       	mov    esi,0x5
c000f6c8:	31 c9                	xor    ecx,ecx
c000f6ca:	eb 2a                	jmp    c000f6f6 <kernel_main+0x97>
c000f6cc:	3c 0d                	cmp    al,0xd
c000f6ce:	74 1a                	je     c000f6ea <kernel_main+0x8b>
c000f6d0:	3c 0a                	cmp    al,0xa
c000f6d2:	74 40                	je     c000f714 <kernel_main+0xb5>
c000f6d4:	8d 14 b6             	lea    edx,[esi+esi*4]
c000f6d7:	80 cc 0e             	or     ah,0xe
c000f6da:	c1 e2 04             	shl    edx,0x4
c000f6dd:	01 ca                	add    edx,ecx
c000f6df:	41                   	inc    ecx
c000f6e0:	01 fa                	add    edx,edi
c000f6e2:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f6ea:	43                   	inc    ebx
c000f6eb:	0f b6 83 e0 c7 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3820]
c000f6f2:	84 c0                	test   al,al
c000f6f4:	74 32                	je     c000f728 <kernel_main+0xc9>
c000f6f6:	80 b9 16 c8 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd37ea],0xdb
c000f6fd:	75 cd                	jne    c000f6cc <kernel_main+0x6d>
c000f6ff:	0f b6 91 15 c8 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd37eb]
c000f706:	83 e2 fe             	and    edx,0xfffffffe
c000f709:	81 fa ba 00 00 00    	cmp    edx,0xba
c000f70f:	75 bb                	jne    c000f6cc <kernel_main+0x6d>
c000f711:	47                   	inc    edi
c000f712:	eb b8                	jmp    c000f6cc <kernel_main+0x6d>
c000f714:	43                   	inc    ebx
c000f715:	46                   	inc    esi
c000f716:	31 c9                	xor    ecx,ecx
c000f718:	0f b6 83 e0 c7 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3820]
c000f71f:	bf 0a 00 00 00       	mov    edi,0xa
c000f724:	84 c0                	test   al,al
c000f726:	75 ce                	jne    c000f6f6 <kernel_main+0x97>
c000f728:	83 ec 0c             	sub    esp,0xc
c000f72b:	68 14 a0 02 c0       	push   0xc002a014
c000f730:	e8 be fe ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000f735:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f73a:	a3 20 da 02 c0       	mov    ds:0xc002da20,eax
c000f73f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f744:	05 ff 0f 00 00       	add    eax,0xfff
c000f749:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f74e:	89 04 24             	mov    DWORD PTR [esp],eax
c000f751:	e8 cb 03 00 00       	call   c000fb21 <Phys::physicalMemorySetup(unsigned int)>
c000f756:	e8 83 1c 00 00       	call   c00113de <Virt::virtualMemorySetup()>
c000f75b:	58                   	pop    eax
c000f75c:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f760:	53                   	push   ebx
c000f761:	e8 9e 1e 00 00       	call   c0011604 <VAS::VAS()>
c000f766:	89 1d 70 db 02 c0    	mov    DWORD PTR ds:0xc002db70,ebx
c000f76c:	e8 af 08 ff ff       	call   c0000020 <callGlobalConstructors>
c000f771:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f778:	e8 1c fe ff ff       	call   c000f599 <malloc>
c000f77d:	89 04 24             	mov    DWORD PTR [esp],eax
c000f780:	89 c6                	mov    esi,eax
c000f782:	e8 4f f0 ff ff       	call   c000e7d6 <Computer::Computer()>
c000f787:	6a 00                	push   0x0
c000f789:	89 35 08 da 02 c0    	mov    DWORD PTR ds:0xc002da08,esi
c000f78f:	6a 00                	push   0x0
c000f791:	6a 00                	push   0x0
c000f793:	56                   	push   esi
c000f794:	e8 49 f4 ff ff       	call   c000ebe2 <Computer::open(int, int, void*)>
c000f799:	83 c4 14             	add    esp,0x14
c000f79c:	53                   	push   ebx
c000f79d:	e8 12 21 00 00       	call   c00118b4 <VAS::~VAS()>
c000f7a2:	83 c4 30             	add    esp,0x30
c000f7a5:	5b                   	pop    ebx
c000f7a6:	5e                   	pop    esi
c000f7a7:	5f                   	pop    edi
c000f7a8:	c3                   	ret    

c000f7a9 <Phys::allocateDMA(unsigned long)>:
c000f7a9:	55                   	push   ebp
c000f7aa:	31 ed                	xor    ebp,ebp
c000f7ac:	57                   	push   edi
c000f7ad:	56                   	push   esi
c000f7ae:	53                   	push   ebx
c000f7af:	31 db                	xor    ebx,ebx
c000f7b1:	83 ec 18             	sub    esp,0x18
c000f7b4:	68 33 a0 02 c0       	push   0xc002a033
c000f7b9:	e8 65 2f 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c000f7be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f7c2:	31 d2                	xor    edx,edx
c000f7c4:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f7ca:	83 c4 10             	add    esp,0x10
c000f7cd:	c1 ee 0c             	shr    esi,0xc
c000f7d0:	31 c9                	xor    ecx,ecx
c000f7d2:	eb 17                	jmp    c000f7eb <Phys::allocateDMA(unsigned long)+0x42>
c000f7d4:	85 c9                	test   ecx,ecx
c000f7d6:	75 04                	jne    c000f7dc <Phys::allocateDMA(unsigned long)+0x33>
c000f7d8:	89 d5                	mov    ebp,edx
c000f7da:	89 d3                	mov    ebx,edx
c000f7dc:	8d 41 01             	lea    eax,[ecx+0x1]
c000f7df:	39 c6                	cmp    esi,eax
c000f7e1:	74 23                	je     c000f806 <Phys::allocateDMA(unsigned long)+0x5d>
c000f7e3:	42                   	inc    edx
c000f7e4:	89 c1                	mov    ecx,eax
c000f7e6:	83 fa 2f             	cmp    edx,0x2f
c000f7e9:	7f 11                	jg     c000f7fc <Phys::allocateDMA(unsigned long)+0x53>
c000f7eb:	80 ba 60 da 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd25a0],0x0
c000f7f2:	74 e0                	je     c000f7d4 <Phys::allocateDMA(unsigned long)+0x2b>
c000f7f4:	31 c9                	xor    ecx,ecx
c000f7f6:	42                   	inc    edx
c000f7f7:	83 fa 2f             	cmp    edx,0x2f
c000f7fa:	7e ef                	jle    c000f7eb <Phys::allocateDMA(unsigned long)+0x42>
c000f7fc:	83 c4 0c             	add    esp,0xc
c000f7ff:	31 c0                	xor    eax,eax
c000f801:	5b                   	pop    ebx
c000f802:	5e                   	pop    esi
c000f803:	5f                   	pop    edi
c000f804:	5d                   	pop    ebp
c000f805:	c3                   	ret    
c000f806:	8d 14 33             	lea    edx,[ebx+esi*1]
c000f809:	89 d7                	mov    edi,edx
c000f80b:	4f                   	dec    edi
c000f80c:	79 03                	jns    c000f811 <Phys::allocateDMA(unsigned long)+0x68>
c000f80e:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f811:	c1 ff 04             	sar    edi,0x4
c000f814:	89 da                	mov    edx,ebx
c000f816:	c1 fa 04             	sar    edx,0x4
c000f819:	39 fa                	cmp    edx,edi
c000f81b:	75 43                	jne    c000f860 <Phys::allocateDMA(unsigned long)+0xb7>
c000f81d:	85 c0                	test   eax,eax
c000f81f:	74 1a                	je     c000f83b <Phys::allocateDMA(unsigned long)+0x92>
c000f821:	be 60 da 02 c0       	mov    esi,0xc002da60
c000f826:	8d 93 60 da 02 c0    	lea    edx,[ebx-0x3ffd25a0]
c000f82c:	f7 d6                	not    esi
c000f82e:	29 de                	sub    esi,ebx
c000f830:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f833:	42                   	inc    edx
c000f834:	8d 04 16             	lea    eax,[esi+edx*1]
c000f837:	39 c1                	cmp    ecx,eax
c000f839:	7f f5                	jg     c000f830 <Phys::allocateDMA(unsigned long)+0x87>
c000f83b:	83 ec 0c             	sub    esp,0xc
c000f83e:	68 4c a0 02 c0       	push   0xc002a04c
c000f843:	e8 db 2e 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c000f848:	83 c4 10             	add    esp,0x10
c000f84b:	85 ff                	test   edi,edi
c000f84d:	74 17                	je     c000f866 <Phys::allocateDMA(unsigned long)+0xbd>
c000f84f:	83 c4 0c             	add    esp,0xc
c000f852:	8d 83 50 20 0c 00    	lea    eax,[ebx+0xc2050]
c000f858:	5b                   	pop    ebx
c000f859:	c1 e0 0c             	shl    eax,0xc
c000f85c:	5e                   	pop    esi
c000f85d:	5f                   	pop    edi
c000f85e:	5d                   	pop    ebp
c000f85f:	c3                   	ret    
c000f860:	89 ea                	mov    edx,ebp
c000f862:	31 c9                	xor    ecx,ecx
c000f864:	eb 90                	jmp    c000f7f6 <Phys::allocateDMA(unsigned long)+0x4d>
c000f866:	83 c4 0c             	add    esp,0xc
c000f869:	c1 e3 0c             	shl    ebx,0xc
c000f86c:	8d 83 00 00 01 c2    	lea    eax,[ebx-0x3dff0000]
c000f872:	5b                   	pop    ebx
c000f873:	5e                   	pop    esi
c000f874:	5f                   	pop    edi
c000f875:	5d                   	pop    ebp
c000f876:	c3                   	ret    

c000f877 <Phys::freeDMA(unsigned long, unsigned long)>:
c000f877:	83 ec 18             	sub    esp,0x18
c000f87a:	68 63 a0 02 c0       	push   0xc002a063
c000f87f:	e8 9f 2e 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c000f884:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f888:	83 c4 10             	add    esp,0x10
c000f88b:	8d 88 ff 0f 00 00    	lea    ecx,[eax+0xfff]
c000f891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f895:	c1 e9 0c             	shr    ecx,0xc
c000f898:	81 7c 24 10 ff ff 05 c2 	cmp    DWORD PTR [esp+0x10],0xc205ffff
c000f8a0:	76 29                	jbe    c000f8cb <Phys::freeDMA(unsigned long, unsigned long)+0x54>
c000f8a2:	8d 90 00 00 fa 3d    	lea    edx,[eax+0x3dfa0000]
c000f8a8:	c1 ea 0c             	shr    edx,0xc
c000f8ab:	83 c2 10             	add    edx,0x10
c000f8ae:	85 c9                	test   ecx,ecx
c000f8b0:	74 15                	je     c000f8c7 <Phys::freeDMA(unsigned long, unsigned long)+0x50>
c000f8b2:	8d 82 60 da 02 c0    	lea    eax,[edx-0x3ffd25a0]
c000f8b8:	8d 94 11 60 da 02 c0 	lea    edx,[ecx+edx*1-0x3ffd25a0]
c000f8bf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f8c2:	40                   	inc    eax
c000f8c3:	39 d0                	cmp    eax,edx
c000f8c5:	75 f8                	jne    c000f8bf <Phys::freeDMA(unsigned long, unsigned long)+0x48>
c000f8c7:	83 c4 0c             	add    esp,0xc
c000f8ca:	c3                   	ret    
c000f8cb:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f8d1:	c1 ea 0c             	shr    edx,0xc
c000f8d4:	eb d8                	jmp    c000f8ae <Phys::freeDMA(unsigned long, unsigned long)+0x37>

c000f8d6 <Phys::setPageState(unsigned long, bool)>:
c000f8d6:	56                   	push   esi
c000f8d7:	ba 01 00 00 00       	mov    edx,0x1
c000f8dc:	53                   	push   ebx
c000f8dd:	8b 35 24 c9 02 c0    	mov    esi,DWORD PTR ds:0xc002c924
c000f8e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f8eb:	89 c8                	mov    eax,ecx
c000f8ed:	83 e1 07             	and    ecx,0x7
c000f8f0:	c1 e8 03             	shr    eax,0x3
c000f8f3:	d3 e3                	shl    ebx,cl
c000f8f5:	01 c6                	add    esi,eax
c000f8f7:	d3 e2                	shl    edx,cl
c000f8f9:	f7 d2                	not    edx
c000f8fb:	20 16                	and    BYTE PTR [esi],dl
c000f8fd:	03 05 24 c9 02 c0    	add    eax,DWORD PTR ds:0xc002c924
c000f903:	08 18                	or     BYTE PTR [eax],bl
c000f905:	5b                   	pop    ebx
c000f906:	5e                   	pop    esi
c000f907:	c3                   	ret    

c000f908 <Phys::getPageState(unsigned long)>:
c000f908:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f90c:	8b 15 24 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c924
c000f912:	89 c8                	mov    eax,ecx
c000f914:	83 e1 07             	and    ecx,0x7
c000f917:	c1 e8 03             	shr    eax,0x3
c000f91a:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f91e:	d3 f8                	sar    eax,cl
c000f920:	83 e0 01             	and    eax,0x1
c000f923:	c3                   	ret    

c000f924 <Phys::freePage(unsigned long)>:
c000f924:	53                   	push   ebx
c000f925:	83 ec 10             	sub    esp,0x10
c000f928:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f92c:	53                   	push   ebx
c000f92d:	68 79 a0 02 c0       	push   0xc002a079
c000f932:	e8 ec 2d 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c000f937:	83 c4 10             	add    esp,0x10
c000f93a:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000f940:	76 3d                	jbe    c000f97f <Phys::freePage(unsigned long)+0x5b>
c000f942:	83 ec 0c             	sub    esp,0xc
c000f945:	c1 eb 0c             	shr    ebx,0xc
c000f948:	53                   	push   ebx
c000f949:	e8 ba ff ff ff       	call   c000f908 <Phys::getPageState(unsigned long)>
c000f94e:	83 c4 10             	add    esp,0x10
c000f951:	84 c0                	test   al,al
c000f953:	74 19                	je     c000f96e <Phys::freePage(unsigned long)+0x4a>
c000f955:	83 ec 08             	sub    esp,0x8
c000f958:	ff 0d 50 da 02 c0    	dec    DWORD PTR ds:0xc002da50
c000f95e:	6a 00                	push   0x0
c000f960:	53                   	push   ebx
c000f961:	e8 70 ff ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000f966:	83 c4 10             	add    esp,0x10
c000f969:	83 c4 08             	add    esp,0x8
c000f96c:	5b                   	pop    ebx
c000f96d:	c3                   	ret    
c000f96e:	c7 44 24 10 8c a0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a08c
c000f976:	83 c4 08             	add    esp,0x8
c000f979:	5b                   	pop    ebx
c000f97a:	e9 10 a5 00 00       	jmp    c0019e8f <Krnl::panic(char const*)>
c000f97f:	83 ec 08             	sub    esp,0x8
c000f982:	68 00 10 00 00       	push   0x1000
c000f987:	53                   	push   ebx
c000f988:	e8 ea fe ff ff       	call   c000f877 <Phys::freeDMA(unsigned long, unsigned long)>
c000f98d:	83 c4 10             	add    esp,0x10
c000f990:	83 c4 08             	add    esp,0x8
c000f993:	5b                   	pop    ebx
c000f994:	c3                   	ret    

c000f995 <Phys::allocatePage()>:
c000f995:	56                   	push   esi
c000f996:	53                   	push   ebx
c000f997:	83 ec 14             	sub    esp,0x14
c000f99a:	8b 35 44 da 02 c0    	mov    esi,DWORD PTR ds:0xc002da44
c000f9a0:	89 f3                	mov    ebx,esi
c000f9a2:	eb 0a                	jmp    c000f9ae <Phys::allocatePage()+0x19>
c000f9a4:	89 1d 44 da 02 c0    	mov    DWORD PTR ds:0xc002da44,ebx
c000f9aa:	39 de                	cmp    esi,ebx
c000f9ac:	74 24                	je     c000f9d2 <Phys::allocatePage()+0x3d>
c000f9ae:	53                   	push   ebx
c000f9af:	e8 54 ff ff ff       	call   c000f908 <Phys::getPageState(unsigned long)>
c000f9b4:	5a                   	pop    edx
c000f9b5:	84 c0                	test   al,al
c000f9b7:	74 76                	je     c000fa2f <Phys::allocatePage()+0x9a>
c000f9b9:	43                   	inc    ebx
c000f9ba:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f9c0:	75 e2                	jne    c000f9a4 <Phys::allocatePage()+0xf>
c000f9c2:	31 db                	xor    ebx,ebx
c000f9c4:	c7 05 44 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da44,0x0
c000f9ce:	39 de                	cmp    esi,ebx
c000f9d0:	75 dc                	jne    c000f9ae <Phys::allocatePage()+0x19>
c000f9d2:	83 ec 0c             	sub    esp,0xc
c000f9d5:	68 c0 a0 02 c0       	push   0xc002a0c0
c000f9da:	e8 44 2d 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c000f9df:	58                   	pop    eax
c000f9e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f9e5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f9e8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000f9ee:	e8 dd 29 00 00       	call   c00123d0 <VAS::scanForEviction()>
c000f9f3:	83 c4 10             	add    esp,0x10
c000f9f6:	85 c0                	test   eax,eax
c000f9f8:	75 76                	jne    c000fa70 <Phys::allocatePage()+0xdb>
c000f9fa:	83 ec 0c             	sub    esp,0xc
c000f9fd:	68 00 10 00 00       	push   0x1000
c000fa02:	e8 a2 fd ff ff       	call   c000f7a9 <Phys::allocateDMA(unsigned long)>
c000fa07:	83 c4 10             	add    esp,0x10
c000fa0a:	85 c0                	test   eax,eax
c000fa0c:	75 5c                	jne    c000fa6a <Phys::allocatePage()+0xd5>
c000fa0e:	83 ec 0c             	sub    esp,0xc
c000fa11:	68 d8 a0 02 c0       	push   0xc002a0d8
c000fa16:	e8 74 a4 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c000fa1b:	83 c4 10             	add    esp,0x10
c000fa1e:	8b 1d 44 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da44
c000fa24:	53                   	push   ebx
c000fa25:	e8 de fe ff ff       	call   c000f908 <Phys::getPageState(unsigned long)>
c000fa2a:	5a                   	pop    edx
c000fa2b:	84 c0                	test   al,al
c000fa2d:	75 8a                	jne    c000f9b9 <Phys::allocatePage()+0x24>
c000fa2f:	6a 01                	push   0x1
c000fa31:	53                   	push   ebx
c000fa32:	e8 9f fe ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fa37:	5a                   	pop    edx
c000fa38:	a1 50 da 02 c0       	mov    eax,ds:0xc002da50
c000fa3d:	59                   	pop    ecx
c000fa3e:	40                   	inc    eax
c000fa3f:	8b 15 44 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da44
c000fa45:	a3 50 da 02 c0       	mov    ds:0xc002da50,eax
c000fa4a:	c1 e2 0c             	shl    edx,0xc
c000fa4d:	52                   	push   edx
c000fa4e:	ff 35 54 da 02 c0    	push   DWORD PTR ds:0xc002da54
c000fa54:	50                   	push   eax
c000fa55:	68 a2 a0 02 c0       	push   0xc002a0a2
c000fa5a:	e8 c4 2c 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c000fa5f:	a1 44 da 02 c0       	mov    eax,ds:0xc002da44
c000fa64:	83 c4 10             	add    esp,0x10
c000fa67:	c1 e0 0c             	shl    eax,0xc
c000fa6a:	83 c4 14             	add    esp,0x14
c000fa6d:	5b                   	pop    ebx
c000fa6e:	5e                   	pop    esi
c000fa6f:	c3                   	ret    
c000fa70:	83 ec 08             	sub    esp,0x8
c000fa73:	89 c2                	mov    edx,eax
c000fa75:	6a 01                	push   0x1
c000fa77:	c1 ea 0c             	shr    edx,0xc
c000fa7a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fa7e:	52                   	push   edx
c000fa7f:	e8 52 fe ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fa84:	83 c4 10             	add    esp,0x10
c000fa87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa8b:	eb dd                	jmp    c000fa6a <Phys::allocatePage()+0xd5>

c000fa8d <Phys::allocateContiguousPages(int)>:
c000fa8d:	57                   	push   edi
c000fa8e:	56                   	push   esi
c000fa8f:	53                   	push   ebx
c000fa90:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fa94:	fa                   	cli    
c000fa95:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c000fa9b:	31 db                	xor    ebx,ebx
c000fa9d:	85 db                	test   ebx,ebx
c000fa9f:	75 11                	jne    c000fab2 <Phys::allocateContiguousPages(int)+0x25>
c000faa1:	e8 ef fe ff ff       	call   c000f995 <Phys::allocatePage()>
c000faa6:	83 fe 01             	cmp    esi,0x1
c000faa9:	89 c7                	mov    edi,eax
c000faab:	74 21                	je     c000face <Phys::allocateContiguousPages(int)+0x41>
c000faad:	bb 01 00 00 00       	mov    ebx,0x1
c000fab2:	e8 de fe ff ff       	call   c000f995 <Phys::allocatePage()>
c000fab7:	89 da                	mov    edx,ebx
c000fab9:	c1 e2 0c             	shl    edx,0xc
c000fabc:	01 fa                	add    edx,edi
c000fabe:	39 c2                	cmp    edx,eax
c000fac0:	74 20                	je     c000fae2 <Phys::allocateContiguousPages(int)+0x55>
c000fac2:	bb 01 00 00 00       	mov    ebx,0x1
c000fac7:	89 c7                	mov    edi,eax
c000fac9:	83 fe 01             	cmp    esi,0x1
c000facc:	75 e4                	jne    c000fab2 <Phys::allocateContiguousPages(int)+0x25>
c000face:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c000fad3:	48                   	dec    eax
c000fad4:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c000fad9:	75 01                	jne    c000fadc <Phys::allocateContiguousPages(int)+0x4f>
c000fadb:	fb                   	sti    
c000fadc:	89 f8                	mov    eax,edi
c000fade:	5b                   	pop    ebx
c000fadf:	5e                   	pop    esi
c000fae0:	5f                   	pop    edi
c000fae1:	c3                   	ret    
c000fae2:	43                   	inc    ebx
c000fae3:	39 f3                	cmp    ebx,esi
c000fae5:	75 b6                	jne    c000fa9d <Phys::allocateContiguousPages(int)+0x10>
c000fae7:	eb e5                	jmp    c000face <Phys::allocateContiguousPages(int)+0x41>

c000fae9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fae9:	56                   	push   esi
c000faea:	53                   	push   ebx
c000faeb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000faef:	39 1d 48 da 02 c0    	cmp    DWORD PTR ds:0xc002da48,ebx
c000faf5:	73 06                	jae    c000fafd <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000faf7:	89 1d 48 da 02 c0    	mov    DWORD PTR ds:0xc002da48,ebx
c000fafd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb01:	c1 eb 0c             	shr    ebx,0xc
c000fb04:	c1 e8 0c             	shr    eax,0xc
c000fb07:	39 d8                	cmp    eax,ebx
c000fb09:	73 13                	jae    c000fb1e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fb0b:	6a 00                	push   0x0
c000fb0d:	8d 70 01             	lea    esi,[eax+0x1]
c000fb10:	50                   	push   eax
c000fb11:	e8 c0 fd ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fb16:	5a                   	pop    edx
c000fb17:	89 f0                	mov    eax,esi
c000fb19:	59                   	pop    ecx
c000fb1a:	39 f3                	cmp    ebx,esi
c000fb1c:	75 ed                	jne    c000fb0b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fb1e:	5b                   	pop    ebx
c000fb1f:	5e                   	pop    esi
c000fb20:	c3                   	ret    

c000fb21 <Phys::physicalMemorySetup(unsigned int)>:
c000fb21:	55                   	push   ebp
c000fb22:	57                   	push   edi
c000fb23:	56                   	push   esi
c000fb24:	53                   	push   ebx
c000fb25:	83 ec 40             	sub    esp,0x40
c000fb28:	6a 30                	push   0x30
c000fb2a:	6a 00                	push   0x0
c000fb2c:	68 60 da 02 c0       	push   0xc002da60
c000fb31:	e8 1a 0c ff ff       	call   c0000750 <memset>
c000fb36:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fb3a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fb3f:	05 00 10 00 00       	add    eax,0x1000
c000fb44:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fb48:	5b                   	pop    ebx
c000fb49:	31 db                	xor    ebx,ebx
c000fb4b:	5e                   	pop    esi
c000fb4c:	50                   	push   eax
c000fb4d:	68 e6 a0 02 c0       	push   0xc002a0e6
c000fb52:	e8 cc 2b 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c000fb57:	83 c4 10             	add    esp,0x10
c000fb5a:	83 ec 08             	sub    esp,0x8
c000fb5d:	6a 01                	push   0x1
c000fb5f:	53                   	push   ebx
c000fb60:	43                   	inc    ebx
c000fb61:	e8 70 fd ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fb66:	83 c4 10             	add    esp,0x10
c000fb69:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fb6f:	75 e9                	jne    c000fb5a <Phys::physicalMemorySetup(unsigned int)+0x39>
c000fb71:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fb78:	66 85 c0             	test   ax,ax
c000fb7b:	0f 84 8e 01 00 00    	je     c000fd0f <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000fb81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fb85:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fb8d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fb91:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fb96:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fb9a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fba2:	eb 15                	jmp    c000fbb9 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000fba4:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fba8:	83 c3 18             	add    ebx,0x18
c000fbab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbaf:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fbb3:	0f 84 66 01 00 00    	je     c000fd1f <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000fbb9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fbbc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fbbf:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fbc2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fbc6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fbca:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fbcc:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fbcf:	01 f0                	add    eax,esi
c000fbd1:	55                   	push   ebp
c000fbd2:	11 fa                	adc    edx,edi
c000fbd4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fbd8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fbdc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fbe0:	56                   	push   esi
c000fbe1:	68 28 a1 02 c0       	push   0xc002a128
c000fbe6:	e8 38 2b 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c000fbeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fbef:	83 c4 10             	add    esp,0x10
c000fbf2:	09 f8                	or     eax,edi
c000fbf4:	0f 85 25 01 00 00    	jne    c000fd1f <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000fbfa:	4d                   	dec    ebp
c000fbfb:	75 a7                	jne    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fbfd:	ba 00 00 08 00       	mov    edx,0x80000
c000fc02:	89 c1                	mov    ecx,eax
c000fc04:	39 f2                	cmp    edx,esi
c000fc06:	19 f9                	sbb    ecx,edi
c000fc08:	0f 82 a7 00 00 00    	jb     c000fcb5 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000fc0e:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fc12:	89 c1                	mov    ecx,eax
c000fc14:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fc18:	0f 83 97 00 00 00    	jae    c000fcb5 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000fc1e:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fc23:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fc27:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc2b:	39 fa                	cmp    edx,edi
c000fc2d:	19 e8                	sbb    eax,ebp
c000fc2f:	0f 82 14 01 00 00    	jb     c000fd49 <Phys::physicalMemorySetup(unsigned int)+0x228>
c000fc35:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fc39:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc3d:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fc43:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fc48:	83 d5 ff             	adc    ebp,0xffffffff
c000fc4b:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fc4f:	31 c0                	xor    eax,eax
c000fc51:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fc55:	39 fa                	cmp    edx,edi
c000fc57:	89 c1                	mov    ecx,eax
c000fc59:	19 e9                	sbb    ecx,ebp
c000fc5b:	0f 83 43 ff ff ff    	jae    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fc61:	be 00 00 08 00       	mov    esi,0x80000
c000fc66:	50                   	push   eax
c000fc67:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fc6b:	57                   	push   edi
c000fc6c:	56                   	push   esi
c000fc6d:	68 4c a1 02 c0       	push   0xc002a14c
c000fc72:	e8 ac 2a 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c000fc77:	5a                   	pop    edx
c000fc78:	59                   	pop    ecx
c000fc79:	57                   	push   edi
c000fc7a:	56                   	push   esi
c000fc7b:	e8 69 fe ff ff       	call   c000fae9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fc80:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fc84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fc88:	83 c4 0c             	add    esp,0xc
c000fc8b:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fc8f:	03 05 54 da 02 c0    	add    eax,DWORD PTR ds:0xc002da54
c000fc95:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fc9c:	a3 54 da 02 c0       	mov    ds:0xc002da54,eax
c000fca1:	52                   	push   edx
c000fca2:	50                   	push   eax
c000fca3:	68 0c a1 02 c0       	push   0xc002a10c
c000fca8:	e8 76 2a 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c000fcad:	83 c4 10             	add    esp,0x10
c000fcb0:	e9 ef fe ff ff       	jmp    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fcb5:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fcb9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fcbd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fcc1:	39 ea                	cmp    edx,ebp
c000fcc3:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fcc7:	0f 82 d7 fe ff ff    	jb     c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fccd:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fcd2:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fcd6:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fcda:	0f 83 c4 fe ff ff    	jae    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fce0:	39 ee                	cmp    esi,ebp
c000fce2:	89 f8                	mov    eax,edi
c000fce4:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fce8:	0f 83 78 ff ff ff    	jae    c000fc66 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000fcee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcf2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fcf6:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fcfa:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fcfe:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fd02:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd06:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd0a:	e9 57 ff ff ff       	jmp    c000fc66 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000fd0f:	83 ec 0c             	sub    esp,0xc
c000fd12:	68 fe a0 02 c0       	push   0xc002a0fe
c000fd17:	e8 73 a1 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c000fd1c:	83 c4 10             	add    esp,0x10
c000fd1f:	bb 40 01 00 00       	mov    ebx,0x140
c000fd24:	83 ec 08             	sub    esp,0x8
c000fd27:	6a 00                	push   0x0
c000fd29:	53                   	push   ebx
c000fd2a:	43                   	inc    ebx
c000fd2b:	e8 a6 fb ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fd30:	ff 05 54 da 02 c0    	inc    DWORD PTR ds:0xc002da54
c000fd36:	83 c4 10             	add    esp,0x10
c000fd39:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fd3f:	75 e3                	jne    c000fd24 <Phys::physicalMemorySetup(unsigned int)+0x203>
c000fd41:	83 c4 3c             	add    esp,0x3c
c000fd44:	5b                   	pop    ebx
c000fd45:	5e                   	pop    esi
c000fd46:	5f                   	pop    edi
c000fd47:	5d                   	pop    ebp
c000fd48:	c3                   	ret    
c000fd49:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fd51:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fd59:	e9 d7 fe ff ff       	jmp    c000fc35 <Phys::physicalMemorySetup(unsigned int)+0x114>

c000fd5e <Pipe::isAtty()>:
c000fd5e:	31 c0                	xor    eax,eax
c000fd60:	c3                   	ret    
c000fd61:	90                   	nop

c000fd62 <Pipe::~Pipe()>:
c000fd62:	83 ec 0c             	sub    esp,0xc
c000fd65:	ba b8 a1 02 c0       	mov    edx,0xc002a1b8
c000fd6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd6e:	89 10                	mov    DWORD PTR [eax],edx
c000fd70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd74:	83 ec 0c             	sub    esp,0xc
c000fd77:	50                   	push   eax
c000fd78:	e8 41 12 00 00       	call   c0010fbe <UnixFile::~UnixFile()>
c000fd7d:	83 c4 10             	add    esp,0x10
c000fd80:	90                   	nop
c000fd81:	83 c4 0c             	add    esp,0xc
c000fd84:	c3                   	ret    
c000fd85:	90                   	nop

c000fd86 <Pipe::~Pipe()>:
c000fd86:	83 ec 0c             	sub    esp,0xc
c000fd89:	83 ec 0c             	sub    esp,0xc
c000fd8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd90:	e8 cd ff ff ff       	call   c000fd62 <Pipe::~Pipe()>
c000fd95:	83 c4 10             	add    esp,0x10
c000fd98:	83 ec 08             	sub    esp,0x8
c000fd9b:	6a 20                	push   0x20
c000fd9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fda1:	e8 a5 28 00 00       	call   c001264b <operator delete(void*, unsigned long)>
c000fda6:	83 c4 10             	add    esp,0x10
c000fda9:	83 c4 0c             	add    esp,0xc
c000fdac:	c3                   	ret    
c000fdad:	90                   	nop

c000fdae <Pipe::read(unsigned long long, void*, int*)>:
c000fdae:	55                   	push   ebp
c000fdaf:	57                   	push   edi
c000fdb0:	56                   	push   esi
c000fdb1:	53                   	push   ebx
c000fdb2:	83 ec 1c             	sub    esp,0x1c
c000fdb5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fdb9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fdbd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fdc1:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fdc4:	89 c8                	mov    eax,ecx
c000fdc6:	99                   	cdq    
c000fdc7:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fdcb:	74 24                	je     c000fdf1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fdcd:	39 f9                	cmp    ecx,edi
c000fdcf:	89 d1                	mov    ecx,edx
c000fdd1:	19 f1                	sbb    ecx,esi
c000fdd3:	73 1c                	jae    c000fdf1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fdd5:	fa                   	cli    
c000fdd6:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c000fddc:	e8 3e dc 00 00       	call   c001da1f <schedule()>
c000fde1:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c000fde6:	48                   	dec    eax
c000fde7:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c000fdec:	75 d3                	jne    c000fdc1 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fdee:	fb                   	sti    
c000fdef:	eb d0                	jmp    c000fdc1 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fdf1:	39 f8                	cmp    eax,edi
c000fdf3:	89 d1                	mov    ecx,edx
c000fdf5:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fdf8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000fdfc:	19 f1                	sbb    ecx,esi
c000fdfe:	73 07                	jae    c000fe07 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000fe00:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe03:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fe07:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fe0a:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000fe0d:	29 f7                	sub    edi,esi
c000fe0f:	89 f8                	mov    eax,edi
c000fe11:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000fe15:	99                   	cdq    
c000fe16:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000fe19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe1d:	19 d0                	sbb    eax,edx
c000fe1f:	73 07                	jae    c000fe28 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000fe21:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fe24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe28:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000fe2b:	89 ea                	mov    edx,ebp
c000fe2d:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000fe31:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000fe36:	74 0d                	je     c000fe45 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000fe38:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000fe3b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000fe3f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe43:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe45:	85 d2                	test   edx,edx
c000fe47:	74 11                	je     c000fe5a <Pipe::read(unsigned long long, void*, int*)+0xac>
c000fe49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe4d:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000fe50:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000fe54:	89 d1                	mov    ecx,edx
c000fe56:	89 c7                	mov    edi,eax
c000fe58:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe5a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fe5d:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000fe60:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fe63:	99                   	cdq    
c000fe64:	89 f7                	mov    edi,esi
c000fe66:	03 04 24             	add    eax,DWORD PTR [esp]
c000fe69:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000fe6d:	c1 ff 1f             	sar    edi,0x1f
c000fe70:	57                   	push   edi
c000fe71:	56                   	push   esi
c000fe72:	52                   	push   edx
c000fe73:	50                   	push   eax
c000fe74:	e8 eb 69 01 00       	call   c0026864 <__umoddi3>
c000fe79:	83 c4 10             	add    esp,0x10
c000fe7c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fe7f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fe84:	75 10                	jne    c000fe96 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000fe86:	83 ec 0c             	sub    esp,0xc
c000fe89:	68 75 a1 02 c0       	push   0xc002a175
c000fe8e:	e8 fc 9f 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c000fe93:	83 c4 10             	add    esp,0x10
c000fe96:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fe9a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fe9d:	89 10                	mov    DWORD PTR [eax],edx
c000fe9f:	83 c4 1c             	add    esp,0x1c
c000fea2:	31 c0                	xor    eax,eax
c000fea4:	5b                   	pop    ebx
c000fea5:	5e                   	pop    esi
c000fea6:	5f                   	pop    edi
c000fea7:	5d                   	pop    ebp
c000fea8:	c3                   	ret    
c000fea9:	90                   	nop

c000feaa <Pipe::write(unsigned long long, void*, int*)>:
c000feaa:	55                   	push   ebp
c000feab:	57                   	push   edi
c000feac:	56                   	push   esi
c000fead:	53                   	push   ebx
c000feae:	83 ec 1c             	sub    esp,0x1c
c000feb1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000feb5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000feb9:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000febc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fec0:	89 04 24             	mov    DWORD PTR [esp],eax
c000fec3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fec7:	89 d8                	mov    eax,ebx
c000fec9:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000fecc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fed0:	89 d6                	mov    esi,edx
c000fed2:	89 d7                	mov    edi,edx
c000fed4:	c1 ff 1f             	sar    edi,0x1f
c000fed7:	03 34 24             	add    esi,DWORD PTR [esp]
c000feda:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000fede:	c1 f8 1f             	sar    eax,0x1f
c000fee1:	39 f3                	cmp    ebx,esi
c000fee3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fee7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000feeb:	19 f8                	sbb    eax,edi
c000feed:	b8 01 00 00 00       	mov    eax,0x1
c000fef2:	72 6e                	jb     c000ff62 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000fef4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fef7:	01 d0                	add    eax,edx
c000fef9:	99                   	cdq    
c000fefa:	f7 fb                	idiv   ebx
c000fefc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff00:	29 d3                	sub    ebx,edx
c000ff02:	89 d7                	mov    edi,edx
c000ff04:	89 de                	mov    esi,ebx
c000ff06:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000ff09:	c1 fb 1f             	sar    ebx,0x1f
c000ff0c:	39 f2                	cmp    edx,esi
c000ff0e:	19 d8                	sbb    eax,ebx
c000ff10:	b8 00 00 00 00       	mov    eax,0x0
c000ff15:	72 04                	jb     c000ff1b <Pipe::write(unsigned long long, void*, int*)+0x71>
c000ff17:	89 d0                	mov    eax,edx
c000ff19:	29 f0                	sub    eax,esi
c000ff1b:	89 d3                	mov    ebx,edx
c000ff1d:	29 c3                	sub    ebx,eax
c000ff1f:	74 0b                	je     c000ff2c <Pipe::write(unsigned long long, void*, int*)+0x82>
c000ff21:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000ff24:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ff28:	89 d9                	mov    ecx,ebx
c000ff2a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff2c:	85 c0                	test   eax,eax
c000ff2e:	74 0d                	je     c000ff3d <Pipe::write(unsigned long long, void*, int*)+0x93>
c000ff30:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ff34:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000ff37:	89 de                	mov    esi,ebx
c000ff39:	89 c1                	mov    ecx,eax
c000ff3b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff3d:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000ff40:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ff45:	75 10                	jne    c000ff57 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000ff47:	83 ec 0c             	sub    esp,0xc
c000ff4a:	68 91 a1 02 c0       	push   0xc002a191
c000ff4f:	e8 3b 9f 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c000ff54:	83 c4 10             	add    esp,0x10
c000ff57:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ff5b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000ff5e:	89 08                	mov    DWORD PTR [eax],ecx
c000ff60:	31 c0                	xor    eax,eax
c000ff62:	83 c4 1c             	add    esp,0x1c
c000ff65:	5b                   	pop    ebx
c000ff66:	5e                   	pop    esi
c000ff67:	5f                   	pop    edi
c000ff68:	5d                   	pop    ebp
c000ff69:	c3                   	ret    

c000ff6a <Pipe::Pipe(int)>:
c000ff6a:	83 ec 0c             	sub    esp,0xc
c000ff6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff71:	83 ec 08             	sub    esp,0x8
c000ff74:	6a 00                	push   0x0
c000ff76:	50                   	push   eax
c000ff77:	e8 60 0e 00 00       	call   c0010ddc <UnixFile::UnixFile(int)>
c000ff7c:	83 c4 10             	add    esp,0x10
c000ff7f:	ba b8 a1 02 c0       	mov    edx,0xc002a1b8
c000ff84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff88:	89 10                	mov    DWORD PTR [eax],edx
c000ff8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ff92:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ff95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff99:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ffa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffa4:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ffab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffaf:	83 ec 0c             	sub    esp,0xc
c000ffb2:	50                   	push   eax
c000ffb3:	e8 e1 f5 ff ff       	call   c000f599 <malloc>
c000ffb8:	83 c4 10             	add    esp,0x10
c000ffbb:	89 c2                	mov    edx,eax
c000ffbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ffc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc8:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000ffcc:	90                   	nop
c000ffcd:	83 c4 0c             	add    esp,0xc
c000ffd0:	c3                   	ret    
c000ffd1:	90                   	nop

c000ffd2 <VgaText::isAtty()>:
c000ffd2:	b0 01                	mov    al,0x1
c000ffd4:	c3                   	ret    
c000ffd5:	90                   	nop

c000ffd6 <VgaText::~VgaText()>:
c000ffd6:	83 ec 0c             	sub    esp,0xc
c000ffd9:	ba 40 a2 02 c0       	mov    edx,0xc002a240
c000ffde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe2:	89 10                	mov    DWORD PTR [eax],edx
c000ffe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe8:	83 ec 0c             	sub    esp,0xc
c000ffeb:	50                   	push   eax
c000ffec:	e8 cd 0f 00 00       	call   c0010fbe <UnixFile::~UnixFile()>
c000fff1:	83 c4 10             	add    esp,0x10
c000fff4:	90                   	nop
c000fff5:	83 c4 0c             	add    esp,0xc
c000fff8:	c3                   	ret    
c000fff9:	90                   	nop

c000fffa <VgaText::~VgaText()>:
c000fffa:	83 ec 0c             	sub    esp,0xc
c000fffd:	83 ec 0c             	sub    esp,0xc
c0010000:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010004:	e8 cd ff ff ff       	call   c000ffd6 <VgaText::~VgaText()>
c0010009:	83 c4 10             	add    esp,0x10
c001000c:	83 ec 08             	sub    esp,0x8
c001000f:	68 c4 02 00 00       	push   0x2c4
c0010014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010018:	e8 2e 26 00 00       	call   c001264b <operator delete(void*, unsigned long)>
c001001d:	83 c4 10             	add    esp,0x10
c0010020:	83 c4 0c             	add    esp,0xc
c0010023:	c3                   	ret    

c0010024 <VgaText::read(unsigned long long, void*, int*)>:
c0010024:	83 ec 10             	sub    esp,0x10
c0010027:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001002b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001002f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010033:	e8 b2 5b 00 00       	call   c0015bea <readKeyboard(VgaText*, char*, unsigned long)>
c0010038:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001003c:	89 02                	mov    DWORD PTR [edx],eax
c001003e:	31 c0                	xor    eax,eax
c0010040:	83 c4 1c             	add    esp,0x1c
c0010043:	c3                   	ret    

c0010044 <setTerminalScrollLock(bool)>:
c0010044:	c3                   	ret    

c0010045 <addToTerminalCycle(VgaText*)>:
c0010045:	8b 15 c0 da 02 c0    	mov    edx,DWORD PTR ds:0xc002dac0
c001004b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001004f:	85 d2                	test   edx,edx
c0010051:	75 09                	jne    c001005c <addToTerminalCycle(VgaText*)+0x17>
c0010053:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c0010056:	a3 c0 da 02 c0       	mov    ds:0xc002dac0,eax
c001005b:	c3                   	ret    
c001005c:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c001005f:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0010062:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c0010065:	c3                   	ret    

c0010066 <installVgaTextImplementation()>:
c0010066:	83 ec 10             	sub    esp,0x10
c0010069:	6a 20                	push   0x20
c001006b:	6a 00                	push   0x0
c001006d:	68 a0 da 02 c0       	push   0xc002daa0
c0010072:	e8 d9 06 ff ff       	call   c0000750 <memset>
c0010077:	83 c4 1c             	add    esp,0x1c
c001007a:	c3                   	ret    

c001007b <scrollTerminalScrollLock(int)>:
c001007b:	c3                   	ret    

c001007c <VgaText::updateTitle()>:
c001007c:	53                   	push   ebx
c001007d:	31 c0                	xor    eax,eax
c001007f:	83 ec 58             	sub    esp,0x58
c0010082:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010086:	89 e1                	mov    ecx,esp
c0010088:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001008c:	40                   	inc    eax
c001008d:	83 f8 50             	cmp    eax,0x50
c0010090:	75 f6                	jne    c0010088 <VgaText::updateTitle()+0xc>
c0010092:	31 c0                	xor    eax,eax
c0010094:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c001009b:	84 db                	test   bl,bl
c001009d:	74 06                	je     c00100a5 <VgaText::updateTitle()+0x29>
c001009f:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00100a2:	40                   	inc    eax
c00100a3:	eb ef                	jmp    c0010094 <VgaText::updateTitle()+0x18>
c00100a5:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c00100a8:	85 c0                	test   eax,eax
c00100aa:	74 09                	je     c00100b5 <VgaText::updateTitle()+0x39>
c00100ac:	53                   	push   ebx
c00100ad:	53                   	push   ebx
c00100ae:	51                   	push   ecx
c00100af:	52                   	push   edx
c00100b0:	ff d0                	call   eax
c00100b2:	83 c4 10             	add    esp,0x10
c00100b5:	83 c4 58             	add    esp,0x58
c00100b8:	5b                   	pop    ebx
c00100b9:	c3                   	ret    

c00100ba <VgaText::load()>:
c00100ba:	53                   	push   ebx
c00100bb:	31 c0                	xor    eax,eax
c00100bd:	83 ec 58             	sub    esp,0x58
c00100c0:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00100c4:	89 e2                	mov    edx,esp
c00100c6:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00100ca:	40                   	inc    eax
c00100cb:	83 f8 50             	cmp    eax,0x50
c00100ce:	75 f6                	jne    c00100c6 <VgaText::load()+0xc>
c00100d0:	31 c0                	xor    eax,eax
c00100d2:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c00100d9:	84 c9                	test   cl,cl
c00100db:	74 06                	je     c00100e3 <VgaText::load()+0x29>
c00100dd:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00100e0:	40                   	inc    eax
c00100e1:	eb ef                	jmp    c00100d2 <VgaText::load()+0x18>
c00100e3:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c00100e6:	85 c0                	test   eax,eax
c00100e8:	74 09                	je     c00100f3 <VgaText::load()+0x39>
c00100ea:	51                   	push   ecx
c00100eb:	51                   	push   ecx
c00100ec:	52                   	push   edx
c00100ed:	53                   	push   ebx
c00100ee:	ff d0                	call   eax
c00100f0:	83 c4 10             	add    esp,0x10
c00100f3:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c00100f6:	85 c0                	test   eax,eax
c00100f8:	74 09                	je     c0010103 <VgaText::load()+0x49>
c00100fa:	83 ec 0c             	sub    esp,0xc
c00100fd:	53                   	push   ebx
c00100fe:	ff d0                	call   eax
c0010100:	83 c4 10             	add    esp,0x10
c0010103:	83 c4 58             	add    esp,0x58
c0010106:	5b                   	pop    ebx
c0010107:	c3                   	ret    

c0010108 <VgaText::updateCursor()>:
c0010108:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001010c:	39 05 c4 da 02 c0    	cmp    DWORD PTR ds:0xc002dac4,eax
c0010112:	75 09                	jne    c001011d <VgaText::updateCursor()+0x15>
c0010114:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c0010117:	85 c0                	test   eax,eax
c0010119:	74 02                	je     c001011d <VgaText::updateCursor()+0x15>
c001011b:	ff e0                	jmp    eax
c001011d:	c3                   	ret    

c001011e <VgaText::doANSI_SGR(int)>:
c001011e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010122:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010126:	85 d2                	test   edx,edx
c0010128:	75 0b                	jne    c0010135 <VgaText::doANSI_SGR(int)+0x17>
c001012a:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001012d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010130:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010133:	eb 59                	jmp    c001018e <VgaText::doANSI_SGR(int)+0x70>
c0010135:	83 fa 07             	cmp    edx,0x7
c0010138:	75 0b                	jne    c0010145 <VgaText::doANSI_SGR(int)+0x27>
c001013a:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001013d:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010140:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010143:	eb 49                	jmp    c001018e <VgaText::doANSI_SGR(int)+0x70>
c0010145:	83 fa 1b             	cmp    edx,0x1b
c0010148:	74 e0                	je     c001012a <VgaText::doANSI_SGR(int)+0xc>
c001014a:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001014d:	83 f9 07             	cmp    ecx,0x7
c0010150:	77 09                	ja     c001015b <VgaText::doANSI_SGR(int)+0x3d>
c0010152:	8b 14 8d 60 c9 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd36a0]
c0010159:	eb 20                	jmp    c001017b <VgaText::doANSI_SGR(int)+0x5d>
c001015b:	8d 4a d8             	lea    ecx,[edx-0x28]
c001015e:	83 f9 07             	cmp    ecx,0x7
c0010161:	77 09                	ja     c001016c <VgaText::doANSI_SGR(int)+0x4e>
c0010163:	8b 14 8d 60 c9 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd36a0]
c001016a:	eb 22                	jmp    c001018e <VgaText::doANSI_SGR(int)+0x70>
c001016c:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001016f:	83 f9 07             	cmp    ecx,0x7
c0010172:	77 0b                	ja     c001017f <VgaText::doANSI_SGR(int)+0x61>
c0010174:	8b 14 95 18 c8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd37e8]
c001017b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001017e:	c3                   	ret    
c001017f:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010182:	83 f9 07             	cmp    ecx,0x7
c0010185:	77 0a                	ja     c0010191 <VgaText::doANSI_SGR(int)+0x73>
c0010187:	8b 14 95 f0 c7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3810]
c001018e:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010191:	c3                   	ret    

c0010192 <VgaText::setDefaultBgColour(VgaColour)>:
c0010192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001019a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001019d:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00101a0:	c3                   	ret    
c00101a1:	90                   	nop

c00101a2 <VgaText::setDefaultFgColour(VgaColour)>:
c00101a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101aa:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00101ad:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00101b0:	c3                   	ret    
c00101b1:	90                   	nop

c00101b2 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00101b2:	53                   	push   ebx
c00101b3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00101b7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00101bb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00101bf:	51                   	push   ecx
c00101c0:	e8 cd ff ff ff       	call   c0010192 <VgaText::setDefaultBgColour(VgaColour)>
c00101c5:	58                   	pop    eax
c00101c6:	5a                   	pop    edx
c00101c7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00101cb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00101cf:	5b                   	pop    ebx
c00101d0:	eb d0                	jmp    c00101a2 <VgaText::setDefaultFgColour(VgaColour)>

c00101d2 <VgaText::setTitleTextColour(VgaColour)>:
c00101d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101da:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00101dd:	e9 9a fe ff ff       	jmp    c001007c <VgaText::updateTitle()>

c00101e2 <VgaText::setTitleColour(VgaColour)>:
c00101e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101ea:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00101ed:	e9 8a fe ff ff       	jmp    c001007c <VgaText::updateTitle()>

c00101f2 <VgaText::setTitle(char*)>:
c00101f2:	53                   	push   ebx
c00101f3:	83 ec 10             	sub    esp,0x10
c00101f6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00101fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101fe:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010204:	50                   	push   eax
c0010205:	e8 02 06 ff ff       	call   c000080c <strcpy>
c001020a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001020e:	83 c4 18             	add    esp,0x18
c0010211:	5b                   	pop    ebx
c0010212:	e9 65 fe ff ff       	jmp    c001007c <VgaText::updateTitle()>
c0010217:	90                   	nop

c0010218 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010218:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001021c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010221:	83 e0 0f             	and    eax,0xf
c0010224:	c1 e2 04             	shl    edx,0x4
c0010227:	09 d0                	or     eax,edx
c0010229:	c3                   	ret    

c001022a <VgaText::scrollScreen()>:
c001022a:	55                   	push   ebp
c001022b:	b9 01 00 00 00       	mov    ecx,0x1
c0010230:	57                   	push   edi
c0010231:	56                   	push   esi
c0010232:	53                   	push   ebx
c0010233:	83 ec 0c             	sub    esp,0xc
c0010236:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001023a:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0010240:	31 ff                	xor    edi,edi
c0010242:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0010245:	83 f9 17             	cmp    ecx,0x17
c0010248:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c001024b:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0010252:	75 27                	jne    c001027b <VgaText::scrollScreen()+0x51>
c0010254:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010257:	01 f5                	add    ebp,esi
c0010259:	f7 c7 01 00 00 00    	test   edi,0x1
c001025f:	74 16                	je     c0010277 <VgaText::scrollScreen()+0x4d>
c0010261:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010265:	50                   	push   eax
c0010266:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001026a:	50                   	push   eax
c001026b:	e8 a8 ff ff ff       	call   c0010218 <VgaText::combineColours(unsigned char, unsigned char)>
c0010270:	5a                   	pop    edx
c0010271:	5a                   	pop    edx
c0010272:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010275:	eb 04                	jmp    c001027b <VgaText::scrollScreen()+0x51>
c0010277:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c001027b:	47                   	inc    edi
c001027c:	46                   	inc    esi
c001027d:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010283:	75 bd                	jne    c0010242 <VgaText::scrollScreen()+0x18>
c0010285:	41                   	inc    ecx
c0010286:	83 f9 18             	cmp    ecx,0x18
c0010289:	75 af                	jne    c001023a <VgaText::scrollScreen()+0x10>
c001028b:	39 1d c4 da 02 c0    	cmp    DWORD PTR ds:0xc002dac4,ebx
c0010291:	75 1b                	jne    c00102ae <VgaText::scrollScreen()+0x84>
c0010293:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010297:	74 05                	je     c001029e <VgaText::scrollScreen()+0x74>
c0010299:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001029c:	eb 10                	jmp    c00102ae <VgaText::scrollScreen()+0x84>
c001029e:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c00102a1:	85 c0                	test   eax,eax
c00102a3:	74 09                	je     c00102ae <VgaText::scrollScreen()+0x84>
c00102a5:	83 ec 0c             	sub    esp,0xc
c00102a8:	53                   	push   ebx
c00102a9:	ff d0                	call   eax
c00102ab:	83 c4 10             	add    esp,0x10
c00102ae:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00102b2:	83 c4 0c             	add    esp,0xc
c00102b5:	5b                   	pop    ebx
c00102b6:	5e                   	pop    esi
c00102b7:	5f                   	pop    edi
c00102b8:	5d                   	pop    ebp
c00102b9:	e9 4a fe ff ff       	jmp    c0010108 <VgaText::updateCursor()>

c00102be <VgaText::combineCharAndColour(char, unsigned char)>:
c00102be:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00102c3:	c1 e0 08             	shl    eax,0x8
c00102c6:	89 c2                	mov    edx,eax
c00102c8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00102cd:	09 d0                	or     eax,edx
c00102cf:	c3                   	ret    

c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00102d0:	56                   	push   esi
c00102d1:	53                   	push   ebx
c00102d2:	51                   	push   ecx
c00102d3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00102d7:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00102dc:	50                   	push   eax
c00102dd:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00102e2:	50                   	push   eax
c00102e3:	e8 30 ff ff ff       	call   c0010218 <VgaText::combineColours(unsigned char, unsigned char)>
c00102e8:	5b                   	pop    ebx
c00102e9:	0f b6 c0             	movzx  eax,al
c00102ec:	5e                   	pop    esi
c00102ed:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00102f2:	50                   	push   eax
c00102f3:	53                   	push   ebx
c00102f4:	e8 c5 ff ff ff       	call   c00102be <VgaText::combineCharAndColour(char, unsigned char)>
c00102f9:	5a                   	pop    edx
c00102fa:	5e                   	pop    esi
c00102fb:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c00102fe:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010304:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010308:	0f b7 d2             	movzx  edx,dx
c001030b:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c001030f:	39 0d c4 da 02 c0    	cmp    DWORD PTR ds:0xc002dac4,ecx
c0010315:	75 10                	jne    c0010327 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010317:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c001031a:	85 c0                	test   eax,eax
c001031c:	74 09                	je     c0010327 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001031e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010322:	5a                   	pop    edx
c0010323:	5b                   	pop    ebx
c0010324:	5e                   	pop    esi
c0010325:	ff e0                	jmp    eax
c0010327:	58                   	pop    eax
c0010328:	5b                   	pop    ebx
c0010329:	5e                   	pop    esi
c001032a:	c3                   	ret    
c001032b:	90                   	nop

c001032c <VgaText::getCursorX()>:
c001032c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010330:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0010333:	c3                   	ret    

c0010334 <VgaText::getCursorY()>:
c0010334:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010338:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001033b:	c3                   	ret    

c001033c <VgaText::setCursor(int, int)>:
c001033c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010340:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010344:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0010347:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001034b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001034e:	e9 b5 fd ff ff       	jmp    c0010108 <VgaText::updateCursor()>

c0010353 <setActiveTerminal(VgaText*)>:
c0010353:	53                   	push   ebx
c0010354:	83 ec 08             	sub    esp,0x8
c0010357:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001035b:	85 db                	test   ebx,ebx
c001035d:	75 11                	jne    c0010370 <setActiveTerminal(VgaText*)+0x1d>
c001035f:	c7 44 24 10 cc a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a1cc
c0010367:	83 c4 08             	add    esp,0x8
c001036a:	5b                   	pop    ebx
c001036b:	e9 1f 9b 00 00       	jmp    c0019e8f <Krnl::panic(char const*)>
c0010370:	a1 c4 da 02 c0       	mov    eax,ds:0xc002dac4
c0010375:	85 c0                	test   eax,eax
c0010377:	74 0c                	je     c0010385 <setActiveTerminal(VgaText*)+0x32>
c0010379:	83 ec 0c             	sub    esp,0xc
c001037c:	50                   	push   eax
c001037d:	e8 86 fd ff ff       	call   c0010108 <VgaText::updateCursor()>
c0010382:	83 c4 10             	add    esp,0x10
c0010385:	89 1d c4 da 02 c0    	mov    DWORD PTR ds:0xc002dac4,ebx
c001038b:	51                   	push   ecx
c001038c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001038f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010392:	53                   	push   ebx
c0010393:	e8 a4 ff ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c0010398:	83 c4 10             	add    esp,0x10
c001039b:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001039f:	75 07                	jne    c00103a8 <setActiveTerminal(VgaText*)+0x55>
c00103a1:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c00103a8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00103ac:	83 c4 08             	add    esp,0x8
c00103af:	5b                   	pop    ebx
c00103b0:	e9 05 fd ff ff       	jmp    c00100ba <VgaText::load()>

c00103b5 <doTerminalCycle()>:
c00103b5:	83 ec 18             	sub    esp,0x18
c00103b8:	a1 c0 da 02 c0       	mov    eax,ds:0xc002dac0
c00103bd:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00103c0:	50                   	push   eax
c00103c1:	a3 c0 da 02 c0       	mov    ds:0xc002dac0,eax
c00103c6:	e8 88 ff ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c00103cb:	83 c4 1c             	add    esp,0x1c
c00103ce:	c3                   	ret    
c00103cf:	90                   	nop

c00103d0 <VgaText::setCursorX(int)>:
c00103d0:	83 ec 10             	sub    esp,0x10
c00103d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103d7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00103da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103de:	50                   	push   eax
c00103df:	e8 58 ff ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00103e4:	83 c4 1c             	add    esp,0x1c
c00103e7:	c3                   	ret    

c00103e8 <VgaText::setCursorY(int)>:
c00103e8:	83 ec 10             	sub    esp,0x10
c00103eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00103f3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00103f6:	50                   	push   eax
c00103f7:	e8 40 ff ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00103fc:	83 c4 1c             	add    esp,0x1c
c00103ff:	c3                   	ret    

c0010400 <VgaText::incrementCursor(bool)>:
c0010400:	56                   	push   esi
c0010401:	53                   	push   ebx
c0010402:	51                   	push   ecx
c0010403:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010407:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001040b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001040e:	40                   	inc    eax
c001040f:	83 f8 50             	cmp    eax,0x50
c0010412:	74 05                	je     c0010419 <VgaText::incrementCursor(bool)+0x19>
c0010414:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0010417:	eb 24                	jmp    c001043d <VgaText::incrementCursor(bool)+0x3d>
c0010419:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001041c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010423:	8d 50 01             	lea    edx,[eax+0x1]
c0010426:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010429:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001042c:	75 0f                	jne    c001043d <VgaText::incrementCursor(bool)+0x3d>
c001042e:	83 ec 0c             	sub    esp,0xc
c0010431:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010434:	53                   	push   ebx
c0010435:	e8 f0 fd ff ff       	call   c001022a <VgaText::scrollScreen()>
c001043a:	83 c4 10             	add    esp,0x10
c001043d:	89 f0                	mov    eax,esi
c001043f:	84 c0                	test   al,al
c0010441:	74 0c                	je     c001044f <VgaText::incrementCursor(bool)+0x4f>
c0010443:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010447:	5a                   	pop    edx
c0010448:	5b                   	pop    ebx
c0010449:	5e                   	pop    esi
c001044a:	e9 b9 fc ff ff       	jmp    c0010108 <VgaText::updateCursor()>
c001044f:	58                   	pop    eax
c0010450:	5b                   	pop    ebx
c0010451:	5e                   	pop    esi
c0010452:	c3                   	ret    
c0010453:	90                   	nop

c0010454 <VgaText::decrementCursor(bool)>:
c0010454:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010458:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001045c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001045f:	85 c0                	test   eax,eax
c0010461:	74 04                	je     c0010467 <VgaText::decrementCursor(bool)+0x13>
c0010463:	48                   	dec    eax
c0010464:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010467:	84 c9                	test   cl,cl
c0010469:	74 09                	je     c0010474 <VgaText::decrementCursor(bool)+0x20>
c001046b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001046f:	e9 94 fc ff ff       	jmp    c0010108 <VgaText::updateCursor()>
c0010474:	c3                   	ret    
c0010475:	90                   	nop

c0010476 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010476:	53                   	push   ebx
c0010477:	83 ec 08             	sub    esp,0x8
c001047a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001047e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010482:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010486:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001048a:	3c 07                	cmp    al,0x7
c001048c:	75 2a                	jne    c00104b8 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001048e:	a1 78 db 02 c0       	mov    eax,ds:0xc002db78
c0010493:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001049b:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c00104a3:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c00104ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00104af:	83 c4 08             	add    esp,0x8
c00104b2:	5b                   	pop    ebx
c00104b3:	e9 78 30 00 00       	jmp    c0013530 <Buzzer::beep(int, int, bool)>
c00104b8:	3c 0d                	cmp    al,0xd
c00104ba:	75 09                	jne    c00104c5 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c00104bc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00104c3:	eb 2c                	jmp    c00104f1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c00104c5:	3c 0a                	cmp    al,0xa
c00104c7:	75 31                	jne    c00104fa <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c00104c9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00104cc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00104d3:	8d 50 01             	lea    edx,[eax+0x1]
c00104d6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00104d9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00104dc:	75 0f                	jne    c00104ed <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c00104de:	83 ec 0c             	sub    esp,0xc
c00104e1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00104e4:	53                   	push   ebx
c00104e5:	e8 40 fd ff ff       	call   c001022a <VgaText::scrollScreen()>
c00104ea:	83 c4 10             	add    esp,0x10
c00104ed:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00104f1:	83 c4 08             	add    esp,0x8
c00104f4:	5b                   	pop    ebx
c00104f5:	e9 0e fc ff ff       	jmp    c0010108 <VgaText::updateCursor()>
c00104fa:	3c 08                	cmp    al,0x8
c00104fc:	75 25                	jne    c0010523 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c00104fe:	50                   	push   eax
c00104ff:	50                   	push   eax
c0010500:	6a 01                	push   0x1
c0010502:	53                   	push   ebx
c0010503:	e8 4c ff ff ff       	call   c0010454 <VgaText::decrementCursor(bool)>
c0010508:	5a                   	pop    edx
c0010509:	59                   	pop    ecx
c001050a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001050d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010510:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010513:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010516:	6a 20                	push   0x20
c0010518:	53                   	push   ebx
c0010519:	e8 b2 fd ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001051e:	83 c4 28             	add    esp,0x28
c0010521:	5b                   	pop    ebx
c0010522:	c3                   	ret    
c0010523:	83 ec 08             	sub    esp,0x8
c0010526:	0f be c0             	movsx  eax,al
c0010529:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001052c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001052f:	51                   	push   ecx
c0010530:	52                   	push   edx
c0010531:	50                   	push   eax
c0010532:	53                   	push   ebx
c0010533:	e8 98 fd ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010538:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c001053c:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010544:	83 c4 28             	add    esp,0x28
c0010547:	5b                   	pop    ebx
c0010548:	e9 b3 fe ff ff       	jmp    c0010400 <VgaText::incrementCursor(bool)>
c001054d:	90                   	nop

c001054e <VgaText::doUpdate()>:
c001054e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010552:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010555:	85 c0                	test   eax,eax
c0010557:	74 02                	je     c001055b <VgaText::doUpdate()+0xd>
c0010559:	ff e0                	jmp    eax
c001055b:	c3                   	ret    

c001055c <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001055c:	55                   	push   ebp
c001055d:	31 ed                	xor    ebp,ebp
c001055f:	57                   	push   edi
c0010560:	56                   	push   esi
c0010561:	53                   	push   ebx
c0010562:	83 ec 1c             	sub    esp,0x1c
c0010565:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010569:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001056e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010575:	50                   	push   eax
c0010576:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001057b:	50                   	push   eax
c001057c:	e8 97 fc ff ff       	call   c0010218 <VgaText::combineColours(unsigned char, unsigned char)>
c0010581:	59                   	pop    ecx
c0010582:	0f b6 c0             	movzx  eax,al
c0010585:	5e                   	pop    esi
c0010586:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001058b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001058f:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010592:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010596:	0f b7 f6             	movzx  esi,si
c0010599:	01 f6                	add    esi,esi
c001059b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001059e:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00105a1:	84 c0                	test   al,al
c00105a3:	0f 84 fd 00 00 00    	je     c00106a6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c00105a9:	3c 0d                	cmp    al,0xd
c00105ab:	75 0c                	jne    c00105b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c00105ad:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00105b4:	e9 e7 00 00 00       	jmp    c00106a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00105b9:	3c 0a                	cmp    al,0xa
c00105bb:	75 47                	jne    c0010604 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c00105bd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00105c0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00105c7:	8d 48 01             	lea    ecx,[eax+0x1]
c00105ca:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00105cd:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c00105d0:	75 0f                	jne    c00105e1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c00105d2:	83 ec 0c             	sub    esp,0xc
c00105d5:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00105d8:	53                   	push   ebx
c00105d9:	e8 4c fc ff ff       	call   c001022a <VgaText::scrollScreen()>
c00105de:	83 c4 10             	add    esp,0x10
c00105e1:	83 ec 0c             	sub    esp,0xc
c00105e4:	31 ed                	xor    ebp,ebp
c00105e6:	53                   	push   ebx
c00105e7:	e8 1c fb ff ff       	call   c0010108 <VgaText::updateCursor()>
c00105ec:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00105f1:	83 c4 10             	add    esp,0x10
c00105f4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00105f7:	0f b7 f6             	movzx  esi,si
c00105fa:	01 f6                	add    esi,esi
c00105fc:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00105ff:	e9 9c 00 00 00       	jmp    c00106a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010604:	3c 08                	cmp    al,0x8
c0010606:	75 35                	jne    c001063d <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010608:	56                   	push   esi
c0010609:	56                   	push   esi
c001060a:	6a 01                	push   0x1
c001060c:	53                   	push   ebx
c001060d:	e8 42 fe ff ff       	call   c0010454 <VgaText::decrementCursor(bool)>
c0010612:	58                   	pop    eax
c0010613:	5a                   	pop    edx
c0010614:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010617:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001061a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001061d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010620:	6a 20                	push   0x20
c0010622:	53                   	push   ebx
c0010623:	e8 a8 fc ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010628:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001062d:	83 c4 20             	add    esp,0x20
c0010630:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010633:	0f b7 f6             	movzx  esi,si
c0010636:	01 f6                	add    esi,esi
c0010638:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001063b:	eb 63                	jmp    c00106a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c001063d:	51                   	push   ecx
c001063e:	51                   	push   ecx
c001063f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010643:	50                   	push   eax
c0010644:	e8 75 fc ff ff       	call   c00102be <VgaText::combineCharAndColour(char, unsigned char)>
c0010649:	83 c4 10             	add    esp,0x10
c001064c:	66 89 06             	mov    WORD PTR [esi],ax
c001064f:	39 1d c4 da 02 c0    	cmp    DWORD PTR ds:0xc002dac4,ebx
c0010655:	75 21                	jne    c0010678 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010657:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c001065a:	85 c0                	test   eax,eax
c001065c:	74 1a                	je     c0010678 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c001065e:	52                   	push   edx
c001065f:	52                   	push   edx
c0010660:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010663:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010666:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001066a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001066e:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010671:	51                   	push   ecx
c0010672:	53                   	push   ebx
c0010673:	ff d0                	call   eax
c0010675:	83 c4 20             	add    esp,0x20
c0010678:	83 c6 02             	add    esi,0x2
c001067b:	50                   	push   eax
c001067c:	50                   	push   eax
c001067d:	6a 00                	push   0x0
c001067f:	53                   	push   ebx
c0010680:	e8 7b fd ff ff       	call   c0010400 <VgaText::incrementCursor(bool)>
c0010685:	83 c4 10             	add    esp,0x10
c0010688:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c001068c:	75 0d                	jne    c001069b <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c001068e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010693:	0f b7 f6             	movzx  esi,si
c0010696:	01 f6                	add    esi,esi
c0010698:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001069b:	bd 01 00 00 00       	mov    ebp,0x1
c00106a0:	47                   	inc    edi
c00106a1:	e9 f8 fe ff ff       	jmp    c001059e <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c00106a6:	83 ec 0c             	sub    esp,0xc
c00106a9:	53                   	push   ebx
c00106aa:	e8 59 fa ff ff       	call   c0010108 <VgaText::updateCursor()>
c00106af:	83 c4 10             	add    esp,0x10
c00106b2:	89 e8                	mov    eax,ebp
c00106b4:	84 c0                	test   al,al
c00106b6:	74 0c                	je     c00106c4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c00106b8:	83 ec 0c             	sub    esp,0xc
c00106bb:	53                   	push   ebx
c00106bc:	e8 8d fe ff ff       	call   c001054e <VgaText::doUpdate()>
c00106c1:	83 c4 10             	add    esp,0x10
c00106c4:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00106cb:	83 c4 1c             	add    esp,0x1c
c00106ce:	5b                   	pop    ebx
c00106cf:	5e                   	pop    esi
c00106d0:	5f                   	pop    edi
c00106d1:	5d                   	pop    ebp
c00106d2:	c3                   	ret    
c00106d3:	90                   	nop

c00106d4 <VgaText::clearScreen()>:
c00106d4:	57                   	push   edi
c00106d5:	56                   	push   esi
c00106d6:	31 f6                	xor    esi,esi
c00106d8:	53                   	push   ebx
c00106d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106dd:	52                   	push   edx
c00106de:	6a 00                	push   0x0
c00106e0:	6a 00                	push   0x0
c00106e2:	53                   	push   ebx
c00106e3:	e8 54 fc ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00106e8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00106ef:	83 c4 10             	add    esp,0x10
c00106f2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00106f5:	7e 20                	jle    c0010717 <VgaText::clearScreen()+0x43>
c00106f7:	31 ff                	xor    edi,edi
c00106f9:	50                   	push   eax
c00106fa:	50                   	push   eax
c00106fb:	56                   	push   esi
c00106fc:	57                   	push   edi
c00106fd:	47                   	inc    edi
c00106fe:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010701:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010704:	6a 20                	push   0x20
c0010706:	53                   	push   ebx
c0010707:	e8 c4 fb ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001070c:	83 c4 20             	add    esp,0x20
c001070f:	83 ff 50             	cmp    edi,0x50
c0010712:	75 e5                	jne    c00106f9 <VgaText::clearScreen()+0x25>
c0010714:	46                   	inc    esi
c0010715:	eb db                	jmp    c00106f2 <VgaText::clearScreen()+0x1e>
c0010717:	83 ec 0c             	sub    esp,0xc
c001071a:	53                   	push   ebx
c001071b:	e8 2e fe ff ff       	call   c001054e <VgaText::doUpdate()>
c0010720:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010727:	83 c4 10             	add    esp,0x10
c001072a:	5b                   	pop    ebx
c001072b:	5e                   	pop    esi
c001072c:	5f                   	pop    edi
c001072d:	c3                   	ret    

c001072e <VgaText::putchar(char)>:
c001072e:	56                   	push   esi
c001072f:	53                   	push   ebx
c0010730:	83 ec 14             	sub    esp,0x14
c0010733:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010737:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001073b:	3c 5b                	cmp    al,0x5b
c001073d:	75 18                	jne    c0010757 <VgaText::putchar(char)+0x29>
c001073f:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010743:	74 1f                	je     c0010764 <VgaText::putchar(char)+0x36>
c0010745:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c001074b:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010752:	e9 bd 00 00 00       	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c0010757:	3c 1b                	cmp    al,0x1b
c0010759:	75 09                	jne    c0010764 <VgaText::putchar(char)+0x36>
c001075b:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c001075f:	e9 b0 00 00 00       	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c0010764:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010767:	84 c9                	test   cl,cl
c0010769:	0f 84 92 00 00 00    	je     c0010801 <VgaText::putchar(char)+0xd3>
c001076f:	8d 50 c0             	lea    edx,[eax-0x40]
c0010772:	80 fa 3e             	cmp    dl,0x3e
c0010775:	77 76                	ja     c00107ed <VgaText::putchar(char)+0xbf>
c0010777:	3c 6d                	cmp    al,0x6d
c0010779:	75 47                	jne    c00107c2 <VgaText::putchar(char)+0x94>
c001077b:	31 f6                	xor    esi,esi
c001077d:	31 d2                	xor    edx,edx
c001077f:	31 c0                	xor    eax,eax
c0010781:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010784:	7e 2d                	jle    c00107b3 <VgaText::putchar(char)+0x85>
c0010786:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c001078b:	80 fa 3b             	cmp    dl,0x3b
c001078e:	75 17                	jne    c00107a7 <VgaText::putchar(char)+0x79>
c0010790:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010794:	50                   	push   eax
c0010795:	53                   	push   ebx
c0010796:	e8 83 f9 ff ff       	call   c001011e <VgaText::doANSI_SGR(int)>
c001079b:	59                   	pop    ecx
c001079c:	31 d2                	xor    edx,edx
c001079e:	58                   	pop    eax
c001079f:	31 c0                	xor    eax,eax
c00107a1:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00107a5:	eb 09                	jmp    c00107b0 <VgaText::putchar(char)+0x82>
c00107a7:	6b c0 0a             	imul   eax,eax,0xa
c00107aa:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00107ae:	88 ca                	mov    dl,cl
c00107b0:	46                   	inc    esi
c00107b1:	eb ce                	jmp    c0010781 <VgaText::putchar(char)+0x53>
c00107b3:	84 d2                	test   dl,dl
c00107b5:	74 2e                	je     c00107e5 <VgaText::putchar(char)+0xb7>
c00107b7:	50                   	push   eax
c00107b8:	53                   	push   ebx
c00107b9:	e8 60 f9 ff ff       	call   c001011e <VgaText::doANSI_SGR(int)>
c00107be:	58                   	pop    eax
c00107bf:	5a                   	pop    edx
c00107c0:	eb 23                	jmp    c00107e5 <VgaText::putchar(char)+0xb7>
c00107c2:	3c 4a                	cmp    al,0x4a
c00107c4:	75 1f                	jne    c00107e5 <VgaText::putchar(char)+0xb7>
c00107c6:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00107ca:	75 19                	jne    c00107e5 <VgaText::putchar(char)+0xb7>
c00107cc:	83 ec 0c             	sub    esp,0xc
c00107cf:	53                   	push   ebx
c00107d0:	e8 ff fe ff ff       	call   c00106d4 <VgaText::clearScreen()>
c00107d5:	83 c4 0c             	add    esp,0xc
c00107d8:	6a 00                	push   0x0
c00107da:	6a 00                	push   0x0
c00107dc:	53                   	push   ebx
c00107dd:	e8 5a fb ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00107e2:	83 c4 10             	add    esp,0x10
c00107e5:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00107eb:	eb 27                	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c00107ed:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00107f0:	83 fa 0e             	cmp    edx,0xe
c00107f3:	7f 1f                	jg     c0010814 <VgaText::putchar(char)+0xe6>
c00107f5:	8d 4a 01             	lea    ecx,[edx+0x1]
c00107f8:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00107fb:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00107ff:	eb 13                	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c0010801:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010804:	0f be c0             	movsx  eax,al
c0010807:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001080a:	50                   	push   eax
c001080b:	53                   	push   ebx
c001080c:	e8 65 fc ff ff       	call   c0010476 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010811:	83 c4 10             	add    esp,0x10
c0010814:	83 c4 14             	add    esp,0x14
c0010817:	5b                   	pop    ebx
c0010818:	5e                   	pop    esi
c0010819:	c3                   	ret    

c001081a <VgaText::putx(unsigned int)>:
c001081a:	57                   	push   edi
c001081b:	b9 11 00 00 00       	mov    ecx,0x11
c0010820:	56                   	push   esi
c0010821:	be da a1 02 c0       	mov    esi,0xc002a1da
c0010826:	53                   	push   ebx
c0010827:	83 ec 20             	sub    esp,0x20
c001082a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001082e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010832:	fc                   	cld    
c0010833:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010835:	be 08 00 00 00       	mov    esi,0x8
c001083a:	50                   	push   eax
c001083b:	50                   	push   eax
c001083c:	89 d8                	mov    eax,ebx
c001083e:	c1 e3 04             	shl    ebx,0x4
c0010841:	c1 e8 1c             	shr    eax,0x1c
c0010844:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010849:	50                   	push   eax
c001084a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001084e:	e8 db fe ff ff       	call   c001072e <VgaText::putchar(char)>
c0010853:	83 c4 10             	add    esp,0x10
c0010856:	4e                   	dec    esi
c0010857:	75 e1                	jne    c001083a <VgaText::putx(unsigned int)+0x20>
c0010859:	83 c4 20             	add    esp,0x20
c001085c:	5b                   	pop    ebx
c001085d:	5e                   	pop    esi
c001085e:	5f                   	pop    edi
c001085f:	c3                   	ret    

c0010860 <VgaText::puts(char const*)>:
c0010860:	53                   	push   ebx
c0010861:	83 ec 08             	sub    esp,0x8
c0010864:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010868:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001086b:	84 c0                	test   al,al
c001086d:	74 12                	je     c0010881 <VgaText::puts(char const*)+0x21>
c001086f:	43                   	inc    ebx
c0010870:	51                   	push   ecx
c0010871:	51                   	push   ecx
c0010872:	50                   	push   eax
c0010873:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010877:	e8 b2 fe ff ff       	call   c001072e <VgaText::putchar(char)>
c001087c:	83 c4 10             	add    esp,0x10
c001087f:	eb e7                	jmp    c0010868 <VgaText::puts(char const*)+0x8>
c0010881:	83 c4 08             	add    esp,0x8
c0010884:	5b                   	pop    ebx
c0010885:	c3                   	ret    

c0010886 <VgaText::VgaText(char const*)>:
c0010886:	57                   	push   edi
c0010887:	56                   	push   esi
c0010888:	53                   	push   ebx
c0010889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001088d:	83 ec 08             	sub    esp,0x8
c0010890:	6a 00                	push   0x0
c0010892:	50                   	push   eax
c0010893:	e8 44 05 00 00       	call   c0010ddc <UnixFile::UnixFile(int)>
c0010898:	83 c4 10             	add    esp,0x10
c001089b:	ba 40 a2 02 c0       	mov    edx,0xc002a240
c00108a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a4:	89 10                	mov    DWORD PTR [eax],edx
c00108a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108aa:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00108b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b5:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00108bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c0:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00108c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c8:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00108cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108d0:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00108d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108db:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00108e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e6:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00108ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f1:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00108f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108fc:	8d 50 60             	lea    edx,[eax+0x60]
c00108ff:	bb a0 da 02 c0       	mov    ebx,0xc002daa0
c0010904:	b8 08 00 00 00       	mov    eax,0x8
c0010909:	fc                   	cld    
c001090a:	89 d7                	mov    edi,edx
c001090c:	89 de                	mov    esi,ebx
c001090e:	89 c1                	mov    ecx,eax
c0010910:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010916:	05 82 00 00 00       	add    eax,0x82
c001091b:	83 ec 08             	sub    esp,0x8
c001091e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010922:	50                   	push   eax
c0010923:	e8 e4 fe fe ff       	call   c000080c <strcpy>
c0010928:	83 c4 10             	add    esp,0x10
c001092b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001092f:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0010936:	83 ec 0c             	sub    esp,0xc
c0010939:	6a 01                	push   0x1
c001093b:	e8 df 08 00 00       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0010940:	83 c4 10             	add    esp,0x10
c0010943:	89 c2                	mov    edx,eax
c0010945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010949:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001094c:	8b 1d 70 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db70
c0010952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010956:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010959:	89 c6                	mov    esi,eax
c001095b:	e8 35 f0 ff ff       	call   c000f995 <Phys::allocatePage()>
c0010960:	68 05 0c 00 00       	push   0xc05
c0010965:	56                   	push   esi
c0010966:	50                   	push   eax
c0010967:	53                   	push   ebx
c0010968:	e8 c3 10 00 00       	call   c0011a30 <VAS::mapPage(unsigned long, unsigned long, int)>
c001096d:	83 c4 10             	add    esp,0x10
c0010970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010974:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010977:	83 ec 04             	sub    esp,0x4
c001097a:	68 00 0f 00 00       	push   0xf00
c001097f:	6a 00                	push   0x0
c0010981:	50                   	push   eax
c0010982:	e8 c9 fd fe ff       	call   c0000750 <memset>
c0010987:	83 c4 10             	add    esp,0x10
c001098a:	83 ec 04             	sub    esp,0x4
c001098d:	6a 00                	push   0x0
c001098f:	6a 07                	push   0x7
c0010991:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010995:	e8 18 f8 ff ff       	call   c00101b2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001099a:	83 c4 10             	add    esp,0x10
c001099d:	83 ec 04             	sub    esp,0x4
c00109a0:	6a 00                	push   0x0
c00109a2:	6a 00                	push   0x0
c00109a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109a8:	e8 8f f9 ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00109ad:	83 c4 10             	add    esp,0x10
c00109b0:	83 ec 0c             	sub    esp,0xc
c00109b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109b7:	e8 18 fd ff ff       	call   c00106d4 <VgaText::clearScreen()>
c00109bc:	83 c4 10             	add    esp,0x10
c00109bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c3:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00109c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109cb:	05 02 01 00 00       	add    eax,0x102
c00109d0:	83 ec 04             	sub    esp,0x4
c00109d3:	68 96 00 00 00       	push   0x96
c00109d8:	6a 00                	push   0x0
c00109da:	50                   	push   eax
c00109db:	e8 70 fd fe ff       	call   c0000750 <memset>
c00109e0:	83 c4 10             	add    esp,0x10
c00109e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109e7:	05 98 01 00 00       	add    eax,0x198
c00109ec:	83 ec 04             	sub    esp,0x4
c00109ef:	68 2c 01 00 00       	push   0x12c
c00109f4:	6a 00                	push   0x0
c00109f6:	50                   	push   eax
c00109f7:	e8 54 fd fe ff       	call   c0000750 <memset>
c00109fc:	83 c4 10             	add    esp,0x10
c00109ff:	90                   	nop
c0010a00:	5b                   	pop    ebx
c0010a01:	5e                   	pop    esi
c0010a02:	5f                   	pop    edi
c0010a03:	c3                   	ret    

c0010a04 <VgaText::receiveKey(unsigned char)>:
c0010a04:	55                   	push   ebp
c0010a05:	57                   	push   edi
c0010a06:	56                   	push   esi
c0010a07:	53                   	push   ebx
c0010a08:	83 ec 1c             	sub    esp,0x1c
c0010a0b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010a0f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010a13:	84 db                	test   bl,bl
c0010a15:	0f 84 c9 00 00 00    	je     c0010ae4 <VgaText::receiveKey(unsigned char)+0xe0>
c0010a1b:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0010a21:	80 fb 08             	cmp    bl,0x8
c0010a24:	75 2c                	jne    c0010a52 <VgaText::receiveKey(unsigned char)+0x4e>
c0010a26:	83 ec 0c             	sub    esp,0xc
c0010a29:	57                   	push   edi
c0010a2a:	e8 3d fd fe ff       	call   c000076c <strlen>
c0010a2f:	83 c4 10             	add    esp,0x10
c0010a32:	85 c0                	test   eax,eax
c0010a34:	74 41                	je     c0010a77 <VgaText::receiveKey(unsigned char)+0x73>
c0010a36:	50                   	push   eax
c0010a37:	50                   	push   eax
c0010a38:	6a 08                	push   0x8
c0010a3a:	56                   	push   esi
c0010a3b:	e8 ee fc ff ff       	call   c001072e <VgaText::putchar(char)>
c0010a40:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a43:	e8 24 fd fe ff       	call   c000076c <strlen>
c0010a48:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010a50:	eb 22                	jmp    c0010a74 <VgaText::receiveKey(unsigned char)+0x70>
c0010a52:	0f be c3             	movsx  eax,bl
c0010a55:	52                   	push   edx
c0010a56:	52                   	push   edx
c0010a57:	50                   	push   eax
c0010a58:	56                   	push   esi
c0010a59:	e8 d0 fc ff ff       	call   c001072e <VgaText::putchar(char)>
c0010a5e:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010a62:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010a67:	59                   	pop    ecx
c0010a68:	5d                   	pop    ebp
c0010a69:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010a6d:	50                   	push   eax
c0010a6e:	57                   	push   edi
c0010a6f:	e8 d8 fe fe ff       	call   c000094c <strcat>
c0010a74:	83 c4 10             	add    esp,0x10
c0010a77:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010a7e:	75 05                	jne    c0010a85 <VgaText::receiveKey(unsigned char)+0x81>
c0010a80:	80 fb 0a             	cmp    bl,0xa
c0010a83:	75 53                	jne    c0010ad8 <VgaText::receiveKey(unsigned char)+0xd4>
c0010a85:	83 ec 0c             	sub    esp,0xc
c0010a88:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010a8e:	53                   	push   ebx
c0010a8f:	e8 d8 fc fe ff       	call   c000076c <strlen>
c0010a94:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a97:	89 c5                	mov    ebp,eax
c0010a99:	e8 ce fc fe ff       	call   c000076c <strlen>
c0010a9e:	83 c4 10             	add    esp,0x10
c0010aa1:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010aa5:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010aaa:	76 10                	jbe    c0010abc <VgaText::receiveKey(unsigned char)+0xb8>
c0010aac:	83 ec 0c             	sub    esp,0xc
c0010aaf:	68 eb a1 02 c0       	push   0xc002a1eb
c0010ab4:	e8 d6 93 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c0010ab9:	83 c4 10             	add    esp,0x10
c0010abc:	50                   	push   eax
c0010abd:	50                   	push   eax
c0010abe:	57                   	push   edi
c0010abf:	53                   	push   ebx
c0010ac0:	e8 87 fe fe ff       	call   c000094c <strcat>
c0010ac5:	83 c4 0c             	add    esp,0xc
c0010ac8:	68 96 00 00 00       	push   0x96
c0010acd:	6a 00                	push   0x0
c0010acf:	57                   	push   edi
c0010ad0:	e8 7b fc fe ff       	call   c0000750 <memset>
c0010ad5:	83 c4 10             	add    esp,0x10
c0010ad8:	83 ec 0c             	sub    esp,0xc
c0010adb:	56                   	push   esi
c0010adc:	e8 6d fa ff ff       	call   c001054e <VgaText::doUpdate()>
c0010ae1:	83 c4 10             	add    esp,0x10
c0010ae4:	83 c4 1c             	add    esp,0x1c
c0010ae7:	5b                   	pop    ebx
c0010ae8:	5e                   	pop    esi
c0010ae9:	5f                   	pop    edi
c0010aea:	5d                   	pop    ebp
c0010aeb:	c3                   	ret    

c0010aec <VgaText::write(unsigned long long, void*, int*)>:
c0010aec:	55                   	push   ebp
c0010aed:	57                   	push   edi
c0010aee:	56                   	push   esi
c0010aef:	53                   	push   ebx
c0010af0:	83 ec 0c             	sub    esp,0xc
c0010af3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010af7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010afb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010aff:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010b06:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010b09:	39 eb                	cmp    ebx,ebp
c0010b0b:	74 13                	je     c0010b20 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010b0d:	43                   	inc    ebx
c0010b0e:	50                   	push   eax
c0010b0f:	50                   	push   eax
c0010b10:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010b14:	50                   	push   eax
c0010b15:	56                   	push   esi
c0010b16:	e8 13 fc ff ff       	call   c001072e <VgaText::putchar(char)>
c0010b1b:	83 c4 10             	add    esp,0x10
c0010b1e:	eb e9                	jmp    c0010b09 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010b20:	83 ec 0c             	sub    esp,0xc
c0010b23:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010b2a:	56                   	push   esi
c0010b2b:	e8 1e fa ff ff       	call   c001054e <VgaText::doUpdate()>
c0010b30:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010b34:	89 38                	mov    DWORD PTR [eax],edi
c0010b36:	83 c4 1c             	add    esp,0x1c
c0010b39:	31 c0                	xor    eax,eax
c0010b3b:	5b                   	pop    ebx
c0010b3c:	5e                   	pop    esi
c0010b3d:	5f                   	pop    edi
c0010b3e:	5d                   	pop    ebp
c0010b3f:	c3                   	ret    

c0010b40 <newTerminal(char*)>:
c0010b40:	83 ec 28             	sub    esp,0x28
c0010b43:	68 c4 02 00 00       	push   0x2c4
c0010b48:	e8 4c ea ff ff       	call   c000f599 <malloc>
c0010b4d:	5a                   	pop    edx
c0010b4e:	59                   	pop    ecx
c0010b4f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010b53:	50                   	push   eax
c0010b54:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010b58:	e8 29 fd ff ff       	call   c0010886 <VgaText::VgaText(char const*)>
c0010b5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010b61:	83 c4 2c             	add    esp,0x2c
c0010b64:	c3                   	ret    
c0010b65:	90                   	nop

c0010b66 <TSS::TSS()>:
c0010b66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b6a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b71:	90                   	nop
c0010b72:	c3                   	ret    
c0010b73:	90                   	nop

c0010b74 <TSS::setESP(unsigned long)>:
c0010b74:	55                   	push   ebp
c0010b75:	89 e5                	mov    ebp,esp
c0010b77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b7d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010b80:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b83:	90                   	nop
c0010b84:	5d                   	pop    ebp
c0010b85:	c3                   	ret    

c0010b86 <TSS::flush()>:
c0010b86:	55                   	push   ebp
c0010b87:	89 e5                	mov    ebp,esp
c0010b89:	83 ec 10             	sub    esp,0x10
c0010b8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b91:	83 c8 03             	or     eax,0x3
c0010b94:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010b98:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010b9c:	66 89 d0             	mov    ax,dx
c0010b9f:	0f 00 d8             	ltr    ax
c0010ba2:	90                   	nop
c0010ba3:	c9                   	leave  
c0010ba4:	c3                   	ret    
c0010ba5:	90                   	nop

c0010ba6 <TSS::setup(unsigned long, unsigned long)>:
c0010ba6:	55                   	push   ebp
c0010ba7:	89 e5                	mov    ebp,esp
c0010ba9:	83 ec 18             	sub    esp,0x18
c0010bac:	83 ec 0c             	sub    esp,0xc
c0010baf:	6a 68                	push   0x68
c0010bb1:	e8 e3 e9 ff ff       	call   c000f599 <malloc>
c0010bb6:	83 c4 10             	add    esp,0x10
c0010bb9:	89 c2                	mov    edx,eax
c0010bbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bbe:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010bc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bc7:	83 ec 04             	sub    esp,0x4
c0010bca:	6a 68                	push   0x68
c0010bcc:	6a 00                	push   0x0
c0010bce:	50                   	push   eax
c0010bcf:	e8 7c fb fe ff       	call   c0000750 <memset>
c0010bd4:	83 c4 10             	add    esp,0x10
c0010bd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bdd:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010be3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010be6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010be9:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010bef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bf2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bf5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010bf8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010bfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c01:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010c07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c0d:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010c13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c19:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010c1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c22:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c25:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010c2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c31:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010c37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c3d:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010c43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c49:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010c4c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010c4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c55:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010c58:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010c5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c61:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010c68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c6b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c6e:	0f 20 da             	mov    edx,cr3
c0010c71:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010c74:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010c77:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010c7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c7d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c80:	83 ec 08             	sub    esp,0x8
c0010c83:	50                   	push   eax
c0010c84:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c87:	50                   	push   eax
c0010c88:	e8 05 e1 ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c0010c8d:	83 c4 10             	add    esp,0x10
c0010c90:	83 ec 08             	sub    esp,0x8
c0010c93:	6a 68                	push   0x68
c0010c95:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c98:	50                   	push   eax
c0010c99:	e8 10 e1 ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c0010c9e:	83 c4 10             	add    esp,0x10
c0010ca1:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010ca5:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010ca8:	83 e0 0f             	and    eax,0xf
c0010cab:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010cae:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010cb1:	83 c8 40             	or     eax,0x40
c0010cb4:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010cb7:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0010cbc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010cc2:	05 78 01 00 00       	add    eax,0x178
c0010cc7:	83 ec 04             	sub    esp,0x4
c0010cca:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010ccd:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010cd0:	50                   	push   eax
c0010cd1:	e8 0c e1 ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c0010cd6:	83 c4 10             	add    esp,0x10
c0010cd9:	89 c2                	mov    edx,eax
c0010cdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cde:	89 10                	mov    DWORD PTR [eax],edx
c0010ce0:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0010ce5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010ceb:	05 78 01 00 00       	add    eax,0x178
c0010cf0:	83 ec 0c             	sub    esp,0xc
c0010cf3:	50                   	push   eax
c0010cf4:	e8 13 e1 ff ff       	call   c000ee0c <GDT::flush()>
c0010cf9:	83 c4 10             	add    esp,0x10
c0010cfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cff:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d01:	c9                   	leave  
c0010d02:	c3                   	ret    
c0010d03:	90                   	nop

c0010d04 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010d04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d08:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d0f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d14:	75 08                	jne    c0010d1e <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010d16:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d1c:	eb 38                	jmp    c0010d56 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010d1e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d23:	75 17                	jne    c0010d3c <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010d25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d2a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010d2d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010d33:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d35:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d39:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010d3c:	89 c1                	mov    ecx,eax
c0010d3e:	83 e1 fd             	and    ecx,0xfffffffd
c0010d41:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010d47:	74 cd                	je     c0010d16 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010d49:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010d4e:	83 e0 ef             	and    eax,0xffffffef
c0010d51:	83 f8 08             	cmp    eax,0x8
c0010d54:	76 c0                	jbe    c0010d16 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010d56:	31 c0                	xor    eax,eax
c0010d58:	c3                   	ret    
c0010d59:	90                   	nop

c0010d5a <ReservedFilename::isAtty()>:
c0010d5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d5e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010d61:	31 c0                	xor    eax,eax
c0010d63:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010d69:	74 09                	je     c0010d74 <ReservedFilename::isAtty()+0x1a>
c0010d6b:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010d71:	0f 94 c0             	sete   al
c0010d74:	c3                   	ret    
c0010d75:	90                   	nop

c0010d76 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010d76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d7a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010d7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d81:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d85:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d8a:	75 08                	jne    c0010d94 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010d8c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d92:	eb 3d                	jmp    c0010dd1 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010d94:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d99:	75 17                	jne    c0010db2 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010d9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010da0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010da3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010da9:	8b 10                	mov    edx,DWORD PTR [eax]
c0010dab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010daf:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010db2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010db7:	75 04                	jne    c0010dbd <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010db9:	89 0a                	mov    DWORD PTR [edx],ecx
c0010dbb:	eb 14                	jmp    c0010dd1 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010dbd:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010dc2:	74 c8                	je     c0010d8c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010dc4:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010dc9:	83 e0 ef             	and    eax,0xffffffef
c0010dcc:	83 f8 08             	cmp    eax,0x8
c0010dcf:	76 bb                	jbe    c0010d8c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010dd1:	31 c0                	xor    eax,eax
c0010dd3:	c3                   	ret    

c0010dd4 <UnixFile::getFileDescriptor()>:
c0010dd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ddb:	c3                   	ret    

c0010ddc <UnixFile::UnixFile(int)>:
c0010ddc:	53                   	push   ebx
c0010ddd:	83 ec 28             	sub    esp,0x28
c0010de0:	ba 08 a3 02 c0       	mov    edx,0xc002a308
c0010de5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010de9:	89 10                	mov    DWORD PTR [eax],edx
c0010deb:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0010df3:	0f 8f 8c 01 00 00    	jg     c0010f85 <UnixFile::UnixFile(int)+0x1a9>
c0010df9:	a1 a0 c9 02 c0       	mov    eax,ds:0xc002c9a0
c0010dfe:	8d 50 01             	lea    edx,[eax+0x1]
c0010e01:	89 15 a0 c9 02 c0    	mov    DWORD PTR ds:0xc002c9a0,edx
c0010e07:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010e0b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010e0e:	83 ec 08             	sub    esp,0x8
c0010e11:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010e15:	68 58 db 02 c0       	push   0xc002db58
c0010e1a:	e8 b7 76 01 00       	call   c00284d6 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010e1f:	83 c4 10             	add    esp,0x10
c0010e22:	a0 54 db 02 c0       	mov    al,ds:0xc002db54
c0010e27:	83 f0 01             	xor    eax,0x1
c0010e2a:	84 c0                	test   al,al
c0010e2c:	0f 84 54 01 00 00    	je     c0010f86 <UnixFile::UnixFile(int)+0x1aa>
c0010e32:	c6 05 54 db 02 c0 01 	mov    BYTE PTR ds:0xc002db54,0x1
c0010e39:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0010e41:	83 ec 0c             	sub    esp,0xc
c0010e44:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e48:	e8 4c e7 ff ff       	call   c000f599 <malloc>
c0010e4d:	83 c4 10             	add    esp,0x10
c0010e50:	89 c3                	mov    ebx,eax
c0010e52:	83 ec 08             	sub    esp,0x8
c0010e55:	68 03 ff ff 0f       	push   0xfffff03
c0010e5a:	53                   	push   ebx
c0010e5b:	e8 2c 01 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010e60:	83 c4 10             	add    esp,0x10
c0010e63:	89 1d 4c db 02 c0    	mov    DWORD PTR ds:0xc002db4c,ebx
c0010e69:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0010e71:	83 ec 0c             	sub    esp,0xc
c0010e74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e78:	e8 1c e7 ff ff       	call   c000f599 <malloc>
c0010e7d:	83 c4 10             	add    esp,0x10
c0010e80:	89 c3                	mov    ebx,eax
c0010e82:	83 ec 08             	sub    esp,0x8
c0010e85:	68 01 ff ff 0f       	push   0xfffff01
c0010e8a:	53                   	push   ebx
c0010e8b:	e8 fc 00 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010e90:	83 c4 10             	add    esp,0x10
c0010e93:	89 1d 50 db 02 c0    	mov    DWORD PTR ds:0xc002db50,ebx
c0010e99:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0010ea1:	83 ec 0c             	sub    esp,0xc
c0010ea4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010ea8:	e8 ec e6 ff ff       	call   c000f599 <malloc>
c0010ead:	83 c4 10             	add    esp,0x10
c0010eb0:	89 c3                	mov    ebx,eax
c0010eb2:	83 ec 08             	sub    esp,0x8
c0010eb5:	68 00 ff ff 0f       	push   0xfffff00
c0010eba:	53                   	push   ebx
c0010ebb:	e8 cc 00 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010ec0:	83 c4 10             	add    esp,0x10
c0010ec3:	89 1d 44 db 02 c0    	mov    DWORD PTR ds:0xc002db44,ebx
c0010ec9:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0010ed1:	83 ec 0c             	sub    esp,0xc
c0010ed4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010ed8:	e8 bc e6 ff ff       	call   c000f599 <malloc>
c0010edd:	83 c4 10             	add    esp,0x10
c0010ee0:	89 c3                	mov    ebx,eax
c0010ee2:	83 ec 08             	sub    esp,0x8
c0010ee5:	68 02 ff ff 0f       	push   0xfffff02
c0010eea:	53                   	push   ebx
c0010eeb:	e8 9c 00 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010ef0:	83 c4 10             	add    esp,0x10
c0010ef3:	89 1d 48 db 02 c0    	mov    DWORD PTR ds:0xc002db48,ebx
c0010ef9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010f01:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0010f06:	7f 7e                	jg     c0010f86 <UnixFile::UnixFile(int)+0x1aa>
c0010f08:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0010f10:	83 ec 0c             	sub    esp,0xc
c0010f13:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f17:	e8 7d e6 ff ff       	call   c000f599 <malloc>
c0010f1c:	83 c4 10             	add    esp,0x10
c0010f1f:	89 c3                	mov    ebx,eax
c0010f21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f25:	05 10 ff ff 0f       	add    eax,0xfffff10
c0010f2a:	83 ec 08             	sub    esp,0x8
c0010f2d:	50                   	push   eax
c0010f2e:	53                   	push   ebx
c0010f2f:	e8 58 00 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010f34:	83 c4 10             	add    esp,0x10
c0010f37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f3b:	89 1c 85 20 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd24e0],ebx
c0010f42:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0010f4a:	83 ec 0c             	sub    esp,0xc
c0010f4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010f51:	e8 43 e6 ff ff       	call   c000f599 <malloc>
c0010f56:	83 c4 10             	add    esp,0x10
c0010f59:	89 c3                	mov    ebx,eax
c0010f5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f5f:	05 20 ff ff 0f       	add    eax,0xfffff20
c0010f64:	83 ec 08             	sub    esp,0x8
c0010f67:	50                   	push   eax
c0010f68:	53                   	push   ebx
c0010f69:	e8 1e 00 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010f6e:	83 c4 10             	add    esp,0x10
c0010f71:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f75:	89 1c 85 e0 da 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2520],ebx
c0010f7c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0010f80:	e9 7c ff ff ff       	jmp    c0010f01 <UnixFile::UnixFile(int)+0x125>
c0010f85:	90                   	nop
c0010f86:	83 c4 28             	add    esp,0x28
c0010f89:	5b                   	pop    ebx
c0010f8a:	c3                   	ret    
c0010f8b:	90                   	nop

c0010f8c <ReservedFilename::ReservedFilename(int)>:
c0010f8c:	83 ec 0c             	sub    esp,0xc
c0010f8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f93:	83 ec 08             	sub    esp,0x8
c0010f96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f9a:	50                   	push   eax
c0010f9b:	e8 3c fe ff ff       	call   c0010ddc <UnixFile::UnixFile(int)>
c0010fa0:	83 c4 10             	add    esp,0x10
c0010fa3:	ba 24 a3 02 c0       	mov    edx,0xc002a324
c0010fa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fac:	89 10                	mov    DWORD PTR [eax],edx
c0010fae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fb2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010fb6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010fb9:	90                   	nop
c0010fba:	83 c4 0c             	add    esp,0xc
c0010fbd:	c3                   	ret    

c0010fbe <UnixFile::~UnixFile()>:
c0010fbe:	83 ec 1c             	sub    esp,0x1c
c0010fc1:	ba 08 a3 02 c0       	mov    edx,0xc002a308
c0010fc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fca:	89 10                	mov    DWORD PTR [eax],edx
c0010fcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fd0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fd3:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0010fd8:	7f 73                	jg     c001104d <UnixFile::~UnixFile()+0x8f>
c0010fda:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010fe2:	83 ec 0c             	sub    esp,0xc
c0010fe5:	68 58 db 02 c0       	push   0xc002db58
c0010fea:	e8 bb 75 01 00       	call   c00285aa <LinkedList<UnixFile>::getFirstElement()>
c0010fef:	83 c4 10             	add    esp,0x10
c0010ff2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ff6:	83 ec 0c             	sub    esp,0xc
c0010ff9:	68 58 db 02 c0       	push   0xc002db58
c0010ffe:	e8 af 75 01 00       	call   c00285b2 <LinkedList<UnixFile>::removeFirst()>
c0011003:	83 c4 10             	add    esp,0x10
c0011006:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001100a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001100e:	74 40                	je     c0011050 <UnixFile::~UnixFile()+0x92>
c0011010:	83 ec 08             	sub    esp,0x8
c0011013:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011017:	68 58 db 02 c0       	push   0xc002db58
c001101c:	e8 b5 74 01 00       	call   c00284d6 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011021:	83 c4 10             	add    esp,0x10
c0011024:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011028:	8d 50 01             	lea    edx,[eax+0x1]
c001102b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001102f:	3d 88 13 00 00       	cmp    eax,0x1388
c0011034:	0f 94 c0             	sete   al
c0011037:	84 c0                	test   al,al
c0011039:	74 a7                	je     c0010fe2 <UnixFile::~UnixFile()+0x24>
c001103b:	83 ec 0c             	sub    esp,0xc
c001103e:	68 e0 a2 02 c0       	push   0xc002a2e0
c0011043:	e8 47 8e 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c0011048:	83 c4 10             	add    esp,0x10
c001104b:	eb 95                	jmp    c0010fe2 <UnixFile::~UnixFile()+0x24>
c001104d:	90                   	nop
c001104e:	eb 01                	jmp    c0011051 <UnixFile::~UnixFile()+0x93>
c0011050:	90                   	nop
c0011051:	90                   	nop
c0011052:	83 c4 1c             	add    esp,0x1c
c0011055:	c3                   	ret    

c0011056 <UnixFile::~UnixFile()>:
c0011056:	83 ec 0c             	sub    esp,0xc
c0011059:	83 ec 0c             	sub    esp,0xc
c001105c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011060:	e8 59 ff ff ff       	call   c0010fbe <UnixFile::~UnixFile()>
c0011065:	83 c4 10             	add    esp,0x10
c0011068:	83 ec 08             	sub    esp,0x8
c001106b:	6a 0c                	push   0xc
c001106d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011071:	e8 d5 15 00 00       	call   c001264b <operator delete(void*, unsigned long)>
c0011076:	83 c4 10             	add    esp,0x10
c0011079:	83 c4 0c             	add    esp,0xc
c001107c:	c3                   	ret    
c001107d:	90                   	nop

c001107e <ReservedFilename::~ReservedFilename()>:
c001107e:	83 ec 0c             	sub    esp,0xc
c0011081:	ba 24 a3 02 c0       	mov    edx,0xc002a324
c0011086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001108a:	89 10                	mov    DWORD PTR [eax],edx
c001108c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011090:	83 ec 0c             	sub    esp,0xc
c0011093:	50                   	push   eax
c0011094:	e8 25 ff ff ff       	call   c0010fbe <UnixFile::~UnixFile()>
c0011099:	83 c4 10             	add    esp,0x10
c001109c:	90                   	nop
c001109d:	83 c4 0c             	add    esp,0xc
c00110a0:	c3                   	ret    
c00110a1:	90                   	nop

c00110a2 <ReservedFilename::~ReservedFilename()>:
c00110a2:	83 ec 0c             	sub    esp,0xc
c00110a5:	83 ec 0c             	sub    esp,0xc
c00110a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110ac:	e8 cd ff ff ff       	call   c001107e <ReservedFilename::~ReservedFilename()>
c00110b1:	83 c4 10             	add    esp,0x10
c00110b4:	83 ec 08             	sub    esp,0x8
c00110b7:	6a 0c                	push   0xc
c00110b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110bd:	e8 89 15 00 00       	call   c001264b <operator delete(void*, unsigned long)>
c00110c2:	83 c4 10             	add    esp,0x10
c00110c5:	83 c4 0c             	add    esp,0xc
c00110c8:	c3                   	ret    

c00110c9 <getFromFileDescriptor(int)>:
c00110c9:	53                   	push   ebx
c00110ca:	83 ec 08             	sub    esp,0x8
c00110cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00110d1:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00110d7:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00110dd:	7f 2c                	jg     c001110b <getFromFileDescriptor(int)+0x42>
c00110df:	83 ec 0c             	sub    esp,0xc
c00110e2:	68 58 db 02 c0       	push   0xc002db58
c00110e7:	e8 be 74 01 00       	call   c00285aa <LinkedList<UnixFile>::getFirstElement()>
c00110ec:	83 c4 10             	add    esp,0x10
c00110ef:	85 c0                	test   eax,eax
c00110f1:	75 04                	jne    c00110f7 <getFromFileDescriptor(int)+0x2e>
c00110f3:	31 c0                	xor    eax,eax
c00110f5:	eb 6e                	jmp    c0011165 <getFromFileDescriptor(int)+0x9c>
c00110f7:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00110fa:	74 69                	je     c0011165 <getFromFileDescriptor(int)+0x9c>
c00110fc:	52                   	push   edx
c00110fd:	52                   	push   edx
c00110fe:	50                   	push   eax
c00110ff:	68 58 db 02 c0       	push   0xc002db58
c0011104:	e8 4b 75 01 00       	call   c0028654 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011109:	eb e1                	jmp    c00110ec <getFromFileDescriptor(int)+0x23>
c001110b:	a1 4c db 02 c0       	mov    eax,ds:0xc002db4c
c0011110:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011116:	74 4d                	je     c0011165 <getFromFileDescriptor(int)+0x9c>
c0011118:	a1 50 db 02 c0       	mov    eax,ds:0xc002db50
c001111d:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011123:	74 40                	je     c0011165 <getFromFileDescriptor(int)+0x9c>
c0011125:	a1 48 db 02 c0       	mov    eax,ds:0xc002db48
c001112a:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011130:	74 33                	je     c0011165 <getFromFileDescriptor(int)+0x9c>
c0011132:	a1 44 db 02 c0       	mov    eax,ds:0xc002db44
c0011137:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001113d:	74 26                	je     c0011165 <getFromFileDescriptor(int)+0x9c>
c001113f:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011145:	83 f8 08             	cmp    eax,0x8
c0011148:	77 09                	ja     c0011153 <getFromFileDescriptor(int)+0x8a>
c001114a:	8b 04 85 20 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd24e0]
c0011151:	eb 12                	jmp    c0011165 <getFromFileDescriptor(int)+0x9c>
c0011153:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011159:	83 fb 08             	cmp    ebx,0x8
c001115c:	77 95                	ja     c00110f3 <getFromFileDescriptor(int)+0x2a>
c001115e:	8b 04 9d e0 da 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2520]
c0011165:	83 c4 08             	add    esp,0x8
c0011168:	5b                   	pop    ebx
c0011169:	c3                   	ret    

c001116a <__static_initialization_and_destruction_0(int, int)>:
c001116a:	83 ec 0c             	sub    esp,0xc
c001116d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011172:	75 34                	jne    c00111a8 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011174:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001117c:	75 2a                	jne    c00111a8 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001117e:	83 ec 0c             	sub    esp,0xc
c0011181:	68 58 db 02 c0       	push   0xc002db58
c0011186:	e8 09 73 01 00       	call   c0028494 <LinkedList<UnixFile>::LinkedList()>
c001118b:	83 c4 10             	add    esp,0x10
c001118e:	83 ec 04             	sub    esp,0x4
c0011191:	68 d8 c7 02 c0       	push   0xc002c7d8
c0011196:	68 58 db 02 c0       	push   0xc002db58
c001119b:	68 92 84 02 c0       	push   0xc0028492
c00111a0:	e8 20 14 00 00       	call   c00125c5 <__cxa_atexit>
c00111a5:	83 c4 10             	add    esp,0x10
c00111a8:	90                   	nop
c00111a9:	83 c4 0c             	add    esp,0xc
c00111ac:	c3                   	ret    

c00111ad <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00111ad:	83 ec 0c             	sub    esp,0xc
c00111b0:	83 ec 08             	sub    esp,0x8
c00111b3:	68 ff ff 00 00       	push   0xffff
c00111b8:	6a 01                	push   0x1
c00111ba:	e8 ab ff ff ff       	call   c001116a <__static_initialization_and_destruction_0(int, int)>
c00111bf:	83 c4 10             	add    esp,0x10
c00111c2:	83 c4 0c             	add    esp,0xc
c00111c5:	c3                   	ret    

c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00111c6:	53                   	push   ebx
c00111c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00111cb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00111cf:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00111d5:	89 c8                	mov    eax,ecx
c00111d7:	d1 e8                	shr    eax,1
c00111d9:	03 05 a8 c9 02 c0    	add    eax,DWORD PTR ds:0xc002c9a8
c00111df:	83 e1 01             	and    ecx,0x1
c00111e2:	8a 10                	mov    dl,BYTE PTR [eax]
c00111e4:	75 09                	jne    c00111ef <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00111e6:	83 e2 f0             	and    edx,0xfffffff0
c00111e9:	09 da                	or     edx,ebx
c00111eb:	88 10                	mov    BYTE PTR [eax],dl
c00111ed:	5b                   	pop    ebx
c00111ee:	c3                   	ret    
c00111ef:	c1 e3 04             	shl    ebx,0x4
c00111f2:	83 e2 0f             	and    edx,0xf
c00111f5:	09 da                	or     edx,ebx
c00111f7:	88 10                	mov    BYTE PTR [eax],dl
c00111f9:	5b                   	pop    ebx
c00111fa:	c3                   	ret    

c00111fb <Virt::getPageState(unsigned long)>:
c00111fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111ff:	8b 0d a8 c9 02 c0    	mov    ecx,DWORD PTR ds:0xc002c9a8
c0011205:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001120b:	89 d0                	mov    eax,edx
c001120d:	d1 e8                	shr    eax,1
c001120f:	83 e2 01             	and    edx,0x1
c0011212:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011215:	75 04                	jne    c001121b <Virt::getPageState(unsigned long)+0x20>
c0011217:	83 e0 0f             	and    eax,0xf
c001121a:	c3                   	ret    
c001121b:	c0 e8 04             	shr    al,0x4
c001121e:	c3                   	ret    

c001121f <Virt::allocateKernelVirtualPages(int)>:
c001121f:	55                   	push   ebp
c0011220:	31 ed                	xor    ebp,ebp
c0011222:	57                   	push   edi
c0011223:	56                   	push   esi
c0011224:	53                   	push   ebx
c0011225:	31 db                	xor    ebx,ebx
c0011227:	83 ec 1c             	sub    esp,0x1c
c001122a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001122e:	8b 3d a4 c9 02 c0    	mov    edi,DWORD PTR ds:0xc002c9a4
c0011234:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011239:	57                   	push   edi
c001123a:	e8 bc ff ff ff       	call   c00111fb <Virt::getPageState(unsigned long)>
c001123f:	5a                   	pop    edx
c0011240:	84 c0                	test   al,al
c0011242:	75 3a                	jne    c001127e <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011244:	85 db                	test   ebx,ebx
c0011246:	75 02                	jne    c001124a <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011248:	89 fd                	mov    ebp,edi
c001124a:	43                   	inc    ebx
c001124b:	39 f3                	cmp    ebx,esi
c001124d:	74 5a                	je     c00112a9 <Virt::allocateKernelVirtualPages(int)+0x8a>
c001124f:	47                   	inc    edi
c0011250:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011256:	76 31                	jbe    c0011289 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011258:	c7 05 a4 c9 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002c9a4,0xc8000
c0011262:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011267:	75 28                	jne    c0011291 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011269:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001126e:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011273:	57                   	push   edi
c0011274:	e8 82 ff ff ff       	call   c00111fb <Virt::getPageState(unsigned long)>
c0011279:	5a                   	pop    edx
c001127a:	84 c0                	test   al,al
c001127c:	74 c6                	je     c0011244 <Virt::allocateKernelVirtualPages(int)+0x25>
c001127e:	31 db                	xor    ebx,ebx
c0011280:	47                   	inc    edi
c0011281:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011287:	77 cf                	ja     c0011258 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011289:	89 3d a4 c9 02 c0    	mov    DWORD PTR ds:0xc002c9a4,edi
c001128f:	eb a8                	jmp    c0011239 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011291:	83 ec 0c             	sub    esp,0xc
c0011294:	68 38 a3 02 c0       	push   0xc002a338
c0011299:	e8 f1 8b 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c001129e:	8b 3d a4 c9 02 c0    	mov    edi,DWORD PTR ds:0xc002c9a4
c00112a4:	83 c4 10             	add    esp,0x10
c00112a7:	eb 90                	jmp    c0011239 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00112a9:	89 2d a4 c9 02 c0    	mov    DWORD PTR ds:0xc002c9a4,ebp
c00112af:	4b                   	dec    ebx
c00112b0:	74 5f                	je     c0011311 <Virt::allocateKernelVirtualPages(int)+0xf2>
c00112b2:	85 f6                	test   esi,esi
c00112b4:	74 3d                	je     c00112f3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00112b6:	89 e8                	mov    eax,ebp
c00112b8:	31 db                	xor    ebx,ebx
c00112ba:	8d 7e ff             	lea    edi,[esi-0x1]
c00112bd:	eb 14                	jmp    c00112d3 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00112bf:	6a 01                	push   0x1
c00112c1:	43                   	inc    ebx
c00112c2:	50                   	push   eax
c00112c3:	e8 fe fe ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112c8:	58                   	pop    eax
c00112c9:	39 f3                	cmp    ebx,esi
c00112cb:	5a                   	pop    edx
c00112cc:	74 25                	je     c00112f3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00112ce:	a1 a4 c9 02 c0       	mov    eax,ds:0xc002c9a4
c00112d3:	8d 50 01             	lea    edx,[eax+0x1]
c00112d6:	85 db                	test   ebx,ebx
c00112d8:	89 15 a4 c9 02 c0    	mov    DWORD PTR ds:0xc002c9a4,edx
c00112de:	74 20                	je     c0011300 <Virt::allocateKernelVirtualPages(int)+0xe1>
c00112e0:	39 df                	cmp    edi,ebx
c00112e2:	75 db                	jne    c00112bf <Virt::allocateKernelVirtualPages(int)+0xa0>
c00112e4:	6a 03                	push   0x3
c00112e6:	43                   	inc    ebx
c00112e7:	50                   	push   eax
c00112e8:	e8 d9 fe ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112ed:	59                   	pop    ecx
c00112ee:	39 f3                	cmp    ebx,esi
c00112f0:	58                   	pop    eax
c00112f1:	75 db                	jne    c00112ce <Virt::allocateKernelVirtualPages(int)+0xaf>
c00112f3:	83 c4 1c             	add    esp,0x1c
c00112f6:	89 e8                	mov    eax,ebp
c00112f8:	5b                   	pop    ebx
c00112f9:	c1 e0 0c             	shl    eax,0xc
c00112fc:	5e                   	pop    esi
c00112fd:	5f                   	pop    edi
c00112fe:	5d                   	pop    ebp
c00112ff:	c3                   	ret    
c0011300:	6a 02                	push   0x2
c0011302:	bb 01 00 00 00       	mov    ebx,0x1
c0011307:	50                   	push   eax
c0011308:	e8 b9 fe ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001130d:	58                   	pop    eax
c001130e:	5a                   	pop    edx
c001130f:	eb bd                	jmp    c00112ce <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011311:	6a 04                	push   0x4
c0011313:	8d 45 01             	lea    eax,[ebp+0x1]
c0011316:	55                   	push   ebp
c0011317:	a3 a4 c9 02 c0       	mov    ds:0xc002c9a4,eax
c001131c:	e8 a5 fe ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011321:	59                   	pop    ecx
c0011322:	89 e8                	mov    eax,ebp
c0011324:	5b                   	pop    ebx
c0011325:	c1 e0 0c             	shl    eax,0xc
c0011328:	83 c4 1c             	add    esp,0x1c
c001132b:	5b                   	pop    ebx
c001132c:	5e                   	pop    esi
c001132d:	5f                   	pop    edi
c001132e:	5d                   	pop    ebp
c001132f:	c3                   	ret    

c0011330 <Virt::freeSwapfilePage(unsigned long)>:
c0011330:	53                   	push   ebx
c0011331:	8b 15 6c db 02 c0    	mov    edx,DWORD PTR ds:0xc002db6c
c0011337:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001133b:	b8 01 00 00 00       	mov    eax,0x1
c0011340:	89 cb                	mov    ebx,ecx
c0011342:	d3 e0                	shl    eax,cl
c0011344:	c1 eb 05             	shr    ebx,0x5
c0011347:	f7 d0                	not    eax
c0011349:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c001134c:	5b                   	pop    ebx
c001134d:	c3                   	ret    

c001134e <Virt::swapIDToSector(unsigned long)>:
c001134e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011352:	0f af 05 ac c9 02 c0 	imul   eax,DWORD PTR ds:0xc002c9ac
c0011359:	03 05 b4 c9 02 c0    	add    eax,DWORD PTR ds:0xc002c9b4
c001135f:	c3                   	ret    

c0011360 <Virt::allocateSwapfilePage()>:
c0011360:	55                   	push   ebp
c0011361:	31 d2                	xor    edx,edx
c0011363:	57                   	push   edi
c0011364:	56                   	push   esi
c0011365:	53                   	push   ebx
c0011366:	83 ec 0c             	sub    esp,0xc
c0011369:	8b 0d ac c9 02 c0    	mov    ecx,DWORD PTR ds:0xc002c9ac
c001136f:	a1 b0 c9 02 c0       	mov    eax,ds:0xc002c9b0
c0011374:	f7 f1                	div    ecx
c0011376:	39 0d b0 c9 02 c0    	cmp    DWORD PTR ds:0xc002c9b0,ecx
c001137c:	72 2d                	jb     c00113ab <Virt::allocateSwapfilePage()+0x4b>
c001137e:	8b 35 6c db 02 c0    	mov    esi,DWORD PTR ds:0xc002db6c
c0011384:	8b 16                	mov    edx,DWORD PTR [esi]
c0011386:	f6 c2 01             	test   dl,0x1
c0011389:	74 3c                	je     c00113c7 <Virt::allocateSwapfilePage()+0x67>
c001138b:	31 c9                	xor    ecx,ecx
c001138d:	bf 01 00 00 00       	mov    edi,0x1
c0011392:	eb 12                	jmp    c00113a6 <Virt::allocateSwapfilePage()+0x46>
c0011394:	89 fd                	mov    ebp,edi
c0011396:	89 ca                	mov    edx,ecx
c0011398:	d3 e5                	shl    ebp,cl
c001139a:	c1 ea 05             	shr    edx,0x5
c001139d:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00113a0:	8b 13                	mov    edx,DWORD PTR [ebx]
c00113a2:	85 ea                	test   edx,ebp
c00113a4:	74 2a                	je     c00113d0 <Virt::allocateSwapfilePage()+0x70>
c00113a6:	41                   	inc    ecx
c00113a7:	39 c8                	cmp    eax,ecx
c00113a9:	77 e9                	ja     c0011394 <Virt::allocateSwapfilePage()+0x34>
c00113ab:	83 ec 0c             	sub    esp,0xc
c00113ae:	68 18 a5 02 c0       	push   0xc002a518
c00113b3:	e8 d7 8a 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c00113b8:	83 c4 10             	add    esp,0x10
c00113bb:	31 c9                	xor    ecx,ecx
c00113bd:	83 c4 0c             	add    esp,0xc
c00113c0:	89 c8                	mov    eax,ecx
c00113c2:	5b                   	pop    ebx
c00113c3:	5e                   	pop    esi
c00113c4:	5f                   	pop    edi
c00113c5:	5d                   	pop    ebp
c00113c6:	c3                   	ret    
c00113c7:	89 f3                	mov    ebx,esi
c00113c9:	bd 01 00 00 00       	mov    ebp,0x1
c00113ce:	31 c9                	xor    ecx,ecx
c00113d0:	09 ea                	or     edx,ebp
c00113d2:	89 c8                	mov    eax,ecx
c00113d4:	89 13                	mov    DWORD PTR [ebx],edx
c00113d6:	83 c4 0c             	add    esp,0xc
c00113d9:	5b                   	pop    ebx
c00113da:	5e                   	pop    esi
c00113db:	5f                   	pop    edi
c00113dc:	5d                   	pop    ebp
c00113dd:	c3                   	ret    

c00113de <Virt::virtualMemorySetup()>:
c00113de:	53                   	push   ebx
c00113df:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113e4:	6a 0f                	push   0xf
c00113e6:	53                   	push   ebx
c00113e7:	43                   	inc    ebx
c00113e8:	e8 d9 fd ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113ed:	58                   	pop    eax
c00113ee:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113f4:	5a                   	pop    edx
c00113f5:	75 ed                	jne    c00113e4 <Virt::virtualMemorySetup()+0x6>
c00113f7:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113fc:	6a 00                	push   0x0
c00113fe:	53                   	push   ebx
c00113ff:	43                   	inc    ebx
c0011400:	e8 c1 fd ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011405:	59                   	pop    ecx
c0011406:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001140c:	58                   	pop    eax
c001140d:	75 ed                	jne    c00113fc <Virt::virtualMemorySetup()+0x1e>
c001140f:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011414:	6a 0f                	push   0xf
c0011416:	53                   	push   ebx
c0011417:	43                   	inc    ebx
c0011418:	e8 a9 fd ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001141d:	58                   	pop    eax
c001141e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011424:	5a                   	pop    edx
c0011425:	75 ed                	jne    c0011414 <Virt::virtualMemorySetup()+0x36>
c0011427:	5b                   	pop    ebx
c0011428:	c3                   	ret    

c0011429 <Virt::setupPageSwapping(int)>:
c0011429:	55                   	push   ebp
c001142a:	57                   	push   edi
c001142b:	56                   	push   esi
c001142c:	53                   	push   ebx
c001142d:	83 ec 28             	sub    esp,0x28
c0011430:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0011434:	68 14 01 00 00       	push   0x114
c0011439:	e8 5b e1 ff ff       	call   c000f599 <malloc>
c001143e:	83 c4 0c             	add    esp,0xc
c0011441:	89 c3                	mov    ebx,eax
c0011443:	ff 35 50 0f 03 c0    	push   DWORD PTR ds:0xc0030f50
c0011449:	68 2f a5 02 c0       	push   0xc002a52f
c001144e:	50                   	push   eax
c001144f:	e8 2e 18 00 00       	call   c0012c82 <File::File(char const*, Process*)>
c0011454:	5e                   	pop    esi
c0011455:	5f                   	pop    edi
c0011456:	6a 12                	push   0x12
c0011458:	53                   	push   ebx
c0011459:	e8 88 18 00 00       	call   c0012ce6 <File::open(FileOpenMode)>
c001145e:	83 c4 10             	add    esp,0x10
c0011461:	85 c0                	test   eax,eax
c0011463:	0f 85 68 01 00 00    	jne    c00115d1 <Virt::setupPageSwapping(int)+0x1a8>
c0011469:	89 ef                	mov    edi,ebp
c001146b:	50                   	push   eax
c001146c:	c1 ff 1f             	sar    edi,0x1f
c001146f:	8d 44 24 07          	lea    eax,[esp+0x7]
c0011473:	50                   	push   eax
c0011474:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011478:	50                   	push   eax
c0011479:	53                   	push   ebx
c001147a:	e8 13 1b 00 00       	call   c0012f92 <File::stat(unsigned long long*, bool*)>
c001147f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011483:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011487:	83 c4 10             	add    esp,0x10
c001148a:	89 d1                	mov    ecx,edx
c001148c:	89 c2                	mov    edx,eax
c001148e:	0f a4 d1 14          	shld   ecx,edx,0x14
c0011492:	c1 e2 14             	shl    edx,0x14
c0011495:	89 d0                	mov    eax,edx
c0011497:	89 ca                	mov    edx,ecx
c0011499:	31 e8                	xor    eax,ebp
c001149b:	31 fa                	xor    edx,edi
c001149d:	09 c2                	or     edx,eax
c001149f:	0f 85 8a 00 00 00    	jne    c001152f <Virt::setupPageSwapping(int)+0x106>
c00114a5:	83 ec 0c             	sub    esp,0xc
c00114a8:	53                   	push   ebx
c00114a9:	e8 96 18 00 00       	call   c0012d44 <File::close()>
c00114ae:	83 c4 10             	add    esp,0x10
c00114b1:	85 db                	test   ebx,ebx
c00114b3:	74 0c                	je     c00114c1 <Virt::setupPageSwapping(int)+0x98>
c00114b5:	83 ec 0c             	sub    esp,0xc
c00114b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114ba:	53                   	push   ebx
c00114bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00114be:	83 c4 10             	add    esp,0x10
c00114c1:	83 ec 08             	sub    esp,0x8
c00114c4:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c00114c9:	c1 e5 0b             	shl    ebp,0xb
c00114cc:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00114d2:	8b 10                	mov    edx,DWORD PTR [eax]
c00114d4:	68 2f a5 02 c0       	push   0xc002a52f
c00114d9:	50                   	push   eax
c00114da:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00114dd:	89 2d b0 c9 02 c0    	mov    DWORD PTR ds:0xc002c9b0,ebp
c00114e3:	c6 05 b8 c9 02 c0 43 	mov    BYTE PTR ds:0xc002c9b8,0x43
c00114ea:	c1 ed 08             	shr    ebp,0x8
c00114ed:	a3 b4 c9 02 c0       	mov    ds:0xc002c9b4,eax
c00114f2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00114f5:	c7 05 ac c9 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002c9ac,0x8
c00114ff:	e8 95 e0 ff ff       	call   c000f599 <malloc>
c0011504:	83 c4 0c             	add    esp,0xc
c0011507:	89 c1                	mov    ecx,eax
c0011509:	a3 6c db 02 c0       	mov    ds:0xc002db6c,eax
c001150e:	31 d2                	xor    edx,edx
c0011510:	a1 b0 c9 02 c0       	mov    eax,ds:0xc002c9b0
c0011515:	f7 35 ac c9 02 c0    	div    DWORD PTR ds:0xc002c9ac
c001151b:	c1 e8 05             	shr    eax,0x5
c001151e:	50                   	push   eax
c001151f:	6a 00                	push   0x0
c0011521:	51                   	push   ecx
c0011522:	e8 29 f2 fe ff       	call   c0000750 <memset>
c0011527:	83 c4 2c             	add    esp,0x2c
c001152a:	5b                   	pop    ebx
c001152b:	5e                   	pop    esi
c001152c:	5f                   	pop    edi
c001152d:	5d                   	pop    ebp
c001152e:	c3                   	ret    
c001152f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011537:	89 ee                	mov    esi,ebp
c0011539:	83 ec 0c             	sub    esp,0xc
c001153c:	c1 e6 08             	shl    esi,0x8
c001153f:	68 00 00 01 00       	push   0x10000
c0011544:	e8 50 e0 ff ff       	call   c000f599 <malloc>
c0011549:	83 c4 0c             	add    esp,0xc
c001154c:	89 c7                	mov    edi,eax
c001154e:	68 00 00 01 00       	push   0x10000
c0011553:	68 ee 00 00 00       	push   0xee
c0011558:	50                   	push   eax
c0011559:	e8 f2 f1 fe ff       	call   c0000750 <memset>
c001155e:	83 c4 10             	add    esp,0x10
c0011561:	85 f6                	test   esi,esi
c0011563:	79 03                	jns    c0011568 <Virt::setupPageSwapping(int)+0x13f>
c0011565:	83 c6 0f             	add    esi,0xf
c0011568:	c1 fe 04             	sar    esi,0x4
c001156b:	4e                   	dec    esi
c001156c:	83 fe ff             	cmp    esi,0xffffffff
c001156f:	74 3d                	je     c00115ae <Virt::setupPageSwapping(int)+0x185>
c0011571:	83 ec 0c             	sub    esp,0xc
c0011574:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011576:	8d 54 24 10          	lea    edx,[esp+0x10]
c001157a:	52                   	push   edx
c001157b:	57                   	push   edi
c001157c:	6a 00                	push   0x0
c001157e:	68 00 00 01 00       	push   0x10000
c0011583:	53                   	push   ebx
c0011584:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011587:	83 c4 20             	add    esp,0x20
c001158a:	85 c0                	test   eax,eax
c001158c:	75 31                	jne    c00115bf <Virt::setupPageSwapping(int)+0x196>
c001158e:	81 7c 24 04 00 00 01 00 	cmp    DWORD PTR [esp+0x4],0x10000
c0011596:	74 d3                	je     c001156b <Virt::setupPageSwapping(int)+0x142>
c0011598:	83 ec 0c             	sub    esp,0xc
c001159b:	4e                   	dec    esi
c001159c:	68 61 a5 02 c0       	push   0xc002a561
c00115a1:	e8 e9 88 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c00115a6:	83 c4 10             	add    esp,0x10
c00115a9:	83 fe ff             	cmp    esi,0xffffffff
c00115ac:	75 c3                	jne    c0011571 <Virt::setupPageSwapping(int)+0x148>
c00115ae:	83 ec 0c             	sub    esp,0xc
c00115b1:	57                   	push   edi
c00115b2:	e8 02 e0 ff ff       	call   c000f5b9 <rfree>
c00115b7:	83 c4 10             	add    esp,0x10
c00115ba:	e9 e6 fe ff ff       	jmp    c00114a5 <Virt::setupPageSwapping(int)+0x7c>
c00115bf:	83 ec 0c             	sub    esp,0xc
c00115c2:	68 61 a5 02 c0       	push   0xc002a561
c00115c7:	e8 c3 88 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c00115cc:	83 c4 10             	add    esp,0x10
c00115cf:	eb bd                	jmp    c001158e <Virt::setupPageSwapping(int)+0x165>
c00115d1:	83 ec 0c             	sub    esp,0xc
c00115d4:	53                   	push   ebx
c00115d5:	e8 84 18 00 00       	call   c0012e5e <File::unlink()>
c00115da:	5a                   	pop    edx
c00115db:	59                   	pop    ecx
c00115dc:	6a 12                	push   0x12
c00115de:	53                   	push   ebx
c00115df:	e8 02 17 00 00       	call   c0012ce6 <File::open(FileOpenMode)>
c00115e4:	83 c4 10             	add    esp,0x10
c00115e7:	85 c0                	test   eax,eax
c00115e9:	0f 84 7a fe ff ff    	je     c0011469 <Virt::setupPageSwapping(int)+0x40>
c00115ef:	83 ec 0c             	sub    esp,0xc
c00115f2:	68 46 a5 02 c0       	push   0xc002a546
c00115f7:	e8 93 88 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c00115fc:	83 c4 10             	add    esp,0x10
c00115ff:	e9 65 fe ff ff       	jmp    c0011469 <Virt::setupPageSwapping(int)+0x40>

c0011604 <VAS::VAS()>:
c0011604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011608:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001160f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011613:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001161a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001161e:	a3 70 db 02 c0       	mov    ds:0xc002db70,eax
c0011623:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011627:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c001162b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001162f:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011632:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011636:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c001163d:	90                   	nop
c001163e:	c3                   	ret    
c001163f:	90                   	nop

c0011640 <VAS::VAS(VAS*)>:
c0011640:	83 ec 0c             	sub    esp,0xc
c0011643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011647:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001164e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011652:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011659:	83 ec 0c             	sub    esp,0xc
c001165c:	68 58 a3 02 c0       	push   0xc002a358
c0011661:	e8 29 88 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c0011666:	83 c4 10             	add    esp,0x10
c0011669:	90                   	nop
c001166a:	83 c4 0c             	add    esp,0xc
c001166d:	c3                   	ret    

c001166e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c001166e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011672:	89 c2                	mov    edx,eax
c0011674:	c1 e8 0a             	shr    eax,0xa
c0011677:	c1 ea 16             	shr    edx,0x16
c001167a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001167f:	19 c9                	sbb    ecx,ecx
c0011681:	c1 e2 0c             	shl    edx,0xc
c0011684:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c001168a:	25 fc 0f 00 00       	and    eax,0xffc
c001168f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011696:	01 d0                	add    eax,edx
c0011698:	c3                   	ret    
c0011699:	90                   	nop

c001169a <VAS::getPageTableEntry(unsigned long)>:
c001169a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001169e:	89 ca                	mov    edx,ecx
c00116a0:	c1 e9 0a             	shr    ecx,0xa
c00116a3:	c1 ea 16             	shr    edx,0x16
c00116a6:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00116ac:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00116b2:	c1 e0 0c             	shl    eax,0xc
c00116b5:	8d 04 08             	lea    eax,[eax+ecx*1]
c00116b8:	c3                   	ret    

c00116b9 <Virt::freeKernelVirtualPages(unsigned long)>:
c00116b9:	57                   	push   edi
c00116ba:	56                   	push   esi
c00116bb:	be 01 00 00 00       	mov    esi,0x1
c00116c0:	53                   	push   ebx
c00116c1:	83 ec 10             	sub    esp,0x10
c00116c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00116c8:	c1 eb 0c             	shr    ebx,0xc
c00116cb:	eb 3f                	jmp    c001170c <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00116cd:	83 ec 08             	sub    esp,0x8
c00116d0:	57                   	push   edi
c00116d1:	ff 35 70 db 02 c0    	push   DWORD PTR ds:0xc002db70
c00116d7:	e8 be ff ff ff       	call   c001169a <VAS::getPageTableEntry(unsigned long)>
c00116dc:	83 c4 10             	add    esp,0x10
c00116df:	8b 00                	mov    eax,DWORD PTR [eax]
c00116e1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00116e5:	f6 c4 04             	test   ah,0x4
c00116e8:	75 5f                	jne    c0011749 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c00116ea:	80 fa 04             	cmp    dl,0x4
c00116ed:	74 78                	je     c0011767 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c00116ef:	80 fa 02             	cmp    dl,0x2
c00116f2:	0f 84 88 00 00 00    	je     c0011780 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00116f8:	80 fa 03             	cmp    dl,0x3
c00116fb:	0f 84 ad 00 00 00    	je     c00117ae <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011701:	fe ca                	dec    dl
c0011703:	0f 84 92 00 00 00    	je     c001179b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011709:	43                   	inc    ebx
c001170a:	31 f6                	xor    esi,esi
c001170c:	53                   	push   ebx
c001170d:	89 df                	mov    edi,ebx
c001170f:	e8 e7 fa ff ff       	call   c00111fb <Virt::getPageState(unsigned long)>
c0011714:	c1 e7 0c             	shl    edi,0xc
c0011717:	59                   	pop    ecx
c0011718:	84 c0                	test   al,al
c001171a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001171e:	75 ad                	jne    c00116cd <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011720:	83 ec 0c             	sub    esp,0xc
c0011723:	68 67 a5 02 c0       	push   0xc002a567
c0011728:	e8 62 87 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c001172d:	58                   	pop    eax
c001172e:	5a                   	pop    edx
c001172f:	57                   	push   edi
c0011730:	ff 35 70 db 02 c0    	push   DWORD PTR ds:0xc002db70
c0011736:	e8 5f ff ff ff       	call   c001169a <VAS::getPageTableEntry(unsigned long)>
c001173b:	83 c4 10             	add    esp,0x10
c001173e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011740:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011744:	f6 c4 04             	test   ah,0x4
c0011747:	74 c0                	je     c0011709 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011749:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001174d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011752:	83 ec 0c             	sub    esp,0xc
c0011755:	50                   	push   eax
c0011756:	e8 c9 e1 ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c001175b:	83 c4 10             	add    esp,0x10
c001175e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011762:	80 fa 04             	cmp    dl,0x4
c0011765:	75 88                	jne    c00116ef <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011767:	89 f0                	mov    eax,esi
c0011769:	84 c0                	test   al,al
c001176b:	75 47                	jne    c00117b4 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c001176d:	c7 44 24 20 7c a3 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a37c
c0011775:	83 c4 10             	add    esp,0x10
c0011778:	5b                   	pop    ebx
c0011779:	5e                   	pop    esi
c001177a:	5f                   	pop    edi
c001177b:	e9 0f 87 00 00       	jmp    c0019e8f <Krnl::panic(char const*)>
c0011780:	89 f0                	mov    eax,esi
c0011782:	84 c0                	test   al,al
c0011784:	75 15                	jne    c001179b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011786:	83 ec 0c             	sub    esp,0xc
c0011789:	68 83 a5 02 c0       	push   0xc002a583
c001178e:	e8 fc 86 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c0011793:	83 c4 10             	add    esp,0x10
c0011796:	e9 6e ff ff ff       	jmp    c0011709 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001179b:	83 ec 08             	sub    esp,0x8
c001179e:	6a 00                	push   0x0
c00117a0:	53                   	push   ebx
c00117a1:	e8 20 fa ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117a6:	83 c4 10             	add    esp,0x10
c00117a9:	e9 5b ff ff ff       	jmp    c0011709 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00117ae:	89 f0                	mov    eax,esi
c00117b0:	84 c0                	test   al,al
c00117b2:	75 15                	jne    c00117c9 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00117b4:	83 ec 08             	sub    esp,0x8
c00117b7:	6a 00                	push   0x0
c00117b9:	53                   	push   ebx
c00117ba:	e8 07 fa ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117bf:	83 c4 10             	add    esp,0x10
c00117c2:	83 c4 10             	add    esp,0x10
c00117c5:	5b                   	pop    ebx
c00117c6:	5e                   	pop    esi
c00117c7:	5f                   	pop    edi
c00117c8:	c3                   	ret    
c00117c9:	c7 44 24 20 9f a5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a59f
c00117d1:	83 c4 10             	add    esp,0x10
c00117d4:	5b                   	pop    ebx
c00117d5:	5e                   	pop    esi
c00117d6:	5f                   	pop    edi
c00117d7:	e9 b3 86 00 00       	jmp    c0019e8f <Krnl::panic(char const*)>

c00117dc <VAS::freeAllocatedPages(unsigned long)>:
c00117dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00117e4:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00117e8:	74 09                	je     c00117f3 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00117ea:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00117ee:	e9 c6 fe ff ff       	jmp    c00116b9 <Virt::freeKernelVirtualPages(unsigned long)>
c00117f3:	c7 44 24 04 a0 a3 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a3a0
c00117fb:	e9 23 0f 00 00       	jmp    c0012723 <Dbg::kprintf(char const*, ...)>

c0011800 <VAS::virtualToPhysical(unsigned long)>:
c0011800:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011804:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011808:	e8 8d fe ff ff       	call   c001169a <VAS::getPageTableEntry(unsigned long)>
c001180d:	5a                   	pop    edx
c001180e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011810:	59                   	pop    ecx
c0011811:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011816:	c3                   	ret    
c0011817:	90                   	nop

c0011818 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011818:	55                   	push   ebp
c0011819:	57                   	push   edi
c001181a:	56                   	push   esi
c001181b:	53                   	push   ebx
c001181c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011820:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011824:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011828:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001182c:	85 db                	test   ebx,ebx
c001182e:	7e 22                	jle    c0011852 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011830:	c1 e3 0c             	shl    ebx,0xc
c0011833:	01 f3                	add    ebx,esi
c0011835:	56                   	push   esi
c0011836:	81 c6 00 10 00 00    	add    esi,0x1000
c001183c:	55                   	push   ebp
c001183d:	e8 58 fe ff ff       	call   c001169a <VAS::getPageTableEntry(unsigned long)>
c0011842:	5a                   	pop    edx
c0011843:	59                   	pop    ecx
c0011844:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011846:	21 f9                	and    ecx,edi
c0011848:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001184c:	39 f3                	cmp    ebx,esi
c001184e:	89 08                	mov    DWORD PTR [eax],ecx
c0011850:	75 e3                	jne    c0011835 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011852:	5b                   	pop    ebx
c0011853:	5e                   	pop    esi
c0011854:	5f                   	pop    edi
c0011855:	5d                   	pop    ebp
c0011856:	c3                   	ret    
c0011857:	90                   	nop

c0011858 <VAS::setToWriteCombining(unsigned long, int)>:
c0011858:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c001185d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011863:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c001186a:	75 01                	jne    c001186d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c001186c:	c3                   	ret    
c001186d:	68 80 00 00 00       	push   0x80
c0011872:	6a ff                	push   0xffffffff
c0011874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001187c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011880:	e8 93 ff ff ff       	call   c0011818 <VAS::reflagRange(unsigned long, int, int, int)>
c0011885:	83 c4 14             	add    esp,0x14
c0011888:	c3                   	ret    
c0011889:	90                   	nop

c001188a <VAS::mapOtherVASIn(bool, VAS*)>:
c001188a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001188f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011893:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011896:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001189a:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c001189d:	19 c0                	sbb    eax,eax
c001189f:	83 ca 03             	or     edx,0x3
c00118a2:	83 e0 fc             	and    eax,0xfffffffc
c00118a5:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00118ac:	0f 20 d8             	mov    eax,cr3
c00118af:	0f 22 d8             	mov    cr3,eax
c00118b2:	c3                   	ret    
c00118b3:	90                   	nop

c00118b4 <VAS::~VAS()>:
c00118b4:	83 ec 2c             	sub    esp,0x2c
c00118b7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00118bf:	fa                   	cli    
c00118c0:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c00118c5:	40                   	inc    eax
c00118c6:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c00118cb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00118d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00118d2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00118d5:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00118db:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00118df:	6a 01                	push   0x1
c00118e1:	50                   	push   eax
c00118e2:	e8 a3 ff ff ff       	call   c001188a <VAS::mapOtherVASIn(bool, VAS*)>
c00118e7:	83 c4 0c             	add    esp,0xc
c00118ea:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00118f2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00118fa:	0f 8f d4 00 00 00    	jg     c00119d4 <VAS::~VAS()+0x120>
c0011900:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011904:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011907:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001190b:	c1 e2 02             	shl    edx,0x2
c001190e:	01 d0                	add    eax,edx
c0011910:	8b 00                	mov    eax,DWORD PTR [eax]
c0011912:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001191a:	83 e0 01             	and    eax,0x1
c001191d:	0f 84 a8 00 00 00    	je     c00119cb <VAS::~VAS()+0x117>
c0011923:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001192b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011933:	7f 72                	jg     c00119a7 <VAS::~VAS()+0xf3>
c0011935:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011939:	c1 e0 0a             	shl    eax,0xa
c001193c:	89 c2                	mov    edx,eax
c001193e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011942:	01 d0                	add    eax,edx
c0011944:	c1 e0 0c             	shl    eax,0xc
c0011947:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001194b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011950:	8b 00                	mov    eax,DWORD PTR [eax]
c0011952:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011955:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001195b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001195f:	6a 01                	push   0x1
c0011961:	50                   	push   eax
c0011962:	e8 07 fd ff ff       	call   c001166e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011967:	83 c4 0c             	add    esp,0xc
c001196a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001196e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011972:	8b 00                	mov    eax,DWORD PTR [eax]
c0011974:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011978:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001197c:	25 01 04 00 00       	and    eax,0x401
c0011981:	3d 01 04 00 00       	cmp    eax,0x401
c0011986:	75 19                	jne    c00119a1 <VAS::~VAS()+0xed>
c0011988:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001198c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011991:	83 ec 0c             	sub    esp,0xc
c0011994:	50                   	push   eax
c0011995:	e8 8a df ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c001199a:	83 c4 10             	add    esp,0x10
c001199d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00119a1:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00119a5:	eb 84                	jmp    c001192b <VAS::~VAS()+0x77>
c00119a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119ab:	25 00 04 00 00       	and    eax,0x400
c00119b0:	74 19                	je     c00119cb <VAS::~VAS()+0x117>
c00119b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119b6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00119bb:	83 ec 0c             	sub    esp,0xc
c00119be:	50                   	push   eax
c00119bf:	e8 60 df ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c00119c4:	83 c4 10             	add    esp,0x10
c00119c7:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00119cb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00119cf:	e9 1e ff ff ff       	jmp    c00118f2 <VAS::~VAS()+0x3e>
c00119d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00119d8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00119db:	83 ec 0c             	sub    esp,0xc
c00119de:	50                   	push   eax
c00119df:	e8 d5 fc ff ff       	call   c00116b9 <Virt::freeKernelVirtualPages(unsigned long)>
c00119e4:	83 c4 10             	add    esp,0x10
c00119e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00119eb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00119ee:	83 ec 0c             	sub    esp,0xc
c00119f1:	50                   	push   eax
c00119f2:	e8 2d df ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c00119f7:	83 c4 10             	add    esp,0x10
c00119fa:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00119fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011a02:	c1 e0 02             	shl    eax,0x2
c0011a05:	83 ec 08             	sub    esp,0x8
c0011a08:	50                   	push   eax
c0011a09:	68 c4 a3 02 c0       	push   0xc002a3c4
c0011a0e:	e8 10 0d 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0011a13:	83 c4 10             	add    esp,0x10
c0011a16:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c0011a1b:	48                   	dec    eax
c0011a1c:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c0011a21:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c0011a26:	85 c0                	test   eax,eax
c0011a28:	75 01                	jne    c0011a2b <VAS::~VAS()+0x177>
c0011a2a:	fb                   	sti    
c0011a2b:	90                   	nop
c0011a2c:	83 c4 2c             	add    esp,0x2c
c0011a2f:	c3                   	ret    

c0011a30 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011a30:	55                   	push   ebp
c0011a31:	57                   	push   edi
c0011a32:	56                   	push   esi
c0011a33:	53                   	push   ebx
c0011a34:	83 ec 1c             	sub    esp,0x1c
c0011a37:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011a3b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011a3f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011a45:	77 08                	ja     c0011a4f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011a47:	0f 20 d8             	mov    eax,cr3
c0011a4a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0011a4d:	75 47                	jne    c0011a96 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011a4f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a53:	09 d8                	or     eax,ebx
c0011a55:	a9 ff 0f 00 00       	test   eax,0xfff
c0011a5a:	75 57                	jne    c0011ab3 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011a5c:	89 de                	mov    esi,ebx
c0011a5e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011a61:	c1 ee 16             	shr    esi,0x16
c0011a64:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011a6b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011a6f:	74 54                	je     c0011ac5 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011a71:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011a75:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011a7b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011a7f:	c1 e6 0c             	shl    esi,0xc
c0011a82:	c1 eb 0a             	shr    ebx,0xa
c0011a85:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011a8b:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011a8e:	83 c4 1c             	add    esp,0x1c
c0011a91:	5b                   	pop    ebx
c0011a92:	5e                   	pop    esi
c0011a93:	5f                   	pop    edi
c0011a94:	5d                   	pop    ebp
c0011a95:	c3                   	ret    
c0011a96:	83 ec 0c             	sub    esp,0xc
c0011a99:	68 e4 a3 02 c0       	push   0xc002a3e4
c0011a9e:	e8 80 0c 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0011aa3:	83 c4 10             	add    esp,0x10
c0011aa6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011aaa:	09 d8                	or     eax,ebx
c0011aac:	a9 ff 0f 00 00       	test   eax,0xfff
c0011ab1:	74 a9                	je     c0011a5c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011ab3:	83 ec 0c             	sub    esp,0xc
c0011ab6:	68 4c a4 02 c0       	push   0xc002a44c
c0011abb:	e8 cf 83 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c0011ac0:	83 c4 10             	add    esp,0x10
c0011ac3:	eb 97                	jmp    c0011a5c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011ac5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011ac9:	e8 c7 de ff ff       	call   c000f995 <Phys::allocatePage()>
c0011ace:	83 ec 0c             	sub    esp,0xc
c0011ad1:	89 c5                	mov    ebp,eax
c0011ad3:	8b 0d 70 db 02 c0    	mov    ecx,DWORD PTR ds:0xc002db70
c0011ad9:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011add:	6a 01                	push   0x1
c0011adf:	e8 3b f7 ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0011ae4:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011aeb:	6a 01                	push   0x1
c0011aed:	50                   	push   eax
c0011aee:	55                   	push   ebp
c0011aef:	81 cd 07 04 00 00    	or     ebp,0x407
c0011af5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011af9:	51                   	push   ecx
c0011afa:	e8 27 02 00 00       	call   c0011d26 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011aff:	83 c4 1c             	add    esp,0x1c
c0011b02:	68 00 10 00 00       	push   0x1000
c0011b07:	6a 00                	push   0x0
c0011b09:	50                   	push   eax
c0011b0a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011b0e:	e8 3d ec fe ff       	call   c0000750 <memset>
c0011b13:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011b17:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011b1a:	e8 9a fb ff ff       	call   c00116b9 <Virt::freeKernelVirtualPages(unsigned long)>
c0011b1f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011b23:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011b26:	83 c4 10             	add    esp,0x10
c0011b29:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011b2c:	e9 40 ff ff ff       	jmp    c0011a71 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011b31:	90                   	nop

c0011b32 <VAS::allocatePages(int, int)>:
c0011b32:	55                   	push   ebp
c0011b33:	57                   	push   edi
c0011b34:	56                   	push   esi
c0011b35:	53                   	push   ebx
c0011b36:	83 ec 1c             	sub    esp,0x1c
c0011b39:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011b3d:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0011b42:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011b48:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011b4e:	83 e0 01             	and    eax,0x1
c0011b51:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011b55:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011b59:	0f 85 cc 00 00 00    	jne    c0011c2b <VAS::allocatePages(int, int)+0xf9>
c0011b5f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011b62:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011b66:	85 c0                	test   eax,eax
c0011b68:	0f 84 a1 00 00 00    	je     c0011c0f <VAS::allocatePages(int, int)+0xdd>
c0011b6e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011b72:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011b76:	c1 e6 0c             	shl    esi,0xc
c0011b79:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011b7d:	85 c0                	test   eax,eax
c0011b7f:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011b82:	7e 33                	jle    c0011bb7 <VAS::allocatePages(int, int)+0x85>
c0011b84:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011b88:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b8c:	81 cd 00 04 00 00    	or     ebp,0x400
c0011b92:	e8 fe dd ff ff       	call   c000f995 <Phys::allocatePage()>
c0011b97:	55                   	push   ebp
c0011b98:	53                   	push   ebx
c0011b99:	50                   	push   eax
c0011b9a:	57                   	push   edi
c0011b9b:	e8 90 fe ff ff       	call   c0011a30 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ba0:	83 c4 10             	add    esp,0x10
c0011ba3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ba8:	74 03                	je     c0011bad <VAS::allocatePages(int, int)+0x7b>
c0011baa:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bad:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bb3:	39 de                	cmp    esi,ebx
c0011bb5:	75 db                	jne    c0011b92 <VAS::allocatePages(int, int)+0x60>
c0011bb7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011bbc:	75 12                	jne    c0011bd0 <VAS::allocatePages(int, int)+0x9e>
c0011bbe:	0f 20 d8             	mov    eax,cr3
c0011bc1:	0f 22 d8             	mov    cr3,eax
c0011bc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011bc8:	83 c4 1c             	add    esp,0x1c
c0011bcb:	5b                   	pop    ebx
c0011bcc:	5e                   	pop    esi
c0011bcd:	5f                   	pop    edi
c0011bce:	5d                   	pop    ebp
c0011bcf:	c3                   	ret    
c0011bd0:	c1 ee 0a             	shr    esi,0xa
c0011bd3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011bd7:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011bdd:	c1 eb 0a             	shr    ebx,0xa
c0011be0:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011be6:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011bec:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011bf2:	39 c3                	cmp    ebx,eax
c0011bf4:	77 ce                	ja     c0011bc4 <VAS::allocatePages(int, int)+0x92>
c0011bf6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bf9:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bff:	39 d8                	cmp    eax,ebx
c0011c01:	73 f3                	jae    c0011bf6 <VAS::allocatePages(int, int)+0xc4>
c0011c03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c07:	83 c4 1c             	add    esp,0x1c
c0011c0a:	5b                   	pop    ebx
c0011c0b:	5e                   	pop    esi
c0011c0c:	5f                   	pop    edi
c0011c0d:	5d                   	pop    ebp
c0011c0e:	c3                   	ret    
c0011c0f:	83 ec 0c             	sub    esp,0xc
c0011c12:	68 70 a4 02 c0       	push   0xc002a470
c0011c17:	e8 73 82 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c0011c1c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011c1f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011c23:	83 c4 10             	add    esp,0x10
c0011c26:	e9 43 ff ff ff       	jmp    c0011b6e <VAS::allocatePages(int, int)+0x3c>
c0011c2b:	83 ec 0c             	sub    esp,0xc
c0011c2e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011c32:	e8 e8 f5 ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0011c37:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011c3b:	83 c4 10             	add    esp,0x10
c0011c3e:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011c43:	0f 87 9b 00 00 00    	ja     c0011ce4 <VAS::allocatePages(int, int)+0x1b2>
c0011c49:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011c4d:	85 d2                	test   edx,edx
c0011c4f:	7e 3c                	jle    c0011c8d <VAS::allocatePages(int, int)+0x15b>
c0011c51:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011c55:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011c59:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011c5d:	c1 e5 0c             	shl    ebp,0xc
c0011c60:	81 ce 00 04 00 00    	or     esi,0x400
c0011c66:	01 dd                	add    ebp,ebx
c0011c68:	e8 28 dd ff ff       	call   c000f995 <Phys::allocatePage()>
c0011c6d:	56                   	push   esi
c0011c6e:	53                   	push   ebx
c0011c6f:	50                   	push   eax
c0011c70:	57                   	push   edi
c0011c71:	e8 ba fd ff ff       	call   c0011a30 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c76:	83 c4 10             	add    esp,0x10
c0011c79:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c7e:	74 03                	je     c0011c83 <VAS::allocatePages(int, int)+0x151>
c0011c80:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c83:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c89:	39 dd                	cmp    ebp,ebx
c0011c8b:	75 db                	jne    c0011c68 <VAS::allocatePages(int, int)+0x136>
c0011c8d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c92:	0f 84 26 ff ff ff    	je     c0011bbe <VAS::allocatePages(int, int)+0x8c>
c0011c98:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011c9c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ca0:	89 d3                	mov    ebx,edx
c0011ca2:	c1 e0 0c             	shl    eax,0xc
c0011ca5:	c1 eb 0a             	shr    ebx,0xa
c0011ca8:	01 d0                	add    eax,edx
c0011caa:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011cb0:	c1 e8 0a             	shr    eax,0xa
c0011cb3:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011cb9:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011cbe:	2d 00 00 40 00       	sub    eax,0x400000
c0011cc3:	39 c3                	cmp    ebx,eax
c0011cc5:	0f 87 f9 fe ff ff    	ja     c0011bc4 <VAS::allocatePages(int, int)+0x92>
c0011ccb:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011cce:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011cd4:	39 d8                	cmp    eax,ebx
c0011cd6:	73 f3                	jae    c0011ccb <VAS::allocatePages(int, int)+0x199>
c0011cd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011cdc:	83 c4 1c             	add    esp,0x1c
c0011cdf:	5b                   	pop    ebx
c0011ce0:	5e                   	pop    esi
c0011ce1:	5f                   	pop    edi
c0011ce2:	5d                   	pop    ebp
c0011ce3:	c3                   	ret    
c0011ce4:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0011ce9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011cef:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011cf6:	0f 84 4d ff ff ff    	je     c0011c49 <VAS::allocatePages(int, int)+0x117>
c0011cfc:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011d04:	e9 40 ff ff ff       	jmp    c0011c49 <VAS::allocatePages(int, int)+0x117>
c0011d09:	90                   	nop

c0011d0a <VAS::setCPUSpecific(unsigned long)>:
c0011d0a:	83 ec 0c             	sub    esp,0xc
c0011d0d:	6a 05                	push   0x5
c0011d0f:	68 00 00 40 c2       	push   0xc2400000
c0011d14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011d18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011d1c:	e8 0f fd ff ff       	call   c0011a30 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011d21:	83 c4 1c             	add    esp,0x1c
c0011d24:	c3                   	ret    
c0011d25:	90                   	nop

c0011d26 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011d26:	55                   	push   ebp
c0011d27:	57                   	push   edi
c0011d28:	56                   	push   esi
c0011d29:	53                   	push   ebx
c0011d2a:	83 ec 1c             	sub    esp,0x1c
c0011d2d:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0011d32:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011d36:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011d3c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011d40:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011d46:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011d4a:	83 e0 01             	and    eax,0x1
c0011d4d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011d51:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d55:	85 c0                	test   eax,eax
c0011d57:	7e 39                	jle    c0011d92 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0011d59:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d5d:	89 f3                	mov    ebx,esi
c0011d5f:	c1 e0 0c             	shl    eax,0xc
c0011d62:	01 f0                	add    eax,esi
c0011d64:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d68:	55                   	push   ebp
c0011d69:	53                   	push   ebx
c0011d6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d6e:	29 f0                	sub    eax,esi
c0011d70:	01 d8                	add    eax,ebx
c0011d72:	50                   	push   eax
c0011d73:	57                   	push   edi
c0011d74:	e8 b7 fc ff ff       	call   c0011a30 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011d79:	83 c4 10             	add    esp,0x10
c0011d7c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011d81:	74 03                	je     c0011d86 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0011d83:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d86:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d8c:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011d90:	75 d6                	jne    c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0011d92:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011d97:	75 10                	jne    c0011da9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0011d99:	0f 20 d8             	mov    eax,cr3
c0011d9c:	0f 22 d8             	mov    cr3,eax
c0011d9f:	83 c4 1c             	add    esp,0x1c
c0011da2:	89 f0                	mov    eax,esi
c0011da4:	5b                   	pop    ebx
c0011da5:	5e                   	pop    esi
c0011da6:	5f                   	pop    edi
c0011da7:	5d                   	pop    ebp
c0011da8:	c3                   	ret    
c0011da9:	89 f3                	mov    ebx,esi
c0011dab:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011daf:	c1 eb 0a             	shr    ebx,0xa
c0011db2:	c1 e0 0c             	shl    eax,0xc
c0011db5:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011dbb:	01 f0                	add    eax,esi
c0011dbd:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011dc3:	c1 e8 0a             	shr    eax,0xa
c0011dc6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011dcb:	2d 00 00 40 00       	sub    eax,0x400000
c0011dd0:	39 c3                	cmp    ebx,eax
c0011dd2:	77 cb                	ja     c0011d9f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0011dd4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011dd7:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ddd:	39 d8                	cmp    eax,ebx
c0011ddf:	73 f3                	jae    c0011dd4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0011de1:	83 c4 1c             	add    esp,0x1c
c0011de4:	89 f0                	mov    eax,esi
c0011de6:	5b                   	pop    ebx
c0011de7:	5e                   	pop    esi
c0011de8:	5f                   	pop    edi
c0011de9:	5d                   	pop    ebp
c0011dea:	c3                   	ret    
c0011deb:	90                   	nop

c0011dec <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011dec:	55                   	push   ebp
c0011ded:	57                   	push   edi
c0011dee:	56                   	push   esi
c0011def:	53                   	push   ebx
c0011df0:	83 ec 1c             	sub    esp,0x1c
c0011df3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011df7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011dfb:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011dff:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011e03:	a9 ff 0f 00 00       	test   eax,0xfff
c0011e08:	75 4a                	jne    c0011e54 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011e0a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011e0e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011e11:	c1 eb 16             	shr    ebx,0x16
c0011e14:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011e1b:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011e1f:	74 4d                	je     c0011e6e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011e21:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011e25:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011e29:	c1 e8 0a             	shr    eax,0xa
c0011e2c:	80 fa 01             	cmp    dl,0x1
c0011e2f:	19 d2                	sbb    edx,edx
c0011e31:	c1 e3 0c             	shl    ebx,0xc
c0011e34:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011e38:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011e3e:	25 fc 0f 00 00       	and    eax,0xffc
c0011e43:	01 d8                	add    eax,ebx
c0011e45:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011e4c:	83 c4 1c             	add    esp,0x1c
c0011e4f:	5b                   	pop    ebx
c0011e50:	5e                   	pop    esi
c0011e51:	5f                   	pop    edi
c0011e52:	5d                   	pop    ebp
c0011e53:	c3                   	ret    
c0011e54:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011e58:	83 ec 0c             	sub    esp,0xc
c0011e5b:	68 9c a4 02 c0       	push   0xc002a49c
c0011e60:	e8 2a 80 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c0011e65:	83 c4 10             	add    esp,0x10
c0011e68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011e6c:	eb 9c                	jmp    c0011e0a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011e72:	e8 1e db ff ff       	call   c000f995 <Phys::allocatePage()>
c0011e77:	83 ec 0c             	sub    esp,0xc
c0011e7a:	89 c5                	mov    ebp,eax
c0011e7c:	8b 0d 70 db 02 c0    	mov    ecx,DWORD PTR ds:0xc002db70
c0011e82:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011e86:	6a 01                	push   0x1
c0011e88:	e8 92 f3 ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0011e8d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011e94:	6a 01                	push   0x1
c0011e96:	50                   	push   eax
c0011e97:	55                   	push   ebp
c0011e98:	81 cd 07 04 00 00    	or     ebp,0x407
c0011e9e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011ea2:	51                   	push   ecx
c0011ea3:	e8 7e fe ff ff       	call   c0011d26 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011ea8:	83 c4 1c             	add    esp,0x1c
c0011eab:	68 00 10 00 00       	push   0x1000
c0011eb0:	6a 00                	push   0x0
c0011eb2:	50                   	push   eax
c0011eb3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011eb7:	e8 94 e8 fe ff       	call   c0000750 <memset>
c0011ebc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011ec0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011ec3:	e8 f1 f7 ff ff       	call   c00116b9 <Virt::freeKernelVirtualPages(unsigned long)>
c0011ec8:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011ecb:	83 c4 10             	add    esp,0x10
c0011ece:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011ed1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011ed5:	e9 47 ff ff ff       	jmp    c0011e21 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0011eda <VAS::VAS(bool)>:
c0011eda:	53                   	push   ebx
c0011edb:	83 ec 28             	sub    esp,0x28
c0011ede:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ee2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011ee6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011eea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011ef1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ef5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011efc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f00:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011f04:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011f07:	e8 89 da ff ff       	call   c000f995 <Phys::allocatePage()>
c0011f0c:	89 c2                	mov    edx,eax
c0011f0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f12:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0011f15:	8b 1d 70 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db70
c0011f1b:	83 ec 0c             	sub    esp,0xc
c0011f1e:	6a 01                	push   0x1
c0011f20:	e8 fa f2 ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0011f25:	83 c4 10             	add    esp,0x10
c0011f28:	89 c2                	mov    edx,eax
c0011f2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f2e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011f31:	83 ec 0c             	sub    esp,0xc
c0011f34:	6a 03                	push   0x3
c0011f36:	6a 01                	push   0x1
c0011f38:	52                   	push   edx
c0011f39:	50                   	push   eax
c0011f3a:	53                   	push   ebx
c0011f3b:	e8 e6 fd ff ff       	call   c0011d26 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011f40:	83 c4 20             	add    esp,0x20
c0011f43:	89 c2                	mov    edx,eax
c0011f45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f49:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011f4c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011f54:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011f5c:	7f 1c                	jg     c0011f7a <VAS::VAS(bool)+0xa0>
c0011f5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f62:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f65:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011f69:	c1 e2 02             	shl    edx,0x2
c0011f6c:	01 d0                	add    eax,edx
c0011f6e:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011f74:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f78:	eb da                	jmp    c0011f54 <VAS::VAS(bool)+0x7a>
c0011f7a:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011f82:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011f8a:	7f 7a                	jg     c0012006 <VAS::VAS(bool)+0x12c>
c0011f8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f90:	2d 00 02 00 00       	sub    eax,0x200
c0011f95:	c1 e0 0c             	shl    eax,0xc
c0011f98:	83 c8 03             	or     eax,0x3
c0011f9b:	89 c2                	mov    edx,eax
c0011f9d:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0011fa2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fa8:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011fae:	83 e0 10             	and    eax,0x10
c0011fb1:	84 c0                	test   al,al
c0011fb3:	74 07                	je     c0011fbc <VAS::VAS(bool)+0xe2>
c0011fb5:	b8 00 01 00 00       	mov    eax,0x100
c0011fba:	eb 05                	jmp    c0011fc1 <VAS::VAS(bool)+0xe7>
c0011fbc:	b8 00 00 00 00       	mov    eax,0x0
c0011fc1:	09 d0                	or     eax,edx
c0011fc3:	89 c1                	mov    ecx,eax
c0011fc5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fc9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011fcc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011fd0:	c1 e2 02             	shl    edx,0x2
c0011fd3:	01 d0                	add    eax,edx
c0011fd5:	89 ca                	mov    edx,ecx
c0011fd7:	89 10                	mov    DWORD PTR [eax],edx
c0011fd9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011fdd:	2d 40 03 00 00       	sub    eax,0x340
c0011fe2:	83 f8 7f             	cmp    eax,0x7f
c0011fe5:	77 16                	ja     c0011ffd <VAS::VAS(bool)+0x123>
c0011fe7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011feb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011fee:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011ff2:	c1 e2 02             	shl    edx,0x2
c0011ff5:	01 d0                	add    eax,edx
c0011ff7:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011ffd:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012001:	e9 7c ff ff ff       	jmp    c0011f82 <VAS::VAS(bool)+0xa8>
c0012006:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c001200b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012011:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012017:	83 e0 10             	and    eax,0x10
c001201a:	84 c0                	test   al,al
c001201c:	74 07                	je     c0012025 <VAS::VAS(bool)+0x14b>
c001201e:	b8 03 41 00 00       	mov    eax,0x4103
c0012023:	eb 05                	jmp    c001202a <VAS::VAS(bool)+0x150>
c0012025:	b8 03 40 00 00       	mov    eax,0x4003
c001202a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001202e:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0012031:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012037:	89 02                	mov    DWORD PTR [edx],eax
c0012039:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c001203e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012044:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001204a:	83 ec 08             	sub    esp,0x8
c001204d:	50                   	push   eax
c001204e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012052:	e8 b3 fc ff ff       	call   c0011d0a <VAS::setCPUSpecific(unsigned long)>
c0012057:	83 c4 10             	add    esp,0x10
c001205a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001205e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012061:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0012066:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001206c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012072:	83 e0 10             	and    eax,0x10
c0012075:	84 c0                	test   al,al
c0012077:	74 07                	je     c0012080 <VAS::VAS(bool)+0x1a6>
c0012079:	b8 00 01 00 00       	mov    eax,0x100
c001207e:	eb 05                	jmp    c0012085 <VAS::VAS(bool)+0x1ab>
c0012080:	b8 00 00 00 00       	mov    eax,0x0
c0012085:	09 c2                	or     edx,eax
c0012087:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001208b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001208e:	05 fc 0f 00 00       	add    eax,0xffc
c0012093:	83 ca 03             	or     edx,0x3
c0012096:	89 10                	mov    DWORD PTR [eax],edx
c0012098:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c001209d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120a3:	83 ec 0c             	sub    esp,0xc
c00120a6:	50                   	push   eax
c00120a7:	e8 b0 1d 00 00       	call   c0013e5c <Device::getName()>
c00120ac:	83 c4 10             	add    esp,0x10
c00120af:	83 ec 08             	sub    esp,0x8
c00120b2:	68 b9 a5 02 c0       	push   0xc002a5b9
c00120b7:	50                   	push   eax
c00120b8:	e8 db e7 fe ff       	call   c0000898 <strcmp>
c00120bd:	83 c4 10             	add    esp,0x10
c00120c0:	85 c0                	test   eax,eax
c00120c2:	0f 94 c0             	sete   al
c00120c5:	84 c0                	test   al,al
c00120c7:	0f 84 87 00 00 00    	je     c0012154 <VAS::VAS(bool)+0x27a>
c00120cd:	fa                   	cli    
c00120ce:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c00120d3:	40                   	inc    eax
c00120d4:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c00120d9:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c00120de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120e4:	05 7c 09 00 00       	add    eax,0x97c
c00120e9:	83 ec 0c             	sub    esp,0xc
c00120ec:	50                   	push   eax
c00120ed:	e8 2c cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00120f2:	83 c4 10             	add    esp,0x10
c00120f5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120fa:	89 c3                	mov    ebx,eax
c00120fc:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0012101:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012107:	05 7c 09 00 00       	add    eax,0x97c
c001210c:	83 ec 0c             	sub    esp,0xc
c001210f:	50                   	push   eax
c0012110:	e8 09 cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012115:	83 c4 10             	add    esp,0x10
c0012118:	83 ec 08             	sub    esp,0x8
c001211b:	50                   	push   eax
c001211c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012120:	e8 75 f5 ff ff       	call   c001169a <VAS::getPageTableEntry(unsigned long)>
c0012125:	83 c4 10             	add    esp,0x10
c0012128:	8b 00                	mov    eax,DWORD PTR [eax]
c001212a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001212f:	6a 11                	push   0x11
c0012131:	53                   	push   ebx
c0012132:	50                   	push   eax
c0012133:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012137:	e8 f4 f8 ff ff       	call   c0011a30 <VAS::mapPage(unsigned long, unsigned long, int)>
c001213c:	83 c4 10             	add    esp,0x10
c001213f:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c0012144:	48                   	dec    eax
c0012145:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001214a:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001214f:	85 c0                	test   eax,eax
c0012151:	75 01                	jne    c0012154 <VAS::VAS(bool)+0x27a>
c0012153:	fb                   	sti    
c0012154:	90                   	nop
c0012155:	83 c4 28             	add    esp,0x28
c0012158:	5b                   	pop    ebx
c0012159:	c3                   	ret    

c001215a <VAS::evict(unsigned long)>:
c001215a:	55                   	push   ebp
c001215b:	57                   	push   edi
c001215c:	56                   	push   esi
c001215d:	53                   	push   ebx
c001215e:	83 ec 1c             	sub    esp,0x1c
c0012161:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012165:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012169:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001216d:	e8 ee f1 ff ff       	call   c0011360 <Virt::allocateSwapfilePage()>
c0012172:	89 c7                	mov    edi,eax
c0012174:	a1 ac c9 02 c0       	mov    eax,ds:0xc002c9ac
c0012179:	85 c0                	test   eax,eax
c001217b:	7e 3d                	jle    c00121ba <VAS::evict(unsigned long)+0x60>
c001217d:	89 ee                	mov    esi,ebp
c001217f:	31 db                	xor    ebx,ebx
c0012181:	83 ec 0c             	sub    esp,0xc
c0012184:	57                   	push   edi
c0012185:	e8 c4 f1 ff ff       	call   c001134e <Virt::swapIDToSector(unsigned long)>
c001218a:	89 34 24             	mov    DWORD PTR [esp],esi
c001218d:	01 d8                	add    eax,ebx
c001218f:	6a 01                	push   0x1
c0012191:	31 d2                	xor    edx,edx
c0012193:	43                   	inc    ebx
c0012194:	52                   	push   edx
c0012195:	81 c6 00 02 00 00    	add    esi,0x200
c001219b:	50                   	push   eax
c001219c:	0f be 05 b8 c9 02 c0 	movsx  eax,BYTE PTR ds:0xc002c9b8
c00121a3:	ff 34 85 fc de 02 c0 	push   DWORD PTR [eax*4-0x3ffd2104]
c00121aa:	e8 35 3f 00 00       	call   c00160e4 <LogicalDisk::write(unsigned long long, int, void*)>
c00121af:	83 c4 20             	add    esp,0x20
c00121b2:	39 1d ac c9 02 c0    	cmp    DWORD PTR ds:0xc002c9ac,ebx
c00121b8:	7f c7                	jg     c0012181 <VAS::evict(unsigned long)+0x27>
c00121ba:	83 ec 08             	sub    esp,0x8
c00121bd:	c1 e7 0b             	shl    edi,0xb
c00121c0:	55                   	push   ebp
c00121c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00121c5:	e8 d0 f4 ff ff       	call   c001169a <VAS::getPageTableEntry(unsigned long)>
c00121ca:	5a                   	pop    edx
c00121cb:	89 c6                	mov    esi,eax
c00121cd:	59                   	pop    ecx
c00121ce:	ff 30                	push   DWORD PTR [eax]
c00121d0:	68 c7 a5 02 c0       	push   0xc002a5c7
c00121d5:	e8 49 05 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c00121da:	8b 16                	mov    edx,DWORD PTR [esi]
c00121dc:	89 d3                	mov    ebx,edx
c00121de:	81 e2 fe 07 00 00    	and    edx,0x7fe
c00121e4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00121ea:	09 d7                	or     edi,edx
c00121ec:	89 3e                	mov    DWORD PTR [esi],edi
c00121ee:	5e                   	pop    esi
c00121ef:	58                   	pop    eax
c00121f0:	57                   	push   edi
c00121f1:	68 e0 a5 02 c0       	push   0xc002a5e0
c00121f6:	e8 28 05 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c00121fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00121fe:	ff 05 68 db 02 c0    	inc    DWORD PTR ds:0xc002db68
c0012204:	e8 1b d7 ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c0012209:	0f 20 d8             	mov    eax,cr3
c001220c:	0f 22 d8             	mov    cr3,eax
c001220f:	ff 35 68 db 02 c0    	push   DWORD PTR ds:0xc002db68
c0012215:	55                   	push   ebp
c0012216:	53                   	push   ebx
c0012217:	68 c0 a4 02 c0       	push   0xc002a4c0
c001221c:	e8 02 05 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0012221:	a1 64 db 02 c0       	mov    eax,ds:0xc002db64
c0012226:	c7 44 24 50 f9 a5 02 c0 	mov    DWORD PTR [esp+0x50],0xc002a5f9
c001222e:	8d 50 01             	lea    edx,[eax+0x1]
c0012231:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0012235:	89 15 64 db 02 c0    	mov    DWORD PTR ds:0xc002db64,edx
c001223b:	83 c4 3c             	add    esp,0x3c
c001223e:	5b                   	pop    ebx
c001223f:	5e                   	pop    esi
c0012240:	5f                   	pop    edi
c0012241:	5d                   	pop    ebp
c0012242:	e9 dc 04 00 00       	jmp    c0012723 <Dbg::kprintf(char const*, ...)>
c0012247:	90                   	nop

c0012248 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012248:	55                   	push   ebp
c0012249:	57                   	push   edi
c001224a:	56                   	push   esi
c001224b:	53                   	push   ebx
c001224c:	83 ec 24             	sub    esp,0x24
c001224f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012253:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012257:	68 0a a6 02 c0       	push   0xc002a60a
c001225c:	e8 c2 04 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0012261:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0012265:	58                   	pop    eax
c0012266:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c001226c:	5a                   	pop    edx
c001226d:	57                   	push   edi
c001226e:	53                   	push   ebx
c001226f:	e8 26 f4 ff ff       	call   c001169a <VAS::getPageTableEntry(unsigned long)>
c0012274:	59                   	pop    ecx
c0012275:	5e                   	pop    esi
c0012276:	89 c6                	mov    esi,eax
c0012278:	ff 30                	push   DWORD PTR [eax]
c001227a:	68 1d a6 02 c0       	push   0xc002a61d
c001227f:	e8 9f 04 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0012284:	83 c4 10             	add    esp,0x10
c0012287:	85 ff                	test   edi,edi
c0012289:	74 0a                	je     c0012295 <VAS::tryLoadBackOffDisk(unsigned long)+0x4d>
c001228b:	8b 2e                	mov    ebp,DWORD PTR [esi]
c001228d:	f7 c5 01 00 00 00    	test   ebp,0x1
c0012293:	74 0a                	je     c001229f <VAS::tryLoadBackOffDisk(unsigned long)+0x57>
c0012295:	83 c4 1c             	add    esp,0x1c
c0012298:	31 c0                	xor    eax,eax
c001229a:	5b                   	pop    ebx
c001229b:	5e                   	pop    esi
c001229c:	5f                   	pop    edi
c001229d:	5d                   	pop    ebp
c001229e:	c3                   	ret    
c001229f:	83 ec 08             	sub    esp,0x8
c00122a2:	c1 ed 0b             	shr    ebp,0xb
c00122a5:	55                   	push   ebp
c00122a6:	68 2b a6 02 c0       	push   0xc002a62b
c00122ab:	e8 73 04 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c00122b0:	e8 e0 d6 ff ff       	call   c000f995 <Phys::allocatePage()>
c00122b5:	59                   	pop    ecx
c00122b6:	5a                   	pop    edx
c00122b7:	50                   	push   eax
c00122b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00122bc:	68 36 a6 02 c0       	push   0xc002a636
c00122c1:	e8 5d 04 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c00122c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00122ca:	8b 16                	mov    edx,DWORD PTR [esi]
c00122cc:	81 e2 ff 0f 00 00    	and    edx,0xfff
c00122d2:	09 d0                	or     eax,edx
c00122d4:	0d 01 08 00 00       	or     eax,0x801
c00122d9:	89 06                	mov    DWORD PTR [esi],eax
c00122db:	59                   	pop    ecx
c00122dc:	5e                   	pop    esi
c00122dd:	50                   	push   eax
c00122de:	68 4b a6 02 c0       	push   0xc002a64b
c00122e3:	e8 3b 04 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c00122e8:	0f 20 d8             	mov    eax,cr3
c00122eb:	83 c4 0c             	add    esp,0xc
c00122ee:	53                   	push   ebx
c00122ef:	50                   	push   eax
c00122f0:	68 63 a6 02 c0       	push   0xc002a663
c00122f5:	e8 29 04 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c00122fa:	c7 04 24 7b a6 02 c0 	mov    DWORD PTR [esp],0xc002a67b
c0012301:	e8 1d 04 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0012306:	83 c4 10             	add    esp,0x10
c0012309:	a1 ac c9 02 c0       	mov    eax,ds:0xc002c9ac
c001230e:	85 c0                	test   eax,eax
c0012310:	7e 3d                	jle    c001234f <VAS::tryLoadBackOffDisk(unsigned long)+0x107>
c0012312:	89 fe                	mov    esi,edi
c0012314:	31 db                	xor    ebx,ebx
c0012316:	83 ec 0c             	sub    esp,0xc
c0012319:	55                   	push   ebp
c001231a:	e8 2f f0 ff ff       	call   c001134e <Virt::swapIDToSector(unsigned long)>
c001231f:	89 34 24             	mov    DWORD PTR [esp],esi
c0012322:	01 d8                	add    eax,ebx
c0012324:	6a 01                	push   0x1
c0012326:	31 d2                	xor    edx,edx
c0012328:	43                   	inc    ebx
c0012329:	52                   	push   edx
c001232a:	81 c6 00 02 00 00    	add    esi,0x200
c0012330:	50                   	push   eax
c0012331:	0f be 05 b8 c9 02 c0 	movsx  eax,BYTE PTR ds:0xc002c9b8
c0012338:	ff 34 85 fc de 02 c0 	push   DWORD PTR [eax*4-0x3ffd2104]
c001233f:	e8 34 3d 00 00       	call   c0016078 <LogicalDisk::read(unsigned long long, int, void*)>
c0012344:	83 c4 20             	add    esp,0x20
c0012347:	39 1d ac c9 02 c0    	cmp    DWORD PTR ds:0xc002c9ac,ebx
c001234d:	7f c7                	jg     c0012316 <VAS::tryLoadBackOffDisk(unsigned long)+0xce>
c001234f:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c0012354:	48                   	dec    eax
c0012355:	52                   	push   edx
c0012356:	a3 68 db 02 c0       	mov    ds:0xc002db68,eax
c001235b:	50                   	push   eax
c001235c:	57                   	push   edi
c001235d:	68 8b a6 02 c0       	push   0xc002a68b
c0012362:	e8 bc 03 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0012367:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001236a:	e8 c1 ef ff ff       	call   c0011330 <Virt::freeSwapfilePage(unsigned long)>
c001236f:	c7 04 24 a0 a6 02 c0 	mov    DWORD PTR [esp],0xc002a6a0
c0012376:	e8 a8 03 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c001237b:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c0012380:	83 c4 10             	add    esp,0x10
c0012383:	48                   	dec    eax
c0012384:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c0012389:	85 c0                	test   eax,eax
c001238b:	75 01                	jne    c001238e <VAS::tryLoadBackOffDisk(unsigned long)+0x146>
c001238d:	fb                   	sti    
c001238e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012392:	25 ff 0f 00 00       	and    eax,0xfff
c0012397:	3d e0 0f 00 00       	cmp    eax,0xfe0
c001239c:	77 20                	ja     c00123be <VAS::tryLoadBackOffDisk(unsigned long)+0x176>
c001239e:	0f 20 d8             	mov    eax,cr3
c00123a1:	0f 22 d8             	mov    cr3,eax
c00123a4:	83 ec 0c             	sub    esp,0xc
c00123a7:	68 c6 a6 02 c0       	push   0xc002a6c6
c00123ac:	e8 72 03 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c00123b1:	83 c4 10             	add    esp,0x10
c00123b4:	b0 01                	mov    al,0x1
c00123b6:	83 c4 1c             	add    esp,0x1c
c00123b9:	5b                   	pop    ebx
c00123ba:	5e                   	pop    esi
c00123bb:	5f                   	pop    edi
c00123bc:	5d                   	pop    ebp
c00123bd:	c3                   	ret    
c00123be:	83 ec 0c             	sub    esp,0xc
c00123c1:	68 b6 a6 02 c0       	push   0xc002a6b6
c00123c6:	e8 58 03 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c00123cb:	83 c4 10             	add    esp,0x10
c00123ce:	eb ce                	jmp    c001239e <VAS::tryLoadBackOffDisk(unsigned long)+0x156>

c00123d0 <VAS::scanForEviction()>:
c00123d0:	55                   	push   ebp
c00123d1:	31 ed                	xor    ebp,ebp
c00123d3:	57                   	push   edi
c00123d4:	56                   	push   esi
c00123d5:	53                   	push   ebx
c00123d6:	83 ec 0c             	sub    esp,0xc
c00123d9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00123dd:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00123e0:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00123e6:	75 0e                	jne    c00123f6 <VAS::scanForEviction()+0x26>
c00123e8:	89 da                	mov    edx,ebx
c00123ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00123ed:	c1 ea 16             	shr    edx,0x16
c00123f0:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00123f4:	74 4e                	je     c0012444 <VAS::scanForEviction()+0x74>
c00123f6:	53                   	push   ebx
c00123f7:	56                   	push   esi
c00123f8:	e8 9d f2 ff ff       	call   c001169a <VAS::getPageTableEntry(unsigned long)>
c00123fd:	5a                   	pop    edx
c00123fe:	8b 38                	mov    edi,DWORD PTR [eax]
c0012400:	59                   	pop    ecx
c0012401:	89 fa                	mov    edx,edi
c0012403:	81 e2 01 08 00 00    	and    edx,0x801
c0012409:	81 fa 01 08 00 00    	cmp    edx,0x801
c001240f:	74 3e                	je     c001244f <VAS::scanForEviction()+0x7f>
c0012411:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012417:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c001241d:	76 2b                	jbe    c001244a <VAS::scanForEviction()+0x7a>
c001241f:	45                   	inc    ebp
c0012420:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012427:	83 fd 04             	cmp    ebp,0x4
c001242a:	74 35                	je     c0012461 <VAS::scanForEviction()+0x91>
c001242c:	31 db                	xor    ebx,ebx
c001242e:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012434:	75 c0                	jne    c00123f6 <VAS::scanForEviction()+0x26>
c0012436:	89 da                	mov    edx,ebx
c0012438:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001243b:	c1 ea 16             	shr    edx,0x16
c001243e:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012442:	75 b2                	jne    c00123f6 <VAS::scanForEviction()+0x26>
c0012444:	81 c3 00 00 40 00    	add    ebx,0x400000
c001244a:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c001244d:	eb 91                	jmp    c00123e0 <VAS::scanForEviction()+0x10>
c001244f:	f7 c7 20 00 00 00    	test   edi,0x20
c0012455:	74 22                	je     c0012479 <VAS::scanForEviction()+0xa9>
c0012457:	83 e7 df             	and    edi,0xffffffdf
c001245a:	89 38                	mov    DWORD PTR [eax],edi
c001245c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c001245f:	eb b0                	jmp    c0012411 <VAS::scanForEviction()+0x41>
c0012461:	83 ec 0c             	sub    esp,0xc
c0012464:	68 f0 a4 02 c0       	push   0xc002a4f0
c0012469:	e8 21 7a 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c001246e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012471:	83 c4 10             	add    esp,0x10
c0012474:	e9 67 ff ff ff       	jmp    c00123e0 <VAS::scanForEviction()+0x10>
c0012479:	83 ec 08             	sub    esp,0x8
c001247c:	53                   	push   ebx
c001247d:	56                   	push   esi
c001247e:	e8 d7 fc ff ff       	call   c001215a <VAS::evict(unsigned long)>
c0012483:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c001248a:	89 f8                	mov    eax,edi
c001248c:	83 c4 1c             	add    esp,0x1c
c001248f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012494:	5b                   	pop    ebx
c0012495:	5e                   	pop    esi
c0012496:	5f                   	pop    edi
c0012497:	5d                   	pop    ebp
c0012498:	c3                   	ret    

c0012499 <mapVASFirstTime>:
c0012499:	55                   	push   ebp
c001249a:	57                   	push   edi
c001249b:	56                   	push   esi
c001249c:	53                   	push   ebx
c001249d:	83 ec 0c             	sub    esp,0xc
c00124a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00124a5:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00124a8:	4a                   	dec    edx
c00124a9:	0f 84 fe 00 00 00    	je     c00125ad <mapVASFirstTime+0x114>
c00124af:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00124b2:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c00124b5:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00124ba:	c1 e5 15             	shl    ebp,0x15
c00124bd:	bf 00 90 e7 01       	mov    edi,0x1e79000
c00124c2:	8b b2 32 05 00 00    	mov    esi,DWORD PTR [edx+0x532]
c00124c8:	29 eb                	sub    ebx,ebp
c00124ca:	29 ef                	sub    edi,ebp
c00124cc:	83 ec 08             	sub    esp,0x8
c00124cf:	53                   	push   ebx
c00124d0:	68 ed a6 02 c0       	push   0xc002a6ed
c00124d5:	e8 49 02 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c00124da:	e8 b6 d4 ff ff       	call   c000f995 <Phys::allocatePage()>
c00124df:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c00124e6:	6a 01                	push   0x1
c00124e8:	53                   	push   ebx
c00124e9:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00124ef:	50                   	push   eax
c00124f0:	56                   	push   esi
c00124f1:	e8 30 f8 ff ff       	call   c0011d26 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00124f6:	83 c4 20             	add    esp,0x20
c00124f9:	39 fb                	cmp    ebx,edi
c00124fb:	75 cf                	jne    c00124cc <mapVASFirstTime+0x33>
c00124fd:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0012502:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0012507:	29 eb                	sub    ebx,ebp
c0012509:	29 ef                	sub    edi,ebp
c001250b:	83 ec 08             	sub    esp,0x8
c001250e:	53                   	push   ebx
c001250f:	68 09 a7 02 c0       	push   0xc002a709
c0012514:	e8 0a 02 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0012519:	58                   	pop    eax
c001251a:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c001251e:	5a                   	pop    edx
c001251f:	19 c0                	sbb    eax,eax
c0012521:	83 e0 04             	and    eax,0x4
c0012524:	05 03 04 00 00       	add    eax,0x403
c0012529:	50                   	push   eax
c001252a:	68 55 a6 02 c0       	push   0xc002a655
c001252f:	e8 ef 01 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0012534:	e8 5c d4 ff ff       	call   c000f995 <Phys::allocatePage()>
c0012539:	59                   	pop    ecx
c001253a:	89 c5                	mov    ebp,eax
c001253c:	58                   	pop    eax
c001253d:	55                   	push   ebp
c001253e:	68 1d a7 02 c0       	push   0xc002a71d
c0012543:	e8 db 01 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0012548:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c001254c:	19 d2                	sbb    edx,edx
c001254e:	83 e2 04             	and    edx,0x4
c0012551:	81 c2 03 0c 00 00    	add    edx,0xc03
c0012557:	89 14 24             	mov    DWORD PTR [esp],edx
c001255a:	6a 01                	push   0x1
c001255c:	53                   	push   ebx
c001255d:	55                   	push   ebp
c001255e:	56                   	push   esi
c001255f:	e8 c2 f7 ff ff       	call   c0011d26 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012564:	83 c4 18             	add    esp,0x18
c0012567:	53                   	push   ebx
c0012568:	56                   	push   esi
c0012569:	e8 2c f1 ff ff       	call   c001169a <VAS::getPageTableEntry(unsigned long)>
c001256e:	5a                   	pop    edx
c001256f:	59                   	pop    ecx
c0012570:	ff 30                	push   DWORD PTR [eax]
c0012572:	68 39 a7 02 c0       	push   0xc002a739
c0012577:	e8 a7 01 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c001257c:	0f 20 d8             	mov    eax,cr3
c001257f:	83 c4 0c             	add    esp,0xc
c0012582:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012588:	56                   	push   esi
c0012589:	50                   	push   eax
c001258a:	68 63 a6 02 c0       	push   0xc002a663
c001258f:	e8 8f 01 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0012594:	83 c4 10             	add    esp,0x10
c0012597:	39 df                	cmp    edi,ebx
c0012599:	0f 85 6c ff ff ff    	jne    c001250b <mapVASFirstTime+0x72>
c001259f:	0f 20 d8             	mov    eax,cr3
c00125a2:	0f 22 d8             	mov    cr3,eax
c00125a5:	83 c4 0c             	add    esp,0xc
c00125a8:	5b                   	pop    ebx
c00125a9:	5e                   	pop    esi
c00125aa:	5f                   	pop    edi
c00125ab:	5d                   	pop    ebp
c00125ac:	c3                   	ret    
c00125ad:	83 ec 0c             	sub    esp,0xc
c00125b0:	68 d4 a6 02 c0       	push   0xc002a6d4
c00125b5:	e8 69 01 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c00125ba:	83 c4 10             	add    esp,0x10
c00125bd:	83 c4 0c             	add    esp,0xc
c00125c0:	5b                   	pop    ebx
c00125c1:	5e                   	pop    esi
c00125c2:	5f                   	pop    edi
c00125c3:	5d                   	pop    ebp
c00125c4:	c3                   	ret    

c00125c5 <__cxa_atexit>:
c00125c5:	31 c0                	xor    eax,eax
c00125c7:	c3                   	ret    

c00125c8 <__cxa_finalize>:
c00125c8:	c3                   	ret    

c00125c9 <__stack_chk_fail>:
c00125c9:	55                   	push   ebp
c00125ca:	89 e5                	mov    ebp,esp
c00125cc:	83 ec 14             	sub    esp,0x14
c00125cf:	68 44 a7 02 c0       	push   0xc002a744
c00125d4:	e8 4a 01 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c00125d9:	58                   	pop    eax
c00125da:	5a                   	pop    edx
c00125db:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00125de:	68 94 a7 02 c0       	push   0xc002a794
c00125e3:	e8 3b 01 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c00125e8:	59                   	pop    ecx
c00125e9:	58                   	pop    eax
c00125ea:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00125ed:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00125f0:	68 94 a7 02 c0       	push   0xc002a794
c00125f5:	e8 29 01 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c00125fa:	5a                   	pop    edx
c00125fb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00125fe:	59                   	pop    ecx
c00125ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0012601:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012604:	68 94 a7 02 c0       	push   0xc002a794
c0012609:	e8 15 01 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c001260e:	5a                   	pop    edx
c001260f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012612:	59                   	pop    ecx
c0012613:	8b 00                	mov    eax,DWORD PTR [eax]
c0012615:	8b 00                	mov    eax,DWORD PTR [eax]
c0012617:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001261a:	68 94 a7 02 c0       	push   0xc002a794
c001261f:	e8 ff 00 00 00       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0012624:	c7 04 24 9c a7 02 c0 	mov    DWORD PTR [esp],0xc002a79c
c001262b:	e8 5f 78 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c0012630:	83 c4 10             	add    esp,0x10
c0012633:	c9                   	leave  
c0012634:	c3                   	ret    

c0012635 <__cxa_pure_virtual>:
c0012635:	83 ec 18             	sub    esp,0x18
c0012638:	68 b4 a7 02 c0       	push   0xc002a7b4
c001263d:	e8 4d 78 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c0012642:	83 c4 1c             	add    esp,0x1c
c0012645:	c3                   	ret    

c0012646 <operator new[](unsigned long)>:
c0012646:	e9 4e cf ff ff       	jmp    c000f599 <malloc>

c001264b <operator delete(void*, unsigned long)>:
c001264b:	e9 69 cf ff ff       	jmp    c000f5b9 <rfree>

c0012650 <operator delete[](void*)>:
c0012650:	e9 64 cf ff ff       	jmp    c000f5b9 <rfree>

c0012655 <operator delete[](void*, unsigned long)>:
c0012655:	e9 5f cf ff ff       	jmp    c000f5b9 <rfree>

c001265a <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c001265a:	55                   	push   ebp
c001265b:	b9 11 00 00 00       	mov    ecx,0x11
c0012660:	57                   	push   edi
c0012661:	56                   	push   esi
c0012662:	be da a1 02 c0       	mov    esi,0xc002a1da
c0012667:	53                   	push   ebx
c0012668:	83 ec 20             	sub    esp,0x20
c001266b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001266f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012673:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0012677:	fc                   	cld    
c0012678:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001267a:	89 ee                	mov    esi,ebp
c001267c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012680:	eb 02                	jmp    c0012684 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c0012682:	89 c6                	mov    esi,eax
c0012684:	31 d2                	xor    edx,edx
c0012686:	41                   	inc    ecx
c0012687:	89 f0                	mov    eax,esi
c0012689:	f7 f3                	div    ebx
c001268b:	39 de                	cmp    esi,ebx
c001268d:	73 f3                	jae    c0012682 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c001268f:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012692:	eb 02                	jmp    c0012696 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c0012694:	89 c5                	mov    ebp,eax
c0012696:	31 d2                	xor    edx,edx
c0012698:	49                   	dec    ecx
c0012699:	89 e8                	mov    eax,ebp
c001269b:	f7 f3                	div    ebx
c001269d:	39 dd                	cmp    ebp,ebx
c001269f:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c00126a3:	88 11                	mov    BYTE PTR [ecx],dl
c00126a5:	73 ed                	jae    c0012694 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c00126a7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00126ab:	83 c4 20             	add    esp,0x20
c00126ae:	5b                   	pop    ebx
c00126af:	5e                   	pop    esi
c00126b0:	5f                   	pop    edi
c00126b1:	5d                   	pop    ebp
c00126b2:	c3                   	ret    

c00126b3 <Dbg::logc(char)>:
c00126b3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00126b7:	ba fd 03 00 00       	mov    edx,0x3fd
c00126bc:	ec                   	in     al,dx
c00126bd:	a8 20                	test   al,0x20
c00126bf:	74 fb                	je     c00126bc <Dbg::logc(char)+0x9>
c00126c1:	ba f8 03 00 00       	mov    edx,0x3f8
c00126c6:	88 c8                	mov    al,cl
c00126c8:	ee                   	out    dx,al
c00126c9:	c3                   	ret    

c00126ca <Dbg::logs(char*)>:
c00126ca:	53                   	push   ebx
c00126cb:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00126cf:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00126d2:	84 c0                	test   al,al
c00126d4:	74 0f                	je     c00126e5 <Dbg::logs(char*)+0x1b>
c00126d6:	50                   	push   eax
c00126d7:	43                   	inc    ebx
c00126d8:	e8 d6 ff ff ff       	call   c00126b3 <Dbg::logc(char)>
c00126dd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00126e0:	5a                   	pop    edx
c00126e1:	84 c0                	test   al,al
c00126e3:	75 f1                	jne    c00126d6 <Dbg::logs(char*)+0xc>
c00126e5:	5b                   	pop    ebx
c00126e6:	c3                   	ret    

c00126e7 <Dbg::logWriteInt(unsigned int)>:
c00126e7:	83 ec 10             	sub    esp,0x10
c00126ea:	6a 0a                	push   0xa
c00126ec:	8d 44 24 08          	lea    eax,[esp+0x8]
c00126f0:	50                   	push   eax
c00126f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126f5:	e8 60 ff ff ff       	call   c001265a <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00126fa:	50                   	push   eax
c00126fb:	e8 ca ff ff ff       	call   c00126ca <Dbg::logs(char*)>
c0012700:	83 c4 20             	add    esp,0x20
c0012703:	c3                   	ret    

c0012704 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012704:	83 ec 10             	sub    esp,0x10
c0012707:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001270b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001270f:	50                   	push   eax
c0012710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012714:	e8 41 ff ff ff       	call   c001265a <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012719:	50                   	push   eax
c001271a:	e8 ab ff ff ff       	call   c00126ca <Dbg::logs(char*)>
c001271f:	83 c4 20             	add    esp,0x20
c0012722:	c3                   	ret    

c0012723 <Dbg::kprintf(char const*, ...)>:
c0012723:	55                   	push   ebp
c0012724:	57                   	push   edi
c0012725:	56                   	push   esi
c0012726:	53                   	push   ebx
c0012727:	83 ec 0c             	sub    esp,0xc
c001272a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001272e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012732:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012736:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012739:	84 c0                	test   al,al
c001273b:	74 4a                	je     c0012787 <Dbg::kprintf(char const*, ...)+0x64>
c001273d:	31 db                	xor    ebx,ebx
c001273f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012742:	3c 25                	cmp    al,0x25
c0012744:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012747:	0f 85 e4 00 00 00    	jne    c0012831 <Dbg::kprintf(char const*, ...)+0x10e>
c001274d:	83 c3 02             	add    ebx,0x2
c0012750:	8a 07                	mov    al,BYTE PTR [edi]
c0012752:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012755:	83 e8 25             	sub    eax,0x25
c0012758:	3c 53                	cmp    al,0x53
c001275a:	0f 87 ba 00 00 00    	ja     c001281a <Dbg::kprintf(char const*, ...)+0xf7>
c0012760:	0f b6 c0             	movzx  eax,al
c0012763:	ff 24 85 c8 a7 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5838]
c001276a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001276e:	89 c8                	mov    eax,ecx
c0012770:	83 c1 04             	add    ecx,0x4
c0012773:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012777:	ff 30                	push   DWORD PTR [eax]
c0012779:	e8 69 ff ff ff       	call   c00126e7 <Dbg::logWriteInt(unsigned int)>
c001277e:	5f                   	pop    edi
c001277f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012783:	84 c0                	test   al,al
c0012785:	75 b8                	jne    c001273f <Dbg::kprintf(char const*, ...)+0x1c>
c0012787:	83 c4 0c             	add    esp,0xc
c001278a:	5b                   	pop    ebx
c001278b:	5e                   	pop    esi
c001278c:	5f                   	pop    edi
c001278d:	5d                   	pop    ebp
c001278e:	c3                   	ret    
c001278f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012793:	89 c8                	mov    eax,ecx
c0012795:	83 c1 04             	add    ecx,0x4
c0012798:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001279c:	ff 30                	push   DWORD PTR [eax]
c001279e:	e8 27 ff ff ff       	call   c00126ca <Dbg::logs(char*)>
c00127a3:	58                   	pop    eax
c00127a4:	eb d9                	jmp    c001277f <Dbg::kprintf(char const*, ...)+0x5c>
c00127a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00127aa:	89 d0                	mov    eax,edx
c00127ac:	83 c2 04             	add    edx,0x4
c00127af:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00127b3:	ff 30                	push   DWORD PTR [eax]
c00127b5:	e8 2d ff ff ff       	call   c00126e7 <Dbg::logWriteInt(unsigned int)>
c00127ba:	58                   	pop    eax
c00127bb:	eb c2                	jmp    c001277f <Dbg::kprintf(char const*, ...)+0x5c>
c00127bd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00127c1:	89 d0                	mov    eax,edx
c00127c3:	83 c2 04             	add    edx,0x4
c00127c6:	0f be 00             	movsx  eax,BYTE PTR [eax]
c00127c9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00127cd:	50                   	push   eax
c00127ce:	e8 e0 fe ff ff       	call   c00126b3 <Dbg::logc(char)>
c00127d3:	58                   	pop    eax
c00127d4:	eb a9                	jmp    c001277f <Dbg::kprintf(char const*, ...)+0x5c>
c00127d6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00127da:	89 c8                	mov    eax,ecx
c00127dc:	83 c1 04             	add    ecx,0x4
c00127df:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00127e3:	6a 10                	push   0x10
c00127e5:	ff 30                	push   DWORD PTR [eax]
c00127e7:	e8 18 ff ff ff       	call   c0012704 <Dbg::logWriteIntBase(unsigned int, int)>
c00127ec:	59                   	pop    ecx
c00127ed:	5f                   	pop    edi
c00127ee:	eb 8f                	jmp    c001277f <Dbg::kprintf(char const*, ...)+0x5c>
c00127f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00127f4:	89 d0                	mov    eax,edx
c00127f6:	83 c2 08             	add    edx,0x8
c00127f9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00127fd:	6a 10                	push   0x10
c00127ff:	ff 30                	push   DWORD PTR [eax]
c0012801:	e8 fe fe ff ff       	call   c0012704 <Dbg::logWriteIntBase(unsigned int, int)>
c0012806:	58                   	pop    eax
c0012807:	5a                   	pop    edx
c0012808:	e9 72 ff ff ff       	jmp    c001277f <Dbg::kprintf(char const*, ...)+0x5c>
c001280d:	6a 25                	push   0x25
c001280f:	e8 9f fe ff ff       	call   c00126b3 <Dbg::logc(char)>
c0012814:	58                   	pop    eax
c0012815:	e9 65 ff ff ff       	jmp    c001277f <Dbg::kprintf(char const*, ...)+0x5c>
c001281a:	6a 25                	push   0x25
c001281c:	e8 92 fe ff ff       	call   c00126b3 <Dbg::logc(char)>
c0012821:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012824:	50                   	push   eax
c0012825:	e8 89 fe ff ff       	call   c00126b3 <Dbg::logc(char)>
c001282a:	5a                   	pop    edx
c001282b:	59                   	pop    ecx
c001282c:	e9 4e ff ff ff       	jmp    c001277f <Dbg::kprintf(char const*, ...)+0x5c>
c0012831:	50                   	push   eax
c0012832:	89 eb                	mov    ebx,ebp
c0012834:	e8 7a fe ff ff       	call   c00126b3 <Dbg::logc(char)>
c0012839:	89 fd                	mov    ebp,edi
c001283b:	58                   	pop    eax
c001283c:	e9 3e ff ff ff       	jmp    c001277f <Dbg::kprintf(char const*, ...)+0x5c>
c0012841:	90                   	nop

c0012842 <File::read(unsigned long long, void*, int*)>:
c0012842:	53                   	push   ebx
c0012843:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012847:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001284b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012852:	3c 19                	cmp    al,0x19
c0012854:	77 35                	ja     c001288b <File::read(unsigned long long, void*, int*)+0x49>
c0012856:	8b 04 85 00 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2000]
c001285d:	85 c0                	test   eax,eax
c001285f:	74 2a                	je     c001288b <File::read(unsigned long long, void*, int*)+0x49>
c0012861:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012867:	85 c0                	test   eax,eax
c0012869:	74 20                	je     c001288b <File::read(unsigned long long, void*, int*)+0x49>
c001286b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001286f:	74 21                	je     c0012892 <File::read(unsigned long long, void*, int*)+0x50>
c0012871:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012873:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012877:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001287d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012881:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012885:	5b                   	pop    ebx
c0012886:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012889:	ff e0                	jmp    eax
c001288b:	b8 0b 00 00 00       	mov    eax,0xb
c0012890:	eb 05                	jmp    c0012897 <File::read(unsigned long long, void*, int*)+0x55>
c0012892:	b8 05 00 00 00       	mov    eax,0x5
c0012897:	5b                   	pop    ebx
c0012898:	c3                   	ret    
c0012899:	90                   	nop

c001289a <File::write(unsigned long long, void*, int*)>:
c001289a:	53                   	push   ebx
c001289b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001289f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00128a3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00128aa:	3c 19                	cmp    al,0x19
c00128ac:	77 35                	ja     c00128e3 <File::write(unsigned long long, void*, int*)+0x49>
c00128ae:	8b 04 85 00 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2000]
c00128b5:	85 c0                	test   eax,eax
c00128b7:	74 2a                	je     c00128e3 <File::write(unsigned long long, void*, int*)+0x49>
c00128b9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00128bf:	85 c0                	test   eax,eax
c00128c1:	74 20                	je     c00128e3 <File::write(unsigned long long, void*, int*)+0x49>
c00128c3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00128c7:	74 21                	je     c00128ea <File::write(unsigned long long, void*, int*)+0x50>
c00128c9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00128cb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00128cf:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00128d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00128d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00128dd:	5b                   	pop    ebx
c00128de:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00128e1:	ff e0                	jmp    eax
c00128e3:	b8 0b 00 00 00       	mov    eax,0xb
c00128e8:	eb 05                	jmp    c00128ef <File::write(unsigned long long, void*, int*)+0x55>
c00128ea:	b8 05 00 00 00       	mov    eax,0x5
c00128ef:	5b                   	pop    ebx
c00128f0:	c3                   	ret    
c00128f1:	90                   	nop

c00128f2 <Directory::read(unsigned long long, void*, int*)>:
c00128f2:	53                   	push   ebx
c00128f3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00128f7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00128fb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012902:	3c 19                	cmp    al,0x19
c0012904:	77 35                	ja     c001293b <Directory::read(unsigned long long, void*, int*)+0x49>
c0012906:	8b 04 85 00 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2000]
c001290d:	85 c0                	test   eax,eax
c001290f:	74 2a                	je     c001293b <Directory::read(unsigned long long, void*, int*)+0x49>
c0012911:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012917:	85 c0                	test   eax,eax
c0012919:	74 20                	je     c001293b <Directory::read(unsigned long long, void*, int*)+0x49>
c001291b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001291f:	74 21                	je     c0012942 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012921:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012923:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012927:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001292d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012931:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012935:	5b                   	pop    ebx
c0012936:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012939:	ff e0                	jmp    eax
c001293b:	b8 0b 00 00 00       	mov    eax,0xb
c0012940:	eb 05                	jmp    c0012947 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012942:	b8 05 00 00 00       	mov    eax,0x5
c0012947:	5b                   	pop    ebx
c0012948:	c3                   	ret    
c0012949:	90                   	nop

c001294a <Directory::write(unsigned long long, void*, int*)>:
c001294a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001294e:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012955:	b8 0b 00 00 00       	mov    eax,0xb
c001295a:	80 fa 19             	cmp    dl,0x19
c001295d:	77 18                	ja     c0012977 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001295f:	8b 14 95 00 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2000]
c0012966:	85 d2                	test   edx,edx
c0012968:	74 0d                	je     c0012977 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001296a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012971:	19 c0                	sbb    eax,eax
c0012973:	83 e0 0a             	and    eax,0xa
c0012976:	40                   	inc    eax
c0012977:	c3                   	ret    

c0012978 <File::isAtty()>:
c0012978:	31 c0                	xor    eax,eax
c001297a:	c3                   	ret    
c001297b:	90                   	nop

c001297c <Directory::isAtty()>:
c001297c:	31 c0                	xor    eax,eax
c001297e:	c3                   	ret    
c001297f:	90                   	nop

c0012980 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012980:	b8 0a 00 00 00       	mov    eax,0xa
c0012985:	c3                   	ret    

c0012986 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012986:	b8 0a 00 00 00       	mov    eax,0xa
c001298b:	c3                   	ret    

c001298c <Filesystem::getFileFirstSector(char const*)>:
c001298c:	31 c0                	xor    eax,eax
c001298e:	31 d2                	xor    edx,edx
c0012990:	c3                   	ret    
c0012991:	90                   	nop

c0012992 <File::~File()>:
c0012992:	83 ec 0c             	sub    esp,0xc
c0012995:	ba 88 a9 02 c0       	mov    edx,0xc002a988
c001299a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001299e:	89 10                	mov    DWORD PTR [eax],edx
c00129a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129a4:	83 ec 0c             	sub    esp,0xc
c00129a7:	50                   	push   eax
c00129a8:	e8 11 e6 ff ff       	call   c0010fbe <UnixFile::~UnixFile()>
c00129ad:	83 c4 10             	add    esp,0x10
c00129b0:	90                   	nop
c00129b1:	83 c4 0c             	add    esp,0xc
c00129b4:	c3                   	ret    
c00129b5:	90                   	nop

c00129b6 <File::~File()>:
c00129b6:	83 ec 0c             	sub    esp,0xc
c00129b9:	83 ec 0c             	sub    esp,0xc
c00129bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129c0:	e8 cd ff ff ff       	call   c0012992 <File::~File()>
c00129c5:	83 c4 10             	add    esp,0x10
c00129c8:	83 ec 08             	sub    esp,0x8
c00129cb:	68 14 01 00 00       	push   0x114
c00129d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129d4:	e8 72 fc ff ff       	call   c001264b <operator delete(void*, unsigned long)>
c00129d9:	83 c4 10             	add    esp,0x10
c00129dc:	83 c4 0c             	add    esp,0xc
c00129df:	c3                   	ret    

c00129e0 <Directory::~Directory()>:
c00129e0:	83 ec 0c             	sub    esp,0xc
c00129e3:	ba a4 a9 02 c0       	mov    edx,0xc002a9a4
c00129e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129ec:	89 10                	mov    DWORD PTR [eax],edx
c00129ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129f2:	83 ec 0c             	sub    esp,0xc
c00129f5:	50                   	push   eax
c00129f6:	e8 c3 e5 ff ff       	call   c0010fbe <UnixFile::~UnixFile()>
c00129fb:	83 c4 10             	add    esp,0x10
c00129fe:	90                   	nop
c00129ff:	83 c4 0c             	add    esp,0xc
c0012a02:	c3                   	ret    
c0012a03:	90                   	nop

c0012a04 <Directory::~Directory()>:
c0012a04:	83 ec 0c             	sub    esp,0xc
c0012a07:	83 ec 0c             	sub    esp,0xc
c0012a0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a0e:	e8 cd ff ff ff       	call   c00129e0 <Directory::~Directory()>
c0012a13:	83 c4 10             	add    esp,0x10
c0012a16:	83 ec 08             	sub    esp,0x8
c0012a19:	68 14 01 00 00       	push   0x114
c0012a1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a22:	e8 24 fc ff ff       	call   c001264b <operator delete(void*, unsigned long)>
c0012a27:	83 c4 10             	add    esp,0x10
c0012a2a:	83 c4 0c             	add    esp,0xc
c0012a2d:	c3                   	ret    

c0012a2e <Filesystem::Filesystem()>:
c0012a2e:	ba 20 a9 02 c0       	mov    edx,0xc002a920
c0012a33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a37:	89 10                	mov    DWORD PTR [eax],edx
c0012a39:	8b 15 74 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db74
c0012a3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a43:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012a46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a4a:	a3 74 db 02 c0       	mov    ds:0xc002db74,eax
c0012a4f:	90                   	nop
c0012a50:	c3                   	ret    
c0012a51:	90                   	nop

c0012a52 <Filesystem::~Filesystem()>:
c0012a52:	ba 20 a9 02 c0       	mov    edx,0xc002a920
c0012a57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a5b:	89 10                	mov    DWORD PTR [eax],edx
c0012a5d:	90                   	nop
c0012a5e:	c3                   	ret    
c0012a5f:	90                   	nop

c0012a60 <Filesystem::~Filesystem()>:
c0012a60:	83 ec 0c             	sub    esp,0xc
c0012a63:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012a67:	e8 e6 ff ff ff       	call   c0012a52 <Filesystem::~Filesystem()>
c0012a6c:	83 c4 04             	add    esp,0x4
c0012a6f:	83 ec 08             	sub    esp,0x8
c0012a72:	6a 08                	push   0x8
c0012a74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a78:	e8 ce fb ff ff       	call   c001264b <operator delete(void*, unsigned long)>
c0012a7d:	83 c4 10             	add    esp,0x10
c0012a80:	83 c4 0c             	add    esp,0xc
c0012a83:	c3                   	ret    

c0012a84 <Fs::getcwd(Process*, char*, int)>:
c0012a84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a88:	31 c0                	xor    eax,eax
c0012a8a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012a8d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012a91:	7d 15                	jge    c0012aa8 <Fs::getcwd(Process*, char*, int)+0x24>
c0012a93:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012a97:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012a9e:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012aa1:	84 c9                	test   cl,cl
c0012aa3:	74 06                	je     c0012aab <Fs::getcwd(Process*, char*, int)+0x27>
c0012aa5:	40                   	inc    eax
c0012aa6:	eb e2                	jmp    c0012a8a <Fs::getcwd(Process*, char*, int)+0x6>
c0012aa8:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012aab:	31 c0                	xor    eax,eax
c0012aad:	c3                   	ret    

c0012aae <Fs::initVFS()>:
c0012aae:	83 ec 18             	sub    esp,0x18
c0012ab1:	6a 08                	push   0x8
c0012ab3:	e8 e1 ca ff ff       	call   c000f599 <malloc>
c0012ab8:	89 04 24             	mov    DWORD PTR [esp],eax
c0012abb:	e8 d2 de 00 00       	call   c0020992 <FAT::FAT()>
c0012ac0:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012ac7:	e8 cd ca ff ff       	call   c000f599 <malloc>
c0012acc:	89 04 24             	mov    DWORD PTR [esp],eax
c0012acf:	e8 ca f0 00 00       	call   c0021b9e <ISO9660::ISO9660()>
c0012ad4:	83 c4 1c             	add    esp,0x1c
c0012ad7:	c3                   	ret    

c0012ad8 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012ad8:	55                   	push   ebp
c0012ad9:	57                   	push   edi
c0012ada:	56                   	push   esi
c0012adb:	53                   	push   ebx
c0012adc:	81 ec 10 04 00 00    	sub    esp,0x410
c0012ae2:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012ae9:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012af0:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012af7:	68 00 04 00 00       	push   0x400
c0012afc:	6a 00                	push   0x0
c0012afe:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012b02:	56                   	push   esi
c0012b03:	e8 48 dc fe ff       	call   c0000750 <memset>
c0012b08:	83 c4 10             	add    esp,0x10
c0012b0b:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012b0f:	75 0b                	jne    c0012b1c <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012b11:	50                   	push   eax
c0012b12:	50                   	push   eax
c0012b13:	57                   	push   edi
c0012b14:	56                   	push   esi
c0012b15:	e8 f2 dc fe ff       	call   c000080c <strcpy>
c0012b1a:	eb 41                	jmp    c0012b5d <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012b1c:	8a 07                	mov    al,BYTE PTR [edi]
c0012b1e:	3c 5c                	cmp    al,0x5c
c0012b20:	74 04                	je     c0012b26 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012b22:	3c 2f                	cmp    al,0x2f
c0012b24:	75 18                	jne    c0012b3e <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012b26:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012b29:	3c 60                	cmp    al,0x60
c0012b2b:	7e 03                	jle    c0012b30 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012b2d:	83 e8 20             	sub    eax,0x20
c0012b30:	88 04 24             	mov    BYTE PTR [esp],al
c0012b33:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012b3a:	50                   	push   eax
c0012b3b:	50                   	push   eax
c0012b3c:	eb 18                	jmp    c0012b56 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012b3e:	50                   	push   eax
c0012b3f:	50                   	push   eax
c0012b40:	55                   	push   ebp
c0012b41:	56                   	push   esi
c0012b42:	e8 c5 dc fe ff       	call   c000080c <strcpy>
c0012b47:	5a                   	pop    edx
c0012b48:	59                   	pop    ecx
c0012b49:	68 0a bc 02 c0       	push   0xc002bc0a
c0012b4e:	56                   	push   esi
c0012b4f:	e8 f8 dd fe ff       	call   c000094c <strcat>
c0012b54:	5d                   	pop    ebp
c0012b55:	58                   	pop    eax
c0012b56:	57                   	push   edi
c0012b57:	56                   	push   esi
c0012b58:	e8 ef dd fe ff       	call   c000094c <strcat>
c0012b5d:	83 c4 10             	add    esp,0x10
c0012b60:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012b63:	3c 60                	cmp    al,0x60
c0012b65:	7e 03                	jle    c0012b6a <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012b67:	83 e8 20             	sub    eax,0x20
c0012b6a:	88 04 24             	mov    BYTE PTR [esp],al
c0012b6d:	88 03                	mov    BYTE PTR [ebx],al
c0012b6f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012b76:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012b7c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012b80:	bf 03 00 00 00       	mov    edi,0x3
c0012b85:	b8 03 00 00 00       	mov    eax,0x3
c0012b8a:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012b8d:	84 d2                	test   dl,dl
c0012b8f:	0f 84 91 00 00 00    	je     c0012c26 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012b95:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012b98:	80 fa 5c             	cmp    dl,0x5c
c0012b9b:	74 05                	je     c0012ba2 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012b9d:	80 fa 2f             	cmp    dl,0x2f
c0012ba0:	75 12                	jne    c0012bb4 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012ba2:	89 c5                	mov    ebp,eax
c0012ba4:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012ba9:	74 09                	je     c0012bb4 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012bab:	40                   	inc    eax
c0012bac:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012bb0:	89 cf                	mov    edi,ecx
c0012bb2:	eb d6                	jmp    c0012b8a <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012bb4:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012bb9:	75 5b                	jne    c0012c16 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012bbb:	80 fa 2e             	cmp    dl,0x2e
c0012bbe:	75 56                	jne    c0012c16 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012bc0:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012bc4:	74 19                	je     c0012bdf <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012bc6:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012bcb:	74 53                	je     c0012c20 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012bcd:	89 f9                	mov    ecx,edi
c0012bcf:	41                   	inc    ecx
c0012bd0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012bd3:	80 fa 2f             	cmp    dl,0x2f
c0012bd6:	74 f7                	je     c0012bcf <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012bd8:	80 fa 5c             	cmp    dl,0x5c
c0012bdb:	74 f2                	je     c0012bcf <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012bdd:	eb d1                	jmp    c0012bb0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012bdf:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012be4:	74 3a                	je     c0012c20 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012be6:	83 f8 03             	cmp    eax,0x3
c0012be9:	74 c5                	je     c0012bb0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012beb:	41                   	inc    ecx
c0012bec:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012bef:	80 fa 2f             	cmp    dl,0x2f
c0012bf2:	74 f7                	je     c0012beb <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012bf4:	80 fa 5c             	cmp    dl,0x5c
c0012bf7:	74 f2                	je     c0012beb <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012bf9:	48                   	dec    eax
c0012bfa:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012bfe:	75 06                	jne    c0012c06 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012c00:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c04:	eb f3                	jmp    c0012bf9 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012c06:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012c0a:	74 07                	je     c0012c13 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012c0c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c10:	48                   	dec    eax
c0012c11:	eb f3                	jmp    c0012c06 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012c13:	40                   	inc    eax
c0012c14:	eb 9a                	jmp    c0012bb0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c16:	80 fa 2f             	cmp    dl,0x2f
c0012c19:	74 95                	je     c0012bb0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c1b:	80 fa 5c             	cmp    dl,0x5c
c0012c1e:	74 90                	je     c0012bb0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c20:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012c23:	40                   	inc    eax
c0012c24:	eb 8a                	jmp    c0012bb0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c26:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c2a:	83 ec 0c             	sub    esp,0xc
c0012c2d:	53                   	push   ebx
c0012c2e:	e8 39 db fe ff       	call   c000076c <strlen>
c0012c33:	83 c4 10             	add    esp,0x10
c0012c36:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012c3b:	75 26                	jne    c0012c63 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012c3d:	83 ec 0c             	sub    esp,0xc
c0012c40:	53                   	push   ebx
c0012c41:	e8 26 db fe ff       	call   c000076c <strlen>
c0012c46:	83 c4 10             	add    esp,0x10
c0012c49:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012c4e:	74 26                	je     c0012c76 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012c50:	83 ec 0c             	sub    esp,0xc
c0012c53:	53                   	push   ebx
c0012c54:	e8 13 db fe ff       	call   c000076c <strlen>
c0012c59:	83 c4 10             	add    esp,0x10
c0012c5c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012c61:	eb c7                	jmp    c0012c2a <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012c63:	83 ec 0c             	sub    esp,0xc
c0012c66:	53                   	push   ebx
c0012c67:	e8 00 db fe ff       	call   c000076c <strlen>
c0012c6c:	83 c4 10             	add    esp,0x10
c0012c6f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012c74:	74 c7                	je     c0012c3d <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012c76:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012c7c:	5b                   	pop    ebx
c0012c7d:	5e                   	pop    esi
c0012c7e:	5f                   	pop    edi
c0012c7f:	5d                   	pop    ebp
c0012c80:	c3                   	ret    
c0012c81:	90                   	nop

c0012c82 <File::File(char const*, Process*)>:
c0012c82:	83 ec 0c             	sub    esp,0xc
c0012c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c89:	83 ec 08             	sub    esp,0x8
c0012c8c:	6a 00                	push   0x0
c0012c8e:	50                   	push   eax
c0012c8f:	e8 48 e1 ff ff       	call   c0010ddc <UnixFile::UnixFile(int)>
c0012c94:	83 c4 10             	add    esp,0x10
c0012c97:	ba 88 a9 02 c0       	mov    edx,0xc002a988
c0012c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ca0:	89 10                	mov    DWORD PTR [eax],edx
c0012ca2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012ca6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cb0:	83 c0 0d             	add    eax,0xd
c0012cb3:	83 ec 04             	sub    esp,0x4
c0012cb6:	52                   	push   edx
c0012cb7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cbb:	50                   	push   eax
c0012cbc:	e8 17 fe ff ff       	call   c0012ad8 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012cc1:	83 c4 10             	add    esp,0x10
c0012cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cc8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012ccb:	8d 50 bf             	lea    edx,[eax-0x41]
c0012cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cd2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cdc:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012ce0:	90                   	nop
c0012ce1:	83 c4 0c             	add    esp,0xc
c0012ce4:	c3                   	ret    
c0012ce5:	90                   	nop

c0012ce6 <File::open(FileOpenMode)>:
c0012ce6:	53                   	push   ebx
c0012ce7:	b8 0b 00 00 00       	mov    eax,0xb
c0012cec:	83 ec 08             	sub    esp,0x8
c0012cef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012cf3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012cfa:	80 fa 19             	cmp    dl,0x19
c0012cfd:	77 40                	ja     c0012d3f <File::open(FileOpenMode)+0x59>
c0012cff:	8b 14 95 00 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2000]
c0012d06:	85 d2                	test   edx,edx
c0012d08:	74 35                	je     c0012d3f <File::open(FileOpenMode)+0x59>
c0012d0a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d10:	85 d2                	test   edx,edx
c0012d12:	74 2b                	je     c0012d3f <File::open(FileOpenMode)+0x59>
c0012d14:	b8 06 00 00 00       	mov    eax,0x6
c0012d19:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012d1d:	75 20                	jne    c0012d3f <File::open(FileOpenMode)+0x59>
c0012d1f:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d21:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012d27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d2b:	51                   	push   ecx
c0012d2c:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012d2f:	51                   	push   ecx
c0012d30:	52                   	push   edx
c0012d31:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012d34:	83 c4 10             	add    esp,0x10
c0012d37:	85 c0                	test   eax,eax
c0012d39:	75 04                	jne    c0012d3f <File::open(FileOpenMode)+0x59>
c0012d3b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012d3f:	83 c4 08             	add    esp,0x8
c0012d42:	5b                   	pop    ebx
c0012d43:	c3                   	ret    

c0012d44 <File::close()>:
c0012d44:	53                   	push   ebx
c0012d45:	b8 0b 00 00 00       	mov    eax,0xb
c0012d4a:	83 ec 08             	sub    esp,0x8
c0012d4d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012d51:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012d58:	80 fa 19             	cmp    dl,0x19
c0012d5b:	77 41                	ja     c0012d9e <File::close()+0x5a>
c0012d5d:	8b 1c 95 00 e0 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2000]
c0012d64:	85 db                	test   ebx,ebx
c0012d66:	74 36                	je     c0012d9e <File::close()+0x5a>
c0012d68:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012d6f:	74 2d                	je     c0012d9e <File::close()+0x5a>
c0012d71:	b8 05 00 00 00       	mov    eax,0x5
c0012d76:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012d7a:	74 22                	je     c0012d9e <File::close()+0x5a>
c0012d7c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012d80:	8b 04 95 00 e0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2000]
c0012d87:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012d8d:	53                   	push   ebx
c0012d8e:	53                   	push   ebx
c0012d8f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d91:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012d97:	50                   	push   eax
c0012d98:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012d9b:	83 c4 10             	add    esp,0x10
c0012d9e:	83 c4 08             	add    esp,0x8
c0012da1:	5b                   	pop    ebx
c0012da2:	c3                   	ret    
c0012da3:	90                   	nop

c0012da4 <File::seek(unsigned long long)>:
c0012da4:	56                   	push   esi
c0012da5:	53                   	push   ebx
c0012da6:	b8 0b 00 00 00       	mov    eax,0xb
c0012dab:	51                   	push   ecx
c0012dac:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012db0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012db4:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012dbb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012dbf:	80 fa 19             	cmp    dl,0x19
c0012dc2:	77 31                	ja     c0012df5 <File::seek(unsigned long long)+0x51>
c0012dc4:	8b 14 95 00 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2000]
c0012dcb:	85 d2                	test   edx,edx
c0012dcd:	74 26                	je     c0012df5 <File::seek(unsigned long long)+0x51>
c0012dcf:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012dd5:	85 d2                	test   edx,edx
c0012dd7:	74 1c                	je     c0012df5 <File::seek(unsigned long long)+0x51>
c0012dd9:	b8 05 00 00 00       	mov    eax,0x5
c0012dde:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012de2:	74 11                	je     c0012df5 <File::seek(unsigned long long)+0x51>
c0012de4:	8b 02                	mov    eax,DWORD PTR [edx]
c0012de6:	53                   	push   ebx
c0012de7:	51                   	push   ecx
c0012de8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012dee:	52                   	push   edx
c0012def:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012df2:	83 c4 10             	add    esp,0x10
c0012df5:	5a                   	pop    edx
c0012df6:	5b                   	pop    ebx
c0012df7:	5e                   	pop    esi
c0012df8:	c3                   	ret    
c0012df9:	90                   	nop

c0012dfa <File::tell(unsigned long long*)>:
c0012dfa:	83 ec 0c             	sub    esp,0xc
c0012dfd:	b8 0b 00 00 00       	mov    eax,0xb
c0012e02:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012e06:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012e0d:	80 fa 19             	cmp    dl,0x19
c0012e10:	77 34                	ja     c0012e46 <File::tell(unsigned long long*)+0x4c>
c0012e12:	8b 14 95 00 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2000]
c0012e19:	85 d2                	test   edx,edx
c0012e1b:	74 29                	je     c0012e46 <File::tell(unsigned long long*)+0x4c>
c0012e1d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012e23:	85 d2                	test   edx,edx
c0012e25:	74 1f                	je     c0012e46 <File::tell(unsigned long long*)+0x4c>
c0012e27:	b8 05 00 00 00       	mov    eax,0x5
c0012e2c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012e30:	74 14                	je     c0012e46 <File::tell(unsigned long long*)+0x4c>
c0012e32:	50                   	push   eax
c0012e33:	8b 02                	mov    eax,DWORD PTR [edx]
c0012e35:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e39:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012e3f:	52                   	push   edx
c0012e40:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012e43:	83 c4 10             	add    esp,0x10
c0012e46:	83 c4 0c             	add    esp,0xc
c0012e49:	c3                   	ret    

c0012e4a <File::rewind()>:
c0012e4a:	83 ec 10             	sub    esp,0x10
c0012e4d:	6a 00                	push   0x0
c0012e4f:	6a 00                	push   0x0
c0012e51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e55:	e8 4a ff ff ff       	call   c0012da4 <File::seek(unsigned long long)>
c0012e5a:	83 c4 1c             	add    esp,0x1c
c0012e5d:	c3                   	ret    

c0012e5e <File::unlink()>:
c0012e5e:	83 ec 0c             	sub    esp,0xc
c0012e61:	b8 0b 00 00 00       	mov    eax,0xb
c0012e66:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e6a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e71:	80 f9 19             	cmp    cl,0x19
c0012e74:	77 2f                	ja     c0012ea5 <File::unlink()+0x47>
c0012e76:	8b 0c 8d 00 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2000]
c0012e7d:	85 c9                	test   ecx,ecx
c0012e7f:	74 24                	je     c0012ea5 <File::unlink()+0x47>
c0012e81:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e87:	85 c9                	test   ecx,ecx
c0012e89:	74 1a                	je     c0012ea5 <File::unlink()+0x47>
c0012e8b:	b8 06 00 00 00       	mov    eax,0x6
c0012e90:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e94:	75 0f                	jne    c0012ea5 <File::unlink()+0x47>
c0012e96:	83 c2 0d             	add    edx,0xd
c0012e99:	50                   	push   eax
c0012e9a:	50                   	push   eax
c0012e9b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e9d:	52                   	push   edx
c0012e9e:	51                   	push   ecx
c0012e9f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012ea2:	83 c4 10             	add    esp,0x10
c0012ea5:	83 c4 0c             	add    esp,0xc
c0012ea8:	c3                   	ret    
c0012ea9:	90                   	nop

c0012eaa <File::rename(char const*)>:
c0012eaa:	83 ec 0c             	sub    esp,0xc
c0012ead:	b8 0b 00 00 00       	mov    eax,0xb
c0012eb2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012eb6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012ebd:	80 f9 19             	cmp    cl,0x19
c0012ec0:	77 32                	ja     c0012ef4 <File::rename(char const*)+0x4a>
c0012ec2:	8b 0c 8d 00 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2000]
c0012ec9:	85 c9                	test   ecx,ecx
c0012ecb:	74 27                	je     c0012ef4 <File::rename(char const*)+0x4a>
c0012ecd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ed3:	85 c9                	test   ecx,ecx
c0012ed5:	74 1d                	je     c0012ef4 <File::rename(char const*)+0x4a>
c0012ed7:	b8 06 00 00 00       	mov    eax,0x6
c0012edc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ee0:	75 12                	jne    c0012ef4 <File::rename(char const*)+0x4a>
c0012ee2:	83 c2 0d             	add    edx,0xd
c0012ee5:	50                   	push   eax
c0012ee6:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ee8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012eec:	52                   	push   edx
c0012eed:	51                   	push   ecx
c0012eee:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012ef1:	83 c4 10             	add    esp,0x10
c0012ef4:	83 c4 0c             	add    esp,0xc
c0012ef7:	c3                   	ret    

c0012ef8 <File::chfatattr(unsigned char, unsigned char)>:
c0012ef8:	57                   	push   edi
c0012ef9:	b8 0b 00 00 00       	mov    eax,0xb
c0012efe:	56                   	push   esi
c0012eff:	53                   	push   ebx
c0012f00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f04:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012f08:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f0f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012f13:	80 f9 19             	cmp    cl,0x19
c0012f16:	77 37                	ja     c0012f4f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f18:	8b 0c 8d 00 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2000]
c0012f1f:	85 c9                	test   ecx,ecx
c0012f21:	74 2c                	je     c0012f4f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f23:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f29:	85 c9                	test   ecx,ecx
c0012f2b:	74 22                	je     c0012f4f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f2d:	b8 06 00 00 00       	mov    eax,0x6
c0012f32:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f36:	75 17                	jne    c0012f4f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f38:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012f3a:	89 f0                	mov    eax,esi
c0012f3c:	83 c2 0d             	add    edx,0xd
c0012f3f:	0f b6 f0             	movzx  esi,al
c0012f42:	0f b6 db             	movzx  ebx,bl
c0012f45:	56                   	push   esi
c0012f46:	53                   	push   ebx
c0012f47:	52                   	push   edx
c0012f48:	51                   	push   ecx
c0012f49:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012f4c:	83 c4 10             	add    esp,0x10
c0012f4f:	5b                   	pop    ebx
c0012f50:	5e                   	pop    esi
c0012f51:	5f                   	pop    edi
c0012f52:	c3                   	ret    
c0012f53:	90                   	nop

c0012f54 <File::exists()>:
c0012f54:	83 ec 0c             	sub    esp,0xc
c0012f57:	31 c0                	xor    eax,eax
c0012f59:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f5d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f64:	80 f9 19             	cmp    cl,0x19
c0012f67:	77 24                	ja     c0012f8d <File::exists()+0x39>
c0012f69:	8b 0c 8d 00 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2000]
c0012f70:	85 c9                	test   ecx,ecx
c0012f72:	74 19                	je     c0012f8d <File::exists()+0x39>
c0012f74:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f7a:	85 c9                	test   ecx,ecx
c0012f7c:	74 0f                	je     c0012f8d <File::exists()+0x39>
c0012f7e:	83 c2 0d             	add    edx,0xd
c0012f81:	50                   	push   eax
c0012f82:	50                   	push   eax
c0012f83:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f85:	52                   	push   edx
c0012f86:	51                   	push   ecx
c0012f87:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012f8a:	83 c4 10             	add    esp,0x10
c0012f8d:	83 c4 0c             	add    esp,0xc
c0012f90:	c3                   	ret    
c0012f91:	90                   	nop

c0012f92 <File::stat(unsigned long long*, bool*)>:
c0012f92:	56                   	push   esi
c0012f93:	53                   	push   ebx
c0012f94:	50                   	push   eax
c0012f95:	b8 0b 00 00 00       	mov    eax,0xb
c0012f9a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f9e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012fa2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012fa9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012fad:	80 f9 19             	cmp    cl,0x19
c0012fb0:	77 3d                	ja     c0012fef <File::stat(unsigned long long*, bool*)+0x5d>
c0012fb2:	8b 0c 8d 00 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2000]
c0012fb9:	85 c9                	test   ecx,ecx
c0012fbb:	74 32                	je     c0012fef <File::stat(unsigned long long*, bool*)+0x5d>
c0012fbd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012fc3:	85 c9                	test   ecx,ecx
c0012fc5:	74 28                	je     c0012fef <File::stat(unsigned long long*, bool*)+0x5d>
c0012fc7:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012fc9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012fcd:	74 13                	je     c0012fe2 <File::stat(unsigned long long*, bool*)+0x50>
c0012fcf:	83 ec 04             	sub    esp,0x4
c0012fd2:	56                   	push   esi
c0012fd3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012fd9:	51                   	push   ecx
c0012fda:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012fdd:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012fe0:	eb 0a                	jmp    c0012fec <File::stat(unsigned long long*, bool*)+0x5a>
c0012fe2:	53                   	push   ebx
c0012fe3:	83 c2 0d             	add    edx,0xd
c0012fe6:	56                   	push   esi
c0012fe7:	52                   	push   edx
c0012fe8:	51                   	push   ecx
c0012fe9:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012fec:	83 c4 10             	add    esp,0x10
c0012fef:	5a                   	pop    edx
c0012ff0:	5b                   	pop    ebx
c0012ff1:	5e                   	pop    esi
c0012ff2:	c3                   	ret    

c0012ff3 <Fs::setcwd(Process*, char*)>:
c0012ff3:	55                   	push   ebp
c0012ff4:	57                   	push   edi
c0012ff5:	56                   	push   esi
c0012ff6:	53                   	push   ebx
c0012ff7:	81 ec 20 02 00 00    	sub    esp,0x220
c0012ffd:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013004:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001300a:	57                   	push   edi
c001300b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013012:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013016:	56                   	push   esi
c0013017:	e8 bc fa ff ff       	call   c0012ad8 <Fs::standardiseFiles(char*, char const*, char const*)>
c001301c:	89 34 24             	mov    DWORD PTR [esp],esi
c001301f:	e8 48 d7 fe ff       	call   c000076c <strlen>
c0013024:	83 c4 10             	add    esp,0x10
c0013027:	83 f8 02             	cmp    eax,0x2
c001302a:	77 17                	ja     c0013043 <Fs::setcwd(Process*, char*)+0x50>
c001302c:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013031:	83 e8 41             	sub    eax,0x41
c0013034:	83 f8 19             	cmp    eax,0x19
c0013037:	76 24                	jbe    c001305d <Fs::setcwd(Process*, char*)+0x6a>
c0013039:	b8 03 00 00 00       	mov    eax,0x3
c001303e:	e9 e0 00 00 00       	jmp    c0013123 <Fs::setcwd(Process*, char*)+0x130>
c0013043:	83 ec 0c             	sub    esp,0xc
c0013046:	56                   	push   esi
c0013047:	e8 20 d7 fe ff       	call   c000076c <strlen>
c001304c:	83 c4 10             	add    esp,0x10
c001304f:	83 f8 03             	cmp    eax,0x3
c0013052:	75 34                	jne    c0013088 <Fs::setcwd(Process*, char*)+0x95>
c0013054:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013059:	75 2d                	jne    c0013088 <Fs::setcwd(Process*, char*)+0x95>
c001305b:	eb cf                	jmp    c001302c <Fs::setcwd(Process*, char*)+0x39>
c001305d:	8b 14 85 00 e0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2000]
c0013064:	b8 05 00 00 00       	mov    eax,0x5
c0013069:	85 d2                	test   edx,edx
c001306b:	0f 84 b2 00 00 00    	je     c0013123 <Fs::setcwd(Process*, char*)+0x130>
c0013071:	b8 06 00 00 00       	mov    eax,0x6
c0013076:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001307d:	0f 85 92 00 00 00    	jne    c0013115 <Fs::setcwd(Process*, char*)+0x122>
c0013083:	e9 9b 00 00 00       	jmp    c0013123 <Fs::setcwd(Process*, char*)+0x130>
c0013088:	83 ec 0c             	sub    esp,0xc
c001308b:	68 14 01 00 00       	push   0x114
c0013090:	e8 04 c5 ff ff       	call   c000f599 <malloc>
c0013095:	83 c4 0c             	add    esp,0xc
c0013098:	89 c3                	mov    ebx,eax
c001309a:	55                   	push   ebp
c001309b:	56                   	push   esi
c001309c:	50                   	push   eax
c001309d:	e8 e0 fb ff ff       	call   c0012c82 <File::File(char const*, Process*)>
c00130a2:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00130a7:	83 c4 0c             	add    esp,0xc
c00130aa:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00130ae:	50                   	push   eax
c00130af:	8d 44 24 10          	lea    eax,[esp+0x10]
c00130b3:	50                   	push   eax
c00130b4:	53                   	push   ebx
c00130b5:	e8 d8 fe ff ff       	call   c0012f92 <File::stat(unsigned long long*, bool*)>
c00130ba:	83 c4 10             	add    esp,0x10
c00130bd:	83 f8 02             	cmp    eax,0x2
c00130c0:	74 04                	je     c00130c6 <Fs::setcwd(Process*, char*)+0xd3>
c00130c2:	85 c0                	test   eax,eax
c00130c4:	74 1c                	je     c00130e2 <Fs::setcwd(Process*, char*)+0xef>
c00130c6:	b8 01 00 00 00       	mov    eax,0x1
c00130cb:	85 db                	test   ebx,ebx
c00130cd:	74 54                	je     c0013123 <Fs::setcwd(Process*, char*)+0x130>
c00130cf:	83 ec 0c             	sub    esp,0xc
c00130d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00130d4:	53                   	push   ebx
c00130d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00130d8:	83 c4 10             	add    esp,0x10
c00130db:	b8 01 00 00 00       	mov    eax,0x1
c00130e0:	eb 41                	jmp    c0013123 <Fs::setcwd(Process*, char*)+0x130>
c00130e2:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00130e7:	75 1c                	jne    c0013105 <Fs::setcwd(Process*, char*)+0x112>
c00130e9:	b8 02 00 00 00       	mov    eax,0x2
c00130ee:	85 db                	test   ebx,ebx
c00130f0:	74 31                	je     c0013123 <Fs::setcwd(Process*, char*)+0x130>
c00130f2:	83 ec 0c             	sub    esp,0xc
c00130f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00130f7:	53                   	push   ebx
c00130f8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00130fb:	83 c4 10             	add    esp,0x10
c00130fe:	b8 02 00 00 00       	mov    eax,0x2
c0013103:	eb 1e                	jmp    c0013123 <Fs::setcwd(Process*, char*)+0x130>
c0013105:	85 db                	test   ebx,ebx
c0013107:	74 0c                	je     c0013115 <Fs::setcwd(Process*, char*)+0x122>
c0013109:	83 ec 0c             	sub    esp,0xc
c001310c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001310e:	53                   	push   ebx
c001310f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013112:	83 c4 10             	add    esp,0x10
c0013115:	50                   	push   eax
c0013116:	50                   	push   eax
c0013117:	56                   	push   esi
c0013118:	57                   	push   edi
c0013119:	e8 ee d6 fe ff       	call   c000080c <strcpy>
c001311e:	83 c4 10             	add    esp,0x10
c0013121:	31 c0                	xor    eax,eax
c0013123:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013129:	5b                   	pop    ebx
c001312a:	5e                   	pop    esi
c001312b:	5f                   	pop    edi
c001312c:	5d                   	pop    ebp
c001312d:	c3                   	ret    

c001312e <Directory::Directory(char const*, Process*)>:
c001312e:	83 ec 0c             	sub    esp,0xc
c0013131:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013135:	83 ec 08             	sub    esp,0x8
c0013138:	6a 00                	push   0x0
c001313a:	50                   	push   eax
c001313b:	e8 9c dc ff ff       	call   c0010ddc <UnixFile::UnixFile(int)>
c0013140:	83 c4 10             	add    esp,0x10
c0013143:	ba a4 a9 02 c0       	mov    edx,0xc002a9a4
c0013148:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001314c:	89 10                	mov    DWORD PTR [eax],edx
c001314e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013152:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001315c:	83 c0 0d             	add    eax,0xd
c001315f:	83 ec 04             	sub    esp,0x4
c0013162:	52                   	push   edx
c0013163:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013167:	50                   	push   eax
c0013168:	e8 6b f9 ff ff       	call   c0012ad8 <Fs::standardiseFiles(char*, char const*, char const*)>
c001316d:	83 c4 10             	add    esp,0x10
c0013170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013174:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013177:	8d 50 bf             	lea    edx,[eax-0x41]
c001317a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001317e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013188:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001318c:	90                   	nop
c001318d:	83 c4 0c             	add    esp,0xc
c0013190:	c3                   	ret    
c0013191:	90                   	nop

c0013192 <Directory::open()>:
c0013192:	53                   	push   ebx
c0013193:	b8 0b 00 00 00       	mov    eax,0xb
c0013198:	83 ec 08             	sub    esp,0x8
c001319b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001319f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00131a6:	80 fa 19             	cmp    dl,0x19
c00131a9:	77 3d                	ja     c00131e8 <Directory::open()+0x56>
c00131ab:	8b 14 95 00 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2000]
c00131b2:	85 d2                	test   edx,edx
c00131b4:	74 32                	je     c00131e8 <Directory::open()+0x56>
c00131b6:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00131bc:	85 d2                	test   edx,edx
c00131be:	74 28                	je     c00131e8 <Directory::open()+0x56>
c00131c0:	b8 06 00 00 00       	mov    eax,0x6
c00131c5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00131c9:	75 1d                	jne    c00131e8 <Directory::open()+0x56>
c00131cb:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00131d1:	50                   	push   eax
c00131d2:	8b 02                	mov    eax,DWORD PTR [edx]
c00131d4:	51                   	push   ecx
c00131d5:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00131d8:	51                   	push   ecx
c00131d9:	52                   	push   edx
c00131da:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00131dd:	83 c4 10             	add    esp,0x10
c00131e0:	85 c0                	test   eax,eax
c00131e2:	75 04                	jne    c00131e8 <Directory::open()+0x56>
c00131e4:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00131e8:	83 c4 08             	add    esp,0x8
c00131eb:	5b                   	pop    ebx
c00131ec:	c3                   	ret    
c00131ed:	90                   	nop

c00131ee <Directory::close()>:
c00131ee:	53                   	push   ebx
c00131ef:	b8 0b 00 00 00       	mov    eax,0xb
c00131f4:	83 ec 08             	sub    esp,0x8
c00131f7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00131fb:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013202:	80 fa 19             	cmp    dl,0x19
c0013205:	77 41                	ja     c0013248 <Directory::close()+0x5a>
c0013207:	8b 1c 95 00 e0 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2000]
c001320e:	85 db                	test   ebx,ebx
c0013210:	74 36                	je     c0013248 <Directory::close()+0x5a>
c0013212:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013219:	74 2d                	je     c0013248 <Directory::close()+0x5a>
c001321b:	b8 05 00 00 00       	mov    eax,0x5
c0013220:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013224:	74 22                	je     c0013248 <Directory::close()+0x5a>
c0013226:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001322a:	8b 04 95 00 e0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2000]
c0013231:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013237:	53                   	push   ebx
c0013238:	53                   	push   ebx
c0013239:	8b 10                	mov    edx,DWORD PTR [eax]
c001323b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013241:	50                   	push   eax
c0013242:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013245:	83 c4 10             	add    esp,0x10
c0013248:	83 c4 08             	add    esp,0x8
c001324b:	5b                   	pop    ebx
c001324c:	c3                   	ret    
c001324d:	90                   	nop

c001324e <Directory::unlink()>:
c001324e:	83 ec 0c             	sub    esp,0xc
c0013251:	b8 0b 00 00 00       	mov    eax,0xb
c0013256:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001325a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013261:	80 f9 19             	cmp    cl,0x19
c0013264:	77 2f                	ja     c0013295 <Directory::unlink()+0x47>
c0013266:	8b 0c 8d 00 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2000]
c001326d:	85 c9                	test   ecx,ecx
c001326f:	74 24                	je     c0013295 <Directory::unlink()+0x47>
c0013271:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013277:	85 c9                	test   ecx,ecx
c0013279:	74 1a                	je     c0013295 <Directory::unlink()+0x47>
c001327b:	b8 06 00 00 00       	mov    eax,0x6
c0013280:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013284:	75 0f                	jne    c0013295 <Directory::unlink()+0x47>
c0013286:	83 c2 0d             	add    edx,0xd
c0013289:	50                   	push   eax
c001328a:	50                   	push   eax
c001328b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001328d:	52                   	push   edx
c001328e:	51                   	push   ecx
c001328f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013292:	83 c4 10             	add    esp,0x10
c0013295:	83 c4 0c             	add    esp,0xc
c0013298:	c3                   	ret    
c0013299:	90                   	nop

c001329a <Directory::rename(char const*)>:
c001329a:	83 ec 0c             	sub    esp,0xc
c001329d:	b8 0b 00 00 00       	mov    eax,0xb
c00132a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132a6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132ad:	80 f9 19             	cmp    cl,0x19
c00132b0:	77 32                	ja     c00132e4 <Directory::rename(char const*)+0x4a>
c00132b2:	8b 0c 8d 00 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2000]
c00132b9:	85 c9                	test   ecx,ecx
c00132bb:	74 27                	je     c00132e4 <Directory::rename(char const*)+0x4a>
c00132bd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132c3:	85 c9                	test   ecx,ecx
c00132c5:	74 1d                	je     c00132e4 <Directory::rename(char const*)+0x4a>
c00132c7:	b8 06 00 00 00       	mov    eax,0x6
c00132cc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00132d0:	75 12                	jne    c00132e4 <Directory::rename(char const*)+0x4a>
c00132d2:	83 c2 0d             	add    edx,0xd
c00132d5:	50                   	push   eax
c00132d6:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00132dc:	52                   	push   edx
c00132dd:	51                   	push   ecx
c00132de:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00132e1:	83 c4 10             	add    esp,0x10
c00132e4:	83 c4 0c             	add    esp,0xc
c00132e7:	c3                   	ret    

c00132e8 <Directory::exists()>:
c00132e8:	83 ec 0c             	sub    esp,0xc
c00132eb:	31 c0                	xor    eax,eax
c00132ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132f1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132f8:	80 f9 19             	cmp    cl,0x19
c00132fb:	77 24                	ja     c0013321 <Directory::exists()+0x39>
c00132fd:	8b 0c 8d 00 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2000]
c0013304:	85 c9                	test   ecx,ecx
c0013306:	74 19                	je     c0013321 <Directory::exists()+0x39>
c0013308:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001330e:	85 c9                	test   ecx,ecx
c0013310:	74 0f                	je     c0013321 <Directory::exists()+0x39>
c0013312:	83 c2 0d             	add    edx,0xd
c0013315:	50                   	push   eax
c0013316:	50                   	push   eax
c0013317:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013319:	52                   	push   edx
c001331a:	51                   	push   ecx
c001331b:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001331e:	83 c4 10             	add    esp,0x10
c0013321:	83 c4 0c             	add    esp,0xc
c0013324:	c3                   	ret    
c0013325:	90                   	nop

c0013326 <Directory::read(dirent*)>:
c0013326:	83 ec 1c             	sub    esp,0x1c
c0013329:	b8 0b 00 00 00       	mov    eax,0xb
c001332e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013332:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013339:	80 fa 19             	cmp    dl,0x19
c001333c:	77 30                	ja     c001336e <Directory::read(dirent*)+0x48>
c001333e:	8b 14 95 00 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2000]
c0013345:	85 d2                	test   edx,edx
c0013347:	74 25                	je     c001336e <Directory::read(dirent*)+0x48>
c0013349:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013350:	74 1c                	je     c001336e <Directory::read(dirent*)+0x48>
c0013352:	83 ec 0c             	sub    esp,0xc
c0013355:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013357:	8d 54 24 18          	lea    edx,[esp+0x18]
c001335b:	52                   	push   edx
c001335c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013360:	6a 00                	push   0x0
c0013362:	68 10 01 00 00       	push   0x110
c0013367:	51                   	push   ecx
c0013368:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001336b:	83 c4 20             	add    esp,0x20
c001336e:	83 c4 1c             	add    esp,0x1c
c0013371:	c3                   	ret    

c0013372 <Directory::create()>:
c0013372:	83 ec 0c             	sub    esp,0xc
c0013375:	b8 0b 00 00 00       	mov    eax,0xb
c001337a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001337e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013385:	80 f9 19             	cmp    cl,0x19
c0013388:	77 2f                	ja     c00133b9 <Directory::create()+0x47>
c001338a:	8b 0c 8d 00 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2000]
c0013391:	85 c9                	test   ecx,ecx
c0013393:	74 24                	je     c00133b9 <Directory::create()+0x47>
c0013395:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001339b:	85 c9                	test   ecx,ecx
c001339d:	74 1a                	je     c00133b9 <Directory::create()+0x47>
c001339f:	b8 06 00 00 00       	mov    eax,0x6
c00133a4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00133a8:	75 0f                	jne    c00133b9 <Directory::create()+0x47>
c00133aa:	83 c2 0d             	add    edx,0xd
c00133ad:	50                   	push   eax
c00133ae:	50                   	push   eax
c00133af:	8b 01                	mov    eax,DWORD PTR [ecx]
c00133b1:	52                   	push   edx
c00133b2:	51                   	push   ecx
c00133b3:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00133b6:	83 c4 10             	add    esp,0x10
c00133b9:	83 c4 0c             	add    esp,0xc
c00133bc:	c3                   	ret    
c00133bd:	90                   	nop

c00133be <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c00133be:	b8 0a 00 00 00       	mov    eax,0xa
c00133c3:	c3                   	ret    

c00133c4 <Bus::Bus(char const*)>:
c00133c4:	83 ec 0c             	sub    esp,0xc
c00133c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133cb:	83 ec 08             	sub    esp,0x8
c00133ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133d2:	50                   	push   eax
c00133d3:	e8 88 09 00 00       	call   c0013d60 <Device::Device(char const*)>
c00133d8:	83 c4 10             	add    esp,0x10
c00133db:	ba c0 a9 02 c0       	mov    edx,0xc002a9c0
c00133e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133e4:	89 10                	mov    DWORD PTR [eax],edx
c00133e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133ea:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00133f4:	90                   	nop
c00133f5:	83 c4 0c             	add    esp,0xc
c00133f8:	c3                   	ret    
c00133f9:	90                   	nop

c00133fa <Bus::~Bus()>:
c00133fa:	83 ec 0c             	sub    esp,0xc
c00133fd:	ba c0 a9 02 c0       	mov    edx,0xc002a9c0
c0013402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013406:	89 10                	mov    DWORD PTR [eax],edx
c0013408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001340c:	83 ec 0c             	sub    esp,0xc
c001340f:	50                   	push   eax
c0013410:	e8 15 06 00 00       	call   c0013a2a <Device::~Device()>
c0013415:	83 c4 10             	add    esp,0x10
c0013418:	90                   	nop
c0013419:	83 c4 0c             	add    esp,0xc
c001341c:	c3                   	ret    
c001341d:	90                   	nop

c001341e <Bus::~Bus()>:
c001341e:	83 ec 0c             	sub    esp,0xc
c0013421:	83 ec 0c             	sub    esp,0xc
c0013424:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013428:	e8 cd ff ff ff       	call   c00133fa <Bus::~Bus()>
c001342d:	83 c4 10             	add    esp,0x10
c0013430:	83 ec 08             	sub    esp,0x8
c0013433:	68 58 01 00 00       	push   0x158
c0013438:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001343c:	e8 0a f2 ff ff       	call   c001264b <operator delete(void*, unsigned long)>
c0013441:	83 c4 10             	add    esp,0x10
c0013444:	83 c4 0c             	add    esp,0xc
c0013447:	c3                   	ret    

c0013448 <Buzzer::Buzzer(char const*)>:
c0013448:	83 ec 0c             	sub    esp,0xc
c001344b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001344f:	83 ec 08             	sub    esp,0x8
c0013452:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013456:	50                   	push   eax
c0013457:	e8 04 09 00 00       	call   c0013d60 <Device::Device(char const*)>
c001345c:	83 c4 10             	add    esp,0x10
c001345f:	ba ec a9 02 c0       	mov    edx,0xc002a9ec
c0013464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013468:	89 10                	mov    DWORD PTR [eax],edx
c001346a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001346e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001347c:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013486:	90                   	nop
c0013487:	83 c4 0c             	add    esp,0xc
c001348a:	c3                   	ret    
c001348b:	90                   	nop

c001348c <Buzzer::~Buzzer()>:
c001348c:	83 ec 0c             	sub    esp,0xc
c001348f:	ba ec a9 02 c0       	mov    edx,0xc002a9ec
c0013494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013498:	89 10                	mov    DWORD PTR [eax],edx
c001349a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001349e:	83 ec 0c             	sub    esp,0xc
c00134a1:	50                   	push   eax
c00134a2:	e8 83 05 00 00       	call   c0013a2a <Device::~Device()>
c00134a7:	83 c4 10             	add    esp,0x10
c00134aa:	90                   	nop
c00134ab:	83 c4 0c             	add    esp,0xc
c00134ae:	c3                   	ret    
c00134af:	90                   	nop

c00134b0 <Buzzer::~Buzzer()>:
c00134b0:	83 ec 0c             	sub    esp,0xc
c00134b3:	83 ec 0c             	sub    esp,0xc
c00134b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134ba:	e8 cd ff ff ff       	call   c001348c <Buzzer::~Buzzer()>
c00134bf:	83 c4 10             	add    esp,0x10
c00134c2:	83 ec 08             	sub    esp,0x8
c00134c5:	68 5c 01 00 00       	push   0x15c
c00134ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134ce:	e8 78 f1 ff ff       	call   c001264b <operator delete(void*, unsigned long)>
c00134d3:	83 c4 10             	add    esp,0x10
c00134d6:	83 c4 0c             	add    esp,0xc
c00134d9:	c3                   	ret    

c00134da <Buzzer::stop()>:
c00134da:	83 ec 14             	sub    esp,0x14
c00134dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00134e3:	6a 00                	push   0x0
c00134e5:	50                   	push   eax
c00134e6:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00134e9:	83 c4 1c             	add    esp,0x1c
c00134ec:	c3                   	ret    

c00134ed <beepThread(void*)>:
c00134ed:	53                   	push   ebx
c00134ee:	83 ec 08             	sub    esp,0x8
c00134f1:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c00134f6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00134fa:	48                   	dec    eax
c00134fb:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c0013500:	75 01                	jne    c0013503 <beepThread(void*)+0x16>
c0013502:	fb                   	sti    
c0013503:	50                   	push   eax
c0013504:	50                   	push   eax
c0013505:	b8 40 42 0f 00       	mov    eax,0xf4240
c001350a:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013510:	52                   	push   edx
c0013511:	50                   	push   eax
c0013512:	e8 e2 a7 00 00       	call   c001dcf9 <nanoSleep(unsigned long long)>
c0013517:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001351a:	e8 bb ff ff ff       	call   c00134da <Buzzer::stop()>
c001351f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013527:	83 c4 18             	add    esp,0x18
c001352a:	5b                   	pop    ebx
c001352b:	e9 c5 a6 00 00       	jmp    c001dbf5 <blockTask(TaskState)>

c0013530 <Buzzer::beep(int, int, bool)>:
c0013530:	57                   	push   edi
c0013531:	56                   	push   esi
c0013532:	53                   	push   ebx
c0013533:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013537:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001353b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001353f:	52                   	push   edx
c0013540:	52                   	push   edx
c0013541:	8b 06                	mov    eax,DWORD PTR [esi]
c0013543:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013547:	56                   	push   esi
c0013548:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001354b:	83 c4 10             	add    esp,0x10
c001354e:	89 f8                	mov    eax,edi
c0013550:	84 c0                	test   al,al
c0013552:	74 1f                	je     c0013573 <Buzzer::beep(int, int, bool)+0x43>
c0013554:	50                   	push   eax
c0013555:	50                   	push   eax
c0013556:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c001355c:	99                   	cdq    
c001355d:	52                   	push   edx
c001355e:	50                   	push   eax
c001355f:	e8 95 a7 00 00       	call   c001dcf9 <nanoSleep(unsigned long long)>
c0013564:	83 c4 10             	add    esp,0x10
c0013567:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001356b:	5b                   	pop    ebx
c001356c:	5e                   	pop    esi
c001356d:	5f                   	pop    edi
c001356e:	e9 67 ff ff ff       	jmp    c00134da <Buzzer::stop()>
c0013573:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013579:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001357e:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013586:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001358a:	c7 44 24 14 ed 34 01 c0 	mov    DWORD PTR [esp+0x14],0xc00134ed
c0013592:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013596:	5b                   	pop    ebx
c0013597:	5e                   	pop    esi
c0013598:	5f                   	pop    edi
c0013599:	e9 5c a2 00 00       	jmp    c001d7fa <Process::createThread(void (*)(void*), void*, int)>

c001359e <User::loadClockSettings(int)>:
c001359e:	53                   	push   ebx
c001359f:	83 ec 14             	sub    esp,0x14
c00135a2:	68 14 01 00 00       	push   0x114
c00135a7:	e8 ed bf ff ff       	call   c000f599 <malloc>
c00135ac:	83 c4 0c             	add    esp,0xc
c00135af:	89 c3                	mov    ebx,eax
c00135b1:	ff 35 50 0f 03 c0    	push   DWORD PTR ds:0xc0030f50
c00135b7:	68 14 aa 02 c0       	push   0xc002aa14
c00135bc:	50                   	push   eax
c00135bd:	e8 c0 f6 ff ff       	call   c0012c82 <File::File(char const*, Process*)>
c00135c2:	58                   	pop    eax
c00135c3:	5a                   	pop    edx
c00135c4:	6a 01                	push   0x1
c00135c6:	53                   	push   ebx
c00135c7:	e8 1a f7 ff ff       	call   c0012ce6 <File::open(FileOpenMode)>
c00135cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00135cf:	e8 70 f7 ff ff       	call   c0012d44 <File::close()>
c00135d4:	83 c4 10             	add    esp,0x10
c00135d7:	85 db                	test   ebx,ebx
c00135d9:	74 0f                	je     c00135ea <User::loadClockSettings(int)+0x4c>
c00135db:	8b 03                	mov    eax,DWORD PTR [ebx]
c00135dd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00135e1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00135e4:	83 c4 08             	add    esp,0x8
c00135e7:	5b                   	pop    ebx
c00135e8:	ff e0                	jmp    eax
c00135ea:	83 c4 08             	add    esp,0x8
c00135ed:	5b                   	pop    ebx
c00135ee:	c3                   	ret    
c00135ef:	90                   	nop

c00135f0 <Clock::Clock(char const*)>:
c00135f0:	83 ec 0c             	sub    esp,0xc
c00135f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135f7:	83 ec 08             	sub    esp,0x8
c00135fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135fe:	50                   	push   eax
c00135ff:	e8 5c 07 00 00       	call   c0013d60 <Device::Device(char const*)>
c0013604:	83 c4 10             	add    esp,0x10
c0013607:	ba 3c aa 02 c0       	mov    edx,0xc002aa3c
c001360c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013610:	89 10                	mov    DWORD PTR [eax],edx
c0013612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013616:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013620:	90                   	nop
c0013621:	83 c4 0c             	add    esp,0xc
c0013624:	c3                   	ret    
c0013625:	90                   	nop

c0013626 <Clock::~Clock()>:
c0013626:	83 ec 0c             	sub    esp,0xc
c0013629:	ba 3c aa 02 c0       	mov    edx,0xc002aa3c
c001362e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013632:	89 10                	mov    DWORD PTR [eax],edx
c0013634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013638:	83 ec 0c             	sub    esp,0xc
c001363b:	50                   	push   eax
c001363c:	e8 e9 03 00 00       	call   c0013a2a <Device::~Device()>
c0013641:	83 c4 10             	add    esp,0x10
c0013644:	90                   	nop
c0013645:	83 c4 0c             	add    esp,0xc
c0013648:	c3                   	ret    
c0013649:	90                   	nop

c001364a <Clock::~Clock()>:
c001364a:	83 ec 0c             	sub    esp,0xc
c001364d:	83 ec 0c             	sub    esp,0xc
c0013650:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013654:	e8 cd ff ff ff       	call   c0013626 <Clock::~Clock()>
c0013659:	83 c4 10             	add    esp,0x10
c001365c:	83 ec 08             	sub    esp,0x8
c001365f:	68 58 01 00 00       	push   0x158
c0013664:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013668:	e8 de ef ff ff       	call   c001264b <operator delete(void*, unsigned long)>
c001366d:	83 c4 10             	add    esp,0x10
c0013670:	83 c4 0c             	add    esp,0xc
c0013673:	c3                   	ret    

c0013674 <Clock::timeInSecondsLocal()>:
c0013674:	53                   	push   ebx
c0013675:	83 ec 14             	sub    esp,0x14
c0013678:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001367c:	8b 10                	mov    edx,DWORD PTR [eax]
c001367e:	50                   	push   eax
c001367f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013682:	0f b6 0d 7c db 02 c0 	movzx  ecx,BYTE PTR ds:0xc002db7c
c0013689:	03 0d 80 db 02 c0    	add    ecx,DWORD PTR ds:0xc002db80
c001368f:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013695:	89 cb                	mov    ebx,ecx
c0013697:	c1 fb 1f             	sar    ebx,0x1f
c001369a:	01 c8                	add    eax,ecx
c001369c:	11 da                	adc    edx,ebx
c001369e:	83 c4 10             	add    esp,0x10
c00136a1:	31 c9                	xor    ecx,ecx
c00136a3:	80 3d 7d db 02 c0 00 	cmp    BYTE PTR ds:0xc002db7d,0x0
c00136aa:	74 05                	je     c00136b1 <Clock::timeInSecondsLocal()+0x3d>
c00136ac:	b9 08 07 00 00       	mov    ecx,0x708
c00136b1:	31 db                	xor    ebx,ebx
c00136b3:	01 c8                	add    eax,ecx
c00136b5:	11 da                	adc    edx,ebx
c00136b7:	83 c4 08             	add    esp,0x8
c00136ba:	5b                   	pop    ebx
c00136bb:	c3                   	ret    

c00136bc <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00136bc:	57                   	push   edi
c00136bd:	56                   	push   esi
c00136be:	53                   	push   ebx
c00136bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00136c3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00136c7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136c9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00136cd:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00136d0:	0f b6 05 7c db 02 c0 	movzx  eax,BYTE PTR ds:0xc002db7c
c00136d7:	03 05 80 db 02 c0    	add    eax,DWORD PTR ds:0xc002db80
c00136dd:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00136e3:	99                   	cdq    
c00136e4:	29 c6                	sub    esi,eax
c00136e6:	19 d7                	sbb    edi,edx
c00136e8:	89 f0                	mov    eax,esi
c00136ea:	89 fa                	mov    edx,edi
c00136ec:	31 f6                	xor    esi,esi
c00136ee:	80 3d 7d db 02 c0 00 	cmp    BYTE PTR ds:0xc002db7d,0x0
c00136f5:	74 05                	je     c00136fc <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00136f7:	be 08 07 00 00       	mov    esi,0x708
c00136fc:	31 ff                	xor    edi,edi
c00136fe:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013702:	29 f0                	sub    eax,esi
c0013704:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013708:	19 fa                	sbb    edx,edi
c001370a:	89 d8                	mov    eax,ebx
c001370c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013710:	5b                   	pop    ebx
c0013711:	5e                   	pop    esi
c0013712:	5f                   	pop    edi
c0013713:	ff e0                	jmp    eax

c0013715 <datetimeToSeconds(datetime_t)>:
c0013715:	55                   	push   ebp
c0013716:	57                   	push   edi
c0013717:	56                   	push   esi
c0013718:	53                   	push   ebx
c0013719:	83 ec 14             	sub    esp,0x14
c001371c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013720:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013724:	89 d3                	mov    ebx,edx
c0013726:	0f b6 c6             	movzx  eax,dh
c0013729:	c1 eb 10             	shr    ebx,0x10
c001372c:	48                   	dec    eax
c001372d:	66 81 eb 6c 07       	sub    bx,0x76c
c0013732:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013736:	0f b6 f5             	movzx  esi,ch
c0013739:	89 cf                	mov    edi,ecx
c001373b:	6b f6 3c             	imul   esi,esi,0x3c
c001373e:	c1 ef 10             	shr    edi,0x10
c0013741:	0f b6 c9             	movzx  ecx,cl
c0013744:	89 f8                	mov    eax,edi
c0013746:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001374c:	0f b6 f8             	movzx  edi,al
c001374f:	0f b6 d2             	movzx  edx,dl
c0013752:	01 fe                	add    esi,edi
c0013754:	01 f1                	add    ecx,esi
c0013756:	0f b7 f3             	movzx  esi,bx
c0013759:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001375d:	c1 f9 1f             	sar    ecx,0x1f
c0013760:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013765:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013769:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c001376e:	8b 0c 8d 80 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5580]
c0013775:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013779:	76 29                	jbe    c00137a4 <datetimeToSeconds(datetime_t)+0x8f>
c001377b:	f6 c3 03             	test   bl,0x3
c001377e:	75 24                	jne    c00137a4 <datetimeToSeconds(datetime_t)+0x8f>
c0013780:	31 d2                	xor    edx,edx
c0013782:	bf 64 00 00 00       	mov    edi,0x64
c0013787:	89 d8                	mov    eax,ebx
c0013789:	66 f7 f7             	div    di
c001378c:	66 85 d2             	test   dx,dx
c001378f:	75 12                	jne    c00137a3 <datetimeToSeconds(datetime_t)+0x8e>
c0013791:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013797:	bf 90 01 00 00       	mov    edi,0x190
c001379c:	99                   	cdq    
c001379d:	f7 ff                	idiv   edi
c001379f:	85 d2                	test   edx,edx
c00137a1:	75 01                	jne    c00137a4 <datetimeToSeconds(datetime_t)+0x8f>
c00137a3:	41                   	inc    ecx
c00137a4:	66 83 fb 46          	cmp    bx,0x46
c00137a8:	76 45                	jbe    c00137ef <datetimeToSeconds(datetime_t)+0xda>
c00137aa:	bb 46 00 00 00       	mov    ebx,0x46
c00137af:	bf 64 00 00 00       	mov    edi,0x64
c00137b4:	bd 90 01 00 00       	mov    ebp,0x190
c00137b9:	b8 6d 01 00 00       	mov    eax,0x16d
c00137be:	f6 c3 03             	test   bl,0x3
c00137c1:	75 23                	jne    c00137e6 <datetimeToSeconds(datetime_t)+0xd1>
c00137c3:	89 d8                	mov    eax,ebx
c00137c5:	99                   	cdq    
c00137c6:	f7 ff                	idiv   edi
c00137c8:	b8 6e 01 00 00       	mov    eax,0x16e
c00137cd:	85 d2                	test   edx,edx
c00137cf:	75 15                	jne    c00137e6 <datetimeToSeconds(datetime_t)+0xd1>
c00137d1:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00137d7:	99                   	cdq    
c00137d8:	f7 fd                	idiv   ebp
c00137da:	83 fa 01             	cmp    edx,0x1
c00137dd:	19 c0                	sbb    eax,eax
c00137df:	f7 d0                	not    eax
c00137e1:	05 6e 01 00 00       	add    eax,0x16e
c00137e6:	01 c1                	add    ecx,eax
c00137e8:	43                   	inc    ebx
c00137e9:	39 f3                	cmp    ebx,esi
c00137eb:	7c cc                	jl     c00137b9 <datetimeToSeconds(datetime_t)+0xa4>
c00137ed:	eb 35                	jmp    c0013824 <datetimeToSeconds(datetime_t)+0x10f>
c00137ef:	74 33                	je     c0013824 <datetimeToSeconds(datetime_t)+0x10f>
c00137f1:	b8 45 00 00 00       	mov    eax,0x45
c00137f6:	89 c2                	mov    edx,eax
c00137f8:	83 e2 03             	and    edx,0x3
c00137fb:	39 f0                	cmp    eax,esi
c00137fd:	7e 0f                	jle    c001380e <datetimeToSeconds(datetime_t)+0xf9>
c00137ff:	83 fa 01             	cmp    edx,0x1
c0013802:	19 d2                	sbb    edx,edx
c0013804:	48                   	dec    eax
c0013805:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001380c:	eb e8                	jmp    c00137f6 <datetimeToSeconds(datetime_t)+0xe1>
c001380e:	b8 6d 01 00 00       	mov    eax,0x16d
c0013813:	85 d2                	test   edx,edx
c0013815:	75 0b                	jne    c0013822 <datetimeToSeconds(datetime_t)+0x10d>
c0013817:	66 83 fb 01          	cmp    bx,0x1
c001381b:	19 c0                	sbb    eax,eax
c001381d:	05 6e 01 00 00       	add    eax,0x16e
c0013822:	29 c1                	sub    ecx,eax
c0013824:	b8 80 51 01 00       	mov    eax,0x15180
c0013829:	f7 e9                	imul   ecx
c001382b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001382f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013833:	83 c4 14             	add    esp,0x14
c0013836:	5b                   	pop    ebx
c0013837:	5e                   	pop    esi
c0013838:	5f                   	pop    edi
c0013839:	5d                   	pop    ebp
c001383a:	c3                   	ret    
c001383b:	90                   	nop

c001383c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001383c:	57                   	push   edi
c001383d:	56                   	push   esi
c001383e:	53                   	push   ebx
c001383f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013843:	8b 06                	mov    eax,DWORD PTR [esi]
c0013845:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013848:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001384c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013850:	e8 c0 fe ff ff       	call   c0013715 <datetimeToSeconds(datetime_t)>
c0013855:	59                   	pop    ecx
c0013856:	0f b6 0d 7c db 02 c0 	movzx  ecx,BYTE PTR ds:0xc002db7c
c001385d:	5b                   	pop    ebx
c001385e:	03 0d 80 db 02 c0    	add    ecx,DWORD PTR ds:0xc002db80
c0013864:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001386a:	89 cb                	mov    ebx,ecx
c001386c:	c1 fb 1f             	sar    ebx,0x1f
c001386f:	29 c8                	sub    eax,ecx
c0013871:	19 da                	sbb    edx,ebx
c0013873:	31 c9                	xor    ecx,ecx
c0013875:	80 3d 7d db 02 c0 00 	cmp    BYTE PTR ds:0xc002db7d,0x0
c001387c:	74 05                	je     c0013883 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001387e:	b9 08 07 00 00       	mov    ecx,0x708
c0013883:	31 db                	xor    ebx,ebx
c0013885:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013889:	29 c8                	sub    eax,ecx
c001388b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001388f:	19 da                	sbb    edx,ebx
c0013891:	89 f8                	mov    eax,edi
c0013893:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013897:	5b                   	pop    ebx
c0013898:	5e                   	pop    esi
c0013899:	5f                   	pop    edi
c001389a:	ff e0                	jmp    eax

c001389c <secondsToDatetime(unsigned long long)>:
c001389c:	55                   	push   ebp
c001389d:	57                   	push   edi
c001389e:	56                   	push   esi
c001389f:	53                   	push   ebx
c00138a0:	83 ec 1c             	sub    esp,0x1c
c00138a3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00138a7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00138ab:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00138af:	6a 00                	push   0x0
c00138b1:	68 80 51 01 00       	push   0x15180
c00138b6:	55                   	push   ebp
c00138b7:	57                   	push   edi
c00138b8:	e8 a7 2e 01 00       	call   c0026764 <__udivdi3>
c00138bd:	83 c4 10             	add    esp,0x10
c00138c0:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00138c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00138ca:	6a 00                	push   0x0
c00138cc:	68 80 51 01 00       	push   0x15180
c00138d1:	55                   	push   ebp
c00138d2:	57                   	push   edi
c00138d3:	bf 10 0e 00 00       	mov    edi,0xe10
c00138d8:	e8 87 2f 01 00       	call   c0026864 <__umoddi3>
c00138dd:	83 c4 10             	add    esp,0x10
c00138e0:	99                   	cdq    
c00138e1:	f7 ff                	idiv   edi
c00138e3:	bf 3c 00 00 00       	mov    edi,0x3c
c00138e8:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00138eb:	89 d0                	mov    eax,edx
c00138ed:	99                   	cdq    
c00138ee:	f7 ff                	idiv   edi
c00138f0:	85 db                	test   ebx,ebx
c00138f2:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00138f5:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00138f8:	79 11                	jns    c001390b <secondsToDatetime(unsigned long long)+0x6f>
c00138fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00138fe:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013904:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013909:	eb 07                	jmp    c0013912 <secondsToDatetime(unsigned long long)+0x76>
c001390b:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013910:	89 d8                	mov    eax,ebx
c0013912:	bf b4 05 00 00       	mov    edi,0x5b4
c0013917:	99                   	cdq    
c0013918:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001391d:	f7 f9                	idiv   ecx
c001391f:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013924:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013928:	31 d2                	xor    edx,edx
c001392a:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013932:	01 c3                	add    ebx,eax
c0013934:	89 d8                	mov    eax,ebx
c0013936:	f7 f1                	div    ecx
c0013938:	31 d2                	xor    edx,edx
c001393a:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001393d:	89 d8                	mov    eax,ebx
c001393f:	f7 f7                	div    edi
c0013941:	31 d2                	xor    edx,edx
c0013943:	29 c1                	sub    ecx,eax
c0013945:	89 d8                	mov    eax,ebx
c0013947:	f7 f5                	div    ebp
c0013949:	bd 6d 01 00 00       	mov    ebp,0x16d
c001394e:	29 c1                	sub    ecx,eax
c0013950:	31 d2                	xor    edx,edx
c0013952:	89 c8                	mov    eax,ecx
c0013954:	f7 f5                	div    ebp
c0013956:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001395b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001395f:	31 d2                	xor    edx,edx
c0013961:	89 c8                	mov    eax,ecx
c0013963:	f7 f5                	div    ebp
c0013965:	31 d2                	xor    edx,edx
c0013967:	01 c3                	add    ebx,eax
c0013969:	89 c8                	mov    eax,ecx
c001396b:	f7 f7                	div    edi
c001396d:	bf 99 00 00 00       	mov    edi,0x99
c0013972:	29 c3                	sub    ebx,eax
c0013974:	31 d2                	xor    edx,edx
c0013976:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001397e:	29 c3                	sub    ebx,eax
c0013980:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013983:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013986:	bb 05 00 00 00       	mov    ebx,0x5
c001398b:	83 c1 02             	add    ecx,0x2
c001398e:	89 c8                	mov    eax,ecx
c0013990:	f7 f7                	div    edi
c0013992:	31 d2                	xor    edx,edx
c0013994:	89 c7                	mov    edi,eax
c0013996:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001399c:	83 c0 02             	add    eax,0x2
c001399f:	f7 f3                	div    ebx
c00139a1:	89 eb                	mov    ebx,ebp
c00139a3:	29 c3                	sub    ebx,eax
c00139a5:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00139ab:	88 1e                	mov    BYTE PTR [esi],bl
c00139ad:	19 c0                	sbb    eax,eax
c00139af:	31 d2                	xor    edx,edx
c00139b1:	83 e0 0c             	and    eax,0xc
c00139b4:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00139b8:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00139c0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00139c4:	83 f9 01             	cmp    ecx,0x1
c00139c7:	0f 96 c2             	setbe  dl
c00139ca:	41                   	inc    ecx
c00139cb:	01 d0                	add    eax,edx
c00139cd:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00139d0:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00139d4:	83 c4 1c             	add    esp,0x1c
c00139d7:	89 f0                	mov    eax,esi
c00139d9:	5b                   	pop    ebx
c00139da:	5e                   	pop    esi
c00139db:	5f                   	pop    edi
c00139dc:	5d                   	pop    ebp
c00139dd:	c2 04 00             	ret    0x4

c00139e0 <Clock::timeInDatetimeLocal()>:
c00139e0:	53                   	push   ebx
c00139e1:	83 ec 14             	sub    esp,0x14
c00139e4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00139e8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00139ec:	e8 83 fc ff ff       	call   c0013674 <Clock::timeInSecondsLocal()>
c00139f1:	83 c4 0c             	add    esp,0xc
c00139f4:	52                   	push   edx
c00139f5:	50                   	push   eax
c00139f6:	53                   	push   ebx
c00139f7:	e8 a0 fe ff ff       	call   c001389c <secondsToDatetime(unsigned long long)>
c00139fc:	89 d8                	mov    eax,ebx
c00139fe:	83 c4 14             	add    esp,0x14
c0013a01:	5b                   	pop    ebx
c0013a02:	c2 04 00             	ret    0x4
c0013a05:	90                   	nop

c0013a06 <Device::hibernate()>:
c0013a06:	c3                   	ret    
c0013a07:	90                   	nop

c0013a08 <Device::wake()>:
c0013a08:	c3                   	ret    
c0013a09:	90                   	nop

c0013a0a <Device::detect()>:
c0013a0a:	c3                   	ret    
c0013a0b:	90                   	nop

c0013a0c <Device::disableLegacy()>:
c0013a0c:	c3                   	ret    
c0013a0d:	90                   	nop

c0013a0e <Device::powerSaving(PowerSavingLevel)>:
c0013a0e:	c3                   	ret    
c0013a0f:	90                   	nop

c0013a10 <DriverlessDevice::close(int, int, void*)>:
c0013a10:	31 c0                	xor    eax,eax
c0013a12:	c3                   	ret    
c0013a13:	90                   	nop

c0013a14 <DriverlessDevice::detect()>:
c0013a14:	c3                   	ret    
c0013a15:	90                   	nop

c0013a16 <DriverlessDevice::open(int, int, void*)>:
c0013a16:	83 ec 18             	sub    esp,0x18
c0013a19:	68 b0 aa 02 c0       	push   0xc002aab0
c0013a1e:	e8 6c 64 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c0013a23:	83 c8 ff             	or     eax,0xffffffff
c0013a26:	83 c4 1c             	add    esp,0x1c
c0013a29:	c3                   	ret    

c0013a2a <Device::~Device()>:
c0013a2a:	ba 10 ab 02 c0       	mov    edx,0xc002ab10
c0013a2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a33:	89 10                	mov    DWORD PTR [eax],edx
c0013a35:	90                   	nop
c0013a36:	c3                   	ret    
c0013a37:	90                   	nop

c0013a38 <Device::~Device()>:
c0013a38:	83 ec 0c             	sub    esp,0xc
c0013a3b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013a3f:	e8 e6 ff ff ff       	call   c0013a2a <Device::~Device()>
c0013a44:	83 c4 04             	add    esp,0x4
c0013a47:	83 ec 08             	sub    esp,0x8
c0013a4a:	68 58 01 00 00       	push   0x158
c0013a4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a53:	e8 f3 eb ff ff       	call   c001264b <operator delete(void*, unsigned long)>
c0013a58:	83 c4 10             	add    esp,0x10
c0013a5b:	83 c4 0c             	add    esp,0xc
c0013a5e:	c3                   	ret    
c0013a5f:	90                   	nop

c0013a60 <Device::findAndLoadDriver()>:
c0013a60:	c7 44 24 04 ce aa 02 c0 	mov    DWORD PTR [esp+0x4],0xc002aace
c0013a68:	e9 b6 ec ff ff       	jmp    c0012723 <Dbg::kprintf(char const*, ...)>
c0013a6d:	90                   	nop

c0013a6e <Device::preOpenPCI(PCIDeviceInfo)>:
c0013a6e:	57                   	push   edi
c0013a6f:	b9 09 00 00 00       	mov    ecx,0x9
c0013a74:	56                   	push   esi
c0013a75:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013a79:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013a7d:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013a87:	81 c7 18 01 00 00    	add    edi,0x118
c0013a8d:	fc                   	cld    
c0013a8e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013a90:	5e                   	pop    esi
c0013a91:	5f                   	pop    edi
c0013a92:	c3                   	ret    
c0013a93:	90                   	nop

c0013a94 <Device::preOpenACPI(void*, char*, char*)>:
c0013a94:	57                   	push   edi
c0013a95:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013a9a:	56                   	push   esi
c0013a9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a9f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013aa3:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013aad:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013ab3:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013ab9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013abd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013abf:	b9 0e 00 00 00       	mov    ecx,0xe
c0013ac4:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013aca:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013ace:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ad0:	5e                   	pop    esi
c0013ad1:	5f                   	pop    edi
c0013ad2:	c3                   	ret    
c0013ad3:	90                   	nop

c0013ad4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013ad4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ad8:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013add:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013ae4:	75 0b                	jne    c0013af1 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013ae6:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ae8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013aec:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013aef:	eb 1e                	jmp    c0013b0f <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013af1:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0013af6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013afc:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013b02:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013b04:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b0c:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013b0f:	ff e0                	jmp    eax
c0013b11:	90                   	nop

c0013b12 <Device::getParent()>:
c0013b12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b16:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013b1c:	c3                   	ret    
c0013b1d:	90                   	nop

c0013b1e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013b1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b22:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013b27:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013b2e:	75 0b                	jne    c0013b3b <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013b30:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b32:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b36:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013b39:	eb 1e                	jmp    c0013b59 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013b3b:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0013b40:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013b46:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013b4c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013b4e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b56:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013b59:	ff e0                	jmp    eax
c0013b5b:	90                   	nop

c0013b5c <Device::addChild(Device*)>:
c0013b5c:	53                   	push   ebx
c0013b5d:	83 ec 08             	sub    esp,0x8
c0013b60:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b68:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013b6e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013b74:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013b76:	85 d2                	test   edx,edx
c0013b78:	74 04                	je     c0013b7e <Device::addChild(Device*)+0x22>
c0013b7a:	89 d3                	mov    ebx,edx
c0013b7c:	eb f6                	jmp    c0013b74 <Device::addChild(Device*)+0x18>
c0013b7e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013b81:	83 ec 0c             	sub    esp,0xc
c0013b84:	6a 08                	push   0x8
c0013b86:	e8 0e ba ff ff       	call   c000f599 <malloc>
c0013b8b:	89 03                	mov    DWORD PTR [ebx],eax
c0013b8d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013b93:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013b9a:	83 c4 18             	add    esp,0x18
c0013b9d:	5b                   	pop    ebx
c0013b9e:	c3                   	ret    
c0013b9f:	90                   	nop

c0013ba0 <Device::removeAllChildren()>:
c0013ba0:	56                   	push   esi
c0013ba1:	53                   	push   ebx
c0013ba2:	52                   	push   edx
c0013ba3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ba7:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013bad:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013bb0:	74 17                	je     c0013bc9 <Device::removeAllChildren()+0x29>
c0013bb2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013bb5:	85 c0                	test   eax,eax
c0013bb7:	74 0c                	je     c0013bc5 <Device::removeAllChildren()+0x25>
c0013bb9:	83 ec 0c             	sub    esp,0xc
c0013bbc:	8b 10                	mov    edx,DWORD PTR [eax]
c0013bbe:	50                   	push   eax
c0013bbf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013bc2:	83 c4 10             	add    esp,0x10
c0013bc5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bc7:	eb e4                	jmp    c0013bad <Device::removeAllChildren()+0xd>
c0013bc9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013bcf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013bd5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013bdb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013be2:	58                   	pop    eax
c0013be3:	5b                   	pop    ebx
c0013be4:	5e                   	pop    esi
c0013be5:	c3                   	ret    

c0013be6 <Device::hibernateAll()>:
c0013be6:	53                   	push   ebx
c0013be7:	83 ec 14             	sub    esp,0x14
c0013bea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013bee:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bf0:	53                   	push   ebx
c0013bf1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013bf4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013bfa:	83 c4 10             	add    esp,0x10
c0013bfd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c00:	74 0f                	je     c0013c11 <Device::hibernateAll()+0x2b>
c0013c02:	83 ec 0c             	sub    esp,0xc
c0013c05:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c08:	e8 d9 ff ff ff       	call   c0013be6 <Device::hibernateAll()>
c0013c0d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c0f:	eb e9                	jmp    c0013bfa <Device::hibernateAll()+0x14>
c0013c11:	83 c4 08             	add    esp,0x8
c0013c14:	5b                   	pop    ebx
c0013c15:	c3                   	ret    

c0013c16 <Device::wakeAll()>:
c0013c16:	53                   	push   ebx
c0013c17:	83 ec 14             	sub    esp,0x14
c0013c1a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c1e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c20:	53                   	push   ebx
c0013c21:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013c24:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c2a:	83 c4 10             	add    esp,0x10
c0013c2d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c30:	74 0f                	je     c0013c41 <Device::wakeAll()+0x2b>
c0013c32:	83 ec 0c             	sub    esp,0xc
c0013c35:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c38:	e8 d9 ff ff ff       	call   c0013c16 <Device::wakeAll()>
c0013c3d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c3f:	eb e9                	jmp    c0013c2a <Device::wakeAll()+0x14>
c0013c41:	83 c4 08             	add    esp,0x8
c0013c44:	5b                   	pop    ebx
c0013c45:	c3                   	ret    

c0013c46 <Device::detectAll()>:
c0013c46:	53                   	push   ebx
c0013c47:	83 ec 14             	sub    esp,0x14
c0013c4a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c4e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c50:	53                   	push   ebx
c0013c51:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013c54:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c5a:	83 c4 10             	add    esp,0x10
c0013c5d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c60:	74 0f                	je     c0013c71 <Device::detectAll()+0x2b>
c0013c62:	83 ec 0c             	sub    esp,0xc
c0013c65:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c68:	e8 d9 ff ff ff       	call   c0013c46 <Device::detectAll()>
c0013c6d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c6f:	eb e9                	jmp    c0013c5a <Device::detectAll()+0x14>
c0013c71:	83 c4 08             	add    esp,0x8
c0013c74:	5b                   	pop    ebx
c0013c75:	c3                   	ret    

c0013c76 <Device::disableLegacyAll()>:
c0013c76:	53                   	push   ebx
c0013c77:	83 ec 14             	sub    esp,0x14
c0013c7a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c80:	53                   	push   ebx
c0013c81:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013c84:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c8a:	83 c4 10             	add    esp,0x10
c0013c8d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c90:	74 0f                	je     c0013ca1 <Device::disableLegacyAll()+0x2b>
c0013c92:	83 ec 0c             	sub    esp,0xc
c0013c95:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c98:	e8 d9 ff ff ff       	call   c0013c76 <Device::disableLegacyAll()>
c0013c9d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c9f:	eb e9                	jmp    c0013c8a <Device::disableLegacyAll()+0x14>
c0013ca1:	83 c4 08             	add    esp,0x8
c0013ca4:	5b                   	pop    ebx
c0013ca5:	c3                   	ret    

c0013ca6 <Device::loadDriversForAll()>:
c0013ca6:	53                   	push   ebx
c0013ca7:	83 ec 08             	sub    esp,0x8
c0013caa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013cae:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013cb5:	75 0c                	jne    c0013cc3 <Device::loadDriversForAll()+0x1d>
c0013cb7:	83 ec 0c             	sub    esp,0xc
c0013cba:	53                   	push   ebx
c0013cbb:	e8 a0 fd ff ff       	call   c0013a60 <Device::findAndLoadDriver()>
c0013cc0:	83 c4 10             	add    esp,0x10
c0013cc3:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013cc9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ccc:	74 12                	je     c0013ce0 <Device::loadDriversForAll()+0x3a>
c0013cce:	83 ec 0c             	sub    esp,0xc
c0013cd1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013cd4:	e8 cd ff ff ff       	call   c0013ca6 <Device::loadDriversForAll()>
c0013cd9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013cdb:	83 c4 10             	add    esp,0x10
c0013cde:	eb e9                	jmp    c0013cc9 <Device::loadDriversForAll()+0x23>
c0013ce0:	83 c4 08             	add    esp,0x8
c0013ce3:	5b                   	pop    ebx
c0013ce4:	c3                   	ret    
c0013ce5:	90                   	nop

c0013ce6 <Device::closeAll()>:
c0013ce6:	53                   	push   ebx
c0013ce7:	83 ec 08             	sub    esp,0x8
c0013cea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013cee:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cf0:	6a 00                	push   0x0
c0013cf2:	6a 00                	push   0x0
c0013cf4:	6a 00                	push   0x0
c0013cf6:	53                   	push   ebx
c0013cf7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013cfa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d00:	83 c4 10             	add    esp,0x10
c0013d03:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d06:	74 0f                	je     c0013d17 <Device::closeAll()+0x31>
c0013d08:	83 ec 0c             	sub    esp,0xc
c0013d0b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d0e:	e8 d3 ff ff ff       	call   c0013ce6 <Device::closeAll()>
c0013d13:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d15:	eb e9                	jmp    c0013d00 <Device::closeAll()+0x1a>
c0013d17:	83 c4 08             	add    esp,0x8
c0013d1a:	5b                   	pop    ebx
c0013d1b:	c3                   	ret    

c0013d1c <Device::powerSavingAll(PowerSavingLevel)>:
c0013d1c:	56                   	push   esi
c0013d1d:	53                   	push   ebx
c0013d1e:	83 ec 0c             	sub    esp,0xc
c0013d21:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d25:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013d29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d2b:	56                   	push   esi
c0013d2c:	53                   	push   ebx
c0013d2d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013d30:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d36:	83 c4 10             	add    esp,0x10
c0013d39:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d3c:	74 0f                	je     c0013d4d <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013d3e:	52                   	push   edx
c0013d3f:	52                   	push   edx
c0013d40:	56                   	push   esi
c0013d41:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d44:	e8 d3 ff ff ff       	call   c0013d1c <Device::powerSavingAll(PowerSavingLevel)>
c0013d49:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d4b:	eb e9                	jmp    c0013d36 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013d4d:	58                   	pop    eax
c0013d4e:	5b                   	pop    ebx
c0013d4f:	5e                   	pop    esi
c0013d50:	c3                   	ret    
c0013d51:	90                   	nop

c0013d52 <Device::setName(char const*)>:
c0013d52:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013d5a:	e9 ad ca fe ff       	jmp    c000080c <strcpy>
c0013d5f:	90                   	nop

c0013d60 <Device::Device(char const*)>:
c0013d60:	83 ec 1c             	sub    esp,0x1c
c0013d63:	ba 10 ab 02 c0       	mov    edx,0xc002ab10
c0013d68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d6c:	89 10                	mov    DWORD PTR [eax],edx
c0013d6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d72:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013d7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d80:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013d8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d8e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013d98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d9c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013da6:	83 ec 08             	sub    esp,0x8
c0013da9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013dad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013db1:	e8 9c ff ff ff       	call   c0013d52 <Device::setName(char const*)>
c0013db6:	83 c4 10             	add    esp,0x10
c0013db9:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013dc1:	83 ec 0c             	sub    esp,0xc
c0013dc4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013dc8:	e8 cc b7 ff ff       	call   c000f599 <malloc>
c0013dcd:	83 c4 10             	add    esp,0x10
c0013dd0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013dd6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013ddd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013de1:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013de7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013deb:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013df1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013df7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dfb:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013e01:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013e08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e0c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013e13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e17:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013e1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e22:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013e2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e30:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013e3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e3e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013e48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e4c:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0013e56:	90                   	nop
c0013e57:	83 c4 1c             	add    esp,0x1c
c0013e5a:	c3                   	ret    
c0013e5b:	90                   	nop

c0013e5c <Device::getName()>:
c0013e5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e60:	05 d0 00 00 00       	add    eax,0xd0
c0013e65:	c3                   	ret    

c0013e66 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013e66:	83 ec 0c             	sub    esp,0xc
c0013e69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e6d:	83 ec 08             	sub    esp,0x8
c0013e70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e74:	50                   	push   eax
c0013e75:	e8 e6 fe ff ff       	call   c0013d60 <Device::Device(char const*)>
c0013e7a:	83 c4 10             	add    esp,0x10
c0013e7d:	ba 3c ab 02 c0       	mov    edx,0xc002ab3c
c0013e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e86:	89 10                	mov    DWORD PTR [eax],edx
c0013e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e8c:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013e96:	90                   	nop
c0013e97:	83 c4 0c             	add    esp,0xc
c0013e9a:	c3                   	ret    
c0013e9b:	90                   	nop

c0013e9c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013e9c:	57                   	push   edi
c0013e9d:	56                   	push   esi
c0013e9e:	53                   	push   ebx
c0013e9f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ea3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013ea7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013eab:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013eb1:	75 0c                	jne    c0013ebf <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013eb3:	52                   	push   edx
c0013eb4:	52                   	push   edx
c0013eb5:	53                   	push   ebx
c0013eb6:	56                   	push   esi
c0013eb7:	e8 e4 47 01 00       	call   c00286a0 <LinkedList<Device>::addElement(Device*)>
c0013ebc:	83 c4 10             	add    esp,0x10
c0013ebf:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ec5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ec8:	74 12                	je     c0013edc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013eca:	50                   	push   eax
c0013ecb:	57                   	push   edi
c0013ecc:	56                   	push   esi
c0013ecd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ed0:	e8 c7 ff ff ff       	call   c0013e9c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013ed5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ed7:	83 c4 10             	add    esp,0x10
c0013eda:	eb e9                	jmp    c0013ec5 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013edc:	5b                   	pop    ebx
c0013edd:	5e                   	pop    esi
c0013ede:	5f                   	pop    edi
c0013edf:	c3                   	ret    

c0013ee0 <getDevicesOfType(DeviceType)>:
c0013ee0:	53                   	push   ebx
c0013ee1:	83 ec 14             	sub    esp,0x14
c0013ee4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ee8:	53                   	push   ebx
c0013ee9:	e8 8e 48 01 00       	call   c002877c <LinkedList<Device>::LinkedList()>
c0013eee:	83 c4 0c             	add    esp,0xc
c0013ef1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ef5:	53                   	push   ebx
c0013ef6:	ff 35 08 da 02 c0    	push   DWORD PTR ds:0xc002da08
c0013efc:	e8 9b ff ff ff       	call   c0013e9c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013f01:	89 d8                	mov    eax,ebx
c0013f03:	83 c4 18             	add    esp,0x18
c0013f06:	5b                   	pop    ebx
c0013f07:	c2 04 00             	ret    0x4

c0013f0a <HardDiskController::HardDiskController(char const*)>:
c0013f0a:	83 ec 0c             	sub    esp,0xc
c0013f0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f11:	83 ec 08             	sub    esp,0x8
c0013f14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f18:	50                   	push   eax
c0013f19:	e8 42 fe ff ff       	call   c0013d60 <Device::Device(char const*)>
c0013f1e:	83 c4 10             	add    esp,0x10
c0013f21:	ba 68 ab 02 c0       	mov    edx,0xc002ab68
c0013f26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f2a:	89 10                	mov    DWORD PTR [eax],edx
c0013f2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f30:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013f3a:	90                   	nop
c0013f3b:	83 c4 0c             	add    esp,0xc
c0013f3e:	c3                   	ret    
c0013f3f:	90                   	nop

c0013f40 <HardDiskController::~HardDiskController()>:
c0013f40:	83 ec 0c             	sub    esp,0xc
c0013f43:	ba 68 ab 02 c0       	mov    edx,0xc002ab68
c0013f48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f4c:	89 10                	mov    DWORD PTR [eax],edx
c0013f4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f52:	83 ec 0c             	sub    esp,0xc
c0013f55:	50                   	push   eax
c0013f56:	e8 cf fa ff ff       	call   c0013a2a <Device::~Device()>
c0013f5b:	83 c4 10             	add    esp,0x10
c0013f5e:	90                   	nop
c0013f5f:	83 c4 0c             	add    esp,0xc
c0013f62:	c3                   	ret    
c0013f63:	90                   	nop

c0013f64 <HardDiskController::~HardDiskController()>:
c0013f64:	83 ec 0c             	sub    esp,0xc
c0013f67:	83 ec 0c             	sub    esp,0xc
c0013f6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f6e:	e8 cd ff ff ff       	call   c0013f40 <HardDiskController::~HardDiskController()>
c0013f73:	83 c4 10             	add    esp,0x10
c0013f76:	83 ec 08             	sub    esp,0x8
c0013f79:	68 58 01 00 00       	push   0x158
c0013f7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f82:	e8 c4 e6 ff ff       	call   c001264b <operator delete(void*, unsigned long)>
c0013f87:	83 c4 10             	add    esp,0x10
c0013f8a:	83 c4 0c             	add    esp,0xc
c0013f8d:	c3                   	ret    

c0013f8e <PhysicalDisk::eject()>:
c0013f8e:	83 c8 ff             	or     eax,0xffffffff
c0013f91:	c3                   	ret    

c0013f92 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013f92:	83 ec 0c             	sub    esp,0xc
c0013f95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f99:	83 ec 08             	sub    esp,0x8
c0013f9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fa0:	50                   	push   eax
c0013fa1:	e8 ba fd ff ff       	call   c0013d60 <Device::Device(char const*)>
c0013fa6:	83 c4 10             	add    esp,0x10
c0013fa9:	ba 94 ab 02 c0       	mov    edx,0xc002ab94
c0013fae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fb2:	89 10                	mov    DWORD PTR [eax],edx
c0013fb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fb8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013fbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fc3:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013fca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fce:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013fd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fdc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013fe0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013fe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fea:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013ff4:	90                   	nop
c0013ff5:	83 c4 0c             	add    esp,0xc
c0013ff8:	c3                   	ret    
c0013ff9:	90                   	nop

c0013ffa <PhysicalDisk::startCache()>:
c0013ffa:	56                   	push   esi
c0013ffb:	53                   	push   ebx
c0013ffc:	83 ec 10             	sub    esp,0x10
c0013fff:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014003:	6a 44                	push   0x44
c0014005:	e8 8f b5 ff ff       	call   c000f599 <malloc>
c001400a:	89 c6                	mov    esi,eax
c001400c:	58                   	pop    eax
c001400d:	5a                   	pop    edx
c001400e:	53                   	push   ebx
c001400f:	56                   	push   esi
c0014010:	e8 71 28 00 00       	call   c0016886 <VCache::VCache(PhysicalDisk*)>
c0014015:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001401b:	83 c4 14             	add    esp,0x14
c001401e:	5b                   	pop    ebx
c001401f:	5e                   	pop    esi
c0014020:	c3                   	ret    
c0014021:	90                   	nop

c0014022 <PhysicalDisk::~PhysicalDisk()>:
c0014022:	83 ec 0c             	sub    esp,0xc
c0014025:	ba 94 ab 02 c0       	mov    edx,0xc002ab94
c001402a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001402e:	89 10                	mov    DWORD PTR [eax],edx
c0014030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014034:	83 ec 0c             	sub    esp,0xc
c0014037:	50                   	push   eax
c0014038:	e8 ed f9 ff ff       	call   c0013a2a <Device::~Device()>
c001403d:	83 c4 10             	add    esp,0x10
c0014040:	90                   	nop
c0014041:	83 c4 0c             	add    esp,0xc
c0014044:	c3                   	ret    
c0014045:	90                   	nop

c0014046 <PhysicalDisk::~PhysicalDisk()>:
c0014046:	83 ec 0c             	sub    esp,0xc
c0014049:	83 ec 0c             	sub    esp,0xc
c001404c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014050:	e8 cd ff ff ff       	call   c0014022 <PhysicalDisk::~PhysicalDisk()>
c0014055:	83 c4 10             	add    esp,0x10
c0014058:	83 ec 08             	sub    esp,0x8
c001405b:	68 6c 01 00 00       	push   0x16c
c0014060:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014064:	e8 e2 e5 ff ff       	call   c001264b <operator delete(void*, unsigned long)>
c0014069:	83 c4 10             	add    esp,0x10
c001406c:	83 c4 0c             	add    esp,0xc
c001406f:	c3                   	ret    

c0014070 <FPU::FPU(char const*)>:
c0014070:	83 ec 0c             	sub    esp,0xc
c0014073:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014077:	83 ec 08             	sub    esp,0x8
c001407a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001407e:	50                   	push   eax
c001407f:	e8 dc fc ff ff       	call   c0013d60 <Device::Device(char const*)>
c0014084:	83 c4 10             	add    esp,0x10
c0014087:	ba d8 ab 02 c0       	mov    edx,0xc002abd8
c001408c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014090:	89 10                	mov    DWORD PTR [eax],edx
c0014092:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014096:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00140a0:	90                   	nop
c00140a1:	83 c4 0c             	add    esp,0xc
c00140a4:	c3                   	ret    
c00140a5:	90                   	nop

c00140a6 <FPU::~FPU()>:
c00140a6:	83 ec 0c             	sub    esp,0xc
c00140a9:	ba d8 ab 02 c0       	mov    edx,0xc002abd8
c00140ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140b2:	89 10                	mov    DWORD PTR [eax],edx
c00140b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140b8:	83 ec 0c             	sub    esp,0xc
c00140bb:	50                   	push   eax
c00140bc:	e8 69 f9 ff ff       	call   c0013a2a <Device::~Device()>
c00140c1:	83 c4 10             	add    esp,0x10
c00140c4:	90                   	nop
c00140c5:	83 c4 0c             	add    esp,0xc
c00140c8:	c3                   	ret    
c00140c9:	90                   	nop

c00140ca <FPU::~FPU()>:
c00140ca:	83 ec 0c             	sub    esp,0xc
c00140cd:	83 ec 0c             	sub    esp,0xc
c00140d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140d4:	e8 cd ff ff ff       	call   c00140a6 <FPU::~FPU()>
c00140d9:	83 c4 10             	add    esp,0x10
c00140dc:	83 ec 08             	sub    esp,0x8
c00140df:	68 58 01 00 00       	push   0x158
c00140e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140e8:	e8 5e e5 ff ff       	call   c001264b <operator delete(void*, unsigned long)>
c00140ed:	83 c4 10             	add    esp,0x10
c00140f0:	83 c4 0c             	add    esp,0xc
c00140f3:	c3                   	ret    

c00140f4 <setupFPU()>:
c00140f4:	53                   	push   ebx
c00140f5:	83 ec 08             	sub    esp,0x8
c00140f8:	8b 15 08 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da08
c00140fe:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014105:	74 19                	je     c0014120 <setupFPU()+0x2c>
c0014107:	83 ec 0c             	sub    esp,0xc
c001410a:	68 58 01 00 00       	push   0x158
c001410f:	e8 85 b4 ff ff       	call   c000f599 <malloc>
c0014114:	89 c3                	mov    ebx,eax
c0014116:	89 04 24             	mov    DWORD PTR [esp],eax
c0014119:	e8 cc 11 01 00       	call   c00252ea <AVX::AVX()>
c001411e:	eb 5b                	jmp    c001417b <setupFPU()+0x87>
c0014120:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014126:	84 c0                	test   al,al
c0014128:	79 19                	jns    c0014143 <setupFPU()+0x4f>
c001412a:	83 ec 0c             	sub    esp,0xc
c001412d:	68 58 01 00 00       	push   0x158
c0014132:	e8 62 b4 ff ff       	call   c000f599 <malloc>
c0014137:	89 c3                	mov    ebx,eax
c0014139:	89 04 24             	mov    DWORD PTR [esp],eax
c001413c:	e8 cf 12 01 00       	call   c0025410 <SSE::SSE()>
c0014141:	eb 38                	jmp    c001417b <setupFPU()+0x87>
c0014143:	a8 20                	test   al,0x20
c0014145:	74 19                	je     c0014160 <setupFPU()+0x6c>
c0014147:	83 ec 0c             	sub    esp,0xc
c001414a:	68 58 01 00 00       	push   0x158
c001414f:	e8 45 b4 ff ff       	call   c000f599 <malloc>
c0014154:	89 c3                	mov    ebx,eax
c0014156:	89 04 24             	mov    DWORD PTR [esp],eax
c0014159:	e8 1c 12 01 00       	call   c002537a <MMX::MMX()>
c001415e:	eb 1b                	jmp    c001417b <setupFPU()+0x87>
c0014160:	a8 10                	test   al,0x10
c0014162:	74 1c                	je     c0014180 <setupFPU()+0x8c>
c0014164:	83 ec 0c             	sub    esp,0xc
c0014167:	68 58 01 00 00       	push   0x158
c001416c:	e8 28 b4 ff ff       	call   c000f599 <malloc>
c0014171:	89 c3                	mov    ebx,eax
c0014173:	89 04 24             	mov    DWORD PTR [esp],eax
c0014176:	e8 23 13 01 00       	call   c002549e <x87::x87()>
c001417b:	83 c4 10             	add    esp,0x10
c001417e:	eb 24                	jmp    c00141a4 <setupFPU()+0xb0>
c0014180:	83 e0 ef             	and    eax,0xffffffef
c0014183:	83 ec 0c             	sub    esp,0xc
c0014186:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001418c:	68 c4 ab 02 c0       	push   0xc002abc4
c0014191:	e8 8d e5 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0014196:	0f 20 c0             	mov    eax,cr0
c0014199:	83 c8 04             	or     eax,0x4
c001419c:	0f 22 c0             	mov    cr0,eax
c001419f:	31 db                	xor    ebx,ebx
c00141a1:	83 c4 10             	add    esp,0x10
c00141a4:	89 d8                	mov    eax,ebx
c00141a6:	83 c4 08             	add    esp,0x8
c00141a9:	5b                   	pop    ebx
c00141aa:	c3                   	ret    
c00141ab:	90                   	nop

c00141ac <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00141ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00141b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00141b4:	c1 e0 04             	shl    eax,0x4
c00141b7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00141bb:	8d 50 10             	lea    edx,[eax+0x10]
c00141be:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00141c4:	74 08                	je     c00141ce <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00141c6:	83 c0 04             	add    eax,0x4
c00141c9:	39 d0                	cmp    eax,edx
c00141cb:	75 f1                	jne    c00141be <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00141cd:	c3                   	ret    
c00141ce:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00141d8:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00141e2:	eb e2                	jmp    c00141c6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00141e4 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00141e4:	57                   	push   edi
c00141e5:	31 c0                	xor    eax,eax
c00141e7:	56                   	push   esi
c00141e8:	53                   	push   ebx
c00141e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00141ed:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00141f1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00141f5:	89 da                	mov    edx,ebx
c00141f7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00141fb:	c1 e2 04             	shl    edx,0x4
c00141fe:	01 ca                	add    edx,ecx
c0014200:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014208:	74 16                	je     c0014220 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c001420a:	40                   	inc    eax
c001420b:	83 f8 04             	cmp    eax,0x4
c001420e:	75 f0                	jne    c0014200 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014210:	c7 44 24 10 08 ac 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ac08
c0014218:	5b                   	pop    ebx
c0014219:	5e                   	pop    esi
c001421a:	5f                   	pop    edi
c001421b:	e9 6f 5c 00 00       	jmp    c0019e8f <Krnl::panic(char const*)>
c0014220:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014223:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014226:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c001422c:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014232:	5b                   	pop    ebx
c0014233:	5e                   	pop    esi
c0014234:	5f                   	pop    edi
c0014235:	c3                   	ret    

c0014236 <doubleFault(regs*, void*)>:
c0014236:	55                   	push   ebp
c0014237:	89 e5                	mov    ebp,esp
c0014239:	83 ec 08             	sub    esp,0x8
c001423c:	83 ec 0c             	sub    esp,0xc
c001423f:	68 15 ac 02 c0       	push   0xc002ac15
c0014244:	e8 46 5c 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c0014249:	83 c4 10             	add    esp,0x10
c001424c:	90                   	nop
c001424d:	c9                   	leave  
c001424e:	c3                   	ret    
c001424f:	90                   	nop

c0014250 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014250:	56                   	push   esi
c0014251:	53                   	push   ebx
c0014252:	50                   	push   eax
c0014253:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014257:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001425b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014260:	75 35                	jne    c0014297 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014262:	8d 43 20             	lea    eax,[ebx+0x20]
c0014265:	31 d2                	xor    edx,edx
c0014267:	89 c1                	mov    ecx,eax
c0014269:	c1 e1 04             	shl    ecx,0x4
c001426c:	01 f1                	add    ecx,esi
c001426e:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014276:	74 3e                	je     c00142b6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014278:	42                   	inc    edx
c0014279:	83 fa 04             	cmp    edx,0x4
c001427c:	75 f0                	jne    c001426e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c001427e:	83 ec 0c             	sub    esp,0xc
c0014281:	68 2f ac 02 c0       	push   0xc002ac2f
c0014286:	e8 04 5c 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c001428b:	83 c4 10             	add    esp,0x10
c001428e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014293:	5a                   	pop    edx
c0014294:	5b                   	pop    ebx
c0014295:	5e                   	pop    esi
c0014296:	c3                   	ret    
c0014297:	83 ec 0c             	sub    esp,0xc
c001429a:	56                   	push   esi
c001429b:	e8 bc fb ff ff       	call   c0013e5c <Device::getName()>
c00142a0:	83 c4 10             	add    esp,0x10
c00142a3:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00142a6:	75 ba                	jne    c0014262 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00142a8:	83 fb 0f             	cmp    ebx,0xf
c00142ab:	7f 29                	jg     c00142d6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00142ad:	0f b6 9b 60 cc 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd33a0]
c00142b4:	eb ac                	jmp    c0014262 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00142b6:	8d 04 82             	lea    eax,[edx+eax*4]
c00142b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00142bd:	8d 04 86             	lea    eax,[esi+eax*4]
c00142c0:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00142c6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00142ca:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00142d0:	89 d8                	mov    eax,ebx
c00142d2:	5a                   	pop    edx
c00142d3:	5b                   	pop    ebx
c00142d4:	5e                   	pop    esi
c00142d5:	c3                   	ret    
c00142d6:	83 ec 0c             	sub    esp,0xc
c00142d9:	68 22 ac 02 c0       	push   0xc002ac22
c00142de:	e8 ac 5b 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c00142e3:	83 c4 10             	add    esp,0x10
c00142e6:	e9 77 ff ff ff       	jmp    c0014262 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00142eb:	90                   	nop

c00142ec <InterruptController::clearAllHandlers(int, bool)>:
c00142ec:	56                   	push   esi
c00142ed:	53                   	push   ebx
c00142ee:	52                   	push   edx
c00142ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00142f3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00142f7:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00142fc:	75 61                	jne    c001435f <InterruptController::clearAllHandlers(int, bool)+0x73>
c00142fe:	8d 46 20             	lea    eax,[esi+0x20]
c0014301:	c1 e6 04             	shl    esi,0x4
c0014304:	c1 e0 04             	shl    eax,0x4
c0014307:	01 de                	add    esi,ebx
c0014309:	01 d8                	add    eax,ebx
c001430b:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014315:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c001431f:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014329:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014333:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c001433d:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014347:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014351:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c001435b:	58                   	pop    eax
c001435c:	5b                   	pop    ebx
c001435d:	5e                   	pop    esi
c001435e:	c3                   	ret    
c001435f:	83 ec 0c             	sub    esp,0xc
c0014362:	53                   	push   ebx
c0014363:	e8 f4 fa ff ff       	call   c0013e5c <Device::getName()>
c0014368:	83 c4 10             	add    esp,0x10
c001436b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001436e:	75 8e                	jne    c00142fe <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014370:	83 fe 0f             	cmp    esi,0xf
c0014373:	7f 09                	jg     c001437e <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014375:	0f b6 b6 60 cc 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd33a0]
c001437c:	eb 80                	jmp    c00142fe <InterruptController::clearAllHandlers(int, bool)+0x12>
c001437e:	83 ec 0c             	sub    esp,0xc
c0014381:	68 3c ac 02 c0       	push   0xc002ac3c
c0014386:	e8 04 5b 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c001438b:	83 c4 10             	add    esp,0x10
c001438e:	e9 6b ff ff ff       	jmp    c00142fe <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014393:	90                   	nop

c0014394 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014394:	56                   	push   esi
c0014395:	53                   	push   ebx
c0014396:	52                   	push   edx
c0014397:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001439b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001439f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00143a4:	75 3a                	jne    c00143e0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c00143a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00143aa:	8d 50 20             	lea    edx,[eax+0x20]
c00143ad:	c1 e2 04             	shl    edx,0x4
c00143b0:	8d 04 16             	lea    eax,[esi+edx*1]
c00143b3:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c00143b7:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c00143bd:	74 0b                	je     c00143ca <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c00143bf:	83 c0 04             	add    eax,0x4
c00143c2:	39 d0                	cmp    eax,edx
c00143c4:	75 f1                	jne    c00143b7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c00143c6:	58                   	pop    eax
c00143c7:	5b                   	pop    ebx
c00143c8:	5e                   	pop    esi
c00143c9:	c3                   	ret    
c00143ca:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00143d4:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00143de:	eb df                	jmp    c00143bf <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c00143e0:	83 ec 0c             	sub    esp,0xc
c00143e3:	56                   	push   esi
c00143e4:	e8 73 fa ff ff       	call   c0013e5c <Device::getName()>
c00143e9:	83 c4 10             	add    esp,0x10
c00143ec:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00143ef:	75 b5                	jne    c00143a6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00143f1:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00143f6:	7f 11                	jg     c0014409 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00143f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00143fc:	0f b6 80 60 cc 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd33a0]
c0014403:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014407:	eb 9d                	jmp    c00143a6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014409:	83 ec 0c             	sub    esp,0xc
c001440c:	68 49 ac 02 c0       	push   0xc002ac49
c0014411:	e8 79 5a 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c0014416:	83 c4 10             	add    esp,0x10
c0014419:	eb 8b                	jmp    c00143a6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c001441b <nmiHandler(regs*, void*)>:
c001441b:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0014420:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014424:	e9 d7 a8 ff ff       	jmp    c000ed00 <Computer::handleNMI()>

c0014429 <int_handler>:
c0014429:	55                   	push   ebp
c001442a:	57                   	push   edi
c001442b:	56                   	push   esi
c001442c:	53                   	push   ebx
c001442d:	83 ec 0c             	sub    esp,0xc
c0014430:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014434:	80 3d 44 05 03 c0 00 	cmp    BYTE PTR ds:0xc0030544,0x0
c001443b:	74 0b                	je     c0014448 <int_handler+0x1f>
c001443d:	fa                   	cli    
c001443e:	f4                   	hlt    
c001443f:	80 3d 44 05 03 c0 00 	cmp    BYTE PTR ds:0xc0030544,0x0
c0014446:	75 f5                	jne    c001443d <int_handler+0x14>
c0014448:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c001444d:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014450:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014456:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c001445c:	8d 43 e0             	lea    eax,[ebx-0x20]
c001445f:	83 f8 17             	cmp    eax,0x17
c0014462:	77 13                	ja     c0014477 <int_handler+0x4e>
c0014464:	83 ec 08             	sub    esp,0x8
c0014467:	8b 17                	mov    edx,DWORD PTR [edi]
c0014469:	8d 43 e0             	lea    eax,[ebx-0x20]
c001446c:	0f b6 c0             	movzx  eax,al
c001446f:	50                   	push   eax
c0014470:	57                   	push   edi
c0014471:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014474:	83 c4 10             	add    esp,0x10
c0014477:	83 c3 15             	add    ebx,0x15
c001447a:	c1 e3 04             	shl    ebx,0x4
c001447d:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014481:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014488:	31 db                	xor    ebx,ebx
c001448a:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001448e:	85 c0                	test   eax,eax
c0014490:	74 13                	je     c00144a5 <int_handler+0x7c>
c0014492:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014495:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014499:	74 1c                	je     c00144b7 <int_handler+0x8e>
c001449b:	83 ec 08             	sub    esp,0x8
c001449e:	52                   	push   edx
c001449f:	56                   	push   esi
c00144a0:	ff d0                	call   eax
c00144a2:	83 c4 10             	add    esp,0x10
c00144a5:	43                   	inc    ebx
c00144a6:	83 fb 04             	cmp    ebx,0x4
c00144a9:	75 df                	jne    c001448a <int_handler+0x61>
c00144ab:	83 c4 0c             	add    esp,0xc
c00144ae:	31 c0                	xor    eax,eax
c00144b0:	5b                   	pop    ebx
c00144b1:	31 d2                	xor    edx,edx
c00144b3:	5e                   	pop    esi
c00144b4:	5f                   	pop    edi
c00144b5:	5d                   	pop    ebp
c00144b6:	c3                   	ret    
c00144b7:	83 ec 08             	sub    esp,0x8
c00144ba:	52                   	push   edx
c00144bb:	56                   	push   esi
c00144bc:	ff d0                	call   eax
c00144be:	83 c4 10             	add    esp,0x10
c00144c1:	83 c4 0c             	add    esp,0xc
c00144c4:	5b                   	pop    ebx
c00144c5:	5e                   	pop    esi
c00144c6:	5f                   	pop    edi
c00144c7:	5d                   	pop    ebp
c00144c8:	c3                   	ret    
c00144c9:	90                   	nop

c00144ca <InterruptController::InterruptController(char const*)>:
c00144ca:	83 ec 1c             	sub    esp,0x1c
c00144cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144d1:	83 ec 08             	sub    esp,0x8
c00144d4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144d8:	50                   	push   eax
c00144d9:	e8 82 f8 ff ff       	call   c0013d60 <Device::Device(char const*)>
c00144de:	83 c4 10             	add    esp,0x10
c00144e1:	ba 04 af 02 c0       	mov    edx,0xc002af04
c00144e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144ea:	89 10                	mov    DWORD PTR [eax],edx
c00144ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144f0:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00144fa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014502:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c001450a:	7f 5e                	jg     c001456a <InterruptController::InterruptController(char const*)+0xa0>
c001450c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014514:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014519:	7f 49                	jg     c0014564 <InterruptController::InterruptController(char const*)+0x9a>
c001451b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001451f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014523:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001452a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001452e:	01 ca                	add    edx,ecx
c0014530:	83 c2 54             	add    edx,0x54
c0014533:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001453b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001453f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014543:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001454a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001454e:	01 ca                	add    edx,ecx
c0014550:	81 c2 54 04 00 00    	add    edx,0x454
c0014556:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001455e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014562:	eb b0                	jmp    c0014514 <InterruptController::InterruptController(char const*)+0x4a>
c0014564:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014568:	eb 98                	jmp    c0014502 <InterruptController::InterruptController(char const*)+0x38>
c001456a:	90                   	nop
c001456b:	83 c4 1c             	add    esp,0x1c
c001456e:	c3                   	ret    
c001456f:	90                   	nop

c0014570 <InterruptController::~InterruptController()>:
c0014570:	83 ec 0c             	sub    esp,0xc
c0014573:	ba 04 af 02 c0       	mov    edx,0xc002af04
c0014578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001457c:	89 10                	mov    DWORD PTR [eax],edx
c001457e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014582:	83 ec 0c             	sub    esp,0xc
c0014585:	50                   	push   eax
c0014586:	e8 9f f4 ff ff       	call   c0013a2a <Device::~Device()>
c001458b:	83 c4 10             	add    esp,0x10
c001458e:	90                   	nop
c001458f:	83 c4 0c             	add    esp,0xc
c0014592:	c3                   	ret    
c0014593:	90                   	nop

c0014594 <InterruptController::~InterruptController()>:
c0014594:	83 ec 0c             	sub    esp,0xc
c0014597:	83 ec 0c             	sub    esp,0xc
c001459a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001459e:	e8 cd ff ff ff       	call   c0014570 <InterruptController::~InterruptController()>
c00145a3:	83 c4 10             	add    esp,0x10
c00145a6:	83 ec 08             	sub    esp,0x8
c00145a9:	68 58 21 00 00       	push   0x2158
c00145ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145b2:	e8 94 e0 ff ff       	call   c001264b <operator delete(void*, unsigned long)>
c00145b7:	83 c4 10             	add    esp,0x10
c00145ba:	83 c4 0c             	add    esp,0xc
c00145bd:	c3                   	ret    

c00145be <displayDebugInfo(regs*)>:
c00145be:	55                   	push   ebp
c00145bf:	57                   	push   edi
c00145c0:	56                   	push   esi
c00145c1:	53                   	push   ebx
c00145c2:	83 ec 24             	sub    esp,0x24
c00145c5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00145c9:	0f 20 c2             	mov    edx,cr0
c00145cc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00145d0:	0f 20 d7             	mov    edi,cr2
c00145d3:	0f 20 de             	mov    esi,cr3
c00145d6:	0f 20 e5             	mov    ebp,cr4
c00145d9:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00145dc:	68 56 ac 02 c0       	push   0xc002ac56
c00145e1:	e8 3d e1 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c00145e6:	59                   	pop    ecx
c00145e7:	58                   	pop    eax
c00145e8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00145eb:	68 61 ac 02 c0       	push   0xc002ac61
c00145f0:	e8 2e e1 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c00145f5:	58                   	pop    eax
c00145f6:	5a                   	pop    edx
c00145f7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00145fa:	68 6c ac 02 c0       	push   0xc002ac6c
c00145ff:	e8 1f e1 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0014604:	59                   	pop    ecx
c0014605:	58                   	pop    eax
c0014606:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014609:	68 77 ac 02 c0       	push   0xc002ac77
c001460e:	e8 10 e1 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0014613:	58                   	pop    eax
c0014614:	5a                   	pop    edx
c0014615:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014618:	68 82 ac 02 c0       	push   0xc002ac82
c001461d:	e8 01 e1 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0014622:	59                   	pop    ecx
c0014623:	58                   	pop    eax
c0014624:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014627:	68 8d ac 02 c0       	push   0xc002ac8d
c001462c:	e8 f2 e0 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0014631:	58                   	pop    eax
c0014632:	5a                   	pop    edx
c0014633:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014636:	68 98 ac 02 c0       	push   0xc002ac98
c001463b:	e8 e3 e0 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0014640:	59                   	pop    ecx
c0014641:	58                   	pop    eax
c0014642:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014645:	68 a3 ac 02 c0       	push   0xc002aca3
c001464a:	e8 d4 e0 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c001464f:	58                   	pop    eax
c0014650:	5a                   	pop    edx
c0014651:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014654:	68 ae ac 02 c0       	push   0xc002acae
c0014659:	e8 c5 e0 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c001465e:	59                   	pop    ecx
c001465f:	58                   	pop    eax
c0014660:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014663:	68 bd ac 02 c0       	push   0xc002acbd
c0014668:	e8 b6 e0 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c001466d:	58                   	pop    eax
c001466e:	5a                   	pop    edx
c001466f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014672:	68 c8 ac 02 c0       	push   0xc002acc8
c0014677:	e8 a7 e0 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c001467c:	59                   	pop    ecx
c001467d:	58                   	pop    eax
c001467e:	57                   	push   edi
c001467f:	68 d3 ac 02 c0       	push   0xc002acd3
c0014684:	e8 9a e0 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0014689:	58                   	pop    eax
c001468a:	5a                   	pop    edx
c001468b:	56                   	push   esi
c001468c:	68 de ac 02 c0       	push   0xc002acde
c0014691:	e8 8d e0 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0014696:	59                   	pop    ecx
c0014697:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001469c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146a2:	e8 ac bc ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c00146a7:	58                   	pop    eax
c00146a8:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00146ab:	5a                   	pop    edx
c00146ac:	c1 e0 05             	shl    eax,0x5
c00146af:	05 c0 c9 02 c0       	add    eax,0xc002c9c0
c00146b4:	50                   	push   eax
c00146b5:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c00146ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146c0:	e8 9b c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00146c5:	59                   	pop    ecx
c00146c6:	58                   	pop    eax
c00146c7:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c00146cc:	68 e9 ac 02 c0       	push   0xc002ace9
c00146d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146d7:	e8 84 c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00146dc:	58                   	pop    eax
c00146dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146e2:	5a                   	pop    edx
c00146e3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00146e6:	83 c0 0c             	add    eax,0xc
c00146e9:	50                   	push   eax
c00146ea:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c00146ef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146f5:	e8 66 c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00146fa:	59                   	pop    ecx
c00146fb:	58                   	pop    eax
c00146fc:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0014701:	68 f2 ac 02 c0       	push   0xc002acf2
c0014706:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001470c:	e8 4f c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014711:	58                   	pop    eax
c0014712:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0014717:	5a                   	pop    edx
c0014718:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001471b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014721:	e8 f4 c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014726:	59                   	pop    ecx
c0014727:	58                   	pop    eax
c0014728:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001472d:	68 fa ac 02 c0       	push   0xc002acfa
c0014732:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014738:	e8 23 c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001473d:	58                   	pop    eax
c001473e:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0014743:	5a                   	pop    edx
c0014744:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014747:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001474d:	e8 c8 c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014752:	59                   	pop    ecx
c0014753:	58                   	pop    eax
c0014754:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0014759:	68 02 ad 02 c0       	push   0xc002ad02
c001475e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014764:	e8 f7 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014769:	58                   	pop    eax
c001476a:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001476f:	5a                   	pop    edx
c0014770:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014773:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014779:	e8 9c c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001477e:	59                   	pop    ecx
c001477f:	58                   	pop    eax
c0014780:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0014785:	68 0a ad 02 c0       	push   0xc002ad0a
c001478a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014790:	e8 cb c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014795:	58                   	pop    eax
c0014796:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001479b:	5a                   	pop    edx
c001479c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001479f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147a5:	e8 70 c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00147aa:	59                   	pop    ecx
c00147ab:	58                   	pop    eax
c00147ac:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c00147b1:	68 12 ad 02 c0       	push   0xc002ad12
c00147b6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147bc:	e8 9f c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00147c1:	58                   	pop    eax
c00147c2:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c00147c7:	5a                   	pop    edx
c00147c8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00147cb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147d1:	e8 44 c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00147d6:	59                   	pop    ecx
c00147d7:	58                   	pop    eax
c00147d8:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c00147dd:	68 1a ad 02 c0       	push   0xc002ad1a
c00147e2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147e8:	e8 73 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00147ed:	58                   	pop    eax
c00147ee:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c00147f3:	5a                   	pop    edx
c00147f4:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00147f7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147fd:	e8 18 c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014802:	59                   	pop    ecx
c0014803:	58                   	pop    eax
c0014804:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0014809:	68 22 ad 02 c0       	push   0xc002ad22
c001480e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014814:	e8 47 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014819:	58                   	pop    eax
c001481a:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001481f:	5a                   	pop    edx
c0014820:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014824:	52                   	push   edx
c0014825:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001482b:	e8 ea bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014830:	59                   	pop    ecx
c0014831:	58                   	pop    eax
c0014832:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0014837:	68 2b ad 02 c0       	push   0xc002ad2b
c001483c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014842:	e8 19 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014847:	58                   	pop    eax
c0014848:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001484d:	5a                   	pop    edx
c001484e:	57                   	push   edi
c001484f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014855:	e8 c0 bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001485a:	59                   	pop    ecx
c001485b:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0014860:	5f                   	pop    edi
c0014861:	68 33 ad 02 c0       	push   0xc002ad33
c0014866:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001486c:	e8 ef bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014871:	58                   	pop    eax
c0014872:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0014877:	5a                   	pop    edx
c0014878:	56                   	push   esi
c0014879:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001487f:	e8 96 bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014884:	59                   	pop    ecx
c0014885:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001488a:	5e                   	pop    esi
c001488b:	68 3b ad 02 c0       	push   0xc002ad3b
c0014890:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014896:	e8 c5 bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001489b:	5f                   	pop    edi
c001489c:	58                   	pop    eax
c001489d:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c00148a2:	55                   	push   ebp
c00148a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148a9:	e8 6c bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00148ae:	58                   	pop    eax
c00148af:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c00148b4:	5a                   	pop    edx
c00148b5:	68 43 ad 02 c0       	push   0xc002ad43
c00148ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148c0:	e8 9b bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00148c5:	0f 21 c0             	mov    eax,db0
c00148c8:	59                   	pop    ecx
c00148c9:	5e                   	pop    esi
c00148ca:	50                   	push   eax
c00148cb:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c00148d0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148d6:	e8 3f bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00148db:	5f                   	pop    edi
c00148dc:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c00148e1:	5d                   	pop    ebp
c00148e2:	68 4c ad 02 c0       	push   0xc002ad4c
c00148e7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148ed:	e8 6e bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00148f2:	0f 21 c8             	mov    eax,db1
c00148f5:	5a                   	pop    edx
c00148f6:	59                   	pop    ecx
c00148f7:	50                   	push   eax
c00148f8:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c00148fd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014903:	e8 12 bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014908:	5e                   	pop    esi
c0014909:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001490e:	5f                   	pop    edi
c001490f:	68 54 ad 02 c0       	push   0xc002ad54
c0014914:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001491a:	e8 41 bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001491f:	0f 21 d0             	mov    eax,db2
c0014922:	5d                   	pop    ebp
c0014923:	5a                   	pop    edx
c0014924:	50                   	push   eax
c0014925:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001492a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014930:	e8 e5 be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014935:	59                   	pop    ecx
c0014936:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001493b:	5e                   	pop    esi
c001493c:	68 5c ad 02 c0       	push   0xc002ad5c
c0014941:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014947:	e8 14 bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001494c:	0f 21 d8             	mov    eax,db3
c001494f:	5f                   	pop    edi
c0014950:	5d                   	pop    ebp
c0014951:	50                   	push   eax
c0014952:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0014957:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001495d:	e8 b8 be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014962:	58                   	pop    eax
c0014963:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0014968:	5a                   	pop    edx
c0014969:	68 64 ad 02 c0       	push   0xc002ad64
c001496e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014974:	e8 e7 be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014979:	0f 21 f0             	mov    eax,db6
c001497c:	59                   	pop    ecx
c001497d:	5e                   	pop    esi
c001497e:	50                   	push   eax
c001497f:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0014984:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001498a:	e8 8b be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001498f:	5f                   	pop    edi
c0014990:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0014995:	5d                   	pop    ebp
c0014996:	68 6c ad 02 c0       	push   0xc002ad6c
c001499b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149a1:	e8 ba be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00149a6:	0f 21 f8             	mov    eax,db7
c00149a9:	5a                   	pop    edx
c00149aa:	59                   	pop    ecx
c00149ab:	50                   	push   eax
c00149ac:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c00149b1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149b7:	e8 5e be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00149bc:	5e                   	pop    esi
c00149bd:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00149c0:	e8 43 86 00 00       	call   c001d008 <Thr::getDriverNameFromAddress(unsigned long)>
c00149c5:	83 c4 10             	add    esp,0x10
c00149c8:	85 c0                	test   eax,eax
c00149ca:	74 7d                	je     c0014a49 <displayDebugInfo(regs*)+0x48b>
c00149cc:	89 c6                	mov    esi,eax
c00149ce:	50                   	push   eax
c00149cf:	50                   	push   eax
c00149d0:	56                   	push   esi
c00149d1:	68 74 ad 02 c0       	push   0xc002ad74
c00149d6:	e8 48 dd ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c00149db:	5a                   	pop    edx
c00149dc:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c00149e1:	59                   	pop    ecx
c00149e2:	68 82 ad 02 c0       	push   0xc002ad82
c00149e7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149ed:	e8 6e be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00149f2:	5f                   	pop    edi
c00149f3:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c00149f8:	5d                   	pop    ebp
c00149f9:	56                   	push   esi
c00149fa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a00:	e8 5b be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014a05:	58                   	pop    eax
c0014a06:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0014a0b:	5a                   	pop    edx
c0014a0c:	68 8e ad 02 c0       	push   0xc002ad8e
c0014a11:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a17:	e8 44 be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014a1c:	59                   	pop    ecx
c0014a1d:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0014a22:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014a28:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014a2b:	e8 0f 86 00 00       	call   c001d03f <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014a30:	5b                   	pop    ebx
c0014a31:	5d                   	pop    ebp
c0014a32:	50                   	push   eax
c0014a33:	57                   	push   edi
c0014a34:	e8 e1 bd ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014a39:	58                   	pop    eax
c0014a3a:	5a                   	pop    edx
c0014a3b:	56                   	push   esi
c0014a3c:	68 9a ad 02 c0       	push   0xc002ad9a
c0014a41:	e8 dd dc ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0014a46:	83 c4 10             	add    esp,0x10
c0014a49:	fa                   	cli    
c0014a4a:	f4                   	hlt    
c0014a4b:	eb fe                	jmp    c0014a4b <displayDebugInfo(regs*)+0x48d>

c0014a4d <x87EmulHandler(regs*, void*)>:
c0014a4d:	83 ec 0c             	sub    esp,0xc
c0014a50:	0f 20 c2             	mov    edx,cr0
c0014a53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a58:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014a5c:	75 4b                	jne    c0014aa9 <x87EmulHandler(regs*, void*)+0x5c>
c0014a5e:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0014a63:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014a69:	85 c0                	test   eax,eax
c0014a6b:	74 05                	je     c0014a72 <x87EmulHandler(regs*, void*)+0x25>
c0014a6d:	83 e2 08             	and    edx,0x8
c0014a70:	75 17                	jne    c0014a89 <x87EmulHandler(regs*, void*)+0x3c>
c0014a72:	83 ec 0c             	sub    esp,0xc
c0014a75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a79:	e8 61 a9 00 00       	call   c001f3df <Vm::x87Handler(regs*)>
c0014a7e:	83 c4 10             	add    esp,0x10
c0014a81:	84 c0                	test   al,al
c0014a83:	74 24                	je     c0014aa9 <x87EmulHandler(regs*, void*)+0x5c>
c0014a85:	83 c4 0c             	add    esp,0xc
c0014a88:	c3                   	ret    
c0014a89:	83 ec 0c             	sub    esp,0xc
c0014a8c:	68 c0 ad 02 c0       	push   0xc002adc0
c0014a91:	e8 8d dc ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0014a96:	0f 06                	clts   
c0014a98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a9d:	83 c4 10             	add    esp,0x10
c0014aa0:	a3 88 db 02 c0       	mov    ds:0xc002db88,eax
c0014aa5:	83 c4 0c             	add    esp,0xc
c0014aa8:	c3                   	ret    
c0014aa9:	83 ec 0c             	sub    esp,0xc
c0014aac:	68 aa ad 02 c0       	push   0xc002adaa
c0014ab1:	e8 6d dc ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0014ab6:	5a                   	pop    edx
c0014ab7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014abb:	e8 fe fa ff ff       	call   c00145be <displayDebugInfo(regs*)>

c0014ac0 <gpFault(regs*, void*)>:
c0014ac0:	53                   	push   ebx
c0014ac1:	83 ec 14             	sub    esp,0x14
c0014ac4:	c7 05 84 db 02 c0 b8 e8 01 c0 	mov    DWORD PTR ds:0xc002db84,0xc001e8b8
c0014ace:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014ad2:	53                   	push   ebx
c0014ad3:	e8 e0 9d 00 00       	call   c001e8b8 <Vm::faultHandler(regs*)>
c0014ad8:	83 c4 10             	add    esp,0x10
c0014adb:	84 c0                	test   al,al
c0014add:	74 05                	je     c0014ae4 <gpFault(regs*, void*)+0x24>
c0014adf:	83 c4 08             	add    esp,0x8
c0014ae2:	5b                   	pop    ebx
c0014ae3:	c3                   	ret    
c0014ae4:	83 ec 0c             	sub    esp,0xc
c0014ae7:	68 cd ad 02 c0       	push   0xc002adcd
c0014aec:	e8 32 dc ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0014af1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014af4:	e8 c5 fa ff ff       	call   c00145be <displayDebugInfo(regs*)>

c0014af9 <pgFault(regs*, void*)>:
c0014af9:	83 ec 18             	sub    esp,0x18
c0014afc:	68 e8 ad 02 c0       	push   0xc002ade8
c0014b01:	e8 1d dc ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0014b06:	0f 20 d0             	mov    eax,cr2
c0014b09:	5a                   	pop    edx
c0014b0a:	59                   	pop    ecx
c0014b0b:	50                   	push   eax
c0014b0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b11:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014b14:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0014b1a:	e8 29 d7 ff ff       	call   c0012248 <VAS::tryLoadBackOffDisk(unsigned long)>
c0014b1f:	83 c4 10             	add    esp,0x10
c0014b22:	84 c0                	test   al,al
c0014b24:	74 04                	je     c0014b2a <pgFault(regs*, void*)+0x31>
c0014b26:	83 c4 0c             	add    esp,0xc
c0014b29:	c3                   	ret    
c0014b2a:	83 ec 0c             	sub    esp,0xc
c0014b2d:	68 f2 ad 02 c0       	push   0xc002adf2
c0014b32:	e8 ec db ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0014b37:	58                   	pop    eax
c0014b38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b3c:	e8 7d fa ff ff       	call   c00145be <displayDebugInfo(regs*)>

c0014b41 <otherISRHandler(regs*, void*)>:
c0014b41:	53                   	push   ebx
c0014b42:	83 ec 0c             	sub    esp,0xc
c0014b45:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014b49:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014b4c:	50                   	push   eax
c0014b4d:	50                   	push   eax
c0014b4e:	68 ff ad 02 c0       	push   0xc002adff
c0014b53:	e8 cb db ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0014b58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b5b:	e8 5e fa ff ff       	call   c00145be <displayDebugInfo(regs*)>

c0014b60 <opcodeFault(regs*, void*)>:
c0014b60:	55                   	push   ebp
c0014b61:	89 e5                	mov    ebp,esp
c0014b63:	56                   	push   esi
c0014b64:	53                   	push   ebx
c0014b65:	83 ec 40             	sub    esp,0x40
c0014b68:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0014b6d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014b73:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014b79:	84 c0                	test   al,al
c0014b7b:	74 24                	je     c0014ba1 <opcodeFault(regs*, void*)+0x41>
c0014b7d:	83 ec 0c             	sub    esp,0xc
c0014b80:	68 1c ae 02 c0       	push   0xc002ae1c
c0014b85:	e8 99 db ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0014b8a:	83 c4 10             	add    esp,0x10
c0014b8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b90:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b93:	8d 50 19             	lea    edx,[eax+0x19]
c0014b96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b99:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b9c:	e9 d5 05 00 00       	jmp    c0015176 <opcodeFault(regs*, void*)+0x616>
c0014ba1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ba4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ba7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014baa:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014bae:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014bb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bb5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bb8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014bbb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bbe:	8a 00                	mov    al,BYTE PTR [eax]
c0014bc0:	3c f0                	cmp    al,0xf0
c0014bc2:	75 17                	jne    c0014bdb <opcodeFault(regs*, void*)+0x7b>
c0014bc4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014bc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bca:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bcd:	8d 50 01             	lea    edx,[eax+0x1]
c0014bd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bd3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014bd6:	e9 da 00 00 00       	jmp    c0014cb5 <opcodeFault(regs*, void*)+0x155>
c0014bdb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bde:	8a 00                	mov    al,BYTE PTR [eax]
c0014be0:	3c f2                	cmp    al,0xf2
c0014be2:	74 09                	je     c0014bed <opcodeFault(regs*, void*)+0x8d>
c0014be4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014be7:	8a 00                	mov    al,BYTE PTR [eax]
c0014be9:	3c f3                	cmp    al,0xf3
c0014beb:	75 1b                	jne    c0014c08 <opcodeFault(regs*, void*)+0xa8>
c0014bed:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014bf1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014bf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bf7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bfa:	8d 50 01             	lea    edx,[eax+0x1]
c0014bfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c00:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c03:	e9 ad 00 00 00       	jmp    c0014cb5 <opcodeFault(regs*, void*)+0x155>
c0014c08:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c0b:	8a 00                	mov    al,BYTE PTR [eax]
c0014c0d:	3c 66                	cmp    al,0x66
c0014c0f:	75 1f                	jne    c0014c30 <opcodeFault(regs*, void*)+0xd0>
c0014c11:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c15:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014c19:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c1f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c22:	8d 50 01             	lea    edx,[eax+0x1]
c0014c25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c28:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c2b:	e9 85 00 00 00       	jmp    c0014cb5 <opcodeFault(regs*, void*)+0x155>
c0014c30:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c33:	8a 00                	mov    al,BYTE PTR [eax]
c0014c35:	3c 67                	cmp    al,0x67
c0014c37:	75 18                	jne    c0014c51 <opcodeFault(regs*, void*)+0xf1>
c0014c39:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c3d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c43:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c46:	8d 50 01             	lea    edx,[eax+0x1]
c0014c49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c4c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c4f:	eb 64                	jmp    c0014cb5 <opcodeFault(regs*, void*)+0x155>
c0014c51:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c54:	8a 00                	mov    al,BYTE PTR [eax]
c0014c56:	3c 2e                	cmp    al,0x2e
c0014c58:	74 09                	je     c0014c63 <opcodeFault(regs*, void*)+0x103>
c0014c5a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c5d:	8a 00                	mov    al,BYTE PTR [eax]
c0014c5f:	3c 3e                	cmp    al,0x3e
c0014c61:	75 18                	jne    c0014c7b <opcodeFault(regs*, void*)+0x11b>
c0014c63:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c67:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c6d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c70:	8d 50 01             	lea    edx,[eax+0x1]
c0014c73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c76:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c79:	eb 3a                	jmp    c0014cb5 <opcodeFault(regs*, void*)+0x155>
c0014c7b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c7e:	8a 00                	mov    al,BYTE PTR [eax]
c0014c80:	3c 36                	cmp    al,0x36
c0014c82:	74 1b                	je     c0014c9f <opcodeFault(regs*, void*)+0x13f>
c0014c84:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c87:	8a 00                	mov    al,BYTE PTR [eax]
c0014c89:	3c 26                	cmp    al,0x26
c0014c8b:	74 12                	je     c0014c9f <opcodeFault(regs*, void*)+0x13f>
c0014c8d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c90:	8a 00                	mov    al,BYTE PTR [eax]
c0014c92:	3c 64                	cmp    al,0x64
c0014c94:	74 09                	je     c0014c9f <opcodeFault(regs*, void*)+0x13f>
c0014c96:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c99:	8a 00                	mov    al,BYTE PTR [eax]
c0014c9b:	3c 65                	cmp    al,0x65
c0014c9d:	75 16                	jne    c0014cb5 <opcodeFault(regs*, void*)+0x155>
c0014c9f:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014ca3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ca6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ca9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cac:	8d 50 01             	lea    edx,[eax+0x1]
c0014caf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cb2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cb5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cb8:	8a 00                	mov    al,BYTE PTR [eax]
c0014cba:	3c 0f                	cmp    al,0xf
c0014cbc:	0f 85 ad 00 00 00    	jne    c0014d6f <opcodeFault(regs*, void*)+0x20f>
c0014cc2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cc5:	40                   	inc    eax
c0014cc6:	8a 00                	mov    al,BYTE PTR [eax]
c0014cc8:	3c c2                	cmp    al,0xc2
c0014cca:	74 0e                	je     c0014cda <opcodeFault(regs*, void*)+0x17a>
c0014ccc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ccf:	40                   	inc    eax
c0014cd0:	8a 00                	mov    al,BYTE PTR [eax]
c0014cd2:	3c c3                	cmp    al,0xc3
c0014cd4:	0f 85 95 00 00 00    	jne    c0014d6f <opcodeFault(regs*, void*)+0x20f>
c0014cda:	83 ec 0c             	sub    esp,0xc
c0014cdd:	68 3f ae 02 c0       	push   0xc002ae3f
c0014ce2:	e8 3c da ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0014ce7:	83 c4 10             	add    esp,0x10
c0014cea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ced:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cf0:	8d 50 01             	lea    edx,[eax+0x1]
c0014cf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cf6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cf9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014cfc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cff:	8a 00                	mov    al,BYTE PTR [eax]
c0014d01:	8d 50 fe             	lea    edx,[eax-0x2]
c0014d04:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d07:	88 10                	mov    BYTE PTR [eax],dl
c0014d09:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014d0c:	50                   	push   eax
c0014d0d:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014d10:	50                   	push   eax
c0014d11:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014d14:	50                   	push   eax
c0014d15:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014d18:	e8 8b 48 00 00       	call   c00195a8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014d1d:	83 c4 10             	add    esp,0x10
c0014d20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d23:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d26:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014d29:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014d2c:	01 d0                	add    eax,edx
c0014d2e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014d31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d34:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d37:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014d3a:	48                   	dec    eax
c0014d3b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014d3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d41:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014d44:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d4a:	83 ec 04             	sub    esp,0x4
c0014d4d:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014d50:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014d53:	50                   	push   eax
c0014d54:	e8 5b b4 fe ff       	call   c00001b4 <voodooXADD>
c0014d59:	83 c4 10             	add    esp,0x10
c0014d5c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014d5f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014d62:	01 c2                	add    edx,eax
c0014d64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d67:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d6a:	e9 07 04 00 00       	jmp    c0015176 <opcodeFault(regs*, void*)+0x616>
c0014d6f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d72:	8a 00                	mov    al,BYTE PTR [eax]
c0014d74:	3c 0f                	cmp    al,0xf
c0014d76:	0f 85 8b 01 00 00    	jne    c0014f07 <opcodeFault(regs*, void*)+0x3a7>
c0014d7c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d7f:	40                   	inc    eax
c0014d80:	8a 00                	mov    al,BYTE PTR [eax]
c0014d82:	3c c7                	cmp    al,0xc7
c0014d84:	0f 86 7d 01 00 00    	jbe    c0014f07 <opcodeFault(regs*, void*)+0x3a7>
c0014d8a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d8d:	40                   	inc    eax
c0014d8e:	8a 00                	mov    al,BYTE PTR [eax]
c0014d90:	3c cf                	cmp    al,0xcf
c0014d92:	0f 87 6f 01 00 00    	ja     c0014f07 <opcodeFault(regs*, void*)+0x3a7>
c0014d98:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d9b:	40                   	inc    eax
c0014d9c:	8a 00                	mov    al,BYTE PTR [eax]
c0014d9e:	83 c0 38             	add    eax,0x38
c0014da1:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014da4:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014da8:	75 0b                	jne    c0014db5 <opcodeFault(regs*, void*)+0x255>
c0014daa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dad:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014db0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014db3:	eb 75                	jmp    c0014e2a <opcodeFault(regs*, void*)+0x2ca>
c0014db5:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014db9:	75 0b                	jne    c0014dc6 <opcodeFault(regs*, void*)+0x266>
c0014dbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dbe:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014dc1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014dc4:	eb 64                	jmp    c0014e2a <opcodeFault(regs*, void*)+0x2ca>
c0014dc6:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014dca:	75 0b                	jne    c0014dd7 <opcodeFault(regs*, void*)+0x277>
c0014dcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dcf:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014dd2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014dd5:	eb 53                	jmp    c0014e2a <opcodeFault(regs*, void*)+0x2ca>
c0014dd7:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014ddb:	75 0b                	jne    c0014de8 <opcodeFault(regs*, void*)+0x288>
c0014ddd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014de0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014de3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014de6:	eb 42                	jmp    c0014e2a <opcodeFault(regs*, void*)+0x2ca>
c0014de8:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014dec:	75 0b                	jne    c0014df9 <opcodeFault(regs*, void*)+0x299>
c0014dee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014df1:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014df4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014df7:	eb 31                	jmp    c0014e2a <opcodeFault(regs*, void*)+0x2ca>
c0014df9:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014dfd:	75 0b                	jne    c0014e0a <opcodeFault(regs*, void*)+0x2aa>
c0014dff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e02:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014e05:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e08:	eb 20                	jmp    c0014e2a <opcodeFault(regs*, void*)+0x2ca>
c0014e0a:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014e0e:	75 0b                	jne    c0014e1b <opcodeFault(regs*, void*)+0x2bb>
c0014e10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e13:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014e16:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e19:	eb 0f                	jmp    c0014e2a <opcodeFault(regs*, void*)+0x2ca>
c0014e1b:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014e1f:	75 09                	jne    c0014e2a <opcodeFault(regs*, void*)+0x2ca>
c0014e21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e24:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014e27:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e2a:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014e2e:	74 10                	je     c0014e40 <opcodeFault(regs*, void*)+0x2e0>
c0014e30:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014e37:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014e3e:	eb 2d                	jmp    c0014e6d <opcodeFault(regs*, void*)+0x30d>
c0014e40:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014e43:	c1 e0 18             	shl    eax,0x18
c0014e46:	89 c2                	mov    edx,eax
c0014e48:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014e4b:	c1 e0 08             	shl    eax,0x8
c0014e4e:	25 00 00 ff 00       	and    eax,0xff0000
c0014e53:	09 c2                	or     edx,eax
c0014e55:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014e58:	c1 e8 08             	shr    eax,0x8
c0014e5b:	25 00 ff 00 00       	and    eax,0xff00
c0014e60:	09 c2                	or     edx,eax
c0014e62:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014e65:	c1 e8 18             	shr    eax,0x18
c0014e68:	09 d0                	or     eax,edx
c0014e6a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e6d:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014e71:	75 0b                	jne    c0014e7e <opcodeFault(regs*, void*)+0x31e>
c0014e73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e76:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e79:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014e7c:	eb 75                	jmp    c0014ef3 <opcodeFault(regs*, void*)+0x393>
c0014e7e:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014e82:	75 0b                	jne    c0014e8f <opcodeFault(regs*, void*)+0x32f>
c0014e84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e87:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e8a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014e8d:	eb 64                	jmp    c0014ef3 <opcodeFault(regs*, void*)+0x393>
c0014e8f:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014e93:	75 0b                	jne    c0014ea0 <opcodeFault(regs*, void*)+0x340>
c0014e95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e98:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e9b:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014e9e:	eb 53                	jmp    c0014ef3 <opcodeFault(regs*, void*)+0x393>
c0014ea0:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014ea4:	75 0b                	jne    c0014eb1 <opcodeFault(regs*, void*)+0x351>
c0014ea6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ea9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014eac:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014eaf:	eb 42                	jmp    c0014ef3 <opcodeFault(regs*, void*)+0x393>
c0014eb1:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014eb5:	75 0b                	jne    c0014ec2 <opcodeFault(regs*, void*)+0x362>
c0014eb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eba:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ebd:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014ec0:	eb 31                	jmp    c0014ef3 <opcodeFault(regs*, void*)+0x393>
c0014ec2:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014ec6:	75 0b                	jne    c0014ed3 <opcodeFault(regs*, void*)+0x373>
c0014ec8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ecb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ece:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014ed1:	eb 20                	jmp    c0014ef3 <opcodeFault(regs*, void*)+0x393>
c0014ed3:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014ed7:	75 0b                	jne    c0014ee4 <opcodeFault(regs*, void*)+0x384>
c0014ed9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014edc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014edf:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014ee2:	eb 0f                	jmp    c0014ef3 <opcodeFault(regs*, void*)+0x393>
c0014ee4:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014ee8:	75 09                	jne    c0014ef3 <opcodeFault(regs*, void*)+0x393>
c0014eea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eed:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ef0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014ef3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ef9:	8d 50 02             	lea    edx,[eax+0x2]
c0014efc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eff:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f02:	e9 6f 02 00 00       	jmp    c0015176 <opcodeFault(regs*, void*)+0x616>
c0014f07:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f0a:	8a 00                	mov    al,BYTE PTR [eax]
c0014f0c:	3c 0f                	cmp    al,0xf
c0014f0e:	0f 85 8d 01 00 00    	jne    c00150a1 <opcodeFault(regs*, void*)+0x541>
c0014f14:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f17:	40                   	inc    eax
c0014f18:	8a 00                	mov    al,BYTE PTR [eax]
c0014f1a:	3c c7                	cmp    al,0xc7
c0014f1c:	0f 85 7f 01 00 00    	jne    c00150a1 <opcodeFault(regs*, void*)+0x541>
c0014f22:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f28:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f2b:	8d 50 01             	lea    edx,[eax+0x1]
c0014f2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f31:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f34:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014f37:	50                   	push   eax
c0014f38:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014f3b:	50                   	push   eax
c0014f3c:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014f3f:	50                   	push   eax
c0014f40:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014f43:	e8 60 46 00 00       	call   c00195a8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014f48:	83 c4 10             	add    esp,0x10
c0014f4b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014f4e:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014f51:	83 f0 01             	xor    eax,0x1
c0014f54:	84 c0                	test   al,al
c0014f56:	0f 84 45 01 00 00    	je     c00150a1 <opcodeFault(regs*, void*)+0x541>
c0014f5c:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014f5f:	3c 01                	cmp    al,0x1
c0014f61:	0f 85 3a 01 00 00    	jne    c00150a1 <opcodeFault(regs*, void*)+0x541>
c0014f67:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014f6a:	83 f0 01             	xor    eax,0x1
c0014f6d:	84 c0                	test   al,al
c0014f6f:	0f 84 2c 01 00 00    	je     c00150a1 <opcodeFault(regs*, void*)+0x541>
c0014f75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f78:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014f7b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014f7e:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014f85:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014f88:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014f8b:	89 c2                	mov    edx,eax
c0014f8d:	b8 00 00 00 00       	mov    eax,0x0
c0014f92:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014f95:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014f98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f9b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014f9e:	ba 00 00 00 00       	mov    edx,0x0
c0014fa3:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014fa6:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014fa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fac:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014faf:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014fb2:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014fb9:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014fbc:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014fbf:	89 c2                	mov    edx,eax
c0014fc1:	b8 00 00 00 00       	mov    eax,0x0
c0014fc6:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014fc9:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014fcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fcf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014fd2:	ba 00 00 00 00       	mov    edx,0x0
c0014fd7:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014fda:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014fdd:	fa                   	cli    
c0014fde:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c0014fe3:	40                   	inc    eax
c0014fe4:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c0014fe9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014fec:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014fef:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ff1:	89 c1                	mov    ecx,eax
c0014ff3:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014ff6:	89 cb                	mov    ebx,ecx
c0014ff8:	89 d0                	mov    eax,edx
c0014ffa:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014ffd:	89 c6                	mov    esi,eax
c0014fff:	89 f0                	mov    eax,esi
c0015001:	09 d8                	or     eax,ebx
c0015003:	85 c0                	test   eax,eax
c0015005:	75 21                	jne    c0015028 <opcodeFault(regs*, void*)+0x4c8>
c0015007:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c001500a:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001500d:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015010:	89 01                	mov    DWORD PTR [ecx],eax
c0015012:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015015:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015018:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001501b:	83 c8 40             	or     eax,0x40
c001501e:	89 c2                	mov    edx,eax
c0015020:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015023:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015026:	eb 3e                	jmp    c0015066 <opcodeFault(regs*, void*)+0x506>
c0015028:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001502b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001502e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015030:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015033:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015036:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015039:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001503c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001503f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015042:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015045:	89 d0                	mov    eax,edx
c0015047:	31 d2                	xor    edx,edx
c0015049:	89 c3                	mov    ebx,eax
c001504b:	89 d6                	mov    esi,edx
c001504d:	89 da                	mov    edx,ebx
c001504f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015052:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015055:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015058:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001505b:	83 e0 bf             	and    eax,0xffffffbf
c001505e:	89 c2                	mov    edx,eax
c0015060:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015063:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015066:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001506b:	48                   	dec    eax
c001506c:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c0015071:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c0015076:	85 c0                	test   eax,eax
c0015078:	75 01                	jne    c001507b <opcodeFault(regs*, void*)+0x51b>
c001507a:	fb                   	sti    
c001507b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001507e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015081:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015084:	01 c2                	add    edx,eax
c0015086:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015089:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001508c:	83 ec 0c             	sub    esp,0xc
c001508f:	68 4e ae 02 c0       	push   0xc002ae4e
c0015094:	e8 8a d6 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0015099:	83 c4 10             	add    esp,0x10
c001509c:	e9 d5 00 00 00       	jmp    c0015176 <opcodeFault(regs*, void*)+0x616>
c00150a1:	83 ec 0c             	sub    esp,0xc
c00150a4:	68 61 ae 02 c0       	push   0xc002ae61
c00150a9:	e8 75 d6 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c00150ae:	83 c4 10             	add    esp,0x10
c00150b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150b4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00150b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150ba:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00150bd:	c1 e0 04             	shl    eax,0x4
c00150c0:	01 d0                	add    eax,edx
c00150c2:	83 c0 03             	add    eax,0x3
c00150c5:	8a 00                	mov    al,BYTE PTR [eax]
c00150c7:	0f b6 d8             	movzx  ebx,al
c00150ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150cd:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00150d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150d3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00150d6:	c1 e0 04             	shl    eax,0x4
c00150d9:	01 d0                	add    eax,edx
c00150db:	83 c0 02             	add    eax,0x2
c00150de:	8a 00                	mov    al,BYTE PTR [eax]
c00150e0:	0f b6 c8             	movzx  ecx,al
c00150e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150e6:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00150e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150ec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00150ef:	c1 e0 04             	shl    eax,0x4
c00150f2:	01 d0                	add    eax,edx
c00150f4:	40                   	inc    eax
c00150f5:	8a 00                	mov    al,BYTE PTR [eax]
c00150f7:	0f b6 d0             	movzx  edx,al
c00150fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150fd:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015100:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015103:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015106:	c1 e0 04             	shl    eax,0x4
c0015109:	01 f0                	add    eax,esi
c001510b:	8a 00                	mov    al,BYTE PTR [eax]
c001510d:	0f b6 c0             	movzx  eax,al
c0015110:	83 ec 0c             	sub    esp,0xc
c0015113:	53                   	push   ebx
c0015114:	51                   	push   ecx
c0015115:	52                   	push   edx
c0015116:	50                   	push   eax
c0015117:	68 74 ae 02 c0       	push   0xc002ae74
c001511c:	e8 02 d6 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0015121:	83 c4 20             	add    esp,0x20
c0015124:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015127:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001512a:	83 c0 03             	add    eax,0x3
c001512d:	8a 00                	mov    al,BYTE PTR [eax]
c001512f:	0f b6 d8             	movzx  ebx,al
c0015132:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015135:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015138:	83 c0 02             	add    eax,0x2
c001513b:	8a 00                	mov    al,BYTE PTR [eax]
c001513d:	0f b6 c8             	movzx  ecx,al
c0015140:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015143:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015146:	40                   	inc    eax
c0015147:	8a 00                	mov    al,BYTE PTR [eax]
c0015149:	0f b6 d0             	movzx  edx,al
c001514c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001514f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015152:	8a 00                	mov    al,BYTE PTR [eax]
c0015154:	0f b6 c0             	movzx  eax,al
c0015157:	83 ec 0c             	sub    esp,0xc
c001515a:	53                   	push   ebx
c001515b:	51                   	push   ecx
c001515c:	52                   	push   edx
c001515d:	50                   	push   eax
c001515e:	68 9c ae 02 c0       	push   0xc002ae9c
c0015163:	e8 bb d5 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0015168:	83 c4 20             	add    esp,0x20
c001516b:	83 ec 0c             	sub    esp,0xc
c001516e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015171:	e8 48 f4 ff ff       	call   c00145be <displayDebugInfo(regs*)>
c0015176:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015179:	5b                   	pop    ebx
c001517a:	5e                   	pop    esi
c001517b:	5d                   	pop    ebp
c001517c:	c3                   	ret    

c001517d <displayProgramFault(char const*)>:
c001517d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015182:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015185:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001518b:	85 c0                	test   eax,eax
c001518d:	74 15                	je     c00151a4 <displayProgramFault(char const*)+0x27>
c001518f:	83 ec 0c             	sub    esp,0xc
c0015192:	6a 04                	push   0x4
c0015194:	6a 0f                	push   0xf
c0015196:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001519a:	50                   	push   eax
c001519b:	e8 bc b3 ff ff       	call   c001055c <VgaText::puts(char const*, VgaColour, VgaColour)>
c00151a0:	83 c4 1c             	add    esp,0x1c
c00151a3:	c3                   	ret    
c00151a4:	c3                   	ret    

c00151a5 <setupInterruptController()>:
c00151a5:	55                   	push   ebp
c00151a6:	89 e5                	mov    ebp,esp
c00151a8:	53                   	push   ebx
c00151a9:	83 ec 24             	sub    esp,0x24
c00151ac:	b8 00 00 00 00       	mov    eax,0x0
c00151b1:	85 c0                	test   eax,eax
c00151b3:	0f 95 c0             	setne  al
c00151b6:	84 c0                	test   al,al
c00151b8:	74 5b                	je     c0015215 <setupInterruptController()+0x70>
c00151ba:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00151c1:	83 ec 0c             	sub    esp,0xc
c00151c4:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00151c7:	e8 cd a3 ff ff       	call   c000f599 <malloc>
c00151cc:	83 c4 10             	add    esp,0x10
c00151cf:	89 c3                	mov    ebx,eax
c00151d1:	83 ec 0c             	sub    esp,0xc
c00151d4:	53                   	push   ebx
c00151d5:	e8 02 05 01 00       	call   c00256dc <APIC::APIC()>
c00151da:	83 c4 10             	add    esp,0x10
c00151dd:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00151e0:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00151e3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00151e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00151e8:	83 c0 08             	add    eax,0x8
c00151eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00151ed:	6a 00                	push   0x0
c00151ef:	6a 00                	push   0x0
c00151f1:	6a 00                	push   0x0
c00151f3:	52                   	push   edx
c00151f4:	ff d0                	call   eax
c00151f6:	83 c4 10             	add    esp,0x10
c00151f9:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c00151fe:	83 ec 08             	sub    esp,0x8
c0015201:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015204:	50                   	push   eax
c0015205:	e8 52 e9 ff ff       	call   c0013b5c <Device::addChild(Device*)>
c001520a:	83 c4 10             	add    esp,0x10
c001520d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015210:	e9 79 03 00 00       	jmp    c001558e <setupInterruptController()+0x3e9>
c0015215:	a0 80 03 03 c0       	mov    al,ds:0xc0030380
c001521a:	84 c0                	test   al,al
c001521c:	75 14                	jne    c0015232 <setupInterruptController()+0x8d>
c001521e:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0015223:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015229:	83 e2 fe             	and    edx,0xfffffffe
c001522c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0015232:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0015237:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001523d:	83 e0 01             	and    eax,0x1
c0015240:	84 c0                	test   al,al
c0015242:	0f 95 c0             	setne  al
c0015245:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015248:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c001524f:	83 ec 0c             	sub    esp,0xc
c0015252:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015255:	e8 3f a3 ff ff       	call   c000f599 <malloc>
c001525a:	83 c4 10             	add    esp,0x10
c001525d:	89 c3                	mov    ebx,eax
c001525f:	83 ec 0c             	sub    esp,0xc
c0015262:	53                   	push   ebx
c0015263:	e8 cc 09 01 00       	call   c0025c34 <PIC::PIC()>
c0015268:	83 c4 10             	add    esp,0x10
c001526b:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001526e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015271:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015274:	8b 00                	mov    eax,DWORD PTR [eax]
c0015276:	83 c0 08             	add    eax,0x8
c0015279:	8b 00                	mov    eax,DWORD PTR [eax]
c001527b:	6a 00                	push   0x0
c001527d:	6a 00                	push   0x0
c001527f:	6a 00                	push   0x0
c0015281:	52                   	push   edx
c0015282:	ff d0                	call   eax
c0015284:	83 c4 10             	add    esp,0x10
c0015287:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c001528b:	74 73                	je     c0015300 <setupInterruptController()+0x15b>
c001528d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015290:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015293:	8b 00                	mov    eax,DWORD PTR [eax]
c0015295:	83 c0 0c             	add    eax,0xc
c0015298:	8b 00                	mov    eax,DWORD PTR [eax]
c001529a:	6a 00                	push   0x0
c001529c:	6a 00                	push   0x0
c001529e:	6a 00                	push   0x0
c00152a0:	52                   	push   edx
c00152a1:	ff d0                	call   eax
c00152a3:	83 c4 10             	add    esp,0x10
c00152a6:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00152aa:	74 15                	je     c00152c1 <setupInterruptController()+0x11c>
c00152ac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152af:	8b 00                	mov    eax,DWORD PTR [eax]
c00152b1:	83 c0 04             	add    eax,0x4
c00152b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00152b6:	83 ec 0c             	sub    esp,0xc
c00152b9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152bc:	ff d0                	call   eax
c00152be:	83 c4 10             	add    esp,0x10
c00152c1:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00152c8:	83 ec 0c             	sub    esp,0xc
c00152cb:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00152ce:	e8 c6 a2 ff ff       	call   c000f599 <malloc>
c00152d3:	83 c4 10             	add    esp,0x10
c00152d6:	89 c3                	mov    ebx,eax
c00152d8:	83 ec 0c             	sub    esp,0xc
c00152db:	53                   	push   ebx
c00152dc:	e8 fb 03 01 00       	call   c00256dc <APIC::APIC()>
c00152e1:	83 c4 10             	add    esp,0x10
c00152e4:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00152e7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00152ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ef:	83 c0 08             	add    eax,0x8
c00152f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00152f4:	6a 00                	push   0x0
c00152f6:	6a 00                	push   0x0
c00152f8:	6a 00                	push   0x0
c00152fa:	52                   	push   edx
c00152fb:	ff d0                	call   eax
c00152fd:	83 c4 10             	add    esp,0x10
c0015300:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0015305:	83 ec 08             	sub    esp,0x8
c0015308:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001530b:	50                   	push   eax
c001530c:	e8 4b e8 ff ff       	call   c0013b5c <Device::addChild(Device*)>
c0015311:	83 c4 10             	add    esp,0x10
c0015314:	c7 05 88 db 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002db88,0x0
c001531e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015321:	8b 00                	mov    eax,DWORD PTR [eax]
c0015323:	83 c0 24             	add    eax,0x24
c0015326:	8b 00                	mov    eax,DWORD PTR [eax]
c0015328:	6a 00                	push   0x0
c001532a:	68 41 4b 01 c0       	push   0xc0014b41
c001532f:	6a 00                	push   0x0
c0015331:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015334:	ff d0                	call   eax
c0015336:	83 c4 10             	add    esp,0x10
c0015339:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001533c:	8b 00                	mov    eax,DWORD PTR [eax]
c001533e:	83 c0 24             	add    eax,0x24
c0015341:	8b 00                	mov    eax,DWORD PTR [eax]
c0015343:	6a 00                	push   0x0
c0015345:	68 41 4b 01 c0       	push   0xc0014b41
c001534a:	6a 01                	push   0x1
c001534c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001534f:	ff d0                	call   eax
c0015351:	83 c4 10             	add    esp,0x10
c0015354:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015357:	8b 00                	mov    eax,DWORD PTR [eax]
c0015359:	83 c0 24             	add    eax,0x24
c001535c:	8b 00                	mov    eax,DWORD PTR [eax]
c001535e:	6a 00                	push   0x0
c0015360:	68 1b 44 01 c0       	push   0xc001441b
c0015365:	6a 02                	push   0x2
c0015367:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001536a:	ff d0                	call   eax
c001536c:	83 c4 10             	add    esp,0x10
c001536f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015372:	8b 00                	mov    eax,DWORD PTR [eax]
c0015374:	83 c0 24             	add    eax,0x24
c0015377:	8b 00                	mov    eax,DWORD PTR [eax]
c0015379:	6a 00                	push   0x0
c001537b:	68 41 4b 01 c0       	push   0xc0014b41
c0015380:	6a 03                	push   0x3
c0015382:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015385:	ff d0                	call   eax
c0015387:	83 c4 10             	add    esp,0x10
c001538a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001538d:	8b 00                	mov    eax,DWORD PTR [eax]
c001538f:	83 c0 24             	add    eax,0x24
c0015392:	8b 00                	mov    eax,DWORD PTR [eax]
c0015394:	6a 00                	push   0x0
c0015396:	68 41 4b 01 c0       	push   0xc0014b41
c001539b:	6a 04                	push   0x4
c001539d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153a0:	ff d0                	call   eax
c00153a2:	83 c4 10             	add    esp,0x10
c00153a5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00153aa:	83 c0 24             	add    eax,0x24
c00153ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00153af:	6a 00                	push   0x0
c00153b1:	68 41 4b 01 c0       	push   0xc0014b41
c00153b6:	6a 05                	push   0x5
c00153b8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153bb:	ff d0                	call   eax
c00153bd:	83 c4 10             	add    esp,0x10
c00153c0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00153c5:	83 c0 24             	add    eax,0x24
c00153c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ca:	6a 00                	push   0x0
c00153cc:	68 60 4b 01 c0       	push   0xc0014b60
c00153d1:	6a 06                	push   0x6
c00153d3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153d6:	ff d0                	call   eax
c00153d8:	83 c4 10             	add    esp,0x10
c00153db:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153de:	8b 00                	mov    eax,DWORD PTR [eax]
c00153e0:	83 c0 24             	add    eax,0x24
c00153e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00153e5:	6a 00                	push   0x0
c00153e7:	68 4d 4a 01 c0       	push   0xc0014a4d
c00153ec:	6a 07                	push   0x7
c00153ee:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153f1:	ff d0                	call   eax
c00153f3:	83 c4 10             	add    esp,0x10
c00153f6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00153fb:	83 c0 24             	add    eax,0x24
c00153fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015400:	6a 00                	push   0x0
c0015402:	68 36 42 01 c0       	push   0xc0014236
c0015407:	6a 08                	push   0x8
c0015409:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001540c:	ff d0                	call   eax
c001540e:	83 c4 10             	add    esp,0x10
c0015411:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015414:	8b 00                	mov    eax,DWORD PTR [eax]
c0015416:	83 c0 24             	add    eax,0x24
c0015419:	8b 00                	mov    eax,DWORD PTR [eax]
c001541b:	6a 00                	push   0x0
c001541d:	68 41 4b 01 c0       	push   0xc0014b41
c0015422:	6a 09                	push   0x9
c0015424:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015427:	ff d0                	call   eax
c0015429:	83 c4 10             	add    esp,0x10
c001542c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001542f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015431:	83 c0 24             	add    eax,0x24
c0015434:	8b 00                	mov    eax,DWORD PTR [eax]
c0015436:	6a 00                	push   0x0
c0015438:	68 41 4b 01 c0       	push   0xc0014b41
c001543d:	6a 0a                	push   0xa
c001543f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015442:	ff d0                	call   eax
c0015444:	83 c4 10             	add    esp,0x10
c0015447:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001544a:	8b 00                	mov    eax,DWORD PTR [eax]
c001544c:	83 c0 24             	add    eax,0x24
c001544f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015451:	6a 00                	push   0x0
c0015453:	68 41 4b 01 c0       	push   0xc0014b41
c0015458:	6a 0b                	push   0xb
c001545a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001545d:	ff d0                	call   eax
c001545f:	83 c4 10             	add    esp,0x10
c0015462:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015465:	8b 00                	mov    eax,DWORD PTR [eax]
c0015467:	83 c0 24             	add    eax,0x24
c001546a:	8b 00                	mov    eax,DWORD PTR [eax]
c001546c:	6a 00                	push   0x0
c001546e:	68 41 4b 01 c0       	push   0xc0014b41
c0015473:	6a 0c                	push   0xc
c0015475:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015478:	ff d0                	call   eax
c001547a:	83 c4 10             	add    esp,0x10
c001547d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015480:	8b 00                	mov    eax,DWORD PTR [eax]
c0015482:	83 c0 24             	add    eax,0x24
c0015485:	8b 00                	mov    eax,DWORD PTR [eax]
c0015487:	6a 00                	push   0x0
c0015489:	68 c0 4a 01 c0       	push   0xc0014ac0
c001548e:	6a 0d                	push   0xd
c0015490:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015493:	ff d0                	call   eax
c0015495:	83 c4 10             	add    esp,0x10
c0015498:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001549b:	8b 00                	mov    eax,DWORD PTR [eax]
c001549d:	83 c0 24             	add    eax,0x24
c00154a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00154a2:	6a 00                	push   0x0
c00154a4:	68 f9 4a 01 c0       	push   0xc0014af9
c00154a9:	6a 0e                	push   0xe
c00154ab:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154ae:	ff d0                	call   eax
c00154b0:	83 c4 10             	add    esp,0x10
c00154b3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00154b8:	83 c0 24             	add    eax,0x24
c00154bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00154bd:	6a 00                	push   0x0
c00154bf:	68 41 4b 01 c0       	push   0xc0014b41
c00154c4:	6a 0f                	push   0xf
c00154c6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154c9:	ff d0                	call   eax
c00154cb:	83 c4 10             	add    esp,0x10
c00154ce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00154d3:	83 c0 24             	add    eax,0x24
c00154d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00154d8:	6a 00                	push   0x0
c00154da:	68 41 4b 01 c0       	push   0xc0014b41
c00154df:	6a 10                	push   0x10
c00154e1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154e4:	ff d0                	call   eax
c00154e6:	83 c4 10             	add    esp,0x10
c00154e9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ee:	83 c0 24             	add    eax,0x24
c00154f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00154f3:	6a 00                	push   0x0
c00154f5:	68 41 4b 01 c0       	push   0xc0014b41
c00154fa:	6a 11                	push   0x11
c00154fc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154ff:	ff d0                	call   eax
c0015501:	83 c4 10             	add    esp,0x10
c0015504:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015507:	8b 00                	mov    eax,DWORD PTR [eax]
c0015509:	83 c0 24             	add    eax,0x24
c001550c:	8b 00                	mov    eax,DWORD PTR [eax]
c001550e:	6a 00                	push   0x0
c0015510:	68 41 4b 01 c0       	push   0xc0014b41
c0015515:	6a 12                	push   0x12
c0015517:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001551a:	ff d0                	call   eax
c001551c:	83 c4 10             	add    esp,0x10
c001551f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015522:	8b 00                	mov    eax,DWORD PTR [eax]
c0015524:	83 c0 24             	add    eax,0x24
c0015527:	8b 00                	mov    eax,DWORD PTR [eax]
c0015529:	6a 00                	push   0x0
c001552b:	68 41 4b 01 c0       	push   0xc0014b41
c0015530:	6a 13                	push   0x13
c0015532:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015535:	ff d0                	call   eax
c0015537:	83 c4 10             	add    esp,0x10
c001553a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001553d:	8b 00                	mov    eax,DWORD PTR [eax]
c001553f:	83 c0 24             	add    eax,0x24
c0015542:	8b 00                	mov    eax,DWORD PTR [eax]
c0015544:	6a 00                	push   0x0
c0015546:	68 41 4b 01 c0       	push   0xc0014b41
c001554b:	6a 14                	push   0x14
c001554d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015550:	ff d0                	call   eax
c0015552:	83 c4 10             	add    esp,0x10
c0015555:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015558:	8b 00                	mov    eax,DWORD PTR [eax]
c001555a:	83 c0 24             	add    eax,0x24
c001555d:	8b 00                	mov    eax,DWORD PTR [eax]
c001555f:	6a 00                	push   0x0
c0015561:	68 41 4b 01 c0       	push   0xc0014b41
c0015566:	6a 1e                	push   0x1e
c0015568:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001556b:	ff d0                	call   eax
c001556d:	83 c4 10             	add    esp,0x10
c0015570:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015573:	8b 00                	mov    eax,DWORD PTR [eax]
c0015575:	83 c0 24             	add    eax,0x24
c0015578:	8b 00                	mov    eax,DWORD PTR [eax]
c001557a:	6a 00                	push   0x0
c001557c:	68 7e c0 01 c0       	push   0xc001c07e
c0015581:	6a 60                	push   0x60
c0015583:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015586:	ff d0                	call   eax
c0015588:	83 c4 10             	add    esp,0x10
c001558b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001558e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015591:	c9                   	leave  
c0015592:	c3                   	ret    
c0015593:	90                   	nop

c0015594 <InterruptController::convertLegacyIRQNumber(int)>:
c0015594:	55                   	push   ebp
c0015595:	89 e5                	mov    ebp,esp
c0015597:	83 ec 08             	sub    esp,0x8
c001559a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001559d:	83 ec 0c             	sub    esp,0xc
c00155a0:	50                   	push   eax
c00155a1:	e8 b6 e8 ff ff       	call   c0013e5c <Device::getName()>
c00155a6:	83 c4 10             	add    esp,0x10
c00155a9:	8a 00                	mov    al,BYTE PTR [eax]
c00155ab:	3c 41                	cmp    al,0x41
c00155ad:	0f 94 c0             	sete   al
c00155b0:	84 c0                	test   al,al
c00155b2:	74 28                	je     c00155dc <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00155b4:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00155b8:	7f 12                	jg     c00155cc <InterruptController::convertLegacyIRQNumber(int)+0x38>
c00155ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00155bd:	05 60 cc 02 c0       	add    eax,0xc002cc60
c00155c2:	8a 00                	mov    al,BYTE PTR [eax]
c00155c4:	0f b6 c0             	movzx  eax,al
c00155c7:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00155ca:	eb 10                	jmp    c00155dc <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00155cc:	83 ec 0c             	sub    esp,0xc
c00155cf:	68 c4 ae 02 c0       	push   0xc002aec4
c00155d4:	e8 b6 48 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c00155d9:	83 c4 10             	add    esp,0x10
c00155dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00155df:	c9                   	leave  
c00155e0:	c3                   	ret    
c00155e1:	90                   	nop

c00155e2 <startGUI(void*)>:
c00155e2:	55                   	push   ebp
c00155e3:	89 e5                	mov    ebp,esp
c00155e5:	53                   	push   ebx
c00155e6:	83 ec 04             	sub    esp,0x4
c00155e9:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c00155ee:	48                   	dec    eax
c00155ef:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c00155f4:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c00155f9:	85 c0                	test   eax,eax
c00155fb:	75 01                	jne    c00155fe <startGUI(void*)+0x1c>
c00155fd:	fb                   	sti    
c00155fe:	8b 1d 08 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da08
c0015604:	83 ec 08             	sub    esp,0x8
c0015607:	6a 01                	push   0x1
c0015609:	68 44 af 02 c0       	push   0xc002af44
c001560e:	e8 46 7a 00 00       	call   c001d059 <Thr::loadDLL(char const*, bool)>
c0015613:	83 c4 10             	add    esp,0x10
c0015616:	83 ec 08             	sub    esp,0x8
c0015619:	53                   	push   ebx
c001561a:	50                   	push   eax
c001561b:	e8 6a 7c 00 00       	call   c001d28a <Thr::executeDLL(unsigned long, void*)>
c0015620:	83 c4 10             	add    esp,0x10
c0015623:	8b 1d 08 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da08
c0015629:	83 ec 08             	sub    esp,0x8
c001562c:	6a 01                	push   0x1
c001562e:	68 5e af 02 c0       	push   0xc002af5e
c0015633:	e8 21 7a 00 00       	call   c001d059 <Thr::loadDLL(char const*, bool)>
c0015638:	83 c4 10             	add    esp,0x10
c001563b:	83 ec 08             	sub    esp,0x8
c001563e:	53                   	push   ebx
c001563f:	50                   	push   eax
c0015640:	e8 45 7c 00 00       	call   c001d28a <Thr::executeDLL(unsigned long, void*)>
c0015645:	83 c4 10             	add    esp,0x10
c0015648:	90                   	nop
c0015649:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001564c:	c9                   	leave  
c001564d:	c3                   	ret    

c001564e <startGUIVESA(void*)>:
c001564e:	55                   	push   ebp
c001564f:	89 e5                	mov    ebp,esp
c0015651:	53                   	push   ebx
c0015652:	83 ec 04             	sub    esp,0x4
c0015655:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001565a:	48                   	dec    eax
c001565b:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c0015660:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c0015665:	85 c0                	test   eax,eax
c0015667:	75 01                	jne    c001566a <startGUIVESA(void*)+0x1c>
c0015669:	fb                   	sti    
c001566a:	8b 1d 08 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da08
c0015670:	83 ec 08             	sub    esp,0x8
c0015673:	6a 01                	push   0x1
c0015675:	68 78 af 02 c0       	push   0xc002af78
c001567a:	e8 da 79 00 00       	call   c001d059 <Thr::loadDLL(char const*, bool)>
c001567f:	83 c4 10             	add    esp,0x10
c0015682:	83 ec 08             	sub    esp,0x8
c0015685:	53                   	push   ebx
c0015686:	50                   	push   eax
c0015687:	e8 fe 7b 00 00       	call   c001d28a <Thr::executeDLL(unsigned long, void*)>
c001568c:	83 c4 10             	add    esp,0x10
c001568f:	8b 1d 08 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da08
c0015695:	83 ec 08             	sub    esp,0x8
c0015698:	6a 01                	push   0x1
c001569a:	68 5e af 02 c0       	push   0xc002af5e
c001569f:	e8 b5 79 00 00       	call   c001d059 <Thr::loadDLL(char const*, bool)>
c00156a4:	83 c4 10             	add    esp,0x10
c00156a7:	83 ec 08             	sub    esp,0x8
c00156aa:	53                   	push   ebx
c00156ab:	50                   	push   eax
c00156ac:	e8 d9 7b 00 00       	call   c001d28a <Thr::executeDLL(unsigned long, void*)>
c00156b1:	83 c4 10             	add    esp,0x10
c00156b4:	90                   	nop
c00156b5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00156b8:	c9                   	leave  
c00156b9:	c3                   	ret    

c00156ba <sendKeyToTerminal(unsigned char)>:
c00156ba:	55                   	push   ebp
c00156bb:	89 e5                	mov    ebp,esp
c00156bd:	83 ec 28             	sub    esp,0x28
c00156c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00156c6:	a1 c4 da 02 c0       	mov    eax,ds:0xc002dac4
c00156cb:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00156cf:	83 ec 08             	sub    esp,0x8
c00156d2:	52                   	push   edx
c00156d3:	50                   	push   eax
c00156d4:	e8 2b b3 ff ff       	call   c0010a04 <VgaText::receiveKey(unsigned char)>
c00156d9:	83 c4 10             	add    esp,0x10
c00156dc:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00156e0:	0f 85 8f 00 00 00    	jne    c0015775 <sendKeyToTerminal(unsigned char)+0xbb>
c00156e6:	fa                   	cli    
c00156e7:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c00156ec:	40                   	inc    eax
c00156ed:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c00156f2:	a1 24 0f 03 c0       	mov    eax,ds:0xc0030f24
c00156f7:	40                   	inc    eax
c00156f8:	a3 24 0f 03 c0       	mov    ds:0xc0030f24,eax
c00156fd:	a1 a0 db 02 c0       	mov    eax,ds:0xc002dba0
c0015702:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015705:	c7 05 a0 db 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dba0,0x0
c001570f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015713:	74 1f                	je     c0015734 <sendKeyToTerminal(unsigned char)+0x7a>
c0015715:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015718:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001571b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001571e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015721:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015724:	83 ec 0c             	sub    esp,0xc
c0015727:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001572a:	e8 73 87 00 00       	call   c001dea2 <unblockTask(ThreadControlBlock*)>
c001572f:	83 c4 10             	add    esp,0x10
c0015732:	eb db                	jmp    c001570f <sendKeyToTerminal(unsigned char)+0x55>
c0015734:	a1 24 0f 03 c0       	mov    eax,ds:0xc0030f24
c0015739:	48                   	dec    eax
c001573a:	a3 24 0f 03 c0       	mov    ds:0xc0030f24,eax
c001573f:	a1 24 0f 03 c0       	mov    eax,ds:0xc0030f24
c0015744:	85 c0                	test   eax,eax
c0015746:	75 18                	jne    c0015760 <sendKeyToTerminal(unsigned char)+0xa6>
c0015748:	a1 20 0f 03 c0       	mov    eax,ds:0xc0030f20
c001574d:	85 c0                	test   eax,eax
c001574f:	74 0f                	je     c0015760 <sendKeyToTerminal(unsigned char)+0xa6>
c0015751:	c7 05 20 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f20,0x0
c001575b:	e8 bf 82 00 00       	call   c001da1f <schedule()>
c0015760:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c0015765:	48                   	dec    eax
c0015766:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001576b:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c0015770:	85 c0                	test   eax,eax
c0015772:	75 01                	jne    c0015775 <sendKeyToTerminal(unsigned char)+0xbb>
c0015774:	fb                   	sti    
c0015775:	90                   	nop
c0015776:	c9                   	leave  
c0015777:	c3                   	ret    

c0015778 <sendKeyboardToken(KeyboardToken)>:
c0015778:	55                   	push   ebp
c0015779:	89 e5                	mov    ebp,esp
c001577b:	83 ec 18             	sub    esp,0x18
c001577e:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015781:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015784:	0f b7 c0             	movzx  eax,ax
c0015787:	83 f2 01             	xor    edx,0x1
c001578a:	88 90 c0 db 02 c0    	mov    BYTE PTR [eax-0x3ffd2440],dl
c0015790:	a1 a8 db 02 c0       	mov    eax,ds:0xc002dba8
c0015795:	85 c0                	test   eax,eax
c0015797:	74 24                	je     c00157bd <sendKeyboardToken(KeyboardToken)+0x45>
c0015799:	8b 0d a8 db 02 c0    	mov    ecx,DWORD PTR ds:0xc002dba8
c001579f:	83 ec 04             	sub    esp,0x4
c00157a2:	68 c0 db 02 c0       	push   0xc002dbc0
c00157a7:	83 ec 08             	sub    esp,0x8
c00157aa:	89 e2                	mov    edx,esp
c00157ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157af:	89 02                	mov    DWORD PTR [edx],eax
c00157b1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00157b4:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00157b8:	ff d1                	call   ecx
c00157ba:	83 c4 10             	add    esp,0x10
c00157bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c0:	66 3d 03 02          	cmp    ax,0x203
c00157c4:	75 07                	jne    c00157cd <sendKeyboardToken(KeyboardToken)+0x55>
c00157c6:	a0 c0 dc 02 c0       	mov    al,ds:0xc002dcc0
c00157cb:	84 c0                	test   al,al
c00157cd:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00157d1:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c00157d4:	a0 c8 df 02 c0       	mov    al,ds:0xc002dfc8
c00157d9:	38 c2                	cmp    dl,al
c00157db:	74 1c                	je     c00157f9 <sendKeyboardToken(KeyboardToken)+0x81>
c00157dd:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c00157e0:	a2 c8 df 02 c0       	mov    ds:0xc002dfc8,al
c00157e5:	a0 c8 df 02 c0       	mov    al,ds:0xc002dfc8
c00157ea:	0f b6 c0             	movzx  eax,al
c00157ed:	83 ec 0c             	sub    esp,0xc
c00157f0:	50                   	push   eax
c00157f1:	e8 4e a8 ff ff       	call   c0010044 <setTerminalScrollLock(bool)>
c00157f6:	83 c4 10             	add    esp,0x10
c00157f9:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00157fc:	84 c0                	test   al,al
c00157fe:	0f 84 ae 00 00 00    	je     c00158b2 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015804:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015807:	66 3d 10 03          	cmp    ax,0x310
c001580b:	75 06                	jne    c0015813 <sendKeyboardToken(KeyboardToken)+0x9b>
c001580d:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015813:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015816:	66 3d 11 03          	cmp    ax,0x311
c001581a:	75 06                	jne    c0015822 <sendKeyboardToken(KeyboardToken)+0xaa>
c001581c:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015822:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015825:	66 3d 12 03          	cmp    ax,0x312
c0015829:	75 06                	jne    c0015831 <sendKeyboardToken(KeyboardToken)+0xb9>
c001582b:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015831:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015834:	66 3d 13 03          	cmp    ax,0x313
c0015838:	75 06                	jne    c0015840 <sendKeyboardToken(KeyboardToken)+0xc8>
c001583a:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015840:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015843:	66 3d 14 03          	cmp    ax,0x314
c0015847:	75 06                	jne    c001584f <sendKeyboardToken(KeyboardToken)+0xd7>
c0015849:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001584f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015852:	66 3d 15 03          	cmp    ax,0x315
c0015856:	75 06                	jne    c001585e <sendKeyboardToken(KeyboardToken)+0xe6>
c0015858:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001585e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015861:	66 3d 16 03          	cmp    ax,0x316
c0015865:	75 06                	jne    c001586d <sendKeyboardToken(KeyboardToken)+0xf5>
c0015867:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001586d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015870:	66 3d 17 03          	cmp    ax,0x317
c0015874:	75 06                	jne    c001587c <sendKeyboardToken(KeyboardToken)+0x104>
c0015876:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001587c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001587f:	66 3d 18 03          	cmp    ax,0x318
c0015883:	75 06                	jne    c001588b <sendKeyboardToken(KeyboardToken)+0x113>
c0015885:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001588b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001588e:	66 3d 19 03          	cmp    ax,0x319
c0015892:	75 06                	jne    c001589a <sendKeyboardToken(KeyboardToken)+0x122>
c0015894:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001589a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001589d:	66 3d 1a 03          	cmp    ax,0x31a
c00158a1:	0f 85 c9 00 00 00    	jne    c0015970 <sendKeyboardToken(KeyboardToken)+0x1f8>
c00158a7:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00158ad:	e9 be 00 00 00       	jmp    c0015970 <sendKeyboardToken(KeyboardToken)+0x1f8>
c00158b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b5:	66 3d 10 03          	cmp    ax,0x310
c00158b9:	75 0a                	jne    c00158c5 <sendKeyboardToken(KeyboardToken)+0x14d>
c00158bb:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00158c1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158c8:	66 3d 11 03          	cmp    ax,0x311
c00158cc:	75 0a                	jne    c00158d8 <sendKeyboardToken(KeyboardToken)+0x160>
c00158ce:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00158d4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158db:	66 3d 12 03          	cmp    ax,0x312
c00158df:	75 0a                	jne    c00158eb <sendKeyboardToken(KeyboardToken)+0x173>
c00158e1:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00158e7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ee:	66 3d 13 03          	cmp    ax,0x313
c00158f2:	75 0a                	jne    c00158fe <sendKeyboardToken(KeyboardToken)+0x186>
c00158f4:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00158fa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015901:	66 3d 14 03          	cmp    ax,0x314
c0015905:	75 0a                	jne    c0015911 <sendKeyboardToken(KeyboardToken)+0x199>
c0015907:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001590d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015911:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015914:	66 3d 15 03          	cmp    ax,0x315
c0015918:	75 0a                	jne    c0015924 <sendKeyboardToken(KeyboardToken)+0x1ac>
c001591a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015920:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015924:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015927:	66 3d 16 03          	cmp    ax,0x316
c001592b:	75 0a                	jne    c0015937 <sendKeyboardToken(KeyboardToken)+0x1bf>
c001592d:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015933:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015937:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001593a:	66 3d 17 03          	cmp    ax,0x317
c001593e:	75 0a                	jne    c001594a <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015940:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015946:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001594a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001594d:	66 3d 18 03          	cmp    ax,0x318
c0015951:	75 0a                	jne    c001595d <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015953:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015959:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001595d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015960:	66 3d 19 03          	cmp    ax,0x319
c0015964:	75 0a                	jne    c0015970 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015966:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001596c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015970:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015973:	66 3d 00 02          	cmp    ax,0x200
c0015977:	75 2c                	jne    c00159a5 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015979:	a0 c0 df 02 c0       	mov    al,ds:0xc002dfc0
c001597e:	83 f0 01             	xor    eax,0x1
c0015981:	84 c0                	test   al,al
c0015983:	74 20                	je     c00159a5 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015985:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001598a:	6a 01                	push   0x1
c001598c:	6a 00                	push   0x0
c001598e:	68 e2 55 01 c0       	push   0xc00155e2
c0015993:	50                   	push   eax
c0015994:	e8 61 7e 00 00       	call   c001d7fa <Process::createThread(void (*)(void*), void*, int)>
c0015999:	83 c4 10             	add    esp,0x10
c001599c:	c6 05 c0 df 02 c0 01 	mov    BYTE PTR ds:0xc002dfc0,0x1
c00159a3:	eb 33                	jmp    c00159d8 <sendKeyboardToken(KeyboardToken)+0x260>
c00159a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159a8:	66 3d 01 02          	cmp    ax,0x201
c00159ac:	75 2a                	jne    c00159d8 <sendKeyboardToken(KeyboardToken)+0x260>
c00159ae:	a0 c0 df 02 c0       	mov    al,ds:0xc002dfc0
c00159b3:	83 f0 01             	xor    eax,0x1
c00159b6:	84 c0                	test   al,al
c00159b8:	74 1e                	je     c00159d8 <sendKeyboardToken(KeyboardToken)+0x260>
c00159ba:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c00159bf:	6a 01                	push   0x1
c00159c1:	6a 00                	push   0x0
c00159c3:	68 4e 56 01 c0       	push   0xc001564e
c00159c8:	50                   	push   eax
c00159c9:	e8 2c 7e 00 00       	call   c001d7fa <Process::createThread(void (*)(void*), void*, int)>
c00159ce:	83 c4 10             	add    esp,0x10
c00159d1:	c6 05 c0 df 02 c0 01 	mov    BYTE PTR ds:0xc002dfc0,0x1
c00159d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159db:	66 3d 1d 03          	cmp    ax,0x31d
c00159df:	75 06                	jne    c00159e7 <sendKeyboardToken(KeyboardToken)+0x26f>
c00159e1:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00159e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159ea:	66 3d 1c 03          	cmp    ax,0x31c
c00159ee:	75 06                	jne    c00159f6 <sendKeyboardToken(KeyboardToken)+0x27e>
c00159f0:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00159f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159f9:	66 3d 1b 03          	cmp    ax,0x31b
c00159fd:	75 06                	jne    c0015a05 <sendKeyboardToken(KeyboardToken)+0x28d>
c00159ff:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015a05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a08:	66 3d 1e 03          	cmp    ax,0x31e
c0015a0c:	75 06                	jne    c0015a14 <sendKeyboardToken(KeyboardToken)+0x29c>
c0015a0e:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015a14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a17:	66 3d 1f 03          	cmp    ax,0x31f
c0015a1b:	75 06                	jne    c0015a23 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015a1d:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015a23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a26:	66 3d 1a 03          	cmp    ax,0x31a
c0015a2a:	75 06                	jne    c0015a32 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015a2c:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015a32:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015a36:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015a39:	83 f0 01             	xor    eax,0x1
c0015a3c:	84 c0                	test   al,al
c0015a3e:	74 77                	je     c0015ab7 <sendKeyboardToken(KeyboardToken)+0x33f>
c0015a40:	a0 c1 dc 02 c0       	mov    al,ds:0xc002dcc1
c0015a45:	84 c0                	test   al,al
c0015a47:	74 41                	je     c0015a8a <sendKeyboardToken(KeyboardToken)+0x312>
c0015a49:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015a4d:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015a51:	74 2b                	je     c0015a7e <sendKeyboardToken(KeyboardToken)+0x306>
c0015a53:	8b 15 c4 df 02 c0    	mov    edx,DWORD PTR ds:0xc002dfc4
c0015a59:	89 d0                	mov    eax,edx
c0015a5b:	c1 e0 02             	shl    eax,0x2
c0015a5e:	01 d0                	add    eax,edx
c0015a60:	01 c0                	add    eax,eax
c0015a62:	a3 c4 df 02 c0       	mov    ds:0xc002dfc4,eax
c0015a67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a6a:	0f b7 c0             	movzx  eax,ax
c0015a6d:	8d 50 d0             	lea    edx,[eax-0x30]
c0015a70:	a1 c4 df 02 c0       	mov    eax,ds:0xc002dfc4
c0015a75:	01 d0                	add    eax,edx
c0015a77:	a3 c4 df 02 c0       	mov    ds:0xc002dfc4,eax
c0015a7c:	eb 6d                	jmp    c0015aeb <sendKeyboardToken(KeyboardToken)+0x373>
c0015a7e:	c7 05 c4 df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dfc4,0x0
c0015a88:	eb 61                	jmp    c0015aeb <sendKeyboardToken(KeyboardToken)+0x373>
c0015a8a:	a1 c4 df 02 c0       	mov    eax,ds:0xc002dfc4
c0015a8f:	85 c0                	test   eax,eax
c0015a91:	74 18                	je     c0015aab <sendKeyboardToken(KeyboardToken)+0x333>
c0015a93:	a1 c4 df 02 c0       	mov    eax,ds:0xc002dfc4
c0015a98:	0f b6 c0             	movzx  eax,al
c0015a9b:	83 ec 0c             	sub    esp,0xc
c0015a9e:	50                   	push   eax
c0015a9f:	e8 16 fc ff ff       	call   c00156ba <sendKeyToTerminal(unsigned char)>
c0015aa4:	83 c4 10             	add    esp,0x10
c0015aa7:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015aab:	c7 05 c4 df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dfc4,0x0
c0015ab5:	eb 34                	jmp    c0015aeb <sendKeyboardToken(KeyboardToken)+0x373>
c0015ab7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aba:	66 3d 01 01          	cmp    ax,0x101
c0015abe:	75 2b                	jne    c0015aeb <sendKeyboardToken(KeyboardToken)+0x373>
c0015ac0:	a1 c4 df 02 c0       	mov    eax,ds:0xc002dfc4
c0015ac5:	85 c0                	test   eax,eax
c0015ac7:	74 18                	je     c0015ae1 <sendKeyboardToken(KeyboardToken)+0x369>
c0015ac9:	a1 c4 df 02 c0       	mov    eax,ds:0xc002dfc4
c0015ace:	0f b6 c0             	movzx  eax,al
c0015ad1:	83 ec 0c             	sub    esp,0xc
c0015ad4:	50                   	push   eax
c0015ad5:	e8 e0 fb ff ff       	call   c00156ba <sendKeyToTerminal(unsigned char)>
c0015ada:	83 c4 10             	add    esp,0x10
c0015add:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015ae1:	c7 05 c4 df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dfc4,0x0
c0015aeb:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015aee:	83 f0 01             	xor    eax,0x1
c0015af1:	84 c0                	test   al,al
c0015af3:	74 4c                	je     c0015b41 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015af5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015af8:	83 f0 01             	xor    eax,0x1
c0015afb:	84 c0                	test   al,al
c0015afd:	74 42                	je     c0015b41 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015aff:	a0 c0 dc 02 c0       	mov    al,ds:0xc002dcc0
c0015b04:	83 f0 01             	xor    eax,0x1
c0015b07:	84 c0                	test   al,al
c0015b09:	74 36                	je     c0015b41 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015b0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b0e:	66 83 f8 1f          	cmp    ax,0x1f
c0015b12:	76 09                	jbe    c0015b1d <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015b14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b17:	66 83 f8 7e          	cmp    ax,0x7e
c0015b1b:	76 12                	jbe    c0015b2f <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015b1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b20:	66 83 f8 0a          	cmp    ax,0xa
c0015b24:	74 09                	je     c0015b2f <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015b26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b29:	66 83 f8 08          	cmp    ax,0x8
c0015b2d:	75 12                	jne    c0015b41 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015b2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b32:	0f b6 c0             	movzx  eax,al
c0015b35:	83 ec 0c             	sub    esp,0xc
c0015b38:	50                   	push   eax
c0015b39:	e8 7c fb ff ff       	call   c00156ba <sendKeyToTerminal(unsigned char)>
c0015b3e:	83 c4 10             	add    esp,0x10
c0015b41:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015b44:	83 f0 01             	xor    eax,0x1
c0015b47:	84 c0                	test   al,al
c0015b49:	74 4f                	je     c0015b9a <sendKeyboardToken(KeyboardToken)+0x422>
c0015b4b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015b4e:	83 f0 01             	xor    eax,0x1
c0015b51:	84 c0                	test   al,al
c0015b53:	74 45                	je     c0015b9a <sendKeyboardToken(KeyboardToken)+0x422>
c0015b55:	a0 c0 dc 02 c0       	mov    al,ds:0xc002dcc0
c0015b5a:	84 c0                	test   al,al
c0015b5c:	74 3c                	je     c0015b9a <sendKeyboardToken(KeyboardToken)+0x422>
c0015b5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b61:	66 83 f8 3f          	cmp    ax,0x3f
c0015b65:	76 33                	jbe    c0015b9a <sendKeyboardToken(KeyboardToken)+0x422>
c0015b67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b6a:	66 83 f8 7f          	cmp    ax,0x7f
c0015b6e:	77 2a                	ja     c0015b9a <sendKeyboardToken(KeyboardToken)+0x422>
c0015b70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b73:	88 c2                	mov    dl,al
c0015b75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b78:	66 83 f8 5f          	cmp    ax,0x5f
c0015b7c:	76 04                	jbe    c0015b82 <sendKeyboardToken(KeyboardToken)+0x40a>
c0015b7e:	b0 20                	mov    al,0x20
c0015b80:	eb 02                	jmp    c0015b84 <sendKeyboardToken(KeyboardToken)+0x40c>
c0015b82:	b0 00                	mov    al,0x0
c0015b84:	29 c2                	sub    edx,eax
c0015b86:	88 d0                	mov    al,dl
c0015b88:	83 e8 40             	sub    eax,0x40
c0015b8b:	0f b6 c0             	movzx  eax,al
c0015b8e:	83 ec 0c             	sub    esp,0xc
c0015b91:	50                   	push   eax
c0015b92:	e8 23 fb ff ff       	call   c00156ba <sendKeyToTerminal(unsigned char)>
c0015b97:	83 c4 10             	add    esp,0x10
c0015b9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b9d:	66 3d 00 03          	cmp    ax,0x300
c0015ba1:	75 0f                	jne    c0015bb2 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015ba3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015ba6:	83 f0 01             	xor    eax,0x1
c0015ba9:	84 c0                	test   al,al
c0015bab:	74 05                	je     c0015bb2 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015bad:	e8 03 a8 ff ff       	call   c00103b5 <doTerminalCycle()>
c0015bb2:	90                   	nop
c0015bb3:	c9                   	leave  
c0015bb4:	c3                   	ret    

c0015bb5 <clearInternalKeybuffer(VgaText*)>:
c0015bb5:	55                   	push   ebp
c0015bb6:	89 e5                	mov    ebp,esp
c0015bb8:	83 ec 08             	sub    esp,0x8
c0015bbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bbe:	05 98 01 00 00       	add    eax,0x198
c0015bc3:	83 ec 0c             	sub    esp,0xc
c0015bc6:	50                   	push   eax
c0015bc7:	e8 a0 ab fe ff       	call   c000076c <strlen>
c0015bcc:	83 c4 10             	add    esp,0x10
c0015bcf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015bd2:	81 c2 98 01 00 00    	add    edx,0x198
c0015bd8:	83 ec 04             	sub    esp,0x4
c0015bdb:	50                   	push   eax
c0015bdc:	6a 00                	push   0x0
c0015bde:	52                   	push   edx
c0015bdf:	e8 6c ab fe ff       	call   c0000750 <memset>
c0015be4:	83 c4 10             	add    esp,0x10
c0015be7:	90                   	nop
c0015be8:	c9                   	leave  
c0015be9:	c3                   	ret    

c0015bea <readKeyboard(VgaText*, char*, unsigned long)>:
c0015bea:	55                   	push   ebp
c0015beb:	89 e5                	mov    ebp,esp
c0015bed:	83 ec 18             	sub    esp,0x18
c0015bf0:	a1 a8 db 02 c0       	mov    eax,ds:0xc002dba8
c0015bf5:	85 c0                	test   eax,eax
c0015bf7:	74 2a                	je     c0015c23 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015bf9:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015bff:	8b 0d a8 db 02 c0    	mov    ecx,DWORD PTR ds:0xc002dba8
c0015c05:	83 ec 04             	sub    esp,0x4
c0015c08:	68 c0 db 02 c0       	push   0xc002dbc0
c0015c0d:	83 ec 08             	sub    esp,0x8
c0015c10:	89 e2                	mov    edx,esp
c0015c12:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015c15:	89 02                	mov    DWORD PTR [edx],eax
c0015c17:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015c1a:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015c1e:	ff d1                	call   ecx
c0015c20:	83 c4 10             	add    esp,0x10
c0015c23:	fb                   	sti    
c0015c24:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015c2b:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015c2f:	0f 84 a1 00 00 00    	je     c0015cd6 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0015c35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c38:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015c3e:	84 c0                	test   al,al
c0015c40:	75 28                	jne    c0015c6a <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0015c42:	fa                   	cli    
c0015c43:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c0015c48:	40                   	inc    eax
c0015c49:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c0015c4e:	e8 cc 7d 00 00       	call   c001da1f <schedule()>
c0015c53:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c0015c58:	48                   	dec    eax
c0015c59:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c0015c5e:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c0015c63:	85 c0                	test   eax,eax
c0015c65:	75 ce                	jne    c0015c35 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015c67:	fb                   	sti    
c0015c68:	eb cb                	jmp    c0015c35 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015c6a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015c6d:	8d 50 01             	lea    edx,[eax+0x1]
c0015c70:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015c73:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c76:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015c7c:	88 10                	mov    BYTE PTR [eax],dl
c0015c7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c81:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015c87:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015c8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c8d:	05 98 01 00 00       	add    eax,0x198
c0015c92:	83 ec 0c             	sub    esp,0xc
c0015c95:	50                   	push   eax
c0015c96:	e8 d1 aa fe ff       	call   c000076c <strlen>
c0015c9b:	83 c4 10             	add    esp,0x10
c0015c9e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015ca1:	81 c2 98 01 00 00    	add    edx,0x198
c0015ca7:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015caa:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015cad:	81 c2 98 01 00 00    	add    edx,0x198
c0015cb3:	83 ec 04             	sub    esp,0x4
c0015cb6:	50                   	push   eax
c0015cb7:	51                   	push   ecx
c0015cb8:	52                   	push   edx
c0015cb9:	e8 ca a9 fe ff       	call   c0000688 <memmove>
c0015cbe:	83 c4 10             	add    esp,0x10
c0015cc1:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015cc4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015cc7:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015ccb:	0f 85 5a ff ff ff    	jne    c0015c2b <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0015cd1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cd4:	eb 03                	jmp    c0015cd9 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0015cd6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cd9:	c9                   	leave  
c0015cda:	c3                   	ret    
c0015cdb:	90                   	nop

c0015cdc <Keyboard::Keyboard(char const*)>:
c0015cdc:	83 ec 0c             	sub    esp,0xc
c0015cdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ce3:	83 ec 08             	sub    esp,0x8
c0015ce6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015cea:	50                   	push   eax
c0015ceb:	e8 70 e0 ff ff       	call   c0013d60 <Device::Device(char const*)>
c0015cf0:	83 c4 10             	add    esp,0x10
c0015cf3:	ba 9c af 02 c0       	mov    edx,0xc002af9c
c0015cf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cfc:	89 10                	mov    DWORD PTR [eax],edx
c0015cfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d02:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015d0c:	c6 05 a4 db 02 c0 01 	mov    BYTE PTR ds:0xc002dba4,0x1
c0015d13:	90                   	nop
c0015d14:	83 c4 0c             	add    esp,0xc
c0015d17:	c3                   	ret    

c0015d18 <Keyboard::~Keyboard()>:
c0015d18:	83 ec 0c             	sub    esp,0xc
c0015d1b:	ba 9c af 02 c0       	mov    edx,0xc002af9c
c0015d20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d24:	89 10                	mov    DWORD PTR [eax],edx
c0015d26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d2a:	83 ec 0c             	sub    esp,0xc
c0015d2d:	50                   	push   eax
c0015d2e:	e8 f7 dc ff ff       	call   c0013a2a <Device::~Device()>
c0015d33:	83 c4 10             	add    esp,0x10
c0015d36:	90                   	nop
c0015d37:	83 c4 0c             	add    esp,0xc
c0015d3a:	c3                   	ret    
c0015d3b:	90                   	nop

c0015d3c <Keyboard::~Keyboard()>:
c0015d3c:	83 ec 0c             	sub    esp,0xc
c0015d3f:	83 ec 0c             	sub    esp,0xc
c0015d42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d46:	e8 cd ff ff ff       	call   c0015d18 <Keyboard::~Keyboard()>
c0015d4b:	83 c4 10             	add    esp,0x10
c0015d4e:	83 ec 08             	sub    esp,0x8
c0015d51:	68 5c 01 00 00       	push   0x15c
c0015d56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d5a:	e8 ec c8 ff ff       	call   c001264b <operator delete(void*, unsigned long)>
c0015d5f:	83 c4 10             	add    esp,0x10
c0015d62:	83 c4 0c             	add    esp,0xc
c0015d65:	c3                   	ret    

c0015d66 <LogicalDisk::close(int, int, void*)>:
c0015d66:	83 c8 ff             	or     eax,0xffffffff
c0015d69:	c3                   	ret    

c0015d6a <LogicalDisk::~LogicalDisk()>:
c0015d6a:	83 ec 0c             	sub    esp,0xc
c0015d6d:	ba 14 b0 02 c0       	mov    edx,0xc002b014
c0015d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d76:	89 10                	mov    DWORD PTR [eax],edx
c0015d78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d7c:	83 ec 0c             	sub    esp,0xc
c0015d7f:	50                   	push   eax
c0015d80:	e8 a5 dc ff ff       	call   c0013a2a <Device::~Device()>
c0015d85:	83 c4 10             	add    esp,0x10
c0015d88:	90                   	nop
c0015d89:	83 c4 0c             	add    esp,0xc
c0015d8c:	c3                   	ret    
c0015d8d:	90                   	nop

c0015d8e <LogicalDisk::~LogicalDisk()>:
c0015d8e:	83 ec 0c             	sub    esp,0xc
c0015d91:	83 ec 0c             	sub    esp,0xc
c0015d94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d98:	e8 cd ff ff ff       	call   c0015d6a <LogicalDisk::~LogicalDisk()>
c0015d9d:	83 c4 10             	add    esp,0x10
c0015da0:	83 ec 08             	sub    esp,0x8
c0015da3:	68 74 01 00 00       	push   0x174
c0015da8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015dac:	e8 9a c8 ff ff       	call   c001264b <operator delete(void*, unsigned long)>
c0015db1:	83 c4 10             	add    esp,0x10
c0015db4:	83 c4 0c             	add    esp,0xc
c0015db7:	c3                   	ret    

c0015db8 <LogicalDisk::open(int, int, void*)>:
c0015db8:	83 ec 18             	sub    esp,0x18
c0015dbb:	68 c8 af 02 c0       	push   0xc002afc8
c0015dc0:	e8 ca 40 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c0015dc5:	83 c8 ff             	or     eax,0xffffffff
c0015dc8:	83 c4 1c             	add    esp,0x1c
c0015dcb:	c3                   	ret    

c0015dcc <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015dcc:	53                   	push   ebx
c0015dcd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015dd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015dd5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015dd9:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015ddf:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015de5:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015deb:	77 10                	ja     c0015dfd <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015ded:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015df3:	89 d3                	mov    ebx,edx
c0015df5:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015dfb:	72 05                	jb     c0015e02 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015dfd:	83 c8 ff             	or     eax,0xffffffff
c0015e00:	89 c2                	mov    edx,eax
c0015e02:	5b                   	pop    ebx
c0015e03:	c3                   	ret    

c0015e04 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015e04:	56                   	push   esi
c0015e05:	83 c8 ff             	or     eax,0xffffffff
c0015e08:	53                   	push   ebx
c0015e09:	89 c2                	mov    edx,eax
c0015e0b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015e0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015e13:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015e17:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015e1d:	77 27                	ja     c0015e46 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015e1f:	89 d8                	mov    eax,ebx
c0015e21:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015e27:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015e2d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015e32:	89 c2                	mov    edx,eax
c0015e34:	73 10                	jae    c0015e46 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015e36:	89 c8                	mov    eax,ecx
c0015e38:	89 da                	mov    edx,ebx
c0015e3a:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015e40:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015e46:	5b                   	pop    ebx
c0015e47:	5e                   	pop    esi
c0015e48:	c3                   	ret    
c0015e49:	90                   	nop

c0015e4a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015e4a:	83 ec 1c             	sub    esp,0x1c
c0015e4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015e51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015e55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015e5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015e61:	89 04 24             	mov    DWORD PTR [esp],eax
c0015e64:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015e68:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015e6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e70:	83 ec 08             	sub    esp,0x8
c0015e73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015e77:	50                   	push   eax
c0015e78:	e8 e3 de ff ff       	call   c0013d60 <Device::Device(char const*)>
c0015e7d:	83 c4 10             	add    esp,0x10
c0015e80:	ba 14 b0 02 c0       	mov    edx,0xc002b014
c0015e85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e89:	89 10                	mov    DWORD PTR [eax],edx
c0015e8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e8f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015e96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e9a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015ea1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ea5:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015eaf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015eb3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015eb7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015ebb:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015ec1:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015ec7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015ecb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015ece:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015ed2:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015ed8:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015ede:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ee2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015ee6:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015eec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ef0:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015efa:	90                   	nop
c0015efb:	83 c4 1c             	add    esp,0x1c
c0015efe:	c3                   	ret    
c0015eff:	90                   	nop

c0015f00 <LogicalDisk::assignDriveLetter()>:
c0015f00:	55                   	push   ebp
c0015f01:	57                   	push   edi
c0015f02:	56                   	push   esi
c0015f03:	53                   	push   ebx
c0015f04:	83 ec 14             	sub    esp,0x14
c0015f07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015f0b:	8b 3d e0 df 02 c0    	mov    edi,DWORD PTR ds:0xc002dfe0
c0015f11:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015f17:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015f1b:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015f21:	8b 3d e4 df 02 c0    	mov    edi,DWORD PTR ds:0xc002dfe4
c0015f27:	3c 01                	cmp    al,0x1
c0015f29:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015f2d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015f31:	19 c0                	sbb    eax,eax
c0015f33:	83 e0 02             	and    eax,0x2
c0015f36:	83 c0 41             	add    eax,0x41
c0015f39:	0f be e8             	movsx  ebp,al
c0015f3c:	3c 43                	cmp    al,0x43
c0015f3e:	75 10                	jne    c0015f50 <LogicalDisk::assignDriveLetter()+0x50>
c0015f40:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015f47:	75 5d                	jne    c0015fa6 <LogicalDisk::assignDriveLetter()+0xa6>
c0015f49:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015f4e:	75 56                	jne    c0015fa6 <LogicalDisk::assignDriveLetter()+0xa6>
c0015f50:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015f53:	ba 01 00 00 00       	mov    edx,0x1
c0015f58:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015f5c:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015f60:	d3 e2                	shl    edx,cl
c0015f62:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015f66:	89 d7                	mov    edi,edx
c0015f68:	89 d6                	mov    esi,edx
c0015f6a:	c1 ff 1f             	sar    edi,0x1f
c0015f6d:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015f71:	21 f9                	and    ecx,edi
c0015f73:	09 d1                	or     ecx,edx
c0015f75:	75 2f                	jne    c0015fa6 <LogicalDisk::assignDriveLetter()+0xa6>
c0015f77:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015f7b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015f7f:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015f85:	09 f2                	or     edx,esi
c0015f87:	89 15 e0 df 02 c0    	mov    DWORD PTR ds:0xc002dfe0,edx
c0015f8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f91:	09 fa                	or     edx,edi
c0015f93:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015f97:	89 15 e4 df 02 c0    	mov    DWORD PTR ds:0xc002dfe4,edx
c0015f9d:	89 1c bd 00 e0 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2000],ebx
c0015fa4:	eb 08                	jmp    c0015fae <LogicalDisk::assignDriveLetter()+0xae>
c0015fa6:	45                   	inc    ebp
c0015fa7:	40                   	inc    eax
c0015fa8:	3c 5b                	cmp    al,0x5b
c0015faa:	75 90                	jne    c0015f3c <LogicalDisk::assignDriveLetter()+0x3c>
c0015fac:	31 c0                	xor    eax,eax
c0015fae:	83 c4 14             	add    esp,0x14
c0015fb1:	5b                   	pop    ebx
c0015fb2:	5e                   	pop    esi
c0015fb3:	5f                   	pop    edi
c0015fb4:	5d                   	pop    ebp
c0015fb5:	c3                   	ret    

c0015fb6 <LogicalDisk::mount()>:
c0015fb6:	56                   	push   esi
c0015fb7:	53                   	push   ebx
c0015fb8:	53                   	push   ebx
c0015fb9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015fbd:	8b 1d 74 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db74
c0015fc3:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015fcd:	85 db                	test   ebx,ebx
c0015fcf:	74 27                	je     c0015ff8 <LogicalDisk::mount()+0x42>
c0015fd1:	51                   	push   ecx
c0015fd2:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015fd9:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015fdb:	83 e8 41             	sub    eax,0x41
c0015fde:	50                   	push   eax
c0015fdf:	56                   	push   esi
c0015fe0:	53                   	push   ebx
c0015fe1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015fe4:	83 c4 10             	add    esp,0x10
c0015fe7:	84 c0                	test   al,al
c0015fe9:	74 08                	je     c0015ff3 <LogicalDisk::mount()+0x3d>
c0015feb:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015ff1:	eb 07                	jmp    c0015ffa <LogicalDisk::mount()+0x44>
c0015ff3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015ff6:	eb d5                	jmp    c0015fcd <LogicalDisk::mount()+0x17>
c0015ff8:	31 c0                	xor    eax,eax
c0015ffa:	5a                   	pop    edx
c0015ffb:	5b                   	pop    ebx
c0015ffc:	5e                   	pop    esi
c0015ffd:	c3                   	ret    

c0015ffe <LogicalDisk::unmount()>:
c0015ffe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016002:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001600c:	c3                   	ret    
c001600d:	90                   	nop

c001600e <LogicalDisk::eject()>:
c001600e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016012:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016018:	8b 10                	mov    edx,DWORD PTR [eax]
c001601a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001601e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016021:	90                   	nop

c0016022 <LogicalDisk::unassignDriveLetter()>:
c0016022:	57                   	push   edi
c0016023:	56                   	push   esi
c0016024:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016028:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001602f:	84 c9                	test   cl,cl
c0016031:	75 0f                	jne    c0016042 <LogicalDisk::unassignDriveLetter()+0x20>
c0016033:	c7 44 24 0c ec af 02 c0 	mov    DWORD PTR [esp+0xc],0xc002afec
c001603b:	5e                   	pop    esi
c001603c:	5f                   	pop    edi
c001603d:	e9 4d 3e 00 00       	jmp    c0019e8f <Krnl::panic(char const*)>
c0016042:	83 e9 41             	sub    ecx,0x41
c0016045:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001604c:	b8 01 00 00 00       	mov    eax,0x1
c0016051:	c7 04 8d 00 e0 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd2000],0x0
c001605c:	d3 e0                	shl    eax,cl
c001605e:	89 c7                	mov    edi,eax
c0016060:	f7 d0                	not    eax
c0016062:	c1 ff 1f             	sar    edi,0x1f
c0016065:	21 05 e0 df 02 c0    	and    DWORD PTR ds:0xc002dfe0,eax
c001606b:	89 fe                	mov    esi,edi
c001606d:	f7 d6                	not    esi
c001606f:	21 35 e4 df 02 c0    	and    DWORD PTR ds:0xc002dfe4,esi
c0016075:	5e                   	pop    esi
c0016076:	5f                   	pop    edi
c0016077:	c3                   	ret    

c0016078 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016078:	57                   	push   edi
c0016079:	56                   	push   esi
c001607a:	53                   	push   ebx
c001607b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001607f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016083:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016087:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001608b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016091:	77 41                	ja     c00160d4 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016093:	99                   	cdq    
c0016094:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001609a:	01 c8                	add    eax,ecx
c001609c:	11 da                	adc    edx,ebx
c001609e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00160a4:	19 d7                	sbb    edi,edx
c00160a6:	72 33                	jb     c00160db <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00160a8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00160ae:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00160b4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00160b8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00160bc:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00160c2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00160c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00160cc:	5b                   	pop    ebx
c00160cd:	5e                   	pop    esi
c00160ce:	5f                   	pop    edi
c00160cf:	e9 cc 0a 00 00       	jmp    c0016ba0 <VCache::read(unsigned long long, int, void*)>
c00160d4:	b8 05 00 00 00       	mov    eax,0x5
c00160d9:	eb 05                	jmp    c00160e0 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00160db:	b8 07 00 00 00       	mov    eax,0x7
c00160e0:	5b                   	pop    ebx
c00160e1:	5e                   	pop    esi
c00160e2:	5f                   	pop    edi
c00160e3:	c3                   	ret    

c00160e4 <LogicalDisk::write(unsigned long long, int, void*)>:
c00160e4:	57                   	push   edi
c00160e5:	56                   	push   esi
c00160e6:	53                   	push   ebx
c00160e7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00160eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00160ef:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00160f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00160f7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00160fd:	77 41                	ja     c0016140 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00160ff:	99                   	cdq    
c0016100:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016106:	01 c8                	add    eax,ecx
c0016108:	11 da                	adc    edx,ebx
c001610a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016110:	19 d7                	sbb    edi,edx
c0016112:	72 33                	jb     c0016147 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016114:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001611a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016120:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016124:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016128:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001612e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016134:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016138:	5b                   	pop    ebx
c0016139:	5e                   	pop    esi
c001613a:	5f                   	pop    edi
c001613b:	e9 76 09 00 00       	jmp    c0016ab6 <VCache::write(unsigned long long, int, void*)>
c0016140:	b8 05 00 00 00       	mov    eax,0x5
c0016145:	eb 05                	jmp    c001614c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016147:	b8 07 00 00 00       	mov    eax,0x7
c001614c:	5b                   	pop    ebx
c001614d:	5e                   	pop    esi
c001614e:	5f                   	pop    edi
c001614f:	c3                   	ret    

c0016150 <Mouse::Mouse(char const*)>:
c0016150:	83 ec 0c             	sub    esp,0xc
c0016153:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016157:	83 ec 08             	sub    esp,0x8
c001615a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001615e:	50                   	push   eax
c001615f:	e8 fc db ff ff       	call   c0013d60 <Device::Device(char const*)>
c0016164:	83 c4 10             	add    esp,0x10
c0016167:	ba 40 b0 02 c0       	mov    edx,0xc002b040
c001616c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016170:	89 10                	mov    DWORD PTR [eax],edx
c0016172:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016176:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016180:	90                   	nop
c0016181:	83 c4 0c             	add    esp,0xc
c0016184:	c3                   	ret    
c0016185:	90                   	nop

c0016186 <Mouse::~Mouse()>:
c0016186:	83 ec 0c             	sub    esp,0xc
c0016189:	ba 40 b0 02 c0       	mov    edx,0xc002b040
c001618e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016192:	89 10                	mov    DWORD PTR [eax],edx
c0016194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016198:	83 ec 0c             	sub    esp,0xc
c001619b:	50                   	push   eax
c001619c:	e8 89 d8 ff ff       	call   c0013a2a <Device::~Device()>
c00161a1:	83 c4 10             	add    esp,0x10
c00161a4:	90                   	nop
c00161a5:	83 c4 0c             	add    esp,0xc
c00161a8:	c3                   	ret    
c00161a9:	90                   	nop

c00161aa <Mouse::~Mouse()>:
c00161aa:	83 ec 0c             	sub    esp,0xc
c00161ad:	83 ec 0c             	sub    esp,0xc
c00161b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161b4:	e8 cd ff ff ff       	call   c0016186 <Mouse::~Mouse()>
c00161b9:	83 c4 10             	add    esp,0x10
c00161bc:	83 ec 08             	sub    esp,0x8
c00161bf:	68 58 01 00 00       	push   0x158
c00161c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161c8:	e8 7e c4 ff ff       	call   c001264b <operator delete(void*, unsigned long)>
c00161cd:	83 c4 10             	add    esp,0x10
c00161d0:	83 c4 0c             	add    esp,0xc
c00161d3:	c3                   	ret    

c00161d4 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00161d4:	55                   	push   ebp
c00161d5:	57                   	push   edi
c00161d6:	56                   	push   esi
c00161d7:	53                   	push   ebx
c00161d8:	81 ec 28 01 00 00    	sub    esp,0x128
c00161de:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00161e5:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00161ec:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00161f3:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00161fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00161fe:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016202:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016209:	e8 4e dc ff ff       	call   c0013e5c <Device::getName()>
c001620e:	5a                   	pop    edx
c001620f:	59                   	pop    ecx
c0016210:	50                   	push   eax
c0016211:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0016215:	55                   	push   ebp
c0016216:	e8 f1 a5 fe ff       	call   c000080c <strcpy>
c001621b:	5b                   	pop    ebx
c001621c:	58                   	pop    eax
c001621d:	68 64 b0 02 c0       	push   0xc002b064
c0016222:	55                   	push   ebp
c0016223:	e8 24 a7 fe ff       	call   c000094c <strcat>
c0016228:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001622f:	e8 65 93 ff ff       	call   c000f599 <malloc>
c0016234:	83 c4 0c             	add    esp,0xc
c0016237:	89 c3                	mov    ebx,eax
c0016239:	57                   	push   edi
c001623a:	56                   	push   esi
c001623b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001623f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016243:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001624a:	55                   	push   ebp
c001624b:	50                   	push   eax
c001624c:	e8 f9 fb ff ff       	call   c0015e4a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016251:	83 c4 14             	add    esp,0x14
c0016254:	53                   	push   ebx
c0016255:	e8 a6 fc ff ff       	call   c0015f00 <LogicalDisk::assignDriveLetter()>
c001625a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001625d:	e8 54 fd ff ff       	call   c0015fb6 <LogicalDisk::mount()>
c0016262:	58                   	pop    eax
c0016263:	5a                   	pop    edx
c0016264:	53                   	push   ebx
c0016265:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001626c:	e8 eb d8 ff ff       	call   c0013b5c <Device::addChild(Device*)>
c0016271:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016277:	5b                   	pop    ebx
c0016278:	5e                   	pop    esi
c0016279:	5f                   	pop    edi
c001627a:	5d                   	pop    ebp
c001627b:	c3                   	ret    

c001627c <createPartitionsForDisk(PhysicalDisk*)>:
c001627c:	55                   	push   ebp
c001627d:	57                   	push   edi
c001627e:	56                   	push   esi
c001627f:	53                   	push   ebx
c0016280:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016286:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001628d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016293:	3d 00 02 00 00       	cmp    eax,0x200
c0016298:	74 27                	je     c00162c1 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001629a:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00162a0:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00162a6:	83 ec 10             	sub    esp,0x10
c00162a9:	0f a4 f7 0a          	shld   edi,esi,0xa
c00162ad:	99                   	cdq    
c00162ae:	c1 e6 0a             	shl    esi,0xa
c00162b1:	52                   	push   edx
c00162b2:	89 fd                	mov    ebp,edi
c00162b4:	50                   	push   eax
c00162b5:	55                   	push   ebp
c00162b6:	56                   	push   esi
c00162b7:	e8 a8 04 01 00       	call   c0026764 <__udivdi3>
c00162bc:	e9 b1 00 00 00       	jmp    c0016372 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00162c1:	83 ec 0c             	sub    esp,0xc
c00162c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00162c6:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00162ca:	56                   	push   esi
c00162cb:	6a 01                	push   0x1
c00162cd:	6a 00                	push   0x0
c00162cf:	6a 00                	push   0x0
c00162d1:	53                   	push   ebx
c00162d2:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00162d5:	83 c4 20             	add    esp,0x20
c00162d8:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00162e0:	75 0a                	jne    c00162ec <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00162e2:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00162ea:	74 2c                	je     c0016318 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00162ec:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00162f2:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00162f8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00162fe:	83 ec 10             	sub    esp,0x10
c0016301:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016305:	89 f7                	mov    edi,esi
c0016307:	c1 e0 0a             	shl    eax,0xa
c001630a:	c1 ff 1f             	sar    edi,0x1f
c001630d:	57                   	push   edi
c001630e:	56                   	push   esi
c001630f:	52                   	push   edx
c0016310:	50                   	push   eax
c0016311:	e8 4e 04 01 00       	call   c0026764 <__udivdi3>
c0016316:	eb 5a                	jmp    c0016372 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016318:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001631f:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016326:	83 e1 7f             	and    ecx,0x7f
c0016329:	83 e0 7f             	and    eax,0x7f
c001632c:	01 c1                	add    ecx,eax
c001632e:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016335:	83 e0 7f             	and    eax,0x7f
c0016338:	01 c1                	add    ecx,eax
c001633a:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016341:	83 e0 7f             	and    eax,0x7f
c0016344:	00 c1                	add    cl,al
c0016346:	74 41                	je     c0016389 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016348:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001634e:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016354:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001635a:	83 ec 10             	sub    esp,0x10
c001635d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016361:	89 f7                	mov    edi,esi
c0016363:	c1 e0 0a             	shl    eax,0xa
c0016366:	c1 ff 1f             	sar    edi,0x1f
c0016369:	57                   	push   edi
c001636a:	56                   	push   esi
c001636b:	52                   	push   edx
c001636c:	50                   	push   eax
c001636d:	e8 f2 03 01 00       	call   c0026764 <__udivdi3>
c0016372:	83 c4 14             	add    esp,0x14
c0016375:	52                   	push   edx
c0016376:	50                   	push   eax
c0016377:	6a 00                	push   0x0
c0016379:	6a 00                	push   0x0
c001637b:	53                   	push   ebx
c001637c:	e8 53 fe ff ff       	call   c00161d4 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016381:	83 c4 20             	add    esp,0x20
c0016384:	e9 79 01 00 00       	jmp    c0016502 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016389:	89 f0                	mov    eax,esi
c001638b:	31 f6                	xor    esi,esi
c001638d:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016394:	75 02                	jne    c0016398 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016396:	89 f1                	mov    ecx,esi
c0016398:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001639f:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00163a6:	c1 e2 08             	shl    edx,0x8
c00163a9:	c1 e7 10             	shl    edi,0x10
c00163ac:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00163b4:	09 fa                	or     edx,edi
c00163b6:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00163be:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00163c5:	83 c0 10             	add    eax,0x10
c00163c8:	09 fa                	or     edx,edi
c00163ca:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00163d1:	c1 e7 18             	shl    edi,0x18
c00163d4:	09 fa                	or     edx,edi
c00163d6:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00163dd:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00163e1:	c1 e7 10             	shl    edi,0x10
c00163e4:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00163eb:	c1 e2 08             	shl    edx,0x8
c00163ee:	09 fa                	or     edx,edi
c00163f0:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00163f7:	09 fa                	or     edx,edi
c00163f9:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016400:	c1 e7 18             	shl    edi,0x18
c0016403:	09 fa                	or     edx,edi
c0016405:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016409:	46                   	inc    esi
c001640a:	83 fe 04             	cmp    esi,0x4
c001640d:	0f 85 7a ff ff ff    	jne    c001638d <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016413:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016417:	83 f0 01             	xor    eax,0x1
c001641a:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001641e:	75 57                	jne    c0016477 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016420:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016424:	83 f0 01             	xor    eax,0x1
c0016427:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001642b:	75 4a                	jne    c0016477 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001642d:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016431:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016439:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016441:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016447:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001644d:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016453:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016457:	89 f7                	mov    edi,esi
c0016459:	c1 e0 0a             	shl    eax,0xa
c001645c:	c1 ff 1f             	sar    edi,0x1f
c001645f:	57                   	push   edi
c0016460:	56                   	push   esi
c0016461:	52                   	push   edx
c0016462:	50                   	push   eax
c0016463:	e8 fc 02 01 00       	call   c0026764 <__udivdi3>
c0016468:	83 c4 10             	add    esp,0x10
c001646b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001646f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016473:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016477:	84 c9                	test   cl,cl
c0016479:	74 53                	je     c00164ce <createPartitionsForDisk(PhysicalDisk*)+0x252>
c001647b:	0f b6 c9             	movzx  ecx,cl
c001647e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016482:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016486:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001648a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001648e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016492:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016496:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c001649a:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001649e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00164a2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00164a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00164aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00164ae:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00164b2:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00164b6:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00164ba:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00164be:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00164c2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00164c6:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00164ca:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00164ce:	31 ed                	xor    ebp,ebp
c00164d0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00164d4:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00164d8:	89 f8                	mov    eax,edi
c00164da:	09 f0                	or     eax,esi
c00164dc:	74 1e                	je     c00164fc <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00164de:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00164e2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00164e6:	89 d1                	mov    ecx,edx
c00164e8:	09 c1                	or     ecx,eax
c00164ea:	74 10                	je     c00164fc <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00164ec:	83 ec 0c             	sub    esp,0xc
c00164ef:	57                   	push   edi
c00164f0:	56                   	push   esi
c00164f1:	52                   	push   edx
c00164f2:	50                   	push   eax
c00164f3:	53                   	push   ebx
c00164f4:	e8 db fc ff ff       	call   c00161d4 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00164f9:	83 c4 20             	add    esp,0x20
c00164fc:	45                   	inc    ebp
c00164fd:	83 fd 04             	cmp    ebp,0x4
c0016500:	75 ce                	jne    c00164d0 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016502:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016508:	5b                   	pop    ebx
c0016509:	5e                   	pop    esi
c001650a:	5f                   	pop    edi
c001650b:	5d                   	pop    ebp
c001650c:	c3                   	ret    
c001650d:	90                   	nop

c001650e <Serial::Serial(char const*)>:
c001650e:	83 ec 0c             	sub    esp,0xc
c0016511:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016515:	83 ec 08             	sub    esp,0x8
c0016518:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001651c:	50                   	push   eax
c001651d:	e8 3e d8 ff ff       	call   c0013d60 <Device::Device(char const*)>
c0016522:	83 c4 10             	add    esp,0x10
c0016525:	ba 78 b0 02 c0       	mov    edx,0xc002b078
c001652a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001652e:	89 10                	mov    DWORD PTR [eax],edx
c0016530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016534:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c001653e:	90                   	nop
c001653f:	83 c4 0c             	add    esp,0xc
c0016542:	c3                   	ret    
c0016543:	90                   	nop

c0016544 <Serial::~Serial()>:
c0016544:	83 ec 0c             	sub    esp,0xc
c0016547:	ba 78 b0 02 c0       	mov    edx,0xc002b078
c001654c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016550:	89 10                	mov    DWORD PTR [eax],edx
c0016552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016556:	83 ec 0c             	sub    esp,0xc
c0016559:	50                   	push   eax
c001655a:	e8 cb d4 ff ff       	call   c0013a2a <Device::~Device()>
c001655f:	83 c4 10             	add    esp,0x10
c0016562:	90                   	nop
c0016563:	83 c4 0c             	add    esp,0xc
c0016566:	c3                   	ret    
c0016567:	90                   	nop

c0016568 <Serial::~Serial()>:
c0016568:	83 ec 0c             	sub    esp,0xc
c001656b:	83 ec 0c             	sub    esp,0xc
c001656e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016572:	e8 cd ff ff ff       	call   c0016544 <Serial::~Serial()>
c0016577:	83 c4 10             	add    esp,0x10
c001657a:	83 ec 08             	sub    esp,0x8
c001657d:	68 58 01 00 00       	push   0x158
c0016582:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016586:	e8 c0 c0 ff ff       	call   c001264b <operator delete(void*, unsigned long)>
c001658b:	83 c4 10             	add    esp,0x10
c001658e:	83 c4 0c             	add    esp,0xc
c0016591:	c3                   	ret    

c0016592 <Timer::Timer(char const*)>:
c0016592:	83 ec 0c             	sub    esp,0xc
c0016595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016599:	83 ec 08             	sub    esp,0x8
c001659c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165a0:	50                   	push   eax
c00165a1:	e8 ba d7 ff ff       	call   c0013d60 <Device::Device(char const*)>
c00165a6:	83 c4 10             	add    esp,0x10
c00165a9:	ba bc b0 02 c0       	mov    edx,0xc002b0bc
c00165ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165b2:	89 10                	mov    DWORD PTR [eax],edx
c00165b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165b8:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00165c2:	90                   	nop
c00165c3:	83 c4 0c             	add    esp,0xc
c00165c6:	c3                   	ret    
c00165c7:	90                   	nop

c00165c8 <Timer::~Timer()>:
c00165c8:	83 ec 0c             	sub    esp,0xc
c00165cb:	ba bc b0 02 c0       	mov    edx,0xc002b0bc
c00165d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165d4:	89 10                	mov    DWORD PTR [eax],edx
c00165d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165da:	83 ec 0c             	sub    esp,0xc
c00165dd:	50                   	push   eax
c00165de:	e8 47 d4 ff ff       	call   c0013a2a <Device::~Device()>
c00165e3:	83 c4 10             	add    esp,0x10
c00165e6:	90                   	nop
c00165e7:	83 c4 0c             	add    esp,0xc
c00165ea:	c3                   	ret    
c00165eb:	90                   	nop

c00165ec <Timer::~Timer()>:
c00165ec:	83 ec 0c             	sub    esp,0xc
c00165ef:	83 ec 0c             	sub    esp,0xc
c00165f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165f6:	e8 cd ff ff ff       	call   c00165c8 <Timer::~Timer()>
c00165fb:	83 c4 10             	add    esp,0x10
c00165fe:	83 ec 08             	sub    esp,0x8
c0016601:	68 5c 01 00 00       	push   0x15c
c0016606:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001660a:	e8 3c c0 ff ff       	call   c001264b <operator delete(void*, unsigned long)>
c001660f:	83 c4 10             	add    esp,0x10
c0016612:	83 c4 0c             	add    esp,0xc
c0016615:	c3                   	ret    

c0016616 <Timer::read()>:
c0016616:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001661a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016620:	c3                   	ret    

c0016621 <timerHandler(unsigned long long)>:
c0016621:	55                   	push   ebp
c0016622:	57                   	push   edi
c0016623:	56                   	push   esi
c0016624:	53                   	push   ebx
c0016625:	83 ec 0c             	sub    esp,0xc
c0016628:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001662c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016630:	01 35 70 e0 02 c0    	add    DWORD PTR ds:0xc002e070,esi
c0016636:	11 3d 74 e0 02 c0    	adc    DWORD PTR ds:0xc002e074,edi
c001663c:	80 3d 0d da 02 c0 00 	cmp    BYTE PTR ds:0xc002da0d,0x0
c0016643:	0f 84 42 01 00 00    	je     c001678b <timerHandler(unsigned long long)+0x16a>
c0016649:	fa                   	cli    
c001664a:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c0016650:	83 ec 0c             	sub    esp,0xc
c0016653:	ff 05 24 0f 03 c0    	inc    DWORD PTR ds:0xc0030f24
c0016659:	68 38 0f 03 c0       	push   0xc0030f38
c001665e:	e8 5b 21 01 00       	call   c00287be <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016663:	83 c4 10             	add    esp,0x10
c0016666:	84 c0                	test   al,al
c0016668:	0f 85 a2 00 00 00    	jne    c0016710 <timerHandler(unsigned long long)+0xef>
c001666e:	83 ec 0c             	sub    esp,0xc
c0016671:	68 38 0f 03 c0       	push   0xc0030f38
c0016676:	e8 5f 21 01 00       	call   c00287da <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001667b:	83 c4 10             	add    esp,0x10
c001667e:	89 c3                	mov    ebx,eax
c0016680:	83 ec 0c             	sub    esp,0xc
c0016683:	68 38 0f 03 c0       	push   0xc0030f38
c0016688:	e8 4d 21 01 00       	call   c00287da <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001668d:	c7 04 24 38 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f38
c0016694:	89 c5                	mov    ebp,eax
c0016696:	e8 47 21 01 00       	call   c00287e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001669b:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c001669e:	83 c4 10             	add    esp,0x10
c00166a1:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c00166a4:	39 15 70 e0 02 c0    	cmp    DWORD PTR ds:0xc002e070,edx
c00166aa:	a1 74 e0 02 c0       	mov    eax,ds:0xc002e074
c00166af:	19 c8                	sbb    eax,ecx
c00166b1:	72 21                	jb     c00166d4 <timerHandler(unsigned long long)+0xb3>
c00166b3:	83 ec 0c             	sub    esp,0xc
c00166b6:	55                   	push   ebp
c00166b7:	e8 e6 77 00 00       	call   c001dea2 <unblockTask(ThreadControlBlock*)>
c00166bc:	83 c4 10             	add    esp,0x10
c00166bf:	39 eb                	cmp    ebx,ebp
c00166c1:	75 21                	jne    c00166e4 <timerHandler(unsigned long long)+0xc3>
c00166c3:	83 ec 0c             	sub    esp,0xc
c00166c6:	68 38 0f 03 c0       	push   0xc0030f38
c00166cb:	e8 0a 21 01 00       	call   c00287da <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00166d0:	89 c3                	mov    ebx,eax
c00166d2:	eb 0d                	jmp    c00166e1 <timerHandler(unsigned long long)+0xc0>
c00166d4:	50                   	push   eax
c00166d5:	50                   	push   eax
c00166d6:	55                   	push   ebp
c00166d7:	68 38 0f 03 c0       	push   0xc0030f38
c00166dc:	e8 af 21 01 00       	call   c0028890 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00166e1:	83 c4 10             	add    esp,0x10
c00166e4:	83 ec 0c             	sub    esp,0xc
c00166e7:	68 38 0f 03 c0       	push   0xc0030f38
c00166ec:	e8 cd 20 01 00       	call   c00287be <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00166f1:	83 c4 10             	add    esp,0x10
c00166f4:	84 c0                	test   al,al
c00166f6:	75 18                	jne    c0016710 <timerHandler(unsigned long long)+0xef>
c00166f8:	83 ec 0c             	sub    esp,0xc
c00166fb:	68 38 0f 03 c0       	push   0xc0030f38
c0016700:	e8 d5 20 01 00       	call   c00287da <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016705:	83 c4 10             	add    esp,0x10
c0016708:	39 d8                	cmp    eax,ebx
c001670a:	0f 85 70 ff ff ff    	jne    c0016680 <timerHandler(unsigned long long)+0x5f>
c0016710:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016715:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c0016719:	74 3d                	je     c0016758 <timerHandler(unsigned long long)+0x137>
c001671b:	80 3d 0c da 02 c0 00 	cmp    BYTE PTR ds:0xc002da0c,0x0
c0016722:	74 34                	je     c0016758 <timerHandler(unsigned long long)+0x137>
c0016724:	fa                   	cli    
c0016725:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001672b:	31 d2                	xor    edx,edx
c001672d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016732:	89 f9                	mov    ecx,edi
c0016734:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016737:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001673c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001673f:	39 c6                	cmp    esi,eax
c0016741:	19 d1                	sbb    ecx,edx
c0016743:	72 05                	jb     c001674a <timerHandler(unsigned long long)+0x129>
c0016745:	e8 d5 72 00 00       	call   c001da1f <schedule()>
c001674a:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001674f:	48                   	dec    eax
c0016750:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c0016755:	75 01                	jne    c0016758 <timerHandler(unsigned long long)+0x137>
c0016757:	fb                   	sti    
c0016758:	a1 24 0f 03 c0       	mov    eax,ds:0xc0030f24
c001675d:	48                   	dec    eax
c001675e:	a3 24 0f 03 c0       	mov    ds:0xc0030f24,eax
c0016763:	75 18                	jne    c001677d <timerHandler(unsigned long long)+0x15c>
c0016765:	83 3d 20 0f 03 c0 00 	cmp    DWORD PTR ds:0xc0030f20,0x0
c001676c:	74 0f                	je     c001677d <timerHandler(unsigned long long)+0x15c>
c001676e:	c7 05 20 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f20,0x0
c0016778:	e8 a2 72 00 00       	call   c001da1f <schedule()>
c001677d:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c0016782:	48                   	dec    eax
c0016783:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c0016788:	75 01                	jne    c001678b <timerHandler(unsigned long long)+0x16a>
c001678a:	fb                   	sti    
c001678b:	83 c4 0c             	add    esp,0xc
c001678e:	5b                   	pop    ebx
c001678f:	5e                   	pop    esi
c0016790:	5f                   	pop    edi
c0016791:	5d                   	pop    ebp
c0016792:	c3                   	ret    

c0016793 <setupTimer(int)>:
c0016793:	57                   	push   edi
c0016794:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0016799:	56                   	push   esi
c001679a:	53                   	push   ebx
c001679b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001679f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00167a5:	83 ec 0c             	sub    esp,0xc
c00167a8:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00167ae:	e8 a9 d6 ff ff       	call   c0013e5c <Device::getName()>
c00167b3:	83 c4 10             	add    esp,0x10
c00167b6:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00167b9:	0f 85 8d 00 00 00    	jne    c001684c <setupTimer(int)+0xb9>
c00167bf:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c00167c4:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00167cb:	74 7f                	je     c001684c <setupTimer(int)+0xb9>
c00167cd:	83 ec 0c             	sub    esp,0xc
c00167d0:	68 5c 01 00 00       	push   0x15c
c00167d5:	e8 bf 8d ff ff       	call   c000f599 <malloc>
c00167da:	89 04 24             	mov    DWORD PTR [esp],eax
c00167dd:	89 c3                	mov    ebx,eax
c00167df:	e8 5a fb 00 00       	call   c002633e <PIT::PIT()>
c00167e4:	59                   	pop    ecx
c00167e5:	5f                   	pop    edi
c00167e6:	53                   	push   ebx
c00167e7:	ff 35 08 da 02 c0    	push   DWORD PTR ds:0xc002da08
c00167ed:	e8 6a d3 ff ff       	call   c0013b5c <Device::addChild(Device*)>
c00167f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00167f4:	6a 00                	push   0x0
c00167f6:	6a 00                	push   0x0
c00167f8:	56                   	push   esi
c00167f9:	53                   	push   ebx
c00167fa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00167fd:	83 c4 14             	add    esp,0x14
c0016800:	68 60 01 00 00       	push   0x160
c0016805:	e8 8f 8d ff ff       	call   c000f599 <malloc>
c001680a:	89 04 24             	mov    DWORD PTR [esp],eax
c001680d:	89 c7                	mov    edi,eax
c001680f:	e8 da f9 00 00       	call   c00261ee <APICTimer::APICTimer()>
c0016814:	6a 00                	push   0x0
c0016816:	6a 00                	push   0x0
c0016818:	56                   	push   esi
c0016819:	57                   	push   edi
c001681a:	e8 d1 f8 00 00       	call   c00260f0 <APICTimer::open(int, int, void*)>
c001681f:	83 c4 20             	add    esp,0x20
c0016822:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016824:	6a 00                	push   0x0
c0016826:	6a 00                	push   0x0
c0016828:	6a 00                	push   0x0
c001682a:	53                   	push   ebx
c001682b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001682e:	58                   	pop    eax
c001682f:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0016834:	5a                   	pop    edx
c0016835:	57                   	push   edi
c0016836:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001683c:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016842:	e8 15 d3 ff ff       	call   c0013b5c <Device::addChild(Device*)>
c0016847:	83 c4 10             	add    esp,0x10
c001684a:	eb 33                	jmp    c001687f <setupTimer(int)+0xec>
c001684c:	83 ec 0c             	sub    esp,0xc
c001684f:	68 5c 01 00 00       	push   0x15c
c0016854:	e8 40 8d ff ff       	call   c000f599 <malloc>
c0016859:	89 04 24             	mov    DWORD PTR [esp],eax
c001685c:	89 c3                	mov    ebx,eax
c001685e:	e8 db fa 00 00       	call   c002633e <PIT::PIT()>
c0016863:	58                   	pop    eax
c0016864:	5a                   	pop    edx
c0016865:	53                   	push   ebx
c0016866:	ff 35 08 da 02 c0    	push   DWORD PTR ds:0xc002da08
c001686c:	e8 eb d2 ff ff       	call   c0013b5c <Device::addChild(Device*)>
c0016871:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016873:	6a 00                	push   0x0
c0016875:	6a 00                	push   0x0
c0016877:	56                   	push   esi
c0016878:	53                   	push   ebx
c0016879:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001687c:	83 c4 20             	add    esp,0x20
c001687f:	89 d8                	mov    eax,ebx
c0016881:	5b                   	pop    ebx
c0016882:	5e                   	pop    esi
c0016883:	5f                   	pop    edi
c0016884:	c3                   	ret    
c0016885:	90                   	nop

c0016886 <VCache::VCache(PhysicalDisk*)>:
c0016886:	53                   	push   ebx
c0016887:	83 ec 18             	sub    esp,0x18
c001688a:	ba ec b0 02 c0       	mov    edx,0xc002b0ec
c001688f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016893:	89 10                	mov    DWORD PTR [eax],edx
c0016895:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016899:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00168a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168a4:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00168ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168af:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00168b6:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00168bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168c1:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00168c8:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00168cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168d3:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00168da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168de:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00168e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168e6:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c00168ed:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c00168f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168f8:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00168fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016900:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016904:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016908:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001690c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016910:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016917:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001691f:	83 ec 0c             	sub    esp,0xc
c0016922:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016926:	e8 6e 8c ff ff       	call   c000f599 <malloc>
c001692b:	83 c4 10             	add    esp,0x10
c001692e:	89 c3                	mov    ebx,eax
c0016930:	83 ec 0c             	sub    esp,0xc
c0016933:	53                   	push   ebx
c0016934:	e8 af 6e 00 00       	call   c001d7e8 <Mutex::Mutex()>
c0016939:	83 c4 10             	add    esp,0x10
c001693c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016940:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016943:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016947:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001694b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001694e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016952:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016959:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001695d:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016963:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016967:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001696a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001696e:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016974:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001697a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001697e:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016981:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016984:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016988:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001698c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016990:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016996:	05 00 01 00 00       	add    eax,0x100
c001699b:	c1 e0 04             	shl    eax,0x4
c001699e:	83 ec 0c             	sub    esp,0xc
c00169a1:	50                   	push   eax
c00169a2:	e8 f2 8b ff ff       	call   c000f599 <malloc>
c00169a7:	83 c4 10             	add    esp,0x10
c00169aa:	89 c2                	mov    edx,eax
c00169ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169b0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00169b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169b7:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00169be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169c2:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00169c6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00169ca:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00169d0:	c1 e0 07             	shl    eax,0x7
c00169d3:	83 ec 0c             	sub    esp,0xc
c00169d6:	50                   	push   eax
c00169d7:	e8 bd 8b ff ff       	call   c000f599 <malloc>
c00169dc:	83 c4 10             	add    esp,0x10
c00169df:	89 c2                	mov    edx,eax
c00169e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169e5:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00169e8:	90                   	nop
c00169e9:	83 c4 18             	add    esp,0x18
c00169ec:	5b                   	pop    ebx
c00169ed:	c3                   	ret    

c00169ee <VCache::invalidateReadBuffer()>:
c00169ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00169f2:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c00169f8:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00169fc:	c3                   	ret    
c00169fd:	90                   	nop

c00169fe <VCache::writeWriteBuffer()>:
c00169fe:	53                   	push   ebx
c00169ff:	83 ec 14             	sub    esp,0x14
c0016a02:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016a06:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a09:	8b 10                	mov    edx,DWORD PTR [eax]
c0016a0b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016a0e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016a11:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016a14:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016a17:	50                   	push   eax
c0016a18:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016a1b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016a22:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016a29:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016a2d:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016a34:	83 c4 28             	add    esp,0x28
c0016a37:	5b                   	pop    ebx
c0016a38:	c3                   	ret    
c0016a39:	90                   	nop

c0016a3a <VCache::~VCache()>:
c0016a3a:	83 ec 0c             	sub    esp,0xc
c0016a3d:	ba ec b0 02 c0       	mov    edx,0xc002b0ec
c0016a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a46:	89 10                	mov    DWORD PTR [eax],edx
c0016a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a4c:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016a4f:	84 c0                	test   al,al
c0016a51:	74 0f                	je     c0016a62 <VCache::~VCache()+0x28>
c0016a53:	83 ec 0c             	sub    esp,0xc
c0016a56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a5a:	e8 9f ff ff ff       	call   c00169fe <VCache::writeWriteBuffer()>
c0016a5f:	83 c4 10             	add    esp,0x10
c0016a62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a66:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016a69:	83 ec 0c             	sub    esp,0xc
c0016a6c:	50                   	push   eax
c0016a6d:	e8 37 8b ff ff       	call   c000f5a9 <free>
c0016a72:	83 c4 10             	add    esp,0x10
c0016a75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a79:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016a7c:	83 ec 0c             	sub    esp,0xc
c0016a7f:	50                   	push   eax
c0016a80:	e8 24 8b ff ff       	call   c000f5a9 <free>
c0016a85:	83 c4 10             	add    esp,0x10
c0016a88:	90                   	nop
c0016a89:	83 c4 0c             	add    esp,0xc
c0016a8c:	c3                   	ret    
c0016a8d:	90                   	nop

c0016a8e <VCache::~VCache()>:
c0016a8e:	83 ec 0c             	sub    esp,0xc
c0016a91:	83 ec 0c             	sub    esp,0xc
c0016a94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a98:	e8 9d ff ff ff       	call   c0016a3a <VCache::~VCache()>
c0016a9d:	83 c4 10             	add    esp,0x10
c0016aa0:	83 ec 08             	sub    esp,0x8
c0016aa3:	6a 44                	push   0x44
c0016aa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016aa9:	e8 9d bb ff ff       	call   c001264b <operator delete(void*, unsigned long)>
c0016aae:	83 c4 10             	add    esp,0x10
c0016ab1:	83 c4 0c             	add    esp,0xc
c0016ab4:	c3                   	ret    
c0016ab5:	90                   	nop

c0016ab6 <VCache::write(unsigned long long, int, void*)>:
c0016ab6:	55                   	push   ebp
c0016ab7:	57                   	push   edi
c0016ab8:	56                   	push   esi
c0016ab9:	53                   	push   ebx
c0016aba:	83 ec 18             	sub    esp,0x18
c0016abd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016ac1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016ac5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016ac9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016acc:	e8 5d 72 00 00       	call   c001dd2e <Semaphore::acquire()>
c0016ad1:	83 c4 10             	add    esp,0x10
c0016ad4:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016ad8:	74 0c                	je     c0016ae6 <VCache::write(unsigned long long, int, void*)+0x30>
c0016ada:	83 ec 0c             	sub    esp,0xc
c0016add:	53                   	push   ebx
c0016ade:	e8 0b ff ff ff       	call   c00169ee <VCache::invalidateReadBuffer()>
c0016ae3:	83 c4 10             	add    esp,0x10
c0016ae6:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016aea:	74 5c                	je     c0016b48 <VCache::write(unsigned long long, int, void*)+0x92>
c0016aec:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0016aef:	89 e8                	mov    eax,ebp
c0016af1:	99                   	cdq    
c0016af2:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016af5:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016af8:	89 c1                	mov    ecx,eax
c0016afa:	89 d0                	mov    eax,edx
c0016afc:	31 f1                	xor    ecx,esi
c0016afe:	31 f8                	xor    eax,edi
c0016b00:	09 c1                	or     ecx,eax
c0016b02:	75 38                	jne    c0016b3c <VCache::write(unsigned long long, int, void*)+0x86>
c0016b04:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0016b09:	75 31                	jne    c0016b3c <VCache::write(unsigned long long, int, void*)+0x86>
c0016b0b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b0e:	89 ef                	mov    edi,ebp
c0016b10:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016b16:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b1a:	0f af f9             	imul   edi,ecx
c0016b1d:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016b20:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016b22:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016b25:	40                   	inc    eax
c0016b26:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016b29:	83 c0 80             	add    eax,0xffffff80
c0016b2c:	75 5c                	jne    c0016b8a <VCache::write(unsigned long long, int, void*)+0xd4>
c0016b2e:	83 ec 0c             	sub    esp,0xc
c0016b31:	53                   	push   ebx
c0016b32:	e8 c7 fe ff ff       	call   c00169fe <VCache::writeWriteBuffer()>
c0016b37:	83 c4 10             	add    esp,0x10
c0016b3a:	eb 4e                	jmp    c0016b8a <VCache::write(unsigned long long, int, void*)+0xd4>
c0016b3c:	83 ec 0c             	sub    esp,0xc
c0016b3f:	53                   	push   ebx
c0016b40:	e8 b9 fe ff ff       	call   c00169fe <VCache::writeWriteBuffer()>
c0016b45:	83 c4 10             	add    esp,0x10
c0016b48:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b4b:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c0016b50:	7f 22                	jg     c0016b74 <VCache::write(unsigned long long, int, void*)+0xbe>
c0016b52:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016b55:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016b58:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016b5c:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016b60:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0016b63:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016b66:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016b6c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b70:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016b72:	eb 16                	jmp    c0016b8a <VCache::write(unsigned long long, int, void*)+0xd4>
c0016b74:	83 ec 0c             	sub    esp,0xc
c0016b77:	8b 10                	mov    edx,DWORD PTR [eax]
c0016b79:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016b7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016b81:	57                   	push   edi
c0016b82:	56                   	push   esi
c0016b83:	50                   	push   eax
c0016b84:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016b87:	83 c4 20             	add    esp,0x20
c0016b8a:	83 ec 0c             	sub    esp,0xc
c0016b8d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016b90:	e8 f5 77 00 00       	call   c001e38a <Semaphore::release()>
c0016b95:	83 c4 1c             	add    esp,0x1c
c0016b98:	31 c0                	xor    eax,eax
c0016b9a:	5b                   	pop    ebx
c0016b9b:	5e                   	pop    esi
c0016b9c:	5f                   	pop    edi
c0016b9d:	5d                   	pop    ebp
c0016b9e:	c3                   	ret    
c0016b9f:	90                   	nop

c0016ba0 <VCache::read(unsigned long long, int, void*)>:
c0016ba0:	55                   	push   ebp
c0016ba1:	57                   	push   edi
c0016ba2:	56                   	push   esi
c0016ba3:	53                   	push   ebx
c0016ba4:	83 ec 28             	sub    esp,0x28
c0016ba7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016bab:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016baf:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016bb3:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016bb7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016bba:	e8 6f 71 00 00       	call   c001dd2e <Semaphore::acquire()>
c0016bbf:	83 c4 10             	add    esp,0x10
c0016bc2:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016bc6:	74 0c                	je     c0016bd4 <VCache::read(unsigned long long, int, void*)+0x34>
c0016bc8:	83 ec 0c             	sub    esp,0xc
c0016bcb:	53                   	push   ebx
c0016bcc:	e8 2d fe ff ff       	call   c00169fe <VCache::writeWriteBuffer()>
c0016bd1:	83 c4 10             	add    esp,0x10
c0016bd4:	83 fd 01             	cmp    ebp,0x1
c0016bd7:	0f 85 80 00 00 00    	jne    c0016c5d <VCache::read(unsigned long long, int, void*)+0xbd>
c0016bdd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016be0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016be4:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016beb:	75 70                	jne    c0016c5d <VCache::read(unsigned long long, int, void*)+0xbd>
c0016bed:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0016bf0:	89 e9                	mov    ecx,ebp
c0016bf2:	f7 d9                	neg    ecx
c0016bf4:	89 c8                	mov    eax,ecx
c0016bf6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016bfa:	c1 f8 1f             	sar    eax,0x1f
c0016bfd:	21 f1                	and    ecx,esi
c0016bff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c03:	89 c8                	mov    eax,ecx
c0016c05:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016c09:	21 f9                	and    ecx,edi
c0016c0b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016c0f:	89 ca                	mov    edx,ecx
c0016c11:	74 0a                	je     c0016c1d <VCache::read(unsigned long long, int, void*)+0x7d>
c0016c13:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016c16:	75 05                	jne    c0016c1d <VCache::read(unsigned long long, int, void*)+0x7d>
c0016c18:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0016c1b:	74 23                	je     c0016c40 <VCache::read(unsigned long long, int, void*)+0xa0>
c0016c1d:	83 ec 0c             	sub    esp,0xc
c0016c20:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016c24:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016c28:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0016c2b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0016c2e:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016c30:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016c33:	55                   	push   ebp
c0016c34:	52                   	push   edx
c0016c35:	50                   	push   eax
c0016c36:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016c3a:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016c3d:	83 c4 20             	add    esp,0x20
c0016c40:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c43:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016c47:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016c4d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016c50:	48                   	dec    eax
c0016c51:	21 c6                	and    esi,eax
c0016c53:	0f af f1             	imul   esi,ecx
c0016c56:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016c59:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016c5b:	eb 1d                	jmp    c0016c7a <VCache::read(unsigned long long, int, void*)+0xda>
c0016c5d:	83 ec 0c             	sub    esp,0xc
c0016c60:	53                   	push   ebx
c0016c61:	e8 88 fd ff ff       	call   c00169ee <VCache::invalidateReadBuffer()>
c0016c66:	5a                   	pop    edx
c0016c67:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0016c6c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016c70:	55                   	push   ebp
c0016c71:	57                   	push   edi
c0016c72:	56                   	push   esi
c0016c73:	50                   	push   eax
c0016c74:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016c77:	83 c4 20             	add    esp,0x20
c0016c7a:	83 ec 0c             	sub    esp,0xc
c0016c7d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016c80:	e8 05 77 00 00       	call   c001e38a <Semaphore::release()>
c0016c85:	83 c4 2c             	add    esp,0x2c
c0016c88:	31 c0                	xor    eax,eax
c0016c8a:	5b                   	pop    ebx
c0016c8b:	5e                   	pop    esi
c0016c8c:	5f                   	pop    edi
c0016c8d:	5d                   	pop    ebp
c0016c8e:	c3                   	ret    
c0016c8f:	90                   	nop

c0016c90 <Video::putrect(int, int, int, int, unsigned int)>:
c0016c90:	55                   	push   ebp
c0016c91:	57                   	push   edi
c0016c92:	56                   	push   esi
c0016c93:	53                   	push   ebx
c0016c94:	83 ec 1c             	sub    esp,0x1c
c0016c97:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016c9b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016c9f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016ca3:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016ca7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016cab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016caf:	01 df                	add    edi,ebx
c0016cb1:	39 fb                	cmp    ebx,edi
c0016cb3:	7d 1f                	jge    c0016cd4 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016cb5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016cb9:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016cbd:	7d 12                	jge    c0016cd1 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016cbf:	8b 16                	mov    edx,DWORD PTR [esi]
c0016cc1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016cc5:	53                   	push   ebx
c0016cc6:	55                   	push   ebp
c0016cc7:	45                   	inc    ebp
c0016cc8:	56                   	push   esi
c0016cc9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016ccc:	83 c4 10             	add    esp,0x10
c0016ccf:	eb e8                	jmp    c0016cb9 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016cd1:	43                   	inc    ebx
c0016cd2:	eb dd                	jmp    c0016cb1 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016cd4:	83 c4 1c             	add    esp,0x1c
c0016cd7:	5b                   	pop    ebx
c0016cd8:	5e                   	pop    esi
c0016cd9:	5f                   	pop    edi
c0016cda:	5d                   	pop    ebp
c0016cdb:	c3                   	ret    

c0016cdc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016cdc:	55                   	push   ebp
c0016cdd:	57                   	push   edi
c0016cde:	31 ff                	xor    edi,edi
c0016ce0:	56                   	push   esi
c0016ce1:	53                   	push   ebx
c0016ce2:	83 ec 1c             	sub    esp,0x1c
c0016ce5:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016ce9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016ced:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016cf4:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016cf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016cfd:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016d01:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016d05:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016d08:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016d0c:	01 f9                	add    ecx,edi
c0016d0e:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016d12:	7d 2f                	jge    c0016d43 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016d14:	31 f6                	xor    esi,esi
c0016d16:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016d1a:	01 f2                	add    edx,esi
c0016d1c:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016d20:	7d 1a                	jge    c0016d3c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016d22:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016d25:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016d28:	46                   	inc    esi
c0016d29:	51                   	push   ecx
c0016d2a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016d2e:	52                   	push   edx
c0016d2f:	55                   	push   ebp
c0016d30:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016d33:	83 c4 10             	add    esp,0x10
c0016d36:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016d3a:	eb da                	jmp    c0016d16 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016d3c:	47                   	inc    edi
c0016d3d:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016d41:	eb c5                	jmp    c0016d08 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016d43:	83 c4 1c             	add    esp,0x1c
c0016d46:	5b                   	pop    ebx
c0016d47:	5e                   	pop    esi
c0016d48:	5f                   	pop    edi
c0016d49:	5d                   	pop    ebp
c0016d4a:	c3                   	ret    
c0016d4b:	90                   	nop

c0016d4c <Video::blit(unsigned int*, int, int, int, int)>:
c0016d4c:	55                   	push   ebp
c0016d4d:	57                   	push   edi
c0016d4e:	56                   	push   esi
c0016d4f:	53                   	push   ebx
c0016d50:	83 ec 1c             	sub    esp,0x1c
c0016d53:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016d57:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016d5b:	85 c0                	test   eax,eax
c0016d5d:	79 02                	jns    c0016d61 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016d5f:	31 c0                	xor    eax,eax
c0016d61:	c1 e0 02             	shl    eax,0x2
c0016d64:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016d68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d6c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016d70:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016d74:	39 d8                	cmp    eax,ebx
c0016d76:	7e 49                	jle    c0016dc1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016d78:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016d7e:	7c 41                	jl     c0016dc1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016d80:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016d84:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016d88:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016d8c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016d90:	39 f9                	cmp    ecx,edi
c0016d92:	7e 22                	jle    c0016db6 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016d94:	83 c5 04             	add    ebp,0x4
c0016d97:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016d9d:	7c 14                	jl     c0016db3 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016d9f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016da1:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016da4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016da8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016dac:	56                   	push   esi
c0016dad:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016db0:	83 c4 10             	add    esp,0x10
c0016db3:	47                   	inc    edi
c0016db4:	eb d2                	jmp    c0016d88 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016db6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016dba:	43                   	inc    ebx
c0016dbb:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016dbf:	eb ab                	jmp    c0016d6c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016dc1:	83 c4 1c             	add    esp,0x1c
c0016dc4:	5b                   	pop    ebx
c0016dc5:	5e                   	pop    esi
c0016dc6:	5f                   	pop    edi
c0016dc7:	5d                   	pop    ebp
c0016dc8:	c3                   	ret    
c0016dc9:	90                   	nop

c0016dca <Video::clearScreen(unsigned int)>:
c0016dca:	57                   	push   edi
c0016dcb:	56                   	push   esi
c0016dcc:	53                   	push   ebx
c0016dcd:	31 db                	xor    ebx,ebx
c0016dcf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016dd3:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016dd9:	7e 1f                	jle    c0016dfa <Video::clearScreen(unsigned int)+0x30>
c0016ddb:	31 ff                	xor    edi,edi
c0016ddd:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016de3:	7e 12                	jle    c0016df7 <Video::clearScreen(unsigned int)+0x2d>
c0016de5:	8b 06                	mov    eax,DWORD PTR [esi]
c0016de7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016deb:	53                   	push   ebx
c0016dec:	57                   	push   edi
c0016ded:	47                   	inc    edi
c0016dee:	56                   	push   esi
c0016def:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016df2:	83 c4 10             	add    esp,0x10
c0016df5:	eb e6                	jmp    c0016ddd <Video::clearScreen(unsigned int)+0x13>
c0016df7:	43                   	inc    ebx
c0016df8:	eb d9                	jmp    c0016dd3 <Video::clearScreen(unsigned int)+0x9>
c0016dfa:	5b                   	pop    ebx
c0016dfb:	5e                   	pop    esi
c0016dfc:	5f                   	pop    edi
c0016dfd:	c3                   	ret    

c0016dfe <Video::putpixel(int, int, unsigned int)>:
c0016dfe:	c7 44 24 04 f4 b0 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b0f4
c0016e06:	e9 84 30 00 00       	jmp    c0019e8f <Krnl::panic(char const*)>
c0016e0b:	90                   	nop

c0016e0c <Video::Video(char const*)>:
c0016e0c:	83 ec 0c             	sub    esp,0xc
c0016e0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e13:	83 ec 08             	sub    esp,0x8
c0016e16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e1a:	50                   	push   eax
c0016e1b:	e8 40 cf ff ff       	call   c0013d60 <Device::Device(char const*)>
c0016e20:	83 c4 10             	add    esp,0x10
c0016e23:	ba 64 b1 02 c0       	mov    edx,0xc002b164
c0016e28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e2c:	89 10                	mov    DWORD PTR [eax],edx
c0016e2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e32:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016e3c:	90                   	nop
c0016e3d:	83 c4 0c             	add    esp,0xc
c0016e40:	c3                   	ret    
c0016e41:	90                   	nop

c0016e42 <Video::~Video()>:
c0016e42:	83 ec 0c             	sub    esp,0xc
c0016e45:	ba 64 b1 02 c0       	mov    edx,0xc002b164
c0016e4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e4e:	89 10                	mov    DWORD PTR [eax],edx
c0016e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e54:	83 ec 0c             	sub    esp,0xc
c0016e57:	50                   	push   eax
c0016e58:	e8 cd cb ff ff       	call   c0013a2a <Device::~Device()>
c0016e5d:	83 c4 10             	add    esp,0x10
c0016e60:	90                   	nop
c0016e61:	83 c4 0c             	add    esp,0xc
c0016e64:	c3                   	ret    
c0016e65:	90                   	nop

c0016e66 <Video::~Video()>:
c0016e66:	83 ec 0c             	sub    esp,0xc
c0016e69:	83 ec 0c             	sub    esp,0xc
c0016e6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e70:	e8 cd ff ff ff       	call   c0016e42 <Video::~Video()>
c0016e75:	83 c4 10             	add    esp,0x10
c0016e78:	83 ec 08             	sub    esp,0x8
c0016e7b:	68 64 01 00 00       	push   0x164
c0016e80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e84:	e8 c2 b7 ff ff       	call   c001264b <operator delete(void*, unsigned long)>
c0016e89:	83 c4 10             	add    esp,0x10
c0016e8c:	83 c4 0c             	add    esp,0xc
c0016e8f:	c3                   	ret    

c0016e90 <Video::isMonochrome()>:
c0016e90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e94:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016e9a:	c3                   	ret    
c0016e9b:	90                   	nop

c0016e9c <Video::getWidth()>:
c0016e9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ea0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016ea6:	c3                   	ret    
c0016ea7:	90                   	nop

c0016ea8 <Video::getHeight()>:
c0016ea8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016eac:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016eb2:	c3                   	ret    
c0016eb3:	90                   	nop

c0016eb4 <Video::drawCursor(int, int, unsigned char*, int)>:
c0016eb4:	55                   	push   ebp
c0016eb5:	57                   	push   edi
c0016eb6:	56                   	push   esi
c0016eb7:	53                   	push   ebx
c0016eb8:	83 ec 2c             	sub    esp,0x2c
c0016ebb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016ebf:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016ec3:	83 f8 01             	cmp    eax,0x1
c0016ec6:	19 c9                	sbb    ecx,ecx
c0016ec8:	31 db                	xor    ebx,ebx
c0016eca:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016ece:	89 cd                	mov    ebp,ecx
c0016ed0:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016ed8:	f7 d5                	not    ebp
c0016eda:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016ee0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016ee4:	01 d8                	add    eax,ebx
c0016ee6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016eea:	56                   	push   esi
c0016eeb:	e8 b8 ff ff ff       	call   c0016ea8 <Video::getHeight()>
c0016ef0:	59                   	pop    ecx
c0016ef1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016ef5:	7e 70                	jle    c0016f67 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016ef7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016efb:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016eff:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016f02:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016f06:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016f0a:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016f11:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016f15:	89 f8                	mov    eax,edi
c0016f17:	83 c0 20             	add    eax,0x20
c0016f1a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016f1e:	56                   	push   esi
c0016f1f:	e8 78 ff ff ff       	call   c0016e9c <Video::getWidth()>
c0016f24:	5a                   	pop    edx
c0016f25:	39 c7                	cmp    edi,eax
c0016f27:	7d 34                	jge    c0016f5d <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016f29:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016f2e:	74 05                	je     c0016f35 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016f30:	8b 06                	mov    eax,DWORD PTR [esi]
c0016f32:	55                   	push   ebp
c0016f33:	eb 0d                	jmp    c0016f42 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016f35:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016f3a:	74 12                	je     c0016f4e <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016f3c:	8b 06                	mov    eax,DWORD PTR [esi]
c0016f3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016f42:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016f46:	57                   	push   edi
c0016f47:	56                   	push   esi
c0016f48:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016f4b:	83 c4 10             	add    esp,0x10
c0016f4e:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016f52:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016f56:	47                   	inc    edi
c0016f57:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016f5b:	75 c1                	jne    c0016f1e <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016f5d:	43                   	inc    ebx
c0016f5e:	83 fb 20             	cmp    ebx,0x20
c0016f61:	0f 85 79 ff ff ff    	jne    c0016ee0 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016f67:	83 c4 2c             	add    esp,0x2c
c0016f6a:	5b                   	pop    ebx
c0016f6b:	5e                   	pop    esi
c0016f6c:	5f                   	pop    edi
c0016f6d:	5d                   	pop    ebp
c0016f6e:	c3                   	ret    
c0016f6f:	90                   	nop

c0016f70 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016f70:	55                   	push   ebp
c0016f71:	57                   	push   edi
c0016f72:	56                   	push   esi
c0016f73:	53                   	push   ebx
c0016f74:	83 ec 28             	sub    esp,0x28
c0016f77:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016f7b:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016f7f:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0016f83:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016f87:	c1 e6 08             	shl    esi,0x8
c0016f8a:	01 c6                	add    esi,eax
c0016f8c:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016f90:	c1 e0 08             	shl    eax,0x8
c0016f93:	01 d0                	add    eax,edx
c0016f95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f9d:	0f af c6             	imul   eax,esi
c0016fa0:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016fa7:	50                   	push   eax
c0016fa8:	e8 ec 85 ff ff       	call   c000f599 <malloc>
c0016fad:	83 c4 10             	add    esp,0x10
c0016fb0:	89 c7                	mov    edi,eax
c0016fb2:	85 c0                	test   eax,eax
c0016fb4:	75 10                	jne    c0016fc6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0016fb6:	83 ec 0c             	sub    esp,0xc
c0016fb9:	68 15 b1 02 c0       	push   0xc002b115
c0016fbe:	e8 cc 2e 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c0016fc3:	83 c4 10             	add    esp,0x10
c0016fc6:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0016fc9:	ba 12 00 00 00       	mov    edx,0x12
c0016fce:	84 c0                	test   al,al
c0016fd0:	74 11                	je     c0016fe3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0016fd2:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0016fd6:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0016fda:	c1 fa 03             	sar    edx,0x3
c0016fdd:	0f af d1             	imul   edx,ecx
c0016fe0:	83 c2 12             	add    edx,0x12
c0016fe3:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016fe7:	74 04                	je     c0016fed <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0016fe9:	85 f6                	test   esi,esi
c0016feb:	75 12                	jne    c0016fff <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0016fed:	83 ec 0c             	sub    esp,0xc
c0016ff0:	68 25 b1 02 c0       	push   0xc002b125
c0016ff5:	e8 29 b7 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0016ffa:	e9 b8 00 00 00       	jmp    c00170b7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0016fff:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0017003:	80 f9 02             	cmp    cl,0x2
c0017006:	0f 85 96 00 00 00    	jne    c00170a2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c001700c:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017011:	75 0e                	jne    c0017021 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0017013:	84 c0                	test   al,al
c0017015:	75 0a                	jne    c0017021 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0017017:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001701a:	83 e8 18             	sub    eax,0x18
c001701d:	a8 f7                	test   al,0xf7
c001701f:	74 0a                	je     c001702b <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0017021:	83 ec 0c             	sub    esp,0xc
c0017024:	68 3a b1 02 c0       	push   0xc002b13a
c0017029:	eb 7f                	jmp    c00170aa <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c001702b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017033:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001703b:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c001703f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017047:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001704b:	75 0c                	jne    c0017059 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001704d:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0017052:	c1 e0 18             	shl    eax,0x18
c0017055:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017059:	45                   	inc    ebp
c001705a:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c001705f:	c1 e1 10             	shl    ecx,0x10
c0017062:	89 c8                	mov    eax,ecx
c0017064:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c0017069:	c1 e1 08             	shl    ecx,0x8
c001706c:	09 c1                	or     ecx,eax
c001706e:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0017072:	09 c1                	or     ecx,eax
c0017074:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c0017078:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c001707c:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017080:	c1 f8 03             	sar    eax,0x3
c0017083:	01 c2                	add    edx,eax
c0017085:	89 e8                	mov    eax,ebp
c0017087:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c001708b:	39 c6                	cmp    esi,eax
c001708d:	7f b0                	jg     c001703f <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c001708f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017093:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017097:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c001709a:	7e 22                	jle    c00170be <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c001709c:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c00170a0:	eb 99                	jmp    c001703b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00170a2:	50                   	push   eax
c00170a3:	50                   	push   eax
c00170a4:	51                   	push   ecx
c00170a5:	68 48 b1 02 c0       	push   0xc002b148
c00170aa:	e8 74 b6 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c00170af:	89 3c 24             	mov    DWORD PTR [esp],edi
c00170b2:	e8 f2 84 ff ff       	call   c000f5a9 <free>
c00170b7:	83 c4 10             	add    esp,0x10
c00170ba:	31 ff                	xor    edi,edi
c00170bc:	eb 0f                	jmp    c00170cd <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c00170be:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00170c2:	89 30                	mov    DWORD PTR [eax],esi
c00170c4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00170c8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00170cb:	89 30                	mov    DWORD PTR [eax],esi
c00170cd:	83 c4 1c             	add    esp,0x1c
c00170d0:	89 f8                	mov    eax,edi
c00170d2:	5b                   	pop    ebx
c00170d3:	5e                   	pop    esi
c00170d4:	5f                   	pop    edi
c00170d5:	5d                   	pop    ebp
c00170d6:	c3                   	ret    
c00170d7:	90                   	nop

c00170d8 <Video::putTGA(int, int, unsigned char*, int)>:
c00170d8:	55                   	push   ebp
c00170d9:	57                   	push   edi
c00170da:	56                   	push   esi
c00170db:	53                   	push   ebx
c00170dc:	83 ec 28             	sub    esp,0x28
c00170df:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00170e3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00170e7:	50                   	push   eax
c00170e8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00170ec:	50                   	push   eax
c00170ed:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00170f1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00170f5:	56                   	push   esi
c00170f6:	e8 75 fe ff ff       	call   c0016f70 <Video::tgaParse(unsigned char*, int, int*, int*)>
c00170fb:	83 c4 20             	add    esp,0x20
c00170fe:	85 c0                	test   eax,eax
c0017100:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017104:	74 35                	je     c001713b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017106:	89 c7                	mov    edi,eax
c0017108:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001710c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017110:	39 d8                	cmp    eax,ebx
c0017112:	7e 27                	jle    c001713b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017114:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017118:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001711c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017120:	39 e8                	cmp    eax,ebp
c0017122:	7e 14                	jle    c0017138 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017124:	8b 06                	mov    eax,DWORD PTR [esi]
c0017126:	83 c7 04             	add    edi,0x4
c0017129:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c001712c:	53                   	push   ebx
c001712d:	55                   	push   ebp
c001712e:	45                   	inc    ebp
c001712f:	56                   	push   esi
c0017130:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017133:	83 c4 10             	add    esp,0x10
c0017136:	eb e0                	jmp    c0017118 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017138:	43                   	inc    ebx
c0017139:	eb cd                	jmp    c0017108 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001713b:	83 c4 1c             	add    esp,0x1c
c001713e:	5b                   	pop    ebx
c001713f:	5e                   	pop    esi
c0017140:	5f                   	pop    edi
c0017141:	5d                   	pop    ebp
c0017142:	c3                   	ret    
c0017143:	90                   	nop

c0017144 <ACPI::close(int, int, void*)>:
c0017144:	83 ec 1c             	sub    esp,0x1c
c0017147:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001714f:	74 0a                	je     c001715b <ACPI::close(int, int, void*)+0x17>
c0017151:	b8 00 00 00 00       	mov    eax,0x0
c0017156:	e9 8a 00 00 00       	jmp    c00171e5 <ACPI::close(int, int, void*)+0xa1>
c001715b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017160:	75 27                	jne    c0017189 <ACPI::close(int, int, void*)+0x45>
c0017162:	a1 a8 00 03 c0       	mov    eax,ds:0xc00300a8
c0017167:	85 c0                	test   eax,eax
c0017169:	74 07                	je     c0017172 <ACPI::close(int, int, void*)+0x2e>
c001716b:	a1 a8 00 03 c0       	mov    eax,ds:0xc00300a8
c0017170:	ff d0                	call   eax
c0017172:	83 ec 0c             	sub    esp,0xc
c0017175:	68 a4 b1 02 c0       	push   0xc002b1a4
c001717a:	e8 10 2d 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c001717f:	83 c4 10             	add    esp,0x10
c0017182:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017187:	eb 5c                	jmp    c00171e5 <ACPI::close(int, int, void*)+0xa1>
c0017189:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001718e:	75 50                	jne    c00171e0 <ACPI::close(int, int, void*)+0x9c>
c0017190:	a1 a4 00 03 c0       	mov    eax,ds:0xc00300a4
c0017195:	85 c0                	test   eax,eax
c0017197:	74 07                	je     c00171a0 <ACPI::close(int, int, void*)+0x5c>
c0017199:	a1 a4 00 03 c0       	mov    eax,ds:0xc00300a4
c001719e:	ff d0                	call   eax
c00171a0:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00171a5:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00171aa:	83 e0 02             	and    eax,0x2
c00171ad:	74 1c                	je     c00171cb <ACPI::close(int, int, void*)+0x87>
c00171af:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00171b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00171ba:	89 c2                	mov    edx,eax
c00171bc:	ec                   	in     al,dx
c00171bd:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00171c1:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00171c5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00171c9:	eb da                	jmp    c00171a5 <ACPI::close(int, int, void*)+0x61>
c00171cb:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00171d2:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00171d7:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00171db:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00171df:	ee                   	out    dx,al
c00171e0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00171e5:	83 c4 1c             	add    esp,0x1c
c00171e8:	c3                   	ret    

c00171e9 <findRSDP()>:
c00171e9:	83 ec 1c             	sub    esp,0x1c
c00171ec:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c00171f1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00171f7:	83 e0 04             	and    eax,0x4
c00171fa:	84 c0                	test   al,al
c00171fc:	75 07                	jne    c0017205 <findRSDP()+0x1c>
c00171fe:	b8 00 00 00 00       	mov    eax,0x0
c0017203:	eb 6a                	jmp    c001726f <findRSDP()+0x86>
c0017205:	a1 54 da 02 c0       	mov    eax,ds:0xc002da54
c001720a:	3d ff 07 00 00       	cmp    eax,0x7ff
c001720f:	7f 1b                	jg     c001722c <findRSDP()+0x43>
c0017211:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0017216:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001721c:	83 e2 fb             	and    edx,0xfffffffb
c001721f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017225:	b8 00 00 00 00       	mov    eax,0x0
c001722a:	eb 43                	jmp    c001726f <findRSDP()+0x86>
c001722c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017234:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001723c:	77 2c                	ja     c001726a <findRSDP()+0x81>
c001723e:	83 ec 04             	sub    esp,0x4
c0017241:	6a 08                	push   0x8
c0017243:	68 3f b2 02 c0       	push   0xc002b23f
c0017248:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001724c:	e8 fb 93 fe ff       	call   c000064c <memcmp>
c0017251:	83 c4 10             	add    esp,0x10
c0017254:	85 c0                	test   eax,eax
c0017256:	0f 94 c0             	sete   al
c0017259:	84 c0                	test   al,al
c001725b:	74 06                	je     c0017263 <findRSDP()+0x7a>
c001725d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017261:	eb 0c                	jmp    c001726f <findRSDP()+0x86>
c0017263:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017268:	eb ca                	jmp    c0017234 <findRSDP()+0x4b>
c001726a:	b8 00 00 00 00       	mov    eax,0x0
c001726f:	83 c4 1c             	add    esp,0x1c
c0017272:	c3                   	ret    

c0017273 <loadACPITables(unsigned char*)>:
c0017273:	57                   	push   edi
c0017274:	56                   	push   esi
c0017275:	53                   	push   ebx
c0017276:	83 ec 60             	sub    esp,0x60
c0017279:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c001727e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017284:	83 e0 04             	and    eax,0x4
c0017287:	84 c0                	test   al,al
c0017289:	0f 84 33 02 00 00    	je     c00174c2 <loadACPITables(unsigned char*)+0x24f>
c001728f:	a0 c0 02 03 c0       	mov    al,ds:0xc00302c0
c0017294:	84 c0                	test   al,al
c0017296:	74 75                	je     c001730d <loadACPITables(unsigned char*)+0x9a>
c0017298:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001729c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00172a0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00172a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00172a7:	83 e8 24             	sub    eax,0x24
c00172aa:	c1 e8 03             	shr    eax,0x3
c00172ad:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00172b1:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c00172b9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00172bd:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c00172c1:	0f 8d b2 00 00 00    	jge    c0017379 <loadACPITables(unsigned char*)+0x106>
c00172c7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00172cb:	83 c0 24             	add    eax,0x24
c00172ce:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00172d2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00172d6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00172da:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00172de:	c1 e0 03             	shl    eax,0x3
c00172e1:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c00172e5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00172e9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00172ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00172ee:	89 c1                	mov    ecx,eax
c00172f0:	a1 ac 00 03 c0       	mov    eax,ds:0xc00300ac
c00172f5:	8d 50 01             	lea    edx,[eax+0x1]
c00172f8:	89 15 ac 00 03 c0    	mov    DWORD PTR ds:0xc00300ac,edx
c00172fe:	89 ca                	mov    edx,ecx
c0017300:	89 14 c5 c4 00 03 c0 	mov    DWORD PTR [eax*8-0x3ffcff3c],edx
c0017307:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001730b:	eb ac                	jmp    c00172b9 <loadACPITables(unsigned char*)+0x46>
c001730d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017311:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017315:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017319:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001731c:	83 e8 24             	sub    eax,0x24
c001731f:	c1 e8 02             	shr    eax,0x2
c0017322:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017326:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001732e:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017332:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0017336:	7d 41                	jge    c0017379 <loadACPITables(unsigned char*)+0x106>
c0017338:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001733c:	83 c0 24             	add    eax,0x24
c001733f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017343:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017347:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001734b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001734f:	c1 e0 02             	shl    eax,0x2
c0017352:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017356:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001735a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001735c:	a1 ac 00 03 c0       	mov    eax,ds:0xc00300ac
c0017361:	8d 50 01             	lea    edx,[eax+0x1]
c0017364:	89 15 ac 00 03 c0    	mov    DWORD PTR ds:0xc00300ac,edx
c001736a:	89 ca                	mov    edx,ecx
c001736c:	89 14 c5 c4 00 03 c0 	mov    DWORD PTR [eax*8-0x3ffcff3c],edx
c0017373:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0017377:	eb b5                	jmp    c001732e <loadACPITables(unsigned char*)+0xbb>
c0017379:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0017381:	a1 ac 00 03 c0       	mov    eax,ds:0xc00300ac
c0017386:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001738a:	0f 8d 33 01 00 00    	jge    c00174c3 <loadACPITables(unsigned char*)+0x250>
c0017390:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017394:	8b 04 c5 c4 00 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcff3c]
c001739b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001739f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00173a3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00173a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00173ab:	25 ff 0f 00 00       	and    eax,0xfff
c00173b0:	89 c6                	mov    esi,eax
c00173b2:	8b 1d 70 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db70
c00173b8:	83 ec 0c             	sub    esp,0xc
c00173bb:	6a 01                	push   0x1
c00173bd:	e8 5d 9e ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c00173c2:	83 c4 10             	add    esp,0x10
c00173c5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00173c9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00173cf:	83 ec 0c             	sub    esp,0xc
c00173d2:	6a 01                	push   0x1
c00173d4:	6a 01                	push   0x1
c00173d6:	50                   	push   eax
c00173d7:	52                   	push   edx
c00173d8:	53                   	push   ebx
c00173d9:	e8 48 a9 ff ff       	call   c0011d26 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00173de:	83 c4 20             	add    esp,0x20
c00173e1:	09 f0                	or     eax,esi
c00173e3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00173e7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00173eb:	c1 e0 03             	shl    eax,0x3
c00173ee:	05 c0 00 03 c0       	add    eax,0xc00300c0
c00173f3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00173f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00173fb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00173ff:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0017407:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001740b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001740f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017413:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017417:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001741b:	89 c6                	mov    esi,eax
c001741d:	89 d7                	mov    edi,edx
c001741f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017421:	89 c8                	mov    eax,ecx
c0017423:	89 fa                	mov    edx,edi
c0017425:	89 f3                	mov    ebx,esi
c0017427:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001742b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001742f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017433:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017437:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001743a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001743e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017442:	05 00 10 00 00       	add    eax,0x1000
c0017447:	c1 e8 0c             	shr    eax,0xc
c001744a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001744e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017452:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017456:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001745a:	25 ff 0f 00 00       	and    eax,0xfff
c001745f:	89 c6                	mov    esi,eax
c0017461:	8b 1d 70 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db70
c0017467:	83 ec 0c             	sub    esp,0xc
c001746a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001746e:	e8 ac 9d ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0017473:	83 c4 10             	add    esp,0x10
c0017476:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001747a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017480:	83 ec 0c             	sub    esp,0xc
c0017483:	6a 01                	push   0x1
c0017485:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017489:	50                   	push   eax
c001748a:	52                   	push   edx
c001748b:	53                   	push   ebx
c001748c:	e8 95 a8 ff ff       	call   c0011d26 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017491:	83 c4 20             	add    esp,0x20
c0017494:	09 f0                	or     eax,esi
c0017496:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001749a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001749e:	83 ec 0c             	sub    esp,0xc
c00174a1:	50                   	push   eax
c00174a2:	e8 12 a2 ff ff       	call   c00116b9 <Virt::freeKernelVirtualPages(unsigned long)>
c00174a7:	83 c4 10             	add    esp,0x10
c00174aa:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00174ae:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00174b2:	89 14 c5 c4 00 03 c0 	mov    DWORD PTR [eax*8-0x3ffcff3c],edx
c00174b9:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c00174bd:	e9 bf fe ff ff       	jmp    c0017381 <loadACPITables(unsigned char*)+0x10e>
c00174c2:	90                   	nop
c00174c3:	83 c4 60             	add    esp,0x60
c00174c6:	5b                   	pop    ebx
c00174c7:	5e                   	pop    esi
c00174c8:	5f                   	pop    edi
c00174c9:	c3                   	ret    

c00174ca <findRSDT(unsigned char*)>:
c00174ca:	57                   	push   edi
c00174cb:	56                   	push   esi
c00174cc:	53                   	push   ebx
c00174cd:	83 ec 50             	sub    esp,0x50
c00174d0:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c00174d5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00174db:	83 e0 04             	and    eax,0x4
c00174de:	84 c0                	test   al,al
c00174e0:	75 0a                	jne    c00174ec <findRSDT(unsigned char*)+0x22>
c00174e2:	b8 00 00 00 00       	mov    eax,0x0
c00174e7:	e9 21 01 00 00       	jmp    c001760d <findRSDT(unsigned char*)+0x143>
c00174ec:	89 e0                	mov    eax,esp
c00174ee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00174f2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00174f6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00174fa:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0017502:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017506:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001750a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001750e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017512:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0017516:	89 c6                	mov    esi,eax
c0017518:	89 d7                	mov    edi,edx
c001751a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001751c:	89 c8                	mov    eax,ecx
c001751e:	89 fa                	mov    edx,edi
c0017520:	89 f3                	mov    ebx,esi
c0017522:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017526:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001752a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001752e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017532:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0017536:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c001753e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017542:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017546:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001754a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001754e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017552:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017556:	25 ff 0f 00 00       	and    eax,0xfff
c001755b:	89 c6                	mov    esi,eax
c001755d:	8b 1d 70 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db70
c0017563:	83 ec 0c             	sub    esp,0xc
c0017566:	6a 02                	push   0x2
c0017568:	e8 b2 9c ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c001756d:	83 c4 10             	add    esp,0x10
c0017570:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017574:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001757a:	83 ec 0c             	sub    esp,0xc
c001757d:	6a 01                	push   0x1
c001757f:	6a 02                	push   0x2
c0017581:	50                   	push   eax
c0017582:	52                   	push   edx
c0017583:	53                   	push   ebx
c0017584:	e8 9d a7 ff ff       	call   c0011d26 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017589:	83 c4 20             	add    esp,0x20
c001758c:	09 f0                	or     eax,esi
c001758e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017592:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017596:	25 ff 0f 00 00       	and    eax,0xfff
c001759b:	89 c6                	mov    esi,eax
c001759d:	8b 1d 70 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db70
c00175a3:	83 ec 0c             	sub    esp,0xc
c00175a6:	6a 02                	push   0x2
c00175a8:	e8 72 9c ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c00175ad:	83 c4 10             	add    esp,0x10
c00175b0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00175b4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00175ba:	83 ec 0c             	sub    esp,0xc
c00175bd:	6a 01                	push   0x1
c00175bf:	6a 02                	push   0x2
c00175c1:	50                   	push   eax
c00175c2:	52                   	push   edx
c00175c3:	53                   	push   ebx
c00175c4:	e8 5d a7 ff ff       	call   c0011d26 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00175c9:	83 c4 20             	add    esp,0x20
c00175cc:	09 f0                	or     eax,esi
c00175ce:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00175d2:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00175d7:	75 11                	jne    c00175ea <findRSDT(unsigned char*)+0x120>
c00175d9:	c6 05 c0 02 03 c0 00 	mov    BYTE PTR ds:0xc00302c0,0x0
c00175e0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00175e4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00175e8:	eb 1f                	jmp    c0017609 <findRSDT(unsigned char*)+0x13f>
c00175ea:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c00175ef:	75 11                	jne    c0017602 <findRSDT(unsigned char*)+0x138>
c00175f1:	c6 05 c0 02 03 c0 01 	mov    BYTE PTR ds:0xc00302c0,0x1
c00175f8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00175fc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017600:	eb 07                	jmp    c0017609 <findRSDT(unsigned char*)+0x13f>
c0017602:	b8 00 00 00 00       	mov    eax,0x0
c0017607:	eb 04                	jmp    c001760d <findRSDT(unsigned char*)+0x143>
c0017609:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001760d:	83 c4 50             	add    esp,0x50
c0017610:	5b                   	pop    ebx
c0017611:	5e                   	pop    esi
c0017612:	5f                   	pop    edi
c0017613:	c3                   	ret    

c0017614 <findDataTable(unsigned char*, char*)>:
c0017614:	83 ec 1c             	sub    esp,0x1c
c0017617:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c001761c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017622:	83 e0 04             	and    eax,0x4
c0017625:	84 c0                	test   al,al
c0017627:	75 07                	jne    c0017630 <findDataTable(unsigned char*, char*)+0x1c>
c0017629:	b8 00 00 00 00       	mov    eax,0x0
c001762e:	eb 52                	jmp    c0017682 <findDataTable(unsigned char*, char*)+0x6e>
c0017630:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017638:	a1 ac 00 03 c0       	mov    eax,ds:0xc00300ac
c001763d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017641:	7d 3a                	jge    c001767d <findDataTable(unsigned char*, char*)+0x69>
c0017643:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017647:	c1 e0 03             	shl    eax,0x3
c001764a:	05 c0 00 03 c0       	add    eax,0xc00300c0
c001764f:	83 ec 04             	sub    esp,0x4
c0017652:	6a 04                	push   0x4
c0017654:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017658:	50                   	push   eax
c0017659:	e8 ee 8f fe ff       	call   c000064c <memcmp>
c001765e:	83 c4 10             	add    esp,0x10
c0017661:	85 c0                	test   eax,eax
c0017663:	0f 94 c0             	sete   al
c0017666:	84 c0                	test   al,al
c0017668:	74 0d                	je     c0017677 <findDataTable(unsigned char*, char*)+0x63>
c001766a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001766e:	8b 04 c5 c4 00 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcff3c]
c0017675:	eb 0b                	jmp    c0017682 <findDataTable(unsigned char*, char*)+0x6e>
c0017677:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001767b:	eb bb                	jmp    c0017638 <findDataTable(unsigned char*, char*)+0x24>
c001767d:	b8 00 00 00 00       	mov    eax,0x0
c0017682:	83 c4 1c             	add    esp,0x1c
c0017685:	c3                   	ret    

c0017686 <scanMADT()>:
c0017686:	53                   	push   ebx
c0017687:	83 ec 38             	sub    esp,0x38
c001768a:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c001768f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017695:	83 e0 04             	and    eax,0x4
c0017698:	84 c0                	test   al,al
c001769a:	0f 84 4a 04 00 00    	je     c0017aea <scanMADT()+0x464>
c00176a0:	e8 44 fb ff ff       	call   c00171e9 <findRSDP()>
c00176a5:	a3 cc 02 03 c0       	mov    ds:0xc00302cc,eax
c00176aa:	a1 cc 02 03 c0       	mov    eax,ds:0xc00302cc
c00176af:	85 c0                	test   eax,eax
c00176b1:	75 19                	jne    c00176cc <scanMADT()+0x46>
c00176b3:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c00176b8:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00176be:	83 e2 fb             	and    edx,0xfffffffb
c00176c1:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00176c7:	e9 22 04 00 00       	jmp    c0017aee <scanMADT()+0x468>
c00176cc:	a1 cc 02 03 c0       	mov    eax,ds:0xc00302cc
c00176d1:	83 ec 0c             	sub    esp,0xc
c00176d4:	50                   	push   eax
c00176d5:	e8 f0 fd ff ff       	call   c00174ca <findRSDT(unsigned char*)>
c00176da:	83 c4 10             	add    esp,0x10
c00176dd:	a3 c8 02 03 c0       	mov    ds:0xc00302c8,eax
c00176e2:	a1 c8 02 03 c0       	mov    eax,ds:0xc00302c8
c00176e7:	85 c0                	test   eax,eax
c00176e9:	75 19                	jne    c0017704 <scanMADT()+0x7e>
c00176eb:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c00176f0:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00176f6:	83 e2 fb             	and    edx,0xfffffffb
c00176f9:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00176ff:	e9 ea 03 00 00       	jmp    c0017aee <scanMADT()+0x468>
c0017704:	a1 c8 02 03 c0       	mov    eax,ds:0xc00302c8
c0017709:	83 ec 0c             	sub    esp,0xc
c001770c:	50                   	push   eax
c001770d:	e8 61 fb ff ff       	call   c0017273 <loadACPITables(unsigned char*)>
c0017712:	83 c4 10             	add    esp,0x10
c0017715:	a1 c8 02 03 c0       	mov    eax,ds:0xc00302c8
c001771a:	83 ec 08             	sub    esp,0x8
c001771d:	68 48 b2 02 c0       	push   0xc002b248
c0017722:	50                   	push   eax
c0017723:	e8 ec fe ff ff       	call   c0017614 <findDataTable(unsigned char*, char*)>
c0017728:	83 c4 10             	add    esp,0x10
c001772b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001772f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017734:	75 19                	jne    c001774f <scanMADT()+0xc9>
c0017736:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c001773b:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017741:	83 e2 fe             	and    edx,0xfffffffe
c0017744:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001774a:	e9 9f 03 00 00       	jmp    c0017aee <scanMADT()+0x468>
c001774f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017757:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001775b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001775e:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017762:	0f 87 86 03 00 00    	ja     c0017aee <scanMADT()+0x468>
c0017768:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017770:	0f 87 78 03 00 00    	ja     c0017aee <scanMADT()+0x468>
c0017776:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001777a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001777e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017782:	8d 50 01             	lea    edx,[eax+0x1]
c0017785:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017789:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001778d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017791:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017795:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017799:	8d 50 01             	lea    edx,[eax+0x1]
c001779c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00177a0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177a4:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00177a8:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00177ac:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c00177b1:	0f 86 36 03 00 00    	jbe    c0017aed <scanMADT()+0x467>
c00177b7:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c00177bc:	75 57                	jne    c0017815 <scanMADT()+0x18f>
c00177be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177c2:	8d 50 01             	lea    edx,[eax+0x1]
c00177c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00177c9:	8a 15 c0 04 03 c0    	mov    dl,BYTE PTR ds:0xc00304c0
c00177cf:	0f b6 d2             	movzx  edx,dl
c00177d2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00177d6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00177da:	88 82 00 05 03 c0    	mov    BYTE PTR [edx-0x3ffcfb00],al
c00177e0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177e4:	8d 50 01             	lea    edx,[eax+0x1]
c00177e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00177eb:	8a 15 c0 04 03 c0    	mov    dl,BYTE PTR ds:0xc00304c0
c00177f1:	8d 4a 01             	lea    ecx,[edx+0x1]
c00177f4:	88 0d c0 04 03 c0    	mov    BYTE PTR ds:0xc00304c0,cl
c00177fa:	0f b6 d2             	movzx  edx,dl
c00177fd:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017801:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017805:	88 82 e0 04 03 c0    	mov    BYTE PTR [edx-0x3ffcfb20],al
c001780b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017810:	e9 c1 02 00 00       	jmp    c0017ad6 <scanMADT()+0x450>
c0017815:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c001781a:	0f 85 14 01 00 00    	jne    c0017934 <scanMADT()+0x2ae>
c0017820:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017824:	8d 50 01             	lea    edx,[eax+0x1]
c0017827:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001782b:	8a 15 80 03 03 c0    	mov    dl,BYTE PTR ds:0xc0030380
c0017831:	0f b6 d2             	movzx  edx,dl
c0017834:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017838:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001783c:	88 82 a0 03 03 c0    	mov    BYTE PTR [edx-0x3ffcfc60],al
c0017842:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017846:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001784a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001784e:	01 d0                	add    eax,edx
c0017850:	83 c0 2c             	add    eax,0x2c
c0017853:	8a 00                	mov    al,BYTE PTR [eax]
c0017855:	0f b6 d0             	movzx  edx,al
c0017858:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001785c:	8d 48 01             	lea    ecx,[eax+0x1]
c001785f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017863:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017867:	0f b6 c0             	movzx  eax,al
c001786a:	c1 e0 08             	shl    eax,0x8
c001786d:	89 d1                	mov    ecx,edx
c001786f:	09 c1                	or     ecx,eax
c0017871:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017875:	8d 50 02             	lea    edx,[eax+0x2]
c0017878:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001787c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017880:	0f b6 c0             	movzx  eax,al
c0017883:	c1 e0 10             	shl    eax,0x10
c0017886:	09 c1                	or     ecx,eax
c0017888:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001788c:	8d 50 03             	lea    edx,[eax+0x3]
c001788f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017893:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017897:	0f b6 c0             	movzx  eax,al
c001789a:	c1 e0 18             	shl    eax,0x18
c001789d:	09 c1                	or     ecx,eax
c001789f:	89 ca                	mov    edx,ecx
c00178a1:	a0 80 03 03 c0       	mov    al,ds:0xc0030380
c00178a6:	0f b6 c0             	movzx  eax,al
c00178a9:	89 14 85 c0 03 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfc40],edx
c00178b0:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00178b5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178b9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178bd:	01 d0                	add    eax,edx
c00178bf:	83 c0 2c             	add    eax,0x2c
c00178c2:	8a 00                	mov    al,BYTE PTR [eax]
c00178c4:	0f b6 d0             	movzx  edx,al
c00178c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178cb:	8d 48 01             	lea    ecx,[eax+0x1]
c00178ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178d2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00178d6:	0f b6 c0             	movzx  eax,al
c00178d9:	c1 e0 08             	shl    eax,0x8
c00178dc:	89 d1                	mov    ecx,edx
c00178de:	09 c1                	or     ecx,eax
c00178e0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178e4:	8d 50 02             	lea    edx,[eax+0x2]
c00178e7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178eb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00178ef:	0f b6 c0             	movzx  eax,al
c00178f2:	c1 e0 10             	shl    eax,0x10
c00178f5:	09 c1                	or     ecx,eax
c00178f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178fb:	8d 50 03             	lea    edx,[eax+0x3]
c00178fe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017902:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017906:	0f b6 c0             	movzx  eax,al
c0017909:	c1 e0 18             	shl    eax,0x18
c001790c:	09 c1                	or     ecx,eax
c001790e:	89 ca                	mov    edx,ecx
c0017910:	a0 80 03 03 c0       	mov    al,ds:0xc0030380
c0017915:	0f b6 c0             	movzx  eax,al
c0017918:	89 14 85 40 04 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfbc0],edx
c001791f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017924:	a0 80 03 03 c0       	mov    al,ds:0xc0030380
c0017929:	40                   	inc    eax
c001792a:	a2 80 03 03 c0       	mov    ds:0xc0030380,al
c001792f:	e9 a2 01 00 00       	jmp    c0017ad6 <scanMADT()+0x450>
c0017934:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017939:	0f 85 e9 00 00 00    	jne    c0017a28 <scanMADT()+0x3a2>
c001793f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017943:	8d 50 01             	lea    edx,[eax+0x1]
c0017946:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001794a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001794e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017952:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017956:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001795a:	8d 50 01             	lea    edx,[eax+0x1]
c001795d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017961:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017965:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017969:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001796d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017971:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017975:	01 d0                	add    eax,edx
c0017977:	83 c0 2c             	add    eax,0x2c
c001797a:	8a 00                	mov    al,BYTE PTR [eax]
c001797c:	0f b6 d0             	movzx  edx,al
c001797f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017983:	8d 48 01             	lea    ecx,[eax+0x1]
c0017986:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001798a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001798e:	0f b6 c0             	movzx  eax,al
c0017991:	c1 e0 08             	shl    eax,0x8
c0017994:	89 d1                	mov    ecx,edx
c0017996:	09 c1                	or     ecx,eax
c0017998:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001799c:	8d 50 02             	lea    edx,[eax+0x2]
c001799f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179a3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00179a7:	0f b6 c0             	movzx  eax,al
c00179aa:	c1 e0 10             	shl    eax,0x10
c00179ad:	09 c1                	or     ecx,eax
c00179af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179b3:	8d 50 03             	lea    edx,[eax+0x3]
c00179b6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179ba:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00179be:	0f b6 c0             	movzx  eax,al
c00179c1:	c1 e0 18             	shl    eax,0x18
c00179c4:	09 c8                	or     eax,ecx
c00179c6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00179ca:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00179cf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179d7:	01 d0                	add    eax,edx
c00179d9:	83 c0 2c             	add    eax,0x2c
c00179dc:	8a 00                	mov    al,BYTE PTR [eax]
c00179de:	0f b6 c0             	movzx  eax,al
c00179e1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00179e5:	8d 4a 01             	lea    ecx,[edx+0x1]
c00179e8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179ec:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00179f0:	0f b6 d2             	movzx  edx,dl
c00179f3:	c1 e2 08             	shl    edx,0x8
c00179f6:	09 d0                	or     eax,edx
c00179f8:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00179fd:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017a02:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017a07:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017a0b:	88 90 60 cc 02 c0    	mov    BYTE PTR [eax-0x3ffd33a0],dl
c0017a11:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017a16:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017a1b:	66 89 84 12 60 03 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcfca0],ax
c0017a23:	e9 ae 00 00 00       	jmp    c0017ad6 <scanMADT()+0x450>
c0017a28:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017a2d:	0f 85 97 00 00 00    	jne    c0017aca <scanMADT()+0x444>
c0017a33:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a37:	8d 50 01             	lea    edx,[eax+0x1]
c0017a3a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a3e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a42:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a46:	0f b6 c0             	movzx  eax,al
c0017a49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a4d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a51:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a55:	01 d0                	add    eax,edx
c0017a57:	83 c0 2c             	add    eax,0x2c
c0017a5a:	8a 00                	mov    al,BYTE PTR [eax]
c0017a5c:	0f b6 d0             	movzx  edx,al
c0017a5f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a63:	8d 48 01             	lea    ecx,[eax+0x1]
c0017a66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a6a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017a6e:	0f b6 c0             	movzx  eax,al
c0017a71:	c1 e0 08             	shl    eax,0x8
c0017a74:	09 d0                	or     eax,edx
c0017a76:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a7a:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017a7f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a83:	8d 50 01             	lea    edx,[eax+0x1]
c0017a86:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a8a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a8e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a92:	0f b6 c0             	movzx  eax,al
c0017a95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017a99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a9d:	c1 e0 08             	shl    eax,0x8
c0017aa0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017aa4:	89 c1                	mov    ecx,eax
c0017aa6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017aaa:	c1 e0 18             	shl    eax,0x18
c0017aad:	89 c3                	mov    ebx,eax
c0017aaf:	a1 d0 02 03 c0       	mov    eax,ds:0xc00302d0
c0017ab4:	8d 50 01             	lea    edx,[eax+0x1]
c0017ab7:	89 15 d0 02 03 c0    	mov    DWORD PTR ds:0xc00302d0,edx
c0017abd:	09 d9                	or     ecx,ebx
c0017abf:	89 ca                	mov    edx,ecx
c0017ac1:	89 14 85 e0 02 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfd20],edx
c0017ac8:	eb 0c                	jmp    c0017ad6 <scanMADT()+0x450>
c0017aca:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017acf:	75 05                	jne    c0017ad6 <scanMADT()+0x450>
c0017ad1:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017ad6:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017adb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017adf:	01 d0                	add    eax,edx
c0017ae1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017ae5:	e9 6d fc ff ff       	jmp    c0017757 <scanMADT()+0xd1>
c0017aea:	90                   	nop
c0017aeb:	eb 01                	jmp    c0017aee <scanMADT()+0x468>
c0017aed:	90                   	nop
c0017aee:	83 c4 38             	add    esp,0x38
c0017af1:	5b                   	pop    ebx
c0017af2:	c3                   	ret    
c0017af3:	90                   	nop

c0017af4 <ACPI::ACPI()>:
c0017af4:	83 ec 0c             	sub    esp,0xc
c0017af7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017afb:	83 ec 08             	sub    esp,0x8
c0017afe:	68 4d b2 02 c0       	push   0xc002b24d
c0017b03:	50                   	push   eax
c0017b04:	e8 57 c2 ff ff       	call   c0013d60 <Device::Device(char const*)>
c0017b09:	83 c4 10             	add    esp,0x10
c0017b0c:	ba a8 b3 02 c0       	mov    edx,0xc002b3a8
c0017b11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b15:	89 10                	mov    DWORD PTR [eax],edx
c0017b17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b1b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017b22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b26:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b34:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017b3e:	e8 43 fb ff ff       	call   c0017686 <scanMADT()>
c0017b43:	90                   	nop
c0017b44:	83 c4 0c             	add    esp,0xc
c0017b47:	c3                   	ret    

c0017b48 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017b48:	83 ec 2c             	sub    esp,0x2c
c0017b4b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017b4f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017b53:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017b57:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017b5b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017b60:	88 d0                	mov    al,dl
c0017b62:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017b66:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017b6b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017b73:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b77:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017b7d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017b81:	0f 8d 97 00 00 00    	jge    c0017c1e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017b87:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b8b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b8f:	83 c2 2a             	add    edx,0x2a
c0017b92:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017b96:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017b9b:	75 78                	jne    c0017c15 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017b9d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ba1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ba5:	83 c2 2a             	add    edx,0x2a
c0017ba8:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017bac:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017bb0:	75 63                	jne    c0017c15 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017bb2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017bb7:	74 3a                	je     c0017bf3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017bb9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017bbd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017bc1:	83 c2 2a             	add    edx,0x2a
c0017bc4:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017bc8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bcc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bcf:	39 c2                	cmp    edx,eax
c0017bd1:	74 10                	je     c0017be3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017bd3:	83 ec 0c             	sub    esp,0xc
c0017bd6:	68 c8 b1 02 c0       	push   0xc002b1c8
c0017bdb:	e8 af 22 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c0017be0:	83 c4 10             	add    esp,0x10
c0017be3:	83 ec 0c             	sub    esp,0xc
c0017be6:	68 52 b2 02 c0       	push   0xc002b252
c0017beb:	e8 9f 22 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c0017bf0:	83 c4 10             	add    esp,0x10
c0017bf3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017bf7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017bfb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017bff:	83 c2 2a             	add    edx,0x2a
c0017c02:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017c06:	8b 02                	mov    eax,DWORD PTR [edx]
c0017c08:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017c0b:	89 01                	mov    DWORD PTR [ecx],eax
c0017c0d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017c10:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017c15:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017c19:	e9 55 ff ff ff       	jmp    c0017b73 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017c1e:	90                   	nop
c0017c1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c23:	83 c4 2c             	add    esp,0x2c
c0017c26:	c2 04 00             	ret    0x4
c0017c29:	90                   	nop

c0017c2a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017c2a:	83 ec 1c             	sub    esp,0x1c
c0017c2d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c31:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017c35:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017c39:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017c3e:	88 c8                	mov    al,cl
c0017c40:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017c44:	88 d0                	mov    al,dl
c0017c46:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017c4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c4e:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017c54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c58:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017c5b:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017c5f:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017c63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c67:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017c6d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c71:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017c74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c78:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017c7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c81:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017c87:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017c8b:	8d 48 01             	lea    ecx,[eax+0x1]
c0017c8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c92:	83 c2 2a             	add    edx,0x2a
c0017c95:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017c99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c9d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017ca3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ca7:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017caa:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017cae:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017cb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017cb6:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017cbc:	8d 50 01             	lea    edx,[eax+0x1]
c0017cbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017cc3:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017cc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ccd:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017cd3:	3d 00 02 00 00       	cmp    eax,0x200
c0017cd8:	75 10                	jne    c0017cea <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017cda:	83 ec 0c             	sub    esp,0xc
c0017cdd:	68 61 b2 02 c0       	push   0xc002b261
c0017ce2:	e8 a8 21 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c0017ce7:	83 c4 10             	add    esp,0x10
c0017cea:	90                   	nop
c0017ceb:	83 c4 1c             	add    esp,0x1c
c0017cee:	c3                   	ret    
c0017cef:	90                   	nop

c0017cf0 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017cf0:	b8 00 00 00 00       	mov    eax,0x0
c0017cf5:	c3                   	ret    

c0017cf6 <ACPI::detectPCI()>:
c0017cf6:	53                   	push   ebx
c0017cf7:	83 ec 28             	sub    esp,0x28
c0017cfa:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017cff:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0017d04:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0017d09:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d0f:	83 e0 04             	and    eax,0x4
c0017d12:	84 c0                	test   al,al
c0017d14:	74 2b                	je     c0017d41 <ACPI::detectPCI()+0x4b>
c0017d16:	a1 c8 02 03 c0       	mov    eax,ds:0xc00302c8
c0017d1b:	83 ec 08             	sub    esp,0x8
c0017d1e:	68 7e b2 02 c0       	push   0xc002b27e
c0017d23:	50                   	push   eax
c0017d24:	e8 eb f8 ff ff       	call   c0017614 <findDataTable(unsigned char*, char*)>
c0017d29:	83 c4 10             	add    esp,0x10
c0017d2c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017d30:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017d35:	74 0a                	je     c0017d41 <ACPI::detectPCI()+0x4b>
c0017d37:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d3c:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017d41:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0017d49:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017d4d:	8a 00                	mov    al,BYTE PTR [eax]
c0017d4f:	3c 01                	cmp    al,0x1
c0017d51:	75 0c                	jne    c0017d5f <ACPI::detectPCI()+0x69>
c0017d53:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d58:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017d5d:	eb 26                	jmp    c0017d85 <ACPI::detectPCI()+0x8f>
c0017d5f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017d63:	8a 00                	mov    al,BYTE PTR [eax]
c0017d65:	3c 02                	cmp    al,0x2
c0017d67:	75 1c                	jne    c0017d85 <ACPI::detectPCI()+0x8f>
c0017d69:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d6e:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017d73:	74 10                	je     c0017d85 <ACPI::detectPCI()+0x8f>
c0017d75:	83 ec 0c             	sub    esp,0xc
c0017d78:	68 f8 b1 02 c0       	push   0xc002b1f8
c0017d7d:	e8 0d 21 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c0017d82:	83 c4 10             	add    esp,0x10
c0017d85:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017d89:	83 f0 01             	xor    eax,0x1
c0017d8c:	84 c0                	test   al,al
c0017d8e:	74 3f                	je     c0017dcf <ACPI::detectPCI()+0xd9>
c0017d90:	e8 bb 83 fe ff       	call   c0000150 <manualPCIProbe>
c0017d95:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017d99:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017d9e:	75 0c                	jne    c0017dac <ACPI::detectPCI()+0xb6>
c0017da0:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017da5:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017daa:	eb 23                	jmp    c0017dcf <ACPI::detectPCI()+0xd9>
c0017dac:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0017db1:	75 1c                	jne    c0017dcf <ACPI::detectPCI()+0xd9>
c0017db3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017db8:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017dbd:	74 10                	je     c0017dcf <ACPI::detectPCI()+0xd9>
c0017dbf:	83 ec 0c             	sub    esp,0xc
c0017dc2:	68 f8 b1 02 c0       	push   0xc002b1f8
c0017dc7:	e8 c3 20 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c0017dcc:	83 c4 10             	add    esp,0x10
c0017dcf:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017dd4:	74 7e                	je     c0017e54 <ACPI::detectPCI()+0x15e>
c0017dd6:	83 ec 0c             	sub    esp,0xc
c0017dd9:	68 83 b2 02 c0       	push   0xc002b283
c0017dde:	e8 10 78 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017de3:	83 c4 10             	add    esp,0x10
c0017de6:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c0017dee:	83 ec 0c             	sub    esp,0xc
c0017df1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017df5:	e8 9f 77 ff ff       	call   c000f599 <malloc>
c0017dfa:	83 c4 10             	add    esp,0x10
c0017dfd:	89 c3                	mov    ebx,eax
c0017dff:	83 ec 0c             	sub    esp,0xc
c0017e02:	53                   	push   ebx
c0017e03:	e8 b0 a5 00 00       	call   c00223b8 <PCI::PCI()>
c0017e08:	83 c4 10             	add    esp,0x10
c0017e0b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017e0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e13:	83 ec 08             	sub    esp,0x8
c0017e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017e1a:	50                   	push   eax
c0017e1b:	e8 3c bd ff ff       	call   c0013b5c <Device::addChild(Device*)>
c0017e20:	83 c4 10             	add    esp,0x10
c0017e23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e27:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e29:	83 c0 08             	add    eax,0x8
c0017e2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e2e:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017e33:	74 07                	je     c0017e3c <ACPI::detectPCI()+0x146>
c0017e35:	ba 01 00 00 00       	mov    edx,0x1
c0017e3a:	eb 05                	jmp    c0017e41 <ACPI::detectPCI()+0x14b>
c0017e3c:	ba 02 00 00 00       	mov    edx,0x2
c0017e41:	6a 00                	push   0x0
c0017e43:	6a 00                	push   0x0
c0017e45:	52                   	push   edx
c0017e46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017e4a:	ff d0                	call   eax
c0017e4c:	83 c4 10             	add    esp,0x10
c0017e4f:	e9 9e 00 00 00       	jmp    c0017ef2 <ACPI::detectPCI()+0x1fc>
c0017e54:	83 ec 0c             	sub    esp,0xc
c0017e57:	68 9b b2 02 c0       	push   0xc002b29b
c0017e5c:	e8 c2 a8 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0017e61:	83 c4 10             	add    esp,0x10
c0017e64:	83 ec 0c             	sub    esp,0xc
c0017e67:	68 a6 b2 02 c0       	push   0xc002b2a6
c0017e6c:	e8 82 77 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017e71:	83 c4 10             	add    esp,0x10
c0017e74:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c0017e7b:	83 ec 0c             	sub    esp,0xc
c0017e7e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017e82:	e8 12 77 ff ff       	call   c000f599 <malloc>
c0017e87:	83 c4 10             	add    esp,0x10
c0017e8a:	89 c3                	mov    ebx,eax
c0017e8c:	83 ec 0c             	sub    esp,0xc
c0017e8f:	53                   	push   ebx
c0017e90:	e8 8d b0 00 00       	call   c0022f22 <IDE::IDE()>
c0017e95:	83 c4 10             	add    esp,0x10
c0017e98:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0017e9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ea0:	83 ec 08             	sub    esp,0x8
c0017ea3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017ea7:	50                   	push   eax
c0017ea8:	e8 af bc ff ff       	call   c0013b5c <Device::addChild(Device*)>
c0017ead:	83 c4 10             	add    esp,0x10
c0017eb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017eb4:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0017ebe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ec2:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0017ecb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ecf:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0017ed8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017edc:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ede:	83 c0 08             	add    eax,0x8
c0017ee1:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ee3:	6a 00                	push   0x0
c0017ee5:	6a 00                	push   0x0
c0017ee7:	6a 00                	push   0x0
c0017ee9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017eed:	ff d0                	call   eax
c0017eef:	83 c4 10             	add    esp,0x10
c0017ef2:	90                   	nop
c0017ef3:	83 c4 28             	add    esp,0x28
c0017ef6:	5b                   	pop    ebx
c0017ef7:	c3                   	ret    

c0017ef8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017ef8:	83 ec 1c             	sub    esp,0x1c
c0017efb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017eff:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017f02:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017f06:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0017f0b:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017f10:	83 ec 08             	sub    esp,0x8
c0017f13:	52                   	push   edx
c0017f14:	50                   	push   eax
c0017f15:	e8 96 6c ff ff       	call   c000ebb0 <Computer::readCMOS(unsigned char)>
c0017f1a:	83 c4 10             	add    esp,0x10
c0017f1d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017f21:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0017f26:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017f2b:	83 ec 04             	sub    esp,0x4
c0017f2e:	6a 01                	push   0x1
c0017f30:	52                   	push   edx
c0017f31:	50                   	push   eax
c0017f32:	e8 ab 6d ff ff       	call   c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017f37:	83 c4 10             	add    esp,0x10
c0017f3a:	90                   	nop
c0017f3b:	83 c4 1c             	add    esp,0x1c
c0017f3e:	c3                   	ret    
c0017f3f:	90                   	nop

c0017f40 <ACPI::sleep()>:
c0017f40:	83 ec 0c             	sub    esp,0xc
c0017f43:	a1 a0 00 03 c0       	mov    eax,ds:0xc00300a0
c0017f48:	85 c0                	test   eax,eax
c0017f4a:	74 07                	je     c0017f53 <ACPI::sleep()+0x13>
c0017f4c:	a1 a0 00 03 c0       	mov    eax,ds:0xc00300a0
c0017f51:	ff d0                	call   eax
c0017f53:	90                   	nop
c0017f54:	83 c4 0c             	add    esp,0xc
c0017f57:	c3                   	ret    

c0017f58 <ACPI::open(int, int, void*)>:
c0017f58:	57                   	push   edi
c0017f59:	56                   	push   esi
c0017f5a:	53                   	push   ebx
c0017f5b:	81 ec 60 01 00 00    	sub    esp,0x160
c0017f61:	83 ec 0c             	sub    esp,0xc
c0017f64:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0017f6b:	e8 86 fd ff ff       	call   c0017cf6 <ACPI::detectPCI()>
c0017f70:	83 c4 10             	add    esp,0x10
c0017f73:	83 ec 0c             	sub    esp,0xc
c0017f76:	68 20 b2 02 c0       	push   0xc002b220
c0017f7b:	e8 73 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017f80:	83 c4 10             	add    esp,0x10
c0017f83:	83 ec 0c             	sub    esp,0xc
c0017f86:	68 bb b2 02 c0       	push   0xc002b2bb
c0017f8b:	e8 52 46 00 00       	call   c001c5e2 <Thr::loadKernelSymbolTable(char const*)>
c0017f90:	83 c4 10             	add    esp,0x10
c0017f93:	83 ec 0c             	sub    esp,0xc
c0017f96:	68 d9 b2 02 c0       	push   0xc002b2d9
c0017f9b:	e8 53 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017fa0:	83 c4 10             	add    esp,0x10
c0017fa3:	83 ec 04             	sub    esp,0x4
c0017fa6:	6a 0c                	push   0xc
c0017fa8:	68 f4 b2 02 c0       	push   0xc002b2f4
c0017fad:	68 05 b3 02 c0       	push   0xc002b305
c0017fb2:	e8 94 2c 00 00       	call   c001ac4b <Reg::readIntWithDefault(char*, char*, int)>
c0017fb7:	83 c4 10             	add    esp,0x10
c0017fba:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0017fc1:	83 ec 0c             	sub    esp,0xc
c0017fc4:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c0017fcb:	e8 59 94 ff ff       	call   c0011429 <Virt::setupPageSwapping(int)>
c0017fd0:	83 c4 10             	add    esp,0x10
c0017fd3:	83 ec 0c             	sub    esp,0xc
c0017fd6:	68 55 9e 02 c0       	push   0xc0029e55
c0017fdb:	e8 13 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017fe0:	83 c4 10             	add    esp,0x10
c0017fe3:	8b 1d 08 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da08
c0017fe9:	83 ec 08             	sub    esp,0x8
c0017fec:	6a 01                	push   0x1
c0017fee:	68 0c b3 02 c0       	push   0xc002b30c
c0017ff3:	e8 61 50 00 00       	call   c001d059 <Thr::loadDLL(char const*, bool)>
c0017ff8:	83 c4 10             	add    esp,0x10
c0017ffb:	83 ec 08             	sub    esp,0x8
c0017ffe:	53                   	push   ebx
c0017fff:	50                   	push   eax
c0018000:	e8 85 52 00 00       	call   c001d28a <Thr::executeDLL(unsigned long, void*)>
c0018005:	83 c4 10             	add    esp,0x10
c0018008:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c001800f:	83 ec 08             	sub    esp,0x8
c0018012:	6a 12                	push   0x12
c0018014:	50                   	push   eax
c0018015:	e8 c6 be ff ff       	call   c0013ee0 <getDevicesOfType(DeviceType)>
c001801a:	83 c4 0c             	add    esp,0xc
c001801d:	83 ec 0c             	sub    esp,0xc
c0018020:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018027:	50                   	push   eax
c0018028:	e8 87 09 01 00       	call   c00289b4 <LinkedList<Device>::isEmpty()>
c001802d:	83 c4 10             	add    esp,0x10
c0018030:	83 f0 01             	xor    eax,0x1
c0018033:	84 c0                	test   al,al
c0018035:	0f 84 43 01 00 00    	je     c001817e <ACPI::open(int, int, void*)+0x226>
c001803b:	83 ec 0c             	sub    esp,0xc
c001803e:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018045:	50                   	push   eax
c0018046:	e8 85 09 01 00       	call   c00289d0 <LinkedList<Device>::getFirstElement()>
c001804b:	83 c4 10             	add    esp,0x10
c001804e:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0018055:	83 ec 0c             	sub    esp,0xc
c0018058:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001805f:	50                   	push   eax
c0018060:	e8 73 09 01 00       	call   c00289d8 <LinkedList<Device>::removeFirst()>
c0018065:	83 c4 10             	add    esp,0x10
c0018068:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c001806f:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0018076:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c001807d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018081:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0018087:	ba 09 00 00 00       	mov    edx,0x9
c001808c:	fc                   	cld    
c001808d:	89 c7                	mov    edi,eax
c001808f:	89 de                	mov    esi,ebx
c0018091:	89 d1                	mov    ecx,edx
c0018093:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018095:	83 ec 08             	sub    esp,0x8
c0018098:	8d 44 24 38          	lea    eax,[esp+0x38]
c001809c:	50                   	push   eax
c001809d:	83 ec 24             	sub    esp,0x24
c00180a0:	89 e0                	mov    eax,esp
c00180a2:	89 c3                	mov    ebx,eax
c00180a4:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00180a8:	ba 09 00 00 00       	mov    edx,0x9
c00180ad:	89 df                	mov    edi,ebx
c00180af:	89 c6                	mov    esi,eax
c00180b1:	89 d1                	mov    ecx,edx
c00180b3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00180b5:	e8 dc a7 00 00       	call   c0022896 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c00180ba:	83 c4 30             	add    esp,0x30
c00180bd:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c00180c4:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c00180cc:	0f 84 4b ff ff ff    	je     c001801d <ACPI::open(int, int, void*)+0xc5>
c00180d2:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c00180dd:	83 ec 0c             	sub    esp,0xc
c00180e0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00180e7:	e8 ad 74 ff ff       	call   c000f599 <malloc>
c00180ec:	83 c4 10             	add    esp,0x10
c00180ef:	89 c3                	mov    ebx,eax
c00180f1:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c00180f6:	83 ec 04             	sub    esp,0x4
c00180f9:	50                   	push   eax
c00180fa:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018101:	53                   	push   ebx
c0018102:	e8 7b ab ff ff       	call   c0012c82 <File::File(char const*, Process*)>
c0018107:	83 c4 10             	add    esp,0x10
c001810a:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0018111:	83 ec 0c             	sub    esp,0xc
c0018114:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001811b:	e8 34 ae ff ff       	call   c0012f54 <File::exists()>
c0018120:	83 c4 10             	add    esp,0x10
c0018123:	84 c0                	test   al,al
c0018125:	74 27                	je     c001814e <ACPI::open(int, int, void*)+0x1f6>
c0018127:	83 ec 08             	sub    esp,0x8
c001812a:	6a 01                	push   0x1
c001812c:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018133:	e8 21 4f 00 00       	call   c001d059 <Thr::loadDLL(char const*, bool)>
c0018138:	83 c4 10             	add    esp,0x10
c001813b:	83 ec 08             	sub    esp,0x8
c001813e:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018145:	50                   	push   eax
c0018146:	e8 3f 51 00 00       	call   c001d28a <Thr::executeDLL(unsigned long, void*)>
c001814b:	83 c4 10             	add    esp,0x10
c001814e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0018156:	0f 84 c1 fe ff ff    	je     c001801d <ACPI::open(int, int, void*)+0xc5>
c001815c:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0018163:	8b 00                	mov    eax,DWORD PTR [eax]
c0018165:	83 c0 08             	add    eax,0x8
c0018168:	8b 00                	mov    eax,DWORD PTR [eax]
c001816a:	83 ec 0c             	sub    esp,0xc
c001816d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018174:	ff d0                	call   eax
c0018176:	83 c4 10             	add    esp,0x10
c0018179:	e9 9f fe ff ff       	jmp    c001801d <ACPI::open(int, int, void*)+0xc5>
c001817e:	83 ec 0c             	sub    esp,0xc
c0018181:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018188:	50                   	push   eax
c0018189:	e8 24 08 01 00       	call   c00289b2 <LinkedList<Device>::~LinkedList()>
c001818e:	83 c4 10             	add    esp,0x10
c0018191:	8b 1d 08 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da08
c0018197:	83 ec 08             	sub    esp,0x8
c001819a:	6a 01                	push   0x1
c001819c:	68 27 b3 02 c0       	push   0xc002b327
c00181a1:	e8 b3 4e 00 00       	call   c001d059 <Thr::loadDLL(char const*, bool)>
c00181a6:	83 c4 10             	add    esp,0x10
c00181a9:	83 ec 08             	sub    esp,0x8
c00181ac:	53                   	push   ebx
c00181ad:	50                   	push   eax
c00181ae:	e8 d7 50 00 00       	call   c001d28a <Thr::executeDLL(unsigned long, void*)>
c00181b3:	83 c4 10             	add    esp,0x10
c00181b6:	8b 1d 08 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da08
c00181bc:	83 ec 08             	sub    esp,0x8
c00181bf:	6a 01                	push   0x1
c00181c1:	68 44 b3 02 c0       	push   0xc002b344
c00181c6:	e8 8e 4e 00 00       	call   c001d059 <Thr::loadDLL(char const*, bool)>
c00181cb:	83 c4 10             	add    esp,0x10
c00181ce:	83 ec 08             	sub    esp,0x8
c00181d1:	53                   	push   ebx
c00181d2:	50                   	push   eax
c00181d3:	e8 b2 50 00 00       	call   c001d28a <Thr::executeDLL(unsigned long, void*)>
c00181d8:	83 c4 10             	add    esp,0x10
c00181db:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c00181e0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00181e6:	83 e0 04             	and    eax,0x4
c00181e9:	84 c0                	test   al,al
c00181eb:	0f 84 0d 01 00 00    	je     c00182fe <ACPI::open(int, int, void*)+0x3a6>
c00181f1:	83 ec 0c             	sub    esp,0xc
c00181f4:	68 61 b3 02 c0       	push   0xc002b361
c00181f9:	e8 f5 73 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c00181fe:	83 c4 10             	add    esp,0x10
c0018201:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c001820c:	83 ec 0c             	sub    esp,0xc
c001820f:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0018216:	e8 7e 73 ff ff       	call   c000f599 <malloc>
c001821b:	83 c4 10             	add    esp,0x10
c001821e:	89 c3                	mov    ebx,eax
c0018220:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0018225:	83 ec 04             	sub    esp,0x4
c0018228:	50                   	push   eax
c0018229:	68 7e b3 02 c0       	push   0xc002b37e
c001822e:	53                   	push   ebx
c001822f:	e8 4e aa ff ff       	call   c0012c82 <File::File(char const*, Process*)>
c0018234:	83 c4 10             	add    esp,0x10
c0018237:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c001823e:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018246:	74 1a                	je     c0018262 <ACPI::open(int, int, void*)+0x30a>
c0018248:	83 ec 0c             	sub    esp,0xc
c001824b:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018252:	e8 fd ac ff ff       	call   c0012f54 <File::exists()>
c0018257:	83 c4 10             	add    esp,0x10
c001825a:	84 c0                	test   al,al
c001825c:	74 04                	je     c0018262 <ACPI::open(int, int, void*)+0x30a>
c001825e:	b0 01                	mov    al,0x1
c0018260:	eb 02                	jmp    c0018264 <ACPI::open(int, int, void*)+0x30c>
c0018262:	b0 00                	mov    al,0x0
c0018264:	84 c0                	test   al,al
c0018266:	74 25                	je     c001828d <ACPI::open(int, int, void*)+0x335>
c0018268:	83 ec 08             	sub    esp,0x8
c001826b:	6a 01                	push   0x1
c001826d:	68 7e b3 02 c0       	push   0xc002b37e
c0018272:	e8 e2 4d 00 00       	call   c001d059 <Thr::loadDLL(char const*, bool)>
c0018277:	83 c4 10             	add    esp,0x10
c001827a:	83 ec 08             	sub    esp,0x8
c001827d:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c0018284:	50                   	push   eax
c0018285:	e8 00 50 00 00       	call   c001d28a <Thr::executeDLL(unsigned long, void*)>
c001828a:	83 c4 10             	add    esp,0x10
c001828d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018295:	74 27                	je     c00182be <ACPI::open(int, int, void*)+0x366>
c0018297:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001829f:	74 1d                	je     c00182be <ACPI::open(int, int, void*)+0x366>
c00182a1:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c00182a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00182aa:	83 c0 08             	add    eax,0x8
c00182ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00182af:	83 ec 0c             	sub    esp,0xc
c00182b2:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00182b9:	ff d0                	call   eax
c00182bb:	83 c4 10             	add    esp,0x10
c00182be:	a1 c8 02 03 c0       	mov    eax,ds:0xc00302c8
c00182c3:	83 ec 08             	sub    esp,0x8
c00182c6:	68 9b b3 02 c0       	push   0xc002b39b
c00182cb:	50                   	push   eax
c00182cc:	e8 43 f3 ff ff       	call   c0017614 <findDataTable(unsigned char*, char*)>
c00182d1:	83 c4 10             	add    esp,0x10
c00182d4:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c00182db:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c00182e3:	74 19                	je     c00182fe <ACPI::open(int, int, void*)+0x3a6>
c00182e5:	83 ec 08             	sub    esp,0x8
c00182e8:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00182ef:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c00182f6:	e8 fd fb ff ff       	call   c0017ef8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00182fb:	83 c4 10             	add    esp,0x10
c00182fe:	b8 00 00 00 00       	mov    eax,0x0
c0018303:	81 c4 60 01 00 00    	add    esp,0x160
c0018309:	5b                   	pop    ebx
c001830a:	5e                   	pop    esi
c001830b:	5f                   	pop    edi
c001830c:	c3                   	ret    
c001830d:	90                   	nop

c001830e <CPU::close(int, int, void*)>:
c001830e:	31 c0                	xor    eax,eax
c0018310:	c3                   	ret    
c0018311:	90                   	nop

c0018312 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018312:	55                   	push   ebp
c0018313:	57                   	push   edi
c0018314:	56                   	push   esi
c0018315:	53                   	push   ebx
c0018316:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001831a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001831e:	89 ce                	mov    esi,ecx
c0018320:	89 d5                	mov    ebp,edx
c0018322:	80 f9 04             	cmp    cl,0x4
c0018325:	75 28                	jne    c001834f <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018327:	8d 42 f9             	lea    eax,[edx-0x7]
c001832a:	3c 03                	cmp    al,0x3
c001832c:	0f 86 63 01 00 00    	jbe    c0018495 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018332:	80 fa 03             	cmp    dl,0x3
c0018335:	0f 84 5a 01 00 00    	je     c0018495 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001833b:	8d 7a f2             	lea    edi,[edx-0xe]
c001833e:	b8 30 ce 02 c0       	mov    eax,0xc002ce30
c0018343:	89 fb                	mov    ebx,edi
c0018345:	80 fb 01             	cmp    bl,0x1
c0018348:	77 4e                	ja     c0018398 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c001834a:	e9 52 01 00 00       	jmp    c00184a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001834f:	80 f9 05             	cmp    cl,0x5
c0018352:	75 4d                	jne    c00183a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018354:	b8 40 ce 02 c0       	mov    eax,0xc002ce40
c0018359:	80 fa 03             	cmp    dl,0x3
c001835c:	0f 86 3f 01 00 00    	jbe    c00184a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018362:	8d 7a fa             	lea    edi,[edx-0x6]
c0018365:	b8 50 ce 02 c0       	mov    eax,0xc002ce50
c001836a:	89 fb                	mov    ebx,edi
c001836c:	80 fb 01             	cmp    bl,0x1
c001836f:	0f 86 2c 01 00 00    	jbe    c00184a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018375:	b8 60 ce 02 c0       	mov    eax,0xc002ce60
c001837a:	80 fa 08             	cmp    dl,0x8
c001837d:	0f 84 1e 01 00 00    	je     c00184a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018383:	89 d7                	mov    edi,edx
c0018385:	b8 70 ce 02 c0       	mov    eax,0xc002ce70
c001838a:	83 e7 fb             	and    edi,0xfffffffb
c001838d:	89 fb                	mov    ebx,edi
c001838f:	80 fb 09             	cmp    bl,0x9
c0018392:	0f 84 09 01 00 00    	je     c00184a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018398:	31 c0                	xor    eax,eax
c001839a:	89 eb                	mov    ebx,ebp
c001839c:	0f b6 fb             	movzx  edi,bl
c001839f:	eb 30                	jmp    c00183d1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00183a1:	31 c0                	xor    eax,eax
c00183a3:	80 f9 06             	cmp    cl,0x6
c00183a6:	75 f2                	jne    c001839a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00183a8:	80 fa 0a             	cmp    dl,0xa
c00183ab:	77 ed                	ja     c001839a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00183ad:	bf de 05 00 00       	mov    edi,0x5de
c00183b2:	0f a3 d7             	bt     edi,edx
c00183b5:	73 e3                	jae    c001839a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00183b7:	b8 80 ce 02 c0       	mov    eax,0xc002ce80
c00183bc:	e9 e0 00 00 00       	jmp    c00184a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183c1:	39 c7                	cmp    edi,eax
c00183c3:	0f 84 d3 00 00 00    	je     c001849c <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00183c9:	40                   	inc    eax
c00183ca:	3d d0 00 00 00       	cmp    eax,0xd0
c00183cf:	74 09                	je     c00183da <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00183d1:	89 f3                	mov    ebx,esi
c00183d3:	80 fb 0f             	cmp    bl,0xf
c00183d6:	75 f1                	jne    c00183c9 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00183d8:	eb e7                	jmp    c00183c1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00183da:	80 f9 10             	cmp    cl,0x10
c00183dd:	75 14                	jne    c00183f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00183df:	8d 42 fc             	lea    eax,[edx-0x4]
c00183e2:	83 e0 fb             	and    eax,0xfffffffb
c00183e5:	3c 02                	cmp    al,0x2
c00183e7:	76 34                	jbe    c001841d <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00183e9:	b8 21 b5 02 c0       	mov    eax,0xc002b521
c00183ee:	80 fa 02             	cmp    dl,0x2
c00183f1:	eb 24                	jmp    c0018417 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00183f3:	80 f9 11             	cmp    cl,0x11
c00183f6:	75 13                	jne    c001840b <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00183f8:	b8 21 b5 02 c0       	mov    eax,0xc002b521
c00183fd:	80 fa 03             	cmp    dl,0x3
c0018400:	0f 85 9b 00 00 00    	jne    c00184a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018406:	e9 91 00 00 00       	jmp    c001849c <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001840b:	80 f9 12             	cmp    cl,0x12
c001840e:	75 14                	jne    c0018424 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018410:	b8 21 b5 02 c0       	mov    eax,0xc002b521
c0018415:	fe ca                	dec    dl
c0018417:	0f 85 84 00 00 00    	jne    c00184a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001841d:	b8 a0 ce 02 c0       	mov    eax,0xc002cea0
c0018422:	eb 7d                	jmp    c00184a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018424:	80 f9 14             	cmp    cl,0x14
c0018427:	75 12                	jne    c001843b <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018429:	4a                   	dec    edx
c001842a:	b8 21 b5 02 c0       	mov    eax,0xc002b521
c001842f:	80 fa 01             	cmp    dl,0x1
c0018432:	77 6d                	ja     c00184a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018434:	b8 b0 ce 02 c0       	mov    eax,0xc002ceb0
c0018439:	eb 66                	jmp    c00184a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001843b:	80 f9 15             	cmp    cl,0x15
c001843e:	75 31                	jne    c0018471 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018440:	b8 c0 ce 02 c0       	mov    eax,0xc002cec0
c0018445:	80 fa 01             	cmp    dl,0x1
c0018448:	74 57                	je     c00184a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001844a:	b8 21 b5 02 c0       	mov    eax,0xc002b521
c001844f:	80 fa 13             	cmp    dl,0x13
c0018452:	76 0c                	jbe    c0018460 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018454:	80 fa 30             	cmp    dl,0x30
c0018457:	75 48                	jne    c00184a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018459:	b8 e0 ce 02 c0       	mov    eax,0xc002cee0
c001845e:	eb 41                	jmp    c00184a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018460:	b9 04 00 09 00       	mov    ecx,0x90004
c0018465:	0f a3 d1             	bt     ecx,edx
c0018468:	73 37                	jae    c00184a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001846a:	b8 d0 ce 02 c0       	mov    eax,0xc002ced0
c001846f:	eb 30                	jmp    c00184a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018471:	b8 21 b5 02 c0       	mov    eax,0xc002b521
c0018476:	80 f9 16             	cmp    cl,0x16
c0018479:	75 26                	jne    c00184a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001847b:	b8 f0 ce 02 c0       	mov    eax,0xc002cef0
c0018480:	84 d2                	test   dl,dl
c0018482:	74 1d                	je     c00184a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018484:	b8 21 b5 02 c0       	mov    eax,0xc002b521
c0018489:	80 fa 30             	cmp    dl,0x30
c001848c:	75 13                	jne    c00184a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001848e:	b8 00 cf 02 c0       	mov    eax,0xc002cf00
c0018493:	eb 0c                	jmp    c00184a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018495:	b8 20 ce 02 c0       	mov    eax,0xc002ce20
c001849a:	eb 05                	jmp    c00184a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001849c:	b8 90 ce 02 c0       	mov    eax,0xc002ce90
c00184a1:	5b                   	pop    ebx
c00184a2:	5e                   	pop    esi
c00184a3:	5f                   	pop    edi
c00184a4:	5d                   	pop    ebp
c00184a5:	c3                   	ret    

c00184a6 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00184a6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00184aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00184ae:	80 f9 04             	cmp    cl,0x4
c00184b1:	75 6b                	jne    c001851e <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00184b3:	b8 80 cc 02 c0       	mov    eax,0xc002cc80
c00184b8:	80 fa 01             	cmp    dl,0x1
c00184bb:	0f 86 92 02 00 00    	jbe    c0018753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184c1:	b8 90 cc 02 c0       	mov    eax,0xc002cc90
c00184c6:	80 fa 02             	cmp    dl,0x2
c00184c9:	0f 84 84 02 00 00    	je     c0018753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184cf:	b8 a0 cc 02 c0       	mov    eax,0xc002cca0
c00184d4:	80 fa 03             	cmp    dl,0x3
c00184d7:	0f 84 76 02 00 00    	je     c0018753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184dd:	b8 b0 cc 02 c0       	mov    eax,0xc002ccb0
c00184e2:	80 fa 04             	cmp    dl,0x4
c00184e5:	0f 84 68 02 00 00    	je     c0018753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184eb:	b8 c0 cc 02 c0       	mov    eax,0xc002ccc0
c00184f0:	80 fa 05             	cmp    dl,0x5
c00184f3:	0f 84 5a 02 00 00    	je     c0018753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184f9:	b8 a0 cc 02 c0       	mov    eax,0xc002cca0
c00184fe:	80 fa 07             	cmp    dl,0x7
c0018501:	0f 84 4c 02 00 00    	je     c0018753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018507:	83 ea 08             	sub    edx,0x8
c001850a:	b8 21 b5 02 c0       	mov    eax,0xc002b521
c001850f:	80 fa 01             	cmp    dl,0x1
c0018512:	0f 87 3b 02 00 00    	ja     c0018753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018518:	b8 d0 cc 02 c0       	mov    eax,0xc002ccd0
c001851d:	c3                   	ret    
c001851e:	80 f9 05             	cmp    cl,0x5
c0018521:	75 45                	jne    c0018568 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018523:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018526:	b8 e0 cc 02 c0       	mov    eax,0xc002cce0
c001852b:	80 f9 02             	cmp    cl,0x2
c001852e:	0f 86 1f 02 00 00    	jbe    c0018753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018534:	80 fa 04             	cmp    dl,0x4
c0018537:	0f 84 f3 01 00 00    	je     c0018730 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c001853d:	80 fa 07             	cmp    dl,0x7
c0018540:	0f 84 0d 02 00 00    	je     c0018753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018546:	b8 f0 cc 02 c0       	mov    eax,0xc002ccf0
c001854b:	80 fa 08             	cmp    dl,0x8
c001854e:	0f 84 ff 01 00 00    	je     c0018753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018554:	b8 21 b5 02 c0       	mov    eax,0xc002b521
c0018559:	80 fa 09             	cmp    dl,0x9
c001855c:	0f 85 f1 01 00 00    	jne    c0018753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018562:	b8 00 cd 02 c0       	mov    eax,0xc002cd00
c0018567:	c3                   	ret    
c0018568:	80 f9 06             	cmp    cl,0x6
c001856b:	0f 85 85 01 00 00    	jne    c00186f6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018571:	b8 10 cd 02 c0       	mov    eax,0xc002cd10
c0018576:	80 fa 01             	cmp    dl,0x1
c0018579:	0f 84 d4 01 00 00    	je     c0018753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001857f:	8d 42 fb             	lea    eax,[edx-0x5]
c0018582:	3c 01                	cmp    al,0x1
c0018584:	0f 86 ac 01 00 00    	jbe    c0018736 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001858a:	80 fa 03             	cmp    dl,0x3
c001858d:	0f 84 a3 01 00 00    	je     c0018736 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018593:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018596:	b8 30 cd 02 c0       	mov    eax,0xc002cd30
c001859b:	80 f9 01             	cmp    cl,0x1
c001859e:	0f 86 af 01 00 00    	jbe    c0018753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185a4:	80 fa 09             	cmp    dl,0x9
c00185a7:	0f 84 8f 01 00 00    	je     c001873c <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00185ad:	8d 4a f6             	lea    ecx,[edx-0xa]
c00185b0:	80 f9 01             	cmp    cl,0x1
c00185b3:	0f 86 9a 01 00 00    	jbe    c0018753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185b9:	b8 40 cd 02 c0       	mov    eax,0xc002cd40
c00185be:	80 fa 0d             	cmp    dl,0xd
c00185c1:	0f 84 8c 01 00 00    	je     c0018753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185c7:	b8 50 cd 02 c0       	mov    eax,0xc002cd50
c00185cc:	80 fa 0e             	cmp    dl,0xe
c00185cf:	0f 84 7e 01 00 00    	je     c0018753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185d5:	b8 60 cd 02 c0       	mov    eax,0xc002cd60
c00185da:	80 fa 0f             	cmp    dl,0xf
c00185dd:	0f 84 70 01 00 00    	je     c0018753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185e3:	b8 40 cd 02 c0       	mov    eax,0xc002cd40
c00185e8:	80 fa 15             	cmp    dl,0x15
c00185eb:	0f 84 62 01 00 00    	je     c0018753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185f1:	8d 4a ea             	lea    ecx,[edx-0x16]
c00185f4:	b8 60 cd 02 c0       	mov    eax,0xc002cd60
c00185f9:	80 f9 01             	cmp    cl,0x1
c00185fc:	0f 86 51 01 00 00    	jbe    c0018753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018602:	80 fa 1a             	cmp    dl,0x1a
c0018605:	0f 84 37 01 00 00    	je     c0018742 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c001860b:	80 fa 1c             	cmp    dl,0x1c
c001860e:	0f 84 34 01 00 00    	je     c0018748 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018614:	80 fa 1d             	cmp    dl,0x1d
c0018617:	0f 84 36 01 00 00    	je     c0018753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001861d:	b8 90 cd 02 c0       	mov    eax,0xc002cd90
c0018622:	80 fa 25             	cmp    dl,0x25
c0018625:	0f 84 28 01 00 00    	je     c0018753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001862b:	8d 4a da             	lea    ecx,[edx-0x26]
c001862e:	b8 80 cd 02 c0       	mov    eax,0xc002cd80
c0018633:	80 f9 01             	cmp    cl,0x1
c0018636:	0f 86 17 01 00 00    	jbe    c0018753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001863c:	b8 a0 cd 02 c0       	mov    eax,0xc002cda0
c0018641:	80 fa 2a             	cmp    dl,0x2a
c0018644:	0f 84 09 01 00 00    	je     c0018753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001864a:	b8 90 cd 02 c0       	mov    eax,0xc002cd90
c001864f:	80 fa 2c             	cmp    dl,0x2c
c0018652:	0f 84 fb 00 00 00    	je     c0018753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018658:	b8 a0 cd 02 c0       	mov    eax,0xc002cda0
c001865d:	80 fa 2d             	cmp    dl,0x2d
c0018660:	0f 84 ed 00 00 00    	je     c0018753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018666:	b8 70 cd 02 c0       	mov    eax,0xc002cd70
c001866b:	80 fa 2e             	cmp    dl,0x2e
c001866e:	0f 84 df 00 00 00    	je     c0018753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018674:	b8 90 cd 02 c0       	mov    eax,0xc002cd90
c0018679:	80 fa 2f             	cmp    dl,0x2f
c001867c:	0f 84 d1 00 00 00    	je     c0018753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018682:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018685:	b8 80 cd 02 c0       	mov    eax,0xc002cd80
c001868a:	80 f9 01             	cmp    cl,0x1
c001868d:	0f 86 c0 00 00 00    	jbe    c0018753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018693:	b8 b0 cd 02 c0       	mov    eax,0xc002cdb0
c0018698:	80 fa 37             	cmp    dl,0x37
c001869b:	0f 84 b2 00 00 00    	je     c0018753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186a1:	b8 c0 cd 02 c0       	mov    eax,0xc002cdc0
c00186a6:	80 fa 3a             	cmp    dl,0x3a
c00186a9:	0f 84 a4 00 00 00    	je     c0018753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186af:	b8 d0 cd 02 c0       	mov    eax,0xc002cdd0
c00186b4:	80 fa 3c             	cmp    dl,0x3c
c00186b7:	0f 84 96 00 00 00    	je     c0018753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186bd:	b8 e0 cd 02 c0       	mov    eax,0xc002cde0
c00186c2:	80 fa 3d             	cmp    dl,0x3d
c00186c5:	0f 84 88 00 00 00    	je     c0018753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186cb:	b8 c0 cd 02 c0       	mov    eax,0xc002cdc0
c00186d0:	80 fa 3e             	cmp    dl,0x3e
c00186d3:	74 7e                	je     c0018753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186d5:	8d 42 bb             	lea    eax,[edx-0x45]
c00186d8:	3c 01                	cmp    al,0x1
c00186da:	76 72                	jbe    c001874e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00186dc:	80 fa 3f             	cmp    dl,0x3f
c00186df:	74 6d                	je     c001874e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00186e1:	80 fa 4a             	cmp    dl,0x4a
c00186e4:	74 0a                	je     c00186f0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c00186e6:	b8 21 b5 02 c0       	mov    eax,0xc002b521
c00186eb:	80 fa 4d             	cmp    dl,0x4d
c00186ee:	75 63                	jne    c0018753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186f0:	b8 b0 cd 02 c0       	mov    eax,0xc002cdb0
c00186f5:	c3                   	ret    
c00186f6:	b8 21 b5 02 c0       	mov    eax,0xc002b521
c00186fb:	80 f9 0b             	cmp    cl,0xb
c00186fe:	75 0a                	jne    c001870a <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018700:	fe ca                	dec    dl
c0018702:	75 4f                	jne    c0018753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018704:	b8 f0 cd 02 c0       	mov    eax,0xc002cdf0
c0018709:	c3                   	ret    
c001870a:	80 f9 0f             	cmp    cl,0xf
c001870d:	75 44                	jne    c0018753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001870f:	b8 00 ce 02 c0       	mov    eax,0xc002ce00
c0018714:	80 fa 02             	cmp    dl,0x2
c0018717:	76 3a                	jbe    c0018753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018719:	8d 42 fd             	lea    eax,[edx-0x3]
c001871c:	3c 01                	cmp    al,0x1
c001871e:	76 0a                	jbe    c001872a <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018720:	b8 21 b5 02 c0       	mov    eax,0xc002b521
c0018725:	80 fa 06             	cmp    dl,0x6
c0018728:	75 29                	jne    c0018753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001872a:	b8 10 ce 02 c0       	mov    eax,0xc002ce10
c001872f:	c3                   	ret    
c0018730:	b8 f0 cc 02 c0       	mov    eax,0xc002ccf0
c0018735:	c3                   	ret    
c0018736:	b8 20 cd 02 c0       	mov    eax,0xc002cd20
c001873b:	c3                   	ret    
c001873c:	b8 40 cd 02 c0       	mov    eax,0xc002cd40
c0018741:	c3                   	ret    
c0018742:	b8 70 cd 02 c0       	mov    eax,0xc002cd70
c0018747:	c3                   	ret    
c0018748:	b8 80 cd 02 c0       	mov    eax,0xc002cd80
c001874d:	c3                   	ret    
c001874e:	b8 d0 cd 02 c0       	mov    eax,0xc002cdd0
c0018753:	c3                   	ret    

c0018754 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018754:	60                   	pusha  
c0018755:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001875d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018761:	9c                   	pushf  
c0018762:	fa                   	cli    
c0018763:	0f 09                	wbinvd 
c0018765:	0f 30                	wrmsr  
c0018767:	9d                   	popf   
c0018768:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001876c:	89 02                	mov    DWORD PTR [edx],eax
c001876e:	61                   	popa   
c001876f:	c3                   	ret    

c0018770 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018770:	60                   	pusha  
c0018771:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018775:	9c                   	pushf  
c0018776:	fa                   	cli    
c0018777:	0f 09                	wbinvd 
c0018779:	31 c0                	xor    eax,eax
c001877b:	31 d2                	xor    edx,edx
c001877d:	0f 32                	rdmsr  
c001877f:	9d                   	popf   
c0018780:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018784:	89 02                	mov    DWORD PTR [edx],eax
c0018786:	61                   	popa   
c0018787:	c3                   	ret    

c0018788 <CPU::AMD_K6_writeback(int, int, int)>:
c0018788:	56                   	push   esi
c0018789:	53                   	push   ebx
c001878a:	83 ec 10             	sub    esp,0x10
c001878d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018791:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018796:	75 5d                	jne    c00187f5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018798:	83 f8 08             	cmp    eax,0x8
c001879b:	75 09                	jne    c00187a6 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001879d:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00187a2:	7e 13                	jle    c00187b7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00187a4:	eb 30                	jmp    c00187d6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00187a6:	83 f8 06             	cmp    eax,0x6
c00187a9:	7c 4a                	jl     c00187f5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00187ab:	83 f8 07             	cmp    eax,0x7
c00187ae:	7e 07                	jle    c00187b7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00187b0:	83 f8 09             	cmp    eax,0x9
c00187b3:	74 21                	je     c00187d6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00187b5:	eb 3e                	jmp    c00187f5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00187b7:	89 e6                	mov    esi,esp
c00187b9:	8b 1d 48 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da48
c00187bf:	56                   	push   esi
c00187c0:	c1 eb 15             	shr    ebx,0x15
c00187c3:	68 82 00 00 c0       	push   0xc0000082
c00187c8:	83 e3 7e             	and    ebx,0x7e
c00187cb:	e8 a0 ff ff ff       	call   c0018770 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00187d0:	56                   	push   esi
c00187d1:	6a 00                	push   0x0
c00187d3:	53                   	push   ebx
c00187d4:	eb 12                	jmp    c00187e8 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00187d6:	89 e3                	mov    ebx,esp
c00187d8:	53                   	push   ebx
c00187d9:	68 82 00 00 c0       	push   0xc0000082
c00187de:	e8 8d ff ff ff       	call   c0018770 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00187e3:	53                   	push   ebx
c00187e4:	6a 00                	push   0x0
c00187e6:	6a 00                	push   0x0
c00187e8:	68 82 00 00 c0       	push   0xc0000082
c00187ed:	e8 62 ff ff ff       	call   c0018754 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00187f2:	83 c4 18             	add    esp,0x18
c00187f5:	83 c4 10             	add    esp,0x10
c00187f8:	5b                   	pop    ebx
c00187f9:	5e                   	pop    esi
c00187fa:	c3                   	ret    
c00187fb:	90                   	nop

c00187fc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00187fc:	55                   	push   ebp
c00187fd:	57                   	push   edi
c00187fe:	56                   	push   esi
c00187ff:	53                   	push   ebx
c0018800:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018804:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018808:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001880c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018810:	39 05 20 cf 02 c0    	cmp    DWORD PTR ds:0xc002cf20,eax
c0018816:	75 23                	jne    c001883b <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018818:	a1 2c 05 03 c0       	mov    eax,ds:0xc003052c
c001881d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018821:	89 06                	mov    DWORD PTR [esi],eax
c0018823:	a1 28 05 03 c0       	mov    eax,ds:0xc0030528
c0018828:	89 07                	mov    DWORD PTR [edi],eax
c001882a:	a1 24 05 03 c0       	mov    eax,ds:0xc0030524
c001882f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018832:	a1 20 05 03 c0       	mov    eax,ds:0xc0030520
c0018837:	89 02                	mov    DWORD PTR [edx],eax
c0018839:	eb 3f                	jmp    c001887a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001883b:	31 c9                	xor    ecx,ecx
c001883d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018841:	0f a2                	cpuid  
c0018843:	89 06                	mov    DWORD PTR [esi],eax
c0018845:	89 1f                	mov    DWORD PTR [edi],ebx
c0018847:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001884b:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001884e:	89 10                	mov    DWORD PTR [eax],edx
c0018850:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018854:	a3 20 cf 02 c0       	mov    ds:0xc002cf20,eax
c0018859:	8b 06                	mov    eax,DWORD PTR [esi]
c001885b:	a3 2c 05 03 c0       	mov    ds:0xc003052c,eax
c0018860:	8b 07                	mov    eax,DWORD PTR [edi]
c0018862:	a3 28 05 03 c0       	mov    ds:0xc0030528,eax
c0018867:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001886a:	a3 24 05 03 c0       	mov    ds:0xc0030524,eax
c001886f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018873:	8b 00                	mov    eax,DWORD PTR [eax]
c0018875:	a3 20 05 03 c0       	mov    ds:0xc0030520,eax
c001887a:	5b                   	pop    ebx
c001887b:	5e                   	pop    esi
c001887c:	5f                   	pop    edi
c001887d:	5d                   	pop    ebp
c001887e:	c3                   	ret    
c001887f:	90                   	nop

c0018880 <CPU::cpuidCheckEDX(unsigned int)>:
c0018880:	83 ec 10             	sub    esp,0x10
c0018883:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018887:	50                   	push   eax
c0018888:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001888c:	50                   	push   eax
c001888d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018891:	50                   	push   eax
c0018892:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018896:	50                   	push   eax
c0018897:	6a 01                	push   0x1
c0018899:	e8 5e ff ff ff       	call   c00187fc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001889e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188a2:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00188a6:	0f 95 c0             	setne  al
c00188a9:	83 c4 24             	add    esp,0x24
c00188ac:	c3                   	ret    
c00188ad:	90                   	nop

c00188ae <CPU::cpuidCheckECX(unsigned int)>:
c00188ae:	83 ec 10             	sub    esp,0x10
c00188b1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188b5:	50                   	push   eax
c00188b6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188ba:	50                   	push   eax
c00188bb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188bf:	50                   	push   eax
c00188c0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188c4:	50                   	push   eax
c00188c5:	6a 01                	push   0x1
c00188c7:	e8 30 ff ff ff       	call   c00187fc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188d0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00188d4:	0f 95 c0             	setne  al
c00188d7:	83 c4 24             	add    esp,0x24
c00188da:	c3                   	ret    
c00188db:	90                   	nop

c00188dc <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00188dc:	83 ec 10             	sub    esp,0x10
c00188df:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188e3:	50                   	push   eax
c00188e4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188e8:	50                   	push   eax
c00188e9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188ed:	50                   	push   eax
c00188ee:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188f2:	50                   	push   eax
c00188f3:	6a 07                	push   0x7
c00188f5:	e8 02 ff ff ff       	call   c00187fc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188fe:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018902:	0f 95 c0             	setne  al
c0018905:	83 c4 24             	add    esp,0x24
c0018908:	c3                   	ret    
c0018909:	90                   	nop

c001890a <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001890a:	83 ec 10             	sub    esp,0x10
c001890d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018911:	50                   	push   eax
c0018912:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018916:	50                   	push   eax
c0018917:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001891b:	50                   	push   eax
c001891c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018920:	50                   	push   eax
c0018921:	6a 07                	push   0x7
c0018923:	e8 d4 fe ff ff       	call   c00187fc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018928:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001892c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018930:	0f 95 c0             	setne  al
c0018933:	83 c4 24             	add    esp,0x24
c0018936:	c3                   	ret    
c0018937:	90                   	nop

c0018938 <CPU::CPU()>:
c0018938:	83 ec 0c             	sub    esp,0xc
c001893b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001893f:	83 ec 08             	sub    esp,0x8
c0018942:	68 21 b5 02 c0       	push   0xc002b521
c0018947:	50                   	push   eax
c0018948:	e8 13 b4 ff ff       	call   c0013d60 <Device::Device(char const*)>
c001894d:	83 c4 10             	add    esp,0x10
c0018950:	ba f8 b5 02 c0       	mov    edx,0xc002b5f8
c0018955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018959:	89 10                	mov    DWORD PTR [eax],edx
c001895b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001895f:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018969:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001896d:	05 78 01 00 00       	add    eax,0x178
c0018972:	83 ec 0c             	sub    esp,0xc
c0018975:	50                   	push   eax
c0018976:	e8 51 64 ff ff       	call   c000edcc <GDT::GDT()>
c001897b:	83 c4 10             	add    esp,0x10
c001897e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018982:	05 7c 09 00 00       	add    eax,0x97c
c0018987:	83 ec 0c             	sub    esp,0xc
c001898a:	50                   	push   eax
c001898b:	e8 8c 66 ff ff       	call   c000f01c <IDT::IDT()>
c0018990:	83 c4 10             	add    esp,0x10
c0018993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018997:	05 7c 11 00 00       	add    eax,0x117c
c001899c:	83 ec 0c             	sub    esp,0xc
c001899f:	50                   	push   eax
c00189a0:	e8 c1 81 ff ff       	call   c0010b66 <TSS::TSS()>
c00189a5:	83 c4 10             	add    esp,0x10
c00189a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189ac:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00189b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189b7:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00189c1:	90                   	nop
c00189c2:	83 c4 0c             	add    esp,0xc
c00189c5:	c3                   	ret    

c00189c6 <CPU::displayFeatures()>:
c00189c6:	c3                   	ret    
c00189c7:	90                   	nop

c00189c8 <CPU::detectFeatures()>:
c00189c8:	55                   	push   ebp
c00189c9:	57                   	push   edi
c00189ca:	56                   	push   esi
c00189cb:	53                   	push   ebx
c00189cc:	83 ec 50             	sub    esp,0x50
c00189cf:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00189d3:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00189dd:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00189e4:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c00189ea:	6a 0d                	push   0xd
c00189ec:	6a 00                	push   0x0
c00189ee:	55                   	push   ebp
c00189ef:	e8 5c 7d fe ff       	call   c0000750 <memset>
c00189f4:	83 c4 10             	add    esp,0x10
c00189f7:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c00189fc:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018a03:	0f 84 22 09 00 00    	je     c001932b <CPU::detectFeatures()+0x963>
c0018a09:	83 ec 0c             	sub    esp,0xc
c0018a0c:	89 ef                	mov    edi,ebp
c0018a0e:	6a 10                	push   0x10
c0018a10:	e8 6b fe ff ff       	call   c0018880 <CPU::cpuidCheckEDX(unsigned int)>
c0018a15:	83 e0 01             	and    eax,0x1
c0018a18:	8d 14 00             	lea    edx,[eax+eax*1]
c0018a1b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a21:	83 e0 fd             	and    eax,0xfffffffd
c0018a24:	09 d0                	or     eax,edx
c0018a26:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a2c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018a33:	e8 48 fe ff ff       	call   c0018880 <CPU::cpuidCheckEDX(unsigned int)>
c0018a38:	83 e0 01             	and    eax,0x1
c0018a3b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018a42:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a48:	83 e0 fb             	and    eax,0xfffffffb
c0018a4b:	09 d0                	or     eax,edx
c0018a4d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a53:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018a5a:	e8 21 fe ff ff       	call   c0018880 <CPU::cpuidCheckEDX(unsigned int)>
c0018a5f:	83 e0 01             	and    eax,0x1
c0018a62:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018a69:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a6f:	83 e0 f7             	and    eax,0xfffffff7
c0018a72:	09 d0                	or     eax,edx
c0018a74:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a7a:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018a81:	e8 fa fd ff ff       	call   c0018880 <CPU::cpuidCheckEDX(unsigned int)>
c0018a86:	83 e0 01             	and    eax,0x1
c0018a89:	c1 e0 04             	shl    eax,0x4
c0018a8c:	88 c2                	mov    dl,al
c0018a8e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a94:	83 e0 ef             	and    eax,0xffffffef
c0018a97:	09 d0                	or     eax,edx
c0018a99:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a9f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018aa6:	e8 d5 fd ff ff       	call   c0018880 <CPU::cpuidCheckEDX(unsigned int)>
c0018aab:	83 e0 01             	and    eax,0x1
c0018aae:	c1 e0 05             	shl    eax,0x5
c0018ab1:	88 c2                	mov    dl,al
c0018ab3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018ab9:	83 e0 df             	and    eax,0xffffffdf
c0018abc:	09 d0                	or     eax,edx
c0018abe:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ac4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018acb:	e8 b0 fd ff ff       	call   c0018880 <CPU::cpuidCheckEDX(unsigned int)>
c0018ad0:	83 e0 01             	and    eax,0x1
c0018ad3:	8d 14 00             	lea    edx,[eax+eax*1]
c0018ad6:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018adc:	83 e0 fd             	and    eax,0xfffffffd
c0018adf:	09 d0                	or     eax,edx
c0018ae1:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018ae7:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018aee:	e8 8d fd ff ff       	call   c0018880 <CPU::cpuidCheckEDX(unsigned int)>
c0018af3:	83 e0 01             	and    eax,0x1
c0018af6:	c1 e0 06             	shl    eax,0x6
c0018af9:	88 c2                	mov    dl,al
c0018afb:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018b01:	83 e0 bf             	and    eax,0xffffffbf
c0018b04:	09 d0                	or     eax,edx
c0018b06:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018b0c:	58                   	pop    eax
c0018b0d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018b11:	50                   	push   eax
c0018b12:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018b16:	50                   	push   eax
c0018b17:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018b1b:	56                   	push   esi
c0018b1c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018b20:	50                   	push   eax
c0018b21:	6a 00                	push   0x0
c0018b23:	e8 d4 fc ff ff       	call   c00187fc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018b28:	b8 04 00 00 00       	mov    eax,0x4
c0018b2d:	89 c1                	mov    ecx,eax
c0018b2f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018b31:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0018b37:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0018b3b:	89 c1                	mov    ecx,eax
c0018b3d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018b3f:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0018b45:	8d 74 24 38          	lea    esi,[esp+0x38]
c0018b49:	89 c1                	mov    ecx,eax
c0018b4b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018b4d:	83 c4 18             	add    esp,0x18
c0018b50:	68 cc b3 02 c0       	push   0xc002b3cc
c0018b55:	55                   	push   ebp
c0018b56:	e8 3d 7d fe ff       	call   c0000898 <strcmp>
c0018b5b:	83 c4 10             	add    esp,0x10
c0018b5e:	85 c0                	test   eax,eax
c0018b60:	75 0f                	jne    c0018b71 <CPU::detectFeatures()+0x1a9>
c0018b62:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018b6c:	e9 22 02 00 00       	jmp    c0018d93 <CPU::detectFeatures()+0x3cb>
c0018b71:	50                   	push   eax
c0018b72:	50                   	push   eax
c0018b73:	68 d9 b3 02 c0       	push   0xc002b3d9
c0018b78:	55                   	push   ebp
c0018b79:	e8 1a 7d fe ff       	call   c0000898 <strcmp>
c0018b7e:	83 c4 10             	add    esp,0x10
c0018b81:	85 c0                	test   eax,eax
c0018b83:	74 dd                	je     c0018b62 <CPU::detectFeatures()+0x19a>
c0018b85:	50                   	push   eax
c0018b86:	50                   	push   eax
c0018b87:	68 e6 b3 02 c0       	push   0xc002b3e6
c0018b8c:	55                   	push   ebp
c0018b8d:	e8 06 7d fe ff       	call   c0000898 <strcmp>
c0018b92:	83 c4 10             	add    esp,0x10
c0018b95:	85 c0                	test   eax,eax
c0018b97:	74 2a                	je     c0018bc3 <CPU::detectFeatures()+0x1fb>
c0018b99:	50                   	push   eax
c0018b9a:	50                   	push   eax
c0018b9b:	68 f3 b3 02 c0       	push   0xc002b3f3
c0018ba0:	55                   	push   ebp
c0018ba1:	e8 f2 7c fe ff       	call   c0000898 <strcmp>
c0018ba6:	83 c4 10             	add    esp,0x10
c0018ba9:	85 c0                	test   eax,eax
c0018bab:	74 16                	je     c0018bc3 <CPU::detectFeatures()+0x1fb>
c0018bad:	50                   	push   eax
c0018bae:	50                   	push   eax
c0018baf:	68 00 b4 02 c0       	push   0xc002b400
c0018bb4:	55                   	push   ebp
c0018bb5:	e8 de 7c fe ff       	call   c0000898 <strcmp>
c0018bba:	83 c4 10             	add    esp,0x10
c0018bbd:	85 c0                	test   eax,eax
c0018bbf:	74 48                	je     c0018c09 <CPU::detectFeatures()+0x241>
c0018bc1:	eb 0f                	jmp    c0018bd2 <CPU::detectFeatures()+0x20a>
c0018bc3:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018bcd:	e9 c1 01 00 00       	jmp    c0018d93 <CPU::detectFeatures()+0x3cb>
c0018bd2:	50                   	push   eax
c0018bd3:	50                   	push   eax
c0018bd4:	68 0d b4 02 c0       	push   0xc002b40d
c0018bd9:	55                   	push   ebp
c0018bda:	e8 b9 7c fe ff       	call   c0000898 <strcmp>
c0018bdf:	83 c4 10             	add    esp,0x10
c0018be2:	85 c0                	test   eax,eax
c0018be4:	74 23                	je     c0018c09 <CPU::detectFeatures()+0x241>
c0018be6:	57                   	push   edi
c0018be7:	57                   	push   edi
c0018be8:	68 1a b4 02 c0       	push   0xc002b41a
c0018bed:	55                   	push   ebp
c0018bee:	e8 a5 7c fe ff       	call   c0000898 <strcmp>
c0018bf3:	83 c4 10             	add    esp,0x10
c0018bf6:	85 c0                	test   eax,eax
c0018bf8:	75 1e                	jne    c0018c18 <CPU::detectFeatures()+0x250>
c0018bfa:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018c04:	e9 8a 01 00 00       	jmp    c0018d93 <CPU::detectFeatures()+0x3cb>
c0018c09:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018c13:	e9 7b 01 00 00       	jmp    c0018d93 <CPU::detectFeatures()+0x3cb>
c0018c18:	56                   	push   esi
c0018c19:	56                   	push   esi
c0018c1a:	68 27 b4 02 c0       	push   0xc002b427
c0018c1f:	55                   	push   ebp
c0018c20:	e8 73 7c fe ff       	call   c0000898 <strcmp>
c0018c25:	83 c4 10             	add    esp,0x10
c0018c28:	85 c0                	test   eax,eax
c0018c2a:	75 0f                	jne    c0018c3b <CPU::detectFeatures()+0x273>
c0018c2c:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018c36:	e9 58 01 00 00       	jmp    c0018d93 <CPU::detectFeatures()+0x3cb>
c0018c3b:	51                   	push   ecx
c0018c3c:	51                   	push   ecx
c0018c3d:	68 e6 b3 02 c0       	push   0xc002b3e6
c0018c42:	55                   	push   ebp
c0018c43:	e8 50 7c fe ff       	call   c0000898 <strcmp>
c0018c48:	83 c4 10             	add    esp,0x10
c0018c4b:	85 c0                	test   eax,eax
c0018c4d:	75 0f                	jne    c0018c5e <CPU::detectFeatures()+0x296>
c0018c4f:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018c59:	e9 35 01 00 00       	jmp    c0018d93 <CPU::detectFeatures()+0x3cb>
c0018c5e:	52                   	push   edx
c0018c5f:	52                   	push   edx
c0018c60:	68 34 b4 02 c0       	push   0xc002b434
c0018c65:	55                   	push   ebp
c0018c66:	e8 2d 7c fe ff       	call   c0000898 <strcmp>
c0018c6b:	83 c4 10             	add    esp,0x10
c0018c6e:	85 c0                	test   eax,eax
c0018c70:	75 0f                	jne    c0018c81 <CPU::detectFeatures()+0x2b9>
c0018c72:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018c7c:	e9 12 01 00 00       	jmp    c0018d93 <CPU::detectFeatures()+0x3cb>
c0018c81:	50                   	push   eax
c0018c82:	50                   	push   eax
c0018c83:	68 41 b4 02 c0       	push   0xc002b441
c0018c88:	55                   	push   ebp
c0018c89:	e8 0a 7c fe ff       	call   c0000898 <strcmp>
c0018c8e:	83 c4 10             	add    esp,0x10
c0018c91:	85 c0                	test   eax,eax
c0018c93:	75 0f                	jne    c0018ca4 <CPU::detectFeatures()+0x2dc>
c0018c95:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018c9f:	e9 ef 00 00 00       	jmp    c0018d93 <CPU::detectFeatures()+0x3cb>
c0018ca4:	50                   	push   eax
c0018ca5:	50                   	push   eax
c0018ca6:	68 4e b4 02 c0       	push   0xc002b44e
c0018cab:	55                   	push   ebp
c0018cac:	e8 e7 7b fe ff       	call   c0000898 <strcmp>
c0018cb1:	83 c4 10             	add    esp,0x10
c0018cb4:	85 c0                	test   eax,eax
c0018cb6:	75 0f                	jne    c0018cc7 <CPU::detectFeatures()+0x2ff>
c0018cb8:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018cc2:	e9 cc 00 00 00       	jmp    c0018d93 <CPU::detectFeatures()+0x3cb>
c0018cc7:	50                   	push   eax
c0018cc8:	50                   	push   eax
c0018cc9:	68 5b b4 02 c0       	push   0xc002b45b
c0018cce:	55                   	push   ebp
c0018ccf:	e8 c4 7b fe ff       	call   c0000898 <strcmp>
c0018cd4:	83 c4 10             	add    esp,0x10
c0018cd7:	85 c0                	test   eax,eax
c0018cd9:	75 0f                	jne    c0018cea <CPU::detectFeatures()+0x322>
c0018cdb:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018ce5:	e9 a9 00 00 00       	jmp    c0018d93 <CPU::detectFeatures()+0x3cb>
c0018cea:	50                   	push   eax
c0018ceb:	50                   	push   eax
c0018cec:	68 68 b4 02 c0       	push   0xc002b468
c0018cf1:	55                   	push   ebp
c0018cf2:	e8 a1 7b fe ff       	call   c0000898 <strcmp>
c0018cf7:	83 c4 10             	add    esp,0x10
c0018cfa:	85 c0                	test   eax,eax
c0018cfc:	75 0f                	jne    c0018d0d <CPU::detectFeatures()+0x345>
c0018cfe:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018d08:	e9 86 00 00 00       	jmp    c0018d93 <CPU::detectFeatures()+0x3cb>
c0018d0d:	50                   	push   eax
c0018d0e:	50                   	push   eax
c0018d0f:	68 75 b4 02 c0       	push   0xc002b475
c0018d14:	55                   	push   ebp
c0018d15:	e8 7e 7b fe ff       	call   c0000898 <strcmp>
c0018d1a:	83 c4 10             	add    esp,0x10
c0018d1d:	85 c0                	test   eax,eax
c0018d1f:	75 0c                	jne    c0018d2d <CPU::detectFeatures()+0x365>
c0018d21:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018d2b:	eb 66                	jmp    c0018d93 <CPU::detectFeatures()+0x3cb>
c0018d2d:	50                   	push   eax
c0018d2e:	50                   	push   eax
c0018d2f:	68 82 b4 02 c0       	push   0xc002b482
c0018d34:	55                   	push   ebp
c0018d35:	e8 5e 7b fe ff       	call   c0000898 <strcmp>
c0018d3a:	83 c4 10             	add    esp,0x10
c0018d3d:	85 c0                	test   eax,eax
c0018d3f:	75 0c                	jne    c0018d4d <CPU::detectFeatures()+0x385>
c0018d41:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018d4b:	eb 46                	jmp    c0018d93 <CPU::detectFeatures()+0x3cb>
c0018d4d:	57                   	push   edi
c0018d4e:	57                   	push   edi
c0018d4f:	68 8f b4 02 c0       	push   0xc002b48f
c0018d54:	55                   	push   ebp
c0018d55:	e8 3e 7b fe ff       	call   c0000898 <strcmp>
c0018d5a:	83 c4 10             	add    esp,0x10
c0018d5d:	85 c0                	test   eax,eax
c0018d5f:	74 e0                	je     c0018d41 <CPU::detectFeatures()+0x379>
c0018d61:	56                   	push   esi
c0018d62:	56                   	push   esi
c0018d63:	68 9c b4 02 c0       	push   0xc002b49c
c0018d68:	55                   	push   ebp
c0018d69:	e8 2a 7b fe ff       	call   c0000898 <strcmp>
c0018d6e:	83 c4 10             	add    esp,0x10
c0018d71:	85 c0                	test   eax,eax
c0018d73:	74 cc                	je     c0018d41 <CPU::detectFeatures()+0x379>
c0018d75:	51                   	push   ecx
c0018d76:	51                   	push   ecx
c0018d77:	68 a9 b4 02 c0       	push   0xc002b4a9
c0018d7c:	55                   	push   ebp
c0018d7d:	e8 16 7b fe ff       	call   c0000898 <strcmp>
c0018d82:	83 c4 10             	add    esp,0x10
c0018d85:	85 c0                	test   eax,eax
c0018d87:	74 b8                	je     c0018d41 <CPU::detectFeatures()+0x379>
c0018d89:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018d93:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018d98:	0f 86 be 00 00 00    	jbe    c0018e5c <CPU::detectFeatures()+0x494>
c0018d9e:	83 ec 0c             	sub    esp,0xc
c0018da1:	68 80 00 00 00       	push   0x80
c0018da6:	e8 31 fb ff ff       	call   c00188dc <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018dab:	83 e0 01             	and    eax,0x1
c0018dae:	c1 e0 06             	shl    eax,0x6
c0018db1:	88 c2                	mov    dl,al
c0018db3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018db9:	83 e0 bf             	and    eax,0xffffffbf
c0018dbc:	09 d0                	or     eax,edx
c0018dbe:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018dc4:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018dcb:	e8 0c fb ff ff       	call   c00188dc <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018dd0:	83 e0 01             	and    eax,0x1
c0018dd3:	c1 e0 04             	shl    eax,0x4
c0018dd6:	88 c2                	mov    dl,al
c0018dd8:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018dde:	83 e0 ef             	and    eax,0xffffffef
c0018de1:	09 d0                	or     eax,edx
c0018de3:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018de9:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018df0:	e8 e7 fa ff ff       	call   c00188dc <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018df5:	c1 e0 07             	shl    eax,0x7
c0018df8:	88 c2                	mov    dl,al
c0018dfa:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018e00:	83 e0 7f             	and    eax,0x7f
c0018e03:	09 d0                	or     eax,edx
c0018e05:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018e0b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018e12:	e8 f3 fa ff ff       	call   c001890a <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018e17:	83 e0 01             	and    eax,0x1
c0018e1a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018e21:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018e27:	83 e0 f7             	and    eax,0xfffffff7
c0018e2a:	09 d0                	or     eax,edx
c0018e2c:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018e32:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018e39:	e8 cc fa ff ff       	call   c001890a <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018e3e:	83 c4 10             	add    esp,0x10
c0018e41:	83 e0 01             	and    eax,0x1
c0018e44:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018e4b:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018e51:	83 e0 fb             	and    eax,0xfffffffb
c0018e54:	09 d0                	or     eax,edx
c0018e56:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018e5c:	83 ec 0c             	sub    esp,0xc
c0018e5f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e63:	50                   	push   eax
c0018e64:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e68:	50                   	push   eax
c0018e69:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018e6d:	56                   	push   esi
c0018e6e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e72:	50                   	push   eax
c0018e73:	6a 01                	push   0x1
c0018e75:	e8 82 f9 ff ff       	call   c00187fc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e7a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018e7e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018e84:	88 ca                	mov    dl,cl
c0018e86:	83 e0 f0             	and    eax,0xfffffff0
c0018e89:	83 e2 0f             	and    edx,0xf
c0018e8c:	09 d0                	or     eax,edx
c0018e8e:	88 ca                	mov    dl,cl
c0018e90:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018e96:	c0 ea 04             	shr    dl,0x4
c0018e99:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018e9d:	0f b6 c2             	movzx  eax,dl
c0018ea0:	83 c4 20             	add    esp,0x20
c0018ea3:	c1 e0 06             	shl    eax,0x6
c0018ea6:	89 c7                	mov    edi,eax
c0018ea8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018eae:	66 25 3f c0          	and    ax,0xc03f
c0018eb2:	09 f8                	or     eax,edi
c0018eb4:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018ebb:	89 c8                	mov    eax,ecx
c0018ebd:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0018ec4:	c1 e8 08             	shr    eax,0x8
c0018ec7:	83 e5 3f             	and    ebp,0x3f
c0018eca:	83 e0 0f             	and    eax,0xf
c0018ecd:	89 c7                	mov    edi,eax
c0018ecf:	c1 e7 06             	shl    edi,0x6
c0018ed2:	09 ef                	or     edi,ebp
c0018ed4:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0018edb:	89 fa                	mov    edx,edi
c0018edd:	83 e5 c0             	and    ebp,0xffffffc0
c0018ee0:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018ee6:	88 c2                	mov    dl,al
c0018ee8:	c0 ea 02             	shr    dl,0x2
c0018eeb:	89 d7                	mov    edi,edx
c0018eed:	09 ef                	or     edi,ebp
c0018eef:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018ef5:	89 fa                	mov    edx,edi
c0018ef7:	83 e5 cf             	and    ebp,0xffffffcf
c0018efa:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018f00:	89 cf                	mov    edi,ecx
c0018f02:	c1 ef 0c             	shr    edi,0xc
c0018f05:	83 e7 03             	and    edi,0x3
c0018f08:	c1 e7 04             	shl    edi,0x4
c0018f0b:	09 ef                	or     edi,ebp
c0018f0d:	3c 06                	cmp    al,0x6
c0018f0f:	89 fa                	mov    edx,edi
c0018f11:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018f17:	74 04                	je     c0018f1d <CPU::detectFeatures()+0x555>
c0018f19:	3c 0f                	cmp    al,0xf
c0018f1b:	75 5c                	jne    c0018f79 <CPU::detectFeatures()+0x5b1>
c0018f1d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018f21:	89 cf                	mov    edi,ecx
c0018f23:	c1 ef 10             	shr    edi,0x10
c0018f26:	c1 e7 04             	shl    edi,0x4
c0018f29:	09 fa                	or     edx,edi
c0018f2b:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0018f31:	0f b6 d2             	movzx  edx,dl
c0018f34:	66 81 e7 3f c0       	and    di,0xc03f
c0018f39:	c1 e2 06             	shl    edx,0x6
c0018f3c:	09 fa                	or     edx,edi
c0018f3e:	3c 0f                	cmp    al,0xf
c0018f40:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018f47:	75 30                	jne    c0018f79 <CPU::detectFeatures()+0x5b1>
c0018f49:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018f4f:	c1 e9 14             	shr    ecx,0x14
c0018f52:	83 e0 3f             	and    eax,0x3f
c0018f55:	83 c1 0f             	add    ecx,0xf
c0018f58:	88 ca                	mov    dl,cl
c0018f5a:	c0 e9 02             	shr    cl,0x2
c0018f5d:	c1 e2 06             	shl    edx,0x6
c0018f60:	09 d0                	or     eax,edx
c0018f62:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018f68:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018f6e:	83 e0 c0             	and    eax,0xffffffc0
c0018f71:	09 c1                	or     ecx,eax
c0018f73:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018f79:	83 ec 0c             	sub    esp,0xc
c0018f7c:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018f83:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f87:	50                   	push   eax
c0018f88:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018f8c:	55                   	push   ebp
c0018f8d:	56                   	push   esi
c0018f8e:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018f92:	57                   	push   edi
c0018f93:	68 00 00 00 80       	push   0x80000000
c0018f98:	e8 5f f8 ff ff       	call   c00187fc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f9d:	83 c4 20             	add    esp,0x20
c0018fa0:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018fa8:	76 22                	jbe    c0018fcc <CPU::detectFeatures()+0x604>
c0018faa:	83 ec 0c             	sub    esp,0xc
c0018fad:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018fb1:	50                   	push   eax
c0018fb2:	55                   	push   ebp
c0018fb3:	56                   	push   esi
c0018fb4:	57                   	push   edi
c0018fb5:	68 01 00 00 80       	push   0x80000001
c0018fba:	e8 3d f8 ff ff       	call   c00187fc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018fbf:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018fc9:	83 c4 20             	add    esp,0x20
c0018fcc:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018fd2:	83 f8 01             	cmp    eax,0x1
c0018fd5:	75 6f                	jne    c0019046 <CPU::detectFeatures()+0x67e>
c0018fd7:	51                   	push   ecx
c0018fd8:	51                   	push   ecx
c0018fd9:	68 b5 b4 02 c0       	push   0xc002b4b5
c0018fde:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018fe2:	56                   	push   esi
c0018fe3:	e8 24 78 fe ff       	call   c000080c <strcpy>
c0018fe8:	5f                   	pop    edi
c0018fe9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018fef:	5d                   	pop    ebp
c0018ff0:	66 c1 e8 06          	shr    ax,0x6
c0018ff4:	0f b6 c0             	movzx  eax,al
c0018ff7:	50                   	push   eax
c0018ff8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ffe:	c1 e8 0e             	shr    eax,0xe
c0019001:	0f b6 c0             	movzx  eax,al
c0019004:	50                   	push   eax
c0019005:	e8 9c f4 ff ff       	call   c00184a6 <CPU::lookupIntelName(unsigned char, unsigned char)>
c001900a:	5a                   	pop    edx
c001900b:	59                   	pop    ecx
c001900c:	50                   	push   eax
c001900d:	56                   	push   esi
c001900e:	e8 39 79 fe ff       	call   c000094c <strcat>
c0019013:	5f                   	pop    edi
c0019014:	5d                   	pop    ebp
c0019015:	56                   	push   esi
c0019016:	53                   	push   ebx
c0019017:	e8 36 ad ff ff       	call   c0013d52 <Device::setName(char const*)>
c001901c:	58                   	pop    eax
c001901d:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019023:	5a                   	pop    edx
c0019024:	68 bc b4 02 c0       	push   0xc002b4bc
c0019029:	50                   	push   eax
c001902a:	e8 69 78 fe ff       	call   c0000898 <strcmp>
c001902f:	83 c4 10             	add    esp,0x10
c0019032:	85 c0                	test   eax,eax
c0019034:	0f 85 71 03 00 00    	jne    c00193ab <CPU::detectFeatures()+0x9e3>
c001903a:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019041:	e9 65 03 00 00       	jmp    c00193ab <CPU::detectFeatures()+0x9e3>
c0019046:	83 f8 02             	cmp    eax,0x2
c0019049:	0f 85 b5 00 00 00    	jne    c0019104 <CPU::detectFeatures()+0x73c>
c001904f:	57                   	push   edi
c0019050:	57                   	push   edi
c0019051:	68 ce b4 02 c0       	push   0xc002b4ce
c0019056:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001905a:	56                   	push   esi
c001905b:	e8 ac 77 fe ff       	call   c000080c <strcpy>
c0019060:	5d                   	pop    ebp
c0019061:	58                   	pop    eax
c0019062:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019068:	66 c1 e8 06          	shr    ax,0x6
c001906c:	0f b6 c0             	movzx  eax,al
c001906f:	50                   	push   eax
c0019070:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019076:	c1 e8 0e             	shr    eax,0xe
c0019079:	0f b6 c0             	movzx  eax,al
c001907c:	50                   	push   eax
c001907d:	e8 90 f2 ff ff       	call   c0018312 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019082:	5a                   	pop    edx
c0019083:	59                   	pop    ecx
c0019084:	50                   	push   eax
c0019085:	56                   	push   esi
c0019086:	e8 c1 78 fe ff       	call   c000094c <strcat>
c001908b:	5f                   	pop    edi
c001908c:	5d                   	pop    ebp
c001908d:	56                   	push   esi
c001908e:	53                   	push   ebx
c001908f:	e8 be ac ff ff       	call   c0013d52 <Device::setName(char const*)>
c0019094:	58                   	pop    eax
c0019095:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001909b:	5a                   	pop    edx
c001909c:	68 d3 b4 02 c0       	push   0xc002b4d3
c00190a1:	50                   	push   eax
c00190a2:	e8 f1 77 fe ff       	call   c0000898 <strcmp>
c00190a7:	83 c4 10             	add    esp,0x10
c00190aa:	85 c0                	test   eax,eax
c00190ac:	75 20                	jne    c00190ce <CPU::detectFeatures()+0x706>
c00190ae:	8b 15 08 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da08
c00190b4:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00190ba:	a8 01                	test   al,0x1
c00190bc:	74 10                	je     c00190ce <CPU::detectFeatures()+0x706>
c00190be:	83 e0 fe             	and    eax,0xfffffffe
c00190c1:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00190c7:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00190ce:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00190d4:	c1 e8 0e             	shr    eax,0xe
c00190d7:	3c 05                	cmp    al,0x5
c00190d9:	0f 85 cc 02 00 00    	jne    c00193ab <CPU::detectFeatures()+0x9e3>
c00190df:	56                   	push   esi
c00190e0:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00190e6:	83 e0 0f             	and    eax,0xf
c00190e9:	50                   	push   eax
c00190ea:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00190f0:	66 c1 e8 06          	shr    ax,0x6
c00190f4:	0f b6 c0             	movzx  eax,al
c00190f7:	50                   	push   eax
c00190f8:	6a 05                	push   0x5
c00190fa:	e8 89 f6 ff ff       	call   c0018788 <CPU::AMD_K6_writeback(int, int, int)>
c00190ff:	e9 1f 02 00 00       	jmp    c0019323 <CPU::detectFeatures()+0x95b>
c0019104:	8d 50 fd             	lea    edx,[eax-0x3]
c0019107:	83 fa 01             	cmp    edx,0x1
c001910a:	76 09                	jbe    c0019115 <CPU::detectFeatures()+0x74d>
c001910c:	83 f8 06             	cmp    eax,0x6
c001910f:	0f 85 91 01 00 00    	jne    c00192a6 <CPU::detectFeatures()+0x8de>
c0019115:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001911b:	c1 ea 0e             	shr    edx,0xe
c001911e:	80 fa 05             	cmp    dl,0x5
c0019121:	75 7b                	jne    c001919e <CPU::detectFeatures()+0x7d6>
c0019123:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019129:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001912e:	66 81 fa 00 01       	cmp    dx,0x100
c0019133:	75 0c                	jne    c0019141 <CPU::detectFeatures()+0x779>
c0019135:	51                   	push   ecx
c0019136:	51                   	push   ecx
c0019137:	68 da b4 02 c0       	push   0xc002b4da
c001913c:	e9 dc 01 00 00       	jmp    c001931d <CPU::detectFeatures()+0x955>
c0019141:	66 81 fa 00 02       	cmp    dx,0x200
c0019146:	75 0c                	jne    c0019154 <CPU::detectFeatures()+0x78c>
c0019148:	52                   	push   edx
c0019149:	52                   	push   edx
c001914a:	68 ed b4 02 c0       	push   0xc002b4ed
c001914f:	e9 c9 01 00 00       	jmp    c001931d <CPU::detectFeatures()+0x955>
c0019154:	66 81 fa 40 02       	cmp    dx,0x240
c0019159:	75 0c                	jne    c0019167 <CPU::detectFeatures()+0x79f>
c001915b:	50                   	push   eax
c001915c:	50                   	push   eax
c001915d:	68 ff b4 02 c0       	push   0xc002b4ff
c0019162:	e9 b6 01 00 00       	jmp    c001931d <CPU::detectFeatures()+0x955>
c0019167:	83 f8 06             	cmp    eax,0x6
c001916a:	75 0c                	jne    c0019178 <CPU::detectFeatures()+0x7b0>
c001916c:	50                   	push   eax
c001916d:	50                   	push   eax
c001916e:	68 11 b5 02 c0       	push   0xc002b511
c0019173:	e9 a5 01 00 00       	jmp    c001931d <CPU::detectFeatures()+0x955>
c0019178:	83 f8 04             	cmp    eax,0x4
c001917b:	75 0c                	jne    c0019189 <CPU::detectFeatures()+0x7c1>
c001917d:	50                   	push   eax
c001917e:	50                   	push   eax
c001917f:	68 1d b5 02 c0       	push   0xc002b51d
c0019184:	e9 94 01 00 00       	jmp    c001931d <CPU::detectFeatures()+0x955>
c0019189:	83 f8 03             	cmp    eax,0x3
c001918c:	0f 85 19 02 00 00    	jne    c00193ab <CPU::detectFeatures()+0x9e3>
c0019192:	50                   	push   eax
c0019193:	50                   	push   eax
c0019194:	68 25 b5 02 c0       	push   0xc002b525
c0019199:	e9 7f 01 00 00       	jmp    c001931d <CPU::detectFeatures()+0x955>
c001919e:	80 fa 06             	cmp    dl,0x6
c00191a1:	0f 85 db 00 00 00    	jne    c0019282 <CPU::detectFeatures()+0x8ba>
c00191a7:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00191ad:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00191b2:	66 81 fa 80 01       	cmp    dx,0x180
c00191b7:	75 0c                	jne    c00191c5 <CPU::detectFeatures()+0x7fd>
c00191b9:	50                   	push   eax
c00191ba:	50                   	push   eax
c00191bb:	68 30 b5 02 c0       	push   0xc002b530
c00191c0:	e9 58 01 00 00       	jmp    c001931d <CPU::detectFeatures()+0x955>
c00191c5:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00191cb:	66 f7 c1 80 ff       	test   cx,0xff80
c00191d0:	75 0c                	jne    c00191de <CPU::detectFeatures()+0x816>
c00191d2:	50                   	push   eax
c00191d3:	50                   	push   eax
c00191d4:	68 40 b5 02 c0       	push   0xc002b540
c00191d9:	e9 3f 01 00 00       	jmp    c001931d <CPU::detectFeatures()+0x955>
c00191de:	66 81 fa 40 02       	cmp    dx,0x240
c00191e3:	75 0c                	jne    c00191f1 <CPU::detectFeatures()+0x829>
c00191e5:	55                   	push   ebp
c00191e6:	55                   	push   ebp
c00191e7:	68 47 b5 02 c0       	push   0xc002b547
c00191ec:	e9 2c 01 00 00       	jmp    c001931d <CPU::detectFeatures()+0x955>
c00191f1:	66 81 fa 80 02       	cmp    dx,0x280
c00191f6:	75 0c                	jne    c0019204 <CPU::detectFeatures()+0x83c>
c00191f8:	57                   	push   edi
c00191f9:	57                   	push   edi
c00191fa:	68 50 b5 02 c0       	push   0xc002b550
c00191ff:	e9 19 01 00 00       	jmp    c001931d <CPU::detectFeatures()+0x955>
c0019204:	66 81 fa 40 03       	cmp    dx,0x340
c0019209:	74 ed                	je     c00191f8 <CPU::detectFeatures()+0x830>
c001920b:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019210:	75 0c                	jne    c001921e <CPU::detectFeatures()+0x856>
c0019212:	56                   	push   esi
c0019213:	56                   	push   esi
c0019214:	68 57 b5 02 c0       	push   0xc002b557
c0019219:	e9 ff 00 00 00       	jmp    c001931d <CPU::detectFeatures()+0x955>
c001921e:	83 f8 06             	cmp    eax,0x6
c0019221:	0f 84 45 ff ff ff    	je     c001916c <CPU::detectFeatures()+0x7a4>
c0019227:	83 f8 04             	cmp    eax,0x4
c001922a:	0f 84 4d ff ff ff    	je     c001917d <CPU::detectFeatures()+0x7b5>
c0019230:	83 f8 03             	cmp    eax,0x3
c0019233:	0f 85 72 01 00 00    	jne    c00193ab <CPU::detectFeatures()+0x9e3>
c0019239:	51                   	push   ecx
c001923a:	51                   	push   ecx
c001923b:	68 60 b5 02 c0       	push   0xc002b560
c0019240:	53                   	push   ebx
c0019241:	e8 0c ab ff ff       	call   c0013d52 <Device::setName(char const*)>
c0019246:	b1 c1                	mov    cl,0xc1
c0019248:	88 c8                	mov    al,cl
c001924a:	e6 22                	out    0x22,al
c001924c:	e4 23                	in     al,0x23
c001924e:	88 c2                	mov    dl,al
c0019250:	88 c8                	mov    al,cl
c0019252:	e6 22                	out    0x22,al
c0019254:	88 d0                	mov    al,dl
c0019256:	83 c8 10             	or     eax,0x10
c0019259:	e6 23                	out    0x23,al
c001925b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019262:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019265:	89 d0                	mov    eax,edx
c0019267:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c001926d:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019271:	40                   	inc    eax
c0019272:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019278:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001927d:	e9 a1 00 00 00       	jmp    c0019323 <CPU::detectFeatures()+0x95b>
c0019282:	83 f8 06             	cmp    eax,0x6
c0019285:	0f 84 e1 fe ff ff    	je     c001916c <CPU::detectFeatures()+0x7a4>
c001928b:	83 f8 04             	cmp    eax,0x4
c001928e:	0f 84 e9 fe ff ff    	je     c001917d <CPU::detectFeatures()+0x7b5>
c0019294:	83 f8 03             	cmp    eax,0x3
c0019297:	0f 85 0e 01 00 00    	jne    c00193ab <CPU::detectFeatures()+0x9e3>
c001929d:	52                   	push   edx
c001929e:	52                   	push   edx
c001929f:	68 6b b5 02 c0       	push   0xc002b56b
c00192a4:	eb 77                	jmp    c001931d <CPU::detectFeatures()+0x955>
c00192a6:	83 f8 07             	cmp    eax,0x7
c00192a9:	75 09                	jne    c00192b4 <CPU::detectFeatures()+0x8ec>
c00192ab:	50                   	push   eax
c00192ac:	50                   	push   eax
c00192ad:	68 75 b5 02 c0       	push   0xc002b575
c00192b2:	eb 69                	jmp    c001931d <CPU::detectFeatures()+0x955>
c00192b4:	83 f8 0a             	cmp    eax,0xa
c00192b7:	75 09                	jne    c00192c2 <CPU::detectFeatures()+0x8fa>
c00192b9:	50                   	push   eax
c00192ba:	50                   	push   eax
c00192bb:	68 80 b5 02 c0       	push   0xc002b580
c00192c0:	eb 5b                	jmp    c001931d <CPU::detectFeatures()+0x955>
c00192c2:	83 f8 0b             	cmp    eax,0xb
c00192c5:	75 09                	jne    c00192d0 <CPU::detectFeatures()+0x908>
c00192c7:	50                   	push   eax
c00192c8:	50                   	push   eax
c00192c9:	68 88 b5 02 c0       	push   0xc002b588
c00192ce:	eb 4d                	jmp    c001931d <CPU::detectFeatures()+0x955>
c00192d0:	83 f8 08             	cmp    eax,0x8
c00192d3:	75 09                	jne    c00192de <CPU::detectFeatures()+0x916>
c00192d5:	50                   	push   eax
c00192d6:	50                   	push   eax
c00192d7:	68 91 b5 02 c0       	push   0xc002b591
c00192dc:	eb 3f                	jmp    c001931d <CPU::detectFeatures()+0x955>
c00192de:	83 f8 09             	cmp    eax,0x9
c00192e1:	75 09                	jne    c00192ec <CPU::detectFeatures()+0x924>
c00192e3:	50                   	push   eax
c00192e4:	50                   	push   eax
c00192e5:	68 99 b5 02 c0       	push   0xc002b599
c00192ea:	eb 31                	jmp    c001931d <CPU::detectFeatures()+0x955>
c00192ec:	83 f8 05             	cmp    eax,0x5
c00192ef:	75 09                	jne    c00192fa <CPU::detectFeatures()+0x932>
c00192f1:	50                   	push   eax
c00192f2:	50                   	push   eax
c00192f3:	68 a1 b5 02 c0       	push   0xc002b5a1
c00192f8:	eb 23                	jmp    c001931d <CPU::detectFeatures()+0x955>
c00192fa:	83 f8 0c             	cmp    eax,0xc
c00192fd:	75 09                	jne    c0019308 <CPU::detectFeatures()+0x940>
c00192ff:	55                   	push   ebp
c0019300:	55                   	push   ebp
c0019301:	68 af b5 02 c0       	push   0xc002b5af
c0019306:	eb 15                	jmp    c001931d <CPU::detectFeatures()+0x955>
c0019308:	83 f8 0d             	cmp    eax,0xd
c001930b:	75 09                	jne    c0019316 <CPU::detectFeatures()+0x94e>
c001930d:	57                   	push   edi
c001930e:	57                   	push   edi
c001930f:	68 ba b5 02 c0       	push   0xc002b5ba
c0019314:	eb 07                	jmp    c001931d <CPU::detectFeatures()+0x955>
c0019316:	56                   	push   esi
c0019317:	56                   	push   esi
c0019318:	68 ce b5 02 c0       	push   0xc002b5ce
c001931d:	53                   	push   ebx
c001931e:	e8 2f aa ff ff       	call   c0013d52 <Device::setName(char const*)>
c0019323:	83 c4 10             	add    esp,0x10
c0019326:	e9 80 00 00 00       	jmp    c00193ab <CPU::detectFeatures()+0x9e3>
c001932b:	51                   	push   ecx
c001932c:	51                   	push   ecx
c001932d:	68 1a b4 02 c0       	push   0xc002b41a
c0019332:	55                   	push   ebp
c0019333:	e8 d4 74 fe ff       	call   c000080c <strcpy>
c0019338:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019342:	e8 67 6f fe ff       	call   c00002ae <is486>
c0019347:	83 c4 10             	add    esp,0x10
c001934a:	85 c0                	test   eax,eax
c001934c:	74 2b                	je     c0019379 <CPU::detectFeatures()+0x9b1>
c001934e:	52                   	push   edx
c001934f:	52                   	push   edx
c0019350:	68 da b5 02 c0       	push   0xc002b5da
c0019355:	53                   	push   ebx
c0019356:	e8 f7 a9 ff ff       	call   c0013d52 <Device::setName(char const*)>
c001935b:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019362:	0f 20 c0             	mov    eax,cr0
c0019365:	83 e0 14             	and    eax,0x14
c0019368:	83 c4 10             	add    esp,0x10
c001936b:	83 f8 04             	cmp    eax,0x4
c001936e:	75 1f                	jne    c001938f <CPU::detectFeatures()+0x9c7>
c0019370:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019377:	eb 32                	jmp    c00193ab <CPU::detectFeatures()+0x9e3>
c0019379:	50                   	push   eax
c001937a:	50                   	push   eax
c001937b:	68 e5 b5 02 c0       	push   0xc002b5e5
c0019380:	53                   	push   ebx
c0019381:	e8 cc a9 ff ff       	call   c0013d52 <Device::setName(char const*)>
c0019386:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c001938d:	eb d3                	jmp    c0019362 <CPU::detectFeatures()+0x99a>
c001938f:	e8 f5 6e fe ff       	call   c0000289 <hasLegacyFPU>
c0019394:	83 e0 01             	and    eax,0x1
c0019397:	8d 14 00             	lea    edx,[eax+eax*1]
c001939a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00193a0:	83 e0 fd             	and    eax,0xfffffffd
c00193a3:	09 d0                	or     eax,edx
c00193a5:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00193ab:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00193b2:	83 c4 4c             	add    esp,0x4c
c00193b5:	5b                   	pop    ebx
c00193b6:	5e                   	pop    esi
c00193b7:	5f                   	pop    edi
c00193b8:	5d                   	pop    ebp
c00193b9:	c3                   	ret    

c00193ba <CPU::setupSMEP()>:
c00193ba:	0f 20 e0             	mov    eax,cr4
c00193bd:	0d 00 00 10 00       	or     eax,0x100000
c00193c2:	0f 22 e0             	mov    cr4,eax
c00193c5:	c3                   	ret    

c00193c6 <CPU::setupUMIP()>:
c00193c6:	0f 20 e0             	mov    eax,cr4
c00193c9:	80 cc 08             	or     ah,0x8
c00193cc:	0f 22 e0             	mov    cr4,eax
c00193cf:	c3                   	ret    

c00193d0 <CPU::setupTSC()>:
c00193d0:	0f 20 e0             	mov    eax,cr4
c00193d3:	83 c8 04             	or     eax,0x4
c00193d6:	0f 22 e0             	mov    cr4,eax
c00193d9:	c3                   	ret    

c00193da <CPU::setupLargePages()>:
c00193da:	0f 20 e0             	mov    eax,cr4
c00193dd:	83 c8 10             	or     eax,0x10
c00193e0:	0f 22 e0             	mov    cr4,eax
c00193e3:	c3                   	ret    

c00193e4 <CPU::setupPAT()>:
c00193e4:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c00193e9:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00193f0:	74 2c                	je     c001941e <CPU::setupPAT()+0x3a>
c00193f2:	53                   	push   ebx
c00193f3:	83 ec 10             	sub    esp,0x10
c00193f6:	68 77 02 00 00       	push   0x277
c00193fb:	50                   	push   eax
c00193fc:	e8 3f 57 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c0019401:	83 e2 f8             	and    edx,0xfffffff8
c0019404:	83 ca 01             	or     edx,0x1
c0019407:	52                   	push   edx
c0019408:	50                   	push   eax
c0019409:	68 77 02 00 00       	push   0x277
c001940e:	ff 35 08 da 02 c0    	push   DWORD PTR ds:0xc002da08
c0019414:	e8 53 57 ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c0019419:	83 c4 28             	add    esp,0x28
c001941c:	5b                   	pop    ebx
c001941d:	c3                   	ret    
c001941e:	c3                   	ret    
c001941f:	90                   	nop

c0019420 <CPU::setupMTRR()>:
c0019420:	c3                   	ret    
c0019421:	90                   	nop

c0019422 <CPU::setupGlobalPages()>:
c0019422:	0f 20 e0             	mov    eax,cr4
c0019425:	0c 80                	or     al,0x80
c0019427:	0f 22 e0             	mov    cr4,eax
c001942a:	c3                   	ret    
c001942b:	90                   	nop

c001942c <CPU::allowUsermodeDataAccess()>:
c001942c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019430:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019437:	74 03                	je     c001943c <CPU::allowUsermodeDataAccess()+0x10>
c0019439:	0f 01 cb             	stac   
c001943c:	c3                   	ret    
c001943d:	90                   	nop

c001943e <CPU::prohibitUsermodeDataAccess()>:
c001943e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019442:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019449:	74 03                	je     c001944e <CPU::prohibitUsermodeDataAccess()+0x10>
c001944b:	0f 01 ca             	clac   
c001944e:	c3                   	ret    
c001944f:	90                   	nop

c0019450 <CPU::setupSMAP()>:
c0019450:	0f 20 e0             	mov    eax,cr4
c0019453:	0d 00 00 20 00       	or     eax,0x200000
c0019458:	0f 22 e0             	mov    cr4,eax
c001945b:	eb e1                	jmp    c001943e <CPU::prohibitUsermodeDataAccess()>
c001945d:	90                   	nop

c001945e <CPU::setupFeatures()>:
c001945e:	83 ec 0c             	sub    esp,0xc
c0019461:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019465:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c001946c:	74 07                	je     c0019475 <CPU::setupFeatures()+0x17>
c001946e:	52                   	push   edx
c001946f:	e8 46 ff ff ff       	call   c00193ba <CPU::setupSMEP()>
c0019474:	58                   	pop    eax
c0019475:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c001947c:	74 07                	je     c0019485 <CPU::setupFeatures()+0x27>
c001947e:	52                   	push   edx
c001947f:	e8 cc ff ff ff       	call   c0019450 <CPU::setupSMAP()>
c0019484:	58                   	pop    eax
c0019485:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c001948c:	74 07                	je     c0019495 <CPU::setupFeatures()+0x37>
c001948e:	52                   	push   edx
c001948f:	e8 32 ff ff ff       	call   c00193c6 <CPU::setupUMIP()>
c0019494:	58                   	pop    eax
c0019495:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c001949c:	74 07                	je     c00194a5 <CPU::setupFeatures()+0x47>
c001949e:	52                   	push   edx
c001949f:	e8 2c ff ff ff       	call   c00193d0 <CPU::setupTSC()>
c00194a4:	58                   	pop    eax
c00194a5:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c00194ac:	74 07                	je     c00194b5 <CPU::setupFeatures()+0x57>
c00194ae:	52                   	push   edx
c00194af:	e8 26 ff ff ff       	call   c00193da <CPU::setupLargePages()>
c00194b4:	59                   	pop    ecx
c00194b5:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c00194bc:	74 07                	je     c00194c5 <CPU::setupFeatures()+0x67>
c00194be:	52                   	push   edx
c00194bf:	e8 5e ff ff ff       	call   c0019422 <CPU::setupGlobalPages()>
c00194c4:	58                   	pop    eax
c00194c5:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c00194cc:	74 0c                	je     c00194da <CPU::setupFeatures()+0x7c>
c00194ce:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00194d2:	83 c4 0c             	add    esp,0xc
c00194d5:	e9 0a ff ff ff       	jmp    c00193e4 <CPU::setupPAT()>
c00194da:	83 c4 0c             	add    esp,0xc
c00194dd:	c3                   	ret    

c00194de <CPU::open(int, int, void*)>:
c00194de:	57                   	push   edi
c00194df:	56                   	push   esi
c00194e0:	53                   	push   ebx
c00194e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00194e5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00194e9:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00194ef:	83 ec 0c             	sub    esp,0xc
c00194f2:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00194f8:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00194fe:	50                   	push   eax
c00194ff:	e8 2a 59 ff ff       	call   c000ee2e <GDT::setup()>
c0019504:	83 c4 0c             	add    esp,0xc
c0019507:	6a 00                	push   0x0
c0019509:	68 ef be ad de       	push   0xdeadbeef
c001950e:	57                   	push   edi
c001950f:	e8 92 76 ff ff       	call   c0010ba6 <TSS::setup(unsigned long, unsigned long)>
c0019514:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019517:	e8 6a 76 ff ff       	call   c0010b86 <TSS::flush()>
c001951c:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019522:	89 04 24             	mov    DWORD PTR [esp],eax
c0019525:	e8 68 5b ff ff       	call   c000f092 <IDT::setup()>
c001952a:	b8 00 04 00 00       	mov    eax,0x400
c001952f:	0f 23 f8             	mov    db7,eax
c0019532:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001953c:	e8 54 64 ff ff       	call   c000f995 <Phys::allocatePage()>
c0019541:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019547:	89 30                	mov    DWORD PTR [eax],esi
c0019549:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001954f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019552:	58                   	pop    eax
c0019553:	5a                   	pop    edx
c0019554:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001955a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001955e:	e8 a7 87 ff ff       	call   c0011d0a <VAS::setCPUSpecific(unsigned long)>
c0019563:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019566:	e8 5d f4 ff ff       	call   c00189c8 <CPU::detectFeatures()>
c001956b:	e8 35 bc ff ff       	call   c00151a5 <setupInterruptController()>
c0019570:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019576:	a1 20 da 02 c0       	mov    eax,ds:0xc002da20
c001957b:	83 e0 10             	and    eax,0x10
c001957e:	83 f8 01             	cmp    eax,0x1
c0019581:	19 c0                	sbb    eax,eax
c0019583:	83 e0 46             	and    eax,0x46
c0019586:	83 c0 1e             	add    eax,0x1e
c0019589:	89 04 24             	mov    DWORD PTR [esp],eax
c001958c:	e8 02 d2 ff ff       	call   c0016793 <setupTimer(int)>
c0019591:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019597:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001959a:	e8 bf fe ff ff       	call   c001945e <CPU::setupFeatures()>
c001959f:	83 c4 10             	add    esp,0x10
c00195a2:	31 c0                	xor    eax,eax
c00195a4:	5b                   	pop    ebx
c00195a5:	5e                   	pop    esi
c00195a6:	5f                   	pop    edi
c00195a7:	c3                   	ret    

c00195a8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00195a8:	57                   	push   edi
c00195a9:	56                   	push   esi
c00195aa:	53                   	push   ebx
c00195ab:	51                   	push   ecx
c00195ac:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00195b0:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00195b3:	0f 02 c0             	lar    eax,ax
c00195b6:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00195b9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00195bd:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c00195c0:	88 ca                	mov    dl,cl
c00195c2:	c0 ea 06             	shr    dl,0x6
c00195c5:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c00195c9:	89 ca                	mov    edx,ecx
c00195cb:	66 c1 ea 03          	shr    dx,0x3
c00195cf:	83 e2 07             	and    edx,0x7
c00195d2:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c00195d7:	88 17                	mov    BYTE PTR [edi],dl
c00195d9:	0f 84 a6 01 00 00    	je     c0019785 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c00195df:	83 e1 07             	and    ecx,0x7
c00195e2:	80 f9 04             	cmp    cl,0x4
c00195e5:	0f 84 98 00 00 00    	je     c0019683 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c00195eb:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00195f0:	0f 95 c0             	setne  al
c00195f3:	80 f9 05             	cmp    cl,0x5
c00195f6:	0f 95 c2             	setne  dl
c00195f9:	08 c2                	or     dl,al
c00195fb:	74 79                	je     c0019676 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c00195fd:	84 c9                	test   cl,cl
c00195ff:	75 05                	jne    c0019606 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019601:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019604:	eb 3c                	jmp    c0019642 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019606:	80 f9 01             	cmp    cl,0x1
c0019609:	75 05                	jne    c0019610 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c001960b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001960e:	eb 32                	jmp    c0019642 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019610:	80 f9 02             	cmp    cl,0x2
c0019613:	75 05                	jne    c001961a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019615:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019618:	eb 28                	jmp    c0019642 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001961a:	31 c0                	xor    eax,eax
c001961c:	80 f9 03             	cmp    cl,0x3
c001961f:	75 05                	jne    c0019626 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019621:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019624:	eb 1c                	jmp    c0019642 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019626:	80 f9 05             	cmp    cl,0x5
c0019629:	75 05                	jne    c0019630 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c001962b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001962e:	eb 12                	jmp    c0019642 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019630:	80 f9 06             	cmp    cl,0x6
c0019633:	75 05                	jne    c001963a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019635:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019638:	eb 08                	jmp    c0019642 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001963a:	80 f9 07             	cmp    cl,0x7
c001963d:	75 03                	jne    c0019642 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001963f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019642:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019647:	75 10                	jne    c0019659 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019649:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c001964d:	b9 03 00 00 00       	mov    ecx,0x3
c0019652:	01 d0                	add    eax,edx
c0019654:	e9 37 01 00 00       	jmp    c0019790 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019659:	b9 02 00 00 00       	mov    ecx,0x2
c001965e:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019663:	0f 85 27 01 00 00    	jne    c0019790 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019669:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c001966c:	b9 06 00 00 00       	mov    ecx,0x6
c0019671:	e9 1a 01 00 00       	jmp    c0019790 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019676:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019679:	b9 06 00 00 00       	mov    ecx,0x6
c001967e:	e9 0f 01 00 00       	jmp    c0019792 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019683:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019686:	88 ca                	mov    dl,cl
c0019688:	c0 ea 06             	shr    dl,0x6
c001968b:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001968f:	89 ca                	mov    edx,ecx
c0019691:	66 c1 ea 03          	shr    dx,0x3
c0019695:	83 e2 07             	and    edx,0x7
c0019698:	80 e1 07             	and    cl,0x7
c001969b:	75 05                	jne    c00196a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001969d:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00196a0:	eb 4c                	jmp    c00196ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00196a2:	80 f9 01             	cmp    cl,0x1
c00196a5:	75 05                	jne    c00196ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00196a7:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00196aa:	eb 42                	jmp    c00196ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00196ac:	80 f9 02             	cmp    cl,0x2
c00196af:	75 05                	jne    c00196b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00196b1:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00196b4:	eb 38                	jmp    c00196ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00196b6:	80 f9 03             	cmp    cl,0x3
c00196b9:	75 05                	jne    c00196c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c00196bb:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00196be:	eb 2e                	jmp    c00196ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00196c0:	80 f9 04             	cmp    cl,0x4
c00196c3:	75 12                	jne    c00196d7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c00196c5:	f6 c4 60             	test   ah,0x60
c00196c8:	75 08                	jne    c00196d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c00196ca:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00196cd:	8d 78 14             	lea    edi,[eax+0x14]
c00196d0:	eb 1c                	jmp    c00196ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00196d2:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c00196d5:	eb 17                	jmp    c00196ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00196d7:	80 f9 05             	cmp    cl,0x5
c00196da:	75 05                	jne    c00196e1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c00196dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00196df:	eb 0d                	jmp    c00196ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00196e1:	80 f9 06             	cmp    cl,0x6
c00196e4:	75 05                	jne    c00196eb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c00196e6:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00196e9:	eb 03                	jmp    c00196ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00196eb:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c00196ee:	84 d2                	test   dl,dl
c00196f0:	75 05                	jne    c00196f7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c00196f2:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00196f5:	eb 3c                	jmp    c0019733 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196f7:	80 fa 01             	cmp    dl,0x1
c00196fa:	75 05                	jne    c0019701 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c00196fc:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00196ff:	eb 32                	jmp    c0019733 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019701:	80 fa 02             	cmp    dl,0x2
c0019704:	75 05                	jne    c001970b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019706:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019709:	eb 28                	jmp    c0019733 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001970b:	80 fa 03             	cmp    dl,0x3
c001970e:	75 05                	jne    c0019715 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019710:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019713:	eb 1e                	jmp    c0019733 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019715:	31 c0                	xor    eax,eax
c0019717:	80 fa 04             	cmp    dl,0x4
c001971a:	74 17                	je     c0019733 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001971c:	80 fa 05             	cmp    dl,0x5
c001971f:	75 05                	jne    c0019726 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019721:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019724:	eb 0d                	jmp    c0019733 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019726:	80 fa 06             	cmp    dl,0x6
c0019729:	75 05                	jne    c0019730 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001972b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001972e:	eb 03                	jmp    c0019733 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019730:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019733:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019738:	0f 94 c2             	sete   dl
c001973b:	80 f9 05             	cmp    cl,0x5
c001973e:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019742:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019747:	d3 e0                	shl    eax,cl
c0019749:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001974d:	74 0a                	je     c0019759 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001974f:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019752:	b9 07 00 00 00       	mov    ecx,0x7
c0019757:	eb 37                	jmp    c0019790 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019759:	01 f8                	add    eax,edi
c001975b:	b9 03 00 00 00       	mov    ecx,0x3
c0019760:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019765:	74 2b                	je     c0019792 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019767:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001976c:	75 0d                	jne    c001977b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001976e:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019772:	01 c8                	add    eax,ecx
c0019774:	b9 04 00 00 00       	mov    ecx,0x4
c0019779:	eb 17                	jmp    c0019792 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001977b:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001977e:	b9 07 00 00 00       	mov    ecx,0x7
c0019783:	eb 0d                	jmp    c0019792 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019785:	b9 02 00 00 00       	mov    ecx,0x2
c001978a:	b2 01                	mov    dl,0x1
c001978c:	31 c0                	xor    eax,eax
c001978e:	eb 02                	jmp    c0019792 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019790:	31 d2                	xor    edx,edx
c0019792:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019796:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019798:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001979c:	88 11                	mov    BYTE PTR [ecx],dl
c001979e:	5a                   	pop    edx
c001979f:	5b                   	pop    ebx
c00197a0:	5e                   	pop    esi
c00197a1:	5f                   	pop    edi
c00197a2:	c3                   	ret    

c00197a3 <Krnl::smpEntry()>:
c00197a3:	eb fe                	jmp    c00197a3 <Krnl::smpEntry()>

c00197a5 <Krnl::startCPU(int)>:
c00197a5:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c00197aa:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00197b1:	0f 84 36 01 00 00    	je     c00198ed <Krnl::startCPU(int)+0x148>
c00197b7:	53                   	push   ebx
c00197b8:	83 ec 10             	sub    esp,0x10
c00197bb:	fa                   	cli    
c00197bc:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c00197c2:	6a 1b                	push   0x1b
c00197c4:	ff 35 08 da 02 c0    	push   DWORD PTR ds:0xc002da08
c00197ca:	e8 71 53 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00197cf:	25 00 f0 ff ff       	and    eax,0xfffff000
c00197d4:	89 c3                	mov    ebx,eax
c00197d6:	58                   	pop    eax
c00197d7:	5a                   	pop    edx
c00197d8:	53                   	push   ebx
c00197d9:	68 1c b6 02 c0       	push   0xc002b61c
c00197de:	e8 40 8f ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c00197e3:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00197ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00197f1:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00197fb:	c1 e0 18             	shl    eax,0x18
c00197fe:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019804:	83 c4 10             	add    esp,0x10
c0019807:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001980d:	09 c2                	or     edx,eax
c001980f:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019815:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c001981b:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019821:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019827:	80 cd c5             	or     ch,0xc5
c001982a:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019830:	f3 90                	pause  
c0019832:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019834:	0f ba e1 0c          	bt     ecx,0xc
c0019838:	72 f6                	jb     c0019830 <Krnl::startCPU(int)+0x8b>
c001983a:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019840:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019846:	09 c1                	or     ecx,eax
c0019848:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001984e:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019854:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001985a:	80 cd 85             	or     ch,0x85
c001985d:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019863:	f3 90                	pause  
c0019865:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019867:	0f ba e1 0c          	bt     ecx,0xc
c001986b:	72 f6                	jb     c0019863 <Krnl::startCPU(int)+0xbe>
c001986d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019877:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001987d:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019883:	09 c1                	or     ecx,eax
c0019885:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001988b:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019891:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019897:	81 c9 02 06 00 00    	or     ecx,0x602
c001989d:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00198a3:	f3 90                	pause  
c00198a5:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00198a7:	0f ba e1 0c          	bt     ecx,0xc
c00198ab:	72 f6                	jb     c00198a3 <Krnl::startCPU(int)+0xfe>
c00198ad:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00198b7:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00198bd:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00198c3:	09 c8                	or     eax,ecx
c00198c5:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c00198cb:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c00198d1:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c00198d6:	0d 02 06 00 00       	or     eax,0x602
c00198db:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c00198e1:	f3 90                	pause  
c00198e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00198e5:	0f ba e0 0c          	bt     eax,0xc
c00198e9:	72 f6                	jb     c00198e1 <Krnl::startCPU(int)+0x13c>
c00198eb:	eb fe                	jmp    c00198eb <Krnl::startCPU(int)+0x146>
c00198ed:	c3                   	ret    

c00198ee <Krnl::startCPUs()>:
c00198ee:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c00198f3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00198f9:	88 c2                	mov    dl,al
c00198fb:	83 e2 0a             	and    edx,0xa
c00198fe:	80 fa 0a             	cmp    dl,0xa
c0019901:	75 09                	jne    c001990c <Krnl::startCPUs()+0x1e>
c0019903:	a8 01                	test   al,0x1
c0019905:	74 05                	je     c001990c <Krnl::startCPUs()+0x1e>
c0019907:	e9 8f 68 fe ff       	jmp    c000019b <prepareTramp>
c001990c:	c3                   	ret    
c001990d:	90                   	nop

c001990e <EnvVarContainer::getEnv(char const*)>:
c001990e:	57                   	push   edi
c001990f:	56                   	push   esi
c0019910:	53                   	push   ebx
c0019911:	31 db                	xor    ebx,ebx
c0019913:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019917:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019919:	7e 2b                	jle    c0019946 <EnvVarContainer::getEnv(char const*)+0x38>
c001991b:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019922:	50                   	push   eax
c0019923:	50                   	push   eax
c0019924:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019927:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001992a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001992e:	e8 65 6f fe ff       	call   c0000898 <strcmp>
c0019933:	83 c4 10             	add    esp,0x10
c0019936:	85 c0                	test   eax,eax
c0019938:	75 09                	jne    c0019943 <EnvVarContainer::getEnv(char const*)+0x35>
c001993a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001993d:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019941:	eb 05                	jmp    c0019948 <EnvVarContainer::getEnv(char const*)+0x3a>
c0019943:	43                   	inc    ebx
c0019944:	eb d1                	jmp    c0019917 <EnvVarContainer::getEnv(char const*)+0x9>
c0019946:	31 c0                	xor    eax,eax
c0019948:	5b                   	pop    ebx
c0019949:	5e                   	pop    esi
c001994a:	5f                   	pop    edi
c001994b:	c3                   	ret    

c001994c <EnvVarContainer::setEnv(char const*, char const*)>:
c001994c:	55                   	push   ebp
c001994d:	57                   	push   edi
c001994e:	56                   	push   esi
c001994f:	53                   	push   ebx
c0019950:	83 ec 28             	sub    esp,0x28
c0019953:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0019957:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001995b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001995f:	56                   	push   esi
c0019960:	e8 07 6e fe ff       	call   c000076c <strlen>
c0019965:	40                   	inc    eax
c0019966:	89 04 24             	mov    DWORD PTR [esp],eax
c0019969:	e8 2b 5c ff ff       	call   c000f599 <malloc>
c001996e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019971:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019975:	e8 f2 6d fe ff       	call   c000076c <strlen>
c001997a:	40                   	inc    eax
c001997b:	89 04 24             	mov    DWORD PTR [esp],eax
c001997e:	e8 16 5c ff ff       	call   c000f599 <malloc>
c0019983:	89 34 24             	mov    DWORD PTR [esp],esi
c0019986:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001998a:	e8 dd 6d fe ff       	call   c000076c <strlen>
c001998f:	83 c4 0c             	add    esp,0xc
c0019992:	40                   	inc    eax
c0019993:	50                   	push   eax
c0019994:	6a 00                	push   0x0
c0019996:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001999a:	e8 b1 6d fe ff       	call   c0000750 <memset>
c001999f:	89 34 24             	mov    DWORD PTR [esp],esi
c00199a2:	e8 c5 6d fe ff       	call   c000076c <strlen>
c00199a7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00199ab:	8d 48 01             	lea    ecx,[eax+0x1]
c00199ae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00199b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00199b3:	89 de                	mov    esi,ebx
c00199b5:	e8 b2 6d fe ff       	call   c000076c <strlen>
c00199ba:	83 c4 0c             	add    esp,0xc
c00199bd:	40                   	inc    eax
c00199be:	50                   	push   eax
c00199bf:	6a 00                	push   0x0
c00199c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00199c5:	e8 86 6d fe ff       	call   c0000750 <memset>
c00199ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00199cd:	e8 9a 6d fe ff       	call   c000076c <strlen>
c00199d2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00199d6:	8d 48 01             	lea    ecx,[eax+0x1]
c00199d9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00199db:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00199de:	40                   	inc    eax
c00199df:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00199e2:	c1 e0 03             	shl    eax,0x3
c00199e5:	5a                   	pop    edx
c00199e6:	59                   	pop    ecx
c00199e7:	50                   	push   eax
c00199e8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00199eb:	e8 95 5b ff ff       	call   c000f585 <realloc>
c00199f0:	8d 74 24 18          	lea    esi,[esp+0x18]
c00199f4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00199f7:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00199fa:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00199fe:	b9 08 00 00 00       	mov    ecx,0x8
c0019a03:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019a05:	83 c4 2c             	add    esp,0x2c
c0019a08:	5b                   	pop    ebx
c0019a09:	5e                   	pop    esi
c0019a0a:	5f                   	pop    edi
c0019a0b:	5d                   	pop    ebp
c0019a0c:	c3                   	ret    
c0019a0d:	90                   	nop

c0019a0e <EnvVarContainer::deleteEnv(char const*)>:
c0019a0e:	c3                   	ret    
c0019a0f:	90                   	nop

c0019a10 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019a10:	55                   	push   ebp
c0019a11:	57                   	push   edi
c0019a12:	56                   	push   esi
c0019a13:	53                   	push   ebx
c0019a14:	81 ec 38 01 00 00    	sub    esp,0x138
c0019a1a:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0019a21:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0019a28:	68 14 01 00 00       	push   0x114
c0019a2d:	e8 67 5b ff ff       	call   c000f599 <malloc>
c0019a32:	83 c4 0c             	add    esp,0xc
c0019a35:	89 c3                	mov    ebx,eax
c0019a37:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019a3a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019a41:	50                   	push   eax
c0019a42:	e8 3b 92 ff ff       	call   c0012c82 <File::File(char const*, Process*)>
c0019a47:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a4a:	e8 05 95 ff ff       	call   c0012f54 <File::exists()>
c0019a4f:	83 c4 10             	add    esp,0x10
c0019a52:	84 c0                	test   al,al
c0019a54:	75 31                	jne    c0019a87 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019a56:	50                   	push   eax
c0019a57:	50                   	push   eax
c0019a58:	6a 12                	push   0x12
c0019a5a:	53                   	push   ebx
c0019a5b:	e8 86 92 ff ff       	call   c0012ce6 <File::open(FileOpenMode)>
c0019a60:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a62:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019a65:	89 34 24             	mov    DWORD PTR [esp],esi
c0019a68:	e8 ff 6c fe ff       	call   c000076c <strlen>
c0019a6d:	5a                   	pop    edx
c0019a6e:	31 d2                	xor    edx,edx
c0019a70:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019a74:	51                   	push   ecx
c0019a75:	56                   	push   esi
c0019a76:	52                   	push   edx
c0019a77:	50                   	push   eax
c0019a78:	53                   	push   ebx
c0019a79:	ff d7                	call   edi
c0019a7b:	83 c4 14             	add    esp,0x14
c0019a7e:	53                   	push   ebx
c0019a7f:	e8 c0 92 ff ff       	call   c0012d44 <File::close()>
c0019a84:	83 c4 10             	add    esp,0x10
c0019a87:	56                   	push   esi
c0019a88:	31 f6                	xor    esi,esi
c0019a8a:	68 00 01 00 00       	push   0x100
c0019a8f:	6a 00                	push   0x0
c0019a91:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019a95:	50                   	push   eax
c0019a96:	e8 b5 6c fe ff       	call   c0000750 <memset>
c0019a9b:	5f                   	pop    edi
c0019a9c:	58                   	pop    eax
c0019a9d:	6a 01                	push   0x1
c0019a9f:	53                   	push   ebx
c0019aa0:	e8 41 92 ff ff       	call   c0012ce6 <File::open(FileOpenMode)>
c0019aa5:	83 c4 10             	add    esp,0x10
c0019aa8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019ab0:	83 ec 0c             	sub    esp,0xc
c0019ab3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ab5:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019ab9:	51                   	push   ecx
c0019aba:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019abe:	52                   	push   edx
c0019abf:	6a 00                	push   0x0
c0019ac1:	6a 01                	push   0x1
c0019ac3:	53                   	push   ebx
c0019ac4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019ac7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019acb:	83 c4 20             	add    esp,0x20
c0019ace:	3c 0d                	cmp    al,0xd
c0019ad0:	0f 84 09 01 00 00    	je     c0019bdf <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019ad6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019adb:	0f 84 ef 00 00 00    	je     c0019bd0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019ae1:	3c 0a                	cmp    al,0xa
c0019ae3:	74 13                	je     c0019af8 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019ae5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019aea:	74 0c                	je     c0019af8 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019aec:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0019af2:	0f 8e d8 00 00 00    	jle    c0019bd0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019af8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019afc:	83 ec 0c             	sub    esp,0xc
c0019aff:	8d 78 01             	lea    edi,[eax+0x1]
c0019b02:	57                   	push   edi
c0019b03:	e8 91 5a ff ff       	call   c000f599 <malloc>
c0019b08:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0019b0c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019b10:	8d 56 04             	lea    edx,[esi+0x4]
c0019b13:	89 14 24             	mov    DWORD PTR [esp],edx
c0019b16:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019b1a:	e8 7a 5a ff ff       	call   c000f599 <malloc>
c0019b1f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019b23:	83 c4 0c             	add    esp,0xc
c0019b26:	57                   	push   edi
c0019b27:	6a 00                	push   0x0
c0019b29:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019b2d:	e8 1e 6c fe ff       	call   c0000750 <memset>
c0019b32:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019b36:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019b3a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019b3e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019b40:	83 c4 0c             	add    esp,0xc
c0019b43:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b47:	52                   	push   edx
c0019b48:	6a 00                	push   0x0
c0019b4a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019b4e:	e8 fd 6b fe ff       	call   c0000750 <memset>
c0019b53:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019b57:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0019b5b:	89 34 24             	mov    DWORD PTR [esp],esi
c0019b5e:	e8 09 6c fe ff       	call   c000076c <strlen>
c0019b63:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0019b67:	89 c1                	mov    ecx,eax
c0019b69:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019b6b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019b6e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0019b71:	40                   	inc    eax
c0019b72:	83 c4 10             	add    esp,0x10
c0019b75:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019b78:	85 d2                	test   edx,edx
c0019b7a:	75 0c                	jne    c0019b88 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0019b7c:	83 ec 0c             	sub    esp,0xc
c0019b7f:	6a 08                	push   0x8
c0019b81:	e8 13 5a ff ff       	call   c000f599 <malloc>
c0019b86:	eb 0c                	jmp    c0019b94 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0019b88:	c1 e0 03             	shl    eax,0x3
c0019b8b:	51                   	push   ecx
c0019b8c:	51                   	push   ecx
c0019b8d:	50                   	push   eax
c0019b8e:	52                   	push   edx
c0019b8f:	e8 f1 59 ff ff       	call   c000f585 <realloc>
c0019b94:	83 c4 10             	add    esp,0x10
c0019b97:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019b9a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019b9d:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0019ba0:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019ba4:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019ba8:	b9 08 00 00 00       	mov    ecx,0x8
c0019bad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019baf:	31 f6                	xor    esi,esi
c0019bb1:	50                   	push   eax
c0019bb2:	68 00 01 00 00       	push   0x100
c0019bb7:	6a 00                	push   0x0
c0019bb9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019bbd:	50                   	push   eax
c0019bbe:	e8 8d 6b fe ff       	call   c0000750 <memset>
c0019bc3:	83 c4 10             	add    esp,0x10
c0019bc6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019bce:	eb 0f                	jmp    c0019bdf <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019bd0:	3c 3d                	cmp    al,0x3d
c0019bd2:	74 07                	je     c0019bdb <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0019bd4:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0019bd8:	46                   	inc    esi
c0019bd9:	eb 04                	jmp    c0019bdf <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019bdb:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0019bdf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019be4:	0f 85 c6 fe ff ff    	jne    c0019ab0 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0019bea:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019bf0:	5b                   	pop    ebx
c0019bf1:	5e                   	pop    esi
c0019bf2:	5f                   	pop    edi
c0019bf3:	5d                   	pop    ebp
c0019bf4:	c3                   	ret    
c0019bf5:	90                   	nop

c0019bf6 <EnvVarContainer::__loadSystem()>:
c0019bf6:	83 ec 10             	sub    esp,0x10
c0019bf9:	68 40 cf 02 c0       	push   0xc002cf40
c0019bfe:	68 2d b6 02 c0       	push   0xc002b62d
c0019c03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019c07:	e8 04 fe ff ff       	call   c0019a10 <EnvVarContainer::loadFrom(char const*, char const*)>
c0019c0c:	83 c4 1c             	add    esp,0x1c
c0019c0f:	c3                   	ret    

c0019c10 <EnvVarContainer::__loadUser()>:
c0019c10:	c3                   	ret    
c0019c11:	90                   	nop

c0019c12 <EnvVarContainer::EnvVarContainer(Process*)>:
c0019c12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c16:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019c1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019c24:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019c27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c2b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019c32:	90                   	nop
c0019c33:	c3                   	ret    

c0019c34 <EnvVarContainer::~EnvVarContainer()>:
c0019c34:	83 ec 0c             	sub    esp,0xc
c0019c37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c3b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019c3e:	85 c0                	test   eax,eax
c0019c40:	74 1d                	je     c0019c5f <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019c42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c46:	8b 00                	mov    eax,DWORD PTR [eax]
c0019c48:	85 c0                	test   eax,eax
c0019c4a:	74 13                	je     c0019c5f <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019c4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c50:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019c53:	83 ec 0c             	sub    esp,0xc
c0019c56:	50                   	push   eax
c0019c57:	e8 4d 59 ff ff       	call   c000f5a9 <free>
c0019c5c:	83 c4 10             	add    esp,0x10
c0019c5f:	90                   	nop
c0019c60:	83 c4 0c             	add    esp,0xc
c0019c63:	c3                   	ret    

c0019c64 <Krnl::getEnv(Process*, char const*)>:
c0019c64:	53                   	push   ebx
c0019c65:	83 ec 08             	sub    esp,0x8
c0019c68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c6c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019c70:	39 05 50 0f 03 c0    	cmp    DWORD PTR ds:0xc0030f50,eax
c0019c76:	74 04                	je     c0019c7c <Krnl::getEnv(Process*, char const*)+0x18>
c0019c78:	85 c0                	test   eax,eax
c0019c7a:	75 0b                	jne    c0019c87 <Krnl::getEnv(Process*, char const*)+0x23>
c0019c7c:	a1 34 05 03 c0       	mov    eax,ds:0xc0030534
c0019c81:	85 c0                	test   eax,eax
c0019c83:	75 19                	jne    c0019c9e <Krnl::getEnv(Process*, char const*)+0x3a>
c0019c85:	eb 27                	jmp    c0019cae <Krnl::getEnv(Process*, char const*)+0x4a>
c0019c87:	52                   	push   edx
c0019c88:	52                   	push   edx
c0019c89:	53                   	push   ebx
c0019c8a:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019c90:	e8 79 fc ff ff       	call   c001990e <EnvVarContainer::getEnv(char const*)>
c0019c95:	83 c4 10             	add    esp,0x10
c0019c98:	85 c0                	test   eax,eax
c0019c9a:	75 28                	jne    c0019cc4 <Krnl::getEnv(Process*, char const*)+0x60>
c0019c9c:	eb de                	jmp    c0019c7c <Krnl::getEnv(Process*, char const*)+0x18>
c0019c9e:	52                   	push   edx
c0019c9f:	52                   	push   edx
c0019ca0:	53                   	push   ebx
c0019ca1:	50                   	push   eax
c0019ca2:	e8 67 fc ff ff       	call   c001990e <EnvVarContainer::getEnv(char const*)>
c0019ca7:	83 c4 10             	add    esp,0x10
c0019caa:	85 c0                	test   eax,eax
c0019cac:	75 16                	jne    c0019cc4 <Krnl::getEnv(Process*, char const*)+0x60>
c0019cae:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019cb2:	a1 38 05 03 c0       	mov    eax,ds:0xc0030538
c0019cb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019cbb:	83 c4 08             	add    esp,0x8
c0019cbe:	5b                   	pop    ebx
c0019cbf:	e9 4a fc ff ff       	jmp    c001990e <EnvVarContainer::getEnv(char const*)>
c0019cc4:	83 c4 08             	add    esp,0x8
c0019cc7:	5b                   	pop    ebx
c0019cc8:	c3                   	ret    

c0019cc9 <Krnl::setEnvSystem(char const*, char const*)>:
c0019cc9:	83 ec 10             	sub    esp,0x10
c0019ccc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019cd0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019cd4:	ff 35 38 05 03 c0    	push   DWORD PTR ds:0xc0030538
c0019cda:	e8 6d fc ff ff       	call   c001994c <EnvVarContainer::setEnv(char const*, char const*)>
c0019cdf:	83 c4 1c             	add    esp,0x1c
c0019ce2:	c3                   	ret    

c0019ce3 <Krnl::setEnvUser(char const*, char const*)>:
c0019ce3:	a1 34 05 03 c0       	mov    eax,ds:0xc0030534
c0019ce8:	85 c0                	test   eax,eax
c0019cea:	74 15                	je     c0019d01 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019cec:	83 ec 10             	sub    esp,0x10
c0019cef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019cf3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019cf7:	50                   	push   eax
c0019cf8:	e8 4f fc ff ff       	call   c001994c <EnvVarContainer::setEnv(char const*, char const*)>
c0019cfd:	83 c4 1c             	add    esp,0x1c
c0019d00:	c3                   	ret    
c0019d01:	c3                   	ret    

c0019d02 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019d02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d06:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019d0c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019d10:	e9 37 fc ff ff       	jmp    c001994c <EnvVarContainer::setEnv(char const*, char const*)>

c0019d15 <Krnl::deleteEnvSystem(char const*)>:
c0019d15:	c3                   	ret    

c0019d16 <Krnl::deleteEnvUser(char const*)>:
c0019d16:	c3                   	ret    

c0019d17 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019d17:	c3                   	ret    

c0019d18 <Krnl::newProcessEnv(Process*)>:
c0019d18:	83 ec 28             	sub    esp,0x28
c0019d1b:	6a 0c                	push   0xc
c0019d1d:	e8 77 58 ff ff       	call   c000f599 <malloc>
c0019d22:	5a                   	pop    edx
c0019d23:	59                   	pop    ecx
c0019d24:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019d28:	50                   	push   eax
c0019d29:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019d2d:	e8 e0 fe ff ff       	call   c0019c12 <EnvVarContainer::EnvVarContainer(Process*)>
c0019d32:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019d36:	83 c4 2c             	add    esp,0x2c
c0019d39:	c3                   	ret    

c0019d3a <Krnl::copyProcessEnv(Process*, Process*)>:
c0019d3a:	57                   	push   edi
c0019d3b:	56                   	push   esi
c0019d3c:	53                   	push   ebx
c0019d3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d41:	83 ec 0c             	sub    esp,0xc
c0019d44:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c0019d4a:	6a 0c                	push   0xc
c0019d4c:	e8 48 58 ff ff       	call   c000f599 <malloc>
c0019d51:	89 c3                	mov    ebx,eax
c0019d53:	58                   	pop    eax
c0019d54:	5a                   	pop    edx
c0019d55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d59:	53                   	push   ebx
c0019d5a:	e8 b3 fe ff ff       	call   c0019c12 <EnvVarContainer::EnvVarContainer(Process*)>
c0019d5f:	8b 07                	mov    eax,DWORD PTR [edi]
c0019d61:	89 03                	mov    DWORD PTR [ebx],eax
c0019d63:	c1 e0 03             	shl    eax,0x3
c0019d66:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d69:	e8 2b 58 ff ff       	call   c000f599 <malloc>
c0019d6e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019d71:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0019d73:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0019d76:	c1 e1 03             	shl    ecx,0x3
c0019d79:	89 c7                	mov    edi,eax
c0019d7b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019d7d:	83 c4 10             	add    esp,0x10
c0019d80:	89 d8                	mov    eax,ebx
c0019d82:	5b                   	pop    ebx
c0019d83:	5e                   	pop    esi
c0019d84:	5f                   	pop    edi
c0019d85:	c3                   	ret    

c0019d86 <Krnl::loadSystemEnv()>:
c0019d86:	53                   	push   ebx
c0019d87:	83 ec 14             	sub    esp,0x14
c0019d8a:	6a 0c                	push   0xc
c0019d8c:	e8 08 58 ff ff       	call   c000f599 <malloc>
c0019d91:	89 c3                	mov    ebx,eax
c0019d93:	58                   	pop    eax
c0019d94:	5a                   	pop    edx
c0019d95:	ff 35 50 0f 03 c0    	push   DWORD PTR ds:0xc0030f50
c0019d9b:	53                   	push   ebx
c0019d9c:	e8 71 fe ff ff       	call   c0019c12 <EnvVarContainer::EnvVarContainer(Process*)>
c0019da1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019da4:	89 1d 38 05 03 c0    	mov    DWORD PTR ds:0xc0030538,ebx
c0019daa:	e8 47 fe ff ff       	call   c0019bf6 <EnvVarContainer::__loadSystem()>
c0019daf:	83 c4 18             	add    esp,0x18
c0019db2:	5b                   	pop    ebx
c0019db3:	c3                   	ret    

c0019db4 <Krnl::loadUserEnv()>:
c0019db4:	53                   	push   ebx
c0019db5:	83 ec 14             	sub    esp,0x14
c0019db8:	6a 0c                	push   0xc
c0019dba:	e8 da 57 ff ff       	call   c000f599 <malloc>
c0019dbf:	89 c3                	mov    ebx,eax
c0019dc1:	58                   	pop    eax
c0019dc2:	5a                   	pop    edx
c0019dc3:	ff 35 50 0f 03 c0    	push   DWORD PTR ds:0xc0030f50
c0019dc9:	53                   	push   ebx
c0019dca:	e8 43 fe ff ff       	call   c0019c12 <EnvVarContainer::EnvVarContainer(Process*)>
c0019dcf:	89 1d 34 05 03 c0    	mov    DWORD PTR ds:0xc0030534,ebx
c0019dd5:	83 c4 18             	add    esp,0x18
c0019dd8:	5b                   	pop    ebx
c0019dd9:	c3                   	ret    

c0019dda <Krnl::flushEnv()>:
c0019dda:	c3                   	ret    

c0019ddb <Krnl::getProcessTotalEnvCount(Process*)>:
c0019ddb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ddf:	8b 15 34 05 03 c0    	mov    edx,DWORD PTR ds:0xc0030534
c0019de5:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019deb:	a1 38 05 03 c0       	mov    eax,ds:0xc0030538
c0019df0:	8b 00                	mov    eax,DWORD PTR [eax]
c0019df2:	03 01                	add    eax,DWORD PTR [ecx]
c0019df4:	85 d2                	test   edx,edx
c0019df6:	74 02                	je     c0019dfa <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019df8:	03 02                	add    eax,DWORD PTR [edx]
c0019dfa:	c3                   	ret    

c0019dfb <Krnl::getProcessEnvPair(Process*, int)>:
c0019dfb:	57                   	push   edi
c0019dfc:	56                   	push   esi
c0019dfd:	8b 35 34 05 03 c0    	mov    esi,DWORD PTR ds:0xc0030534
c0019e03:	53                   	push   ebx
c0019e04:	85 f6                	test   esi,esi
c0019e06:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019e0a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e0e:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019e14:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019e18:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019e1a:	75 16                	jne    c0019e32 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0019e1c:	39 c2                	cmp    edx,eax
c0019e1e:	7c 16                	jl     c0019e36 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019e20:	8b 0d 38 05 03 c0    	mov    ecx,DWORD PTR ds:0xc0030538
c0019e26:	8b 31                	mov    esi,DWORD PTR [ecx]
c0019e28:	01 c6                	add    esi,eax
c0019e2a:	39 d6                	cmp    esi,edx
c0019e2c:	7e 3c                	jle    c0019e6a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019e2e:	29 c2                	sub    edx,eax
c0019e30:	eb 04                	jmp    c0019e36 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019e32:	39 c2                	cmp    edx,eax
c0019e34:	7d 05                	jge    c0019e3b <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0019e36:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019e39:	eb 20                	jmp    c0019e5b <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0019e3b:	8b 3e                	mov    edi,DWORD PTR [esi]
c0019e3d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0019e40:	39 d1                	cmp    ecx,edx
c0019e42:	7e 04                	jle    c0019e48 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0019e44:	29 c2                	sub    edx,eax
c0019e46:	eb 10                	jmp    c0019e58 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0019e48:	8b 35 38 05 03 c0    	mov    esi,DWORD PTR ds:0xc0030538
c0019e4e:	03 0e                	add    ecx,DWORD PTR [esi]
c0019e50:	39 d1                	cmp    ecx,edx
c0019e52:	7e 16                	jle    c0019e6a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019e54:	29 c2                	sub    edx,eax
c0019e56:	29 fa                	sub    edx,edi
c0019e58:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019e5b:	8d 14 d0             	lea    edx,[eax+edx*8]
c0019e5e:	8b 02                	mov    eax,DWORD PTR [edx]
c0019e60:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0019e63:	89 03                	mov    DWORD PTR [ebx],eax
c0019e65:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0019e68:	eb 1d                	jmp    c0019e87 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0019e6a:	83 ec 0c             	sub    esp,0xc
c0019e6d:	68 4f b6 02 c0       	push   0xc002b64f
c0019e72:	e8 18 00 00 00       	call   c0019e8f <Krnl::panic(char const*)>
c0019e77:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0019e7d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019e84:	83 c4 10             	add    esp,0x10
c0019e87:	89 d8                	mov    eax,ebx
c0019e89:	5b                   	pop    ebx
c0019e8a:	5e                   	pop    esi
c0019e8b:	5f                   	pop    edi
c0019e8c:	c2 04 00             	ret    0x4

c0019e8f <Krnl::panic(char const*)>:
c0019e8f:	55                   	push   ebp
c0019e90:	89 e5                	mov    ebp,esp
c0019e92:	53                   	push   ebx
c0019e93:	83 ec 10             	sub    esp,0x10
c0019e96:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019e99:	fa                   	cli    
c0019e9a:	c6 05 44 05 03 c0 01 	mov    BYTE PTR ds:0xc0030544,0x1
c0019ea1:	53                   	push   ebx
c0019ea2:	e8 4c 57 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0019ea7:	58                   	pop    eax
c0019ea8:	c6 05 40 c9 02 c0 00 	mov    BYTE PTR ds:0xc002c940,0x0
c0019eaf:	5a                   	pop    edx
c0019eb0:	53                   	push   ebx
c0019eb1:	68 69 b6 02 c0       	push   0xc002b669
c0019eb6:	e8 68 88 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0019ebb:	59                   	pop    ecx
c0019ebc:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0019ec1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ec7:	e8 87 64 ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c0019ecc:	83 c4 0c             	add    esp,0xc
c0019ecf:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0019ed4:	6a 01                	push   0x1
c0019ed6:	6a 0f                	push   0xf
c0019ed8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ede:	e8 cf 62 ff ff       	call   c00101b2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019ee3:	58                   	pop    eax
c0019ee4:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0019ee9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019eef:	e8 e0 67 ff ff       	call   c00106d4 <VgaText::clearScreen()>
c0019ef4:	58                   	pop    eax
c0019ef5:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0019efa:	5a                   	pop    edx
c0019efb:	68 82 b6 02 c0       	push   0xc002b682
c0019f00:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f06:	e8 55 69 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019f0b:	59                   	pop    ecx
c0019f0c:	58                   	pop    eax
c0019f0d:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0019f12:	68 28 b7 02 c0       	push   0xc002b728
c0019f17:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f1d:	e8 3e 69 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019f22:	58                   	pop    eax
c0019f23:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0019f28:	5a                   	pop    edx
c0019f29:	68 9e b6 02 c0       	push   0xc002b69e
c0019f2e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f34:	e8 27 69 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019f39:	59                   	pop    ecx
c0019f3a:	58                   	pop    eax
c0019f3b:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0019f40:	53                   	push   ebx
c0019f41:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f47:	e8 14 69 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019f4c:	58                   	pop    eax
c0019f4d:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0019f52:	5a                   	pop    edx
c0019f53:	68 be b6 02 c0       	push   0xc002b6be
c0019f58:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f5e:	e8 fd 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019f63:	a1 40 05 03 c0       	mov    eax,ds:0xc0030540
c0019f68:	83 c4 10             	add    esp,0x10
c0019f6b:	85 c0                	test   eax,eax
c0019f6d:	74 02                	je     c0019f71 <Krnl::panic(char const*)+0xe2>
c0019f6f:	ff d0                	call   eax
c0019f71:	83 ec 0c             	sub    esp,0xc
c0019f74:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019f77:	e8 8c 30 00 00       	call   c001d008 <Thr::getDriverNameFromAddress(unsigned long)>
c0019f7c:	83 c4 10             	add    esp,0x10
c0019f7f:	89 c3                	mov    ebx,eax
c0019f81:	85 c0                	test   eax,eax
c0019f83:	0f 84 4e 02 00 00    	je     c001a1d7 <Krnl::panic(char const*)+0x348>
c0019f89:	83 ec 08             	sub    esp,0x8
c0019f8c:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0019f91:	68 64 b7 02 c0       	push   0xc002b764
c0019f96:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f9c:	e8 bf 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019fa1:	58                   	pop    eax
c0019fa2:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0019fa7:	5a                   	pop    edx
c0019fa8:	68 9e b6 02 c0       	push   0xc002b69e
c0019fad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fb3:	e8 a8 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019fb8:	59                   	pop    ecx
c0019fb9:	58                   	pop    eax
c0019fba:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0019fbf:	53                   	push   ebx
c0019fc0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fc6:	e8 95 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019fcb:	83 c4 10             	add    esp,0x10
c0019fce:	83 ec 08             	sub    esp,0x8
c0019fd1:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0019fd6:	68 bd b6 02 c0       	push   0xc002b6bd
c0019fdb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fe1:	e8 7a 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019fe6:	58                   	pop    eax
c0019fe7:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0019fec:	5a                   	pop    edx
c0019fed:	68 bc b7 02 c0       	push   0xc002b7bc
c0019ff2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ff8:	e8 63 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019ffd:	59                   	pop    ecx
c0019ffe:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001a003:	5b                   	pop    ebx
c001a004:	68 fc b7 02 c0       	push   0xc002b7fc
c001a009:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a00f:	e8 4c 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a014:	58                   	pop    eax
c001a015:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001a01a:	5a                   	pop    edx
c001a01b:	68 a9 b6 02 c0       	push   0xc002b6a9
c001a020:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a026:	e8 35 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a02b:	59                   	pop    ecx
c001a02c:	5b                   	pop    ebx
c001a02d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a030:	68 c1 b6 02 c0       	push   0xc002b6c1
c001a035:	e8 e9 86 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c001a03a:	58                   	pop    eax
c001a03b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a03e:	5a                   	pop    edx
c001a03f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a042:	68 ca b6 02 c0       	push   0xc002b6ca
c001a047:	e8 d7 86 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c001a04c:	59                   	pop    ecx
c001a04d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a050:	5b                   	pop    ebx
c001a051:	8b 00                	mov    eax,DWORD PTR [eax]
c001a053:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a056:	68 d3 b6 02 c0       	push   0xc002b6d3
c001a05b:	e8 c3 86 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c001a060:	58                   	pop    eax
c001a061:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001a066:	5a                   	pop    edx
c001a067:	68 40 b8 02 c0       	push   0xc002b840
c001a06c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a072:	e8 e9 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a077:	59                   	pop    ecx
c001a078:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001a07d:	5b                   	pop    ebx
c001a07e:	68 dc b6 02 c0       	push   0xc002b6dc
c001a083:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a089:	e8 d2 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a08e:	0f 20 c0             	mov    eax,cr0
c001a091:	5a                   	pop    edx
c001a092:	59                   	pop    ecx
c001a093:	50                   	push   eax
c001a094:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001a099:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a09f:	e8 76 67 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a0a4:	5b                   	pop    ebx
c001a0a5:	58                   	pop    eax
c001a0a6:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001a0ab:	68 e6 b6 02 c0       	push   0xc002b6e6
c001a0b0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0b6:	e8 a5 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a0bb:	0f 20 d0             	mov    eax,cr2
c001a0be:	5a                   	pop    edx
c001a0bf:	59                   	pop    ecx
c001a0c0:	50                   	push   eax
c001a0c1:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001a0c6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0cc:	e8 49 67 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a0d1:	5b                   	pop    ebx
c001a0d2:	58                   	pop    eax
c001a0d3:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001a0d8:	68 f0 b6 02 c0       	push   0xc002b6f0
c001a0dd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0e3:	e8 78 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a0e8:	0f 20 d8             	mov    eax,cr3
c001a0eb:	5a                   	pop    edx
c001a0ec:	59                   	pop    ecx
c001a0ed:	50                   	push   eax
c001a0ee:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001a0f3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0f9:	e8 1c 67 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a0fe:	5b                   	pop    ebx
c001a0ff:	58                   	pop    eax
c001a100:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001a105:	68 03 b7 02 c0       	push   0xc002b703
c001a10a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a110:	e8 4b 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a115:	0f 20 e0             	mov    eax,cr4
c001a118:	5a                   	pop    edx
c001a119:	59                   	pop    ecx
c001a11a:	50                   	push   eax
c001a11b:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001a120:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a126:	e8 ef 66 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a12b:	5b                   	pop    ebx
c001a12c:	58                   	pop    eax
c001a12d:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001a132:	68 0d b7 02 c0       	push   0xc002b70d
c001a137:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a13d:	e8 1e 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a142:	5a                   	pop    edx
c001a143:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001a148:	59                   	pop    ecx
c001a149:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a14f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a152:	50                   	push   eax
c001a153:	e8 c2 66 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a158:	5b                   	pop    ebx
c001a159:	58                   	pop    eax
c001a15a:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001a15f:	68 24 b7 02 c0       	push   0xc002b724
c001a164:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a16a:	e8 f1 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a16f:	5a                   	pop    edx
c001a170:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001a175:	59                   	pop    ecx
c001a176:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a17c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a17f:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a182:	50                   	push   eax
c001a183:	e8 92 66 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a188:	5b                   	pop    ebx
c001a189:	58                   	pop    eax
c001a18a:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001a18f:	68 24 b7 02 c0       	push   0xc002b724
c001a194:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a19a:	e8 c1 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a19f:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001a1a4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a1a7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a1ad:	8b 12                	mov    edx,DWORD PTR [edx]
c001a1af:	59                   	pop    ecx
c001a1b0:	5b                   	pop    ebx
c001a1b1:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a1b4:	50                   	push   eax
c001a1b5:	e8 60 66 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a1ba:	83 c4 10             	add    esp,0x10
c001a1bd:	b2 fe                	mov    dl,0xfe
c001a1bf:	e4 60                	in     al,0x60
c001a1c1:	3c 1c                	cmp    al,0x1c
c001a1c3:	74 04                	je     c001a1c9 <Krnl::panic(char const*)+0x33a>
c001a1c5:	3c 5a                	cmp    al,0x5a
c001a1c7:	75 f6                	jne    c001a1bf <Krnl::panic(char const*)+0x330>
c001a1c9:	e4 64                	in     al,0x64
c001a1cb:	a8 02                	test   al,0x2
c001a1cd:	75 fa                	jne    c001a1c9 <Krnl::panic(char const*)+0x33a>
c001a1cf:	88 d0                	mov    al,dl
c001a1d1:	e6 64                	out    0x64,al
c001a1d3:	fa                   	cli    
c001a1d4:	f4                   	hlt    
c001a1d5:	eb e8                	jmp    c001a1bf <Krnl::panic(char const*)+0x330>
c001a1d7:	50                   	push   eax
c001a1d8:	50                   	push   eax
c001a1d9:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001a1de:	68 90 b7 02 c0       	push   0xc002b790
c001a1e3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1e9:	e8 72 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a1ee:	58                   	pop    eax
c001a1ef:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001a1f4:	5a                   	pop    edx
c001a1f5:	68 9e b6 02 c0       	push   0xc002b69e
c001a1fa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a200:	e8 5b 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a205:	59                   	pop    ecx
c001a206:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a20b:	5b                   	pop    ebx
c001a20c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a20f:	83 c0 0c             	add    eax,0xc
c001a212:	50                   	push   eax
c001a213:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001a218:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a21e:	e8 3d 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a223:	83 c4 10             	add    esp,0x10
c001a226:	e9 a3 fd ff ff       	jmp    c0019fce <Krnl::panic(char const*)+0x13f>

c001a22b <Net::switchEndian16(unsigned short)>:
c001a22b:	83 ec 04             	sub    esp,0x4
c001a22e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a232:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a236:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a23a:	c1 f8 08             	sar    eax,0x8
c001a23d:	89 c2                	mov    edx,eax
c001a23f:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a243:	c1 e0 08             	shl    eax,0x8
c001a246:	09 d0                	or     eax,edx
c001a248:	83 c4 04             	add    esp,0x4
c001a24b:	c3                   	ret    

c001a24c <Net::switchEndian32(unsigned int)>:
c001a24c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a250:	c1 e8 18             	shr    eax,0x18
c001a253:	89 c2                	mov    edx,eax
c001a255:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a259:	c1 e0 08             	shl    eax,0x8
c001a25c:	25 00 00 ff 00       	and    eax,0xff0000
c001a261:	09 c2                	or     edx,eax
c001a263:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a267:	c1 e8 08             	shr    eax,0x8
c001a26a:	25 00 ff 00 00       	and    eax,0xff00
c001a26f:	09 c2                	or     edx,eax
c001a271:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a275:	c1 e0 18             	shl    eax,0x18
c001a278:	09 d0                	or     eax,edx
c001a27a:	c3                   	ret    

c001a27b <Net::crc32Calc(unsigned char*, int)>:
c001a27b:	83 ec 10             	sub    esp,0x10
c001a27e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a283:	75 07                	jne    c001a28c <Net::crc32Calc(unsigned char*, int)+0x11>
c001a285:	b8 00 00 00 00       	mov    eax,0x0
c001a28a:	eb 7c                	jmp    c001a308 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a28c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a291:	7f 07                	jg     c001a29a <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a293:	b8 00 00 00 00       	mov    eax,0x0
c001a298:	eb 6e                	jmp    c001a308 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a29a:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a2a2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a2ae:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a2b2:	7d 4e                	jge    c001a302 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a2b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a2b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a2bc:	01 d0                	add    eax,edx
c001a2be:	8a 00                	mov    al,BYTE PTR [eax]
c001a2c0:	0f b6 c0             	movzx  eax,al
c001a2c3:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a2c7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a2cf:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a2d4:	7f 26                	jg     c001a2fc <Net::crc32Calc(unsigned char*, int)+0x81>
c001a2d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2da:	83 e0 01             	and    eax,0x1
c001a2dd:	74 0d                	je     c001a2ec <Net::crc32Calc(unsigned char*, int)+0x71>
c001a2df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2e3:	d1 e8                	shr    eax,1
c001a2e5:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a2ea:	eb 06                	jmp    c001a2f2 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a2ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2f0:	d1 e8                	shr    eax,1
c001a2f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a2f6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a2fa:	eb d3                	jmp    c001a2cf <Net::crc32Calc(unsigned char*, int)+0x54>
c001a2fc:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a300:	eb a8                	jmp    c001a2aa <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a302:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a306:	f7 d0                	not    eax
c001a308:	83 c4 10             	add    esp,0x10
c001a30b:	c3                   	ret    

c001a30c <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a30c:	57                   	push   edi
c001a30d:	56                   	push   esi
c001a30e:	53                   	push   ebx
c001a30f:	83 ec 60             	sub    esp,0x60
c001a312:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a319:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a31d:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a325:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a32a:	7f 1a                	jg     c001a346 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a32c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a333:	8d 50 01             	lea    edx,[eax+0x1]
c001a336:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a33d:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a340:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a344:	eb df                	jmp    c001a325 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a346:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a34d:	8d 50 01             	lea    edx,[eax+0x1]
c001a350:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a357:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a35a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a361:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a365:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a369:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a36d:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a375:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a379:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a37d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a381:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a385:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a389:	89 c6                	mov    esi,eax
c001a38b:	89 d7                	mov    edi,edx
c001a38d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a38f:	89 c8                	mov    eax,ecx
c001a391:	89 fa                	mov    edx,edi
c001a393:	89 f3                	mov    ebx,esi
c001a395:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a399:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a39d:	89 04 24             	mov    DWORD PTR [esp],eax
c001a3a0:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a3a8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a3af:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a3b3:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a3b7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a3bb:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a3c3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a3c7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a3cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a3cf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a3d3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a3d7:	89 c6                	mov    esi,eax
c001a3d9:	89 d7                	mov    edi,edx
c001a3db:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a3dd:	89 c8                	mov    eax,ecx
c001a3df:	89 fa                	mov    edx,edi
c001a3e1:	89 f3                	mov    ebx,esi
c001a3e3:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a3e7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a3eb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a3ef:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a3f7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a3fe:	0f b7 c0             	movzx  eax,ax
c001a401:	c1 f8 08             	sar    eax,0x8
c001a404:	89 c1                	mov    ecx,eax
c001a406:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a40d:	8d 50 01             	lea    edx,[eax+0x1]
c001a410:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a417:	88 ca                	mov    dl,cl
c001a419:	88 10                	mov    BYTE PTR [eax],dl
c001a41b:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a422:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a429:	8d 48 01             	lea    ecx,[eax+0x1]
c001a42c:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a433:	88 10                	mov    BYTE PTR [eax],dl
c001a435:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a439:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a43d:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a444:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a448:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a44c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a450:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a454:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a458:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a45c:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a460:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a464:	89 c6                	mov    esi,eax
c001a466:	89 d7                	mov    edi,edx
c001a468:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a46a:	89 c8                	mov    eax,ecx
c001a46c:	89 fa                	mov    edx,edi
c001a46e:	89 f3                	mov    ebx,esi
c001a470:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a474:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a478:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a47c:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a480:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a487:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a48e:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a492:	50                   	push   eax
c001a493:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a497:	e8 df fd ff ff       	call   c001a27b <Net::crc32Calc(unsigned char*, int)>
c001a49c:	83 c4 08             	add    esp,0x8
c001a49f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a4a3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a4a7:	c1 e8 18             	shr    eax,0x18
c001a4aa:	89 c1                	mov    ecx,eax
c001a4ac:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a4b3:	8d 50 01             	lea    edx,[eax+0x1]
c001a4b6:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a4bd:	88 ca                	mov    dl,cl
c001a4bf:	88 10                	mov    BYTE PTR [eax],dl
c001a4c1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a4c5:	c1 e8 10             	shr    eax,0x10
c001a4c8:	89 c1                	mov    ecx,eax
c001a4ca:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a4d1:	8d 50 01             	lea    edx,[eax+0x1]
c001a4d4:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a4db:	88 ca                	mov    dl,cl
c001a4dd:	88 10                	mov    BYTE PTR [eax],dl
c001a4df:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a4e3:	c1 e8 08             	shr    eax,0x8
c001a4e6:	89 c1                	mov    ecx,eax
c001a4e8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a4ef:	8d 50 01             	lea    edx,[eax+0x1]
c001a4f2:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a4f9:	88 ca                	mov    dl,cl
c001a4fb:	88 10                	mov    BYTE PTR [eax],dl
c001a4fd:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a504:	8d 50 01             	lea    edx,[eax+0x1]
c001a507:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a50e:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a512:	88 10                	mov    BYTE PTR [eax],dl
c001a514:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a518:	83 c4 60             	add    esp,0x60
c001a51b:	5b                   	pop    ebx
c001a51c:	5e                   	pop    esi
c001a51d:	5f                   	pop    edi
c001a51e:	c3                   	ret    

c001a51f <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a51f:	57                   	push   edi
c001a520:	56                   	push   esi
c001a521:	53                   	push   ebx
c001a522:	83 ec 70             	sub    esp,0x70
c001a525:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a52c:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001a530:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001a538:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a53f:	83 c0 0e             	add    eax,0xe
c001a542:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a546:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a54d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a551:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a559:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a55d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a561:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a565:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a569:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a56d:	89 c6                	mov    esi,eax
c001a56f:	89 d7                	mov    edi,edx
c001a571:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a573:	89 c8                	mov    eax,ecx
c001a575:	89 fa                	mov    edx,edi
c001a577:	89 f3                	mov    ebx,esi
c001a579:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a57d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a581:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a585:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a58d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a594:	83 c0 08             	add    eax,0x8
c001a597:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001a59b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a5a2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a5a6:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001a5ae:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a5b2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a5b6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a5ba:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a5be:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a5c2:	89 c6                	mov    esi,eax
c001a5c4:	89 d7                	mov    edi,edx
c001a5c6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a5c8:	89 c8                	mov    eax,ecx
c001a5ca:	89 fa                	mov    edx,edi
c001a5cc:	89 f3                	mov    ebx,esi
c001a5ce:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a5d2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a5d6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a5da:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a5e2:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a5e9:	8d 50 01             	lea    edx,[eax+0x1]
c001a5ec:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a5f3:	8a 00                	mov    al,BYTE PTR [eax]
c001a5f5:	0f b6 c0             	movzx  eax,al
c001a5f8:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001a5fd:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a604:	8d 50 01             	lea    edx,[eax+0x1]
c001a607:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a60e:	8a 00                	mov    al,BYTE PTR [eax]
c001a610:	0f b6 c0             	movzx  eax,al
c001a613:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001a618:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001a61d:	c1 e0 08             	shl    eax,0x8
c001a620:	89 c2                	mov    edx,eax
c001a622:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a626:	09 d0                	or     eax,edx
c001a628:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a62f:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a633:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001a63b:	75 46                	jne    c001a683 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a63d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a644:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a647:	66 3d dc 05          	cmp    ax,0x5dc
c001a64b:	77 16                	ja     c001a663 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001a64d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a654:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a657:	0f b7 c0             	movzx  eax,ax
c001a65a:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a661:	eb 20                	jmp    c001a683 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a663:	83 ec 0c             	sub    esp,0xc
c001a666:	68 68 b8 02 c0       	push   0xc002b868
c001a66b:	e8 b3 80 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c001a670:	83 c4 10             	add    esp,0x10
c001a673:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a67a:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a67e:	e9 17 01 00 00       	jmp    c001a79a <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001a683:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a68a:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a691:	8b 12                	mov    edx,DWORD PTR [edx]
c001a693:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a697:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a69e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001a6a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a6a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a6aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a6ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a6b2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a6b6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a6ba:	89 c6                	mov    esi,eax
c001a6bc:	89 d7                	mov    edi,edx
c001a6be:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a6c0:	89 c8                	mov    eax,ecx
c001a6c2:	89 fa                	mov    edx,edi
c001a6c4:	89 f3                	mov    ebx,esi
c001a6c6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a6ca:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a6ce:	89 04 24             	mov    DWORD PTR [esp],eax
c001a6d1:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a6d8:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001a6df:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6e6:	8d 50 01             	lea    edx,[eax+0x1]
c001a6e9:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a6f0:	8a 00                	mov    al,BYTE PTR [eax]
c001a6f2:	0f b6 c0             	movzx  eax,al
c001a6f5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001a6f9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a700:	8d 50 01             	lea    edx,[eax+0x1]
c001a703:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a70a:	8a 00                	mov    al,BYTE PTR [eax]
c001a70c:	0f b6 c0             	movzx  eax,al
c001a70f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001a713:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a71a:	8d 50 01             	lea    edx,[eax+0x1]
c001a71d:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a724:	8a 00                	mov    al,BYTE PTR [eax]
c001a726:	0f b6 c0             	movzx  eax,al
c001a729:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001a72d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a734:	8d 50 01             	lea    edx,[eax+0x1]
c001a737:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a73e:	8a 00                	mov    al,BYTE PTR [eax]
c001a740:	0f b6 c0             	movzx  eax,al
c001a743:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a747:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001a74b:	c1 e0 18             	shl    eax,0x18
c001a74e:	89 c2                	mov    edx,eax
c001a750:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001a754:	c1 e0 10             	shl    eax,0x10
c001a757:	09 c2                	or     edx,eax
c001a759:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a75d:	c1 e0 08             	shl    eax,0x8
c001a760:	09 d0                	or     eax,edx
c001a762:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001a766:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a76a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a771:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001a775:	83 e8 04             	sub    eax,0x4
c001a778:	83 ec 08             	sub    esp,0x8
c001a77b:	50                   	push   eax
c001a77c:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001a780:	e8 f6 fa ff ff       	call   c001a27b <Net::crc32Calc(unsigned char*, int)>
c001a785:	83 c4 10             	add    esp,0x10
c001a788:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001a78c:	0f 94 c2             	sete   dl
c001a78f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a796:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a799:	90                   	nop
c001a79a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a7a1:	83 c4 70             	add    esp,0x70
c001a7a4:	5b                   	pop    ebx
c001a7a5:	5e                   	pop    esi
c001a7a6:	5f                   	pop    edi
c001a7a7:	c2 04 00             	ret    0x4

c001a7aa <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a7aa:	55                   	push   ebp
c001a7ab:	57                   	push   edi
c001a7ac:	56                   	push   esi
c001a7ad:	53                   	push   ebx
c001a7ae:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a7b4:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a7bb:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a7bd:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a7c0:	80 fb 40             	cmp    bl,0x40
c001a7c3:	75 1b                	jne    c001a7e0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a7c5:	8a 16                	mov    dl,BYTE PTR [esi]
c001a7c7:	84 d2                	test   dl,dl
c001a7c9:	0f 84 f1 00 00 00    	je     c001a8c0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a7cf:	8d 46 01             	lea    eax,[esi+0x1]
c001a7d2:	80 fa 3a             	cmp    dl,0x3a
c001a7d5:	74 04                	je     c001a7db <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a7d7:	89 c6                	mov    esi,eax
c001a7d9:	eb ea                	jmp    c001a7c5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a7db:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a7de:	89 c6                	mov    esi,eax
c001a7e0:	50                   	push   eax
c001a7e1:	6a 40                	push   0x40
c001a7e3:	6a 00                	push   0x0
c001a7e5:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a7e9:	50                   	push   eax
c001a7ea:	e8 61 5f fe ff       	call   c0000750 <memset>
c001a7ef:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a7f6:	31 c0                	xor    eax,eax
c001a7f8:	83 c4 10             	add    esp,0x10
c001a7fb:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a7fd:	84 c9                	test   cl,cl
c001a7ff:	0f 84 bb 00 00 00    	je     c001a8c0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a805:	3d c7 00 00 00       	cmp    eax,0xc7
c001a80a:	0f 8f b0 00 00 00    	jg     c001a8c0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a810:	80 f9 0a             	cmp    cl,0xa
c001a813:	0f 85 98 00 00 00    	jne    c001a8b1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a819:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a81e:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a822:	a8 df                	test   al,0xdf
c001a824:	0f 94 c1             	sete   cl
c001a827:	3c 23                	cmp    al,0x23
c001a829:	0f 94 c2             	sete   dl
c001a82c:	08 d1                	or     cl,dl
c001a82e:	75 4a                	jne    c001a87a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a830:	8d 50 f7             	lea    edx,[eax-0x9]
c001a833:	80 fa 01             	cmp    dl,0x1
c001a836:	76 42                	jbe    c001a87a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a838:	3c 5b                	cmp    al,0x5b
c001a83a:	75 42                	jne    c001a87e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a83c:	80 fb 40             	cmp    bl,0x40
c001a83f:	75 39                	jne    c001a87a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a841:	83 ec 0c             	sub    esp,0xc
c001a844:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a848:	52                   	push   edx
c001a849:	e8 1e 5f fe ff       	call   c000076c <strlen>
c001a84e:	83 c4 10             	add    esp,0x10
c001a851:	83 f8 3f             	cmp    eax,0x3f
c001a854:	77 6a                	ja     c001a8c0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a856:	50                   	push   eax
c001a857:	50                   	push   eax
c001a858:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a85c:	52                   	push   edx
c001a85d:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a861:	52                   	push   edx
c001a862:	e8 a5 5f fe ff       	call   c000080c <strcpy>
c001a867:	58                   	pop    eax
c001a868:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a86c:	52                   	push   edx
c001a86d:	e8 fa 5e fe ff       	call   c000076c <strlen>
c001a872:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a877:	83 c4 10             	add    esp,0x10
c001a87a:	31 d2                	xor    edx,edx
c001a87c:	eb 3a                	jmp    c001a8b8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a87e:	80 fb 40             	cmp    bl,0x40
c001a881:	74 06                	je     c001a889 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a883:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a887:	eb 20                	jmp    c001a8a9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a889:	50                   	push   eax
c001a88a:	50                   	push   eax
c001a88b:	55                   	push   ebp
c001a88c:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a890:	50                   	push   eax
c001a891:	e8 02 60 fe ff       	call   c0000898 <strcmp>
c001a896:	83 c4 10             	add    esp,0x10
c001a899:	85 c0                	test   eax,eax
c001a89b:	75 dd                	jne    c001a87a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a89d:	eb e4                	jmp    c001a883 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a89f:	8d 50 01             	lea    edx,[eax+0x1]
c001a8a2:	80 f9 3d             	cmp    cl,0x3d
c001a8a5:	74 1d                	je     c001a8c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a8a7:	89 d0                	mov    eax,edx
c001a8a9:	8a 08                	mov    cl,BYTE PTR [eax]
c001a8ab:	84 c9                	test   cl,cl
c001a8ad:	75 f0                	jne    c001a89f <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a8af:	eb 0f                	jmp    c001a8c0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a8b1:	8d 50 01             	lea    edx,[eax+0x1]
c001a8b4:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a8b8:	47                   	inc    edi
c001a8b9:	89 d0                	mov    eax,edx
c001a8bb:	e9 3b ff ff ff       	jmp    c001a7fb <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a8c0:	31 c0                	xor    eax,eax
c001a8c2:	eb 33                	jmp    c001a8f7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a8c4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a8c8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a8cb:	50                   	push   eax
c001a8cc:	50                   	push   eax
c001a8cd:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a8d1:	50                   	push   eax
c001a8d2:	56                   	push   esi
c001a8d3:	e8 c0 5f fe ff       	call   c0000898 <strcmp>
c001a8d8:	83 c4 10             	add    esp,0x10
c001a8db:	85 c0                	test   eax,eax
c001a8dd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a8e1:	75 97                	jne    c001a87a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a8e3:	51                   	push   ecx
c001a8e4:	51                   	push   ecx
c001a8e5:	52                   	push   edx
c001a8e6:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a8ed:	e8 1a 5f fe ff       	call   c000080c <strcpy>
c001a8f2:	83 c4 10             	add    esp,0x10
c001a8f5:	b0 01                	mov    al,0x1
c001a8f7:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a8fd:	5b                   	pop    ebx
c001a8fe:	5e                   	pop    esi
c001a8ff:	5f                   	pop    edi
c001a900:	5d                   	pop    ebp
c001a901:	c3                   	ret    

c001a902 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a902:	57                   	push   edi
c001a903:	56                   	push   esi
c001a904:	53                   	push   ebx
c001a905:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a90b:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a912:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a919:	53                   	push   ebx
c001a91a:	e8 4d 5e fe ff       	call   c000076c <strlen>
c001a91f:	89 34 24             	mov    DWORD PTR [esp],esi
c001a922:	89 c7                	mov    edi,eax
c001a924:	e8 43 5e fe ff       	call   c000076c <strlen>
c001a929:	83 c4 10             	add    esp,0x10
c001a92c:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a930:	3d ff 00 00 00       	cmp    eax,0xff
c001a935:	0f 87 d3 00 00 00    	ja     c001aa0e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a93b:	57                   	push   edi
c001a93c:	57                   	push   edi
c001a93d:	56                   	push   esi
c001a93e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a942:	56                   	push   esi
c001a943:	e8 c4 5e fe ff       	call   c000080c <strcpy>
c001a948:	58                   	pop    eax
c001a949:	5a                   	pop    edx
c001a94a:	68 0a bc 02 c0       	push   0xc002bc0a
c001a94f:	56                   	push   esi
c001a950:	e8 f7 5f fe ff       	call   c000094c <strcat>
c001a955:	59                   	pop    ecx
c001a956:	5f                   	pop    edi
c001a957:	53                   	push   ebx
c001a958:	56                   	push   esi
c001a959:	e8 ee 5f fe ff       	call   c000094c <strcat>
c001a95e:	58                   	pop    eax
c001a95f:	5a                   	pop    edx
c001a960:	68 b4 b8 02 c0       	push   0xc002b8b4
c001a965:	56                   	push   esi
c001a966:	e8 e1 5f fe ff       	call   c000094c <strcat>
c001a96b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a972:	e8 22 4c ff ff       	call   c000f599 <malloc>
c001a977:	83 c4 0c             	add    esp,0xc
c001a97a:	89 c3                	mov    ebx,eax
c001a97c:	ff 35 50 0f 03 c0    	push   DWORD PTR ds:0xc0030f50
c001a982:	56                   	push   esi
c001a983:	50                   	push   eax
c001a984:	e8 f9 82 ff ff       	call   c0012c82 <File::File(char const*, Process*)>
c001a989:	83 c4 10             	add    esp,0x10
c001a98c:	85 db                	test   ebx,ebx
c001a98e:	74 7e                	je     c001aa0e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a990:	51                   	push   ecx
c001a991:	51                   	push   ecx
c001a992:	6a 01                	push   0x1
c001a994:	53                   	push   ebx
c001a995:	e8 4c 83 ff ff       	call   c0012ce6 <File::open(FileOpenMode)>
c001a99a:	83 c4 10             	add    esp,0x10
c001a99d:	85 c0                	test   eax,eax
c001a99f:	74 08                	je     c001a9a9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a9a1:	83 ec 0c             	sub    esp,0xc
c001a9a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9a6:	53                   	push   ebx
c001a9a7:	eb 5f                	jmp    c001aa08 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a9a9:	52                   	push   edx
c001a9aa:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a9ae:	50                   	push   eax
c001a9af:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a9b3:	50                   	push   eax
c001a9b4:	53                   	push   ebx
c001a9b5:	e8 d8 85 ff ff       	call   c0012f92 <File::stat(unsigned long long*, bool*)>
c001a9ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a9be:	83 c4 10             	add    esp,0x10
c001a9c1:	89 c1                	mov    ecx,eax
c001a9c3:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a9c7:	74 31                	je     c001a9fa <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a9c9:	83 ec 0c             	sub    esp,0xc
c001a9cc:	50                   	push   eax
c001a9cd:	e8 c7 4b ff ff       	call   c000f599 <malloc>
c001a9d2:	89 c6                	mov    esi,eax
c001a9d4:	58                   	pop    eax
c001a9d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9d7:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a9db:	52                   	push   edx
c001a9dc:	56                   	push   esi
c001a9dd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a9e1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a9e5:	53                   	push   ebx
c001a9e6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a9e9:	83 c4 20             	add    esp,0x20
c001a9ec:	85 c0                	test   eax,eax
c001a9ee:	75 0a                	jne    c001a9fa <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a9f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a9f4:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a9f8:	74 18                	je     c001aa12 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a9fa:	83 ec 0c             	sub    esp,0xc
c001a9fd:	53                   	push   ebx
c001a9fe:	e8 41 83 ff ff       	call   c0012d44 <File::close()>
c001aa03:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aa05:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aa08:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aa0b:	83 c4 10             	add    esp,0x10
c001aa0e:	31 c0                	xor    eax,eax
c001aa10:	eb 3b                	jmp    c001aa4d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001aa12:	83 ec 0c             	sub    esp,0xc
c001aa15:	53                   	push   ebx
c001aa16:	e8 29 83 ff ff       	call   c0012d44 <File::close()>
c001aa1b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aa1d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aa20:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aa23:	83 c4 0c             	add    esp,0xc
c001aa26:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001aa2d:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001aa34:	56                   	push   esi
c001aa35:	e8 70 fd ff ff       	call   c001a7aa <Reg::findLineFromLoadedData(char*, char*, char*)>
c001aa3a:	89 34 24             	mov    DWORD PTR [esp],esi
c001aa3d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001aa41:	e8 63 4b ff ff       	call   c000f5a9 <free>
c001aa46:	83 c4 10             	add    esp,0x10
c001aa49:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001aa4d:	81 c4 20 01 00 00    	add    esp,0x120
c001aa53:	5b                   	pop    ebx
c001aa54:	5e                   	pop    esi
c001aa55:	5f                   	pop    edi
c001aa56:	c3                   	ret    

c001aa57 <Reg::getLine(char*, char*, char*)>:
c001aa57:	57                   	push   edi
c001aa58:	56                   	push   esi
c001aa59:	53                   	push   ebx
c001aa5a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa5e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aa62:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001aa66:	57                   	push   edi
c001aa67:	56                   	push   esi
c001aa68:	53                   	push   ebx
c001aa69:	68 b9 b8 02 c0       	push   0xc002b8b9
c001aa6e:	e8 8f fe ff ff       	call   c001a902 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aa73:	83 c4 10             	add    esp,0x10
c001aa76:	84 c0                	test   al,al
c001aa78:	75 10                	jne    c001aa8a <Reg::getLine(char*, char*, char*)+0x33>
c001aa7a:	57                   	push   edi
c001aa7b:	56                   	push   esi
c001aa7c:	53                   	push   ebx
c001aa7d:	68 de b8 02 c0       	push   0xc002b8de
c001aa82:	e8 7b fe ff ff       	call   c001a902 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aa87:	83 c4 10             	add    esp,0x10
c001aa8a:	5b                   	pop    ebx
c001aa8b:	5e                   	pop    esi
c001aa8c:	5f                   	pop    edi
c001aa8d:	c3                   	ret    

c001aa8e <Reg::readInt(char*, char*, int*)>:
c001aa8e:	55                   	push   ebp
c001aa8f:	57                   	push   edi
c001aa90:	56                   	push   esi
c001aa91:	53                   	push   ebx
c001aa92:	81 ec f0 00 00 00    	sub    esp,0xf0
c001aa98:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001aa9c:	57                   	push   edi
c001aa9d:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aaa4:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aaab:	e8 a7 ff ff ff       	call   c001aa57 <Reg::getLine(char*, char*, char*)>
c001aab0:	83 c4 10             	add    esp,0x10
c001aab3:	84 c0                	test   al,al
c001aab5:	0f 84 b3 00 00 00    	je     c001ab6e <Reg::readInt(char*, char*, int*)+0xe0>
c001aabb:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001aabf:	80 fa 2b             	cmp    dl,0x2b
c001aac2:	74 0c                	je     c001aad0 <Reg::readInt(char*, char*, int*)+0x42>
c001aac4:	80 fa 2d             	cmp    dl,0x2d
c001aac7:	75 0e                	jne    c001aad7 <Reg::readInt(char*, char*, int*)+0x49>
c001aac9:	ba 01 00 00 00       	mov    edx,0x1
c001aace:	eb 0b                	jmp    c001aadb <Reg::readInt(char*, char*, int*)+0x4d>
c001aad0:	ba 01 00 00 00       	mov    edx,0x1
c001aad5:	eb 02                	jmp    c001aad9 <Reg::readInt(char*, char*, int*)+0x4b>
c001aad7:	31 d2                	xor    edx,edx
c001aad9:	31 c0                	xor    eax,eax
c001aadb:	be 0a 00 00 00       	mov    esi,0xa
c001aae0:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001aae5:	75 20                	jne    c001ab07 <Reg::readInt(char*, char*, int*)+0x79>
c001aae7:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001aaeb:	80 f9 78             	cmp    cl,0x78
c001aaee:	75 0a                	jne    c001aafa <Reg::readInt(char*, char*, int*)+0x6c>
c001aaf0:	83 c2 02             	add    edx,0x2
c001aaf3:	be 10 00 00 00       	mov    esi,0x10
c001aaf8:	eb 0d                	jmp    c001ab07 <Reg::readInt(char*, char*, int*)+0x79>
c001aafa:	80 f9 62             	cmp    cl,0x62
c001aafd:	75 08                	jne    c001ab07 <Reg::readInt(char*, char*, int*)+0x79>
c001aaff:	83 c2 02             	add    edx,0x2
c001ab02:	be 02 00 00 00       	mov    esi,0x2
c001ab07:	01 d7                	add    edi,edx
c001ab09:	31 d2                	xor    edx,edx
c001ab0b:	8a 1f                	mov    bl,BYTE PTR [edi]
c001ab0d:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001ab11:	80 fb 0d             	cmp    bl,0xd
c001ab14:	0f 94 c3             	sete   bl
c001ab17:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001ab1c:	0f 94 c1             	sete   cl
c001ab1f:	08 cb                	or     bl,cl
c001ab21:	75 3a                	jne    c001ab5d <Reg::readInt(char*, char*, int*)+0xcf>
c001ab23:	0f af d6             	imul   edx,esi
c001ab26:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001ab2b:	83 fe 10             	cmp    esi,0x10
c001ab2e:	75 26                	jne    c001ab56 <Reg::readInt(char*, char*, int*)+0xc8>
c001ab30:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001ab34:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001ab37:	89 e9                	mov    ecx,ebp
c001ab39:	80 f9 05             	cmp    cl,0x5
c001ab3c:	77 06                	ja     c001ab44 <Reg::readInt(char*, char*, int*)+0xb6>
c001ab3e:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001ab42:	eb 16                	jmp    c001ab5a <Reg::readInt(char*, char*, int*)+0xcc>
c001ab44:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001ab48:	83 e9 61             	sub    ecx,0x61
c001ab4b:	80 f9 05             	cmp    cl,0x5
c001ab4e:	77 06                	ja     c001ab56 <Reg::readInt(char*, char*, int*)+0xc8>
c001ab50:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001ab54:	eb 04                	jmp    c001ab5a <Reg::readInt(char*, char*, int*)+0xcc>
c001ab56:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001ab5a:	47                   	inc    edi
c001ab5b:	eb ae                	jmp    c001ab0b <Reg::readInt(char*, char*, int*)+0x7d>
c001ab5d:	84 c0                	test   al,al
c001ab5f:	74 02                	je     c001ab63 <Reg::readInt(char*, char*, int*)+0xd5>
c001ab61:	f7 da                	neg    edx
c001ab63:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001ab6a:	89 10                	mov    DWORD PTR [eax],edx
c001ab6c:	88 d8                	mov    al,bl
c001ab6e:	81 c4 ec 00 00 00    	add    esp,0xec
c001ab74:	5b                   	pop    ebx
c001ab75:	5e                   	pop    esi
c001ab76:	5f                   	pop    edi
c001ab77:	5d                   	pop    ebp
c001ab78:	c3                   	ret    

c001ab79 <Reg::readString(char*, char*, char*, int)>:
c001ab79:	57                   	push   edi
c001ab7a:	56                   	push   esi
c001ab7b:	53                   	push   ebx
c001ab7c:	81 ec d4 00 00 00    	sub    esp,0xd4
c001ab82:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001ab89:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001ab8d:	57                   	push   edi
c001ab8e:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ab95:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ab9c:	e8 b6 fe ff ff       	call   c001aa57 <Reg::getLine(char*, char*, char*)>
c001aba1:	83 c4 10             	add    esp,0x10
c001aba4:	89 c6                	mov    esi,eax
c001aba6:	84 c0                	test   al,al
c001aba8:	74 44                	je     c001abee <Reg::readString(char*, char*, char*, int)+0x75>
c001abaa:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001abb1:	31 c0                	xor    eax,eax
c001abb3:	4a                   	dec    edx
c001abb4:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001abb7:	84 c9                	test   cl,cl
c001abb9:	74 0f                	je     c001abca <Reg::readString(char*, char*, char*, int)+0x51>
c001abbb:	39 c2                	cmp    edx,eax
c001abbd:	7e 0b                	jle    c001abca <Reg::readString(char*, char*, char*, int)+0x51>
c001abbf:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001abc2:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001abc7:	40                   	inc    eax
c001abc8:	eb ea                	jmp    c001abb4 <Reg::readString(char*, char*, char*, int)+0x3b>
c001abca:	83 ec 0c             	sub    esp,0xc
c001abcd:	53                   	push   ebx
c001abce:	e8 99 5b fe ff       	call   c000076c <strlen>
c001abd3:	83 c4 10             	add    esp,0x10
c001abd6:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001abdb:	75 11                	jne    c001abee <Reg::readString(char*, char*, char*, int)+0x75>
c001abdd:	83 ec 0c             	sub    esp,0xc
c001abe0:	53                   	push   ebx
c001abe1:	e8 86 5b fe ff       	call   c000076c <strlen>
c001abe6:	83 c4 10             	add    esp,0x10
c001abe9:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001abee:	81 c4 d0 00 00 00    	add    esp,0xd0
c001abf4:	89 f0                	mov    eax,esi
c001abf6:	5b                   	pop    ebx
c001abf7:	5e                   	pop    esi
c001abf8:	5f                   	pop    edi
c001abf9:	c3                   	ret    

c001abfa <Reg::readBool(char*, char*, bool*)>:
c001abfa:	83 ec 20             	sub    esp,0x20
c001abfd:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ac01:	50                   	push   eax
c001ac02:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac0a:	e8 7f fe ff ff       	call   c001aa8e <Reg::readInt(char*, char*, int*)>
c001ac0f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001ac14:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ac18:	0f 95 02             	setne  BYTE PTR [edx]
c001ac1b:	83 c4 2c             	add    esp,0x2c
c001ac1e:	c3                   	ret    

c001ac1f <Reg::readBoolWithDefault(char*, char*, bool)>:
c001ac1f:	53                   	push   ebx
c001ac20:	83 ec 1c             	sub    esp,0x1c
c001ac23:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001ac27:	8d 44 24 13          	lea    eax,[esp+0x13]
c001ac2b:	50                   	push   eax
c001ac2c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac30:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac34:	e8 c1 ff ff ff       	call   c001abfa <Reg::readBool(char*, char*, bool*)>
c001ac39:	83 c4 10             	add    esp,0x10
c001ac3c:	84 c0                	test   al,al
c001ac3e:	74 04                	je     c001ac44 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001ac40:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001ac44:	88 d8                	mov    al,bl
c001ac46:	83 c4 18             	add    esp,0x18
c001ac49:	5b                   	pop    ebx
c001ac4a:	c3                   	ret    

c001ac4b <Reg::readIntWithDefault(char*, char*, int)>:
c001ac4b:	53                   	push   ebx
c001ac4c:	83 ec 1c             	sub    esp,0x1c
c001ac4f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ac53:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ac57:	50                   	push   eax
c001ac58:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac5c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac60:	e8 29 fe ff ff       	call   c001aa8e <Reg::readInt(char*, char*, int*)>
c001ac65:	83 c4 10             	add    esp,0x10
c001ac68:	84 c0                	test   al,al
c001ac6a:	74 04                	je     c001ac70 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001ac6c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ac70:	89 d8                	mov    eax,ebx
c001ac72:	83 c4 18             	add    esp,0x18
c001ac75:	5b                   	pop    ebx
c001ac76:	c3                   	ret    

c001ac77 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001ac77:	57                   	push   edi
c001ac78:	56                   	push   esi
c001ac79:	56                   	push   esi
c001ac7a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ac7e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001ac82:	56                   	push   esi
c001ac83:	57                   	push   edi
c001ac84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac8c:	e8 e8 fe ff ff       	call   c001ab79 <Reg::readString(char*, char*, char*, int)>
c001ac91:	83 c4 10             	add    esp,0x10
c001ac94:	84 c0                	test   al,al
c001ac96:	75 1a                	jne    c001acb2 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001ac98:	51                   	push   ecx
c001ac99:	56                   	push   esi
c001ac9a:	6a 00                	push   0x0
c001ac9c:	57                   	push   edi
c001ac9d:	e8 ae 5a fe ff       	call   c0000750 <memset>
c001aca2:	8d 4e ff             	lea    ecx,[esi-0x1]
c001aca5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001aca9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001acab:	83 c4 10             	add    esp,0x10
c001acae:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001acb2:	89 f8                	mov    eax,edi
c001acb4:	5a                   	pop    edx
c001acb5:	5e                   	pop    esi
c001acb6:	5f                   	pop    edi
c001acb7:	c3                   	ret    

c001acb8 <Sys::eject(regs*)>:
c001acb8:	83 ec 0c             	sub    esp,0xc
c001acbb:	83 ca ff             	or     edx,0xffffffff
c001acbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acc2:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001acc5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001acca:	83 e9 41             	sub    ecx,0x41
c001accd:	83 f9 19             	cmp    ecx,0x19
c001acd0:	77 18                	ja     c001acea <Sys::eject(regs*)+0x32>
c001acd2:	8b 0c 8d 00 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2000]
c001acd9:	85 c9                	test   ecx,ecx
c001acdb:	74 0d                	je     c001acea <Sys::eject(regs*)+0x32>
c001acdd:	83 ec 0c             	sub    esp,0xc
c001ace0:	51                   	push   ecx
c001ace1:	e8 28 b3 ff ff       	call   c001600e <LogicalDisk::eject()>
c001ace6:	83 c4 10             	add    esp,0x10
c001ace9:	99                   	cdq    
c001acea:	83 c4 0c             	add    esp,0xc
c001aced:	c3                   	ret    

c001acee <Sys::exit(regs*)>:
c001acee:	83 ec 18             	sub    esp,0x18
c001acf1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001acf5:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001acf8:	e8 c2 35 00 00       	call   c001e2bf <terminateTask(int)>
c001acfd:	83 c8 ff             	or     eax,0xffffffff
c001ad00:	83 c4 1c             	add    esp,0x1c
c001ad03:	89 c2                	mov    edx,eax
c001ad05:	c3                   	ret    

c001ad06 <Sys::getCwd(regs*)>:
c001ad06:	83 ec 10             	sub    esp,0x10
c001ad09:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad0d:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001ad10:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ad13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad18:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ad1b:	e8 64 7d ff ff       	call   c0012a84 <Fs::getcwd(Process*, char*, int)>
c001ad20:	83 c4 1c             	add    esp,0x1c
c001ad23:	99                   	cdq    
c001ad24:	c3                   	ret    

c001ad25 <Sys::getPID(regs*)>:
c001ad25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad2a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ad2d:	8b 00                	mov    eax,DWORD PTR [eax]
c001ad2f:	99                   	cdq    
c001ad30:	c3                   	ret    

c001ad31 <Sys::getRAMData(regs*)>:
c001ad31:	8b 0d 54 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da54
c001ad37:	6b 05 50 da 02 c0 64 	imul   eax,DWORD PTR ds:0xc002da50,0x64
c001ad3e:	99                   	cdq    
c001ad3f:	f7 f9                	idiv   ecx
c001ad41:	c1 e0 18             	shl    eax,0x18
c001ad44:	09 c8                	or     eax,ecx
c001ad46:	99                   	cdq    
c001ad47:	c3                   	ret    

c001ad48 <Sys::getVGAPtr(regs*)>:
c001ad48:	55                   	push   ebp
c001ad49:	57                   	push   edi
c001ad4a:	56                   	push   esi
c001ad4b:	53                   	push   ebx
c001ad4c:	83 ec 18             	sub    esp,0x18
c001ad4f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ad53:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001ad56:	e8 b0 30 00 00       	call   c001de0b <Thr::processFromPID(int)>
c001ad5b:	83 c4 10             	add    esp,0x10
c001ad5e:	89 c1                	mov    ecx,eax
c001ad60:	b8 01 00 00 00       	mov    eax,0x1
c001ad65:	85 c9                	test   ecx,ecx
c001ad67:	74 59                	je     c001adc2 <Sys::getVGAPtr(regs*)+0x7a>
c001ad69:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001ad6f:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001ad73:	74 0c                	je     c001ad81 <Sys::getVGAPtr(regs*)+0x39>
c001ad75:	83 ec 0c             	sub    esp,0xc
c001ad78:	53                   	push   ebx
c001ad79:	e8 d5 55 ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c001ad7e:	83 c4 10             	add    esp,0x10
c001ad81:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001ad84:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001ad87:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001ad8c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad8e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001ad91:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ad94:	81 c3 82 00 00 00    	add    ebx,0x82
c001ad9a:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001ada0:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ada3:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001ada6:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001adac:	50                   	push   eax
c001adad:	50                   	push   eax
c001adae:	53                   	push   ebx
c001adaf:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001adb2:	05 a8 0f 00 00       	add    eax,0xfa8
c001adb7:	50                   	push   eax
c001adb8:	e8 4f 5a fe ff       	call   c000080c <strcpy>
c001adbd:	83 c4 10             	add    esp,0x10
c001adc0:	31 c0                	xor    eax,eax
c001adc2:	83 c4 0c             	add    esp,0xc
c001adc5:	31 d2                	xor    edx,edx
c001adc7:	5b                   	pop    ebx
c001adc8:	5e                   	pop    esi
c001adc9:	5f                   	pop    edi
c001adca:	5d                   	pop    ebp
c001adcb:	c3                   	ret    

c001adcc <Sys::loadDLL(regs*)>:
c001adcc:	56                   	push   esi
c001adcd:	53                   	push   ebx
c001adce:	31 d2                	xor    edx,edx
c001add0:	51                   	push   ecx
c001add1:	b8 01 00 00 00       	mov    eax,0x1
c001add6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001adda:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001adde:	0f 84 8c 00 00 00    	je     c001ae70 <Sys::loadDLL(regs*)+0xa4>
c001ade4:	83 ec 0c             	sub    esp,0xc
c001ade7:	68 14 01 00 00       	push   0x114
c001adec:	e8 a8 47 ff ff       	call   c000f599 <malloc>
c001adf1:	83 c4 0c             	add    esp,0xc
c001adf4:	89 c3                	mov    ebx,eax
c001adf6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001adfb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001adfe:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001ae01:	53                   	push   ebx
c001ae02:	e8 7b 7e ff ff       	call   c0012c82 <File::File(char const*, Process*)>
c001ae07:	83 c4 10             	add    esp,0x10
c001ae0a:	31 d2                	xor    edx,edx
c001ae0c:	b8 02 00 00 00       	mov    eax,0x2
c001ae11:	85 db                	test   ebx,ebx
c001ae13:	74 5b                	je     c001ae70 <Sys::loadDLL(regs*)+0xa4>
c001ae15:	83 ec 0c             	sub    esp,0xc
c001ae18:	53                   	push   ebx
c001ae19:	e8 36 81 ff ff       	call   c0012f54 <File::exists()>
c001ae1e:	83 c4 10             	add    esp,0x10
c001ae21:	84 c0                	test   al,al
c001ae23:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae25:	75 11                	jne    c001ae38 <Sys::loadDLL(regs*)+0x6c>
c001ae27:	83 ec 0c             	sub    esp,0xc
c001ae2a:	53                   	push   ebx
c001ae2b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ae2e:	83 c4 10             	add    esp,0x10
c001ae31:	b8 03 00 00 00       	mov    eax,0x3
c001ae36:	eb 36                	jmp    c001ae6e <Sys::loadDLL(regs*)+0xa2>
c001ae38:	83 ec 0c             	sub    esp,0xc
c001ae3b:	53                   	push   ebx
c001ae3c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ae3f:	58                   	pop    eax
c001ae40:	5a                   	pop    edx
c001ae41:	6a 00                	push   0x0
c001ae43:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001ae46:	e8 0e 22 00 00       	call   c001d059 <Thr::loadDLL(char const*, bool)>
c001ae4b:	83 c4 10             	add    esp,0x10
c001ae4e:	89 c1                	mov    ecx,eax
c001ae50:	31 d2                	xor    edx,edx
c001ae52:	b8 04 00 00 00       	mov    eax,0x4
c001ae57:	85 c9                	test   ecx,ecx
c001ae59:	74 15                	je     c001ae70 <Sys::loadDLL(regs*)+0xa4>
c001ae5b:	53                   	push   ebx
c001ae5c:	53                   	push   ebx
c001ae5d:	ff 35 08 da 02 c0    	push   DWORD PTR ds:0xc002da08
c001ae63:	51                   	push   ecx
c001ae64:	e8 21 24 00 00       	call   c001d28a <Thr::executeDLL(unsigned long, void*)>
c001ae69:	83 c4 10             	add    esp,0x10
c001ae6c:	31 c0                	xor    eax,eax
c001ae6e:	31 d2                	xor    edx,edx
c001ae70:	59                   	pop    ecx
c001ae71:	5b                   	pop    ebx
c001ae72:	5e                   	pop    esi
c001ae73:	c3                   	ret    

c001ae74 <Sys::read(regs*)>:
c001ae74:	57                   	push   edi
c001ae75:	56                   	push   esi
c001ae76:	53                   	push   ebx
c001ae77:	83 ec 10             	sub    esp,0x10
c001ae7a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ae7e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ae81:	83 f8 02             	cmp    eax,0x2
c001ae84:	77 10                	ja     c001ae96 <Sys::read(regs*)+0x22>
c001ae86:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae8b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae8e:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001ae94:	eb 0e                	jmp    c001aea4 <Sys::read(regs*)+0x30>
c001ae96:	83 ec 0c             	sub    esp,0xc
c001ae99:	50                   	push   eax
c001ae9a:	e8 2a 62 ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001ae9f:	83 c4 10             	add    esp,0x10
c001aea2:	89 c1                	mov    ecx,eax
c001aea4:	83 c8 ff             	or     eax,0xffffffff
c001aea7:	85 c9                	test   ecx,ecx
c001aea9:	89 c2                	mov    edx,eax
c001aeab:	74 28                	je     c001aed5 <Sys::read(regs*)+0x61>
c001aead:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aeb5:	31 ff                	xor    edi,edi
c001aeb7:	83 ec 0c             	sub    esp,0xc
c001aeba:	8b 01                	mov    eax,DWORD PTR [ecx]
c001aebc:	8d 54 24 18          	lea    edx,[esp+0x18]
c001aec0:	52                   	push   edx
c001aec1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001aec4:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001aec7:	57                   	push   edi
c001aec8:	56                   	push   esi
c001aec9:	51                   	push   ecx
c001aeca:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aecd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001aed1:	83 c4 20             	add    esp,0x20
c001aed4:	99                   	cdq    
c001aed5:	83 c4 10             	add    esp,0x10
c001aed8:	5b                   	pop    ebx
c001aed9:	5e                   	pop    esi
c001aeda:	5f                   	pop    edi
c001aedb:	c3                   	ret    

c001aedc <Sys::sbrk(regs*)>:
c001aedc:	56                   	push   esi
c001aedd:	53                   	push   ebx
c001aede:	50                   	push   eax
c001aedf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aee4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aee8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aeeb:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001aeee:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001aef4:	85 db                	test   ebx,ebx
c001aef6:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001aef9:	74 02                	je     c001aefd <Sys::sbrk(regs*)+0x21>
c001aefb:	79 06                	jns    c001af03 <Sys::sbrk(regs*)+0x27>
c001aefd:	89 f0                	mov    eax,esi
c001aeff:	31 d2                	xor    edx,edx
c001af01:	eb 2a                	jmp    c001af2d <Sys::sbrk(regs*)+0x51>
c001af03:	83 c8 ff             	or     eax,0xffffffff
c001af06:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001af0c:	89 c2                	mov    edx,eax
c001af0e:	77 1d                	ja     c001af2d <Sys::sbrk(regs*)+0x51>
c001af10:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001af16:	50                   	push   eax
c001af17:	c1 ea 0c             	shr    edx,0xc
c001af1a:	68 07 0c 00 00       	push   0xc07
c001af1f:	52                   	push   edx
c001af20:	51                   	push   ecx
c001af21:	e8 0c 6c ff ff       	call   c0011b32 <VAS::allocatePages(int, int)>
c001af26:	89 f0                	mov    eax,esi
c001af28:	31 d2                	xor    edx,edx
c001af2a:	83 c4 10             	add    esp,0x10
c001af2d:	59                   	pop    ecx
c001af2e:	5b                   	pop    ebx
c001af2f:	5e                   	pop    esi
c001af30:	c3                   	ret    

c001af31 <Sys::setCwd(regs*)>:
c001af31:	83 ec 14             	sub    esp,0x14
c001af34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001af38:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001af3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af40:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001af43:	e8 ab 80 ff ff       	call   c0012ff3 <Fs::setcwd(Process*, char*)>
c001af48:	83 c4 1c             	add    esp,0x1c
c001af4b:	99                   	cdq    
c001af4c:	c3                   	ret    

c001af4d <Sys::setTime(regs*)>:
c001af4d:	55                   	push   ebp
c001af4e:	31 c9                	xor    ecx,ecx
c001af50:	57                   	push   edi
c001af51:	bd 0c 00 00 00       	mov    ebp,0xc
c001af56:	56                   	push   esi
c001af57:	53                   	push   ebx
c001af58:	31 db                	xor    ebx,ebx
c001af5a:	83 ec 10             	sub    esp,0x10
c001af5d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001af61:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001af64:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001af67:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001af6a:	89 c2                	mov    edx,eax
c001af6c:	66 81 ef 6c 07       	sub    di,0x76c
c001af71:	83 e2 1f             	and    edx,0x1f
c001af74:	c1 e7 10             	shl    edi,0x10
c001af77:	42                   	inc    edx
c001af78:	c1 e8 05             	shr    eax,0x5
c001af7b:	88 d1                	mov    cl,dl
c001af7d:	31 d2                	xor    edx,edx
c001af7f:	f7 f5                	div    ebp
c001af81:	89 dd                	mov    ebp,ebx
c001af83:	88 d5                	mov    ch,dl
c001af85:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001af8b:	0f b7 c1             	movzx  eax,cx
c001af8e:	31 d2                	xor    edx,edx
c001af90:	09 f8                	or     eax,edi
c001af92:	bf 3c 00 00 00       	mov    edi,0x3c
c001af97:	89 c1                	mov    ecx,eax
c001af99:	89 f0                	mov    eax,esi
c001af9b:	f7 f7                	div    edi
c001af9d:	c1 e2 10             	shl    edx,0x10
c001afa0:	09 d5                	or     ebp,edx
c001afa2:	31 d2                	xor    edx,edx
c001afa4:	89 eb                	mov    ebx,ebp
c001afa6:	f7 f7                	div    edi
c001afa8:	bf 10 0e 00 00       	mov    edi,0xe10
c001afad:	88 d7                	mov    bh,dl
c001afaf:	89 f0                	mov    eax,esi
c001afb1:	31 d2                	xor    edx,edx
c001afb3:	f7 f7                	div    edi
c001afb5:	bf 18 00 00 00       	mov    edi,0x18
c001afba:	31 d2                	xor    edx,edx
c001afbc:	f7 f7                	div    edi
c001afbe:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c001afc3:	88 d3                	mov    bl,dl
c001afc5:	53                   	push   ebx
c001afc6:	51                   	push   ecx
c001afc7:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001afcd:	e8 6a 88 ff ff       	call   c001383c <Clock::setTimeInDatetimeLocal(datetime_t)>
c001afd2:	83 c4 1c             	add    esp,0x1c
c001afd5:	83 f0 01             	xor    eax,0x1
c001afd8:	5b                   	pop    ebx
c001afd9:	0f b6 c0             	movzx  eax,al
c001afdc:	5e                   	pop    esi
c001afdd:	31 d2                	xor    edx,edx
c001afdf:	5f                   	pop    edi
c001afe0:	5d                   	pop    ebp
c001afe1:	c3                   	ret    

c001afe2 <Sys::timezone(regs*)>:
c001afe2:	53                   	push   ebx
c001afe3:	83 ec 08             	sub    esp,0x8
c001afe6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001afea:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001afee:	75 17                	jne    c001b007 <Sys::timezone(regs*)+0x25>
c001aff0:	83 ec 0c             	sub    esp,0xc
c001aff3:	68 f9 b8 02 c0       	push   0xc002b8f9
c001aff8:	e8 26 77 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c001affd:	83 c8 ff             	or     eax,0xffffffff
c001b000:	83 c4 10             	add    esp,0x10
c001b003:	89 c2                	mov    edx,eax
c001b005:	eb 20                	jmp    c001b027 <Sys::timezone(regs*)+0x45>
c001b007:	83 ec 0c             	sub    esp,0xc
c001b00a:	68 0e b9 02 c0       	push   0xc002b90e
c001b00f:	e8 0f 77 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c001b014:	58                   	pop    eax
c001b015:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b018:	e8 81 85 ff ff       	call   c001359e <User::loadClockSettings(int)>
c001b01d:	83 c4 10             	add    esp,0x10
c001b020:	b8 01 00 00 00       	mov    eax,0x1
c001b025:	31 d2                	xor    edx,edx
c001b027:	83 c4 08             	add    esp,0x8
c001b02a:	5b                   	pop    ebx
c001b02b:	c3                   	ret    

c001b02c <Sys::write(regs*)>:
c001b02c:	57                   	push   edi
c001b02d:	56                   	push   esi
c001b02e:	53                   	push   ebx
c001b02f:	83 ec 10             	sub    esp,0x10
c001b032:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b036:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b039:	83 f8 02             	cmp    eax,0x2
c001b03c:	77 10                	ja     c001b04e <Sys::write(regs*)+0x22>
c001b03e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b043:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b046:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b04c:	eb 0e                	jmp    c001b05c <Sys::write(regs*)+0x30>
c001b04e:	83 ec 0c             	sub    esp,0xc
c001b051:	50                   	push   eax
c001b052:	e8 72 60 ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b057:	83 c4 10             	add    esp,0x10
c001b05a:	89 c1                	mov    ecx,eax
c001b05c:	83 c8 ff             	or     eax,0xffffffff
c001b05f:	85 c9                	test   ecx,ecx
c001b061:	89 c2                	mov    edx,eax
c001b063:	74 28                	je     c001b08d <Sys::write(regs*)+0x61>
c001b065:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b06d:	31 ff                	xor    edi,edi
c001b06f:	83 ec 0c             	sub    esp,0xc
c001b072:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b074:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b078:	52                   	push   edx
c001b079:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b07c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b07f:	57                   	push   edi
c001b080:	56                   	push   esi
c001b081:	51                   	push   ecx
c001b082:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b085:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b089:	83 c4 20             	add    esp,0x20
c001b08c:	99                   	cdq    
c001b08d:	83 c4 10             	add    esp,0x10
c001b090:	5b                   	pop    ebx
c001b091:	5e                   	pop    esi
c001b092:	5f                   	pop    edi
c001b093:	c3                   	ret    

c001b094 <Sys::wsbe(regs*)>:
c001b094:	57                   	push   edi
c001b095:	b9 0b 00 00 00       	mov    ecx,0xb
c001b09a:	56                   	push   esi
c001b09b:	be 4d b9 02 c0       	mov    esi,0xc002b94d
c001b0a0:	53                   	push   ebx
c001b0a1:	83 ec 30             	sub    esp,0x30
c001b0a4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b0a8:	fc                   	cld    
c001b0a9:	83 ec 0c             	sub    esp,0xc
c001b0ac:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b0ae:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b0b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b0b7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b0ba:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b0c0:	8b 06                	mov    eax,DWORD PTR [esi]
c001b0c2:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b0c5:	57                   	push   edi
c001b0c6:	e8 a1 56 fe ff       	call   c000076c <strlen>
c001b0cb:	5a                   	pop    edx
c001b0cc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b0d0:	52                   	push   edx
c001b0d1:	31 d2                	xor    edx,edx
c001b0d3:	57                   	push   edi
c001b0d4:	52                   	push   edx
c001b0d5:	50                   	push   eax
c001b0d6:	56                   	push   esi
c001b0d7:	ff d3                	call   ebx
c001b0d9:	83 c4 14             	add    esp,0x14
c001b0dc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b0e0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b0e3:	e8 d7 31 00 00       	call   c001e2bf <terminateTask(int)>
c001b0e8:	83 c4 40             	add    esp,0x40
c001b0eb:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b0f0:	5b                   	pop    ebx
c001b0f1:	31 d2                	xor    edx,edx
c001b0f3:	5e                   	pop    esi
c001b0f4:	5f                   	pop    edi
c001b0f5:	c3                   	ret    

c001b0f6 <Sys::yield(regs*)>:
c001b0f6:	57                   	push   edi
c001b0f7:	56                   	push   esi
c001b0f8:	53                   	push   ebx
c001b0f9:	fa                   	cli    
c001b0fa:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001b100:	e8 1a 29 00 00       	call   c001da1f <schedule()>
c001b105:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001b10a:	48                   	dec    eax
c001b10b:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001b110:	75 01                	jne    c001b113 <Sys::yield(regs*)+0x1d>
c001b112:	fb                   	sti    
c001b113:	8b 35 70 e0 02 c0    	mov    esi,DWORD PTR ds:0xc002e070
c001b119:	8b 3d 74 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e074
c001b11f:	89 f0                	mov    eax,esi
c001b121:	89 fb                	mov    ebx,edi
c001b123:	89 f1                	mov    ecx,esi
c001b125:	c1 e0 07             	shl    eax,0x7
c001b128:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b12c:	25 80 30 0f 00       	and    eax,0xf3080
c001b131:	c1 eb 17             	shr    ebx,0x17
c001b134:	31 c8                	xor    eax,ecx
c001b136:	89 da                	mov    edx,ebx
c001b138:	5b                   	pop    ebx
c001b139:	5e                   	pop    esi
c001b13a:	5f                   	pop    edi
c001b13b:	c3                   	ret    

c001b13c <sysCallSeekDir(regs*)>:
c001b13c:	31 c0                	xor    eax,eax
c001b13e:	31 d2                	xor    edx,edx
c001b140:	c3                   	ret    

c001b141 <sysCallTellDir(regs*)>:
c001b141:	31 c0                	xor    eax,eax
c001b143:	31 d2                	xor    edx,edx
c001b145:	c3                   	ret    

c001b146 <sysCallVerify(regs*)>:
c001b146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b14a:	31 d2                	xor    edx,edx
c001b14c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b14f:	c3                   	ret    

c001b150 <sysCallGetArgc(regs*)>:
c001b150:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b155:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b158:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b15e:	99                   	cdq    
c001b15f:	c3                   	ret    

c001b160 <sysFormatDisk(regs*)>:
c001b160:	56                   	push   esi
c001b161:	53                   	push   ebx
c001b162:	53                   	push   ebx
c001b163:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b167:	8b 1d 74 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db74
c001b16d:	eb 25                	jmp    c001b194 <sysFormatDisk(regs*)+0x34>
c001b16f:	83 ec 0c             	sub    esp,0xc
c001b172:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b175:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b177:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b17a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b17d:	50                   	push   eax
c001b17e:	ff 34 85 00 e0 02 c0 	push   DWORD PTR [eax*4-0x3ffd2000]
c001b185:	53                   	push   ebx
c001b186:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b189:	83 c4 20             	add    esp,0x20
c001b18c:	83 f8 08             	cmp    eax,0x8
c001b18f:	75 12                	jne    c001b1a3 <sysFormatDisk(regs*)+0x43>
c001b191:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b194:	85 db                	test   ebx,ebx
c001b196:	75 d7                	jne    c001b16f <sysFormatDisk(regs*)+0xf>
c001b198:	59                   	pop    ecx
c001b199:	b8 03 00 00 00       	mov    eax,0x3
c001b19e:	31 d2                	xor    edx,edx
c001b1a0:	5b                   	pop    ebx
c001b1a1:	5e                   	pop    esi
c001b1a2:	c3                   	ret    
c001b1a3:	85 c0                	test   eax,eax
c001b1a5:	74 1b                	je     c001b1c2 <sysFormatDisk(regs*)+0x62>
c001b1a7:	83 f8 09             	cmp    eax,0x9
c001b1aa:	74 0b                	je     c001b1b7 <sysFormatDisk(regs*)+0x57>
c001b1ac:	59                   	pop    ecx
c001b1ad:	b8 02 00 00 00       	mov    eax,0x2
c001b1b2:	31 d2                	xor    edx,edx
c001b1b4:	5b                   	pop    ebx
c001b1b5:	5e                   	pop    esi
c001b1b6:	c3                   	ret    
c001b1b7:	59                   	pop    ecx
c001b1b8:	b8 01 00 00 00       	mov    eax,0x1
c001b1bd:	31 d2                	xor    edx,edx
c001b1bf:	5b                   	pop    ebx
c001b1c0:	5e                   	pop    esi
c001b1c1:	c3                   	ret    
c001b1c2:	59                   	pop    ecx
c001b1c3:	31 c0                	xor    eax,eax
c001b1c5:	31 d2                	xor    edx,edx
c001b1c7:	5b                   	pop    ebx
c001b1c8:	5e                   	pop    esi
c001b1c9:	c3                   	ret    

c001b1ca <sysSetDiskVolumeLabel(regs*)>:
c001b1ca:	56                   	push   esi
c001b1cb:	53                   	push   ebx
c001b1cc:	53                   	push   ebx
c001b1cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b1d1:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b1d4:	83 f8 19             	cmp    eax,0x19
c001b1d7:	77 29                	ja     c001b202 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b1d9:	8b 0c 85 00 e0 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2000]
c001b1e0:	85 c9                	test   ecx,ecx
c001b1e2:	74 1e                	je     c001b202 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b1e4:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b1e7:	85 d2                	test   edx,edx
c001b1e9:	74 17                	je     c001b202 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b1eb:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b1f1:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b1f3:	52                   	push   edx
c001b1f4:	50                   	push   eax
c001b1f5:	51                   	push   ecx
c001b1f6:	53                   	push   ebx
c001b1f7:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b1fa:	83 c4 10             	add    esp,0x10
c001b1fd:	99                   	cdq    
c001b1fe:	59                   	pop    ecx
c001b1ff:	5b                   	pop    ebx
c001b200:	5e                   	pop    esi
c001b201:	c3                   	ret    
c001b202:	59                   	pop    ecx
c001b203:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b208:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b20d:	5b                   	pop    ebx
c001b20e:	5e                   	pop    esi
c001b20f:	c3                   	ret    

c001b210 <sysGetDiskVolumeLabel(regs*)>:
c001b210:	57                   	push   edi
c001b211:	56                   	push   esi
c001b212:	53                   	push   ebx
c001b213:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b217:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b21a:	83 fa 19             	cmp    edx,0x19
c001b21d:	77 34                	ja     c001b253 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b21f:	8b 0c 95 00 e0 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd2000]
c001b226:	85 c9                	test   ecx,ecx
c001b228:	74 29                	je     c001b253 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b22a:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b22d:	85 db                	test   ebx,ebx
c001b22f:	74 22                	je     c001b253 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b231:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b234:	85 c0                	test   eax,eax
c001b236:	74 1b                	je     c001b253 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b238:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b23e:	83 ec 0c             	sub    esp,0xc
c001b241:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b243:	50                   	push   eax
c001b244:	53                   	push   ebx
c001b245:	52                   	push   edx
c001b246:	51                   	push   ecx
c001b247:	56                   	push   esi
c001b248:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b24b:	83 c4 20             	add    esp,0x20
c001b24e:	99                   	cdq    
c001b24f:	5b                   	pop    ebx
c001b250:	5e                   	pop    esi
c001b251:	5f                   	pop    edi
c001b252:	c3                   	ret    
c001b253:	5b                   	pop    ebx
c001b254:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b259:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b25e:	5e                   	pop    esi
c001b25f:	5f                   	pop    edi
c001b260:	c3                   	ret    

c001b261 <sysShutdown(regs*)>:
c001b261:	83 ec 0c             	sub    esp,0xc
c001b264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b268:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b26b:	85 c0                	test   eax,eax
c001b26d:	74 18                	je     c001b287 <sysShutdown(regs*)+0x26>
c001b26f:	83 f8 01             	cmp    eax,0x1
c001b272:	74 38                	je     c001b2ac <sysShutdown(regs*)+0x4b>
c001b274:	83 f8 02             	cmp    eax,0x2
c001b277:	74 24                	je     c001b29d <sysShutdown(regs*)+0x3c>
c001b279:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b27e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b283:	83 c4 0c             	add    esp,0xc
c001b286:	c3                   	ret    
c001b287:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c001b28c:	8b 10                	mov    edx,DWORD PTR [eax]
c001b28e:	6a 00                	push   0x0
c001b290:	6a 00                	push   0x0
c001b292:	6a 00                	push   0x0
c001b294:	50                   	push   eax
c001b295:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b298:	83 c4 10             	add    esp,0x10
c001b29b:	eb dc                	jmp    c001b279 <sysShutdown(regs*)+0x18>
c001b29d:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c001b2a2:	8b 10                	mov    edx,DWORD PTR [eax]
c001b2a4:	6a 00                	push   0x0
c001b2a6:	6a 00                	push   0x0
c001b2a8:	6a 01                	push   0x1
c001b2aa:	eb e8                	jmp    c001b294 <sysShutdown(regs*)+0x33>
c001b2ac:	a1 a0 00 03 c0       	mov    eax,ds:0xc00300a0
c001b2b1:	85 c0                	test   eax,eax
c001b2b3:	74 02                	je     c001b2b7 <sysShutdown(regs*)+0x56>
c001b2b5:	ff d0                	call   eax
c001b2b7:	31 c0                	xor    eax,eax
c001b2b9:	31 d2                	xor    edx,edx
c001b2bb:	83 c4 0c             	add    esp,0xc
c001b2be:	c3                   	ret    

c001b2bf <sysCallRealpath(regs*)>:
c001b2bf:	83 ec 0c             	sub    esp,0xc
c001b2c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2c6:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b2c9:	85 d2                	test   edx,edx
c001b2cb:	74 07                	je     c001b2d4 <sysCallRealpath(regs*)+0x15>
c001b2cd:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b2d0:	85 c0                	test   eax,eax
c001b2d2:	75 0b                	jne    c001b2df <sysCallRealpath(regs*)+0x20>
c001b2d4:	b8 01 00 00 00       	mov    eax,0x1
c001b2d9:	31 d2                	xor    edx,edx
c001b2db:	83 c4 0c             	add    esp,0xc
c001b2de:	c3                   	ret    
c001b2df:	51                   	push   ecx
c001b2e0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b2e6:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b2e9:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b2ef:	51                   	push   ecx
c001b2f0:	52                   	push   edx
c001b2f1:	50                   	push   eax
c001b2f2:	e8 e1 77 ff ff       	call   c0012ad8 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b2f7:	83 c4 10             	add    esp,0x10
c001b2fa:	31 c0                	xor    eax,eax
c001b2fc:	31 d2                	xor    edx,edx
c001b2fe:	83 c4 0c             	add    esp,0xc
c001b301:	c3                   	ret    

c001b302 <sysCallReadDir(regs*)>:
c001b302:	53                   	push   ebx
c001b303:	83 ec 18             	sub    esp,0x18
c001b306:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b30a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b30d:	83 f8 02             	cmp    eax,0x2
c001b310:	76 60                	jbe    c001b372 <sysCallReadDir(regs*)+0x70>
c001b312:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001b319:	77 48                	ja     c001b363 <sysCallReadDir(regs*)+0x61>
c001b31b:	83 ec 0c             	sub    esp,0xc
c001b31e:	50                   	push   eax
c001b31f:	e8 a5 5d ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b324:	83 c4 10             	add    esp,0x10
c001b327:	85 c0                	test   eax,eax
c001b329:	74 38                	je     c001b363 <sysCallReadDir(regs*)+0x61>
c001b32b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b333:	83 ec 0c             	sub    esp,0xc
c001b336:	8b 10                	mov    edx,DWORD PTR [eax]
c001b338:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b33c:	51                   	push   ecx
c001b33d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b340:	6a 00                	push   0x0
c001b342:	68 10 01 00 00       	push   0x110
c001b347:	50                   	push   eax
c001b348:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b34b:	83 c4 20             	add    esp,0x20
c001b34e:	85 c0                	test   eax,eax
c001b350:	74 29                	je     c001b37b <sysCallReadDir(regs*)+0x79>
c001b352:	83 f8 07             	cmp    eax,0x7
c001b355:	74 1b                	je     c001b372 <sysCallReadDir(regs*)+0x70>
c001b357:	b8 02 00 00 00       	mov    eax,0x2
c001b35c:	31 d2                	xor    edx,edx
c001b35e:	83 c4 18             	add    esp,0x18
c001b361:	5b                   	pop    ebx
c001b362:	c3                   	ret    
c001b363:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b368:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b36d:	83 c4 18             	add    esp,0x18
c001b370:	5b                   	pop    ebx
c001b371:	c3                   	ret    
c001b372:	b8 01 00 00 00       	mov    eax,0x1
c001b377:	31 d2                	xor    edx,edx
c001b379:	eb e3                	jmp    c001b35e <sysCallReadDir(regs*)+0x5c>
c001b37b:	31 c0                	xor    eax,eax
c001b37d:	31 d2                	xor    edx,edx
c001b37f:	eb dd                	jmp    c001b35e <sysCallReadDir(regs*)+0x5c>

c001b381 <sysCallIsATTY(regs*)>:
c001b381:	83 ec 0c             	sub    esp,0xc
c001b384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b388:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b38b:	83 f8 02             	cmp    eax,0x2
c001b38e:	76 07                	jbe    c001b397 <sysCallIsATTY(regs*)+0x16>
c001b390:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b395:	75 26                	jne    c001b3bd <sysCallIsATTY(regs*)+0x3c>
c001b397:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b39c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b39f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b3a5:	85 c0                	test   eax,eax
c001b3a7:	74 24                	je     c001b3cd <sysCallIsATTY(regs*)+0x4c>
c001b3a9:	83 ec 0c             	sub    esp,0xc
c001b3ac:	8b 10                	mov    edx,DWORD PTR [eax]
c001b3ae:	50                   	push   eax
c001b3af:	ff 12                	call   DWORD PTR [edx]
c001b3b1:	31 d2                	xor    edx,edx
c001b3b3:	0f b6 c0             	movzx  eax,al
c001b3b6:	83 c4 10             	add    esp,0x10
c001b3b9:	83 c4 0c             	add    esp,0xc
c001b3bc:	c3                   	ret    
c001b3bd:	83 ec 0c             	sub    esp,0xc
c001b3c0:	50                   	push   eax
c001b3c1:	e8 03 5d ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b3c6:	83 c4 10             	add    esp,0x10
c001b3c9:	85 c0                	test   eax,eax
c001b3cb:	75 dc                	jne    c001b3a9 <sysCallIsATTY(regs*)+0x28>
c001b3cd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b3d2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b3d7:	83 c4 0c             	add    esp,0xc
c001b3da:	c3                   	ret    

c001b3db <sysCallSeek(regs*)>:
c001b3db:	53                   	push   ebx
c001b3dc:	83 ec 08             	sub    esp,0x8
c001b3df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b3e3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b3e6:	8d 50 fd             	lea    edx,[eax-0x3]
c001b3e9:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b3ef:	77 32                	ja     c001b423 <sysCallSeek(regs*)+0x48>
c001b3f1:	83 ec 0c             	sub    esp,0xc
c001b3f4:	50                   	push   eax
c001b3f5:	e8 cf 5c ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b3fa:	83 c4 0c             	add    esp,0xc
c001b3fd:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b400:	31 db                	xor    ebx,ebx
c001b402:	53                   	push   ebx
c001b403:	51                   	push   ecx
c001b404:	50                   	push   eax
c001b405:	e8 9a 79 ff ff       	call   c0012da4 <File::seek(unsigned long long)>
c001b40a:	83 c4 10             	add    esp,0x10
c001b40d:	85 c0                	test   eax,eax
c001b40f:	0f 95 c0             	setne  al
c001b412:	31 d2                	xor    edx,edx
c001b414:	0f b6 c0             	movzx  eax,al
c001b417:	f7 d8                	neg    eax
c001b419:	83 d2 00             	adc    edx,0x0
c001b41c:	83 c4 08             	add    esp,0x8
c001b41f:	f7 da                	neg    edx
c001b421:	5b                   	pop    ebx
c001b422:	c3                   	ret    
c001b423:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b428:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b42d:	83 c4 08             	add    esp,0x8
c001b430:	5b                   	pop    ebx
c001b431:	c3                   	ret    

c001b432 <sysCallTell(regs*)>:
c001b432:	53                   	push   ebx
c001b433:	83 ec 08             	sub    esp,0x8
c001b436:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b43a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b43d:	83 f8 02             	cmp    eax,0x2
c001b440:	76 4d                	jbe    c001b48f <sysCallTell(regs*)+0x5d>
c001b442:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b447:	76 19                	jbe    c001b462 <sysCallTell(regs*)+0x30>
c001b449:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b44c:	31 d2                	xor    edx,edx
c001b44e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b454:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b45b:	31 c0                	xor    eax,eax
c001b45d:	83 c4 08             	add    esp,0x8
c001b460:	5b                   	pop    ebx
c001b461:	c3                   	ret    
c001b462:	83 ec 0c             	sub    esp,0xc
c001b465:	50                   	push   eax
c001b466:	e8 5e 5c ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b46b:	5a                   	pop    edx
c001b46c:	59                   	pop    ecx
c001b46d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b470:	50                   	push   eax
c001b471:	e8 84 79 ff ff       	call   c0012dfa <File::tell(unsigned long long*)>
c001b476:	83 c4 10             	add    esp,0x10
c001b479:	85 c0                	test   eax,eax
c001b47b:	0f 95 c0             	setne  al
c001b47e:	31 d2                	xor    edx,edx
c001b480:	0f b6 c0             	movzx  eax,al
c001b483:	f7 d8                	neg    eax
c001b485:	83 d2 00             	adc    edx,0x0
c001b488:	83 c4 08             	add    esp,0x8
c001b48b:	f7 da                	neg    edx
c001b48d:	5b                   	pop    ebx
c001b48e:	c3                   	ret    
c001b48f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b494:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b499:	83 c4 08             	add    esp,0x8
c001b49c:	5b                   	pop    ebx
c001b49d:	c3                   	ret    

c001b49e <sysCallSize(regs*)>:
c001b49e:	53                   	push   ebx
c001b49f:	83 ec 18             	sub    esp,0x18
c001b4a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b4a6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b4a9:	83 f8 02             	cmp    eax,0x2
c001b4ac:	76 53                	jbe    c001b501 <sysCallSize(regs*)+0x63>
c001b4ae:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b4b3:	76 19                	jbe    c001b4ce <sysCallSize(regs*)+0x30>
c001b4b5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b4b8:	31 d2                	xor    edx,edx
c001b4ba:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b4c0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b4c7:	31 c0                	xor    eax,eax
c001b4c9:	83 c4 18             	add    esp,0x18
c001b4cc:	5b                   	pop    ebx
c001b4cd:	c3                   	ret    
c001b4ce:	83 ec 0c             	sub    esp,0xc
c001b4d1:	50                   	push   eax
c001b4d2:	e8 f2 5b ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b4d7:	83 c4 0c             	add    esp,0xc
c001b4da:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b4de:	52                   	push   edx
c001b4df:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b4e2:	50                   	push   eax
c001b4e3:	e8 aa 7a ff ff       	call   c0012f92 <File::stat(unsigned long long*, bool*)>
c001b4e8:	83 c4 10             	add    esp,0x10
c001b4eb:	85 c0                	test   eax,eax
c001b4ed:	0f 95 c0             	setne  al
c001b4f0:	31 d2                	xor    edx,edx
c001b4f2:	0f b6 c0             	movzx  eax,al
c001b4f5:	f7 d8                	neg    eax
c001b4f7:	83 d2 00             	adc    edx,0x0
c001b4fa:	83 c4 18             	add    esp,0x18
c001b4fd:	f7 da                	neg    edx
c001b4ff:	5b                   	pop    ebx
c001b500:	c3                   	ret    
c001b501:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b506:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b50b:	83 c4 18             	add    esp,0x18
c001b50e:	5b                   	pop    ebx
c001b50f:	c3                   	ret    

c001b510 <sysCallSizeFromFilename(regs*)>:
c001b510:	57                   	push   edi
c001b511:	56                   	push   esi
c001b512:	53                   	push   ebx
c001b513:	83 ec 20             	sub    esp,0x20
c001b516:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b51a:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001b51d:	83 fb 02             	cmp    ebx,0x2
c001b520:	0f 86 88 00 00 00    	jbe    c001b5ae <sysCallSizeFromFilename(regs*)+0x9e>
c001b526:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b52c:	76 1b                	jbe    c001b549 <sysCallSizeFromFilename(regs*)+0x39>
c001b52e:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b531:	31 d2                	xor    edx,edx
c001b533:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b539:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b540:	83 c4 20             	add    esp,0x20
c001b543:	31 c0                	xor    eax,eax
c001b545:	5b                   	pop    ebx
c001b546:	5e                   	pop    esi
c001b547:	5f                   	pop    edi
c001b548:	c3                   	ret    
c001b549:	83 ec 0c             	sub    esp,0xc
c001b54c:	68 14 01 00 00       	push   0x114
c001b551:	e8 43 40 ff ff       	call   c000f599 <malloc>
c001b556:	83 c4 0c             	add    esp,0xc
c001b559:	89 c7                	mov    edi,eax
c001b55b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b560:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b563:	53                   	push   ebx
c001b564:	57                   	push   edi
c001b565:	e8 18 77 ff ff       	call   c0012c82 <File::File(char const*, Process*)>
c001b56a:	83 c4 0c             	add    esp,0xc
c001b56d:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b571:	50                   	push   eax
c001b572:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b575:	57                   	push   edi
c001b576:	e8 17 7a ff ff       	call   c0012f92 <File::stat(unsigned long long*, bool*)>
c001b57b:	83 c4 10             	add    esp,0x10
c001b57e:	85 ff                	test   edi,edi
c001b580:	74 14                	je     c001b596 <sysCallSizeFromFilename(regs*)+0x86>
c001b582:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b586:	8b 17                	mov    edx,DWORD PTR [edi]
c001b588:	83 ec 0c             	sub    esp,0xc
c001b58b:	57                   	push   edi
c001b58c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b58f:	83 c4 10             	add    esp,0x10
c001b592:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b596:	85 c0                	test   eax,eax
c001b598:	0f 95 c0             	setne  al
c001b59b:	31 d2                	xor    edx,edx
c001b59d:	0f b6 c0             	movzx  eax,al
c001b5a0:	f7 d8                	neg    eax
c001b5a2:	83 d2 00             	adc    edx,0x0
c001b5a5:	83 c4 20             	add    esp,0x20
c001b5a8:	f7 da                	neg    edx
c001b5aa:	5b                   	pop    ebx
c001b5ab:	5e                   	pop    esi
c001b5ac:	5f                   	pop    edi
c001b5ad:	c3                   	ret    
c001b5ae:	83 c4 20             	add    esp,0x20
c001b5b1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b5b6:	5b                   	pop    ebx
c001b5b7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b5bc:	5e                   	pop    esi
c001b5bd:	5f                   	pop    edi
c001b5be:	c3                   	ret    

c001b5bf <sysCallClose(regs*)>:
c001b5bf:	53                   	push   ebx
c001b5c0:	83 ec 08             	sub    esp,0x8
c001b5c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5c7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b5ca:	83 f8 02             	cmp    eax,0x2
c001b5cd:	76 41                	jbe    c001b610 <sysCallClose(regs*)+0x51>
c001b5cf:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001b5d5:	83 fa 01             	cmp    edx,0x1
c001b5d8:	76 2d                	jbe    c001b607 <sysCallClose(regs*)+0x48>
c001b5da:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b5df:	77 2f                	ja     c001b610 <sysCallClose(regs*)+0x51>
c001b5e1:	83 ec 0c             	sub    esp,0xc
c001b5e4:	50                   	push   eax
c001b5e5:	e8 df 5a ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b5ea:	89 c3                	mov    ebx,eax
c001b5ec:	89 04 24             	mov    DWORD PTR [esp],eax
c001b5ef:	e8 50 77 ff ff       	call   c0012d44 <File::close()>
c001b5f4:	83 c4 10             	add    esp,0x10
c001b5f7:	85 db                	test   ebx,ebx
c001b5f9:	74 0c                	je     c001b607 <sysCallClose(regs*)+0x48>
c001b5fb:	83 ec 0c             	sub    esp,0xc
c001b5fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b600:	53                   	push   ebx
c001b601:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b604:	83 c4 10             	add    esp,0x10
c001b607:	31 c0                	xor    eax,eax
c001b609:	31 d2                	xor    edx,edx
c001b60b:	83 c4 08             	add    esp,0x8
c001b60e:	5b                   	pop    ebx
c001b60f:	c3                   	ret    
c001b610:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b615:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b61a:	83 c4 08             	add    esp,0x8
c001b61d:	5b                   	pop    ebx
c001b61e:	c3                   	ret    

c001b61f <sysCallOpenDir(regs*)>:
c001b61f:	56                   	push   esi
c001b620:	53                   	push   ebx
c001b621:	53                   	push   ebx
c001b622:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b626:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b629:	85 f6                	test   esi,esi
c001b62b:	74 59                	je     c001b686 <sysCallOpenDir(regs*)+0x67>
c001b62d:	83 ec 0c             	sub    esp,0xc
c001b630:	68 14 01 00 00       	push   0x114
c001b635:	e8 5f 3f ff ff       	call   c000f599 <malloc>
c001b63a:	83 c4 0c             	add    esp,0xc
c001b63d:	89 c6                	mov    esi,eax
c001b63f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b644:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b647:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b64a:	56                   	push   esi
c001b64b:	e8 de 7a ff ff       	call   c001312e <Directory::Directory(char const*, Process*)>
c001b650:	83 c4 10             	add    esp,0x10
c001b653:	85 f6                	test   esi,esi
c001b655:	74 2f                	je     c001b686 <sysCallOpenDir(regs*)+0x67>
c001b657:	83 ec 0c             	sub    esp,0xc
c001b65a:	56                   	push   esi
c001b65b:	e8 32 7b ff ff       	call   c0013192 <Directory::open()>
c001b660:	83 c4 10             	add    esp,0x10
c001b663:	85 c0                	test   eax,eax
c001b665:	75 1f                	jne    c001b686 <sysCallOpenDir(regs*)+0x67>
c001b667:	83 ec 0c             	sub    esp,0xc
c001b66a:	56                   	push   esi
c001b66b:	e8 64 57 ff ff       	call   c0010dd4 <UnixFile::getFileDescriptor()>
c001b670:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b673:	83 c4 10             	add    esp,0x10
c001b676:	89 02                	mov    DWORD PTR [edx],eax
c001b678:	c1 f8 1f             	sar    eax,0x1f
c001b67b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b67e:	31 c0                	xor    eax,eax
c001b680:	59                   	pop    ecx
c001b681:	31 d2                	xor    edx,edx
c001b683:	5b                   	pop    ebx
c001b684:	5e                   	pop    esi
c001b685:	c3                   	ret    
c001b686:	59                   	pop    ecx
c001b687:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b68c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b691:	5b                   	pop    ebx
c001b692:	5e                   	pop    esi
c001b693:	c3                   	ret    

c001b694 <sysCallCloseDir(regs*)>:
c001b694:	53                   	push   ebx
c001b695:	83 ec 08             	sub    esp,0x8
c001b698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b69c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b69f:	8d 50 fd             	lea    edx,[eax-0x3]
c001b6a2:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b6a8:	77 2f                	ja     c001b6d9 <sysCallCloseDir(regs*)+0x45>
c001b6aa:	83 ec 0c             	sub    esp,0xc
c001b6ad:	50                   	push   eax
c001b6ae:	e8 16 5a ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b6b3:	89 c3                	mov    ebx,eax
c001b6b5:	89 04 24             	mov    DWORD PTR [esp],eax
c001b6b8:	e8 31 7b ff ff       	call   c00131ee <Directory::close()>
c001b6bd:	83 c4 10             	add    esp,0x10
c001b6c0:	85 db                	test   ebx,ebx
c001b6c2:	74 0c                	je     c001b6d0 <sysCallCloseDir(regs*)+0x3c>
c001b6c4:	83 ec 0c             	sub    esp,0xc
c001b6c7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b6c9:	53                   	push   ebx
c001b6ca:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b6cd:	83 c4 10             	add    esp,0x10
c001b6d0:	31 c0                	xor    eax,eax
c001b6d2:	31 d2                	xor    edx,edx
c001b6d4:	83 c4 08             	add    esp,0x8
c001b6d7:	5b                   	pop    ebx
c001b6d8:	c3                   	ret    
c001b6d9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b6de:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b6e3:	83 c4 08             	add    esp,0x8
c001b6e6:	5b                   	pop    ebx
c001b6e7:	c3                   	ret    

c001b6e8 <sysCallMakeDir(regs*)>:
c001b6e8:	56                   	push   esi
c001b6e9:	53                   	push   ebx
c001b6ea:	83 ec 10             	sub    esp,0x10
c001b6ed:	68 14 01 00 00       	push   0x114
c001b6f2:	e8 a2 3e ff ff       	call   c000f599 <malloc>
c001b6f7:	83 c4 0c             	add    esp,0xc
c001b6fa:	89 c3                	mov    ebx,eax
c001b6fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b701:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b704:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b708:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b70b:	53                   	push   ebx
c001b70c:	e8 1d 7a ff ff       	call   c001312e <Directory::Directory(char const*, Process*)>
c001b711:	83 c4 10             	add    esp,0x10
c001b714:	85 db                	test   ebx,ebx
c001b716:	74 32                	je     c001b74a <sysCallMakeDir(regs*)+0x62>
c001b718:	83 ec 0c             	sub    esp,0xc
c001b71b:	53                   	push   ebx
c001b71c:	e8 51 7c ff ff       	call   c0013372 <Directory::create()>
c001b721:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b724:	89 c6                	mov    esi,eax
c001b726:	e8 c3 7a ff ff       	call   c00131ee <Directory::close()>
c001b72b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b72d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b730:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b733:	83 c4 10             	add    esp,0x10
c001b736:	31 c0                	xor    eax,eax
c001b738:	59                   	pop    ecx
c001b739:	85 f6                	test   esi,esi
c001b73b:	5b                   	pop    ebx
c001b73c:	0f 95 c0             	setne  al
c001b73f:	5e                   	pop    esi
c001b740:	31 d2                	xor    edx,edx
c001b742:	f7 d8                	neg    eax
c001b744:	83 d2 00             	adc    edx,0x0
c001b747:	f7 da                	neg    edx
c001b749:	c3                   	ret    
c001b74a:	59                   	pop    ecx
c001b74b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b750:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b755:	5b                   	pop    ebx
c001b756:	5e                   	pop    esi
c001b757:	c3                   	ret    

c001b758 <sysCallWait(regs*)>:
c001b758:	83 ec 10             	sub    esp,0x10
c001b75b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b75f:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b762:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b765:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b768:	e8 b5 24 00 00       	call   c001dc22 <waitTask(int, int*, int)>
c001b76d:	83 c4 1c             	add    esp,0x1c
c001b770:	99                   	cdq    
c001b771:	c3                   	ret    

c001b772 <sysCallNotImpl(regs*)>:
c001b772:	83 ec 18             	sub    esp,0x18
c001b775:	68 79 b9 02 c0       	push   0xc002b979
c001b77a:	e8 10 e7 ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c001b77f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b784:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b789:	83 c4 1c             	add    esp,0x1c
c001b78c:	c3                   	ret    

c001b78d <sysPanic(regs*)>:
c001b78d:	83 ec 18             	sub    esp,0x18
c001b790:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b794:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b797:	e8 f3 e6 ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c001b79c:	b8 01 00 00 00       	mov    eax,0x1
c001b7a1:	31 d2                	xor    edx,edx
c001b7a3:	83 c4 1c             	add    esp,0x1c
c001b7a6:	c3                   	ret    

c001b7a7 <sysCallRmdir(regs*)>:
c001b7a7:	56                   	push   esi
c001b7a8:	53                   	push   ebx
c001b7a9:	83 ec 20             	sub    esp,0x20
c001b7ac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b7b0:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b7b3:	68 14 01 00 00       	push   0x114
c001b7b8:	e8 dc 3d ff ff       	call   c000f599 <malloc>
c001b7bd:	83 c4 0c             	add    esp,0xc
c001b7c0:	89 c3                	mov    ebx,eax
c001b7c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7c7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b7ca:	56                   	push   esi
c001b7cb:	53                   	push   ebx
c001b7cc:	e8 b1 74 ff ff       	call   c0012c82 <File::File(char const*, Process*)>
c001b7d1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b7d4:	e8 85 76 ff ff       	call   c0012e5e <File::unlink()>
c001b7d9:	83 c4 10             	add    esp,0x10
c001b7dc:	85 db                	test   ebx,ebx
c001b7de:	74 14                	je     c001b7f4 <sysCallRmdir(regs*)+0x4d>
c001b7e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b7e4:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b7e6:	83 ec 0c             	sub    esp,0xc
c001b7e9:	53                   	push   ebx
c001b7ea:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b7ed:	83 c4 10             	add    esp,0x10
c001b7f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b7f4:	85 c0                	test   eax,eax
c001b7f6:	0f 95 c0             	setne  al
c001b7f9:	31 d2                	xor    edx,edx
c001b7fb:	0f b6 c0             	movzx  eax,al
c001b7fe:	f7 d8                	neg    eax
c001b800:	83 d2 00             	adc    edx,0x0
c001b803:	83 c4 14             	add    esp,0x14
c001b806:	f7 da                	neg    edx
c001b808:	5b                   	pop    ebx
c001b809:	5e                   	pop    esi
c001b80a:	c3                   	ret    

c001b80b <sysCallUnlink(regs*)>:
c001b80b:	56                   	push   esi
c001b80c:	53                   	push   ebx
c001b80d:	83 ec 20             	sub    esp,0x20
c001b810:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b814:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b817:	68 14 01 00 00       	push   0x114
c001b81c:	e8 78 3d ff ff       	call   c000f599 <malloc>
c001b821:	83 c4 0c             	add    esp,0xc
c001b824:	89 c3                	mov    ebx,eax
c001b826:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b82b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b82e:	56                   	push   esi
c001b82f:	53                   	push   ebx
c001b830:	e8 4d 74 ff ff       	call   c0012c82 <File::File(char const*, Process*)>
c001b835:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b838:	e8 21 76 ff ff       	call   c0012e5e <File::unlink()>
c001b83d:	83 c4 10             	add    esp,0x10
c001b840:	85 db                	test   ebx,ebx
c001b842:	74 14                	je     c001b858 <sysCallUnlink(regs*)+0x4d>
c001b844:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b848:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b84a:	83 ec 0c             	sub    esp,0xc
c001b84d:	53                   	push   ebx
c001b84e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b851:	83 c4 10             	add    esp,0x10
c001b854:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b858:	85 c0                	test   eax,eax
c001b85a:	0f 95 c0             	setne  al
c001b85d:	31 d2                	xor    edx,edx
c001b85f:	0f b6 c0             	movzx  eax,al
c001b862:	f7 d8                	neg    eax
c001b864:	83 d2 00             	adc    edx,0x0
c001b867:	83 c4 14             	add    esp,0x14
c001b86a:	f7 da                	neg    edx
c001b86c:	5b                   	pop    ebx
c001b86d:	5e                   	pop    esi
c001b86e:	c3                   	ret    

c001b86f <sysCallGetArgv(regs*)>:
c001b86f:	83 ec 0c             	sub    esp,0xc
c001b872:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b876:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b879:	85 c0                	test   eax,eax
c001b87b:	78 2b                	js     c001b8a8 <sysCallGetArgv(regs*)+0x39>
c001b87d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b883:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b886:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b88c:	7d 1a                	jge    c001b8a8 <sysCallGetArgv(regs*)+0x39>
c001b88e:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b895:	85 c0                	test   eax,eax
c001b897:	74 17                	je     c001b8b0 <sysCallGetArgv(regs*)+0x41>
c001b899:	83 ec 08             	sub    esp,0x8
c001b89c:	50                   	push   eax
c001b89d:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b8a0:	e8 67 4f fe ff       	call   c000080c <strcpy>
c001b8a5:	83 c4 10             	add    esp,0x10
c001b8a8:	31 c0                	xor    eax,eax
c001b8aa:	31 d2                	xor    edx,edx
c001b8ac:	83 c4 0c             	add    esp,0xc
c001b8af:	c3                   	ret    
c001b8b0:	b8 01 00 00 00       	mov    eax,0x1
c001b8b5:	31 d2                	xor    edx,edx
c001b8b7:	83 c4 0c             	add    esp,0xc
c001b8ba:	c3                   	ret    

c001b8bb <sysCallTTYName(regs*)>:
c001b8bb:	56                   	push   esi
c001b8bc:	53                   	push   ebx
c001b8bd:	53                   	push   ebx
c001b8be:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b8c2:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b8c5:	85 c0                	test   eax,eax
c001b8c7:	74 5f                	je     c001b928 <sysCallTTYName(regs*)+0x6d>
c001b8c9:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b8cc:	83 f8 02             	cmp    eax,0x2
c001b8cf:	77 3e                	ja     c001b90f <sysCallTTYName(regs*)+0x54>
c001b8d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8d6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8d9:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b8df:	85 db                	test   ebx,ebx
c001b8e1:	74 45                	je     c001b928 <sysCallTTYName(regs*)+0x6d>
c001b8e3:	83 ec 0c             	sub    esp,0xc
c001b8e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b8e8:	53                   	push   ebx
c001b8e9:	ff 10                	call   DWORD PTR [eax]
c001b8eb:	83 c4 10             	add    esp,0x10
c001b8ee:	84 c0                	test   al,al
c001b8f0:	74 41                	je     c001b933 <sysCallTTYName(regs*)+0x78>
c001b8f2:	83 ec 08             	sub    esp,0x8
c001b8f5:	81 c3 82 00 00 00    	add    ebx,0x82
c001b8fb:	53                   	push   ebx
c001b8fc:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b8ff:	e8 08 4f fe ff       	call   c000080c <strcpy>
c001b904:	83 c4 10             	add    esp,0x10
c001b907:	31 c0                	xor    eax,eax
c001b909:	59                   	pop    ecx
c001b90a:	31 d2                	xor    edx,edx
c001b90c:	5b                   	pop    ebx
c001b90d:	5e                   	pop    esi
c001b90e:	c3                   	ret    
c001b90f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b914:	74 bb                	je     c001b8d1 <sysCallTTYName(regs*)+0x16>
c001b916:	83 ec 0c             	sub    esp,0xc
c001b919:	50                   	push   eax
c001b91a:	e8 aa 57 ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b91f:	83 c4 10             	add    esp,0x10
c001b922:	89 c3                	mov    ebx,eax
c001b924:	85 db                	test   ebx,ebx
c001b926:	75 bb                	jne    c001b8e3 <sysCallTTYName(regs*)+0x28>
c001b928:	59                   	pop    ecx
c001b929:	b8 01 00 00 00       	mov    eax,0x1
c001b92e:	31 d2                	xor    edx,edx
c001b930:	5b                   	pop    ebx
c001b931:	5e                   	pop    esi
c001b932:	c3                   	ret    
c001b933:	59                   	pop    ecx
c001b934:	b8 02 00 00 00       	mov    eax,0x2
c001b939:	31 d2                	xor    edx,edx
c001b93b:	5b                   	pop    ebx
c001b93c:	5e                   	pop    esi
c001b93d:	c3                   	ret    

c001b93e <sysCallUSleep(regs*)>:
c001b93e:	83 ec 14             	sub    esp,0x14
c001b941:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b946:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b94a:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b951:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b954:	01 ca                	add    edx,ecx
c001b956:	52                   	push   edx
c001b957:	50                   	push   eax
c001b958:	e8 9c 23 00 00       	call   c001dcf9 <nanoSleep(unsigned long long)>
c001b95d:	31 c0                	xor    eax,eax
c001b95f:	31 d2                	xor    edx,edx
c001b961:	83 c4 1c             	add    esp,0x1c
c001b964:	c3                   	ret    

c001b965 <sysCallSpawn(regs*)>:
c001b965:	56                   	push   esi
c001b966:	53                   	push   ebx
c001b967:	50                   	push   eax
c001b968:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b96c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b96f:	85 c0                	test   eax,eax
c001b971:	75 08                	jne    c001b97b <sysCallSpawn(regs*)+0x16>
c001b973:	59                   	pop    ecx
c001b974:	31 c0                	xor    eax,eax
c001b976:	31 d2                	xor    edx,edx
c001b978:	5b                   	pop    ebx
c001b979:	5e                   	pop    esi
c001b97a:	c3                   	ret    
c001b97b:	83 ec 0c             	sub    esp,0xc
c001b97e:	68 3f 07 00 00       	push   0x73f
c001b983:	e8 11 3c ff ff       	call   c000f599 <malloc>
c001b988:	83 c4 10             	add    esp,0x10
c001b98b:	89 c6                	mov    esi,eax
c001b98d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b990:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b993:	85 c0                	test   eax,eax
c001b995:	75 32                	jne    c001b9c9 <sysCallSpawn(regs*)+0x64>
c001b997:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b99c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b99f:	52                   	push   edx
c001b9a0:	50                   	push   eax
c001b9a1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b9a4:	56                   	push   esi
c001b9a5:	e8 74 1a 00 00       	call   c001d41e <Process::Process(char const*, Process*, char**)>
c001b9aa:	83 c4 10             	add    esp,0x10
c001b9ad:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b9b4:	75 bd                	jne    c001b973 <sysCallSpawn(regs*)+0xe>
c001b9b6:	83 ec 0c             	sub    esp,0xc
c001b9b9:	56                   	push   esi
c001b9ba:	e8 41 1f 00 00       	call   c001d900 <Process::createUserThread()>
c001b9bf:	8b 06                	mov    eax,DWORD PTR [esi]
c001b9c1:	83 c4 10             	add    esp,0x10
c001b9c4:	99                   	cdq    
c001b9c5:	59                   	pop    ecx
c001b9c6:	5b                   	pop    ebx
c001b9c7:	5e                   	pop    esi
c001b9c8:	c3                   	ret    
c001b9c9:	31 c0                	xor    eax,eax
c001b9cb:	eb d2                	jmp    c001b99f <sysCallSpawn(regs*)+0x3a>

c001b9cd <sysCallGetEnv(regs*)>:
c001b9cd:	57                   	push   edi
c001b9ce:	56                   	push   esi
c001b9cf:	53                   	push   ebx
c001b9d0:	83 ec 1c             	sub    esp,0x1c
c001b9d3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b9d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9dc:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b9df:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b9e2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b9e5:	e8 f1 e3 ff ff       	call   c0019ddb <Krnl::getProcessTotalEnvCount(Process*)>
c001b9ea:	83 c4 10             	add    esp,0x10
c001b9ed:	39 c7                	cmp    edi,eax
c001b9ef:	7c 14                	jl     c001ba05 <sysCallGetEnv(regs*)+0x38>
c001b9f1:	85 f6                	test   esi,esi
c001b9f3:	75 0b                	jne    c001ba00 <sysCallGetEnv(regs*)+0x33>
c001b9f5:	83 c4 10             	add    esp,0x10
c001b9f8:	31 c0                	xor    eax,eax
c001b9fa:	5b                   	pop    ebx
c001b9fb:	31 d2                	xor    edx,edx
c001b9fd:	5e                   	pop    esi
c001b9fe:	5f                   	pop    edi
c001b9ff:	c3                   	ret    
c001ba00:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ba03:	eb f0                	jmp    c001b9f5 <sysCallGetEnv(regs*)+0x28>
c001ba05:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ba09:	52                   	push   edx
c001ba0a:	57                   	push   edi
c001ba0b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ba11:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001ba14:	50                   	push   eax
c001ba15:	e8 e1 e3 ff ff       	call   c0019dfb <Krnl::getProcessEnvPair(Process*, int)>
c001ba1a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001ba1d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ba21:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ba25:	83 c4 0c             	add    esp,0xc
c001ba28:	85 c9                	test   ecx,ecx
c001ba2a:	75 23                	jne    c001ba4f <sysCallGetEnv(regs*)+0x82>
c001ba2c:	83 ec 0c             	sub    esp,0xc
c001ba2f:	50                   	push   eax
c001ba30:	e8 37 4d fe ff       	call   c000076c <strlen>
c001ba35:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ba38:	89 c3                	mov    ebx,eax
c001ba3a:	e8 2d 4d fe ff       	call   c000076c <strlen>
c001ba3f:	83 c4 10             	add    esp,0x10
c001ba42:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001ba46:	83 c4 10             	add    esp,0x10
c001ba49:	31 d2                	xor    edx,edx
c001ba4b:	5b                   	pop    ebx
c001ba4c:	5e                   	pop    esi
c001ba4d:	5f                   	pop    edi
c001ba4e:	c3                   	ret    
c001ba4f:	83 ec 08             	sub    esp,0x8
c001ba52:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ba55:	50                   	push   eax
c001ba56:	56                   	push   esi
c001ba57:	e8 b0 4d fe ff       	call   c000080c <strcpy>
c001ba5c:	58                   	pop    eax
c001ba5d:	5a                   	pop    edx
c001ba5e:	68 93 b9 02 c0       	push   0xc002b993
c001ba63:	56                   	push   esi
c001ba64:	e8 e3 4e fe ff       	call   c000094c <strcat>
c001ba69:	59                   	pop    ecx
c001ba6a:	5b                   	pop    ebx
c001ba6b:	57                   	push   edi
c001ba6c:	56                   	push   esi
c001ba6d:	e8 da 4e fe ff       	call   c000094c <strcat>
c001ba72:	83 c4 10             	add    esp,0x10
c001ba75:	e9 7b ff ff ff       	jmp    c001b9f5 <sysCallGetEnv(regs*)+0x28>

c001ba7a <sysAppSettings(regs*)>:
c001ba7a:	57                   	push   edi
c001ba7b:	56                   	push   esi
c001ba7c:	56                   	push   esi
c001ba7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba81:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001ba84:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001ba8a:	25 e0 1f 00 00       	and    eax,0x1fe0
c001ba8f:	66 3d c0 09          	cmp    ax,0x9c0
c001ba93:	75 2e                	jne    c001bac3 <sysAppSettings(regs*)+0x49>
c001ba95:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001ba9b:	83 e0 1f             	and    eax,0x1f
c001ba9e:	3c 01                	cmp    al,0x1
c001baa0:	74 2c                	je     c001bace <sysAppSettings(regs*)+0x54>
c001baa2:	3c 07                	cmp    al,0x7
c001baa4:	0f 84 b3 00 00 00    	je     c001bb5d <sysAppSettings(regs*)+0xe3>
c001baaa:	84 c0                	test   al,al
c001baac:	0f 84 d2 00 00 00    	je     c001bb84 <sysAppSettings(regs*)+0x10a>
c001bab2:	3c 08                	cmp    al,0x8
c001bab4:	74 63                	je     c001bb19 <sysAppSettings(regs*)+0x9f>
c001bab6:	59                   	pop    ecx
c001bab7:	0f b6 c0             	movzx  eax,al
c001baba:	5e                   	pop    esi
c001babb:	05 e8 03 00 00       	add    eax,0x3e8
c001bac0:	5f                   	pop    edi
c001bac1:	99                   	cdq    
c001bac2:	c3                   	ret    
c001bac3:	b8 01 00 00 00       	mov    eax,0x1
c001bac8:	59                   	pop    ecx
c001bac9:	31 d2                	xor    edx,edx
c001bacb:	5e                   	pop    esi
c001bacc:	5f                   	pop    edi
c001bacd:	c3                   	ret    
c001bace:	50                   	push   eax
c001bacf:	68 00 01 00 00       	push   0x100
c001bad4:	6a 00                	push   0x0
c001bad6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001badb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bade:	83 c0 0c             	add    eax,0xc
c001bae1:	50                   	push   eax
c001bae2:	e8 69 4c fe ff       	call   c0000750 <memset>
c001bae7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001baec:	b9 ff 00 00 00       	mov    ecx,0xff
c001baf1:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001baf4:	83 c7 0c             	add    edi,0xc
c001baf7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001baf9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bafe:	5a                   	pop    edx
c001baff:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb02:	59                   	pop    ecx
c001bb03:	8d 50 0c             	lea    edx,[eax+0xc]
c001bb06:	52                   	push   edx
c001bb07:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bb0d:	e8 e0 46 ff ff       	call   c00101f2 <VgaText::setTitle(char*)>
c001bb12:	83 c4 10             	add    esp,0x10
c001bb15:	31 c0                	xor    eax,eax
c001bb17:	eb af                	jmp    c001bac8 <sysAppSettings(regs*)+0x4e>
c001bb19:	83 ec 08             	sub    esp,0x8
c001bb1c:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001bb22:	83 e0 0f             	and    eax,0xf
c001bb25:	50                   	push   eax
c001bb26:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb2b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb2e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bb34:	e8 a9 46 ff ff       	call   c00101e2 <VgaText::setTitleColour(VgaColour)>
c001bb39:	5f                   	pop    edi
c001bb3a:	58                   	pop    eax
c001bb3b:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001bb41:	c1 e8 04             	shr    eax,0x4
c001bb44:	83 e0 0f             	and    eax,0xf
c001bb47:	50                   	push   eax
c001bb48:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb4d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb50:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bb56:	e8 77 46 ff ff       	call   c00101d2 <VgaText::setTitleTextColour(VgaColour)>
c001bb5b:	eb b5                	jmp    c001bb12 <sysAppSettings(regs*)+0x98>
c001bb5d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb62:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb65:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001bb6b:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001bb71:	c0 e8 06             	shr    al,0x6
c001bb74:	83 e0 01             	and    eax,0x1
c001bb77:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001bb7d:	31 c0                	xor    eax,eax
c001bb7f:	e9 44 ff ff ff       	jmp    c001bac8 <sysAppSettings(regs*)+0x4e>
c001bb84:	b8 02 00 00 00       	mov    eax,0x2
c001bb89:	e9 3a ff ff ff       	jmp    c001bac8 <sysAppSettings(regs*)+0x4e>

c001bb8e <sysSetFatAttrib(regs*)>:
c001bb8e:	57                   	push   edi
c001bb8f:	56                   	push   esi
c001bb90:	53                   	push   ebx
c001bb91:	83 ec 1c             	sub    esp,0x1c
c001bb94:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001bb98:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001bb9b:	68 14 01 00 00       	push   0x114
c001bba0:	e8 f4 39 ff ff       	call   c000f599 <malloc>
c001bba5:	83 c4 0c             	add    esp,0xc
c001bba8:	89 c3                	mov    ebx,eax
c001bbaa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbaf:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bbb2:	57                   	push   edi
c001bbb3:	53                   	push   ebx
c001bbb4:	e8 c9 70 ff ff       	call   c0012c82 <File::File(char const*, Process*)>
c001bbb9:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001bbbc:	83 c4 0c             	add    esp,0xc
c001bbbf:	0f b6 d4             	movzx  edx,ah
c001bbc2:	0f b6 c0             	movzx  eax,al
c001bbc5:	52                   	push   edx
c001bbc6:	50                   	push   eax
c001bbc7:	53                   	push   ebx
c001bbc8:	e8 2b 73 ff ff       	call   c0012ef8 <File::chfatattr(unsigned char, unsigned char)>
c001bbcd:	83 c4 10             	add    esp,0x10
c001bbd0:	85 db                	test   ebx,ebx
c001bbd2:	74 14                	je     c001bbe8 <sysSetFatAttrib(regs*)+0x5a>
c001bbd4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bbd8:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bbda:	83 ec 0c             	sub    esp,0xc
c001bbdd:	53                   	push   ebx
c001bbde:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bbe1:	83 c4 10             	add    esp,0x10
c001bbe4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bbe8:	85 c0                	test   eax,eax
c001bbea:	0f 95 c0             	setne  al
c001bbed:	31 d2                	xor    edx,edx
c001bbef:	0f b6 c0             	movzx  eax,al
c001bbf2:	f7 d8                	neg    eax
c001bbf4:	83 d2 00             	adc    edx,0x0
c001bbf7:	83 c4 10             	add    esp,0x10
c001bbfa:	f7 da                	neg    edx
c001bbfc:	5b                   	pop    ebx
c001bbfd:	5e                   	pop    esi
c001bbfe:	5f                   	pop    edi
c001bbff:	c3                   	ret    

c001bc00 <sysPipe(regs*)>:
c001bc00:	57                   	push   edi
c001bc01:	56                   	push   esi
c001bc02:	53                   	push   ebx
c001bc03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc07:	83 ec 0c             	sub    esp,0xc
c001bc0a:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001bc0d:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001bc10:	6a 20                	push   0x20
c001bc12:	e8 82 39 ff ff       	call   c000f599 <malloc>
c001bc17:	89 c3                	mov    ebx,eax
c001bc19:	58                   	pop    eax
c001bc1a:	5a                   	pop    edx
c001bc1b:	68 00 50 00 00       	push   0x5000
c001bc20:	53                   	push   ebx
c001bc21:	e8 44 43 ff ff       	call   c000ff6a <Pipe::Pipe(int)>
c001bc26:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc29:	e8 a6 51 ff ff       	call   c0010dd4 <UnixFile::getFileDescriptor()>
c001bc2e:	89 07                	mov    DWORD PTR [edi],eax
c001bc30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc33:	e8 9c 51 ff ff       	call   c0010dd4 <UnixFile::getFileDescriptor()>
c001bc38:	83 c4 10             	add    esp,0x10
c001bc3b:	89 06                	mov    DWORD PTR [esi],eax
c001bc3d:	31 d2                	xor    edx,edx
c001bc3f:	5b                   	pop    ebx
c001bc40:	31 c0                	xor    eax,eax
c001bc42:	5e                   	pop    esi
c001bc43:	5f                   	pop    edi
c001bc44:	c3                   	ret    

c001bc45 <sysGetUnixTime(regs*)>:
c001bc45:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c001bc4a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bc50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bc54:	e9 1b 7a ff ff       	jmp    c0013674 <Clock::timeInSecondsLocal()>

c001bc59 <string_ends_with(char const*, char const*)>:
c001bc59:	57                   	push   edi
c001bc5a:	56                   	push   esi
c001bc5b:	53                   	push   ebx
c001bc5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc60:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bc64:	83 ec 0c             	sub    esp,0xc
c001bc67:	53                   	push   ebx
c001bc68:	e8 ff 4a fe ff       	call   c000076c <strlen>
c001bc6d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bc70:	89 c6                	mov    esi,eax
c001bc72:	e8 f5 4a fe ff       	call   c000076c <strlen>
c001bc77:	83 c4 10             	add    esp,0x10
c001bc7a:	39 c6                	cmp    esi,eax
c001bc7c:	7d 06                	jge    c001bc84 <string_ends_with(char const*, char const*)+0x2b>
c001bc7e:	5b                   	pop    ebx
c001bc7f:	31 c0                	xor    eax,eax
c001bc81:	5e                   	pop    esi
c001bc82:	5f                   	pop    edi
c001bc83:	c3                   	ret    
c001bc84:	83 ec 08             	sub    esp,0x8
c001bc87:	29 c6                	sub    esi,eax
c001bc89:	57                   	push   edi
c001bc8a:	01 f3                	add    ebx,esi
c001bc8c:	53                   	push   ebx
c001bc8d:	e8 06 4c fe ff       	call   c0000898 <strcmp>
c001bc92:	83 c4 10             	add    esp,0x10
c001bc95:	85 c0                	test   eax,eax
c001bc97:	5b                   	pop    ebx
c001bc98:	0f 94 c0             	sete   al
c001bc9b:	5e                   	pop    esi
c001bc9c:	0f b6 c0             	movzx  eax,al
c001bc9f:	5f                   	pop    edi
c001bca0:	c3                   	ret    

c001bca1 <sysCallOpen(regs*)>:
c001bca1:	56                   	push   esi
c001bca2:	53                   	push   ebx
c001bca3:	81 ec 04 01 00 00    	sub    esp,0x104
c001bca9:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001bcb0:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001bcb3:	85 c9                	test   ecx,ecx
c001bcb5:	0f 84 ad 01 00 00    	je     c001be68 <sysCallOpen(regs*)+0x1c7>
c001bcbb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bcbe:	85 c0                	test   eax,eax
c001bcc0:	0f 84 a2 01 00 00    	je     c001be68 <sysCallOpen(regs*)+0x1c7>
c001bcc6:	52                   	push   edx
c001bcc7:	68 95 b9 02 c0       	push   0xc002b995
c001bccc:	50                   	push   eax
c001bccd:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001bcd1:	56                   	push   esi
c001bcd2:	e8 01 6e ff ff       	call   c0012ad8 <Fs::standardiseFiles(char*, char const*, char const*)>
c001bcd7:	89 34 24             	mov    DWORD PTR [esp],esi
c001bcda:	e8 8d 4a fe ff       	call   c000076c <strlen>
c001bcdf:	83 c4 10             	add    esp,0x10
c001bce2:	48                   	dec    eax
c001bce3:	74 1d                	je     c001bd02 <sysCallOpen(regs*)+0x61>
c001bce5:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001bce8:	eb 0f                	jmp    c001bcf9 <sysCallOpen(regs*)+0x58>
c001bcea:	80 fa 3a             	cmp    dl,0x3a
c001bced:	74 0f                	je     c001bcfe <sysCallOpen(regs*)+0x5d>
c001bcef:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001bcf3:	48                   	dec    eax
c001bcf4:	74 0c                	je     c001bd02 <sysCallOpen(regs*)+0x61>
c001bcf6:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001bcf9:	80 fa 2e             	cmp    dl,0x2e
c001bcfc:	75 ec                	jne    c001bcea <sysCallOpen(regs*)+0x49>
c001bcfe:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001bd02:	83 ec 08             	sub    esp,0x8
c001bd05:	68 99 b9 02 c0       	push   0xc002b999
c001bd0a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd0d:	e8 47 ff ff ff       	call   c001bc59 <string_ends_with(char const*, char const*)>
c001bd12:	83 c4 10             	add    esp,0x10
c001bd15:	85 c0                	test   eax,eax
c001bd17:	74 1d                	je     c001bd36 <sysCallOpen(regs*)+0x95>
c001bd19:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bd1c:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001bd22:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bd29:	81 c4 04 01 00 00    	add    esp,0x104
c001bd2f:	31 c0                	xor    eax,eax
c001bd31:	31 d2                	xor    edx,edx
c001bd33:	5b                   	pop    ebx
c001bd34:	5e                   	pop    esi
c001bd35:	c3                   	ret    
c001bd36:	83 ec 08             	sub    esp,0x8
c001bd39:	68 9e b9 02 c0       	push   0xc002b99e
c001bd3e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd41:	e8 13 ff ff ff       	call   c001bc59 <string_ends_with(char const*, char const*)>
c001bd46:	83 c4 10             	add    esp,0x10
c001bd49:	85 c0                	test   eax,eax
c001bd4b:	75 cc                	jne    c001bd19 <sysCallOpen(regs*)+0x78>
c001bd4d:	83 ec 08             	sub    esp,0x8
c001bd50:	68 9a b9 02 c0       	push   0xc002b99a
c001bd55:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd58:	e8 3b 4b fe ff       	call   c0000898 <strcmp>
c001bd5d:	83 c4 10             	add    esp,0x10
c001bd60:	85 c0                	test   eax,eax
c001bd62:	74 b5                	je     c001bd19 <sysCallOpen(regs*)+0x78>
c001bd64:	83 ec 08             	sub    esp,0x8
c001bd67:	68 99 b9 02 c0       	push   0xc002b999
c001bd6c:	56                   	push   esi
c001bd6d:	e8 e7 fe ff ff       	call   c001bc59 <string_ends_with(char const*, char const*)>
c001bd72:	83 c4 10             	add    esp,0x10
c001bd75:	85 c0                	test   eax,eax
c001bd77:	75 a0                	jne    c001bd19 <sysCallOpen(regs*)+0x78>
c001bd79:	83 ec 08             	sub    esp,0x8
c001bd7c:	68 a3 b9 02 c0       	push   0xc002b9a3
c001bd81:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd84:	e8 d0 fe ff ff       	call   c001bc59 <string_ends_with(char const*, char const*)>
c001bd89:	83 c4 10             	add    esp,0x10
c001bd8c:	85 c0                	test   eax,eax
c001bd8e:	0f 85 e7 00 00 00    	jne    c001be7b <sysCallOpen(regs*)+0x1da>
c001bd94:	83 ec 08             	sub    esp,0x8
c001bd97:	68 a8 b9 02 c0       	push   0xc002b9a8
c001bd9c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd9f:	e8 b5 fe ff ff       	call   c001bc59 <string_ends_with(char const*, char const*)>
c001bda4:	83 c4 10             	add    esp,0x10
c001bda7:	85 c0                	test   eax,eax
c001bda9:	0f 85 cc 00 00 00    	jne    c001be7b <sysCallOpen(regs*)+0x1da>
c001bdaf:	83 ec 08             	sub    esp,0x8
c001bdb2:	68 a4 b9 02 c0       	push   0xc002b9a4
c001bdb7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bdba:	e8 d9 4a fe ff       	call   c0000898 <strcmp>
c001bdbf:	83 c4 10             	add    esp,0x10
c001bdc2:	85 c0                	test   eax,eax
c001bdc4:	0f 84 b1 00 00 00    	je     c001be7b <sysCallOpen(regs*)+0x1da>
c001bdca:	83 ec 08             	sub    esp,0x8
c001bdcd:	68 a3 b9 02 c0       	push   0xc002b9a3
c001bdd2:	56                   	push   esi
c001bdd3:	e8 81 fe ff ff       	call   c001bc59 <string_ends_with(char const*, char const*)>
c001bdd8:	83 c4 10             	add    esp,0x10
c001bddb:	85 c0                	test   eax,eax
c001bddd:	0f 85 98 00 00 00    	jne    c001be7b <sysCallOpen(regs*)+0x1da>
c001bde3:	83 ec 0c             	sub    esp,0xc
c001bde6:	68 14 01 00 00       	push   0x114
c001bdeb:	e8 a9 37 ff ff       	call   c000f599 <malloc>
c001bdf0:	83 c4 0c             	add    esp,0xc
c001bdf3:	89 c6                	mov    esi,eax
c001bdf5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdfa:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bdfd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001be00:	56                   	push   esi
c001be01:	e8 7c 6e ff ff       	call   c0012c82 <File::File(char const*, Process*)>
c001be06:	83 c4 10             	add    esp,0x10
c001be09:	85 f6                	test   esi,esi
c001be0b:	74 5b                	je     c001be68 <sysCallOpen(regs*)+0x1c7>
c001be0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001be10:	0f b6 c2             	movzx  eax,dl
c001be13:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001be16:	89 d0                	mov    eax,edx
c001be18:	83 e0 01             	and    eax,0x1
c001be1b:	f6 c2 02             	test   dl,0x2
c001be1e:	74 03                	je     c001be23 <sysCallOpen(regs*)+0x182>
c001be20:	83 c8 02             	or     eax,0x2
c001be23:	f6 c2 04             	test   dl,0x4
c001be26:	74 03                	je     c001be2b <sysCallOpen(regs*)+0x18a>
c001be28:	83 c8 04             	or     eax,0x4
c001be2b:	f6 c2 08             	test   dl,0x8
c001be2e:	74 03                	je     c001be33 <sysCallOpen(regs*)+0x192>
c001be30:	83 c8 0a             	or     eax,0xa
c001be33:	83 e2 10             	and    edx,0x10
c001be36:	74 03                	je     c001be3b <sysCallOpen(regs*)+0x19a>
c001be38:	83 c8 12             	or     eax,0x12
c001be3b:	83 ec 08             	sub    esp,0x8
c001be3e:	50                   	push   eax
c001be3f:	56                   	push   esi
c001be40:	e8 a1 6e ff ff       	call   c0012ce6 <File::open(FileOpenMode)>
c001be45:	83 c4 10             	add    esp,0x10
c001be48:	85 c0                	test   eax,eax
c001be4a:	75 1c                	jne    c001be68 <sysCallOpen(regs*)+0x1c7>
c001be4c:	83 ec 0c             	sub    esp,0xc
c001be4f:	56                   	push   esi
c001be50:	e8 7f 4f ff ff       	call   c0010dd4 <UnixFile::getFileDescriptor()>
c001be55:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001be58:	83 c4 10             	add    esp,0x10
c001be5b:	89 02                	mov    DWORD PTR [edx],eax
c001be5d:	c1 f8 1f             	sar    eax,0x1f
c001be60:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001be63:	e9 c1 fe ff ff       	jmp    c001bd29 <sysCallOpen(regs*)+0x88>
c001be68:	81 c4 04 01 00 00    	add    esp,0x104
c001be6e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be73:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be78:	5b                   	pop    ebx
c001be79:	5e                   	pop    esi
c001be7a:	c3                   	ret    
c001be7b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001be7e:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001be84:	e9 99 fe ff ff       	jmp    c001bd22 <sysCallOpen(regs*)+0x81>

c001be89 <Sys::loadSyscalls()>:
c001be89:	c7 05 60 05 03 c0 f6 b0 01 c0 	mov    DWORD PTR ds:0xc0030560,0xc001b0f6
c001be93:	c7 05 64 05 03 c0 ee ac 01 c0 	mov    DWORD PTR ds:0xc0030564,0xc001acee
c001be9d:	c7 05 68 05 03 c0 dc ae 01 c0 	mov    DWORD PTR ds:0xc0030568,0xc001aedc
c001bea7:	c7 05 6c 05 03 c0 2c b0 01 c0 	mov    DWORD PTR ds:0xc003056c,0xc001b02c
c001beb1:	c7 05 70 05 03 c0 74 ae 01 c0 	mov    DWORD PTR ds:0xc0030570,0xc001ae74
c001bebb:	c7 05 74 05 03 c0 25 ad 01 c0 	mov    DWORD PTR ds:0xc0030574,0xc001ad25
c001bec5:	c7 05 78 05 03 c0 06 ad 01 c0 	mov    DWORD PTR ds:0xc0030578,0xc001ad06
c001becf:	c7 05 7c 05 03 c0 31 af 01 c0 	mov    DWORD PTR ds:0xc003057c,0xc001af31
c001bed9:	c7 05 84 05 03 c0 bf b5 01 c0 	mov    DWORD PTR ds:0xc0030584,0xc001b5bf
c001bee3:	c7 05 80 05 03 c0 a1 bc 01 c0 	mov    DWORD PTR ds:0xc0030580,0xc001bca1
c001beed:	c7 05 88 05 03 c0 1f b6 01 c0 	mov    DWORD PTR ds:0xc0030588,0xc001b61f
c001bef7:	c7 05 8c 05 03 c0 02 b3 01 c0 	mov    DWORD PTR ds:0xc003058c,0xc001b302
c001bf01:	c7 05 90 05 03 c0 3c b1 01 c0 	mov    DWORD PTR ds:0xc0030590,0xc001b13c
c001bf0b:	c7 05 94 05 03 c0 41 b1 01 c0 	mov    DWORD PTR ds:0xc0030594,0xc001b141
c001bf15:	c7 05 98 05 03 c0 e8 b6 01 c0 	mov    DWORD PTR ds:0xc0030598,0xc001b6e8
c001bf1f:	c7 05 9c 05 03 c0 94 b6 01 c0 	mov    DWORD PTR ds:0xc003059c,0xc001b694
c001bf29:	c7 05 a0 05 03 c0 db b3 01 c0 	mov    DWORD PTR ds:0xc00305a0,0xc001b3db
c001bf33:	c7 05 a4 05 03 c0 32 b4 01 c0 	mov    DWORD PTR ds:0xc00305a4,0xc001b432
c001bf3d:	c7 05 a8 05 03 c0 9e b4 01 c0 	mov    DWORD PTR ds:0xc00305a8,0xc001b49e
c001bf47:	c7 05 ac 05 03 c0 46 b1 01 c0 	mov    DWORD PTR ds:0xc00305ac,0xc001b146
c001bf51:	c7 05 b0 05 03 c0 58 b7 01 c0 	mov    DWORD PTR ds:0xc00305b0,0xc001b758
c001bf5b:	c7 05 b4 05 03 c0 72 b7 01 c0 	mov    DWORD PTR ds:0xc00305b4,0xc001b772
c001bf65:	c7 05 b8 05 03 c0 72 b7 01 c0 	mov    DWORD PTR ds:0xc00305b8,0xc001b772
c001bf6f:	c7 05 bc 05 03 c0 a7 b7 01 c0 	mov    DWORD PTR ds:0xc00305bc,0xc001b7a7
c001bf79:	c7 05 c0 05 03 c0 0b b8 01 c0 	mov    DWORD PTR ds:0xc00305c0,0xc001b80b
c001bf83:	c7 05 c4 05 03 c0 50 b1 01 c0 	mov    DWORD PTR ds:0xc00305c4,0xc001b150
c001bf8d:	c7 05 c8 05 03 c0 6f b8 01 c0 	mov    DWORD PTR ds:0xc00305c8,0xc001b86f
c001bf97:	c7 05 cc 05 03 c0 bf b2 01 c0 	mov    DWORD PTR ds:0xc00305cc,0xc001b2bf
c001bfa1:	c7 05 d0 05 03 c0 bb b8 01 c0 	mov    DWORD PTR ds:0xc00305d0,0xc001b8bb
c001bfab:	c7 05 d4 05 03 c0 81 b3 01 c0 	mov    DWORD PTR ds:0xc00305d4,0xc001b381
c001bfb5:	c7 05 d8 05 03 c0 3e b9 01 c0 	mov    DWORD PTR ds:0xc00305d8,0xc001b93e
c001bfbf:	c7 05 dc 05 03 c0 10 b5 01 c0 	mov    DWORD PTR ds:0xc00305dc,0xc001b510
c001bfc9:	c7 05 e0 05 03 c0 65 b9 01 c0 	mov    DWORD PTR ds:0xc00305e0,0xc001b965
c001bfd3:	c7 05 e4 05 03 c0 cd b9 01 c0 	mov    DWORD PTR ds:0xc00305e4,0xc001b9cd
c001bfdd:	c7 05 e8 05 03 c0 7a ba 01 c0 	mov    DWORD PTR ds:0xc00305e8,0xc001ba7a
c001bfe7:	c7 05 ec 05 03 c0 60 b1 01 c0 	mov    DWORD PTR ds:0xc00305ec,0xc001b160
c001bff1:	c7 05 f0 05 03 c0 ca b1 01 c0 	mov    DWORD PTR ds:0xc00305f0,0xc001b1ca
c001bffb:	c7 05 f4 05 03 c0 10 b2 01 c0 	mov    DWORD PTR ds:0xc00305f4,0xc001b210
c001c005:	c7 05 f8 05 03 c0 8e bb 01 c0 	mov    DWORD PTR ds:0xc00305f8,0xc001bb8e
c001c00f:	c7 05 fc 05 03 c0 8d b7 01 c0 	mov    DWORD PTR ds:0xc00305fc,0xc001b78d
c001c019:	c7 05 00 06 03 c0 61 b2 01 c0 	mov    DWORD PTR ds:0xc0030600,0xc001b261
c001c023:	c7 05 04 06 03 c0 00 bc 01 c0 	mov    DWORD PTR ds:0xc0030604,0xc001bc00
c001c02d:	c7 05 08 06 03 c0 45 bc 01 c0 	mov    DWORD PTR ds:0xc0030608,0xc001bc45
c001c037:	c7 05 0c 06 03 c0 cc ad 01 c0 	mov    DWORD PTR ds:0xc003060c,0xc001adcc
c001c041:	c7 05 10 06 03 c0 4d af 01 c0 	mov    DWORD PTR ds:0xc0030610,0xc001af4d
c001c04b:	c7 05 14 06 03 c0 e2 af 01 c0 	mov    DWORD PTR ds:0xc0030614,0xc001afe2
c001c055:	c7 05 18 06 03 c0 b8 ac 01 c0 	mov    DWORD PTR ds:0xc0030618,0xc001acb8
c001c05f:	c7 05 1c 06 03 c0 94 b0 01 c0 	mov    DWORD PTR ds:0xc003061c,0xc001b094
c001c069:	c7 05 20 06 03 c0 31 ad 01 c0 	mov    DWORD PTR ds:0xc0030620,0xc001ad31
c001c073:	c7 05 24 06 03 c0 48 ad 01 c0 	mov    DWORD PTR ds:0xc0030624,0xc001ad48
c001c07d:	c3                   	ret    

c001c07e <Sys::systemCall(regs*, void*)>:
c001c07e:	53                   	push   ebx
c001c07f:	83 ec 08             	sub    esp,0x8
c001c082:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c086:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c089:	83 f8 7f             	cmp    eax,0x7f
c001c08c:	77 16                	ja     c001c0a4 <Sys::systemCall(regs*, void*)+0x26>
c001c08e:	8b 14 85 60 05 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfaa0]
c001c095:	85 d2                	test   edx,edx
c001c097:	74 0b                	je     c001c0a4 <Sys::systemCall(regs*, void*)+0x26>
c001c099:	83 ec 0c             	sub    esp,0xc
c001c09c:	53                   	push   ebx
c001c09d:	ff d2                	call   edx
c001c09f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c0a2:	eb 0d                	jmp    c001c0b1 <Sys::systemCall(regs*, void*)+0x33>
c001c0a4:	52                   	push   edx
c001c0a5:	52                   	push   edx
c001c0a6:	50                   	push   eax
c001c0a7:	68 ad b9 02 c0       	push   0xc002b9ad
c001c0ac:	e8 72 66 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c001c0b1:	83 c4 10             	add    esp,0x10
c001c0b4:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c0b9:	31 d2                	xor    edx,edx
c001c0bb:	83 c4 08             	add    esp,0x8
c001c0be:	5b                   	pop    ebx
c001c0bf:	c3                   	ret    

c001c0c0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c0c0:	55                   	push   ebp
c001c0c1:	57                   	push   edi
c001c0c2:	56                   	push   esi
c001c0c3:	53                   	push   ebx
c001c0c4:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c0ca:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c0d1:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c0d8:	85 c0                	test   eax,eax
c001c0da:	0f 95 c1             	setne  cl
c001c0dd:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c0e5:	0f 94 c2             	sete   dl
c001c0e8:	84 d1                	test   cl,dl
c001c0ea:	74 23                	je     c001c10f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c0ec:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c0f2:	74 1b                	je     c001c10f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c0f4:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c0fa:	89 da                	mov    edx,ebx
c001c0fc:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c102:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c108:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c10f:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001c116:	05 ff 0f 00 00       	add    eax,0xfff
c001c11b:	83 ec 0c             	sub    esp,0xc
c001c11e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c122:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001c128:	c1 e8 0c             	shr    eax,0xc
c001c12b:	89 fe                	mov    esi,edi
c001c12d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c131:	c1 ee 0c             	shr    esi,0xc
c001c134:	6a 01                	push   0x1
c001c136:	e8 e4 50 ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c001c13b:	89 c5                	mov    ebp,eax
c001c13d:	58                   	pop    eax
c001c13e:	5a                   	pop    edx
c001c13f:	56                   	push   esi
c001c140:	68 c1 b9 02 c0       	push   0xc002b9c1
c001c145:	e8 d9 65 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c001c14a:	59                   	pop    ecx
c001c14b:	58                   	pop    eax
c001c14c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c150:	68 d3 b9 02 c0       	push   0xc002b9d3
c001c155:	e8 c9 65 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c001c15a:	83 c4 10             	add    esp,0x10
c001c15d:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c163:	0f 86 31 01 00 00    	jbe    c001c29a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c169:	c1 e6 0c             	shl    esi,0xc
c001c16c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c16f:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c172:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c176:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c17d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c180:	01 df                	add    edi,ebx
c001c182:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c185:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c189:	0f 84 08 01 00 00    	je     c001c297 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c18f:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c195:	76 05                	jbe    c001c19c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c197:	bf 00 10 00 00       	mov    edi,0x1000
c001c19c:	83 ec 0c             	sub    esp,0xc
c001c19f:	31 d2                	xor    edx,edx
c001c1a1:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c1a8:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c1aa:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c1ae:	50                   	push   eax
c001c1af:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c1b3:	56                   	push   esi
c001c1b4:	52                   	push   edx
c001c1b5:	57                   	push   edi
c001c1b6:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c1bd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c1c0:	83 c4 20             	add    esp,0x20
c001c1c3:	85 c0                	test   eax,eax
c001c1c5:	74 0a                	je     c001c1d1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c1c7:	53                   	push   ebx
c001c1c8:	53                   	push   ebx
c001c1c9:	50                   	push   eax
c001c1ca:	68 e5 b9 02 c0       	push   0xc002b9e5
c001c1cf:	eb 0f                	jmp    c001c1e0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c1d1:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c1d5:	74 20                	je     c001c1f7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c1d7:	51                   	push   ecx
c001c1d8:	51                   	push   ecx
c001c1d9:	6a 00                	push   0x0
c001c1db:	68 10 ba 02 c0       	push   0xc002ba10
c001c1e0:	e8 3e 65 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c001c1e5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c1e8:	e8 cc 54 ff ff       	call   c00116b9 <Virt::freeKernelVirtualPages(unsigned long)>
c001c1ed:	83 c4 10             	add    esp,0x10
c001c1f0:	31 c0                	xor    eax,eax
c001c1f2:	e9 68 01 00 00       	jmp    c001c35f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c1f7:	fa                   	cli    
c001c1f8:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001c1fe:	e8 92 37 ff ff       	call   c000f995 <Phys::allocatePage()>
c001c203:	6a 07                	push   0x7
c001c205:	89 c7                	mov    edi,eax
c001c207:	55                   	push   ebp
c001c208:	50                   	push   eax
c001c209:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c20e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c211:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c217:	e8 14 58 ff ff       	call   c0011a30 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c21c:	83 c4 0c             	add    esp,0xc
c001c21f:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c226:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c22c:	6a 00                	push   0x0
c001c22e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c233:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c236:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c23c:	e8 49 56 ff ff       	call   c001188a <VAS::mapOtherVASIn(bool, VAS*)>
c001c241:	58                   	pop    eax
c001c242:	5a                   	pop    edx
c001c243:	68 07 0c 00 00       	push   0xc07
c001c248:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c24c:	57                   	push   edi
c001c24d:	89 ef                	mov    edi,ebp
c001c24f:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c256:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c25c:	6a 00                	push   0x0
c001c25e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c263:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c266:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c26c:	e8 7b 5b ff ff       	call   c0011dec <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c271:	b9 00 10 00 00       	mov    ecx,0x1000
c001c276:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c278:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001c27d:	83 c4 20             	add    esp,0x20
c001c280:	48                   	dec    eax
c001c281:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001c286:	85 c0                	test   eax,eax
c001c288:	75 01                	jne    c001c28b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c28a:	fb                   	sti    
c001c28b:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c292:	e9 df fe ff ff       	jmp    c001c176 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c297:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c29a:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c2a2:	0f 86 a9 00 00 00    	jbe    c001c351 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c2a8:	fa                   	cli    
c001c2a9:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001c2af:	51                   	push   ecx
c001c2b0:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c2b7:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c2bd:	6a 00                	push   0x0
c001c2bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2c4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2c7:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c2cd:	e8 b8 55 ff ff       	call   c001188a <VAS::mapOtherVASIn(bool, VAS*)>
c001c2d2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c2d6:	c1 e6 0c             	shl    esi,0xc
c001c2d9:	01 de                	add    esi,ebx
c001c2db:	83 c4 10             	add    esp,0x10
c001c2de:	39 de                	cmp    esi,ebx
c001c2e0:	74 61                	je     c001c343 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c2e2:	e8 ae 36 ff ff       	call   c000f995 <Phys::allocatePage()>
c001c2e7:	6a 07                	push   0x7
c001c2e9:	89 c7                	mov    edi,eax
c001c2eb:	55                   	push   ebp
c001c2ec:	50                   	push   eax
c001c2ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2f2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2f5:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c2fb:	e8 30 57 ff ff       	call   c0011a30 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c300:	58                   	pop    eax
c001c301:	5a                   	pop    edx
c001c302:	68 07 0c 00 00       	push   0xc07
c001c307:	53                   	push   ebx
c001c308:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c30e:	57                   	push   edi
c001c30f:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c316:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c31c:	6a 00                	push   0x0
c001c31e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c323:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c326:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c32c:	e8 bb 5a ff ff       	call   c0011dec <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c331:	83 c4 1c             	add    esp,0x1c
c001c334:	68 00 10 00 00       	push   0x1000
c001c339:	6a 00                	push   0x0
c001c33b:	55                   	push   ebp
c001c33c:	e8 0f 44 fe ff       	call   c0000750 <memset>
c001c341:	eb 98                	jmp    c001c2db <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c343:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001c348:	48                   	dec    eax
c001c349:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001c34e:	75 01                	jne    c001c351 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c350:	fb                   	sti    
c001c351:	83 ec 0c             	sub    esp,0xc
c001c354:	55                   	push   ebp
c001c355:	e8 5f 53 ff ff       	call   c00116b9 <Virt::freeKernelVirtualPages(unsigned long)>
c001c35a:	83 c4 10             	add    esp,0x10
c001c35d:	b0 01                	mov    al,0x1
c001c35f:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c365:	5b                   	pop    ebx
c001c366:	5e                   	pop    esi
c001c367:	5f                   	pop    edi
c001c368:	5d                   	pop    ebp
c001c369:	c3                   	ret    

c001c36a <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c36a:	55                   	push   ebp
c001c36b:	57                   	push   edi
c001c36c:	56                   	push   esi
c001c36d:	53                   	push   ebx
c001c36e:	83 ec 48             	sub    esp,0x48
c001c371:	68 14 01 00 00       	push   0x114
c001c376:	e8 1e 32 ff ff       	call   c000f599 <malloc>
c001c37b:	83 c4 0c             	add    esp,0xc
c001c37e:	89 c6                	mov    esi,eax
c001c380:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c384:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c388:	50                   	push   eax
c001c389:	e8 f4 68 ff ff       	call   c0012c82 <File::File(char const*, Process*)>
c001c38e:	58                   	pop    eax
c001c38f:	5a                   	pop    edx
c001c390:	6a 01                	push   0x1
c001c392:	56                   	push   esi
c001c393:	e8 4e 69 ff ff       	call   c0012ce6 <File::open(FileOpenMode)>
c001c398:	83 c4 10             	add    esp,0x10
c001c39b:	85 c0                	test   eax,eax
c001c39d:	0f 85 47 01 00 00    	jne    c001c4ea <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c3a3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c3ab:	83 ec 0c             	sub    esp,0xc
c001c3ae:	6a 34                	push   0x34
c001c3b0:	e8 e4 31 ff ff       	call   c000f599 <malloc>
c001c3b5:	89 c3                	mov    ebx,eax
c001c3b7:	58                   	pop    eax
c001c3b8:	8b 06                	mov    eax,DWORD PTR [esi]
c001c3ba:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c3be:	57                   	push   edi
c001c3bf:	53                   	push   ebx
c001c3c0:	6a 00                	push   0x0
c001c3c2:	6a 34                	push   0x34
c001c3c4:	56                   	push   esi
c001c3c5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c3c8:	83 c4 20             	add    esp,0x20
c001c3cb:	85 c0                	test   eax,eax
c001c3cd:	0f 85 17 01 00 00    	jne    c001c4ea <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c3d3:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c3d9:	0f 85 0b 01 00 00    	jne    c001c4ea <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c3df:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c3e2:	85 c0                	test   eax,eax
c001c3e4:	0f 84 00 01 00 00    	je     c001c4ea <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c3ea:	31 d2                	xor    edx,edx
c001c3ec:	55                   	push   ebp
c001c3ed:	52                   	push   edx
c001c3ee:	50                   	push   eax
c001c3ef:	56                   	push   esi
c001c3f0:	e8 af 69 ff ff       	call   c0012da4 <File::seek(unsigned long long)>
c001c3f5:	83 c4 10             	add    esp,0x10
c001c3f8:	85 c0                	test   eax,eax
c001c3fa:	0f 85 ea 00 00 00    	jne    c001c4ea <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c400:	83 ec 0c             	sub    esp,0xc
c001c403:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c406:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c40a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c40e:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c412:	0f af c2             	imul   eax,edx
c001c415:	50                   	push   eax
c001c416:	e8 7e 31 ff ff       	call   c000f599 <malloc>
c001c41b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c41d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c421:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c424:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c428:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c42c:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c430:	0f af c2             	imul   eax,edx
c001c433:	99                   	cdq    
c001c434:	52                   	push   edx
c001c435:	50                   	push   eax
c001c436:	56                   	push   esi
c001c437:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c43a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c43d:	83 c4 20             	add    esp,0x20
c001c440:	85 c0                	test   eax,eax
c001c442:	0f 84 a2 00 00 00    	je     c001c4ea <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c448:	31 d2                	xor    edx,edx
c001c44a:	51                   	push   ecx
c001c44b:	52                   	push   edx
c001c44c:	50                   	push   eax
c001c44d:	56                   	push   esi
c001c44e:	e8 51 69 ff ff       	call   c0012da4 <File::seek(unsigned long long)>
c001c453:	83 c4 10             	add    esp,0x10
c001c456:	85 c0                	test   eax,eax
c001c458:	0f 85 8c 00 00 00    	jne    c001c4ea <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c45e:	83 ec 0c             	sub    esp,0xc
c001c461:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c465:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c469:	31 ed                	xor    ebp,ebp
c001c46b:	0f af c2             	imul   eax,edx
c001c46e:	50                   	push   eax
c001c46f:	e8 25 31 ff ff       	call   c000f599 <malloc>
c001c474:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c476:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c47a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c47d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c481:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c485:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c489:	0f af c2             	imul   eax,edx
c001c48c:	99                   	cdq    
c001c48d:	52                   	push   edx
c001c48e:	50                   	push   eax
c001c48f:	56                   	push   esi
c001c490:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c493:	83 c4 20             	add    esp,0x20
c001c496:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c49e:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c4a2:	0f 86 80 00 00 00    	jbe    c001c528 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c4a8:	0f b7 fd             	movzx  edi,bp
c001c4ab:	c1 e7 05             	shl    edi,0x5
c001c4ae:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c4b2:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c4b5:	75 6b                	jne    c001c522 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c4b7:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c4ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c4be:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c4c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c4c5:	52                   	push   edx
c001c4c6:	31 d2                	xor    edx,edx
c001c4c8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c4cb:	52                   	push   edx
c001c4cc:	50                   	push   eax
c001c4cd:	56                   	push   esi
c001c4ce:	e8 d1 68 ff ff       	call   c0012da4 <File::seek(unsigned long long)>
c001c4d3:	83 c4 10             	add    esp,0x10
c001c4d6:	85 c0                	test   eax,eax
c001c4d8:	74 17                	je     c001c4f1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c4da:	83 ec 0c             	sub    esp,0xc
c001c4dd:	68 3c ba 02 c0       	push   0xc002ba3c
c001c4e2:	e8 3c 62 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c001c4e7:	83 c4 10             	add    esp,0x10
c001c4ea:	31 c0                	xor    eax,eax
c001c4ec:	e9 87 00 00 00       	jmp    c001c578 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c4f1:	83 ec 0c             	sub    esp,0xc
c001c4f4:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c4f7:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c4fa:	50                   	push   eax
c001c4fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c4ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c503:	56                   	push   esi
c001c504:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c508:	e8 b3 fb ff ff       	call   c001c0c0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c50d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c511:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c515:	83 c4 20             	add    esp,0x20
c001c518:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c51c:	73 04                	jae    c001c522 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c51e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c522:	45                   	inc    ebp
c001c523:	e9 76 ff ff ff       	jmp    c001c49e <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c528:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c52c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c530:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c534:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c53a:	83 ec 0c             	sub    esp,0xc
c001c53d:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c543:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c548:	05 00 10 00 00       	add    eax,0x1000
c001c54d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c550:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c554:	e8 50 30 ff ff       	call   c000f5a9 <free>
c001c559:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c55c:	e8 48 30 ff ff       	call   c000f5a9 <free>
c001c561:	58                   	pop    eax
c001c562:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c566:	e8 3e 30 ff ff       	call   c000f5a9 <free>
c001c56b:	89 34 24             	mov    DWORD PTR [esp],esi
c001c56e:	e8 d1 67 ff ff       	call   c0012d44 <File::close()>
c001c573:	83 c4 10             	add    esp,0x10
c001c576:	b0 01                	mov    al,0x1
c001c578:	83 c4 3c             	add    esp,0x3c
c001c57b:	5b                   	pop    ebx
c001c57c:	5e                   	pop    esi
c001c57d:	5f                   	pop    edi
c001c57e:	5d                   	pop    ebp
c001c57f:	c3                   	ret    

c001c580 <Thr::runtimeReferenceHelper()>:
c001c580:	83 ec 18             	sub    esp,0x18
c001c583:	68 44 ba 02 c0       	push   0xc002ba44
c001c588:	e8 96 61 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c001c58d:	fa                   	cli    
c001c58e:	83 c4 10             	add    esp,0x10
c001c591:	eb fe                	jmp    c001c591 <Thr::runtimeReferenceHelper()+0x11>

c001c593 <Thr::getAddressOfKernelSymbol(char const*)>:
c001c593:	57                   	push   edi
c001c594:	56                   	push   esi
c001c595:	53                   	push   ebx
c001c596:	31 db                	xor    ebx,ebx
c001c598:	39 1d 00 0f 03 c0    	cmp    DWORD PTR ds:0xc0030f00,ebx
c001c59e:	7e 3c                	jle    c001c5dc <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c5a0:	8b 34 9d 80 0e 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcf180]
c001c5a7:	31 ff                	xor    edi,edi
c001c5a9:	39 3c 9d 80 0d 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcf280],edi
c001c5b0:	7e 27                	jle    c001c5d9 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c5b2:	50                   	push   eax
c001c5b3:	50                   	push   eax
c001c5b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c5b8:	8b 06                	mov    eax,DWORD PTR [esi]
c001c5ba:	03 04 9d 00 0e 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcf200]
c001c5c1:	50                   	push   eax
c001c5c2:	e8 d1 42 fe ff       	call   c0000898 <strcmp>
c001c5c7:	83 c4 10             	add    esp,0x10
c001c5ca:	85 c0                	test   eax,eax
c001c5cc:	75 05                	jne    c001c5d3 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c5ce:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c5d1:	eb 0b                	jmp    c001c5de <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c5d3:	83 c6 10             	add    esi,0x10
c001c5d6:	47                   	inc    edi
c001c5d7:	eb d0                	jmp    c001c5a9 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c5d9:	43                   	inc    ebx
c001c5da:	eb bc                	jmp    c001c598 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c5dc:	31 c0                	xor    eax,eax
c001c5de:	5b                   	pop    ebx
c001c5df:	5e                   	pop    esi
c001c5e0:	5f                   	pop    edi
c001c5e1:	c3                   	ret    

c001c5e2 <Thr::loadKernelSymbolTable(char const*)>:
c001c5e2:	55                   	push   ebp
c001c5e3:	57                   	push   edi
c001c5e4:	56                   	push   esi
c001c5e5:	53                   	push   ebx
c001c5e6:	83 ec 68             	sub    esp,0x68
c001c5e9:	8b 35 50 0f 03 c0    	mov    esi,DWORD PTR ds:0xc0030f50
c001c5ef:	68 14 01 00 00       	push   0x114
c001c5f4:	e8 a0 2f ff ff       	call   c000f599 <malloc>
c001c5f9:	83 c4 0c             	add    esp,0xc
c001c5fc:	89 c3                	mov    ebx,eax
c001c5fe:	56                   	push   esi
c001c5ff:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c603:	50                   	push   eax
c001c604:	e8 79 66 ff ff       	call   c0012c82 <File::File(char const*, Process*)>
c001c609:	5e                   	pop    esi
c001c60a:	5f                   	pop    edi
c001c60b:	6a 01                	push   0x1
c001c60d:	53                   	push   ebx
c001c60e:	e8 d3 66 ff ff       	call   c0012ce6 <File::open(FileOpenMode)>
c001c613:	83 c4 10             	add    esp,0x10
c001c616:	85 c0                	test   eax,eax
c001c618:	74 0a                	je     c001c624 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c61a:	83 ec 0c             	sub    esp,0xc
c001c61d:	68 66 ba 02 c0       	push   0xc002ba66
c001c622:	eb 34                	jmp    c001c658 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c624:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c62c:	83 ec 0c             	sub    esp,0xc
c001c62f:	6a 34                	push   0x34
c001c631:	e8 63 2f ff ff       	call   c000f599 <malloc>
c001c636:	59                   	pop    ecx
c001c637:	89 c7                	mov    edi,eax
c001c639:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c63d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c63f:	56                   	push   esi
c001c640:	57                   	push   edi
c001c641:	6a 00                	push   0x0
c001c643:	6a 34                	push   0x34
c001c645:	53                   	push   ebx
c001c646:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c649:	83 c4 20             	add    esp,0x20
c001c64c:	85 c0                	test   eax,eax
c001c64e:	74 17                	je     c001c667 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c650:	83 ec 0c             	sub    esp,0xc
c001c653:	68 7d ba 02 c0       	push   0xc002ba7d
c001c658:	e8 32 d8 ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c001c65d:	83 c4 10             	add    esp,0x10
c001c660:	31 c0                	xor    eax,eax
c001c662:	e9 31 02 00 00       	jmp    c001c898 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c667:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c66d:	75 e1                	jne    c001c650 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c66f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c672:	85 c0                	test   eax,eax
c001c674:	74 da                	je     c001c650 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c676:	52                   	push   edx
c001c677:	31 d2                	xor    edx,edx
c001c679:	52                   	push   edx
c001c67a:	50                   	push   eax
c001c67b:	53                   	push   ebx
c001c67c:	e8 23 67 ff ff       	call   c0012da4 <File::seek(unsigned long long)>
c001c681:	83 c4 10             	add    esp,0x10
c001c684:	85 c0                	test   eax,eax
c001c686:	75 c8                	jne    c001c650 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c688:	83 ec 0c             	sub    esp,0xc
c001c68b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c68f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c693:	31 ed                	xor    ebp,ebp
c001c695:	0f af c2             	imul   eax,edx
c001c698:	50                   	push   eax
c001c699:	e8 fb 2e ff ff       	call   c000f599 <malloc>
c001c69e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c6a0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c6a4:	89 34 24             	mov    DWORD PTR [esp],esi
c001c6a7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c6ab:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c6af:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c6b3:	0f af c2             	imul   eax,edx
c001c6b6:	99                   	cdq    
c001c6b7:	52                   	push   edx
c001c6b8:	50                   	push   eax
c001c6b9:	53                   	push   ebx
c001c6ba:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c6bd:	83 c4 20             	add    esp,0x20
c001c6c0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c6c8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c6d0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c6d8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c6e0:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c6e4:	0f 86 aa 00 00 00    	jbe    c001c794 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001c6ea:	0f b7 f5             	movzx  esi,bp
c001c6ed:	6b f6 28             	imul   esi,esi,0x28
c001c6f0:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c6f4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c6f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c6fb:	50                   	push   eax
c001c6fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c700:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c704:	8b 16                	mov    edx,DWORD PTR [esi]
c001c706:	6b c0 28             	imul   eax,eax,0x28
c001c709:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c70d:	89 d0                	mov    eax,edx
c001c70f:	31 d2                	xor    edx,edx
c001c711:	52                   	push   edx
c001c712:	50                   	push   eax
c001c713:	53                   	push   ebx
c001c714:	e8 8b 66 ff ff       	call   c0012da4 <File::seek(unsigned long long)>
c001c719:	83 c4 0c             	add    esp,0xc
c001c71c:	6a 20                	push   0x20
c001c71e:	6a 00                	push   0x0
c001c720:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c724:	52                   	push   edx
c001c725:	e8 26 40 fe ff       	call   c0000750 <memset>
c001c72a:	58                   	pop    eax
c001c72b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c72d:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c731:	51                   	push   ecx
c001c732:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c736:	52                   	push   edx
c001c737:	6a 00                	push   0x0
c001c739:	6a 1f                	push   0x1f
c001c73b:	53                   	push   ebx
c001c73c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c73f:	83 c4 18             	add    esp,0x18
c001c742:	68 94 ba 02 c0       	push   0xc002ba94
c001c747:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c74b:	52                   	push   edx
c001c74c:	e8 47 41 fe ff       	call   c0000898 <strcmp>
c001c751:	83 c4 10             	add    esp,0x10
c001c754:	85 c0                	test   eax,eax
c001c756:	75 0f                	jne    c001c767 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001c758:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c75b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c75f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c763:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c767:	50                   	push   eax
c001c768:	50                   	push   eax
c001c769:	68 9c ba 02 c0       	push   0xc002ba9c
c001c76e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c772:	50                   	push   eax
c001c773:	e8 20 41 fe ff       	call   c0000898 <strcmp>
c001c778:	83 c4 10             	add    esp,0x10
c001c77b:	85 c0                	test   eax,eax
c001c77d:	75 0f                	jne    c001c78e <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001c77f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c782:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c786:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c78a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c78e:	45                   	inc    ebp
c001c78f:	e9 4c ff ff ff       	jmp    c001c6e0 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001c794:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c799:	75 10                	jne    c001c7ab <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001c79b:	83 ec 0c             	sub    esp,0xc
c001c79e:	68 a4 ba 02 c0       	push   0xc002baa4
c001c7a3:	e8 e7 d6 ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c001c7a8:	83 c4 10             	add    esp,0x10
c001c7ab:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c7b0:	75 10                	jne    c001c7c2 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001c7b2:	83 ec 0c             	sub    esp,0xc
c001c7b5:	68 a4 ba 02 c0       	push   0xc002baa4
c001c7ba:	e8 d0 d6 ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c001c7bf:	83 c4 10             	add    esp,0x10
c001c7c2:	31 d2                	xor    edx,edx
c001c7c4:	50                   	push   eax
c001c7c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7c9:	52                   	push   edx
c001c7ca:	50                   	push   eax
c001c7cb:	53                   	push   ebx
c001c7cc:	e8 d3 65 ff ff       	call   c0012da4 <File::seek(unsigned long long)>
c001c7d1:	5a                   	pop    edx
c001c7d2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c7d6:	e8 be 2d ff ff       	call   c000f599 <malloc>
c001c7db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c7df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c7e3:	31 c9                	xor    ecx,ecx
c001c7e5:	5e                   	pop    esi
c001c7e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c7e8:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c7ec:	55                   	push   ebp
c001c7ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7f1:	51                   	push   ecx
c001c7f2:	52                   	push   edx
c001c7f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c7f7:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c7fb:	53                   	push   ebx
c001c7fc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c7ff:	83 c4 14             	add    esp,0x14
c001c802:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c806:	e8 8e 2d ff ff       	call   c000f599 <malloc>
c001c80b:	89 c6                	mov    esi,eax
c001c80d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c80f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c812:	56                   	push   esi
c001c813:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c817:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c81b:	51                   	push   ecx
c001c81c:	52                   	push   edx
c001c81d:	53                   	push   ebx
c001c81e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c821:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c825:	8b 15 00 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f00
c001c82b:	83 c4 1c             	add    esp,0x1c
c001c82e:	c1 e8 04             	shr    eax,0x4
c001c831:	89 04 95 80 0d 03 c0 	mov    DWORD PTR [edx*4-0x3ffcf280],eax
c001c838:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c83c:	31 d2                	xor    edx,edx
c001c83e:	52                   	push   edx
c001c83f:	50                   	push   eax
c001c840:	53                   	push   ebx
c001c841:	e8 5e 65 ff ff       	call   c0012da4 <File::seek(unsigned long long)>
c001c846:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c848:	31 d2                	xor    edx,edx
c001c84a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c84d:	56                   	push   esi
c001c84e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c852:	52                   	push   edx
c001c853:	50                   	push   eax
c001c854:	53                   	push   ebx
c001c855:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c858:	83 c4 14             	add    esp,0x14
c001c85b:	53                   	push   ebx
c001c85c:	e8 e3 64 ff ff       	call   c0012d44 <File::close()>
c001c861:	5d                   	pop    ebp
c001c862:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c866:	e8 3e 2d ff ff       	call   c000f5a9 <free>
c001c86b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c86e:	e8 36 2d ff ff       	call   c000f5a9 <free>
c001c873:	a1 00 0f 03 c0       	mov    eax,ds:0xc0030f00
c001c878:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c87c:	8d 50 01             	lea    edx,[eax+0x1]
c001c87f:	89 0c 85 80 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf180],ecx
c001c886:	89 34 85 00 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf200],esi
c001c88d:	89 15 00 0f 03 c0    	mov    DWORD PTR ds:0xc0030f00,edx
c001c893:	83 c4 10             	add    esp,0x10
c001c896:	b0 01                	mov    al,0x1
c001c898:	83 c4 5c             	add    esp,0x5c
c001c89b:	5b                   	pop    ebx
c001c89c:	5e                   	pop    esi
c001c89d:	5f                   	pop    edi
c001c89e:	5d                   	pop    ebp
c001c89f:	c3                   	ret    

c001c8a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c8a0:	55                   	push   ebp
c001c8a1:	57                   	push   edi
c001c8a2:	56                   	push   esi
c001c8a3:	53                   	push   ebx
c001c8a4:	81 ec 68 03 00 00    	sub    esp,0x368
c001c8aa:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c8b1:	8b 1d 50 0f 03 c0    	mov    ebx,DWORD PTR ds:0xc0030f50
c001c8b7:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c8bb:	68 14 01 00 00       	push   0x114
c001c8c0:	e8 d4 2c ff ff       	call   c000f599 <malloc>
c001c8c5:	83 c4 0c             	add    esp,0xc
c001c8c8:	89 c5                	mov    ebp,eax
c001c8ca:	53                   	push   ebx
c001c8cb:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c8d2:	50                   	push   eax
c001c8d3:	e8 aa 63 ff ff       	call   c0012c82 <File::File(char const*, Process*)>
c001c8d8:	5e                   	pop    esi
c001c8d9:	5f                   	pop    edi
c001c8da:	6a 01                	push   0x1
c001c8dc:	55                   	push   ebp
c001c8dd:	e8 04 64 ff ff       	call   c0012ce6 <File::open(FileOpenMode)>
c001c8e2:	83 c4 10             	add    esp,0x10
c001c8e5:	85 c0                	test   eax,eax
c001c8e7:	0f 85 a7 06 00 00    	jne    c001cf94 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8ed:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c8f5:	83 ec 0c             	sub    esp,0xc
c001c8f8:	6a 34                	push   0x34
c001c8fa:	e8 9a 2c ff ff       	call   c000f599 <malloc>
c001c8ff:	5b                   	pop    ebx
c001c900:	89 c7                	mov    edi,eax
c001c902:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c906:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c909:	53                   	push   ebx
c001c90a:	57                   	push   edi
c001c90b:	6a 00                	push   0x0
c001c90d:	6a 34                	push   0x34
c001c90f:	55                   	push   ebp
c001c910:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c913:	83 c4 20             	add    esp,0x20
c001c916:	85 c0                	test   eax,eax
c001c918:	0f 85 76 06 00 00    	jne    c001cf94 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c91e:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c924:	0f 85 6a 06 00 00    	jne    c001cf94 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c92a:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c92d:	85 c0                	test   eax,eax
c001c92f:	0f 84 5f 06 00 00    	je     c001cf94 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c935:	31 d2                	xor    edx,edx
c001c937:	51                   	push   ecx
c001c938:	52                   	push   edx
c001c939:	50                   	push   eax
c001c93a:	55                   	push   ebp
c001c93b:	e8 64 64 ff ff       	call   c0012da4 <File::seek(unsigned long long)>
c001c940:	83 c4 10             	add    esp,0x10
c001c943:	85 c0                	test   eax,eax
c001c945:	0f 85 49 06 00 00    	jne    c001cf94 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c94b:	83 ec 0c             	sub    esp,0xc
c001c94e:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001c951:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c955:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c959:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c95d:	0f af c2             	imul   eax,edx
c001c960:	50                   	push   eax
c001c961:	e8 33 2c ff ff       	call   c000f599 <malloc>
c001c966:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c969:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c96d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c970:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c974:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c978:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c97c:	0f af c2             	imul   eax,edx
c001c97f:	99                   	cdq    
c001c980:	52                   	push   edx
c001c981:	50                   	push   eax
c001c982:	55                   	push   ebp
c001c983:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c986:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c989:	83 c4 20             	add    esp,0x20
c001c98c:	85 c0                	test   eax,eax
c001c98e:	0f 84 00 06 00 00    	je     c001cf94 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c994:	52                   	push   edx
c001c995:	31 d2                	xor    edx,edx
c001c997:	52                   	push   edx
c001c998:	50                   	push   eax
c001c999:	55                   	push   ebp
c001c99a:	e8 05 64 ff ff       	call   c0012da4 <File::seek(unsigned long long)>
c001c99f:	83 c4 10             	add    esp,0x10
c001c9a2:	85 c0                	test   eax,eax
c001c9a4:	0f 85 ea 05 00 00    	jne    c001cf94 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c9aa:	83 ec 0c             	sub    esp,0xc
c001c9ad:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c9b1:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c9b5:	31 f6                	xor    esi,esi
c001c9b7:	0f af c2             	imul   eax,edx
c001c9ba:	50                   	push   eax
c001c9bb:	e8 d9 2b ff ff       	call   c000f599 <malloc>
c001c9c0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c9c3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c9c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c9ca:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c9ce:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c9d2:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c9d6:	0f af c2             	imul   eax,edx
c001c9d9:	99                   	cdq    
c001c9da:	52                   	push   edx
c001c9db:	50                   	push   eax
c001c9dc:	55                   	push   ebp
c001c9dd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c9e0:	83 c4 20             	add    esp,0x20
c001c9e3:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c9e7:	0f 86 8a 00 00 00    	jbe    c001ca77 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c9ed:	0f b7 de             	movzx  ebx,si
c001c9f0:	c1 e3 05             	shl    ebx,0x5
c001c9f3:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001c9f7:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c9fa:	75 75                	jne    c001ca71 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c9fc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c9ff:	31 d2                	xor    edx,edx
c001ca01:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ca05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ca08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ca0c:	50                   	push   eax
c001ca0d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001ca10:	52                   	push   edx
c001ca11:	50                   	push   eax
c001ca12:	55                   	push   ebp
c001ca13:	e8 8c 63 ff ff       	call   c0012da4 <File::seek(unsigned long long)>
c001ca18:	83 c4 10             	add    esp,0x10
c001ca1b:	85 c0                	test   eax,eax
c001ca1d:	0f 85 71 05 00 00    	jne    c001cf94 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ca23:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001ca2a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ca2d:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001ca31:	31 d2                	xor    edx,edx
c001ca33:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001ca37:	83 ec 0c             	sub    esp,0xc
c001ca3a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ca3e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ca45:	50                   	push   eax
c001ca46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ca4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca4e:	52                   	push   edx
c001ca4f:	50                   	push   eax
c001ca50:	55                   	push   ebp
c001ca51:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca54:	83 c4 1c             	add    esp,0x1c
c001ca57:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ca5a:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001ca5d:	50                   	push   eax
c001ca5e:	6a 00                	push   0x0
c001ca60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca64:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001ca68:	50                   	push   eax
c001ca69:	e8 e2 3c fe ff       	call   c0000750 <memset>
c001ca6e:	83 c4 10             	add    esp,0x10
c001ca71:	46                   	inc    esi
c001ca72:	e9 6c ff ff ff       	jmp    c001c9e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001ca77:	53                   	push   ebx
c001ca78:	31 db                	xor    ebx,ebx
c001ca7a:	68 00 01 00 00       	push   0x100
c001ca7f:	6a 00                	push   0x0
c001ca81:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001ca85:	50                   	push   eax
c001ca86:	e8 c5 3c fe ff       	call   c0000750 <memset>
c001ca8b:	83 c4 0c             	add    esp,0xc
c001ca8e:	68 00 01 00 00       	push   0x100
c001ca93:	6a 00                	push   0x0
c001ca95:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001ca9c:	50                   	push   eax
c001ca9d:	e8 ae 3c fe ff       	call   c0000750 <memset>
c001caa2:	83 c4 10             	add    esp,0x10
c001caa5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001caad:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cab5:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001cabd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cac5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001cacd:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001cad1:	0f 86 30 01 00 00    	jbe    c001cc07 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001cad7:	0f b7 f3             	movzx  esi,bx
c001cada:	6b f6 28             	imul   esi,esi,0x28
c001cadd:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cae1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cae4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cae8:	52                   	push   edx
c001cae9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001caed:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001caf1:	8b 06                	mov    eax,DWORD PTR [esi]
c001caf3:	6b d2 28             	imul   edx,edx,0x28
c001caf6:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001cafa:	31 d2                	xor    edx,edx
c001cafc:	52                   	push   edx
c001cafd:	50                   	push   eax
c001cafe:	55                   	push   ebp
c001caff:	e8 a0 62 ff ff       	call   c0012da4 <File::seek(unsigned long long)>
c001cb04:	83 c4 0c             	add    esp,0xc
c001cb07:	6a 20                	push   0x20
c001cb09:	6a 00                	push   0x0
c001cb0b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cb12:	51                   	push   ecx
c001cb13:	e8 38 3c fe ff       	call   c0000750 <memset>
c001cb18:	59                   	pop    ecx
c001cb19:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cb1c:	8d 54 24 58          	lea    edx,[esp+0x58]
c001cb20:	52                   	push   edx
c001cb21:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001cb28:	51                   	push   ecx
c001cb29:	6a 00                	push   0x0
c001cb2b:	6a 1f                	push   0x1f
c001cb2d:	55                   	push   ebp
c001cb2e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb31:	83 c4 1c             	add    esp,0x1c
c001cb34:	6a 09                	push   0x9
c001cb36:	68 be ba 02 c0       	push   0xc002babe
c001cb3b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cb42:	51                   	push   ecx
c001cb43:	e8 04 3b fe ff       	call   c000064c <memcmp>
c001cb48:	83 c4 10             	add    esp,0x10
c001cb4b:	85 c0                	test   eax,eax
c001cb4d:	75 21                	jne    c001cb70 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001cb4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb53:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cb57:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cb5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cb5f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb62:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cb69:	89 d0                	mov    eax,edx
c001cb6b:	40                   	inc    eax
c001cb6c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cb70:	50                   	push   eax
c001cb71:	6a 09                	push   0x9
c001cb73:	68 c8 ba 02 c0       	push   0xc002bac8
c001cb78:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb7f:	50                   	push   eax
c001cb80:	e8 c7 3a fe ff       	call   c000064c <memcmp>
c001cb85:	83 c4 10             	add    esp,0x10
c001cb88:	85 c0                	test   eax,eax
c001cb8a:	75 21                	jne    c001cbad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001cb8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb90:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cb94:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cb98:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cb9c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb9f:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cba6:	89 d0                	mov    eax,edx
c001cba8:	40                   	inc    eax
c001cba9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cbad:	50                   	push   eax
c001cbae:	50                   	push   eax
c001cbaf:	68 94 ba 02 c0       	push   0xc002ba94
c001cbb4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cbbb:	50                   	push   eax
c001cbbc:	e8 d7 3c fe ff       	call   c0000898 <strcmp>
c001cbc1:	83 c4 10             	add    esp,0x10
c001cbc4:	85 c0                	test   eax,eax
c001cbc6:	75 0f                	jne    c001cbd7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001cbc8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cbcb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cbcf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbd3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cbd7:	50                   	push   eax
c001cbd8:	50                   	push   eax
c001cbd9:	68 9c ba 02 c0       	push   0xc002ba9c
c001cbde:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cbe5:	50                   	push   eax
c001cbe6:	e8 ad 3c fe ff       	call   c0000898 <strcmp>
c001cbeb:	83 c4 10             	add    esp,0x10
c001cbee:	85 c0                	test   eax,eax
c001cbf0:	75 0f                	jne    c001cc01 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001cbf2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cbf5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cbf9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbfd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001cc01:	43                   	inc    ebx
c001cc02:	e9 c6 fe ff ff       	jmp    c001cacd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001cc07:	31 d2                	xor    edx,edx
c001cc09:	50                   	push   eax
c001cc0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cc0e:	52                   	push   edx
c001cc0f:	50                   	push   eax
c001cc10:	55                   	push   ebp
c001cc11:	e8 8e 61 ff ff       	call   c0012da4 <File::seek(unsigned long long)>
c001cc16:	58                   	pop    eax
c001cc17:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cc1b:	e8 79 29 ff ff       	call   c000f599 <malloc>
c001cc20:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cc23:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001cc27:	31 d2                	xor    edx,edx
c001cc29:	58                   	pop    eax
c001cc2a:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cc2e:	53                   	push   ebx
c001cc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001cc33:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cc37:	52                   	push   edx
c001cc38:	50                   	push   eax
c001cc39:	55                   	push   ebp
c001cc3a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc3d:	83 c4 14             	add    esp,0x14
c001cc40:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc44:	e8 50 29 ff ff       	call   c000f599 <malloc>
c001cc49:	31 d2                	xor    edx,edx
c001cc4b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cc4f:	83 c4 0c             	add    esp,0xc
c001cc52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cc56:	52                   	push   edx
c001cc57:	50                   	push   eax
c001cc58:	55                   	push   ebp
c001cc59:	e8 46 61 ff ff       	call   c0012da4 <File::seek(unsigned long long)>
c001cc5e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cc61:	31 d2                	xor    edx,edx
c001cc63:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc66:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cc6a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cc6e:	52                   	push   edx
c001cc6f:	50                   	push   eax
c001cc70:	55                   	push   ebp
c001cc71:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc74:	83 c4 20             	add    esp,0x20
c001cc77:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cc7f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cc83:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001cc87:	0f 84 0b 03 00 00    	je     c001cf98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001cc8d:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001cc94:	31 d2                	xor    edx,edx
c001cc96:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc9a:	c1 e8 03             	shr    eax,0x3
c001cc9d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001cca1:	51                   	push   ecx
c001cca2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cca6:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001ccaa:	52                   	push   edx
c001ccab:	50                   	push   eax
c001ccac:	55                   	push   ebp
c001ccad:	e8 f2 60 ff ff       	call   c0012da4 <File::seek(unsigned long long)>
c001ccb2:	5b                   	pop    ebx
c001ccb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ccb7:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001ccbe:	e8 d6 28 ff ff       	call   c000f599 <malloc>
c001ccc3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ccc6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ccca:	31 d2                	xor    edx,edx
c001cccc:	5e                   	pop    esi
c001cccd:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ccd1:	50                   	push   eax
c001ccd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccd6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ccda:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001cce1:	52                   	push   edx
c001cce2:	50                   	push   eax
c001cce3:	55                   	push   ebp
c001cce4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cce7:	83 c4 20             	add    esp,0x20
c001ccea:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ccf2:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001ccf6:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001ccfa:	0f 8d 7c 02 00 00    	jge    c001cf7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001cd00:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cd04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cd08:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001cd0d:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001cd10:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001cd14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cd18:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001cd1c:	89 d8                	mov    eax,ebx
c001cd1e:	c1 e8 08             	shr    eax,0x8
c001cd21:	89 c6                	mov    esi,eax
c001cd23:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001cd27:	c1 e6 04             	shl    esi,0x4
c001cd2a:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001cd2e:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001cd31:	85 d2                	test   edx,edx
c001cd33:	0f 85 bf 00 00 00    	jne    c001cdf8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cd39:	83 ec 0c             	sub    esp,0xc
c001cd3c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd40:	03 06                	add    eax,DWORD PTR [esi]
c001cd42:	50                   	push   eax
c001cd43:	e8 4b f8 ff ff       	call   c001c593 <Thr::getAddressOfKernelSymbol(char const*)>
c001cd48:	83 c4 10             	add    esp,0x10
c001cd4b:	89 c2                	mov    edx,eax
c001cd4d:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001cd52:	85 c0                	test   eax,eax
c001cd54:	0f 85 9e 00 00 00    	jne    c001cdf8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cd5a:	83 ec 0c             	sub    esp,0xc
c001cd5d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd61:	03 06                	add    eax,DWORD PTR [esi]
c001cd63:	50                   	push   eax
c001cd64:	e8 d6 17 ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001cd69:	83 c4 10             	add    esp,0x10
c001cd6c:	89 c2                	mov    edx,eax
c001cd6e:	85 c0                	test   eax,eax
c001cd70:	0f 85 82 00 00 00    	jne    c001cdf8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cd76:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001cd7a:	50                   	push   eax
c001cd7b:	50                   	push   eax
c001cd7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd80:	03 06                	add    eax,DWORD PTR [esi]
c001cd82:	50                   	push   eax
c001cd83:	68 d2 ba 02 c0       	push   0xc002bad2
c001cd88:	e8 96 59 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c001cd8d:	58                   	pop    eax
c001cd8e:	5a                   	pop    edx
c001cd8f:	68 ec ba 02 c0       	push   0xc002baec
c001cd94:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd9b:	50                   	push   eax
c001cd9c:	e8 6b 3a fe ff       	call   c000080c <strcpy>
c001cda1:	59                   	pop    ecx
c001cda2:	58                   	pop    eax
c001cda3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cda7:	03 06                	add    eax,DWORD PTR [esi]
c001cda9:	50                   	push   eax
c001cdaa:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cdb1:	50                   	push   eax
c001cdb2:	e8 95 3b fe ff       	call   c000094c <strcat>
c001cdb7:	58                   	pop    eax
c001cdb8:	5a                   	pop    edx
c001cdb9:	68 82 bb 02 c0       	push   0xc002bb82
c001cdbe:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cdc5:	50                   	push   eax
c001cdc6:	e8 81 3b fe ff       	call   c000094c <strcat>
c001cdcb:	83 c4 10             	add    esp,0x10
c001cdce:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cdd3:	0f 84 5d 01 00 00    	je     c001cf36 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cdd9:	83 ec 0c             	sub    esp,0xc
c001cddc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cde3:	50                   	push   eax
c001cde4:	e8 a6 d0 ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c001cde9:	83 c4 10             	add    esp,0x10
c001cdec:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001cdf0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cdf4:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001cdf8:	80 fb 01             	cmp    bl,0x1
c001cdfb:	0f 85 88 00 00 00    	jne    c001ce89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001ce01:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001ce08:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001ce0c:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001ce10:	01 ce                	add    esi,ecx
c001ce12:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001ce18:	0f 94 c0             	sete   al
c001ce1b:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001ce21:	0f 94 c3             	sete   bl
c001ce24:	09 c3                	or     ebx,eax
c001ce26:	8b 06                	mov    eax,DWORD PTR [esi]
c001ce28:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001ce2d:	74 41                	je     c001ce70 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001ce2f:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001ce32:	84 db                	test   bl,bl
c001ce34:	75 15                	jne    c001ce4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001ce36:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce3a:	66 83 f8 0c          	cmp    ax,0xc
c001ce3e:	76 05                	jbe    c001ce45 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001ce40:	b8 0c 00 00 00       	mov    eax,0xc
c001ce45:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001ce49:	76 37                	jbe    c001ce82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ce4b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001ce4f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ce54:	0f 84 dc 00 00 00    	je     c001cf36 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001ce5a:	83 ec 0c             	sub    esp,0xc
c001ce5d:	68 03 bb 02 c0       	push   0xc002bb03
c001ce62:	e8 28 d0 ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c001ce67:	83 c4 10             	add    esp,0x10
c001ce6a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ce6e:	eb 12                	jmp    c001ce82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ce70:	01 c1                	add    ecx,eax
c001ce72:	84 db                	test   bl,bl
c001ce74:	75 0c                	jne    c001ce82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ce76:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce7a:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001ce7e:	77 02                	ja     c001ce82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ce80:	01 d1                	add    ecx,edx
c001ce82:	89 0e                	mov    DWORD PTR [esi],ecx
c001ce84:	e9 ea 00 00 00       	jmp    c001cf73 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001ce89:	80 fb 02             	cmp    bl,0x2
c001ce8c:	75 7c                	jne    c001cf0a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001ce8e:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001ce95:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001ce99:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001ce9d:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cea3:	74 20                	je     c001cec5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001cea5:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001ceab:	74 18                	je     c001cec5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001cead:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ceb1:	b9 0a 00 00 00       	mov    ecx,0xa
c001ceb6:	66 83 f8 0e          	cmp    ax,0xe
c001ceba:	77 03                	ja     c001cebf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001cebc:	8d 48 fc             	lea    ecx,[eax-0x4]
c001cebf:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001cec3:	76 1f                	jbe    c001cee4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001cec5:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001cec9:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cece:	74 66                	je     c001cf36 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001ced0:	83 ec 0c             	sub    esp,0xc
c001ced3:	68 1f bb 02 c0       	push   0xc002bb1f
c001ced8:	e8 b2 cf ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c001cedd:	83 c4 10             	add    esp,0x10
c001cee0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cee4:	8b 06                	mov    eax,DWORD PTR [esi]
c001cee6:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001ceeb:	74 13                	je     c001cf00 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001ceed:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001cef1:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001cef8:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001cefc:	01 c8                	add    eax,ecx
c001cefe:	eb 04                	jmp    c001cf04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001cf00:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001cf04:	01 c2                	add    edx,eax
c001cf06:	89 16                	mov    DWORD PTR [esi],edx
c001cf08:	eb 69                	jmp    c001cf73 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cf0a:	0f b6 db             	movzx  ebx,bl
c001cf0d:	50                   	push   eax
c001cf0e:	50                   	push   eax
c001cf0f:	53                   	push   ebx
c001cf10:	68 3b bb 02 c0       	push   0xc002bb3b
c001cf15:	e8 09 58 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c001cf1a:	83 c4 10             	add    esp,0x10
c001cf1d:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cf22:	74 12                	je     c001cf36 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cf24:	83 ec 0c             	sub    esp,0xc
c001cf27:	68 46 bb 02 c0       	push   0xc002bb46
c001cf2c:	e8 5e cf ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c001cf31:	83 c4 10             	add    esp,0x10
c001cf34:	eb 3d                	jmp    c001cf73 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cf36:	83 ec 0c             	sub    esp,0xc
c001cf39:	55                   	push   ebp
c001cf3a:	e8 05 5e ff ff       	call   c0012d44 <File::close()>
c001cf3f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cf42:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf45:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cf48:	59                   	pop    ecx
c001cf49:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf4d:	e8 57 26 ff ff       	call   c000f5a9 <free>
c001cf52:	5b                   	pop    ebx
c001cf53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf57:	e8 4d 26 ff ff       	call   c000f5a9 <free>
c001cf5c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf5f:	e8 45 26 ff ff       	call   c000f5a9 <free>
c001cf64:	5e                   	pop    esi
c001cf65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf69:	e8 3b 26 ff ff       	call   c000f5a9 <free>
c001cf6e:	83 c4 10             	add    esp,0x10
c001cf71:	eb 21                	jmp    c001cf94 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cf73:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001cf77:	e9 76 fd ff ff       	jmp    c001ccf2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001cf7c:	83 ec 0c             	sub    esp,0xc
c001cf7f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf83:	e8 21 26 ff ff       	call   c000f5a9 <free>
c001cf88:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001cf8c:	83 c4 10             	add    esp,0x10
c001cf8f:	e9 eb fc ff ff       	jmp    c001cc7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001cf94:	31 c0                	xor    eax,eax
c001cf96:	eb 33                	jmp    c001cfcb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001cf98:	83 ec 0c             	sub    esp,0xc
c001cf9b:	55                   	push   ebp
c001cf9c:	e8 a3 5d ff ff       	call   c0012d44 <File::close()>
c001cfa1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cfa4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cfa7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cfaa:	58                   	pop    eax
c001cfab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cfaf:	e8 f5 25 ff ff       	call   c000f5a9 <free>
c001cfb4:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cfb7:	e8 ed 25 ff ff       	call   c000f5a9 <free>
c001cfbc:	5a                   	pop    edx
c001cfbd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfc1:	e8 e3 25 ff ff       	call   c000f5a9 <free>
c001cfc6:	83 c4 10             	add    esp,0x10
c001cfc9:	b0 01                	mov    al,0x1
c001cfcb:	81 c4 5c 03 00 00    	add    esp,0x35c
c001cfd1:	5b                   	pop    ebx
c001cfd2:	5e                   	pop    esi
c001cfd3:	5f                   	pop    edi
c001cfd4:	5d                   	pop    ebp
c001cfd5:	c3                   	ret    

c001cfd6 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001cfd6:	56                   	push   esi
c001cfd7:	31 d2                	xor    edx,edx
c001cfd9:	53                   	push   ebx
c001cfda:	8b 1d 60 07 03 c0    	mov    ebx,DWORD PTR ds:0xc0030760
c001cfe0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cfe4:	39 d3                	cmp    ebx,edx
c001cfe6:	7e 1b                	jle    c001d003 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001cfe8:	8b 04 95 80 09 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcf680]
c001cfef:	39 c8                	cmp    eax,ecx
c001cff1:	77 0d                	ja     c001d000 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001cff3:	8b 34 95 80 07 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcf880]
c001cffa:	01 c6                	add    esi,eax
c001cffc:	39 ce                	cmp    esi,ecx
c001cffe:	77 05                	ja     c001d005 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d000:	42                   	inc    edx
c001d001:	eb e1                	jmp    c001cfe4 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d003:	31 c0                	xor    eax,eax
c001d005:	5b                   	pop    ebx
c001d006:	5e                   	pop    esi
c001d007:	c3                   	ret    

c001d008 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d008:	53                   	push   ebx
c001d009:	31 c0                	xor    eax,eax
c001d00b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d00f:	8b 1d 60 07 03 c0    	mov    ebx,DWORD PTR ds:0xc0030760
c001d015:	39 c3                	cmp    ebx,eax
c001d017:	7e 22                	jle    c001d03b <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d019:	8b 14 85 80 09 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf680]
c001d020:	39 ca                	cmp    edx,ecx
c001d022:	77 14                	ja     c001d038 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d024:	03 14 85 80 07 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcf880]
c001d02b:	39 ca                	cmp    edx,ecx
c001d02d:	76 09                	jbe    c001d038 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d02f:	8b 04 85 80 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf480]
c001d036:	eb 05                	jmp    c001d03d <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d038:	40                   	inc    eax
c001d039:	eb da                	jmp    c001d015 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d03b:	31 c0                	xor    eax,eax
c001d03d:	5b                   	pop    ebx
c001d03e:	c3                   	ret    

c001d03f <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d03f:	53                   	push   ebx
c001d040:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d044:	53                   	push   ebx
c001d045:	e8 8c ff ff ff       	call   c001cfd6 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d04a:	5a                   	pop    edx
c001d04b:	31 d2                	xor    edx,edx
c001d04d:	85 c0                	test   eax,eax
c001d04f:	74 04                	je     c001d055 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d051:	89 da                	mov    edx,ebx
c001d053:	29 c2                	sub    edx,eax
c001d055:	89 d0                	mov    eax,edx
c001d057:	5b                   	pop    ebx
c001d058:	c3                   	ret    

c001d059 <Thr::loadDLL(char const*, bool)>:
c001d059:	55                   	push   ebp
c001d05a:	57                   	push   edi
c001d05b:	56                   	push   esi
c001d05c:	53                   	push   ebx
c001d05d:	81 ec 34 01 00 00    	sub    esp,0x134
c001d063:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d06a:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001d071:	56                   	push   esi
c001d072:	68 5e bb 02 c0       	push   0xc002bb5e
c001d077:	e8 a7 56 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c001d07c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d083:	e8 11 25 ff ff       	call   c000f599 <malloc>
c001d088:	83 c4 0c             	add    esp,0xc
c001d08b:	89 c3                	mov    ebx,eax
c001d08d:	ff 35 50 0f 03 c0    	push   DWORD PTR ds:0xc0030f50
c001d093:	56                   	push   esi
c001d094:	50                   	push   eax
c001d095:	e8 e8 5b ff ff       	call   c0012c82 <File::File(char const*, Process*)>
c001d09a:	83 c4 10             	add    esp,0x10
c001d09d:	85 db                	test   ebx,ebx
c001d09f:	75 3c                	jne    c001d0dd <Thr::loadDLL(char const*, bool)+0x84>
c001d0a1:	89 f8                	mov    eax,edi
c001d0a3:	84 c0                	test   al,al
c001d0a5:	0f 84 d2 01 00 00    	je     c001d27d <Thr::loadDLL(char const*, bool)+0x224>
c001d0ab:	55                   	push   ebp
c001d0ac:	55                   	push   ebp
c001d0ad:	68 6f bb 02 c0       	push   0xc002bb6f
c001d0b2:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001d0b6:	55                   	push   ebp
c001d0b7:	e8 50 37 fe ff       	call   c000080c <strcpy>
c001d0bc:	58                   	pop    eax
c001d0bd:	5a                   	pop    edx
c001d0be:	56                   	push   esi
c001d0bf:	55                   	push   ebp
c001d0c0:	e8 87 38 fe ff       	call   c000094c <strcat>
c001d0c5:	59                   	pop    ecx
c001d0c6:	58                   	pop    eax
c001d0c7:	68 82 bb 02 c0       	push   0xc002bb82
c001d0cc:	55                   	push   ebp
c001d0cd:	e8 7a 38 fe ff       	call   c000094c <strcat>
c001d0d2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d0d5:	e8 b5 cd ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c001d0da:	83 c4 10             	add    esp,0x10
c001d0dd:	51                   	push   ecx
c001d0de:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d0e2:	50                   	push   eax
c001d0e3:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d0e7:	50                   	push   eax
c001d0e8:	53                   	push   ebx
c001d0e9:	e8 a4 5e ff ff       	call   c0012f92 <File::stat(unsigned long long*, bool*)>
c001d0ee:	83 c4 10             	add    esp,0x10
c001d0f1:	85 db                	test   ebx,ebx
c001d0f3:	74 0c                	je     c001d101 <Thr::loadDLL(char const*, bool)+0xa8>
c001d0f5:	83 ec 0c             	sub    esp,0xc
c001d0f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d0fa:	53                   	push   ebx
c001d0fb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d0fe:	83 c4 10             	add    esp,0x10
c001d101:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d106:	75 0a                	jne    c001d112 <Thr::loadDLL(char const*, bool)+0xb9>
c001d108:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d10c:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d110:	75 3c                	jne    c001d14e <Thr::loadDLL(char const*, bool)+0xf5>
c001d112:	89 f8                	mov    eax,edi
c001d114:	84 c0                	test   al,al
c001d116:	0f 84 49 01 00 00    	je     c001d265 <Thr::loadDLL(char const*, bool)+0x20c>
c001d11c:	51                   	push   ecx
c001d11d:	51                   	push   ecx
c001d11e:	68 6f bb 02 c0       	push   0xc002bb6f
c001d123:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d127:	53                   	push   ebx
c001d128:	e8 df 36 fe ff       	call   c000080c <strcpy>
c001d12d:	5d                   	pop    ebp
c001d12e:	58                   	pop    eax
c001d12f:	56                   	push   esi
c001d130:	53                   	push   ebx
c001d131:	e8 16 38 fe ff       	call   c000094c <strcat>
c001d136:	58                   	pop    eax
c001d137:	5a                   	pop    edx
c001d138:	68 82 bb 02 c0       	push   0xc002bb82
c001d13d:	53                   	push   ebx
c001d13e:	e8 09 38 fe ff       	call   c000094c <strcat>
c001d143:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d146:	e8 44 cd ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c001d14b:	83 c4 10             	add    esp,0x10
c001d14e:	52                   	push   edx
c001d14f:	6a 03                	push   0x3
c001d151:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d155:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d159:	05 ff 0f 00 00       	add    eax,0xfff
c001d15e:	83 d2 00             	adc    edx,0x0
c001d161:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d165:	50                   	push   eax
c001d166:	ff 35 70 db 02 c0    	push   DWORD PTR ds:0xc002db70
c001d16c:	e8 c1 49 ff ff       	call   c0011b32 <VAS::allocatePages(int, int)>
c001d171:	59                   	pop    ecx
c001d172:	89 c3                	mov    ebx,eax
c001d174:	5d                   	pop    ebp
c001d175:	50                   	push   eax
c001d176:	68 f1 a0 02 c0       	push   0xc002a0f1
c001d17b:	e8 a3 55 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c001d180:	89 34 24             	mov    DWORD PTR [esp],esi
c001d183:	e8 e4 35 fe ff       	call   c000076c <strlen>
c001d188:	8b 2d 60 07 03 c0    	mov    ebp,DWORD PTR ds:0xc0030760
c001d18e:	40                   	inc    eax
c001d18f:	89 04 24             	mov    DWORD PTR [esp],eax
c001d192:	e8 02 24 ff ff       	call   c000f599 <malloc>
c001d197:	89 04 ad 80 0b 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcf480],eax
c001d19e:	58                   	pop    eax
c001d19f:	a1 60 07 03 c0       	mov    eax,ds:0xc0030760
c001d1a4:	5a                   	pop    edx
c001d1a5:	56                   	push   esi
c001d1a6:	ff 34 85 80 0b 03 c0 	push   DWORD PTR [eax*4-0x3ffcf480]
c001d1ad:	e8 5a 36 fe ff       	call   c000080c <strcpy>
c001d1b2:	a1 60 07 03 c0       	mov    eax,ds:0xc0030760
c001d1b7:	8d 50 01             	lea    edx,[eax+0x1]
c001d1ba:	89 1c 85 80 09 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf680],ebx
c001d1c1:	89 15 60 07 03 c0    	mov    DWORD PTR ds:0xc0030760,edx
c001d1c7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d1cb:	83 c4 0c             	add    esp,0xc
c001d1ce:	89 14 85 80 07 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf880],edx
c001d1d5:	6a 01                	push   0x1
c001d1d7:	53                   	push   ebx
c001d1d8:	56                   	push   esi
c001d1d9:	e8 c2 f6 ff ff       	call   c001c8a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d1de:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d1e2:	83 c4 10             	add    esp,0x10
c001d1e5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d1ea:	0f 85 89 00 00 00    	jne    c001d279 <Thr::loadDLL(char const*, bool)+0x220>
c001d1f0:	89 f8                	mov    eax,edi
c001d1f2:	84 c0                	test   al,al
c001d1f4:	74 73                	je     c001d269 <Thr::loadDLL(char const*, bool)+0x210>
c001d1f6:	83 ec 0c             	sub    esp,0xc
c001d1f9:	68 84 bb 02 c0       	push   0xc002bb84
c001d1fe:	e8 8c cc ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c001d203:	83 c4 10             	add    esp,0x10
c001d206:	eb 61                	jmp    c001d269 <Thr::loadDLL(char const*, bool)+0x210>
c001d208:	50                   	push   eax
c001d209:	50                   	push   eax
c001d20a:	89 e8                	mov    eax,ebp
c001d20c:	c1 e0 0c             	shl    eax,0xc
c001d20f:	01 d8                	add    eax,ebx
c001d211:	50                   	push   eax
c001d212:	ff 35 70 db 02 c0    	push   DWORD PTR ds:0xc002db70
c001d218:	e8 7d 44 ff ff       	call   c001169a <VAS::getPageTableEntry(unsigned long)>
c001d21d:	83 c4 10             	add    esp,0x10
c001d220:	8b 00                	mov    eax,DWORD PTR [eax]
c001d222:	a8 60                	test   al,0x60
c001d224:	75 11                	jne    c001d237 <Thr::loadDLL(char const*, bool)+0x1de>
c001d226:	83 ec 0c             	sub    esp,0xc
c001d229:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d22e:	50                   	push   eax
c001d22f:	e8 f0 26 ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c001d234:	83 c4 10             	add    esp,0x10
c001d237:	45                   	inc    ebp
c001d238:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d23c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d240:	05 ff 0f 00 00       	add    eax,0xfff
c001d245:	bf 00 00 00 00       	mov    edi,0x0
c001d24a:	83 d2 00             	adc    edx,0x0
c001d24d:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d251:	c1 ea 0c             	shr    edx,0xc
c001d254:	39 c5                	cmp    ebp,eax
c001d256:	89 d1                	mov    ecx,edx
c001d258:	89 f8                	mov    eax,edi
c001d25a:	19 c8                	sbb    eax,ecx
c001d25c:	72 aa                	jb     c001d208 <Thr::loadDLL(char const*, bool)+0x1af>
c001d25e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d263:	75 18                	jne    c001d27d <Thr::loadDLL(char const*, bool)+0x224>
c001d265:	31 db                	xor    ebx,ebx
c001d267:	eb 14                	jmp    c001d27d <Thr::loadDLL(char const*, bool)+0x224>
c001d269:	83 ec 0c             	sub    esp,0xc
c001d26c:	68 a3 bb 02 c0       	push   0xc002bba3
c001d271:	e8 19 cc ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c001d276:	83 c4 10             	add    esp,0x10
c001d279:	31 ed                	xor    ebp,ebp
c001d27b:	eb bb                	jmp    c001d238 <Thr::loadDLL(char const*, bool)+0x1df>
c001d27d:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d283:	89 d8                	mov    eax,ebx
c001d285:	5b                   	pop    ebx
c001d286:	5e                   	pop    esi
c001d287:	5f                   	pop    edi
c001d288:	5d                   	pop    ebp
c001d289:	c3                   	ret    

c001d28a <Thr::executeDLL(unsigned long, void*)>:
c001d28a:	56                   	push   esi
c001d28b:	53                   	push   ebx
c001d28c:	52                   	push   edx
c001d28d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d291:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d295:	85 db                	test   ebx,ebx
c001d297:	75 10                	jne    c001d2a9 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d299:	83 ec 0c             	sub    esp,0xc
c001d29c:	68 bf bb 02 c0       	push   0xc002bbbf
c001d2a1:	e8 e9 cb ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c001d2a6:	83 c4 10             	add    esp,0x10
c001d2a9:	50                   	push   eax
c001d2aa:	50                   	push   eax
c001d2ab:	53                   	push   ebx
c001d2ac:	68 e9 bb 02 c0       	push   0xc002bbe9
c001d2b1:	e8 6d 54 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c001d2b6:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d2ba:	89 d8                	mov    eax,ebx
c001d2bc:	83 c4 14             	add    esp,0x14
c001d2bf:	5b                   	pop    ebx
c001d2c0:	5e                   	pop    esi
c001d2c1:	ff e0                	jmp    eax
c001d2c3:	90                   	nop

c001d2c4 <userModeEntryPoint(void*)>:
c001d2c4:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001d2c9:	48                   	dec    eax
c001d2ca:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001d2cf:	75 01                	jne    c001d2d2 <userModeEntryPoint(void*)+0xe>
c001d2d1:	fb                   	sti    
c001d2d2:	fb                   	sti    
c001d2d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d2d8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d2db:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d2e1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d2e5:	e9 40 30 fe ff       	jmp    c000032a <goToUsermode>

c001d2ea <changeTSS>:
c001d2ea:	83 ec 14             	sub    esp,0x14
c001d2ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d2f2:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d2f5:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d2fa:	c1 e2 15             	shl    edx,0x15
c001d2fd:	29 d0                	sub    eax,edx
c001d2ff:	50                   	push   eax
c001d300:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c001d305:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d30b:	05 7c 11 00 00       	add    eax,0x117c
c001d310:	50                   	push   eax
c001d311:	e8 5e 38 ff ff       	call   c0010b74 <TSS::setESP(unsigned long)>
c001d316:	83 c4 1c             	add    esp,0x1c
c001d319:	c3                   	ret    

c001d31a <switchToThread(ThreadControlBlock*)>:
c001d31a:	57                   	push   edi
c001d31b:	a1 24 0f 03 c0       	mov    eax,ds:0xc0030f24
c001d320:	56                   	push   esi
c001d321:	85 c0                	test   eax,eax
c001d323:	53                   	push   ebx
c001d324:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d328:	0f 85 88 00 00 00    	jne    c001d3b6 <switchToThread(ThreadControlBlock*)+0x9c>
c001d32e:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d331:	3c ff                	cmp    al,0xff
c001d333:	74 7d                	je     c001d3b2 <switchToThread(ThreadControlBlock*)+0x98>
c001d335:	0f b6 d0             	movzx  edx,al
c001d338:	b8 84 03 00 00       	mov    eax,0x384
c001d33d:	29 d0                	sub    eax,edx
c001d33f:	c1 e0 10             	shl    eax,0x10
c001d342:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d345:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d348:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c001d34d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d353:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d35a:	74 4a                	je     c001d3a6 <switchToThread(ThreadControlBlock*)+0x8c>
c001d35c:	0f 31                	rdtsc  
c001d35e:	a3 68 0f 03 c0       	mov    ds:0xc0030f68,eax
c001d363:	89 c6                	mov    esi,eax
c001d365:	89 d7                	mov    edi,edx
c001d367:	2b 35 58 0f 03 c0    	sub    esi,DWORD PTR ds:0xc0030f58
c001d36d:	89 15 6c 0f 03 c0    	mov    DWORD PTR ds:0xc0030f6c,edx
c001d373:	1b 3d 5c 0f 03 c0    	sbb    edi,DWORD PTR ds:0xc0030f5c
c001d379:	89 35 60 0f 03 c0    	mov    DWORD PTR ds:0xc0030f60,esi
c001d37f:	a3 58 0f 03 c0       	mov    ds:0xc0030f58,eax
c001d384:	89 3d 64 0f 03 c0    	mov    DWORD PTR ds:0xc0030f64,edi
c001d38a:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001d390:	89 15 5c 0f 03 c0    	mov    DWORD PTR ds:0xc0030f5c,edx
c001d396:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d399:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001d39c:	01 c6                	add    esi,eax
c001d39e:	11 d7                	adc    edi,edx
c001d3a0:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001d3a3:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001d3a6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d3aa:	5b                   	pop    ebx
c001d3ab:	5e                   	pop    esi
c001d3ac:	5f                   	pop    edi
c001d3ad:	e9 b0 2f fe ff       	jmp    c0000362 <switchToThreadASM>
c001d3b2:	31 c0                	xor    eax,eax
c001d3b4:	eb 8f                	jmp    c001d345 <switchToThread(ThreadControlBlock*)+0x2b>
c001d3b6:	5b                   	pop    ebx
c001d3b7:	c7 05 20 0f 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030f20,0x1
c001d3c1:	5e                   	pop    esi
c001d3c2:	5f                   	pop    edi
c001d3c3:	c3                   	ret    

c001d3c4 <Process::addArgs(char**)>:
c001d3c4:	57                   	push   edi
c001d3c5:	56                   	push   esi
c001d3c6:	53                   	push   ebx
c001d3c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d3cb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d3cf:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d3d9:	85 ff                	test   edi,edi
c001d3db:	74 3d                	je     c001d41a <Process::addArgs(char**)+0x56>
c001d3dd:	8b 07                	mov    eax,DWORD PTR [edi]
c001d3df:	85 c0                	test   eax,eax
c001d3e1:	74 37                	je     c001d41a <Process::addArgs(char**)+0x56>
c001d3e3:	31 db                	xor    ebx,ebx
c001d3e5:	83 ec 0c             	sub    esp,0xc
c001d3e8:	50                   	push   eax
c001d3e9:	e8 7e 33 fe ff       	call   c000076c <strlen>
c001d3ee:	40                   	inc    eax
c001d3ef:	89 04 24             	mov    DWORD PTR [esp],eax
c001d3f2:	e8 a2 21 ff ff       	call   c000f599 <malloc>
c001d3f7:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d3fe:	5a                   	pop    edx
c001d3ff:	59                   	pop    ecx
c001d400:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d403:	43                   	inc    ebx
c001d404:	50                   	push   eax
c001d405:	e8 02 34 fe ff       	call   c000080c <strcpy>
c001d40a:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d410:	83 c4 10             	add    esp,0x10
c001d413:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d416:	85 c0                	test   eax,eax
c001d418:	75 cb                	jne    c001d3e5 <Process::addArgs(char**)+0x21>
c001d41a:	5b                   	pop    ebx
c001d41b:	5e                   	pop    esi
c001d41c:	5f                   	pop    edi
c001d41d:	c3                   	ret    

c001d41e <Process::Process(char const*, Process*, char**)>:
c001d41e:	56                   	push   esi
c001d41f:	53                   	push   ebx
c001d420:	83 ec 14             	sub    esp,0x14
c001d423:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d427:	05 0c 02 00 00       	add    eax,0x20c
c001d42c:	bb 07 00 00 00       	mov    ebx,0x7
c001d431:	89 c6                	mov    esi,eax
c001d433:	85 db                	test   ebx,ebx
c001d435:	78 12                	js     c001d449 <Process::Process(char const*, Process*, char**)+0x2b>
c001d437:	83 ec 0c             	sub    esp,0xc
c001d43a:	56                   	push   esi
c001d43b:	e8 96 b6 00 00       	call   c0028ad6 <ThreadControlBlock::ThreadControlBlock()>
c001d440:	83 c4 10             	add    esp,0x10
c001d443:	83 c6 63             	add    esi,0x63
c001d446:	4b                   	dec    ebx
c001d447:	eb ea                	jmp    c001d433 <Process::Process(char const*, Process*, char**)+0x15>
c001d449:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d44d:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d454:	83 ec 0c             	sub    esp,0xc
c001d457:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d45b:	e8 b8 c8 ff ff       	call   c0019d18 <Krnl::newProcessEnv(Process*)>
c001d460:	83 c4 10             	add    esp,0x10
c001d463:	89 c2                	mov    edx,eax
c001d465:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d469:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d46f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d473:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d47c:	a1 90 cf 02 c0       	mov    eax,ds:0xc002cf90
c001d481:	8d 50 01             	lea    edx,[eax+0x1]
c001d484:	89 15 90 cf 02 c0    	mov    DWORD PTR ds:0xc002cf90,edx
c001d48a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d48e:	89 02                	mov    DWORD PTR [edx],eax
c001d490:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d498:	83 ec 0c             	sub    esp,0xc
c001d49b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d49f:	e8 f5 20 ff ff       	call   c000f599 <malloc>
c001d4a4:	83 c4 10             	add    esp,0x10
c001d4a7:	89 c3                	mov    ebx,eax
c001d4a9:	83 ec 08             	sub    esp,0x8
c001d4ac:	6a 00                	push   0x0
c001d4ae:	53                   	push   ebx
c001d4af:	e8 26 4a ff ff       	call   c0011eda <VAS::VAS(bool)>
c001d4b4:	83 c4 10             	add    esp,0x10
c001d4b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4bb:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d4c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4c5:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d4cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4d3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d4d7:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d4dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4e1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d4e7:	85 c0                	test   eax,eax
c001d4e9:	74 42                	je     c001d52d <Process::Process(char const*, Process*, char**)+0x10f>
c001d4eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4ef:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d4f5:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d4fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4ff:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d505:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d509:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d50f:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d515:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d519:	05 0c 01 00 00       	add    eax,0x10c
c001d51e:	83 ec 08             	sub    esp,0x8
c001d521:	52                   	push   edx
c001d522:	50                   	push   eax
c001d523:	e8 e4 32 fe ff       	call   c000080c <strcpy>
c001d528:	83 c4 10             	add    esp,0x10
c001d52b:	eb 63                	jmp    c001d590 <Process::Process(char const*, Process*, char**)+0x172>
c001d52d:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001d535:	83 ec 0c             	sub    esp,0xc
c001d538:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d53c:	e8 58 20 ff ff       	call   c000f599 <malloc>
c001d541:	83 c4 10             	add    esp,0x10
c001d544:	89 c3                	mov    ebx,eax
c001d546:	83 ec 08             	sub    esp,0x8
c001d549:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d54d:	53                   	push   ebx
c001d54e:	e8 33 33 ff ff       	call   c0010886 <VgaText::VgaText(char const*)>
c001d553:	83 c4 10             	add    esp,0x10
c001d556:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d55a:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d564:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d56a:	83 ec 0c             	sub    esp,0xc
c001d56d:	50                   	push   eax
c001d56e:	e8 d2 2a ff ff       	call   c0010045 <addToTerminalCycle(VgaText*)>
c001d573:	83 c4 10             	add    esp,0x10
c001d576:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d57a:	05 0c 01 00 00       	add    eax,0x10c
c001d57f:	83 ec 08             	sub    esp,0x8
c001d582:	68 08 bc 02 c0       	push   0xc002bc08
c001d587:	50                   	push   eax
c001d588:	e8 7f 32 fe ff       	call   c000080c <strcpy>
c001d58d:	83 c4 10             	add    esp,0x10
c001d590:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d594:	83 c0 0c             	add    eax,0xc
c001d597:	83 ec 08             	sub    esp,0x8
c001d59a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d59e:	50                   	push   eax
c001d59f:	e8 68 32 fe ff       	call   c000080c <strcpy>
c001d5a4:	83 c4 10             	add    esp,0x10
c001d5a7:	83 ec 08             	sub    esp,0x8
c001d5aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d5ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d5b2:	e8 0d fe ff ff       	call   c001d3c4 <Process::addArgs(char**)>
c001d5b7:	83 c4 10             	add    esp,0x10
c001d5ba:	83 ec 08             	sub    esp,0x8
c001d5bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d5c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d5c5:	e8 a0 ed ff ff       	call   c001c36a <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d5ca:	83 c4 10             	add    esp,0x10
c001d5cd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d5d1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d5d5:	83 f0 01             	xor    eax,0x1
c001d5d8:	88 c2                	mov    dl,al
c001d5da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5de:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d5e4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d5e9:	83 ec 08             	sub    esp,0x8
c001d5ec:	50                   	push   eax
c001d5ed:	68 60 bc 02 c0       	push   0xc002bc60
c001d5f2:	e8 2c 51 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c001d5f7:	83 c4 10             	add    esp,0x10
c001d5fa:	90                   	nop
c001d5fb:	83 c4 14             	add    esp,0x14
c001d5fe:	5b                   	pop    ebx
c001d5ff:	5e                   	pop    esi
c001d600:	c3                   	ret    
c001d601:	90                   	nop

c001d602 <Process::Process(bool, char const*, Process*, char**)>:
c001d602:	56                   	push   esi
c001d603:	53                   	push   ebx
c001d604:	83 ec 24             	sub    esp,0x24
c001d607:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d60b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d60f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d613:	05 0c 02 00 00       	add    eax,0x20c
c001d618:	bb 07 00 00 00       	mov    ebx,0x7
c001d61d:	89 c6                	mov    esi,eax
c001d61f:	85 db                	test   ebx,ebx
c001d621:	78 12                	js     c001d635 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d623:	83 ec 0c             	sub    esp,0xc
c001d626:	56                   	push   esi
c001d627:	e8 aa b4 00 00       	call   c0028ad6 <ThreadControlBlock::ThreadControlBlock()>
c001d62c:	83 c4 10             	add    esp,0x10
c001d62f:	83 c6 63             	add    esi,0x63
c001d632:	4b                   	dec    ebx
c001d633:	eb ea                	jmp    c001d61f <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d635:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d639:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d640:	83 ec 0c             	sub    esp,0xc
c001d643:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d647:	e8 cc c6 ff ff       	call   c0019d18 <Krnl::newProcessEnv(Process*)>
c001d64c:	83 c4 10             	add    esp,0x10
c001d64f:	89 c2                	mov    edx,eax
c001d651:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d655:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d65b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d65f:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d668:	a1 90 cf 02 c0       	mov    eax,ds:0xc002cf90
c001d66d:	8d 50 01             	lea    edx,[eax+0x1]
c001d670:	89 15 90 cf 02 c0    	mov    DWORD PTR ds:0xc002cf90,edx
c001d676:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d67a:	89 02                	mov    DWORD PTR [edx],eax
c001d67c:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001d684:	83 ec 0c             	sub    esp,0xc
c001d687:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d68b:	e8 09 1f ff ff       	call   c000f599 <malloc>
c001d690:	83 c4 10             	add    esp,0x10
c001d693:	89 c3                	mov    ebx,eax
c001d695:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d69a:	83 ec 08             	sub    esp,0x8
c001d69d:	50                   	push   eax
c001d69e:	53                   	push   ebx
c001d69f:	e8 36 48 ff ff       	call   c0011eda <VAS::VAS(bool)>
c001d6a4:	83 c4 10             	add    esp,0x10
c001d6a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6ab:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d6b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6b5:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d6bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6c3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d6c7:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d6cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6d1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d6d7:	85 c0                	test   eax,eax
c001d6d9:	74 42                	je     c001d71d <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d6db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6df:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d6e5:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d6eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6ef:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d6f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6f9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d6ff:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d705:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d709:	05 0c 01 00 00       	add    eax,0x10c
c001d70e:	83 ec 08             	sub    esp,0x8
c001d711:	52                   	push   edx
c001d712:	50                   	push   eax
c001d713:	e8 f4 30 fe ff       	call   c000080c <strcpy>
c001d718:	83 c4 10             	add    esp,0x10
c001d71b:	eb 63                	jmp    c001d780 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d71d:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001d725:	83 ec 0c             	sub    esp,0xc
c001d728:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d72c:	e8 68 1e ff ff       	call   c000f599 <malloc>
c001d731:	83 c4 10             	add    esp,0x10
c001d734:	89 c3                	mov    ebx,eax
c001d736:	83 ec 08             	sub    esp,0x8
c001d739:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d73d:	53                   	push   ebx
c001d73e:	e8 43 31 ff ff       	call   c0010886 <VgaText::VgaText(char const*)>
c001d743:	83 c4 10             	add    esp,0x10
c001d746:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d74a:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d750:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d754:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d75a:	83 ec 0c             	sub    esp,0xc
c001d75d:	50                   	push   eax
c001d75e:	e8 e2 28 ff ff       	call   c0010045 <addToTerminalCycle(VgaText*)>
c001d763:	83 c4 10             	add    esp,0x10
c001d766:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d76a:	05 0c 01 00 00       	add    eax,0x10c
c001d76f:	83 ec 08             	sub    esp,0x8
c001d772:	68 08 bc 02 c0       	push   0xc002bc08
c001d777:	50                   	push   eax
c001d778:	e8 8f 30 fe ff       	call   c000080c <strcpy>
c001d77d:	83 c4 10             	add    esp,0x10
c001d780:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d784:	83 c0 0c             	add    eax,0xc
c001d787:	83 ec 08             	sub    esp,0x8
c001d78a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d78e:	50                   	push   eax
c001d78f:	e8 78 30 fe ff       	call   c000080c <strcpy>
c001d794:	83 c4 10             	add    esp,0x10
c001d797:	83 ec 08             	sub    esp,0x8
c001d79a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d79e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d7a2:	e8 1d fc ff ff       	call   c001d3c4 <Process::addArgs(char**)>
c001d7a7:	83 c4 10             	add    esp,0x10
c001d7aa:	90                   	nop
c001d7ab:	83 c4 24             	add    esp,0x24
c001d7ae:	5b                   	pop    ebx
c001d7af:	5e                   	pop    esi
c001d7b0:	c3                   	ret    

c001d7b1 <taskStartupFunction>:
c001d7b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d7b6:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d7b9:	c3                   	ret    

c001d7ba <Semaphore::Semaphore(int)>:
c001d7ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d7c2:	89 10                	mov    DWORD PTR [eax],edx
c001d7c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7c8:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d7cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7d3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d7da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7de:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d7e5:	90                   	nop
c001d7e6:	c3                   	ret    
c001d7e7:	90                   	nop

c001d7e8 <Mutex::Mutex()>:
c001d7e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7ec:	6a 01                	push   0x1
c001d7ee:	50                   	push   eax
c001d7ef:	e8 c6 ff ff ff       	call   c001d7ba <Semaphore::Semaphore(int)>
c001d7f4:	83 c4 08             	add    esp,0x8
c001d7f7:	90                   	nop
c001d7f8:	c3                   	ret    
c001d7f9:	90                   	nop

c001d7fa <Process::createThread(void (*)(void*), void*, int)>:
c001d7fa:	55                   	push   ebp
c001d7fb:	31 c9                	xor    ecx,ecx
c001d7fd:	57                   	push   edi
c001d7fe:	56                   	push   esi
c001d7ff:	53                   	push   ebx
c001d800:	83 ec 1c             	sub    esp,0x1c
c001d803:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d807:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d80e:	89 f2                	mov    edx,esi
c001d810:	0f b7 c2             	movzx  eax,dx
c001d813:	83 e2 01             	and    edx,0x1
c001d816:	74 16                	je     c001d82e <Process::createThread(void (*)(void*), void*, int)+0x34>
c001d818:	d1 f8                	sar    eax,1
c001d81a:	41                   	inc    ecx
c001d81b:	89 c2                	mov    edx,eax
c001d81d:	83 f9 10             	cmp    ecx,0x10
c001d820:	75 ee                	jne    c001d810 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d822:	83 c4 1c             	add    esp,0x1c
c001d825:	31 db                	xor    ebx,ebx
c001d827:	89 d8                	mov    eax,ebx
c001d829:	5b                   	pop    ebx
c001d82a:	5e                   	pop    esi
c001d82b:	5f                   	pop    edi
c001d82c:	5d                   	pop    ebp
c001d82d:	c3                   	ret    
c001d82e:	b8 01 00 00 00       	mov    eax,0x1
c001d833:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d836:	d3 e0                	shl    eax,cl
c001d838:	09 c6                	or     esi,eax
c001d83a:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001d83d:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d844:	89 c6                	mov    esi,eax
c001d846:	c1 e6 05             	shl    esi,0x5
c001d849:	01 f0                	add    eax,esi
c001d84b:	01 d8                	add    eax,ebx
c001d84d:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001d854:	75 0a                	jne    c001d860 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001d856:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001d860:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d866:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d86a:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001d86d:	01 ca                	add    edx,ecx
c001d86f:	83 ec 08             	sub    esp,0x8
c001d872:	89 d0                	mov    eax,edx
c001d874:	c1 e0 05             	shl    eax,0x5
c001d877:	01 d0                	add    eax,edx
c001d879:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001d87d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d881:	01 d8                	add    eax,ebx
c001d883:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001d889:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001d88f:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d895:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d89b:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d8a1:	89 cd                	mov    ebp,ecx
c001d8a3:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001d8a7:	f7 dd                	neg    ebp
c001d8a9:	c1 e5 15             	shl    ebp,0x15
c001d8ac:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001d8b2:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001d8b8:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d8c2:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001d8c8:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d8d2:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d8dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d8e0:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001d8e7:	53                   	push   ebx
c001d8e8:	68 44 0f 03 c0       	push   0xc0030f44
c001d8ed:	e8 9e af 00 00       	call   c0028890 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d8f2:	89 d8                	mov    eax,ebx
c001d8f4:	83 c4 10             	add    esp,0x10
c001d8f7:	83 c4 1c             	add    esp,0x1c
c001d8fa:	5b                   	pop    ebx
c001d8fb:	5e                   	pop    esi
c001d8fc:	5f                   	pop    edi
c001d8fd:	5d                   	pop    ebp
c001d8fe:	c3                   	ret    
c001d8ff:	90                   	nop

c001d900 <Process::createUserThread()>:
c001d900:	83 ec 0c             	sub    esp,0xc
c001d903:	68 80 00 00 00       	push   0x80
c001d908:	6a 00                	push   0x0
c001d90a:	68 c4 d2 01 c0       	push   0xc001d2c4
c001d90f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d913:	e8 e2 fe ff ff       	call   c001d7fa <Process::createThread(void (*)(void*), void*, int)>
c001d918:	83 c4 1c             	add    esp,0x1c
c001d91b:	c3                   	ret    

c001d91c <setupMultitasking(void (*)())>:
c001d91c:	56                   	push   esi
c001d91d:	53                   	push   ebx
c001d91e:	51                   	push   ecx
c001d91f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d923:	eb 10                	jmp    c001d935 <setupMultitasking(void (*)())+0x19>
c001d925:	83 ec 0c             	sub    esp,0xc
c001d928:	68 44 0f 03 c0       	push   0xc0030f44
c001d92d:	e8 b0 ae 00 00       	call   c00287e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d932:	83 c4 10             	add    esp,0x10
c001d935:	83 ec 0c             	sub    esp,0xc
c001d938:	68 44 0f 03 c0       	push   0xc0030f44
c001d93d:	e8 7c ae 00 00       	call   c00287be <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d942:	83 c4 10             	add    esp,0x10
c001d945:	84 c0                	test   al,al
c001d947:	74 dc                	je     c001d925 <setupMultitasking(void (*)())+0x9>
c001d949:	83 ec 0c             	sub    esp,0xc
c001d94c:	68 3f 07 00 00       	push   0x73f
c001d951:	e8 43 1c ff ff       	call   c000f599 <malloc>
c001d956:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d95d:	89 c3                	mov    ebx,eax
c001d95f:	6a 00                	push   0x0
c001d961:	68 0c bc 02 c0       	push   0xc002bc0c
c001d966:	6a 01                	push   0x1
c001d968:	50                   	push   eax
c001d969:	e8 94 fc ff ff       	call   c001d602 <Process::Process(bool, char const*, Process*, char**)>
c001d96e:	83 c4 14             	add    esp,0x14
c001d971:	89 1d 50 0f 03 c0    	mov    DWORD PTR ds:0xc0030f50,ebx
c001d977:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d97d:	e8 d1 29 ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c001d982:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d98a:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001d994:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d99a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d99d:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d9a7:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d9ad:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d9b3:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d9bd:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d9c7:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d9d1:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d9d7:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d9e1:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d9e7:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d9f1:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d9f7:	58                   	pop    eax
c001d9f8:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d9fe:	5a                   	pop    edx
c001d9ff:	68 08 bc 02 c0       	push   0xc002bc08
c001da04:	50                   	push   eax
c001da05:	e8 02 2e fe ff       	call   c000080c <strcpy>
c001da0a:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001da11:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001da15:	83 c4 14             	add    esp,0x14
c001da18:	5b                   	pop    ebx
c001da19:	5e                   	pop    esi
c001da1a:	e9 35 29 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001da1f <schedule()>:
c001da1f:	a1 24 0f 03 c0       	mov    eax,ds:0xc0030f24
c001da24:	85 c0                	test   eax,eax
c001da26:	74 0b                	je     c001da33 <schedule()+0x14>
c001da28:	c7 05 20 0f 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030f20,0x1
c001da32:	c3                   	ret    
c001da33:	53                   	push   ebx
c001da34:	83 ec 14             	sub    esp,0x14
c001da37:	68 44 0f 03 c0       	push   0xc0030f44
c001da3c:	e8 7d ad 00 00       	call   c00287be <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001da41:	83 c4 10             	add    esp,0x10
c001da44:	84 c0                	test   al,al
c001da46:	75 38                	jne    c001da80 <schedule()+0x61>
c001da48:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da4d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001da50:	4a                   	dec    edx
c001da51:	74 32                	je     c001da85 <schedule()+0x66>
c001da53:	83 ec 0c             	sub    esp,0xc
c001da56:	68 44 0f 03 c0       	push   0xc0030f44
c001da5b:	e8 7a ad 00 00       	call   c00287da <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001da60:	c7 04 24 44 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f44
c001da67:	89 c3                	mov    ebx,eax
c001da69:	e8 74 ad 00 00       	call   c00287e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001da6e:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001da75:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001da78:	e8 9d f8 ff ff       	call   c001d31a <switchToThread(ThreadControlBlock*)>
c001da7d:	83 c4 10             	add    esp,0x10
c001da80:	83 c4 08             	add    esp,0x8
c001da83:	5b                   	pop    ebx
c001da84:	c3                   	ret    
c001da85:	83 ec 08             	sub    esp,0x8
c001da88:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001da8f:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001da95:	68 44 0f 03 c0       	push   0xc0030f44
c001da9a:	e8 f1 ad 00 00       	call   c0028890 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001da9f:	83 c4 10             	add    esp,0x10
c001daa2:	eb af                	jmp    c001da53 <schedule()+0x34>

c001daa4 <Semaphore::tryAcquire()>:
c001daa4:	53                   	push   ebx
c001daa5:	83 ec 08             	sub    esp,0x8
c001daa8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001daac:	fa                   	cli    
c001daad:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001dab2:	8d 50 01             	lea    edx,[eax+0x1]
c001dab5:	89 15 28 0f 03 c0    	mov    DWORD PTR ds:0xc0030f28,edx
c001dabb:	8b 15 24 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f24
c001dac1:	8d 5a 01             	lea    ebx,[edx+0x1]
c001dac4:	89 1d 24 0f 03 c0    	mov    DWORD PTR ds:0xc0030f24,ebx
c001daca:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001dacd:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001dacf:	7c 2a                	jl     c001dafb <Semaphore::tryAcquire()+0x57>
c001dad1:	89 15 24 0f 03 c0    	mov    DWORD PTR ds:0xc0030f24,edx
c001dad7:	85 d2                	test   edx,edx
c001dad9:	75 0a                	jne    c001dae5 <Semaphore::tryAcquire()+0x41>
c001dadb:	8b 15 20 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f20
c001dae1:	85 d2                	test   edx,edx
c001dae3:	75 5b                	jne    c001db40 <Semaphore::tryAcquire()+0x9c>
c001dae5:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001daea:	85 c0                	test   eax,eax
c001daec:	74 07                	je     c001daf5 <Semaphore::tryAcquire()+0x51>
c001daee:	31 c0                	xor    eax,eax
c001daf0:	83 c4 08             	add    esp,0x8
c001daf3:	5b                   	pop    ebx
c001daf4:	c3                   	ret    
c001daf5:	fb                   	sti    
c001daf6:	83 c4 08             	add    esp,0x8
c001daf9:	5b                   	pop    ebx
c001dafa:	c3                   	ret    
c001dafb:	43                   	inc    ebx
c001dafc:	89 15 24 0f 03 c0    	mov    DWORD PTR ds:0xc0030f24,edx
c001db02:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001db05:	85 d2                	test   edx,edx
c001db07:	75 1f                	jne    c001db28 <Semaphore::tryAcquire()+0x84>
c001db09:	8b 0d 20 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030f20
c001db0f:	85 c9                	test   ecx,ecx
c001db11:	74 15                	je     c001db28 <Semaphore::tryAcquire()+0x84>
c001db13:	c7 05 20 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f20,0x0
c001db1d:	e8 fd fe ff ff       	call   c001da1f <schedule()>
c001db22:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001db27:	48                   	dec    eax
c001db28:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001db2d:	85 c0                	test   eax,eax
c001db2f:	75 08                	jne    c001db39 <Semaphore::tryAcquire()+0x95>
c001db31:	fb                   	sti    
c001db32:	b0 01                	mov    al,0x1
c001db34:	83 c4 08             	add    esp,0x8
c001db37:	5b                   	pop    ebx
c001db38:	c3                   	ret    
c001db39:	b0 01                	mov    al,0x1
c001db3b:	83 c4 08             	add    esp,0x8
c001db3e:	5b                   	pop    ebx
c001db3f:	c3                   	ret    
c001db40:	c7 05 20 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f20,0x0
c001db4a:	e8 d0 fe ff ff       	call   c001da1f <schedule()>
c001db4f:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001db54:	48                   	dec    eax
c001db55:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001db5a:	85 c0                	test   eax,eax
c001db5c:	75 90                	jne    c001daee <Semaphore::tryAcquire()+0x4a>
c001db5e:	eb 95                	jmp    c001daf5 <Semaphore::tryAcquire()+0x51>

c001db60 <Semaphore::assertLocked(char const*)>:
c001db60:	83 ec 0c             	sub    esp,0xc
c001db63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001db67:	fa                   	cli    
c001db68:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001db6e:	a1 24 0f 03 c0       	mov    eax,ds:0xc0030f24
c001db73:	8d 48 01             	lea    ecx,[eax+0x1]
c001db76:	89 0d 24 0f 03 c0    	mov    DWORD PTR ds:0xc0030f24,ecx
c001db7c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001db7e:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001db81:	7c 24                	jl     c001dba7 <Semaphore::assertLocked(char const*)+0x47>
c001db83:	a3 24 0f 03 c0       	mov    ds:0xc0030f24,eax
c001db88:	85 c0                	test   eax,eax
c001db8a:	75 09                	jne    c001db95 <Semaphore::assertLocked(char const*)+0x35>
c001db8c:	a1 20 0f 03 c0       	mov    eax,ds:0xc0030f20
c001db91:	85 c0                	test   eax,eax
c001db93:	75 29                	jne    c001dbbe <Semaphore::assertLocked(char const*)+0x5e>
c001db95:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001db9a:	48                   	dec    eax
c001db9b:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001dba0:	75 01                	jne    c001dba3 <Semaphore::assertLocked(char const*)+0x43>
c001dba2:	fb                   	sti    
c001dba3:	83 c4 0c             	add    esp,0xc
c001dba6:	c3                   	ret    
c001dba7:	83 ec 0c             	sub    esp,0xc
c001dbaa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001dbae:	e8 dc c2 ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c001dbb3:	a1 24 0f 03 c0       	mov    eax,ds:0xc0030f24
c001dbb8:	83 c4 10             	add    esp,0x10
c001dbbb:	48                   	dec    eax
c001dbbc:	eb c5                	jmp    c001db83 <Semaphore::assertLocked(char const*)+0x23>
c001dbbe:	c7 05 20 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f20,0x0
c001dbc8:	e8 52 fe ff ff       	call   c001da1f <schedule()>
c001dbcd:	eb c6                	jmp    c001db95 <Semaphore::assertLocked(char const*)+0x35>

c001dbcf <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001dbcf:	83 ec 0c             	sub    esp,0xc
c001dbd2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbd7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dbdb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dbde:	e8 3c fe ff ff       	call   c001da1f <schedule()>
c001dbe3:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001dbe8:	48                   	dec    eax
c001dbe9:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001dbee:	75 01                	jne    c001dbf1 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x22>
c001dbf0:	fb                   	sti    
c001dbf1:	83 c4 0c             	add    esp,0xc
c001dbf4:	c3                   	ret    

c001dbf5 <blockTask(TaskState)>:
c001dbf5:	83 ec 0c             	sub    esp,0xc
c001dbf8:	fa                   	cli    
c001dbf9:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001dbff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dc03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc08:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dc0b:	e8 0f fe ff ff       	call   c001da1f <schedule()>
c001dc10:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001dc15:	48                   	dec    eax
c001dc16:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001dc1b:	75 01                	jne    c001dc1e <blockTask(TaskState)+0x29>
c001dc1d:	fb                   	sti    
c001dc1e:	83 c4 0c             	add    esp,0xc
c001dc21:	c3                   	ret    

c001dc22 <waitTask(int, int*, int)>:
c001dc22:	83 ec 18             	sub    esp,0x18
c001dc25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc2a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dc2e:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001dc31:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dc35:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc3a:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001dc3d:	6a 07                	push   0x7
c001dc3f:	e8 b1 ff ff ff       	call   c001dbf5 <blockTask(TaskState)>
c001dc44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc49:	83 c4 10             	add    esp,0x10
c001dc4c:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001dc4f:	85 d2                	test   edx,edx
c001dc51:	74 0a                	je     c001dc5d <waitTask(int, int*, int)+0x3b>
c001dc53:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001dc56:	89 02                	mov    DWORD PTR [edx],eax
c001dc58:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc5d:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001dc60:	83 c4 0c             	add    esp,0xc
c001dc63:	c3                   	ret    

c001dc64 <nanoSleepUntil(unsigned long long)>:
c001dc64:	83 ec 0c             	sub    esp,0xc
c001dc67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc6b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dc6f:	3b 05 70 e0 02 c0    	cmp    eax,DWORD PTR ds:0xc002e070
c001dc75:	89 d1                	mov    ecx,edx
c001dc77:	1b 0d 74 e0 02 c0    	sbb    ecx,DWORD PTR ds:0xc002e074
c001dc7d:	73 04                	jae    c001dc83 <nanoSleepUntil(unsigned long long)+0x1f>
c001dc7f:	83 c4 0c             	add    esp,0xc
c001dc82:	c3                   	ret    
c001dc83:	fa                   	cli    
c001dc84:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001dc8a:	83 ec 08             	sub    esp,0x8
c001dc8d:	ff 05 24 0f 03 c0    	inc    DWORD PTR ds:0xc0030f24
c001dc93:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dc99:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001dc9c:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001dc9f:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001dca5:	68 38 0f 03 c0       	push   0xc0030f38
c001dcaa:	e8 e1 ab 00 00       	call   c0028890 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dcaf:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001dcb6:	e8 3a ff ff ff       	call   c001dbf5 <blockTask(TaskState)>
c001dcbb:	a1 24 0f 03 c0       	mov    eax,ds:0xc0030f24
c001dcc0:	83 c4 10             	add    esp,0x10
c001dcc3:	48                   	dec    eax
c001dcc4:	a3 24 0f 03 c0       	mov    ds:0xc0030f24,eax
c001dcc9:	85 c0                	test   eax,eax
c001dccb:	75 09                	jne    c001dcd6 <nanoSleepUntil(unsigned long long)+0x72>
c001dccd:	a1 20 0f 03 c0       	mov    eax,ds:0xc0030f20
c001dcd2:	85 c0                	test   eax,eax
c001dcd4:	75 12                	jne    c001dce8 <nanoSleepUntil(unsigned long long)+0x84>
c001dcd6:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001dcdb:	48                   	dec    eax
c001dcdc:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001dce1:	75 9c                	jne    c001dc7f <nanoSleepUntil(unsigned long long)+0x1b>
c001dce3:	fb                   	sti    
c001dce4:	83 c4 0c             	add    esp,0xc
c001dce7:	c3                   	ret    
c001dce8:	c7 05 20 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f20,0x0
c001dcf2:	e8 28 fd ff ff       	call   c001da1f <schedule()>
c001dcf7:	eb dd                	jmp    c001dcd6 <nanoSleepUntil(unsigned long long)+0x72>

c001dcf9 <nanoSleep(unsigned long long)>:
c001dcf9:	a1 70 e0 02 c0       	mov    eax,ds:0xc002e070
c001dcfe:	8b 15 74 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e074
c001dd04:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001dd08:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001dd0c:	e9 53 ff ff ff       	jmp    c001dc64 <nanoSleepUntil(unsigned long long)>

c001dd11 <sleep(unsigned long long)>:
c001dd11:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001dd19:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001dd1e:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001dd22:	01 ca                	add    edx,ecx
c001dd24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dd28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001dd2c:	eb cb                	jmp    c001dcf9 <nanoSleep(unsigned long long)>

c001dd2e <Semaphore::acquire()>:
c001dd2e:	83 ec 0c             	sub    esp,0xc
c001dd31:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dd35:	fa                   	cli    
c001dd36:	a1 24 0f 03 c0       	mov    eax,ds:0xc0030f24
c001dd3b:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001dd41:	8d 48 01             	lea    ecx,[eax+0x1]
c001dd44:	89 0d 24 0f 03 c0    	mov    DWORD PTR ds:0xc0030f24,ecx
c001dd4a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001dd4d:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001dd4f:	7d 28                	jge    c001dd79 <Semaphore::acquire()+0x4b>
c001dd51:	41                   	inc    ecx
c001dd52:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001dd55:	a3 24 0f 03 c0       	mov    ds:0xc0030f24,eax
c001dd5a:	85 c0                	test   eax,eax
c001dd5c:	75 09                	jne    c001dd67 <Semaphore::acquire()+0x39>
c001dd5e:	a1 20 0f 03 c0       	mov    eax,ds:0xc0030f20
c001dd63:	85 c0                	test   eax,eax
c001dd65:	75 4e                	jne    c001ddb5 <Semaphore::acquire()+0x87>
c001dd67:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001dd6c:	48                   	dec    eax
c001dd6d:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001dd72:	75 01                	jne    c001dd75 <Semaphore::acquire()+0x47>
c001dd74:	fb                   	sti    
c001dd75:	83 c4 0c             	add    esp,0xc
c001dd78:	c3                   	ret    
c001dd79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd7e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001dd85:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001dd88:	85 c9                	test   ecx,ecx
c001dd8a:	74 3a                	je     c001ddc6 <Semaphore::acquire()+0x98>
c001dd8c:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001dd8f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dd95:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001dd98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd9d:	83 ec 0c             	sub    esp,0xc
c001dda0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001dda3:	6a 05                	push   0x5
c001dda5:	e8 4b fe ff ff       	call   c001dbf5 <blockTask(TaskState)>
c001ddaa:	a1 24 0f 03 c0       	mov    eax,ds:0xc0030f24
c001ddaf:	83 c4 10             	add    esp,0x10
c001ddb2:	48                   	dec    eax
c001ddb3:	eb a0                	jmp    c001dd55 <Semaphore::acquire()+0x27>
c001ddb5:	c7 05 20 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f20,0x0
c001ddbf:	e8 5b fc ff ff       	call   c001da1f <schedule()>
c001ddc4:	eb a1                	jmp    c001dd67 <Semaphore::acquire()+0x39>
c001ddc6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ddcb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ddce:	eb c8                	jmp    c001dd98 <Semaphore::acquire()+0x6a>

c001ddd0 <taskReturned>:
c001ddd0:	83 ec 18             	sub    esp,0x18
c001ddd3:	68 88 bc 02 c0       	push   0xc002bc88
c001ddd8:	e8 b2 c0 ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c001dddd:	83 c4 10             	add    esp,0x10
c001dde0:	83 ec 0c             	sub    esp,0xc
c001dde3:	6a 02                	push   0x2
c001dde5:	e8 0b fe ff ff       	call   c001dbf5 <blockTask(TaskState)>
c001ddea:	fa                   	cli    
c001ddeb:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001ddf1:	e8 29 fc ff ff       	call   c001da1f <schedule()>
c001ddf6:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001ddfb:	83 c4 10             	add    esp,0x10
c001ddfe:	48                   	dec    eax
c001ddff:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001de04:	85 c0                	test   eax,eax
c001de06:	75 d8                	jne    c001dde0 <taskReturned+0x10>
c001de08:	fb                   	sti    
c001de09:	eb d5                	jmp    c001dde0 <taskReturned+0x10>

c001de0b <Thr::processFromPID(int)>:
c001de0b:	57                   	push   edi
c001de0c:	56                   	push   esi
c001de0d:	53                   	push   ebx
c001de0e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001de12:	fa                   	cli    
c001de13:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001de19:	83 ec 0c             	sub    esp,0xc
c001de1c:	68 44 0f 03 c0       	push   0xc0030f44
c001de21:	e8 b4 a9 00 00       	call   c00287da <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001de26:	83 c4 10             	add    esp,0x10
c001de29:	89 c7                	mov    edi,eax
c001de2b:	eb 14                	jmp    c001de41 <Thr::processFromPID(int)+0x36>
c001de2d:	83 ec 0c             	sub    esp,0xc
c001de30:	68 44 0f 03 c0       	push   0xc0030f44
c001de35:	e8 a0 a9 00 00       	call   c00287da <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001de3a:	83 c4 10             	add    esp,0x10
c001de3d:	39 f8                	cmp    eax,edi
c001de3f:	74 49                	je     c001de8a <Thr::processFromPID(int)+0x7f>
c001de41:	83 ec 0c             	sub    esp,0xc
c001de44:	68 44 0f 03 c0       	push   0xc0030f44
c001de49:	e8 8c a9 00 00       	call   c00287da <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001de4e:	c7 04 24 44 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f44
c001de55:	89 c3                	mov    ebx,eax
c001de57:	e8 86 a9 00 00       	call   c00287e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001de5c:	58                   	pop    eax
c001de5d:	5a                   	pop    edx
c001de5e:	53                   	push   ebx
c001de5f:	68 44 0f 03 c0       	push   0xc0030f44
c001de64:	e8 27 aa 00 00       	call   c0028890 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001de69:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de6c:	83 c4 10             	add    esp,0x10
c001de6f:	39 30                	cmp    DWORD PTR [eax],esi
c001de71:	75 ba                	jne    c001de2d <Thr::processFromPID(int)+0x22>
c001de73:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001de78:	48                   	dec    eax
c001de79:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001de7e:	74 07                	je     c001de87 <Thr::processFromPID(int)+0x7c>
c001de80:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de83:	5b                   	pop    ebx
c001de84:	5e                   	pop    esi
c001de85:	5f                   	pop    edi
c001de86:	c3                   	ret    
c001de87:	fb                   	sti    
c001de88:	eb f6                	jmp    c001de80 <Thr::processFromPID(int)+0x75>
c001de8a:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001de8f:	48                   	dec    eax
c001de90:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001de95:	75 05                	jne    c001de9c <Thr::processFromPID(int)+0x91>
c001de97:	fb                   	sti    
c001de98:	5b                   	pop    ebx
c001de99:	5e                   	pop    esi
c001de9a:	5f                   	pop    edi
c001de9b:	c3                   	ret    
c001de9c:	5b                   	pop    ebx
c001de9d:	31 c0                	xor    eax,eax
c001de9f:	5e                   	pop    esi
c001dea0:	5f                   	pop    edi
c001dea1:	c3                   	ret    

c001dea2 <unblockTask(ThreadControlBlock*)>:
c001dea2:	53                   	push   ebx
c001dea3:	83 ec 08             	sub    esp,0x8
c001dea6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001deaa:	fa                   	cli    
c001deab:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001deb1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001deb4:	85 c0                	test   eax,eax
c001deb6:	74 5a                	je     c001df12 <unblockTask(ThreadControlBlock*)+0x70>
c001deb8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001debb:	48                   	dec    eax
c001debc:	74 31                	je     c001deef <unblockTask(ThreadControlBlock*)+0x4d>
c001debe:	83 ec 0c             	sub    esp,0xc
c001dec1:	68 44 0f 03 c0       	push   0xc0030f44
c001dec6:	e8 0f a9 00 00       	call   c00287da <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001decb:	83 c4 10             	add    esp,0x10
c001dece:	85 c0                	test   eax,eax
c001ded0:	75 17                	jne    c001dee9 <unblockTask(ThreadControlBlock*)+0x47>
c001ded2:	eb 50                	jmp    c001df24 <unblockTask(ThreadControlBlock*)+0x82>
c001ded4:	83 ec 08             	sub    esp,0x8
c001ded7:	50                   	push   eax
c001ded8:	68 44 0f 03 c0       	push   0xc0030f44
c001dedd:	e8 80 ac 00 00       	call   c0028b62 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001dee2:	83 c4 10             	add    esp,0x10
c001dee5:	85 c0                	test   eax,eax
c001dee7:	74 3b                	je     c001df24 <unblockTask(ThreadControlBlock*)+0x82>
c001dee9:	39 c3                	cmp    ebx,eax
c001deeb:	75 e7                	jne    c001ded4 <unblockTask(ThreadControlBlock*)+0x32>
c001deed:	eb 10                	jmp    c001deff <unblockTask(ThreadControlBlock*)+0x5d>
c001deef:	83 ec 0c             	sub    esp,0xc
c001def2:	68 2a bc 02 c0       	push   0xc002bc2a
c001def7:	e8 27 48 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c001defc:	83 c4 10             	add    esp,0x10
c001deff:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001df04:	48                   	dec    eax
c001df05:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001df0a:	75 01                	jne    c001df0d <unblockTask(ThreadControlBlock*)+0x6b>
c001df0c:	fb                   	sti    
c001df0d:	83 c4 08             	add    esp,0x8
c001df10:	5b                   	pop    ebx
c001df11:	c3                   	ret    
c001df12:	83 ec 0c             	sub    esp,0xc
c001df15:	68 13 bc 02 c0       	push   0xc002bc13
c001df1a:	e8 04 48 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c001df1f:	83 c4 10             	add    esp,0x10
c001df22:	eb db                	jmp    c001deff <unblockTask(ThreadControlBlock*)+0x5d>
c001df24:	83 ec 08             	sub    esp,0x8
c001df27:	53                   	push   ebx
c001df28:	68 44 0f 03 c0       	push   0xc0030f44
c001df2d:	e8 5e a9 00 00       	call   c0028890 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001df32:	83 c4 10             	add    esp,0x10
c001df35:	eb c8                	jmp    c001deff <unblockTask(ThreadControlBlock*)+0x5d>

c001df37 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001df37:	55                   	push   ebp
c001df38:	57                   	push   edi
c001df39:	56                   	push   esi
c001df3a:	53                   	push   ebx
c001df3b:	83 ec 1c             	sub    esp,0x1c
c001df3e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001df42:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df45:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001df4b:	85 ff                	test   edi,edi
c001df4d:	7e 20                	jle    c001df6f <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001df4f:	31 f6                	xor    esi,esi
c001df51:	83 ec 0c             	sub    esp,0xc
c001df54:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001df5b:	46                   	inc    esi
c001df5c:	e8 48 16 ff ff       	call   c000f5a9 <free>
c001df61:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df64:	83 c4 10             	add    esp,0x10
c001df67:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001df6d:	7f e2                	jg     c001df51 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001df6f:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001df79:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001df7e:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001df81:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001df84:	d3 c0                	rol    eax,cl
c001df86:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001df8d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001df90:	89 f7                	mov    edi,esi
c001df92:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001df9a:	0f 85 64 01 00 00    	jne    c001e104 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001dfa0:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001dfa6:	85 ed                	test   ebp,ebp
c001dfa8:	74 1b                	je     c001dfc5 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001dfaa:	83 ec 0c             	sub    esp,0xc
c001dfad:	55                   	push   ebp
c001dfae:	e8 81 bc ff ff       	call   c0019c34 <EnvVarContainer::~EnvVarContainer()>
c001dfb3:	59                   	pop    ecx
c001dfb4:	5e                   	pop    esi
c001dfb5:	6a 0c                	push   0xc
c001dfb7:	55                   	push   ebp
c001dfb8:	e8 8e 46 ff ff       	call   c001264b <operator delete(void*, unsigned long)>
c001dfbd:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001dfc0:	83 c4 10             	add    esp,0x10
c001dfc3:	89 f7                	mov    edi,esi
c001dfc5:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001dfcb:	85 c0                	test   eax,eax
c001dfcd:	0f 84 aa 00 00 00    	je     c001e07d <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001dfd3:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001dfd6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001dfda:	31 c9                	xor    ecx,ecx
c001dfdc:	eb 10                	jmp    c001dfee <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001dfde:	41                   	inc    ecx
c001dfdf:	83 f9 10             	cmp    ecx,0x10
c001dfe2:	0f 84 95 00 00 00    	je     c001e07d <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001dfe8:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001dfee:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001dff5:	d3 fa                	sar    edx,cl
c001dff7:	83 e2 01             	and    edx,0x1
c001dffa:	74 e2                	je     c001dfde <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dffc:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001dfff:	01 ca                	add    edx,ecx
c001e001:	89 d5                	mov    ebp,edx
c001e003:	c1 e5 05             	shl    ebp,0x5
c001e006:	01 ea                	add    edx,ebp
c001e008:	01 d0                	add    eax,edx
c001e00a:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e010:	83 fd 07             	cmp    ebp,0x7
c001e013:	75 c9                	jne    c001dfde <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e015:	05 40 02 00 00       	add    eax,0x240
c001e01a:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e01d:	83 fd ff             	cmp    ebp,0xffffffff
c001e020:	0f 8c e6 00 00 00    	jl     c001e10c <cleanupTerminatedTask(ThreadControlBlock*)+0x1d5>
c001e026:	0f 84 97 01 00 00    	je     c001e1c3 <cleanupTerminatedTask(ThreadControlBlock*)+0x28c>
c001e02c:	85 ed                	test   ebp,ebp
c001e02e:	0f 84 7e 01 00 00    	je     c001e1b2 <cleanupTerminatedTask(ThreadControlBlock*)+0x27b>
c001e034:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e036:	75 a6                	jne    c001dfde <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e038:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e03e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e042:	01 d0                	add    eax,edx
c001e044:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e048:	83 ec 0c             	sub    esp,0xc
c001e04b:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e051:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e054:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e05a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e061:	50                   	push   eax
c001e062:	e8 3b fe ff ff       	call   c001dea2 <unblockTask(ThreadControlBlock*)>
c001e067:	83 c4 10             	add    esp,0x10
c001e06a:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e06d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e071:	89 f7                	mov    edi,esi
c001e073:	41                   	inc    ecx
c001e074:	83 f9 10             	cmp    ecx,0x10
c001e077:	0f 85 6b ff ff ff    	jne    c001dfe8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e07d:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e083:	85 c0                	test   eax,eax
c001e085:	74 5d                	je     c001e0e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e087:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e08d:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e093:	74 4f                	je     c001e0e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e095:	83 ec 0c             	sub    esp,0xc
c001e098:	68 44 0f 03 c0       	push   0xc0030f44
c001e09d:	e8 38 a7 00 00       	call   c00287da <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e0a2:	c7 04 24 44 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f44
c001e0a9:	89 c7                	mov    edi,eax
c001e0ab:	e8 0e a7 00 00       	call   c00287be <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e0b0:	83 c4 10             	add    esp,0x10
c001e0b3:	84 c0                	test   al,al
c001e0b5:	0f 84 c2 00 00 00    	je     c001e17d <cleanupTerminatedTask(ThreadControlBlock*)+0x246>
c001e0bb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e0be:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e0c4:	85 d2                	test   edx,edx
c001e0c6:	74 0f                	je     c001e0d7 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e0c8:	83 ec 0c             	sub    esp,0xc
c001e0cb:	8b 02                	mov    eax,DWORD PTR [edx]
c001e0cd:	52                   	push   edx
c001e0ce:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e0d1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e0d4:	83 c4 10             	add    esp,0x10
c001e0d7:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e0e1:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e0e4:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e0ea:	85 db                	test   ebx,ebx
c001e0ec:	74 16                	je     c001e104 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e0ee:	83 ec 0c             	sub    esp,0xc
c001e0f1:	53                   	push   ebx
c001e0f2:	e8 bd 37 ff ff       	call   c00118b4 <VAS::~VAS()>
c001e0f7:	58                   	pop    eax
c001e0f8:	5a                   	pop    edx
c001e0f9:	6a 14                	push   0x14
c001e0fb:	53                   	push   ebx
c001e0fc:	e8 4a 45 ff ff       	call   c001264b <operator delete(void*, unsigned long)>
c001e101:	83 c4 10             	add    esp,0x10
c001e104:	83 c4 1c             	add    esp,0x1c
c001e107:	5b                   	pop    ebx
c001e108:	5e                   	pop    esi
c001e109:	5f                   	pop    edi
c001e10a:	5d                   	pop    ebp
c001e10b:	c3                   	ret    
c001e10c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e110:	83 ec 0c             	sub    esp,0xc
c001e113:	68 bc bc 02 c0       	push   0xc002bcbc
c001e118:	e8 72 bd ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c001e11d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e120:	83 c4 10             	add    esp,0x10
c001e123:	89 f7                	mov    edi,esi
c001e125:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e129:	e9 b0 fe ff ff       	jmp    c001dfde <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e12e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e134:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e13a:	75 1c                	jne    c001e158 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e13c:	83 ec 0c             	sub    esp,0xc
c001e13f:	68 24 bd 02 c0       	push   0xc002bd24
c001e144:	e8 da 45 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c001e149:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e150:	e8 a0 fa ff ff       	call   c001dbf5 <blockTask(TaskState)>
c001e155:	83 c4 10             	add    esp,0x10
c001e158:	83 ec 08             	sub    esp,0x8
c001e15b:	56                   	push   esi
c001e15c:	68 44 0f 03 c0       	push   0xc0030f44
c001e161:	e8 2a a7 00 00       	call   c0028890 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e166:	c7 04 24 44 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f44
c001e16d:	e8 68 a6 00 00       	call   c00287da <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e172:	83 c4 10             	add    esp,0x10
c001e175:	39 f8                	cmp    eax,edi
c001e177:	0f 84 3e ff ff ff    	je     c001e0bb <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e17d:	83 ec 0c             	sub    esp,0xc
c001e180:	68 44 0f 03 c0       	push   0xc0030f44
c001e185:	e8 50 a6 00 00       	call   c00287da <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e18a:	c7 04 24 44 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f44
c001e191:	89 c6                	mov    esi,eax
c001e193:	e8 4a a6 00 00       	call   c00287e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e198:	83 c4 10             	add    esp,0x10
c001e19b:	39 f3                	cmp    ebx,esi
c001e19d:	74 b9                	je     c001e158 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e19f:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e1a2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e1a5:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e1ab:	75 ab                	jne    c001e158 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e1ad:	e9 7c ff ff ff       	jmp    c001e12e <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e1b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e1b6:	83 ec 0c             	sub    esp,0xc
c001e1b9:	68 f0 bc 02 c0       	push   0xc002bcf0
c001e1be:	e9 55 ff ff ff       	jmp    c001e118 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e1>
c001e1c3:	8b 36                	mov    esi,DWORD PTR [esi]
c001e1c5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e1c9:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e1cc:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e1cf:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e1d5:	01 d7                	add    edi,edx
c001e1d7:	89 f8                	mov    eax,edi
c001e1d9:	e9 66 fe ff ff       	jmp    c001e044 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e1de <cleanerTaskFunction(void*)>:
c001e1de:	53                   	push   ebx
c001e1df:	83 ec 08             	sub    esp,0x8
c001e1e2:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001e1e7:	48                   	dec    eax
c001e1e8:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001e1ed:	75 01                	jne    c001e1f0 <cleanerTaskFunction(void*)+0x12>
c001e1ef:	fb                   	sti    
c001e1f0:	fa                   	cli    
c001e1f1:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001e1f6:	80 3d 0c 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030f0c,0x0
c001e1fd:	8d 50 01             	lea    edx,[eax+0x1]
c001e200:	89 15 28 0f 03 c0    	mov    DWORD PTR ds:0xc0030f28,edx
c001e206:	0f 84 a1 00 00 00    	je     c001e2ad <cleanerTaskFunction(void*)+0xcf>
c001e20c:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001e211:	85 c0                	test   eax,eax
c001e213:	75 01                	jne    c001e216 <cleanerTaskFunction(void*)+0x38>
c001e215:	fb                   	sti    
c001e216:	c6 05 0c 0f 03 c0 00 	mov    BYTE PTR ds:0xc0030f0c,0x0
c001e21d:	fa                   	cli    
c001e21e:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001e224:	ff 05 24 0f 03 c0    	inc    DWORD PTR ds:0xc0030f24
c001e22a:	fa                   	cli    
c001e22b:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001e231:	eb 26                	jmp    c001e259 <cleanerTaskFunction(void*)+0x7b>
c001e233:	83 ec 0c             	sub    esp,0xc
c001e236:	68 2c 0f 03 c0       	push   0xc0030f2c
c001e23b:	e8 9a a5 00 00       	call   c00287da <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e240:	c7 04 24 2c 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f2c
c001e247:	89 c3                	mov    ebx,eax
c001e249:	e8 94 a5 00 00       	call   c00287e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e24e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e251:	e8 e1 fc ff ff       	call   c001df37 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e256:	83 c4 10             	add    esp,0x10
c001e259:	83 ec 0c             	sub    esp,0xc
c001e25c:	68 2c 0f 03 c0       	push   0xc0030f2c
c001e261:	e8 58 a5 00 00       	call   c00287be <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e266:	83 c4 10             	add    esp,0x10
c001e269:	84 c0                	test   al,al
c001e26b:	74 c6                	je     c001e233 <cleanerTaskFunction(void*)+0x55>
c001e26d:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001e272:	48                   	dec    eax
c001e273:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001e278:	75 01                	jne    c001e27b <cleanerTaskFunction(void*)+0x9d>
c001e27a:	fb                   	sti    
c001e27b:	a1 24 0f 03 c0       	mov    eax,ds:0xc0030f24
c001e280:	48                   	dec    eax
c001e281:	a3 24 0f 03 c0       	mov    ds:0xc0030f24,eax
c001e286:	0f 85 56 ff ff ff    	jne    c001e1e2 <cleanerTaskFunction(void*)+0x4>
c001e28c:	a1 20 0f 03 c0       	mov    eax,ds:0xc0030f20
c001e291:	85 c0                	test   eax,eax
c001e293:	0f 84 49 ff ff ff    	je     c001e1e2 <cleanerTaskFunction(void*)+0x4>
c001e299:	c7 05 20 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f20,0x0
c001e2a3:	e8 77 f7 ff ff       	call   c001da1f <schedule()>
c001e2a8:	e9 35 ff ff ff       	jmp    c001e1e2 <cleanerTaskFunction(void*)+0x4>
c001e2ad:	83 ec 0c             	sub    esp,0xc
c001e2b0:	6a 02                	push   0x2
c001e2b2:	e8 18 f9 ff ff       	call   c001dbcf <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e2b7:	83 c4 10             	add    esp,0x10
c001e2ba:	e9 57 ff ff ff       	jmp    c001e216 <cleanerTaskFunction(void*)+0x38>

c001e2bf <terminateTask(int)>:
c001e2bf:	83 ec 14             	sub    esp,0x14
c001e2c2:	fa                   	cli    
c001e2c3:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001e2c9:	ff 05 24 0f 03 c0    	inc    DWORD PTR ds:0xc0030f24
c001e2cf:	fa                   	cli    
c001e2d0:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001e2d6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e2da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2df:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e2e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2e7:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e2ea:	50                   	push   eax
c001e2eb:	68 2c 0f 03 c0       	push   0xc0030f2c
c001e2f0:	e8 9b a5 00 00       	call   c0028890 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e2f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2fa:	83 c4 10             	add    esp,0x10
c001e2fd:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e304:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c001e309:	85 c0                	test   eax,eax
c001e30b:	74 53                	je     c001e360 <terminateTask(int)+0xa1>
c001e30d:	83 ec 0c             	sub    esp,0xc
c001e310:	c6 05 0c 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030f0c,0x1
c001e317:	50                   	push   eax
c001e318:	e8 85 fb ff ff       	call   c001dea2 <unblockTask(ThreadControlBlock*)>
c001e31d:	83 c4 10             	add    esp,0x10
c001e320:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001e325:	48                   	dec    eax
c001e326:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001e32b:	75 01                	jne    c001e32e <terminateTask(int)+0x6f>
c001e32d:	fb                   	sti    
c001e32e:	a1 24 0f 03 c0       	mov    eax,ds:0xc0030f24
c001e333:	48                   	dec    eax
c001e334:	a3 24 0f 03 c0       	mov    ds:0xc0030f24,eax
c001e339:	75 09                	jne    c001e344 <terminateTask(int)+0x85>
c001e33b:	83 3d 20 0f 03 c0 00 	cmp    DWORD PTR ds:0xc0030f20,0x0
c001e342:	75 2e                	jne    c001e372 <terminateTask(int)+0xb3>
c001e344:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001e349:	48                   	dec    eax
c001e34a:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001e34f:	75 01                	jne    c001e352 <terminateTask(int)+0x93>
c001e351:	fb                   	sti    
c001e352:	fa                   	cli    
c001e353:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001e359:	e8 c1 f6 ff ff       	call   c001da1f <schedule()>
c001e35e:	eb e4                	jmp    c001e344 <terminateTask(int)+0x85>
c001e360:	83 ec 0c             	sub    esp,0xc
c001e363:	68 41 bc 02 c0       	push   0xc002bc41
c001e368:	e8 b6 43 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c001e36d:	83 c4 10             	add    esp,0x10
c001e370:	eb ae                	jmp    c001e320 <terminateTask(int)+0x61>
c001e372:	c7 05 20 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f20,0x0
c001e37c:	eb db                	jmp    c001e359 <terminateTask(int)+0x9a>

c001e37e <Thr::terminateFromIRQ(int)>:
c001e37e:	83 ec 18             	sub    esp,0x18
c001e381:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e385:	e8 35 ff ff ff       	call   c001e2bf <terminateTask(int)>

c001e38a <Semaphore::release()>:
c001e38a:	83 ec 0c             	sub    esp,0xc
c001e38d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e391:	fa                   	cli    
c001e392:	a1 24 0f 03 c0       	mov    eax,ds:0xc0030f24
c001e397:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001e39d:	8d 48 01             	lea    ecx,[eax+0x1]
c001e3a0:	89 0d 24 0f 03 c0    	mov    DWORD PTR ds:0xc0030f24,ecx
c001e3a6:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e3a9:	85 c9                	test   ecx,ecx
c001e3ab:	74 3c                	je     c001e3e9 <Semaphore::release()+0x5f>
c001e3ad:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001e3b0:	83 ec 0c             	sub    esp,0xc
c001e3b3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e3b6:	51                   	push   ecx
c001e3b7:	e8 e6 fa ff ff       	call   c001dea2 <unblockTask(ThreadControlBlock*)>
c001e3bc:	a1 24 0f 03 c0       	mov    eax,ds:0xc0030f24
c001e3c1:	83 c4 10             	add    esp,0x10
c001e3c4:	48                   	dec    eax
c001e3c5:	a3 24 0f 03 c0       	mov    ds:0xc0030f24,eax
c001e3ca:	85 c0                	test   eax,eax
c001e3cc:	75 09                	jne    c001e3d7 <Semaphore::release()+0x4d>
c001e3ce:	a1 20 0f 03 c0       	mov    eax,ds:0xc0030f20
c001e3d3:	85 c0                	test   eax,eax
c001e3d5:	75 17                	jne    c001e3ee <Semaphore::release()+0x64>
c001e3d7:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001e3dc:	48                   	dec    eax
c001e3dd:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001e3e2:	75 01                	jne    c001e3e5 <Semaphore::release()+0x5b>
c001e3e4:	fb                   	sti    
c001e3e5:	83 c4 0c             	add    esp,0xc
c001e3e8:	c3                   	ret    
c001e3e9:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001e3ec:	eb d7                	jmp    c001e3c5 <Semaphore::release()+0x3b>
c001e3ee:	c7 05 20 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f20,0x0
c001e3f8:	e8 22 f6 ff ff       	call   c001da1f <schedule()>
c001e3fd:	eb d8                	jmp    c001e3d7 <Semaphore::release()+0x4d>

c001e3ff <__static_initialization_and_destruction_0(int, int)>:
c001e3ff:	83 ec 0c             	sub    esp,0xc
c001e402:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e407:	0f 85 88 00 00 00    	jne    c001e495 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e40d:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e415:	75 7e                	jne    c001e495 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e417:	83 ec 0c             	sub    esp,0xc
c001e41a:	68 44 0f 03 c0       	push   0xc0030f44
c001e41f:	e8 fc a6 00 00       	call   c0028b20 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e424:	83 c4 10             	add    esp,0x10
c001e427:	83 ec 04             	sub    esp,0x4
c001e42a:	68 d8 c7 02 c0       	push   0xc002c7d8
c001e42f:	68 44 0f 03 c0       	push   0xc0030f44
c001e434:	68 d4 8a 02 c0       	push   0xc0028ad4
c001e439:	e8 87 41 ff ff       	call   c00125c5 <__cxa_atexit>
c001e43e:	83 c4 10             	add    esp,0x10
c001e441:	83 ec 0c             	sub    esp,0xc
c001e444:	68 38 0f 03 c0       	push   0xc0030f38
c001e449:	e8 d2 a6 00 00       	call   c0028b20 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e44e:	83 c4 10             	add    esp,0x10
c001e451:	83 ec 04             	sub    esp,0x4
c001e454:	68 d8 c7 02 c0       	push   0xc002c7d8
c001e459:	68 38 0f 03 c0       	push   0xc0030f38
c001e45e:	68 d4 8a 02 c0       	push   0xc0028ad4
c001e463:	e8 5d 41 ff ff       	call   c00125c5 <__cxa_atexit>
c001e468:	83 c4 10             	add    esp,0x10
c001e46b:	83 ec 0c             	sub    esp,0xc
c001e46e:	68 2c 0f 03 c0       	push   0xc0030f2c
c001e473:	e8 a8 a6 00 00       	call   c0028b20 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e478:	83 c4 10             	add    esp,0x10
c001e47b:	83 ec 04             	sub    esp,0x4
c001e47e:	68 d8 c7 02 c0       	push   0xc002c7d8
c001e483:	68 2c 0f 03 c0       	push   0xc0030f2c
c001e488:	68 d4 8a 02 c0       	push   0xc0028ad4
c001e48d:	e8 33 41 ff ff       	call   c00125c5 <__cxa_atexit>
c001e492:	83 c4 10             	add    esp,0x10
c001e495:	90                   	nop
c001e496:	83 c4 0c             	add    esp,0xc
c001e499:	c3                   	ret    

c001e49a <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e49a:	83 ec 0c             	sub    esp,0xc
c001e49d:	83 ec 08             	sub    esp,0x8
c001e4a0:	68 ff ff 00 00       	push   0xffff
c001e4a5:	6a 01                	push   0x1
c001e4a7:	e8 53 ff ff ff       	call   c001e3ff <__static_initialization_and_destruction_0(int, int)>
c001e4ac:	83 c4 10             	add    esp,0x10
c001e4af:	83 c4 0c             	add    esp,0xc
c001e4b2:	c3                   	ret    

c001e4b3 <Vm::inbv(unsigned short)>:
c001e4b3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e4b7:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e4bc:	75 06                	jne    c001e4c4 <Vm::inbv(unsigned short)+0x11>
c001e4be:	a0 8c 0f 03 c0       	mov    al,ds:0xc0030f8c
c001e4c3:	c3                   	ret    
c001e4c4:	ec                   	in     al,dx
c001e4c5:	c3                   	ret    

c001e4c6 <Vm::outbv(unsigned short, unsigned char)>:
c001e4c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e4ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e4ce:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e4d3:	75 25                	jne    c001e4fa <Vm::outbv(unsigned short, unsigned char)+0x34>
c001e4d5:	8b 0d 8c 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030f8c
c001e4db:	8d 51 01             	lea    edx,[ecx+0x1]
c001e4de:	88 81 a0 0f 03 c0    	mov    BYTE PTR [ecx-0x3ffcf060],al
c001e4e4:	89 15 8c 0f 03 c0    	mov    DWORD PTR ds:0xc0030f8c,edx
c001e4ea:	83 fa 20             	cmp    edx,0x20
c001e4ed:	75 0c                	jne    c001e4fb <Vm::outbv(unsigned short, unsigned char)+0x35>
c001e4ef:	c7 05 8c 0f 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0030f8c,0x1f
c001e4f9:	c3                   	ret    
c001e4fa:	ee                   	out    dx,al
c001e4fb:	c3                   	ret    

c001e4fc <Vm::realToLinear(unsigned short, unsigned short)>:
c001e4fc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e501:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e506:	c1 e0 04             	shl    eax,0x4
c001e509:	01 d0                	add    eax,edx
c001e50b:	c3                   	ret    

c001e50c <Vm::getSegment(unsigned int)>:
c001e50c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e510:	c1 e8 10             	shr    eax,0x10
c001e513:	c3                   	ret    

c001e514 <Vm::getOffset(unsigned int)>:
c001e514:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e518:	c3                   	ret    

c001e519 <Vm::mainloop2()>:
c001e519:	83 ec 18             	sub    esp,0x18
c001e51c:	fa                   	cli    
c001e51d:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001e523:	6a 02                	push   0x2
c001e525:	c6 05 85 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030f85,0x1
c001e52c:	e8 9e f6 ff ff       	call   c001dbcf <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e531:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e536:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e53a:	52                   	push   edx
c001e53b:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e53f:	52                   	push   edx
c001e540:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e544:	52                   	push   edx
c001e545:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e549:	50                   	push   eax
c001e54a:	e8 ab 1d fe ff       	call   c00002fa <goToVM86>
c001e54f:	83 c4 2c             	add    esp,0x2c
c001e552:	c3                   	ret    

c001e553 <Vm::mainVm8086Loop(void*)>:
c001e553:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001e558:	48                   	dec    eax
c001e559:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001e55e:	75 01                	jne    c001e561 <Vm::mainVm8086Loop(void*)+0xe>
c001e560:	fb                   	sti    
c001e561:	eb b6                	jmp    c001e519 <Vm::mainloop2()>

c001e563 <Vm::mainloop3(unsigned long)>:
c001e563:	83 ec 18             	sub    esp,0x18
c001e566:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e56a:	fa                   	cli    
c001e56b:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001e571:	6a 02                	push   0x2
c001e573:	c6 05 84 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030f84,0x1
c001e57a:	a3 80 0f 03 c0       	mov    ds:0xc0030f80,eax
c001e57f:	e8 4b f6 ff ff       	call   c001dbcf <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e584:	83 c4 1c             	add    esp,0x1c
c001e587:	eb 90                	jmp    c001e519 <Vm::mainloop2()>

c001e589 <Vm::initialise8086()>:
c001e589:	83 ec 0c             	sub    esp,0xc
c001e58c:	68 80 00 00 00       	push   0x80
c001e591:	6a 00                	push   0x0
c001e593:	68 53 e5 01 c0       	push   0xc001e553
c001e598:	ff 35 50 0f 03 c0    	push   DWORD PTR ds:0xc0030f50
c001e59e:	e8 57 f2 ff ff       	call   c001d7fa <Process::createThread(void (*)(void*), void*, int)>
c001e5a3:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e5aa:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c001e5af:	68 00 01 00 00       	push   0x100
c001e5b4:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001e5b9:	6a 00                	push   0x0
c001e5bb:	6a 00                	push   0x0
c001e5bd:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e5c3:	e8 5e 37 ff ff       	call   c0011d26 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e5c8:	83 c4 2c             	add    esp,0x2c
c001e5cb:	c3                   	ret    

c001e5cc <Vm::finish8086()>:
c001e5cc:	53                   	push   ebx
c001e5cd:	83 ec 08             	sub    esp,0x8
c001e5d0:	fa                   	cli    
c001e5d1:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001e5d7:	80 3d 84 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030f84,0x0
c001e5de:	75 15                	jne    c001e5f5 <Vm::finish8086()+0x29>
c001e5e0:	e8 3a f4 ff ff       	call   c001da1f <schedule()>
c001e5e5:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001e5ea:	48                   	dec    eax
c001e5eb:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001e5f0:	75 de                	jne    c001e5d0 <Vm::finish8086()+0x4>
c001e5f2:	fb                   	sti    
c001e5f3:	eb db                	jmp    c001e5d0 <Vm::finish8086()+0x4>
c001e5f5:	83 ec 0c             	sub    esp,0xc
c001e5f8:	8b 1d 80 0f 03 c0    	mov    ebx,DWORD PTR ds:0xc0030f80
c001e5fe:	ff 35 88 0f 03 c0    	push   DWORD PTR ds:0xc0030f88
c001e604:	c6 05 84 0f 03 c0 00 	mov    BYTE PTR ds:0xc0030f84,0x0
c001e60b:	e8 92 f8 ff ff       	call   c001dea2 <unblockTask(ThreadControlBlock*)>
c001e610:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001e615:	83 c4 10             	add    esp,0x10
c001e618:	8d 50 ff             	lea    edx,[eax-0x1]
c001e61b:	89 15 28 0f 03 c0    	mov    DWORD PTR ds:0xc0030f28,edx
c001e621:	85 d2                	test   edx,edx
c001e623:	75 01                	jne    c001e626 <Vm::finish8086()+0x5a>
c001e625:	fb                   	sti    
c001e626:	89 d8                	mov    eax,ebx
c001e628:	83 c4 08             	add    esp,0x8
c001e62b:	5b                   	pop    ebx
c001e62c:	c3                   	ret    

c001e62d <Vm::getOutput8086(unsigned char*)>:
c001e62d:	57                   	push   edi
c001e62e:	8b 0d 8c 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030f8c
c001e634:	56                   	push   esi
c001e635:	be a0 0f 03 c0       	mov    esi,0xc0030fa0
c001e63a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e63e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e640:	a1 8c 0f 03 c0       	mov    eax,ds:0xc0030f8c
c001e645:	5e                   	pop    esi
c001e646:	c7 05 8c 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f8c,0x0
c001e650:	5f                   	pop    edi
c001e651:	c3                   	ret    

c001e652 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e652:	55                   	push   ebp
c001e653:	57                   	push   edi
c001e654:	56                   	push   esi
c001e655:	53                   	push   ebx
c001e656:	83 ec 2c             	sub    esp,0x2c
c001e659:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e65d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001e661:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e665:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e669:	fa                   	cli    
c001e66a:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001e670:	0f b6 35 85 0f 03 c0 	movzx  esi,BYTE PTR ds:0xc0030f85
c001e677:	89 f0                	mov    eax,esi
c001e679:	84 c0                	test   al,al
c001e67b:	75 1d                	jne    c001e69a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001e67d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e681:	e8 99 f3 ff ff       	call   c001da1f <schedule()>
c001e686:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001e68b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e68f:	48                   	dec    eax
c001e690:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001e695:	75 d2                	jne    c001e669 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e697:	fb                   	sti    
c001e698:	eb cf                	jmp    c001e669 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e69a:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c001e69f:	c7 05 8c 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f8c,0x0
c001e6a9:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001e6ad:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001e6b1:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001e6b5:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001e6b9:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e6bd:	50                   	push   eax
c001e6be:	6a 20                	push   0x20
c001e6c0:	6a 00                	push   0x0
c001e6c2:	68 a0 0f 03 c0       	push   0xc0030fa0
c001e6c7:	e8 84 20 fe ff       	call   c0000750 <memset>
c001e6cc:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e6d3:	e8 c1 0e ff ff       	call   c000f599 <malloc>
c001e6d8:	83 c4 0c             	add    esp,0xc
c001e6db:	89 c3                	mov    ebx,eax
c001e6dd:	ff 35 50 0f 03 c0    	push   DWORD PTR ds:0xc0030f50
c001e6e3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e6e7:	50                   	push   eax
c001e6e8:	e8 95 45 ff ff       	call   c0012c82 <File::File(char const*, Process*)>
c001e6ed:	83 c4 10             	add    esp,0x10
c001e6f0:	85 db                	test   ebx,ebx
c001e6f2:	75 0a                	jne    c001e6fe <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001e6f4:	83 ec 0c             	sub    esp,0xc
c001e6f7:	68 4c bd 02 c0       	push   0xc002bd4c
c001e6fc:	eb 3e                	jmp    c001e73c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e6fe:	50                   	push   eax
c001e6ff:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e703:	50                   	push   eax
c001e704:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e708:	50                   	push   eax
c001e709:	53                   	push   ebx
c001e70a:	e8 83 48 ff ff       	call   c0012f92 <File::stat(unsigned long long*, bool*)>
c001e70f:	83 c4 10             	add    esp,0x10
c001e712:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001e717:	74 0a                	je     c001e723 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e719:	83 ec 0c             	sub    esp,0xc
c001e71c:	68 60 bd 02 c0       	push   0xc002bd60
c001e721:	eb 19                	jmp    c001e73c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e723:	51                   	push   ecx
c001e724:	51                   	push   ecx
c001e725:	6a 01                	push   0x1
c001e727:	53                   	push   ebx
c001e728:	e8 b9 45 ff ff       	call   c0012ce6 <File::open(FileOpenMode)>
c001e72d:	83 c4 10             	add    esp,0x10
c001e730:	85 c0                	test   eax,eax
c001e732:	74 24                	je     c001e758 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001e734:	83 ec 0c             	sub    esp,0xc
c001e737:	68 79 bd 02 c0       	push   0xc002bd79
c001e73c:	e8 4e b7 ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c001e741:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001e746:	83 c4 10             	add    esp,0x10
c001e749:	48                   	dec    eax
c001e74a:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001e74f:	85 c0                	test   eax,eax
c001e751:	75 01                	jne    c001e754 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001e753:	fb                   	sti    
c001e754:	31 f6                	xor    esi,esi
c001e756:	eb 58                	jmp    c001e7b0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001e758:	0f b7 ed             	movzx  ebp,bp
c001e75b:	50                   	push   eax
c001e75c:	0f b7 ff             	movzx  edi,di
c001e75f:	50                   	push   eax
c001e760:	55                   	push   ebp
c001e761:	57                   	push   edi
c001e762:	e8 95 fd ff ff       	call   c001e4fc <Vm::realToLinear(unsigned short, unsigned short)>
c001e767:	5a                   	pop    edx
c001e768:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e76a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e76e:	51                   	push   ecx
c001e76f:	50                   	push   eax
c001e770:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e774:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e778:	53                   	push   ebx
c001e779:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e77c:	83 c4 14             	add    esp,0x14
c001e77f:	53                   	push   ebx
c001e780:	e8 bf 45 ff ff       	call   c0012d44 <File::close()>
c001e785:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001e78a:	83 c4 10             	add    esp,0x10
c001e78d:	48                   	dec    eax
c001e78e:	c6 05 85 0f 03 c0 00 	mov    BYTE PTR ds:0xc0030f85,0x0
c001e795:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001e79a:	85 c0                	test   eax,eax
c001e79c:	75 01                	jne    c001e79f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001e79e:	fb                   	sti    
c001e79f:	83 ec 0c             	sub    esp,0xc
c001e7a2:	ff 35 88 0f 03 c0    	push   DWORD PTR ds:0xc0030f88
c001e7a8:	e8 f5 f6 ff ff       	call   c001dea2 <unblockTask(ThreadControlBlock*)>
c001e7ad:	83 c4 10             	add    esp,0x10
c001e7b0:	83 c4 2c             	add    esp,0x2c
c001e7b3:	89 f0                	mov    eax,esi
c001e7b5:	5b                   	pop    ebx
c001e7b6:	5e                   	pop    esi
c001e7b7:	5f                   	pop    edi
c001e7b8:	5d                   	pop    ebp
c001e7b9:	c3                   	ret    

c001e7ba <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e7ba:	57                   	push   edi
c001e7bb:	56                   	push   esi
c001e7bc:	53                   	push   ebx
c001e7bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e7c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e7c5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e7c9:	83 e8 06             	sub    eax,0x6
c001e7cc:	0f b7 c0             	movzx  eax,ax
c001e7cf:	50                   	push   eax
c001e7d0:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e7d5:	50                   	push   eax
c001e7d6:	e8 21 fd ff ff       	call   c001e4fc <Vm::realToLinear(unsigned short, unsigned short)>
c001e7db:	5a                   	pop    edx
c001e7dc:	5e                   	pop    esi
c001e7dd:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e7e0:	8d 56 fa             	lea    edx,[esi-0x6]
c001e7e3:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e7e9:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e7ec:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e7ef:	83 c2 02             	add    edx,0x2
c001e7f2:	66 89 10             	mov    WORD PTR [eax],dx
c001e7f5:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e7f8:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e7fc:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e7ff:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e803:	89 d6                	mov    esi,edx
c001e805:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e80b:	66 81 e6 ff fd       	and    si,0xfdff
c001e810:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e814:	74 07                	je     c001e81d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e816:	89 d6                	mov    esi,edx
c001e818:	66 81 ce 00 02       	or     si,0x200
c001e81d:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e821:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e826:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e82a:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e832:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e835:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e83d:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e840:	5b                   	pop    ebx
c001e841:	5e                   	pop    esi
c001e842:	5f                   	pop    edi
c001e843:	c3                   	ret    

c001e844 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e844:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e849:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e84e:	c1 e0 04             	shl    eax,0x4
c001e851:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e854:	c3                   	ret    

c001e855 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e855:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e85a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e85f:	c1 e0 04             	shl    eax,0x4
c001e862:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e866:	c3                   	ret    

c001e867 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e867:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e86c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e871:	c1 e0 04             	shl    eax,0x4
c001e874:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e877:	c3                   	ret    

c001e878 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e878:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e87d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e882:	c1 e0 04             	shl    eax,0x4
c001e885:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e889:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e88c:	c3                   	ret    

c001e88d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e88d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e892:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e897:	c1 e0 04             	shl    eax,0x4
c001e89a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e89e:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e8a2:	c3                   	ret    

c001e8a3 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e8a3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e8a8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e8ad:	c1 e0 04             	shl    eax,0x4
c001e8b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e8b4:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e8b7:	c3                   	ret    

c001e8b8 <Vm::faultHandler(regs*)>:
c001e8b8:	55                   	push   ebp
c001e8b9:	57                   	push   edi
c001e8ba:	56                   	push   esi
c001e8bb:	53                   	push   ebx
c001e8bc:	83 ec 1c             	sub    esp,0x1c
c001e8bf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e8c3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001e8c6:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001e8ca:	0f b7 f8             	movzx  edi,ax
c001e8cd:	52                   	push   edx
c001e8ce:	0f b7 c0             	movzx  eax,ax
c001e8d1:	50                   	push   eax
c001e8d2:	e8 25 fc ff ff       	call   c001e4fc <Vm::realToLinear(unsigned short, unsigned short)>
c001e8d7:	5a                   	pop    edx
c001e8d8:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001e8db:	59                   	pop    ecx
c001e8dc:	89 c1                	mov    ecx,eax
c001e8de:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e8e1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e8e5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e8ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e8ee:	0f b7 c5             	movzx  eax,bp
c001e8f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e8f5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001e8f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e8fd:	e8 fa fb ff ff       	call   c001e4fc <Vm::realToLinear(unsigned short, unsigned short)>
c001e902:	5e                   	pop    esi
c001e903:	be 06 00 00 00       	mov    esi,0x6
c001e908:	5a                   	pop    edx
c001e909:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001e90e:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001e913:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001e916:	80 fa 9d             	cmp    dl,0x9d
c001e919:	0f 84 2c 02 00 00    	je     c001eb4b <Vm::faultHandler(regs*)+0x293>
c001e91f:	0f 87 91 00 00 00    	ja     c001e9b6 <Vm::faultHandler(regs*)+0xfe>
c001e925:	80 fa 66             	cmp    dl,0x66
c001e928:	0f 84 98 01 00 00    	je     c001eac6 <Vm::faultHandler(regs*)+0x20e>
c001e92e:	77 47                	ja     c001e977 <Vm::faultHandler(regs*)+0xbf>
c001e930:	80 fa 36             	cmp    dl,0x36
c001e933:	0f 84 80 01 00 00    	je     c001eab9 <Vm::faultHandler(regs*)+0x201>
c001e939:	77 1a                	ja     c001e955 <Vm::faultHandler(regs*)+0x9d>
c001e93b:	80 fa 26             	cmp    dl,0x26
c001e93e:	0f 84 4e 01 00 00    	je     c001ea92 <Vm::faultHandler(regs*)+0x1da>
c001e944:	80 fa 2e             	cmp    dl,0x2e
c001e947:	0f 85 e2 05 00 00    	jne    c001ef2f <Vm::faultHandler(regs*)+0x677>
c001e94d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e950:	31 f6                	xor    esi,esi
c001e952:	41                   	inc    ecx
c001e953:	eb be                	jmp    c001e913 <Vm::faultHandler(regs*)+0x5b>
c001e955:	80 fa 64             	cmp    dl,0x64
c001e958:	0f 84 41 01 00 00    	je     c001ea9f <Vm::faultHandler(regs*)+0x1e7>
c001e95e:	0f 87 48 01 00 00    	ja     c001eaac <Vm::faultHandler(regs*)+0x1f4>
c001e964:	80 fa 3e             	cmp    dl,0x3e
c001e967:	0f 85 c2 05 00 00    	jne    c001ef2f <Vm::faultHandler(regs*)+0x677>
c001e96d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e970:	be 01 00 00 00       	mov    esi,0x1
c001e975:	eb db                	jmp    c001e952 <Vm::faultHandler(regs*)+0x9a>
c001e977:	80 fa 6d             	cmp    dl,0x6d
c001e97a:	0f 84 ec 02 00 00    	je     c001ec6c <Vm::faultHandler(regs*)+0x3b4>
c001e980:	77 17                	ja     c001e999 <Vm::faultHandler(regs*)+0xe1>
c001e982:	80 fa 67             	cmp    dl,0x67
c001e985:	0f 84 48 01 00 00    	je     c001ead3 <Vm::faultHandler(regs*)+0x21b>
c001e98b:	80 fa 6c             	cmp    dl,0x6c
c001e98e:	0f 84 69 02 00 00    	je     c001ebfd <Vm::faultHandler(regs*)+0x345>
c001e994:	e9 96 05 00 00       	jmp    c001ef2f <Vm::faultHandler(regs*)+0x677>
c001e999:	80 fa 6f             	cmp    dl,0x6f
c001e99c:	0f 84 f4 03 00 00    	je     c001ed96 <Vm::faultHandler(regs*)+0x4de>
c001e9a2:	0f 82 59 03 00 00    	jb     c001ed01 <Vm::faultHandler(regs*)+0x449>
c001e9a8:	80 fa 9c             	cmp    dl,0x9c
c001e9ab:	0f 84 2f 01 00 00    	je     c001eae0 <Vm::faultHandler(regs*)+0x228>
c001e9b1:	e9 79 05 00 00       	jmp    c001ef2f <Vm::faultHandler(regs*)+0x677>
c001e9b6:	80 fa ec             	cmp    dl,0xec
c001e9b9:	0f 84 14 05 00 00    	je     c001eed3 <Vm::faultHandler(regs*)+0x61b>
c001e9bf:	77 7b                	ja     c001ea3c <Vm::faultHandler(regs*)+0x184>
c001e9c1:	80 fa e4             	cmp    dl,0xe4
c001e9c4:	0f 84 93 04 00 00    	je     c001ee5d <Vm::faultHandler(regs*)+0x5a5>
c001e9ca:	77 53                	ja     c001ea1f <Vm::faultHandler(regs*)+0x167>
c001e9cc:	80 fa cd             	cmp    dl,0xcd
c001e9cf:	0f 84 d9 01 00 00    	je     c001ebae <Vm::faultHandler(regs*)+0x2f6>
c001e9d5:	80 fa cf             	cmp    dl,0xcf
c001e9d8:	0f 85 51 05 00 00    	jne    c001ef2f <Vm::faultHandler(regs*)+0x677>
c001e9de:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001e9e1:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001e9e4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001e9e8:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001e9eb:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001e9ef:	81 ca 00 02 02 00    	or     edx,0x20200
c001e9f5:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001e9f8:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001e9fc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ea02:	66 c1 e8 09          	shr    ax,0x9
c001ea06:	83 e0 01             	and    eax,0x1
c001ea09:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ea0c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ea0f:	83 c0 06             	add    eax,0x6
c001ea12:	25 ff ff 00 00       	and    eax,0xffff
c001ea17:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001ea1a:	e9 0c 05 00 00       	jmp    c001ef2b <Vm::faultHandler(regs*)+0x673>
c001ea1f:	80 fa e6             	cmp    dl,0xe6
c001ea22:	0f 84 7f 04 00 00    	je     c001eea7 <Vm::faultHandler(regs*)+0x5ef>
c001ea28:	0f 82 4b 04 00 00    	jb     c001ee79 <Vm::faultHandler(regs*)+0x5c1>
c001ea2e:	80 fa e7             	cmp    dl,0xe7
c001ea31:	0f 84 87 04 00 00    	je     c001eebe <Vm::faultHandler(regs*)+0x606>
c001ea37:	e9 f3 04 00 00       	jmp    c001ef2f <Vm::faultHandler(regs*)+0x677>
c001ea3c:	80 fa ef             	cmp    dl,0xef
c001ea3f:	0f 84 d1 04 00 00    	je     c001ef16 <Vm::faultHandler(regs*)+0x65e>
c001ea45:	77 28                	ja     c001ea6f <Vm::faultHandler(regs*)+0x1b7>
c001ea47:	80 fa ed             	cmp    dl,0xed
c001ea4a:	0f 84 9f 04 00 00    	je     c001eeef <Vm::faultHandler(regs*)+0x637>
c001ea50:	80 fa ee             	cmp    dl,0xee
c001ea53:	0f 85 d6 04 00 00    	jne    c001ef2f <Vm::faultHandler(regs*)+0x677>
c001ea59:	50                   	push   eax
c001ea5a:	50                   	push   eax
c001ea5b:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ea5f:	50                   	push   eax
c001ea60:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ea64:	50                   	push   eax
c001ea65:	e8 5c fa ff ff       	call   c001e4c6 <Vm::outbv(unsigned short, unsigned char)>
c001ea6a:	e9 9f 04 00 00       	jmp    c001ef0e <Vm::faultHandler(regs*)+0x656>
c001ea6f:	80 fa fa             	cmp    dl,0xfa
c001ea72:	0f 84 69 01 00 00    	je     c001ebe1 <Vm::faultHandler(regs*)+0x329>
c001ea78:	80 fa fb             	cmp    dl,0xfb
c001ea7b:	0f 84 6e 01 00 00    	je     c001ebef <Vm::faultHandler(regs*)+0x337>
c001ea81:	80 fa f3             	cmp    dl,0xf3
c001ea84:	0f 85 a5 04 00 00    	jne    c001ef2f <Vm::faultHandler(regs*)+0x677>
c001ea8a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea8d:	e9 c0 fe ff ff       	jmp    c001e952 <Vm::faultHandler(regs*)+0x9a>
c001ea92:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea95:	be 02 00 00 00       	mov    esi,0x2
c001ea9a:	e9 b3 fe ff ff       	jmp    c001e952 <Vm::faultHandler(regs*)+0x9a>
c001ea9f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eaa2:	be 03 00 00 00       	mov    esi,0x3
c001eaa7:	e9 a6 fe ff ff       	jmp    c001e952 <Vm::faultHandler(regs*)+0x9a>
c001eaac:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eaaf:	be 04 00 00 00       	mov    esi,0x4
c001eab4:	e9 99 fe ff ff       	jmp    c001e952 <Vm::faultHandler(regs*)+0x9a>
c001eab9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eabc:	be 05 00 00 00       	mov    esi,0x5
c001eac1:	e9 8c fe ff ff       	jmp    c001e952 <Vm::faultHandler(regs*)+0x9a>
c001eac6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eac9:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001eace:	e9 7f fe ff ff       	jmp    c001e952 <Vm::faultHandler(regs*)+0x9a>
c001ead3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ead6:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001eadb:	e9 72 fe ff ff       	jmp    c001e952 <Vm::faultHandler(regs*)+0x9a>
c001eae0:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001eae3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001eae7:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eaec:	74 30                	je     c001eb1e <Vm::faultHandler(regs*)+0x266>
c001eaee:	83 e9 04             	sub    ecx,0x4
c001eaf1:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001eaf7:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001eafd:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001eb00:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001eb03:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001eb09:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001eb0d:	0f 84 15 04 00 00    	je     c001ef28 <Vm::faultHandler(regs*)+0x670>
c001eb13:	80 ce 02             	or     dh,0x2
c001eb16:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001eb19:	e9 0a 04 00 00       	jmp    c001ef28 <Vm::faultHandler(regs*)+0x670>
c001eb1e:	83 e9 02             	sub    ecx,0x2
c001eb21:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001eb27:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001eb2a:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001eb2e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001eb34:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001eb38:	74 05                	je     c001eb3f <Vm::faultHandler(regs*)+0x287>
c001eb3a:	80 ce 02             	or     dh,0x2
c001eb3d:	eb 03                	jmp    c001eb42 <Vm::faultHandler(regs*)+0x28a>
c001eb3f:	80 e6 fd             	and    dh,0xfd
c001eb42:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001eb46:	e9 dd 03 00 00       	jmp    c001ef28 <Vm::faultHandler(regs*)+0x670>
c001eb4b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eb50:	74 2a                	je     c001eb7c <Vm::faultHandler(regs*)+0x2c4>
c001eb52:	8b 10                	mov    edx,DWORD PTR [eax]
c001eb54:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001eb5a:	81 ca 00 02 02 00    	or     edx,0x20200
c001eb60:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001eb63:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb65:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eb6b:	c1 e8 09             	shr    eax,0x9
c001eb6e:	83 e0 01             	and    eax,0x1
c001eb71:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eb74:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001eb77:	83 c0 04             	add    eax,0x4
c001eb7a:	eb 25                	jmp    c001eba1 <Vm::faultHandler(regs*)+0x2e9>
c001eb7c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001eb7f:	81 ca 00 02 02 00    	or     edx,0x20200
c001eb85:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001eb88:	66 8b 00             	mov    ax,WORD PTR [eax]
c001eb8b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eb91:	66 c1 e8 09          	shr    ax,0x9
c001eb95:	83 e0 01             	and    eax,0x1
c001eb98:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eb9b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001eb9e:	83 c0 02             	add    eax,0x2
c001eba1:	25 ff ff 00 00       	and    eax,0xffff
c001eba6:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001eba9:	e9 7a 03 00 00       	jmp    c001ef28 <Vm::faultHandler(regs*)+0x670>
c001ebae:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ebb2:	3c ee                	cmp    al,0xee
c001ebb4:	75 10                	jne    c001ebc6 <Vm::faultHandler(regs*)+0x30e>
c001ebb6:	83 ec 0c             	sub    esp,0xc
c001ebb9:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001ebbc:	e8 a2 f9 ff ff       	call   c001e563 <Vm::mainloop3(unsigned long)>
c001ebc1:	e9 4b 03 00 00       	jmp    c001ef11 <Vm::faultHandler(regs*)+0x659>
c001ebc6:	83 ec 0c             	sub    esp,0xc
c001ebc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ebcd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ebd1:	51                   	push   ecx
c001ebd2:	50                   	push   eax
c001ebd3:	53                   	push   ebx
c001ebd4:	e8 e1 fb ff ff       	call   c001e7ba <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001ebd9:	83 c4 20             	add    esp,0x20
c001ebdc:	e9 4a 03 00 00       	jmp    c001ef2b <Vm::faultHandler(regs*)+0x673>
c001ebe1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ebe6:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ebea:	e9 39 03 00 00       	jmp    c001ef28 <Vm::faultHandler(regs*)+0x670>
c001ebef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ebf4:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001ebf8:	e9 2b 03 00 00       	jmp    c001ef28 <Vm::faultHandler(regs*)+0x670>
c001ebfd:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ec00:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ec05:	74 2b                	je     c001ec32 <Vm::faultHandler(regs*)+0x37a>
c001ec07:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001ec0e:	76 22                	jbe    c001ec32 <Vm::faultHandler(regs*)+0x37a>
c001ec10:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ec14:	50                   	push   eax
c001ec15:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ec19:	50                   	push   eax
c001ec1a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ec1e:	50                   	push   eax
c001ec1f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ec23:	50                   	push   eax
c001ec24:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ec28:	50                   	push   eax
c001ec29:	6a 6c                	push   0x6c
c001ec2b:	6a 6c                	push   0x6c
c001ec2d:	e9 b9 01 00 00       	jmp    c001edeb <Vm::faultHandler(regs*)+0x533>
c001ec32:	83 ec 0c             	sub    esp,0xc
c001ec35:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ec39:	0f b7 f6             	movzx  esi,si
c001ec3c:	50                   	push   eax
c001ec3d:	e8 71 f8 ff ff       	call   c001e4b3 <Vm::inbv(unsigned short)>
c001ec42:	83 c4 0c             	add    esp,0xc
c001ec45:	0f b6 c0             	movzx  eax,al
c001ec48:	50                   	push   eax
c001ec49:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001ec4d:	50                   	push   eax
c001ec4e:	56                   	push   esi
c001ec4f:	e8 24 fc ff ff       	call   c001e878 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001ec54:	83 c4 10             	add    esp,0x10
c001ec57:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ec5a:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ec5e:	74 03                	je     c001ec63 <Vm::faultHandler(regs*)+0x3ab>
c001ec60:	48                   	dec    eax
c001ec61:	eb 01                	jmp    c001ec64 <Vm::faultHandler(regs*)+0x3ac>
c001ec63:	40                   	inc    eax
c001ec64:	0f b7 c0             	movzx  eax,ax
c001ec67:	e9 8d 00 00 00       	jmp    c001ecf9 <Vm::faultHandler(regs*)+0x441>
c001ec6c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ec6f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ec72:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ec77:	74 29                	je     c001eca2 <Vm::faultHandler(regs*)+0x3ea>
c001ec79:	3d ff ff 00 00       	cmp    eax,0xffff
c001ec7e:	76 22                	jbe    c001eca2 <Vm::faultHandler(regs*)+0x3ea>
c001ec80:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ec84:	50                   	push   eax
c001ec85:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ec89:	50                   	push   eax
c001ec8a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ec8e:	50                   	push   eax
c001ec8f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ec93:	50                   	push   eax
c001ec94:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ec98:	50                   	push   eax
c001ec99:	6a 6d                	push   0x6d
c001ec9b:	6a 6d                	push   0x6d
c001ec9d:	e9 49 01 00 00       	jmp    c001edeb <Vm::faultHandler(regs*)+0x533>
c001eca2:	0f b7 c8             	movzx  ecx,ax
c001eca5:	0f b7 f6             	movzx  esi,si
c001eca8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ecab:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ecb0:	74 20                	je     c001ecd2 <Vm::faultHandler(regs*)+0x41a>
c001ecb2:	ed                   	in     eax,dx
c001ecb3:	55                   	push   ebp
c001ecb4:	50                   	push   eax
c001ecb5:	51                   	push   ecx
c001ecb6:	56                   	push   esi
c001ecb7:	e8 e7 fb ff ff       	call   c001e8a3 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001ecbc:	83 c4 10             	add    esp,0x10
c001ecbf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ecc2:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ecc6:	74 05                	je     c001eccd <Vm::faultHandler(regs*)+0x415>
c001ecc8:	83 e8 04             	sub    eax,0x4
c001eccb:	eb 27                	jmp    c001ecf4 <Vm::faultHandler(regs*)+0x43c>
c001eccd:	83 c0 04             	add    eax,0x4
c001ecd0:	eb 22                	jmp    c001ecf4 <Vm::faultHandler(regs*)+0x43c>
c001ecd2:	66 ed                	in     ax,dx
c001ecd4:	0f b7 c0             	movzx  eax,ax
c001ecd7:	57                   	push   edi
c001ecd8:	50                   	push   eax
c001ecd9:	51                   	push   ecx
c001ecda:	56                   	push   esi
c001ecdb:	e8 ad fb ff ff       	call   c001e88d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001ece0:	83 c4 10             	add    esp,0x10
c001ece3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ece6:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ecea:	74 05                	je     c001ecf1 <Vm::faultHandler(regs*)+0x439>
c001ecec:	83 e8 02             	sub    eax,0x2
c001ecef:	eb 03                	jmp    c001ecf4 <Vm::faultHandler(regs*)+0x43c>
c001ecf1:	83 c0 02             	add    eax,0x2
c001ecf4:	25 ff ff 00 00       	and    eax,0xffff
c001ecf9:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001ecfc:	e9 27 02 00 00       	jmp    c001ef28 <Vm::faultHandler(regs*)+0x670>
c001ed01:	8d 46 ff             	lea    eax,[esi-0x1]
c001ed04:	3c 05                	cmp    al,0x5
c001ed06:	77 24                	ja     c001ed2c <Vm::faultHandler(regs*)+0x474>
c001ed08:	0f b6 c0             	movzx  eax,al
c001ed0b:	ff 24 85 ec bd 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4214]
c001ed12:	0f b7 fd             	movzx  edi,bp
c001ed15:	eb 15                	jmp    c001ed2c <Vm::faultHandler(regs*)+0x474>
c001ed17:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001ed1b:	eb 0f                	jmp    c001ed2c <Vm::faultHandler(regs*)+0x474>
c001ed1d:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001ed21:	eb 09                	jmp    c001ed2c <Vm::faultHandler(regs*)+0x474>
c001ed23:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001ed27:	eb 03                	jmp    c001ed2c <Vm::faultHandler(regs*)+0x474>
c001ed29:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001ed2c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ed2f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ed34:	74 29                	je     c001ed5f <Vm::faultHandler(regs*)+0x4a7>
c001ed36:	3d ff ff 00 00       	cmp    eax,0xffff
c001ed3b:	76 22                	jbe    c001ed5f <Vm::faultHandler(regs*)+0x4a7>
c001ed3d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ed41:	50                   	push   eax
c001ed42:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ed46:	50                   	push   eax
c001ed47:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ed4b:	50                   	push   eax
c001ed4c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ed50:	50                   	push   eax
c001ed51:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ed55:	50                   	push   eax
c001ed56:	6a 6e                	push   0x6e
c001ed58:	6a 6e                	push   0x6e
c001ed5a:	e9 8c 00 00 00       	jmp    c001edeb <Vm::faultHandler(regs*)+0x533>
c001ed5f:	0f b7 c0             	movzx  eax,ax
c001ed62:	52                   	push   edx
c001ed63:	52                   	push   edx
c001ed64:	50                   	push   eax
c001ed65:	57                   	push   edi
c001ed66:	e8 d9 fa ff ff       	call   c001e844 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001ed6b:	59                   	pop    ecx
c001ed6c:	0f b6 c0             	movzx  eax,al
c001ed6f:	5e                   	pop    esi
c001ed70:	50                   	push   eax
c001ed71:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ed75:	50                   	push   eax
c001ed76:	e8 4b f7 ff ff       	call   c001e4c6 <Vm::outbv(unsigned short, unsigned char)>
c001ed7b:	83 c4 10             	add    esp,0x10
c001ed7e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ed81:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ed85:	74 03                	je     c001ed8a <Vm::faultHandler(regs*)+0x4d2>
c001ed87:	48                   	dec    eax
c001ed88:	eb 01                	jmp    c001ed8b <Vm::faultHandler(regs*)+0x4d3>
c001ed8a:	40                   	inc    eax
c001ed8b:	0f b7 c0             	movzx  eax,ax
c001ed8e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ed91:	e9 92 01 00 00       	jmp    c001ef28 <Vm::faultHandler(regs*)+0x670>
c001ed96:	8d 46 ff             	lea    eax,[esi-0x1]
c001ed99:	3c 05                	cmp    al,0x5
c001ed9b:	77 1f                	ja     c001edbc <Vm::faultHandler(regs*)+0x504>
c001ed9d:	0f b6 c0             	movzx  eax,al
c001eda0:	ff 24 85 04 be 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd41fc]
c001eda7:	89 ef                	mov    edi,ebp
c001eda9:	eb 11                	jmp    c001edbc <Vm::faultHandler(regs*)+0x504>
c001edab:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001edae:	eb 0c                	jmp    c001edbc <Vm::faultHandler(regs*)+0x504>
c001edb0:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001edb3:	eb 07                	jmp    c001edbc <Vm::faultHandler(regs*)+0x504>
c001edb5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001edb8:	eb 02                	jmp    c001edbc <Vm::faultHandler(regs*)+0x504>
c001edba:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001edbc:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001edbf:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001edc4:	74 37                	je     c001edfd <Vm::faultHandler(regs*)+0x545>
c001edc6:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001edcc:	76 2f                	jbe    c001edfd <Vm::faultHandler(regs*)+0x545>
c001edce:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001edd2:	50                   	push   eax
c001edd3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001edd7:	50                   	push   eax
c001edd8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001eddc:	50                   	push   eax
c001eddd:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ede1:	50                   	push   eax
c001ede2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ede6:	50                   	push   eax
c001ede7:	6a 6f                	push   0x6f
c001ede9:	6a 6f                	push   0x6f
c001edeb:	68 92 bd 02 c0       	push   0xc002bd92
c001edf0:	e8 2e 39 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c001edf5:	83 c4 20             	add    esp,0x20
c001edf8:	e9 86 01 00 00       	jmp    c001ef83 <Vm::faultHandler(regs*)+0x6cb>
c001edfd:	0f b7 d7             	movzx  edx,di
c001ee00:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001ee03:	0f b7 c6             	movzx  eax,si
c001ee06:	81 e1 00 04 00 00    	and    ecx,0x400
c001ee0c:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001ee0f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ee14:	74 1d                	je     c001ee33 <Vm::faultHandler(regs*)+0x57b>
c001ee16:	55                   	push   ebp
c001ee17:	55                   	push   ebp
c001ee18:	50                   	push   eax
c001ee19:	52                   	push   edx
c001ee1a:	e8 48 fa ff ff       	call   c001e867 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001ee1f:	83 c4 10             	add    esp,0x10
c001ee22:	89 fa                	mov    edx,edi
c001ee24:	ef                   	out    dx,eax
c001ee25:	85 c9                	test   ecx,ecx
c001ee27:	74 05                	je     c001ee2e <Vm::faultHandler(regs*)+0x576>
c001ee29:	83 ee 04             	sub    esi,0x4
c001ee2c:	eb 21                	jmp    c001ee4f <Vm::faultHandler(regs*)+0x597>
c001ee2e:	83 c6 04             	add    esi,0x4
c001ee31:	eb 1c                	jmp    c001ee4f <Vm::faultHandler(regs*)+0x597>
c001ee33:	55                   	push   ebp
c001ee34:	55                   	push   ebp
c001ee35:	50                   	push   eax
c001ee36:	52                   	push   edx
c001ee37:	e8 19 fa ff ff       	call   c001e855 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001ee3c:	83 c4 10             	add    esp,0x10
c001ee3f:	89 fa                	mov    edx,edi
c001ee41:	66 ef                	out    dx,ax
c001ee43:	85 c9                	test   ecx,ecx
c001ee45:	74 05                	je     c001ee4c <Vm::faultHandler(regs*)+0x594>
c001ee47:	83 ee 02             	sub    esi,0x2
c001ee4a:	eb 03                	jmp    c001ee4f <Vm::faultHandler(regs*)+0x597>
c001ee4c:	83 c6 02             	add    esi,0x2
c001ee4f:	81 e6 ff ff 00 00    	and    esi,0xffff
c001ee55:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001ee58:	e9 cb 00 00 00       	jmp    c001ef28 <Vm::faultHandler(regs*)+0x670>
c001ee5d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ee64:	83 ec 0c             	sub    esp,0xc
c001ee67:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ee6b:	50                   	push   eax
c001ee6c:	e8 42 f6 ff ff       	call   c001e4b3 <Vm::inbv(unsigned short)>
c001ee71:	0f b6 c0             	movzx  eax,al
c001ee74:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ee77:	eb 3f                	jmp    c001eeb8 <Vm::faultHandler(regs*)+0x600>
c001ee79:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ee7e:	74 07                	je     c001ee87 <Vm::faultHandler(regs*)+0x5cf>
c001ee80:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ee84:	ed                   	in     eax,dx
c001ee85:	eb 14                	jmp    c001ee9b <Vm::faultHandler(regs*)+0x5e3>
c001ee87:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001ee8a:	66 31 f6             	xor    si,si
c001ee8d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001ee90:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ee94:	66 ed                	in     ax,dx
c001ee96:	0f b7 c0             	movzx  eax,ax
c001ee99:	09 f0                	or     eax,esi
c001ee9b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ee9e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001eea2:	e9 84 00 00 00       	jmp    c001ef2b <Vm::faultHandler(regs*)+0x673>
c001eea7:	52                   	push   edx
c001eea8:	52                   	push   edx
c001eea9:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001eead:	50                   	push   eax
c001eeae:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eeb2:	50                   	push   eax
c001eeb3:	e8 0e f6 ff ff       	call   c001e4c6 <Vm::outbv(unsigned short, unsigned char)>
c001eeb8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001eebc:	eb 53                	jmp    c001ef11 <Vm::faultHandler(regs*)+0x659>
c001eebe:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001eec1:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001eec5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eeca:	74 03                	je     c001eecf <Vm::faultHandler(regs*)+0x617>
c001eecc:	ef                   	out    dx,eax
c001eecd:	eb cf                	jmp    c001ee9e <Vm::faultHandler(regs*)+0x5e6>
c001eecf:	66 ef                	out    dx,ax
c001eed1:	eb cb                	jmp    c001ee9e <Vm::faultHandler(regs*)+0x5e6>
c001eed3:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001eeda:	83 ec 0c             	sub    esp,0xc
c001eedd:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001eee1:	50                   	push   eax
c001eee2:	e8 cc f5 ff ff       	call   c001e4b3 <Vm::inbv(unsigned short)>
c001eee7:	0f b6 c0             	movzx  eax,al
c001eeea:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001eeed:	eb 1f                	jmp    c001ef0e <Vm::faultHandler(regs*)+0x656>
c001eeef:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001eef2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eef7:	74 03                	je     c001eefc <Vm::faultHandler(regs*)+0x644>
c001eef9:	ed                   	in     eax,dx
c001eefa:	eb 0d                	jmp    c001ef09 <Vm::faultHandler(regs*)+0x651>
c001eefc:	66 ed                	in     ax,dx
c001eefe:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001ef01:	0f b7 c0             	movzx  eax,ax
c001ef04:	66 31 d2             	xor    dx,dx
c001ef07:	09 d0                	or     eax,edx
c001ef09:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ef0c:	eb 1a                	jmp    c001ef28 <Vm::faultHandler(regs*)+0x670>
c001ef0e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ef11:	83 c4 10             	add    esp,0x10
c001ef14:	eb 15                	jmp    c001ef2b <Vm::faultHandler(regs*)+0x673>
c001ef16:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ef19:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ef1c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ef21:	74 03                	je     c001ef26 <Vm::faultHandler(regs*)+0x66e>
c001ef23:	ef                   	out    dx,eax
c001ef24:	eb 02                	jmp    c001ef28 <Vm::faultHandler(regs*)+0x670>
c001ef26:	66 ef                	out    dx,ax
c001ef28:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ef2b:	b0 01                	mov    al,0x1
c001ef2d:	eb 56                	jmp    c001ef85 <Vm::faultHandler(regs*)+0x6cd>
c001ef2f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ef33:	50                   	push   eax
c001ef34:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ef38:	50                   	push   eax
c001ef39:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ef3d:	50                   	push   eax
c001ef3e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ef42:	50                   	push   eax
c001ef43:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ef47:	50                   	push   eax
c001ef48:	52                   	push   edx
c001ef49:	52                   	push   edx
c001ef4a:	68 bf bd 02 c0       	push   0xc002bdbf
c001ef4f:	e8 cf 37 ff ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c001ef54:	83 c4 20             	add    esp,0x20
c001ef57:	83 ec 0c             	sub    esp,0xc
c001ef5a:	6a 60                	push   0x60
c001ef5c:	e8 52 f5 ff ff       	call   c001e4b3 <Vm::inbv(unsigned short)>
c001ef61:	83 c4 10             	add    esp,0x10
c001ef64:	3c 1c                	cmp    al,0x1c
c001ef66:	74 04                	je     c001ef6c <Vm::faultHandler(regs*)+0x6b4>
c001ef68:	3c 5a                	cmp    al,0x5a
c001ef6a:	75 eb                	jne    c001ef57 <Vm::faultHandler(regs*)+0x69f>
c001ef6c:	3c 5a                	cmp    al,0x5a
c001ef6e:	74 04                	je     c001ef74 <Vm::faultHandler(regs*)+0x6bc>
c001ef70:	3c 1c                	cmp    al,0x1c
c001ef72:	75 0f                	jne    c001ef83 <Vm::faultHandler(regs*)+0x6cb>
c001ef74:	83 ec 0c             	sub    esp,0xc
c001ef77:	6a 60                	push   0x60
c001ef79:	e8 35 f5 ff ff       	call   c001e4b3 <Vm::inbv(unsigned short)>
c001ef7e:	83 c4 10             	add    esp,0x10
c001ef81:	eb e9                	jmp    c001ef6c <Vm::faultHandler(regs*)+0x6b4>
c001ef83:	31 c0                	xor    eax,eax
c001ef85:	83 c4 1c             	add    esp,0x1c
c001ef88:	5b                   	pop    ebx
c001ef89:	5e                   	pop    esi
c001ef8a:	5f                   	pop    edi
c001ef8b:	5d                   	pop    ebp
c001ef8c:	c3                   	ret    

c001ef8d <Vm::fpuInternalTo32(unsigned long long)>:
c001ef8d:	57                   	push   edi
c001ef8e:	56                   	push   esi
c001ef8f:	53                   	push   ebx
c001ef90:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef98:	89 d6                	mov    esi,edx
c001ef9a:	89 d7                	mov    edi,edx
c001ef9c:	89 c1                	mov    ecx,eax
c001ef9e:	c1 ef 14             	shr    edi,0x14
c001efa1:	89 d3                	mov    ebx,edx
c001efa3:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001efa9:	31 d2                	xor    edx,edx
c001efab:	89 f8                	mov    eax,edi
c001efad:	81 e6 00 00 00 80    	and    esi,0x80000000
c001efb3:	bf ff 00 00 00       	mov    edi,0xff
c001efb8:	05 80 fc ff ff       	add    eax,0xfffffc80
c001efbd:	83 d2 ff             	adc    edx,0xffffffff
c001efc0:	39 c7                	cmp    edi,eax
c001efc2:	bf 00 00 00 00       	mov    edi,0x0
c001efc7:	19 d7                	sbb    edi,edx
c001efc9:	72 15                	jb     c001efe0 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001efcb:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001efcf:	c1 e0 17             	shl    eax,0x17
c001efd2:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001efd8:	09 f1                	or     ecx,esi
c001efda:	09 c1                	or     ecx,eax
c001efdc:	89 cf                	mov    edi,ecx
c001efde:	eb 02                	jmp    c001efe2 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001efe0:	31 ff                	xor    edi,edi
c001efe2:	89 f8                	mov    eax,edi
c001efe4:	5b                   	pop    ebx
c001efe5:	5e                   	pop    esi
c001efe6:	5f                   	pop    edi
c001efe7:	c3                   	ret    

c001efe8 <Vm::fpuInternalTo64(unsigned long long)>:
c001efe8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001eff0:	c3                   	ret    

c001eff1 <Vm::fpu32ToInternal(unsigned int)>:
c001eff1:	57                   	push   edi
c001eff2:	31 ff                	xor    edi,edi
c001eff4:	56                   	push   esi
c001eff5:	53                   	push   ebx
c001eff6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001effa:	89 cb                	mov    ebx,ecx
c001effc:	89 ce                	mov    esi,ecx
c001effe:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f004:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f00a:	c1 e9 17             	shr    ecx,0x17
c001f00d:	89 f0                	mov    eax,esi
c001f00f:	0f b6 d1             	movzx  edx,cl
c001f012:	81 c2 80 03 00 00    	add    edx,0x380
c001f018:	89 d1                	mov    ecx,edx
c001f01a:	89 fa                	mov    edx,edi
c001f01c:	c1 e1 14             	shl    ecx,0x14
c001f01f:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f023:	c1 e0 1d             	shl    eax,0x1d
c001f026:	89 d7                	mov    edi,edx
c001f028:	89 c6                	mov    esi,eax
c001f02a:	89 ca                	mov    edx,ecx
c001f02c:	89 f0                	mov    eax,esi
c001f02e:	09 fa                	or     edx,edi
c001f030:	09 da                	or     edx,ebx
c001f032:	5b                   	pop    ebx
c001f033:	5e                   	pop    esi
c001f034:	5f                   	pop    edi
c001f035:	c3                   	ret    

c001f036 <Vm::fpu64ToInternal(unsigned long long)>:
c001f036:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f03a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f03e:	c3                   	ret    

c001f03f <Vm::fpuFloatToLong(unsigned long long)>:
c001f03f:	57                   	push   edi
c001f040:	31 c0                	xor    eax,eax
c001f042:	56                   	push   esi
c001f043:	31 d2                	xor    edx,edx
c001f045:	53                   	push   ebx
c001f046:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f04a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f04e:	89 d9                	mov    ecx,ebx
c001f050:	c1 e9 14             	shr    ecx,0x14
c001f053:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f059:	89 cf                	mov    edi,ecx
c001f05b:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f061:	78 33                	js     c001f096 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f063:	89 d9                	mov    ecx,ebx
c001f065:	89 f0                	mov    eax,esi
c001f067:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f06d:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f073:	89 ca                	mov    edx,ecx
c001f075:	b9 34 00 00 00       	mov    ecx,0x34
c001f07a:	29 f9                	sub    ecx,edi
c001f07c:	0f ad d0             	shrd   eax,edx,cl
c001f07f:	d3 fa                	sar    edx,cl
c001f081:	f6 c1 20             	test   cl,0x20
c001f084:	74 05                	je     c001f08b <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f086:	89 d0                	mov    eax,edx
c001f088:	c1 fa 1f             	sar    edx,0x1f
c001f08b:	85 db                	test   ebx,ebx
c001f08d:	79 07                	jns    c001f096 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f08f:	f7 d8                	neg    eax
c001f091:	83 d2 00             	adc    edx,0x0
c001f094:	f7 da                	neg    edx
c001f096:	5b                   	pop    ebx
c001f097:	5e                   	pop    esi
c001f098:	5f                   	pop    edi
c001f099:	c3                   	ret    

c001f09a <Vm::fpuULongToFloat(unsigned long long)>:
c001f09a:	57                   	push   edi
c001f09b:	31 c9                	xor    ecx,ecx
c001f09d:	56                   	push   esi
c001f09e:	53                   	push   ebx
c001f09f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f0a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f0a7:	0f ba e7 14          	bt     edi,0x14
c001f0ab:	72 07                	jb     c001f0b4 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f0ad:	01 f6                	add    esi,esi
c001f0af:	11 ff                	adc    edi,edi
c001f0b1:	41                   	inc    ecx
c001f0b2:	eb f3                	jmp    c001f0a7 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f0b4:	89 fa                	mov    edx,edi
c001f0b6:	89 f0                	mov    eax,esi
c001f0b8:	bb 33 04 00 00       	mov    ebx,0x433
c001f0bd:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f0c3:	29 cb                	sub    ebx,ecx
c001f0c5:	89 d9                	mov    ecx,ebx
c001f0c7:	5b                   	pop    ebx
c001f0c8:	c1 e1 14             	shl    ecx,0x14
c001f0cb:	5e                   	pop    esi
c001f0cc:	09 ca                	or     edx,ecx
c001f0ce:	5f                   	pop    edi
c001f0cf:	c3                   	ret    

c001f0d0 <Vm::fpuLongToFloat(long long)>:
c001f0d0:	56                   	push   esi
c001f0d1:	31 c0                	xor    eax,eax
c001f0d3:	53                   	push   ebx
c001f0d4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f0d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f0dc:	39 c8                	cmp    eax,ecx
c001f0de:	19 d8                	sbb    eax,ebx
c001f0e0:	7d 04                	jge    c001f0e6 <Vm::fpuLongToFloat(long long)+0x16>
c001f0e2:	31 f6                	xor    esi,esi
c001f0e4:	eb 0c                	jmp    c001f0f2 <Vm::fpuLongToFloat(long long)+0x22>
c001f0e6:	f7 d9                	neg    ecx
c001f0e8:	be 01 00 00 00       	mov    esi,0x1
c001f0ed:	83 d3 00             	adc    ebx,0x0
c001f0f0:	f7 db                	neg    ebx
c001f0f2:	31 c0                	xor    eax,eax
c001f0f4:	0f ba e3 14          	bt     ebx,0x14
c001f0f8:	72 07                	jb     c001f101 <Vm::fpuLongToFloat(long long)+0x31>
c001f0fa:	01 c9                	add    ecx,ecx
c001f0fc:	11 db                	adc    ebx,ebx
c001f0fe:	40                   	inc    eax
c001f0ff:	eb f3                	jmp    c001f0f4 <Vm::fpuLongToFloat(long long)+0x24>
c001f101:	ba 33 04 00 00       	mov    edx,0x433
c001f106:	29 c2                	sub    edx,eax
c001f108:	89 c8                	mov    eax,ecx
c001f10a:	c1 e2 14             	shl    edx,0x14
c001f10d:	89 d9                	mov    ecx,ebx
c001f10f:	89 f3                	mov    ebx,esi
c001f111:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f117:	09 ca                	or     edx,ecx
c001f119:	84 db                	test   bl,bl
c001f11b:	74 06                	je     c001f123 <Vm::fpuLongToFloat(long long)+0x53>
c001f11d:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f123:	5b                   	pop    ebx
c001f124:	5e                   	pop    esi
c001f125:	c3                   	ret    

c001f126 <Vm::fpuGet0()>:
c001f126:	31 c0                	xor    eax,eax
c001f128:	31 d2                	xor    edx,edx
c001f12a:	c3                   	ret    

c001f12b <Vm::fpuGet1()>:
c001f12b:	b8 01 00 00 00       	mov    eax,0x1
c001f130:	31 d2                	xor    edx,edx
c001f132:	c3                   	ret    

c001f133 <Vm::fpuGetPi()>:
c001f133:	b8 03 00 00 00       	mov    eax,0x3
c001f138:	31 d2                	xor    edx,edx
c001f13a:	c3                   	ret    

c001f13b <Vm::fpuGetLog2E()>:
c001f13b:	83 ec 18             	sub    esp,0x18
c001f13e:	68 1c be 02 c0       	push   0xc002be1c
c001f143:	e8 47 ad ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c001f148:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f14d:	31 d2                	xor    edx,edx
c001f14f:	83 c4 1c             	add    esp,0x1c
c001f152:	c3                   	ret    

c001f153 <Vm::fpuGetLogE2()>:
c001f153:	83 ec 18             	sub    esp,0x18
c001f156:	68 28 be 02 c0       	push   0xc002be28
c001f15b:	e8 2f ad ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c001f160:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f165:	31 d2                	xor    edx,edx
c001f167:	83 c4 1c             	add    esp,0x1c
c001f16a:	c3                   	ret    

c001f16b <Vm::fpuGetLog210()>:
c001f16b:	83 ec 18             	sub    esp,0x18
c001f16e:	68 34 be 02 c0       	push   0xc002be34
c001f173:	e8 17 ad ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c001f178:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f17d:	31 d2                	xor    edx,edx
c001f17f:	83 c4 1c             	add    esp,0x1c
c001f182:	c3                   	ret    

c001f183 <Vm::fpuGetLog102()>:
c001f183:	83 ec 18             	sub    esp,0x18
c001f186:	68 41 be 02 c0       	push   0xc002be41
c001f18b:	e8 ff ac ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c001f190:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f195:	31 d2                	xor    edx,edx
c001f197:	83 c4 1c             	add    esp,0x1c
c001f19a:	c3                   	ret    

c001f19b <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f19b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f19f:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f1a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f1a7:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f1ab:	0f 92 c0             	setb   al
c001f1ae:	c3                   	ret    

c001f1af <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f1af:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f1b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1b7:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f1bb:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f1bf:	09 c2                	or     edx,eax
c001f1c1:	0f 94 c0             	sete   al
c001f1c4:	c3                   	ret    

c001f1c5 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f1c5:	57                   	push   edi
c001f1c6:	56                   	push   esi
c001f1c7:	53                   	push   ebx
c001f1c8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f1cc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f1d0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f1d4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f1d8:	57                   	push   edi
c001f1d9:	56                   	push   esi
c001f1da:	53                   	push   ebx
c001f1db:	51                   	push   ecx
c001f1dc:	e8 ce ff ff ff       	call   c001f1af <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f1e1:	83 c4 10             	add    esp,0x10
c001f1e4:	88 c2                	mov    dl,al
c001f1e6:	31 c0                	xor    eax,eax
c001f1e8:	84 d2                	test   dl,dl
c001f1ea:	75 0c                	jne    c001f1f8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f1ec:	57                   	push   edi
c001f1ed:	56                   	push   esi
c001f1ee:	53                   	push   ebx
c001f1ef:	51                   	push   ecx
c001f1f0:	e8 a6 ff ff ff       	call   c001f19b <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f1f5:	83 c4 10             	add    esp,0x10
c001f1f8:	83 e0 01             	and    eax,0x1
c001f1fb:	5b                   	pop    ebx
c001f1fc:	88 c1                	mov    cl,al
c001f1fe:	83 e2 01             	and    edx,0x1
c001f201:	a0 c1 0f 03 c0       	mov    al,ds:0xc0030fc1
c001f206:	c1 e2 06             	shl    edx,0x6
c001f209:	83 e0 ba             	and    eax,0xffffffba
c001f20c:	5e                   	pop    esi
c001f20d:	09 c8                	or     eax,ecx
c001f20f:	5f                   	pop    edi
c001f210:	09 d0                	or     eax,edx
c001f212:	a2 c1 0f 03 c0       	mov    ds:0xc0030fc1,al
c001f217:	c3                   	ret    

c001f218 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f218:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f21c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f220:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f224:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f228:	c3                   	ret    

c001f229 <Vm::fpuAbs(unsigned long long)>:
c001f229:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f22d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f231:	c3                   	ret    

c001f232 <Vm::fpuChs(unsigned long long)>:
c001f232:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f236:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f23a:	f7 d8                	neg    eax
c001f23c:	83 d2 00             	adc    edx,0x0
c001f23f:	f7 da                	neg    edx
c001f241:	c3                   	ret    

c001f242 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f242:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f246:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f24b:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f24f:	eb c7                	jmp    c001f218 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f251 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f251:	53                   	push   ebx
c001f252:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f256:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f25a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f25e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f262:	0f af ca             	imul   ecx,edx
c001f265:	0f af d8             	imul   ebx,eax
c001f268:	f7 e2                	mul    edx
c001f26a:	01 d9                	add    ecx,ebx
c001f26c:	5b                   	pop    ebx
c001f26d:	01 ca                	add    edx,ecx
c001f26f:	c3                   	ret    

c001f270 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f270:	83 ec 0c             	sub    esp,0xc
c001f273:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f277:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f27b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f27f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f283:	e8 dc 74 00 00       	call   c0026764 <__udivdi3>
c001f288:	83 c4 1c             	add    esp,0x1c
c001f28b:	c3                   	ret    

c001f28c <Vm::fpuSquare(unsigned long long)>:
c001f28c:	50                   	push   eax
c001f28d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f291:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f295:	52                   	push   edx
c001f296:	50                   	push   eax
c001f297:	52                   	push   edx
c001f298:	50                   	push   eax
c001f299:	e8 b3 ff ff ff       	call   c001f251 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f29e:	83 c4 14             	add    esp,0x14
c001f2a1:	c3                   	ret    

c001f2a2 <Vm::fpuGetReg(int)>:
c001f2a2:	83 ec 0c             	sub    esp,0xc
c001f2a5:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f2aa:	76 10                	jbe    c001f2bc <Vm::fpuGetReg(int)+0x1a>
c001f2ac:	83 ec 0c             	sub    esp,0xc
c001f2af:	68 4e be 02 c0       	push   0xc002be4e
c001f2b4:	e8 d6 ab ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c001f2b9:	83 c4 10             	add    esp,0x10
c001f2bc:	a0 c1 0f 03 c0       	mov    al,ds:0xc0030fc1
c001f2c1:	b9 08 00 00 00       	mov    ecx,0x8
c001f2c6:	c0 e8 03             	shr    al,0x3
c001f2c9:	83 e0 07             	and    eax,0x7
c001f2cc:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f2d0:	99                   	cdq    
c001f2d1:	f7 f9                	idiv   ecx
c001f2d3:	8b 04 d5 c4 0f 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcf03c]
c001f2da:	8b 14 d5 c8 0f 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcf038]
c001f2e1:	83 c4 0c             	add    esp,0xc
c001f2e4:	c3                   	ret    

c001f2e5 <Vm::fpuSetReg(int, unsigned long long)>:
c001f2e5:	57                   	push   edi
c001f2e6:	56                   	push   esi
c001f2e7:	52                   	push   edx
c001f2e8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f2ec:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f2f0:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f2f5:	76 10                	jbe    c001f307 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f2f7:	83 ec 0c             	sub    esp,0xc
c001f2fa:	68 61 be 02 c0       	push   0xc002be61
c001f2ff:	e8 8b ab ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c001f304:	83 c4 10             	add    esp,0x10
c001f307:	a0 c1 0f 03 c0       	mov    al,ds:0xc0030fc1
c001f30c:	b9 08 00 00 00       	mov    ecx,0x8
c001f311:	c0 e8 03             	shr    al,0x3
c001f314:	83 e0 07             	and    eax,0x7
c001f317:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f31b:	99                   	cdq    
c001f31c:	f7 f9                	idiv   ecx
c001f31e:	89 34 d5 c4 0f 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf03c],esi
c001f325:	89 3c d5 c8 0f 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf038],edi
c001f32c:	58                   	pop    eax
c001f32d:	5e                   	pop    esi
c001f32e:	5f                   	pop    edi
c001f32f:	c3                   	ret    

c001f330 <Vm::fpuPush(unsigned long long)>:
c001f330:	a0 c1 0f 03 c0       	mov    al,ds:0xc0030fc1
c001f335:	c0 e8 03             	shr    al,0x3
c001f338:	83 e0 07             	and    eax,0x7
c001f33b:	83 c0 07             	add    eax,0x7
c001f33e:	88 c2                	mov    dl,al
c001f340:	83 e0 07             	and    eax,0x7
c001f343:	83 e2 07             	and    edx,0x7
c001f346:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f34d:	8a 15 c1 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030fc1
c001f353:	83 e2 c7             	and    edx,0xffffffc7
c001f356:	09 ca                	or     edx,ecx
c001f358:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f35c:	88 15 c1 0f 03 c0    	mov    BYTE PTR ds:0xc0030fc1,dl
c001f362:	89 0c c5 c8 0f 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf038],ecx
c001f369:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f36d:	89 14 c5 c4 0f 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf03c],edx
c001f374:	a1 04 10 03 c0       	mov    eax,ds:0xc0031004
c001f379:	83 f8 08             	cmp    eax,0x8
c001f37c:	75 08                	jne    c001f386 <Vm::fpuPush(unsigned long long)+0x56>
c001f37e:	80 0d c0 0f 03 c0 40 	or     BYTE PTR ds:0xc0030fc0,0x40
c001f385:	c3                   	ret    
c001f386:	40                   	inc    eax
c001f387:	a3 04 10 03 c0       	mov    ds:0xc0031004,eax
c001f38c:	c3                   	ret    

c001f38d <Vm::fpuPop()>:
c001f38d:	8a 0d c1 0f 03 c0    	mov    cl,BYTE PTR ds:0xc0030fc1
c001f393:	53                   	push   ebx
c001f394:	c0 e9 03             	shr    cl,0x3
c001f397:	8a 1d c1 0f 03 c0    	mov    bl,BYTE PTR ds:0xc0030fc1
c001f39d:	83 e1 07             	and    ecx,0x7
c001f3a0:	83 e3 c7             	and    ebx,0xffffffc7
c001f3a3:	8b 04 cd c4 0f 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcf03c]
c001f3aa:	8b 14 cd c8 0f 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcf038]
c001f3b1:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f3b8:	83 e1 38             	and    ecx,0x38
c001f3bb:	09 d9                	or     ecx,ebx
c001f3bd:	88 0d c1 0f 03 c0    	mov    BYTE PTR ds:0xc0030fc1,cl
c001f3c3:	8b 0d 04 10 03 c0    	mov    ecx,DWORD PTR ds:0xc0031004
c001f3c9:	85 c9                	test   ecx,ecx
c001f3cb:	74 09                	je     c001f3d6 <Vm::fpuPop()+0x49>
c001f3cd:	49                   	dec    ecx
c001f3ce:	89 0d 04 10 03 c0    	mov    DWORD PTR ds:0xc0031004,ecx
c001f3d4:	eb 07                	jmp    c001f3dd <Vm::fpuPop()+0x50>
c001f3d6:	80 0d c0 0f 03 c0 40 	or     BYTE PTR ds:0xc0030fc0,0x40
c001f3dd:	5b                   	pop    ebx
c001f3de:	c3                   	ret    

c001f3df <Vm::x87Handler(regs*)>:
c001f3df:	55                   	push   ebp
c001f3e0:	57                   	push   edi
c001f3e1:	56                   	push   esi
c001f3e2:	53                   	push   ebx
c001f3e3:	83 ec 1c             	sub    esp,0x1c
c001f3e6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f3ea:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f3ef:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f3f2:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f3fa:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f3fe:	50                   	push   eax
c001f3ff:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f403:	50                   	push   eax
c001f404:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f408:	50                   	push   eax
c001f409:	53                   	push   ebx
c001f40a:	e8 99 a1 ff ff       	call   c00195a8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f40f:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f412:	83 c4 10             	add    esp,0x10
c001f415:	89 c6                	mov    esi,eax
c001f417:	80 fa d9             	cmp    dl,0xd9
c001f41a:	0f 85 52 01 00 00    	jne    c001f572 <Vm::x87Handler(regs*)+0x193>
c001f420:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f424:	8d 50 20             	lea    edx,[eax+0x20]
c001f427:	80 fa 0e             	cmp    dl,0xe
c001f42a:	0f 87 86 00 00 00    	ja     c001f4b6 <Vm::x87Handler(regs*)+0xd7>
c001f430:	0f b6 d2             	movzx  edx,dl
c001f433:	ff 24 95 74 be 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd418c]
c001f43a:	e8 e7 fc ff ff       	call   c001f126 <Vm::fpuGet0()>
c001f43f:	eb 05                	jmp    c001f446 <Vm::x87Handler(regs*)+0x67>
c001f441:	e8 e5 fc ff ff       	call   c001f12b <Vm::fpuGet1()>
c001f446:	57                   	push   edi
c001f447:	57                   	push   edi
c001f448:	52                   	push   edx
c001f449:	50                   	push   eax
c001f44a:	e8 e1 fe ff ff       	call   c001f330 <Vm::fpuPush(unsigned long long)>
c001f44f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f453:	83 c4 10             	add    esp,0x10
c001f456:	b0 01                	mov    al,0x1
c001f458:	e9 e3 09 00 00       	jmp    c001fe40 <Vm::x87Handler(regs*)+0xa61>
c001f45d:	83 ec 0c             	sub    esp,0xc
c001f460:	6a 00                	push   0x0
c001f462:	e8 3b fe ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001f467:	59                   	pop    ecx
c001f468:	5e                   	pop    esi
c001f469:	52                   	push   edx
c001f46a:	50                   	push   eax
c001f46b:	e8 c2 fd ff ff       	call   c001f232 <Vm::fpuChs(unsigned long long)>
c001f470:	eb 13                	jmp    c001f485 <Vm::x87Handler(regs*)+0xa6>
c001f472:	83 ec 0c             	sub    esp,0xc
c001f475:	6a 00                	push   0x0
c001f477:	e8 26 fe ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001f47c:	5f                   	pop    edi
c001f47d:	5d                   	pop    ebp
c001f47e:	52                   	push   edx
c001f47f:	50                   	push   eax
c001f480:	e8 a4 fd ff ff       	call   c001f229 <Vm::fpuAbs(unsigned long long)>
c001f485:	83 c4 0c             	add    esp,0xc
c001f488:	52                   	push   edx
c001f489:	50                   	push   eax
c001f48a:	6a 00                	push   0x0
c001f48c:	e8 54 fe ff ff       	call   c001f2e5 <Vm::fpuSetReg(int, unsigned long long)>
c001f491:	eb bc                	jmp    c001f44f <Vm::x87Handler(regs*)+0x70>
c001f493:	e8 d3 fc ff ff       	call   c001f16b <Vm::fpuGetLog210()>
c001f498:	eb ac                	jmp    c001f446 <Vm::x87Handler(regs*)+0x67>
c001f49a:	e8 9c fc ff ff       	call   c001f13b <Vm::fpuGetLog2E()>
c001f49f:	eb a5                	jmp    c001f446 <Vm::x87Handler(regs*)+0x67>
c001f4a1:	e8 8d fc ff ff       	call   c001f133 <Vm::fpuGetPi()>
c001f4a6:	eb 9e                	jmp    c001f446 <Vm::x87Handler(regs*)+0x67>
c001f4a8:	e8 d6 fc ff ff       	call   c001f183 <Vm::fpuGetLog102()>
c001f4ad:	eb 97                	jmp    c001f446 <Vm::x87Handler(regs*)+0x67>
c001f4af:	e8 9f fc ff ff       	call   c001f153 <Vm::fpuGetLogE2()>
c001f4b4:	eb 90                	jmp    c001f446 <Vm::x87Handler(regs*)+0x67>
c001f4b6:	8d 50 40             	lea    edx,[eax+0x40]
c001f4b9:	80 fa 07             	cmp    dl,0x7
c001f4bc:	77 15                	ja     c001f4d3 <Vm::x87Handler(regs*)+0xf4>
c001f4be:	83 ec 0c             	sub    esp,0xc
c001f4c1:	2d c0 00 00 00       	sub    eax,0xc0
c001f4c6:	50                   	push   eax
c001f4c7:	e8 d6 fd ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001f4cc:	59                   	pop    ecx
c001f4cd:	5e                   	pop    esi
c001f4ce:	e9 75 ff ff ff       	jmp    c001f448 <Vm::x87Handler(regs*)+0x69>
c001f4d3:	8d 50 38             	lea    edx,[eax+0x38]
c001f4d6:	80 fa 07             	cmp    dl,0x7
c001f4d9:	77 3c                	ja     c001f517 <Vm::x87Handler(regs*)+0x138>
c001f4db:	83 ec 0c             	sub    esp,0xc
c001f4de:	2d c8 00 00 00       	sub    eax,0xc8
c001f4e3:	50                   	push   eax
c001f4e4:	e8 b9 fd ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001f4e9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f4f0:	89 c6                	mov    esi,eax
c001f4f2:	89 d7                	mov    edi,edx
c001f4f4:	e8 a9 fd ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001f4f9:	83 c4 0c             	add    esp,0xc
c001f4fc:	52                   	push   edx
c001f4fd:	50                   	push   eax
c001f4fe:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f502:	2d c8 00 00 00       	sub    eax,0xc8
c001f507:	50                   	push   eax
c001f508:	e8 d8 fd ff ff       	call   c001f2e5 <Vm::fpuSetReg(int, unsigned long long)>
c001f50d:	83 c4 0c             	add    esp,0xc
c001f510:	57                   	push   edi
c001f511:	56                   	push   esi
c001f512:	e9 73 ff ff ff       	jmp    c001f48a <Vm::x87Handler(regs*)+0xab>
c001f517:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f51b:	84 d2                	test   dl,dl
c001f51d:	75 0f                	jne    c001f52e <Vm::x87Handler(regs*)+0x14f>
c001f51f:	83 ec 0c             	sub    esp,0xc
c001f522:	ff 36                	push   DWORD PTR [esi]
c001f524:	e8 c8 fa ff ff       	call   c001eff1 <Vm::fpu32ToInternal(unsigned int)>
c001f529:	e9 bf 00 00 00       	jmp    c001f5ed <Vm::x87Handler(regs*)+0x20e>
c001f52e:	80 fa 03             	cmp    dl,0x3
c001f531:	75 13                	jne    c001f546 <Vm::x87Handler(regs*)+0x167>
c001f533:	e8 55 fe ff ff       	call   c001f38d <Vm::fpuPop()>
c001f538:	55                   	push   ebp
c001f539:	55                   	push   ebp
c001f53a:	52                   	push   edx
c001f53b:	50                   	push   eax
c001f53c:	e8 4c fa ff ff       	call   c001ef8d <Vm::fpuInternalTo32(unsigned long long)>
c001f541:	e9 88 00 00 00       	jmp    c001f5ce <Vm::x87Handler(regs*)+0x1ef>
c001f546:	80 fa 05             	cmp    dl,0x5
c001f549:	75 0e                	jne    c001f559 <Vm::x87Handler(regs*)+0x17a>
c001f54b:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f54e:	66 a3 c2 0f 03 c0    	mov    ds:0xc0030fc2,ax
c001f554:	e9 df 00 00 00       	jmp    c001f638 <Vm::x87Handler(regs*)+0x259>
c001f559:	31 c0                	xor    eax,eax
c001f55b:	80 fa 07             	cmp    dl,0x7
c001f55e:	0f 85 dc 08 00 00    	jne    c001fe40 <Vm::x87Handler(regs*)+0xa61>
c001f564:	66 a1 c2 0f 03 c0    	mov    ax,ds:0xc0030fc2
c001f56a:	66 89 06             	mov    WORD PTR [esi],ax
c001f56d:	e9 c6 00 00 00       	jmp    c001f638 <Vm::x87Handler(regs*)+0x259>
c001f572:	80 fa d8             	cmp    dl,0xd8
c001f575:	0f 84 c9 00 00 00    	je     c001f644 <Vm::x87Handler(regs*)+0x265>
c001f57b:	80 fa dc             	cmp    dl,0xdc
c001f57e:	0f 84 0d 02 00 00    	je     c001f791 <Vm::x87Handler(regs*)+0x3b2>
c001f584:	80 fa de             	cmp    dl,0xde
c001f587:	0f 84 cd 02 00 00    	je     c001f85a <Vm::x87Handler(regs*)+0x47b>
c001f58d:	80 fa dd             	cmp    dl,0xdd
c001f590:	0f 84 5f 04 00 00    	je     c001f9f5 <Vm::x87Handler(regs*)+0x616>
c001f596:	80 fa da             	cmp    dl,0xda
c001f599:	0f 84 24 05 00 00    	je     c001fac3 <Vm::x87Handler(regs*)+0x6e4>
c001f59f:	80 fa df             	cmp    dl,0xdf
c001f5a2:	0f 84 68 05 00 00    	je     c001fb10 <Vm::x87Handler(regs*)+0x731>
c001f5a8:	31 c0                	xor    eax,eax
c001f5aa:	80 fa db             	cmp    dl,0xdb
c001f5ad:	0f 85 8d 08 00 00    	jne    c001fe40 <Vm::x87Handler(regs*)+0xa61>
c001f5b3:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f5b7:	80 fa 03             	cmp    dl,0x3
c001f5ba:	0f 85 70 06 00 00    	jne    c001fc30 <Vm::x87Handler(regs*)+0x851>
c001f5c0:	e8 c8 fd ff ff       	call   c001f38d <Vm::fpuPop()>
c001f5c5:	55                   	push   ebp
c001f5c6:	55                   	push   ebp
c001f5c7:	52                   	push   edx
c001f5c8:	50                   	push   eax
c001f5c9:	e8 71 fa ff ff       	call   c001f03f <Vm::fpuFloatToLong(unsigned long long)>
c001f5ce:	83 c4 10             	add    esp,0x10
c001f5d1:	89 06                	mov    DWORD PTR [esi],eax
c001f5d3:	eb 63                	jmp    c001f638 <Vm::x87Handler(regs*)+0x259>
c001f5d5:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f5d9:	84 d2                	test   dl,dl
c001f5db:	0f 85 e6 05 00 00    	jne    c001fbc7 <Vm::x87Handler(regs*)+0x7e8>
c001f5e1:	57                   	push   edi
c001f5e2:	57                   	push   edi
c001f5e3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f5e6:	ff 36                	push   DWORD PTR [esi]
c001f5e8:	e8 49 fa ff ff       	call   c001f036 <Vm::fpu64ToInternal(unsigned long long)>
c001f5ed:	5e                   	pop    esi
c001f5ee:	5f                   	pop    edi
c001f5ef:	52                   	push   edx
c001f5f0:	50                   	push   eax
c001f5f1:	e8 3a fd ff ff       	call   c001f330 <Vm::fpuPush(unsigned long long)>
c001f5f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f5fa:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f5fd:	e9 51 fe ff ff       	jmp    c001f453 <Vm::x87Handler(regs*)+0x74>
c001f602:	80 fa 03             	cmp    dl,0x3
c001f605:	0f 85 d7 06 00 00    	jne    c001fce2 <Vm::x87Handler(regs*)+0x903>
c001f60b:	57                   	push   edi
c001f60c:	57                   	push   edi
c001f60d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f610:	ff 36                	push   DWORD PTR [esi]
c001f612:	e8 1f fa ff ff       	call   c001f036 <Vm::fpu64ToInternal(unsigned long long)>
c001f617:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f61e:	89 c6                	mov    esi,eax
c001f620:	89 d7                	mov    edi,edx
c001f622:	e8 7b fc ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001f627:	57                   	push   edi
c001f628:	56                   	push   esi
c001f629:	52                   	push   edx
c001f62a:	50                   	push   eax
c001f62b:	e8 95 fb ff ff       	call   c001f1c5 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f630:	83 c4 20             	add    esp,0x20
c001f633:	e8 55 fd ff ff       	call   c001f38d <Vm::fpuPop()>
c001f638:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f63c:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f63f:	e9 12 fe ff ff       	jmp    c001f456 <Vm::x87Handler(regs*)+0x77>
c001f644:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f648:	8d 50 40             	lea    edx,[eax+0x40]
c001f64b:	80 fa 07             	cmp    dl,0x7
c001f64e:	77 29                	ja     c001f679 <Vm::x87Handler(regs*)+0x29a>
c001f650:	83 ec 0c             	sub    esp,0xc
c001f653:	2d c0 00 00 00       	sub    eax,0xc0
c001f658:	50                   	push   eax
c001f659:	e8 44 fc ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001f65e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f665:	89 c6                	mov    esi,eax
c001f667:	89 d7                	mov    edi,edx
c001f669:	e8 34 fc ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001f66e:	57                   	push   edi
c001f66f:	56                   	push   esi
c001f670:	52                   	push   edx
c001f671:	50                   	push   eax
c001f672:	e8 a1 fb ff ff       	call   c001f218 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f677:	eb 2f                	jmp    c001f6a8 <Vm::x87Handler(regs*)+0x2c9>
c001f679:	8d 50 38             	lea    edx,[eax+0x38]
c001f67c:	80 fa 07             	cmp    dl,0x7
c001f67f:	77 2f                	ja     c001f6b0 <Vm::x87Handler(regs*)+0x2d1>
c001f681:	83 ec 0c             	sub    esp,0xc
c001f684:	2d c8 00 00 00       	sub    eax,0xc8
c001f689:	50                   	push   eax
c001f68a:	e8 13 fc ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001f68f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f696:	89 c6                	mov    esi,eax
c001f698:	89 d7                	mov    edi,edx
c001f69a:	e8 03 fc ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001f69f:	57                   	push   edi
c001f6a0:	56                   	push   esi
c001f6a1:	52                   	push   edx
c001f6a2:	50                   	push   eax
c001f6a3:	e8 a9 fb ff ff       	call   c001f251 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f6a8:	83 c4 1c             	add    esp,0x1c
c001f6ab:	e9 d8 fd ff ff       	jmp    c001f488 <Vm::x87Handler(regs*)+0xa9>
c001f6b0:	8d 50 30             	lea    edx,[eax+0x30]
c001f6b3:	80 fa 07             	cmp    dl,0x7
c001f6b6:	77 0d                	ja     c001f6c5 <Vm::x87Handler(regs*)+0x2e6>
c001f6b8:	83 ec 0c             	sub    esp,0xc
c001f6bb:	2d d0 00 00 00       	sub    eax,0xd0
c001f6c0:	e9 99 03 00 00       	jmp    c001fa5e <Vm::x87Handler(regs*)+0x67f>
c001f6c5:	8d 50 28             	lea    edx,[eax+0x28]
c001f6c8:	80 fa 07             	cmp    dl,0x7
c001f6cb:	77 0d                	ja     c001f6da <Vm::x87Handler(regs*)+0x2fb>
c001f6cd:	83 ec 0c             	sub    esp,0xc
c001f6d0:	2d d8 00 00 00       	sub    eax,0xd8
c001f6d5:	e9 c0 03 00 00       	jmp    c001fa9a <Vm::x87Handler(regs*)+0x6bb>
c001f6da:	8d 50 20             	lea    edx,[eax+0x20]
c001f6dd:	80 fa 07             	cmp    dl,0x7
c001f6e0:	77 1b                	ja     c001f6fd <Vm::x87Handler(regs*)+0x31e>
c001f6e2:	83 ec 0c             	sub    esp,0xc
c001f6e5:	2d e0 00 00 00       	sub    eax,0xe0
c001f6ea:	50                   	push   eax
c001f6eb:	e8 b2 fb ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001f6f0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f6f7:	89 c6                	mov    esi,eax
c001f6f9:	89 d7                	mov    edi,edx
c001f6fb:	eb 22                	jmp    c001f71f <Vm::x87Handler(regs*)+0x340>
c001f6fd:	8d 50 18             	lea    edx,[eax+0x18]
c001f700:	80 fa 07             	cmp    dl,0x7
c001f703:	77 2d                	ja     c001f732 <Vm::x87Handler(regs*)+0x353>
c001f705:	83 ec 0c             	sub    esp,0xc
c001f708:	6a 00                	push   0x0
c001f70a:	e8 93 fb ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001f70f:	89 c6                	mov    esi,eax
c001f711:	89 d7                	mov    edi,edx
c001f713:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f717:	2d e8 00 00 00       	sub    eax,0xe8
c001f71c:	89 04 24             	mov    DWORD PTR [esp],eax
c001f71f:	e8 7e fb ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001f724:	57                   	push   edi
c001f725:	56                   	push   esi
c001f726:	52                   	push   edx
c001f727:	50                   	push   eax
c001f728:	e8 15 fb ff ff       	call   c001f242 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f72d:	e9 76 ff ff ff       	jmp    c001f6a8 <Vm::x87Handler(regs*)+0x2c9>
c001f732:	8d 50 10             	lea    edx,[eax+0x10]
c001f735:	80 fa 07             	cmp    dl,0x7
c001f738:	77 1b                	ja     c001f755 <Vm::x87Handler(regs*)+0x376>
c001f73a:	83 ec 0c             	sub    esp,0xc
c001f73d:	2d f0 00 00 00       	sub    eax,0xf0
c001f742:	50                   	push   eax
c001f743:	e8 5a fb ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001f748:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f74f:	89 c6                	mov    esi,eax
c001f751:	89 d7                	mov    edi,edx
c001f753:	eb 22                	jmp    c001f777 <Vm::x87Handler(regs*)+0x398>
c001f755:	3c f7                	cmp    al,0xf7
c001f757:	0f 86 d1 03 00 00    	jbe    c001fb2e <Vm::x87Handler(regs*)+0x74f>
c001f75d:	83 ec 0c             	sub    esp,0xc
c001f760:	6a 00                	push   0x0
c001f762:	e8 3b fb ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001f767:	89 c6                	mov    esi,eax
c001f769:	89 d7                	mov    edi,edx
c001f76b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f76f:	2d f8 00 00 00       	sub    eax,0xf8
c001f774:	89 04 24             	mov    DWORD PTR [esp],eax
c001f777:	e8 26 fb ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001f77c:	57                   	push   edi
c001f77d:	56                   	push   esi
c001f77e:	52                   	push   edx
c001f77f:	50                   	push   eax
c001f780:	e8 eb fa ff ff       	call   c001f270 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f785:	83 c4 1c             	add    esp,0x1c
c001f788:	52                   	push   edx
c001f789:	50                   	push   eax
c001f78a:	6a 00                	push   0x0
c001f78c:	e9 51 02 00 00       	jmp    c001f9e2 <Vm::x87Handler(regs*)+0x603>
c001f791:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f795:	8d 50 40             	lea    edx,[eax+0x40]
c001f798:	80 fa 07             	cmp    dl,0x7
c001f79b:	77 37                	ja     c001f7d4 <Vm::x87Handler(regs*)+0x3f5>
c001f79d:	83 ec 0c             	sub    esp,0xc
c001f7a0:	2d c0 00 00 00       	sub    eax,0xc0
c001f7a5:	50                   	push   eax
c001f7a6:	e8 f7 fa ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001f7ab:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7b2:	89 c6                	mov    esi,eax
c001f7b4:	89 d7                	mov    edi,edx
c001f7b6:	e8 e7 fa ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001f7bb:	57                   	push   edi
c001f7bc:	56                   	push   esi
c001f7bd:	52                   	push   edx
c001f7be:	50                   	push   eax
c001f7bf:	e8 54 fa ff ff       	call   c001f218 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f7c4:	83 c4 1c             	add    esp,0x1c
c001f7c7:	52                   	push   edx
c001f7c8:	50                   	push   eax
c001f7c9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7cd:	2d c0 00 00 00       	sub    eax,0xc0
c001f7d2:	eb 3d                	jmp    c001f811 <Vm::x87Handler(regs*)+0x432>
c001f7d4:	8d 50 38             	lea    edx,[eax+0x38]
c001f7d7:	80 fa 07             	cmp    dl,0x7
c001f7da:	77 3b                	ja     c001f817 <Vm::x87Handler(regs*)+0x438>
c001f7dc:	83 ec 0c             	sub    esp,0xc
c001f7df:	2d c8 00 00 00       	sub    eax,0xc8
c001f7e4:	50                   	push   eax
c001f7e5:	e8 b8 fa ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001f7ea:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7f1:	89 c6                	mov    esi,eax
c001f7f3:	89 d7                	mov    edi,edx
c001f7f5:	e8 a8 fa ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001f7fa:	57                   	push   edi
c001f7fb:	56                   	push   esi
c001f7fc:	52                   	push   edx
c001f7fd:	50                   	push   eax
c001f7fe:	e8 4e fa ff ff       	call   c001f251 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f803:	83 c4 1c             	add    esp,0x1c
c001f806:	52                   	push   edx
c001f807:	50                   	push   eax
c001f808:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f80c:	2d c8 00 00 00       	sub    eax,0xc8
c001f811:	50                   	push   eax
c001f812:	e9 75 fc ff ff       	jmp    c001f48c <Vm::x87Handler(regs*)+0xad>
c001f817:	83 c0 18             	add    eax,0x18
c001f81a:	3c 07                	cmp    al,0x7
c001f81c:	0f 87 3b 04 00 00    	ja     c001fc5d <Vm::x87Handler(regs*)+0x87e>
c001f822:	83 ec 0c             	sub    esp,0xc
c001f825:	6a 00                	push   0x0
c001f827:	e8 76 fa ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001f82c:	89 c6                	mov    esi,eax
c001f82e:	89 d7                	mov    edi,edx
c001f830:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f834:	2d e8 00 00 00       	sub    eax,0xe8
c001f839:	89 04 24             	mov    DWORD PTR [esp],eax
c001f83c:	e8 61 fa ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001f841:	57                   	push   edi
c001f842:	56                   	push   esi
c001f843:	52                   	push   edx
c001f844:	50                   	push   eax
c001f845:	e8 f8 f9 ff ff       	call   c001f242 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f84a:	83 c4 1c             	add    esp,0x1c
c001f84d:	52                   	push   edx
c001f84e:	50                   	push   eax
c001f84f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f853:	2d e8 00 00 00       	sub    eax,0xe8
c001f858:	eb b7                	jmp    c001f811 <Vm::x87Handler(regs*)+0x432>
c001f85a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f85e:	8d 50 40             	lea    edx,[eax+0x40]
c001f861:	80 fa 07             	cmp    dl,0x7
c001f864:	77 3a                	ja     c001f8a0 <Vm::x87Handler(regs*)+0x4c1>
c001f866:	83 ec 0c             	sub    esp,0xc
c001f869:	2d c0 00 00 00       	sub    eax,0xc0
c001f86e:	50                   	push   eax
c001f86f:	e8 2e fa ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001f874:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f87b:	89 c6                	mov    esi,eax
c001f87d:	89 d7                	mov    edi,edx
c001f87f:	e8 1e fa ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001f884:	57                   	push   edi
c001f885:	56                   	push   esi
c001f886:	52                   	push   edx
c001f887:	50                   	push   eax
c001f888:	e8 8b f9 ff ff       	call   c001f218 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f88d:	83 c4 1c             	add    esp,0x1c
c001f890:	52                   	push   edx
c001f891:	50                   	push   eax
c001f892:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f896:	2d c0 00 00 00       	sub    eax,0xc0
c001f89b:	e9 9e 01 00 00       	jmp    c001fa3e <Vm::x87Handler(regs*)+0x65f>
c001f8a0:	8d 50 20             	lea    edx,[eax+0x20]
c001f8a3:	80 fa 07             	cmp    dl,0x7
c001f8a6:	77 3a                	ja     c001f8e2 <Vm::x87Handler(regs*)+0x503>
c001f8a8:	83 ec 0c             	sub    esp,0xc
c001f8ab:	2d e0 00 00 00       	sub    eax,0xe0
c001f8b0:	50                   	push   eax
c001f8b1:	e8 ec f9 ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001f8b6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f8bd:	89 c6                	mov    esi,eax
c001f8bf:	89 d7                	mov    edi,edx
c001f8c1:	e8 dc f9 ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001f8c6:	57                   	push   edi
c001f8c7:	56                   	push   esi
c001f8c8:	52                   	push   edx
c001f8c9:	50                   	push   eax
c001f8ca:	e8 73 f9 ff ff       	call   c001f242 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f8cf:	83 c4 1c             	add    esp,0x1c
c001f8d2:	52                   	push   edx
c001f8d3:	50                   	push   eax
c001f8d4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8d8:	2d e0 00 00 00       	sub    eax,0xe0
c001f8dd:	e9 5c 01 00 00       	jmp    c001fa3e <Vm::x87Handler(regs*)+0x65f>
c001f8e2:	8d 50 18             	lea    edx,[eax+0x18]
c001f8e5:	80 fa 07             	cmp    dl,0x7
c001f8e8:	77 3b                	ja     c001f925 <Vm::x87Handler(regs*)+0x546>
c001f8ea:	83 ec 0c             	sub    esp,0xc
c001f8ed:	6a 00                	push   0x0
c001f8ef:	e8 ae f9 ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001f8f4:	89 c6                	mov    esi,eax
c001f8f6:	89 d7                	mov    edi,edx
c001f8f8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8fc:	2d e8 00 00 00       	sub    eax,0xe8
c001f901:	89 04 24             	mov    DWORD PTR [esp],eax
c001f904:	e8 99 f9 ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001f909:	57                   	push   edi
c001f90a:	56                   	push   esi
c001f90b:	52                   	push   edx
c001f90c:	50                   	push   eax
c001f90d:	e8 30 f9 ff ff       	call   c001f242 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f912:	83 c4 1c             	add    esp,0x1c
c001f915:	52                   	push   edx
c001f916:	50                   	push   eax
c001f917:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f91b:	2d e8 00 00 00       	sub    eax,0xe8
c001f920:	e9 19 01 00 00       	jmp    c001fa3e <Vm::x87Handler(regs*)+0x65f>
c001f925:	8d 50 38             	lea    edx,[eax+0x38]
c001f928:	80 fa 07             	cmp    dl,0x7
c001f92b:	77 37                	ja     c001f964 <Vm::x87Handler(regs*)+0x585>
c001f92d:	83 ec 0c             	sub    esp,0xc
c001f930:	2d c8 00 00 00       	sub    eax,0xc8
c001f935:	50                   	push   eax
c001f936:	e8 67 f9 ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001f93b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f942:	89 c6                	mov    esi,eax
c001f944:	89 d7                	mov    edi,edx
c001f946:	e8 57 f9 ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001f94b:	57                   	push   edi
c001f94c:	56                   	push   esi
c001f94d:	52                   	push   edx
c001f94e:	50                   	push   eax
c001f94f:	e8 fd f8 ff ff       	call   c001f251 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f954:	83 c4 1c             	add    esp,0x1c
c001f957:	52                   	push   edx
c001f958:	50                   	push   eax
c001f959:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f95d:	2d c8 00 00 00       	sub    eax,0xc8
c001f962:	eb 7d                	jmp    c001f9e1 <Vm::x87Handler(regs*)+0x602>
c001f964:	3c f7                	cmp    al,0xf7
c001f966:	76 38                	jbe    c001f9a0 <Vm::x87Handler(regs*)+0x5c1>
c001f968:	83 ec 0c             	sub    esp,0xc
c001f96b:	6a 00                	push   0x0
c001f96d:	e8 30 f9 ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001f972:	89 c6                	mov    esi,eax
c001f974:	89 d7                	mov    edi,edx
c001f976:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f97a:	2d f8 00 00 00       	sub    eax,0xf8
c001f97f:	89 04 24             	mov    DWORD PTR [esp],eax
c001f982:	e8 1b f9 ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001f987:	57                   	push   edi
c001f988:	56                   	push   esi
c001f989:	52                   	push   edx
c001f98a:	50                   	push   eax
c001f98b:	e8 e0 f8 ff ff       	call   c001f270 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f990:	83 c4 1c             	add    esp,0x1c
c001f993:	52                   	push   edx
c001f994:	50                   	push   eax
c001f995:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f999:	2d f8 00 00 00       	sub    eax,0xf8
c001f99e:	eb 41                	jmp    c001f9e1 <Vm::x87Handler(regs*)+0x602>
c001f9a0:	8d 50 10             	lea    edx,[eax+0x10]
c001f9a3:	80 fa 07             	cmp    dl,0x7
c001f9a6:	0f 87 5a 01 00 00    	ja     c001fb06 <Vm::x87Handler(regs*)+0x727>
c001f9ac:	83 ec 0c             	sub    esp,0xc
c001f9af:	2d f0 00 00 00       	sub    eax,0xf0
c001f9b4:	50                   	push   eax
c001f9b5:	e8 e8 f8 ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001f9ba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f9c1:	89 c6                	mov    esi,eax
c001f9c3:	89 d7                	mov    edi,edx
c001f9c5:	e8 d8 f8 ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001f9ca:	57                   	push   edi
c001f9cb:	56                   	push   esi
c001f9cc:	52                   	push   edx
c001f9cd:	50                   	push   eax
c001f9ce:	e8 9d f8 ff ff       	call   c001f270 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f9d3:	83 c4 1c             	add    esp,0x1c
c001f9d6:	52                   	push   edx
c001f9d7:	50                   	push   eax
c001f9d8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9dc:	2d f0 00 00 00       	sub    eax,0xf0
c001f9e1:	50                   	push   eax
c001f9e2:	e8 fe f8 ff ff       	call   c001f2e5 <Vm::fpuSetReg(int, unsigned long long)>
c001f9e7:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f9eb:	e8 9d f9 ff ff       	call   c001f38d <Vm::fpuPop()>
c001f9f0:	e9 5e fa ff ff       	jmp    c001f453 <Vm::x87Handler(regs*)+0x74>
c001f9f5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9f9:	8d 50 30             	lea    edx,[eax+0x30]
c001f9fc:	80 fa 07             	cmp    dl,0x7
c001f9ff:	77 1d                	ja     c001fa1e <Vm::x87Handler(regs*)+0x63f>
c001fa01:	83 ec 0c             	sub    esp,0xc
c001fa04:	6a 00                	push   0x0
c001fa06:	e8 97 f8 ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001fa0b:	83 c4 0c             	add    esp,0xc
c001fa0e:	52                   	push   edx
c001fa0f:	50                   	push   eax
c001fa10:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa14:	2d d0 00 00 00       	sub    eax,0xd0
c001fa19:	e9 f3 fd ff ff       	jmp    c001f811 <Vm::x87Handler(regs*)+0x432>
c001fa1e:	8d 50 28             	lea    edx,[eax+0x28]
c001fa21:	80 fa 07             	cmp    dl,0x7
c001fa24:	77 28                	ja     c001fa4e <Vm::x87Handler(regs*)+0x66f>
c001fa26:	83 ec 0c             	sub    esp,0xc
c001fa29:	6a 00                	push   0x0
c001fa2b:	e8 72 f8 ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001fa30:	83 c4 0c             	add    esp,0xc
c001fa33:	52                   	push   edx
c001fa34:	50                   	push   eax
c001fa35:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa39:	2d d8 00 00 00       	sub    eax,0xd8
c001fa3e:	50                   	push   eax
c001fa3f:	e8 a1 f8 ff ff       	call   c001f2e5 <Vm::fpuSetReg(int, unsigned long long)>
c001fa44:	e8 44 f9 ff ff       	call   c001f38d <Vm::fpuPop()>
c001fa49:	e9 01 fa ff ff       	jmp    c001f44f <Vm::x87Handler(regs*)+0x70>
c001fa4e:	8d 50 20             	lea    edx,[eax+0x20]
c001fa51:	80 fa 07             	cmp    dl,0x7
c001fa54:	77 30                	ja     c001fa86 <Vm::x87Handler(regs*)+0x6a7>
c001fa56:	83 ec 0c             	sub    esp,0xc
c001fa59:	2d e0 00 00 00       	sub    eax,0xe0
c001fa5e:	50                   	push   eax
c001fa5f:	e8 3e f8 ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001fa64:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa6b:	89 c6                	mov    esi,eax
c001fa6d:	89 d7                	mov    edi,edx
c001fa6f:	e8 2e f8 ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001fa74:	57                   	push   edi
c001fa75:	56                   	push   esi
c001fa76:	52                   	push   edx
c001fa77:	50                   	push   eax
c001fa78:	e8 48 f7 ff ff       	call   c001f1c5 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fa7d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fa81:	e9 54 02 00 00       	jmp    c001fcda <Vm::x87Handler(regs*)+0x8fb>
c001fa86:	8d 50 18             	lea    edx,[eax+0x18]
c001fa89:	80 fa 07             	cmp    dl,0x7
c001fa8c:	0f 87 43 fb ff ff    	ja     c001f5d5 <Vm::x87Handler(regs*)+0x1f6>
c001fa92:	83 ec 0c             	sub    esp,0xc
c001fa95:	2d e8 00 00 00       	sub    eax,0xe8
c001fa9a:	50                   	push   eax
c001fa9b:	e8 02 f8 ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001faa0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001faa7:	89 c6                	mov    esi,eax
c001faa9:	89 d7                	mov    edi,edx
c001faab:	e8 f2 f7 ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001fab0:	57                   	push   edi
c001fab1:	56                   	push   esi
c001fab2:	52                   	push   edx
c001fab3:	50                   	push   eax
c001fab4:	e8 0c f7 ff ff       	call   c001f1c5 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fab9:	83 c4 20             	add    esp,0x20
c001fabc:	e8 cc f8 ff ff       	call   c001f38d <Vm::fpuPop()>
c001fac1:	eb 62                	jmp    c001fb25 <Vm::x87Handler(regs*)+0x746>
c001fac3:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001fac7:	0f 85 0f 01 00 00    	jne    c001fbdc <Vm::x87Handler(regs*)+0x7fd>
c001facd:	83 ec 0c             	sub    esp,0xc
c001fad0:	6a 01                	push   0x1
c001fad2:	e8 cb f7 ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001fad7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fade:	89 c6                	mov    esi,eax
c001fae0:	89 d7                	mov    edi,edx
c001fae2:	e8 bb f7 ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001fae7:	57                   	push   edi
c001fae8:	56                   	push   esi
c001fae9:	52                   	push   edx
c001faea:	50                   	push   eax
c001faeb:	e8 d5 f6 ff ff       	call   c001f1c5 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001faf0:	83 c4 20             	add    esp,0x20
c001faf3:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001faf7:	e8 91 f8 ff ff       	call   c001f38d <Vm::fpuPop()>
c001fafc:	e8 8c f8 ff ff       	call   c001f38d <Vm::fpuPop()>
c001fb01:	e9 50 f9 ff ff       	jmp    c001f456 <Vm::x87Handler(regs*)+0x77>
c001fb06:	3c d9                	cmp    al,0xd9
c001fb08:	0f 85 b5 02 00 00    	jne    c001fdc3 <Vm::x87Handler(regs*)+0x9e4>
c001fb0e:	eb bd                	jmp    c001facd <Vm::x87Handler(regs*)+0x6ee>
c001fb10:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001fb14:	0f 85 ea 02 00 00    	jne    c001fe04 <Vm::x87Handler(regs*)+0xa25>
c001fb1a:	0f b7 05 c0 0f 03 c0 	movzx  eax,WORD PTR ds:0xc0030fc0
c001fb21:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001fb25:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fb29:	e9 28 f9 ff ff       	jmp    c001f456 <Vm::x87Handler(regs*)+0x77>
c001fb2e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb32:	84 d2                	test   dl,dl
c001fb34:	75 0f                	jne    c001fb45 <Vm::x87Handler(regs*)+0x766>
c001fb36:	83 ec 0c             	sub    esp,0xc
c001fb39:	ff 36                	push   DWORD PTR [esi]
c001fb3b:	e8 b1 f4 ff ff       	call   c001eff1 <Vm::fpu32ToInternal(unsigned int)>
c001fb40:	e9 2c 01 00 00       	jmp    c001fc71 <Vm::x87Handler(regs*)+0x892>
c001fb45:	80 fa 01             	cmp    dl,0x1
c001fb48:	75 0f                	jne    c001fb59 <Vm::x87Handler(regs*)+0x77a>
c001fb4a:	83 ec 0c             	sub    esp,0xc
c001fb4d:	ff 36                	push   DWORD PTR [esi]
c001fb4f:	e8 9d f4 ff ff       	call   c001eff1 <Vm::fpu32ToInternal(unsigned int)>
c001fb54:	e9 81 02 00 00       	jmp    c001fdda <Vm::x87Handler(regs*)+0x9fb>
c001fb59:	80 fa 04             	cmp    dl,0x4
c001fb5c:	75 0f                	jne    c001fb6d <Vm::x87Handler(regs*)+0x78e>
c001fb5e:	83 ec 0c             	sub    esp,0xc
c001fb61:	ff 36                	push   DWORD PTR [esi]
c001fb63:	e8 89 f4 ff ff       	call   c001eff1 <Vm::fpu32ToInternal(unsigned int)>
c001fb68:	e9 86 01 00 00       	jmp    c001fcf3 <Vm::x87Handler(regs*)+0x914>
c001fb6d:	80 fa 05             	cmp    dl,0x5
c001fb70:	75 1b                	jne    c001fb8d <Vm::x87Handler(regs*)+0x7ae>
c001fb72:	83 ec 0c             	sub    esp,0xc
c001fb75:	6a 00                	push   0x0
c001fb77:	e8 26 f7 ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001fb7c:	89 c7                	mov    edi,eax
c001fb7e:	89 d5                	mov    ebp,edx
c001fb80:	58                   	pop    eax
c001fb81:	ff 36                	push   DWORD PTR [esi]
c001fb83:	e8 69 f4 ff ff       	call   c001eff1 <Vm::fpu32ToInternal(unsigned int)>
c001fb88:	e9 a3 01 00 00       	jmp    c001fd30 <Vm::x87Handler(regs*)+0x951>
c001fb8d:	80 fa 06             	cmp    dl,0x6
c001fb90:	75 0f                	jne    c001fba1 <Vm::x87Handler(regs*)+0x7c2>
c001fb92:	83 ec 0c             	sub    esp,0xc
c001fb95:	ff 36                	push   DWORD PTR [esi]
c001fb97:	e8 55 f4 ff ff       	call   c001eff1 <Vm::fpu32ToInternal(unsigned int)>
c001fb9c:	e9 ae 01 00 00       	jmp    c001fd4f <Vm::x87Handler(regs*)+0x970>
c001fba1:	31 c0                	xor    eax,eax
c001fba3:	80 fa 07             	cmp    dl,0x7
c001fba6:	0f 85 94 02 00 00    	jne    c001fe40 <Vm::x87Handler(regs*)+0xa61>
c001fbac:	83 ec 0c             	sub    esp,0xc
c001fbaf:	6a 00                	push   0x0
c001fbb1:	e8 ec f6 ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001fbb6:	89 c7                	mov    edi,eax
c001fbb8:	89 d5                	mov    ebp,edx
c001fbba:	58                   	pop    eax
c001fbbb:	ff 36                	push   DWORD PTR [esi]
c001fbbd:	e8 2f f4 ff ff       	call   c001eff1 <Vm::fpu32ToInternal(unsigned int)>
c001fbc2:	e9 cb 01 00 00       	jmp    c001fd92 <Vm::x87Handler(regs*)+0x9b3>
c001fbc7:	80 fa 03             	cmp    dl,0x3
c001fbca:	0f 85 d3 01 00 00    	jne    c001fda3 <Vm::x87Handler(regs*)+0x9c4>
c001fbd0:	e8 b8 f7 ff ff       	call   c001f38d <Vm::fpuPop()>
c001fbd5:	51                   	push   ecx
c001fbd6:	51                   	push   ecx
c001fbd7:	e9 de 01 00 00       	jmp    c001fdba <Vm::x87Handler(regs*)+0x9db>
c001fbdc:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fbe0:	80 fa 01             	cmp    dl,0x1
c001fbe3:	75 09                	jne    c001fbee <Vm::x87Handler(regs*)+0x80f>
c001fbe5:	57                   	push   edi
c001fbe6:	57                   	push   edi
c001fbe7:	8b 06                	mov    eax,DWORD PTR [esi]
c001fbe9:	e9 e3 01 00 00       	jmp    c001fdd1 <Vm::x87Handler(regs*)+0x9f2>
c001fbee:	80 fa 04             	cmp    dl,0x4
c001fbf1:	75 12                	jne    c001fc05 <Vm::x87Handler(regs*)+0x826>
c001fbf3:	31 d2                	xor    edx,edx
c001fbf5:	51                   	push   ecx
c001fbf6:	51                   	push   ecx
c001fbf7:	8b 06                	mov    eax,DWORD PTR [esi]
c001fbf9:	52                   	push   edx
c001fbfa:	50                   	push   eax
c001fbfb:	e8 d0 f4 ff ff       	call   c001f0d0 <Vm::fpuLongToFloat(long long)>
c001fc00:	e9 ee 00 00 00       	jmp    c001fcf3 <Vm::x87Handler(regs*)+0x914>
c001fc05:	31 c0                	xor    eax,eax
c001fc07:	80 fa 07             	cmp    dl,0x7
c001fc0a:	0f 85 30 02 00 00    	jne    c001fe40 <Vm::x87Handler(regs*)+0xa61>
c001fc10:	83 ec 0c             	sub    esp,0xc
c001fc13:	6a 00                	push   0x0
c001fc15:	e8 88 f6 ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001fc1a:	89 c7                	mov    edi,eax
c001fc1c:	89 d5                	mov    ebp,edx
c001fc1e:	58                   	pop    eax
c001fc1f:	8b 06                	mov    eax,DWORD PTR [esi]
c001fc21:	5a                   	pop    edx
c001fc22:	31 d2                	xor    edx,edx
c001fc24:	52                   	push   edx
c001fc25:	50                   	push   eax
c001fc26:	e8 a5 f4 ff ff       	call   c001f0d0 <Vm::fpuLongToFloat(long long)>
c001fc2b:	e9 62 01 00 00       	jmp    c001fd92 <Vm::x87Handler(regs*)+0x9b3>
c001fc30:	84 d2                	test   dl,dl
c001fc32:	75 0d                	jne    c001fc41 <Vm::x87Handler(regs*)+0x862>
c001fc34:	31 d2                	xor    edx,edx
c001fc36:	55                   	push   ebp
c001fc37:	55                   	push   ebp
c001fc38:	8b 06                	mov    eax,DWORD PTR [esi]
c001fc3a:	52                   	push   edx
c001fc3b:	50                   	push   eax
c001fc3c:	e9 d3 01 00 00       	jmp    c001fe14 <Vm::x87Handler(regs*)+0xa35>
c001fc41:	31 c0                	xor    eax,eax
c001fc43:	80 fa 02             	cmp    dl,0x2
c001fc46:	0f 85 f4 01 00 00    	jne    c001fe40 <Vm::x87Handler(regs*)+0xa61>
c001fc4c:	83 ec 0c             	sub    esp,0xc
c001fc4f:	6a 00                	push   0x0
c001fc51:	e8 4c f6 ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001fc56:	59                   	pop    ecx
c001fc57:	5f                   	pop    edi
c001fc58:	e9 6a f9 ff ff       	jmp    c001f5c7 <Vm::x87Handler(regs*)+0x1e8>
c001fc5d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc61:	84 d2                	test   dl,dl
c001fc63:	75 2a                	jne    c001fc8f <Vm::x87Handler(regs*)+0x8b0>
c001fc65:	50                   	push   eax
c001fc66:	50                   	push   eax
c001fc67:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc6a:	ff 36                	push   DWORD PTR [esi]
c001fc6c:	e8 c5 f3 ff ff       	call   c001f036 <Vm::fpu64ToInternal(unsigned long long)>
c001fc71:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc78:	89 c6                	mov    esi,eax
c001fc7a:	89 d7                	mov    edi,edx
c001fc7c:	e8 21 f6 ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001fc81:	57                   	push   edi
c001fc82:	56                   	push   esi
c001fc83:	52                   	push   edx
c001fc84:	50                   	push   eax
c001fc85:	e8 8e f5 ff ff       	call   c001f218 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fc8a:	e9 64 01 00 00       	jmp    c001fdf3 <Vm::x87Handler(regs*)+0xa14>
c001fc8f:	80 fa 01             	cmp    dl,0x1
c001fc92:	75 11                	jne    c001fca5 <Vm::x87Handler(regs*)+0x8c6>
c001fc94:	50                   	push   eax
c001fc95:	50                   	push   eax
c001fc96:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc99:	ff 36                	push   DWORD PTR [esi]
c001fc9b:	e8 96 f3 ff ff       	call   c001f036 <Vm::fpu64ToInternal(unsigned long long)>
c001fca0:	e9 35 01 00 00       	jmp    c001fdda <Vm::x87Handler(regs*)+0x9fb>
c001fca5:	80 fa 02             	cmp    dl,0x2
c001fca8:	0f 85 54 f9 ff ff    	jne    c001f602 <Vm::x87Handler(regs*)+0x223>
c001fcae:	55                   	push   ebp
c001fcaf:	55                   	push   ebp
c001fcb0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fcb3:	ff 36                	push   DWORD PTR [esi]
c001fcb5:	e8 7c f3 ff ff       	call   c001f036 <Vm::fpu64ToInternal(unsigned long long)>
c001fcba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcc1:	89 c6                	mov    esi,eax
c001fcc3:	89 d7                	mov    edi,edx
c001fcc5:	e8 d8 f5 ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001fcca:	57                   	push   edi
c001fccb:	56                   	push   esi
c001fccc:	52                   	push   edx
c001fccd:	50                   	push   eax
c001fcce:	e8 f2 f4 ff ff       	call   c001f1c5 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fcd3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fcd7:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fcda:	83 c4 20             	add    esp,0x20
c001fcdd:	e9 74 f7 ff ff       	jmp    c001f456 <Vm::x87Handler(regs*)+0x77>
c001fce2:	80 fa 04             	cmp    dl,0x4
c001fce5:	75 2a                	jne    c001fd11 <Vm::x87Handler(regs*)+0x932>
c001fce7:	51                   	push   ecx
c001fce8:	51                   	push   ecx
c001fce9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fcec:	ff 36                	push   DWORD PTR [esi]
c001fcee:	e8 43 f3 ff ff       	call   c001f036 <Vm::fpu64ToInternal(unsigned long long)>
c001fcf3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcfa:	89 c6                	mov    esi,eax
c001fcfc:	89 d7                	mov    edi,edx
c001fcfe:	e8 9f f5 ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001fd03:	57                   	push   edi
c001fd04:	56                   	push   esi
c001fd05:	52                   	push   edx
c001fd06:	50                   	push   eax
c001fd07:	e8 36 f5 ff ff       	call   c001f242 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fd0c:	e9 e2 00 00 00       	jmp    c001fdf3 <Vm::x87Handler(regs*)+0xa14>
c001fd11:	80 fa 05             	cmp    dl,0x5
c001fd14:	75 28                	jne    c001fd3e <Vm::x87Handler(regs*)+0x95f>
c001fd16:	83 ec 0c             	sub    esp,0xc
c001fd19:	6a 00                	push   0x0
c001fd1b:	e8 82 f5 ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001fd20:	89 c7                	mov    edi,eax
c001fd22:	89 d5                	mov    ebp,edx
c001fd24:	58                   	pop    eax
c001fd25:	5a                   	pop    edx
c001fd26:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd29:	ff 36                	push   DWORD PTR [esi]
c001fd2b:	e8 06 f3 ff ff       	call   c001f036 <Vm::fpu64ToInternal(unsigned long long)>
c001fd30:	83 c4 10             	add    esp,0x10
c001fd33:	55                   	push   ebp
c001fd34:	57                   	push   edi
c001fd35:	52                   	push   edx
c001fd36:	50                   	push   eax
c001fd37:	e8 06 f5 ff ff       	call   c001f242 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fd3c:	eb 60                	jmp    c001fd9e <Vm::x87Handler(regs*)+0x9bf>
c001fd3e:	80 fa 06             	cmp    dl,0x6
c001fd41:	75 2a                	jne    c001fd6d <Vm::x87Handler(regs*)+0x98e>
c001fd43:	51                   	push   ecx
c001fd44:	51                   	push   ecx
c001fd45:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd48:	ff 36                	push   DWORD PTR [esi]
c001fd4a:	e8 e7 f2 ff ff       	call   c001f036 <Vm::fpu64ToInternal(unsigned long long)>
c001fd4f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd56:	89 c6                	mov    esi,eax
c001fd58:	89 d7                	mov    edi,edx
c001fd5a:	e8 43 f5 ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001fd5f:	57                   	push   edi
c001fd60:	56                   	push   esi
c001fd61:	52                   	push   edx
c001fd62:	50                   	push   eax
c001fd63:	e8 08 f5 ff ff       	call   c001f270 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fd68:	e9 86 00 00 00       	jmp    c001fdf3 <Vm::x87Handler(regs*)+0xa14>
c001fd6d:	31 c0                	xor    eax,eax
c001fd6f:	80 fa 07             	cmp    dl,0x7
c001fd72:	0f 85 c8 00 00 00    	jne    c001fe40 <Vm::x87Handler(regs*)+0xa61>
c001fd78:	83 ec 0c             	sub    esp,0xc
c001fd7b:	6a 00                	push   0x0
c001fd7d:	e8 20 f5 ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001fd82:	89 c7                	mov    edi,eax
c001fd84:	89 d5                	mov    ebp,edx
c001fd86:	58                   	pop    eax
c001fd87:	5a                   	pop    edx
c001fd88:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd8b:	ff 36                	push   DWORD PTR [esi]
c001fd8d:	e8 a4 f2 ff ff       	call   c001f036 <Vm::fpu64ToInternal(unsigned long long)>
c001fd92:	83 c4 10             	add    esp,0x10
c001fd95:	55                   	push   ebp
c001fd96:	57                   	push   edi
c001fd97:	52                   	push   edx
c001fd98:	50                   	push   eax
c001fd99:	e8 d2 f4 ff ff       	call   c001f270 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fd9e:	83 c4 0c             	add    esp,0xc
c001fda1:	eb 53                	jmp    c001fdf6 <Vm::x87Handler(regs*)+0xa17>
c001fda3:	31 c0                	xor    eax,eax
c001fda5:	80 fa 02             	cmp    dl,0x2
c001fda8:	0f 85 92 00 00 00    	jne    c001fe40 <Vm::x87Handler(regs*)+0xa61>
c001fdae:	83 ec 0c             	sub    esp,0xc
c001fdb1:	6a 00                	push   0x0
c001fdb3:	e8 ea f4 ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001fdb8:	59                   	pop    ecx
c001fdb9:	5f                   	pop    edi
c001fdba:	52                   	push   edx
c001fdbb:	50                   	push   eax
c001fdbc:	e8 27 f2 ff ff       	call   c001efe8 <Vm::fpuInternalTo64(unsigned long long)>
c001fdc1:	eb 70                	jmp    c001fe33 <Vm::x87Handler(regs*)+0xa54>
c001fdc3:	31 c0                	xor    eax,eax
c001fdc5:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001fdca:	75 74                	jne    c001fe40 <Vm::x87Handler(regs*)+0xa61>
c001fdcc:	50                   	push   eax
c001fdcd:	50                   	push   eax
c001fdce:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001fdd1:	31 d2                	xor    edx,edx
c001fdd3:	52                   	push   edx
c001fdd4:	50                   	push   eax
c001fdd5:	e8 f6 f2 ff ff       	call   c001f0d0 <Vm::fpuLongToFloat(long long)>
c001fdda:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fde1:	89 c6                	mov    esi,eax
c001fde3:	89 d7                	mov    edi,edx
c001fde5:	e8 b8 f4 ff ff       	call   c001f2a2 <Vm::fpuGetReg(int)>
c001fdea:	57                   	push   edi
c001fdeb:	56                   	push   esi
c001fdec:	52                   	push   edx
c001fded:	50                   	push   eax
c001fdee:	e8 5e f4 ff ff       	call   c001f251 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fdf3:	83 c4 1c             	add    esp,0x1c
c001fdf6:	52                   	push   edx
c001fdf7:	50                   	push   eax
c001fdf8:	6a 00                	push   0x0
c001fdfa:	e8 e6 f4 ff ff       	call   c001f2e5 <Vm::fpuSetReg(int, unsigned long long)>
c001fdff:	e9 f2 f7 ff ff       	jmp    c001f5f6 <Vm::x87Handler(regs*)+0x217>
c001fe04:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fe08:	80 fa 05             	cmp    dl,0x5
c001fe0b:	75 11                	jne    c001fe1e <Vm::x87Handler(regs*)+0xa3f>
c001fe0d:	55                   	push   ebp
c001fe0e:	55                   	push   ebp
c001fe0f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fe12:	ff 36                	push   DWORD PTR [esi]
c001fe14:	e8 81 f2 ff ff       	call   c001f09a <Vm::fpuULongToFloat(unsigned long long)>
c001fe19:	e9 cf f7 ff ff       	jmp    c001f5ed <Vm::x87Handler(regs*)+0x20e>
c001fe1e:	31 c0                	xor    eax,eax
c001fe20:	80 fa 07             	cmp    dl,0x7
c001fe23:	75 1b                	jne    c001fe40 <Vm::x87Handler(regs*)+0xa61>
c001fe25:	e8 63 f5 ff ff       	call   c001f38d <Vm::fpuPop()>
c001fe2a:	51                   	push   ecx
c001fe2b:	51                   	push   ecx
c001fe2c:	52                   	push   edx
c001fe2d:	50                   	push   eax
c001fe2e:	e8 0c f2 ff ff       	call   c001f03f <Vm::fpuFloatToLong(unsigned long long)>
c001fe33:	83 c4 10             	add    esp,0x10
c001fe36:	89 06                	mov    DWORD PTR [esi],eax
c001fe38:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001fe3b:	e9 f8 f7 ff ff       	jmp    c001f638 <Vm::x87Handler(regs*)+0x259>
c001fe40:	83 c4 1c             	add    esp,0x1c
c001fe43:	5b                   	pop    ebx
c001fe44:	5e                   	pop    esi
c001fe45:	5f                   	pop    edi
c001fe46:	5d                   	pop    ebp
c001fe47:	c3                   	ret    

c001fe48 <__static_initialization_and_destruction_0(int, int)>:
c001fe48:	83 ec 0c             	sub    esp,0xc
c001fe4b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001fe50:	75 1a                	jne    c001fe6c <__static_initialization_and_destruction_0(int, int)+0x24>
c001fe52:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001fe5a:	75 10                	jne    c001fe6c <__static_initialization_and_destruction_0(int, int)+0x24>
c001fe5c:	83 ec 0c             	sub    esp,0xc
c001fe5f:	68 c0 0f 03 c0       	push   0xc0030fc0
c001fe64:	e8 01 8d 00 00       	call   c0028b6a <Vm::_FPUState::_FPUState()>
c001fe69:	83 c4 10             	add    esp,0x10
c001fe6c:	90                   	nop
c001fe6d:	83 c4 0c             	add    esp,0xc
c001fe70:	c3                   	ret    

c001fe71 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001fe71:	83 ec 0c             	sub    esp,0xc
c001fe74:	83 ec 08             	sub    esp,0x8
c001fe77:	68 ff ff 00 00       	push   0xffff
c001fe7c:	6a 01                	push   0x1
c001fe7e:	e8 c5 ff ff ff       	call   c001fe48 <__static_initialization_and_destruction_0(int, int)>
c001fe83:	83 c4 10             	add    esp,0x10
c001fe86:	83 c4 0c             	add    esp,0xc
c001fe89:	c3                   	ret    

c001fe8a <FAT::getName()>:
c001fe8a:	b8 b0 be 02 c0       	mov    eax,0xc002beb0
c001fe8f:	c3                   	ret    

c001fe90 <FAT::tell(void*, unsigned long long*)>:
c001fe90:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fe95:	75 06                	jne    c001fe9d <FAT::tell(void*, unsigned long long*)+0xd>
c001fe97:	b8 04 00 00 00       	mov    eax,0x4
c001fe9c:	c3                   	ret    
c001fe9d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fea2:	75 06                	jne    c001feaa <FAT::tell(void*, unsigned long long*)+0x1a>
c001fea4:	b8 04 00 00 00       	mov    eax,0x4
c001fea9:	c3                   	ret    
c001feaa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001feae:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001feb1:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001feb4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001feb8:	89 01                	mov    DWORD PTR [ecx],eax
c001feba:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001febd:	b8 00 00 00 00       	mov    eax,0x0
c001fec2:	c3                   	ret    
c001fec3:	90                   	nop

c001fec4 <FAT::stat(void*, unsigned long long*)>:
c001fec4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fec9:	75 06                	jne    c001fed1 <FAT::stat(void*, unsigned long long*)+0xd>
c001fecb:	b8 04 00 00 00       	mov    eax,0x4
c001fed0:	c3                   	ret    
c001fed1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fed6:	75 06                	jne    c001fede <FAT::stat(void*, unsigned long long*)+0x1a>
c001fed8:	b8 04 00 00 00       	mov    eax,0x4
c001fedd:	c3                   	ret    
c001fede:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fee2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001fee5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001fee8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001feec:	89 01                	mov    DWORD PTR [ecx],eax
c001feee:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fef1:	b8 00 00 00 00       	mov    eax,0x0
c001fef6:	c3                   	ret    
c001fef7:	90                   	nop

c001fef8 <FAT::~FAT()>:
c001fef8:	83 ec 0c             	sub    esp,0xc
c001fefb:	ba fc be 02 c0       	mov    edx,0xc002befc
c001ff00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff04:	89 10                	mov    DWORD PTR [eax],edx
c001ff06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff0a:	83 ec 0c             	sub    esp,0xc
c001ff0d:	50                   	push   eax
c001ff0e:	e8 3f 2b ff ff       	call   c0012a52 <Filesystem::~Filesystem()>
c001ff13:	83 c4 10             	add    esp,0x10
c001ff16:	90                   	nop
c001ff17:	83 c4 0c             	add    esp,0xc
c001ff1a:	c3                   	ret    
c001ff1b:	90                   	nop

c001ff1c <FAT::~FAT()>:
c001ff1c:	83 ec 0c             	sub    esp,0xc
c001ff1f:	83 ec 0c             	sub    esp,0xc
c001ff22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff26:	e8 cd ff ff ff       	call   c001fef8 <FAT::~FAT()>
c001ff2b:	83 c4 10             	add    esp,0x10
c001ff2e:	83 ec 08             	sub    esp,0x8
c001ff31:	6a 08                	push   0x8
c001ff33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff37:	e8 0f 27 ff ff       	call   c001264b <operator delete(void*, unsigned long)>
c001ff3c:	83 c4 10             	add    esp,0x10
c001ff3f:	83 c4 0c             	add    esp,0xc
c001ff42:	c3                   	ret    
c001ff43:	90                   	nop

c001ff44 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001ff44:	83 ec 1c             	sub    esp,0x1c
c001ff47:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001ff4e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001ff53:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ff57:	8b 04 85 40 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcefc0]
c001ff5e:	83 f8 ff             	cmp    eax,0xffffffff
c001ff61:	75 34                	jne    c001ff97 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001ff63:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ff67:	88 c2                	mov    dl,al
c001ff69:	a1 20 10 03 c0       	mov    eax,ds:0xc0031020
c001ff6e:	01 d0                	add    eax,edx
c001ff70:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ff74:	8b 15 20 10 03 c0    	mov    edx,DWORD PTR ds:0xc0031020
c001ff7a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ff7e:	89 14 85 40 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcefc0],edx
c001ff85:	a1 20 10 03 c0       	mov    eax,ds:0xc0031020
c001ff8a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ff8e:	89 14 85 c0 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef40],edx
c001ff95:	eb 17                	jmp    c001ffae <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001ff97:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ff9b:	88 c2                	mov    dl,al
c001ff9d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ffa1:	8b 04 85 40 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcefc0]
c001ffa8:	01 d0                	add    eax,edx
c001ffaa:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ffae:	83 ec 04             	sub    esp,0x4
c001ffb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ffb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ffb9:	8d 44 24 15          	lea    eax,[esp+0x15]
c001ffbd:	50                   	push   eax
c001ffbe:	e8 3b 6d fe ff       	call   c0006cfe <f_getlabel>
c001ffc3:	83 c4 10             	add    esp,0x10
c001ffc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ffca:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ffcf:	75 07                	jne    c001ffd8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001ffd1:	b8 00 00 00 00       	mov    eax,0x0
c001ffd6:	eb 05                	jmp    c001ffdd <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001ffd8:	b8 01 00 00 00       	mov    eax,0x1
c001ffdd:	83 c4 1c             	add    esp,0x1c
c001ffe0:	c3                   	ret    
c001ffe1:	90                   	nop

c001ffe2 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001ffe2:	57                   	push   edi
c001ffe3:	83 ec 58             	sub    esp,0x58
c001ffe6:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001ffee:	8d 54 24 10          	lea    edx,[esp+0x10]
c001fff2:	b9 0f 00 00 00       	mov    ecx,0xf
c001fff7:	b8 00 00 00 00       	mov    eax,0x0
c001fffc:	fc                   	cld    
c001fffd:	89 d7                	mov    edi,edx
c001ffff:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020001:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020005:	8b 04 85 40 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcefc0]
c002000c:	83 f8 ff             	cmp    eax,0xffffffff
c002000f:	75 34                	jne    c0020045 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020011:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020015:	88 c2                	mov    dl,al
c0020017:	a1 20 10 03 c0       	mov    eax,ds:0xc0031020
c002001c:	01 d0                	add    eax,edx
c002001e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020022:	8b 15 20 10 03 c0    	mov    edx,DWORD PTR ds:0xc0031020
c0020028:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002002c:	89 14 85 40 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcefc0],edx
c0020033:	a1 20 10 03 c0       	mov    eax,ds:0xc0031020
c0020038:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c002003c:	89 14 85 c0 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef40],edx
c0020043:	eb 17                	jmp    c002005c <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020045:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020049:	88 c2                	mov    dl,al
c002004b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002004f:	8b 04 85 40 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcefc0]
c0020056:	01 d0                	add    eax,edx
c0020058:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002005c:	83 ec 08             	sub    esp,0x8
c002005f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020063:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020067:	50                   	push   eax
c0020068:	e8 df 08 fe ff       	call   c000094c <strcat>
c002006d:	83 c4 10             	add    esp,0x10
c0020070:	83 ec 0c             	sub    esp,0xc
c0020073:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020077:	50                   	push   eax
c0020078:	e8 6f 6e fe ff       	call   c0006eec <f_setlabel>
c002007d:	83 c4 10             	add    esp,0x10
c0020080:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020084:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020089:	75 07                	jne    c0020092 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c002008b:	b8 00 00 00 00       	mov    eax,0x0
c0020090:	eb 05                	jmp    c0020097 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020092:	b8 01 00 00 00       	mov    eax,0x1
c0020097:	83 c4 58             	add    esp,0x58
c002009a:	5f                   	pop    edi
c002009b:	c3                   	ret    

c002009c <FAT::format(LogicalDisk*, int, char const*, int)>:
c002009c:	83 ec 2c             	sub    esp,0x2c
c002009f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00200a7:	83 ec 08             	sub    esp,0x8
c00200aa:	68 d4 be 02 c0       	push   0xc002bed4
c00200af:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00200b3:	e8 e0 07 fe ff       	call   c0000898 <strcmp>
c00200b8:	83 c4 10             	add    esp,0x10
c00200bb:	85 c0                	test   eax,eax
c00200bd:	0f 94 c0             	sete   al
c00200c0:	84 c0                	test   al,al
c00200c2:	74 0d                	je     c00200d1 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c00200c4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00200cc:	e9 a6 00 00 00       	jmp    c0020177 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00200d1:	83 ec 08             	sub    esp,0x8
c00200d4:	68 c6 be 02 c0       	push   0xc002bec6
c00200d9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00200dd:	e8 b6 07 fe ff       	call   c0000898 <strcmp>
c00200e2:	83 c4 10             	add    esp,0x10
c00200e5:	85 c0                	test   eax,eax
c00200e7:	0f 94 c0             	sete   al
c00200ea:	84 c0                	test   al,al
c00200ec:	74 0a                	je     c00200f8 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c00200ee:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00200f6:	eb 7f                	jmp    c0020177 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00200f8:	83 ec 08             	sub    esp,0x8
c00200fb:	68 cc be 02 c0       	push   0xc002becc
c0020100:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020104:	e8 8f 07 fe ff       	call   c0000898 <strcmp>
c0020109:	83 c4 10             	add    esp,0x10
c002010c:	85 c0                	test   eax,eax
c002010e:	0f 94 c0             	sete   al
c0020111:	84 c0                	test   al,al
c0020113:	74 0a                	je     c002011f <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020115:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002011d:	eb 58                	jmp    c0020177 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002011f:	83 ec 08             	sub    esp,0x8
c0020122:	68 cc 92 02 c0       	push   0xc00292cc
c0020127:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002012b:	e8 68 07 fe ff       	call   c0000898 <strcmp>
c0020130:	83 c4 10             	add    esp,0x10
c0020133:	85 c0                	test   eax,eax
c0020135:	0f 94 c0             	sete   al
c0020138:	84 c0                	test   al,al
c002013a:	74 0a                	je     c0020146 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c002013c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020144:	eb 31                	jmp    c0020177 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020146:	83 ec 08             	sub    esp,0x8
c0020149:	68 d2 be 02 c0       	push   0xc002bed2
c002014e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020152:	e8 41 07 fe ff       	call   c0000898 <strcmp>
c0020157:	83 c4 10             	add    esp,0x10
c002015a:	85 c0                	test   eax,eax
c002015c:	0f 94 c0             	sete   al
c002015f:	84 c0                	test   al,al
c0020161:	74 0a                	je     c002016d <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020163:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c002016b:	eb 0a                	jmp    c0020177 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002016d:	b8 08 00 00 00       	mov    eax,0x8
c0020172:	e9 df 00 00 00       	jmp    c0020256 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c0020177:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c002017e:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020183:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020187:	8b 04 85 40 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcefc0]
c002018e:	83 f8 ff             	cmp    eax,0xffffffff
c0020191:	75 34                	jne    c00201c7 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020193:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020197:	88 c2                	mov    dl,al
c0020199:	a1 20 10 03 c0       	mov    eax,ds:0xc0031020
c002019e:	01 d0                	add    eax,edx
c00201a0:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00201a4:	8b 15 20 10 03 c0    	mov    edx,DWORD PTR ds:0xc0031020
c00201aa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00201ae:	89 14 85 40 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcefc0],edx
c00201b5:	a1 20 10 03 c0       	mov    eax,ds:0xc0031020
c00201ba:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00201be:	89 14 85 c0 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef40],edx
c00201c5:	eb 17                	jmp    c00201de <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c00201c7:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00201cb:	88 c2                	mov    dl,al
c00201cd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00201d1:	8b 04 85 40 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcefc0]
c00201d8:	01 d0                	add    eax,edx
c00201da:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00201de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00201e2:	88 04 24             	mov    BYTE PTR [esp],al
c00201e5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00201e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00201ed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00201f5:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00201fa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020202:	83 ec 0c             	sub    esp,0xc
c0020205:	68 00 20 00 00       	push   0x2000
c002020a:	e8 8a f3 fe ff       	call   c000f599 <malloc>
c002020f:	83 c4 10             	add    esp,0x10
c0020212:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020216:	68 00 20 00 00       	push   0x2000
c002021b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002021f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020223:	50                   	push   eax
c0020224:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020228:	50                   	push   eax
c0020229:	e8 09 71 fe ff       	call   c0007337 <f_mkfs>
c002022e:	83 c4 10             	add    esp,0x10
c0020231:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020235:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002023a:	75 07                	jne    c0020243 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c002023c:	b8 00 00 00 00       	mov    eax,0x0
c0020241:	eb 13                	jmp    c0020256 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c0020243:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020248:	75 07                	jne    c0020251 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b5>
c002024a:	b8 09 00 00 00       	mov    eax,0x9
c002024f:	eb 05                	jmp    c0020256 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c0020251:	b8 01 00 00 00       	mov    eax,0x1
c0020256:	83 c4 2c             	add    esp,0x2c
c0020259:	c3                   	ret    

c002025a <FAT::tryMount(LogicalDisk*, int)>:
c002025a:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020260:	a1 20 10 03 c0       	mov    eax,ds:0xc0031020
c0020265:	83 f8 14             	cmp    eax,0x14
c0020268:	75 17                	jne    c0020281 <FAT::tryMount(LogicalDisk*, int)+0x27>
c002026a:	83 ec 0c             	sub    esp,0xc
c002026d:	68 d8 be 02 c0       	push   0xc002bed8
c0020272:	e8 18 9c ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c0020277:	83 c4 10             	add    esp,0x10
c002027a:	b0 00                	mov    al,0x0
c002027c:	e9 d7 01 00 00       	jmp    c0020458 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020281:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020288:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002028e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020294:	3d 00 02 00 00       	cmp    eax,0x200
c0020299:	74 07                	je     c00202a2 <FAT::tryMount(LogicalDisk*, int)+0x48>
c002029b:	b0 00                	mov    al,0x0
c002029d:	e9 b6 01 00 00       	jmp    c0020458 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00202a2:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c00202aa:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00202b1:	8b 04 85 40 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcefc0]
c00202b8:	83 f8 ff             	cmp    eax,0xffffffff
c00202bb:	74 07                	je     c00202c4 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00202bd:	b0 01                	mov    al,0x1
c00202bf:	e9 94 01 00 00       	jmp    c0020458 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00202c4:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00202ce:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00202d6:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00202dd:	88 c2                	mov    dl,al
c00202df:	a1 20 10 03 c0       	mov    eax,ds:0xc0031020
c00202e4:	01 d0                	add    eax,edx
c00202e6:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00202ed:	8b 15 20 10 03 c0    	mov    edx,DWORD PTR ds:0xc0031020
c00202f3:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00202fa:	89 14 85 40 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcefc0],edx
c0020301:	a1 20 10 03 c0       	mov    eax,ds:0xc0031020
c0020306:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c002030d:	89 14 85 c0 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef40],edx
c0020314:	83 ec 0c             	sub    esp,0xc
c0020317:	68 54 02 00 00       	push   0x254
c002031c:	e8 78 f2 fe ff       	call   c000f599 <malloc>
c0020321:	83 c4 10             	add    esp,0x10
c0020324:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c002032b:	83 ec 04             	sub    esp,0x4
c002032e:	6a 00                	push   0x0
c0020330:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020337:	50                   	push   eax
c0020338:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002033f:	e8 b1 4b fe ff       	call   c0004ef5 <f_mount>
c0020344:	83 c4 10             	add    esp,0x10
c0020347:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c002034e:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020356:	74 19                	je     c0020371 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020358:	83 ec 0c             	sub    esp,0xc
c002035b:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020362:	e8 52 f2 fe ff       	call   c000f5b9 <rfree>
c0020367:	83 c4 10             	add    esp,0x10
c002036a:	b0 00                	mov    al,0x0
c002036c:	e9 e7 00 00 00       	jmp    c0020458 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020371:	83 ec 04             	sub    esp,0x4
c0020374:	68 00 01 00 00       	push   0x100
c0020379:	6a 00                	push   0x0
c002037b:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020382:	50                   	push   eax
c0020383:	e8 c8 03 fe ff       	call   c0000750 <memset>
c0020388:	83 c4 10             	add    esp,0x10
c002038b:	83 ec 08             	sub    esp,0x8
c002038e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020395:	50                   	push   eax
c0020396:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002039d:	50                   	push   eax
c002039e:	e8 a9 05 fe ff       	call   c000094c <strcat>
c00203a3:	83 c4 10             	add    esp,0x10
c00203a6:	83 ec 08             	sub    esp,0x8
c00203a9:	68 e6 be 02 c0       	push   0xc002bee6
c00203ae:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00203b5:	50                   	push   eax
c00203b6:	e8 91 05 fe ff       	call   c000094c <strcat>
c00203bb:	83 c4 10             	add    esp,0x10
c00203be:	83 ec 04             	sub    esp,0x4
c00203c1:	6a 01                	push   0x1
c00203c3:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c00203ca:	50                   	push   eax
c00203cb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00203cf:	50                   	push   eax
c00203d0:	e8 82 4b fe ff       	call   c0004f57 <f_open>
c00203d5:	83 c4 10             	add    esp,0x10
c00203d8:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00203df:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00203e6:	85 c0                	test   eax,eax
c00203e8:	74 0a                	je     c00203f4 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c00203ea:	78 2d                	js     c0020419 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00203ec:	83 e8 04             	sub    eax,0x4
c00203ef:	83 f8 01             	cmp    eax,0x1
c00203f2:	77 25                	ja     c0020419 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00203f4:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c00203fc:	83 ec 0c             	sub    esp,0xc
c00203ff:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020403:	50                   	push   eax
c0020404:	e8 a0 56 fe ff       	call   c0005aa9 <f_close>
c0020409:	83 c4 10             	add    esp,0x10
c002040c:	90                   	nop
c002040d:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020415:	74 3a                	je     c0020451 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020417:	eb 2d                	jmp    c0020446 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020419:	83 ec 0c             	sub    esp,0xc
c002041c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020423:	e8 91 f1 fe ff       	call   c000f5b9 <rfree>
c0020428:	83 c4 10             	add    esp,0x10
c002042b:	83 ec 04             	sub    esp,0x4
c002042e:	6a 00                	push   0x0
c0020430:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020437:	50                   	push   eax
c0020438:	6a 00                	push   0x0
c002043a:	e8 b6 4a fe ff       	call   c0004ef5 <f_mount>
c002043f:	83 c4 10             	add    esp,0x10
c0020442:	b0 00                	mov    al,0x0
c0020444:	eb 12                	jmp    c0020458 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020446:	a1 20 10 03 c0       	mov    eax,ds:0xc0031020
c002044b:	40                   	inc    eax
c002044c:	a3 20 10 03 c0       	mov    ds:0xc0031020,eax
c0020451:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020458:	81 c4 6c 03 00 00    	add    esp,0x36c
c002045e:	c3                   	ret    
c002045f:	90                   	nop

c0020460 <FAT::getFileFirstSector(char const*)>:
c0020460:	53                   	push   ebx
c0020461:	83 ec 28             	sub    esp,0x28
c0020464:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c002046c:	83 ec 0c             	sub    esp,0xc
c002046f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020473:	e8 21 f1 fe ff       	call   c000f599 <malloc>
c0020478:	83 c4 10             	add    esp,0x10
c002047b:	89 c3                	mov    ebx,eax
c002047d:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0020482:	83 ec 04             	sub    esp,0x4
c0020485:	50                   	push   eax
c0020486:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002048a:	53                   	push   ebx
c002048b:	e8 f2 27 ff ff       	call   c0012c82 <File::File(char const*, Process*)>
c0020490:	83 c4 10             	add    esp,0x10
c0020493:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0020497:	83 ec 08             	sub    esp,0x8
c002049a:	6a 01                	push   0x1
c002049c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00204a0:	e8 41 28 ff ff       	call   c0012ce6 <File::open(FileOpenMode)>
c00204a5:	83 c4 10             	add    esp,0x10
c00204a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00204ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00204ae:	83 c0 0c             	add    eax,0xc
c00204b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00204b3:	83 ec 0c             	sub    esp,0xc
c00204b6:	8d 54 24 14          	lea    edx,[esp+0x14]
c00204ba:	52                   	push   edx
c00204bb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00204bf:	52                   	push   edx
c00204c0:	6a 00                	push   0x0
c00204c2:	6a 04                	push   0x4
c00204c4:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00204c8:	ff d0                	call   eax
c00204ca:	83 c4 20             	add    esp,0x20
c00204cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00204d1:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00204d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00204db:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00204df:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00204e2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00204e5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00204e9:	83 ec 0c             	sub    esp,0xc
c00204ec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00204f0:	e8 4f 28 ff ff       	call   c0012d44 <File::close()>
c00204f5:	83 c4 10             	add    esp,0x10
c00204f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00204fc:	ba 00 00 00 00       	mov    edx,0x0
c0020501:	83 c4 28             	add    esp,0x28
c0020504:	5b                   	pop    ebx
c0020505:	c3                   	ret    

c0020506 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020506:	57                   	push   edi
c0020507:	56                   	push   esi
c0020508:	53                   	push   ebx
c0020509:	81 ec 50 02 00 00    	sub    esp,0x250
c002050f:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0020517:	74 0a                	je     c0020523 <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c0020519:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0020521:	75 0a                	jne    c002052d <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c0020523:	b8 04 00 00 00       	mov    eax,0x4
c0020528:	e9 29 01 00 00       	jmp    c0020656 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c002052d:	83 ec 08             	sub    esp,0x8
c0020530:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020537:	50                   	push   eax
c0020538:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c002053f:	e8 6f 5b fe ff       	call   c00060b3 <f_readdir>
c0020544:	83 c4 10             	add    esp,0x10
c0020547:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c002054e:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c0020555:	83 ec 0c             	sub    esp,0xc
c0020558:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c002055f:	83 c0 1a             	add    eax,0x1a
c0020562:	50                   	push   eax
c0020563:	e8 04 02 fe ff       	call   c000076c <strlen>
c0020568:	83 c4 10             	add    esp,0x10
c002056b:	ba 00 00 00 00       	mov    edx,0x0
c0020570:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020574:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020578:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c002057f:	0f b6 c0             	movzx  eax,al
c0020582:	83 e0 10             	and    eax,0x10
c0020585:	74 07                	je     c002058e <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c0020587:	b8 02 00 00 00       	mov    eax,0x2
c002058c:	eb 05                	jmp    c0020593 <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c002058e:	b8 01 00 00 00       	mov    eax,0x1
c0020593:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020597:	83 ec 08             	sub    esp,0x8
c002059a:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00205a1:	83 c0 1a             	add    eax,0x1a
c00205a4:	50                   	push   eax
c00205a5:	8d 44 24 10          	lea    eax,[esp+0x10]
c00205a9:	83 c0 10             	add    eax,0x10
c00205ac:	50                   	push   eax
c00205ad:	e8 5a 02 fe ff       	call   c000080c <strcpy>
c00205b2:	83 c4 10             	add    esp,0x10
c00205b5:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00205bc:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00205c3:	8d 44 24 04          	lea    eax,[esp+0x4]
c00205c7:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00205ce:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00205d5:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00205dc:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00205e3:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00205ea:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00205f1:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00205f8:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00205ff:	89 c6                	mov    esi,eax
c0020601:	89 d7                	mov    edi,edx
c0020603:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020605:	89 c8                	mov    eax,ecx
c0020607:	89 fa                	mov    edx,edi
c0020609:	89 f3                	mov    ebx,esi
c002060b:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0020612:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0020619:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0020620:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0020627:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c002062d:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0020634:	84 c0                	test   al,al
c0020636:	75 07                	jne    c002063f <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c0020638:	b8 07 00 00 00       	mov    eax,0x7
c002063d:	eb 17                	jmp    c0020656 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c002063f:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0020646:	85 c0                	test   eax,eax
c0020648:	75 07                	jne    c0020651 <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c002064a:	b8 00 00 00 00       	mov    eax,0x0
c002064f:	eb 05                	jmp    c0020656 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020651:	b8 01 00 00 00       	mov    eax,0x1
c0020656:	81 c4 50 02 00 00    	add    esp,0x250
c002065c:	5b                   	pop    ebx
c002065d:	5e                   	pop    esi
c002065e:	5f                   	pop    edi
c002065f:	c3                   	ret    

c0020660 <FAT::read(void*, unsigned long, void*, int*)>:
c0020660:	83 ec 1c             	sub    esp,0x1c
c0020663:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020668:	74 07                	je     c0020671 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c002066a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002066f:	75 07                	jne    c0020678 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020671:	b8 04 00 00 00       	mov    eax,0x4
c0020676:	eb 3d                	jmp    c00206b5 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020678:	8d 44 24 08          	lea    eax,[esp+0x8]
c002067c:	50                   	push   eax
c002067d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020681:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020685:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020689:	e8 05 4d fe ff       	call   c0005393 <f_read>
c002068e:	83 c4 10             	add    esp,0x10
c0020691:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020695:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020699:	89 c2                	mov    edx,eax
c002069b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002069f:	89 10                	mov    DWORD PTR [eax],edx
c00206a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00206a5:	85 c0                	test   eax,eax
c00206a7:	75 07                	jne    c00206b0 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c00206a9:	b8 00 00 00 00       	mov    eax,0x0
c00206ae:	eb 05                	jmp    c00206b5 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00206b0:	b8 01 00 00 00       	mov    eax,0x1
c00206b5:	83 c4 1c             	add    esp,0x1c
c00206b8:	c3                   	ret    
c00206b9:	90                   	nop

c00206ba <FAT::write(void*, unsigned long, void*, int*)>:
c00206ba:	83 ec 1c             	sub    esp,0x1c
c00206bd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00206c2:	74 07                	je     c00206cb <FAT::write(void*, unsigned long, void*, int*)+0x11>
c00206c4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00206c9:	75 07                	jne    c00206d2 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c00206cb:	b8 04 00 00 00       	mov    eax,0x4
c00206d0:	eb 3d                	jmp    c002070f <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00206d2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00206d6:	50                   	push   eax
c00206d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00206db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00206df:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00206e3:	e8 2b 4f fe ff       	call   c0005613 <f_write>
c00206e8:	83 c4 10             	add    esp,0x10
c00206eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00206ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00206f3:	89 c2                	mov    edx,eax
c00206f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00206f9:	89 10                	mov    DWORD PTR [eax],edx
c00206fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00206ff:	85 c0                	test   eax,eax
c0020701:	75 07                	jne    c002070a <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020703:	b8 00 00 00 00       	mov    eax,0x0
c0020708:	eb 05                	jmp    c002070f <FAT::write(void*, unsigned long, void*, int*)+0x55>
c002070a:	b8 01 00 00 00       	mov    eax,0x1
c002070f:	83 c4 1c             	add    esp,0x1c
c0020712:	c3                   	ret    
c0020713:	90                   	nop

c0020714 <FAT::close(void*)>:
c0020714:	83 ec 1c             	sub    esp,0x1c
c0020717:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002071c:	75 07                	jne    c0020725 <FAT::close(void*)+0x11>
c002071e:	b8 04 00 00 00       	mov    eax,0x4
c0020723:	eb 36                	jmp    c002075b <FAT::close(void*)+0x47>
c0020725:	83 ec 0c             	sub    esp,0xc
c0020728:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002072c:	e8 78 53 fe ff       	call   c0005aa9 <f_close>
c0020731:	83 c4 10             	add    esp,0x10
c0020734:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020738:	83 ec 0c             	sub    esp,0xc
c002073b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002073f:	e8 65 ee fe ff       	call   c000f5a9 <free>
c0020744:	83 c4 10             	add    esp,0x10
c0020747:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002074b:	85 c0                	test   eax,eax
c002074d:	75 07                	jne    c0020756 <FAT::close(void*)+0x42>
c002074f:	b8 00 00 00 00       	mov    eax,0x0
c0020754:	eb 05                	jmp    c002075b <FAT::close(void*)+0x47>
c0020756:	b8 01 00 00 00       	mov    eax,0x1
c002075b:	83 c4 1c             	add    esp,0x1c
c002075e:	c3                   	ret    
c002075f:	90                   	nop

c0020760 <FAT::closeDir(void*)>:
c0020760:	83 ec 1c             	sub    esp,0x1c
c0020763:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020768:	75 07                	jne    c0020771 <FAT::closeDir(void*)+0x11>
c002076a:	b8 04 00 00 00       	mov    eax,0x4
c002076f:	eb 36                	jmp    c00207a7 <FAT::closeDir(void*)+0x47>
c0020771:	83 ec 0c             	sub    esp,0xc
c0020774:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020778:	e8 14 59 fe ff       	call   c0006091 <f_closedir>
c002077d:	83 c4 10             	add    esp,0x10
c0020780:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020784:	83 ec 0c             	sub    esp,0xc
c0020787:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002078b:	e8 19 ee fe ff       	call   c000f5a9 <free>
c0020790:	83 c4 10             	add    esp,0x10
c0020793:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020797:	85 c0                	test   eax,eax
c0020799:	75 07                	jne    c00207a2 <FAT::closeDir(void*)+0x42>
c002079b:	b8 00 00 00 00       	mov    eax,0x0
c00207a0:	eb 05                	jmp    c00207a7 <FAT::closeDir(void*)+0x47>
c00207a2:	b8 01 00 00 00       	mov    eax,0x1
c00207a7:	83 c4 1c             	add    esp,0x1c
c00207aa:	c3                   	ret    
c00207ab:	90                   	nop

c00207ac <FAT::seek(void*, unsigned long long)>:
c00207ac:	83 ec 2c             	sub    esp,0x2c
c00207af:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00207b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00207b7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00207bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00207bf:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00207c4:	75 07                	jne    c00207cd <FAT::seek(void*, unsigned long long)+0x21>
c00207c6:	b8 04 00 00 00       	mov    eax,0x4
c00207cb:	eb 2f                	jmp    c00207fc <FAT::seek(void*, unsigned long long)+0x50>
c00207cd:	83 ec 04             	sub    esp,0x4
c00207d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00207d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00207d8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00207dc:	e8 f7 52 fe ff       	call   c0005ad8 <f_lseek>
c00207e1:	83 c4 10             	add    esp,0x10
c00207e4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00207e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00207ec:	85 c0                	test   eax,eax
c00207ee:	75 07                	jne    c00207f7 <FAT::seek(void*, unsigned long long)+0x4b>
c00207f0:	b8 00 00 00 00       	mov    eax,0x0
c00207f5:	eb 05                	jmp    c00207fc <FAT::seek(void*, unsigned long long)+0x50>
c00207f7:	b8 01 00 00 00       	mov    eax,0x1
c00207fc:	83 c4 2c             	add    esp,0x2c
c00207ff:	c3                   	ret    

c0020800 <fatWrapperReadDisk>:
c0020800:	83 ec 1c             	sub    esp,0x1c
c0020803:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020807:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002080b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002080f:	89 04 24             	mov    DWORD PTR [esp],eax
c0020812:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020816:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002081a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002081f:	8b 04 85 00 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2000]
c0020826:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002082a:	83 ec 0c             	sub    esp,0xc
c002082d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020831:	52                   	push   edx
c0020832:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020836:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002083a:	50                   	push   eax
c002083b:	e8 38 58 ff ff       	call   c0016078 <LogicalDisk::read(unsigned long long, int, void*)>
c0020840:	83 c4 20             	add    esp,0x20
c0020843:	83 c4 1c             	add    esp,0x1c
c0020846:	c3                   	ret    

c0020847 <fatWrapperWriteDisk>:
c0020847:	83 ec 1c             	sub    esp,0x1c
c002084a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002084e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020852:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020856:	89 04 24             	mov    DWORD PTR [esp],eax
c0020859:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002085d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020861:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020866:	8b 04 85 00 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2000]
c002086d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020871:	83 ec 0c             	sub    esp,0xc
c0020874:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020878:	52                   	push   edx
c0020879:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002087d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020881:	50                   	push   eax
c0020882:	e8 5d 58 ff ff       	call   c00160e4 <LogicalDisk::write(unsigned long long, int, void*)>
c0020887:	83 c4 20             	add    esp,0x20
c002088a:	83 c4 1c             	add    esp,0x1c
c002088d:	c3                   	ret    

c002088e <fatWrapperIoctl>:
c002088e:	53                   	push   ebx
c002088f:	83 ec 28             	sub    esp,0x28
c0020892:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020896:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002089a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002089e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00208a2:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c00208a7:	75 31                	jne    c00208da <fatWrapperIoctl+0x4c>
c00208a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208ad:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00208b1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00208b6:	8b 04 85 00 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2000]
c00208bd:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00208c3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00208c9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00208cd:	66 89 02             	mov    WORD PTR [edx],ax
c00208d0:	b8 00 00 00 00       	mov    eax,0x0
c00208d5:	e9 b2 00 00 00       	jmp    c002098c <fatWrapperIoctl+0xfe>
c00208da:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00208df:	75 6a                	jne    c002094b <fatWrapperIoctl+0xbd>
c00208e1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00208e9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00208ee:	8b 04 85 00 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2000]
c00208f5:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00208fb:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020901:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020907:	89 c8                	mov    eax,ecx
c0020909:	89 da                	mov    edx,ebx
c002090b:	0f a4 c2 0a          	shld   edx,eax,0xa
c002090f:	c1 e0 0a             	shl    eax,0xa
c0020912:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020917:	8b 0c 8d 00 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2000]
c002091e:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020924:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c002092a:	89 cb                	mov    ebx,ecx
c002092c:	c1 fb 1f             	sar    ebx,0x1f
c002092f:	53                   	push   ebx
c0020930:	51                   	push   ecx
c0020931:	52                   	push   edx
c0020932:	50                   	push   eax
c0020933:	e8 2c 5e 00 00       	call   c0026764 <__udivdi3>
c0020938:	83 c4 10             	add    esp,0x10
c002093b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002093f:	89 01                	mov    DWORD PTR [ecx],eax
c0020941:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020944:	b8 00 00 00 00       	mov    eax,0x0
c0020949:	eb 41                	jmp    c002098c <fatWrapperIoctl+0xfe>
c002094b:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020950:	75 07                	jne    c0020959 <fatWrapperIoctl+0xcb>
c0020952:	b8 00 00 00 00       	mov    eax,0x0
c0020957:	eb 33                	jmp    c002098c <fatWrapperIoctl+0xfe>
c0020959:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c002095e:	75 19                	jne    c0020979 <fatWrapperIoctl+0xeb>
c0020960:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020968:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002096c:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020972:	b8 00 00 00 00       	mov    eax,0x0
c0020977:	eb 13                	jmp    c002098c <fatWrapperIoctl+0xfe>
c0020979:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c002097e:	75 07                	jne    c0020987 <fatWrapperIoctl+0xf9>
c0020980:	b8 00 00 00 00       	mov    eax,0x0
c0020985:	eb 05                	jmp    c002098c <fatWrapperIoctl+0xfe>
c0020987:	b8 04 00 00 00       	mov    eax,0x4
c002098c:	83 c4 28             	add    esp,0x28
c002098f:	5b                   	pop    ebx
c0020990:	c3                   	ret    
c0020991:	90                   	nop

c0020992 <FAT::FAT()>:
c0020992:	83 ec 1c             	sub    esp,0x1c
c0020995:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020999:	83 ec 0c             	sub    esp,0xc
c002099c:	50                   	push   eax
c002099d:	e8 8c 20 ff ff       	call   c0012a2e <Filesystem::Filesystem()>
c00209a2:	83 c4 10             	add    esp,0x10
c00209a5:	ba fc be 02 c0       	mov    edx,0xc002befc
c00209aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00209ae:	89 10                	mov    DWORD PTR [eax],edx
c00209b0:	c7 05 20 10 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031020,0x0
c00209ba:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00209c2:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00209c7:	7f 15                	jg     c00209de <FAT::FAT()+0x4c>
c00209c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00209cd:	c7 04 85 40 10 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcefc0],0xffffffff
c00209d8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00209dc:	eb e4                	jmp    c00209c2 <FAT::FAT()+0x30>
c00209de:	90                   	nop
c00209df:	83 c4 1c             	add    esp,0x1c
c00209e2:	c3                   	ret    
c00209e3:	90                   	nop

c00209e4 <FAT::fixFilepath(char*)>:
c00209e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209e8:	8a 00                	mov    al,BYTE PTR [eax]
c00209ea:	3c 40                	cmp    al,0x40
c00209ec:	7e 2c                	jle    c0020a1a <FAT::fixFilepath(char*)+0x36>
c00209ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209f2:	8a 00                	mov    al,BYTE PTR [eax]
c00209f4:	83 e8 41             	sub    eax,0x41
c00209f7:	88 c2                	mov    dl,al
c00209f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209fd:	88 10                	mov    BYTE PTR [eax],dl
c00209ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020a03:	8a 00                	mov    al,BYTE PTR [eax]
c0020a05:	0f be c0             	movsx  eax,al
c0020a08:	8b 04 85 40 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcefc0]
c0020a0f:	83 c0 30             	add    eax,0x30
c0020a12:	88 c2                	mov    dl,al
c0020a14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020a18:	88 10                	mov    BYTE PTR [eax],dl
c0020a1a:	90                   	nop
c0020a1b:	c3                   	ret    

c0020a1c <FAT::open(char const*, void**, FileOpenMode)>:
c0020a1c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020a22:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020a2a:	74 0a                	je     c0020a36 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020a2c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020a34:	75 0a                	jne    c0020a40 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020a36:	b8 04 00 00 00       	mov    eax,0x4
c0020a3b:	e9 fd 00 00 00       	jmp    c0020b3d <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020a40:	83 ec 08             	sub    esp,0x8
c0020a43:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020a4a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020a4e:	50                   	push   eax
c0020a4f:	e8 b8 fd fd ff       	call   c000080c <strcpy>
c0020a54:	83 c4 10             	add    esp,0x10
c0020a57:	83 ec 08             	sub    esp,0x8
c0020a5a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020a5e:	50                   	push   eax
c0020a5f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020a66:	e8 79 ff ff ff       	call   c00209e4 <FAT::fixFilepath(char*)>
c0020a6b:	83 c4 10             	add    esp,0x10
c0020a6e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020a76:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a7d:	83 e0 01             	and    eax,0x1
c0020a80:	74 08                	je     c0020a8a <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020a82:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020a8a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a91:	83 e0 04             	and    eax,0x4
c0020a94:	74 10                	je     c0020aa6 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020a96:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020a9e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020aa6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020aad:	83 e0 02             	and    eax,0x2
c0020ab0:	74 08                	je     c0020aba <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020ab2:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020aba:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020ac1:	83 e0 08             	and    eax,0x8
c0020ac4:	74 08                	je     c0020ace <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020ac6:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020ace:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020ad5:	83 e0 10             	and    eax,0x10
c0020ad8:	74 08                	je     c0020ae2 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020ada:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020ae2:	83 ec 0c             	sub    esp,0xc
c0020ae5:	68 50 02 00 00       	push   0x250
c0020aea:	e8 aa ea fe ff       	call   c000f599 <malloc>
c0020aef:	83 c4 10             	add    esp,0x10
c0020af2:	89 c2                	mov    edx,eax
c0020af4:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020afb:	89 10                	mov    DWORD PTR [eax],edx
c0020afd:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020b05:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020b0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0020b0e:	83 ec 04             	sub    esp,0x4
c0020b11:	52                   	push   edx
c0020b12:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020b16:	52                   	push   edx
c0020b17:	50                   	push   eax
c0020b18:	e8 3a 44 fe ff       	call   c0004f57 <f_open>
c0020b1d:	83 c4 10             	add    esp,0x10
c0020b20:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020b27:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020b2f:	74 07                	je     c0020b38 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020b31:	b8 01 00 00 00       	mov    eax,0x1
c0020b36:	eb 05                	jmp    c0020b3d <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020b38:	b8 00 00 00 00       	mov    eax,0x0
c0020b3d:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020b43:	c3                   	ret    

c0020b44 <FAT::openDir(char const*, void**)>:
c0020b44:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020b4a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020b52:	74 0a                	je     c0020b5e <FAT::openDir(char const*, void**)+0x1a>
c0020b54:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020b5c:	75 07                	jne    c0020b65 <FAT::openDir(char const*, void**)+0x21>
c0020b5e:	b8 04 00 00 00       	mov    eax,0x4
c0020b63:	eb 7d                	jmp    c0020be2 <FAT::openDir(char const*, void**)+0x9e>
c0020b65:	83 ec 08             	sub    esp,0x8
c0020b68:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020b6f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020b73:	50                   	push   eax
c0020b74:	e8 93 fc fd ff       	call   c000080c <strcpy>
c0020b79:	83 c4 10             	add    esp,0x10
c0020b7c:	83 ec 08             	sub    esp,0x8
c0020b7f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020b83:	50                   	push   eax
c0020b84:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020b8b:	e8 54 fe ff ff       	call   c00209e4 <FAT::fixFilepath(char*)>
c0020b90:	83 c4 10             	add    esp,0x10
c0020b93:	83 ec 0c             	sub    esp,0xc
c0020b96:	6a 4c                	push   0x4c
c0020b98:	e8 fc e9 fe ff       	call   c000f599 <malloc>
c0020b9d:	83 c4 10             	add    esp,0x10
c0020ba0:	89 c2                	mov    edx,eax
c0020ba2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020ba9:	89 10                	mov    DWORD PTR [eax],edx
c0020bab:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020bb2:	8b 00                	mov    eax,DWORD PTR [eax]
c0020bb4:	83 ec 08             	sub    esp,0x8
c0020bb7:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020bbb:	52                   	push   edx
c0020bbc:	50                   	push   eax
c0020bbd:	e8 cd 53 fe ff       	call   c0005f8f <f_opendir>
c0020bc2:	83 c4 10             	add    esp,0x10
c0020bc5:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020bcc:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020bd4:	74 07                	je     c0020bdd <FAT::openDir(char const*, void**)+0x99>
c0020bd6:	b8 01 00 00 00       	mov    eax,0x1
c0020bdb:	eb 05                	jmp    c0020be2 <FAT::openDir(char const*, void**)+0x9e>
c0020bdd:	b8 00 00 00 00       	mov    eax,0x0
c0020be2:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020be8:	c3                   	ret    
c0020be9:	90                   	nop

c0020bea <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020bea:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020bf0:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020bf8:	75 0a                	jne    c0020c04 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020bfa:	b8 04 00 00 00       	mov    eax,0x4
c0020bff:	e9 c9 00 00 00       	jmp    c0020ccd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020c04:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020c0c:	75 0a                	jne    c0020c18 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020c0e:	b8 04 00 00 00       	mov    eax,0x4
c0020c13:	e9 b5 00 00 00       	jmp    c0020ccd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020c18:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020c20:	75 0a                	jne    c0020c2c <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020c22:	b8 04 00 00 00       	mov    eax,0x4
c0020c27:	e9 a1 00 00 00       	jmp    c0020ccd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020c2c:	83 ec 08             	sub    esp,0x8
c0020c2f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020c36:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020c3d:	50                   	push   eax
c0020c3e:	e8 c9 fb fd ff       	call   c000080c <strcpy>
c0020c43:	83 c4 10             	add    esp,0x10
c0020c46:	83 ec 08             	sub    esp,0x8
c0020c49:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020c50:	50                   	push   eax
c0020c51:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020c58:	e8 87 fd ff ff       	call   c00209e4 <FAT::fixFilepath(char*)>
c0020c5d:	83 c4 10             	add    esp,0x10
c0020c60:	83 ec 08             	sub    esp,0x8
c0020c63:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c67:	50                   	push   eax
c0020c68:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020c6f:	50                   	push   eax
c0020c70:	e8 d9 54 fe ff       	call   c000614e <f_stat>
c0020c75:	83 c4 10             	add    esp,0x10
c0020c78:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020c7f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020c86:	85 c0                	test   eax,eax
c0020c88:	74 07                	je     c0020c91 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020c8a:	83 f8 04             	cmp    eax,0x4
c0020c8d:	74 32                	je     c0020cc1 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020c8f:	eb 37                	jmp    c0020cc8 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020c91:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020c95:	0f b6 c0             	movzx  eax,al
c0020c98:	83 e0 10             	and    eax,0x10
c0020c9b:	0f 95 c2             	setne  dl
c0020c9e:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020ca5:	88 10                	mov    BYTE PTR [eax],dl
c0020ca7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020caa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020cae:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020cb5:	89 01                	mov    DWORD PTR [ecx],eax
c0020cb7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020cba:	b8 00 00 00 00       	mov    eax,0x0
c0020cbf:	eb 0c                	jmp    c0020ccd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020cc1:	b8 02 00 00 00       	mov    eax,0x2
c0020cc6:	eb 05                	jmp    c0020ccd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020cc8:	b8 01 00 00 00       	mov    eax,0x1
c0020ccd:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020cd3:	c3                   	ret    

c0020cd4 <FAT::unlink(char const*)>:
c0020cd4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020cda:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020ce2:	75 07                	jne    c0020ceb <FAT::unlink(char const*)+0x17>
c0020ce4:	b8 04 00 00 00       	mov    eax,0x4
c0020ce9:	eb 5c                	jmp    c0020d47 <FAT::unlink(char const*)+0x73>
c0020ceb:	83 ec 08             	sub    esp,0x8
c0020cee:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020cf5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020cf9:	50                   	push   eax
c0020cfa:	e8 0d fb fd ff       	call   c000080c <strcpy>
c0020cff:	83 c4 10             	add    esp,0x10
c0020d02:	83 ec 08             	sub    esp,0x8
c0020d05:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020d09:	50                   	push   eax
c0020d0a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020d11:	e8 ce fc ff ff       	call   c00209e4 <FAT::fixFilepath(char*)>
c0020d16:	83 c4 10             	add    esp,0x10
c0020d19:	83 ec 0c             	sub    esp,0xc
c0020d1c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020d20:	50                   	push   eax
c0020d21:	e8 7a 57 fe ff       	call   c00064a0 <f_unlink>
c0020d26:	83 c4 10             	add    esp,0x10
c0020d29:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020d30:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020d37:	85 c0                	test   eax,eax
c0020d39:	75 07                	jne    c0020d42 <FAT::unlink(char const*)+0x6e>
c0020d3b:	b8 00 00 00 00       	mov    eax,0x0
c0020d40:	eb 05                	jmp    c0020d47 <FAT::unlink(char const*)+0x73>
c0020d42:	b8 01 00 00 00       	mov    eax,0x1
c0020d47:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020d4d:	c3                   	ret    

c0020d4e <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020d4e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020d54:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020d5b:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020d62:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020d66:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020d6a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020d72:	75 0a                	jne    c0020d7e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020d74:	b8 04 00 00 00       	mov    eax,0x4
c0020d79:	e9 1c 01 00 00       	jmp    c0020e9a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020d7e:	83 ec 08             	sub    esp,0x8
c0020d81:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020d88:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020d8c:	50                   	push   eax
c0020d8d:	e8 7a fa fd ff       	call   c000080c <strcpy>
c0020d92:	83 c4 10             	add    esp,0x10
c0020d95:	83 ec 08             	sub    esp,0x8
c0020d98:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020d9c:	50                   	push   eax
c0020d9d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020da4:	e8 3b fc ff ff       	call   c00209e4 <FAT::fixFilepath(char*)>
c0020da9:	83 c4 10             	add    esp,0x10
c0020dac:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020db4:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020dbc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020dc1:	83 e0 01             	and    eax,0x1
c0020dc4:	74 08                	je     c0020dce <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020dc6:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020dce:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020dd3:	83 e0 02             	and    eax,0x2
c0020dd6:	74 08                	je     c0020de0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020dd8:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020de0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020de5:	83 e0 04             	and    eax,0x4
c0020de8:	74 08                	je     c0020df2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020dea:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020df2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020df7:	83 e0 08             	and    eax,0x8
c0020dfa:	74 08                	je     c0020e04 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020dfc:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020e04:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e09:	83 e0 01             	and    eax,0x1
c0020e0c:	74 08                	je     c0020e16 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020e0e:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020e16:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e1b:	83 e0 02             	and    eax,0x2
c0020e1e:	74 08                	je     c0020e28 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020e20:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020e28:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e2d:	83 e0 04             	and    eax,0x4
c0020e30:	74 08                	je     c0020e3a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020e32:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020e3a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e3f:	83 e0 08             	and    eax,0x8
c0020e42:	74 08                	je     c0020e4c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020e44:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020e4c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020e53:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020e5a:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020e62:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020e6a:	83 ec 04             	sub    esp,0x4
c0020e6d:	52                   	push   edx
c0020e6e:	50                   	push   eax
c0020e6f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020e73:	50                   	push   eax
c0020e74:	e8 c9 5c fe ff       	call   c0006b42 <f_chmod>
c0020e79:	83 c4 10             	add    esp,0x10
c0020e7c:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0020e83:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020e8a:	85 c0                	test   eax,eax
c0020e8c:	75 07                	jne    c0020e95 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0020e8e:	b8 00 00 00 00       	mov    eax,0x0
c0020e93:	eb 05                	jmp    c0020e9a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020e95:	b8 01 00 00 00       	mov    eax,0x1
c0020e9a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0020ea0:	c3                   	ret    
c0020ea1:	90                   	nop

c0020ea2 <FAT::rename(char const*, char const*)>:
c0020ea2:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020ea8:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0020eb0:	74 0a                	je     c0020ebc <FAT::rename(char const*, char const*)+0x1a>
c0020eb2:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020eba:	75 0a                	jne    c0020ec6 <FAT::rename(char const*, char const*)+0x24>
c0020ebc:	b8 04 00 00 00       	mov    eax,0x4
c0020ec1:	e9 98 00 00 00       	jmp    c0020f5e <FAT::rename(char const*, char const*)+0xbc>
c0020ec6:	83 ec 08             	sub    esp,0x8
c0020ec9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020ed0:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020ed7:	50                   	push   eax
c0020ed8:	e8 2f f9 fd ff       	call   c000080c <strcpy>
c0020edd:	83 c4 10             	add    esp,0x10
c0020ee0:	83 ec 08             	sub    esp,0x8
c0020ee3:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020eea:	50                   	push   eax
c0020eeb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020ef2:	e8 ed fa ff ff       	call   c00209e4 <FAT::fixFilepath(char*)>
c0020ef7:	83 c4 10             	add    esp,0x10
c0020efa:	83 ec 08             	sub    esp,0x8
c0020efd:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020f04:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f08:	50                   	push   eax
c0020f09:	e8 fe f8 fd ff       	call   c000080c <strcpy>
c0020f0e:	83 c4 10             	add    esp,0x10
c0020f11:	83 ec 08             	sub    esp,0x8
c0020f14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020f18:	50                   	push   eax
c0020f19:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020f20:	e8 bf fa ff ff       	call   c00209e4 <FAT::fixFilepath(char*)>
c0020f25:	83 c4 10             	add    esp,0x10
c0020f28:	83 ec 08             	sub    esp,0x8
c0020f2b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020f2f:	50                   	push   eax
c0020f30:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020f37:	50                   	push   eax
c0020f38:	e8 12 59 fe ff       	call   c000684f <f_rename>
c0020f3d:	83 c4 10             	add    esp,0x10
c0020f40:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020f47:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0020f4e:	85 c0                	test   eax,eax
c0020f50:	75 07                	jne    c0020f59 <FAT::rename(char const*, char const*)+0xb7>
c0020f52:	b8 00 00 00 00       	mov    eax,0x0
c0020f57:	eb 05                	jmp    c0020f5e <FAT::rename(char const*, char const*)+0xbc>
c0020f59:	b8 01 00 00 00       	mov    eax,0x1
c0020f5e:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020f64:	c3                   	ret    
c0020f65:	90                   	nop

c0020f66 <FAT::mkdir(char const*)>:
c0020f66:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020f6c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020f74:	75 07                	jne    c0020f7d <FAT::mkdir(char const*)+0x17>
c0020f76:	b8 04 00 00 00       	mov    eax,0x4
c0020f7b:	eb 5c                	jmp    c0020fd9 <FAT::mkdir(char const*)+0x73>
c0020f7d:	83 ec 08             	sub    esp,0x8
c0020f80:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020f87:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f8b:	50                   	push   eax
c0020f8c:	e8 7b f8 fd ff       	call   c000080c <strcpy>
c0020f91:	83 c4 10             	add    esp,0x10
c0020f94:	83 ec 08             	sub    esp,0x8
c0020f97:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020f9b:	50                   	push   eax
c0020f9c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020fa3:	e8 3c fa ff ff       	call   c00209e4 <FAT::fixFilepath(char*)>
c0020fa8:	83 c4 10             	add    esp,0x10
c0020fab:	83 ec 0c             	sub    esp,0xc
c0020fae:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020fb2:	50                   	push   eax
c0020fb3:	e8 6b 56 fe ff       	call   c0006623 <f_mkdir>
c0020fb8:	83 c4 10             	add    esp,0x10
c0020fbb:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020fc2:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020fc9:	85 c0                	test   eax,eax
c0020fcb:	75 07                	jne    c0020fd4 <FAT::mkdir(char const*)+0x6e>
c0020fcd:	b8 00 00 00 00       	mov    eax,0x0
c0020fd2:	eb 05                	jmp    c0020fd9 <FAT::mkdir(char const*)+0x73>
c0020fd4:	b8 01 00 00 00       	mov    eax,0x1
c0020fd9:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020fdf:	c3                   	ret    

c0020fe0 <FAT::exists(char const*)>:
c0020fe0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020fe6:	83 ec 08             	sub    esp,0x8
c0020fe9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020ff0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020ff4:	50                   	push   eax
c0020ff5:	e8 12 f8 fd ff       	call   c000080c <strcpy>
c0020ffa:	83 c4 10             	add    esp,0x10
c0020ffd:	83 ec 08             	sub    esp,0x8
c0021000:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021004:	50                   	push   eax
c0021005:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002100c:	e8 d3 f9 ff ff       	call   c00209e4 <FAT::fixFilepath(char*)>
c0021011:	83 c4 10             	add    esp,0x10
c0021014:	83 ec 08             	sub    esp,0x8
c0021017:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c002101e:	50                   	push   eax
c002101f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021023:	50                   	push   eax
c0021024:	e8 25 51 fe ff       	call   c000614e <f_stat>
c0021029:	83 c4 10             	add    esp,0x10
c002102c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021033:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002103a:	85 c0                	test   eax,eax
c002103c:	75 04                	jne    c0021042 <FAT::exists(char const*)+0x62>
c002103e:	b0 01                	mov    al,0x1
c0021040:	eb 02                	jmp    c0021044 <FAT::exists(char const*)+0x64>
c0021042:	b0 00                	mov    al,0x0
c0021044:	81 c4 2c 02 00 00    	add    esp,0x22c
c002104a:	c3                   	ret    
c002104b:	90                   	nop

c002104c <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c002104c:	b8 08 00 00 00       	mov    eax,0x8
c0021051:	c3                   	ret    

c0021052 <ISO9660::seek(void*, unsigned long long)>:
c0021052:	53                   	push   ebx
c0021053:	b8 04 00 00 00       	mov    eax,0x4
c0021058:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002105c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021060:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021064:	85 d2                	test   edx,edx
c0021066:	74 17                	je     c002107f <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021068:	89 c8                	mov    eax,ecx
c002106a:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c002106d:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021070:	b8 01 00 00 00       	mov    eax,0x1
c0021075:	73 08                	jae    c002107f <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021077:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c002107a:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c002107d:	31 c0                	xor    eax,eax
c002107f:	5b                   	pop    ebx
c0021080:	c3                   	ret    
c0021081:	90                   	nop

c0021082 <ISO9660::tell(void*, unsigned long long*)>:
c0021082:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021086:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002108a:	85 d2                	test   edx,edx
c002108c:	74 12                	je     c00210a0 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002108e:	85 c0                	test   eax,eax
c0021090:	74 0e                	je     c00210a0 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021092:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021095:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021098:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002109b:	89 10                	mov    DWORD PTR [eax],edx
c002109d:	31 c0                	xor    eax,eax
c002109f:	c3                   	ret    
c00210a0:	b8 04 00 00 00       	mov    eax,0x4
c00210a5:	c3                   	ret    

c00210a6 <ISO9660::getName()>:
c00210a6:	b8 5c bf 02 c0       	mov    eax,0xc002bf5c
c00210ab:	c3                   	ret    

c00210ac <ISO9660::stat(void*, unsigned long long*)>:
c00210ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00210b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00210b4:	85 d2                	test   edx,edx
c00210b6:	74 12                	je     c00210ca <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00210b8:	85 c0                	test   eax,eax
c00210ba:	74 0e                	je     c00210ca <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00210bc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00210bf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00210c2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00210c5:	89 10                	mov    DWORD PTR [eax],edx
c00210c7:	31 c0                	xor    eax,eax
c00210c9:	c3                   	ret    
c00210ca:	b8 04 00 00 00       	mov    eax,0x4
c00210cf:	c3                   	ret    

c00210d0 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00210d0:	b8 01 00 00 00       	mov    eax,0x1
c00210d5:	c3                   	ret    

c00210d6 <ISO9660::unlink(char const*)>:
c00210d6:	b8 01 00 00 00       	mov    eax,0x1
c00210db:	c3                   	ret    

c00210dc <ISO9660::write(void*, unsigned long, void*, int*)>:
c00210dc:	b8 01 00 00 00       	mov    eax,0x1
c00210e1:	c3                   	ret    

c00210e2 <ISO9660::rename(char const*, char const*)>:
c00210e2:	b8 01 00 00 00       	mov    eax,0x1
c00210e7:	c3                   	ret    

c00210e8 <ISO9660::mkdir(char const*)>:
c00210e8:	b8 01 00 00 00       	mov    eax,0x1
c00210ed:	c3                   	ret    

c00210ee <ISO9660::close(void*)>:
c00210ee:	83 ec 0c             	sub    esp,0xc
c00210f1:	b8 04 00 00 00       	mov    eax,0x4
c00210f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00210fa:	85 d2                	test   edx,edx
c00210fc:	74 0e                	je     c002110c <ISO9660::close(void*)+0x1e>
c00210fe:	83 ec 0c             	sub    esp,0xc
c0021101:	52                   	push   edx
c0021102:	e8 a2 e4 fe ff       	call   c000f5a9 <free>
c0021107:	83 c4 10             	add    esp,0x10
c002110a:	31 c0                	xor    eax,eax
c002110c:	83 c4 0c             	add    esp,0xc
c002110f:	c3                   	ret    

c0021110 <ISO9660::closeDir(void*)>:
c0021110:	83 ec 0c             	sub    esp,0xc
c0021113:	b8 04 00 00 00       	mov    eax,0x4
c0021118:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002111c:	85 d2                	test   edx,edx
c002111e:	74 0e                	je     c002112e <ISO9660::closeDir(void*)+0x1e>
c0021120:	83 ec 0c             	sub    esp,0xc
c0021123:	52                   	push   edx
c0021124:	e8 80 e4 fe ff       	call   c000f5a9 <free>
c0021129:	83 c4 10             	add    esp,0x10
c002112c:	31 c0                	xor    eax,eax
c002112e:	83 c4 0c             	add    esp,0xc
c0021131:	c3                   	ret    

c0021132 <ISO9660::~ISO9660()>:
c0021132:	83 ec 0c             	sub    esp,0xc
c0021135:	ba 80 bf 02 c0       	mov    edx,0xc002bf80
c002113a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002113e:	89 10                	mov    DWORD PTR [eax],edx
c0021140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021144:	83 ec 0c             	sub    esp,0xc
c0021147:	50                   	push   eax
c0021148:	e8 05 19 ff ff       	call   c0012a52 <Filesystem::~Filesystem()>
c002114d:	83 c4 10             	add    esp,0x10
c0021150:	90                   	nop
c0021151:	83 c4 0c             	add    esp,0xc
c0021154:	c3                   	ret    
c0021155:	90                   	nop

c0021156 <ISO9660::~ISO9660()>:
c0021156:	83 ec 0c             	sub    esp,0xc
c0021159:	83 ec 0c             	sub    esp,0xc
c002115c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021160:	e8 cd ff ff ff       	call   c0021132 <ISO9660::~ISO9660()>
c0021165:	83 c4 10             	add    esp,0x10
c0021168:	83 ec 08             	sub    esp,0x8
c002116b:	6a 08                	push   0x8
c002116d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021171:	e8 d5 14 ff ff       	call   c001264b <operator delete(void*, unsigned long)>
c0021176:	83 c4 10             	add    esp,0x10
c0021179:	83 c4 0c             	add    esp,0xc
c002117c:	c3                   	ret    

c002117d <__memmem(unsigned char*, int, unsigned char*, int)>:
c002117d:	55                   	push   ebp
c002117e:	31 c9                	xor    ecx,ecx
c0021180:	57                   	push   edi
c0021181:	56                   	push   esi
c0021182:	53                   	push   ebx
c0021183:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021187:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002118b:	89 eb                	mov    ebx,ebp
c002118d:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021191:	39 ce                	cmp    esi,ecx
c0021193:	7e 17                	jle    c00211ac <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021195:	31 d2                	xor    edx,edx
c0021197:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c002119b:	7d 13                	jge    c00211b0 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c002119d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00211a1:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00211a4:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00211a7:	75 0d                	jne    c00211b6 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00211a9:	42                   	inc    edx
c00211aa:	eb eb                	jmp    c0021197 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00211ac:	31 c0                	xor    eax,eax
c00211ae:	eb 0a                	jmp    c00211ba <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00211b0:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00211b4:	eb 04                	jmp    c00211ba <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00211b6:	41                   	inc    ecx
c00211b7:	43                   	inc    ebx
c00211b8:	eb d7                	jmp    c0021191 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00211ba:	5b                   	pop    ebx
c00211bb:	5e                   	pop    esi
c00211bc:	5f                   	pop    edi
c00211bd:	5d                   	pop    ebp
c00211be:	c3                   	ret    

c00211bf <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00211bf:	57                   	push   edi
c00211c0:	56                   	push   esi
c00211c1:	53                   	push   ebx
c00211c2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00211c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00211ca:	39 0d 20 11 03 c0    	cmp    DWORD PTR ds:0xc0031120,ecx
c00211d0:	75 08                	jne    c00211da <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c00211d2:	38 05 94 cf 02 c0    	cmp    BYTE PTR ds:0xc002cf94,al
c00211d8:	74 2b                	je     c0021205 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c00211da:	83 ec 0c             	sub    esp,0xc
c00211dd:	a2 94 cf 02 c0       	mov    ds:0xc002cf94,al
c00211e2:	68 40 11 03 c0       	push   0xc0031140
c00211e7:	0f be c0             	movsx  eax,al
c00211ea:	6a 01                	push   0x1
c00211ec:	89 0d 20 11 03 c0    	mov    DWORD PTR ds:0xc0031120,ecx
c00211f2:	31 db                	xor    ebx,ebx
c00211f4:	53                   	push   ebx
c00211f5:	51                   	push   ecx
c00211f6:	ff 34 85 fc de 02 c0 	push   DWORD PTR [eax*4-0x3ffd2104]
c00211fd:	e8 76 4e ff ff       	call   c0016078 <LogicalDisk::read(unsigned long long, int, void*)>
c0021202:	83 c4 20             	add    esp,0x20
c0021205:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0021209:	be 40 11 03 c0       	mov    esi,0xc0031140
c002120e:	b9 00 08 00 00       	mov    ecx,0x800
c0021213:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021215:	5b                   	pop    ebx
c0021216:	5e                   	pop    esi
c0021217:	5f                   	pop    edi
c0021218:	c3                   	ret    
c0021219:	90                   	nop

c002121a <ISO9660::tryMount(LogicalDisk*, int)>:
c002121a:	81 ec 10 08 00 00    	sub    esp,0x810
c0021220:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021227:	83 c0 41             	add    eax,0x41
c002122a:	0f be c0             	movsx  eax,al
c002122d:	50                   	push   eax
c002122e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021232:	50                   	push   eax
c0021233:	6a 10                	push   0x10
c0021235:	e8 85 ff ff ff       	call   c00211bf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002123a:	83 c4 10             	add    esp,0x10
c002123d:	31 c0                	xor    eax,eax
c002123f:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021244:	75 1d                	jne    c0021263 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021246:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c002124b:	75 16                	jne    c0021263 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002124d:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021252:	75 0f                	jne    c0021263 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021254:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021259:	75 08                	jne    c0021263 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002125b:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021260:	0f 94 c0             	sete   al
c0021263:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021269:	c3                   	ret    

c002126a <ISO9660::read(void*, unsigned long, void*, int*)>:
c002126a:	55                   	push   ebp
c002126b:	57                   	push   edi
c002126c:	56                   	push   esi
c002126d:	53                   	push   ebx
c002126e:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021274:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c002127b:	85 ed                	test   ebp,ebp
c002127d:	0f 84 da 01 00 00    	je     c002145d <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021283:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c002128b:	0f 84 cc 01 00 00    	je     c002145d <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021291:	b8 01 00 00 00       	mov    eax,0x1
c0021296:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c002129a:	0f 85 c2 01 00 00    	jne    c0021462 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c00212a0:	31 d2                	xor    edx,edx
c00212a2:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00212a9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00212ac:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00212af:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00212b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00212b5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00212b9:	01 c8                	add    eax,ecx
c00212bb:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00212be:	11 da                	adc    edx,ebx
c00212c0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00212c4:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00212c8:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00212cc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00212d0:	19 d7                	sbb    edi,edx
c00212d2:	72 11                	jb     c00212e5 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c00212d4:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00212d7:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00212db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00212df:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00212e3:	eb 0c                	jmp    c00212f1 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00212e5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00212e9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00212ed:	29 ce                	sub    esi,ecx
c00212ef:	19 df                	sbb    edi,ebx
c00212f1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00212f4:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00212f7:	0f a4 c2 0b          	shld   edx,eax,0xb
c00212fb:	c1 e0 0b             	shl    eax,0xb
c00212fe:	01 c8                	add    eax,ecx
c0021300:	11 da                	adc    edx,ebx
c0021302:	89 04 24             	mov    DWORD PTR [esp],eax
c0021305:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021309:	51                   	push   ecx
c002130a:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002130e:	50                   	push   eax
c002130f:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021313:	53                   	push   ebx
c0021314:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021318:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002131c:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021320:	50                   	push   eax
c0021321:	e8 99 fe ff ff       	call   c00211bf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021326:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021329:	b8 00 08 00 00       	mov    eax,0x800
c002132e:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021334:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0021338:	29 d0                	sub    eax,edx
c002133a:	83 c4 10             	add    esp,0x10
c002133d:	89 f9                	mov    ecx,edi
c002133f:	39 c6                	cmp    esi,eax
c0021341:	83 d9 00             	sbb    ecx,0x0
c0021344:	7d 1b                	jge    c0021361 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0021346:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c002134b:	75 12                	jne    c002135f <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c002134d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021354:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002135a:	e9 fa 00 00 00       	jmp    c0021459 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002135f:	89 f0                	mov    eax,esi
c0021361:	01 d3                	add    ebx,edx
c0021363:	31 d2                	xor    edx,edx
c0021365:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0021369:	39 c2                	cmp    edx,eax
c002136b:	7d 14                	jge    c0021381 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c002136d:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021374:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021378:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c002137b:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c002137e:	42                   	inc    edx
c002137f:	eb e8                	jmp    c0021369 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c0021381:	89 c2                	mov    edx,eax
c0021383:	85 c0                	test   eax,eax
c0021385:	79 02                	jns    c0021389 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0021387:	31 d2                	xor    edx,edx
c0021389:	01 c2                	add    edx,eax
c002138b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c002138e:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0021395:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0021399:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c002139d:	99                   	cdq    
c002139e:	01 c1                	add    ecx,eax
c00213a0:	11 d3                	adc    ebx,edx
c00213a2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00213a6:	29 c6                	sub    esi,eax
c00213a8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00213ac:	19 d7                	sbb    edi,edx
c00213ae:	89 34 24             	mov    DWORD PTR [esp],esi
c00213b1:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00213b5:	b8 ff 07 00 00       	mov    eax,0x7ff
c00213ba:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00213bd:	b8 00 00 00 00       	mov    eax,0x0
c00213c2:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00213c6:	7d 43                	jge    c002140b <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c00213c8:	52                   	push   edx
c00213c9:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00213cd:	50                   	push   eax
c00213ce:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00213d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00213d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00213da:	0f ac d0 0b          	shrd   eax,edx,0xb
c00213de:	50                   	push   eax
c00213df:	e8 db fd ff ff       	call   c00211bf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00213e4:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00213ec:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00213f1:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c00213f9:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021401:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021406:	83 c4 10             	add    esp,0x10
c0021409:	eb aa                	jmp    c00213b5 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c002140b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002140f:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021412:	74 2a                	je     c002143e <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0021414:	50                   	push   eax
c0021415:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021419:	50                   	push   eax
c002141a:	8d 74 24 28          	lea    esi,[esp+0x28]
c002141e:	56                   	push   esi
c002141f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0021423:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021427:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c002142b:	51                   	push   ecx
c002142c:	e8 8e fd ff ff       	call   c00211bf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021431:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021435:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021439:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002143b:	83 c4 10             	add    esp,0x10
c002143e:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021445:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021449:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002144d:	89 18                	mov    DWORD PTR [eax],ebx
c002144f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021453:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021456:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021459:	31 c0                	xor    eax,eax
c002145b:	eb 05                	jmp    c0021462 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c002145d:	b8 04 00 00 00       	mov    eax,0x4
c0021462:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021468:	5b                   	pop    ebx
c0021469:	5e                   	pop    esi
c002146a:	5f                   	pop    edi
c002146b:	5d                   	pop    ebp
c002146c:	c3                   	ret    
c002146d:	90                   	nop

c002146e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c002146e:	55                   	push   ebp
c002146f:	57                   	push   edi
c0021470:	56                   	push   esi
c0021471:	53                   	push   ebx
c0021472:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021478:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c002147f:	85 ed                	test   ebp,ebp
c0021481:	0f 84 51 02 00 00    	je     c00216d8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021487:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c002148f:	0f 84 43 02 00 00    	je     c00216d8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021495:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021498:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c002149b:	75 0a                	jne    c00214a7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c002149d:	b8 07 00 00 00       	mov    eax,0x7
c00214a2:	e9 36 02 00 00       	jmp    c00216dd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00214a7:	50                   	push   eax
c00214a8:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00214ac:	50                   	push   eax
c00214ad:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00214b4:	53                   	push   ebx
c00214b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00214b8:	c1 e0 0b             	shl    eax,0xb
c00214bb:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c00214be:	c1 e8 0b             	shr    eax,0xb
c00214c1:	50                   	push   eax
c00214c2:	e8 f8 fc ff ff       	call   c00211bf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00214c7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00214ca:	83 c4 10             	add    esp,0x10
c00214cd:	89 c1                	mov    ecx,eax
c00214cf:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00214d2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00214d8:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c00214db:	84 db                	test   bl,bl
c00214dd:	0f 85 8b 00 00 00    	jne    c002156e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c00214e3:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c00214e9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00214ec:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00214f2:	29 c6                	sub    esi,eax
c00214f4:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00214f8:	89 f3                	mov    ebx,esi
c00214fa:	89 f1                	mov    ecx,esi
c00214fc:	c1 fb 1f             	sar    ebx,0x1f
c00214ff:	01 f0                	add    eax,esi
c0021501:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021504:	11 da                	adc    edx,ebx
c0021506:	89 04 24             	mov    DWORD PTR [esp],eax
c0021509:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002150d:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021510:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021513:	89 d8                	mov    eax,ebx
c0021515:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0021519:	ba 00 00 00 00       	mov    edx,0x0
c002151e:	19 f8                	sbb    eax,edi
c0021520:	b8 00 00 00 00       	mov    eax,0x0
c0021525:	73 08                	jae    c002152f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0021527:	89 f0                	mov    eax,esi
c0021529:	89 fa                	mov    edx,edi
c002152b:	29 c8                	sub    eax,ecx
c002152d:	19 da                	sbb    edx,ebx
c002152f:	89 d7                	mov    edi,edx
c0021531:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021534:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021537:	09 c7                	or     edi,eax
c0021539:	0f 84 5e ff ff ff    	je     c002149d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c002153f:	57                   	push   edi
c0021540:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021544:	50                   	push   eax
c0021545:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c002154c:	53                   	push   ebx
c002154d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021550:	c1 e0 0b             	shl    eax,0xb
c0021553:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0021557:	c1 e8 0b             	shr    eax,0xb
c002155a:	50                   	push   eax
c002155b:	e8 5f fc ff ff       	call   c00211bf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021560:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021563:	83 c4 10             	add    esp,0x10
c0021566:	25 ff 07 00 00       	and    eax,0x7ff
c002156b:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c002156e:	31 ff                	xor    edi,edi
c0021570:	56                   	push   esi
c0021571:	6a 28                	push   0x28
c0021573:	6a 00                	push   0x0
c0021575:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021579:	50                   	push   eax
c002157a:	e8 d1 f1 fd ff       	call   c0000750 <memset>
c002157f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021582:	25 ff 07 00 00       	and    eax,0x7ff
c0021587:	89 c6                	mov    esi,eax
c0021589:	83 c6 21             	add    esi,0x21
c002158c:	83 d7 00             	adc    edi,0x0
c002158f:	83 c4 10             	add    esp,0x10
c0021592:	31 c9                	xor    ecx,ecx
c0021594:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c002159b:	83 f9 28             	cmp    ecx,0x28
c002159e:	88 04 24             	mov    BYTE PTR [esp],al
c00215a1:	0f 94 c2             	sete   dl
c00215a4:	88 d0                	mov    al,dl
c00215a6:	ba ff 07 00 00       	mov    edx,0x7ff
c00215ab:	39 f2                	cmp    edx,esi
c00215ad:	ba 00 00 00 00       	mov    edx,0x0
c00215b2:	19 fa                	sbb    edx,edi
c00215b4:	0f 92 c2             	setb   dl
c00215b7:	09 c2                	or     edx,eax
c00215b9:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00215bd:	0f 94 c0             	sete   al
c00215c0:	08 d0                	or     al,dl
c00215c2:	75 16                	jne    c00215da <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c00215c4:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c00215c8:	74 10                	je     c00215da <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c00215ca:	8a 04 24             	mov    al,BYTE PTR [esp]
c00215cd:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c00215d1:	41                   	inc    ecx
c00215d2:	83 c6 01             	add    esi,0x1
c00215d5:	83 d7 00             	adc    edi,0x0
c00215d8:	eb ba                	jmp    c0021594 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c00215da:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c00215e1:	83 ec 0c             	sub    esp,0xc
c00215e4:	8d 74 24 24          	lea    esi,[esp+0x24]
c00215e8:	56                   	push   esi
c00215e9:	e8 7e f1 fd ff       	call   c000076c <strlen>
c00215ee:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c00215f5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00215f9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021601:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021604:	5a                   	pop    edx
c0021605:	25 ff 07 00 00       	and    eax,0x7ff
c002160a:	59                   	pop    ecx
c002160b:	01 f8                	add    eax,edi
c002160d:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021613:	83 e0 02             	and    eax,0x2
c0021616:	3c 01                	cmp    al,0x1
c0021618:	19 c0                	sbb    eax,eax
c002161a:	83 c0 02             	add    eax,0x2
c002161d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021621:	56                   	push   esi
c0021622:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021626:	50                   	push   eax
c0021627:	e8 e0 f1 fd ff       	call   c000080c <strcpy>
c002162c:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021630:	83 c4 10             	add    esp,0x10
c0021633:	84 c0                	test   al,al
c0021635:	75 21                	jne    c0021658 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c0021637:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c002163f:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021647:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c002164f:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021656:	eb 28                	jmp    c0021680 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021658:	fe c8                	dec    al
c002165a:	75 24                	jne    c0021680 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c002165c:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021664:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c002166c:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021674:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c002167b:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021680:	8d 74 24 40          	lea    esi,[esp+0x40]
c0021684:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c002168b:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0021692:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021694:	0f b6 f3             	movzx  esi,bl
c0021697:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c002169e:	31 db                	xor    ebx,ebx
c00216a0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00216a6:	89 df                	mov    edi,ebx
c00216a8:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c00216ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00216ae:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c00216b1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00216b4:	39 c6                	cmp    esi,eax
c00216b6:	19 d7                	sbb    edi,edx
c00216b8:	72 10                	jb     c00216ca <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c00216ba:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00216c1:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c00216c8:	eb 0a                	jmp    c00216d4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c00216ca:	29 f0                	sub    eax,esi
c00216cc:	19 da                	sbb    edx,ebx
c00216ce:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c00216d1:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00216d4:	31 c0                	xor    eax,eax
c00216d6:	eb 05                	jmp    c00216dd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00216d8:	b8 04 00 00 00       	mov    eax,0x4
c00216dd:	81 c4 5c 09 00 00    	add    esp,0x95c
c00216e3:	5b                   	pop    ebx
c00216e4:	5e                   	pop    esi
c00216e5:	5f                   	pop    edi
c00216e6:	5d                   	pop    ebp
c00216e7:	c3                   	ret    

c00216e8 <readRoot(unsigned int*, unsigned int*, char)>:
c00216e8:	57                   	push   edi
c00216e9:	56                   	push   esi
c00216ea:	81 ec 38 08 00 00    	sub    esp,0x838
c00216f0:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c00216f8:	50                   	push   eax
c00216f9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00216fd:	50                   	push   eax
c00216fe:	6a 10                	push   0x10
c0021700:	e8 ba fa ff ff       	call   c00211bf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021705:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c002170c:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0021710:	b9 22 00 00 00       	mov    ecx,0x22
c0021715:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021717:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002171e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021722:	89 10                	mov    DWORD PTR [eax],edx
c0021724:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c002172b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002172f:	89 10                	mov    DWORD PTR [eax],edx
c0021731:	81 c4 44 08 00 00    	add    esp,0x844
c0021737:	b0 01                	mov    al,0x1
c0021739:	5e                   	pop    esi
c002173a:	5f                   	pop    edi
c002173b:	c3                   	ret    

c002173c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c002173c:	55                   	push   ebp
c002173d:	57                   	push   edi
c002173e:	56                   	push   esi
c002173f:	53                   	push   ebx
c0021740:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021746:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c002174d:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021754:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021758:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c002175c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021760:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021764:	75 03                	jne    c0021769 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021766:	83 c3 02             	add    ebx,0x2
c0021769:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c002176c:	75 03                	jne    c0021771 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c002176e:	43                   	inc    ebx
c002176f:	eb f8                	jmp    c0021769 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021771:	51                   	push   ecx
c0021772:	68 00 01 00 00       	push   0x100
c0021777:	6a 00                	push   0x0
c0021779:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002177d:	50                   	push   eax
c002177e:	e8 cd ef fd ff       	call   c0000750 <memset>
c0021783:	83 c4 10             	add    esp,0x10
c0021786:	31 d2                	xor    edx,edx
c0021788:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002178b:	84 c0                	test   al,al
c002178d:	74 21                	je     c00217b0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c002178f:	3c 2f                	cmp    al,0x2f
c0021791:	75 0b                	jne    c002179e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021793:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021797:	bd 01 00 00 00       	mov    ebp,0x1
c002179c:	eb 14                	jmp    c00217b2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c002179e:	8d 48 9f             	lea    ecx,[eax-0x61]
c00217a1:	80 f9 19             	cmp    cl,0x19
c00217a4:	77 03                	ja     c00217a9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c00217a6:	83 e8 20             	sub    eax,0x20
c00217a9:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c00217ad:	42                   	inc    edx
c00217ae:	eb d8                	jmp    c0021788 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c00217b0:	31 ed                	xor    ebp,ebp
c00217b2:	83 ec 0c             	sub    esp,0xc
c00217b5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00217bc:	e8 d8 dd fe ff       	call   c000f599 <malloc>
c00217c1:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00217c8:	89 c6                	mov    esi,eax
c00217ca:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c00217d0:	c1 ef 0b             	shr    edi,0xb
c00217d3:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c00217da:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00217de:	83 c4 10             	add    esp,0x10
c00217e1:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c00217e6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00217ea:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c00217f1:	74 28                	je     c002181b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c00217f3:	52                   	push   edx
c00217f4:	57                   	push   edi
c00217f5:	50                   	push   eax
c00217f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00217fa:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021801:	e8 b9 f9 ff ff       	call   c00211bf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021806:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002180a:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021811:	05 00 08 00 00       	add    eax,0x800
c0021816:	83 c4 10             	add    esp,0x10
c0021819:	eb cb                	jmp    c00217e6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c002181b:	83 ec 0c             	sub    esp,0xc
c002181e:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021822:	57                   	push   edi
c0021823:	e8 44 ef fd ff       	call   c000076c <strlen>
c0021828:	50                   	push   eax
c0021829:	57                   	push   edi
c002182a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021831:	56                   	push   esi
c0021832:	e8 46 f9 ff ff       	call   c002117d <__memmem(unsigned char*, int, unsigned char*, int)>
c0021837:	83 c4 20             	add    esp,0x20
c002183a:	85 c0                	test   eax,eax
c002183c:	75 13                	jne    c0021851 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c002183e:	83 ec 0c             	sub    esp,0xc
c0021841:	56                   	push   esi
c0021842:	e8 62 dd fe ff       	call   c000f5a9 <free>
c0021847:	83 c4 10             	add    esp,0x10
c002184a:	31 c0                	xor    eax,eax
c002184c:	e9 b3 00 00 00       	jmp    c0021904 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021851:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021855:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021859:	c1 e7 08             	shl    edi,0x8
c002185c:	c1 e2 10             	shl    edx,0x10
c002185f:	09 d7                	or     edi,edx
c0021861:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021865:	09 d7                	or     edi,edx
c0021867:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c002186b:	c1 e2 18             	shl    edx,0x18
c002186e:	09 d7                	or     edi,edx
c0021870:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021874:	89 d1                	mov    ecx,edx
c0021876:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c002187a:	c1 e1 08             	shl    ecx,0x8
c002187d:	c1 e2 10             	shl    edx,0x10
c0021880:	09 ca                	or     edx,ecx
c0021882:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021886:	09 ca                	or     edx,ecx
c0021888:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c002188c:	c1 e1 18             	shl    ecx,0x18
c002188f:	09 ca                	or     edx,ecx
c0021891:	89 e9                	mov    ecx,ebp
c0021893:	84 c9                	test   cl,cl
c0021895:	74 3c                	je     c00218d3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021897:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002189b:	83 ec 0c             	sub    esp,0xc
c002189e:	56                   	push   esi
c002189f:	e8 05 dd fe ff       	call   c000f5a9 <free>
c00218a4:	83 c4 0c             	add    esp,0xc
c00218a7:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00218ae:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00218b3:	50                   	push   eax
c00218b4:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00218bb:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00218c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00218c6:	52                   	push   edx
c00218c7:	57                   	push   edi
c00218c8:	53                   	push   ebx
c00218c9:	e8 6e fe ff ff       	call   c002173c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00218ce:	83 c4 20             	add    esp,0x20
c00218d1:	eb 31                	jmp    c0021904 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00218d3:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c00218d6:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c00218dd:	d0 e8                	shr    al,1
c00218df:	89 3b                	mov    DWORD PTR [ebx],edi
c00218e1:	83 e0 01             	and    eax,0x1
c00218e4:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00218eb:	83 ec 0c             	sub    esp,0xc
c00218ee:	89 13                	mov    DWORD PTR [ebx],edx
c00218f0:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c00218f7:	89 03                	mov    DWORD PTR [ebx],eax
c00218f9:	56                   	push   esi
c00218fa:	e8 aa dc fe ff       	call   c000f5a9 <free>
c00218ff:	83 c4 10             	add    esp,0x10
c0021902:	b0 01                	mov    al,0x1
c0021904:	81 c4 1c 01 00 00    	add    esp,0x11c
c002190a:	5b                   	pop    ebx
c002190b:	5e                   	pop    esi
c002190c:	5f                   	pop    edi
c002190d:	5d                   	pop    ebp
c002190e:	c3                   	ret    

c002190f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c002190f:	55                   	push   ebp
c0021910:	57                   	push   edi
c0021911:	56                   	push   esi
c0021912:	53                   	push   ebx
c0021913:	83 ec 20             	sub    esp,0x20
c0021916:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002191a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c002191e:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021922:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002192a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021932:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021937:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c002193d:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021943:	57                   	push   edi
c0021944:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021948:	50                   	push   eax
c0021949:	8d 44 24 14          	lea    eax,[esp+0x14]
c002194d:	50                   	push   eax
c002194e:	e8 95 fd ff ff       	call   c00216e8 <readRoot(unsigned int*, unsigned int*, char)>
c0021953:	5a                   	pop    edx
c0021954:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021958:	e8 0f ee fd ff       	call   c000076c <strlen>
c002195d:	83 c4 10             	add    esp,0x10
c0021960:	83 f8 03             	cmp    eax,0x3
c0021963:	77 17                	ja     c002197c <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021965:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021969:	89 03                	mov    DWORD PTR [ebx],eax
c002196b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002196f:	89 06                	mov    DWORD PTR [esi],eax
c0021971:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021978:	b0 01                	mov    al,0x1
c002197a:	eb 19                	jmp    c0021995 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c002197c:	50                   	push   eax
c002197d:	55                   	push   ebp
c002197e:	57                   	push   edi
c002197f:	56                   	push   esi
c0021980:	53                   	push   ebx
c0021981:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021985:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021989:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002198d:	e8 aa fd ff ff       	call   c002173c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021992:	83 c4 20             	add    esp,0x20
c0021995:	83 c4 1c             	add    esp,0x1c
c0021998:	5b                   	pop    ebx
c0021999:	5e                   	pop    esi
c002199a:	5f                   	pop    edi
c002199b:	5d                   	pop    ebp
c002199c:	c3                   	ret    
c002199d:	90                   	nop

c002199e <ISO9660::open(char const*, void**, FileOpenMode)>:
c002199e:	57                   	push   edi
c002199f:	56                   	push   esi
c00219a0:	53                   	push   ebx
c00219a1:	83 ec 10             	sub    esp,0x10
c00219a4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00219a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00219ac:	85 ff                	test   edi,edi
c00219ae:	0f 84 8b 00 00 00    	je     c0021a3f <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c00219b4:	85 f6                	test   esi,esi
c00219b6:	0f 84 83 00 00 00    	je     c0021a3f <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c00219bc:	b8 03 00 00 00       	mov    eax,0x3
c00219c1:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00219c6:	75 7c                	jne    c0021a44 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c00219c8:	83 ec 0c             	sub    esp,0xc
c00219cb:	6a 1c                	push   0x1c
c00219cd:	e8 c7 db fe ff       	call   c000f599 <malloc>
c00219d2:	89 07                	mov    DWORD PTR [edi],eax
c00219d4:	89 c3                	mov    ebx,eax
c00219d6:	58                   	pop    eax
c00219d7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00219db:	50                   	push   eax
c00219dc:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00219df:	50                   	push   eax
c00219e0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00219e4:	50                   	push   eax
c00219e5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00219e9:	50                   	push   eax
c00219ea:	56                   	push   esi
c00219eb:	e8 1f ff ff ff       	call   c002190f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00219f0:	83 c4 20             	add    esp,0x20
c00219f3:	84 c0                	test   al,al
c00219f5:	74 07                	je     c00219fe <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c00219f7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00219fc:	74 0b                	je     c0021a09 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c00219fe:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021a02:	b8 01 00 00 00       	mov    eax,0x1
c0021a07:	eb 3b                	jmp    c0021a44 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021a09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a0d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021a11:	89 03                	mov    DWORD PTR [ebx],eax
c0021a13:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021a1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a1e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021a25:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021a2c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021a2f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021a36:	8a 06                	mov    al,BYTE PTR [esi]
c0021a38:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021a3b:	31 c0                	xor    eax,eax
c0021a3d:	eb 05                	jmp    c0021a44 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021a3f:	b8 04 00 00 00       	mov    eax,0x4
c0021a44:	83 c4 10             	add    esp,0x10
c0021a47:	5b                   	pop    ebx
c0021a48:	5e                   	pop    esi
c0021a49:	5f                   	pop    edi
c0021a4a:	c3                   	ret    
c0021a4b:	90                   	nop

c0021a4c <ISO9660::exists(char const*)>:
c0021a4c:	83 ec 28             	sub    esp,0x28
c0021a4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021a53:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021a57:	52                   	push   edx
c0021a58:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021a5b:	52                   	push   edx
c0021a5c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021a60:	52                   	push   edx
c0021a61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021a65:	52                   	push   edx
c0021a66:	50                   	push   eax
c0021a67:	e8 a3 fe ff ff       	call   c002190f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021a6c:	83 c4 3c             	add    esp,0x3c
c0021a6f:	c3                   	ret    

c0021a70 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021a70:	56                   	push   esi
c0021a71:	53                   	push   ebx
c0021a72:	83 ec 14             	sub    esp,0x14
c0021a75:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021a79:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021a7d:	85 db                	test   ebx,ebx
c0021a7f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021a83:	0f 94 c2             	sete   dl
c0021a86:	85 f6                	test   esi,esi
c0021a88:	0f 94 c0             	sete   al
c0021a8b:	08 c2                	or     dl,al
c0021a8d:	75 68                	jne    c0021af7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021a8f:	85 c9                	test   ecx,ecx
c0021a91:	74 64                	je     c0021af7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021a93:	83 ec 0c             	sub    esp,0xc
c0021a96:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021a99:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021a9d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021aa3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021aaa:	50                   	push   eax
c0021aab:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021aae:	50                   	push   eax
c0021aaf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021ab3:	50                   	push   eax
c0021ab4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021ab8:	50                   	push   eax
c0021ab9:	51                   	push   ecx
c0021aba:	e8 50 fe ff ff       	call   c002190f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021abf:	83 c4 20             	add    esp,0x20
c0021ac2:	ba 01 00 00 00       	mov    edx,0x1
c0021ac7:	84 c0                	test   al,al
c0021ac9:	74 31                	je     c0021afc <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021acb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021acf:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021ad6:	89 03                	mov    DWORD PTR [ebx],eax
c0021ad8:	ba 00 00 00 00       	mov    edx,0x0
c0021add:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021ae1:	85 c0                	test   eax,eax
c0021ae3:	0f 95 06             	setne  BYTE PTR [esi]
c0021ae6:	74 14                	je     c0021afc <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021ae8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021aee:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021af5:	eb 05                	jmp    c0021afc <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021af7:	ba 04 00 00 00       	mov    edx,0x4
c0021afc:	83 c4 14             	add    esp,0x14
c0021aff:	89 d0                	mov    eax,edx
c0021b01:	5b                   	pop    ebx
c0021b02:	5e                   	pop    esi
c0021b03:	c3                   	ret    

c0021b04 <ISO9660::openDir(char const*, void**)>:
c0021b04:	57                   	push   edi
c0021b05:	56                   	push   esi
c0021b06:	53                   	push   ebx
c0021b07:	83 ec 10             	sub    esp,0x10
c0021b0a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021b0e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021b12:	85 ff                	test   edi,edi
c0021b14:	74 7b                	je     c0021b91 <ISO9660::openDir(char const*, void**)+0x8d>
c0021b16:	85 f6                	test   esi,esi
c0021b18:	74 77                	je     c0021b91 <ISO9660::openDir(char const*, void**)+0x8d>
c0021b1a:	83 ec 0c             	sub    esp,0xc
c0021b1d:	6a 1c                	push   0x1c
c0021b1f:	e8 75 da fe ff       	call   c000f599 <malloc>
c0021b24:	89 07                	mov    DWORD PTR [edi],eax
c0021b26:	89 c3                	mov    ebx,eax
c0021b28:	58                   	pop    eax
c0021b29:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021b2d:	50                   	push   eax
c0021b2e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021b31:	50                   	push   eax
c0021b32:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021b36:	50                   	push   eax
c0021b37:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021b3b:	50                   	push   eax
c0021b3c:	56                   	push   esi
c0021b3d:	e8 cd fd ff ff       	call   c002190f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021b42:	83 c4 20             	add    esp,0x20
c0021b45:	84 c0                	test   al,al
c0021b47:	74 07                	je     c0021b50 <ISO9660::openDir(char const*, void**)+0x4c>
c0021b49:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021b4e:	75 0b                	jne    c0021b5b <ISO9660::openDir(char const*, void**)+0x57>
c0021b50:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021b54:	b8 01 00 00 00       	mov    eax,0x1
c0021b59:	eb 3b                	jmp    c0021b96 <ISO9660::openDir(char const*, void**)+0x92>
c0021b5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b5f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021b63:	89 03                	mov    DWORD PTR [ebx],eax
c0021b65:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021b6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021b70:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021b77:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021b7e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021b81:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021b88:	8a 06                	mov    al,BYTE PTR [esi]
c0021b8a:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021b8d:	31 c0                	xor    eax,eax
c0021b8f:	eb 05                	jmp    c0021b96 <ISO9660::openDir(char const*, void**)+0x92>
c0021b91:	b8 04 00 00 00       	mov    eax,0x4
c0021b96:	83 c4 10             	add    esp,0x10
c0021b99:	5b                   	pop    ebx
c0021b9a:	5e                   	pop    esi
c0021b9b:	5f                   	pop    edi
c0021b9c:	c3                   	ret    
c0021b9d:	90                   	nop

c0021b9e <ISO9660::ISO9660()>:
c0021b9e:	83 ec 0c             	sub    esp,0xc
c0021ba1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ba5:	83 ec 0c             	sub    esp,0xc
c0021ba8:	50                   	push   eax
c0021ba9:	e8 80 0e ff ff       	call   c0012a2e <Filesystem::Filesystem()>
c0021bae:	83 c4 10             	add    esp,0x10
c0021bb1:	ba 80 bf 02 c0       	mov    edx,0xc002bf80
c0021bb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bba:	89 10                	mov    DWORD PTR [eax],edx
c0021bbc:	90                   	nop
c0021bbd:	83 c4 0c             	add    esp,0xc
c0021bc0:	c3                   	ret    
c0021bc1:	90                   	nop

c0021bc2 <SoundChannel::SoundChannel(int, int, int, int)>:
c0021bc2:	83 ec 1c             	sub    esp,0x1c
c0021bc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bc9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021bcd:	89 10                	mov    DWORD PTR [eax],edx
c0021bcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bd3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021bd7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021bda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bde:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021be2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021be5:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021bea:	75 23                	jne    c0021c0f <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c0021bec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bf0:	8b 10                	mov    edx,DWORD PTR [eax]
c0021bf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bf6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021bf9:	0f af c2             	imul   eax,edx
c0021bfc:	85 c0                	test   eax,eax
c0021bfe:	79 03                	jns    c0021c03 <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c0021c00:	83 c0 03             	add    eax,0x3
c0021c03:	c1 f8 02             	sar    eax,0x2
c0021c06:	05 a0 0f 00 00       	add    eax,0xfa0
c0021c0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021c0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c13:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021c17:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021c1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c1e:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c29:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021c30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c34:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021c37:	c1 e0 02             	shl    eax,0x2
c0021c3a:	83 ec 0c             	sub    esp,0xc
c0021c3d:	50                   	push   eax
c0021c3e:	e8 56 d9 fe ff       	call   c000f599 <malloc>
c0021c43:	83 c4 10             	add    esp,0x10
c0021c46:	89 c2                	mov    edx,eax
c0021c48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c4c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021c4f:	83 ec 04             	sub    esp,0x4
c0021c52:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021c56:	50                   	push   eax
c0021c57:	6a 01                	push   0x1
c0021c59:	6a 04                	push   0x4
c0021c5b:	e8 05 6f fe ff       	call   c0008b65 <src_new>
c0021c60:	83 c4 10             	add    esp,0x10
c0021c63:	89 c2                	mov    edx,eax
c0021c65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c69:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021c6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c70:	85 c0                	test   eax,eax
c0021c72:	74 10                	je     c0021c84 <SoundChannel::SoundChannel(int, int, int, int)+0xc2>
c0021c74:	83 ec 0c             	sub    esp,0xc
c0021c77:	68 e0 bf 02 c0       	push   0xc002bfe0
c0021c7c:	e8 0e 82 ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c0021c81:	83 c4 10             	add    esp,0x10
c0021c84:	a0 40 1d 03 c0       	mov    al,ds:0xc0031d40
c0021c89:	83 f0 01             	xor    eax,0x1
c0021c8c:	84 c0                	test   al,al
c0021c8e:	74 57                	je     c0021ce7 <SoundChannel::SoundChannel(int, int, int, int)+0x125>
c0021c90:	a1 fc bf 02 c0       	mov    eax,ds:0xc002bffc
c0021c95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021c99:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021ca1:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021ca9:	7f 35                	jg     c0021ce0 <SoundChannel::SoundChannel(int, int, int, int)+0x11e>
c0021cab:	83 ec 0c             	sub    esp,0xc
c0021cae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021cb2:	e8 d8 53 00 00       	call   c002708f <__floatsisf>
c0021cb7:	83 c4 10             	add    esp,0x10
c0021cba:	8b 15 fc bf 02 c0    	mov    edx,DWORD PTR ds:0xc002bffc
c0021cc0:	83 ec 08             	sub    esp,0x8
c0021cc3:	52                   	push   edx
c0021cc4:	50                   	push   eax
c0021cc5:	e8 d7 4f 00 00       	call   c0026ca1 <__mulsf3>
c0021cca:	83 c4 10             	add    esp,0x10
c0021ccd:	89 c2                	mov    edx,eax
c0021ccf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021cd3:	89 14 85 40 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce6c0],edx
c0021cda:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021cde:	eb c1                	jmp    c0021ca1 <SoundChannel::SoundChannel(int, int, int, int)+0xdf>
c0021ce0:	c6 05 40 1d 03 c0 01 	mov    BYTE PTR ds:0xc0031d40,0x1
c0021ce7:	90                   	nop
c0021ce8:	83 c4 1c             	add    esp,0x1c
c0021ceb:	c3                   	ret    

c0021cec <SoundChannel::~SoundChannel()>:
c0021cec:	83 ec 0c             	sub    esp,0xc
c0021cef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cf3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021cf6:	83 ec 0c             	sub    esp,0xc
c0021cf9:	50                   	push   eax
c0021cfa:	e8 aa d8 fe ff       	call   c000f5a9 <free>
c0021cff:	83 c4 10             	add    esp,0x10
c0021d02:	90                   	nop
c0021d03:	83 c4 0c             	add    esp,0xc
c0021d06:	c3                   	ret    
c0021d07:	90                   	nop

c0021d08 <SoundChannel::getSampleRate()>:
c0021d08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d0e:	c3                   	ret    
c0021d0f:	90                   	nop

c0021d10 <SoundChannel::getBits()>:
c0021d10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021d17:	c3                   	ret    

c0021d18 <SoundChannel::getBufferUsed()>:
c0021d18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d1c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021d1f:	c3                   	ret    

c0021d20 <SoundChannel::getBufferSize()>:
c0021d20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d24:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021d27:	c3                   	ret    

c0021d28 <SoundChannel::unbuffer(float*, int, int)>:
c0021d28:	56                   	push   esi
c0021d29:	53                   	push   ebx
c0021d2a:	83 ec 40             	sub    esp,0x40
c0021d2d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021d31:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021d34:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021d38:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021d3b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021d3f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021d43:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021d47:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021d4b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021d4f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021d53:	e8 37 53 00 00       	call   c002708f <__floatsisf>
c0021d58:	5a                   	pop    edx
c0021d59:	89 c6                	mov    esi,eax
c0021d5b:	ff 33                	push   DWORD PTR [ebx]
c0021d5d:	e8 2d 53 00 00       	call   c002708f <__floatsisf>
c0021d62:	59                   	pop    ecx
c0021d63:	5a                   	pop    edx
c0021d64:	50                   	push   eax
c0021d65:	56                   	push   esi
c0021d66:	e8 f9 50 00 00       	call   c0026e64 <__divsf3>
c0021d6b:	89 04 24             	mov    DWORD PTR [esp],eax
c0021d6e:	e8 ec 65 00 00       	call   c002835f <__extendsfdf2>
c0021d73:	59                   	pop    ecx
c0021d74:	5e                   	pop    esi
c0021d75:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021d79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021d7d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021d85:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021d89:	50                   	push   eax
c0021d8a:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021d8d:	e8 c8 69 fe ff       	call   c000875a <src_process>
c0021d92:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021d96:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021d99:	83 c4 0c             	add    esp,0xc
c0021d9c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0021d9f:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021da2:	29 d0                	sub    eax,edx
c0021da4:	c1 e0 02             	shl    eax,0x2
c0021da7:	50                   	push   eax
c0021da8:	8d 04 91             	lea    eax,[ecx+edx*4]
c0021dab:	50                   	push   eax
c0021dac:	51                   	push   ecx
c0021dad:	e8 d6 e8 fd ff       	call   c0000688 <memmove>
c0021db2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021db6:	83 c4 44             	add    esp,0x44
c0021db9:	5b                   	pop    ebx
c0021dba:	5e                   	pop    esi
c0021dbb:	c3                   	ret    

c0021dbc <SoundChannel::buffer16(short*, int)>:
c0021dbc:	55                   	push   ebp
c0021dbd:	57                   	push   edi
c0021dbe:	56                   	push   esi
c0021dbf:	53                   	push   ebx
c0021dc0:	83 ec 1c             	sub    esp,0x1c
c0021dc3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0021dc7:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021dca:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021dcd:	0f 84 d2 00 00 00    	je     c0021ea5 <SoundChannel::buffer16(short*, int)+0xe9>
c0021dd3:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0021dd7:	85 ed                	test   ebp,ebp
c0021dd9:	0f 8e c6 00 00 00    	jle    c0021ea5 <SoundChannel::buffer16(short*, int)+0xe9>
c0021ddf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021de3:	bd 00 00 00 38       	mov    ebp,0x38000000
c0021de8:	83 ec 0c             	sub    esp,0xc
c0021deb:	0f bf 00             	movsx  eax,WORD PTR [eax]
c0021dee:	50                   	push   eax
c0021def:	e8 9b 52 00 00       	call   c002708f <__floatsisf>
c0021df4:	59                   	pop    ecx
c0021df5:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021df8:	5f                   	pop    edi
c0021df9:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021dfc:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021dff:	55                   	push   ebp
c0021e00:	50                   	push   eax
c0021e01:	e8 9b 4e 00 00       	call   c0026ca1 <__mulsf3>
c0021e06:	83 c4 10             	add    esp,0x10
c0021e09:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021e0c:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021e0f:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021e12:	0f 84 99 00 00 00    	je     c0021eb1 <SoundChannel::buffer16(short*, int)+0xf5>
c0021e18:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0021e1d:	74 78                	je     c0021e97 <SoundChannel::buffer16(short*, int)+0xdb>
c0021e1f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021e23:	83 ec 0c             	sub    esp,0xc
c0021e26:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c0021e2a:	50                   	push   eax
c0021e2b:	e8 5f 52 00 00       	call   c002708f <__floatsisf>
c0021e30:	5f                   	pop    edi
c0021e31:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021e34:	5a                   	pop    edx
c0021e35:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021e38:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021e3b:	55                   	push   ebp
c0021e3c:	50                   	push   eax
c0021e3d:	e8 5f 4e 00 00       	call   c0026ca1 <__mulsf3>
c0021e42:	83 c4 10             	add    esp,0x10
c0021e45:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021e48:	be 02 00 00 00       	mov    esi,0x2
c0021e4d:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021e50:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021e53:	74 46                	je     c0021e9b <SoundChannel::buffer16(short*, int)+0xdf>
c0021e55:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0021e59:	eb 36                	jmp    c0021e91 <SoundChannel::buffer16(short*, int)+0xd5>
c0021e5b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021e5f:	83 ec 0c             	sub    esp,0xc
c0021e62:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0021e66:	46                   	inc    esi
c0021e67:	50                   	push   eax
c0021e68:	e8 22 52 00 00       	call   c002708f <__floatsisf>
c0021e6d:	5a                   	pop    edx
c0021e6e:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0021e71:	59                   	pop    ecx
c0021e72:	8d 4f 01             	lea    ecx,[edi+0x1]
c0021e75:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021e78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e7c:	50                   	push   eax
c0021e7d:	e8 1f 4e 00 00       	call   c0026ca1 <__mulsf3>
c0021e82:	83 c4 10             	add    esp,0x10
c0021e85:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c0021e89:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021e8c:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021e8f:	74 0a                	je     c0021e9b <SoundChannel::buffer16(short*, int)+0xdf>
c0021e91:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c0021e95:	75 c4                	jne    c0021e5b <SoundChannel::buffer16(short*, int)+0x9f>
c0021e97:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0021e9b:	83 c4 1c             	add    esp,0x1c
c0021e9e:	89 f0                	mov    eax,esi
c0021ea0:	5b                   	pop    ebx
c0021ea1:	5e                   	pop    esi
c0021ea2:	5f                   	pop    edi
c0021ea3:	5d                   	pop    ebp
c0021ea4:	c3                   	ret    
c0021ea5:	83 c4 1c             	add    esp,0x1c
c0021ea8:	31 f6                	xor    esi,esi
c0021eaa:	5b                   	pop    ebx
c0021eab:	89 f0                	mov    eax,esi
c0021ead:	5e                   	pop    esi
c0021eae:	5f                   	pop    edi
c0021eaf:	5d                   	pop    ebp
c0021eb0:	c3                   	ret    
c0021eb1:	be 01 00 00 00       	mov    esi,0x1
c0021eb6:	eb e3                	jmp    c0021e9b <SoundChannel::buffer16(short*, int)+0xdf>

c0021eb8 <SoundChannel::buffer8(unsigned char*, int)>:
c0021eb8:	55                   	push   ebp
c0021eb9:	57                   	push   edi
c0021eba:	56                   	push   esi
c0021ebb:	53                   	push   ebx
c0021ebc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021ec0:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0021ec4:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021ec7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021ecb:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021ece:	74 7a                	je     c0021f4a <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021ed0:	85 ff                	test   edi,edi
c0021ed2:	7e 76                	jle    c0021f4a <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021ed4:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0021ed8:	8d 70 01             	lea    esi,[eax+0x1]
c0021edb:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021ede:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021ee1:	8b 1c 9d 40 19 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce6c0]
c0021ee8:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021eeb:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021eee:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021ef1:	74 5e                	je     c0021f51 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021ef3:	83 ff 01             	cmp    edi,0x1
c0021ef6:	74 4b                	je     c0021f43 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021ef8:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021efc:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021eff:	8d 70 01             	lea    esi,[eax+0x1]
c0021f02:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021f05:	8b 1c 9d 40 19 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce6c0]
c0021f0c:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021f0f:	b8 02 00 00 00       	mov    eax,0x2
c0021f14:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021f17:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021f1a:	75 23                	jne    c0021f3f <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021f1c:	eb 27                	jmp    c0021f45 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021f1e:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021f23:	8d 71 01             	lea    esi,[ecx+0x1]
c0021f26:	40                   	inc    eax
c0021f27:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021f2a:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021f2d:	8b 1c 9d 40 19 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce6c0]
c0021f34:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021f37:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021f3a:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021f3d:	74 06                	je     c0021f45 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021f3f:	39 c7                	cmp    edi,eax
c0021f41:	75 db                	jne    c0021f1e <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021f43:	89 f8                	mov    eax,edi
c0021f45:	5b                   	pop    ebx
c0021f46:	5e                   	pop    esi
c0021f47:	5f                   	pop    edi
c0021f48:	5d                   	pop    ebp
c0021f49:	c3                   	ret    
c0021f4a:	5b                   	pop    ebx
c0021f4b:	31 c0                	xor    eax,eax
c0021f4d:	5e                   	pop    esi
c0021f4e:	5f                   	pop    edi
c0021f4f:	5d                   	pop    ebp
c0021f50:	c3                   	ret    
c0021f51:	b8 01 00 00 00       	mov    eax,0x1
c0021f56:	eb ed                	jmp    c0021f45 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0021f58 <SoundDevice::SoundDevice(char const*)>:
c0021f58:	83 ec 1c             	sub    esp,0x1c
c0021f5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f5f:	83 ec 08             	sub    esp,0x8
c0021f62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021f66:	50                   	push   eax
c0021f67:	e8 f4 1d ff ff       	call   c0013d60 <Device::Device(char const*)>
c0021f6c:	83 c4 10             	add    esp,0x10
c0021f6f:	ba 08 c0 02 c0       	mov    edx,0xc002c008
c0021f74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f78:	89 10                	mov    DWORD PTR [eax],edx
c0021f7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f7e:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0021f88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f8c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0021f96:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f9e:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021fa3:	7f 19                	jg     c0021fbe <SoundDevice::SoundDevice(char const*)+0x66>
c0021fa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021fa9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021fad:	83 c2 54             	add    edx,0x54
c0021fb0:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0021fb8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021fbc:	eb e0                	jmp    c0021f9e <SoundDevice::SoundDevice(char const*)+0x46>
c0021fbe:	90                   	nop
c0021fbf:	83 c4 1c             	add    esp,0x1c
c0021fc2:	c3                   	ret    
c0021fc3:	90                   	nop

c0021fc4 <SoundDevice::~SoundDevice()>:
c0021fc4:	53                   	push   ebx
c0021fc5:	83 ec 18             	sub    esp,0x18
c0021fc8:	ba 08 c0 02 c0       	mov    edx,0xc002c008
c0021fcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021fd1:	89 10                	mov    DWORD PTR [eax],edx
c0021fd3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021fdb:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021fe0:	7f 46                	jg     c0022028 <SoundDevice::~SoundDevice()+0x64>
c0021fe2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021fe6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021fea:	83 c2 54             	add    edx,0x54
c0021fed:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0021ff1:	85 c0                	test   eax,eax
c0021ff3:	74 2d                	je     c0022022 <SoundDevice::~SoundDevice()+0x5e>
c0021ff5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ff9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021ffd:	83 c2 54             	add    edx,0x54
c0022000:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022004:	85 db                	test   ebx,ebx
c0022006:	74 1a                	je     c0022022 <SoundDevice::~SoundDevice()+0x5e>
c0022008:	83 ec 0c             	sub    esp,0xc
c002200b:	53                   	push   ebx
c002200c:	e8 db fc ff ff       	call   c0021cec <SoundChannel::~SoundChannel()>
c0022011:	83 c4 10             	add    esp,0x10
c0022014:	83 ec 08             	sub    esp,0x8
c0022017:	6a 2c                	push   0x2c
c0022019:	53                   	push   ebx
c002201a:	e8 2c 06 ff ff       	call   c001264b <operator delete(void*, unsigned long)>
c002201f:	83 c4 10             	add    esp,0x10
c0022022:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022026:	eb b3                	jmp    c0021fdb <SoundDevice::~SoundDevice()+0x17>
c0022028:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002202c:	83 ec 0c             	sub    esp,0xc
c002202f:	50                   	push   eax
c0022030:	e8 f5 19 ff ff       	call   c0013a2a <Device::~Device()>
c0022035:	83 c4 10             	add    esp,0x10
c0022038:	90                   	nop
c0022039:	83 c4 18             	add    esp,0x18
c002203c:	5b                   	pop    ebx
c002203d:	c3                   	ret    

c002203e <SoundDevice::~SoundDevice()>:
c002203e:	83 ec 0c             	sub    esp,0xc
c0022041:	83 ec 0c             	sub    esp,0xc
c0022044:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022048:	e8 77 ff ff ff       	call   c0021fc4 <SoundDevice::~SoundDevice()>
c002204d:	83 c4 10             	add    esp,0x10
c0022050:	83 ec 08             	sub    esp,0x8
c0022053:	68 e4 01 00 00       	push   0x1e4
c0022058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002205c:	e8 ea 05 ff ff       	call   c001264b <operator delete(void*, unsigned long)>
c0022061:	83 c4 10             	add    esp,0x10
c0022064:	83 c4 0c             	add    esp,0xc
c0022067:	c3                   	ret    

c0022068 <SoundDevice::getFreeChannelNum()>:
c0022068:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002206c:	31 c0                	xor    eax,eax
c002206e:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022076:	74 09                	je     c0022081 <SoundDevice::getFreeChannelNum()+0x19>
c0022078:	40                   	inc    eax
c0022079:	83 f8 20             	cmp    eax,0x20
c002207c:	75 f0                	jne    c002206e <SoundDevice::getFreeChannelNum()+0x6>
c002207e:	83 c8 ff             	or     eax,0xffffffff
c0022081:	c3                   	ret    

c0022082 <SoundDevice::addChannel(SoundChannel*)>:
c0022082:	56                   	push   esi
c0022083:	53                   	push   ebx
c0022084:	51                   	push   ecx
c0022085:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022089:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002208d:	53                   	push   ebx
c002208e:	e8 d5 ff ff ff       	call   c0022068 <SoundDevice::getFreeChannelNum()>
c0022093:	5a                   	pop    edx
c0022094:	83 f8 ff             	cmp    eax,0xffffffff
c0022097:	74 51                	je     c00220ea <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022099:	85 f6                	test   esi,esi
c002209b:	74 4d                	je     c00220ea <SoundDevice::addChannel(SoundChannel*)+0x68>
c002209d:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00220a4:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00220ab:	75 30                	jne    c00220dd <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00220ad:	83 ec 0c             	sub    esp,0xc
c00220b0:	56                   	push   esi
c00220b1:	e8 52 fc ff ff       	call   c0021d08 <SoundChannel::getSampleRate()>
c00220b6:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c00220bc:	89 34 24             	mov    DWORD PTR [esp],esi
c00220bf:	e8 4c fc ff ff       	call   c0021d10 <SoundChannel::getBits()>
c00220c4:	83 c4 0c             	add    esp,0xc
c00220c7:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00220cd:	8b 13                	mov    edx,DWORD PTR [ebx]
c00220cf:	50                   	push   eax
c00220d0:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00220d6:	53                   	push   ebx
c00220d7:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00220da:	83 c4 10             	add    esp,0x10
c00220dd:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00220e3:	b8 01 00 00 00       	mov    eax,0x1
c00220e8:	eb 03                	jmp    c00220ed <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00220ea:	83 c8 ff             	or     eax,0xffffffff
c00220ed:	5a                   	pop    edx
c00220ee:	5b                   	pop    ebx
c00220ef:	5e                   	pop    esi
c00220f0:	c3                   	ret    
c00220f1:	90                   	nop

c00220f2 <SoundDevice::removeChannel(int)>:
c00220f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00220f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220fa:	83 fa 1f             	cmp    edx,0x1f
c00220fd:	77 23                	ja     c0022122 <SoundDevice::removeChannel(int)+0x30>
c00220ff:	8d 14 90             	lea    edx,[eax+edx*4]
c0022102:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022109:	74 17                	je     c0022122 <SoundDevice::removeChannel(int)+0x30>
c002210b:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022115:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c002211b:	75 05                	jne    c0022122 <SoundDevice::removeChannel(int)+0x30>
c002211d:	8b 00                	mov    eax,DWORD PTR [eax]
c002211f:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c0022122:	c3                   	ret    
c0022123:	90                   	nop

c0022124 <SoundDevice::floatTo16(float*, short*, int)>:
c0022124:	57                   	push   edi
c0022125:	56                   	push   esi
c0022126:	53                   	push   ebx
c0022127:	31 db                	xor    ebx,ebx
c0022129:	83 ec 10             	sub    esp,0x10
c002212c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022130:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022134:	0f 8d d0 00 00 00    	jge    c002220a <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c002213a:	83 ec 0c             	sub    esp,0xc
c002213d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022141:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022144:	e8 16 62 00 00       	call   c002835f <__extendsfdf2>
c0022149:	83 c4 10             	add    esp,0x10
c002214c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022150:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022154:	68 00 00 f0 3f       	push   0x3ff00000
c0022159:	6a 00                	push   0x0
c002215b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002215f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022163:	e8 83 51 00 00       	call   c00272eb <__adddf3>
c0022168:	83 c4 10             	add    esp,0x10
c002216b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002216f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022173:	68 00 00 e0 3f       	push   0x3fe00000
c0022178:	6a 00                	push   0x0
c002217a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002217e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022182:	e8 e1 57 00 00       	call   c0027968 <__muldf3>
c0022187:	83 c4 10             	add    esp,0x10
c002218a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002218e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022192:	68 c0 ff df 40       	push   0x40dfffc0
c0022197:	6a 00                	push   0x0
c0022199:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002219d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221a1:	e8 c2 57 00 00       	call   c0027968 <__muldf3>
c00221a6:	59                   	pop    ecx
c00221a7:	5f                   	pop    edi
c00221a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00221ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00221b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221b8:	e8 7e 60 00 00       	call   c002823b <__truncdfsf2>
c00221bd:	5a                   	pop    edx
c00221be:	89 c7                	mov    edi,eax
c00221c0:	59                   	pop    ecx
c00221c1:	68 00 fe ff 46       	push   0x46fffe00
c00221c6:	50                   	push   eax
c00221c7:	e8 19 51 00 00       	call   c00272e5 <__gesf2>
c00221cc:	83 c4 10             	add    esp,0x10
c00221cf:	85 c0                	test   eax,eax
c00221d1:	78 08                	js     c00221db <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c00221d3:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c00221d9:	eb 29                	jmp    c0022204 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c00221db:	50                   	push   eax
c00221dc:	50                   	push   eax
c00221dd:	6a 00                	push   0x0
c00221df:	57                   	push   edi
c00221e0:	e8 04 51 00 00       	call   c00272e9 <__lesf2>
c00221e5:	83 c4 10             	add    esp,0x10
c00221e8:	85 c0                	test   eax,eax
c00221ea:	7f 08                	jg     c00221f4 <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c00221ec:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c00221f2:	eb 10                	jmp    c0022204 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c00221f4:	83 ec 0c             	sub    esp,0xc
c00221f7:	57                   	push   edi
c00221f8:	e8 ff 61 00 00       	call   c00283fc <lrintf>
c00221fd:	83 c4 10             	add    esp,0x10
c0022200:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0022204:	43                   	inc    ebx
c0022205:	e9 26 ff ff ff       	jmp    c0022130 <SoundDevice::floatTo16(float*, short*, int)+0xc>
c002220a:	83 c4 10             	add    esp,0x10
c002220d:	5b                   	pop    ebx
c002220e:	5e                   	pop    esi
c002220f:	5f                   	pop    edi
c0022210:	c3                   	ret    
c0022211:	90                   	nop

c0022212 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022212:	57                   	push   edi
c0022213:	56                   	push   esi
c0022214:	53                   	push   ebx
c0022215:	31 db                	xor    ebx,ebx
c0022217:	83 ec 10             	sub    esp,0x10
c002221a:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002221e:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022222:	0f 8d cb 00 00 00    	jge    c00222f3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022228:	83 ec 0c             	sub    esp,0xc
c002222b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002222f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022232:	e8 28 61 00 00       	call   c002835f <__extendsfdf2>
c0022237:	83 c4 10             	add    esp,0x10
c002223a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002223e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022242:	68 00 00 f0 3f       	push   0x3ff00000
c0022247:	6a 00                	push   0x0
c0022249:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002224d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022251:	e8 95 50 00 00       	call   c00272eb <__adddf3>
c0022256:	83 c4 10             	add    esp,0x10
c0022259:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002225d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022261:	68 00 00 e0 3f       	push   0x3fe00000
c0022266:	6a 00                	push   0x0
c0022268:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002226c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022270:	e8 f3 56 00 00       	call   c0027968 <__muldf3>
c0022275:	83 c4 10             	add    esp,0x10
c0022278:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002227c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022280:	68 00 00 60 40       	push   0x40600000
c0022285:	6a 00                	push   0x0
c0022287:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002228b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002228f:	e8 d4 56 00 00       	call   c0027968 <__muldf3>
c0022294:	59                   	pop    ecx
c0022295:	5f                   	pop    edi
c0022296:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002229a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002229e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222a6:	e8 90 5f 00 00       	call   c002823b <__truncdfsf2>
c00222ab:	5a                   	pop    edx
c00222ac:	89 c7                	mov    edi,eax
c00222ae:	59                   	pop    ecx
c00222af:	68 00 00 fe 42       	push   0x42fe0000
c00222b4:	50                   	push   eax
c00222b5:	e8 2b 50 00 00       	call   c00272e5 <__gesf2>
c00222ba:	83 c4 10             	add    esp,0x10
c00222bd:	85 c0                	test   eax,eax
c00222bf:	78 06                	js     c00222c7 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c00222c1:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c00222c5:	eb 26                	jmp    c00222ed <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00222c7:	50                   	push   eax
c00222c8:	50                   	push   eax
c00222c9:	6a 00                	push   0x0
c00222cb:	57                   	push   edi
c00222cc:	e8 18 50 00 00       	call   c00272e9 <__lesf2>
c00222d1:	83 c4 10             	add    esp,0x10
c00222d4:	85 c0                	test   eax,eax
c00222d6:	7f 06                	jg     c00222de <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00222d8:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00222dc:	eb 0f                	jmp    c00222ed <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00222de:	83 ec 0c             	sub    esp,0xc
c00222e1:	57                   	push   edi
c00222e2:	e8 15 61 00 00       	call   c00283fc <lrintf>
c00222e7:	83 c4 10             	add    esp,0x10
c00222ea:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00222ed:	43                   	inc    ebx
c00222ee:	e9 2b ff ff ff       	jmp    c002221e <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00222f3:	83 c4 10             	add    esp,0x10
c00222f6:	5b                   	pop    ebx
c00222f7:	5e                   	pop    esi
c00222f8:	5f                   	pop    edi
c00222f9:	c3                   	ret    

c00222fa <SoundDevice::getAudio(int, float*, float*)>:
c00222fa:	55                   	push   ebp
c00222fb:	31 ed                	xor    ebp,ebp
c00222fd:	57                   	push   edi
c00222fe:	56                   	push   esi
c00222ff:	31 f6                	xor    esi,esi
c0022301:	53                   	push   ebx
c0022302:	83 ec 20             	sub    esp,0x20
c0022305:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022309:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002230d:	c1 e0 02             	shl    eax,0x2
c0022310:	50                   	push   eax
c0022311:	6a 00                	push   0x0
c0022313:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022317:	e8 34 e4 fd ff       	call   c0000750 <memset>
c002231c:	83 c4 10             	add    esp,0x10
c002231f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022327:	8b 8c b3 5c 01 00 00 	mov    ecx,DWORD PTR [ebx+esi*4+0x15c]
c002232e:	85 c9                	test   ecx,ecx
c0022330:	74 52                	je     c0022384 <SoundDevice::getAudio(int, float*, float*)+0x8a>
c0022332:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022336:	99                   	cdq    
c0022337:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c002233d:	50                   	push   eax
c002233e:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022344:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0022348:	51                   	push   ecx
c0022349:	e8 da f9 ff ff       	call   c0021d28 <SoundChannel::unbuffer(float*, int, int)>
c002234e:	31 d2                	xor    edx,edx
c0022350:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022354:	83 c4 10             	add    esp,0x10
c0022357:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c002235b:	7d 1e                	jge    c002237b <SoundDevice::getAudio(int, float*, float*)+0x81>
c002235d:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0022361:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022365:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0022368:	89 cf                	mov    edi,ecx
c002236a:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c0022370:	0f af ca             	imul   ecx,edx
c0022373:	42                   	inc    edx
c0022374:	01 e9                	add    ecx,ebp
c0022376:	89 3c 88             	mov    DWORD PTR [eax+ecx*4],edi
c0022379:	eb dc                	jmp    c0022357 <SoundDevice::getAudio(int, float*, float*)+0x5d>
c002237b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c002237f:	45                   	inc    ebp
c0022380:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c0022384:	46                   	inc    esi
c0022385:	83 fe 20             	cmp    esi,0x20
c0022388:	75 9d                	jne    c0022327 <SoundDevice::getAudio(int, float*, float*)+0x2d>
c002238a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002238e:	83 c4 1c             	add    esp,0x1c
c0022391:	5b                   	pop    ebx
c0022392:	5e                   	pop    esi
c0022393:	5f                   	pop    edi
c0022394:	5d                   	pop    ebp
c0022395:	c3                   	ret    

c0022396 <PCI::open(int, int, void*)>:
c0022396:	83 ec 18             	sub    esp,0x18
c0022399:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002239d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00223a1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00223a7:	8b 10                	mov    edx,DWORD PTR [eax]
c00223a9:	50                   	push   eax
c00223aa:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00223ad:	31 c0                	xor    eax,eax
c00223af:	83 c4 1c             	add    esp,0x1c
c00223b2:	c3                   	ret    
c00223b3:	90                   	nop

c00223b4 <PCI::close(int, int, void*)>:
c00223b4:	31 c0                	xor    eax,eax
c00223b6:	c3                   	ret    
c00223b7:	90                   	nop

c00223b8 <PCI::PCI()>:
c00223b8:	83 ec 0c             	sub    esp,0xc
c00223bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223bf:	83 ec 08             	sub    esp,0x8
c00223c2:	68 38 c0 02 c0       	push   0xc002c038
c00223c7:	50                   	push   eax
c00223c8:	e8 f7 0f ff ff       	call   c00133c4 <Bus::Bus(char const*)>
c00223cd:	83 c4 10             	add    esp,0x10
c00223d0:	ba 24 c1 02 c0       	mov    edx,0xc002c124
c00223d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223d9:	89 10                	mov    DWORD PTR [eax],edx
c00223db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223df:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c00223e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223ed:	a3 44 1d 03 c0       	mov    ds:0xc0031d44,eax
c00223f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223f6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00223fc:	0f b6 d0             	movzx  edx,al
c00223ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022403:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002240a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002240e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022414:	0f b6 d0             	movzx  edx,al
c0022417:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002241b:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022424:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002242a:	8d 50 01             	lea    edx,[eax+0x1]
c002242d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022431:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022437:	0f b6 d0             	movzx  edx,al
c002243a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002243e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022442:	83 c9 c0             	or     ecx,0xffffffc0
c0022445:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022449:	90                   	nop
c002244a:	83 c4 0c             	add    esp,0xc
c002244d:	c3                   	ret    

c002244e <PCI::readBAR8(unsigned int, int)>:
c002244e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022452:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022456:	f6 c2 01             	test   dl,0x1
c0022459:	74 07                	je     c0022462 <PCI::readBAR8(unsigned int, int)+0x14>
c002245b:	83 e2 fc             	and    edx,0xfffffffc
c002245e:	01 c2                	add    edx,eax
c0022460:	ec                   	in     al,dx
c0022461:	c3                   	ret    
c0022462:	83 e2 f0             	and    edx,0xfffffff0
c0022465:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0022468:	c3                   	ret    
c0022469:	90                   	nop

c002246a <PCI::readBAR16(unsigned int, int)>:
c002246a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002246e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022472:	f6 c2 01             	test   dl,0x1
c0022475:	74 08                	je     c002247f <PCI::readBAR16(unsigned int, int)+0x15>
c0022477:	83 e2 fc             	and    edx,0xfffffffc
c002247a:	01 c2                	add    edx,eax
c002247c:	66 ed                	in     ax,dx
c002247e:	c3                   	ret    
c002247f:	83 e2 f0             	and    edx,0xfffffff0
c0022482:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0022486:	c3                   	ret    
c0022487:	90                   	nop

c0022488 <PCI::readBAR32(unsigned int, int)>:
c0022488:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002248c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022490:	f6 c2 01             	test   dl,0x1
c0022493:	74 07                	je     c002249c <PCI::readBAR32(unsigned int, int)+0x14>
c0022495:	83 e2 fc             	and    edx,0xfffffffc
c0022498:	01 c2                	add    edx,eax
c002249a:	ed                   	in     eax,dx
c002249b:	c3                   	ret    
c002249c:	83 e2 f0             	and    edx,0xfffffff0
c002249f:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c00224a2:	c3                   	ret    
c00224a3:	90                   	nop

c00224a4 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c00224a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00224a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00224ac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00224b0:	f6 c2 01             	test   dl,0x1
c00224b3:	74 07                	je     c00224bc <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c00224b5:	83 e2 fc             	and    edx,0xfffffffc
c00224b8:	01 ca                	add    edx,ecx
c00224ba:	ee                   	out    dx,al
c00224bb:	c3                   	ret    
c00224bc:	83 e2 f0             	and    edx,0xfffffff0
c00224bf:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c00224c2:	c3                   	ret    
c00224c3:	90                   	nop

c00224c4 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c00224c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00224c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00224cc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00224d0:	f6 c2 01             	test   dl,0x1
c00224d3:	74 08                	je     c00224dd <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c00224d5:	83 e2 fc             	and    edx,0xfffffffc
c00224d8:	01 ca                	add    edx,ecx
c00224da:	66 ef                	out    dx,ax
c00224dc:	c3                   	ret    
c00224dd:	83 e2 f0             	and    edx,0xfffffff0
c00224e0:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c00224e4:	c3                   	ret    
c00224e5:	90                   	nop

c00224e6 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c00224e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00224ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00224ee:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00224f2:	f6 c2 01             	test   dl,0x1
c00224f5:	74 07                	je     c00224fe <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00224f7:	83 e2 fc             	and    edx,0xfffffffc
c00224fa:	01 ca                	add    edx,ecx
c00224fc:	ef                   	out    dx,eax
c00224fd:	c3                   	ret    
c00224fe:	83 e2 f0             	and    edx,0xfffffff0
c0022501:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0022504:	c3                   	ret    
c0022505:	90                   	nop

c0022506 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022506:	55                   	push   ebp
c0022507:	57                   	push   edi
c0022508:	56                   	push   esi
c0022509:	53                   	push   ebx
c002250a:	83 ec 0c             	sub    esp,0xc
c002250d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022511:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0022515:	89 f0                	mov    eax,esi
c0022517:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002251b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002251f:	3c 07                	cmp    al,0x7
c0022521:	76 10                	jbe    c0022533 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0022523:	83 ec 0c             	sub    esp,0xc
c0022526:	68 40 c0 02 c0       	push   0xc002c040
c002252b:	e8 5f 79 ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c0022530:	83 c4 10             	add    esp,0x10
c0022533:	80 fb 0f             	cmp    bl,0xf
c0022536:	76 10                	jbe    c0022548 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0022538:	83 ec 0c             	sub    esp,0xc
c002253b:	68 70 c0 02 c0       	push   0xc002c070
c0022540:	e8 4a 79 ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c0022545:	83 c4 10             	add    esp,0x10
c0022548:	8d 04 36             	lea    eax,[esi+esi*1]
c002254b:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022550:	83 c8 f0             	or     eax,0xfffffff0
c0022553:	ee                   	out    dx,al
c0022554:	ba fa 0c 00 00       	mov    edx,0xcfa
c0022559:	89 e8                	mov    eax,ebp
c002255b:	ee                   	out    dx,al
c002255c:	83 c4 0c             	add    esp,0xc
c002255f:	89 d8                	mov    eax,ebx
c0022561:	66 81 e7 fc 00       	and    di,0xfc
c0022566:	5b                   	pop    ebx
c0022567:	c1 e0 08             	shl    eax,0x8
c002256a:	5e                   	pop    esi
c002256b:	09 f8                	or     eax,edi
c002256d:	5f                   	pop    edi
c002256e:	66 0d 00 c0          	or     ax,0xc000
c0022572:	5d                   	pop    ebp
c0022573:	c3                   	ret    

c0022574 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022574:	57                   	push   edi
c0022575:	56                   	push   esi
c0022576:	53                   	push   ebx
c0022577:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002257b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002257f:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0022585:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022589:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002258d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022591:	83 ff 01             	cmp    edi,0x1
c0022594:	75 3e                	jne    c00225d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0022596:	89 de                	mov    esi,ebx
c0022598:	0f b6 c0             	movzx  eax,al
c002259b:	81 e6 fc 00 00 00    	and    esi,0xfc
c00225a1:	c1 e0 10             	shl    eax,0x10
c00225a4:	0f b6 c9             	movzx  ecx,cl
c00225a7:	09 f0                	or     eax,esi
c00225a9:	c1 e1 08             	shl    ecx,0x8
c00225ac:	0f b6 d2             	movzx  edx,dl
c00225af:	09 c8                	or     eax,ecx
c00225b1:	c1 e2 0b             	shl    edx,0xb
c00225b4:	09 d0                	or     eax,edx
c00225b6:	ba f8 0c 00 00       	mov    edx,0xcf8
c00225bb:	0d 00 00 00 80       	or     eax,0x80000000
c00225c0:	ef                   	out    dx,eax
c00225c1:	ba fc 0c 00 00       	mov    edx,0xcfc
c00225c6:	ed                   	in     eax,dx
c00225c7:	83 e3 02             	and    ebx,0x2
c00225ca:	0f b6 cb             	movzx  ecx,bl
c00225cd:	c1 e1 03             	shl    ecx,0x3
c00225d0:	d3 e8                	shr    eax,cl
c00225d2:	eb 43                	jmp    c0022617 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00225d4:	83 ff 02             	cmp    edi,0x2
c00225d7:	75 2c                	jne    c0022605 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c00225d9:	83 ec 0c             	sub    esp,0xc
c00225dc:	0f b6 c9             	movzx  ecx,cl
c00225df:	0f b6 d2             	movzx  edx,dl
c00225e2:	0f b6 fb             	movzx  edi,bl
c00225e5:	0f b6 c0             	movzx  eax,al
c00225e8:	57                   	push   edi
c00225e9:	51                   	push   ecx
c00225ea:	52                   	push   edx
c00225eb:	50                   	push   eax
c00225ec:	56                   	push   esi
c00225ed:	e8 14 ff ff ff       	call   c0022506 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00225f2:	89 c2                	mov    edx,eax
c00225f4:	ed                   	in     eax,dx
c00225f5:	83 e3 02             	and    ebx,0x2
c00225f8:	83 c4 20             	add    esp,0x20
c00225fb:	0f b6 cb             	movzx  ecx,bl
c00225fe:	c1 e1 03             	shl    ecx,0x3
c0022601:	d3 e8                	shr    eax,cl
c0022603:	eb 12                	jmp    c0022617 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022605:	83 ec 0c             	sub    esp,0xc
c0022608:	68 a0 c0 02 c0       	push   0xc002c0a0
c002260d:	e8 7d 78 ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c0022612:	83 c4 10             	add    esp,0x10
c0022615:	31 c0                	xor    eax,eax
c0022617:	5b                   	pop    ebx
c0022618:	5e                   	pop    esi
c0022619:	5f                   	pop    edi
c002261a:	c3                   	ret    
c002261b:	90                   	nop

c002261c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002261c:	83 ec 18             	sub    esp,0x18
c002261f:	6a 00                	push   0x0
c0022621:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022626:	50                   	push   eax
c0022627:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002262c:	50                   	push   eax
c002262d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022632:	50                   	push   eax
c0022633:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022637:	e8 38 ff ff ff       	call   c0022574 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002263c:	83 c4 2c             	add    esp,0x2c
c002263f:	c3                   	ret    

c0022640 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022640:	83 ec 18             	sub    esp,0x18
c0022643:	6a 0e                	push   0xe
c0022645:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002264a:	50                   	push   eax
c002264b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022650:	50                   	push   eax
c0022651:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022656:	50                   	push   eax
c0022657:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002265b:	e8 14 ff ff ff       	call   c0022574 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022660:	83 c4 2c             	add    esp,0x2c
c0022663:	0f b6 c0             	movzx  eax,al
c0022666:	c3                   	ret    
c0022667:	90                   	nop

c0022668 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022668:	55                   	push   ebp
c0022669:	57                   	push   edi
c002266a:	56                   	push   esi
c002266b:	53                   	push   ebx
c002266c:	83 ec 18             	sub    esp,0x18
c002266f:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0022674:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0022679:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c002267e:	6a 0a                	push   0xa
c0022680:	56                   	push   esi
c0022681:	55                   	push   ebp
c0022682:	57                   	push   edi
c0022683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022687:	e8 e8 fe ff ff       	call   c0022574 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002268c:	83 c4 14             	add    esp,0x14
c002268f:	89 c3                	mov    ebx,eax
c0022691:	6a 0a                	push   0xa
c0022693:	0f b6 db             	movzx  ebx,bl
c0022696:	56                   	push   esi
c0022697:	55                   	push   ebp
c0022698:	57                   	push   edi
c0022699:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002269d:	e8 d2 fe ff ff       	call   c0022574 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226a2:	83 c4 2c             	add    esp,0x2c
c00226a5:	25 00 ff 00 00       	and    eax,0xff00
c00226aa:	09 d8                	or     eax,ebx
c00226ac:	5b                   	pop    ebx
c00226ad:	5e                   	pop    esi
c00226ae:	5f                   	pop    edi
c00226af:	5d                   	pop    ebp
c00226b0:	c3                   	ret    
c00226b1:	90                   	nop

c00226b2 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00226b2:	83 ec 18             	sub    esp,0x18
c00226b5:	6a 08                	push   0x8
c00226b7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226bc:	50                   	push   eax
c00226bd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226c2:	50                   	push   eax
c00226c3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226c8:	50                   	push   eax
c00226c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00226cd:	e8 a2 fe ff ff       	call   c0022574 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226d2:	83 c4 2c             	add    esp,0x2c
c00226d5:	0f b6 c4             	movzx  eax,ah
c00226d8:	c3                   	ret    
c00226d9:	90                   	nop

c00226da <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00226da:	83 ec 18             	sub    esp,0x18
c00226dd:	6a 08                	push   0x8
c00226df:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226e4:	50                   	push   eax
c00226e5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226ea:	50                   	push   eax
c00226eb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226f0:	50                   	push   eax
c00226f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00226f5:	e8 7a fe ff ff       	call   c0022574 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226fa:	83 c4 2c             	add    esp,0x2c
c00226fd:	c3                   	ret    

c00226fe <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00226fe:	83 ec 18             	sub    esp,0x18
c0022701:	6a 3c                	push   0x3c
c0022703:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022708:	50                   	push   eax
c0022709:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002270e:	50                   	push   eax
c002270f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022714:	50                   	push   eax
c0022715:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022719:	e8 56 fe ff ff       	call   c0022574 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002271e:	83 c4 2c             	add    esp,0x2c
c0022721:	c3                   	ret    

c0022722 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022722:	83 ec 18             	sub    esp,0x18
c0022725:	6a 18                	push   0x18
c0022727:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002272c:	50                   	push   eax
c002272d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022732:	50                   	push   eax
c0022733:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022738:	50                   	push   eax
c0022739:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002273d:	e8 32 fe ff ff       	call   c0022574 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022742:	83 c4 2c             	add    esp,0x2c
c0022745:	0f b6 c4             	movzx  eax,ah
c0022748:	c3                   	ret    
c0022749:	90                   	nop

c002274a <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002274a:	55                   	push   ebp
c002274b:	57                   	push   edi
c002274c:	56                   	push   esi
c002274d:	53                   	push   ebx
c002274e:	83 ec 28             	sub    esp,0x28
c0022751:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0022755:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c002275a:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c002275f:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0022764:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002276b:	8d 43 12             	lea    eax,[ebx+0x12]
c002276e:	83 c3 10             	add    ebx,0x10
c0022771:	0f b6 c0             	movzx  eax,al
c0022774:	0f b6 db             	movzx  ebx,bl
c0022777:	50                   	push   eax
c0022778:	51                   	push   ecx
c0022779:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c002277d:	57                   	push   edi
c002277e:	55                   	push   ebp
c002277f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022783:	e8 ec fd ff ff       	call   c0022574 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022788:	83 c4 14             	add    esp,0x14
c002278b:	89 c6                	mov    esi,eax
c002278d:	53                   	push   ebx
c002278e:	c1 e6 10             	shl    esi,0x10
c0022791:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022795:	51                   	push   ecx
c0022796:	57                   	push   edi
c0022797:	55                   	push   ebp
c0022798:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002279c:	e8 d3 fd ff ff       	call   c0022574 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00227a1:	83 c4 3c             	add    esp,0x3c
c00227a4:	0f b7 c0             	movzx  eax,ax
c00227a7:	5b                   	pop    ebx
c00227a8:	09 f0                	or     eax,esi
c00227aa:	5e                   	pop    esi
c00227ab:	5f                   	pop    edi
c00227ac:	5d                   	pop    ebp
c00227ad:	c3                   	ret    

c00227ae <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00227ae:	55                   	push   ebp
c00227af:	57                   	push   edi
c00227b0:	56                   	push   esi
c00227b1:	53                   	push   ebx
c00227b2:	83 ec 0c             	sub    esp,0xc
c00227b5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00227b9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00227bd:	89 f5                	mov    ebp,esi
c00227bf:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c00227c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00227c9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00227cd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00227d1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00227d5:	83 f9 01             	cmp    ecx,0x1
c00227d8:	75 5d                	jne    c0022837 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c00227da:	0f b6 c8             	movzx  ecx,al
c00227dd:	0f b6 d2             	movzx  edx,dl
c00227e0:	c1 e1 10             	shl    ecx,0x10
c00227e3:	c1 e2 0b             	shl    edx,0xb
c00227e6:	89 f0                	mov    eax,esi
c00227e8:	25 fc 00 00 00       	and    eax,0xfc
c00227ed:	09 c1                	or     ecx,eax
c00227ef:	89 e8                	mov    eax,ebp
c00227f1:	0f b6 c0             	movzx  eax,al
c00227f4:	c1 e0 08             	shl    eax,0x8
c00227f7:	09 c1                	or     ecx,eax
c00227f9:	09 d1                	or     ecx,edx
c00227fb:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022800:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022806:	89 c8                	mov    eax,ecx
c0022808:	ef                   	out    dx,eax
c0022809:	ba fc 0c 00 00       	mov    edx,0xcfc
c002280e:	ed                   	in     eax,dx
c002280f:	0f b7 db             	movzx  ebx,bx
c0022812:	83 e6 02             	and    esi,0x2
c0022815:	74 0a                	je     c0022821 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0022817:	0f b7 d0             	movzx  edx,ax
c002281a:	c1 e3 10             	shl    ebx,0x10
c002281d:	09 d3                	or     ebx,edx
c002281f:	eb 05                	jmp    c0022826 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0022821:	66 31 c0             	xor    ax,ax
c0022824:	09 c3                	or     ebx,eax
c0022826:	ba f8 0c 00 00       	mov    edx,0xcf8
c002282b:	89 c8                	mov    eax,ecx
c002282d:	ef                   	out    dx,eax
c002282e:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022833:	89 d8                	mov    eax,ebx
c0022835:	eb 41                	jmp    c0022878 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022837:	83 f9 02             	cmp    ecx,0x2
c002283a:	75 45                	jne    c0022881 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c002283c:	83 ec 0c             	sub    esp,0xc
c002283f:	0f b6 d2             	movzx  edx,dl
c0022842:	89 f1                	mov    ecx,esi
c0022844:	0f b6 c0             	movzx  eax,al
c0022847:	0f b6 f1             	movzx  esi,cl
c002284a:	89 e9                	mov    ecx,ebp
c002284c:	56                   	push   esi
c002284d:	0f b6 c9             	movzx  ecx,cl
c0022850:	51                   	push   ecx
c0022851:	52                   	push   edx
c0022852:	50                   	push   eax
c0022853:	57                   	push   edi
c0022854:	e8 ad fc ff ff       	call   c0022506 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022859:	89 c2                	mov    edx,eax
c002285b:	ed                   	in     eax,dx
c002285c:	83 c4 20             	add    esp,0x20
c002285f:	0f b7 db             	movzx  ebx,bx
c0022862:	f6 c2 02             	test   dl,0x2
c0022865:	74 0c                	je     c0022873 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0022867:	0f b7 c8             	movzx  ecx,ax
c002286a:	89 d8                	mov    eax,ebx
c002286c:	c1 e0 10             	shl    eax,0x10
c002286f:	09 c8                	or     eax,ecx
c0022871:	eb 05                	jmp    c0022878 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022873:	66 31 c0             	xor    ax,ax
c0022876:	09 d8                	or     eax,ebx
c0022878:	ef                   	out    dx,eax
c0022879:	83 c4 0c             	add    esp,0xc
c002287c:	5b                   	pop    ebx
c002287d:	5e                   	pop    esi
c002287e:	5f                   	pop    edi
c002287f:	5d                   	pop    ebp
c0022880:	c3                   	ret    
c0022881:	c7 44 24 20 a0 c0 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c0a0
c0022889:	83 c4 0c             	add    esp,0xc
c002288c:	5b                   	pop    ebx
c002288d:	5e                   	pop    esi
c002288e:	5f                   	pop    edi
c002288f:	5d                   	pop    ebp
c0022890:	e9 fa 75 ff ff       	jmp    c0019e8f <Krnl::panic(char const*)>
c0022895:	90                   	nop

c0022896 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0022896:	55                   	push   ebp
c0022897:	57                   	push   edi
c0022898:	56                   	push   esi
c0022899:	53                   	push   ebx
c002289a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00228a0:	80 3d 50 1d 03 c0 00 	cmp    BYTE PTR ds:0xc0031d50,0x0
c00228a7:	0f 85 84 00 00 00    	jne    c0022931 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c00228ad:	83 ec 0c             	sub    esp,0xc
c00228b0:	68 14 01 00 00       	push   0x114
c00228b5:	e8 df cc fe ff       	call   c000f599 <malloc>
c00228ba:	83 c4 0c             	add    esp,0xc
c00228bd:	89 c3                	mov    ebx,eax
c00228bf:	ff 35 50 0f 03 c0    	push   DWORD PTR ds:0xc0030f50
c00228c5:	68 a6 c0 02 c0       	push   0xc002c0a6
c00228ca:	50                   	push   eax
c00228cb:	e8 b2 03 ff ff       	call   c0012c82 <File::File(char const*, Process*)>
c00228d0:	5a                   	pop    edx
c00228d1:	59                   	pop    ecx
c00228d2:	6a 01                	push   0x1
c00228d4:	53                   	push   ebx
c00228d5:	e8 0c 04 ff ff       	call   c0012ce6 <File::open(FileOpenMode)>
c00228da:	83 c4 0c             	add    esp,0xc
c00228dd:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c00228e1:	50                   	push   eax
c00228e2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00228e6:	50                   	push   eax
c00228e7:	53                   	push   ebx
c00228e8:	e8 a5 06 ff ff       	call   c0012f92 <File::stat(unsigned long long*, bool*)>
c00228ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00228f1:	40                   	inc    eax
c00228f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00228f5:	e8 9f cc fe ff       	call   c000f599 <malloc>
c00228fa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00228fe:	a3 4c 1d 03 c0       	mov    ds:0xc0031d4c,eax
c0022903:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0022907:	5e                   	pop    esi
c0022908:	8b 13                	mov    edx,DWORD PTR [ebx]
c002290a:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c002290e:	51                   	push   ecx
c002290f:	50                   	push   eax
c0022910:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022914:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022918:	53                   	push   ebx
c0022919:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002291c:	83 c4 14             	add    esp,0x14
c002291f:	53                   	push   ebx
c0022920:	e8 1f 04 ff ff       	call   c0012d44 <File::close()>
c0022925:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022929:	83 c4 10             	add    esp,0x10
c002292c:	a3 48 1d 03 c0       	mov    ds:0xc0031d48,eax
c0022931:	a1 48 1d 03 c0       	mov    eax,ds:0xc0031d48
c0022936:	8b 15 4c 1d 03 c0    	mov    edx,DWORD PTR ds:0xc0031d4c
c002293c:	89 04 24             	mov    DWORD PTR [esp],eax
c002293f:	31 ff                	xor    edi,edi
c0022941:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0022949:	31 f6                	xor    esi,esi
c002294b:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0022950:	31 db                	xor    ebx,ebx
c0022952:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c002295a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c002295f:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0022966:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c002296a:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0022971:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0022975:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022978:	0f 8e 6b 01 00 00    	jle    c0022ae9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c002297e:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022981:	d4 40                	aam    0x40
c0022983:	d5 39                	aad    0x39
c0022985:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0022989:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c002298d:	d4 40                	aam    0x40
c002298f:	d5 39                	aad    0x39
c0022991:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0022995:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0022999:	d4 40                	aam    0x40
c002299b:	d5 39                	aad    0x39
c002299d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00229a1:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c00229a5:	d4 40                	aam    0x40
c00229a7:	d5 39                	aad    0x39
c00229a9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00229ad:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c00229b1:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00229b5:	3c 56                	cmp    al,0x56
c00229b7:	74 45                	je     c00229fe <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c00229b9:	d4 40                	aam    0x40
c00229bb:	d5 39                	aad    0x39
c00229bd:	8d 48 d0             	lea    ecx,[eax-0x30]
c00229c0:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c00229c4:	0f b6 c9             	movzx  ecx,cl
c00229c7:	c1 e1 04             	shl    ecx,0x4
c00229ca:	d4 40                	aam    0x40
c00229cc:	d5 39                	aad    0x39
c00229ce:	8d 58 d0             	lea    ebx,[eax-0x30]
c00229d1:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c00229d5:	0f b6 db             	movzx  ebx,bl
c00229d8:	09 cb                	or     ebx,ecx
c00229da:	c1 e3 04             	shl    ebx,0x4
c00229dd:	d4 40                	aam    0x40
c00229df:	d5 39                	aad    0x39
c00229e1:	8d 48 d0             	lea    ecx,[eax-0x30]
c00229e4:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c00229e8:	0f b6 c9             	movzx  ecx,cl
c00229eb:	09 cb                	or     ebx,ecx
c00229ed:	c1 e3 04             	shl    ebx,0x4
c00229f0:	89 d9                	mov    ecx,ebx
c00229f2:	d4 40                	aam    0x40
c00229f4:	d5 39                	aad    0x39
c00229f6:	8d 58 d0             	lea    ebx,[eax-0x30]
c00229f9:	0f b6 db             	movzx  ebx,bl
c00229fc:	09 cb                	or     ebx,ecx
c00229fe:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0022a02:	80 f9 44             	cmp    cl,0x44
c0022a05:	74 47                	je     c0022a4e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0022a07:	88 c8                	mov    al,cl
c0022a09:	d4 40                	aam    0x40
c0022a0b:	d5 39                	aad    0x39
c0022a0d:	83 e8 30             	sub    eax,0x30
c0022a10:	0f b6 e8             	movzx  ebp,al
c0022a13:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0022a17:	c1 e5 04             	shl    ebp,0x4
c0022a1a:	d4 40                	aam    0x40
c0022a1c:	d5 39                	aad    0x39
c0022a1e:	83 e8 30             	sub    eax,0x30
c0022a21:	0f b6 f0             	movzx  esi,al
c0022a24:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0022a28:	09 ee                	or     esi,ebp
c0022a2a:	c1 e6 04             	shl    esi,0x4
c0022a2d:	d4 40                	aam    0x40
c0022a2f:	d5 39                	aad    0x39
c0022a31:	83 e8 30             	sub    eax,0x30
c0022a34:	0f b6 e8             	movzx  ebp,al
c0022a37:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0022a3b:	09 ee                	or     esi,ebp
c0022a3d:	c1 e6 04             	shl    esi,0x4
c0022a40:	89 f5                	mov    ebp,esi
c0022a42:	d4 40                	aam    0x40
c0022a44:	d5 39                	aad    0x39
c0022a46:	83 e8 30             	sub    eax,0x30
c0022a49:	0f b6 f0             	movzx  esi,al
c0022a4c:	09 ee                	or     esi,ebp
c0022a4e:	83 c7 10             	add    edi,0x10
c0022a51:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0022a55:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022a58:	3c 0a                	cmp    al,0xa
c0022a5a:	74 09                	je     c0022a65 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0022a5c:	45                   	inc    ebp
c0022a5d:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022a60:	75 16                	jne    c0022a78 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0022a62:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022a65:	3c 0a                	cmp    al,0xa
c0022a67:	0f 94 c0             	sete   al
c0022a6a:	0f b6 c0             	movzx  eax,al
c0022a6d:	01 c7                	add    edi,eax
c0022a6f:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0022a74:	75 0c                	jne    c0022a82 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0022a76:	eb 15                	jmp    c0022a8d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0022a78:	47                   	inc    edi
c0022a79:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0022a7c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0022a80:	eb d3                	jmp    c0022a55 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0022a82:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0022a87:	0f 85 e8 fe ff ff    	jne    c0022975 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a8d:	80 f9 44             	cmp    cl,0x44
c0022a90:	74 0b                	je     c0022a9d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0022a92:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0022a97:	0f 85 d8 fe ff ff    	jne    c0022975 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a9d:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0022aa1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0022aa5:	c1 e1 04             	shl    ecx,0x4
c0022aa8:	83 e8 30             	sub    eax,0x30
c0022aab:	09 c8                	or     eax,ecx
c0022aad:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0022ab1:	0f 85 be fe ff ff    	jne    c0022975 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022ab7:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0022abb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022abf:	c1 e1 04             	shl    ecx,0x4
c0022ac2:	83 e8 30             	sub    eax,0x30
c0022ac5:	09 c8                	or     eax,ecx
c0022ac7:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0022acb:	0f 85 a4 fe ff ff    	jne    c0022975 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022ad1:	50                   	push   eax
c0022ad2:	50                   	push   eax
c0022ad3:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022ad7:	50                   	push   eax
c0022ad8:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0022adf:	e8 28 dd fd ff       	call   c000080c <strcpy>
c0022ae4:	83 c4 10             	add    esp,0x10
c0022ae7:	eb 15                	jmp    c0022afe <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0022ae9:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022af0:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0022afb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022afe:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022b05:	81 c4 2c 01 00 00    	add    esp,0x12c
c0022b0b:	5b                   	pop    ebx
c0022b0c:	5e                   	pop    esi
c0022b0d:	5f                   	pop    edi
c0022b0e:	5d                   	pop    ebp
c0022b0f:	c3                   	ret    

c0022b10 <PCI::checkBus(unsigned char)>:
c0022b10:	56                   	push   esi
c0022b11:	53                   	push   ebx
c0022b12:	31 db                	xor    ebx,ebx
c0022b14:	51                   	push   ecx
c0022b15:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022b1a:	52                   	push   edx
c0022b1b:	53                   	push   ebx
c0022b1c:	43                   	inc    ebx
c0022b1d:	56                   	push   esi
c0022b1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b22:	e8 37 03 00 00       	call   c0022e5e <PCI::checkDevice(unsigned char, unsigned char)>
c0022b27:	83 c4 10             	add    esp,0x10
c0022b2a:	83 fb 20             	cmp    ebx,0x20
c0022b2d:	75 eb                	jne    c0022b1a <PCI::checkBus(unsigned char)+0xa>
c0022b2f:	58                   	pop    eax
c0022b30:	5b                   	pop    ebx
c0022b31:	5e                   	pop    esi
c0022b32:	c3                   	ret    
c0022b33:	90                   	nop

c0022b34 <PCI::foundDevice(PCIDeviceInfo)>:
c0022b34:	55                   	push   ebp
c0022b35:	57                   	push   edi
c0022b36:	56                   	push   esi
c0022b37:	53                   	push   ebx
c0022b38:	83 ec 1c             	sub    esp,0x1c
c0022b3b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022b3f:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022b45:	0f 84 52 01 00 00    	je     c0022c9d <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022b4b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022b4f:	66 81 f9 06 04       	cmp    cx,0x406
c0022b54:	75 2c                	jne    c0022b82 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022b56:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022b5b:	50                   	push   eax
c0022b5c:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022b61:	50                   	push   eax
c0022b62:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022b67:	50                   	push   eax
c0022b68:	56                   	push   esi
c0022b69:	e8 b4 fb ff ff       	call   c0022722 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022b6e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022b72:	0f b6 c0             	movzx  eax,al
c0022b75:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022b79:	83 c4 2c             	add    esp,0x2c
c0022b7c:	5b                   	pop    ebx
c0022b7d:	5e                   	pop    esi
c0022b7e:	5f                   	pop    edi
c0022b7f:	5d                   	pop    ebp
c0022b80:	eb 8e                	jmp    c0022b10 <PCI::checkBus(unsigned char)>
c0022b82:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022b86:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022b8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022b90:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022b94:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022b98:	88 d3                	mov    bl,dl
c0022b9a:	85 c0                	test   eax,eax
c0022b9c:	74 33                	je     c0022bd1 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022b9e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022ba1:	85 d2                	test   edx,edx
c0022ba3:	74 28                	je     c0022bcd <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022ba5:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022bab:	31 ef                	xor    edi,ebp
c0022bad:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022bb3:	75 18                	jne    c0022bcd <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022bb5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022bb9:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022bbf:	75 0c                	jne    c0022bcd <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022bc1:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022bc7:	0f 84 d0 00 00 00    	je     c0022c9d <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022bcd:	8b 00                	mov    eax,DWORD PTR [eax]
c0022bcf:	eb c9                	jmp    c0022b9a <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022bd1:	66 81 f9 01 06       	cmp    cx,0x601
c0022bd6:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022bda:	75 19                	jne    c0022bf5 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022bdc:	83 ec 0c             	sub    esp,0xc
c0022bdf:	68 64 01 00 00       	push   0x164
c0022be4:	e8 b0 c9 fe ff       	call   c000f599 <malloc>
c0022be9:	89 c5                	mov    ebp,eax
c0022beb:	89 04 24             	mov    DWORD PTR [esp],eax
c0022bee:	e8 85 0e 00 00       	call   c0023a78 <SATABus::SATABus()>
c0022bf3:	eb 1e                	jmp    c0022c13 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022bf5:	66 81 f9 01 01       	cmp    cx,0x101
c0022bfa:	75 60                	jne    c0022c5c <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022bfc:	83 ec 0c             	sub    esp,0xc
c0022bff:	68 70 02 00 00       	push   0x270
c0022c04:	e8 90 c9 fe ff       	call   c000f599 <malloc>
c0022c09:	89 c5                	mov    ebp,eax
c0022c0b:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c0e:	e8 0f 03 00 00       	call   c0022f22 <IDE::IDE()>
c0022c13:	58                   	pop    eax
c0022c14:	5a                   	pop    edx
c0022c15:	55                   	push   ebp
c0022c16:	56                   	push   esi
c0022c17:	e8 40 0f ff ff       	call   c0013b5c <Device::addChild(Device*)>
c0022c1c:	83 ec 1c             	sub    esp,0x1c
c0022c1f:	b9 09 00 00 00       	mov    ecx,0x9
c0022c24:	fc                   	cld    
c0022c25:	89 e7                	mov    edi,esp
c0022c27:	89 de                	mov    esi,ebx
c0022c29:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022c2b:	55                   	push   ebp
c0022c2c:	e8 3d 0e ff ff       	call   c0013a6e <Device::preOpenPCI(PCIDeviceInfo)>
c0022c31:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022c34:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022c38:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022c40:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022c48:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022c50:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022c53:	83 c4 4c             	add    esp,0x4c
c0022c56:	5b                   	pop    ebx
c0022c57:	5e                   	pop    esi
c0022c58:	5f                   	pop    edi
c0022c59:	5d                   	pop    ebp
c0022c5a:	ff e0                	jmp    eax
c0022c5c:	83 ec 0c             	sub    esp,0xc
c0022c5f:	68 58 01 00 00       	push   0x158
c0022c64:	e8 30 c9 fe ff       	call   c000f599 <malloc>
c0022c69:	89 c5                	mov    ebp,eax
c0022c6b:	58                   	pop    eax
c0022c6c:	5a                   	pop    edx
c0022c6d:	68 bf c0 02 c0       	push   0xc002c0bf
c0022c72:	55                   	push   ebp
c0022c73:	e8 ee 11 ff ff       	call   c0013e66 <DriverlessDevice::DriverlessDevice(char const*)>
c0022c78:	59                   	pop    ecx
c0022c79:	5f                   	pop    edi
c0022c7a:	55                   	push   ebp
c0022c7b:	56                   	push   esi
c0022c7c:	e8 db 0e ff ff       	call   c0013b5c <Device::addChild(Device*)>
c0022c81:	b9 09 00 00 00       	mov    ecx,0x9
c0022c86:	fc                   	cld    
c0022c87:	89 df                	mov    edi,ebx
c0022c89:	89 de                	mov    esi,ebx
c0022c8b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022c8d:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022c91:	83 c4 2c             	add    esp,0x2c
c0022c94:	5b                   	pop    ebx
c0022c95:	5e                   	pop    esi
c0022c96:	5f                   	pop    edi
c0022c97:	5d                   	pop    ebp
c0022c98:	e9 d1 0d ff ff       	jmp    c0013a6e <Device::preOpenPCI(PCIDeviceInfo)>
c0022c9d:	83 c4 1c             	add    esp,0x1c
c0022ca0:	5b                   	pop    ebx
c0022ca1:	5e                   	pop    esi
c0022ca2:	5f                   	pop    edi
c0022ca3:	5d                   	pop    ebp
c0022ca4:	c3                   	ret    
c0022ca5:	90                   	nop

c0022ca6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022ca6:	55                   	push   ebp
c0022ca7:	57                   	push   edi
c0022ca8:	56                   	push   esi
c0022ca9:	53                   	push   ebx
c0022caa:	83 ec 68             	sub    esp,0x68
c0022cad:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0022cb1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0022cb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022cbc:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0022cc3:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c0022cc8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022ccc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0022cd3:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0022cd8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022cdc:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c0022ce1:	6a 0c                	push   0xc
c0022ce3:	57                   	push   edi
c0022ce4:	53                   	push   ebx
c0022ce5:	56                   	push   esi
c0022ce6:	55                   	push   ebp
c0022ce7:	e8 88 f8 ff ff       	call   c0022574 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022cec:	83 c4 20             	add    esp,0x20
c0022cef:	57                   	push   edi
c0022cf0:	53                   	push   ebx
c0022cf1:	56                   	push   esi
c0022cf2:	55                   	push   ebp
c0022cf3:	e8 70 f9 ff ff       	call   c0022668 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022cf8:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0022cfd:	57                   	push   edi
c0022cfe:	53                   	push   ebx
c0022cff:	56                   	push   esi
c0022d00:	55                   	push   ebp
c0022d01:	e8 f8 f9 ff ff       	call   c00226fe <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022d06:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0022d0a:	83 c4 14             	add    esp,0x14
c0022d0d:	6a 3c                	push   0x3c
c0022d0f:	57                   	push   edi
c0022d10:	53                   	push   ebx
c0022d11:	56                   	push   esi
c0022d12:	55                   	push   ebp
c0022d13:	e8 5c f8 ff ff       	call   c0022574 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d18:	0f b6 c4             	movzx  eax,ah
c0022d1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0022d1f:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0022d23:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0022d27:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0022d2c:	83 c4 20             	add    esp,0x20
c0022d2f:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022d35:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022d3c:	74 7c                	je     c0022dba <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022d3e:	31 c0                	xor    eax,eax
c0022d40:	8b 15 08 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da08
c0022d46:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022d4c:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c0022d52:	7e 66                	jle    c0022dba <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022d54:	8d 14 c2             	lea    edx,[edx+eax*8]
c0022d57:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022d5e:	39 cb                	cmp    ebx,ecx
c0022d60:	75 55                	jne    c0022db7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022d62:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022d69:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022d6d:	75 48                	jne    c0022db7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022d6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022d73:	83 ec 0c             	sub    esp,0xc
c0022d76:	68 d9 c0 02 c0       	push   0xc002c0d9
c0022d7b:	e8 a3 f9 fe ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0022d80:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022d84:	8b 15 08 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da08
c0022d8a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0022d8e:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022d94:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c0022d9c:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0022da0:	52                   	push   edx
c0022da1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022da5:	53                   	push   ebx
c0022da6:	68 fe c0 02 c0       	push   0xc002c0fe
c0022dab:	e8 73 f9 fe ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0022db0:	83 c4 20             	add    esp,0x20
c0022db3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022db7:	40                   	inc    eax
c0022db8:	eb 86                	jmp    c0022d40 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c0022dba:	31 d2                	xor    edx,edx
c0022dbc:	83 ec 0c             	sub    esp,0xc
c0022dbf:	57                   	push   edi
c0022dc0:	53                   	push   ebx
c0022dc1:	56                   	push   esi
c0022dc2:	52                   	push   edx
c0022dc3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0022dc7:	55                   	push   ebp
c0022dc8:	e8 7d f9 ff ff       	call   c002274a <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022dcd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022dd1:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022dd5:	42                   	inc    edx
c0022dd6:	83 c4 20             	add    esp,0x20
c0022dd9:	83 fa 06             	cmp    edx,0x6
c0022ddc:	75 de                	jne    c0022dbc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c0022dde:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0022de3:	83 ec 0c             	sub    esp,0xc
c0022de6:	86 e0                	xchg   al,ah
c0022de8:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0022ded:	6a 02                	push   0x2
c0022def:	57                   	push   edi
c0022df0:	53                   	push   ebx
c0022df1:	56                   	push   esi
c0022df2:	55                   	push   ebp
c0022df3:	e8 7c f7 ff ff       	call   c0022574 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022df8:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0022dfd:	83 c4 20             	add    esp,0x20
c0022e00:	57                   	push   edi
c0022e01:	53                   	push   ebx
c0022e02:	56                   	push   esi
c0022e03:	55                   	push   ebp
c0022e04:	e8 a9 f8 ff ff       	call   c00226b2 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022e09:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022e0d:	57                   	push   edi
c0022e0e:	53                   	push   ebx
c0022e0f:	56                   	push   esi
c0022e10:	55                   	push   ebp
c0022e11:	e8 06 f8 ff ff       	call   c002261c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e16:	b9 09 00 00 00       	mov    ecx,0x9
c0022e1b:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0022e20:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0022e24:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0022e28:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0022e2c:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0022e30:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022e34:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0022e38:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0022e3c:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0022e40:	83 ec 0c             	sub    esp,0xc
c0022e43:	fc                   	cld    
c0022e44:	89 e7                	mov    edi,esp
c0022e46:	8d 74 24 58          	lea    esi,[esp+0x58]
c0022e4a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022e4c:	55                   	push   ebp
c0022e4d:	e8 e2 fc ff ff       	call   c0022b34 <PCI::foundDevice(PCIDeviceInfo)>
c0022e52:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022e58:	5b                   	pop    ebx
c0022e59:	5e                   	pop    esi
c0022e5a:	5f                   	pop    edi
c0022e5b:	5d                   	pop    ebp
c0022e5c:	c3                   	ret    
c0022e5d:	90                   	nop

c0022e5e <PCI::checkDevice(unsigned char, unsigned char)>:
c0022e5e:	55                   	push   ebp
c0022e5f:	57                   	push   edi
c0022e60:	56                   	push   esi
c0022e61:	53                   	push   ebx
c0022e62:	83 ec 0c             	sub    esp,0xc
c0022e65:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022e69:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022e6e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022e73:	6a 00                	push   0x0
c0022e75:	56                   	push   esi
c0022e76:	57                   	push   edi
c0022e77:	55                   	push   ebp
c0022e78:	e8 9f f7 ff ff       	call   c002261c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e7d:	6a 00                	push   0x0
c0022e7f:	56                   	push   esi
c0022e80:	57                   	push   edi
c0022e81:	55                   	push   ebp
c0022e82:	e8 1f fe ff ff       	call   c0022ca6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022e87:	83 c4 20             	add    esp,0x20
c0022e8a:	6a 00                	push   0x0
c0022e8c:	56                   	push   esi
c0022e8d:	57                   	push   edi
c0022e8e:	55                   	push   ebp
c0022e8f:	e8 ac f7 ff ff       	call   c0022640 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022e94:	83 c4 10             	add    esp,0x10
c0022e97:	84 c0                	test   al,al
c0022e99:	79 27                	jns    c0022ec2 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022e9b:	bb 01 00 00 00       	mov    ebx,0x1
c0022ea0:	53                   	push   ebx
c0022ea1:	56                   	push   esi
c0022ea2:	57                   	push   edi
c0022ea3:	55                   	push   ebp
c0022ea4:	e8 73 f7 ff ff       	call   c002261c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022ea9:	83 c4 10             	add    esp,0x10
c0022eac:	66 40                	inc    ax
c0022eae:	74 0c                	je     c0022ebc <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022eb0:	53                   	push   ebx
c0022eb1:	56                   	push   esi
c0022eb2:	57                   	push   edi
c0022eb3:	55                   	push   ebp
c0022eb4:	e8 ed fd ff ff       	call   c0022ca6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022eb9:	83 c4 10             	add    esp,0x10
c0022ebc:	43                   	inc    ebx
c0022ebd:	83 fb 08             	cmp    ebx,0x8
c0022ec0:	75 de                	jne    c0022ea0 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022ec2:	83 c4 0c             	add    esp,0xc
c0022ec5:	5b                   	pop    ebx
c0022ec6:	5e                   	pop    esi
c0022ec7:	5f                   	pop    edi
c0022ec8:	5d                   	pop    ebp
c0022ec9:	c3                   	ret    

c0022eca <PCI::detect()>:
c0022eca:	56                   	push   esi
c0022ecb:	53                   	push   ebx
c0022ecc:	53                   	push   ebx
c0022ecd:	31 db                	xor    ebx,ebx
c0022ecf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022ed3:	6a 00                	push   0x0
c0022ed5:	6a 00                	push   0x0
c0022ed7:	6a 00                	push   0x0
c0022ed9:	56                   	push   esi
c0022eda:	e8 61 f7 ff ff       	call   c0022640 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022edf:	83 c4 10             	add    esp,0x10
c0022ee2:	a8 80                	test   al,0x80
c0022ee4:	75 21                	jne    c0022f07 <PCI::detect()+0x3d>
c0022ee6:	51                   	push   ecx
c0022ee7:	51                   	push   ecx
c0022ee8:	6a 00                	push   0x0
c0022eea:	56                   	push   esi
c0022eeb:	e8 20 fc ff ff       	call   c0022b10 <PCI::checkBus(unsigned char)>
c0022ef0:	83 c4 10             	add    esp,0x10
c0022ef3:	eb 24                	jmp    c0022f19 <PCI::detect()+0x4f>
c0022ef5:	52                   	push   edx
c0022ef6:	52                   	push   edx
c0022ef7:	53                   	push   ebx
c0022ef8:	43                   	inc    ebx
c0022ef9:	56                   	push   esi
c0022efa:	e8 11 fc ff ff       	call   c0022b10 <PCI::checkBus(unsigned char)>
c0022eff:	83 c4 10             	add    esp,0x10
c0022f02:	83 fb 08             	cmp    ebx,0x8
c0022f05:	74 12                	je     c0022f19 <PCI::detect()+0x4f>
c0022f07:	53                   	push   ebx
c0022f08:	6a 00                	push   0x0
c0022f0a:	6a 00                	push   0x0
c0022f0c:	56                   	push   esi
c0022f0d:	e8 0a f7 ff ff       	call   c002261c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f12:	83 c4 10             	add    esp,0x10
c0022f15:	66 40                	inc    ax
c0022f17:	74 dc                	je     c0022ef5 <PCI::detect()+0x2b>
c0022f19:	58                   	pop    eax
c0022f1a:	5b                   	pop    ebx
c0022f1b:	5e                   	pop    esi
c0022f1c:	c3                   	ret    
c0022f1d:	90                   	nop

c0022f1e <IDE::close(int, int, void*)>:
c0022f1e:	83 c8 ff             	or     eax,0xffffffff
c0022f21:	c3                   	ret    

c0022f22 <IDE::IDE()>:
c0022f22:	83 ec 0c             	sub    esp,0xc
c0022f25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f29:	83 ec 08             	sub    esp,0x8
c0022f2c:	68 48 c1 02 c0       	push   0xc002c148
c0022f31:	50                   	push   eax
c0022f32:	e8 d3 0f ff ff       	call   c0013f0a <HardDiskController::HardDiskController(char const*)>
c0022f37:	83 c4 10             	add    esp,0x10
c0022f3a:	ba d8 c1 02 c0       	mov    edx,0xc002c1d8
c0022f3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f43:	89 10                	mov    DWORD PTR [eax],edx
c0022f45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f49:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022f50:	90                   	nop
c0022f51:	83 c4 0c             	add    esp,0xc
c0022f54:	c3                   	ret    
c0022f55:	90                   	nop

c0022f56 <IDE::prepareInterrupt(unsigned char)>:
c0022f56:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022f5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022f5f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022f67:	c3                   	ret    

c0022f68 <selectDrive(unsigned char, unsigned char)>:
c0022f68:	c3                   	ret    
c0022f69:	90                   	nop

c0022f6a <IDE::getBase(unsigned char)>:
c0022f6a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022f6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f73:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022f7b:	c3                   	ret    

c0022f7c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022f7c:	55                   	push   ebp
c0022f7d:	57                   	push   edi
c0022f7e:	56                   	push   esi
c0022f7f:	53                   	push   ebx
c0022f80:	83 ec 1c             	sub    esp,0x1c
c0022f83:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022f87:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022f8b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022f8e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022f92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022f96:	80 f9 03             	cmp    cl,0x3
c0022f99:	77 51                	ja     c0022fec <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022f9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022f9f:	0f b6 f2             	movzx  esi,dl
c0022fa2:	0f b6 db             	movzx  ebx,bl
c0022fa5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022fa8:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022fac:	83 ca 80             	or     edx,0xffffff80
c0022faf:	0f b6 d2             	movzx  edx,dl
c0022fb2:	52                   	push   edx
c0022fb3:	6a 0c                	push   0xc
c0022fb5:	56                   	push   esi
c0022fb6:	57                   	push   edi
c0022fb7:	e8 c0 ff ff ff       	call   c0022f7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022fbc:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022fc5:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022fc9:	ee                   	out    dx,al
c0022fca:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022fcf:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022fd3:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022fd7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022fdb:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022fe3:	83 c4 2c             	add    esp,0x2c
c0022fe6:	5b                   	pop    ebx
c0022fe7:	5e                   	pop    esi
c0022fe8:	5f                   	pop    edi
c0022fe9:	5d                   	pop    ebp
c0022fea:	eb 90                	jmp    c0022f7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022fec:	80 fb 07             	cmp    bl,0x7
c0022fef:	77 12                	ja     c0023003 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022ff1:	0f b6 d2             	movzx  edx,dl
c0022ff4:	0f b6 db             	movzx  ebx,bl
c0022ff7:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022fff:	89 da                	mov    edx,ebx
c0023001:	eb 2f                	jmp    c0023032 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023003:	80 fb 0d             	cmp    bl,0xd
c0023006:	77 13                	ja     c002301b <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023008:	0f b6 d2             	movzx  edx,dl
c002300b:	0f b6 db             	movzx  ebx,bl
c002300e:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023015:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023019:	eb 17                	jmp    c0023032 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002301b:	80 fb 15             	cmp    bl,0x15
c002301e:	77 13                	ja     c0023033 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023020:	0f b6 d2             	movzx  edx,dl
c0023023:	0f b6 db             	movzx  ebx,bl
c0023026:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c002302e:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0023032:	ee                   	out    dx,al
c0023033:	83 c4 1c             	add    esp,0x1c
c0023036:	5b                   	pop    ebx
c0023037:	5e                   	pop    esi
c0023038:	5f                   	pop    edi
c0023039:	5d                   	pop    ebp
c002303a:	c3                   	ret    
c002303b:	90                   	nop

c002303c <IDE::read(unsigned char, unsigned char)>:
c002303c:	55                   	push   ebp
c002303d:	57                   	push   edi
c002303e:	56                   	push   esi
c002303f:	53                   	push   ebx
c0023040:	83 ec 1c             	sub    esp,0x1c
c0023043:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023047:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002304b:	8d 43 f8             	lea    eax,[ebx-0x8]
c002304e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023052:	3c 03                	cmp    al,0x3
c0023054:	77 43                	ja     c0023099 <IDE::read(unsigned char, unsigned char)+0x5d>
c0023056:	0f b6 f2             	movzx  esi,dl
c0023059:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002305c:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023060:	83 c8 80             	or     eax,0xffffff80
c0023063:	0f b6 c0             	movzx  eax,al
c0023066:	50                   	push   eax
c0023067:	6a 0c                	push   0xc
c0023069:	56                   	push   esi
c002306a:	57                   	push   edi
c002306b:	e8 0c ff ff ff       	call   c0022f7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023070:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023075:	0f b6 c3             	movzx  eax,bl
c0023078:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c002307c:	ec                   	in     al,dx
c002307d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023081:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023086:	52                   	push   edx
c0023087:	6a 0c                	push   0xc
c0023089:	56                   	push   esi
c002308a:	57                   	push   edi
c002308b:	e8 ec fe ff ff       	call   c0022f7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023090:	83 c4 20             	add    esp,0x20
c0023093:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023097:	eb 49                	jmp    c00230e2 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023099:	80 fb 07             	cmp    bl,0x7
c002309c:	77 12                	ja     c00230b0 <IDE::read(unsigned char, unsigned char)+0x74>
c002309e:	0f b6 d2             	movzx  edx,dl
c00230a1:	0f b6 c3             	movzx  eax,bl
c00230a4:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00230ac:	89 c2                	mov    edx,eax
c00230ae:	eb 31                	jmp    c00230e1 <IDE::read(unsigned char, unsigned char)+0xa5>
c00230b0:	80 fb 0d             	cmp    bl,0xd
c00230b3:	77 13                	ja     c00230c8 <IDE::read(unsigned char, unsigned char)+0x8c>
c00230b5:	0f b6 d2             	movzx  edx,dl
c00230b8:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00230bf:	0f b6 d3             	movzx  edx,bl
c00230c2:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00230c6:	eb 19                	jmp    c00230e1 <IDE::read(unsigned char, unsigned char)+0xa5>
c00230c8:	31 c0                	xor    eax,eax
c00230ca:	80 fb 15             	cmp    bl,0x15
c00230cd:	77 13                	ja     c00230e2 <IDE::read(unsigned char, unsigned char)+0xa6>
c00230cf:	0f b6 d2             	movzx  edx,dl
c00230d2:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00230da:	0f b6 d3             	movzx  edx,bl
c00230dd:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00230e1:	ec                   	in     al,dx
c00230e2:	83 c4 1c             	add    esp,0x1c
c00230e5:	5b                   	pop    ebx
c00230e6:	5e                   	pop    esi
c00230e7:	5f                   	pop    edi
c00230e8:	5d                   	pop    ebp
c00230e9:	c3                   	ret    

c00230ea <IDE::waitInterrupt(unsigned char)>:
c00230ea:	55                   	push   ebp
c00230eb:	57                   	push   edi
c00230ec:	56                   	push   esi
c00230ed:	53                   	push   ebx
c00230ee:	31 db                	xor    ebx,ebx
c00230f0:	83 ec 0c             	sub    esp,0xc
c00230f3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00230f7:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00230fc:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023104:	89 e8                	mov    eax,ebp
c0023106:	84 c0                	test   al,al
c0023108:	75 34                	jne    c002313e <IDE::waitInterrupt(unsigned char)+0x54>
c002310a:	52                   	push   edx
c002310b:	6a 0c                	push   0xc
c002310d:	56                   	push   esi
c002310e:	57                   	push   edi
c002310f:	e8 28 ff ff ff       	call   c002303c <IDE::read(unsigned char, unsigned char)>
c0023114:	83 c4 10             	add    esp,0x10
c0023117:	a8 01                	test   al,0x1
c0023119:	75 2b                	jne    c0023146 <IDE::waitInterrupt(unsigned char)+0x5c>
c002311b:	f6 c3 04             	test   bl,0x4
c002311e:	75 16                	jne    c0023136 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023120:	83 fb 32             	cmp    ebx,0x32
c0023123:	7e 11                	jle    c0023136 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023125:	50                   	push   eax
c0023126:	50                   	push   eax
c0023127:	6a 00                	push   0x0
c0023129:	68 80 96 98 00       	push   0x989680
c002312e:	e8 c6 ab ff ff       	call   c001dcf9 <nanoSleep(unsigned long long)>
c0023133:	83 c4 10             	add    esp,0x10
c0023136:	83 fb 3c             	cmp    ebx,0x3c
c0023139:	74 0b                	je     c0023146 <IDE::waitInterrupt(unsigned char)+0x5c>
c002313b:	43                   	inc    ebx
c002313c:	eb be                	jmp    c00230fc <IDE::waitInterrupt(unsigned char)+0x12>
c002313e:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023146:	83 c4 0c             	add    esp,0xc
c0023149:	89 e8                	mov    eax,ebp
c002314b:	5b                   	pop    ebx
c002314c:	5e                   	pop    esi
c002314d:	5f                   	pop    edi
c002314e:	5d                   	pop    ebp
c002314f:	c3                   	ret    

c0023150 <ideChannel0IRQHandler(regs*, void*)>:
c0023150:	83 ec 10             	sub    esp,0x10
c0023153:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023157:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c002315e:	6a 07                	push   0x7
c0023160:	6a 00                	push   0x0
c0023162:	50                   	push   eax
c0023163:	e8 d4 fe ff ff       	call   c002303c <IDE::read(unsigned char, unsigned char)>
c0023168:	83 c4 1c             	add    esp,0x1c
c002316b:	c3                   	ret    

c002316c <ideChannel1IRQHandler(regs*, void*)>:
c002316c:	83 ec 10             	sub    esp,0x10
c002316f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023173:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002317a:	6a 07                	push   0x7
c002317c:	6a 01                	push   0x1
c002317e:	50                   	push   eax
c002317f:	e8 b8 fe ff ff       	call   c002303c <IDE::read(unsigned char, unsigned char)>
c0023184:	83 c4 1c             	add    esp,0x1c
c0023187:	c3                   	ret    

c0023188 <IDE::enableIRQs(unsigned char, bool)>:
c0023188:	57                   	push   edi
c0023189:	56                   	push   esi
c002318a:	be 04 00 00 00       	mov    esi,0x4
c002318f:	53                   	push   ebx
c0023190:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023195:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023199:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c002319e:	0f 94 c0             	sete   al
c00231a1:	d1 e0                	shl    eax,1
c00231a3:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00231aa:	0f b6 c0             	movzx  eax,al
c00231ad:	50                   	push   eax
c00231ae:	6a 0c                	push   0xc
c00231b0:	57                   	push   edi
c00231b1:	53                   	push   ebx
c00231b2:	e8 c5 fd ff ff       	call   c0022f7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231b7:	83 c4 10             	add    esp,0x10
c00231ba:	50                   	push   eax
c00231bb:	6a 0c                	push   0xc
c00231bd:	57                   	push   edi
c00231be:	53                   	push   ebx
c00231bf:	e8 78 fe ff ff       	call   c002303c <IDE::read(unsigned char, unsigned char)>
c00231c4:	83 c4 10             	add    esp,0x10
c00231c7:	4e                   	dec    esi
c00231c8:	75 f0                	jne    c00231ba <IDE::enableIRQs(unsigned char, bool)+0x32>
c00231ca:	5b                   	pop    ebx
c00231cb:	5e                   	pop    esi
c00231cc:	5f                   	pop    edi
c00231cd:	c3                   	ret    

c00231ce <IDE::open(int, int, void*)>:
c00231ce:	55                   	push   ebp
c00231cf:	57                   	push   edi
c00231d0:	56                   	push   esi
c00231d1:	53                   	push   ebx
c00231d2:	83 ec 1c             	sub    esp,0x1c
c00231d5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00231d9:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00231e2:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00231eb:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00231f2:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00231f9:	0f 85 b0 02 00 00    	jne    c00234af <IDE::open(int, int, void*)+0x2e1>
c00231ff:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023205:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023209:	83 e0 7f             	and    eax,0x7f
c002320c:	3c 05                	cmp    al,0x5
c002320e:	74 04                	je     c0023214 <IDE::open(int, int, void*)+0x46>
c0023210:	3c 0f                	cmp    al,0xf
c0023212:	75 32                	jne    c0023246 <IDE::open(int, int, void*)+0x78>
c0023214:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002321a:	83 e0 fc             	and    eax,0xfffffffc
c002321d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023224:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002322a:	83 e0 fc             	and    eax,0xfffffffc
c002322d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023234:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002323a:	83 e0 fc             	and    eax,0xfffffffc
c002323d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023244:	eb 14                	jmp    c002325a <IDE::open(int, int, void*)+0x8c>
c0023246:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023250:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002325a:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023261:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023268:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002326c:	89 c6                	mov    esi,eax
c002326e:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023273:	c1 e6 10             	shl    esi,0x10
c0023276:	89 e8                	mov    eax,ebp
c0023278:	89 fa                	mov    edx,edi
c002327a:	c1 e0 0b             	shl    eax,0xb
c002327d:	09 f0                	or     eax,esi
c002327f:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023286:	c1 e6 08             	shl    esi,0x8
c0023289:	09 c6                	or     esi,eax
c002328b:	89 f0                	mov    eax,esi
c002328d:	0d 08 00 00 80       	or     eax,0x80000008
c0023292:	ef                   	out    dx,eax
c0023293:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023298:	89 ca                	mov    edx,ecx
c002329a:	ed                   	in     eax,dx
c002329b:	c1 e8 10             	shr    eax,0x10
c002329e:	3d ff ff 00 00       	cmp    eax,0xffff
c00232a3:	0f 84 f5 00 00 00    	je     c002339e <IDE::open(int, int, void*)+0x1d0>
c00232a9:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00232af:	89 fa                	mov    edx,edi
c00232b1:	89 f0                	mov    eax,esi
c00232b3:	ef                   	out    dx,eax
c00232b4:	b0 fe                	mov    al,0xfe
c00232b6:	89 ca                	mov    edx,ecx
c00232b8:	ee                   	out    dx,al
c00232b9:	89 f0                	mov    eax,esi
c00232bb:	89 fa                	mov    edx,edi
c00232bd:	ef                   	out    dx,eax
c00232be:	89 ca                	mov    edx,ecx
c00232c0:	ed                   	in     eax,dx
c00232c1:	3c fe                	cmp    al,0xfe
c00232c3:	0f 85 a9 00 00 00    	jne    c0023372 <IDE::open(int, int, void*)+0x1a4>
c00232c9:	8b 15 08 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da08
c00232cf:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00232d6:	74 33                	je     c002330b <IDE::open(int, int, void*)+0x13d>
c00232d8:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00232de:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00232e2:	40                   	inc    eax
c00232e3:	83 ec 0c             	sub    esp,0xc
c00232e6:	0f b6 c0             	movzx  eax,al
c00232e9:	50                   	push   eax
c00232ea:	55                   	push   ebp
c00232eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00232ef:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00232f5:	51                   	push   ecx
c00232f6:	e8 4d 48 ff ff       	call   c0017b48 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00232fb:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023300:	83 c4 1c             	add    esp,0x1c
c0023303:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023309:	eb 0a                	jmp    c0023315 <IDE::open(int, int, void*)+0x147>
c002330b:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023315:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c002331c:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023323:	c1 e1 10             	shl    ecx,0x10
c0023326:	c1 e0 08             	shl    eax,0x8
c0023329:	bf f8 0c 00 00       	mov    edi,0xcf8
c002332e:	09 c1                	or     ecx,eax
c0023330:	89 fa                	mov    edx,edi
c0023332:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023339:	c1 e0 0b             	shl    eax,0xb
c002333c:	09 c1                	or     ecx,eax
c002333e:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023344:	89 c8                	mov    eax,ecx
c0023346:	ef                   	out    dx,eax
c0023347:	be fc 0c 00 00       	mov    esi,0xcfc
c002334c:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023352:	89 f2                	mov    edx,esi
c0023354:	ee                   	out    dx,al
c0023355:	89 c8                	mov    eax,ecx
c0023357:	89 fa                	mov    edx,edi
c0023359:	ef                   	out    dx,eax
c002335a:	89 f2                	mov    edx,esi
c002335c:	ed                   	in     eax,dx
c002335d:	0f b6 c0             	movzx  eax,al
c0023360:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023366:	74 46                	je     c00233ae <IDE::open(int, int, void*)+0x1e0>
c0023368:	83 ec 0c             	sub    esp,0xc
c002336b:	68 60 c1 02 c0       	push   0xc002c160
c0023370:	eb 34                	jmp    c00233a6 <IDE::open(int, int, void*)+0x1d8>
c0023372:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002337b:	75 17                	jne    c0023394 <IDE::open(int, int, void*)+0x1c6>
c002337d:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023382:	74 07                	je     c002338b <IDE::open(int, int, void*)+0x1bd>
c0023384:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023389:	75 09                	jne    c0023394 <IDE::open(int, int, void*)+0x1c6>
c002338b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023392:	eb 1a                	jmp    c00233ae <IDE::open(int, int, void*)+0x1e0>
c0023394:	83 ec 0c             	sub    esp,0xc
c0023397:	68 68 c1 02 c0       	push   0xc002c168
c002339c:	eb 08                	jmp    c00233a6 <IDE::open(int, int, void*)+0x1d8>
c002339e:	83 ec 0c             	sub    esp,0xc
c00233a1:	68 99 c1 02 c0       	push   0xc002c199
c00233a6:	e8 e4 6a ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c00233ab:	83 c4 10             	add    esp,0x10
c00233ae:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00233b5:	79 1a                	jns    c00233d1 <IDE::open(int, int, void*)+0x203>
c00233b7:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00233bd:	83 e0 fc             	and    eax,0xfffffffc
c00233c0:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00233c7:	83 c0 08             	add    eax,0x8
c00233ca:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00233d1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00233d7:	89 c2                	mov    edx,eax
c00233d9:	83 e2 0f             	and    edx,0xf
c00233dc:	66 83 fa 08          	cmp    dx,0x8
c00233e0:	75 0a                	jne    c00233ec <IDE::open(int, int, void*)+0x21e>
c00233e2:	83 e8 02             	sub    eax,0x2
c00233e5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00233ec:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00233f2:	89 c2                	mov    edx,eax
c00233f4:	83 e2 0f             	and    edx,0xf
c00233f7:	66 83 fa 08          	cmp    dx,0x8
c00233fb:	75 0a                	jne    c0023407 <IDE::open(int, int, void*)+0x239>
c00233fd:	83 e8 02             	sub    eax,0x2
c0023400:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023407:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002340e:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023415:	89 d0                	mov    eax,edx
c0023417:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002341a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002341e:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023422:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023425:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002342a:	0f b6 c9             	movzx  ecx,cl
c002342d:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023434:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023437:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002343b:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002343f:	8d 50 02             	lea    edx,[eax+0x2]
c0023442:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023447:	0f b6 d2             	movzx  edx,dl
c002344a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023450:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023453:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023457:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002345b:	8d 48 03             	lea    ecx,[eax+0x3]
c002345e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023463:	0f b6 c9             	movzx  ecx,cl
c0023466:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002346c:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002346f:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023473:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023477:	8d 50 04             	lea    edx,[eax+0x4]
c002347a:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023480:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023485:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002348c:	66 85 f6             	test   si,si
c002348f:	74 5b                	je     c00234ec <IDE::open(int, int, void*)+0x31e>
c0023491:	0f b6 d2             	movzx  edx,dl
c0023494:	83 c0 05             	add    eax,0x5
c0023497:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002349a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002349e:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00234a2:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00234a8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00234ad:	eb 3d                	jmp    c00234ec <IDE::open(int, int, void*)+0x31e>
c00234af:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c00234b5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00234bc:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00234c3:	66 05 06 02          	add    ax,0x206
c00234c7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00234ce:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c00234d5:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00234dc:	66 05 06 02          	add    ax,0x206
c00234e0:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00234e7:	e9 e5 fe ff ff       	jmp    c00233d1 <IDE::open(int, int, void*)+0x203>
c00234ec:	50                   	push   eax
c00234ed:	50                   	push   eax
c00234ee:	6a 00                	push   0x0
c00234f0:	53                   	push   ebx
c00234f1:	e8 60 fa ff ff       	call   c0022f56 <IDE::prepareInterrupt(unsigned char)>
c00234f6:	5a                   	pop    edx
c00234f7:	59                   	pop    ecx
c00234f8:	6a 01                	push   0x1
c00234fa:	53                   	push   ebx
c00234fb:	e8 56 fa ff ff       	call   c0022f56 <IDE::prepareInterrupt(unsigned char)>
c0023500:	83 c4 0c             	add    esp,0xc
c0023503:	6a 00                	push   0x0
c0023505:	6a 00                	push   0x0
c0023507:	53                   	push   ebx
c0023508:	e8 7b fc ff ff       	call   c0023188 <IDE::enableIRQs(unsigned char, bool)>
c002350d:	83 c4 0c             	add    esp,0xc
c0023510:	6a 00                	push   0x0
c0023512:	6a 01                	push   0x1
c0023514:	53                   	push   ebx
c0023515:	e8 6e fc ff ff       	call   c0023188 <IDE::enableIRQs(unsigned char, bool)>
c002351a:	83 c4 10             	add    esp,0x10
c002351d:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023524:	74 34                	je     c002355a <IDE::open(int, int, void*)+0x38c>
c0023526:	83 ec 0c             	sub    esp,0xc
c0023529:	53                   	push   ebx
c002352a:	6a 01                	push   0x1
c002352c:	68 50 31 02 c0       	push   0xc0023150
c0023531:	6a 0e                	push   0xe
c0023533:	53                   	push   ebx
c0023534:	e8 9b 05 ff ff       	call   c0013ad4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023539:	83 c4 14             	add    esp,0x14
c002353c:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023542:	53                   	push   ebx
c0023543:	6a 01                	push   0x1
c0023545:	68 6c 31 02 c0       	push   0xc002316c
c002354a:	6a 0f                	push   0xf
c002354c:	53                   	push   ebx
c002354d:	e8 82 05 ff ff       	call   c0013ad4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023552:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023558:	eb 38                	jmp    c0023592 <IDE::open(int, int, void*)+0x3c4>
c002355a:	83 ec 0c             	sub    esp,0xc
c002355d:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023567:	53                   	push   ebx
c0023568:	6a 00                	push   0x0
c002356a:	68 50 31 02 c0       	push   0xc0023150
c002356f:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023575:	53                   	push   ebx
c0023576:	e8 59 05 ff ff       	call   c0013ad4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002357b:	83 c4 14             	add    esp,0x14
c002357e:	53                   	push   ebx
c002357f:	6a 00                	push   0x0
c0023581:	68 6c 31 02 c0       	push   0xc002316c
c0023586:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002358c:	53                   	push   ebx
c002358d:	e8 42 05 ff ff       	call   c0013ad4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023592:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023594:	83 c4 20             	add    esp,0x20
c0023597:	83 ec 0c             	sub    esp,0xc
c002359a:	53                   	push   ebx
c002359b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002359e:	83 c4 0c             	add    esp,0xc
c00235a1:	6a 07                	push   0x7
c00235a3:	6a 00                	push   0x0
c00235a5:	53                   	push   ebx
c00235a6:	e8 91 fa ff ff       	call   c002303c <IDE::read(unsigned char, unsigned char)>
c00235ab:	83 c4 0c             	add    esp,0xc
c00235ae:	6a 07                	push   0x7
c00235b0:	6a 01                	push   0x1
c00235b2:	53                   	push   ebx
c00235b3:	e8 84 fa ff ff       	call   c002303c <IDE::read(unsigned char, unsigned char)>
c00235b8:	83 c4 0c             	add    esp,0xc
c00235bb:	6a 01                	push   0x1
c00235bd:	6a 00                	push   0x0
c00235bf:	53                   	push   ebx
c00235c0:	e8 c3 fb ff ff       	call   c0023188 <IDE::enableIRQs(unsigned char, bool)>
c00235c5:	83 c4 0c             	add    esp,0xc
c00235c8:	6a 01                	push   0x1
c00235ca:	6a 01                	push   0x1
c00235cc:	53                   	push   ebx
c00235cd:	e8 b6 fb ff ff       	call   c0023188 <IDE::enableIRQs(unsigned char, bool)>
c00235d2:	83 c4 2c             	add    esp,0x2c
c00235d5:	31 c0                	xor    eax,eax
c00235d7:	5b                   	pop    ebx
c00235d8:	5e                   	pop    esi
c00235d9:	5f                   	pop    edi
c00235da:	5d                   	pop    ebp
c00235db:	c3                   	ret    

c00235dc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00235dc:	55                   	push   ebp
c00235dd:	57                   	push   edi
c00235de:	56                   	push   esi
c00235df:	53                   	push   ebx
c00235e0:	83 ec 1c             	sub    esp,0x1c
c00235e3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00235e7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00235eb:	8d 50 f8             	lea    edx,[eax-0x8]
c00235ee:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00235f2:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00235f6:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00235fa:	80 fa 03             	cmp    dl,0x3
c00235fd:	77 5d                	ja     c002365c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00235ff:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023603:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023607:	0f b6 db             	movzx  ebx,bl
c002360a:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002360d:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023611:	83 ca 80             	or     edx,0xffffff80
c0023614:	0f b6 d2             	movzx  edx,dl
c0023617:	52                   	push   edx
c0023618:	6a 0c                	push   0xc
c002361a:	53                   	push   ebx
c002361b:	56                   	push   esi
c002361c:	e8 5b f9 ff ff       	call   c0022f7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023621:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023626:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002362a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002362e:	0f b6 c0             	movzx  eax,al
c0023631:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023635:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023637:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002363c:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023640:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023644:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023648:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023650:	83 c4 2c             	add    esp,0x2c
c0023653:	5b                   	pop    ebx
c0023654:	5e                   	pop    esi
c0023655:	5f                   	pop    edi
c0023656:	5d                   	pop    ebp
c0023657:	e9 20 f9 ff ff       	jmp    c0022f7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002365c:	3c 07                	cmp    al,0x7
c002365e:	77 10                	ja     c0023670 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023660:	0f b6 db             	movzx  ebx,bl
c0023663:	0f b6 d0             	movzx  edx,al
c0023666:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c002366e:	eb 2d                	jmp    c002369d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023670:	3c 0d                	cmp    al,0xd
c0023672:	77 13                	ja     c0023687 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023674:	0f b6 db             	movzx  ebx,bl
c0023677:	0f b6 c0             	movzx  eax,al
c002367a:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023681:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023685:	eb 16                	jmp    c002369d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023687:	3c 15                	cmp    al,0x15
c0023689:	77 14                	ja     c002369f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c002368b:	0f b6 db             	movzx  ebx,bl
c002368e:	0f b6 c0             	movzx  eax,al
c0023691:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023699:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c002369d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002369f:	83 c4 1c             	add    esp,0x1c
c00236a2:	5b                   	pop    ebx
c00236a3:	5e                   	pop    esi
c00236a4:	5f                   	pop    edi
c00236a5:	5d                   	pop    ebp
c00236a6:	c3                   	ret    
c00236a7:	90                   	nop

c00236a8 <IDE::detect()>:
c00236a8:	55                   	push   ebp
c00236a9:	57                   	push   edi
c00236aa:	56                   	push   esi
c00236ab:	53                   	push   ebx
c00236ac:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00236b2:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00236b9:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00236c0:	0f 85 9d 02 00 00    	jne    c0023963 <IDE::detect()+0x2bb>
c00236c6:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00236cd:	31 f6                	xor    esi,esi
c00236cf:	31 ed                	xor    ebp,ebp
c00236d1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00236d9:	89 e8                	mov    eax,ebp
c00236db:	c1 e0 06             	shl    eax,0x6
c00236de:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00236e6:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00236ea:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00236ee:	c1 e0 04             	shl    eax,0x4
c00236f1:	83 c8 a0             	or     eax,0xffffffa0
c00236f4:	0f b6 c0             	movzx  eax,al
c00236f7:	50                   	push   eax
c00236f8:	6a 06                	push   0x6
c00236fa:	56                   	push   esi
c00236fb:	53                   	push   ebx
c00236fc:	e8 7b f8 ff ff       	call   c0022f7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023701:	83 c4 0c             	add    esp,0xc
c0023704:	6a 0c                	push   0xc
c0023706:	56                   	push   esi
c0023707:	53                   	push   ebx
c0023708:	e8 2f f9 ff ff       	call   c002303c <IDE::read(unsigned char, unsigned char)>
c002370d:	83 c4 0c             	add    esp,0xc
c0023710:	6a 0c                	push   0xc
c0023712:	56                   	push   esi
c0023713:	53                   	push   ebx
c0023714:	e8 23 f9 ff ff       	call   c002303c <IDE::read(unsigned char, unsigned char)>
c0023719:	83 c4 0c             	add    esp,0xc
c002371c:	6a 0c                	push   0xc
c002371e:	56                   	push   esi
c002371f:	53                   	push   ebx
c0023720:	e8 17 f9 ff ff       	call   c002303c <IDE::read(unsigned char, unsigned char)>
c0023725:	83 c4 0c             	add    esp,0xc
c0023728:	6a 0c                	push   0xc
c002372a:	56                   	push   esi
c002372b:	53                   	push   ebx
c002372c:	e8 0b f9 ff ff       	call   c002303c <IDE::read(unsigned char, unsigned char)>
c0023731:	68 ec 00 00 00       	push   0xec
c0023736:	6a 07                	push   0x7
c0023738:	56                   	push   esi
c0023739:	53                   	push   ebx
c002373a:	e8 3d f8 ff ff       	call   c0022f7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002373f:	83 c4 1c             	add    esp,0x1c
c0023742:	6a 0c                	push   0xc
c0023744:	56                   	push   esi
c0023745:	53                   	push   ebx
c0023746:	e8 f1 f8 ff ff       	call   c002303c <IDE::read(unsigned char, unsigned char)>
c002374b:	83 c4 0c             	add    esp,0xc
c002374e:	6a 0c                	push   0xc
c0023750:	56                   	push   esi
c0023751:	53                   	push   ebx
c0023752:	e8 e5 f8 ff ff       	call   c002303c <IDE::read(unsigned char, unsigned char)>
c0023757:	83 c4 0c             	add    esp,0xc
c002375a:	6a 0c                	push   0xc
c002375c:	56                   	push   esi
c002375d:	53                   	push   ebx
c002375e:	e8 d9 f8 ff ff       	call   c002303c <IDE::read(unsigned char, unsigned char)>
c0023763:	83 c4 0c             	add    esp,0xc
c0023766:	6a 0c                	push   0xc
c0023768:	56                   	push   esi
c0023769:	53                   	push   ebx
c002376a:	e8 cd f8 ff ff       	call   c002303c <IDE::read(unsigned char, unsigned char)>
c002376f:	83 c4 0c             	add    esp,0xc
c0023772:	6a 0c                	push   0xc
c0023774:	56                   	push   esi
c0023775:	53                   	push   ebx
c0023776:	e8 c1 f8 ff ff       	call   c002303c <IDE::read(unsigned char, unsigned char)>
c002377b:	83 c4 10             	add    esp,0x10
c002377e:	84 c0                	test   al,al
c0023780:	0f 84 63 01 00 00    	je     c00238e9 <IDE::detect()+0x241>
c0023786:	31 ff                	xor    edi,edi
c0023788:	50                   	push   eax
c0023789:	6a 0c                	push   0xc
c002378b:	56                   	push   esi
c002378c:	53                   	push   ebx
c002378d:	e8 aa f8 ff ff       	call   c002303c <IDE::read(unsigned char, unsigned char)>
c0023792:	83 c4 10             	add    esp,0x10
c0023795:	a8 01                	test   al,0x1
c0023797:	0f 85 6d 01 00 00    	jne    c002390a <IDE::detect()+0x262>
c002379d:	84 c0                	test   al,al
c002379f:	78 04                	js     c00237a5 <IDE::detect()+0xfd>
c00237a1:	a8 08                	test   al,0x8
c00237a3:	75 27                	jne    c00237cc <IDE::detect()+0x124>
c00237a5:	47                   	inc    edi
c00237a6:	81 ff 17 01 00 00    	cmp    edi,0x117
c00237ac:	7e da                	jle    c0023788 <IDE::detect()+0xe0>
c00237ae:	50                   	push   eax
c00237af:	50                   	push   eax
c00237b0:	6a 00                	push   0x0
c00237b2:	68 40 4b 4c 00       	push   0x4c4b40
c00237b7:	e8 3d a5 ff ff       	call   c001dcf9 <nanoSleep(unsigned long long)>
c00237bc:	83 c4 10             	add    esp,0x10
c00237bf:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00237c5:	75 c1                	jne    c0023788 <IDE::detect()+0xe0>
c00237c7:	e9 3e 01 00 00       	jmp    c002390a <IDE::detect()+0x262>
c00237cc:	31 c9                	xor    ecx,ecx
c00237ce:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00237d2:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00237d6:	83 ec 0c             	sub    esp,0xc
c00237d9:	68 80 00 00 00       	push   0x80
c00237de:	57                   	push   edi
c00237df:	6a 00                	push   0x0
c00237e1:	56                   	push   esi
c00237e2:	53                   	push   ebx
c00237e3:	e8 f4 fd ff ff       	call   c00235dc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00237e8:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00237ed:	89 e8                	mov    eax,ebp
c00237ef:	89 d1                	mov    ecx,edx
c00237f1:	c1 e0 06             	shl    eax,0x6
c00237f4:	01 d8                	add    eax,ebx
c00237f6:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00237fd:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023804:	89 f2                	mov    edx,esi
c0023806:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002380c:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023810:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023816:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002381a:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023821:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023829:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0023830:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023838:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002383e:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023845:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002384b:	8d 54 24 58          	lea    edx,[esp+0x58]
c002384f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023853:	83 c4 20             	add    esp,0x20
c0023856:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023859:	83 c0 02             	add    eax,0x2
c002385c:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023862:	83 c7 02             	add    edi,0x2
c0023865:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023868:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002386e:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0023872:	75 e2                	jne    c0023856 <IDE::detect()+0x1ae>
c0023874:	89 e8                	mov    eax,ebp
c0023876:	c1 e0 06             	shl    eax,0x6
c0023879:	01 d8                	add    eax,ebx
c002387b:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023881:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023888:	66 c1 ea 09          	shr    dx,0x9
c002388c:	83 e2 01             	and    edx,0x1
c002388f:	84 c9                	test   cl,cl
c0023891:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023897:	75 22                	jne    c00238bb <IDE::detect()+0x213>
c0023899:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c00238a0:	74 46                	je     c00238e8 <IDE::detect()+0x240>
c00238a2:	83 ec 0c             	sub    esp,0xc
c00238a5:	68 7c 01 00 00       	push   0x17c
c00238aa:	e8 ea bc fe ff       	call   c000f599 <malloc>
c00238af:	89 c7                	mov    edi,eax
c00238b1:	89 04 24             	mov    DWORD PTR [esp],eax
c00238b4:	e8 15 05 00 00       	call   c0023dce <ATA::ATA()>
c00238b9:	eb 17                	jmp    c00238d2 <IDE::detect()+0x22a>
c00238bb:	83 ec 0c             	sub    esp,0xc
c00238be:	68 80 01 00 00       	push   0x180
c00238c3:	e8 d1 bc fe ff       	call   c000f599 <malloc>
c00238c8:	89 c7                	mov    edi,eax
c00238ca:	89 04 24             	mov    DWORD PTR [esp],eax
c00238cd:	e8 04 0b 00 00       	call   c00243d6 <ATAPI::ATAPI()>
c00238d2:	5a                   	pop    edx
c00238d3:	59                   	pop    ecx
c00238d4:	57                   	push   edi
c00238d5:	53                   	push   ebx
c00238d6:	e8 81 02 ff ff       	call   c0013b5c <Device::addChild(Device*)>
c00238db:	8b 07                	mov    eax,DWORD PTR [edi]
c00238dd:	53                   	push   ebx
c00238de:	55                   	push   ebp
c00238df:	6a 00                	push   0x0
c00238e1:	57                   	push   edi
c00238e2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00238e5:	83 c4 20             	add    esp,0x20
c00238e8:	45                   	inc    ebp
c00238e9:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00238ee:	74 0d                	je     c00238fd <IDE::detect()+0x255>
c00238f0:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00238f8:	e9 dc fd ff ff       	jmp    c00236d9 <IDE::detect()+0x31>
c00238fd:	4e                   	dec    esi
c00238fe:	74 63                	je     c0023963 <IDE::detect()+0x2bb>
c0023900:	be 01 00 00 00       	mov    esi,0x1
c0023905:	e9 c7 fd ff ff       	jmp    c00236d1 <IDE::detect()+0x29>
c002390a:	50                   	push   eax
c002390b:	6a 04                	push   0x4
c002390d:	56                   	push   esi
c002390e:	53                   	push   ebx
c002390f:	e8 28 f7 ff ff       	call   c002303c <IDE::read(unsigned char, unsigned char)>
c0023914:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023918:	83 c4 0c             	add    esp,0xc
c002391b:	6a 05                	push   0x5
c002391d:	56                   	push   esi
c002391e:	53                   	push   ebx
c002391f:	e8 18 f7 ff ff       	call   c002303c <IDE::read(unsigned char, unsigned char)>
c0023924:	83 c4 10             	add    esp,0x10
c0023927:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c002392b:	80 fa 14             	cmp    dl,0x14
c002392e:	75 04                	jne    c0023934 <IDE::detect()+0x28c>
c0023930:	3c eb                	cmp    al,0xeb
c0023932:	eb 07                	jmp    c002393b <IDE::detect()+0x293>
c0023934:	3c 96                	cmp    al,0x96
c0023936:	75 b1                	jne    c00238e9 <IDE::detect()+0x241>
c0023938:	80 fa 69             	cmp    dl,0x69
c002393b:	75 ac                	jne    c00238e9 <IDE::detect()+0x241>
c002393d:	68 a1 00 00 00       	push   0xa1
c0023942:	6a 07                	push   0x7
c0023944:	56                   	push   esi
c0023945:	53                   	push   ebx
c0023946:	e8 31 f6 ff ff       	call   c0022f7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002394b:	5f                   	pop    edi
c002394c:	58                   	pop    eax
c002394d:	6a 00                	push   0x0
c002394f:	68 40 42 0f 00       	push   0xf4240
c0023954:	e8 a0 a3 ff ff       	call   c001dcf9 <nanoSleep(unsigned long long)>
c0023959:	83 c4 10             	add    esp,0x10
c002395c:	b1 01                	mov    cl,0x1
c002395e:	e9 6b fe ff ff       	jmp    c00237ce <IDE::detect()+0x126>
c0023963:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023969:	5b                   	pop    ebx
c002396a:	5e                   	pop    esi
c002396b:	5f                   	pop    edi
c002396c:	5d                   	pop    ebp
c002396d:	c3                   	ret    

c002396e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002396e:	55                   	push   ebp
c002396f:	57                   	push   edi
c0023970:	56                   	push   esi
c0023971:	53                   	push   ebx
c0023972:	83 ec 1c             	sub    esp,0x1c
c0023975:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023979:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002397d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023981:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023985:	88 c3                	mov    bl,al
c0023987:	84 c0                	test   al,al
c0023989:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002398d:	0f 84 81 00 00 00    	je     c0023a14 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023993:	83 ec 0c             	sub    esp,0xc
c0023996:	68 c3 c1 02 c0       	push   0xc002c1c3
c002399b:	e8 83 ed fe ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c00239a0:	83 c4 10             	add    esp,0x10
c00239a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00239a7:	3c 01                	cmp    al,0x1
c00239a9:	74 63                	je     c0023a0e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c00239ab:	3c 02                	cmp    al,0x2
c00239ad:	75 53                	jne    c0023a02 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c00239af:	d1 e6                	shl    esi,1
c00239b1:	09 ee                	or     esi,ebp
c00239b3:	50                   	push   eax
c00239b4:	89 f0                	mov    eax,esi
c00239b6:	6a 01                	push   0x1
c00239b8:	0f b6 f0             	movzx  esi,al
c00239bb:	c1 e6 06             	shl    esi,0x6
c00239be:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00239c6:	50                   	push   eax
c00239c7:	57                   	push   edi
c00239c8:	e8 6f f6 ff ff       	call   c002303c <IDE::read(unsigned char, unsigned char)>
c00239cd:	83 c4 10             	add    esp,0x10
c00239d0:	a8 01                	test   al,0x1
c00239d2:	74 02                	je     c00239d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c00239d4:	b3 07                	mov    bl,0x7
c00239d6:	a8 02                	test   al,0x2
c00239d8:	74 02                	je     c00239dc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c00239da:	b3 03                	mov    bl,0x3
c00239dc:	a8 04                	test   al,0x4
c00239de:	74 02                	je     c00239e2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c00239e0:	b3 14                	mov    bl,0x14
c00239e2:	a8 08                	test   al,0x8
c00239e4:	74 02                	je     c00239e8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c00239e6:	b3 03                	mov    bl,0x3
c00239e8:	a8 10                	test   al,0x10
c00239ea:	74 02                	je     c00239ee <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c00239ec:	b3 15                	mov    bl,0x15
c00239ee:	a8 20                	test   al,0x20
c00239f0:	74 02                	je     c00239f4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c00239f2:	b3 03                	mov    bl,0x3
c00239f4:	a8 40                	test   al,0x40
c00239f6:	74 02                	je     c00239fa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c00239f8:	b3 16                	mov    bl,0x16
c00239fa:	84 c0                	test   al,al
c00239fc:	79 16                	jns    c0023a14 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00239fe:	b3 0d                	mov    bl,0xd
c0023a00:	eb 12                	jmp    c0023a14 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023a02:	3c 03                	cmp    al,0x3
c0023a04:	74 0c                	je     c0023a12 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0023a06:	3c 04                	cmp    al,0x4
c0023a08:	75 0a                	jne    c0023a14 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023a0a:	b3 08                	mov    bl,0x8
c0023a0c:	eb 06                	jmp    c0023a14 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023a0e:	b3 13                	mov    bl,0x13
c0023a10:	eb 02                	jmp    c0023a14 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023a12:	b3 17                	mov    bl,0x17
c0023a14:	83 c4 1c             	add    esp,0x1c
c0023a17:	88 d8                	mov    al,bl
c0023a19:	5b                   	pop    ebx
c0023a1a:	5e                   	pop    esi
c0023a1b:	5f                   	pop    edi
c0023a1c:	5d                   	pop    ebp
c0023a1d:	c3                   	ret    

c0023a1e <IDE::polling(unsigned char, unsigned int)>:
c0023a1e:	57                   	push   edi
c0023a1f:	56                   	push   esi
c0023a20:	53                   	push   ebx
c0023a21:	bb 04 00 00 00       	mov    ebx,0x4
c0023a26:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023a2a:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023a2f:	52                   	push   edx
c0023a30:	6a 0c                	push   0xc
c0023a32:	56                   	push   esi
c0023a33:	57                   	push   edi
c0023a34:	e8 03 f6 ff ff       	call   c002303c <IDE::read(unsigned char, unsigned char)>
c0023a39:	83 c4 10             	add    esp,0x10
c0023a3c:	4b                   	dec    ebx
c0023a3d:	75 f0                	jne    c0023a2f <IDE::polling(unsigned char, unsigned int)+0x11>
c0023a3f:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023a44:	50                   	push   eax
c0023a45:	6a 0c                	push   0xc
c0023a47:	56                   	push   esi
c0023a48:	57                   	push   edi
c0023a49:	e8 ee f5 ff ff       	call   c002303c <IDE::read(unsigned char, unsigned char)>
c0023a4e:	83 c4 10             	add    esp,0x10
c0023a51:	a8 01                	test   al,0x1
c0023a53:	75 17                	jne    c0023a6c <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023a55:	a8 20                	test   al,0x20
c0023a57:	75 0f                	jne    c0023a68 <IDE::polling(unsigned char, unsigned int)+0x4a>
c0023a59:	4b                   	dec    ebx
c0023a5a:	74 10                	je     c0023a6c <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023a5c:	84 c0                	test   al,al
c0023a5e:	78 e4                	js     c0023a44 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023a60:	a8 08                	test   al,0x8
c0023a62:	74 e0                	je     c0023a44 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023a64:	31 c0                	xor    eax,eax
c0023a66:	eb 06                	jmp    c0023a6e <IDE::polling(unsigned char, unsigned int)+0x50>
c0023a68:	b0 01                	mov    al,0x1
c0023a6a:	eb 02                	jmp    c0023a6e <IDE::polling(unsigned char, unsigned int)+0x50>
c0023a6c:	b0 02                	mov    al,0x2
c0023a6e:	5b                   	pop    ebx
c0023a6f:	5e                   	pop    esi
c0023a70:	5f                   	pop    edi
c0023a71:	c3                   	ret    

c0023a72 <SATABus::close(int, int, void*)>:
c0023a72:	31 c0                	xor    eax,eax
c0023a74:	c3                   	ret    
c0023a75:	90                   	nop

c0023a76 <SATABus::detect()>:
c0023a76:	c3                   	ret    
c0023a77:	90                   	nop

c0023a78 <SATABus::SATABus()>:
c0023a78:	83 ec 0c             	sub    esp,0xc
c0023a7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a7f:	83 ec 08             	sub    esp,0x8
c0023a82:	68 fc c1 02 c0       	push   0xc002c1fc
c0023a87:	50                   	push   eax
c0023a88:	e8 7d 04 ff ff       	call   c0013f0a <HardDiskController::HardDiskController(char const*)>
c0023a8d:	83 c4 10             	add    esp,0x10
c0023a90:	ba 50 c2 02 c0       	mov    edx,0xc002c250
c0023a95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a99:	89 10                	mov    DWORD PTR [eax],edx
c0023a9b:	83 ec 0c             	sub    esp,0xc
c0023a9e:	6a 50                	push   0x50
c0023aa0:	e8 e8 bf fe ff       	call   c000fa8d <Phys::allocateContiguousPages(int)>
c0023aa5:	83 c4 10             	add    esp,0x10
c0023aa8:	89 c2                	mov    edx,eax
c0023aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023aae:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023ab4:	83 ec 0c             	sub    esp,0xc
c0023ab7:	6a 50                	push   0x50
c0023ab9:	e8 61 d7 fe ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0023abe:	83 c4 10             	add    esp,0x10
c0023ac1:	89 c2                	mov    edx,eax
c0023ac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ac7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023acd:	a1 70 db 02 c0       	mov    eax,ds:0xc002db70
c0023ad2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023ad6:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023adc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023ae0:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023ae6:	83 ec 0c             	sub    esp,0xc
c0023ae9:	6a 03                	push   0x3
c0023aeb:	6a 50                	push   0x50
c0023aed:	51                   	push   ecx
c0023aee:	52                   	push   edx
c0023aef:	50                   	push   eax
c0023af0:	e8 31 e2 fe ff       	call   c0011d26 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023af5:	83 c4 20             	add    esp,0x20
c0023af8:	90                   	nop
c0023af9:	83 c4 0c             	add    esp,0xc
c0023afc:	c3                   	ret    
c0023afd:	90                   	nop

c0023afe <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023afe:	83 ec 0c             	sub    esp,0xc
c0023b01:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023b05:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023b08:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023b0b:	09 c2                	or     edx,eax
c0023b0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b11:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023b17:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023b19:	31 c0                	xor    eax,eax
c0023b1b:	c1 e9 08             	shr    ecx,0x8
c0023b1e:	83 e1 0f             	and    ecx,0xf
c0023b21:	39 c8                	cmp    eax,ecx
c0023b23:	74 0a                	je     c0023b2f <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023b25:	f6 c2 01             	test   dl,0x1
c0023b28:	74 18                	je     c0023b42 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023b2a:	d1 ea                	shr    edx,1
c0023b2c:	40                   	inc    eax
c0023b2d:	eb f2                	jmp    c0023b21 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023b2f:	83 ec 0c             	sub    esp,0xc
c0023b32:	68 20 c2 02 c0       	push   0xc002c220
c0023b37:	e8 53 63 ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c0023b3c:	83 c4 10             	add    esp,0x10
c0023b3f:	83 c8 ff             	or     eax,0xffffffff
c0023b42:	83 c4 0c             	add    esp,0xc
c0023b45:	c3                   	ret    

c0023b46 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023b46:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023b4a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023b4d:	89 c2                	mov    edx,eax
c0023b4f:	c1 ea 08             	shr    edx,0x8
c0023b52:	83 e2 0f             	and    edx,0xf
c0023b55:	fe ca                	dec    dl
c0023b57:	75 31                	jne    c0023b8a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023b59:	83 e0 0f             	and    eax,0xf
c0023b5c:	3c 03                	cmp    al,0x3
c0023b5e:	75 2a                	jne    c0023b8a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023b60:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023b63:	b8 02 00 00 00       	mov    eax,0x2
c0023b68:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023b6e:	74 1c                	je     c0023b8c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023b70:	b8 04 00 00 00       	mov    eax,0x4
c0023b75:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023b7b:	74 0f                	je     c0023b8c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023b7d:	31 c0                	xor    eax,eax
c0023b7f:	83 fa 03             	cmp    edx,0x3
c0023b82:	0f 94 c0             	sete   al
c0023b85:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023b89:	c3                   	ret    
c0023b8a:	31 c0                	xor    eax,eax
c0023b8c:	c3                   	ret    
c0023b8d:	90                   	nop

c0023b8e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023b8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023b92:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b95:	0f ba e2 0f          	bt     edx,0xf
c0023b99:	72 f7                	jb     c0023b92 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023b9b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b9e:	83 ca 10             	or     edx,0x10
c0023ba1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023ba4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023ba7:	83 ca 01             	or     edx,0x1
c0023baa:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023bad:	c3                   	ret    

c0023bae <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023bae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023bb2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023bb5:	83 e2 fe             	and    edx,0xfffffffe
c0023bb8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023bbb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023bbe:	83 e2 ef             	and    edx,0xffffffef
c0023bc1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023bc4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023bc7:	0f ba e2 0e          	bt     edx,0xe
c0023bcb:	72 f7                	jb     c0023bc4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023bcd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023bd0:	0f ba e2 0f          	bt     edx,0xf
c0023bd4:	72 ee                	jb     c0023bc4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023bd6:	c3                   	ret    
c0023bd7:	90                   	nop

c0023bd8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023bd8:	55                   	push   ebp
c0023bd9:	57                   	push   edi
c0023bda:	56                   	push   esi
c0023bdb:	53                   	push   ebx
c0023bdc:	83 ec 1c             	sub    esp,0x1c
c0023bdf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023be3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023be7:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023beb:	53                   	push   ebx
c0023bec:	89 fd                	mov    ebp,edi
c0023bee:	56                   	push   esi
c0023bef:	c1 e5 0a             	shl    ebp,0xa
c0023bf2:	e8 b7 ff ff ff       	call   c0023bae <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023bf7:	83 ec 0c             	sub    esp,0xc
c0023bfa:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023c00:	01 e8                	add    eax,ebp
c0023c02:	89 03                	mov    DWORD PTR [ebx],eax
c0023c04:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023c06:	68 00 04 00 00       	push   0x400
c0023c0b:	6a 00                	push   0x0
c0023c0d:	50                   	push   eax
c0023c0e:	e8 3d cb fd ff       	call   c0000750 <memset>
c0023c13:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023c19:	89 fa                	mov    edx,edi
c0023c1b:	01 e8                	add    eax,ebp
c0023c1d:	c1 e7 0d             	shl    edi,0xd
c0023c20:	89 03                	mov    DWORD PTR [ebx],eax
c0023c22:	c1 e2 08             	shl    edx,0x8
c0023c25:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023c2c:	81 c2 00 80 00 00    	add    edx,0x8000
c0023c32:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023c36:	89 d0                	mov    eax,edx
c0023c38:	83 c4 1c             	add    esp,0x1c
c0023c3b:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023c41:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023c44:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023c47:	68 00 01 00 00       	push   0x100
c0023c4c:	6a 00                	push   0x0
c0023c4e:	50                   	push   eax
c0023c4f:	e8 fc ca fd ff       	call   c0000750 <memset>
c0023c54:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023c58:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023c5e:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023c64:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023c68:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023c6b:	83 c4 10             	add    esp,0x10
c0023c6e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023c75:	31 ff                	xor    edi,edi
c0023c77:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023c7d:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023c83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023c87:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023c8d:	83 c5 20             	add    ebp,0x20
c0023c90:	01 f8                	add    eax,edi
c0023c92:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023c95:	52                   	push   edx
c0023c96:	68 00 01 00 00       	push   0x100
c0023c9b:	6a 00                	push   0x0
c0023c9d:	50                   	push   eax
c0023c9e:	e8 ad ca fd ff       	call   c0000750 <memset>
c0023ca3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023ca7:	83 c4 10             	add    esp,0x10
c0023caa:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023cb0:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023cb7:	01 f8                	add    eax,edi
c0023cb9:	81 c7 00 01 00 00    	add    edi,0x100
c0023cbf:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023cc2:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023cc8:	75 b3                	jne    c0023c7d <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023cca:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023cce:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023cd2:	83 c4 1c             	add    esp,0x1c
c0023cd5:	5b                   	pop    ebx
c0023cd6:	5e                   	pop    esi
c0023cd7:	5f                   	pop    edi
c0023cd8:	5d                   	pop    ebp
c0023cd9:	e9 b0 fe ff ff       	jmp    c0023b8e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023cde <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023cde:	55                   	push   ebp
c0023cdf:	57                   	push   edi
c0023ce0:	56                   	push   esi
c0023ce1:	53                   	push   ebx
c0023ce2:	31 db                	xor    ebx,ebx
c0023ce4:	83 ec 0c             	sub    esp,0xc
c0023ce7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023ceb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023cef:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023cf2:	f7 c7 01 00 00 00    	test   edi,0x1
c0023cf8:	74 7a                	je     c0023d74 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023cfa:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0023cfe:	89 d8                	mov    eax,ebx
c0023d00:	c1 e0 07             	shl    eax,0x7
c0023d03:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0023d0a:	55                   	push   ebp
c0023d0b:	56                   	push   esi
c0023d0c:	e8 35 fe ff ff       	call   c0023b46 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023d11:	5a                   	pop    edx
c0023d12:	83 f8 01             	cmp    eax,0x1
c0023d15:	59                   	pop    ecx
c0023d16:	75 21                	jne    c0023d39 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0023d18:	50                   	push   eax
c0023d19:	53                   	push   ebx
c0023d1a:	55                   	push   ebp
c0023d1b:	56                   	push   esi
c0023d1c:	e8 b7 fe ff ff       	call   c0023bd8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023d21:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023d28:	e8 6c b8 fe ff       	call   c000f599 <malloc>
c0023d2d:	89 c5                	mov    ebp,eax
c0023d2f:	89 04 24             	mov    DWORD PTR [esp],eax
c0023d32:	e8 03 0d 00 00       	call   c0024a3a <SATA::SATA()>
c0023d37:	eb 24                	jmp    c0023d5d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0023d39:	83 f8 04             	cmp    eax,0x4
c0023d3c:	75 36                	jne    c0023d74 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023d3e:	51                   	push   ecx
c0023d3f:	53                   	push   ebx
c0023d40:	55                   	push   ebp
c0023d41:	56                   	push   esi
c0023d42:	e8 91 fe ff ff       	call   c0023bd8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023d47:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023d4e:	e8 46 b8 fe ff       	call   c000f599 <malloc>
c0023d53:	89 c5                	mov    ebp,eax
c0023d55:	89 04 24             	mov    DWORD PTR [esp],eax
c0023d58:	e8 53 10 00 00       	call   c0024db0 <SATAPI::SATAPI()>
c0023d5d:	58                   	pop    eax
c0023d5e:	5a                   	pop    edx
c0023d5f:	55                   	push   ebp
c0023d60:	56                   	push   esi
c0023d61:	e8 f6 fd fe ff       	call   c0013b5c <Device::addChild(Device*)>
c0023d66:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0023d69:	56                   	push   esi
c0023d6a:	6a 00                	push   0x0
c0023d6c:	53                   	push   ebx
c0023d6d:	55                   	push   ebp
c0023d6e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0023d71:	83 c4 20             	add    esp,0x20
c0023d74:	d1 ef                	shr    edi,1
c0023d76:	43                   	inc    ebx
c0023d77:	83 fb 20             	cmp    ebx,0x20
c0023d7a:	0f 85 72 ff ff ff    	jne    c0023cf2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023d80:	83 c4 0c             	add    esp,0xc
c0023d83:	5b                   	pop    ebx
c0023d84:	5e                   	pop    esi
c0023d85:	5f                   	pop    edi
c0023d86:	5d                   	pop    ebp
c0023d87:	c3                   	ret    

c0023d88 <SATABus::open(int, int, void*)>:
c0023d88:	83 ec 14             	sub    esp,0x14
c0023d8b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023d8f:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023d95:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023d9b:	52                   	push   edx
c0023d9c:	50                   	push   eax
c0023d9d:	e8 3c ff ff ff       	call   c0023cde <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023da2:	31 c0                	xor    eax,eax
c0023da4:	83 c4 1c             	add    esp,0x1c
c0023da7:	c3                   	ret    

c0023da8 <ATA::close(int, int, void*)>:
c0023da8:	83 ec 0c             	sub    esp,0xc
c0023dab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023daf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023db5:	85 c0                	test   eax,eax
c0023db7:	74 0c                	je     c0023dc5 <ATA::close(int, int, void*)+0x1d>
c0023db9:	83 ec 0c             	sub    esp,0xc
c0023dbc:	8b 10                	mov    edx,DWORD PTR [eax]
c0023dbe:	50                   	push   eax
c0023dbf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023dc2:	83 c4 10             	add    esp,0x10
c0023dc5:	31 c0                	xor    eax,eax
c0023dc7:	83 c4 0c             	add    esp,0xc
c0023dca:	c3                   	ret    
c0023dcb:	90                   	nop

c0023dcc <ATA::powerSaving(PowerSavingLevel)>:
c0023dcc:	c3                   	ret    
c0023dcd:	90                   	nop

c0023dce <ATA::ATA()>:
c0023dce:	83 ec 0c             	sub    esp,0xc
c0023dd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023dd5:	83 ec 04             	sub    esp,0x4
c0023dd8:	68 00 02 00 00       	push   0x200
c0023ddd:	68 19 c3 02 c0       	push   0xc002c319
c0023de2:	50                   	push   eax
c0023de3:	e8 aa 01 ff ff       	call   c0013f92 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023de8:	83 c4 10             	add    esp,0x10
c0023deb:	ba 9c c2 02 c0       	mov    edx,0xc002c29c
c0023df0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023df4:	89 10                	mov    DWORD PTR [eax],edx
c0023df6:	90                   	nop
c0023df7:	83 c4 0c             	add    esp,0xc
c0023dfa:	c3                   	ret    
c0023dfb:	90                   	nop

c0023dfc <ATA::flush(bool)>:
c0023dfc:	53                   	push   ebx
c0023dfd:	83 ec 08             	sub    esp,0x8
c0023e00:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023e05:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023e09:	19 c0                	sbb    eax,eax
c0023e0b:	83 e0 fd             	and    eax,0xfffffffd
c0023e0e:	05 ea 00 00 00       	add    eax,0xea
c0023e13:	50                   	push   eax
c0023e14:	6a 07                	push   0x7
c0023e16:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e1d:	50                   	push   eax
c0023e1e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e24:	e8 53 f1 ff ff       	call   c0022f7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e29:	83 c4 0c             	add    esp,0xc
c0023e2c:	6a 00                	push   0x0
c0023e2e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e35:	50                   	push   eax
c0023e36:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e3c:	e8 dd fb ff ff       	call   c0023a1e <IDE::polling(unsigned char, unsigned int)>
c0023e41:	83 c4 18             	add    esp,0x18
c0023e44:	5b                   	pop    ebx
c0023e45:	c3                   	ret    

c0023e46 <ATA::readyForCommand()>:
c0023e46:	56                   	push   esi
c0023e47:	53                   	push   ebx
c0023e48:	31 db                	xor    ebx,ebx
c0023e4a:	50                   	push   eax
c0023e4b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023e4f:	50                   	push   eax
c0023e50:	6a 0c                	push   0xc
c0023e52:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023e59:	50                   	push   eax
c0023e5a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023e60:	e8 d7 f1 ff ff       	call   c002303c <IDE::read(unsigned char, unsigned char)>
c0023e65:	83 c4 10             	add    esp,0x10
c0023e68:	a8 88                	test   al,0x88
c0023e6a:	74 23                	je     c0023e8f <ATA::readyForCommand()+0x49>
c0023e6c:	43                   	inc    ebx
c0023e6d:	83 fb 63             	cmp    ebx,0x63
c0023e70:	7e dd                	jle    c0023e4f <ATA::readyForCommand()+0x9>
c0023e72:	51                   	push   ecx
c0023e73:	51                   	push   ecx
c0023e74:	6a 00                	push   0x0
c0023e76:	68 40 42 0f 00       	push   0xf4240
c0023e7b:	e8 79 9e ff ff       	call   c001dcf9 <nanoSleep(unsigned long long)>
c0023e80:	83 c4 10             	add    esp,0x10
c0023e83:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023e89:	75 c4                	jne    c0023e4f <ATA::readyForCommand()+0x9>
c0023e8b:	31 c0                	xor    eax,eax
c0023e8d:	eb 02                	jmp    c0023e91 <ATA::readyForCommand()+0x4b>
c0023e8f:	b0 01                	mov    al,0x1
c0023e91:	5a                   	pop    edx
c0023e92:	5b                   	pop    ebx
c0023e93:	5e                   	pop    esi
c0023e94:	c3                   	ret    
c0023e95:	90                   	nop

c0023e96 <ATA::access(unsigned long long, int, void*, bool)>:
c0023e96:	55                   	push   ebp
c0023e97:	57                   	push   edi
c0023e98:	56                   	push   esi
c0023e99:	53                   	push   ebx
c0023e9a:	83 ec 2c             	sub    esp,0x2c
c0023e9d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023ea1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023ea5:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023ea9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023ead:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023eb1:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023eb5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023eb9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023ebf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023ec3:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023ec9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023ecd:	c1 e0 06             	shl    eax,0x6
c0023ed0:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023ed8:	74 5d                	je     c0023f37 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023eda:	89 fa                	mov    edx,edi
c0023edc:	89 f0                	mov    eax,esi
c0023ede:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023ee2:	c1 ea 1c             	shr    edx,0x1c
c0023ee5:	89 d1                	mov    ecx,edx
c0023ee7:	09 c1                	or     ecx,eax
c0023ee9:	74 25                	je     c0023f10 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023eeb:	31 ed                	xor    ebp,ebp
c0023eed:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023ef4:	89 fa                	mov    edx,edi
c0023ef6:	89 f0                	mov    eax,esi
c0023ef8:	0f ad d0             	shrd   eax,edx,cl
c0023efb:	d3 ea                	shr    edx,cl
c0023efd:	f6 c1 20             	test   cl,0x20
c0023f00:	74 02                	je     c0023f04 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023f02:	89 d0                	mov    eax,edx
c0023f04:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023f08:	45                   	inc    ebp
c0023f09:	83 fd 06             	cmp    ebp,0x6
c0023f0c:	75 df                	jne    c0023eed <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023f0e:	eb 76                	jmp    c0023f86 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023f10:	89 f0                	mov    eax,esi
c0023f12:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023f17:	89 fa                	mov    edx,edi
c0023f19:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023f20:	0f ac d0 10          	shrd   eax,edx,0x10
c0023f24:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023f29:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023f2d:	c1 ee 18             	shr    esi,0x18
c0023f30:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023f35:	eb 56                	jmp    c0023f8d <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023f37:	6a 00                	push   0x0
c0023f39:	6a 3f                	push   0x3f
c0023f3b:	57                   	push   edi
c0023f3c:	56                   	push   esi
c0023f3d:	e8 22 29 00 00       	call   c0026864 <__umoddi3>
c0023f42:	83 c4 10             	add    esp,0x10
c0023f45:	40                   	inc    eax
c0023f46:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023f4a:	6a 00                	push   0x0
c0023f4c:	68 f0 03 00 00       	push   0x3f0
c0023f51:	57                   	push   edi
c0023f52:	56                   	push   esi
c0023f53:	e8 0c 28 00 00       	call   c0026764 <__udivdi3>
c0023f58:	83 c4 10             	add    esp,0x10
c0023f5b:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0023f60:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023f67:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023f6c:	6a 00                	push   0x0
c0023f6e:	6a 3f                	push   0x3f
c0023f70:	57                   	push   edi
c0023f71:	56                   	push   esi
c0023f72:	e8 ed 27 00 00       	call   c0026764 <__udivdi3>
c0023f77:	83 c4 10             	add    esp,0x10
c0023f7a:	89 c6                	mov    esi,eax
c0023f7c:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0023f81:	83 e6 0f             	and    esi,0xf
c0023f84:	eb 07                	jmp    c0023f8d <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023f86:	31 f6                	xor    esi,esi
c0023f88:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023f8d:	bf 01 00 00 00       	mov    edi,0x1
c0023f92:	50                   	push   eax
c0023f93:	6a 00                	push   0x0
c0023f95:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f9c:	50                   	push   eax
c0023f9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023fa1:	e8 e2 f1 ff ff       	call   c0023188 <IDE::enableIRQs(unsigned char, bool)>
c0023fa6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023fa9:	e8 98 fe ff ff       	call   c0023e46 <ATA::readyForCommand()>
c0023fae:	83 c4 10             	add    esp,0x10
c0023fb1:	84 c0                	test   al,al
c0023fb3:	0f 84 5a 02 00 00    	je     c0024213 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0023fb9:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0023fbf:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023fc5:	c1 e0 04             	shl    eax,0x4
c0023fc8:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0023fcf:	09 c6                	or     esi,eax
c0023fd1:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023fd6:	75 05                	jne    c0023fdd <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0023fd8:	83 ce a0             	or     esi,0xffffffa0
c0023fdb:	eb 03                	jmp    c0023fe0 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0023fdd:	83 ce e0             	or     esi,0xffffffe0
c0023fe0:	89 f0                	mov    eax,esi
c0023fe2:	0f b6 f0             	movzx  esi,al
c0023fe5:	56                   	push   esi
c0023fe6:	6a 06                	push   0x6
c0023fe8:	51                   	push   ecx
c0023fe9:	52                   	push   edx
c0023fea:	e8 8d ef ff ff       	call   c0022f7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fef:	83 c4 10             	add    esp,0x10
c0023ff2:	6a 00                	push   0x0
c0023ff4:	6a 01                	push   0x1
c0023ff6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ffd:	50                   	push   eax
c0023ffe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024004:	e8 73 ef ff ff       	call   c0022f7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024009:	83 c4 10             	add    esp,0x10
c002400c:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024011:	75 6e                	jne    c0024081 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0024013:	6a 00                	push   0x0
c0024015:	6a 08                	push   0x8
c0024017:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002401e:	50                   	push   eax
c002401f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024025:	e8 52 ef ff ff       	call   c0022f7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002402a:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002402f:	50                   	push   eax
c0024030:	6a 09                	push   0x9
c0024032:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024039:	50                   	push   eax
c002403a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024040:	e8 37 ef ff ff       	call   c0022f7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024045:	83 c4 20             	add    esp,0x20
c0024048:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002404d:	50                   	push   eax
c002404e:	6a 0a                	push   0xa
c0024050:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024057:	50                   	push   eax
c0024058:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002405e:	e8 19 ef ff ff       	call   c0022f7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024063:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024068:	50                   	push   eax
c0024069:	6a 0b                	push   0xb
c002406b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024072:	50                   	push   eax
c0024073:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024079:	e8 fe ee ff ff       	call   c0022f7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002407e:	83 c4 20             	add    esp,0x20
c0024081:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024086:	50                   	push   eax
c0024087:	6a 02                	push   0x2
c0024089:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024090:	50                   	push   eax
c0024091:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024097:	e8 e0 ee ff ff       	call   c0022f7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002409c:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00240a1:	50                   	push   eax
c00240a2:	6a 03                	push   0x3
c00240a4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240ab:	50                   	push   eax
c00240ac:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240b2:	e8 c5 ee ff ff       	call   c0022f7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240b7:	83 c4 20             	add    esp,0x20
c00240ba:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00240bf:	50                   	push   eax
c00240c0:	6a 04                	push   0x4
c00240c2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240c9:	50                   	push   eax
c00240ca:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240d0:	e8 a7 ee ff ff       	call   c0022f7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240d5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00240da:	50                   	push   eax
c00240db:	6a 05                	push   0x5
c00240dd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240e4:	50                   	push   eax
c00240e5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240eb:	e8 8c ee ff ff       	call   c0022f7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240f0:	83 c4 20             	add    esp,0x20
c00240f3:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00240f8:	0f 94 c0             	sete   al
c00240fb:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024100:	74 09                	je     c002410b <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024102:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024109:	eb 07                	jmp    c0024112 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c002410b:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024112:	0f b6 c0             	movzx  eax,al
c0024115:	50                   	push   eax
c0024116:	6a 07                	push   0x7
c0024118:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002411f:	50                   	push   eax
c0024120:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024126:	e8 51 ee ff ff       	call   c0022f7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002412b:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002412f:	83 c4 10             	add    esp,0x10
c0024132:	85 f6                	test   esi,esi
c0024134:	0f 84 ba 00 00 00    	je     c00241f4 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c002413a:	50                   	push   eax
c002413b:	6a 01                	push   0x1
c002413d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024144:	50                   	push   eax
c0024145:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002414b:	e8 ce f8 ff ff       	call   c0023a1e <IDE::polling(unsigned char, unsigned int)>
c0024150:	83 c4 10             	add    esp,0x10
c0024153:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024159:	84 c0                	test   al,al
c002415b:	74 2c                	je     c0024189 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c002415d:	0f b6 f8             	movzx  edi,al
c0024160:	0f b6 d2             	movzx  edx,dl
c0024163:	57                   	push   edi
c0024164:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002416b:	50                   	push   eax
c002416c:	52                   	push   edx
c002416d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024173:	e8 f6 f7 ff ff       	call   c002396e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024178:	c7 04 24 74 c2 02 c0 	mov    DWORD PTR [esp],0xc002c274
c002417f:	e8 9f e5 fe ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0024184:	e9 87 00 00 00       	jmp    c0024210 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024189:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002418e:	74 33                	je     c00241c3 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024190:	31 ed                	xor    ebp,ebp
c0024192:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024196:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c002419a:	50                   	push   eax
c002419b:	50                   	push   eax
c002419c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241a3:	50                   	push   eax
c00241a4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241aa:	e8 bb ed ff ff       	call   c0022f6a <IDE::getBase(unsigned char)>
c00241af:	89 c2                	mov    edx,eax
c00241b1:	89 f8                	mov    eax,edi
c00241b3:	66 ef                	out    dx,ax
c00241b5:	45                   	inc    ebp
c00241b6:	83 c4 10             	add    esp,0x10
c00241b9:	81 fd 00 01 00 00    	cmp    ebp,0x100
c00241bf:	75 d1                	jne    c0024192 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c00241c1:	eb 23                	jmp    c00241e6 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c00241c3:	0f b6 d2             	movzx  edx,dl
c00241c6:	51                   	push   ecx
c00241c7:	51                   	push   ecx
c00241c8:	52                   	push   edx
c00241c9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241cf:	e8 96 ed ff ff       	call   c0022f6a <IDE::getBase(unsigned char)>
c00241d4:	b9 00 01 00 00       	mov    ecx,0x100
c00241d9:	89 c2                	mov    edx,eax
c00241db:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00241df:	fc                   	cld    
c00241e0:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00241e3:	83 c4 10             	add    esp,0x10
c00241e6:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c00241ee:	4e                   	dec    esi
c00241ef:	e9 3e ff ff ff       	jmp    c0024132 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c00241f4:	31 ff                	xor    edi,edi
c00241f6:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00241fb:	74 16                	je     c0024213 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00241fd:	50                   	push   eax
c00241fe:	50                   	push   eax
c00241ff:	31 c0                	xor    eax,eax
c0024201:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024206:	0f 94 c0             	sete   al
c0024209:	50                   	push   eax
c002420a:	53                   	push   ebx
c002420b:	e8 ec fb ff ff       	call   c0023dfc <ATA::flush(bool)>
c0024210:	83 c4 10             	add    esp,0x10
c0024213:	83 c4 2c             	add    esp,0x2c
c0024216:	89 f8                	mov    eax,edi
c0024218:	5b                   	pop    ebx
c0024219:	5e                   	pop    esi
c002421a:	5f                   	pop    edi
c002421b:	5d                   	pop    ebp
c002421c:	c3                   	ret    
c002421d:	90                   	nop

c002421e <ATA::read(unsigned long long, int, void*)>:
c002421e:	57                   	push   edi
c002421f:	b8 04 00 00 00       	mov    eax,0x4
c0024224:	56                   	push   esi
c0024225:	53                   	push   ebx
c0024226:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002422a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002422e:	8d 7a ff             	lea    edi,[edx-0x1]
c0024231:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024235:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024239:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002423f:	77 25                	ja     c0024266 <ATA::read(unsigned long long, int, void*)+0x48>
c0024241:	b8 06 00 00 00       	mov    eax,0x6
c0024246:	85 f6                	test   esi,esi
c0024248:	74 1c                	je     c0024266 <ATA::read(unsigned long long, int, void*)+0x48>
c002424a:	50                   	push   eax
c002424b:	50                   	push   eax
c002424c:	6a 00                	push   0x0
c002424e:	56                   	push   esi
c002424f:	52                   	push   edx
c0024250:	53                   	push   ebx
c0024251:	51                   	push   ecx
c0024252:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024256:	e8 3b fc ff ff       	call   c0023e96 <ATA::access(unsigned long long, int, void*, bool)>
c002425b:	83 c4 20             	add    esp,0x20
c002425e:	85 c0                	test   eax,eax
c0024260:	0f 95 c0             	setne  al
c0024263:	0f b6 c0             	movzx  eax,al
c0024266:	5b                   	pop    ebx
c0024267:	5e                   	pop    esi
c0024268:	5f                   	pop    edi
c0024269:	c3                   	ret    

c002426a <ATA::write(unsigned long long, int, void*)>:
c002426a:	57                   	push   edi
c002426b:	b8 04 00 00 00       	mov    eax,0x4
c0024270:	56                   	push   esi
c0024271:	53                   	push   ebx
c0024272:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024276:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002427a:	8d 7a ff             	lea    edi,[edx-0x1]
c002427d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024281:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024285:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002428b:	77 25                	ja     c00242b2 <ATA::write(unsigned long long, int, void*)+0x48>
c002428d:	b8 06 00 00 00       	mov    eax,0x6
c0024292:	85 f6                	test   esi,esi
c0024294:	74 1c                	je     c00242b2 <ATA::write(unsigned long long, int, void*)+0x48>
c0024296:	50                   	push   eax
c0024297:	50                   	push   eax
c0024298:	6a 01                	push   0x1
c002429a:	56                   	push   esi
c002429b:	52                   	push   edx
c002429c:	53                   	push   ebx
c002429d:	51                   	push   ecx
c002429e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00242a2:	e8 ef fb ff ff       	call   c0023e96 <ATA::access(unsigned long long, int, void*, bool)>
c00242a7:	83 c4 20             	add    esp,0x20
c00242aa:	85 c0                	test   eax,eax
c00242ac:	0f 95 c0             	setne  al
c00242af:	0f b6 c0             	movzx  eax,al
c00242b2:	5b                   	pop    ebx
c00242b3:	5e                   	pop    esi
c00242b4:	5f                   	pop    edi
c00242b5:	c3                   	ret    

c00242b6 <ATA::detectCHS()>:
c00242b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00242ba:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00242c0:	c1 e0 06             	shl    eax,0x6
c00242c3:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00242c9:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00242d3:	c7 44 24 04 7f c2 02 c0 	mov    DWORD PTR [esp+0x4],0xc002c27f
c00242db:	e9 af 5b ff ff       	jmp    c0019e8f <Krnl::panic(char const*)>

c00242e0 <ATA::open(int, int, void*)>:
c00242e0:	53                   	push   ebx
c00242e1:	83 ec 08             	sub    esp,0x8
c00242e4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00242e8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00242ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00242f0:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00242f6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00242fc:	c1 e0 06             	shl    eax,0x6
c00242ff:	01 d0                	add    eax,edx
c0024301:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024308:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002430e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024315:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002431f:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024325:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002432c:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024333:	75 0c                	jne    c0024341 <ATA::open(int, int, void*)+0x61>
c0024335:	83 ec 0c             	sub    esp,0xc
c0024338:	53                   	push   ebx
c0024339:	e8 78 ff ff ff       	call   c00242b6 <ATA::detectCHS()>
c002433e:	83 c4 10             	add    esp,0x10
c0024341:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024347:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002434d:	c1 e0 06             	shl    eax,0x6
c0024350:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024357:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024361:	d1 e8                	shr    eax,1
c0024363:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024369:	6a 04                	push   0x4
c002436b:	6a 0c                	push   0xc
c002436d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024374:	50                   	push   eax
c0024375:	52                   	push   edx
c0024376:	e8 01 ec ff ff       	call   c0022f7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002437b:	90                   	nop
c002437c:	90                   	nop
c002437d:	6a 00                	push   0x0
c002437f:	6a 0c                	push   0xc
c0024381:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024388:	50                   	push   eax
c0024389:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002438f:	e8 e8 eb ff ff       	call   c0022f7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024394:	83 c4 14             	add    esp,0x14
c0024397:	53                   	push   ebx
c0024398:	e8 5d fc fe ff       	call   c0013ffa <PhysicalDisk::startCache()>
c002439d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00243a0:	e8 d7 1e ff ff       	call   c001627c <createPartitionsForDisk(PhysicalDisk*)>
c00243a5:	31 c0                	xor    eax,eax
c00243a7:	83 c4 18             	add    esp,0x18
c00243aa:	5b                   	pop    ebx
c00243ab:	c3                   	ret    

c00243ac <ATAPI::write(unsigned long long, int, void*)>:
c00243ac:	b8 03 00 00 00       	mov    eax,0x3
c00243b1:	c3                   	ret    

c00243b2 <ATAPI::close(int, int, void*)>:
c00243b2:	83 ec 0c             	sub    esp,0xc
c00243b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243b9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00243bf:	85 c0                	test   eax,eax
c00243c1:	74 0c                	je     c00243cf <ATAPI::close(int, int, void*)+0x1d>
c00243c3:	83 ec 0c             	sub    esp,0xc
c00243c6:	8b 10                	mov    edx,DWORD PTR [eax]
c00243c8:	50                   	push   eax
c00243c9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00243cc:	83 c4 10             	add    esp,0x10
c00243cf:	31 c0                	xor    eax,eax
c00243d1:	83 c4 0c             	add    esp,0xc
c00243d4:	c3                   	ret    
c00243d5:	90                   	nop

c00243d6 <ATAPI::ATAPI()>:
c00243d6:	83 ec 0c             	sub    esp,0xc
c00243d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243dd:	83 ec 04             	sub    esp,0x4
c00243e0:	68 00 08 00 00       	push   0x800
c00243e5:	68 b9 c3 02 c0       	push   0xc002c3b9
c00243ea:	50                   	push   eax
c00243eb:	e8 a2 fb fe ff       	call   c0013f92 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00243f0:	83 c4 10             	add    esp,0x10
c00243f3:	ba d4 c2 02 c0       	mov    edx,0xc002c2d4
c00243f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243fc:	89 10                	mov    DWORD PTR [eax],edx
c00243fe:	90                   	nop
c00243ff:	83 c4 0c             	add    esp,0xc
c0024402:	c3                   	ret    
c0024403:	90                   	nop

c0024404 <ATAPI::readyForCommand()>:
c0024404:	56                   	push   esi
c0024405:	53                   	push   ebx
c0024406:	31 db                	xor    ebx,ebx
c0024408:	50                   	push   eax
c0024409:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002440d:	50                   	push   eax
c002440e:	6a 0c                	push   0xc
c0024410:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024417:	50                   	push   eax
c0024418:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002441e:	e8 19 ec ff ff       	call   c002303c <IDE::read(unsigned char, unsigned char)>
c0024423:	83 c4 10             	add    esp,0x10
c0024426:	a8 88                	test   al,0x88
c0024428:	74 23                	je     c002444d <ATAPI::readyForCommand()+0x49>
c002442a:	43                   	inc    ebx
c002442b:	83 fb 63             	cmp    ebx,0x63
c002442e:	7e dd                	jle    c002440d <ATAPI::readyForCommand()+0x9>
c0024430:	51                   	push   ecx
c0024431:	51                   	push   ecx
c0024432:	6a 00                	push   0x0
c0024434:	68 40 42 0f 00       	push   0xf4240
c0024439:	e8 bb 98 ff ff       	call   c001dcf9 <nanoSleep(unsigned long long)>
c002443e:	83 c4 10             	add    esp,0x10
c0024441:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024447:	75 c4                	jne    c002440d <ATAPI::readyForCommand()+0x9>
c0024449:	31 c0                	xor    eax,eax
c002444b:	eb 02                	jmp    c002444f <ATAPI::readyForCommand()+0x4b>
c002444d:	b0 01                	mov    al,0x1
c002444f:	5a                   	pop    edx
c0024450:	5b                   	pop    ebx
c0024451:	5e                   	pop    esi
c0024452:	c3                   	ret    
c0024453:	90                   	nop

c0024454 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024454:	55                   	push   ebp
c0024455:	57                   	push   edi
c0024456:	56                   	push   esi
c0024457:	53                   	push   ebx
c0024458:	83 ec 20             	sub    esp,0x20
c002445b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002445f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024463:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024467:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002446b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002446f:	6a 01                	push   0x1
c0024471:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024478:	50                   	push   eax
c0024479:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002447f:	e8 04 ed ff ff       	call   c0023188 <IDE::enableIRQs(unsigned char, bool)>
c0024484:	5e                   	pop    esi
c0024485:	58                   	pop    eax
c0024486:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002448d:	50                   	push   eax
c002448e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024494:	e8 bd ea ff ff       	call   c0022f56 <IDE::prepareInterrupt(unsigned char)>
c0024499:	89 3c 24             	mov    DWORD PTR [esp],edi
c002449c:	e8 63 ff ff ff       	call   c0024404 <ATAPI::readyForCommand()>
c00244a1:	83 c4 10             	add    esp,0x10
c00244a4:	84 c0                	test   al,al
c00244a6:	75 0a                	jne    c00244b2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00244a8:	bb 01 00 00 00       	mov    ebx,0x1
c00244ad:	e9 57 02 00 00       	jmp    c0024709 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00244b2:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c00244b8:	c1 e0 04             	shl    eax,0x4
c00244bb:	0f b6 c0             	movzx  eax,al
c00244be:	50                   	push   eax
c00244bf:	6a 06                	push   0x6
c00244c1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244c8:	50                   	push   eax
c00244c9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244cf:	e8 a8 ea ff ff       	call   c0022f7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244d4:	6a 00                	push   0x0
c00244d6:	6a 01                	push   0x1
c00244d8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244df:	50                   	push   eax
c00244e0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244e6:	e8 91 ea ff ff       	call   c0022f7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244eb:	83 c4 20             	add    esp,0x20
c00244ee:	0f b6 c3             	movzx  eax,bl
c00244f1:	0f b6 df             	movzx  ebx,bh
c00244f4:	50                   	push   eax
c00244f5:	6a 04                	push   0x4
c00244f7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244fe:	50                   	push   eax
c00244ff:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024505:	e8 72 ea ff ff       	call   c0022f7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002450a:	53                   	push   ebx
c002450b:	6a 05                	push   0x5
c002450d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024514:	50                   	push   eax
c0024515:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002451b:	e8 5c ea ff ff       	call   c0022f7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024520:	83 c4 20             	add    esp,0x20
c0024523:	68 a0 00 00 00       	push   0xa0
c0024528:	6a 07                	push   0x7
c002452a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024531:	50                   	push   eax
c0024532:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024538:	e8 3f ea ff ff       	call   c0022f7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002453d:	83 c4 0c             	add    esp,0xc
c0024540:	6a 01                	push   0x1
c0024542:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024549:	50                   	push   eax
c002454a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024550:	e8 c9 f4 ff ff       	call   c0023a1e <IDE::polling(unsigned char, unsigned int)>
c0024555:	83 c4 10             	add    esp,0x10
c0024558:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c002455e:	84 c0                	test   al,al
c0024560:	74 23                	je     c0024585 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024562:	0f b6 d8             	movzx  ebx,al
c0024565:	0f b6 d2             	movzx  edx,dl
c0024568:	53                   	push   ebx
c0024569:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024570:	50                   	push   eax
c0024571:	52                   	push   edx
c0024572:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024578:	e8 f1 f3 ff ff       	call   c002396e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002457d:	83 c4 10             	add    esp,0x10
c0024580:	e9 84 01 00 00       	jmp    c0024709 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024585:	0f b6 d2             	movzx  edx,dl
c0024588:	53                   	push   ebx
c0024589:	53                   	push   ebx
c002458a:	52                   	push   edx
c002458b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024591:	e8 d4 e9 ff ff       	call   c0022f6a <IDE::getBase(unsigned char)>
c0024596:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002459a:	b9 06 00 00 00       	mov    ecx,0x6
c002459f:	89 c2                	mov    edx,eax
c00245a1:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00245a4:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00245a8:	83 c4 10             	add    esp,0x10
c00245ab:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00245b1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00245b8:	85 db                	test   ebx,ebx
c00245ba:	0f 84 ec 00 00 00    	je     c00246ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00245c0:	51                   	push   ecx
c00245c1:	51                   	push   ecx
c00245c2:	52                   	push   edx
c00245c3:	50                   	push   eax
c00245c4:	e8 21 eb ff ff       	call   c00230ea <IDE::waitInterrupt(unsigned char)>
c00245c9:	83 c4 10             	add    esp,0x10
c00245cc:	84 c0                	test   al,al
c00245ce:	0f 84 d4 fe ff ff    	je     c00244a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00245d4:	56                   	push   esi
c00245d5:	56                   	push   esi
c00245d6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245dd:	50                   	push   eax
c00245de:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245e4:	e8 6d e9 ff ff       	call   c0022f56 <IDE::prepareInterrupt(unsigned char)>
c00245e9:	83 c4 0c             	add    esp,0xc
c00245ec:	6a 04                	push   0x4
c00245ee:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245f5:	50                   	push   eax
c00245f6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245fc:	e8 3b ea ff ff       	call   c002303c <IDE::read(unsigned char, unsigned char)>
c0024601:	83 c4 0c             	add    esp,0xc
c0024604:	89 c6                	mov    esi,eax
c0024606:	6a 05                	push   0x5
c0024608:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002460f:	50                   	push   eax
c0024610:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024616:	e8 21 ea ff ff       	call   c002303c <IDE::read(unsigned char, unsigned char)>
c002461b:	89 f1                	mov    ecx,esi
c002461d:	0f b6 c0             	movzx  eax,al
c0024620:	0f b6 f1             	movzx  esi,cl
c0024623:	c1 e0 08             	shl    eax,0x8
c0024626:	09 c6                	or     esi,eax
c0024628:	d1 fe                	sar    esi,1
c002462a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002462e:	83 c4 10             	add    esp,0x10
c0024631:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024636:	74 41                	je     c0024679 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024638:	31 c9                	xor    ecx,ecx
c002463a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024640:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024647:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002464b:	75 0a                	jne    c0024657 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c002464d:	01 c9                	add    ecx,ecx
c002464f:	01 cd                	add    ebp,ecx
c0024651:	4b                   	dec    ebx
c0024652:	e9 54 ff ff ff       	jmp    c00245ab <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024657:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002465c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024660:	51                   	push   ecx
c0024661:	51                   	push   ecx
c0024662:	52                   	push   edx
c0024663:	50                   	push   eax
c0024664:	e8 01 e9 ff ff       	call   c0022f6a <IDE::getBase(unsigned char)>
c0024669:	89 c2                	mov    edx,eax
c002466b:	89 f0                	mov    eax,esi
c002466d:	66 ef                	out    dx,ax
c002466f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024673:	83 c4 10             	add    esp,0x10
c0024676:	41                   	inc    ecx
c0024677:	eb c1                	jmp    c002463a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024679:	31 f6                	xor    esi,esi
c002467b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024681:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024688:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002468c:	75 06                	jne    c0024694 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c002468e:	01 f6                	add    esi,esi
c0024690:	01 f5                	add    ebp,esi
c0024692:	eb bd                	jmp    c0024651 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024694:	51                   	push   ecx
c0024695:	51                   	push   ecx
c0024696:	52                   	push   edx
c0024697:	50                   	push   eax
c0024698:	e8 cd e8 ff ff       	call   c0022f6a <IDE::getBase(unsigned char)>
c002469d:	89 c2                	mov    edx,eax
c002469f:	66 ed                	in     ax,dx
c00246a1:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00246a6:	83 c4 10             	add    esp,0x10
c00246a9:	46                   	inc    esi
c00246aa:	eb cf                	jmp    c002467b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00246ac:	51                   	push   ecx
c00246ad:	51                   	push   ecx
c00246ae:	52                   	push   edx
c00246af:	50                   	push   eax
c00246b0:	e8 35 ea ff ff       	call   c00230ea <IDE::waitInterrupt(unsigned char)>
c00246b5:	83 c4 10             	add    esp,0x10
c00246b8:	84 c0                	test   al,al
c00246ba:	0f 84 e8 fd ff ff    	je     c00244a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00246c0:	bb a0 86 01 00       	mov    ebx,0x186a0
c00246c5:	52                   	push   edx
c00246c6:	52                   	push   edx
c00246c7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246ce:	50                   	push   eax
c00246cf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246d5:	e8 7c e8 ff ff       	call   c0022f56 <IDE::prepareInterrupt(unsigned char)>
c00246da:	83 c4 10             	add    esp,0x10
c00246dd:	50                   	push   eax
c00246de:	50                   	push   eax
c00246df:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246e6:	50                   	push   eax
c00246e7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246ed:	e8 78 e8 ff ff       	call   c0022f6a <IDE::getBase(unsigned char)>
c00246f2:	8d 50 07             	lea    edx,[eax+0x7]
c00246f5:	ec                   	in     al,dx
c00246f6:	83 c4 10             	add    esp,0x10
c00246f9:	a8 88                	test   al,0x88
c00246fb:	74 0a                	je     c0024707 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00246fd:	4b                   	dec    ebx
c00246fe:	75 dd                	jne    c00246dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024700:	bb 02 00 00 00       	mov    ebx,0x2
c0024705:	eb 02                	jmp    c0024709 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024707:	31 db                	xor    ebx,ebx
c0024709:	83 c4 1c             	add    esp,0x1c
c002470c:	89 d8                	mov    eax,ebx
c002470e:	5b                   	pop    ebx
c002470f:	5e                   	pop    esi
c0024710:	5f                   	pop    edi
c0024711:	5d                   	pop    ebp
c0024712:	c3                   	ret    
c0024713:	90                   	nop

c0024714 <ATAPI::diskRemoved()>:
c0024714:	83 ec 18             	sub    esp,0x18
c0024717:	68 c5 c3 02 c0       	push   0xc002c3c5
c002471c:	e8 02 e0 fe ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0024721:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024725:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c002472c:	83 c4 1c             	add    esp,0x1c
c002472f:	c3                   	ret    

c0024730 <ATAPI::eject()>:
c0024730:	57                   	push   edi
c0024731:	b9 03 00 00 00       	mov    ecx,0x3
c0024736:	53                   	push   ebx
c0024737:	83 ec 14             	sub    esp,0x14
c002473a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002473e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024742:	fc                   	cld    
c0024743:	31 c0                	xor    eax,eax
c0024745:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024747:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002474c:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024751:	50                   	push   eax
c0024752:	50                   	push   eax
c0024753:	6a 00                	push   0x0
c0024755:	6a 00                	push   0x0
c0024757:	6a 00                	push   0x0
c0024759:	6a 02                	push   0x2
c002475b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002475f:	50                   	push   eax
c0024760:	53                   	push   ebx
c0024761:	e8 ee fc ff ff       	call   c0024454 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024766:	83 c4 14             	add    esp,0x14
c0024769:	53                   	push   ebx
c002476a:	e8 a5 ff ff ff       	call   c0024714 <ATAPI::diskRemoved()>
c002476f:	83 c4 24             	add    esp,0x24
c0024772:	31 c0                	xor    eax,eax
c0024774:	5b                   	pop    ebx
c0024775:	5f                   	pop    edi
c0024776:	c3                   	ret    
c0024777:	90                   	nop

c0024778 <ATAPI::diskInserted()>:
c0024778:	53                   	push   ebx
c0024779:	83 ec 14             	sub    esp,0x14
c002477c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024780:	68 dc c3 02 c0       	push   0xc002c3dc
c0024785:	e8 99 df fe ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c002478a:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024791:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024794:	e8 61 f8 fe ff       	call   c0013ffa <PhysicalDisk::startCache()>
c0024799:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002479d:	83 c4 18             	add    esp,0x18
c00247a0:	5b                   	pop    ebx
c00247a1:	e9 d6 1a ff ff       	jmp    c001627c <createPartitionsForDisk(PhysicalDisk*)>

c00247a6 <ATAPI::detectMedia()>:
c00247a6:	56                   	push   esi
c00247a7:	53                   	push   ebx
c00247a8:	83 ec 28             	sub    esp,0x28
c00247ab:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00247af:	6a 0c                	push   0xc
c00247b1:	6a 00                	push   0x0
c00247b3:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00247b7:	56                   	push   esi
c00247b8:	e8 93 bf fd ff       	call   c0000750 <memset>
c00247bd:	58                   	pop    eax
c00247be:	5a                   	pop    edx
c00247bf:	6a 00                	push   0x0
c00247c1:	6a 00                	push   0x0
c00247c3:	6a 00                	push   0x0
c00247c5:	6a 00                	push   0x0
c00247c7:	56                   	push   esi
c00247c8:	53                   	push   ebx
c00247c9:	e8 86 fc ff ff       	call   c0024454 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00247ce:	83 c4 1c             	add    esp,0x1c
c00247d1:	6a 0c                	push   0xc
c00247d3:	6a 00                	push   0x0
c00247d5:	56                   	push   esi
c00247d6:	e8 75 bf fd ff       	call   c0000750 <memset>
c00247db:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00247e0:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00247e5:	59                   	pop    ecx
c00247e6:	58                   	pop    eax
c00247e7:	6a 01                	push   0x1
c00247e9:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00247ed:	50                   	push   eax
c00247ee:	6a 00                	push   0x0
c00247f0:	6a 12                	push   0x12
c00247f2:	56                   	push   esi
c00247f3:	53                   	push   ebx
c00247f4:	e8 5b fc ff ff       	call   c0024454 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00247f9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00247fd:	83 c4 20             	add    esp,0x20
c0024800:	83 e0 7f             	and    eax,0x7f
c0024803:	3c 70                	cmp    al,0x70
c0024805:	74 15                	je     c002481c <ATAPI::detectMedia()+0x76>
c0024807:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002480e:	75 0c                	jne    c002481c <ATAPI::detectMedia()+0x76>
c0024810:	83 ec 0c             	sub    esp,0xc
c0024813:	53                   	push   ebx
c0024814:	e8 5f ff ff ff       	call   c0024778 <ATAPI::diskInserted()>
c0024819:	83 c4 10             	add    esp,0x10
c002481c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024820:	83 e0 0f             	and    eax,0xf
c0024823:	3c 02                	cmp    al,0x2
c0024825:	75 1b                	jne    c0024842 <ATAPI::detectMedia()+0x9c>
c0024827:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002482c:	75 2d                	jne    c002485b <ATAPI::detectMedia()+0xb5>
c002482e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024835:	74 24                	je     c002485b <ATAPI::detectMedia()+0xb5>
c0024837:	83 ec 0c             	sub    esp,0xc
c002483a:	53                   	push   ebx
c002483b:	e8 d4 fe ff ff       	call   c0024714 <ATAPI::diskRemoved()>
c0024840:	eb 16                	jmp    c0024858 <ATAPI::detectMedia()+0xb2>
c0024842:	84 c0                	test   al,al
c0024844:	75 15                	jne    c002485b <ATAPI::detectMedia()+0xb5>
c0024846:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002484d:	75 0c                	jne    c002485b <ATAPI::detectMedia()+0xb5>
c002484f:	83 ec 0c             	sub    esp,0xc
c0024852:	53                   	push   ebx
c0024853:	e8 20 ff ff ff       	call   c0024778 <ATAPI::diskInserted()>
c0024858:	83 c4 10             	add    esp,0x10
c002485b:	83 c4 24             	add    esp,0x24
c002485e:	5b                   	pop    ebx
c002485f:	5e                   	pop    esi
c0024860:	c3                   	ret    
c0024861:	90                   	nop

c0024862 <ATAPI::open(int, int, void*)>:
c0024862:	53                   	push   ebx
c0024863:	83 ec 08             	sub    esp,0x8
c0024866:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002486a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002486e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024872:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024878:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002487e:	c1 e0 06             	shl    eax,0x6
c0024881:	01 d0                	add    eax,edx
c0024883:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002488a:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024890:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024897:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00248a1:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00248a7:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00248ae:	6a 04                	push   0x4
c00248b0:	6a 0c                	push   0xc
c00248b2:	51                   	push   ecx
c00248b3:	52                   	push   edx
c00248b4:	e8 c3 e6 ff ff       	call   c0022f7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00248b9:	90                   	nop
c00248ba:	90                   	nop
c00248bb:	6a 00                	push   0x0
c00248bd:	6a 0c                	push   0xc
c00248bf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00248c6:	50                   	push   eax
c00248c7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00248cd:	e8 aa e6 ff ff       	call   c0022f7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00248d2:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00248d9:	83 c4 14             	add    esp,0x14
c00248dc:	53                   	push   ebx
c00248dd:	e8 c4 fe ff ff       	call   c00247a6 <ATAPI::detectMedia()>
c00248e2:	31 c0                	xor    eax,eax
c00248e4:	83 c4 18             	add    esp,0x18
c00248e7:	5b                   	pop    ebx
c00248e8:	c3                   	ret    
c00248e9:	90                   	nop

c00248ea <ATAPI::read(unsigned long long, int, void*)>:
c00248ea:	55                   	push   ebp
c00248eb:	57                   	push   edi
c00248ec:	56                   	push   esi
c00248ed:	53                   	push   ebx
c00248ee:	83 ec 1c             	sub    esp,0x1c
c00248f1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00248f5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00248f9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00248fd:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024904:	74 41                	je     c0024947 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024906:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002490a:	b9 03 00 00 00       	mov    ecx,0x3
c002490f:	fc                   	cld    
c0024910:	31 c0                	xor    eax,eax
c0024912:	86 fb                	xchg   bl,bh
c0024914:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024916:	c1 c3 10             	rol    ebx,0x10
c0024919:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002491e:	89 e8                	mov    eax,ebp
c0024920:	86 fb                	xchg   bl,bh
c0024922:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024926:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c002492a:	50                   	push   eax
c002492b:	50                   	push   eax
c002492c:	55                   	push   ebp
c002492d:	c1 e5 0b             	shl    ebp,0xb
c0024930:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024934:	6a 00                	push   0x0
c0024936:	55                   	push   ebp
c0024937:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002493b:	50                   	push   eax
c002493c:	56                   	push   esi
c002493d:	e8 12 fb ff ff       	call   c0024454 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024942:	83 c4 20             	add    esp,0x20
c0024945:	eb 1a                	jmp    c0024961 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024947:	83 ec 0c             	sub    esp,0xc
c002494a:	56                   	push   esi
c002494b:	e8 56 fe ff ff       	call   c00247a6 <ATAPI::detectMedia()>
c0024950:	83 c4 10             	add    esp,0x10
c0024953:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002495a:	75 aa                	jne    c0024906 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002495c:	b8 02 00 00 00       	mov    eax,0x2
c0024961:	83 c4 1c             	add    esp,0x1c
c0024964:	5b                   	pop    ebx
c0024965:	5e                   	pop    esi
c0024966:	5f                   	pop    edi
c0024967:	5d                   	pop    ebp
c0024968:	c3                   	ret    
c0024969:	90                   	nop

c002496a <SATA::close(int, int, void*)>:
c002496a:	83 ec 0c             	sub    esp,0xc
c002496d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024971:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024977:	85 c0                	test   eax,eax
c0024979:	74 0c                	je     c0024987 <SATA::close(int, int, void*)+0x1d>
c002497b:	83 ec 0c             	sub    esp,0xc
c002497e:	8b 10                	mov    edx,DWORD PTR [eax]
c0024980:	50                   	push   eax
c0024981:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024984:	83 c4 10             	add    esp,0x10
c0024987:	31 c0                	xor    eax,eax
c0024989:	83 c4 0c             	add    esp,0xc
c002498c:	c3                   	ret    
c002498d:	90                   	nop

c002498e <SATA::powerSaving(PowerSavingLevel)>:
c002498e:	c3                   	ret    
c002498f:	90                   	nop

c0024990 <SATA::open(int, int, void*)>:
c0024990:	56                   	push   esi
c0024991:	53                   	push   ebx
c0024992:	50                   	push   eax
c0024993:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024997:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002499b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00249a5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00249ab:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00249b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00249b9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00249c3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00249c9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00249d0:	e8 c0 af fe ff       	call   c000f995 <Phys::allocatePage()>
c00249d5:	89 c6                	mov    esi,eax
c00249d7:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00249dd:	81 c6 00 10 00 00    	add    esi,0x1000
c00249e3:	e8 ad af fe ff       	call   c000f995 <Phys::allocatePage()>
c00249e8:	39 c6                	cmp    esi,eax
c00249ea:	74 10                	je     c00249fc <SATA::open(int, int, void*)+0x6c>
c00249ec:	83 ec 0c             	sub    esp,0xc
c00249ef:	68 04 c3 02 c0       	push   0xc002c304
c00249f4:	e8 96 54 ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c00249f9:	83 c4 10             	add    esp,0x10
c00249fc:	83 ec 0c             	sub    esp,0xc
c00249ff:	6a 02                	push   0x2
c0024a01:	e8 19 c8 fe ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0024a06:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024a0c:	6a 03                	push   0x3
c0024a0e:	50                   	push   eax
c0024a0f:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024a15:	ff 35 70 db 02 c0    	push   DWORD PTR ds:0xc002db70
c0024a1b:	e8 10 d0 fe ff       	call   c0011a30 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024a20:	83 c4 14             	add    esp,0x14
c0024a23:	53                   	push   ebx
c0024a24:	e8 d1 f5 fe ff       	call   c0013ffa <PhysicalDisk::startCache()>
c0024a29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024a2c:	e8 4b 18 ff ff       	call   c001627c <createPartitionsForDisk(PhysicalDisk*)>
c0024a31:	83 c4 14             	add    esp,0x14
c0024a34:	31 c0                	xor    eax,eax
c0024a36:	5b                   	pop    ebx
c0024a37:	5e                   	pop    esi
c0024a38:	c3                   	ret    
c0024a39:	90                   	nop

c0024a3a <SATA::SATA()>:
c0024a3a:	83 ec 0c             	sub    esp,0xc
c0024a3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a41:	83 ec 04             	sub    esp,0x4
c0024a44:	68 00 02 00 00       	push   0x200
c0024a49:	68 18 c3 02 c0       	push   0xc002c318
c0024a4e:	50                   	push   eax
c0024a4f:	e8 3e f5 fe ff       	call   c0013f92 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024a54:	83 c4 10             	add    esp,0x10
c0024a57:	ba 88 c3 02 c0       	mov    edx,0xc002c388
c0024a5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a60:	89 10                	mov    DWORD PTR [eax],edx
c0024a62:	90                   	nop
c0024a63:	83 c4 0c             	add    esp,0xc
c0024a66:	c3                   	ret    
c0024a67:	90                   	nop

c0024a68 <SATA::access(unsigned long long, int, void*, bool)>:
c0024a68:	55                   	push   ebp
c0024a69:	57                   	push   edi
c0024a6a:	56                   	push   esi
c0024a6b:	53                   	push   ebx
c0024a6c:	83 ec 2c             	sub    esp,0x2c
c0024a6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024a73:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024a77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024a7b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024a7f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024a83:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024a88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024a8c:	7e 10                	jle    c0024a9e <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024a8e:	83 ec 0c             	sub    esp,0xc
c0024a91:	68 28 c3 02 c0       	push   0xc002c328
c0024a96:	e8 f4 53 ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c0024a9b:	83 c4 10             	add    esp,0x10
c0024a9e:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024aa4:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0024aaa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024ab4:	89 d0                	mov    eax,edx
c0024ab6:	c1 e0 07             	shl    eax,0x7
c0024ab9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024abd:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024ac7:	51                   	push   ecx
c0024ac8:	8d 42 02             	lea    eax,[edx+0x2]
c0024acb:	51                   	push   ecx
c0024acc:	c1 e0 07             	shl    eax,0x7
c0024acf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024ad3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024ad7:	50                   	push   eax
c0024ad8:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0024ade:	e8 1b f0 ff ff       	call   c0023afe <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024ae7:	83 c4 10             	add    esp,0x10
c0024aea:	b8 01 00 00 00       	mov    eax,0x1
c0024aef:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024af4:	0f 84 cb 01 00 00    	je     c0024cc5 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024afa:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024afe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024b02:	c1 e0 09             	shl    eax,0x9
c0024b05:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024b0a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024b0e:	74 0e                	je     c0024b1e <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c0024b10:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0024b16:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0024b1a:	89 c1                	mov    ecx,eax
c0024b1c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024b1e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0024b22:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024b28:	8d 42 02             	lea    eax,[edx+0x2]
c0024b2b:	c1 e0 07             	shl    eax,0x7
c0024b2e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024b32:	8b 00                	mov    eax,DWORD PTR [eax]
c0024b34:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024b3a:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024b40:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024b44:	c1 e1 05             	shl    ecx,0x5
c0024b47:	01 c8                	add    eax,ecx
c0024b49:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0024b4d:	83 e1 01             	and    ecx,0x1
c0024b50:	89 ce                	mov    esi,ecx
c0024b52:	8a 08                	mov    cl,BYTE PTR [eax]
c0024b54:	c1 e6 06             	shl    esi,0x6
c0024b57:	83 e1 bf             	and    ecx,0xffffffbf
c0024b5a:	09 f1                	or     ecx,esi
c0024b5c:	88 08                	mov    BYTE PTR [eax],cl
c0024b5e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024b60:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024b66:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0024b6e:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024b74:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0024b7a:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0024b80:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0024b83:	50                   	push   eax
c0024b84:	68 90 00 00 00       	push   0x90
c0024b89:	6a 00                	push   0x0
c0024b8b:	56                   	push   esi
c0024b8c:	e8 bf bb fd ff       	call   c0000750 <memset>
c0024b91:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024b97:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0024b9b:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0024ba1:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0024ba5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024ba9:	83 c4 10             	add    esp,0x10
c0024bac:	48                   	dec    eax
c0024bad:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024bb2:	89 c1                	mov    ecx,eax
c0024bb4:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0024bba:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024bbf:	09 c8                	or     eax,ecx
c0024bc1:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0024bc7:	66 8b 06             	mov    ax,WORD PTR [esi]
c0024bca:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0024bd1:	66 25 00 7f          	and    ax,0x7f00
c0024bd5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024bd9:	66 0d 27 80          	or     ax,0x8027
c0024bdd:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0024be2:	66 89 06             	mov    WORD PTR [esi],ax
c0024be5:	19 c0                	sbb    eax,eax
c0024be7:	83 e0 f0             	and    eax,0xfffffff0
c0024bea:	83 c0 35             	add    eax,0x35
c0024bed:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0024bf0:	89 e8                	mov    eax,ebp
c0024bf2:	c1 e8 10             	shr    eax,0x10
c0024bf5:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0024bf8:	89 e8                	mov    eax,ebp
c0024bfa:	c1 e8 18             	shr    eax,0x18
c0024bfd:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0024c00:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0024c04:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0024c07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024c0b:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0024c0e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024c12:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0024c16:	89 d6                	mov    esi,edx
c0024c18:	31 c0                	xor    eax,eax
c0024c1a:	c1 e6 07             	shl    esi,0x7
c0024c1d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0024c21:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0024c27:	80 e1 88             	and    cl,0x88
c0024c2a:	74 0a                	je     c0024c36 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0024c2c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024c31:	74 0a                	je     c0024c3d <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0024c33:	40                   	inc    eax
c0024c34:	eb eb                	jmp    c0024c21 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0024c36:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024c3b:	75 0a                	jne    c0024c47 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0024c3d:	83 ec 0c             	sub    esp,0xc
c0024c40:	68 61 c3 02 c0       	push   0xc002c361
c0024c45:	eb 56                	jmp    c0024c9d <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0024c47:	b8 01 00 00 00       	mov    eax,0x1
c0024c4c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024c50:	c1 e2 07             	shl    edx,0x7
c0024c53:	d3 e0                	shl    eax,cl
c0024c55:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0024c59:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0024c5f:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0024c65:	85 c8                	test   eax,ecx
c0024c67:	74 20                	je     c0024c89 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0024c69:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0024c6f:	0f ba e1 1e          	bt     ecx,0x1e
c0024c73:	73 ea                	jae    c0024c5f <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0024c75:	83 ec 0c             	sub    esp,0xc
c0024c78:	68 6f c3 02 c0       	push   0xc002c36f
c0024c7d:	e8 0d 52 ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c0024c82:	83 c4 10             	add    esp,0x10
c0024c85:	31 c0                	xor    eax,eax
c0024c87:	eb 3c                	jmp    c0024cc5 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024c89:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0024c8f:	0f ba e0 1e          	bt     eax,0x1e
c0024c93:	73 17                	jae    c0024cac <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0024c95:	83 ec 0c             	sub    esp,0xc
c0024c98:	68 6f c3 02 c0       	push   0xc002c36f
c0024c9d:	e8 ed 51 ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c0024ca2:	83 c4 10             	add    esp,0x10
c0024ca5:	b8 01 00 00 00       	mov    eax,0x1
c0024caa:	eb 19                	jmp    c0024cc5 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024cac:	31 c0                	xor    eax,eax
c0024cae:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024cb3:	75 10                	jne    c0024cc5 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024cb5:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0024cbb:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0024cbf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024cc3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024cc5:	83 c4 2c             	add    esp,0x2c
c0024cc8:	5b                   	pop    ebx
c0024cc9:	5e                   	pop    esi
c0024cca:	5f                   	pop    edi
c0024ccb:	5d                   	pop    ebp
c0024ccc:	c3                   	ret    
c0024ccd:	90                   	nop

c0024cce <SATA::read(unsigned long long, int, void*)>:
c0024cce:	57                   	push   edi
c0024ccf:	b8 04 00 00 00       	mov    eax,0x4
c0024cd4:	56                   	push   esi
c0024cd5:	53                   	push   ebx
c0024cd6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024cda:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024cde:	8d 7a ff             	lea    edi,[edx-0x1]
c0024ce1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024ce5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024ce9:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024cef:	77 25                	ja     c0024d16 <SATA::read(unsigned long long, int, void*)+0x48>
c0024cf1:	b8 06 00 00 00       	mov    eax,0x6
c0024cf6:	85 f6                	test   esi,esi
c0024cf8:	74 1c                	je     c0024d16 <SATA::read(unsigned long long, int, void*)+0x48>
c0024cfa:	50                   	push   eax
c0024cfb:	50                   	push   eax
c0024cfc:	6a 00                	push   0x0
c0024cfe:	56                   	push   esi
c0024cff:	52                   	push   edx
c0024d00:	53                   	push   ebx
c0024d01:	51                   	push   ecx
c0024d02:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024d06:	e8 5d fd ff ff       	call   c0024a68 <SATA::access(unsigned long long, int, void*, bool)>
c0024d0b:	83 c4 20             	add    esp,0x20
c0024d0e:	85 c0                	test   eax,eax
c0024d10:	0f 95 c0             	setne  al
c0024d13:	0f b6 c0             	movzx  eax,al
c0024d16:	5b                   	pop    ebx
c0024d17:	5e                   	pop    esi
c0024d18:	5f                   	pop    edi
c0024d19:	c3                   	ret    

c0024d1a <SATA::write(unsigned long long, int, void*)>:
c0024d1a:	55                   	push   ebp
c0024d1b:	b8 04 00 00 00       	mov    eax,0x4
c0024d20:	57                   	push   edi
c0024d21:	56                   	push   esi
c0024d22:	53                   	push   ebx
c0024d23:	83 ec 0c             	sub    esp,0xc
c0024d26:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024d2a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024d2e:	8d 73 ff             	lea    esi,[ebx-0x1]
c0024d31:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024d35:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024d39:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024d3f:	77 3d                	ja     c0024d7e <SATA::write(unsigned long long, int, void*)+0x64>
c0024d41:	b8 06 00 00 00       	mov    eax,0x6
c0024d46:	85 ed                	test   ebp,ebp
c0024d48:	74 34                	je     c0024d7e <SATA::write(unsigned long long, int, void*)+0x64>
c0024d4a:	c1 e3 09             	shl    ebx,0x9
c0024d4d:	01 eb                	add    ebx,ebp
c0024d4f:	89 d6                	mov    esi,edx
c0024d51:	89 cf                	mov    edi,ecx
c0024d53:	83 c6 01             	add    esi,0x1
c0024d56:	83 d7 00             	adc    edi,0x0
c0024d59:	50                   	push   eax
c0024d5a:	50                   	push   eax
c0024d5b:	6a 01                	push   0x1
c0024d5d:	55                   	push   ebp
c0024d5e:	81 c5 00 02 00 00    	add    ebp,0x200
c0024d64:	6a 01                	push   0x1
c0024d66:	51                   	push   ecx
c0024d67:	52                   	push   edx
c0024d68:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024d6c:	e8 f7 fc ff ff       	call   c0024a68 <SATA::access(unsigned long long, int, void*, bool)>
c0024d71:	83 c4 20             	add    esp,0x20
c0024d74:	89 f2                	mov    edx,esi
c0024d76:	89 f9                	mov    ecx,edi
c0024d78:	39 dd                	cmp    ebp,ebx
c0024d7a:	75 d3                	jne    c0024d4f <SATA::write(unsigned long long, int, void*)+0x35>
c0024d7c:	31 c0                	xor    eax,eax
c0024d7e:	83 c4 0c             	add    esp,0xc
c0024d81:	5b                   	pop    ebx
c0024d82:	5e                   	pop    esi
c0024d83:	5f                   	pop    edi
c0024d84:	5d                   	pop    ebp
c0024d85:	c3                   	ret    

c0024d86 <SATAPI::write(unsigned long long, int, void*)>:
c0024d86:	b8 03 00 00 00       	mov    eax,0x3
c0024d8b:	c3                   	ret    

c0024d8c <SATAPI::close(int, int, void*)>:
c0024d8c:	83 ec 0c             	sub    esp,0xc
c0024d8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d93:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024d99:	85 c0                	test   eax,eax
c0024d9b:	74 0c                	je     c0024da9 <SATAPI::close(int, int, void*)+0x1d>
c0024d9d:	83 ec 0c             	sub    esp,0xc
c0024da0:	8b 10                	mov    edx,DWORD PTR [eax]
c0024da2:	50                   	push   eax
c0024da3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024da6:	83 c4 10             	add    esp,0x10
c0024da9:	31 c0                	xor    eax,eax
c0024dab:	83 c4 0c             	add    esp,0xc
c0024dae:	c3                   	ret    
c0024daf:	90                   	nop

c0024db0 <SATAPI::SATAPI()>:
c0024db0:	83 ec 0c             	sub    esp,0xc
c0024db3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024db7:	83 ec 04             	sub    esp,0x4
c0024dba:	68 00 08 00 00       	push   0x800
c0024dbf:	68 b8 c3 02 c0       	push   0xc002c3b8
c0024dc4:	50                   	push   eax
c0024dc5:	e8 c8 f1 fe ff       	call   c0013f92 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024dca:	83 c4 10             	add    esp,0x10
c0024dcd:	ba 64 c4 02 c0       	mov    edx,0xc002c464
c0024dd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024dd6:	89 10                	mov    DWORD PTR [eax],edx
c0024dd8:	90                   	nop
c0024dd9:	83 c4 0c             	add    esp,0xc
c0024ddc:	c3                   	ret    
c0024ddd:	90                   	nop

c0024dde <SATAPI::diskRemoved()>:
c0024dde:	83 ec 18             	sub    esp,0x18
c0024de1:	68 c4 c3 02 c0       	push   0xc002c3c4
c0024de6:	e8 38 d9 fe ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0024deb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024def:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024df6:	83 c4 1c             	add    esp,0x1c
c0024df9:	c3                   	ret    

c0024dfa <SATAPI::diskInserted()>:
c0024dfa:	53                   	push   ebx
c0024dfb:	83 ec 14             	sub    esp,0x14
c0024dfe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024e02:	68 db c3 02 c0       	push   0xc002c3db
c0024e07:	e8 17 d9 fe ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0024e0c:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024e13:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024e16:	e8 df f1 fe ff       	call   c0013ffa <PhysicalDisk::startCache()>
c0024e1b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024e1f:	83 c4 18             	add    esp,0x18
c0024e22:	5b                   	pop    ebx
c0024e23:	e9 54 14 ff ff       	jmp    c001627c <createPartitionsForDisk(PhysicalDisk*)>

c0024e28 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024e28:	55                   	push   ebp
c0024e29:	57                   	push   edi
c0024e2a:	56                   	push   esi
c0024e2b:	53                   	push   ebx
c0024e2c:	83 ec 34             	sub    esp,0x34
c0024e2f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0024e33:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024e37:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0024e3b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024e3f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024e43:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024e49:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024e4f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024e53:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0024e59:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024e5d:	c1 e0 07             	shl    eax,0x7
c0024e60:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024e64:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024e68:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024e72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024e76:	8d 58 02             	lea    ebx,[eax+0x2]
c0024e79:	c1 e3 07             	shl    ebx,0x7
c0024e7c:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0024e80:	53                   	push   ebx
c0024e81:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024e87:	e8 72 ec ff ff       	call   c0023afe <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024e8c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024e90:	83 c4 10             	add    esp,0x10
c0024e93:	b8 01 00 00 00       	mov    eax,0x1
c0024e98:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024e9d:	0f 84 85 01 00 00    	je     c0025028 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024ea3:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024ea9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024eab:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024eb1:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024eb7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024ebb:	c1 e1 05             	shl    ecx,0x5
c0024ebe:	01 c8                	add    eax,ecx
c0024ec0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024ec2:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0024ec8:	81 c9 25 00 01 00    	or     ecx,0x10025
c0024ece:	89 08                	mov    DWORD PTR [eax],ecx
c0024ed0:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024ed6:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024edc:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024ee2:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024ee5:	8d 7b 40             	lea    edi,[ebx+0x40]
c0024ee8:	50                   	push   eax
c0024ee9:	68 90 00 00 00       	push   0x90
c0024eee:	6a 00                	push   0x0
c0024ef0:	53                   	push   ebx
c0024ef1:	e8 5a b8 fd ff       	call   c0000750 <memset>
c0024ef6:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0024efa:	b9 0c 00 00 00       	mov    ecx,0xc
c0024eff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024f01:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0024f07:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0024f0b:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024f11:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024f15:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024f19:	48                   	dec    eax
c0024f1a:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024f1f:	89 c1                	mov    ecx,eax
c0024f21:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024f27:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024f2c:	09 c8                	or     eax,ecx
c0024f2e:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024f34:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024f37:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024f3e:	66 25 00 7f          	and    ax,0x7f00
c0024f42:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0024f46:	66 0d 27 80          	or     ax,0x8027
c0024f4a:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0024f4e:	66 89 03             	mov    WORD PTR [ebx],ax
c0024f51:	89 d0                	mov    eax,edx
c0024f53:	c1 ea 18             	shr    edx,0x18
c0024f56:	c1 e8 10             	shr    eax,0x10
c0024f59:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0024f5c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024f5f:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0024f63:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024f66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024f6a:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024f6d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0024f71:	83 c4 10             	add    esp,0x10
c0024f74:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024f78:	31 c0                	xor    eax,eax
c0024f7a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0024f7e:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0024f84:	80 e2 88             	and    dl,0x88
c0024f87:	74 0a                	je     c0024f93 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0024f89:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f8e:	74 0a                	je     c0024f9a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0024f90:	40                   	inc    eax
c0024f91:	eb eb                	jmp    c0024f7e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0024f93:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f98:	75 0f                	jne    c0024fa9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0024f9a:	83 ec 0c             	sub    esp,0xc
c0024f9d:	68 61 c3 02 c0       	push   0xc002c361
c0024fa2:	e8 e8 4e ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c0024fa7:	eb 3f                	jmp    c0024fe8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0024fa9:	ba 01 00 00 00       	mov    edx,0x1
c0024fae:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024fb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024fb6:	d3 e2                	shl    edx,cl
c0024fb8:	c1 e0 07             	shl    eax,0x7
c0024fbb:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0024fc1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024fc5:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0024fcb:	85 ca                	test   edx,ecx
c0024fcd:	74 23                	je     c0024ff2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0024fcf:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0024fd5:	0f ba e1 1e          	bt     ecx,0x1e
c0024fd9:	73 ea                	jae    c0024fc5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0024fdb:	83 ec 0c             	sub    esp,0xc
c0024fde:	68 f3 c3 02 c0       	push   0xc002c3f3
c0024fe3:	e8 3b d7 fe ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0024fe8:	83 c4 10             	add    esp,0x10
c0024feb:	b8 01 00 00 00       	mov    eax,0x1
c0024ff0:	eb 36                	jmp    c0025028 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024ff2:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0024ff8:	0f ba e0 1e          	bt     eax,0x1e
c0024ffc:	73 0a                	jae    c0025008 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0024ffe:	83 ec 0c             	sub    esp,0xc
c0025001:	68 06 c4 02 c0       	push   0xc002c406
c0025006:	eb db                	jmp    c0024fe3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0025008:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c002500d:	74 17                	je     c0025026 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c002500f:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0025014:	74 10                	je     c0025026 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025016:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c002501c:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0025020:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0025024:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025026:	31 c0                	xor    eax,eax
c0025028:	83 c4 2c             	add    esp,0x2c
c002502b:	5b                   	pop    ebx
c002502c:	5e                   	pop    esi
c002502d:	5f                   	pop    edi
c002502e:	5d                   	pop    ebp
c002502f:	c3                   	ret    

c0025030 <SATAPI::eject()>:
c0025030:	57                   	push   edi
c0025031:	b9 03 00 00 00       	mov    ecx,0x3
c0025036:	53                   	push   ebx
c0025037:	83 ec 14             	sub    esp,0x14
c002503a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002503e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025042:	fc                   	cld    
c0025043:	31 c0                	xor    eax,eax
c0025045:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025047:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002504c:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025051:	50                   	push   eax
c0025052:	6a 00                	push   0x0
c0025054:	6a 00                	push   0x0
c0025056:	6a 00                	push   0x0
c0025058:	6a 00                	push   0x0
c002505a:	6a 02                	push   0x2
c002505c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025060:	50                   	push   eax
c0025061:	53                   	push   ebx
c0025062:	e8 c1 fd ff ff       	call   c0024e28 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025067:	83 c4 14             	add    esp,0x14
c002506a:	53                   	push   ebx
c002506b:	e8 6e fd ff ff       	call   c0024dde <SATAPI::diskRemoved()>
c0025070:	83 c4 24             	add    esp,0x24
c0025073:	31 c0                	xor    eax,eax
c0025075:	5b                   	pop    ebx
c0025076:	5f                   	pop    edi
c0025077:	c3                   	ret    

c0025078 <SATAPI::detectMedia()>:
c0025078:	56                   	push   esi
c0025079:	53                   	push   ebx
c002507a:	83 ec 28             	sub    esp,0x28
c002507d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025081:	6a 0c                	push   0xc
c0025083:	6a 00                	push   0x0
c0025085:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025089:	56                   	push   esi
c002508a:	e8 c1 b6 fd ff       	call   c0000750 <memset>
c002508f:	83 c4 0c             	add    esp,0xc
c0025092:	6a 00                	push   0x0
c0025094:	6a 00                	push   0x0
c0025096:	6a 00                	push   0x0
c0025098:	6a 00                	push   0x0
c002509a:	6a 00                	push   0x0
c002509c:	56                   	push   esi
c002509d:	53                   	push   ebx
c002509e:	e8 85 fd ff ff       	call   c0024e28 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00250a3:	83 c4 1c             	add    esp,0x1c
c00250a6:	6a 0c                	push   0xc
c00250a8:	6a 00                	push   0x0
c00250aa:	56                   	push   esi
c00250ab:	e8 a0 b6 fd ff       	call   c0000750 <memset>
c00250b0:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00250b5:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00250ba:	83 c4 0c             	add    esp,0xc
c00250bd:	6a 01                	push   0x1
c00250bf:	8d 44 24 16          	lea    eax,[esp+0x16]
c00250c3:	50                   	push   eax
c00250c4:	6a 00                	push   0x0
c00250c6:	6a 00                	push   0x0
c00250c8:	6a 12                	push   0x12
c00250ca:	56                   	push   esi
c00250cb:	53                   	push   ebx
c00250cc:	e8 57 fd ff ff       	call   c0024e28 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00250d1:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00250d5:	83 c4 20             	add    esp,0x20
c00250d8:	83 e0 7f             	and    eax,0x7f
c00250db:	3c 70                	cmp    al,0x70
c00250dd:	74 15                	je     c00250f4 <SATAPI::detectMedia()+0x7c>
c00250df:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00250e6:	75 0c                	jne    c00250f4 <SATAPI::detectMedia()+0x7c>
c00250e8:	83 ec 0c             	sub    esp,0xc
c00250eb:	53                   	push   ebx
c00250ec:	e8 09 fd ff ff       	call   c0024dfa <SATAPI::diskInserted()>
c00250f1:	83 c4 10             	add    esp,0x10
c00250f4:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00250f8:	83 e0 0f             	and    eax,0xf
c00250fb:	3c 02                	cmp    al,0x2
c00250fd:	75 1b                	jne    c002511a <SATAPI::detectMedia()+0xa2>
c00250ff:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025104:	75 2d                	jne    c0025133 <SATAPI::detectMedia()+0xbb>
c0025106:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002510d:	74 24                	je     c0025133 <SATAPI::detectMedia()+0xbb>
c002510f:	83 ec 0c             	sub    esp,0xc
c0025112:	53                   	push   ebx
c0025113:	e8 c6 fc ff ff       	call   c0024dde <SATAPI::diskRemoved()>
c0025118:	eb 16                	jmp    c0025130 <SATAPI::detectMedia()+0xb8>
c002511a:	84 c0                	test   al,al
c002511c:	75 15                	jne    c0025133 <SATAPI::detectMedia()+0xbb>
c002511e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025125:	75 0c                	jne    c0025133 <SATAPI::detectMedia()+0xbb>
c0025127:	83 ec 0c             	sub    esp,0xc
c002512a:	53                   	push   ebx
c002512b:	e8 ca fc ff ff       	call   c0024dfa <SATAPI::diskInserted()>
c0025130:	83 c4 10             	add    esp,0x10
c0025133:	83 c4 24             	add    esp,0x24
c0025136:	5b                   	pop    ebx
c0025137:	5e                   	pop    esi
c0025138:	c3                   	ret    
c0025139:	90                   	nop

c002513a <SATAPI::open(int, int, void*)>:
c002513a:	56                   	push   esi
c002513b:	53                   	push   ebx
c002513c:	50                   	push   eax
c002513d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025141:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025145:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002514f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025155:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002515f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025163:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002516d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025173:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002517a:	e8 16 a8 fe ff       	call   c000f995 <Phys::allocatePage()>
c002517f:	89 c6                	mov    esi,eax
c0025181:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025187:	81 c6 00 10 00 00    	add    esi,0x1000
c002518d:	e8 03 a8 fe ff       	call   c000f995 <Phys::allocatePage()>
c0025192:	39 c6                	cmp    esi,eax
c0025194:	74 10                	je     c00251a6 <SATAPI::open(int, int, void*)+0x6c>
c0025196:	83 ec 0c             	sub    esp,0xc
c0025199:	68 1b c4 02 c0       	push   0xc002c41b
c002519e:	e8 ec 4c ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c00251a3:	83 c4 10             	add    esp,0x10
c00251a6:	83 ec 0c             	sub    esp,0xc
c00251a9:	6a 02                	push   0x2
c00251ab:	e8 6f c0 fe ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c00251b0:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00251b6:	6a 03                	push   0x3
c00251b8:	50                   	push   eax
c00251b9:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c00251bf:	ff 35 70 db 02 c0    	push   DWORD PTR ds:0xc002db70
c00251c5:	e8 66 c8 fe ff       	call   c0011a30 <VAS::mapPage(unsigned long, unsigned long, int)>
c00251ca:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00251d1:	83 c4 14             	add    esp,0x14
c00251d4:	53                   	push   ebx
c00251d5:	e8 9e fe ff ff       	call   c0025078 <SATAPI::detectMedia()>
c00251da:	83 c4 14             	add    esp,0x14
c00251dd:	31 c0                	xor    eax,eax
c00251df:	5b                   	pop    ebx
c00251e0:	5e                   	pop    esi
c00251e1:	c3                   	ret    

c00251e2 <SATAPI::read(unsigned long long, int, void*)>:
c00251e2:	55                   	push   ebp
c00251e3:	57                   	push   edi
c00251e4:	56                   	push   esi
c00251e5:	53                   	push   ebx
c00251e6:	83 ec 1c             	sub    esp,0x1c
c00251e9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00251ed:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00251f1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00251f5:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00251fc:	74 19                	je     c0025217 <SATAPI::read(unsigned long long, int, void*)+0x35>
c00251fe:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025203:	7e 2e                	jle    c0025233 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025205:	83 ec 0c             	sub    esp,0xc
c0025208:	68 31 c4 02 c0       	push   0xc002c431
c002520d:	e8 7d 4c ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c0025212:	83 c4 10             	add    esp,0x10
c0025215:	eb 1c                	jmp    c0025233 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025217:	83 ec 0c             	sub    esp,0xc
c002521a:	55                   	push   ebp
c002521b:	e8 58 fe ff ff       	call   c0025078 <SATAPI::detectMedia()>
c0025220:	83 c4 10             	add    esp,0x10
c0025223:	b8 02 00 00 00       	mov    eax,0x2
c0025228:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002522f:	75 cd                	jne    c00251fe <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025231:	eb 49                	jmp    c002527c <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025233:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025237:	b9 03 00 00 00       	mov    ecx,0x3
c002523c:	fc                   	cld    
c002523d:	31 c0                	xor    eax,eax
c002523f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025241:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025246:	89 d8                	mov    eax,ebx
c0025248:	86 e0                	xchg   al,ah
c002524a:	c1 c0 10             	rol    eax,0x10
c002524d:	86 e0                	xchg   al,ah
c002524f:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025253:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025257:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002525b:	50                   	push   eax
c002525c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025260:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025264:	56                   	push   esi
c0025265:	53                   	push   ebx
c0025266:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002526a:	c1 e0 0b             	shl    eax,0xb
c002526d:	50                   	push   eax
c002526e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025272:	50                   	push   eax
c0025273:	55                   	push   ebp
c0025274:	e8 af fb ff ff       	call   c0024e28 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025279:	83 c4 20             	add    esp,0x20
c002527c:	83 c4 1c             	add    esp,0x1c
c002527f:	5b                   	pop    ebx
c0025280:	5e                   	pop    esi
c0025281:	5f                   	pop    edi
c0025282:	5d                   	pop    ebp
c0025283:	c3                   	ret    

c0025284 <AVX::open(int, int, void*)>:
c0025284:	83 ec 0c             	sub    esp,0xc
c0025287:	e8 3c 11 00 00       	call   c00263c8 <avxInit>
c002528c:	b8 00 00 00 00       	mov    eax,0x0
c0025291:	83 c4 0c             	add    esp,0xc
c0025294:	c3                   	ret    
c0025295:	90                   	nop

c0025296 <AVX::close(int, int, void*)>:
c0025296:	83 ec 0c             	sub    esp,0xc
c0025299:	e8 2b 11 00 00       	call   c00263c9 <avxClose>
c002529e:	b8 00 00 00 00       	mov    eax,0x0
c00252a3:	83 c4 0c             	add    esp,0xc
c00252a6:	c3                   	ret    
c00252a7:	90                   	nop

c00252a8 <AVX::available()>:
c00252a8:	83 ec 0c             	sub    esp,0xc
c00252ab:	e8 10 11 00 00       	call   c00263c0 <avxDetect>
c00252b0:	85 c0                	test   eax,eax
c00252b2:	0f 95 c0             	setne  al
c00252b5:	83 c4 0c             	add    esp,0xc
c00252b8:	c3                   	ret    
c00252b9:	90                   	nop

c00252ba <AVX::save(void*)>:
c00252ba:	83 ec 0c             	sub    esp,0xc
c00252bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00252c1:	83 ec 0c             	sub    esp,0xc
c00252c4:	50                   	push   eax
c00252c5:	e8 fc 10 00 00       	call   c00263c6 <avxSave>
c00252ca:	83 c4 10             	add    esp,0x10
c00252cd:	90                   	nop
c00252ce:	83 c4 0c             	add    esp,0xc
c00252d1:	c3                   	ret    

c00252d2 <AVX::load(void*)>:
c00252d2:	83 ec 0c             	sub    esp,0xc
c00252d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00252d9:	83 ec 0c             	sub    esp,0xc
c00252dc:	50                   	push   eax
c00252dd:	e8 e5 10 00 00       	call   c00263c7 <avxLoad>
c00252e2:	83 c4 10             	add    esp,0x10
c00252e5:	90                   	nop
c00252e6:	83 c4 0c             	add    esp,0xc
c00252e9:	c3                   	ret    

c00252ea <AVX::AVX()>:
c00252ea:	83 ec 0c             	sub    esp,0xc
c00252ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252f1:	83 ec 08             	sub    esp,0x8
c00252f4:	68 94 c4 02 c0       	push   0xc002c494
c00252f9:	50                   	push   eax
c00252fa:	e8 71 ed fe ff       	call   c0014070 <FPU::FPU(char const*)>
c00252ff:	83 c4 10             	add    esp,0x10
c0025302:	ba a4 c4 02 c0       	mov    edx,0xc002c4a4
c0025307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002530b:	89 10                	mov    DWORD PTR [eax],edx
c002530d:	90                   	nop
c002530e:	83 c4 0c             	add    esp,0xc
c0025311:	c3                   	ret    

c0025312 <MMX::available()>:
c0025312:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0025317:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002531d:	83 e0 20             	and    eax,0x20
c0025320:	84 c0                	test   al,al
c0025322:	0f 95 c0             	setne  al
c0025325:	c3                   	ret    

c0025326 <MMX::open(int, int, void*)>:
c0025326:	83 ec 0c             	sub    esp,0xc
c0025329:	e8 24 11 00 00       	call   c0026452 <x87Init>
c002532e:	b8 00 00 00 00       	mov    eax,0x0
c0025333:	83 c4 0c             	add    esp,0xc
c0025336:	c3                   	ret    
c0025337:	90                   	nop

c0025338 <MMX::close(int, int, void*)>:
c0025338:	83 ec 0c             	sub    esp,0xc
c002533b:	e8 2c 11 00 00       	call   c002646c <x87Close>
c0025340:	b8 00 00 00 00       	mov    eax,0x0
c0025345:	83 c4 0c             	add    esp,0xc
c0025348:	c3                   	ret    
c0025349:	90                   	nop

c002534a <MMX::save(void*)>:
c002534a:	83 ec 0c             	sub    esp,0xc
c002534d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025351:	83 ec 0c             	sub    esp,0xc
c0025354:	50                   	push   eax
c0025355:	e8 e7 10 00 00       	call   c0026441 <x87Save>
c002535a:	83 c4 10             	add    esp,0x10
c002535d:	90                   	nop
c002535e:	83 c4 0c             	add    esp,0xc
c0025361:	c3                   	ret    

c0025362 <MMX::load(void*)>:
c0025362:	83 ec 0c             	sub    esp,0xc
c0025365:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025369:	83 ec 0c             	sub    esp,0xc
c002536c:	50                   	push   eax
c002536d:	e8 d8 10 00 00       	call   c002644a <x87Load>
c0025372:	83 c4 10             	add    esp,0x10
c0025375:	90                   	nop
c0025376:	83 c4 0c             	add    esp,0xc
c0025379:	c3                   	ret    

c002537a <MMX::MMX()>:
c002537a:	83 ec 0c             	sub    esp,0xc
c002537d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025381:	83 ec 08             	sub    esp,0x8
c0025384:	68 d4 c4 02 c0       	push   0xc002c4d4
c0025389:	50                   	push   eax
c002538a:	e8 e1 ec fe ff       	call   c0014070 <FPU::FPU(char const*)>
c002538f:	83 c4 10             	add    esp,0x10
c0025392:	ba e4 c4 02 c0       	mov    edx,0xc002c4e4
c0025397:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002539b:	89 10                	mov    DWORD PTR [eax],edx
c002539d:	90                   	nop
c002539e:	83 c4 0c             	add    esp,0xc
c00253a1:	c3                   	ret    

c00253a2 <SSE::open(int, int, void*)>:
c00253a2:	83 ec 0c             	sub    esp,0xc
c00253a5:	e8 5a 10 00 00       	call   c0026404 <sseInit>
c00253aa:	b8 00 00 00 00       	mov    eax,0x0
c00253af:	83 c4 0c             	add    esp,0xc
c00253b2:	c3                   	ret    
c00253b3:	90                   	nop

c00253b4 <SSE::close(int, int, void*)>:
c00253b4:	83 ec 0c             	sub    esp,0xc
c00253b7:	e8 58 10 00 00       	call   c0026414 <sseClose>
c00253bc:	b8 00 00 00 00       	mov    eax,0x0
c00253c1:	83 c4 0c             	add    esp,0xc
c00253c4:	c3                   	ret    
c00253c5:	90                   	nop

c00253c6 <SSE::available()>:
c00253c6:	83 ec 1c             	sub    esp,0x1c
c00253c9:	e8 12 10 00 00       	call   c00263e0 <absolutelyNoChanceInHell>
c00253ce:	85 c0                	test   eax,eax
c00253d0:	0f 95 c0             	setne  al
c00253d3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00253d7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00253db:	83 c4 1c             	add    esp,0x1c
c00253de:	c3                   	ret    
c00253df:	90                   	nop

c00253e0 <SSE::save(void*)>:
c00253e0:	83 ec 0c             	sub    esp,0xc
c00253e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253e7:	83 ec 0c             	sub    esp,0xc
c00253ea:	50                   	push   eax
c00253eb:	e8 08 10 00 00       	call   c00263f8 <sseSave>
c00253f0:	83 c4 10             	add    esp,0x10
c00253f3:	90                   	nop
c00253f4:	83 c4 0c             	add    esp,0xc
c00253f7:	c3                   	ret    

c00253f8 <SSE::load(void*)>:
c00253f8:	83 ec 0c             	sub    esp,0xc
c00253fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253ff:	83 ec 0c             	sub    esp,0xc
c0025402:	50                   	push   eax
c0025403:	e8 f6 0f 00 00       	call   c00263fe <sseLoad>
c0025408:	83 c4 10             	add    esp,0x10
c002540b:	90                   	nop
c002540c:	83 c4 0c             	add    esp,0xc
c002540f:	c3                   	ret    

c0025410 <SSE::SSE()>:
c0025410:	83 ec 0c             	sub    esp,0xc
c0025413:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025417:	83 ec 08             	sub    esp,0x8
c002541a:	68 14 c5 02 c0       	push   0xc002c514
c002541f:	50                   	push   eax
c0025420:	e8 4b ec fe ff       	call   c0014070 <FPU::FPU(char const*)>
c0025425:	83 c4 10             	add    esp,0x10
c0025428:	ba 24 c5 02 c0       	mov    edx,0xc002c524
c002542d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025431:	89 10                	mov    DWORD PTR [eax],edx
c0025433:	90                   	nop
c0025434:	83 c4 0c             	add    esp,0xc
c0025437:	c3                   	ret    

c0025438 <x87::open(int, int, void*)>:
c0025438:	83 ec 0c             	sub    esp,0xc
c002543b:	e8 12 10 00 00       	call   c0026452 <x87Init>
c0025440:	b8 00 00 00 00       	mov    eax,0x0
c0025445:	83 c4 0c             	add    esp,0xc
c0025448:	c3                   	ret    
c0025449:	90                   	nop

c002544a <x87::close(int, int, void*)>:
c002544a:	83 ec 0c             	sub    esp,0xc
c002544d:	e8 1a 10 00 00       	call   c002646c <x87Close>
c0025452:	b8 00 00 00 00       	mov    eax,0x0
c0025457:	83 c4 0c             	add    esp,0xc
c002545a:	c3                   	ret    
c002545b:	90                   	nop

c002545c <x87::available()>:
c002545c:	83 ec 0c             	sub    esp,0xc
c002545f:	e8 c2 0f 00 00       	call   c0026426 <x87Detect>
c0025464:	85 c0                	test   eax,eax
c0025466:	0f 95 c0             	setne  al
c0025469:	83 c4 0c             	add    esp,0xc
c002546c:	c3                   	ret    
c002546d:	90                   	nop

c002546e <x87::save(void*)>:
c002546e:	83 ec 0c             	sub    esp,0xc
c0025471:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025475:	83 ec 0c             	sub    esp,0xc
c0025478:	50                   	push   eax
c0025479:	e8 c3 0f 00 00       	call   c0026441 <x87Save>
c002547e:	83 c4 10             	add    esp,0x10
c0025481:	90                   	nop
c0025482:	83 c4 0c             	add    esp,0xc
c0025485:	c3                   	ret    

c0025486 <x87::load(void*)>:
c0025486:	83 ec 0c             	sub    esp,0xc
c0025489:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002548d:	83 ec 0c             	sub    esp,0xc
c0025490:	50                   	push   eax
c0025491:	e8 b4 0f 00 00       	call   c002644a <x87Load>
c0025496:	83 c4 10             	add    esp,0x10
c0025499:	90                   	nop
c002549a:	83 c4 0c             	add    esp,0xc
c002549d:	c3                   	ret    

c002549e <x87::x87()>:
c002549e:	83 ec 0c             	sub    esp,0xc
c00254a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254a5:	83 ec 08             	sub    esp,0x8
c00254a8:	68 54 c5 02 c0       	push   0xc002c554
c00254ad:	50                   	push   eax
c00254ae:	e8 bd eb fe ff       	call   c0014070 <FPU::FPU(char const*)>
c00254b3:	83 c4 10             	add    esp,0x10
c00254b6:	ba 64 c5 02 c0       	mov    edx,0xc002c564
c00254bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254bf:	89 10                	mov    DWORD PTR [eax],edx
c00254c1:	90                   	nop
c00254c2:	83 c4 0c             	add    esp,0xc
c00254c5:	c3                   	ret    

c00254c6 <APIC::disable()>:
c00254c6:	90                   	nop
c00254c7:	c3                   	ret    

c00254c8 <APIC::close(int, int, void*)>:
c00254c8:	55                   	push   ebp
c00254c9:	89 e5                	mov    ebp,esp
c00254cb:	83 ec 08             	sub    esp,0x8
c00254ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00254d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00254d3:	83 c0 3c             	add    eax,0x3c
c00254d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00254d8:	83 ec 0c             	sub    esp,0xc
c00254db:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00254de:	ff d0                	call   eax
c00254e0:	83 c4 10             	add    esp,0x10
c00254e3:	b8 00 00 00 00       	mov    eax,0x0
c00254e8:	c9                   	leave  
c00254e9:	c3                   	ret    

c00254ea <IOAPIC::close(int, int, void*)>:
c00254ea:	b8 00 00 00 00       	mov    eax,0x0
c00254ef:	c3                   	ret    

c00254f0 <APIC::io_wait()>:
c00254f0:	eb 00                	jmp    c00254f2 <APIC::io_wait()+0x2>
c00254f2:	eb 00                	jmp    c00254f4 <APIC::io_wait()+0x4>
c00254f4:	90                   	nop
c00254f5:	c3                   	ret    

c00254f6 <APIC::getBase()>:
c00254f6:	55                   	push   ebp
c00254f7:	89 e5                	mov    ebp,esp
c00254f9:	83 ec 18             	sub    esp,0x18
c00254fc:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0025501:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025507:	83 e0 08             	and    eax,0x8
c002550a:	84 c0                	test   al,al
c002550c:	75 07                	jne    c0025515 <APIC::getBase()+0x1f>
c002550e:	b8 00 00 00 00       	mov    eax,0x0
c0025513:	eb 21                	jmp    c0025536 <APIC::getBase()+0x40>
c0025515:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c002551a:	83 ec 08             	sub    esp,0x8
c002551d:	6a 1b                	push   0x1b
c002551f:	50                   	push   eax
c0025520:	e8 1b 96 fe ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c0025525:	83 c4 10             	add    esp,0x10
c0025528:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002552b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002552e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025531:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025536:	c9                   	leave  
c0025537:	c3                   	ret    

c0025538 <APIC::eoi(unsigned char)>:
c0025538:	55                   	push   ebp
c0025539:	89 e5                	mov    ebp,esp
c002553b:	83 ec 28             	sub    esp,0x28
c002553e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025541:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025544:	83 ec 0c             	sub    esp,0xc
c0025547:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002554a:	e8 a7 ff ff ff       	call   c00254f6 <APIC::getBase()>
c002554f:	83 c4 10             	add    esp,0x10
c0025552:	05 b0 00 00 00       	add    eax,0xb0
c0025557:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002555a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002555d:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025563:	90                   	nop
c0025564:	c9                   	leave  
c0025565:	c3                   	ret    

c0025566 <APIC::open(int, int, void*)>:
c0025566:	55                   	push   ebp
c0025567:	89 e5                	mov    ebp,esp
c0025569:	57                   	push   edi
c002556a:	56                   	push   esi
c002556b:	53                   	push   ebx
c002556c:	83 ec 2c             	sub    esp,0x2c
c002556f:	83 ec 0c             	sub    esp,0xc
c0025572:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025575:	e8 7c ff ff ff       	call   c00254f6 <APIC::getBase()>
c002557a:	83 c4 10             	add    esp,0x10
c002557d:	89 c2                	mov    edx,eax
c002557f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025582:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025588:	0f b6 f8             	movzx  edi,al
c002558b:	89 d0                	mov    eax,edx
c002558d:	ba 00 00 00 00       	mov    edx,0x0
c0025592:	89 c1                	mov    ecx,eax
c0025594:	80 e5 ff             	and    ch,0xff
c0025597:	89 cb                	mov    ebx,ecx
c0025599:	0f b6 f2             	movzx  esi,dl
c002559c:	89 d8                	mov    eax,ebx
c002559e:	89 f2                	mov    edx,esi
c00255a0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00255a3:	8d 5f 08             	lea    ebx,[edi+0x8]
c00255a6:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00255aa:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00255ae:	83 e0 00             	and    eax,0x0
c00255b1:	09 d0                	or     eax,edx
c00255b3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00255b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00255ba:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00255c0:	8d 50 01             	lea    edx,[eax+0x1]
c00255c3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00255c6:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00255cc:	0f b6 d0             	movzx  edx,al
c00255cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00255d2:	83 c2 08             	add    edx,0x8
c00255d5:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00255d9:	0f b6 c9             	movzx  ecx,cl
c00255dc:	81 c9 00 00 01 00    	or     ecx,0x10000
c00255e2:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00255e6:	83 ec 0c             	sub    esp,0xc
c00255e9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00255ec:	e8 05 ff ff ff       	call   c00254f6 <APIC::getBase()>
c00255f1:	83 c4 10             	add    esp,0x10
c00255f4:	05 f0 00 00 00       	add    eax,0xf0
c00255f9:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00255fc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00255ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0025601:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025604:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002560b:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025612:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025615:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025618:	89 10                	mov    DWORD PTR [eax],edx
c002561a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025621:	a1 d0 02 03 c0       	mov    eax,ds:0xc00302d0
c0025626:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025629:	7d 7c                	jge    c00256a7 <APIC::open(int, int, void*)+0x141>
c002562b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002562e:	8b 04 85 e0 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfd20]
c0025635:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025638:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002563b:	8b 04 85 e0 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfd20]
c0025642:	c1 e8 08             	shr    eax,0x8
c0025645:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025649:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002564c:	8b 04 85 e0 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfd20]
c0025653:	c1 e8 18             	shr    eax,0x18
c0025656:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025659:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002565d:	75 40                	jne    c002569f <APIC::open(int, int, void*)+0x139>
c002565f:	83 ec 0c             	sub    esp,0xc
c0025662:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025665:	e8 8c fe ff ff       	call   c00254f6 <APIC::getBase()>
c002566a:	83 c4 10             	add    esp,0x10
c002566d:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025671:	75 07                	jne    c002567a <APIC::open(int, int, void*)+0x114>
c0025673:	ba 60 03 00 00       	mov    edx,0x360
c0025678:	eb 05                	jmp    c002567f <APIC::open(int, int, void*)+0x119>
c002567a:	ba 50 03 00 00       	mov    edx,0x350
c002567f:	01 d0                	add    eax,edx
c0025681:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025684:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025687:	8b 00                	mov    eax,DWORD PTR [eax]
c0025689:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002568c:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025693:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025697:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002569a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002569d:	89 10                	mov    DWORD PTR [eax],edx
c002569f:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00256a2:	e9 7a ff ff ff       	jmp    c0025621 <APIC::open(int, int, void*)+0xbb>
c00256a7:	b8 00 00 00 00       	mov    eax,0x0
c00256ac:	8d 65 f4             	lea    esp,[ebp-0xc]
c00256af:	5b                   	pop    ebx
c00256b0:	5e                   	pop    esi
c00256b1:	5f                   	pop    edi
c00256b2:	5d                   	pop    ebp
c00256b3:	c3                   	ret    

c00256b4 <IOAPIC::IOAPIC()>:
c00256b4:	83 ec 0c             	sub    esp,0xc
c00256b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256bb:	83 ec 08             	sub    esp,0x8
c00256be:	68 94 c5 02 c0       	push   0xc002c594
c00256c3:	50                   	push   eax
c00256c4:	e8 97 e6 fe ff       	call   c0013d60 <Device::Device(char const*)>
c00256c9:	83 c4 10             	add    esp,0x10
c00256cc:	ba bc c6 02 c0       	mov    edx,0xc002c6bc
c00256d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256d5:	89 10                	mov    DWORD PTR [eax],edx
c00256d7:	90                   	nop
c00256d8:	83 c4 0c             	add    esp,0xc
c00256db:	c3                   	ret    

c00256dc <APIC::APIC()>:
c00256dc:	53                   	push   ebx
c00256dd:	83 ec 18             	sub    esp,0x18
c00256e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00256e4:	83 ec 08             	sub    esp,0x8
c00256e7:	68 9c c5 02 c0       	push   0xc002c59c
c00256ec:	50                   	push   eax
c00256ed:	e8 d8 ed fe ff       	call   c00144ca <InterruptController::InterruptController(char const*)>
c00256f2:	83 c4 10             	add    esp,0x10
c00256f5:	ba 74 c6 02 c0       	mov    edx,0xc002c674
c00256fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00256fe:	89 10                	mov    DWORD PTR [eax],edx
c0025700:	a0 a0 1d 03 c0       	mov    al,ds:0xc0031da0
c0025705:	83 f0 01             	xor    eax,0x1
c0025708:	84 c0                	test   al,al
c002570a:	0f 84 a1 00 00 00    	je     c00257b1 <APIC::APIC()+0xd5>
c0025710:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025715:	a0 80 03 03 c0       	mov    al,ds:0xc0030380
c002571a:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c002571e:	0f 83 86 00 00 00    	jae    c00257aa <APIC::APIC()+0xce>
c0025724:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c002572c:	83 ec 0c             	sub    esp,0xc
c002572f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025733:	e8 61 9e fe ff       	call   c000f599 <malloc>
c0025738:	83 c4 10             	add    esp,0x10
c002573b:	89 c3                	mov    ebx,eax
c002573d:	83 ec 0c             	sub    esp,0xc
c0025740:	53                   	push   ebx
c0025741:	e8 6e ff ff ff       	call   c00256b4 <IOAPIC::IOAPIC()>
c0025746:	83 c4 10             	add    esp,0x10
c0025749:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c002574d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025752:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025756:	89 14 85 80 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce280],edx
c002575d:	a1 60 1d 03 c0       	mov    eax,ds:0xc0031d60
c0025762:	40                   	inc    eax
c0025763:	a3 60 1d 03 c0       	mov    ds:0xc0031d60,eax
c0025768:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c002576d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025773:	83 ec 08             	sub    esp,0x8
c0025776:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002577a:	50                   	push   eax
c002577b:	e8 dc e3 fe ff       	call   c0013b5c <Device::addChild(Device*)>
c0025780:	83 c4 10             	add    esp,0x10
c0025783:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025787:	8b 00                	mov    eax,DWORD PTR [eax]
c0025789:	83 c0 08             	add    eax,0x8
c002578c:	8b 00                	mov    eax,DWORD PTR [eax]
c002578e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025793:	6a 00                	push   0x0
c0025795:	6a 00                	push   0x0
c0025797:	52                   	push   edx
c0025798:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002579c:	ff d0                	call   eax
c002579e:	83 c4 10             	add    esp,0x10
c00257a1:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00257a5:	e9 6b ff ff ff       	jmp    c0025715 <APIC::APIC()+0x39>
c00257aa:	c6 05 a0 1d 03 c0 01 	mov    BYTE PTR ds:0xc0031da0,0x1
c00257b1:	90                   	nop
c00257b2:	83 c4 18             	add    esp,0x18
c00257b5:	5b                   	pop    ebx
c00257b6:	c3                   	ret    
c00257b7:	90                   	nop

c00257b8 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00257b8:	55                   	push   ebp
c00257b9:	89 e5                	mov    ebp,esp
c00257bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257be:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00257c4:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00257c7:	72 1d                	jb     c00257e6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00257c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257cc:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00257d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257d5:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00257db:	01 d0                	add    eax,edx
c00257dd:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00257e0:	73 04                	jae    c00257e6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00257e2:	b0 01                	mov    al,0x1
c00257e4:	eb 02                	jmp    c00257e8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00257e6:	b0 00                	mov    al,0x0
c00257e8:	5d                   	pop    ebp
c00257e9:	c3                   	ret    

c00257ea <IOAPIC::read(int)>:
c00257ea:	55                   	push   ebp
c00257eb:	89 e5                	mov    ebp,esp
c00257ed:	83 ec 10             	sub    esp,0x10
c00257f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257f3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00257f9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00257fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00257ff:	0f b6 d0             	movzx  edx,al
c0025802:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025805:	89 10                	mov    DWORD PTR [eax],edx
c0025807:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002580a:	83 c0 10             	add    eax,0x10
c002580d:	8b 00                	mov    eax,DWORD PTR [eax]
c002580f:	c9                   	leave  
c0025810:	c3                   	ret    
c0025811:	90                   	nop

c0025812 <IOAPIC::open(int, int, void*)>:
c0025812:	55                   	push   ebp
c0025813:	89 e5                	mov    ebp,esp
c0025815:	57                   	push   edi
c0025816:	56                   	push   esi
c0025817:	53                   	push   ebx
c0025818:	83 ec 0c             	sub    esp,0xc
c002581b:	83 ec 0c             	sub    esp,0xc
c002581e:	68 c7 c5 02 c0       	push   0xc002c5c7
c0025823:	e8 fb ce fe ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0025828:	83 c4 10             	add    esp,0x10
c002582b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002582e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025831:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025837:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002583a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025840:	8b 14 85 c0 03 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfc40]
c0025847:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002584a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025850:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025853:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025859:	8b 14 85 40 04 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfbc0]
c0025860:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025863:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025869:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002586c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025872:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025875:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002587b:	0f b6 f8             	movzx  edi,al
c002587e:	89 d0                	mov    eax,edx
c0025880:	ba 00 00 00 00       	mov    edx,0x0
c0025885:	89 c1                	mov    ecx,eax
c0025887:	80 e5 ff             	and    ch,0xff
c002588a:	89 cb                	mov    ebx,ecx
c002588c:	0f b6 f2             	movzx  esi,dl
c002588f:	89 d8                	mov    eax,ebx
c0025891:	89 f2                	mov    edx,esi
c0025893:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025896:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025899:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002589d:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00258a1:	83 e0 00             	and    eax,0x0
c00258a4:	09 d0                	or     eax,edx
c00258a6:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00258aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258ad:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00258b3:	8d 50 01             	lea    edx,[eax+0x1]
c00258b6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00258b9:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00258bf:	0f b6 d0             	movzx  edx,al
c00258c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258c5:	83 c2 08             	add    edx,0x8
c00258c8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00258cc:	0f b6 c9             	movzx  ecx,cl
c00258cf:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00258d5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00258d9:	83 ec 08             	sub    esp,0x8
c00258dc:	6a 01                	push   0x1
c00258de:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258e1:	e8 04 ff ff ff       	call   c00257ea <IOAPIC::read(int)>
c00258e6:	83 c4 10             	add    esp,0x10
c00258e9:	c1 f8 10             	sar    eax,0x10
c00258ec:	0f b6 c0             	movzx  eax,al
c00258ef:	8d 50 01             	lea    edx,[eax+0x1]
c00258f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258f5:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00258fb:	b8 00 00 00 00       	mov    eax,0x0
c0025900:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025903:	5b                   	pop    ebx
c0025904:	5e                   	pop    esi
c0025905:	5f                   	pop    edi
c0025906:	5d                   	pop    ebp
c0025907:	c3                   	ret    

c0025908 <IOAPIC::write(int, int)>:
c0025908:	55                   	push   ebp
c0025909:	89 e5                	mov    ebp,esp
c002590b:	83 ec 10             	sub    esp,0x10
c002590e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025911:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025917:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002591a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002591d:	0f b6 d0             	movzx  edx,al
c0025920:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025923:	89 10                	mov    DWORD PTR [eax],edx
c0025925:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025928:	8d 50 10             	lea    edx,[eax+0x10]
c002592b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002592e:	89 02                	mov    DWORD PTR [edx],eax
c0025930:	90                   	nop
c0025931:	c9                   	leave  
c0025932:	c3                   	ret    
c0025933:	90                   	nop

c0025934 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025934:	55                   	push   ebp
c0025935:	89 e5                	mov    ebp,esp
c0025937:	53                   	push   ebx
c0025938:	83 ec 2c             	sub    esp,0x2c
c002593b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002593e:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025941:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025944:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025947:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002594a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002594d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025950:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025953:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025956:	88 d8                	mov    al,bl
c0025958:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002595b:	88 c8                	mov    al,cl
c002595d:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025960:	88 d0                	mov    al,dl
c0025962:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025965:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025969:	83 c0 08             	add    eax,0x8
c002596c:	01 c0                	add    eax,eax
c002596e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025971:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025975:	83 c0 08             	add    eax,0x8
c0025978:	01 c0                	add    eax,eax
c002597a:	40                   	inc    eax
c002597b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002597e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025981:	50                   	push   eax
c0025982:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025985:	e8 60 fe ff ff       	call   c00257ea <IOAPIC::read(int)>
c002598a:	83 c4 08             	add    esp,0x8
c002598d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025990:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025997:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002599a:	c1 e0 18             	shl    eax,0x18
c002599d:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00259a0:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00259a3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00259a6:	52                   	push   edx
c00259a7:	50                   	push   eax
c00259a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259ab:	e8 58 ff ff ff       	call   c0025908 <IOAPIC::write(int, int)>
c00259b0:	83 c4 0c             	add    esp,0xc
c00259b3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00259b6:	50                   	push   eax
c00259b7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259ba:	e8 2b fe ff ff       	call   c00257ea <IOAPIC::read(int)>
c00259bf:	83 c4 08             	add    esp,0x8
c00259c2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00259c5:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00259cc:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00259d3:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00259da:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00259de:	74 09                	je     c00259e9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00259e0:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00259e7:	eb 07                	jmp    c00259f0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00259e9:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00259f0:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00259f4:	74 09                	je     c00259ff <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00259f6:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00259fd:	eb 07                	jmp    c0025a06 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00259ff:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025a06:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025a0d:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025a11:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025a14:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025a17:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025a1a:	52                   	push   edx
c0025a1b:	50                   	push   eax
c0025a1c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a1f:	e8 e4 fe ff ff       	call   c0025908 <IOAPIC::write(int, int)>
c0025a24:	83 c4 0c             	add    esp,0xc
c0025a27:	90                   	nop
c0025a28:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025a2b:	c9                   	leave  
c0025a2c:	c3                   	ret    
c0025a2d:	90                   	nop

c0025a2e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025a2e:	55                   	push   ebp
c0025a2f:	89 e5                	mov    ebp,esp
c0025a31:	57                   	push   edi
c0025a32:	56                   	push   esi
c0025a33:	53                   	push   ebx
c0025a34:	83 ec 2c             	sub    esp,0x2c
c0025a37:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025a3a:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025a3d:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025a41:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025a45:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025a49:	74 5a                	je     c0025aa5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025a4b:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025a4f:	7f 44                	jg     c0025a95 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025a51:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a54:	05 60 cc 02 c0       	add    eax,0xc002cc60
c0025a59:	8a 00                	mov    al,BYTE PTR [eax]
c0025a5b:	0f b6 c0             	movzx  eax,al
c0025a5e:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025a61:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a64:	66 8b 84 00 60 03 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfca0]
c0025a6c:	0f b7 c0             	movzx  eax,ax
c0025a6f:	83 e0 02             	and    eax,0x2
c0025a72:	85 c0                	test   eax,eax
c0025a74:	74 04                	je     c0025a7a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025a76:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025a7a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a7d:	66 8b 84 00 60 03 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfca0]
c0025a85:	0f b7 c0             	movzx  eax,ax
c0025a88:	83 e0 08             	and    eax,0x8
c0025a8b:	85 c0                	test   eax,eax
c0025a8d:	74 16                	je     c0025aa5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025a8f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025a93:	eb 10                	jmp    c0025aa5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025a95:	83 ec 0c             	sub    esp,0xc
c0025a98:	68 d8 c5 02 c0       	push   0xc002c5d8
c0025a9d:	e8 ed 43 ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c0025aa2:	83 c4 10             	add    esp,0x10
c0025aa5:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025aa9:	a1 60 1d 03 c0       	mov    eax,ds:0xc0031d60
c0025aae:	83 ec 08             	sub    esp,0x8
c0025ab1:	50                   	push   eax
c0025ab2:	68 10 c6 02 c0       	push   0xc002c610
c0025ab7:	e8 67 cc fe ff       	call   c0012723 <Dbg::kprintf(char const*, ...)>
c0025abc:	83 c4 10             	add    esp,0x10
c0025abf:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025ac6:	a1 60 1d 03 c0       	mov    eax,ds:0xc0031d60
c0025acb:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025ace:	7d 67                	jge    c0025b37 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025ad0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025ad3:	8b 04 85 80 1d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce280]
c0025ada:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025add:	83 ec 08             	sub    esp,0x8
c0025ae0:	52                   	push   edx
c0025ae1:	50                   	push   eax
c0025ae2:	e8 d1 fc ff ff       	call   c00257b8 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025ae7:	83 c4 10             	add    esp,0x10
c0025aea:	84 c0                	test   al,al
c0025aec:	74 44                	je     c0025b32 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025aee:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025af1:	8b 1c 85 80 1d 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffce280]
c0025af8:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025afc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025aff:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025b03:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b06:	83 c0 20             	add    eax,0x20
c0025b09:	0f b6 f0             	movzx  esi,al
c0025b0c:	b8 00 00 00 00       	mov    eax,0x0
c0025b11:	99                   	cdq    
c0025b12:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025b15:	0f b6 c9             	movzx  ecx,cl
c0025b18:	83 ec 04             	sub    esp,0x4
c0025b1b:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025b1e:	57                   	push   edi
c0025b1f:	56                   	push   esi
c0025b20:	52                   	push   edx
c0025b21:	50                   	push   eax
c0025b22:	51                   	push   ecx
c0025b23:	53                   	push   ebx
c0025b24:	e8 0b fe ff ff       	call   c0025934 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025b29:	83 c4 20             	add    esp,0x20
c0025b2c:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025b30:	eb 05                	jmp    c0025b37 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025b32:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025b35:	eb 8f                	jmp    c0025ac6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025b37:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025b3a:	83 f0 01             	xor    eax,0x1
c0025b3d:	84 c0                	test   al,al
c0025b3f:	74 10                	je     c0025b51 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025b41:	83 ec 0c             	sub    esp,0xc
c0025b44:	68 27 c6 02 c0       	push   0xc002c627
c0025b49:	e8 41 43 ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c0025b4e:	83 c4 10             	add    esp,0x10
c0025b51:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025b55:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025b5c:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025b60:	7f 65                	jg     c0025bc7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025b62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b65:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b68:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025b6f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025b72:	01 ca                	add    edx,ecx
c0025b74:	83 c2 54             	add    edx,0x54
c0025b77:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025b7b:	85 c0                	test   eax,eax
c0025b7d:	75 43                	jne    c0025bc2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025b7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b82:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b85:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025b8c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025b8f:	01 ca                	add    edx,ecx
c0025b91:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025b94:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025b97:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025b9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b9e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025ba1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025ba8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025bab:	01 ca                	add    edx,ecx
c0025bad:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025bb3:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025bb6:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025bba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025bbd:	83 e8 20             	sub    eax,0x20
c0025bc0:	eb 1a                	jmp    c0025bdc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025bc2:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025bc5:	eb 95                	jmp    c0025b5c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025bc7:	83 ec 0c             	sub    esp,0xc
c0025bca:	68 34 c6 02 c0       	push   0xc002c634
c0025bcf:	e8 bb 42 ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c0025bd4:	83 c4 10             	add    esp,0x10
c0025bd7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025bdc:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025bdf:	5b                   	pop    ebx
c0025be0:	5e                   	pop    esi
c0025be1:	5f                   	pop    edi
c0025be2:	5d                   	pop    ebp
c0025be3:	c3                   	ret    

c0025be4 <PIC::disable()>:
c0025be4:	55                   	push   ebp
c0025be5:	89 e5                	mov    ebp,esp
c0025be7:	83 ec 10             	sub    esp,0x10
c0025bea:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025bf0:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025bf4:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025bf7:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025bfb:	ee                   	out    dx,al
c0025bfc:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025c02:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025c06:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025c09:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025c0d:	ee                   	out    dx,al
c0025c0e:	90                   	nop
c0025c0f:	c9                   	leave  
c0025c10:	c3                   	ret    
c0025c11:	90                   	nop

c0025c12 <PIC::close(int, int, void*)>:
c0025c12:	55                   	push   ebp
c0025c13:	89 e5                	mov    ebp,esp
c0025c15:	83 ec 08             	sub    esp,0x8
c0025c18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0025c1d:	83 c0 3c             	add    eax,0x3c
c0025c20:	8b 00                	mov    eax,DWORD PTR [eax]
c0025c22:	83 ec 0c             	sub    esp,0xc
c0025c25:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c28:	ff d0                	call   eax
c0025c2a:	83 c4 10             	add    esp,0x10
c0025c2d:	b8 00 00 00 00       	mov    eax,0x0
c0025c32:	c9                   	leave  
c0025c33:	c3                   	ret    

c0025c34 <PIC::PIC()>:
c0025c34:	83 ec 0c             	sub    esp,0xc
c0025c37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c3b:	83 ec 08             	sub    esp,0x8
c0025c3e:	68 e0 c6 02 c0       	push   0xc002c6e0
c0025c43:	50                   	push   eax
c0025c44:	e8 81 e8 fe ff       	call   c00144ca <InterruptController::InterruptController(char const*)>
c0025c49:	83 c4 10             	add    esp,0x10
c0025c4c:	ba 0c c7 02 c0       	mov    edx,0xc002c70c
c0025c51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c55:	89 10                	mov    DWORD PTR [eax],edx
c0025c57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c5b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c61:	0f b6 d0             	movzx  edx,al
c0025c64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c68:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025c6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c73:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c79:	0f b6 d0             	movzx  edx,al
c0025c7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c80:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c89:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c8f:	8d 50 01             	lea    edx,[eax+0x1]
c0025c92:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025c96:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025c9c:	0f b6 d0             	movzx  edx,al
c0025c9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ca3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025ca7:	83 e1 3f             	and    ecx,0x3f
c0025caa:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cb2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025cb8:	0f b6 d0             	movzx  edx,al
c0025cbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cbf:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cca:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025cd0:	0f b6 d0             	movzx  edx,al
c0025cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cd7:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025cdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ce0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ce6:	8d 50 01             	lea    edx,[eax+0x1]
c0025ce9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025ced:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025cf3:	0f b6 d0             	movzx  edx,al
c0025cf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cfa:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025cfe:	83 e1 3f             	and    ecx,0x3f
c0025d01:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025d05:	90                   	nop
c0025d06:	83 c4 0c             	add    esp,0xc
c0025d09:	c3                   	ret    

c0025d0a <PIC::ioWait()>:
c0025d0a:	eb 00                	jmp    c0025d0c <PIC::ioWait()+0x2>
c0025d0c:	eb 00                	jmp    c0025d0e <PIC::ioWait()+0x4>
c0025d0e:	90                   	nop
c0025d0f:	c3                   	ret    

c0025d10 <PIC::getIRQReg(int)>:
c0025d10:	55                   	push   ebp
c0025d11:	89 e5                	mov    ebp,esp
c0025d13:	83 ec 10             	sub    esp,0x10
c0025d16:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d19:	0f b6 c0             	movzx  eax,al
c0025d1c:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025d22:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025d25:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025d28:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025d2c:	ee                   	out    dx,al
c0025d2d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d30:	0f b6 c0             	movzx  eax,al
c0025d33:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025d39:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025d3c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025d3f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025d43:	ee                   	out    dx,al
c0025d44:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025d4a:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025d4e:	89 c2                	mov    edx,eax
c0025d50:	ec                   	in     al,dx
c0025d51:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025d54:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025d57:	0f b6 c0             	movzx  eax,al
c0025d5a:	c1 e0 08             	shl    eax,0x8
c0025d5d:	89 c1                	mov    ecx,eax
c0025d5f:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025d65:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025d69:	89 c2                	mov    edx,eax
c0025d6b:	ec                   	in     al,dx
c0025d6c:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025d6f:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025d72:	0f b6 c0             	movzx  eax,al
c0025d75:	09 c8                	or     eax,ecx
c0025d77:	c9                   	leave  
c0025d78:	c3                   	ret    
c0025d79:	90                   	nop

c0025d7a <PIC::eoi(unsigned char)>:
c0025d7a:	55                   	push   ebp
c0025d7b:	89 e5                	mov    ebp,esp
c0025d7d:	83 ec 14             	sub    esp,0x14
c0025d80:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d83:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025d86:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025d8a:	75 1e                	jne    c0025daa <PIC::eoi(unsigned char)+0x30>
c0025d8c:	6a 0b                	push   0xb
c0025d8e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d91:	e8 7a ff ff ff       	call   c0025d10 <PIC::getIRQReg(int)>
c0025d96:	83 c4 08             	add    esp,0x8
c0025d99:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025d9d:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025da1:	25 80 00 00 00       	and    eax,0x80
c0025da6:	85 c0                	test   eax,eax
c0025da8:	74 5f                	je     c0025e09 <PIC::eoi(unsigned char)+0x8f>
c0025daa:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025dae:	75 2d                	jne    c0025ddd <PIC::eoi(unsigned char)+0x63>
c0025db0:	6a 0b                	push   0xb
c0025db2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025db5:	e8 56 ff ff ff       	call   c0025d10 <PIC::getIRQReg(int)>
c0025dba:	83 c4 08             	add    esp,0x8
c0025dbd:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025dc1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025dc4:	66 85 c0             	test   ax,ax
c0025dc7:	78 14                	js     c0025ddd <PIC::eoi(unsigned char)+0x63>
c0025dc9:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025dcf:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025dd3:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025dd6:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025dda:	ee                   	out    dx,al
c0025ddb:	eb 2d                	jmp    c0025e0a <PIC::eoi(unsigned char)+0x90>
c0025ddd:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025de1:	76 12                	jbe    c0025df5 <PIC::eoi(unsigned char)+0x7b>
c0025de3:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025de9:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025ded:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025df0:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025df4:	ee                   	out    dx,al
c0025df5:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025dfb:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025dff:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025e02:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025e06:	ee                   	out    dx,al
c0025e07:	eb 01                	jmp    c0025e0a <PIC::eoi(unsigned char)+0x90>
c0025e09:	90                   	nop
c0025e0a:	c9                   	leave  
c0025e0b:	c3                   	ret    

c0025e0c <PIC::remap()>:
c0025e0c:	55                   	push   ebp
c0025e0d:	89 e5                	mov    ebp,esp
c0025e0f:	83 ec 48             	sub    esp,0x48
c0025e12:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025e19:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025e20:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025e26:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025e29:	89 c2                	mov    edx,eax
c0025e2b:	ec                   	in     al,dx
c0025e2c:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025e2f:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025e32:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025e35:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025e3b:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025e3e:	89 c2                	mov    edx,eax
c0025e40:	ec                   	in     al,dx
c0025e41:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025e44:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025e47:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025e4a:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025e50:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025e54:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025e57:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025e5a:	ee                   	out    dx,al
c0025e5b:	83 ec 0c             	sub    esp,0xc
c0025e5e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e61:	e8 a4 fe ff ff       	call   c0025d0a <PIC::ioWait()>
c0025e66:	83 c4 10             	add    esp,0x10
c0025e69:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025e6f:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025e73:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025e76:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025e79:	ee                   	out    dx,al
c0025e7a:	83 ec 0c             	sub    esp,0xc
c0025e7d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e80:	e8 85 fe ff ff       	call   c0025d0a <PIC::ioWait()>
c0025e85:	83 c4 10             	add    esp,0x10
c0025e88:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025e8b:	0f b6 c0             	movzx  eax,al
c0025e8e:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0025e94:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025e97:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025e9a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0025e9d:	ee                   	out    dx,al
c0025e9e:	83 ec 0c             	sub    esp,0xc
c0025ea1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ea4:	e8 61 fe ff ff       	call   c0025d0a <PIC::ioWait()>
c0025ea9:	83 c4 10             	add    esp,0x10
c0025eac:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025eaf:	0f b6 c0             	movzx  eax,al
c0025eb2:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0025eb8:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0025ebb:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0025ebe:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0025ec1:	ee                   	out    dx,al
c0025ec2:	83 ec 0c             	sub    esp,0xc
c0025ec5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ec8:	e8 3d fe ff ff       	call   c0025d0a <PIC::ioWait()>
c0025ecd:	83 c4 10             	add    esp,0x10
c0025ed0:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0025ed6:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0025eda:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0025edd:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0025ee0:	ee                   	out    dx,al
c0025ee1:	83 ec 0c             	sub    esp,0xc
c0025ee4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ee7:	e8 1e fe ff ff       	call   c0025d0a <PIC::ioWait()>
c0025eec:	83 c4 10             	add    esp,0x10
c0025eef:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0025ef5:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0025ef9:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0025efc:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025eff:	ee                   	out    dx,al
c0025f00:	83 ec 0c             	sub    esp,0xc
c0025f03:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f06:	e8 ff fd ff ff       	call   c0025d0a <PIC::ioWait()>
c0025f0b:	83 c4 10             	add    esp,0x10
c0025f0e:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0025f14:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0025f18:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0025f1b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025f1e:	ee                   	out    dx,al
c0025f1f:	83 ec 0c             	sub    esp,0xc
c0025f22:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f25:	e8 e0 fd ff ff       	call   c0025d0a <PIC::ioWait()>
c0025f2a:	83 c4 10             	add    esp,0x10
c0025f2d:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0025f33:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0025f37:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0025f3a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025f3d:	ee                   	out    dx,al
c0025f3e:	83 ec 0c             	sub    esp,0xc
c0025f41:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f44:	e8 c1 fd ff ff       	call   c0025d0a <PIC::ioWait()>
c0025f49:	83 c4 10             	add    esp,0x10
c0025f4c:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0025f50:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0025f56:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0025f59:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0025f5c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025f5f:	ee                   	out    dx,al
c0025f60:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0025f64:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0025f6a:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0025f6d:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0025f70:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025f73:	ee                   	out    dx,al
c0025f74:	90                   	nop
c0025f75:	c9                   	leave  
c0025f76:	c3                   	ret    
c0025f77:	90                   	nop

c0025f78 <PIC::open(int, int, void*)>:
c0025f78:	55                   	push   ebp
c0025f79:	89 e5                	mov    ebp,esp
c0025f7b:	83 ec 18             	sub    esp,0x18
c0025f7e:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0025f84:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0025f88:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025f8b:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025f8f:	ee                   	out    dx,al
c0025f90:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0025f96:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0025f9a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025f9d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025fa1:	ee                   	out    dx,al
c0025fa2:	83 ec 0c             	sub    esp,0xc
c0025fa5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fa8:	e8 5f fe ff ff       	call   c0025e0c <PIC::remap()>
c0025fad:	83 c4 10             	add    esp,0x10
c0025fb0:	b8 00 00 00 00       	mov    eax,0x0
c0025fb5:	c9                   	leave  
c0025fb6:	c3                   	ret    
c0025fb7:	90                   	nop

c0025fb8 <APICTimer::close(int, int, void*)>:
c0025fb8:	b8 00 00 00 00       	mov    eax,0x0
c0025fbd:	c3                   	ret    

c0025fbe <apicTimerHandler(regs*, void*)>:
c0025fbe:	83 ec 0c             	sub    esp,0xc
c0025fc1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025fc5:	8b 00                	mov    eax,DWORD PTR [eax]
c0025fc7:	99                   	cdq    
c0025fc8:	52                   	push   edx
c0025fc9:	50                   	push   eax
c0025fca:	6a 00                	push   0x0
c0025fcc:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025fd1:	e8 8e 07 00 00       	call   c0026764 <__udivdi3>
c0025fd6:	83 c4 10             	add    esp,0x10
c0025fd9:	83 ec 08             	sub    esp,0x8
c0025fdc:	52                   	push   edx
c0025fdd:	50                   	push   eax
c0025fde:	e8 3e 06 ff ff       	call   c0016621 <timerHandler(unsigned long long)>
c0025fe3:	83 c4 10             	add    esp,0x10
c0025fe6:	90                   	nop
c0025fe7:	83 c4 0c             	add    esp,0xc
c0025fea:	c3                   	ret    
c0025feb:	90                   	nop

c0025fec <APICTimer::write(int)>:
c0025fec:	53                   	push   ebx
c0025fed:	83 ec 28             	sub    esp,0x28
c0025ff0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025ff4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0025ff8:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025ffe:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0026003:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026009:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002600f:	83 ec 0c             	sub    esp,0xc
c0026012:	50                   	push   eax
c0026013:	e8 de f4 ff ff       	call   c00254f6 <APIC::getBase()>
c0026018:	83 c4 10             	add    esp,0x10
c002601b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002601f:	a1 70 e0 02 c0       	mov    eax,ds:0xc002e070
c0026024:	8b 15 74 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e074
c002602a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002602e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026032:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026036:	05 e0 03 00 00       	add    eax,0x3e0
c002603b:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026041:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026045:	05 80 03 00 00       	add    eax,0x380
c002604a:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026050:	fb                   	sti    
c0026051:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026055:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026059:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c002605e:	83 d2 00             	adc    edx,0x0
c0026061:	89 c1                	mov    ecx,eax
c0026063:	89 d3                	mov    ebx,edx
c0026065:	a1 70 e0 02 c0       	mov    eax,ds:0xc002e070
c002606a:	8b 15 74 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e074
c0026070:	39 c8                	cmp    eax,ecx
c0026072:	89 d0                	mov    eax,edx
c0026074:	19 d8                	sbb    eax,ebx
c0026076:	73 02                	jae    c002607a <APICTimer::write(int)+0x8e>
c0026078:	eb d7                	jmp    c0026051 <APICTimer::write(int)+0x65>
c002607a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002607e:	05 20 03 00 00       	add    eax,0x320
c0026083:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026089:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002608d:	05 90 03 00 00       	add    eax,0x390
c0026092:	8b 00                	mov    eax,DWORD PTR [eax]
c0026094:	f7 d0                	not    eax
c0026096:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002609a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002609e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00260a2:	ba 00 00 00 00       	mov    edx,0x0
c00260a7:	f7 f3                	div    ebx
c00260a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00260ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00260b1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00260b7:	0d 00 00 02 00       	or     eax,0x20000
c00260bc:	89 c2                	mov    edx,eax
c00260be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00260c2:	05 20 03 00 00       	add    eax,0x320
c00260c7:	89 10                	mov    DWORD PTR [eax],edx
c00260c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00260cd:	05 e0 03 00 00       	add    eax,0x3e0
c00260d2:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00260d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00260dc:	05 80 03 00 00       	add    eax,0x380
c00260e1:	89 c2                	mov    edx,eax
c00260e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00260e7:	89 02                	mov    DWORD PTR [edx],eax
c00260e9:	90                   	nop
c00260ea:	83 c4 28             	add    esp,0x28
c00260ed:	5b                   	pop    ebx
c00260ee:	c3                   	ret    
c00260ef:	90                   	nop

c00260f0 <APICTimer::open(int, int, void*)>:
c00260f0:	57                   	push   edi
c00260f1:	56                   	push   esi
c00260f2:	53                   	push   ebx
c00260f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00260f9:	83 c0 24             	add    eax,0x24
c00260fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00260fe:	83 ec 08             	sub    esp,0x8
c0026101:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026105:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026109:	ff d0                	call   eax
c002610b:	83 c4 10             	add    esp,0x10
c002610e:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0026113:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026119:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002611f:	83 ec 0c             	sub    esp,0xc
c0026122:	50                   	push   eax
c0026123:	e8 ce f3 ff ff       	call   c00254f6 <APIC::getBase()>
c0026128:	83 c4 10             	add    esp,0x10
c002612b:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026131:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026135:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002613b:	0f b6 f8             	movzx  edi,al
c002613e:	89 d0                	mov    eax,edx
c0026140:	ba 00 00 00 00       	mov    edx,0x0
c0026145:	89 c1                	mov    ecx,eax
c0026147:	80 e5 ff             	and    ch,0xff
c002614a:	89 cb                	mov    ebx,ecx
c002614c:	0f b6 f2             	movzx  esi,dl
c002614f:	89 d8                	mov    eax,ebx
c0026151:	89 f2                	mov    edx,esi
c0026153:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026157:	8d 5f 08             	lea    ebx,[edi+0x8]
c002615a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002615e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026162:	83 e0 00             	and    eax,0x0
c0026165:	09 d0                	or     eax,edx
c0026167:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002616b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002616f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026175:	8d 50 01             	lea    edx,[eax+0x1]
c0026178:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002617c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026182:	0f b6 d0             	movzx  edx,al
c0026185:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026189:	83 c2 08             	add    edx,0x8
c002618c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026190:	0f b6 c9             	movzx  ecx,cl
c0026193:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026199:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002619d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261a1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00261a5:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00261ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00261b3:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00261b9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00261bd:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00261c3:	83 ec 0c             	sub    esp,0xc
c00261c6:	51                   	push   ecx
c00261c7:	6a 01                	push   0x1
c00261c9:	68 be 5f 02 c0       	push   0xc0025fbe
c00261ce:	52                   	push   edx
c00261cf:	50                   	push   eax
c00261d0:	e8 ff d8 fe ff       	call   c0013ad4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00261d5:	83 c4 20             	add    esp,0x20
c00261d8:	89 c2                	mov    edx,eax
c00261da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261de:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00261e4:	b8 00 00 00 00       	mov    eax,0x0
c00261e9:	5b                   	pop    ebx
c00261ea:	5e                   	pop    esi
c00261eb:	5f                   	pop    edi
c00261ec:	c3                   	ret    
c00261ed:	90                   	nop

c00261ee <APICTimer::APICTimer()>:
c00261ee:	83 ec 0c             	sub    esp,0xc
c00261f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261f5:	83 ec 08             	sub    esp,0x8
c00261f8:	68 4c c7 02 c0       	push   0xc002c74c
c00261fd:	50                   	push   eax
c00261fe:	e8 8f 03 ff ff       	call   c0016592 <Timer::Timer(char const*)>
c0026203:	83 c4 10             	add    esp,0x10
c0026206:	ba 60 c7 02 c0       	mov    edx,0xc002c760
c002620b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002620f:	89 10                	mov    DWORD PTR [eax],edx
c0026211:	90                   	nop
c0026212:	83 c4 0c             	add    esp,0xc
c0026215:	c3                   	ret    

c0026216 <PIT::write(int)>:
c0026216:	83 ec 10             	sub    esp,0x10
c0026219:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002621d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026221:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026227:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002622b:	a3 a4 1d 03 c0       	mov    ds:0xc0031da4,eax
c0026230:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026235:	99                   	cdq    
c0026236:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002623a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002623e:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026245:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002624a:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002624e:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026253:	ee                   	out    dx,al
c0026254:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026258:	0f b6 c0             	movzx  eax,al
c002625b:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026262:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026266:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002626a:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002626f:	ee                   	out    dx,al
c0026270:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026274:	c1 f8 08             	sar    eax,0x8
c0026277:	0f b6 c0             	movzx  eax,al
c002627a:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026281:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026285:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026289:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002628e:	ee                   	out    dx,al
c002628f:	90                   	nop
c0026290:	83 c4 10             	add    esp,0x10
c0026293:	c3                   	ret    

c0026294 <pitHandler(regs*, void*)>:
c0026294:	83 ec 0c             	sub    esp,0xc
c0026297:	a1 a4 1d 03 c0       	mov    eax,ds:0xc0031da4
c002629c:	99                   	cdq    
c002629d:	52                   	push   edx
c002629e:	50                   	push   eax
c002629f:	6a 00                	push   0x0
c00262a1:	68 00 ca 9a 3b       	push   0x3b9aca00
c00262a6:	e8 b9 04 00 00       	call   c0026764 <__udivdi3>
c00262ab:	83 c4 10             	add    esp,0x10
c00262ae:	83 ec 08             	sub    esp,0x8
c00262b1:	52                   	push   edx
c00262b2:	50                   	push   eax
c00262b3:	e8 69 03 ff ff       	call   c0016621 <timerHandler(unsigned long long)>
c00262b8:	83 c4 10             	add    esp,0x10
c00262bb:	90                   	nop
c00262bc:	83 c4 0c             	add    esp,0xc
c00262bf:	c3                   	ret    

c00262c0 <PIT::open(int, int, void*)>:
c00262c0:	83 ec 0c             	sub    esp,0xc
c00262c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00262c9:	83 c0 24             	add    eax,0x24
c00262cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00262ce:	83 ec 08             	sub    esp,0x8
c00262d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00262d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00262d9:	ff d0                	call   eax
c00262db:	83 c4 10             	add    esp,0x10
c00262de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262e2:	83 ec 0c             	sub    esp,0xc
c00262e5:	6a 00                	push   0x0
c00262e7:	6a 01                	push   0x1
c00262e9:	68 94 62 02 c0       	push   0xc0026294
c00262ee:	6a 00                	push   0x0
c00262f0:	50                   	push   eax
c00262f1:	e8 de d7 fe ff       	call   c0013ad4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00262f6:	83 c4 20             	add    esp,0x20
c00262f9:	89 c2                	mov    edx,eax
c00262fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262ff:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026305:	b8 00 00 00 00       	mov    eax,0x0
c002630a:	83 c4 0c             	add    esp,0xc
c002630d:	c3                   	ret    

c002630e <PIT::close(int, int, void*)>:
c002630e:	83 ec 0c             	sub    esp,0xc
c0026311:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026315:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002631f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026323:	6a 01                	push   0x1
c0026325:	68 94 62 02 c0       	push   0xc0026294
c002632a:	6a 00                	push   0x0
c002632c:	50                   	push   eax
c002632d:	e8 ec d7 fe ff       	call   c0013b1e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026332:	83 c4 10             	add    esp,0x10
c0026335:	b8 00 00 00 00       	mov    eax,0x0
c002633a:	83 c4 0c             	add    esp,0xc
c002633d:	c3                   	ret    

c002633e <PIT::PIT()>:
c002633e:	83 ec 0c             	sub    esp,0xc
c0026341:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026345:	83 ec 08             	sub    esp,0x8
c0026348:	68 88 c7 02 c0       	push   0xc002c788
c002634d:	50                   	push   eax
c002634e:	e8 3f 02 ff ff       	call   c0016592 <Timer::Timer(char const*)>
c0026353:	83 c4 10             	add    esp,0x10
c0026356:	ba b0 c7 02 c0       	mov    edx,0xc002c7b0
c002635b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002635f:	89 10                	mov    DWORD PTR [eax],edx
c0026361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026365:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002636b:	0f b6 d0             	movzx  edx,al
c002636e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026372:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026379:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002637d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026383:	0f b6 d0             	movzx  edx,al
c0026386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002638a:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002638f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026393:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026399:	8d 50 01             	lea    edx,[eax+0x1]
c002639c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00263a0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00263a6:	0f b6 d0             	movzx  edx,al
c00263a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263ad:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00263b1:	83 e1 3f             	and    ecx,0x3f
c00263b4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00263b8:	90                   	nop
c00263b9:	83 c4 0c             	add    esp,0xc
c00263bc:	c3                   	ret    
c00263bd:	66 90                	xchg   ax,ax
c00263bf:	90                   	nop

c00263c0 <avxDetect>:
c00263c0:	b8 00 00 00 00       	mov    eax,0x0
c00263c5:	c3                   	ret    

c00263c6 <avxSave>:
c00263c6:	c3                   	ret    

c00263c7 <avxLoad>:
c00263c7:	c3                   	ret    

c00263c8 <avxInit>:
c00263c8:	c3                   	ret    

c00263c9 <avxClose>:
c00263c9:	c3                   	ret    

c00263ca <wouldSheSayYes>:
c00263ca:	c3                   	ret    
c00263cb:	49                   	dec    ecx
c00263cc:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00263d0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00263d4:	75 20                	jne    c00263f6 <sseDetect.noSSE+0x1>
c00263d6:	4e                   	dec    esi
c00263d7:	79 61                	jns    c002643a <x87Detect+0x14>
c00263d9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00263de:	66 90                	xchg   ax,ax

c00263e0 <absolutelyNoChanceInHell>:
c00263e0:	b8 01 00 00 00       	mov    eax,0x1
c00263e5:	0f a2                	cpuid  
c00263e7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00263ed:	74 06                	je     c00263f5 <sseDetect.noSSE>
c00263ef:	b8 01 00 00 00       	mov    eax,0x1
c00263f4:	c3                   	ret    

c00263f5 <sseDetect.noSSE>:
c00263f5:	31 c0                	xor    eax,eax
c00263f7:	c3                   	ret    

c00263f8 <sseSave>:
c00263f8:	0f ae 44 24 04       	fxsave [esp+0x4]
c00263fd:	c3                   	ret    

c00263fe <sseLoad>:
c00263fe:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026403:	c3                   	ret    

c0026404 <sseInit>:
c0026404:	e8 49 00 00 00       	call   c0026452 <x87Init>
c0026409:	0f 20 e0             	mov    eax,cr4
c002640c:	66 0d 00 06          	or     ax,0x600
c0026410:	0f 22 e0             	mov    cr4,eax
c0026413:	c3                   	ret    

c0026414 <sseClose>:
c0026414:	c3                   	ret    
c0026415:	66 90                	xchg   ax,ax
c0026417:	66 90                	xchg   ax,ax
c0026419:	66 90                	xchg   ax,ax
c002641b:	66 90                	xchg   ax,ax
c002641d:	66 90                	xchg   ax,ax
c002641f:	90                   	nop

c0026420 <value_37F>:
c0026420:	7f 03                	jg     c0026425 <value_37A+0x1>

c0026422 <value_37E>:
c0026422:	7e 03                	jle    c0026427 <x87Detect+0x1>

c0026424 <value_37A>:
c0026424:	7a 03                	jp     c0026429 <x87Detect+0x3>

c0026426 <x87Detect>:
c0026426:	b8 01 00 00 00       	mov    eax,0x1
c002642b:	0f a2                	cpuid  
c002642d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026433:	74 06                	je     c002643b <x87Detect.nox87>
c0026435:	b8 01 00 00 00       	mov    eax,0x1
c002643a:	c3                   	ret    

c002643b <x87Detect.nox87>:
c002643b:	b8 00 00 00 00       	mov    eax,0x0
c0026440:	c3                   	ret    

c0026441 <x87Save>:
c0026441:	55                   	push   ebp
c0026442:	89 e5                	mov    ebp,esp
c0026444:	9b dd 75 08          	fsave  [ebp+0x8]
c0026448:	c9                   	leave  
c0026449:	c3                   	ret    

c002644a <x87Load>:
c002644a:	55                   	push   ebp
c002644b:	89 e5                	mov    ebp,esp
c002644d:	dd 65 08             	frstor [ebp+0x8]
c0026450:	c9                   	leave  
c0026451:	c3                   	ret    

c0026452 <x87Init>:
c0026452:	9b db e3             	finit  
c0026455:	0f 20 c0             	mov    eax,cr0
c0026458:	66 25 fb ff          	and    ax,0xfffb
c002645c:	66 0d 22 00          	or     ax,0x22
c0026460:	0f 22 c0             	mov    cr0,eax
c0026463:	0f 06                	clts   
c0026465:	d9 2d 24 64 02 c0    	fldcw  WORD PTR ds:0xc0026424
c002646b:	c3                   	ret    

c002646c <x87Close>:
c002646c:	c3                   	ret    
c002646d:	66 90                	xchg   ax,ax
c002646f:	90                   	nop

c0026470 <__do_global_ctors_aux>:
c0026470:	a1 64 90 02 c0       	mov    eax,ds:0xc0029064
c0026475:	83 f8 ff             	cmp    eax,0xffffffff
c0026478:	74 1a                	je     c0026494 <__do_global_ctors_aux+0x24>
c002647a:	55                   	push   ebp
c002647b:	89 e5                	mov    ebp,esp
c002647d:	53                   	push   ebx
c002647e:	52                   	push   edx
c002647f:	bb 64 90 02 c0       	mov    ebx,0xc0029064
c0026484:	ff d0                	call   eax
c0026486:	83 eb 04             	sub    ebx,0x4
c0026489:	8b 03                	mov    eax,DWORD PTR [ebx]
c002648b:	83 f8 ff             	cmp    eax,0xffffffff
c002648e:	75 f4                	jne    c0026484 <__do_global_ctors_aux+0x14>
c0026490:	58                   	pop    eax
c0026491:	5b                   	pop    ebx
c0026492:	5d                   	pop    ebp
c0026493:	c3                   	ret    
c0026494:	c3                   	ret    
c0026495:	66 90                	xchg   ax,ax
c0026497:	90                   	nop

c0026498 <__divdi3>:
c0026498:	55                   	push   ebp
c0026499:	57                   	push   edi
c002649a:	56                   	push   esi
c002649b:	53                   	push   ebx
c002649c:	83 ec 1c             	sub    esp,0x1c
c002649f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00264a3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00264a7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00264aa:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00264ae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00264b2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00264b6:	85 db                	test   ebx,ebx
c00264b8:	0f 88 8e 00 00 00    	js     c002654c <__divdi3+0xb4>
c00264be:	89 dd                	mov    ebp,ebx
c00264c0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00264c8:	89 d3                	mov    ebx,edx
c00264ca:	85 d2                	test   edx,edx
c00264cc:	79 0d                	jns    c00264db <__divdi3+0x43>
c00264ce:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00264d2:	f7 d8                	neg    eax
c00264d4:	83 d2 00             	adc    edx,0x0
c00264d7:	f7 da                	neg    edx
c00264d9:	89 d3                	mov    ebx,edx
c00264db:	89 c7                	mov    edi,eax
c00264dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00264e0:	85 db                	test   ebx,ebx
c00264e2:	75 48                	jne    c002652c <__divdi3+0x94>
c00264e4:	39 ef                	cmp    edi,ebp
c00264e6:	76 24                	jbe    c002650c <__divdi3+0x74>
c00264e8:	89 ea                	mov    edx,ebp
c00264ea:	f7 f7                	div    edi
c00264ec:	89 c1                	mov    ecx,eax
c00264ee:	31 f6                	xor    esi,esi
c00264f0:	89 c8                	mov    eax,ecx
c00264f2:	89 f2                	mov    edx,esi
c00264f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00264f8:	85 c9                	test   ecx,ecx
c00264fa:	74 07                	je     c0026503 <__divdi3+0x6b>
c00264fc:	f7 d8                	neg    eax
c00264fe:	83 d2 00             	adc    edx,0x0
c0026501:	f7 da                	neg    edx
c0026503:	83 c4 1c             	add    esp,0x1c
c0026506:	5b                   	pop    ebx
c0026507:	5e                   	pop    esi
c0026508:	5f                   	pop    edi
c0026509:	5d                   	pop    ebp
c002650a:	c3                   	ret    
c002650b:	90                   	nop
c002650c:	85 ff                	test   edi,edi
c002650e:	75 0b                	jne    c002651b <__divdi3+0x83>
c0026510:	b8 01 00 00 00       	mov    eax,0x1
c0026515:	31 d2                	xor    edx,edx
c0026517:	f7 f3                	div    ebx
c0026519:	89 c7                	mov    edi,eax
c002651b:	31 d2                	xor    edx,edx
c002651d:	89 e8                	mov    eax,ebp
c002651f:	f7 f7                	div    edi
c0026521:	89 c6                	mov    esi,eax
c0026523:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026526:	f7 f7                	div    edi
c0026528:	89 c1                	mov    ecx,eax
c002652a:	eb c4                	jmp    c00264f0 <__divdi3+0x58>
c002652c:	39 eb                	cmp    ebx,ebp
c002652e:	77 3c                	ja     c002656c <__divdi3+0xd4>
c0026530:	0f bd f3             	bsr    esi,ebx
c0026533:	83 f6 1f             	xor    esi,0x1f
c0026536:	75 40                	jne    c0026578 <__divdi3+0xe0>
c0026538:	39 eb                	cmp    ebx,ebp
c002653a:	72 09                	jb     c0026545 <__divdi3+0xad>
c002653c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002653f:	0f 87 97 00 00 00    	ja     c00265dc <__divdi3+0x144>
c0026545:	b9 01 00 00 00       	mov    ecx,0x1
c002654a:	eb a4                	jmp    c00264f0 <__divdi3+0x58>
c002654c:	f7 d9                	neg    ecx
c002654e:	83 d3 00             	adc    ebx,0x0
c0026551:	f7 db                	neg    ebx
c0026553:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026556:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002655a:	89 dd                	mov    ebp,ebx
c002655c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026564:	e9 5f ff ff ff       	jmp    c00264c8 <__divdi3+0x30>
c0026569:	8d 76 00             	lea    esi,[esi+0x0]
c002656c:	31 f6                	xor    esi,esi
c002656e:	31 c9                	xor    ecx,ecx
c0026570:	e9 7b ff ff ff       	jmp    c00264f0 <__divdi3+0x58>
c0026575:	8d 76 00             	lea    esi,[esi+0x0]
c0026578:	b8 20 00 00 00       	mov    eax,0x20
c002657d:	29 f0                	sub    eax,esi
c002657f:	89 f1                	mov    ecx,esi
c0026581:	d3 e3                	shl    ebx,cl
c0026583:	89 fa                	mov    edx,edi
c0026585:	88 c1                	mov    cl,al
c0026587:	d3 ea                	shr    edx,cl
c0026589:	09 da                	or     edx,ebx
c002658b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002658f:	89 f1                	mov    ecx,esi
c0026591:	d3 e7                	shl    edi,cl
c0026593:	89 eb                	mov    ebx,ebp
c0026595:	88 c1                	mov    cl,al
c0026597:	d3 eb                	shr    ebx,cl
c0026599:	89 f1                	mov    ecx,esi
c002659b:	d3 e5                	shl    ebp,cl
c002659d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00265a0:	88 c1                	mov    cl,al
c00265a2:	d3 ea                	shr    edx,cl
c00265a4:	09 d5                	or     ebp,edx
c00265a6:	89 e8                	mov    eax,ebp
c00265a8:	89 da                	mov    edx,ebx
c00265aa:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00265ae:	89 d3                	mov    ebx,edx
c00265b0:	89 c5                	mov    ebp,eax
c00265b2:	f7 e7                	mul    edi
c00265b4:	39 d3                	cmp    ebx,edx
c00265b6:	72 18                	jb     c00265d0 <__divdi3+0x138>
c00265b8:	74 0a                	je     c00265c4 <__divdi3+0x12c>
c00265ba:	89 e9                	mov    ecx,ebp
c00265bc:	31 f6                	xor    esi,esi
c00265be:	e9 2d ff ff ff       	jmp    c00264f0 <__divdi3+0x58>
c00265c3:	90                   	nop
c00265c4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00265c7:	89 f1                	mov    ecx,esi
c00265c9:	d3 e7                	shl    edi,cl
c00265cb:	39 c7                	cmp    edi,eax
c00265cd:	73 eb                	jae    c00265ba <__divdi3+0x122>
c00265cf:	90                   	nop
c00265d0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00265d3:	31 f6                	xor    esi,esi
c00265d5:	e9 16 ff ff ff       	jmp    c00264f0 <__divdi3+0x58>
c00265da:	66 90                	xchg   ax,ax
c00265dc:	31 c9                	xor    ecx,ecx
c00265de:	e9 0d ff ff ff       	jmp    c00264f0 <__divdi3+0x58>
c00265e3:	90                   	nop

c00265e4 <__moddi3>:
c00265e4:	55                   	push   ebp
c00265e5:	57                   	push   edi
c00265e6:	56                   	push   esi
c00265e7:	53                   	push   ebx
c00265e8:	83 ec 2c             	sub    esp,0x2c
c00265eb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00265ef:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00265f3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00265f7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00265fb:	85 db                	test   ebx,ebx
c00265fd:	0f 88 85 00 00 00    	js     c0026688 <__moddi3+0xa4>
c0026603:	89 de                	mov    esi,ebx
c0026605:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002660d:	89 d7                	mov    edi,edx
c002660f:	85 d2                	test   edx,edx
c0026611:	79 09                	jns    c002661c <__moddi3+0x38>
c0026613:	f7 d8                	neg    eax
c0026615:	83 d2 00             	adc    edx,0x0
c0026618:	f7 da                	neg    edx
c002661a:	89 d7                	mov    edi,edx
c002661c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026620:	89 cd                	mov    ebp,ecx
c0026622:	85 ff                	test   edi,edi
c0026624:	75 52                	jne    c0026678 <__moddi3+0x94>
c0026626:	89 c3                	mov    ebx,eax
c0026628:	39 f0                	cmp    eax,esi
c002662a:	76 24                	jbe    c0026650 <__moddi3+0x6c>
c002662c:	89 c8                	mov    eax,ecx
c002662e:	89 f2                	mov    edx,esi
c0026630:	f7 f3                	div    ebx
c0026632:	89 d6                	mov    esi,edx
c0026634:	89 f0                	mov    eax,esi
c0026636:	31 d2                	xor    edx,edx
c0026638:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002663c:	85 c9                	test   ecx,ecx
c002663e:	74 07                	je     c0026647 <__moddi3+0x63>
c0026640:	f7 d8                	neg    eax
c0026642:	83 d2 00             	adc    edx,0x0
c0026645:	f7 da                	neg    edx
c0026647:	83 c4 2c             	add    esp,0x2c
c002664a:	5b                   	pop    ebx
c002664b:	5e                   	pop    esi
c002664c:	5f                   	pop    edi
c002664d:	5d                   	pop    ebp
c002664e:	c3                   	ret    
c002664f:	90                   	nop
c0026650:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0026654:	85 db                	test   ebx,ebx
c0026656:	75 0d                	jne    c0026665 <__moddi3+0x81>
c0026658:	b8 01 00 00 00       	mov    eax,0x1
c002665d:	31 d2                	xor    edx,edx
c002665f:	f7 f7                	div    edi
c0026661:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026665:	89 f0                	mov    eax,esi
c0026667:	31 d2                	xor    edx,edx
c0026669:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002666d:	f7 f7                	div    edi
c002666f:	89 e8                	mov    eax,ebp
c0026671:	f7 f7                	div    edi
c0026673:	89 d6                	mov    esi,edx
c0026675:	eb bd                	jmp    c0026634 <__moddi3+0x50>
c0026677:	90                   	nop
c0026678:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002667c:	39 f7                	cmp    edi,esi
c002667e:	76 20                	jbe    c00266a0 <__moddi3+0xbc>
c0026680:	89 c8                	mov    eax,ecx
c0026682:	89 f2                	mov    edx,esi
c0026684:	eb b2                	jmp    c0026638 <__moddi3+0x54>
c0026686:	66 90                	xchg   ax,ax
c0026688:	f7 d9                	neg    ecx
c002668a:	83 d3 00             	adc    ebx,0x0
c002668d:	f7 db                	neg    ebx
c002668f:	89 de                	mov    esi,ebx
c0026691:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026699:	e9 6f ff ff ff       	jmp    c002660d <__moddi3+0x29>
c002669e:	66 90                	xchg   ax,ax
c00266a0:	0f bd c7             	bsr    eax,edi
c00266a3:	83 f0 1f             	xor    eax,0x1f
c00266a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00266aa:	75 24                	jne    c00266d0 <__moddi3+0xec>
c00266ac:	39 f7                	cmp    edi,esi
c00266ae:	72 06                	jb     c00266b6 <__moddi3+0xd2>
c00266b0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00266b4:	77 0c                	ja     c00266c2 <__moddi3+0xde>
c00266b6:	89 e9                	mov    ecx,ebp
c00266b8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00266bc:	19 fe                	sbb    esi,edi
c00266be:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00266c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00266c6:	89 f2                	mov    edx,esi
c00266c8:	e9 6b ff ff ff       	jmp    c0026638 <__moddi3+0x54>
c00266cd:	8d 76 00             	lea    esi,[esi+0x0]
c00266d0:	b8 20 00 00 00       	mov    eax,0x20
c00266d5:	89 c2                	mov    edx,eax
c00266d7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00266db:	29 da                	sub    edx,ebx
c00266dd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00266e1:	88 d9                	mov    cl,bl
c00266e3:	d3 e7                	shl    edi,cl
c00266e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00266e9:	88 d1                	mov    cl,dl
c00266eb:	d3 e8                	shr    eax,cl
c00266ed:	09 c7                	or     edi,eax
c00266ef:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00266f3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00266f7:	89 d8                	mov    eax,ebx
c00266f9:	88 d9                	mov    cl,bl
c00266fb:	d3 e7                	shl    edi,cl
c00266fd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026701:	89 f3                	mov    ebx,esi
c0026703:	88 d1                	mov    cl,dl
c0026705:	d3 eb                	shr    ebx,cl
c0026707:	89 c7                	mov    edi,eax
c0026709:	88 c1                	mov    cl,al
c002670b:	d3 e6                	shl    esi,cl
c002670d:	89 e8                	mov    eax,ebp
c002670f:	88 d1                	mov    cl,dl
c0026711:	d3 e8                	shr    eax,cl
c0026713:	09 f0                	or     eax,esi
c0026715:	89 f9                	mov    ecx,edi
c0026717:	d3 e5                	shl    ebp,cl
c0026719:	89 da                	mov    edx,ebx
c002671b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002671f:	89 d3                	mov    ebx,edx
c0026721:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026725:	89 c6                	mov    esi,eax
c0026727:	89 d1                	mov    ecx,edx
c0026729:	39 d3                	cmp    ebx,edx
c002672b:	72 27                	jb     c0026754 <__moddi3+0x170>
c002672d:	74 21                	je     c0026750 <__moddi3+0x16c>
c002672f:	29 f5                	sub    ebp,esi
c0026731:	19 cb                	sbb    ebx,ecx
c0026733:	89 de                	mov    esi,ebx
c0026735:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026739:	d3 e6                	shl    esi,cl
c002673b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002673f:	89 f9                	mov    ecx,edi
c0026741:	d3 ed                	shr    ebp,cl
c0026743:	09 ee                	or     esi,ebp
c0026745:	89 f0                	mov    eax,esi
c0026747:	d3 eb                	shr    ebx,cl
c0026749:	89 da                	mov    edx,ebx
c002674b:	e9 e8 fe ff ff       	jmp    c0026638 <__moddi3+0x54>
c0026750:	39 c5                	cmp    ebp,eax
c0026752:	73 db                	jae    c002672f <__moddi3+0x14b>
c0026754:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026758:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002675c:	89 d1                	mov    ecx,edx
c002675e:	89 c6                	mov    esi,eax
c0026760:	eb cd                	jmp    c002672f <__moddi3+0x14b>
c0026762:	66 90                	xchg   ax,ax

c0026764 <__udivdi3>:
c0026764:	55                   	push   ebp
c0026765:	57                   	push   edi
c0026766:	56                   	push   esi
c0026767:	53                   	push   ebx
c0026768:	83 ec 1c             	sub    esp,0x1c
c002676b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002676f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026773:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026777:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002677b:	85 d2                	test   edx,edx
c002677d:	75 41                	jne    c00267c0 <__udivdi3+0x5c>
c002677f:	39 f7                	cmp    edi,esi
c0026781:	76 15                	jbe    c0026798 <__udivdi3+0x34>
c0026783:	89 e8                	mov    eax,ebp
c0026785:	89 f2                	mov    edx,esi
c0026787:	f7 f7                	div    edi
c0026789:	31 db                	xor    ebx,ebx
c002678b:	89 da                	mov    edx,ebx
c002678d:	83 c4 1c             	add    esp,0x1c
c0026790:	5b                   	pop    ebx
c0026791:	5e                   	pop    esi
c0026792:	5f                   	pop    edi
c0026793:	5d                   	pop    ebp
c0026794:	c3                   	ret    
c0026795:	8d 76 00             	lea    esi,[esi+0x0]
c0026798:	89 f9                	mov    ecx,edi
c002679a:	85 ff                	test   edi,edi
c002679c:	75 0b                	jne    c00267a9 <__udivdi3+0x45>
c002679e:	b8 01 00 00 00       	mov    eax,0x1
c00267a3:	31 d2                	xor    edx,edx
c00267a5:	f7 f7                	div    edi
c00267a7:	89 c1                	mov    ecx,eax
c00267a9:	31 d2                	xor    edx,edx
c00267ab:	89 f0                	mov    eax,esi
c00267ad:	f7 f1                	div    ecx
c00267af:	89 c3                	mov    ebx,eax
c00267b1:	89 e8                	mov    eax,ebp
c00267b3:	f7 f1                	div    ecx
c00267b5:	89 da                	mov    edx,ebx
c00267b7:	83 c4 1c             	add    esp,0x1c
c00267ba:	5b                   	pop    ebx
c00267bb:	5e                   	pop    esi
c00267bc:	5f                   	pop    edi
c00267bd:	5d                   	pop    ebp
c00267be:	c3                   	ret    
c00267bf:	90                   	nop
c00267c0:	39 f2                	cmp    edx,esi
c00267c2:	77 1c                	ja     c00267e0 <__udivdi3+0x7c>
c00267c4:	0f bd da             	bsr    ebx,edx
c00267c7:	83 f3 1f             	xor    ebx,0x1f
c00267ca:	75 24                	jne    c00267f0 <__udivdi3+0x8c>
c00267cc:	39 f2                	cmp    edx,esi
c00267ce:	72 08                	jb     c00267d8 <__udivdi3+0x74>
c00267d0:	39 ef                	cmp    edi,ebp
c00267d2:	0f 87 84 00 00 00    	ja     c002685c <__udivdi3+0xf8>
c00267d8:	b8 01 00 00 00       	mov    eax,0x1
c00267dd:	eb ac                	jmp    c002678b <__udivdi3+0x27>
c00267df:	90                   	nop
c00267e0:	31 db                	xor    ebx,ebx
c00267e2:	31 c0                	xor    eax,eax
c00267e4:	89 da                	mov    edx,ebx
c00267e6:	83 c4 1c             	add    esp,0x1c
c00267e9:	5b                   	pop    ebx
c00267ea:	5e                   	pop    esi
c00267eb:	5f                   	pop    edi
c00267ec:	5d                   	pop    ebp
c00267ed:	c3                   	ret    
c00267ee:	66 90                	xchg   ax,ax
c00267f0:	b8 20 00 00 00       	mov    eax,0x20
c00267f5:	29 d8                	sub    eax,ebx
c00267f7:	88 d9                	mov    cl,bl
c00267f9:	d3 e2                	shl    edx,cl
c00267fb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00267ff:	89 fa                	mov    edx,edi
c0026801:	88 c1                	mov    cl,al
c0026803:	d3 ea                	shr    edx,cl
c0026805:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026809:	09 d1                	or     ecx,edx
c002680b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002680f:	88 d9                	mov    cl,bl
c0026811:	d3 e7                	shl    edi,cl
c0026813:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026817:	89 f7                	mov    edi,esi
c0026819:	88 c1                	mov    cl,al
c002681b:	d3 ef                	shr    edi,cl
c002681d:	88 d9                	mov    cl,bl
c002681f:	d3 e6                	shl    esi,cl
c0026821:	89 ea                	mov    edx,ebp
c0026823:	88 c1                	mov    cl,al
c0026825:	d3 ea                	shr    edx,cl
c0026827:	09 d6                	or     esi,edx
c0026829:	89 f0                	mov    eax,esi
c002682b:	89 fa                	mov    edx,edi
c002682d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026831:	89 d7                	mov    edi,edx
c0026833:	89 c6                	mov    esi,eax
c0026835:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026839:	39 d7                	cmp    edi,edx
c002683b:	72 13                	jb     c0026850 <__udivdi3+0xec>
c002683d:	74 09                	je     c0026848 <__udivdi3+0xe4>
c002683f:	89 f0                	mov    eax,esi
c0026841:	31 db                	xor    ebx,ebx
c0026843:	e9 43 ff ff ff       	jmp    c002678b <__udivdi3+0x27>
c0026848:	88 d9                	mov    cl,bl
c002684a:	d3 e5                	shl    ebp,cl
c002684c:	39 c5                	cmp    ebp,eax
c002684e:	73 ef                	jae    c002683f <__udivdi3+0xdb>
c0026850:	8d 46 ff             	lea    eax,[esi-0x1]
c0026853:	31 db                	xor    ebx,ebx
c0026855:	e9 31 ff ff ff       	jmp    c002678b <__udivdi3+0x27>
c002685a:	66 90                	xchg   ax,ax
c002685c:	31 c0                	xor    eax,eax
c002685e:	e9 28 ff ff ff       	jmp    c002678b <__udivdi3+0x27>
c0026863:	90                   	nop

c0026864 <__umoddi3>:
c0026864:	55                   	push   ebp
c0026865:	57                   	push   edi
c0026866:	56                   	push   esi
c0026867:	53                   	push   ebx
c0026868:	83 ec 1c             	sub    esp,0x1c
c002686b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002686f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026873:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026877:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002687b:	89 da                	mov    edx,ebx
c002687d:	85 c0                	test   eax,eax
c002687f:	75 37                	jne    c00268b8 <__umoddi3+0x54>
c0026881:	39 df                	cmp    edi,ebx
c0026883:	76 13                	jbe    c0026898 <__umoddi3+0x34>
c0026885:	89 f0                	mov    eax,esi
c0026887:	f7 f7                	div    edi
c0026889:	89 d0                	mov    eax,edx
c002688b:	31 d2                	xor    edx,edx
c002688d:	83 c4 1c             	add    esp,0x1c
c0026890:	5b                   	pop    ebx
c0026891:	5e                   	pop    esi
c0026892:	5f                   	pop    edi
c0026893:	5d                   	pop    ebp
c0026894:	c3                   	ret    
c0026895:	8d 76 00             	lea    esi,[esi+0x0]
c0026898:	89 fd                	mov    ebp,edi
c002689a:	85 ff                	test   edi,edi
c002689c:	75 0b                	jne    c00268a9 <__umoddi3+0x45>
c002689e:	b8 01 00 00 00       	mov    eax,0x1
c00268a3:	31 d2                	xor    edx,edx
c00268a5:	f7 f7                	div    edi
c00268a7:	89 c5                	mov    ebp,eax
c00268a9:	89 d8                	mov    eax,ebx
c00268ab:	31 d2                	xor    edx,edx
c00268ad:	f7 f5                	div    ebp
c00268af:	89 f0                	mov    eax,esi
c00268b1:	f7 f5                	div    ebp
c00268b3:	89 d0                	mov    eax,edx
c00268b5:	eb d4                	jmp    c002688b <__umoddi3+0x27>
c00268b7:	90                   	nop
c00268b8:	89 f1                	mov    ecx,esi
c00268ba:	39 d8                	cmp    eax,ebx
c00268bc:	76 0a                	jbe    c00268c8 <__umoddi3+0x64>
c00268be:	89 f0                	mov    eax,esi
c00268c0:	83 c4 1c             	add    esp,0x1c
c00268c3:	5b                   	pop    ebx
c00268c4:	5e                   	pop    esi
c00268c5:	5f                   	pop    edi
c00268c6:	5d                   	pop    ebp
c00268c7:	c3                   	ret    
c00268c8:	0f bd e8             	bsr    ebp,eax
c00268cb:	83 f5 1f             	xor    ebp,0x1f
c00268ce:	75 1c                	jne    c00268ec <__umoddi3+0x88>
c00268d0:	39 d8                	cmp    eax,ebx
c00268d2:	72 04                	jb     c00268d8 <__umoddi3+0x74>
c00268d4:	39 f7                	cmp    edi,esi
c00268d6:	77 08                	ja     c00268e0 <__umoddi3+0x7c>
c00268d8:	89 da                	mov    edx,ebx
c00268da:	29 fe                	sub    esi,edi
c00268dc:	19 c2                	sbb    edx,eax
c00268de:	89 f1                	mov    ecx,esi
c00268e0:	89 c8                	mov    eax,ecx
c00268e2:	83 c4 1c             	add    esp,0x1c
c00268e5:	5b                   	pop    ebx
c00268e6:	5e                   	pop    esi
c00268e7:	5f                   	pop    edi
c00268e8:	5d                   	pop    ebp
c00268e9:	c3                   	ret    
c00268ea:	66 90                	xchg   ax,ax
c00268ec:	ba 20 00 00 00       	mov    edx,0x20
c00268f1:	29 ea                	sub    edx,ebp
c00268f3:	89 e9                	mov    ecx,ebp
c00268f5:	d3 e0                	shl    eax,cl
c00268f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00268fb:	89 f8                	mov    eax,edi
c00268fd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026901:	88 d1                	mov    cl,dl
c0026903:	d3 e8                	shr    eax,cl
c0026905:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026909:	09 c1                	or     ecx,eax
c002690b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002690f:	89 e9                	mov    ecx,ebp
c0026911:	d3 e7                	shl    edi,cl
c0026913:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026917:	89 d8                	mov    eax,ebx
c0026919:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002691d:	88 d1                	mov    cl,dl
c002691f:	d3 e8                	shr    eax,cl
c0026921:	89 c7                	mov    edi,eax
c0026923:	89 e9                	mov    ecx,ebp
c0026925:	d3 e3                	shl    ebx,cl
c0026927:	89 f0                	mov    eax,esi
c0026929:	88 d1                	mov    cl,dl
c002692b:	d3 e8                	shr    eax,cl
c002692d:	09 d8                	or     eax,ebx
c002692f:	89 e9                	mov    ecx,ebp
c0026931:	d3 e6                	shl    esi,cl
c0026933:	89 f3                	mov    ebx,esi
c0026935:	89 fa                	mov    edx,edi
c0026937:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002693b:	89 d1                	mov    ecx,edx
c002693d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026941:	89 c6                	mov    esi,eax
c0026943:	89 d7                	mov    edi,edx
c0026945:	39 d1                	cmp    ecx,edx
c0026947:	72 27                	jb     c0026970 <__umoddi3+0x10c>
c0026949:	74 21                	je     c002696c <__umoddi3+0x108>
c002694b:	89 ca                	mov    edx,ecx
c002694d:	29 f3                	sub    ebx,esi
c002694f:	19 fa                	sbb    edx,edi
c0026951:	89 d0                	mov    eax,edx
c0026953:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026957:	d3 e0                	shl    eax,cl
c0026959:	89 e9                	mov    ecx,ebp
c002695b:	d3 eb                	shr    ebx,cl
c002695d:	09 d8                	or     eax,ebx
c002695f:	d3 ea                	shr    edx,cl
c0026961:	83 c4 1c             	add    esp,0x1c
c0026964:	5b                   	pop    ebx
c0026965:	5e                   	pop    esi
c0026966:	5f                   	pop    edi
c0026967:	5d                   	pop    ebp
c0026968:	c3                   	ret    
c0026969:	8d 76 00             	lea    esi,[esi+0x0]
c002696c:	39 c3                	cmp    ebx,eax
c002696e:	73 db                	jae    c002694b <__umoddi3+0xe7>
c0026970:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026974:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026978:	89 d7                	mov    edi,edx
c002697a:	89 c6                	mov    esi,eax
c002697c:	eb cd                	jmp    c002694b <__umoddi3+0xe7>

c002697e <__addsf3>:
c002697e:	55                   	push   ebp
c002697f:	89 e5                	mov    ebp,esp
c0026981:	57                   	push   edi
c0026982:	56                   	push   esi
c0026983:	53                   	push   ebx
c0026984:	83 ec 08             	sub    esp,0x8
c0026987:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002698a:	89 fa                	mov    edx,edi
c002698c:	89 f8                	mov    eax,edi
c002698e:	c1 f8 17             	sar    eax,0x17
c0026991:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026994:	c1 e2 08             	shl    edx,0x8
c0026997:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002699d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00269a0:	89 de                	mov    esi,ebx
c00269a2:	c1 fe 17             	sar    esi,0x17
c00269a5:	c1 e3 08             	shl    ebx,0x8
c00269a8:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00269ae:	31 f0                	xor    eax,esi
c00269b0:	0f 88 3b 01 00 00    	js     c0026af1 <__addsf3+0x173>
c00269b6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00269b9:	29 f1                	sub    ecx,esi
c00269bb:	85 c9                	test   ecx,ecx
c00269bd:	7e 54                	jle    c0026a13 <__addsf3+0x95>
c00269bf:	89 f0                	mov    eax,esi
c00269c1:	84 c0                	test   al,al
c00269c3:	75 10                	jne    c00269d5 <__addsf3+0x57>
c00269c5:	85 db                	test   ebx,ebx
c00269c7:	0f 84 aa 02 00 00    	je     c0026c77 <__addsf3+0x2f9>
c00269cd:	49                   	dec    ecx
c00269ce:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00269d1:	74 38                	je     c0026a0b <__addsf3+0x8d>
c00269d3:	eb 13                	jmp    c00269e8 <__addsf3+0x6a>
c00269d5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00269d8:	f7 d0                	not    eax
c00269da:	84 c0                	test   al,al
c00269dc:	0f 84 95 02 00 00    	je     c0026c77 <__addsf3+0x2f9>
c00269e2:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00269e8:	83 f9 1f             	cmp    ecx,0x1f
c00269eb:	0f 8f 86 02 00 00    	jg     c0026c77 <__addsf3+0x2f9>
c00269f1:	89 de                	mov    esi,ebx
c00269f3:	d3 ee                	shr    esi,cl
c00269f5:	b8 20 00 00 00       	mov    eax,0x20
c00269fa:	29 c8                	sub    eax,ecx
c00269fc:	89 c1                	mov    ecx,eax
c00269fe:	d3 e3                	shl    ebx,cl
c0026a00:	31 c0                	xor    eax,eax
c0026a02:	85 db                	test   ebx,ebx
c0026a04:	0f 95 c0             	setne  al
c0026a07:	09 f0                	or     eax,esi
c0026a09:	01 d0                	add    eax,edx
c0026a0b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026a0e:	e9 b6 00 00 00       	jmp    c0026ac9 <__addsf3+0x14b>
c0026a13:	74 5c                	je     c0026a71 <__addsf3+0xf3>
c0026a15:	89 f1                	mov    ecx,esi
c0026a17:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026a1a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026a1d:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026a21:	75 14                	jne    c0026a37 <__addsf3+0xb9>
c0026a23:	85 d2                	test   edx,edx
c0026a25:	0f 84 4c 02 00 00    	je     c0026c77 <__addsf3+0x2f9>
c0026a2b:	49                   	dec    ecx
c0026a2c:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026a2f:	0f 84 94 00 00 00    	je     c0026ac9 <__addsf3+0x14b>
c0026a35:	eb 12                	jmp    c0026a49 <__addsf3+0xcb>
c0026a37:	89 f0                	mov    eax,esi
c0026a39:	f7 d0                	not    eax
c0026a3b:	84 c0                	test   al,al
c0026a3d:	0f 84 34 02 00 00    	je     c0026c77 <__addsf3+0x2f9>
c0026a43:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026a49:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026a4c:	83 f9 1f             	cmp    ecx,0x1f
c0026a4f:	0f 8f 22 02 00 00    	jg     c0026c77 <__addsf3+0x2f9>
c0026a55:	89 d7                	mov    edi,edx
c0026a57:	d3 ef                	shr    edi,cl
c0026a59:	b8 20 00 00 00       	mov    eax,0x20
c0026a5e:	29 c8                	sub    eax,ecx
c0026a60:	89 c1                	mov    ecx,eax
c0026a62:	d3 e2                	shl    edx,cl
c0026a64:	31 c0                	xor    eax,eax
c0026a66:	85 d2                	test   edx,edx
c0026a68:	0f 95 c0             	setne  al
c0026a6b:	09 f8                	or     eax,edi
c0026a6d:	01 d8                	add    eax,ebx
c0026a6f:	eb 58                	jmp    c0026ac9 <__addsf3+0x14b>
c0026a71:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026a74:	8d 70 01             	lea    esi,[eax+0x1]
c0026a77:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026a7d:	75 32                	jne    c0026ab1 <__addsf3+0x133>
c0026a7f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026a83:	75 1f                	jne    c0026aa4 <__addsf3+0x126>
c0026a85:	85 d2                	test   edx,edx
c0026a87:	0f 84 e0 01 00 00    	je     c0026c6d <__addsf3+0x2ef>
c0026a8d:	85 db                	test   ebx,ebx
c0026a8f:	0f 84 e2 01 00 00    	je     c0026c77 <__addsf3+0x2f9>
c0026a95:	89 d0                	mov    eax,edx
c0026a97:	01 d8                	add    eax,ebx
c0026a99:	0f 89 a9 01 00 00    	jns    c0026c48 <__addsf3+0x2ca>
c0026a9f:	e9 9d 01 00 00       	jmp    c0026c41 <__addsf3+0x2c3>
c0026aa4:	85 d2                	test   edx,edx
c0026aa6:	0f 85 cb 01 00 00    	jne    c0026c77 <__addsf3+0x2f9>
c0026aac:	e9 bc 01 00 00       	jmp    c0026c6d <__addsf3+0x2ef>
c0026ab1:	31 c0                	xor    eax,eax
c0026ab3:	89 f1                	mov    ecx,esi
c0026ab5:	f7 d1                	not    ecx
c0026ab7:	84 c9                	test   cl,cl
c0026ab9:	0f 84 90 01 00 00    	je     c0026c4f <__addsf3+0x2d1>
c0026abf:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026ac2:	d1 e8                	shr    eax,1
c0026ac4:	e9 86 01 00 00       	jmp    c0026c4f <__addsf3+0x2d1>
c0026ac9:	85 c0                	test   eax,eax
c0026acb:	0f 89 7e 01 00 00    	jns    c0026c4f <__addsf3+0x2d1>
c0026ad1:	46                   	inc    esi
c0026ad2:	89 f2                	mov    edx,esi
c0026ad4:	f7 d2                	not    edx
c0026ad6:	84 d2                	test   dl,dl
c0026ad8:	0f 84 6f 01 00 00    	je     c0026c4d <__addsf3+0x2cf>
c0026ade:	89 c2                	mov    edx,eax
c0026ae0:	83 e2 01             	and    edx,0x1
c0026ae3:	d1 e8                	shr    eax,1
c0026ae5:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026aea:	09 d0                	or     eax,edx
c0026aec:	e9 5e 01 00 00       	jmp    c0026c4f <__addsf3+0x2d1>
c0026af1:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026af5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026af8:	89 f0                	mov    eax,esi
c0026afa:	0f b6 c0             	movzx  eax,al
c0026afd:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026b00:	29 c1                	sub    ecx,eax
c0026b02:	85 c9                	test   ecx,ecx
c0026b04:	7e 55                	jle    c0026b5b <__addsf3+0x1dd>
c0026b06:	85 c0                	test   eax,eax
c0026b08:	75 11                	jne    c0026b1b <__addsf3+0x19d>
c0026b0a:	85 db                	test   ebx,ebx
c0026b0c:	0f 84 65 01 00 00    	je     c0026c77 <__addsf3+0x2f9>
c0026b12:	49                   	dec    ecx
c0026b13:	75 19                	jne    c0026b2e <__addsf3+0x1b0>
c0026b15:	89 d0                	mov    eax,edx
c0026b17:	29 d8                	sub    eax,ebx
c0026b19:	eb 38                	jmp    c0026b53 <__addsf3+0x1d5>
c0026b1b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026b1e:	f7 d0                	not    eax
c0026b20:	84 c0                	test   al,al
c0026b22:	0f 84 4f 01 00 00    	je     c0026c77 <__addsf3+0x2f9>
c0026b28:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026b2e:	83 f9 1f             	cmp    ecx,0x1f
c0026b31:	0f 8f 40 01 00 00    	jg     c0026c77 <__addsf3+0x2f9>
c0026b37:	89 de                	mov    esi,ebx
c0026b39:	d3 ee                	shr    esi,cl
c0026b3b:	b8 20 00 00 00       	mov    eax,0x20
c0026b40:	29 c8                	sub    eax,ecx
c0026b42:	89 c1                	mov    ecx,eax
c0026b44:	d3 e3                	shl    ebx,cl
c0026b46:	31 c0                	xor    eax,eax
c0026b48:	85 db                	test   ebx,ebx
c0026b4a:	0f 95 c0             	setne  al
c0026b4d:	09 f0                	or     eax,esi
c0026b4f:	29 c2                	sub    edx,eax
c0026b51:	89 d0                	mov    eax,edx
c0026b53:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026b56:	e9 af 00 00 00       	jmp    c0026c0a <__addsf3+0x28c>
c0026b5b:	74 5c                	je     c0026bb9 <__addsf3+0x23b>
c0026b5d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026b60:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b63:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026b67:	75 14                	jne    c0026b7d <__addsf3+0x1ff>
c0026b69:	85 d2                	test   edx,edx
c0026b6b:	0f 84 06 01 00 00    	je     c0026c77 <__addsf3+0x2f9>
c0026b71:	48                   	dec    eax
c0026b72:	75 1b                	jne    c0026b8f <__addsf3+0x211>
c0026b74:	89 d8                	mov    eax,ebx
c0026b76:	29 d0                	sub    eax,edx
c0026b78:	e9 8d 00 00 00       	jmp    c0026c0a <__addsf3+0x28c>
c0026b7d:	89 f1                	mov    ecx,esi
c0026b7f:	f7 d1                	not    ecx
c0026b81:	84 c9                	test   cl,cl
c0026b83:	0f 84 ee 00 00 00    	je     c0026c77 <__addsf3+0x2f9>
c0026b89:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026b8f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b92:	83 f8 1f             	cmp    eax,0x1f
c0026b95:	0f 8f dc 00 00 00    	jg     c0026c77 <__addsf3+0x2f9>
c0026b9b:	89 d7                	mov    edi,edx
c0026b9d:	88 c1                	mov    cl,al
c0026b9f:	d3 ef                	shr    edi,cl
c0026ba1:	b9 20 00 00 00       	mov    ecx,0x20
c0026ba6:	29 c1                	sub    ecx,eax
c0026ba8:	d3 e2                	shl    edx,cl
c0026baa:	31 c0                	xor    eax,eax
c0026bac:	85 d2                	test   edx,edx
c0026bae:	0f 95 c0             	setne  al
c0026bb1:	09 f8                	or     eax,edi
c0026bb3:	29 c3                	sub    ebx,eax
c0026bb5:	89 d8                	mov    eax,ebx
c0026bb7:	eb 51                	jmp    c0026c0a <__addsf3+0x28c>
c0026bb9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026bbc:	40                   	inc    eax
c0026bbd:	a8 fe                	test   al,0xfe
c0026bbf:	75 3d                	jne    c0026bfe <__addsf3+0x280>
c0026bc1:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026bc5:	0f 85 a7 00 00 00    	jne    c0026c72 <__addsf3+0x2f4>
c0026bcb:	85 d2                	test   edx,edx
c0026bcd:	75 12                	jne    c0026be1 <__addsf3+0x263>
c0026bcf:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026bd2:	85 db                	test   ebx,ebx
c0026bd4:	0f 85 9d 00 00 00    	jne    c0026c77 <__addsf3+0x2f9>
c0026bda:	31 ff                	xor    edi,edi
c0026bdc:	e9 96 00 00 00       	jmp    c0026c77 <__addsf3+0x2f9>
c0026be1:	85 db                	test   ebx,ebx
c0026be3:	0f 84 8e 00 00 00    	je     c0026c77 <__addsf3+0x2f9>
c0026be9:	89 d0                	mov    eax,edx
c0026beb:	29 d8                	sub    eax,ebx
c0026bed:	79 06                	jns    c0026bf5 <__addsf3+0x277>
c0026bef:	89 d8                	mov    eax,ebx
c0026bf1:	29 d0                	sub    eax,edx
c0026bf3:	eb 5a                	jmp    c0026c4f <__addsf3+0x2d1>
c0026bf5:	bf 00 00 00 00       	mov    edi,0x0
c0026bfa:	74 7b                	je     c0026c77 <__addsf3+0x2f9>
c0026bfc:	eb 4a                	jmp    c0026c48 <__addsf3+0x2ca>
c0026bfe:	89 d0                	mov    eax,edx
c0026c00:	29 d8                	sub    eax,ebx
c0026c02:	79 12                	jns    c0026c16 <__addsf3+0x298>
c0026c04:	89 d8                	mov    eax,ebx
c0026c06:	29 d0                	sub    eax,edx
c0026c08:	eb 09                	jmp    c0026c13 <__addsf3+0x295>
c0026c0a:	85 c0                	test   eax,eax
c0026c0c:	79 41                	jns    c0026c4f <__addsf3+0x2d1>
c0026c0e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026c13:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026c16:	31 f6                	xor    esi,esi
c0026c18:	85 c0                	test   eax,eax
c0026c1a:	74 33                	je     c0026c4f <__addsf3+0x2d1>
c0026c1c:	0f bd c8             	bsr    ecx,eax
c0026c1f:	83 f1 1f             	xor    ecx,0x1f
c0026c22:	d3 e0                	shl    eax,cl
c0026c24:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026c28:	39 ca                	cmp    edx,ecx
c0026c2a:	7f 10                	jg     c0026c3c <__addsf3+0x2be>
c0026c2c:	29 d1                	sub    ecx,edx
c0026c2e:	41                   	inc    ecx
c0026c2f:	d3 e8                	shr    eax,cl
c0026c31:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026c34:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026c3a:	eb 13                	jmp    c0026c4f <__addsf3+0x2d1>
c0026c3c:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026c3f:	29 ce                	sub    esi,ecx
c0026c41:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026c46:	eb 07                	jmp    c0026c4f <__addsf3+0x2d1>
c0026c48:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026c4b:	eb 02                	jmp    c0026c4f <__addsf3+0x2d1>
c0026c4d:	31 c0                	xor    eax,eax
c0026c4f:	89 c2                	mov    edx,eax
c0026c51:	c1 ea 08             	shr    edx,0x8
c0026c54:	a8 7f                	test   al,0x7f
c0026c56:	0f 95 c1             	setne  cl
c0026c59:	09 d1                	or     ecx,edx
c0026c5b:	83 e1 01             	and    ecx,0x1
c0026c5e:	c1 e8 07             	shr    eax,0x7
c0026c61:	21 c8                	and    eax,ecx
c0026c63:	c1 e6 17             	shl    esi,0x17
c0026c66:	09 d6                	or     esi,edx
c0026c68:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026c6b:	eb 0a                	jmp    c0026c77 <__addsf3+0x2f9>
c0026c6d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c70:	eb 05                	jmp    c0026c77 <__addsf3+0x2f9>
c0026c72:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026c77:	89 f8                	mov    eax,edi
c0026c79:	5a                   	pop    edx
c0026c7a:	59                   	pop    ecx
c0026c7b:	5b                   	pop    ebx
c0026c7c:	5e                   	pop    esi
c0026c7d:	5f                   	pop    edi
c0026c7e:	5d                   	pop    ebp
c0026c7f:	c3                   	ret    

c0026c80 <__subsf3>:
c0026c80:	55                   	push   ebp
c0026c81:	89 e5                	mov    ebp,esp
c0026c83:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026c86:	05 00 00 00 80       	add    eax,0x80000000
c0026c8b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026c8e:	5d                   	pop    ebp
c0026c8f:	e9 ea fc ff ff       	jmp    c002697e <__addsf3>

c0026c94 <__negsf2>:
c0026c94:	55                   	push   ebp
c0026c95:	89 e5                	mov    ebp,esp
c0026c97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026c9a:	05 00 00 00 80       	add    eax,0x80000000
c0026c9f:	5d                   	pop    ebp
c0026ca0:	c3                   	ret    

c0026ca1 <__mulsf3>:
c0026ca1:	55                   	push   ebp
c0026ca2:	89 e5                	mov    ebp,esp
c0026ca4:	57                   	push   edi
c0026ca5:	56                   	push   esi
c0026ca6:	53                   	push   ebx
c0026ca7:	83 ec 1c             	sub    esp,0x1c
c0026caa:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026cad:	89 f0                	mov    eax,esi
c0026caf:	89 f1                	mov    ecx,esi
c0026cb1:	c1 f9 17             	sar    ecx,0x17
c0026cb4:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026cb7:	c1 e0 08             	shl    eax,0x8
c0026cba:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026cbf:	89 c1                	mov    ecx,eax
c0026cc1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026cc4:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026cc7:	89 c7                	mov    edi,eax
c0026cc9:	c1 ff 17             	sar    edi,0x17
c0026ccc:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026cd0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026cd3:	89 f8                	mov    eax,edi
c0026cd5:	0f b6 c0             	movzx  eax,al
c0026cd8:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026cdb:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026cdf:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026ce2:	42                   	inc    edx
c0026ce3:	80 e2 fe             	and    dl,0xfe
c0026ce6:	75 7b                	jne    c0026d63 <__mulsf3+0xc2>
c0026ce8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026cec:	74 54                	je     c0026d42 <__mulsf3+0xa1>
c0026cee:	85 c9                	test   ecx,ecx
c0026cf0:	0f 85 64 01 00 00    	jne    c0026e5a <__mulsf3+0x1b9>
c0026cf6:	8d 57 01             	lea    edx,[edi+0x1]
c0026cf9:	80 e2 fe             	and    dl,0xfe
c0026cfc:	75 1f                	jne    c0026d1d <__mulsf3+0x7c>
c0026cfe:	85 c0                	test   eax,eax
c0026d00:	b8 00 00 00 00       	mov    eax,0x0
c0026d05:	74 29                	je     c0026d30 <__mulsf3+0x8f>
c0026d07:	53                   	push   ebx
c0026d08:	53                   	push   ebx
c0026d09:	50                   	push   eax
c0026d0a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d0d:	e8 96 05 00 00       	call   c00272a8 <__nesf2>
c0026d12:	83 c4 10             	add    esp,0x10
c0026d15:	85 c0                	test   eax,eax
c0026d17:	0f 85 3a 01 00 00    	jne    c0026e57 <__mulsf3+0x1b6>
c0026d1d:	85 ff                	test   edi,edi
c0026d1f:	0f 89 35 01 00 00    	jns    c0026e5a <__mulsf3+0x1b9>
c0026d25:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026d2b:	e9 2a 01 00 00       	jmp    c0026e5a <__mulsf3+0x1b9>
c0026d30:	51                   	push   ecx
c0026d31:	51                   	push   ecx
c0026d32:	50                   	push   eax
c0026d33:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d36:	e8 6d 05 00 00       	call   c00272a8 <__nesf2>
c0026d3b:	83 c4 10             	add    esp,0x10
c0026d3e:	85 c0                	test   eax,eax
c0026d40:	eb 15                	jmp    c0026d57 <__mulsf3+0xb6>
c0026d42:	85 c9                	test   ecx,ecx
c0026d44:	74 0b                	je     c0026d51 <__mulsf3+0xb0>
c0026d46:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026d49:	01 c9                	add    ecx,ecx
c0026d4b:	78 16                	js     c0026d63 <__mulsf3+0xc2>
c0026d4d:	89 d3                	mov    ebx,edx
c0026d4f:	eb f5                	jmp    c0026d46 <__mulsf3+0xa5>
c0026d51:	89 f8                	mov    eax,edi
c0026d53:	f7 d0                	not    eax
c0026d55:	84 c0                	test   al,al
c0026d57:	75 c4                	jne    c0026d1d <__mulsf3+0x7c>
c0026d59:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026d5e:	e9 f7 00 00 00       	jmp    c0026e5a <__mulsf3+0x1b9>
c0026d63:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026d66:	c1 e6 08             	shl    esi,0x8
c0026d69:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026d6f:	8d 57 01             	lea    edx,[edi+0x1]
c0026d72:	80 e2 fe             	and    dl,0xfe
c0026d75:	75 63                	jne    c0026dda <__mulsf3+0x139>
c0026d77:	85 c0                	test   eax,eax
c0026d79:	74 2f                	je     c0026daa <__mulsf3+0x109>
c0026d7b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026d7f:	0f 89 d2 00 00 00    	jns    c0026e57 <__mulsf3+0x1b6>
c0026d85:	52                   	push   edx
c0026d86:	52                   	push   edx
c0026d87:	6a 00                	push   0x0
c0026d89:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d8c:	e8 dc 04 00 00       	call   c002726d <__eqsf2>
c0026d91:	83 c4 10             	add    esp,0x10
c0026d94:	85 c0                	test   eax,eax
c0026d96:	0f 85 bb 00 00 00    	jne    c0026e57 <__mulsf3+0x1b6>
c0026d9c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026d9f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026da5:	e9 b0 00 00 00       	jmp    c0026e5a <__mulsf3+0x1b9>
c0026daa:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026dad:	50                   	push   eax
c0026dae:	50                   	push   eax
c0026daf:	6a 00                	push   0x0
c0026db1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026db4:	e8 b4 04 00 00       	call   c002726d <__eqsf2>
c0026db9:	83 c4 10             	add    esp,0x10
c0026dbc:	85 c0                	test   eax,eax
c0026dbe:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026dc1:	75 0c                	jne    c0026dcf <__mulsf3+0x12e>
c0026dc3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026dc7:	0f 89 8a 00 00 00    	jns    c0026e57 <__mulsf3+0x1b6>
c0026dcd:	eb cd                	jmp    c0026d9c <__mulsf3+0xfb>
c0026dcf:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026dd2:	01 f6                	add    esi,esi
c0026dd4:	78 04                	js     c0026dda <__mulsf3+0x139>
c0026dd6:	89 c3                	mov    ebx,eax
c0026dd8:	eb f5                	jmp    c0026dcf <__mulsf3+0x12e>
c0026dda:	89 c8                	mov    eax,ecx
c0026ddc:	0d 00 00 00 80       	or     eax,0x80000000
c0026de1:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026de7:	f7 e6                	mul    esi
c0026de9:	85 c0                	test   eax,eax
c0026deb:	0f 95 c0             	setne  al
c0026dee:	0f b6 c0             	movzx  eax,al
c0026df1:	09 c2                	or     edx,eax
c0026df3:	78 03                	js     c0026df8 <__mulsf3+0x157>
c0026df5:	01 d2                	add    edx,edx
c0026df7:	4b                   	dec    ebx
c0026df8:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026dfe:	7f 22                	jg     c0026e22 <__mulsf3+0x181>
c0026e00:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026e06:	85 db                	test   ebx,ebx
c0026e08:	7f 23                	jg     c0026e2d <__mulsf3+0x18c>
c0026e0a:	83 fb e9             	cmp    ebx,0xffffffe9
c0026e0d:	7c 1a                	jl     c0026e29 <__mulsf3+0x188>
c0026e0f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026e15:	b9 01 00 00 00       	mov    ecx,0x1
c0026e1a:	29 d9                	sub    ecx,ebx
c0026e1c:	d3 ea                	shr    edx,cl
c0026e1e:	31 db                	xor    ebx,ebx
c0026e20:	eb 0b                	jmp    c0026e2d <__mulsf3+0x18c>
c0026e22:	bb ff 00 00 00       	mov    ebx,0xff
c0026e27:	eb 02                	jmp    c0026e2b <__mulsf3+0x18a>
c0026e29:	31 db                	xor    ebx,ebx
c0026e2b:	31 d2                	xor    edx,edx
c0026e2d:	89 d0                	mov    eax,edx
c0026e2f:	c1 e8 08             	shr    eax,0x8
c0026e32:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026e35:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026e3b:	09 fb                	or     ebx,edi
c0026e3d:	c1 e3 17             	shl    ebx,0x17
c0026e40:	09 c3                	or     ebx,eax
c0026e42:	f6 c2 7f             	test   dl,0x7f
c0026e45:	0f 95 c1             	setne  cl
c0026e48:	09 c8                	or     eax,ecx
c0026e4a:	83 e0 01             	and    eax,0x1
c0026e4d:	c1 ea 07             	shr    edx,0x7
c0026e50:	21 c2                	and    edx,eax
c0026e52:	8d 34 13             	lea    esi,[ebx+edx*1]
c0026e55:	eb 03                	jmp    c0026e5a <__mulsf3+0x1b9>
c0026e57:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026e5a:	89 f0                	mov    eax,esi
c0026e5c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026e5f:	5b                   	pop    ebx
c0026e60:	5e                   	pop    esi
c0026e61:	5f                   	pop    edi
c0026e62:	5d                   	pop    ebp
c0026e63:	c3                   	ret    

c0026e64 <__divsf3>:
c0026e64:	55                   	push   ebp
c0026e65:	89 e5                	mov    ebp,esp
c0026e67:	57                   	push   edi
c0026e68:	56                   	push   esi
c0026e69:	53                   	push   ebx
c0026e6a:	83 ec 1c             	sub    esp,0x1c
c0026e6d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026e70:	89 d8                	mov    eax,ebx
c0026e72:	89 d9                	mov    ecx,ebx
c0026e74:	c1 f9 17             	sar    ecx,0x17
c0026e77:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026e7a:	c1 e0 08             	shl    eax,0x8
c0026e7d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026e82:	89 c1                	mov    ecx,eax
c0026e84:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026e87:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026e8a:	89 c7                	mov    edi,eax
c0026e8c:	c1 ff 17             	sar    edi,0x17
c0026e8f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026e93:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026e96:	89 f8                	mov    eax,edi
c0026e98:	0f b6 c0             	movzx  eax,al
c0026e9b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026e9e:	29 c6                	sub    esi,eax
c0026ea0:	83 c6 7f             	add    esi,0x7f
c0026ea3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026ea6:	42                   	inc    edx
c0026ea7:	80 e2 fe             	and    dl,0xfe
c0026eaa:	0f 85 9c 00 00 00    	jne    c0026f4c <__divsf3+0xe8>
c0026eb0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026eb4:	74 33                	je     c0026ee9 <__divsf3+0x85>
c0026eb6:	85 c9                	test   ecx,ecx
c0026eb8:	0f 85 c7 01 00 00    	jne    c0027085 <__divsf3+0x221>
c0026ebe:	8d 57 01             	lea    edx,[edi+0x1]
c0026ec1:	80 e2 fe             	and    dl,0xfe
c0026ec4:	75 2f                	jne    c0026ef5 <__divsf3+0x91>
c0026ec6:	85 c0                	test   eax,eax
c0026ec8:	74 2b                	je     c0026ef5 <__divsf3+0x91>
c0026eca:	51                   	push   ecx
c0026ecb:	51                   	push   ecx
c0026ecc:	6a 00                	push   0x0
c0026ece:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ed1:	e8 d2 03 00 00       	call   c00272a8 <__nesf2>
c0026ed6:	83 c4 10             	add    esp,0x10
c0026ed9:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026edc:	85 c0                	test   eax,eax
c0026ede:	0f 85 a1 01 00 00    	jne    c0027085 <__divsf3+0x221>
c0026ee4:	e9 92 01 00 00       	jmp    c002707b <__divsf3+0x217>
c0026ee9:	85 c9                	test   ecx,ecx
c0026eeb:	75 1b                	jne    c0026f08 <__divsf3+0xa4>
c0026eed:	8d 57 01             	lea    edx,[edi+0x1]
c0026ef0:	80 e2 fe             	and    dl,0xfe
c0026ef3:	74 1e                	je     c0026f13 <__divsf3+0xaf>
c0026ef5:	85 ff                	test   edi,edi
c0026ef7:	0f 89 88 01 00 00    	jns    c0027085 <__divsf3+0x221>
c0026efd:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0026f03:	e9 7d 01 00 00       	jmp    c0027085 <__divsf3+0x221>
c0026f08:	8d 56 ff             	lea    edx,[esi-0x1]
c0026f0b:	01 c9                	add    ecx,ecx
c0026f0d:	78 3d                	js     c0026f4c <__divsf3+0xe8>
c0026f0f:	89 d6                	mov    esi,edx
c0026f11:	eb f5                	jmp    c0026f08 <__divsf3+0xa4>
c0026f13:	85 c0                	test   eax,eax
c0026f15:	b8 00 00 00 00       	mov    eax,0x0
c0026f1a:	74 18                	je     c0026f34 <__divsf3+0xd0>
c0026f1c:	52                   	push   edx
c0026f1d:	52                   	push   edx
c0026f1e:	50                   	push   eax
c0026f1f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f22:	e8 81 03 00 00       	call   c00272a8 <__nesf2>
c0026f27:	83 c4 10             	add    esp,0x10
c0026f2a:	85 c0                	test   eax,eax
c0026f2c:	0f 85 50 01 00 00    	jne    c0027082 <__divsf3+0x21e>
c0026f32:	eb c1                	jmp    c0026ef5 <__divsf3+0x91>
c0026f34:	56                   	push   esi
c0026f35:	56                   	push   esi
c0026f36:	50                   	push   eax
c0026f37:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f3a:	e8 69 03 00 00       	call   c00272a8 <__nesf2>
c0026f3f:	83 c4 10             	add    esp,0x10
c0026f42:	85 c0                	test   eax,eax
c0026f44:	0f 84 31 01 00 00    	je     c002707b <__divsf3+0x217>
c0026f4a:	eb a9                	jmp    c0026ef5 <__divsf3+0x91>
c0026f4c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0026f4f:	c1 e3 08             	shl    ebx,0x8
c0026f52:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026f58:	8d 57 01             	lea    edx,[edi+0x1]
c0026f5b:	80 e2 fe             	and    dl,0xfe
c0026f5e:	75 71                	jne    c0026fd1 <__divsf3+0x16d>
c0026f60:	85 c0                	test   eax,eax
c0026f62:	ba 00 00 00 00       	mov    edx,0x0
c0026f67:	74 2f                	je     c0026f98 <__divsf3+0x134>
c0026f69:	51                   	push   ecx
c0026f6a:	51                   	push   ecx
c0026f6b:	52                   	push   edx
c0026f6c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f6f:	e8 f9 02 00 00       	call   c002726d <__eqsf2>
c0026f74:	83 c4 10             	add    esp,0x10
c0026f77:	85 c0                	test   eax,eax
c0026f79:	0f 85 03 01 00 00    	jne    c0027082 <__divsf3+0x21e>
c0026f7f:	31 d2                	xor    edx,edx
c0026f81:	89 d3                	mov    ebx,edx
c0026f83:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026f86:	31 f8                	xor    eax,edi
c0026f88:	0f 89 f7 00 00 00    	jns    c0027085 <__divsf3+0x221>
c0026f8e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0026f93:	e9 ed 00 00 00       	jmp    c0027085 <__divsf3+0x221>
c0026f98:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026f9b:	50                   	push   eax
c0026f9c:	50                   	push   eax
c0026f9d:	52                   	push   edx
c0026f9e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fa1:	e8 c7 02 00 00       	call   c002726d <__eqsf2>
c0026fa6:	83 c4 10             	add    esp,0x10
c0026fa9:	85 c0                	test   eax,eax
c0026fab:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026fae:	75 16                	jne    c0026fc6 <__divsf3+0x162>
c0026fb0:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026fb3:	31 fb                	xor    ebx,edi
c0026fb5:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0026fbb:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0026fc1:	e9 bf 00 00 00       	jmp    c0027085 <__divsf3+0x221>
c0026fc6:	8d 46 01             	lea    eax,[esi+0x1]
c0026fc9:	01 db                	add    ebx,ebx
c0026fcb:	78 04                	js     c0026fd1 <__divsf3+0x16d>
c0026fcd:	89 c6                	mov    esi,eax
c0026fcf:	eb f5                	jmp    c0026fc6 <__divsf3+0x162>
c0026fd1:	89 c8                	mov    eax,ecx
c0026fd3:	0d 00 00 00 80       	or     eax,0x80000000
c0026fd8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026fde:	31 d2                	xor    edx,edx
c0026fe0:	39 d8                	cmp    eax,ebx
c0026fe2:	72 07                	jb     c0026feb <__divsf3+0x187>
c0026fe4:	29 d8                	sub    eax,ebx
c0026fe6:	ba 01 00 00 00       	mov    edx,0x1
c0026feb:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0026ff2:	01 d2                	add    edx,edx
c0026ff4:	89 c1                	mov    ecx,eax
c0026ff6:	01 c0                	add    eax,eax
c0026ff8:	85 c9                	test   ecx,ecx
c0026ffa:	78 04                	js     c0027000 <__divsf3+0x19c>
c0026ffc:	39 c3                	cmp    ebx,eax
c0026ffe:	77 05                	ja     c0027005 <__divsf3+0x1a1>
c0027000:	29 d8                	sub    eax,ebx
c0027002:	83 ca 01             	or     edx,0x1
c0027005:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027008:	75 e8                	jne    c0026ff2 <__divsf3+0x18e>
c002700a:	85 c0                	test   eax,eax
c002700c:	0f 95 c0             	setne  al
c002700f:	0f b6 c0             	movzx  eax,al
c0027012:	c1 e2 06             	shl    edx,0x6
c0027015:	09 c2                	or     edx,eax
c0027017:	78 03                	js     c002701c <__divsf3+0x1b8>
c0027019:	01 d2                	add    edx,edx
c002701b:	4e                   	dec    esi
c002701c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027022:	7f 22                	jg     c0027046 <__divsf3+0x1e2>
c0027024:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002702a:	85 f6                	test   esi,esi
c002702c:	7f 23                	jg     c0027051 <__divsf3+0x1ed>
c002702e:	83 fe e9             	cmp    esi,0xffffffe9
c0027031:	7c 1a                	jl     c002704d <__divsf3+0x1e9>
c0027033:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027039:	b9 01 00 00 00       	mov    ecx,0x1
c002703e:	29 f1                	sub    ecx,esi
c0027040:	d3 ea                	shr    edx,cl
c0027042:	31 f6                	xor    esi,esi
c0027044:	eb 0b                	jmp    c0027051 <__divsf3+0x1ed>
c0027046:	be ff 00 00 00       	mov    esi,0xff
c002704b:	eb 02                	jmp    c002704f <__divsf3+0x1eb>
c002704d:	31 f6                	xor    esi,esi
c002704f:	31 d2                	xor    edx,edx
c0027051:	89 d0                	mov    eax,edx
c0027053:	c1 e8 08             	shr    eax,0x8
c0027056:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027059:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002705f:	09 fe                	or     esi,edi
c0027061:	c1 e6 17             	shl    esi,0x17
c0027064:	09 c6                	or     esi,eax
c0027066:	f6 c2 7f             	test   dl,0x7f
c0027069:	0f 95 c1             	setne  cl
c002706c:	09 c8                	or     eax,ecx
c002706e:	83 e0 01             	and    eax,0x1
c0027071:	c1 ea 07             	shr    edx,0x7
c0027074:	21 c2                	and    edx,eax
c0027076:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027079:	eb 0a                	jmp    c0027085 <__divsf3+0x221>
c002707b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027080:	eb 03                	jmp    c0027085 <__divsf3+0x221>
c0027082:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027085:	89 d8                	mov    eax,ebx
c0027087:	8d 65 f4             	lea    esp,[ebp-0xc]
c002708a:	5b                   	pop    ebx
c002708b:	5e                   	pop    esi
c002708c:	5f                   	pop    edi
c002708d:	5d                   	pop    ebp
c002708e:	c3                   	ret    

c002708f <__floatsisf>:
c002708f:	55                   	push   ebp
c0027090:	89 e5                	mov    ebp,esp
c0027092:	53                   	push   ebx
c0027093:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027096:	85 d2                	test   edx,edx
c0027098:	7e 2b                	jle    c00270c5 <__floatsisf+0x36>
c002709a:	0f bd ca             	bsr    ecx,edx
c002709d:	83 f1 1f             	xor    ecx,0x1f
c00270a0:	d3 e2                	shl    edx,cl
c00270a2:	89 d0                	mov    eax,edx
c00270a4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00270a9:	89 c3                	mov    ebx,eax
c00270ab:	c1 eb 08             	shr    ebx,0x8
c00270ae:	80 e2 7f             	and    dl,0x7f
c00270b1:	0f 95 c2             	setne  dl
c00270b4:	09 da                	or     edx,ebx
c00270b6:	83 e2 01             	and    edx,0x1
c00270b9:	c1 e8 07             	shr    eax,0x7
c00270bc:	21 c2                	and    edx,eax
c00270be:	b8 9e 00 00 00       	mov    eax,0x9e
c00270c3:	eb 32                	jmp    c00270f7 <__floatsisf+0x68>
c00270c5:	b8 00 00 00 00       	mov    eax,0x0
c00270ca:	74 34                	je     c0027100 <__floatsisf+0x71>
c00270cc:	f7 da                	neg    edx
c00270ce:	0f bd ca             	bsr    ecx,edx
c00270d1:	83 f1 1f             	xor    ecx,0x1f
c00270d4:	d3 e2                	shl    edx,cl
c00270d6:	89 d0                	mov    eax,edx
c00270d8:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00270dd:	89 c3                	mov    ebx,eax
c00270df:	c1 eb 08             	shr    ebx,0x8
c00270e2:	80 e2 7f             	and    dl,0x7f
c00270e5:	0f 95 c2             	setne  dl
c00270e8:	09 da                	or     edx,ebx
c00270ea:	83 e2 01             	and    edx,0x1
c00270ed:	c1 e8 07             	shr    eax,0x7
c00270f0:	21 c2                	and    edx,eax
c00270f2:	b8 9e 01 00 00       	mov    eax,0x19e
c00270f7:	29 c8                	sub    eax,ecx
c00270f9:	c1 e0 17             	shl    eax,0x17
c00270fc:	09 d8                	or     eax,ebx
c00270fe:	01 d0                	add    eax,edx
c0027100:	5b                   	pop    ebx
c0027101:	5d                   	pop    ebp
c0027102:	c3                   	ret    

c0027103 <__floatunsisf>:
c0027103:	55                   	push   ebp
c0027104:	89 e5                	mov    ebp,esp
c0027106:	53                   	push   ebx
c0027107:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002710a:	31 c0                	xor    eax,eax
c002710c:	85 d2                	test   edx,edx
c002710e:	74 32                	je     c0027142 <__floatunsisf+0x3f>
c0027110:	0f bd ca             	bsr    ecx,edx
c0027113:	83 f1 1f             	xor    ecx,0x1f
c0027116:	d3 e2                	shl    edx,cl
c0027118:	89 d0                	mov    eax,edx
c002711a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002711f:	89 c3                	mov    ebx,eax
c0027121:	c1 eb 08             	shr    ebx,0x8
c0027124:	80 e2 7f             	and    dl,0x7f
c0027127:	0f 95 c2             	setne  dl
c002712a:	09 da                	or     edx,ebx
c002712c:	83 e2 01             	and    edx,0x1
c002712f:	c1 e8 07             	shr    eax,0x7
c0027132:	21 c2                	and    edx,eax
c0027134:	b8 9e 00 00 00       	mov    eax,0x9e
c0027139:	29 c8                	sub    eax,ecx
c002713b:	c1 e0 17             	shl    eax,0x17
c002713e:	09 d8                	or     eax,ebx
c0027140:	01 d0                	add    eax,edx
c0027142:	5b                   	pop    ebx
c0027143:	5d                   	pop    ebp
c0027144:	c3                   	ret    

c0027145 <__fixsfsi>:
c0027145:	55                   	push   ebp
c0027146:	89 e5                	mov    ebp,esp
c0027148:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002714b:	89 d1                	mov    ecx,edx
c002714d:	c1 e1 08             	shl    ecx,0x8
c0027150:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027156:	c1 fa 17             	sar    edx,0x17
c0027159:	78 1c                	js     c0027177 <__fixsfsi+0x32>
c002715b:	83 ea 7f             	sub    edx,0x7f
c002715e:	31 c0                	xor    eax,eax
c0027160:	83 fa 1e             	cmp    edx,0x1e
c0027163:	77 40                	ja     c00271a5 <__fixsfsi+0x60>
c0027165:	89 c8                	mov    eax,ecx
c0027167:	0d 00 00 00 80       	or     eax,0x80000000
c002716c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027171:	29 d1                	sub    ecx,edx
c0027173:	d3 e8                	shr    eax,cl
c0027175:	eb 2e                	jmp    c00271a5 <__fixsfsi+0x60>
c0027177:	31 c0                	xor    eax,eax
c0027179:	81 c2 81 00 00 00    	add    edx,0x81
c002717f:	78 24                	js     c00271a5 <__fixsfsi+0x60>
c0027181:	83 fa 1e             	cmp    edx,0x1e
c0027184:	7e 09                	jle    c002718f <__fixsfsi+0x4a>
c0027186:	83 fa 1f             	cmp    edx,0x1f
c0027189:	75 18                	jne    c00271a3 <__fixsfsi+0x5e>
c002718b:	85 c9                	test   ecx,ecx
c002718d:	75 14                	jne    c00271a3 <__fixsfsi+0x5e>
c002718f:	89 c8                	mov    eax,ecx
c0027191:	0d 00 00 00 80       	or     eax,0x80000000
c0027196:	b9 1f 00 00 00       	mov    ecx,0x1f
c002719b:	29 d1                	sub    ecx,edx
c002719d:	d3 e8                	shr    eax,cl
c002719f:	f7 d8                	neg    eax
c00271a1:	eb 02                	jmp    c00271a5 <__fixsfsi+0x60>
c00271a3:	31 c0                	xor    eax,eax
c00271a5:	5d                   	pop    ebp
c00271a6:	c3                   	ret    

c00271a7 <__fixunssfsi>:
c00271a7:	55                   	push   ebp
c00271a8:	89 e5                	mov    ebp,esp
c00271aa:	53                   	push   ebx
c00271ab:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00271ae:	89 d3                	mov    ebx,edx
c00271b0:	c1 fb 17             	sar    ebx,0x17
c00271b3:	83 eb 7f             	sub    ebx,0x7f
c00271b6:	31 c0                	xor    eax,eax
c00271b8:	83 fb 1f             	cmp    ebx,0x1f
c00271bb:	77 18                	ja     c00271d5 <__fixunssfsi+0x2e>
c00271bd:	89 d0                	mov    eax,edx
c00271bf:	c1 e0 08             	shl    eax,0x8
c00271c2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00271c7:	0d 00 00 00 80       	or     eax,0x80000000
c00271cc:	b9 1f 00 00 00       	mov    ecx,0x1f
c00271d1:	29 d9                	sub    ecx,ebx
c00271d3:	d3 e8                	shr    eax,cl
c00271d5:	5b                   	pop    ebx
c00271d6:	5d                   	pop    ebp
c00271d7:	c3                   	ret    

c00271d8 <__cmpsf2>:
c00271d8:	55                   	push   ebp
c00271d9:	89 e5                	mov    ebp,esp
c00271db:	57                   	push   edi
c00271dc:	56                   	push   esi
c00271dd:	53                   	push   ebx
c00271de:	83 ec 24             	sub    esp,0x24
c00271e1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271e4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00271e7:	e8 4f 10 00 00       	call   c002823b <__truncdfsf2>
c00271ec:	5a                   	pop    edx
c00271ed:	59                   	pop    ecx
c00271ee:	89 c3                	mov    ebx,eax
c00271f0:	c1 e8 17             	shr    eax,0x17
c00271f3:	0f b6 f0             	movzx  esi,al
c00271f6:	89 d8                	mov    eax,ebx
c00271f8:	c1 e8 1f             	shr    eax,0x1f
c00271fb:	31 c6                	xor    esi,eax
c00271fd:	c1 e3 08             	shl    ebx,0x8
c0027200:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027203:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027206:	e8 30 10 00 00       	call   c002823b <__truncdfsf2>
c002720b:	83 c4 10             	add    esp,0x10
c002720e:	89 c1                	mov    ecx,eax
c0027210:	c1 e9 17             	shr    ecx,0x17
c0027213:	0f b6 c9             	movzx  ecx,cl
c0027216:	89 c7                	mov    edi,eax
c0027218:	c1 ef 1f             	shr    edi,0x1f
c002721b:	89 ca                	mov    edx,ecx
c002721d:	31 fa                	xor    edx,edi
c002721f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027222:	c1 e0 08             	shl    eax,0x8
c0027225:	89 c2                	mov    edx,eax
c0027227:	89 d8                	mov    eax,ebx
c0027229:	09 d0                	or     eax,edx
c002722b:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027230:	09 f0                	or     eax,esi
c0027232:	75 08                	jne    c002723c <__cmpsf2+0x64>
c0027234:	31 c0                	xor    eax,eax
c0027236:	39 f9                	cmp    ecx,edi
c0027238:	75 0c                	jne    c0027246 <__cmpsf2+0x6e>
c002723a:	eb 29                	jmp    c0027265 <__cmpsf2+0x8d>
c002723c:	b8 01 00 00 00       	mov    eax,0x1
c0027241:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027244:	7f 1f                	jg     c0027265 <__cmpsf2+0x8d>
c0027246:	83 c8 ff             	or     eax,0xffffffff
c0027249:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002724c:	7c 17                	jl     c0027265 <__cmpsf2+0x8d>
c002724e:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027254:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002725a:	b8 01 00 00 00       	mov    eax,0x1
c002725f:	39 d3                	cmp    ebx,edx
c0027261:	77 02                	ja     c0027265 <__cmpsf2+0x8d>
c0027263:	19 c0                	sbb    eax,eax
c0027265:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027268:	5b                   	pop    ebx
c0027269:	5e                   	pop    esi
c002726a:	5f                   	pop    edi
c002726b:	5d                   	pop    ebp
c002726c:	c3                   	ret    

c002726d <__eqsf2>:
c002726d:	55                   	push   ebp
c002726e:	89 e5                	mov    ebp,esp
c0027270:	83 ec 24             	sub    esp,0x24
c0027273:	6a 01                	push   0x1
c0027275:	83 ec 0c             	sub    esp,0xc
c0027278:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002727b:	e8 df 10 00 00       	call   c002835f <__extendsfdf2>
c0027280:	83 c4 10             	add    esp,0x10
c0027283:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027286:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027289:	52                   	push   edx
c002728a:	50                   	push   eax
c002728b:	50                   	push   eax
c002728c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002728f:	e8 cb 10 00 00       	call   c002835f <__extendsfdf2>
c0027294:	59                   	pop    ecx
c0027295:	59                   	pop    ecx
c0027296:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027299:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002729c:	52                   	push   edx
c002729d:	50                   	push   eax
c002729e:	e8 35 ff ff ff       	call   c00271d8 <__cmpsf2>
c00272a3:	83 c4 20             	add    esp,0x20
c00272a6:	c9                   	leave  
c00272a7:	c3                   	ret    

c00272a8 <__nesf2>:
c00272a8:	eb c3                	jmp    c002726d <__eqsf2>

c00272aa <__gtsf2>:
c00272aa:	55                   	push   ebp
c00272ab:	89 e5                	mov    ebp,esp
c00272ad:	83 ec 24             	sub    esp,0x24
c00272b0:	6a ff                	push   0xffffffff
c00272b2:	83 ec 0c             	sub    esp,0xc
c00272b5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00272b8:	e8 a2 10 00 00       	call   c002835f <__extendsfdf2>
c00272bd:	83 c4 10             	add    esp,0x10
c00272c0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00272c3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00272c6:	52                   	push   edx
c00272c7:	50                   	push   eax
c00272c8:	50                   	push   eax
c00272c9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00272cc:	e8 8e 10 00 00       	call   c002835f <__extendsfdf2>
c00272d1:	59                   	pop    ecx
c00272d2:	59                   	pop    ecx
c00272d3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00272d6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00272d9:	52                   	push   edx
c00272da:	50                   	push   eax
c00272db:	e8 f8 fe ff ff       	call   c00271d8 <__cmpsf2>
c00272e0:	83 c4 20             	add    esp,0x20
c00272e3:	c9                   	leave  
c00272e4:	c3                   	ret    

c00272e5 <__gesf2>:
c00272e5:	eb c3                	jmp    c00272aa <__gtsf2>

c00272e7 <__ltsf2>:
c00272e7:	eb 84                	jmp    c002726d <__eqsf2>

c00272e9 <__lesf2>:
c00272e9:	eb 82                	jmp    c002726d <__eqsf2>

c00272eb <__adddf3>:
c00272eb:	55                   	push   ebp
c00272ec:	89 e5                	mov    ebp,esp
c00272ee:	57                   	push   edi
c00272ef:	56                   	push   esi
c00272f0:	53                   	push   ebx
c00272f1:	83 ec 24             	sub    esp,0x24
c00272f4:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00272f7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00272fa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00272fd:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027300:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027303:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027306:	89 c8                	mov    eax,ecx
c0027308:	89 ce                	mov    esi,ecx
c002730a:	c1 fe 14             	sar    esi,0x14
c002730d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027310:	89 fb                	mov    ebx,edi
c0027312:	89 fa                	mov    edx,edi
c0027314:	c1 e2 0b             	shl    edx,0xb
c0027317:	c1 e0 0b             	shl    eax,0xb
c002731a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002731f:	c1 eb 15             	shr    ebx,0x15
c0027322:	09 d8                	or     eax,ebx
c0027324:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027327:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002732a:	c1 fe 14             	sar    esi,0x14
c002732d:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027330:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027333:	89 f3                	mov    ebx,esi
c0027335:	c1 e3 0b             	shl    ebx,0xb
c0027338:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002733b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002733e:	c1 e3 0b             	shl    ebx,0xb
c0027341:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027347:	c1 ee 15             	shr    esi,0x15
c002734a:	09 f3                	or     ebx,esi
c002734c:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c002734f:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027352:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027355:	0f 88 5f 02 00 00    	js     c00275ba <__adddf3+0x2cf>
c002735b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002735e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027361:	85 db                	test   ebx,ebx
c0027363:	0f 8e c7 00 00 00    	jle    c0027430 <__adddf3+0x145>
c0027369:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027370:	75 1a                	jne    c002738c <__adddf3+0xa1>
c0027372:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027375:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027378:	0f 84 b2 05 00 00    	je     c0027930 <__adddf3+0x645>
c002737e:	4b                   	dec    ebx
c002737f:	75 23                	jne    c00273a4 <__adddf3+0xb9>
c0027381:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027384:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027387:	e9 99 00 00 00       	jmp    c0027425 <__adddf3+0x13a>
c002738c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002738f:	f7 d6                	not    esi
c0027391:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027397:	0f 84 93 05 00 00    	je     c0027930 <__adddf3+0x645>
c002739d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00273a4:	83 fb 1f             	cmp    ebx,0x1f
c00273a7:	7e 42                	jle    c00273eb <__adddf3+0x100>
c00273a9:	83 fb 3f             	cmp    ebx,0x3f
c00273ac:	0f 8f 7e 05 00 00    	jg     c0027930 <__adddf3+0x645>
c00273b2:	83 e3 1f             	and    ebx,0x1f
c00273b5:	89 d9                	mov    ecx,ebx
c00273b7:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00273ba:	d3 ef                	shr    edi,cl
c00273bc:	31 db                	xor    ebx,ebx
c00273be:	85 c9                	test   ecx,ecx
c00273c0:	74 15                	je     c00273d7 <__adddf3+0xec>
c00273c2:	be 20 00 00 00       	mov    esi,0x20
c00273c7:	29 ce                	sub    esi,ecx
c00273c9:	89 f1                	mov    ecx,esi
c00273cb:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00273ce:	d3 e6                	shl    esi,cl
c00273d0:	31 db                	xor    ebx,ebx
c00273d2:	85 f6                	test   esi,esi
c00273d4:	0f 95 c3             	setne  bl
c00273d7:	31 c9                	xor    ecx,ecx
c00273d9:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00273dd:	0f 95 c1             	setne  cl
c00273e0:	09 cf                	or     edi,ecx
c00273e2:	09 fb                	or     ebx,edi
c00273e4:	01 da                	add    edx,ebx
c00273e6:	83 d0 00             	adc    eax,0x0
c00273e9:	eb 3a                	jmp    c0027425 <__adddf3+0x13a>
c00273eb:	bf 20 00 00 00       	mov    edi,0x20
c00273f0:	29 df                	sub    edi,ebx
c00273f2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00273f5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00273f8:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00273fb:	d3 e6                	shl    esi,cl
c00273fd:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027400:	88 d9                	mov    cl,bl
c0027402:	d3 ef                	shr    edi,cl
c0027404:	09 fe                	or     esi,edi
c0027406:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027409:	88 d9                	mov    cl,bl
c002740b:	d3 ef                	shr    edi,cl
c002740d:	89 fb                	mov    ebx,edi
c002740f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027412:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027415:	d3 e7                	shl    edi,cl
c0027417:	85 ff                	test   edi,edi
c0027419:	0f 95 c1             	setne  cl
c002741c:	0f b6 c9             	movzx  ecx,cl
c002741f:	09 ce                	or     esi,ecx
c0027421:	01 f2                	add    edx,esi
c0027423:	11 d8                	adc    eax,ebx
c0027425:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027428:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002742b:	e9 52 01 00 00       	jmp    c0027582 <__adddf3+0x297>
c0027430:	0f 84 d5 00 00 00    	je     c002750b <__adddf3+0x220>
c0027436:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027439:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c002743c:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002743f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027442:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027449:	75 20                	jne    c002746b <__adddf3+0x180>
c002744b:	89 d6                	mov    esi,edx
c002744d:	09 c6                	or     esi,eax
c002744f:	0f 84 db 04 00 00    	je     c0027930 <__adddf3+0x645>
c0027455:	4b                   	dec    ebx
c0027456:	75 29                	jne    c0027481 <__adddf3+0x196>
c0027458:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002745b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002745e:	01 d1                	add    ecx,edx
c0027460:	11 c6                	adc    esi,eax
c0027462:	89 f0                	mov    eax,esi
c0027464:	89 ca                	mov    edx,ecx
c0027466:	e9 17 01 00 00       	jmp    c0027582 <__adddf3+0x297>
c002746b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002746e:	f7 d6                	not    esi
c0027470:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027476:	0f 84 b4 04 00 00    	je     c0027930 <__adddf3+0x645>
c002747c:	0d 00 00 00 80       	or     eax,0x80000000
c0027481:	83 fb 1f             	cmp    ebx,0x1f
c0027484:	7e 48                	jle    c00274ce <__adddf3+0x1e3>
c0027486:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027489:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002748c:	83 fb 3f             	cmp    ebx,0x3f
c002748f:	0f 8f 9b 04 00 00    	jg     c0027930 <__adddf3+0x645>
c0027495:	83 e3 1f             	and    ebx,0x1f
c0027498:	89 d9                	mov    ecx,ebx
c002749a:	89 c7                	mov    edi,eax
c002749c:	d3 ef                	shr    edi,cl
c002749e:	31 db                	xor    ebx,ebx
c00274a0:	85 c9                	test   ecx,ecx
c00274a2:	74 12                	je     c00274b6 <__adddf3+0x1cb>
c00274a4:	be 20 00 00 00       	mov    esi,0x20
c00274a9:	29 ce                	sub    esi,ecx
c00274ab:	89 f1                	mov    ecx,esi
c00274ad:	d3 e0                	shl    eax,cl
c00274af:	31 db                	xor    ebx,ebx
c00274b1:	85 c0                	test   eax,eax
c00274b3:	0f 95 c3             	setne  bl
c00274b6:	31 c0                	xor    eax,eax
c00274b8:	85 d2                	test   edx,edx
c00274ba:	0f 95 c0             	setne  al
c00274bd:	09 c7                	or     edi,eax
c00274bf:	09 fb                	or     ebx,edi
c00274c1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00274c4:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00274c7:	01 da                	add    edx,ebx
c00274c9:	83 d6 00             	adc    esi,0x0
c00274cc:	eb 39                	jmp    c0027507 <__adddf3+0x21c>
c00274ce:	be 20 00 00 00       	mov    esi,0x20
c00274d3:	29 de                	sub    esi,ebx
c00274d5:	89 c7                	mov    edi,eax
c00274d7:	89 f1                	mov    ecx,esi
c00274d9:	d3 e7                	shl    edi,cl
c00274db:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00274de:	89 d7                	mov    edi,edx
c00274e0:	88 d9                	mov    cl,bl
c00274e2:	d3 ef                	shr    edi,cl
c00274e4:	89 f9                	mov    ecx,edi
c00274e6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00274e9:	09 cf                	or     edi,ecx
c00274eb:	88 d9                	mov    cl,bl
c00274ed:	d3 e8                	shr    eax,cl
c00274ef:	89 f1                	mov    ecx,esi
c00274f1:	d3 e2                	shl    edx,cl
c00274f3:	85 d2                	test   edx,edx
c00274f5:	0f 95 c2             	setne  dl
c00274f8:	0f b6 d2             	movzx  edx,dl
c00274fb:	09 d7                	or     edi,edx
c00274fd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027500:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027503:	01 fa                	add    edx,edi
c0027505:	11 c6                	adc    esi,eax
c0027507:	89 f0                	mov    eax,esi
c0027509:	eb 77                	jmp    c0027582 <__adddf3+0x297>
c002750b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002750e:	46                   	inc    esi
c002750f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027512:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027518:	75 41                	jne    c002755b <__adddf3+0x270>
c002751a:	89 d3                	mov    ebx,edx
c002751c:	09 c3                	or     ebx,eax
c002751e:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027525:	75 27                	jne    c002754e <__adddf3+0x263>
c0027527:	85 db                	test   ebx,ebx
c0027529:	0f 84 fb 03 00 00    	je     c002792a <__adddf3+0x63f>
c002752f:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027532:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027535:	0f 84 f5 03 00 00    	je     c0027930 <__adddf3+0x645>
c002753b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002753e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027541:	85 c0                	test   eax,eax
c0027543:	0f 89 91 03 00 00    	jns    c00278da <__adddf3+0x5ef>
c0027549:	e9 85 03 00 00       	jmp    c00278d3 <__adddf3+0x5e8>
c002754e:	85 db                	test   ebx,ebx
c0027550:	0f 85 da 03 00 00    	jne    c0027930 <__adddf3+0x645>
c0027556:	e9 cf 03 00 00       	jmp    c002792a <__adddf3+0x63f>
c002755b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002755e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027561:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027564:	f7 d1                	not    ecx
c0027566:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002756c:	0f 84 70 03 00 00    	je     c00278e2 <__adddf3+0x5f7>
c0027572:	d1 ea                	shr    edx,1
c0027574:	89 c1                	mov    ecx,eax
c0027576:	c1 e1 1f             	shl    ecx,0x1f
c0027579:	09 ca                	or     edx,ecx
c002757b:	d1 e8                	shr    eax,1
c002757d:	e9 6f 03 00 00       	jmp    c00278f1 <__adddf3+0x606>
c0027582:	85 c0                	test   eax,eax
c0027584:	0f 89 67 03 00 00    	jns    c00278f1 <__adddf3+0x606>
c002758a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002758d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027590:	f7 d1                	not    ecx
c0027592:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027598:	0f 84 44 03 00 00    	je     c00278e2 <__adddf3+0x5f7>
c002759e:	89 d1                	mov    ecx,edx
c00275a0:	d1 e9                	shr    ecx,1
c00275a2:	83 e2 01             	and    edx,0x1
c00275a5:	09 ca                	or     edx,ecx
c00275a7:	89 c1                	mov    ecx,eax
c00275a9:	c1 e1 1f             	shl    ecx,0x1f
c00275ac:	09 ca                	or     edx,ecx
c00275ae:	d1 e8                	shr    eax,1
c00275b0:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00275b5:	e9 37 03 00 00       	jmp    c00278f1 <__adddf3+0x606>
c00275ba:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00275bd:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00275c3:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00275c6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00275c9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00275cf:	29 de                	sub    esi,ebx
c00275d1:	85 f6                	test   esi,esi
c00275d3:	0f 8e bd 00 00 00    	jle    c0027696 <__adddf3+0x3ab>
c00275d9:	85 db                	test   ebx,ebx
c00275db:	75 17                	jne    c00275f4 <__adddf3+0x309>
c00275dd:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00275e0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00275e3:	0f 84 47 03 00 00    	je     c0027930 <__adddf3+0x645>
c00275e9:	4e                   	dec    esi
c00275ea:	75 20                	jne    c002760c <__adddf3+0x321>
c00275ec:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00275ef:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00275f2:	eb 5b                	jmp    c002764f <__adddf3+0x364>
c00275f4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00275f7:	f7 d3                	not    ebx
c00275f9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00275ff:	0f 84 2b 03 00 00    	je     c0027930 <__adddf3+0x645>
c0027605:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002760c:	83 fe 1f             	cmp    esi,0x1f
c002760f:	7e 49                	jle    c002765a <__adddf3+0x36f>
c0027611:	83 fe 3f             	cmp    esi,0x3f
c0027614:	0f 8f 16 03 00 00    	jg     c0027930 <__adddf3+0x645>
c002761a:	83 e6 1f             	and    esi,0x1f
c002761d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027620:	89 f1                	mov    ecx,esi
c0027622:	d3 ef                	shr    edi,cl
c0027624:	31 db                	xor    ebx,ebx
c0027626:	85 f6                	test   esi,esi
c0027628:	74 13                	je     c002763d <__adddf3+0x352>
c002762a:	b9 20 00 00 00       	mov    ecx,0x20
c002762f:	29 f1                	sub    ecx,esi
c0027631:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027634:	d3 e6                	shl    esi,cl
c0027636:	31 db                	xor    ebx,ebx
c0027638:	85 f6                	test   esi,esi
c002763a:	0f 95 c3             	setne  bl
c002763d:	31 c9                	xor    ecx,ecx
c002763f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027643:	0f 95 c1             	setne  cl
c0027646:	09 cf                	or     edi,ecx
c0027648:	09 fb                	or     ebx,edi
c002764a:	29 da                	sub    edx,ebx
c002764c:	83 d8 00             	sbb    eax,0x0
c002764f:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027652:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027655:	e9 aa 01 00 00       	jmp    c0027804 <__adddf3+0x519>
c002765a:	bf 20 00 00 00       	mov    edi,0x20
c002765f:	29 f7                	sub    edi,esi
c0027661:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027664:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027667:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002766a:	d3 e3                	shl    ebx,cl
c002766c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002766f:	89 f1                	mov    ecx,esi
c0027671:	d3 ef                	shr    edi,cl
c0027673:	09 fb                	or     ebx,edi
c0027675:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027678:	89 f1                	mov    ecx,esi
c002767a:	d3 ef                	shr    edi,cl
c002767c:	89 fe                	mov    esi,edi
c002767e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027681:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027684:	d3 e7                	shl    edi,cl
c0027686:	85 ff                	test   edi,edi
c0027688:	0f 95 c1             	setne  cl
c002768b:	0f b6 c9             	movzx  ecx,cl
c002768e:	09 cb                	or     ebx,ecx
c0027690:	29 da                	sub    edx,ebx
c0027692:	19 f0                	sbb    eax,esi
c0027694:	eb b9                	jmp    c002764f <__adddf3+0x364>
c0027696:	0f 84 cd 00 00 00    	je     c0027769 <__adddf3+0x47e>
c002769c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002769f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00276a2:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00276a5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00276a9:	75 1b                	jne    c00276c6 <__adddf3+0x3db>
c00276ab:	89 d6                	mov    esi,edx
c00276ad:	09 c6                	or     esi,eax
c00276af:	0f 84 7b 02 00 00    	je     c0027930 <__adddf3+0x645>
c00276b5:	4b                   	dec    ebx
c00276b6:	75 24                	jne    c00276dc <__adddf3+0x3f1>
c00276b8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276bb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00276be:	29 d1                	sub    ecx,edx
c00276c0:	19 c6                	sbb    esi,eax
c00276c2:	89 ca                	mov    edx,ecx
c00276c4:	eb 61                	jmp    c0027727 <__adddf3+0x43c>
c00276c6:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00276c9:	f7 d6                	not    esi
c00276cb:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00276d1:	0f 84 59 02 00 00    	je     c0027930 <__adddf3+0x645>
c00276d7:	0d 00 00 00 80       	or     eax,0x80000000
c00276dc:	83 fb 1f             	cmp    ebx,0x1f
c00276df:	7e 4d                	jle    c002772e <__adddf3+0x443>
c00276e1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00276e4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00276e7:	83 fb 3f             	cmp    ebx,0x3f
c00276ea:	0f 8f 40 02 00 00    	jg     c0027930 <__adddf3+0x645>
c00276f0:	83 e3 1f             	and    ebx,0x1f
c00276f3:	89 d9                	mov    ecx,ebx
c00276f5:	89 c7                	mov    edi,eax
c00276f7:	d3 ef                	shr    edi,cl
c00276f9:	31 db                	xor    ebx,ebx
c00276fb:	85 c9                	test   ecx,ecx
c00276fd:	74 12                	je     c0027711 <__adddf3+0x426>
c00276ff:	be 20 00 00 00       	mov    esi,0x20
c0027704:	29 ce                	sub    esi,ecx
c0027706:	89 f1                	mov    ecx,esi
c0027708:	d3 e0                	shl    eax,cl
c002770a:	31 db                	xor    ebx,ebx
c002770c:	85 c0                	test   eax,eax
c002770e:	0f 95 c3             	setne  bl
c0027711:	31 c0                	xor    eax,eax
c0027713:	85 d2                	test   edx,edx
c0027715:	0f 95 c0             	setne  al
c0027718:	09 c7                	or     edi,eax
c002771a:	09 fb                	or     ebx,edi
c002771c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002771f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027722:	29 da                	sub    edx,ebx
c0027724:	83 de 00             	sbb    esi,0x0
c0027727:	89 f0                	mov    eax,esi
c0027729:	e9 d6 00 00 00       	jmp    c0027804 <__adddf3+0x519>
c002772e:	be 20 00 00 00       	mov    esi,0x20
c0027733:	29 de                	sub    esi,ebx
c0027735:	89 c7                	mov    edi,eax
c0027737:	89 f1                	mov    ecx,esi
c0027739:	d3 e7                	shl    edi,cl
c002773b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002773e:	89 d7                	mov    edi,edx
c0027740:	88 d9                	mov    cl,bl
c0027742:	d3 ef                	shr    edi,cl
c0027744:	89 f9                	mov    ecx,edi
c0027746:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027749:	09 cf                	or     edi,ecx
c002774b:	88 d9                	mov    cl,bl
c002774d:	d3 e8                	shr    eax,cl
c002774f:	89 f1                	mov    ecx,esi
c0027751:	d3 e2                	shl    edx,cl
c0027753:	85 d2                	test   edx,edx
c0027755:	0f 95 c2             	setne  dl
c0027758:	0f b6 d2             	movzx  edx,dl
c002775b:	09 d7                	or     edi,edx
c002775d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027760:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027763:	29 fa                	sub    edx,edi
c0027765:	19 c6                	sbb    esi,eax
c0027767:	eb be                	jmp    c0027727 <__adddf3+0x43c>
c0027769:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002776c:	8d 5e 01             	lea    ebx,[esi+0x1]
c002776f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027775:	75 6a                	jne    c00277e1 <__adddf3+0x4f6>
c0027777:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002777b:	75 58                	jne    c00277d5 <__adddf3+0x4ea>
c002777d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027780:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027783:	89 d6                	mov    esi,edx
c0027785:	09 c6                	or     esi,eax
c0027787:	75 17                	jne    c00277a0 <__adddf3+0x4b5>
c0027789:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002778c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002778f:	85 db                	test   ebx,ebx
c0027791:	0f 85 99 01 00 00    	jne    c0027930 <__adddf3+0x645>
c0027797:	31 ff                	xor    edi,edi
c0027799:	31 c9                	xor    ecx,ecx
c002779b:	e9 90 01 00 00       	jmp    c0027930 <__adddf3+0x645>
c00277a0:	85 db                	test   ebx,ebx
c00277a2:	0f 84 88 01 00 00    	je     c0027930 <__adddf3+0x645>
c00277a8:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00277ab:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00277ae:	85 c0                	test   eax,eax
c00277b0:	79 10                	jns    c00277c2 <__adddf3+0x4d7>
c00277b2:	31 c9                	xor    ecx,ecx
c00277b4:	f7 da                	neg    edx
c00277b6:	0f 95 c1             	setne  cl
c00277b9:	01 c8                	add    eax,ecx
c00277bb:	f7 d8                	neg    eax
c00277bd:	e9 2f 01 00 00       	jmp    c00278f1 <__adddf3+0x606>
c00277c2:	31 ff                	xor    edi,edi
c00277c4:	31 c9                	xor    ecx,ecx
c00277c6:	89 c3                	mov    ebx,eax
c00277c8:	09 d3                	or     ebx,edx
c00277ca:	0f 84 60 01 00 00    	je     c0027930 <__adddf3+0x645>
c00277d0:	e9 05 01 00 00       	jmp    c00278da <__adddf3+0x5ef>
c00277d5:	31 ff                	xor    edi,edi
c00277d7:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00277dc:	e9 4f 01 00 00       	jmp    c0027930 <__adddf3+0x645>
c00277e1:	89 c1                	mov    ecx,eax
c00277e3:	89 d0                	mov    eax,edx
c00277e5:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00277e8:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00277eb:	89 ca                	mov    edx,ecx
c00277ed:	85 c9                	test   ecx,ecx
c00277ef:	79 2c                	jns    c002781d <__adddf3+0x532>
c00277f1:	31 c9                	xor    ecx,ecx
c00277f3:	f7 d8                	neg    eax
c00277f5:	0f 95 c1             	setne  cl
c00277f8:	01 ca                	add    edx,ecx
c00277fa:	f7 da                	neg    edx
c00277fc:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00277ff:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027802:	eb 19                	jmp    c002781d <__adddf3+0x532>
c0027804:	85 c0                	test   eax,eax
c0027806:	0f 89 e5 00 00 00    	jns    c00278f1 <__adddf3+0x606>
c002780c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027811:	89 c1                	mov    ecx,eax
c0027813:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027816:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027819:	89 d0                	mov    eax,edx
c002781b:	89 ca                	mov    edx,ecx
c002781d:	85 d2                	test   edx,edx
c002781f:	74 59                	je     c002787a <__adddf3+0x58f>
c0027821:	0f bd da             	bsr    ebx,edx
c0027824:	83 f3 1f             	xor    ebx,0x1f
c0027827:	88 d9                	mov    cl,bl
c0027829:	d3 e2                	shl    edx,cl
c002782b:	bf 20 00 00 00       	mov    edi,0x20
c0027830:	89 f9                	mov    ecx,edi
c0027832:	29 d9                	sub    ecx,ebx
c0027834:	89 c6                	mov    esi,eax
c0027836:	d3 ee                	shr    esi,cl
c0027838:	09 d6                	or     esi,edx
c002783a:	88 d9                	mov    cl,bl
c002783c:	d3 e0                	shl    eax,cl
c002783e:	89 c2                	mov    edx,eax
c0027840:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027843:	25 ff 07 00 00       	and    eax,0x7ff
c0027848:	39 d8                	cmp    eax,ebx
c002784a:	7f 22                	jg     c002786e <__adddf3+0x583>
c002784c:	29 c3                	sub    ebx,eax
c002784e:	43                   	inc    ebx
c002784f:	88 d9                	mov    cl,bl
c0027851:	d3 ea                	shr    edx,cl
c0027853:	29 df                	sub    edi,ebx
c0027855:	89 f9                	mov    ecx,edi
c0027857:	89 f0                	mov    eax,esi
c0027859:	d3 e0                	shl    eax,cl
c002785b:	09 c2                	or     edx,eax
c002785d:	89 f0                	mov    eax,esi
c002785f:	88 d9                	mov    cl,bl
c0027861:	d3 e8                	shr    eax,cl
c0027863:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027866:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c002786c:	eb 6f                	jmp    c00278dd <__adddf3+0x5f2>
c002786e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027871:	29 d8                	sub    eax,ebx
c0027873:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027876:	89 f0                	mov    eax,esi
c0027878:	eb 59                	jmp    c00278d3 <__adddf3+0x5e8>
c002787a:	85 c0                	test   eax,eax
c002787c:	74 6a                	je     c00278e8 <__adddf3+0x5fd>
c002787e:	0f bd c8             	bsr    ecx,eax
c0027881:	83 f1 1f             	xor    ecx,0x1f
c0027884:	d3 e0                	shl    eax,cl
c0027886:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027889:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002788f:	83 c1 20             	add    ecx,0x20
c0027892:	39 cb                	cmp    ebx,ecx
c0027894:	7f 35                	jg     c00278cb <__adddf3+0x5e0>
c0027896:	29 d9                	sub    ecx,ebx
c0027898:	8d 71 01             	lea    esi,[ecx+0x1]
c002789b:	83 fe 1f             	cmp    esi,0x1f
c002789e:	7e 09                	jle    c00278a9 <__adddf3+0x5be>
c00278a0:	83 e9 1f             	sub    ecx,0x1f
c00278a3:	d3 e8                	shr    eax,cl
c00278a5:	89 c3                	mov    ebx,eax
c00278a7:	eb 11                	jmp    c00278ba <__adddf3+0x5cf>
c00278a9:	b9 20 00 00 00       	mov    ecx,0x20
c00278ae:	29 f1                	sub    ecx,esi
c00278b0:	89 c3                	mov    ebx,eax
c00278b2:	d3 e3                	shl    ebx,cl
c00278b4:	89 f1                	mov    ecx,esi
c00278b6:	d3 e8                	shr    eax,cl
c00278b8:	89 c2                	mov    edx,eax
c00278ba:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00278bd:	25 00 f8 ff ff       	and    eax,0xfffff800
c00278c2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00278c5:	89 d0                	mov    eax,edx
c00278c7:	89 da                	mov    edx,ebx
c00278c9:	eb 26                	jmp    c00278f1 <__adddf3+0x606>
c00278cb:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00278ce:	29 cf                	sub    edi,ecx
c00278d0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00278d3:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00278d8:	eb 17                	jmp    c00278f1 <__adddf3+0x606>
c00278da:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00278dd:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00278e0:	eb 0f                	jmp    c00278f1 <__adddf3+0x606>
c00278e2:	31 d2                	xor    edx,edx
c00278e4:	31 c0                	xor    eax,eax
c00278e6:	eb 09                	jmp    c00278f1 <__adddf3+0x606>
c00278e8:	89 c2                	mov    edx,eax
c00278ea:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00278f1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00278f4:	c1 e1 14             	shl    ecx,0x14
c00278f7:	89 c3                	mov    ebx,eax
c00278f9:	c1 eb 0b             	shr    ebx,0xb
c00278fc:	09 d9                	or     ecx,ebx
c00278fe:	89 d3                	mov    ebx,edx
c0027900:	c1 eb 0b             	shr    ebx,0xb
c0027903:	c1 e0 15             	shl    eax,0x15
c0027906:	09 d8                	or     eax,ebx
c0027908:	89 c7                	mov    edi,eax
c002790a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027910:	0f 95 c0             	setne  al
c0027913:	89 c6                	mov    esi,eax
c0027915:	09 f3                	or     ebx,esi
c0027917:	83 e3 01             	and    ebx,0x1
c002791a:	c1 ea 0a             	shr    edx,0xa
c002791d:	21 da                	and    edx,ebx
c002791f:	89 f8                	mov    eax,edi
c0027921:	01 d0                	add    eax,edx
c0027923:	83 d1 00             	adc    ecx,0x0
c0027926:	89 c7                	mov    edi,eax
c0027928:	eb 06                	jmp    c0027930 <__adddf3+0x645>
c002792a:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002792d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027930:	89 f8                	mov    eax,edi
c0027932:	89 ca                	mov    edx,ecx
c0027934:	83 c4 24             	add    esp,0x24
c0027937:	5b                   	pop    ebx
c0027938:	5e                   	pop    esi
c0027939:	5f                   	pop    edi
c002793a:	5d                   	pop    ebp
c002793b:	c3                   	ret    

c002793c <__subdf3>:
c002793c:	55                   	push   ebp
c002793d:	89 e5                	mov    ebp,esp
c002793f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027942:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027945:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002794b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002794e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027951:	5d                   	pop    ebp
c0027952:	e9 94 f9 ff ff       	jmp    c00272eb <__adddf3>

c0027957 <__negdf2>:
c0027957:	55                   	push   ebp
c0027958:	89 e5                	mov    ebp,esp
c002795a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002795d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027960:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027966:	5d                   	pop    ebp
c0027967:	c3                   	ret    

c0027968 <__muldf3>:
c0027968:	55                   	push   ebp
c0027969:	89 e5                	mov    ebp,esp
c002796b:	57                   	push   edi
c002796c:	56                   	push   esi
c002796d:	53                   	push   ebx
c002796e:	83 ec 24             	sub    esp,0x24
c0027971:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027974:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027977:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002797a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002797d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027980:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027983:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027986:	89 c8                	mov    eax,ecx
c0027988:	c1 f8 14             	sar    eax,0x14
c002798b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002798e:	89 f8                	mov    eax,edi
c0027990:	89 fb                	mov    ebx,edi
c0027992:	c1 e3 0b             	shl    ebx,0xb
c0027995:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027998:	c1 e1 0b             	shl    ecx,0xb
c002799b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00279a1:	c1 e8 15             	shr    eax,0x15
c00279a4:	09 c1                	or     ecx,eax
c00279a6:	89 d6                	mov    esi,edx
c00279a8:	89 d0                	mov    eax,edx
c00279aa:	c1 f8 14             	sar    eax,0x14
c00279ad:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00279b0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00279b3:	89 c3                	mov    ebx,eax
c00279b5:	c1 e3 0b             	shl    ebx,0xb
c00279b8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00279bb:	c1 e6 0b             	shl    esi,0xb
c00279be:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00279c4:	c1 e8 15             	shr    eax,0x15
c00279c7:	09 c6                	or     esi,eax
c00279c9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00279cc:	25 ff 07 00 00       	and    eax,0x7ff
c00279d1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00279d4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00279d7:	25 ff 07 00 00       	and    eax,0x7ff
c00279dc:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00279df:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00279e2:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00279e5:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c00279ec:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00279ef:	40                   	inc    eax
c00279f0:	a9 fe 07 00 00       	test   eax,0x7fe
c00279f5:	0f 85 8d 00 00 00    	jne    c0027a88 <__muldf3+0x120>
c00279fb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00279fe:	09 c8                	or     eax,ecx
c0027a00:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027a04:	74 44                	je     c0027a4a <__muldf3+0xe2>
c0027a06:	85 c0                	test   eax,eax
c0027a08:	0f 85 31 02 00 00    	jne    c0027c3f <__muldf3+0x2d7>
c0027a0e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027a11:	40                   	inc    eax
c0027a12:	a9 fe 07 00 00       	test   eax,0x7fe
c0027a17:	75 13                	jne    c0027a2c <__muldf3+0xc4>
c0027a19:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027a1c:	09 f1                	or     ecx,esi
c0027a1e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027a22:	74 22                	je     c0027a46 <__muldf3+0xde>
c0027a24:	85 c9                	test   ecx,ecx
c0027a26:	0f 85 0d 02 00 00    	jne    c0027c39 <__muldf3+0x2d1>
c0027a2c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027a30:	0f 89 09 02 00 00    	jns    c0027c3f <__muldf3+0x2d7>
c0027a36:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027a39:	05 00 00 00 80       	add    eax,0x80000000
c0027a3e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a41:	e9 f9 01 00 00       	jmp    c0027c3f <__muldf3+0x2d7>
c0027a46:	85 c9                	test   ecx,ecx
c0027a48:	eb 2e                	jmp    c0027a78 <__muldf3+0x110>
c0027a4a:	85 c0                	test   eax,eax
c0027a4c:	74 20                	je     c0027a6e <__muldf3+0x106>
c0027a4e:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027a51:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a54:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a57:	c1 ef 1f             	shr    edi,0x1f
c0027a5a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027a5d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027a60:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027a63:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027a66:	09 f9                	or     ecx,edi
c0027a68:	78 1e                	js     c0027a88 <__muldf3+0x120>
c0027a6a:	89 c3                	mov    ebx,eax
c0027a6c:	eb e0                	jmp    c0027a4e <__muldf3+0xe6>
c0027a6e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027a71:	f7 d0                	not    eax
c0027a73:	a9 ff 07 00 00       	test   eax,0x7ff
c0027a78:	75 b2                	jne    c0027a2c <__muldf3+0xc4>
c0027a7a:	31 ff                	xor    edi,edi
c0027a7c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027a83:	e9 b7 01 00 00       	jmp    c0027c3f <__muldf3+0x2d7>
c0027a88:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027a8b:	40                   	inc    eax
c0027a8c:	a9 fe 07 00 00       	test   eax,0x7fe
c0027a91:	75 57                	jne    c0027aea <__muldf3+0x182>
c0027a93:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027a96:	09 f0                	or     eax,esi
c0027a98:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027a9c:	74 23                	je     c0027ac1 <__muldf3+0x159>
c0027a9e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027aa2:	0f 89 91 01 00 00    	jns    c0027c39 <__muldf3+0x2d1>
c0027aa8:	85 c0                	test   eax,eax
c0027aaa:	0f 85 89 01 00 00    	jne    c0027c39 <__muldf3+0x2d1>
c0027ab0:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027ab3:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027ab9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027abc:	e9 7e 01 00 00       	jmp    c0027c3f <__muldf3+0x2d7>
c0027ac1:	85 c0                	test   eax,eax
c0027ac3:	75 0c                	jne    c0027ad1 <__muldf3+0x169>
c0027ac5:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027ac9:	0f 89 6a 01 00 00    	jns    c0027c39 <__muldf3+0x2d1>
c0027acf:	eb df                	jmp    c0027ab0 <__muldf3+0x148>
c0027ad1:	01 f6                	add    esi,esi
c0027ad3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027ad6:	c1 ea 1f             	shr    edx,0x1f
c0027ad9:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027adc:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027adf:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027ae2:	09 d6                	or     esi,edx
c0027ae4:	78 04                	js     c0027aea <__muldf3+0x182>
c0027ae6:	89 c3                	mov    ebx,eax
c0027ae8:	eb e7                	jmp    c0027ad1 <__muldf3+0x169>
c0027aea:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027af0:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027af6:	89 c8                	mov    eax,ecx
c0027af8:	f7 e6                	mul    esi
c0027afa:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027afd:	89 c7                	mov    edi,eax
c0027aff:	89 c8                	mov    eax,ecx
c0027b01:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027b04:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027b07:	89 c1                	mov    ecx,eax
c0027b09:	89 f0                	mov    eax,esi
c0027b0b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027b0e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027b11:	89 c6                	mov    esi,eax
c0027b13:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b16:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027b19:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027b1c:	31 c0                	xor    eax,eax
c0027b1e:	01 f1                	add    ecx,esi
c0027b20:	0f 92 c0             	setb   al
c0027b23:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027b26:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027b29:	83 d6 00             	adc    esi,0x0
c0027b2c:	01 c7                	add    edi,eax
c0027b2e:	83 d6 00             	adc    esi,0x0
c0027b31:	01 ca                	add    edx,ecx
c0027b33:	0f 92 c1             	setb   cl
c0027b36:	0f b6 c9             	movzx  ecx,cl
c0027b39:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027b3c:	83 d6 00             	adc    esi,0x0
c0027b3f:	01 cf                	add    edi,ecx
c0027b41:	83 d6 00             	adc    esi,0x0
c0027b44:	31 c9                	xor    ecx,ecx
c0027b46:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027b49:	0f 95 c1             	setne  cl
c0027b4c:	09 cf                	or     edi,ecx
c0027b4e:	85 f6                	test   esi,esi
c0027b50:	78 0c                	js     c0027b5e <__muldf3+0x1f6>
c0027b52:	01 f6                	add    esi,esi
c0027b54:	89 f8                	mov    eax,edi
c0027b56:	c1 e8 1f             	shr    eax,0x1f
c0027b59:	09 c6                	or     esi,eax
c0027b5b:	01 ff                	add    edi,edi
c0027b5d:	4b                   	dec    ebx
c0027b5e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027b64:	0f 8f 85 00 00 00    	jg     c0027bef <__muldf3+0x287>
c0027b6a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027b70:	85 db                	test   ebx,ebx
c0027b72:	0f 8f 84 00 00 00    	jg     c0027bfc <__muldf3+0x294>
c0027b78:	83 fb cc             	cmp    ebx,0xffffffcc
c0027b7b:	7c 79                	jl     c0027bf6 <__muldf3+0x28e>
c0027b7d:	ba 01 00 00 00       	mov    edx,0x1
c0027b82:	29 da                	sub    edx,ebx
c0027b84:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027b8a:	83 fa 1f             	cmp    edx,0x1f
c0027b8d:	7e 30                	jle    c0027bbf <__muldf3+0x257>
c0027b8f:	83 fa 20             	cmp    edx,0x20
c0027b92:	75 0b                	jne    c0027b9f <__muldf3+0x237>
c0027b94:	31 c0                	xor    eax,eax
c0027b96:	85 ff                	test   edi,edi
c0027b98:	0f 95 c0             	setne  al
c0027b9b:	89 c7                	mov    edi,eax
c0027b9d:	eb 1a                	jmp    c0027bb9 <__muldf3+0x251>
c0027b9f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027ba2:	89 f0                	mov    eax,esi
c0027ba4:	d3 e0                	shl    eax,cl
c0027ba6:	09 f8                	or     eax,edi
c0027ba8:	0f 95 c0             	setne  al
c0027bab:	0f b6 c0             	movzx  eax,al
c0027bae:	89 c7                	mov    edi,eax
c0027bb0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027bb5:	29 d9                	sub    ecx,ebx
c0027bb7:	d3 ee                	shr    esi,cl
c0027bb9:	09 f7                	or     edi,esi
c0027bbb:	31 db                	xor    ebx,ebx
c0027bbd:	eb 3b                	jmp    c0027bfa <__muldf3+0x292>
c0027bbf:	83 c3 1f             	add    ebx,0x1f
c0027bc2:	89 f0                	mov    eax,esi
c0027bc4:	88 d9                	mov    cl,bl
c0027bc6:	d3 e0                	shl    eax,cl
c0027bc8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027bcb:	89 f8                	mov    eax,edi
c0027bcd:	88 d1                	mov    cl,dl
c0027bcf:	d3 e8                	shr    eax,cl
c0027bd1:	89 c1                	mov    ecx,eax
c0027bd3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027bd6:	09 c8                	or     eax,ecx
c0027bd8:	88 d9                	mov    cl,bl
c0027bda:	d3 e7                	shl    edi,cl
c0027bdc:	31 db                	xor    ebx,ebx
c0027bde:	85 ff                	test   edi,edi
c0027be0:	0f 95 c3             	setne  bl
c0027be3:	89 df                	mov    edi,ebx
c0027be5:	09 c7                	or     edi,eax
c0027be7:	88 d1                	mov    cl,dl
c0027be9:	d3 ee                	shr    esi,cl
c0027beb:	31 db                	xor    ebx,ebx
c0027bed:	eb 0d                	jmp    c0027bfc <__muldf3+0x294>
c0027bef:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027bf4:	eb 02                	jmp    c0027bf8 <__muldf3+0x290>
c0027bf6:	31 db                	xor    ebx,ebx
c0027bf8:	31 ff                	xor    edi,edi
c0027bfa:	31 f6                	xor    esi,esi
c0027bfc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027bff:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027c02:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027c07:	09 c3                	or     ebx,eax
c0027c09:	c1 e3 14             	shl    ebx,0x14
c0027c0c:	89 f0                	mov    eax,esi
c0027c0e:	c1 e8 0b             	shr    eax,0xb
c0027c11:	09 c3                	or     ebx,eax
c0027c13:	89 f8                	mov    eax,edi
c0027c15:	c1 e8 0b             	shr    eax,0xb
c0027c18:	c1 e6 15             	shl    esi,0x15
c0027c1b:	09 c6                	or     esi,eax
c0027c1d:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027c23:	0f 95 c1             	setne  cl
c0027c26:	09 c8                	or     eax,ecx
c0027c28:	83 e0 01             	and    eax,0x1
c0027c2b:	c1 ef 0a             	shr    edi,0xa
c0027c2e:	21 c7                	and    edi,eax
c0027c30:	01 f7                	add    edi,esi
c0027c32:	83 d3 00             	adc    ebx,0x0
c0027c35:	89 da                	mov    edx,ebx
c0027c37:	eb 03                	jmp    c0027c3c <__muldf3+0x2d4>
c0027c39:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027c3c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027c3f:	89 f8                	mov    eax,edi
c0027c41:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027c44:	83 c4 24             	add    esp,0x24
c0027c47:	5b                   	pop    ebx
c0027c48:	5e                   	pop    esi
c0027c49:	5f                   	pop    edi
c0027c4a:	5d                   	pop    ebp
c0027c4b:	c3                   	ret    

c0027c4c <__divdf3>:
c0027c4c:	55                   	push   ebp
c0027c4d:	89 e5                	mov    ebp,esp
c0027c4f:	57                   	push   edi
c0027c50:	56                   	push   esi
c0027c51:	53                   	push   ebx
c0027c52:	83 ec 2c             	sub    esp,0x2c
c0027c55:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027c58:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027c5b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027c5e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027c61:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027c64:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027c67:	89 ce                	mov    esi,ecx
c0027c69:	89 c8                	mov    eax,ecx
c0027c6b:	c1 f8 14             	sar    eax,0x14
c0027c6e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027c71:	89 f8                	mov    eax,edi
c0027c73:	89 fb                	mov    ebx,edi
c0027c75:	c1 e3 0b             	shl    ebx,0xb
c0027c78:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027c7b:	c1 e6 0b             	shl    esi,0xb
c0027c7e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027c84:	c1 e8 15             	shr    eax,0x15
c0027c87:	09 c6                	or     esi,eax
c0027c89:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027c8c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027c8f:	89 c2                	mov    edx,eax
c0027c91:	c1 fa 14             	sar    edx,0x14
c0027c94:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027c97:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027c9a:	89 de                	mov    esi,ebx
c0027c9c:	c1 e6 0b             	shl    esi,0xb
c0027c9f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027ca2:	c1 e0 0b             	shl    eax,0xb
c0027ca5:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027caa:	c1 eb 15             	shr    ebx,0x15
c0027cad:	09 d8                	or     eax,ebx
c0027caf:	89 c2                	mov    edx,eax
c0027cb1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027cb4:	25 ff 07 00 00       	and    eax,0x7ff
c0027cb9:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027cbc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027cbf:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027cc5:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027cc8:	29 d8                	sub    eax,ebx
c0027cca:	05 ff 03 00 00       	add    eax,0x3ff
c0027ccf:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027cd2:	46                   	inc    esi
c0027cd3:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027cd9:	0f 85 a5 00 00 00    	jne    c0027d84 <__divdf3+0x138>
c0027cdf:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027ce2:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027ce5:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027ce9:	74 2a                	je     c0027d15 <__divdf3+0xc9>
c0027ceb:	85 f6                	test   esi,esi
c0027ced:	0f 85 cc 02 00 00    	jne    c0027fbf <__divdf3+0x373>
c0027cf3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027cf6:	40                   	inc    eax
c0027cf7:	a9 fe 07 00 00       	test   eax,0x7fe
c0027cfc:	75 26                	jne    c0027d24 <__divdf3+0xd8>
c0027cfe:	85 db                	test   ebx,ebx
c0027d00:	74 22                	je     c0027d24 <__divdf3+0xd8>
c0027d02:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027d05:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027d08:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d0b:	09 d0                	or     eax,edx
c0027d0d:	0f 85 ac 02 00 00    	jne    c0027fbf <__divdf3+0x373>
c0027d13:	eb 63                	jmp    c0027d78 <__divdf3+0x12c>
c0027d15:	85 f6                	test   esi,esi
c0027d17:	75 22                	jne    c0027d3b <__divdf3+0xef>
c0027d19:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d1c:	40                   	inc    eax
c0027d1d:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d22:	74 36                	je     c0027d5a <__divdf3+0x10e>
c0027d24:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027d28:	0f 89 91 02 00 00    	jns    c0027fbf <__divdf3+0x373>
c0027d2e:	89 f8                	mov    eax,edi
c0027d30:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027d36:	e9 80 02 00 00       	jmp    c0027fbb <__divdf3+0x36f>
c0027d3b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027d3e:	01 f6                	add    esi,esi
c0027d40:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027d43:	c1 ef 1f             	shr    edi,0x1f
c0027d46:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027d49:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027d4c:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027d4f:	09 f7                	or     edi,esi
c0027d51:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027d54:	78 2e                	js     c0027d84 <__divdf3+0x138>
c0027d56:	89 c8                	mov    eax,ecx
c0027d58:	eb e1                	jmp    c0027d3b <__divdf3+0xef>
c0027d5a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d5d:	09 d0                	or     eax,edx
c0027d5f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027d63:	74 0f                	je     c0027d74 <__divdf3+0x128>
c0027d65:	85 c0                	test   eax,eax
c0027d67:	74 bb                	je     c0027d24 <__divdf3+0xd8>
c0027d69:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027d6c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027d6f:	e9 4b 02 00 00       	jmp    c0027fbf <__divdf3+0x373>
c0027d74:	85 c0                	test   eax,eax
c0027d76:	75 ac                	jne    c0027d24 <__divdf3+0xd8>
c0027d78:	31 ff                	xor    edi,edi
c0027d7a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027d7f:	e9 3b 02 00 00       	jmp    c0027fbf <__divdf3+0x373>
c0027d84:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027d87:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027d8a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027d90:	75 6b                	jne    c0027dfd <__divdf3+0x1b1>
c0027d92:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027d95:	09 d6                	or     esi,edx
c0027d97:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027d9b:	74 28                	je     c0027dc5 <__divdf3+0x179>
c0027d9d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027da0:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027da3:	85 f6                	test   esi,esi
c0027da5:	0f 85 14 02 00 00    	jne    c0027fbf <__divdf3+0x373>
c0027dab:	31 ff                	xor    edi,edi
c0027dad:	31 c9                	xor    ecx,ecx
c0027daf:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027db2:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027db5:	0f 89 04 02 00 00    	jns    c0027fbf <__divdf3+0x373>
c0027dbb:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027dc0:	e9 fa 01 00 00       	jmp    c0027fbf <__divdf3+0x373>
c0027dc5:	85 f6                	test   esi,esi
c0027dc7:	75 1b                	jne    c0027de4 <__divdf3+0x198>
c0027dc9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027dcc:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027dcf:	25 00 00 00 80       	and    eax,0x80000000
c0027dd4:	31 c9                	xor    ecx,ecx
c0027dd6:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027ddb:	89 cf                	mov    edi,ecx
c0027ddd:	89 c1                	mov    ecx,eax
c0027ddf:	e9 db 01 00 00       	jmp    c0027fbf <__divdf3+0x373>
c0027de4:	01 d2                	add    edx,edx
c0027de6:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027de9:	c1 eb 1f             	shr    ebx,0x1f
c0027dec:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027def:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027df2:	8d 48 01             	lea    ecx,[eax+0x1]
c0027df5:	09 da                	or     edx,ebx
c0027df7:	78 04                	js     c0027dfd <__divdf3+0x1b1>
c0027df9:	89 c8                	mov    eax,ecx
c0027dfb:	eb e7                	jmp    c0027de4 <__divdf3+0x198>
c0027dfd:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027e00:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027e06:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027e0c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027e0f:	39 d6                	cmp    esi,edx
c0027e11:	77 0d                	ja     c0027e20 <__divdf3+0x1d4>
c0027e13:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027e16:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027e19:	72 1b                	jb     c0027e36 <__divdf3+0x1ea>
c0027e1b:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027e1e:	75 16                	jne    c0027e36 <__divdf3+0x1ea>
c0027e20:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027e23:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027e26:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027e29:	83 de 00             	sbb    esi,0x0
c0027e2c:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027e2f:	ba 01 00 00 00       	mov    edx,0x1
c0027e34:	eb 02                	jmp    c0027e38 <__divdf3+0x1ec>
c0027e36:	31 d2                	xor    edx,edx
c0027e38:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027e3f:	31 ff                	xor    edi,edi
c0027e41:	01 ff                	add    edi,edi
c0027e43:	89 d1                	mov    ecx,edx
c0027e45:	c1 e9 1f             	shr    ecx,0x1f
c0027e48:	09 cf                	or     edi,ecx
c0027e4a:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027e4d:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027e50:	89 da                	mov    edx,ebx
c0027e52:	89 f3                	mov    ebx,esi
c0027e54:	8d 34 36             	lea    esi,[esi+esi*1]
c0027e57:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027e5a:	c1 e9 1f             	shr    ecx,0x1f
c0027e5d:	09 ce                	or     esi,ecx
c0027e5f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027e62:	01 c9                	add    ecx,ecx
c0027e64:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0027e67:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027e6a:	85 db                	test   ebx,ebx
c0027e6c:	78 29                	js     c0027e97 <__divdf3+0x24b>
c0027e6e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027e71:	72 07                	jb     c0027e7a <__divdf3+0x22e>
c0027e73:	75 3c                	jne    c0027eb1 <__divdf3+0x265>
c0027e75:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027e78:	77 37                	ja     c0027eb1 <__divdf3+0x265>
c0027e7a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027e7d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027e80:	31 d2                	xor    edx,edx
c0027e82:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0027e85:	0f 97 c2             	seta   dl
c0027e88:	29 d6                	sub    esi,edx
c0027e8a:	89 d9                	mov    ecx,ebx
c0027e8c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027e8f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027e92:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0027e95:	eb 17                	jmp    c0027eae <__divdf3+0x262>
c0027e97:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027e9a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027e9d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027ea0:	0f 97 c1             	seta   cl
c0027ea3:	0f b6 c9             	movzx  ecx,cl
c0027ea6:	29 ce                	sub    esi,ecx
c0027ea8:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027eab:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027eae:	83 ca 01             	or     edx,0x1
c0027eb1:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0027eb4:	75 8b                	jne    c0027e41 <__divdf3+0x1f5>
c0027eb6:	c1 e7 09             	shl    edi,0x9
c0027eb9:	89 d1                	mov    ecx,edx
c0027ebb:	c1 e9 17             	shr    ecx,0x17
c0027ebe:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027ec1:	09 f3                	or     ebx,esi
c0027ec3:	0f 95 c3             	setne  bl
c0027ec6:	0f b6 db             	movzx  ebx,bl
c0027ec9:	c1 e2 09             	shl    edx,0x9
c0027ecc:	09 d3                	or     ebx,edx
c0027ece:	89 ca                	mov    edx,ecx
c0027ed0:	09 fa                	or     edx,edi
c0027ed2:	78 0c                	js     c0027ee0 <__divdf3+0x294>
c0027ed4:	01 d2                	add    edx,edx
c0027ed6:	89 d9                	mov    ecx,ebx
c0027ed8:	c1 e9 1f             	shr    ecx,0x1f
c0027edb:	09 ca                	or     edx,ecx
c0027edd:	01 db                	add    ebx,ebx
c0027edf:	48                   	dec    eax
c0027ee0:	3d fe 07 00 00       	cmp    eax,0x7fe
c0027ee5:	0f 8f 83 00 00 00    	jg     c0027f6e <__divdf3+0x322>
c0027eeb:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027ef1:	85 c0                	test   eax,eax
c0027ef3:	0f 8f 82 00 00 00    	jg     c0027f7b <__divdf3+0x32f>
c0027ef9:	83 f8 cc             	cmp    eax,0xffffffcc
c0027efc:	7c 77                	jl     c0027f75 <__divdf3+0x329>
c0027efe:	be 01 00 00 00       	mov    esi,0x1
c0027f03:	29 c6                	sub    esi,eax
c0027f05:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027f0b:	83 fe 1f             	cmp    esi,0x1f
c0027f0e:	7e 2f                	jle    c0027f3f <__divdf3+0x2f3>
c0027f10:	83 fe 20             	cmp    esi,0x20
c0027f13:	75 0a                	jne    c0027f1f <__divdf3+0x2d3>
c0027f15:	85 db                	test   ebx,ebx
c0027f17:	0f 95 c3             	setne  bl
c0027f1a:	0f b6 db             	movzx  ebx,bl
c0027f1d:	eb 1a                	jmp    c0027f39 <__divdf3+0x2ed>
c0027f1f:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0027f22:	89 d7                	mov    edi,edx
c0027f24:	d3 e7                	shl    edi,cl
c0027f26:	89 f9                	mov    ecx,edi
c0027f28:	09 d9                	or     ecx,ebx
c0027f2a:	0f 95 c3             	setne  bl
c0027f2d:	0f b6 db             	movzx  ebx,bl
c0027f30:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027f35:	29 c1                	sub    ecx,eax
c0027f37:	d3 ea                	shr    edx,cl
c0027f39:	09 d3                	or     ebx,edx
c0027f3b:	31 c0                	xor    eax,eax
c0027f3d:	eb 3a                	jmp    c0027f79 <__divdf3+0x32d>
c0027f3f:	83 c0 1f             	add    eax,0x1f
c0027f42:	89 d7                	mov    edi,edx
c0027f44:	88 c1                	mov    cl,al
c0027f46:	d3 e7                	shl    edi,cl
c0027f48:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027f4b:	89 df                	mov    edi,ebx
c0027f4d:	89 f1                	mov    ecx,esi
c0027f4f:	d3 ef                	shr    edi,cl
c0027f51:	89 f9                	mov    ecx,edi
c0027f53:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027f56:	09 cf                	or     edi,ecx
c0027f58:	88 c1                	mov    cl,al
c0027f5a:	d3 e3                	shl    ebx,cl
c0027f5c:	85 db                	test   ebx,ebx
c0027f5e:	0f 95 c3             	setne  bl
c0027f61:	0f b6 db             	movzx  ebx,bl
c0027f64:	09 fb                	or     ebx,edi
c0027f66:	89 f1                	mov    ecx,esi
c0027f68:	d3 ea                	shr    edx,cl
c0027f6a:	31 c0                	xor    eax,eax
c0027f6c:	eb 0d                	jmp    c0027f7b <__divdf3+0x32f>
c0027f6e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0027f73:	eb 02                	jmp    c0027f77 <__divdf3+0x32b>
c0027f75:	31 c0                	xor    eax,eax
c0027f77:	31 db                	xor    ebx,ebx
c0027f79:	31 d2                	xor    edx,edx
c0027f7b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0027f7e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0027f81:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0027f87:	09 c8                	or     eax,ecx
c0027f89:	c1 e0 14             	shl    eax,0x14
c0027f8c:	89 d1                	mov    ecx,edx
c0027f8e:	c1 e9 0b             	shr    ecx,0xb
c0027f91:	09 c8                	or     eax,ecx
c0027f93:	89 c6                	mov    esi,eax
c0027f95:	89 d9                	mov    ecx,ebx
c0027f97:	c1 e9 0b             	shr    ecx,0xb
c0027f9a:	c1 e2 15             	shl    edx,0x15
c0027f9d:	09 ca                	or     edx,ecx
c0027f9f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0027fa5:	0f 95 c0             	setne  al
c0027fa8:	09 c1                	or     ecx,eax
c0027faa:	83 e1 01             	and    ecx,0x1
c0027fad:	c1 eb 0a             	shr    ebx,0xa
c0027fb0:	21 cb                	and    ebx,ecx
c0027fb2:	01 d3                	add    ebx,edx
c0027fb4:	89 d8                	mov    eax,ebx
c0027fb6:	83 d6 00             	adc    esi,0x0
c0027fb9:	89 f2                	mov    edx,esi
c0027fbb:	89 c7                	mov    edi,eax
c0027fbd:	89 d1                	mov    ecx,edx
c0027fbf:	89 f8                	mov    eax,edi
c0027fc1:	89 ca                	mov    edx,ecx
c0027fc3:	83 c4 2c             	add    esp,0x2c
c0027fc6:	5b                   	pop    ebx
c0027fc7:	5e                   	pop    esi
c0027fc8:	5f                   	pop    edi
c0027fc9:	5d                   	pop    ebp
c0027fca:	c3                   	ret    

c0027fcb <__floatsidf>:
c0027fcb:	55                   	push   ebp
c0027fcc:	89 e5                	mov    ebp,esp
c0027fce:	56                   	push   esi
c0027fcf:	53                   	push   ebx
c0027fd0:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027fd3:	85 db                	test   ebx,ebx
c0027fd5:	7e 15                	jle    c0027fec <__floatsidf+0x21>
c0027fd7:	0f bd cb             	bsr    ecx,ebx
c0027fda:	83 f1 1f             	xor    ecx,0x1f
c0027fdd:	d3 e3                	shl    ebx,cl
c0027fdf:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027fe5:	b8 1e 04 00 00       	mov    eax,0x41e
c0027fea:	eb 21                	jmp    c002800d <__floatsidf+0x42>
c0027fec:	b8 00 00 00 00       	mov    eax,0x0
c0027ff1:	ba 00 00 00 00       	mov    edx,0x0
c0027ff6:	74 2a                	je     c0028022 <__floatsidf+0x57>
c0027ff8:	f7 db                	neg    ebx
c0027ffa:	0f bd cb             	bsr    ecx,ebx
c0027ffd:	83 f1 1f             	xor    ecx,0x1f
c0028000:	d3 e3                	shl    ebx,cl
c0028002:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028008:	b8 1e 0c 00 00       	mov    eax,0xc1e
c002800d:	29 c8                	sub    eax,ecx
c002800f:	c1 e0 14             	shl    eax,0x14
c0028012:	89 c1                	mov    ecx,eax
c0028014:	89 de                	mov    esi,ebx
c0028016:	c1 ee 0b             	shr    esi,0xb
c0028019:	09 f1                	or     ecx,esi
c002801b:	89 ca                	mov    edx,ecx
c002801d:	c1 e3 15             	shl    ebx,0x15
c0028020:	89 d8                	mov    eax,ebx
c0028022:	5b                   	pop    ebx
c0028023:	5e                   	pop    esi
c0028024:	5d                   	pop    ebp
c0028025:	c3                   	ret    

c0028026 <__floatunsidf>:
c0028026:	55                   	push   ebp
c0028027:	89 e5                	mov    ebp,esp
c0028029:	56                   	push   esi
c002802a:	53                   	push   ebx
c002802b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002802e:	85 db                	test   ebx,ebx
c0028030:	74 2a                	je     c002805c <__floatunsidf+0x36>
c0028032:	0f bd cb             	bsr    ecx,ebx
c0028035:	83 f1 1f             	xor    ecx,0x1f
c0028038:	d3 e3                	shl    ebx,cl
c002803a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028040:	b8 1e 04 00 00       	mov    eax,0x41e
c0028045:	29 c8                	sub    eax,ecx
c0028047:	c1 e0 14             	shl    eax,0x14
c002804a:	89 c1                	mov    ecx,eax
c002804c:	89 de                	mov    esi,ebx
c002804e:	c1 ee 0b             	shr    esi,0xb
c0028051:	09 f1                	or     ecx,esi
c0028053:	89 ca                	mov    edx,ecx
c0028055:	c1 e3 15             	shl    ebx,0x15
c0028058:	89 d8                	mov    eax,ebx
c002805a:	eb 04                	jmp    c0028060 <__floatunsidf+0x3a>
c002805c:	31 c0                	xor    eax,eax
c002805e:	31 d2                	xor    edx,edx
c0028060:	5b                   	pop    ebx
c0028061:	5e                   	pop    esi
c0028062:	5d                   	pop    ebp
c0028063:	c3                   	ret    

c0028064 <__fixdfsi>:
c0028064:	55                   	push   ebp
c0028065:	89 e5                	mov    ebp,esp
c0028067:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002806a:	89 d1                	mov    ecx,edx
c002806c:	c1 e1 0b             	shl    ecx,0xb
c002806f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028075:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028078:	c1 e8 15             	shr    eax,0x15
c002807b:	09 c1                	or     ecx,eax
c002807d:	c1 fa 14             	sar    edx,0x14
c0028080:	78 1f                	js     c00280a1 <__fixdfsi+0x3d>
c0028082:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028088:	31 c0                	xor    eax,eax
c002808a:	83 fa 1e             	cmp    edx,0x1e
c002808d:	77 40                	ja     c00280cf <__fixdfsi+0x6b>
c002808f:	89 c8                	mov    eax,ecx
c0028091:	0d 00 00 00 80       	or     eax,0x80000000
c0028096:	b9 1f 00 00 00       	mov    ecx,0x1f
c002809b:	29 d1                	sub    ecx,edx
c002809d:	d3 e8                	shr    eax,cl
c002809f:	eb 2e                	jmp    c00280cf <__fixdfsi+0x6b>
c00280a1:	31 c0                	xor    eax,eax
c00280a3:	81 c2 01 04 00 00    	add    edx,0x401
c00280a9:	78 24                	js     c00280cf <__fixdfsi+0x6b>
c00280ab:	83 fa 1e             	cmp    edx,0x1e
c00280ae:	7e 09                	jle    c00280b9 <__fixdfsi+0x55>
c00280b0:	83 fa 1f             	cmp    edx,0x1f
c00280b3:	75 18                	jne    c00280cd <__fixdfsi+0x69>
c00280b5:	85 c9                	test   ecx,ecx
c00280b7:	75 14                	jne    c00280cd <__fixdfsi+0x69>
c00280b9:	89 c8                	mov    eax,ecx
c00280bb:	0d 00 00 00 80       	or     eax,0x80000000
c00280c0:	b9 1f 00 00 00       	mov    ecx,0x1f
c00280c5:	29 d1                	sub    ecx,edx
c00280c7:	d3 e8                	shr    eax,cl
c00280c9:	f7 d8                	neg    eax
c00280cb:	eb 02                	jmp    c00280cf <__fixdfsi+0x6b>
c00280cd:	31 c0                	xor    eax,eax
c00280cf:	5d                   	pop    ebp
c00280d0:	c3                   	ret    

c00280d1 <__fixunsdfsi>:
c00280d1:	55                   	push   ebp
c00280d2:	89 e5                	mov    ebp,esp
c00280d4:	53                   	push   ebx
c00280d5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00280d8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00280db:	89 d3                	mov    ebx,edx
c00280dd:	c1 fb 14             	sar    ebx,0x14
c00280e0:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c00280e6:	31 c0                	xor    eax,eax
c00280e8:	83 fb 1f             	cmp    ebx,0x1f
c00280eb:	77 1d                	ja     c002810a <__fixunsdfsi+0x39>
c00280ed:	89 d0                	mov    eax,edx
c00280ef:	c1 e0 0b             	shl    eax,0xb
c00280f2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00280f7:	c1 e9 15             	shr    ecx,0x15
c00280fa:	09 c8                	or     eax,ecx
c00280fc:	0d 00 00 00 80       	or     eax,0x80000000
c0028101:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028106:	29 d9                	sub    ecx,ebx
c0028108:	d3 e8                	shr    eax,cl
c002810a:	5b                   	pop    ebx
c002810b:	5d                   	pop    ebp
c002810c:	c3                   	ret    

c002810d <__cmpdf2>:
c002810d:	55                   	push   ebp
c002810e:	89 e5                	mov    ebp,esp
c0028110:	57                   	push   edi
c0028111:	56                   	push   esi
c0028112:	53                   	push   ebx
c0028113:	83 ec 0c             	sub    esp,0xc
c0028116:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028119:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002811c:	89 ca                	mov    edx,ecx
c002811e:	c1 ea 14             	shr    edx,0x14
c0028121:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028127:	89 cb                	mov    ebx,ecx
c0028129:	c1 fb 1f             	sar    ebx,0x1f
c002812c:	31 da                	xor    edx,ebx
c002812e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028131:	89 df                	mov    edi,ebx
c0028133:	c1 e7 0b             	shl    edi,0xb
c0028136:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028139:	c1 e1 0b             	shl    ecx,0xb
c002813c:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028142:	c1 eb 15             	shr    ebx,0x15
c0028145:	09 d9                	or     ecx,ebx
c0028147:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c002814a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002814d:	89 ce                	mov    esi,ecx
c002814f:	c1 ee 14             	shr    esi,0x14
c0028152:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028158:	89 cb                	mov    ebx,ecx
c002815a:	c1 fb 1f             	sar    ebx,0x1f
c002815d:	31 de                	xor    esi,ebx
c002815f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028162:	89 df                	mov    edi,ebx
c0028164:	c1 e7 0b             	shl    edi,0xb
c0028167:	c1 e1 0b             	shl    ecx,0xb
c002816a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028170:	c1 eb 15             	shr    ebx,0x15
c0028173:	09 d9                	or     ecx,ebx
c0028175:	89 d3                	mov    ebx,edx
c0028177:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002817d:	43                   	inc    ebx
c002817e:	83 fb 01             	cmp    ebx,0x1
c0028181:	77 08                	ja     c002818b <__cmpdf2+0x7e>
c0028183:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028186:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028189:	75 68                	jne    c00281f3 <__cmpdf2+0xe6>
c002818b:	89 f3                	mov    ebx,esi
c002818d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028193:	43                   	inc    ebx
c0028194:	83 fb 01             	cmp    ebx,0x1
c0028197:	77 06                	ja     c002819f <__cmpdf2+0x92>
c0028199:	89 fb                	mov    ebx,edi
c002819b:	09 cb                	or     ebx,ecx
c002819d:	75 54                	jne    c00281f3 <__cmpdf2+0xe6>
c002819f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00281a2:	09 f8                	or     eax,edi
c00281a4:	09 c8                	or     eax,ecx
c00281a6:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c00281a9:	75 12                	jne    c00281bd <__cmpdf2+0xb0>
c00281ab:	8d 42 01             	lea    eax,[edx+0x1]
c00281ae:	83 f8 01             	cmp    eax,0x1
c00281b1:	77 0a                	ja     c00281bd <__cmpdf2+0xb0>
c00281b3:	8d 5e 01             	lea    ebx,[esi+0x1]
c00281b6:	31 c0                	xor    eax,eax
c00281b8:	83 fb 01             	cmp    ebx,0x1
c00281bb:	76 36                	jbe    c00281f3 <__cmpdf2+0xe6>
c00281bd:	b8 01 00 00 00       	mov    eax,0x1
c00281c2:	39 f2                	cmp    edx,esi
c00281c4:	7f 2d                	jg     c00281f3 <__cmpdf2+0xe6>
c00281c6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00281cb:	7c 26                	jl     c00281f3 <__cmpdf2+0xe6>
c00281cd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00281d0:	77 07                	ja     c00281d9 <__cmpdf2+0xcc>
c00281d2:	72 16                	jb     c00281ea <__cmpdf2+0xdd>
c00281d4:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c00281d7:	76 0a                	jbe    c00281e3 <__cmpdf2+0xd6>
c00281d9:	89 d0                	mov    eax,edx
c00281db:	c1 f8 1f             	sar    eax,0x1f
c00281de:	83 c8 01             	or     eax,0x1
c00281e1:	eb 10                	jmp    c00281f3 <__cmpdf2+0xe6>
c00281e3:	b8 00 00 00 00       	mov    eax,0x0
c00281e8:	73 09                	jae    c00281f3 <__cmpdf2+0xe6>
c00281ea:	89 d0                	mov    eax,edx
c00281ec:	c1 f8 1f             	sar    eax,0x1f
c00281ef:	83 e0 02             	and    eax,0x2
c00281f2:	48                   	dec    eax
c00281f3:	83 c4 0c             	add    esp,0xc
c00281f6:	5b                   	pop    ebx
c00281f7:	5e                   	pop    esi
c00281f8:	5f                   	pop    edi
c00281f9:	5d                   	pop    ebp
c00281fa:	c3                   	ret    

c00281fb <__eqdf2>:
c00281fb:	55                   	push   ebp
c00281fc:	89 e5                	mov    ebp,esp
c00281fe:	50                   	push   eax
c00281ff:	6a 01                	push   0x1
c0028201:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028204:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028207:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002820a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002820d:	e8 fb fe ff ff       	call   c002810d <__cmpdf2>
c0028212:	83 c4 18             	add    esp,0x18
c0028215:	c9                   	leave  
c0028216:	c3                   	ret    

c0028217 <__nedf2>:
c0028217:	eb e2                	jmp    c00281fb <__eqdf2>

c0028219 <__gtdf2>:
c0028219:	55                   	push   ebp
c002821a:	89 e5                	mov    ebp,esp
c002821c:	50                   	push   eax
c002821d:	6a ff                	push   0xffffffff
c002821f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028222:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028225:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028228:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002822b:	e8 dd fe ff ff       	call   c002810d <__cmpdf2>
c0028230:	83 c4 18             	add    esp,0x18
c0028233:	c9                   	leave  
c0028234:	c3                   	ret    

c0028235 <__gedf2>:
c0028235:	eb e2                	jmp    c0028219 <__gtdf2>

c0028237 <__ltdf2>:
c0028237:	eb c2                	jmp    c00281fb <__eqdf2>

c0028239 <__ledf2>:
c0028239:	eb c0                	jmp    c00281fb <__eqdf2>

c002823b <__truncdfsf2>:
c002823b:	55                   	push   ebp
c002823c:	89 e5                	mov    ebp,esp
c002823e:	57                   	push   edi
c002823f:	56                   	push   esi
c0028240:	53                   	push   ebx
c0028241:	83 ec 0c             	sub    esp,0xc
c0028244:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028247:	89 d1                	mov    ecx,edx
c0028249:	c1 f9 14             	sar    ecx,0x14
c002824c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002824f:	89 df                	mov    edi,ebx
c0028251:	c1 e7 0b             	shl    edi,0xb
c0028254:	89 d0                	mov    eax,edx
c0028256:	c1 e0 0b             	shl    eax,0xb
c0028259:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002825e:	c1 eb 15             	shr    ebx,0x15
c0028261:	09 d8                	or     eax,ebx
c0028263:	89 cb                	mov    ebx,ecx
c0028265:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002826b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028271:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028277:	0f 86 9e 00 00 00    	jbe    c002831b <__truncdfsf2+0xe0>
c002827d:	85 db                	test   ebx,ebx
c002827f:	75 0a                	jne    c002828b <__truncdfsf2+0x50>
c0028281:	c1 fa 17             	sar    edx,0x17
c0028284:	30 d2                	xor    dl,dl
c0028286:	e9 84 00 00 00       	jmp    c002830f <__truncdfsf2+0xd4>
c002828b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028291:	83 fe 83             	cmp    esi,0xffffff83
c0028294:	7d 4b                	jge    c00282e1 <__truncdfsf2+0xa6>
c0028296:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c002829b:	29 f1                	sub    ecx,esi
c002829d:	83 f9 1f             	cmp    ecx,0x1f
c00282a0:	7f 6b                	jg     c002830d <__truncdfsf2+0xd2>
c00282a2:	0d 00 00 00 80       	or     eax,0x80000000
c00282a7:	89 c3                	mov    ebx,eax
c00282a9:	d3 eb                	shr    ebx,cl
c00282ab:	be 01 00 00 00       	mov    esi,0x1
c00282b0:	d3 e6                	shl    esi,cl
c00282b2:	4e                   	dec    esi
c00282b3:	21 f0                	and    eax,esi
c00282b5:	09 f8                	or     eax,edi
c00282b7:	0f 95 c0             	setne  al
c00282ba:	0f b6 c0             	movzx  eax,al
c00282bd:	09 c3                	or     ebx,eax
c00282bf:	89 d9                	mov    ecx,ebx
c00282c1:	c1 e9 08             	shr    ecx,0x8
c00282c4:	f6 c3 7f             	test   bl,0x7f
c00282c7:	0f 95 c0             	setne  al
c00282ca:	09 c8                	or     eax,ecx
c00282cc:	83 e0 01             	and    eax,0x1
c00282cf:	c1 eb 07             	shr    ebx,0x7
c00282d2:	21 c3                	and    ebx,eax
c00282d4:	81 e2 00 00 00 80    	and    edx,0x80000000
c00282da:	09 d1                	or     ecx,edx
c00282dc:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00282df:	eb 76                	jmp    c0028357 <__truncdfsf2+0x11c>
c00282e1:	83 c6 80             	add    esi,0xffffff80
c00282e4:	7e 1d                	jle    c0028303 <__truncdfsf2+0xc8>
c00282e6:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00282ec:	75 0b                	jne    c00282f9 <__truncdfsf2+0xbe>
c00282ee:	09 f8                	or     eax,edi
c00282f0:	74 09                	je     c00282fb <__truncdfsf2+0xc0>
c00282f2:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00282f7:	eb 02                	jmp    c00282fb <__truncdfsf2+0xc0>
c00282f9:	31 c0                	xor    eax,eax
c00282fb:	c1 fa 17             	sar    edx,0x17
c00282fe:	80 ca ff             	or     dl,0xff
c0028301:	eb 0e                	jmp    c0028311 <__truncdfsf2+0xd6>
c0028303:	c1 fa 1f             	sar    edx,0x1f
c0028306:	c1 e2 08             	shl    edx,0x8
c0028309:	09 ca                	or     edx,ecx
c002830b:	eb 04                	jmp    c0028311 <__truncdfsf2+0xd6>
c002830d:	31 d2                	xor    edx,edx
c002830f:	31 c0                	xor    eax,eax
c0028311:	c1 e2 17             	shl    edx,0x17
c0028314:	c1 e8 08             	shr    eax,0x8
c0028317:	09 d0                	or     eax,edx
c0028319:	eb 3c                	jmp    c0028357 <__truncdfsf2+0x11c>
c002831b:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028321:	89 ca                	mov    edx,ecx
c0028323:	c1 fa 0b             	sar    edx,0xb
c0028326:	c1 e2 08             	shl    edx,0x8
c0028329:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002832c:	31 db                	xor    ebx,ebx
c002832e:	85 ff                	test   edi,edi
c0028330:	0f 95 c3             	setne  bl
c0028333:	09 d8                	or     eax,ebx
c0028335:	89 c3                	mov    ebx,eax
c0028337:	c1 eb 08             	shr    ebx,0x8
c002833a:	a8 7f                	test   al,0x7f
c002833c:	0f 95 c2             	setne  dl
c002833f:	89 d6                	mov    esi,edx
c0028341:	09 de                	or     esi,ebx
c0028343:	83 e6 01             	and    esi,0x1
c0028346:	c1 e8 07             	shr    eax,0x7
c0028349:	21 f0                	and    eax,esi
c002834b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002834e:	09 ca                	or     edx,ecx
c0028350:	c1 e2 17             	shl    edx,0x17
c0028353:	09 da                	or     edx,ebx
c0028355:	01 d0                	add    eax,edx
c0028357:	83 c4 0c             	add    esp,0xc
c002835a:	5b                   	pop    ebx
c002835b:	5e                   	pop    esi
c002835c:	5f                   	pop    edi
c002835d:	5d                   	pop    ebp
c002835e:	c3                   	ret    

c002835f <__extendsfdf2>:
c002835f:	55                   	push   ebp
c0028360:	89 e5                	mov    ebp,esp
c0028362:	57                   	push   edi
c0028363:	56                   	push   esi
c0028364:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028367:	89 d1                	mov    ecx,edx
c0028369:	c1 f9 17             	sar    ecx,0x17
c002836c:	c1 e2 08             	shl    edx,0x8
c002836f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028375:	89 c8                	mov    eax,ecx
c0028377:	80 e4 f8             	and    ah,0xf8
c002837a:	8d 71 01             	lea    esi,[ecx+0x1]
c002837d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028383:	75 27                	jne    c00283ac <__extendsfdf2+0x4d>
c0028385:	81 e1 ff 00 00 00    	and    ecx,0xff
c002838b:	75 18                	jne    c00283a5 <__extendsfdf2+0x46>
c002838d:	85 d2                	test   edx,edx
c002838f:	74 20                	je     c00283b1 <__extendsfdf2+0x52>
c0028391:	41                   	inc    ecx
c0028392:	01 d2                	add    edx,edx
c0028394:	79 fb                	jns    c0028391 <__extendsfdf2+0x32>
c0028396:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002839c:	29 c8                	sub    eax,ecx
c002839e:	05 81 03 00 00       	add    eax,0x381
c00283a3:	eb 0c                	jmp    c00283b1 <__extendsfdf2+0x52>
c00283a5:	05 00 07 00 00       	add    eax,0x700
c00283aa:	eb 05                	jmp    c00283b1 <__extendsfdf2+0x52>
c00283ac:	05 80 03 00 00       	add    eax,0x380
c00283b1:	c1 e0 14             	shl    eax,0x14
c00283b4:	89 c1                	mov    ecx,eax
c00283b6:	89 d0                	mov    eax,edx
c00283b8:	c1 e8 0b             	shr    eax,0xb
c00283bb:	09 c1                	or     ecx,eax
c00283bd:	c1 e2 15             	shl    edx,0x15
c00283c0:	89 d0                	mov    eax,edx
c00283c2:	89 ca                	mov    edx,ecx
c00283c4:	5e                   	pop    esi
c00283c5:	5f                   	pop    edi
c00283c6:	5d                   	pop    ebp
c00283c7:	c3                   	ret    
c00283c8:	66 90                	xchg   ax,ax
c00283ca:	66 90                	xchg   ax,ax
c00283cc:	66 90                	xchg   ax,ax
c00283ce:	66 90                	xchg   ax,ax

c00283d0 <fabs>:
c00283d0:	83 ec 0c             	sub    esp,0xc
c00283d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00283da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00283de:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00283e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00283e7:	dd 04 24             	fld    QWORD PTR [esp]
c00283ea:	83 c4 0c             	add    esp,0xc
c00283ed:	c3                   	ret    
c00283ee:	66 90                	xchg   ax,ax

c00283f0 <lrint>:
c00283f0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00283f4:	83 ec 04             	sub    esp,0x4
c00283f7:	db 1c 24             	fistp  DWORD PTR [esp]
c00283fa:	58                   	pop    eax
c00283fb:	c3                   	ret    

c00283fc <lrintf>:
c00283fc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028400:	83 ec 04             	sub    esp,0x4
c0028403:	db 1c 24             	fistp  DWORD PTR [esp]
c0028406:	58                   	pop    eax
c0028407:	c3                   	ret    

Disassembly of section .init:

c0028408 <_init>:
c0028408:	55                   	push   ebp
c0028409:	89 e5                	mov    ebp,esp
c002840b:	e8 08 7d fd ff       	call   c0000118 <frame_dummy>
c0028410:	e8 5b e0 ff ff       	call   c0026470 <__do_global_ctors_aux>
c0028415:	5d                   	pop    ebp
c0028416:	c3                   	ret    

Disassembly of section .fini:

c0028417 <_fini>:
c0028417:	55                   	push   ebp
c0028418:	89 e5                	mov    ebp,esp
c002841a:	e8 89 7c fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002841f:	5d                   	pop    ebp
c0028420:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028422 <Computer::~Computer()>:
c0028422:	83 ec 0c             	sub    esp,0xc
c0028425:	ba 9c 9f 02 c0       	mov    edx,0xc0029f9c
c002842a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002842e:	89 10                	mov    DWORD PTR [eax],edx
c0028430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028434:	83 ec 0c             	sub    esp,0xc
c0028437:	50                   	push   eax
c0028438:	e8 ed b5 fe ff       	call   c0013a2a <Device::~Device()>
c002843d:	83 c4 10             	add    esp,0x10
c0028440:	90                   	nop
c0028441:	83 c4 0c             	add    esp,0xc
c0028444:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028446 <Computer::~Computer()>:
c0028446:	83 ec 0c             	sub    esp,0xc
c0028449:	83 ec 0c             	sub    esp,0xc
c002844c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028450:	e8 cd ff ff ff       	call   c0028422 <Computer::~Computer()>
c0028455:	83 c4 10             	add    esp,0x10
c0028458:	83 ec 08             	sub    esp,0x8
c002845b:	68 ec 01 00 00       	push   0x1ec
c0028460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028464:	e8 e2 a1 fe ff       	call   c001264b <operator delete(void*, unsigned long)>
c0028469:	83 c4 10             	add    esp,0x10
c002846c:	83 c4 0c             	add    esp,0xc
c002846f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028470 <idleCommon()>:
c0028470:	83 ec 0c             	sub    esp,0xc
c0028473:	fa                   	cli    
c0028474:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c002847a:	e8 a0 55 ff ff       	call   c001da1f <schedule()>
c002847f:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c0028484:	48                   	dec    eax
c0028485:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c002848a:	75 01                	jne    c002848d <idleCommon()+0x1d>
c002848c:	fb                   	sti    
c002848d:	83 c4 0c             	add    esp,0xc
c0028490:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028492 <LinkedList<UnixFile>::~LinkedList()>:
c0028492:	90                   	nop
c0028493:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028494 <LinkedList<UnixFile>::LinkedList()>:
c0028494:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028498:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002849e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00284a2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00284a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00284ad:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00284b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00284b8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00284be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00284c2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00284c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00284cd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00284d4:	90                   	nop
c00284d5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00284d6 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00284d6:	83 ec 0c             	sub    esp,0xc
c00284d9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00284de:	75 10                	jne    c00284f0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00284e0:	83 ec 0c             	sub    esp,0xc
c00284e3:	68 54 a2 02 c0       	push   0xc002a254
c00284e8:	e8 a2 19 ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c00284ed:	83 c4 10             	add    esp,0x10
c00284f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00284f6:	85 c0                	test   eax,eax
c00284f8:	74 34                	je     c002852e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00284fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028501:	85 c0                	test   eax,eax
c0028503:	74 29                	je     c002852e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028505:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028509:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002850c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028510:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028517:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002851b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002851e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028522:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028525:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002852c:	eb 65                	jmp    c0028593 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002852e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028532:	8b 00                	mov    eax,DWORD PTR [eax]
c0028534:	85 c0                	test   eax,eax
c0028536:	75 4b                	jne    c0028583 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002853c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002853f:	85 c0                	test   eax,eax
c0028541:	75 40                	jne    c0028583 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028547:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002854b:	89 10                	mov    DWORD PTR [eax],edx
c002854d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028551:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028555:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002855c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002855f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002856a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002856d:	85 c0                	test   eax,eax
c002856f:	74 22                	je     c0028593 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028571:	83 ec 0c             	sub    esp,0xc
c0028574:	68 76 a2 02 c0       	push   0xc002a276
c0028579:	e8 11 19 ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c002857e:	83 c4 10             	add    esp,0x10
c0028581:	eb 10                	jmp    c0028593 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028583:	83 ec 0c             	sub    esp,0xc
c0028586:	68 80 a2 02 c0       	push   0xc002a280
c002858b:	e8 ff 18 ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c0028590:	83 c4 10             	add    esp,0x10
c0028593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028597:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002859a:	8d 50 01             	lea    edx,[eax+0x1]
c002859d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285a1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00285a4:	90                   	nop
c00285a5:	83 c4 0c             	add    esp,0xc
c00285a8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00285aa <LinkedList<UnixFile>::getFirstElement()>:
c00285aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00285ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00285b0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00285b2 <LinkedList<UnixFile>::removeFirst()>:
c00285b2:	83 ec 0c             	sub    esp,0xc
c00285b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00285bb:	85 c0                	test   eax,eax
c00285bd:	75 12                	jne    c00285d1 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00285bf:	83 ec 0c             	sub    esp,0xc
c00285c2:	68 8c a2 02 c0       	push   0xc002a28c
c00285c7:	e8 c3 18 ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c00285cc:	83 c4 10             	add    esp,0x10
c00285cf:	eb 7e                	jmp    c002864f <LinkedList<UnixFile>::removeFirst()+0x9d>
c00285d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285d5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00285d8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285db:	85 c0                	test   eax,eax
c00285dd:	74 10                	je     c00285ef <LinkedList<UnixFile>::removeFirst()+0x3d>
c00285df:	83 ec 0c             	sub    esp,0xc
c00285e2:	68 d7 a2 02 c0       	push   0xc002a2d7
c00285e7:	e8 a3 18 ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c00285ec:	83 c4 10             	add    esp,0x10
c00285ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00285f5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285f8:	85 c0                	test   eax,eax
c00285fa:	75 33                	jne    c002862f <LinkedList<UnixFile>::removeFirst()+0x7d>
c00285fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028600:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002860a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028611:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028615:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028618:	83 f8 01             	cmp    eax,0x1
c002861b:	74 21                	je     c002863e <LinkedList<UnixFile>::removeFirst()+0x8c>
c002861d:	83 ec 0c             	sub    esp,0xc
c0028620:	68 b0 a2 02 c0       	push   0xc002a2b0
c0028625:	e8 65 18 ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c002862a:	83 c4 10             	add    esp,0x10
c002862d:	eb 0f                	jmp    c002863e <LinkedList<UnixFile>::removeFirst()+0x8c>
c002862f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028633:	8b 00                	mov    eax,DWORD PTR [eax]
c0028635:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002863c:	89 10                	mov    DWORD PTR [eax],edx
c002863e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028642:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028645:	8d 50 ff             	lea    edx,[eax-0x1]
c0028648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002864c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002864f:	83 c4 0c             	add    esp,0xc
c0028652:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0028654 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0028654:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028658:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002865b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002865c <DriverlessDevice::~DriverlessDevice()>:
c002865c:	ba 3c ab 02 c0       	mov    edx,0xc002ab3c
c0028661:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028665:	89 10                	mov    DWORD PTR [eax],edx
c0028667:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002866b:	50                   	push   eax
c002866c:	e8 b9 b3 fe ff       	call   c0013a2a <Device::~Device()>
c0028671:	83 c4 04             	add    esp,0x4
c0028674:	90                   	nop
c0028675:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028676 <DriverlessDevice::~DriverlessDevice()>:
c0028676:	83 ec 0c             	sub    esp,0xc
c0028679:	83 ec 0c             	sub    esp,0xc
c002867c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028680:	e8 d7 ff ff ff       	call   c002865c <DriverlessDevice::~DriverlessDevice()>
c0028685:	83 c4 10             	add    esp,0x10
c0028688:	83 ec 08             	sub    esp,0x8
c002868b:	68 58 01 00 00       	push   0x158
c0028690:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028694:	e8 b2 9f fe ff       	call   c001264b <operator delete(void*, unsigned long)>
c0028699:	83 c4 10             	add    esp,0x10
c002869c:	83 c4 0c             	add    esp,0xc
c002869f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00286a0 <LinkedList<Device>::addElement(Device*)>:
c00286a0:	83 ec 0c             	sub    esp,0xc
c00286a3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00286a8:	75 10                	jne    c00286ba <LinkedList<Device>::addElement(Device*)+0x1a>
c00286aa:	83 ec 0c             	sub    esp,0xc
c00286ad:	68 54 a2 02 c0       	push   0xc002a254
c00286b2:	e8 d8 17 ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c00286b7:	83 c4 10             	add    esp,0x10
c00286ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286be:	8b 00                	mov    eax,DWORD PTR [eax]
c00286c0:	85 c0                	test   eax,eax
c00286c2:	74 3a                	je     c00286fe <LinkedList<Device>::addElement(Device*)+0x5e>
c00286c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286cb:	85 c0                	test   eax,eax
c00286cd:	74 2f                	je     c00286fe <LinkedList<Device>::addElement(Device*)+0x5e>
c00286cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286da:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00286e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286e8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00286eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286f2:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00286fc:	eb 68                	jmp    c0028766 <LinkedList<Device>::addElement(Device*)+0xc6>
c00286fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028702:	8b 00                	mov    eax,DWORD PTR [eax]
c0028704:	85 c0                	test   eax,eax
c0028706:	75 4e                	jne    c0028756 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002870c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002870f:	85 c0                	test   eax,eax
c0028711:	75 43                	jne    c0028756 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028713:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028717:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002871b:	89 10                	mov    DWORD PTR [eax],edx
c002871d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028721:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028725:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002872c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002872f:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028739:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002873d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028740:	85 c0                	test   eax,eax
c0028742:	74 22                	je     c0028766 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028744:	83 ec 0c             	sub    esp,0xc
c0028747:	68 76 a2 02 c0       	push   0xc002a276
c002874c:	e8 3e 17 ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c0028751:	83 c4 10             	add    esp,0x10
c0028754:	eb 10                	jmp    c0028766 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028756:	83 ec 0c             	sub    esp,0xc
c0028759:	68 80 a2 02 c0       	push   0xc002a280
c002875e:	e8 2c 17 ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c0028763:	83 c4 10             	add    esp,0x10
c0028766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002876a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002876d:	8d 50 01             	lea    edx,[eax+0x1]
c0028770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028774:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028777:	90                   	nop
c0028778:	83 c4 0c             	add    esp,0xc
c002877b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002877c <LinkedList<Device>::LinkedList()>:
c002877c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028780:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028786:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002878a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028791:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028795:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002879c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287a0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00287a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287aa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00287b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287b5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287bc:	90                   	nop
c00287bd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00287be <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00287be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00287c4:	85 c0                	test   eax,eax
c00287c6:	75 0e                	jne    c00287d6 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00287c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287cf:	85 c0                	test   eax,eax
c00287d1:	75 03                	jne    c00287d6 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00287d3:	b0 01                	mov    al,0x1
c00287d5:	c3                   	ret    
c00287d6:	b0 00                	mov    al,0x0
c00287d8:	90                   	nop
c00287d9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00287da <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00287da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287de:	8b 00                	mov    eax,DWORD PTR [eax]
c00287e0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00287e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00287e2:	83 ec 0c             	sub    esp,0xc
c00287e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00287eb:	85 c0                	test   eax,eax
c00287ed:	75 15                	jne    c0028804 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00287ef:	83 ec 0c             	sub    esp,0xc
c00287f2:	68 8c a2 02 c0       	push   0xc002a28c
c00287f7:	e8 93 16 ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c00287fc:	83 c4 10             	add    esp,0x10
c00287ff:	e9 88 00 00 00       	jmp    c002888c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028808:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002880b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002880e:	85 c0                	test   eax,eax
c0028810:	0f 95 c0             	setne  al
c0028813:	84 c0                	test   al,al
c0028815:	74 10                	je     c0028827 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028817:	83 ec 0c             	sub    esp,0xc
c002881a:	68 d7 a2 02 c0       	push   0xc002a2d7
c002881f:	e8 6b 16 ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c0028824:	83 c4 10             	add    esp,0x10
c0028827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002882b:	8b 00                	mov    eax,DWORD PTR [eax]
c002882d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028830:	85 c0                	test   eax,eax
c0028832:	0f 94 c0             	sete   al
c0028835:	84 c0                	test   al,al
c0028837:	74 33                	je     c002886c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028839:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002883d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028843:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028847:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002884e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028852:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028855:	83 f8 01             	cmp    eax,0x1
c0028858:	74 21                	je     c002887b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002885a:	83 ec 0c             	sub    esp,0xc
c002885d:	68 b0 a2 02 c0       	push   0xc002a2b0
c0028862:	e8 28 16 ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c0028867:	83 c4 10             	add    esp,0x10
c002886a:	eb 0f                	jmp    c002887b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002886c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028870:	8b 00                	mov    eax,DWORD PTR [eax]
c0028872:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028879:	89 10                	mov    DWORD PTR [eax],edx
c002887b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002887f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028882:	8d 50 ff             	lea    edx,[eax-0x1]
c0028885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028889:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002888c:	83 c4 0c             	add    esp,0xc
c002888f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028890 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028890:	83 ec 0c             	sub    esp,0xc
c0028893:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028898:	75 10                	jne    c00288aa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002889a:	83 ec 0c             	sub    esp,0xc
c002889d:	68 54 a2 02 c0       	push   0xc002a254
c00288a2:	e8 e8 15 ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c00288a7:	83 c4 10             	add    esp,0x10
c00288aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00288b0:	85 c0                	test   eax,eax
c00288b2:	74 34                	je     c00288e8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00288b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288bb:	85 c0                	test   eax,eax
c00288bd:	74 29                	je     c00288e8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00288bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288c3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288ca:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00288cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288d5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00288d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288df:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00288e6:	eb 65                	jmp    c002894d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00288e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00288ee:	85 c0                	test   eax,eax
c00288f0:	75 4b                	jne    c002893d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00288f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288f9:	85 c0                	test   eax,eax
c00288fb:	75 40                	jne    c002893d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00288fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028901:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028905:	89 10                	mov    DWORD PTR [eax],edx
c0028907:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002890b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002890f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028916:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028919:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028924:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028927:	85 c0                	test   eax,eax
c0028929:	74 22                	je     c002894d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002892b:	83 ec 0c             	sub    esp,0xc
c002892e:	68 76 a2 02 c0       	push   0xc002a276
c0028933:	e8 57 15 ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c0028938:	83 c4 10             	add    esp,0x10
c002893b:	eb 10                	jmp    c002894d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002893d:	83 ec 0c             	sub    esp,0xc
c0028940:	68 80 a2 02 c0       	push   0xc002a280
c0028945:	e8 45 15 ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c002894a:	83 c4 10             	add    esp,0x10
c002894d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028951:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028954:	8d 50 01             	lea    edx,[eax+0x1]
c0028957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002895b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002895e:	90                   	nop
c002895f:	83 c4 0c             	add    esp,0xc
c0028962:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028964 <ACPI::~ACPI()>:
c0028964:	83 ec 0c             	sub    esp,0xc
c0028967:	ba a8 b3 02 c0       	mov    edx,0xc002b3a8
c002896c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028970:	89 10                	mov    DWORD PTR [eax],edx
c0028972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028976:	83 ec 0c             	sub    esp,0xc
c0028979:	50                   	push   eax
c002897a:	e8 ab b0 fe ff       	call   c0013a2a <Device::~Device()>
c002897f:	83 c4 10             	add    esp,0x10
c0028982:	90                   	nop
c0028983:	83 c4 0c             	add    esp,0xc
c0028986:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028988 <ACPI::~ACPI()>:
c0028988:	83 ec 0c             	sub    esp,0xc
c002898b:	83 ec 0c             	sub    esp,0xc
c002898e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028992:	e8 cd ff ff ff       	call   c0028964 <ACPI::~ACPI()>
c0028997:	83 c4 10             	add    esp,0x10
c002899a:	83 ec 08             	sub    esp,0x8
c002899d:	68 64 12 00 00       	push   0x1264
c00289a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289a6:	e8 a0 9c fe ff       	call   c001264b <operator delete(void*, unsigned long)>
c00289ab:	83 c4 10             	add    esp,0x10
c00289ae:	83 c4 0c             	add    esp,0xc
c00289b1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c00289b2 <LinkedList<Device>::~LinkedList()>:
c00289b2:	90                   	nop
c00289b3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c00289b4 <LinkedList<Device>::isEmpty()>:
c00289b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00289ba:	85 c0                	test   eax,eax
c00289bc:	75 0e                	jne    c00289cc <LinkedList<Device>::isEmpty()+0x18>
c00289be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289c5:	85 c0                	test   eax,eax
c00289c7:	75 03                	jne    c00289cc <LinkedList<Device>::isEmpty()+0x18>
c00289c9:	b0 01                	mov    al,0x1
c00289cb:	c3                   	ret    
c00289cc:	b0 00                	mov    al,0x0
c00289ce:	90                   	nop
c00289cf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c00289d0 <LinkedList<Device>::getFirstElement()>:
c00289d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00289d6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c00289d8 <LinkedList<Device>::removeFirst()>:
c00289d8:	83 ec 0c             	sub    esp,0xc
c00289db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289df:	8b 00                	mov    eax,DWORD PTR [eax]
c00289e1:	85 c0                	test   eax,eax
c00289e3:	75 15                	jne    c00289fa <LinkedList<Device>::removeFirst()+0x22>
c00289e5:	83 ec 0c             	sub    esp,0xc
c00289e8:	68 8c a2 02 c0       	push   0xc002a28c
c00289ed:	e8 9d 14 ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c00289f2:	83 c4 10             	add    esp,0x10
c00289f5:	e9 87 00 00 00       	jmp    c0028a81 <LinkedList<Device>::removeFirst()+0xa9>
c00289fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a01:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0028a07:	85 c0                	test   eax,eax
c0028a09:	74 10                	je     c0028a1b <LinkedList<Device>::removeFirst()+0x43>
c0028a0b:	83 ec 0c             	sub    esp,0xc
c0028a0e:	68 d7 a2 02 c0       	push   0xc002a2d7
c0028a13:	e8 77 14 ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c0028a18:	83 c4 10             	add    esp,0x10
c0028a1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a21:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0028a27:	85 c0                	test   eax,eax
c0028a29:	75 33                	jne    c0028a5e <LinkedList<Device>::removeFirst()+0x86>
c0028a2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a2f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a39:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a44:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a47:	83 f8 01             	cmp    eax,0x1
c0028a4a:	74 24                	je     c0028a70 <LinkedList<Device>::removeFirst()+0x98>
c0028a4c:	83 ec 0c             	sub    esp,0xc
c0028a4f:	68 b0 a2 02 c0       	push   0xc002a2b0
c0028a54:	e8 36 14 ff ff       	call   c0019e8f <Krnl::panic(char const*)>
c0028a59:	83 c4 10             	add    esp,0x10
c0028a5c:	eb 12                	jmp    c0028a70 <LinkedList<Device>::removeFirst()+0x98>
c0028a5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a62:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a64:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0028a6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a6e:	89 10                	mov    DWORD PTR [eax],edx
c0028a70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a74:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a77:	8d 50 ff             	lea    edx,[eax-0x1]
c0028a7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a7e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a81:	83 c4 0c             	add    esp,0xc
c0028a84:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028a86 <CPU::~CPU()>:
c0028a86:	83 ec 0c             	sub    esp,0xc
c0028a89:	ba f8 b5 02 c0       	mov    edx,0xc002b5f8
c0028a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a92:	89 10                	mov    DWORD PTR [eax],edx
c0028a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a98:	83 ec 0c             	sub    esp,0xc
c0028a9b:	50                   	push   eax
c0028a9c:	e8 89 af fe ff       	call   c0013a2a <Device::~Device()>
c0028aa1:	83 c4 10             	add    esp,0x10
c0028aa4:	90                   	nop
c0028aa5:	83 c4 0c             	add    esp,0xc
c0028aa8:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028aaa <CPU::~CPU()>:
c0028aaa:	83 ec 0c             	sub    esp,0xc
c0028aad:	83 ec 0c             	sub    esp,0xc
c0028ab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ab4:	e8 cd ff ff ff       	call   c0028a86 <CPU::~CPU()>
c0028ab9:	83 c4 10             	add    esp,0x10
c0028abc:	83 ec 08             	sub    esp,0x8
c0028abf:	68 98 11 00 00       	push   0x1198
c0028ac4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ac8:	e8 7e 9b fe ff       	call   c001264b <operator delete(void*, unsigned long)>
c0028acd:	83 c4 10             	add    esp,0x10
c0028ad0:	83 c4 0c             	add    esp,0xc
c0028ad3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028ad4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028ad4:	90                   	nop
c0028ad5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028ad6 <ThreadControlBlock::ThreadControlBlock()>:
c0028ad6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ada:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028ae1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ae5:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028aec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028af0:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028af7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028afb:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028b02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b06:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0028b0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b11:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028b15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b19:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028b1d:	90                   	nop
c0028b1e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028b20 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028b20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b24:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b2e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b39:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b44:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b4e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b55:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b59:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b60:	90                   	nop
c0028b61:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028b62 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028b66:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028b69:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028b6a <Vm::_FPUState::_FPUState()>:
c0028b6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b6e:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028b75:	90                   	nop
c0028b76:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028b78 <PCI::~PCI()>:
c0028b78:	83 ec 0c             	sub    esp,0xc
c0028b7b:	ba 24 c1 02 c0       	mov    edx,0xc002c124
c0028b80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b84:	89 10                	mov    DWORD PTR [eax],edx
c0028b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b8a:	83 ec 0c             	sub    esp,0xc
c0028b8d:	50                   	push   eax
c0028b8e:	e8 67 a8 fe ff       	call   c00133fa <Bus::~Bus()>
c0028b93:	83 c4 10             	add    esp,0x10
c0028b96:	90                   	nop
c0028b97:	83 c4 0c             	add    esp,0xc
c0028b9a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028b9c <PCI::~PCI()>:
c0028b9c:	83 ec 0c             	sub    esp,0xc
c0028b9f:	83 ec 0c             	sub    esp,0xc
c0028ba2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ba6:	e8 cd ff ff ff       	call   c0028b78 <PCI::~PCI()>
c0028bab:	83 c4 10             	add    esp,0x10
c0028bae:	83 ec 08             	sub    esp,0x8
c0028bb1:	68 5c 01 00 00       	push   0x15c
c0028bb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bba:	e8 8c 9a fe ff       	call   c001264b <operator delete(void*, unsigned long)>
c0028bbf:	83 c4 10             	add    esp,0x10
c0028bc2:	83 c4 0c             	add    esp,0xc
c0028bc5:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028bc6 <IDE::~IDE()>:
c0028bc6:	83 ec 0c             	sub    esp,0xc
c0028bc9:	ba d8 c1 02 c0       	mov    edx,0xc002c1d8
c0028bce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd2:	89 10                	mov    DWORD PTR [eax],edx
c0028bd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd8:	83 ec 0c             	sub    esp,0xc
c0028bdb:	50                   	push   eax
c0028bdc:	e8 5f b3 fe ff       	call   c0013f40 <HardDiskController::~HardDiskController()>
c0028be1:	83 c4 10             	add    esp,0x10
c0028be4:	90                   	nop
c0028be5:	83 c4 0c             	add    esp,0xc
c0028be8:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028bea <IDE::~IDE()>:
c0028bea:	83 ec 0c             	sub    esp,0xc
c0028bed:	83 ec 0c             	sub    esp,0xc
c0028bf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bf4:	e8 cd ff ff ff       	call   c0028bc6 <IDE::~IDE()>
c0028bf9:	83 c4 10             	add    esp,0x10
c0028bfc:	83 ec 08             	sub    esp,0x8
c0028bff:	68 70 02 00 00       	push   0x270
c0028c04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c08:	e8 3e 9a fe ff       	call   c001264b <operator delete(void*, unsigned long)>
c0028c0d:	83 c4 10             	add    esp,0x10
c0028c10:	83 c4 0c             	add    esp,0xc
c0028c13:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028c14 <SATABus::~SATABus()>:
c0028c14:	83 ec 0c             	sub    esp,0xc
c0028c17:	ba 50 c2 02 c0       	mov    edx,0xc002c250
c0028c1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c20:	89 10                	mov    DWORD PTR [eax],edx
c0028c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c26:	83 ec 0c             	sub    esp,0xc
c0028c29:	50                   	push   eax
c0028c2a:	e8 11 b3 fe ff       	call   c0013f40 <HardDiskController::~HardDiskController()>
c0028c2f:	83 c4 10             	add    esp,0x10
c0028c32:	90                   	nop
c0028c33:	83 c4 0c             	add    esp,0xc
c0028c36:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028c38 <SATABus::~SATABus()>:
c0028c38:	83 ec 0c             	sub    esp,0xc
c0028c3b:	83 ec 0c             	sub    esp,0xc
c0028c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c42:	e8 cd ff ff ff       	call   c0028c14 <SATABus::~SATABus()>
c0028c47:	83 c4 10             	add    esp,0x10
c0028c4a:	83 ec 08             	sub    esp,0x8
c0028c4d:	68 64 01 00 00       	push   0x164
c0028c52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c56:	e8 f0 99 fe ff       	call   c001264b <operator delete(void*, unsigned long)>
c0028c5b:	83 c4 10             	add    esp,0x10
c0028c5e:	83 c4 0c             	add    esp,0xc
c0028c61:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028c62 <ATA::~ATA()>:
c0028c62:	83 ec 0c             	sub    esp,0xc
c0028c65:	ba 9c c2 02 c0       	mov    edx,0xc002c29c
c0028c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c6e:	89 10                	mov    DWORD PTR [eax],edx
c0028c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c74:	83 ec 0c             	sub    esp,0xc
c0028c77:	50                   	push   eax
c0028c78:	e8 a5 b3 fe ff       	call   c0014022 <PhysicalDisk::~PhysicalDisk()>
c0028c7d:	83 c4 10             	add    esp,0x10
c0028c80:	90                   	nop
c0028c81:	83 c4 0c             	add    esp,0xc
c0028c84:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028c86 <ATA::~ATA()>:
c0028c86:	83 ec 0c             	sub    esp,0xc
c0028c89:	83 ec 0c             	sub    esp,0xc
c0028c8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c90:	e8 cd ff ff ff       	call   c0028c62 <ATA::~ATA()>
c0028c95:	83 c4 10             	add    esp,0x10
c0028c98:	83 ec 08             	sub    esp,0x8
c0028c9b:	68 7c 01 00 00       	push   0x17c
c0028ca0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ca4:	e8 a2 99 fe ff       	call   c001264b <operator delete(void*, unsigned long)>
c0028ca9:	83 c4 10             	add    esp,0x10
c0028cac:	83 c4 0c             	add    esp,0xc
c0028caf:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028cb0 <ATAPI::~ATAPI()>:
c0028cb0:	83 ec 0c             	sub    esp,0xc
c0028cb3:	ba d4 c2 02 c0       	mov    edx,0xc002c2d4
c0028cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cbc:	89 10                	mov    DWORD PTR [eax],edx
c0028cbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cc2:	83 ec 0c             	sub    esp,0xc
c0028cc5:	50                   	push   eax
c0028cc6:	e8 57 b3 fe ff       	call   c0014022 <PhysicalDisk::~PhysicalDisk()>
c0028ccb:	83 c4 10             	add    esp,0x10
c0028cce:	90                   	nop
c0028ccf:	83 c4 0c             	add    esp,0xc
c0028cd2:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028cd4 <ATAPI::~ATAPI()>:
c0028cd4:	83 ec 0c             	sub    esp,0xc
c0028cd7:	83 ec 0c             	sub    esp,0xc
c0028cda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cde:	e8 cd ff ff ff       	call   c0028cb0 <ATAPI::~ATAPI()>
c0028ce3:	83 c4 10             	add    esp,0x10
c0028ce6:	83 ec 08             	sub    esp,0x8
c0028ce9:	68 80 01 00 00       	push   0x180
c0028cee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cf2:	e8 54 99 fe ff       	call   c001264b <operator delete(void*, unsigned long)>
c0028cf7:	83 c4 10             	add    esp,0x10
c0028cfa:	83 c4 0c             	add    esp,0xc
c0028cfd:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028cfe <SATA::~SATA()>:
c0028cfe:	83 ec 0c             	sub    esp,0xc
c0028d01:	ba 88 c3 02 c0       	mov    edx,0xc002c388
c0028d06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d0a:	89 10                	mov    DWORD PTR [eax],edx
c0028d0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d10:	83 ec 0c             	sub    esp,0xc
c0028d13:	50                   	push   eax
c0028d14:	e8 09 b3 fe ff       	call   c0014022 <PhysicalDisk::~PhysicalDisk()>
c0028d19:	83 c4 10             	add    esp,0x10
c0028d1c:	90                   	nop
c0028d1d:	83 c4 0c             	add    esp,0xc
c0028d20:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028d22 <SATA::~SATA()>:
c0028d22:	83 ec 0c             	sub    esp,0xc
c0028d25:	83 ec 0c             	sub    esp,0xc
c0028d28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d2c:	e8 cd ff ff ff       	call   c0028cfe <SATA::~SATA()>
c0028d31:	83 c4 10             	add    esp,0x10
c0028d34:	83 ec 08             	sub    esp,0x8
c0028d37:	68 7c 01 00 00       	push   0x17c
c0028d3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d40:	e8 06 99 fe ff       	call   c001264b <operator delete(void*, unsigned long)>
c0028d45:	83 c4 10             	add    esp,0x10
c0028d48:	83 c4 0c             	add    esp,0xc
c0028d4b:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028d4c <SATAPI::~SATAPI()>:
c0028d4c:	83 ec 0c             	sub    esp,0xc
c0028d4f:	ba 64 c4 02 c0       	mov    edx,0xc002c464
c0028d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d58:	89 10                	mov    DWORD PTR [eax],edx
c0028d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d5e:	83 ec 0c             	sub    esp,0xc
c0028d61:	50                   	push   eax
c0028d62:	e8 bb b2 fe ff       	call   c0014022 <PhysicalDisk::~PhysicalDisk()>
c0028d67:	83 c4 10             	add    esp,0x10
c0028d6a:	90                   	nop
c0028d6b:	83 c4 0c             	add    esp,0xc
c0028d6e:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028d70 <SATAPI::~SATAPI()>:
c0028d70:	83 ec 0c             	sub    esp,0xc
c0028d73:	83 ec 0c             	sub    esp,0xc
c0028d76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d7a:	e8 cd ff ff ff       	call   c0028d4c <SATAPI::~SATAPI()>
c0028d7f:	83 c4 10             	add    esp,0x10
c0028d82:	83 ec 08             	sub    esp,0x8
c0028d85:	68 80 01 00 00       	push   0x180
c0028d8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d8e:	e8 b8 98 fe ff       	call   c001264b <operator delete(void*, unsigned long)>
c0028d93:	83 c4 10             	add    esp,0x10
c0028d96:	83 c4 0c             	add    esp,0xc
c0028d99:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028d9a <AVX::~AVX()>:
c0028d9a:	83 ec 0c             	sub    esp,0xc
c0028d9d:	ba a4 c4 02 c0       	mov    edx,0xc002c4a4
c0028da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028da6:	89 10                	mov    DWORD PTR [eax],edx
c0028da8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dac:	83 ec 0c             	sub    esp,0xc
c0028daf:	50                   	push   eax
c0028db0:	e8 f1 b2 fe ff       	call   c00140a6 <FPU::~FPU()>
c0028db5:	83 c4 10             	add    esp,0x10
c0028db8:	90                   	nop
c0028db9:	83 c4 0c             	add    esp,0xc
c0028dbc:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028dbe <AVX::~AVX()>:
c0028dbe:	83 ec 0c             	sub    esp,0xc
c0028dc1:	83 ec 0c             	sub    esp,0xc
c0028dc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dc8:	e8 cd ff ff ff       	call   c0028d9a <AVX::~AVX()>
c0028dcd:	83 c4 10             	add    esp,0x10
c0028dd0:	83 ec 08             	sub    esp,0x8
c0028dd3:	68 58 01 00 00       	push   0x158
c0028dd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ddc:	e8 6a 98 fe ff       	call   c001264b <operator delete(void*, unsigned long)>
c0028de1:	83 c4 10             	add    esp,0x10
c0028de4:	83 c4 0c             	add    esp,0xc
c0028de7:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028de8 <MMX::~MMX()>:
c0028de8:	83 ec 0c             	sub    esp,0xc
c0028deb:	ba e4 c4 02 c0       	mov    edx,0xc002c4e4
c0028df0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028df4:	89 10                	mov    DWORD PTR [eax],edx
c0028df6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dfa:	83 ec 0c             	sub    esp,0xc
c0028dfd:	50                   	push   eax
c0028dfe:	e8 a3 b2 fe ff       	call   c00140a6 <FPU::~FPU()>
c0028e03:	83 c4 10             	add    esp,0x10
c0028e06:	90                   	nop
c0028e07:	83 c4 0c             	add    esp,0xc
c0028e0a:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028e0c <MMX::~MMX()>:
c0028e0c:	83 ec 0c             	sub    esp,0xc
c0028e0f:	83 ec 0c             	sub    esp,0xc
c0028e12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e16:	e8 cd ff ff ff       	call   c0028de8 <MMX::~MMX()>
c0028e1b:	83 c4 10             	add    esp,0x10
c0028e1e:	83 ec 08             	sub    esp,0x8
c0028e21:	68 58 01 00 00       	push   0x158
c0028e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e2a:	e8 1c 98 fe ff       	call   c001264b <operator delete(void*, unsigned long)>
c0028e2f:	83 c4 10             	add    esp,0x10
c0028e32:	83 c4 0c             	add    esp,0xc
c0028e35:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028e36 <SSE::~SSE()>:
c0028e36:	83 ec 0c             	sub    esp,0xc
c0028e39:	ba 24 c5 02 c0       	mov    edx,0xc002c524
c0028e3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e42:	89 10                	mov    DWORD PTR [eax],edx
c0028e44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e48:	83 ec 0c             	sub    esp,0xc
c0028e4b:	50                   	push   eax
c0028e4c:	e8 55 b2 fe ff       	call   c00140a6 <FPU::~FPU()>
c0028e51:	83 c4 10             	add    esp,0x10
c0028e54:	90                   	nop
c0028e55:	83 c4 0c             	add    esp,0xc
c0028e58:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028e5a <SSE::~SSE()>:
c0028e5a:	83 ec 0c             	sub    esp,0xc
c0028e5d:	83 ec 0c             	sub    esp,0xc
c0028e60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e64:	e8 cd ff ff ff       	call   c0028e36 <SSE::~SSE()>
c0028e69:	83 c4 10             	add    esp,0x10
c0028e6c:	83 ec 08             	sub    esp,0x8
c0028e6f:	68 58 01 00 00       	push   0x158
c0028e74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e78:	e8 ce 97 fe ff       	call   c001264b <operator delete(void*, unsigned long)>
c0028e7d:	83 c4 10             	add    esp,0x10
c0028e80:	83 c4 0c             	add    esp,0xc
c0028e83:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028e84 <x87::~x87()>:
c0028e84:	83 ec 0c             	sub    esp,0xc
c0028e87:	ba 64 c5 02 c0       	mov    edx,0xc002c564
c0028e8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e90:	89 10                	mov    DWORD PTR [eax],edx
c0028e92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e96:	83 ec 0c             	sub    esp,0xc
c0028e99:	50                   	push   eax
c0028e9a:	e8 07 b2 fe ff       	call   c00140a6 <FPU::~FPU()>
c0028e9f:	83 c4 10             	add    esp,0x10
c0028ea2:	90                   	nop
c0028ea3:	83 c4 0c             	add    esp,0xc
c0028ea6:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028ea8 <x87::~x87()>:
c0028ea8:	83 ec 0c             	sub    esp,0xc
c0028eab:	83 ec 0c             	sub    esp,0xc
c0028eae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eb2:	e8 cd ff ff ff       	call   c0028e84 <x87::~x87()>
c0028eb7:	83 c4 10             	add    esp,0x10
c0028eba:	83 ec 08             	sub    esp,0x8
c0028ebd:	68 58 01 00 00       	push   0x158
c0028ec2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ec6:	e8 80 97 fe ff       	call   c001264b <operator delete(void*, unsigned long)>
c0028ecb:	83 c4 10             	add    esp,0x10
c0028ece:	83 c4 0c             	add    esp,0xc
c0028ed1:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028ed2 <IOAPIC::~IOAPIC()>:
c0028ed2:	83 ec 0c             	sub    esp,0xc
c0028ed5:	ba bc c6 02 c0       	mov    edx,0xc002c6bc
c0028eda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ede:	89 10                	mov    DWORD PTR [eax],edx
c0028ee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ee4:	83 ec 0c             	sub    esp,0xc
c0028ee7:	50                   	push   eax
c0028ee8:	e8 3d ab fe ff       	call   c0013a2a <Device::~Device()>
c0028eed:	83 c4 10             	add    esp,0x10
c0028ef0:	90                   	nop
c0028ef1:	83 c4 0c             	add    esp,0xc
c0028ef4:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0028ef6 <IOAPIC::~IOAPIC()>:
c0028ef6:	83 ec 0c             	sub    esp,0xc
c0028ef9:	83 ec 0c             	sub    esp,0xc
c0028efc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f00:	e8 cd ff ff ff       	call   c0028ed2 <IOAPIC::~IOAPIC()>
c0028f05:	83 c4 10             	add    esp,0x10
c0028f08:	83 ec 08             	sub    esp,0x8
c0028f0b:	68 68 01 00 00       	push   0x168
c0028f10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f14:	e8 32 97 fe ff       	call   c001264b <operator delete(void*, unsigned long)>
c0028f19:	83 c4 10             	add    esp,0x10
c0028f1c:	83 c4 0c             	add    esp,0xc
c0028f1f:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028f20 <APIC::~APIC()>:
c0028f20:	83 ec 0c             	sub    esp,0xc
c0028f23:	ba 74 c6 02 c0       	mov    edx,0xc002c674
c0028f28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f2c:	89 10                	mov    DWORD PTR [eax],edx
c0028f2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f32:	83 ec 0c             	sub    esp,0xc
c0028f35:	50                   	push   eax
c0028f36:	e8 35 b6 fe ff       	call   c0014570 <InterruptController::~InterruptController()>
c0028f3b:	83 c4 10             	add    esp,0x10
c0028f3e:	90                   	nop
c0028f3f:	83 c4 0c             	add    esp,0xc
c0028f42:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0028f44 <APIC::~APIC()>:
c0028f44:	83 ec 0c             	sub    esp,0xc
c0028f47:	83 ec 0c             	sub    esp,0xc
c0028f4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f4e:	e8 cd ff ff ff       	call   c0028f20 <APIC::~APIC()>
c0028f53:	83 c4 10             	add    esp,0x10
c0028f56:	83 ec 08             	sub    esp,0x8
c0028f59:	68 58 21 00 00       	push   0x2158
c0028f5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f62:	e8 e4 96 fe ff       	call   c001264b <operator delete(void*, unsigned long)>
c0028f67:	83 c4 10             	add    esp,0x10
c0028f6a:	83 c4 0c             	add    esp,0xc
c0028f6d:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0028f6e <PIC::~PIC()>:
c0028f6e:	83 ec 0c             	sub    esp,0xc
c0028f71:	ba 0c c7 02 c0       	mov    edx,0xc002c70c
c0028f76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f7a:	89 10                	mov    DWORD PTR [eax],edx
c0028f7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f80:	83 ec 0c             	sub    esp,0xc
c0028f83:	50                   	push   eax
c0028f84:	e8 e7 b5 fe ff       	call   c0014570 <InterruptController::~InterruptController()>
c0028f89:	83 c4 10             	add    esp,0x10
c0028f8c:	90                   	nop
c0028f8d:	83 c4 0c             	add    esp,0xc
c0028f90:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0028f92 <PIC::~PIC()>:
c0028f92:	83 ec 0c             	sub    esp,0xc
c0028f95:	83 ec 0c             	sub    esp,0xc
c0028f98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f9c:	e8 cd ff ff ff       	call   c0028f6e <PIC::~PIC()>
c0028fa1:	83 c4 10             	add    esp,0x10
c0028fa4:	83 ec 08             	sub    esp,0x8
c0028fa7:	68 58 21 00 00       	push   0x2158
c0028fac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fb0:	e8 96 96 fe ff       	call   c001264b <operator delete(void*, unsigned long)>
c0028fb5:	83 c4 10             	add    esp,0x10
c0028fb8:	83 c4 0c             	add    esp,0xc
c0028fbb:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0028fbc <APICTimer::~APICTimer()>:
c0028fbc:	83 ec 0c             	sub    esp,0xc
c0028fbf:	ba 60 c7 02 c0       	mov    edx,0xc002c760
c0028fc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fc8:	89 10                	mov    DWORD PTR [eax],edx
c0028fca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fce:	83 ec 0c             	sub    esp,0xc
c0028fd1:	50                   	push   eax
c0028fd2:	e8 f1 d5 fe ff       	call   c00165c8 <Timer::~Timer()>
c0028fd7:	83 c4 10             	add    esp,0x10
c0028fda:	90                   	nop
c0028fdb:	83 c4 0c             	add    esp,0xc
c0028fde:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0028fe0 <APICTimer::~APICTimer()>:
c0028fe0:	83 ec 0c             	sub    esp,0xc
c0028fe3:	83 ec 0c             	sub    esp,0xc
c0028fe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fea:	e8 cd ff ff ff       	call   c0028fbc <APICTimer::~APICTimer()>
c0028fef:	83 c4 10             	add    esp,0x10
c0028ff2:	83 ec 08             	sub    esp,0x8
c0028ff5:	68 60 01 00 00       	push   0x160
c0028ffa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ffe:	e8 48 96 fe ff       	call   c001264b <operator delete(void*, unsigned long)>
c0029003:	83 c4 10             	add    esp,0x10
c0029006:	83 c4 0c             	add    esp,0xc
c0029009:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002900a <PIT::~PIT()>:
c002900a:	83 ec 0c             	sub    esp,0xc
c002900d:	ba b0 c7 02 c0       	mov    edx,0xc002c7b0
c0029012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029016:	89 10                	mov    DWORD PTR [eax],edx
c0029018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002901c:	83 ec 0c             	sub    esp,0xc
c002901f:	50                   	push   eax
c0029020:	e8 a3 d5 fe ff       	call   c00165c8 <Timer::~Timer()>
c0029025:	83 c4 10             	add    esp,0x10
c0029028:	90                   	nop
c0029029:	83 c4 0c             	add    esp,0xc
c002902c:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002902e <PIT::~PIT()>:
c002902e:	83 ec 0c             	sub    esp,0xc
c0029031:	83 ec 0c             	sub    esp,0xc
c0029034:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029038:	e8 cd ff ff ff       	call   c002900a <PIT::~PIT()>
c002903d:	83 c4 10             	add    esp,0x10
c0029040:	83 ec 08             	sub    esp,0x8
c0029043:	68 5c 01 00 00       	push   0x15c
c0029048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002904c:	e8 fa 95 fe ff       	call   c001264b <operator delete(void*, unsigned long)>
c0029051:	83 c4 10             	add    esp,0x10
c0029054:	83 c4 0c             	add    esp,0xc
c0029057:	c3                   	ret    
