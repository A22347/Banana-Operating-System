
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 bf 7e 00 00       	call   c0007edf <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 65 c3 01 00       	call   c001c38a <_init>
c0000025:	c3                   	ret    
c0000026:	bb 26 ce 01 c0       	mov    ebx,0xc001ce26
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 30 ce 01 c0    	cmp    ebx,0xc001ce30
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 d8 f8 01 c0       	mov    eax,0xc001f8d8
c0000049:	3d d8 f8 01 c0       	cmp    eax,0xc001f8d8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 d8 f8 01 c0       	push   0xc001f8d8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 d8 f8 01 c0       	mov    eax,0xc001f8d8
c0000075:	2d d8 f8 01 c0       	sub    eax,0xc001f8d8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 d8 f8 01 c0       	push   0xc001f8d8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 00 fb 01 c0 00 	cmp    BYTE PTR ds:0xc001fb00,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 38 ce 01 c0       	mov    ebx,0xc001ce38
c00000bb:	81 eb 34 ce 01 c0    	sub    ebx,0xc001ce34
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 34 ce 01 c0       	mov    esi,0xc001ce34
c00000ca:	a1 04 fb 01 c0       	mov    eax,ds:0xc001fb04
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 04 fb 01 c0       	mov    ds:0xc001fb04,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 04 fb 01 c0       	mov    eax,ds:0xc001fb04
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 d8 f8 01 c0       	push   0xc001f8d8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 00 fb 01 c0 01 	mov    BYTE PTR ds:0xc001fb00,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 08 fb 01 c0       	push   0xc001fb08
c000012c:	68 d8 f8 01 c0       	push   0xc001f8d8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	85 d2                	test   edx,edx
c00002c6:	75 11                	jne    c00002d9 <commonThreadSwitch.firstTime>
c00002c8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002cb:	e8 1c 30 01 00       	call   c00132ec <changeTSS>
c00002d0:	5d                   	pop    ebp
c00002d1:	5f                   	pop    edi
c00002d2:	5e                   	pop    esi
c00002d3:	5a                   	pop    edx
c00002d4:	59                   	pop    ecx
c00002d5:	5b                   	pop    ebx
c00002d6:	58                   	pop    eax
c00002d7:	9d                   	popf   
c00002d8:	c3                   	ret    

c00002d9 <commonThreadSwitch.firstTime>:
c00002d9:	fa                   	cli    
c00002da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002dd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002e2:	60                   	pusha  
c00002e3:	e8 c0 a6 00 00       	call   c000a9a8 <mapVASFirstTime>
c00002e8:	61                   	popa   
c00002e9:	89 c4                	mov    esp,eax
c00002eb:	56                   	push   esi
c00002ec:	52                   	push   edx
c00002ed:	e8 fa 2f 01 00       	call   c00132ec <changeTSS>
c00002f2:	5a                   	pop    edx
c00002f3:	5e                   	pop    esi
c00002f4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002fb:	5d                   	pop    ebp
c00002fc:	5f                   	pop    edi
c00002fd:	5e                   	pop    esi
c00002fe:	59                   	pop    ecx
c00002ff:	59                   	pop    ecx
c0000300:	5b                   	pop    ebx
c0000301:	58                   	pop    eax
c0000302:	81 c4 04 00 00 00    	add    esp,0x4
c0000308:	6a 02                	push   0x2
c000030a:	9d                   	popf   
c000030b:	52                   	push   edx
c000030c:	e8 cb 34 01 00       	call   c00137dc <taskStartupFunction>
c0000311:	5a                   	pop    edx
c0000312:	50                   	push   eax
c0000313:	ff d2                	call   edx
c0000315:	e8 1a 3b 01 00       	call   c0013e34 <taskReturned>
c000031a:	e9 fb ff ff ff       	jmp    c000031a <commonThreadSwitch.firstTime+0x41>

c000031f <asmQuickAcquireLock>:
c000031f:	55                   	push   ebp
c0000320:	89 e5                	mov    ebp,esp
c0000322:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000325 <asmQuickAcquireLock.retry>:
c0000325:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000032a:	72 02                	jb     c000032e <asmQuickAcquireLock.spin_with_pause>
c000032c:	fa                   	cli    
c000032d:	c3                   	ret    

c000032e <asmQuickAcquireLock.spin_with_pause>:
c000032e:	f3 90                	pause  
c0000330:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000336:	75 f6                	jne    c000032e <asmQuickAcquireLock.spin_with_pause>
c0000338:	e9 e8 ff ff ff       	jmp    c0000325 <asmQuickAcquireLock.retry>

c000033d <asmQuickReleaseLock>:
c000033d:	55                   	push   ebp
c000033e:	89 e5                	mov    ebp,esp
c0000340:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000347:	5d                   	pop    ebp
c0000348:	c3                   	ret    

c0000349 <asmAcquireLock>:
c0000349:	55                   	push   ebp
c000034a:	89 e5                	mov    ebp,esp
c000034c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000034f <asmAcquireLock.retry>:
c000034f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000354:	72 05                	jb     c000035b <asmAcquireLock.spin_with_pause>
c0000356:	9c                   	pushf  
c0000357:	58                   	pop    eax
c0000358:	fa                   	cli    
c0000359:	5d                   	pop    ebp
c000035a:	c3                   	ret    

c000035b <asmAcquireLock.spin_with_pause>:
c000035b:	f3 90                	pause  
c000035d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000363:	75 f6                	jne    c000035b <asmAcquireLock.spin_with_pause>
c0000365:	e9 e5 ff ff ff       	jmp    c000034f <asmAcquireLock.retry>

c000036a <asmReleaseLock>:
c000036a:	55                   	push   ebp
c000036b:	89 e5                	mov    ebp,esp
c000036d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000373:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000379:	52                   	push   edx
c000037a:	9d                   	popf   
c000037b:	5d                   	pop    ebp
c000037c:	c3                   	ret    

c000037d <loadGDT>:
c000037d:	0f 01 15 00 09 02 c0 	lgdtd  ds:0xc0020900
c0000384:	66 b8 10 00          	mov    ax,0x10
c0000388:	66 8e d8             	mov    ds,ax
c000038b:	66 8e c0             	mov    es,ax
c000038e:	66 8e e0             	mov    fs,ax
c0000391:	66 8e e8             	mov    gs,ax
c0000394:	66 8e d0             	mov    ss,ax
c0000397:	e9 00 00 00 00       	jmp    c000039c <flush2>

c000039c <flush2>:
c000039c:	c3                   	ret    

c000039d <memcpy>:
c000039d:	e9 46 6b 00 00       	jmp    c0006ee8 <__not_memcpy>
c00003a2:	66 90                	xchg   ax,ax
c00003a4:	66 90                	xchg   ax,ax
c00003a6:	66 90                	xchg   ax,ax
c00003a8:	66 90                	xchg   ax,ax
c00003aa:	66 90                	xchg   ax,ax
c00003ac:	66 90                	xchg   ax,ax
c00003ae:	66 90                	xchg   ax,ax

c00003b0 <memcmp>:
c00003b0:	56                   	push   esi
c00003b1:	53                   	push   ebx
c00003b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00003b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00003ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00003be:	85 f6                	test   esi,esi
c00003c0:	74 1c                	je     c00003de <memcmp+0x2e>
c00003c2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003c4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003c6:	38 cb                	cmp    bl,cl
c00003c8:	75 26                	jne    c00003f0 <memcmp+0x40>
c00003ca:	01 c6                	add    esi,eax
c00003cc:	eb 0a                	jmp    c00003d8 <memcmp+0x28>
c00003ce:	66 90                	xchg   ax,ax
c00003d0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003d2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003d4:	38 d9                	cmp    cl,bl
c00003d6:	75 18                	jne    c00003f0 <memcmp+0x40>
c00003d8:	40                   	inc    eax
c00003d9:	42                   	inc    edx
c00003da:	39 f0                	cmp    eax,esi
c00003dc:	75 f2                	jne    c00003d0 <memcmp+0x20>
c00003de:	31 c0                	xor    eax,eax
c00003e0:	5b                   	pop    ebx
c00003e1:	5e                   	pop    esi
c00003e2:	c3                   	ret    
c00003e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003f0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003f6:	31 c0                	xor    eax,eax
c00003f8:	88 c8                	mov    al,cl
c00003fa:	29 d8                	sub    eax,ebx
c00003fc:	5b                   	pop    ebx
c00003fd:	5e                   	pop    esi
c00003fe:	c3                   	ret    
c00003ff:	90                   	nop

c0000400 <memmove>:
c0000400:	55                   	push   ebp
c0000401:	57                   	push   edi
c0000402:	56                   	push   esi
c0000403:	53                   	push   ebx
c0000404:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000408:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000040c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000410:	39 dd                	cmp    ebp,ebx
c0000412:	0f 83 98 00 00 00    	jae    c00004b0 <memmove+0xb0>
c0000418:	85 d2                	test   edx,edx
c000041a:	0f 84 7c 00 00 00    	je     c000049c <memmove+0x9c>
c0000420:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000423:	8d 75 04             	lea    esi,[ebp+0x4]
c0000426:	39 cd                	cmp    ebp,ecx
c0000428:	0f 93 c1             	setae  cl
c000042b:	39 f3                	cmp    ebx,esi
c000042d:	0f 93 c0             	setae  al
c0000430:	89 c6                	mov    esi,eax
c0000432:	09 ce                	or     esi,ecx
c0000434:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000437:	89 f0                	mov    eax,esi
c0000439:	83 f9 0c             	cmp    ecx,0xc
c000043c:	0f 97 c1             	seta   cl
c000043f:	84 c8                	test   al,cl
c0000441:	0f 84 89 00 00 00    	je     c00004d0 <memmove+0xd0>
c0000447:	89 e9                	mov    ecx,ebp
c0000449:	09 d9                	or     ecx,ebx
c000044b:	83 e1 03             	and    ecx,0x3
c000044e:	0f 85 7c 00 00 00    	jne    c00004d0 <memmove+0xd0>
c0000454:	89 d7                	mov    edi,edx
c0000456:	89 d9                	mov    ecx,ebx
c0000458:	83 e7 fc             	and    edi,0xfffffffc
c000045b:	89 ee                	mov    esi,ebp
c000045d:	01 df                	add    edi,ebx
c000045f:	90                   	nop
c0000460:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000462:	83 c6 04             	add    esi,0x4
c0000465:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000468:	83 c1 04             	add    ecx,0x4
c000046b:	39 f9                	cmp    ecx,edi
c000046d:	75 f1                	jne    c0000460 <memmove+0x60>
c000046f:	89 d1                	mov    ecx,edx
c0000471:	89 d7                	mov    edi,edx
c0000473:	83 e1 fc             	and    ecx,0xfffffffc
c0000476:	29 cf                	sub    edi,ecx
c0000478:	01 cb                	add    ebx,ecx
c000047a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000047e:	39 ca                	cmp    edx,ecx
c0000480:	74 1a                	je     c000049c <memmove+0x9c>
c0000482:	8a 03                	mov    al,BYTE PTR [ebx]
c0000484:	83 ff 01             	cmp    edi,0x1
c0000487:	88 06                	mov    BYTE PTR [esi],al
c0000489:	74 11                	je     c000049c <memmove+0x9c>
c000048b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000048e:	83 ff 02             	cmp    edi,0x2
c0000491:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000494:	74 06                	je     c000049c <memmove+0x9c>
c0000496:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000499:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000049c:	5b                   	pop    ebx
c000049d:	89 e8                	mov    eax,ebp
c000049f:	5e                   	pop    esi
c00004a0:	5f                   	pop    edi
c00004a1:	5d                   	pop    ebp
c00004a2:	c3                   	ret    
c00004a3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004b0:	76 ea                	jbe    c000049c <memmove+0x9c>
c00004b2:	85 d2                	test   edx,edx
c00004b4:	74 e6                	je     c000049c <memmove+0x9c>
c00004b6:	4b                   	dec    ebx
c00004b7:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00004ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004c0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004c3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004c6:	4a                   	dec    edx
c00004c7:	75 f7                	jne    c00004c0 <memmove+0xc0>
c00004c9:	5b                   	pop    ebx
c00004ca:	89 e8                	mov    eax,ebp
c00004cc:	5e                   	pop    esi
c00004cd:	5f                   	pop    edi
c00004ce:	5d                   	pop    ebp
c00004cf:	c3                   	ret    
c00004d0:	01 ea                	add    edx,ebp
c00004d2:	89 e9                	mov    ecx,ebp
c00004d4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004da:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004e0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004e2:	41                   	inc    ecx
c00004e3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004e6:	43                   	inc    ebx
c00004e7:	39 d1                	cmp    ecx,edx
c00004e9:	75 f5                	jne    c00004e0 <memmove+0xe0>
c00004eb:	eb af                	jmp    c000049c <memmove+0x9c>
c00004ed:	8d 76 00             	lea    esi,[esi+0x0]

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	53                   	push   ebx
c00004f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004fa:	85 d2                	test   edx,edx
c00004fc:	74 1f                	je     c000051d <memset+0x2d>
c00004fe:	31 c0                	xor    eax,eax
c0000500:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0000504:	88 c4                	mov    ah,al
c0000506:	89 c1                	mov    ecx,eax
c0000508:	c1 e1 10             	shl    ecx,0x10
c000050b:	09 c8                	or     eax,ecx
c000050d:	83 fa 04             	cmp    edx,0x4
c0000510:	73 1e                	jae    c0000530 <memset+0x40>
c0000512:	85 d2                	test   edx,edx
c0000514:	74 07                	je     c000051d <memset+0x2d>
c0000516:	88 03                	mov    BYTE PTR [ebx],al
c0000518:	f6 c2 02             	test   dl,0x2
c000051b:	75 30                	jne    c000054d <memset+0x5d>
c000051d:	89 d8                	mov    eax,ebx
c000051f:	5b                   	pop    ebx
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	89 03                	mov    DWORD PTR [ebx],eax
c0000532:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000535:	89 d9                	mov    ecx,ebx
c0000537:	83 e7 fc             	and    edi,0xfffffffc
c000053a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000053e:	29 f9                	sub    ecx,edi
c0000540:	01 d1                	add    ecx,edx
c0000542:	c1 e9 02             	shr    ecx,0x2
c0000545:	fc                   	cld    
c0000546:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000548:	89 d8                	mov    eax,ebx
c000054a:	5b                   	pop    ebx
c000054b:	5f                   	pop    edi
c000054c:	c3                   	ret    
c000054d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000552:	eb c9                	jmp    c000051d <memset+0x2d>
c0000554:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000055a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000560 <strlen>:
c0000560:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000564:	31 c0                	xor    eax,eax
c0000566:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000569:	74 15                	je     c0000580 <strlen+0x20>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000570:	40                   	inc    eax
c0000571:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000575:	75 f9                	jne    c0000570 <strlen+0x10>
c0000577:	c3                   	ret    
c0000578:	90                   	nop
c0000579:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000580:	c3                   	ret    
c0000581:	eb 0d                	jmp    c0000590 <strpbrk>
c0000583:	90                   	nop
c0000584:	90                   	nop
c0000585:	90                   	nop
c0000586:	90                   	nop
c0000587:	90                   	nop
c0000588:	90                   	nop
c0000589:	90                   	nop
c000058a:	90                   	nop
c000058b:	90                   	nop
c000058c:	90                   	nop
c000058d:	90                   	nop
c000058e:	90                   	nop
c000058f:	90                   	nop

c0000590 <strpbrk>:
c0000590:	57                   	push   edi
c0000591:	56                   	push   esi
c0000592:	53                   	push   ebx
c0000593:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000597:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000059b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059d:	84 db                	test   bl,bl
c000059f:	74 21                	je     c00005c2 <strpbrk+0x32>
c00005a1:	8a 07                	mov    al,BYTE PTR [edi]
c00005a3:	84 c0                	test   al,al
c00005a5:	74 14                	je     c00005bb <strpbrk+0x2b>
c00005a7:	38 d8                	cmp    al,bl
c00005a9:	74 19                	je     c00005c4 <strpbrk+0x34>
c00005ab:	89 fa                	mov    edx,edi
c00005ad:	eb 05                	jmp    c00005b4 <strpbrk+0x24>
c00005af:	90                   	nop
c00005b0:	38 d9                	cmp    cl,bl
c00005b2:	74 10                	je     c00005c4 <strpbrk+0x34>
c00005b4:	42                   	inc    edx
c00005b5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00005b7:	84 c9                	test   cl,cl
c00005b9:	75 f5                	jne    c00005b0 <strpbrk+0x20>
c00005bb:	46                   	inc    esi
c00005bc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00005be:	84 db                	test   bl,bl
c00005c0:	75 e1                	jne    c00005a3 <strpbrk+0x13>
c00005c2:	31 f6                	xor    esi,esi
c00005c4:	89 f0                	mov    eax,esi
c00005c6:	5b                   	pop    ebx
c00005c7:	5e                   	pop    esi
c00005c8:	5f                   	pop    edi
c00005c9:	c3                   	ret    
c00005ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005d0 <strtok>:
c00005d0:	56                   	push   esi
c00005d1:	53                   	push   ebx
c00005d2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005d6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005da:	85 db                	test   ebx,ebx
c00005dc:	75 07                	jne    c00005e5 <strtok+0x15>
c00005de:	eb 30                	jmp    c0000610 <strtok+0x40>
c00005e0:	43                   	inc    ebx
c00005e1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005e5:	56                   	push   esi
c00005e6:	53                   	push   ebx
c00005e7:	e8 a4 ff ff ff       	call   c0000590 <strpbrk>
c00005ec:	5a                   	pop    edx
c00005ed:	a3 20 fb 01 c0       	mov    ds:0xc001fb20,eax
c00005f2:	59                   	pop    ecx
c00005f3:	39 d8                	cmp    eax,ebx
c00005f5:	74 e9                	je     c00005e0 <strtok+0x10>
c00005f7:	85 c0                	test   eax,eax
c00005f9:	74 1f                	je     c000061a <strtok+0x4a>
c00005fb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005fe:	8d 50 01             	lea    edx,[eax+0x1]
c0000601:	89 d8                	mov    eax,ebx
c0000603:	89 15 20 fb 01 c0    	mov    DWORD PTR ds:0xc001fb20,edx
c0000609:	5b                   	pop    ebx
c000060a:	5e                   	pop    esi
c000060b:	c3                   	ret    
c000060c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000610:	8b 1d 20 fb 01 c0    	mov    ebx,DWORD PTR ds:0xc001fb20
c0000616:	85 db                	test   ebx,ebx
c0000618:	75 cb                	jne    c00005e5 <strtok+0x15>
c000061a:	31 c0                	xor    eax,eax
c000061c:	5b                   	pop    ebx
c000061d:	5e                   	pop    esi
c000061e:	c3                   	ret    
c000061f:	90                   	nop

c0000620 <strcpy>:
c0000620:	53                   	push   ebx
c0000621:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000625:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000629:	89 c3                	mov    ebx,eax
c000062b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000062d:	84 d2                	test   dl,dl
c000062f:	74 19                	je     c000064a <strcpy+0x2a>
c0000631:	eb 0d                	jmp    c0000640 <strcpy+0x20>
c0000633:	90                   	nop
c0000634:	90                   	nop
c0000635:	90                   	nop
c0000636:	90                   	nop
c0000637:	90                   	nop
c0000638:	90                   	nop
c0000639:	90                   	nop
c000063a:	90                   	nop
c000063b:	90                   	nop
c000063c:	90                   	nop
c000063d:	90                   	nop
c000063e:	90                   	nop
c000063f:	90                   	nop
c0000640:	88 13                	mov    BYTE PTR [ebx],dl
c0000642:	41                   	inc    ecx
c0000643:	43                   	inc    ebx
c0000644:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000646:	84 d2                	test   dl,dl
c0000648:	75 f6                	jne    c0000640 <strcpy+0x20>
c000064a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000064d:	5b                   	pop    ebx
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strncpy>:
c0000650:	57                   	push   edi
c0000651:	56                   	push   esi
c0000652:	53                   	push   ebx
c0000653:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000657:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000065f:	85 ff                	test   edi,edi
c0000661:	74 3e                	je     c00006a1 <strncpy+0x51>
c0000663:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000665:	8d 47 ff             	lea    eax,[edi-0x1]
c0000668:	8d 4a 01             	lea    ecx,[edx+0x1]
c000066b:	88 1a                	mov    BYTE PTR [edx],bl
c000066d:	84 db                	test   bl,bl
c000066f:	74 3f                	je     c00006b0 <strncpy+0x60>
c0000671:	85 c0                	test   eax,eax
c0000673:	74 2c                	je     c00006a1 <strncpy+0x51>
c0000675:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000678:	8d 47 fe             	lea    eax,[edi-0x2]
c000067b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000067e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000681:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000684:	84 db                	test   bl,bl
c0000686:	75 15                	jne    c000069d <strncpy+0x4d>
c0000688:	eb 26                	jmp    c00006b0 <strncpy+0x60>
c000068a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000690:	47                   	inc    edi
c0000691:	41                   	inc    ecx
c0000692:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000695:	48                   	dec    eax
c0000696:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000699:	84 db                	test   bl,bl
c000069b:	74 13                	je     c00006b0 <strncpy+0x60>
c000069d:	85 c0                	test   eax,eax
c000069f:	75 ef                	jne    c0000690 <strncpy+0x40>
c00006a1:	5b                   	pop    ebx
c00006a2:	89 d0                	mov    eax,edx
c00006a4:	5e                   	pop    esi
c00006a5:	5f                   	pop    edi
c00006a6:	c3                   	ret    
c00006a7:	89 f6                	mov    esi,esi
c00006a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00006b0:	85 c0                	test   eax,eax
c00006b2:	74 ed                	je     c00006a1 <strncpy+0x51>
c00006b4:	83 f8 04             	cmp    eax,0x4
c00006b7:	73 17                	jae    c00006d0 <strncpy+0x80>
c00006b9:	85 c0                	test   eax,eax
c00006bb:	74 e4                	je     c00006a1 <strncpy+0x51>
c00006bd:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006c0:	a8 02                	test   al,0x2
c00006c2:	74 dd                	je     c00006a1 <strncpy+0x51>
c00006c4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006cb:	eb d4                	jmp    c00006a1 <strncpy+0x51>
c00006cd:	8d 76 00             	lea    esi,[esi+0x0]
c00006d0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006d6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006d9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006e1:	83 e7 fc             	and    edi,0xfffffffc
c00006e4:	29 f9                	sub    ecx,edi
c00006e6:	01 c1                	add    ecx,eax
c00006e8:	c1 e9 02             	shr    ecx,0x2
c00006eb:	fc                   	cld    
c00006ec:	31 c0                	xor    eax,eax
c00006ee:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006f0:	89 d0                	mov    eax,edx
c00006f2:	5b                   	pop    ebx
c00006f3:	5e                   	pop    esi
c00006f4:	5f                   	pop    edi
c00006f5:	c3                   	ret    
c00006f6:	8d 76 00             	lea    esi,[esi+0x0]
c00006f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000700 <strcmp>:
c0000700:	56                   	push   esi
c0000701:	53                   	push   ebx
c0000702:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000706:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000070a:	8a 16                	mov    dl,BYTE PTR [esi]
c000070c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000070e:	38 d1                	cmp    cl,dl
c0000710:	75 1d                	jne    c000072f <strcmp+0x2f>
c0000712:	84 c9                	test   cl,cl
c0000714:	74 2a                	je     c0000740 <strcmp+0x40>
c0000716:	b8 01 00 00 00       	mov    eax,0x1
c000071b:	eb 08                	jmp    c0000725 <strcmp+0x25>
c000071d:	8d 76 00             	lea    esi,[esi+0x0]
c0000720:	40                   	inc    eax
c0000721:	84 d2                	test   dl,dl
c0000723:	74 1b                	je     c0000740 <strcmp+0x40>
c0000725:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000728:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000072b:	38 ca                	cmp    dl,cl
c000072d:	74 f1                	je     c0000720 <strcmp+0x20>
c000072f:	31 c0                	xor    eax,eax
c0000731:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000737:	88 d0                	mov    al,dl
c0000739:	5b                   	pop    ebx
c000073a:	29 c8                	sub    eax,ecx
c000073c:	5e                   	pop    esi
c000073d:	c3                   	ret    
c000073e:	66 90                	xchg   ax,ax
c0000740:	31 c0                	xor    eax,eax
c0000742:	5b                   	pop    ebx
c0000743:	5e                   	pop    esi
c0000744:	c3                   	ret    
c0000745:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000749:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000750 <strchr>:
c0000750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000754:	8a 10                	mov    dl,BYTE PTR [eax]
c0000756:	84 d2                	test   dl,dl
c0000758:	74 21                	je     c000077b <strchr+0x2b>
c000075a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000075e:	38 ca                	cmp    dl,cl
c0000760:	75 12                	jne    c0000774 <strchr+0x24>
c0000762:	eb 1a                	jmp    c000077e <strchr+0x2e>
c0000764:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000076a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000770:	38 ca                	cmp    dl,cl
c0000772:	74 09                	je     c000077d <strchr+0x2d>
c0000774:	40                   	inc    eax
c0000775:	8a 10                	mov    dl,BYTE PTR [eax]
c0000777:	84 d2                	test   dl,dl
c0000779:	75 f5                	jne    c0000770 <strchr+0x20>
c000077b:	31 c0                	xor    eax,eax
c000077d:	c3                   	ret    
c000077e:	c3                   	ret    
c000077f:	90                   	nop

c0000780 <strncmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000078f:	85 ff                	test   edi,edi
c0000791:	74 2f                	je     c00007c2 <strncmp+0x42>
c0000793:	8a 16                	mov    dl,BYTE PTR [esi]
c0000795:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000797:	38 d1                	cmp    cl,dl
c0000799:	75 35                	jne    c00007d0 <strncmp+0x50>
c000079b:	8d 46 01             	lea    eax,[esi+0x1]
c000079e:	84 c9                	test   cl,cl
c00007a0:	74 20                	je     c00007c2 <strncmp+0x42>
c00007a2:	01 fe                	add    esi,edi
c00007a4:	eb 17                	jmp    c00007bd <strncmp+0x3d>
c00007a6:	8d 76 00             	lea    esi,[esi+0x0]
c00007a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00007b0:	8a 10                	mov    dl,BYTE PTR [eax]
c00007b2:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00007b4:	38 ca                	cmp    dl,cl
c00007b6:	75 18                	jne    c00007d0 <strncmp+0x50>
c00007b8:	40                   	inc    eax
c00007b9:	84 d2                	test   dl,dl
c00007bb:	74 05                	je     c00007c2 <strncmp+0x42>
c00007bd:	43                   	inc    ebx
c00007be:	39 c6                	cmp    esi,eax
c00007c0:	75 ee                	jne    c00007b0 <strncmp+0x30>
c00007c2:	5b                   	pop    ebx
c00007c3:	31 c0                	xor    eax,eax
c00007c5:	5e                   	pop    esi
c00007c6:	5f                   	pop    edi
c00007c7:	c3                   	ret    
c00007c8:	90                   	nop
c00007c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d0:	5b                   	pop    ebx
c00007d1:	31 c0                	xor    eax,eax
c00007d3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007d9:	88 d0                	mov    al,dl
c00007db:	5e                   	pop    esi
c00007dc:	29 c8                	sub    eax,ecx
c00007de:	5f                   	pop    edi
c00007df:	c3                   	ret    

c00007e0 <strcat>:
c00007e0:	56                   	push   esi
c00007e1:	53                   	push   ebx
c00007e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007e6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ea:	89 c3                	mov    ebx,eax
c00007ec:	eb 04                	jmp    c00007f2 <strcat+0x12>
c00007ee:	66 90                	xchg   ax,ax
c00007f0:	89 d3                	mov    ebx,edx
c00007f2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007f5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007f9:	75 f5                	jne    c00007f0 <strcat+0x10>
c00007fb:	31 d2                	xor    edx,edx
c00007fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000800:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000803:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000806:	42                   	inc    edx
c0000807:	84 c9                	test   cl,cl
c0000809:	75 f5                	jne    c0000800 <strcat+0x20>
c000080b:	5b                   	pop    ebx
c000080c:	5e                   	pop    esi
c000080d:	c3                   	ret    
c000080e:	66 90                	xchg   ax,ax

c0000810 <strncat>:
c0000810:	56                   	push   esi
c0000811:	53                   	push   ebx
c0000812:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000081a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000081e:	85 f6                	test   esi,esi
c0000820:	74 2e                	je     c0000850 <strncat+0x40>
c0000822:	89 c2                	mov    edx,eax
c0000824:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000082a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000830:	42                   	inc    edx
c0000831:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000835:	75 f9                	jne    c0000830 <strncat+0x20>
c0000837:	01 ce                	add    esi,ecx
c0000839:	eb 0a                	jmp    c0000845 <strncat+0x35>
c000083b:	90                   	nop
c000083c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000840:	39 f1                	cmp    ecx,esi
c0000842:	74 1c                	je     c0000860 <strncat+0x50>
c0000844:	42                   	inc    edx
c0000845:	41                   	inc    ecx
c0000846:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000849:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000084c:	84 db                	test   bl,bl
c000084e:	75 f0                	jne    c0000840 <strncat+0x30>
c0000850:	5b                   	pop    ebx
c0000851:	5e                   	pop    esi
c0000852:	c3                   	ret    
c0000853:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000859:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000860:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000863:	5b                   	pop    ebx
c0000864:	5e                   	pop    esi
c0000865:	c3                   	ret    
c0000866:	8d 76 00             	lea    esi,[esi+0x0]
c0000869:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000870 <strstr>:
c0000870:	57                   	push   edi
c0000871:	56                   	push   esi
c0000872:	53                   	push   ebx
c0000873:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000877:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000087b:	57                   	push   edi
c000087c:	e8 df fc ff ff       	call   c0000560 <strlen>
c0000881:	59                   	pop    ecx
c0000882:	85 c0                	test   eax,eax
c0000884:	74 3a                	je     c00008c0 <strstr+0x50>
c0000886:	89 c6                	mov    esi,eax
c0000888:	eb 16                	jmp    c00008a0 <strstr+0x30>
c000088a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000890:	56                   	push   esi
c0000891:	57                   	push   edi
c0000892:	53                   	push   ebx
c0000893:	e8 18 fb ff ff       	call   c00003b0 <memcmp>
c0000898:	83 c4 0c             	add    esp,0xc
c000089b:	85 c0                	test   eax,eax
c000089d:	74 21                	je     c00008c0 <strstr+0x50>
c000089f:	43                   	inc    ebx
c00008a0:	53                   	push   ebx
c00008a1:	e8 ba fc ff ff       	call   c0000560 <strlen>
c00008a6:	5a                   	pop    edx
c00008a7:	39 f0                	cmp    eax,esi
c00008a9:	73 e5                	jae    c0000890 <strstr+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	31 c0                	xor    eax,eax
c00008ae:	5e                   	pop    esi
c00008af:	5f                   	pop    edi
c00008b0:	c3                   	ret    
c00008b1:	eb 0d                	jmp    c00008c0 <strstr+0x50>
c00008b3:	90                   	nop
c00008b4:	90                   	nop
c00008b5:	90                   	nop
c00008b6:	90                   	nop
c00008b7:	90                   	nop
c00008b8:	90                   	nop
c00008b9:	90                   	nop
c00008ba:	90                   	nop
c00008bb:	90                   	nop
c00008bc:	90                   	nop
c00008bd:	90                   	nop
c00008be:	90                   	nop
c00008bf:	90                   	nop
c00008c0:	89 d8                	mov    eax,ebx
c00008c2:	5b                   	pop    ebx
c00008c3:	5e                   	pop    esi
c00008c4:	5f                   	pop    edi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <toupper>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 40 ce 01 c0 02 	test   BYTE PTR [edx-0x3ffe31c0],0x2
c00008df:	74 03                	je     c00008e4 <toupper+0x14>
c00008e1:	83 e8 20             	sub    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <tolower>:
c00008f0:	31 d2                	xor    edx,edx
c00008f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008f6:	88 c2                	mov    dl,al
c00008f8:	f6 82 40 ce 01 c0 01 	test   BYTE PTR [edx-0x3ffe31c0],0x1
c00008ff:	74 03                	je     c0000904 <tolower+0x14>
c0000901:	83 c0 20             	add    eax,0x20
c0000904:	c3                   	ret    
c0000905:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000909:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000910 <simple_strtoul>:
c0000910:	55                   	push   ebp
c0000911:	57                   	push   edi
c0000912:	56                   	push   esi
c0000913:	53                   	push   ebx
c0000914:	83 ec 08             	sub    esp,0x8
c0000917:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000091b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000091f:	90                   	nop
c0000920:	31 d2                	xor    edx,edx
c0000922:	8a 01                	mov    al,BYTE PTR [ecx]
c0000924:	88 c2                	mov    dl,al
c0000926:	f6 82 40 ce 01 c0 08 	test   BYTE PTR [edx-0x3ffe31c0],0x8
c000092d:	75 04                	jne    c0000933 <simple_strtoul+0x23>
c000092f:	3c 09                	cmp    al,0x9
c0000931:	75 0d                	jne    c0000940 <simple_strtoul+0x30>
c0000933:	41                   	inc    ecx
c0000934:	eb ea                	jmp    c0000920 <simple_strtoul+0x10>
c0000936:	8d 76 00             	lea    esi,[esi+0x0]
c0000939:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000940:	3c 2d                	cmp    al,0x2d
c0000942:	0f 84 48 01 00 00    	je     c0000a90 <simple_strtoul+0x180>
c0000948:	3c 2b                	cmp    al,0x2b
c000094a:	0f 84 e0 00 00 00    	je     c0000a30 <simple_strtoul+0x120>
c0000950:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000958:	85 f6                	test   esi,esi
c000095a:	0f 85 e1 00 00 00    	jne    c0000a41 <simple_strtoul+0x131>
c0000960:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000963:	80 fa 30             	cmp    dl,0x30
c0000966:	0f 84 75 01 00 00    	je     c0000ae1 <simple_strtoul+0x1d1>
c000096c:	be 0a 00 00 00       	mov    esi,0xa
c0000971:	84 d2                	test   dl,dl
c0000973:	0f 84 9f 01 00 00    	je     c0000b18 <simple_strtoul+0x208>
c0000979:	31 ed                	xor    ebp,ebp
c000097b:	31 ff                	xor    edi,edi
c000097d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000984:	eb 35                	jmp    c00009bb <simple_strtoul+0xab>
c0000986:	8d 76 00             	lea    esi,[esi+0x0]
c0000989:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000990:	83 eb 30             	sub    ebx,0x30
c0000993:	39 f3                	cmp    ebx,esi
c0000995:	73 59                	jae    c00009f0 <simple_strtoul+0xe0>
c0000997:	31 d2                	xor    edx,edx
c0000999:	89 d8                	mov    eax,ebx
c000099b:	f7 d0                	not    eax
c000099d:	f7 f6                	div    esi
c000099f:	39 f8                	cmp    eax,edi
c00009a1:	0f 82 c9 00 00 00    	jb     c0000a70 <simple_strtoul+0x160>
c00009a7:	0f af fe             	imul   edi,esi
c00009aa:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009b1:	01 df                	add    edi,ebx
c00009b3:	41                   	inc    ecx
c00009b4:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c00009b7:	84 d2                	test   dl,dl
c00009b9:	74 35                	je     c00009f0 <simple_strtoul+0xe0>
c00009bb:	31 db                	xor    ebx,ebx
c00009bd:	88 d3                	mov    bl,dl
c00009bf:	f6 83 40 ce 01 c0 04 	test   BYTE PTR [ebx-0x3ffe31c0],0x4
c00009c6:	75 c8                	jne    c0000990 <simple_strtoul+0x80>
c00009c8:	52                   	push   edx
c00009c9:	e8 02 ff ff ff       	call   c00008d0 <toupper>
c00009ce:	31 d2                	xor    edx,edx
c00009d0:	5b                   	pop    ebx
c00009d1:	88 c2                	mov    dl,al
c00009d3:	f6 82 40 ce 01 c0 01 	test   BYTE PTR [edx-0x3ffe31c0],0x1
c00009da:	74 14                	je     c00009f0 <simple_strtoul+0xe0>
c00009dc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009df:	39 f3                	cmp    ebx,esi
c00009e1:	72 b4                	jb     c0000997 <simple_strtoul+0x87>
c00009e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009f4:	85 c0                	test   eax,eax
c00009f6:	74 18                	je     c0000a10 <simple_strtoul+0x100>
c00009f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009fb:	09 f8                	or     eax,edi
c00009fd:	0f 85 7d 00 00 00    	jne    c0000a80 <simple_strtoul+0x170>
c0000a03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a07:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a0b:	31 ff                	xor    edi,edi
c0000a0d:	89 30                	mov    DWORD PTR [eax],esi
c0000a0f:	90                   	nop
c0000a10:	4d                   	dec    ebp
c0000a11:	75 05                	jne    c0000a18 <simple_strtoul+0x108>
c0000a13:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a18:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a1d:	75 02                	jne    c0000a21 <simple_strtoul+0x111>
c0000a1f:	f7 df                	neg    edi
c0000a21:	83 c4 08             	add    esp,0x8
c0000a24:	89 f8                	mov    eax,edi
c0000a26:	5b                   	pop    ebx
c0000a27:	5e                   	pop    esi
c0000a28:	5f                   	pop    edi
c0000a29:	5d                   	pop    ebp
c0000a2a:	c3                   	ret    
c0000a2b:	90                   	nop
c0000a2c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a30:	41                   	inc    ecx
c0000a31:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a39:	85 f6                	test   esi,esi
c0000a3b:	0f 84 1f ff ff ff    	je     c0000960 <simple_strtoul+0x50>
c0000a41:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a44:	83 f8 22             	cmp    eax,0x22
c0000a47:	77 7b                	ja     c0000ac4 <simple_strtoul+0x1b4>
c0000a49:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a4c:	83 fe 08             	cmp    esi,0x8
c0000a4f:	0f 84 b3 00 00 00    	je     c0000b08 <simple_strtoul+0x1f8>
c0000a55:	83 fe 10             	cmp    esi,0x10
c0000a58:	0f 85 13 ff ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000a5e:	80 fa 30             	cmp    dl,0x30
c0000a61:	74 3b                	je     c0000a9e <simple_strtoul+0x18e>
c0000a63:	be 10 00 00 00       	mov    esi,0x10
c0000a68:	e9 04 ff ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a70:	bd 01 00 00 00       	mov    ebp,0x1
c0000a75:	31 ff                	xor    edi,edi
c0000a77:	e9 37 ff ff ff       	jmp    c00009b3 <simple_strtoul+0xa3>
c0000a7c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a84:	89 08                	mov    DWORD PTR [eax],ecx
c0000a86:	eb 88                	jmp    c0000a10 <simple_strtoul+0x100>
c0000a88:	90                   	nop
c0000a89:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a90:	41                   	inc    ecx
c0000a91:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a99:	e9 ba fe ff ff       	jmp    c0000958 <simple_strtoul+0x48>
c0000a9e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000aa2:	88 04 24             	mov    BYTE PTR [esp],al
c0000aa5:	50                   	push   eax
c0000aa6:	e8 45 fe ff ff       	call   c00008f0 <tolower>
c0000aab:	5e                   	pop    esi
c0000aac:	83 f8 78             	cmp    eax,0x78
c0000aaf:	0f 84 88 00 00 00    	je     c0000b3d <simple_strtoul+0x22d>
c0000ab5:	41                   	inc    ecx
c0000ab6:	be 10 00 00 00       	mov    esi,0x10
c0000abb:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000abf:	e9 ad fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000ac4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ac8:	85 ff                	test   edi,edi
c0000aca:	74 5e                	je     c0000b2a <simple_strtoul+0x21a>
c0000acc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ad0:	85 c9                	test   ecx,ecx
c0000ad2:	75 50                	jne    c0000b24 <simple_strtoul+0x214>
c0000ad4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000ada:	31 ff                	xor    edi,edi
c0000adc:	e9 37 ff ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000ae1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ae5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ae8:	50                   	push   eax
c0000ae9:	e8 02 fe ff ff       	call   c00008f0 <tolower>
c0000aee:	5d                   	pop    ebp
c0000aef:	83 f8 78             	cmp    eax,0x78
c0000af2:	74 3d                	je     c0000b31 <simple_strtoul+0x221>
c0000af4:	41                   	inc    ecx
c0000af5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000af9:	80 fa 30             	cmp    dl,0x30
c0000afc:	74 13                	je     c0000b11 <simple_strtoul+0x201>
c0000afe:	be 08 00 00 00       	mov    esi,0x8
c0000b03:	e9 69 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000b08:	80 fa 30             	cmp    dl,0x30
c0000b0b:	0f 85 60 fe ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000b11:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000b15:	41                   	inc    ecx
c0000b16:	eb e6                	jmp    c0000afe <simple_strtoul+0x1ee>
c0000b18:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b1c:	85 d2                	test   edx,edx
c0000b1e:	74 0a                	je     c0000b2a <simple_strtoul+0x21a>
c0000b20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b24:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b28:	89 30                	mov    DWORD PTR [eax],esi
c0000b2a:	31 ff                	xor    edi,edi
c0000b2c:	e9 e7 fe ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000b31:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b35:	83 c1 02             	add    ecx,0x2
c0000b38:	e9 21 ff ff ff       	jmp    c0000a5e <simple_strtoul+0x14e>
c0000b3d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b41:	be 10 00 00 00       	mov    esi,0x10
c0000b46:	83 c1 02             	add    ecx,0x2
c0000b49:	e9 23 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>

c0000b4e <largebin_index>:
c0000b4e:	89 c2                	mov    edx,eax
c0000b50:	c1 ea 08             	shr    edx,0x8
c0000b53:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b59:	77 10                	ja     c0000b6b <largebin_index+0x1d>
c0000b5b:	0f bd d2             	bsr    edx,edx
c0000b5e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b61:	d3 e8                	shr    eax,cl
c0000b63:	83 e0 03             	and    eax,0x3
c0000b66:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b6a:	c3                   	ret    
c0000b6b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b70:	c3                   	ret    

c0000b71 <malloc_init_state>:
c0000b71:	53                   	push   ebx
c0000b72:	8d 50 34             	lea    edx,[eax+0x34]
c0000b75:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b7b:	89 d1                	mov    ecx,edx
c0000b7d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b80:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b83:	83 c2 08             	add    edx,0x8
c0000b86:	39 da                	cmp    edx,ebx
c0000b88:	75 f3                	jne    c0000b7d <malloc_init_state+0xc>
c0000b8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b8c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b96:	83 e2 03             	and    edx,0x3
c0000b99:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ba3:	83 ca 48             	or     edx,0x48
c0000ba6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bb0:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bba:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bc1:	89 10                	mov    DWORD PTR [eax],edx
c0000bc3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bc6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bd0:	5b                   	pop    ebx
c0000bd1:	c3                   	ret    

c0000bd2 <malloc_consolidate>:
c0000bd2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bd4:	85 d2                	test   edx,edx
c0000bd6:	0f 84 d8 00 00 00    	je     c0000cb4 <malloc_consolidate+0xe2>
c0000bdc:	55                   	push   ebp
c0000bdd:	83 e2 fd             	and    edx,0xfffffffd
c0000be0:	57                   	push   edi
c0000be1:	89 c5                	mov    ebp,eax
c0000be3:	56                   	push   esi
c0000be4:	8d 78 34             	lea    edi,[eax+0x34]
c0000be7:	53                   	push   ebx
c0000be8:	83 ec 10             	sub    esp,0x10
c0000beb:	89 10                	mov    DWORD PTR [eax],edx
c0000bed:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bf1:	c1 ea 03             	shr    edx,0x3
c0000bf4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bf8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bfc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bff:	85 d2                	test   edx,edx
c0000c01:	0f 84 98 00 00 00    	je     c0000c9f <malloc_consolidate+0xcd>
c0000c07:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c0e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c11:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c14:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c18:	89 f9                	mov    ecx,edi
c0000c1a:	83 e1 fe             	and    ecx,0xfffffffe
c0000c1d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c20:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c23:	83 e3 fc             	and    ebx,0xfffffffc
c0000c26:	83 e7 01             	and    edi,0x1
c0000c29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c2c:	75 14                	jne    c0000c42 <malloc_consolidate+0x70>
c0000c2e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c30:	29 fa                	sub    edx,edi
c0000c32:	01 f9                	add    ecx,edi
c0000c34:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c37:	89 fb                	mov    ebx,edi
c0000c39:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c3c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c3f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c42:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c45:	74 40                	je     c0000c87 <malloc_consolidate+0xb5>
c0000c47:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c4a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c4d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c51:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c54:	83 e7 01             	and    edi,0x1
c0000c57:	75 0e                	jne    c0000c67 <malloc_consolidate+0x95>
c0000c59:	01 d9                	add    ecx,ebx
c0000c5b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c5e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c61:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c64:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c67:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c6a:	89 ce                	mov    esi,ecx
c0000c6c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c6f:	83 ce 01             	or     esi,0x1
c0000c72:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c75:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c78:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c7b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c7f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c82:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c85:	eb 0c                	jmp    c0000c93 <malloc_consolidate+0xc1>
c0000c87:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c8a:	83 c9 01             	or     ecx,0x1
c0000c8d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c90:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c97:	85 d2                	test   edx,edx
c0000c99:	0f 85 6f ff ff ff    	jne    c0000c0e <malloc_consolidate+0x3c>
c0000c9f:	83 c5 04             	add    ebp,0x4
c0000ca2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ca6:	0f 85 50 ff ff ff    	jne    c0000bfc <malloc_consolidate+0x2a>
c0000cac:	83 c4 10             	add    esp,0x10
c0000caf:	5b                   	pop    ebx
c0000cb0:	5e                   	pop    esi
c0000cb1:	5f                   	pop    edi
c0000cb2:	5d                   	pop    ebp
c0000cb3:	c3                   	ret    
c0000cb4:	e9 b8 fe ff ff       	jmp    c0000b71 <malloc_init_state>

c0000cb9 <dlfree>:
c0000cb9:	57                   	push   edi
c0000cba:	56                   	push   esi
c0000cbb:	53                   	push   ebx
c0000cbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000cc0:	85 db                	test   ebx,ebx
c0000cc2:	0f 84 e2 00 00 00    	je     c0000daa <dlfree+0xf1>
c0000cc8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000ccb:	8b 0d 40 fb 01 c0    	mov    ecx,DWORD PTR ds:0xc001fb40
c0000cd1:	89 f0                	mov    eax,esi
c0000cd3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cd6:	83 e0 fc             	and    eax,0xfffffffc
c0000cd9:	39 c1                	cmp    ecx,eax
c0000cdb:	72 24                	jb     c0000d01 <dlfree+0x48>
c0000cdd:	83 c9 03             	or     ecx,0x3
c0000ce0:	c1 e8 03             	shr    eax,0x3
c0000ce3:	89 0d 40 fb 01 c0    	mov    DWORD PTR ds:0xc001fb40,ecx
c0000ce9:	83 e8 02             	sub    eax,0x2
c0000cec:	8b 0c 85 44 fb 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe04bc]
c0000cf3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cf5:	89 14 85 44 fb 01 c0 	mov    DWORD PTR [eax*4-0x3ffe04bc],edx
c0000cfc:	e9 a9 00 00 00       	jmp    c0000daa <dlfree+0xf1>
c0000d01:	83 e6 02             	and    esi,0x2
c0000d04:	0f 85 a0 00 00 00    	jne    c0000daa <dlfree+0xf1>
c0000d0a:	83 c9 01             	or     ecx,0x1
c0000d0d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d10:	89 0d 40 fb 01 c0    	mov    DWORD PTR ds:0xc001fb40,ecx
c0000d16:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d19:	83 e1 fc             	and    ecx,0xfffffffc
c0000d1c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d20:	75 13                	jne    c0000d35 <dlfree+0x7c>
c0000d22:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d25:	29 da                	sub    edx,ebx
c0000d27:	01 d8                	add    eax,ebx
c0000d29:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d2c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d2f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d32:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d35:	39 35 6c fb 01 c0    	cmp    DWORD PTR ds:0xc001fb6c,esi
c0000d3b:	74 40                	je     c0000d7d <dlfree+0xc4>
c0000d3d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d41:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d44:	80 e3 01             	and    bl,0x1
c0000d47:	75 0e                	jne    c0000d57 <dlfree+0x9e>
c0000d49:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d4c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d4f:	01 c8                	add    eax,ecx
c0000d51:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d54:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d57:	8b 0d 7c fb 01 c0    	mov    ecx,DWORD PTR ds:0xc001fb7c
c0000d5d:	c7 42 0c 74 fb 01 c0 	mov    DWORD PTR [edx+0xc],0xc001fb74
c0000d64:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d67:	89 15 7c fb 01 c0    	mov    DWORD PTR ds:0xc001fb7c,edx
c0000d6d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d70:	89 c1                	mov    ecx,eax
c0000d72:	83 c9 01             	or     ecx,0x1
c0000d75:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d78:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d7b:	eb 10                	jmp    c0000d8d <dlfree+0xd4>
c0000d7d:	01 c8                	add    eax,ecx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 15 6c fb 01 c0    	mov    DWORD PTR ds:0xc001fb6c,edx
c0000d8d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d92:	76 16                	jbe    c0000daa <dlfree+0xf1>
c0000d94:	f6 05 40 fb 01 c0 02 	test   BYTE PTR ds:0xc001fb40,0x2
c0000d9b:	74 0d                	je     c0000daa <dlfree+0xf1>
c0000d9d:	5b                   	pop    ebx
c0000d9e:	b8 40 fb 01 c0       	mov    eax,0xc001fb40
c0000da3:	5e                   	pop    esi
c0000da4:	5f                   	pop    edi
c0000da5:	e9 28 fe ff ff       	jmp    c0000bd2 <malloc_consolidate>
c0000daa:	5b                   	pop    ebx
c0000dab:	5e                   	pop    esi
c0000dac:	5f                   	pop    edi
c0000dad:	c3                   	ret    

c0000dae <sYSMALLOc>:
c0000dae:	55                   	push   ebp
c0000daf:	57                   	push   edi
c0000db0:	56                   	push   esi
c0000db1:	53                   	push   ebx
c0000db2:	89 d3                	mov    ebx,edx
c0000db4:	83 ec 2c             	sub    esp,0x2c
c0000db7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dbb:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dc1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dc4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dc7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dcb:	74 1f                	je     c0000dec <sYSMALLOc+0x3e>
c0000dcd:	89 d8                	mov    eax,ebx
c0000dcf:	e8 fe fd ff ff       	call   c0000bd2 <malloc_consolidate>
c0000dd4:	83 ec 0c             	sub    esp,0xc
c0000dd7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ddb:	83 e8 07             	sub    eax,0x7
c0000dde:	50                   	push   eax
c0000ddf:	e8 30 02 00 00       	call   c0001014 <dlmalloc>
c0000de4:	83 c4 10             	add    esp,0x10
c0000de7:	e9 20 02 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000dec:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000def:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000df5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000df8:	83 e0 fc             	and    eax,0xfffffffc
c0000dfb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000dff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e03:	83 c0 10             	add    eax,0x10
c0000e06:	01 c1                	add    ecx,eax
c0000e08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e0c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e13:	74 04                	je     c0000e19 <sYSMALLOc+0x6b>
c0000e15:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e19:	f7 da                	neg    edx
c0000e1b:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e1f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e23:	21 d1                	and    ecx,edx
c0000e25:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e29:	7f 07                	jg     c0000e32 <sYSMALLOc+0x84>
c0000e2b:	31 c0                	xor    eax,eax
c0000e2d:	e9 da 01 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000e32:	83 ec 0c             	sub    esp,0xc
c0000e35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e39:	e8 b2 6e 00 00       	call   c0007cf0 <sbrk>
c0000e3e:	83 c4 10             	add    esp,0x10
c0000e41:	89 c6                	mov    esi,eax
c0000e43:	83 f8 ff             	cmp    eax,0xffffffff
c0000e46:	74 e3                	je     c0000e2b <sYSMALLOc+0x7d>
c0000e48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e4c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e50:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e53:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e59:	39 f1                	cmp    ecx,esi
c0000e5b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e61:	75 13                	jne    c0000e76 <sYSMALLOc+0xc8>
c0000e63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e67:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e6b:	83 c8 01             	or     eax,0x1
c0000e6e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e71:	e9 3e 01 00 00       	jmp    c0000fb4 <sYSMALLOc+0x206>
c0000e76:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e7c:	88 d0                	mov    al,dl
c0000e7e:	83 e0 01             	and    eax,0x1
c0000e81:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e86:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e8a:	0f 95 c0             	setne  al
c0000e8d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e91:	39 f1                	cmp    ecx,esi
c0000e93:	76 12                	jbe    c0000ea7 <sYSMALLOc+0xf9>
c0000e95:	84 c0                	test   al,al
c0000e97:	74 0e                	je     c0000ea7 <sYSMALLOc+0xf9>
c0000e99:	83 e2 fe             	and    edx,0xfffffffe
c0000e9c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000ea2:	e9 83 00 00 00       	jmp    c0000f2a <sYSMALLOc+0x17c>
c0000ea7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000eac:	74 7c                	je     c0000f2a <sYSMALLOc+0x17c>
c0000eae:	84 c0                	test   al,al
c0000eb0:	74 0c                	je     c0000ebe <sYSMALLOc+0x110>
c0000eb2:	89 f0                	mov    eax,esi
c0000eb4:	29 c8                	sub    eax,ecx
c0000eb6:	01 e8                	add    eax,ebp
c0000eb8:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ebe:	89 f2                	mov    edx,esi
c0000ec0:	83 e2 07             	and    edx,0x7
c0000ec3:	74 0c                	je     c0000ed1 <sYSMALLOc+0x123>
c0000ec5:	b8 08 00 00 00       	mov    eax,0x8
c0000eca:	29 d0                	sub    eax,edx
c0000ecc:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ecf:	eb 04                	jmp    c0000ed5 <sYSMALLOc+0x127>
c0000ed1:	89 f5                	mov    ebp,esi
c0000ed3:	31 c0                	xor    eax,eax
c0000ed5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ed9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000edd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	83 ec 0c             	sub    esp,0xc
c0000ee6:	01 f1                	add    ecx,esi
c0000ee8:	01 ca                	add    edx,ecx
c0000eea:	29 c8                	sub    eax,ecx
c0000eec:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ef0:	01 c2                	add    edx,eax
c0000ef2:	52                   	push   edx
c0000ef3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ef7:	e8 f4 6d 00 00       	call   c0007cf0 <sbrk>
c0000efc:	83 c4 10             	add    esp,0x10
c0000eff:	83 f8 ff             	cmp    eax,0xffffffff
c0000f02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f06:	75 0f                	jne    c0000f17 <sYSMALLOc+0x169>
c0000f08:	83 ec 0c             	sub    esp,0xc
c0000f0b:	6a 00                	push   0x0
c0000f0d:	e8 de 6d 00 00       	call   c0007cf0 <sbrk>
c0000f12:	83 c4 10             	add    esp,0x10
c0000f15:	eb 30                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f17:	39 c6                	cmp    esi,eax
c0000f19:	76 33                	jbe    c0000f4e <sYSMALLOc+0x1a0>
c0000f1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f1f:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f26:	01 f0                	add    eax,esi
c0000f28:	eb 1d                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f2a:	83 ec 0c             	sub    esp,0xc
c0000f2d:	89 f5                	mov    ebp,esi
c0000f2f:	6a 00                	push   0x0
c0000f31:	e8 ba 6d 00 00       	call   c0007cf0 <sbrk>
c0000f36:	89 c2                	mov    edx,eax
c0000f38:	29 f2                	sub    edx,esi
c0000f3a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f3e:	83 c4 10             	add    esp,0x10
c0000f41:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f47:	31 d2                	xor    edx,edx
c0000f49:	83 f8 ff             	cmp    eax,0xffffffff
c0000f4c:	74 66                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f4e:	29 e8                	sub    eax,ebp
c0000f50:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f53:	01 d0                	add    eax,edx
c0000f55:	83 c8 01             	or     eax,0x1
c0000f58:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f5b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f66:	74 4c                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f6c:	83 e8 0c             	sub    eax,0xc
c0000f6f:	83 e0 f8             	and    eax,0xfffffff8
c0000f72:	89 c2                	mov    edx,eax
c0000f74:	83 ca 01             	or     edx,0x1
c0000f77:	83 f8 0f             	cmp    eax,0xf
c0000f7a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f7d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f85:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f8d:	76 25                	jbe    c0000fb4 <sYSMALLOc+0x206>
c0000f8f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f95:	83 ec 0c             	sub    esp,0xc
c0000f98:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fa2:	83 c7 08             	add    edi,0x8
c0000fa5:	57                   	push   edi
c0000fa6:	e8 0e fd ff ff       	call   c0000cb9 <dlfree>
c0000fab:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fb1:	83 c4 10             	add    esp,0x10
c0000fb4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fba:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fc0:	73 06                	jae    c0000fc8 <sYSMALLOc+0x21a>
c0000fc2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fc8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fce:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fd4:	73 06                	jae    c0000fdc <sYSMALLOc+0x22e>
c0000fd6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fdc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fdf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fe2:	83 e2 fc             	and    edx,0xfffffffc
c0000fe5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fe9:	0f 82 3c fe ff ff    	jb     c0000e2b <sYSMALLOc+0x7d>
c0000fef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ff3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ff6:	29 fa                	sub    edx,edi
c0000ff8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ffb:	83 ca 01             	or     edx,0x1
c0000ffe:	89 fb                	mov    ebx,edi
c0001000:	83 c0 08             	add    eax,0x8
c0001003:	83 cb 01             	or     ebx,0x1
c0001006:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001009:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000100c:	83 c4 2c             	add    esp,0x2c
c000100f:	5b                   	pop    ebx
c0001010:	5e                   	pop    esi
c0001011:	5f                   	pop    edi
c0001012:	5d                   	pop    ebp
c0001013:	c3                   	ret    

c0001014 <dlmalloc>:
c0001014:	55                   	push   ebp
c0001015:	57                   	push   edi
c0001016:	56                   	push   esi
c0001017:	53                   	push   ebx
c0001018:	83 ec 1c             	sub    esp,0x1c
c000101b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000101f:	83 f8 df             	cmp    eax,0xffffffdf
c0001022:	0f 87 70 03 00 00    	ja     c0001398 <dlmalloc+0x384>
c0001028:	83 c0 0b             	add    eax,0xb
c000102b:	be 10 00 00 00       	mov    esi,0x10
c0001030:	83 f8 0f             	cmp    eax,0xf
c0001033:	76 05                	jbe    c000103a <dlmalloc+0x26>
c0001035:	83 e0 f8             	and    eax,0xfffffff8
c0001038:	89 c6                	mov    esi,eax
c000103a:	8b 3d 40 fb 01 c0    	mov    edi,DWORD PTR ds:0xc001fb40
c0001040:	f7 c7 01 00 00 00    	test   edi,0x1
c0001046:	75 17                	jne    c000105f <dlmalloc+0x4b>
c0001048:	85 ff                	test   edi,edi
c000104a:	0f 85 05 03 00 00    	jne    c0001355 <dlmalloc+0x341>
c0001050:	b8 40 fb 01 c0       	mov    eax,0xc001fb40
c0001055:	e8 78 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c000105a:	e9 f6 02 00 00       	jmp    c0001355 <dlmalloc+0x341>
c000105f:	39 f7                	cmp    edi,esi
c0001061:	72 1f                	jb     c0001082 <dlmalloc+0x6e>
c0001063:	89 f2                	mov    edx,esi
c0001065:	c1 ea 03             	shr    edx,0x3
c0001068:	83 ea 02             	sub    edx,0x2
c000106b:	8b 04 95 44 fb 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe04bc]
c0001072:	85 c0                	test   eax,eax
c0001074:	74 0c                	je     c0001082 <dlmalloc+0x6e>
c0001076:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001079:	89 0c 95 44 fb 01 c0 	mov    DWORD PTR [edx*4-0x3ffe04bc],ecx
c0001080:	eb 30                	jmp    c00010b2 <dlmalloc+0x9e>
c0001082:	89 f0                	mov    eax,esi
c0001084:	81 fe ff 00 00 00    	cmp    esi,0xff
c000108a:	77 2e                	ja     c00010ba <dlmalloc+0xa6>
c000108c:	c1 e8 03             	shr    eax,0x3
c000108f:	8d 14 c5 74 fb 01 c0 	lea    edx,[eax*8-0x3ffe048c]
c0001096:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000109a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000109d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010a0:	39 c3                	cmp    ebx,eax
c00010a2:	74 2e                	je     c00010d2 <dlmalloc+0xbe>
c00010a4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010a7:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010ac:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010af:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010b2:	83 c0 08             	add    eax,0x8
c00010b5:	e9 e0 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c00010ba:	e8 8f fa ff ff       	call   c0000b4e <largebin_index>
c00010bf:	83 e7 02             	and    edi,0x2
c00010c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010c6:	74 0a                	je     c00010d2 <dlmalloc+0xbe>
c00010c8:	b8 40 fb 01 c0       	mov    eax,0xc001fb40
c00010cd:	e8 00 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c00010d2:	8d 46 10             	lea    eax,[esi+0x10]
c00010d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010d9:	8b 1d 80 fb 01 c0    	mov    ebx,DWORD PTR ds:0xc001fb80
c00010df:	81 fb 74 fb 01 c0    	cmp    ebx,0xc001fb74
c00010e5:	0f 84 13 01 00 00    	je     c00011fe <dlmalloc+0x1ea>
c00010eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ee:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010f1:	83 e7 fc             	and    edi,0xfffffffc
c00010f4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010fa:	77 4c                	ja     c0001148 <dlmalloc+0x134>
c00010fc:	3d 74 fb 01 c0       	cmp    eax,0xc001fb74
c0001101:	75 45                	jne    c0001148 <dlmalloc+0x134>
c0001103:	39 1d 70 fb 01 c0    	cmp    DWORD PTR ds:0xc001fb70,ebx
c0001109:	75 3d                	jne    c0001148 <dlmalloc+0x134>
c000110b:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000110f:	73 37                	jae    c0001148 <dlmalloc+0x134>
c0001111:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001114:	89 fa                	mov    edx,edi
c0001116:	a3 7c fb 01 c0       	mov    ds:0xc001fb7c,eax
c000111b:	a3 80 fb 01 c0       	mov    ds:0xc001fb80,eax
c0001120:	a3 70 fb 01 c0       	mov    ds:0xc001fb70,eax
c0001125:	29 f2                	sub    edx,esi
c0001127:	c7 40 08 74 fb 01 c0 	mov    DWORD PTR [eax+0x8],0xc001fb74
c000112e:	c7 40 0c 74 fb 01 c0 	mov    DWORD PTR [eax+0xc],0xc001fb74
c0001135:	83 ce 01             	or     esi,0x1
c0001138:	89 d1                	mov    ecx,edx
c000113a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000113d:	83 c9 01             	or     ecx,0x1
c0001140:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001143:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001146:	eb 15                	jmp    c000115d <dlmalloc+0x149>
c0001148:	a3 80 fb 01 c0       	mov    ds:0xc001fb80,eax
c000114d:	39 fe                	cmp    esi,edi
c000114f:	c7 40 08 74 fb 01 c0 	mov    DWORD PTR [eax+0x8],0xc001fb74
c0001156:	75 0d                	jne    c0001165 <dlmalloc+0x151>
c0001158:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000115d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001160:	e9 35 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001165:	89 f8                	mov    eax,edi
c0001167:	81 ff ff 00 00 00    	cmp    edi,0xff
c000116d:	77 19                	ja     c0001188 <dlmalloc+0x174>
c000116f:	c1 e8 03             	shr    eax,0x3
c0001172:	8d 14 00             	lea    edx,[eax+eax*1]
c0001175:	83 c2 0d             	add    edx,0xd
c0001178:	8d 2c 95 38 fb 01 c0 	lea    ebp,[edx*4-0x3ffe04c8]
c000117f:	8b 14 95 40 fb 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe04c0]
c0001186:	eb 46                	jmp    c00011ce <dlmalloc+0x1ba>
c0001188:	e8 c1 f9 ff ff       	call   c0000b4e <largebin_index>
c000118d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001190:	83 c2 0d             	add    edx,0xd
c0001193:	8d 0c 95 40 fb 01 c0 	lea    ecx,[edx*4-0x3ffe04c0]
c000119a:	8b 14 95 40 fb 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe04c0]
c00011a1:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011a4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011a8:	89 d5                	mov    ebp,edx
c00011aa:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011ae:	74 1e                	je     c00011ce <dlmalloc+0x1ba>
c00011b0:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011b3:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011b6:	77 12                	ja     c00011ca <dlmalloc+0x1b6>
c00011b8:	83 cf 01             	or     edi,0x1
c00011bb:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011be:	76 05                	jbe    c00011c5 <dlmalloc+0x1b1>
c00011c0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011c3:	eb f6                	jmp    c00011bb <dlmalloc+0x1a7>
c00011c5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011c8:	eb 04                	jmp    c00011ce <dlmalloc+0x1ba>
c00011ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ce:	89 c7                	mov    edi,eax
c00011d0:	88 c1                	mov    cl,al
c00011d2:	c1 ff 05             	sar    edi,0x5
c00011d5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011d9:	bf 01 00 00 00       	mov    edi,0x1
c00011de:	d3 e7                	shl    edi,cl
c00011e0:	89 f8                	mov    eax,edi
c00011e2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011e6:	09 04 bd 74 fe 01 c0 	or     DWORD PTR [edi*4-0x3ffe018c],eax
c00011ed:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011f0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011f3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011f6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011f9:	e9 db fe ff ff       	jmp    c00010d9 <dlmalloc+0xc5>
c00011fe:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001204:	76 78                	jbe    c000127e <dlmalloc+0x26a>
c0001206:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000120a:	8d 04 c5 74 fb 01 c0 	lea    eax,[eax*8-0x3ffe048c]
c0001211:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001214:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001217:	39 ca                	cmp    edx,ecx
c0001219:	74 63                	je     c000127e <dlmalloc+0x26a>
c000121b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000121e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001221:	83 e3 fc             	and    ebx,0xfffffffc
c0001224:	39 de                	cmp    esi,ebx
c0001226:	77 52                	ja     c000127a <dlmalloc+0x266>
c0001228:	89 df                	mov    edi,ebx
c000122a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000122d:	29 f7                	sub    edi,esi
c000122f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001232:	01 d3                	add    ebx,edx
c0001234:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001237:	83 ff 0f             	cmp    edi,0xf
c000123a:	8d 42 08             	lea    eax,[edx+0x8]
c000123d:	77 09                	ja     c0001248 <dlmalloc+0x234>
c000123f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001243:	e9 52 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001248:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000124b:	83 ce 01             	or     esi,0x1
c000124e:	89 0d 7c fb 01 c0    	mov    DWORD PTR ds:0xc001fb7c,ecx
c0001254:	89 0d 80 fb 01 c0    	mov    DWORD PTR ds:0xc001fb80,ecx
c000125a:	c7 41 08 74 fb 01 c0 	mov    DWORD PTR [ecx+0x8],0xc001fb74
c0001261:	c7 41 0c 74 fb 01 c0 	mov    DWORD PTR [ecx+0xc],0xc001fb74
c0001268:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000126b:	89 fa                	mov    edx,edi
c000126d:	83 ca 01             	or     edx,0x1
c0001270:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001273:	89 3b                	mov    DWORD PTR [ebx],edi
c0001275:	e9 20 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c000127a:	89 c2                	mov    edx,eax
c000127c:	eb 99                	jmp    c0001217 <dlmalloc+0x203>
c000127e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001282:	b8 01 00 00 00       	mov    eax,0x1
c0001287:	41                   	inc    ecx
c0001288:	89 cb                	mov    ebx,ecx
c000128a:	8d 14 cd 6c fb 01 c0 	lea    edx,[ecx*8-0x3ffe0494]
c0001291:	c1 eb 05             	shr    ebx,0x5
c0001294:	d3 e0                	shl    eax,cl
c0001296:	8b 3c 9d 74 fe 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe018c]
c000129d:	39 f8                	cmp    eax,edi
c000129f:	77 04                	ja     c00012a5 <dlmalloc+0x291>
c00012a1:	85 c0                	test   eax,eax
c00012a3:	75 26                	jne    c00012cb <dlmalloc+0x2b7>
c00012a5:	43                   	inc    ebx
c00012a6:	83 fb 02             	cmp    ebx,0x2
c00012a9:	0f 87 a6 00 00 00    	ja     c0001355 <dlmalloc+0x341>
c00012af:	8b 3c 9d 74 fe 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe018c]
c00012b6:	85 ff                	test   edi,edi
c00012b8:	74 eb                	je     c00012a5 <dlmalloc+0x291>
c00012ba:	89 d8                	mov    eax,ebx
c00012bc:	c1 e0 06             	shl    eax,0x6
c00012bf:	8d 14 85 6c fb 01 c0 	lea    edx,[eax*4-0x3ffe0494]
c00012c6:	b8 01 00 00 00       	mov    eax,0x1
c00012cb:	85 f8                	test   eax,edi
c00012cd:	75 07                	jne    c00012d6 <dlmalloc+0x2c2>
c00012cf:	83 c2 08             	add    edx,0x8
c00012d2:	01 c0                	add    eax,eax
c00012d4:	eb f5                	jmp    c00012cb <dlmalloc+0x2b7>
c00012d6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012d9:	39 ca                	cmp    edx,ecx
c00012db:	75 14                	jne    c00012f1 <dlmalloc+0x2dd>
c00012dd:	89 c1                	mov    ecx,eax
c00012df:	83 c2 08             	add    edx,0x8
c00012e2:	f7 d1                	not    ecx
c00012e4:	01 c0                	add    eax,eax
c00012e6:	21 cf                	and    edi,ecx
c00012e8:	89 3c 9d 74 fe 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe018c],edi
c00012ef:	eb ac                	jmp    c000129d <dlmalloc+0x289>
c00012f1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012f4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012f7:	83 e0 fc             	and    eax,0xfffffffc
c00012fa:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012fd:	89 c3                	mov    ebx,eax
c00012ff:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001302:	29 f3                	sub    ebx,esi
c0001304:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001307:	83 fb 0f             	cmp    ebx,0xf
c000130a:	8d 41 08             	lea    eax,[ecx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x304>
c000130f:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001313:	e9 82 00 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001318:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000131b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001321:	89 3d 7c fb 01 c0    	mov    DWORD PTR ds:0xc001fb7c,edi
c0001327:	89 3d 80 fb 01 c0    	mov    DWORD PTR ds:0xc001fb80,edi
c000132d:	c7 47 08 74 fb 01 c0 	mov    DWORD PTR [edi+0x8],0xc001fb74
c0001334:	c7 47 0c 74 fb 01 c0 	mov    DWORD PTR [edi+0xc],0xc001fb74
c000133b:	77 06                	ja     c0001343 <dlmalloc+0x32f>
c000133d:	89 3d 70 fb 01 c0    	mov    DWORD PTR ds:0xc001fb70,edi
c0001343:	83 ce 01             	or     esi,0x1
c0001346:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001349:	89 d9                	mov    ecx,ebx
c000134b:	83 c9 01             	or     ecx,0x1
c000134e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001351:	89 1a                	mov    DWORD PTR [edx],ebx
c0001353:	eb 45                	jmp    c000139a <dlmalloc+0x386>
c0001355:	a1 6c fb 01 c0       	mov    eax,ds:0xc001fb6c
c000135a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000135d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001360:	83 e2 fc             	and    edx,0xfffffffc
c0001363:	39 d1                	cmp    ecx,edx
c0001365:	77 1e                	ja     c0001385 <dlmalloc+0x371>
c0001367:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000136a:	89 f3                	mov    ebx,esi
c000136c:	89 0d 6c fb 01 c0    	mov    DWORD PTR ds:0xc001fb6c,ecx
c0001372:	83 cb 01             	or     ebx,0x1
c0001375:	29 f2                	sub    edx,esi
c0001377:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000137a:	83 ca 01             	or     edx,0x1
c000137d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001380:	e9 2d fd ff ff       	jmp    c00010b2 <dlmalloc+0x9e>
c0001385:	83 c4 1c             	add    esp,0x1c
c0001388:	89 f0                	mov    eax,esi
c000138a:	5b                   	pop    ebx
c000138b:	ba 40 fb 01 c0       	mov    edx,0xc001fb40
c0001390:	5e                   	pop    esi
c0001391:	5f                   	pop    edi
c0001392:	5d                   	pop    ebp
c0001393:	e9 16 fa ff ff       	jmp    c0000dae <sYSMALLOc>
c0001398:	31 c0                	xor    eax,eax
c000139a:	83 c4 1c             	add    esp,0x1c
c000139d:	5b                   	pop    ebx
c000139e:	5e                   	pop    esi
c000139f:	5f                   	pop    edi
c00013a0:	5d                   	pop    ebp
c00013a1:	c3                   	ret    

c00013a2 <iALLOc>:
c00013a2:	55                   	push   ebp
c00013a3:	89 c5                	mov    ebp,eax
c00013a5:	57                   	push   edi
c00013a6:	56                   	push   esi
c00013a7:	53                   	push   ebx
c00013a8:	83 ec 2c             	sub    esp,0x2c
c00013ab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013af:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013b7:	83 3d 40 fb 01 c0 00 	cmp    DWORD PTR ds:0xc001fb40,0x0
c00013be:	75 12                	jne    c00013d2 <iALLOc+0x30>
c00013c0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013c4:	b8 40 fb 01 c0       	mov    eax,0xc001fb40
c00013c9:	e8 04 f8 ff ff       	call   c0000bd2 <malloc_consolidate>
c00013ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013d7:	74 12                	je     c00013eb <iALLOc+0x49>
c00013d9:	85 ed                	test   ebp,ebp
c00013db:	0f 84 64 01 00 00    	je     c0001545 <iALLOc+0x1a3>
c00013e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013e9:	eb 33                	jmp    c000141e <iALLOc+0x7c>
c00013eb:	85 ed                	test   ebp,ebp
c00013ed:	75 14                	jne    c0001403 <iALLOc+0x61>
c00013ef:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013f7:	83 c4 2c             	add    esp,0x2c
c00013fa:	5b                   	pop    ebx
c00013fb:	5e                   	pop    esi
c00013fc:	5f                   	pop    edi
c00013fd:	5d                   	pop    ebp
c00013fe:	e9 11 fc ff ff       	jmp    c0001014 <dlmalloc>
c0001403:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000140a:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001412:	83 f8 0f             	cmp    eax,0xf
c0001415:	76 07                	jbe    c000141e <iALLOc+0x7c>
c0001417:	83 e0 f8             	and    eax,0xfffffff8
c000141a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000141e:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001423:	75 09                	jne    c000142e <iALLOc+0x8c>
c0001425:	89 d0                	mov    eax,edx
c0001427:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000142a:	31 f6                	xor    esi,esi
c000142c:	eb 3b                	jmp    c0001469 <iALLOc+0xc7>
c000142e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001430:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001438:	83 c0 0b             	add    eax,0xb
c000143b:	83 f8 0f             	cmp    eax,0xf
c000143e:	76 07                	jbe    c0001447 <iALLOc+0xa5>
c0001440:	83 e0 f8             	and    eax,0xfffffff8
c0001443:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001447:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000144b:	0f af f5             	imul   esi,ebp
c000144e:	eb 25                	jmp    c0001475 <iALLOc+0xd3>
c0001450:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001452:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001455:	bb 10 00 00 00       	mov    ebx,0x10
c000145a:	83 f9 0f             	cmp    ecx,0xf
c000145d:	76 05                	jbe    c0001464 <iALLOc+0xc2>
c000145f:	83 e1 f8             	and    ecx,0xfffffff8
c0001462:	89 cb                	mov    ebx,ecx
c0001464:	01 de                	add    esi,ebx
c0001466:	83 c0 04             	add    eax,0x4
c0001469:	39 c7                	cmp    edi,eax
c000146b:	75 e3                	jne    c0001450 <iALLOc+0xae>
c000146d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001475:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001479:	8b 1d 94 fe 01 c0    	mov    ebx,DWORD PTR ds:0xc001fe94
c000147f:	83 ec 0c             	sub    esp,0xc
c0001482:	c7 05 94 fe 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001fe94,0x0
c000148c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001490:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001494:	50                   	push   eax
c0001495:	e8 7a fb ff ff       	call   c0001014 <dlmalloc>
c000149a:	83 c4 10             	add    esp,0x10
c000149d:	89 1d 94 fe 01 c0    	mov    DWORD PTR ds:0xc001fe94,ebx
c00014a3:	85 c0                	test   eax,eax
c00014a5:	0f 84 92 00 00 00    	je     c000153d <iALLOc+0x19b>
c00014ab:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014ae:	8d 78 f8             	lea    edi,[eax-0x8]
c00014b1:	83 e3 fc             	and    ebx,0xfffffffc
c00014b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014b8:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014bd:	74 1e                	je     c00014dd <iALLOc+0x13b>
c00014bf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014c3:	89 d9                	mov    ecx,ebx
c00014c5:	52                   	push   edx
c00014c6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014ca:	83 e9 04             	sub    ecx,0x4
c00014cd:	51                   	push   ecx
c00014ce:	6a 00                	push   0x0
c00014d0:	50                   	push   eax
c00014d1:	e8 1a f0 ff ff       	call   c00004f0 <memset>
c00014d6:	83 c4 10             	add    esp,0x10
c00014d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014dd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014e2:	75 14                	jne    c00014f8 <iALLOc+0x156>
c00014e4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014e7:	29 f3                	sub    ebx,esi
c00014e9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014ec:	83 cb 01             	or     ebx,0x1
c00014ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014f3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014f6:	89 f3                	mov    ebx,esi
c00014f8:	31 c0                	xor    eax,eax
c00014fa:	4d                   	dec    ebp
c00014fb:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014fe:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001502:	39 c5                	cmp    ebp,eax
c0001504:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001507:	74 2c                	je     c0001535 <iALLOc+0x193>
c0001509:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000150d:	85 c9                	test   ecx,ecx
c000150f:	75 15                	jne    c0001526 <iALLOc+0x184>
c0001511:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001514:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001517:	b9 10 00 00 00       	mov    ecx,0x10
c000151c:	83 fe 0f             	cmp    esi,0xf
c000151f:	76 05                	jbe    c0001526 <iALLOc+0x184>
c0001521:	83 e6 f8             	and    esi,0xfffffff8
c0001524:	89 f1                	mov    ecx,esi
c0001526:	89 ce                	mov    esi,ecx
c0001528:	29 cb                	sub    ebx,ecx
c000152a:	83 ce 01             	or     esi,0x1
c000152d:	40                   	inc    eax
c000152e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001531:	01 cf                	add    edi,ecx
c0001533:	eb c6                	jmp    c00014fb <iALLOc+0x159>
c0001535:	83 cb 01             	or     ebx,0x1
c0001538:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000153b:	eb 08                	jmp    c0001545 <iALLOc+0x1a3>
c000153d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001545:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001549:	83 c4 2c             	add    esp,0x2c
c000154c:	5b                   	pop    ebx
c000154d:	5e                   	pop    esi
c000154e:	5f                   	pop    edi
c000154f:	5d                   	pop    ebp
c0001550:	c3                   	ret    

c0001551 <dlrealloc>:
c0001551:	55                   	push   ebp
c0001552:	57                   	push   edi
c0001553:	56                   	push   esi
c0001554:	53                   	push   ebx
c0001555:	83 ec 1c             	sub    esp,0x1c
c0001558:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000155c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001560:	85 db                	test   ebx,ebx
c0001562:	75 10                	jne    c0001574 <dlrealloc+0x23>
c0001564:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001568:	83 c4 1c             	add    esp,0x1c
c000156b:	5b                   	pop    ebx
c000156c:	5e                   	pop    esi
c000156d:	5f                   	pop    edi
c000156e:	5d                   	pop    ebp
c000156f:	e9 a0 fa ff ff       	jmp    c0001014 <dlmalloc>
c0001574:	83 f8 df             	cmp    eax,0xffffffdf
c0001577:	76 07                	jbe    c0001580 <dlrealloc+0x2f>
c0001579:	31 db                	xor    ebx,ebx
c000157b:	e9 6a 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c0001580:	83 c0 0b             	add    eax,0xb
c0001583:	bd 10 00 00 00       	mov    ebp,0x10
c0001588:	83 f8 0f             	cmp    eax,0xf
c000158b:	76 05                	jbe    c0001592 <dlrealloc+0x41>
c000158d:	83 e0 f8             	and    eax,0xfffffff8
c0001590:	89 c5                	mov    ebp,eax
c0001592:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001595:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001598:	89 c6                	mov    esi,eax
c000159a:	83 e6 fc             	and    esi,0xfffffffc
c000159d:	a8 02                	test   al,0x2
c000159f:	75 d8                	jne    c0001579 <dlrealloc+0x28>
c00015a1:	39 f5                	cmp    ebp,esi
c00015a3:	0f 86 04 01 00 00    	jbe    c00016ad <dlrealloc+0x15c>
c00015a9:	8d 14 37             	lea    edx,[edi+esi*1]
c00015ac:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015af:	39 15 6c fb 01 c0    	cmp    DWORD PTR ds:0xc001fb6c,edx
c00015b5:	75 33                	jne    c00015ea <dlrealloc+0x99>
c00015b7:	83 e1 fc             	and    ecx,0xfffffffc
c00015ba:	01 f1                	add    ecx,esi
c00015bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015c3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015c7:	77 49                	ja     c0001612 <dlrealloc+0xc1>
c00015c9:	01 ef                	add    edi,ebp
c00015cb:	83 e0 01             	and    eax,0x1
c00015ce:	09 e8                	or     eax,ebp
c00015d0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015d3:	89 3d 6c fb 01 c0    	mov    DWORD PTR ds:0xc001fb6c,edi
c00015d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015dd:	29 e8                	sub    eax,ebp
c00015df:	83 c8 01             	or     eax,0x1
c00015e2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015e5:	e9 00 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c00015ea:	89 c8                	mov    eax,ecx
c00015ec:	83 e0 fe             	and    eax,0xfffffffe
c00015ef:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015f4:	75 1c                	jne    c0001612 <dlrealloc+0xc1>
c00015f6:	83 e1 fc             	and    ecx,0xfffffffc
c00015f9:	01 f1                	add    ecx,esi
c00015fb:	39 cd                	cmp    ebp,ecx
c00015fd:	77 13                	ja     c0001612 <dlrealloc+0xc1>
c00015ff:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001602:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001605:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001608:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000160b:	89 ce                	mov    esi,ecx
c000160d:	e9 9b 00 00 00       	jmp    c00016ad <dlrealloc+0x15c>
c0001612:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001616:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001619:	83 ec 0c             	sub    esp,0xc
c000161c:	50                   	push   eax
c000161d:	e8 f2 f9 ff ff       	call   c0001014 <dlmalloc>
c0001622:	83 c4 10             	add    esp,0x10
c0001625:	85 c0                	test   eax,eax
c0001627:	0f 84 4c ff ff ff    	je     c0001579 <dlrealloc+0x28>
c000162d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001630:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001634:	39 ca                	cmp    edx,ecx
c0001636:	75 0a                	jne    c0001642 <dlrealloc+0xf1>
c0001638:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000163b:	83 e0 fc             	and    eax,0xfffffffc
c000163e:	01 c6                	add    esi,eax
c0001640:	eb 6b                	jmp    c00016ad <dlrealloc+0x15c>
c0001642:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001645:	83 f9 27             	cmp    ecx,0x27
c0001648:	76 08                	jbe    c0001652 <dlrealloc+0x101>
c000164a:	89 de                	mov    esi,ebx
c000164c:	89 c7                	mov    edi,eax
c000164e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001650:	eb 43                	jmp    c0001695 <dlrealloc+0x144>
c0001652:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001654:	83 f9 13             	cmp    ecx,0x13
c0001657:	89 10                	mov    DWORD PTR [eax],edx
c0001659:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000165c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000165f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001662:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001665:	76 2e                	jbe    c0001695 <dlrealloc+0x144>
c0001667:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000166a:	83 f9 1b             	cmp    ecx,0x1b
c000166d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001670:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001673:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001676:	76 1d                	jbe    c0001695 <dlrealloc+0x144>
c0001678:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000167b:	83 f9 23             	cmp    ecx,0x23
c000167e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001681:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001684:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001687:	76 0c                	jbe    c0001695 <dlrealloc+0x144>
c0001689:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000168c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000168f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001692:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001695:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001699:	83 ec 0c             	sub    esp,0xc
c000169c:	53                   	push   ebx
c000169d:	e8 17 f6 ff ff       	call   c0000cb9 <dlfree>
c00016a2:	83 c4 10             	add    esp,0x10
c00016a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016a9:	89 c3                	mov    ebx,eax
c00016ab:	eb 3d                	jmp    c00016ea <dlrealloc+0x199>
c00016ad:	89 f2                	mov    edx,esi
c00016af:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016b2:	29 ea                	sub    edx,ebp
c00016b4:	83 e1 01             	and    ecx,0x1
c00016b7:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ba:	83 fa 0f             	cmp    edx,0xf
c00016bd:	77 0b                	ja     c00016ca <dlrealloc+0x179>
c00016bf:	09 ce                	or     esi,ecx
c00016c1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016c4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c8:	eb 20                	jmp    c00016ea <dlrealloc+0x199>
c00016ca:	01 ef                	add    edi,ebp
c00016cc:	83 ec 0c             	sub    esp,0xc
c00016cf:	09 cd                	or     ebp,ecx
c00016d1:	83 ca 01             	or     edx,0x1
c00016d4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016d7:	83 c7 08             	add    edi,0x8
c00016da:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016dd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016e1:	57                   	push   edi
c00016e2:	e8 d2 f5 ff ff       	call   c0000cb9 <dlfree>
c00016e7:	83 c4 10             	add    esp,0x10
c00016ea:	83 c4 1c             	add    esp,0x1c
c00016ed:	89 d8                	mov    eax,ebx
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	c3                   	ret    

c00016f4 <dlmemalign>:
c00016f4:	55                   	push   ebp
c00016f5:	57                   	push   edi
c00016f6:	56                   	push   esi
c00016f7:	53                   	push   ebx
c00016f8:	83 ec 0c             	sub    esp,0xc
c00016fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001703:	83 fa 08             	cmp    edx,0x8
c0001706:	77 10                	ja     c0001718 <dlmemalign+0x24>
c0001708:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000170c:	83 c4 0c             	add    esp,0xc
c000170f:	5b                   	pop    ebx
c0001710:	5e                   	pop    esi
c0001711:	5f                   	pop    edi
c0001712:	5d                   	pop    ebp
c0001713:	e9 fc f8 ff ff       	jmp    c0001014 <dlmalloc>
c0001718:	bf 10 00 00 00       	mov    edi,0x10
c000171d:	83 fa 0f             	cmp    edx,0xf
c0001720:	76 13                	jbe    c0001735 <dlmemalign+0x41>
c0001722:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001725:	85 d1                	test   ecx,edx
c0001727:	75 04                	jne    c000172d <dlmemalign+0x39>
c0001729:	89 d7                	mov    edi,edx
c000172b:	eb 08                	jmp    c0001735 <dlmemalign+0x41>
c000172d:	39 d7                	cmp    edi,edx
c000172f:	73 04                	jae    c0001735 <dlmemalign+0x41>
c0001731:	01 ff                	add    edi,edi
c0001733:	eb f8                	jmp    c000172d <dlmemalign+0x39>
c0001735:	83 f8 df             	cmp    eax,0xffffffdf
c0001738:	76 07                	jbe    c0001741 <dlmemalign+0x4d>
c000173a:	31 c0                	xor    eax,eax
c000173c:	e9 ce 00 00 00       	jmp    c000180f <dlmemalign+0x11b>
c0001741:	83 c0 0b             	add    eax,0xb
c0001744:	bd 10 00 00 00       	mov    ebp,0x10
c0001749:	83 f8 0f             	cmp    eax,0xf
c000174c:	76 05                	jbe    c0001753 <dlmemalign+0x5f>
c000174e:	83 e0 f8             	and    eax,0xfffffff8
c0001751:	89 c5                	mov    ebp,eax
c0001753:	83 ec 0c             	sub    esp,0xc
c0001756:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000175a:	50                   	push   eax
c000175b:	e8 b4 f8 ff ff       	call   c0001014 <dlmalloc>
c0001760:	83 c4 10             	add    esp,0x10
c0001763:	89 c1                	mov    ecx,eax
c0001765:	85 c0                	test   eax,eax
c0001767:	74 d1                	je     c000173a <dlmemalign+0x46>
c0001769:	31 d2                	xor    edx,edx
c000176b:	8d 70 f8             	lea    esi,[eax-0x8]
c000176e:	f7 f7                	div    edi
c0001770:	85 d2                	test   edx,edx
c0001772:	74 62                	je     c00017d6 <dlmemalign+0xe2>
c0001774:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001778:	89 f8                	mov    eax,edi
c000177a:	f7 d8                	neg    eax
c000177c:	21 c3                	and    ebx,eax
c000177e:	83 eb 08             	sub    ebx,0x8
c0001781:	89 d8                	mov    eax,ebx
c0001783:	29 f0                	sub    eax,esi
c0001785:	83 f8 0f             	cmp    eax,0xf
c0001788:	77 02                	ja     c000178c <dlmemalign+0x98>
c000178a:	01 fb                	add    ebx,edi
c000178c:	89 d8                	mov    eax,ebx
c000178e:	29 f0                	sub    eax,esi
c0001790:	89 c6                	mov    esi,eax
c0001792:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001795:	89 c2                	mov    edx,eax
c0001797:	83 e2 fc             	and    edx,0xfffffffc
c000179a:	29 f2                	sub    edx,esi
c000179c:	a8 02                	test   al,0x2
c000179e:	74 10                	je     c00017b0 <dlmemalign+0xbc>
c00017a0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017a3:	83 ca 02             	or     edx,0x2
c00017a6:	8d 43 08             	lea    eax,[ebx+0x8]
c00017a9:	89 33                	mov    DWORD PTR [ebx],esi
c00017ab:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017ae:	eb 5f                	jmp    c000180f <dlmemalign+0x11b>
c00017b0:	83 ec 0c             	sub    esp,0xc
c00017b3:	89 d0                	mov    eax,edx
c00017b5:	83 c8 01             	or     eax,0x1
c00017b8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017bb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017c0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017c3:	83 e0 01             	and    eax,0x1
c00017c6:	09 f0                	or     eax,esi
c00017c8:	89 de                	mov    esi,ebx
c00017ca:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017cd:	51                   	push   ecx
c00017ce:	e8 e6 f4 ff ff       	call   c0000cb9 <dlfree>
c00017d3:	83 c4 10             	add    esp,0x10
c00017d6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017d9:	a8 02                	test   al,0x2
c00017db:	75 2f                	jne    c000180c <dlmemalign+0x118>
c00017dd:	83 e0 fc             	and    eax,0xfffffffc
c00017e0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017e3:	39 c2                	cmp    edx,eax
c00017e5:	73 25                	jae    c000180c <dlmemalign+0x118>
c00017e7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	29 e8                	sub    eax,ebp
c00017ef:	83 c2 08             	add    edx,0x8
c00017f2:	83 c8 01             	or     eax,0x1
c00017f5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017f8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017fb:	83 e0 01             	and    eax,0x1
c00017fe:	09 c5                	or     ebp,eax
c0001800:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001803:	52                   	push   edx
c0001804:	e8 b0 f4 ff ff       	call   c0000cb9 <dlfree>
c0001809:	83 c4 10             	add    esp,0x10
c000180c:	8d 46 08             	lea    eax,[esi+0x8]
c000180f:	83 c4 0c             	add    esp,0xc
c0001812:	5b                   	pop    ebx
c0001813:	5e                   	pop    esi
c0001814:	5f                   	pop    edi
c0001815:	5d                   	pop    ebp
c0001816:	c3                   	ret    

c0001817 <dlcalloc>:
c0001817:	53                   	push   ebx
c0001818:	83 ec 14             	sub    esp,0x14
c000181b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000181f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001824:	50                   	push   eax
c0001825:	e8 ea f7 ff ff       	call   c0001014 <dlmalloc>
c000182a:	83 c4 10             	add    esp,0x10
c000182d:	89 c3                	mov    ebx,eax
c000182f:	85 c0                	test   eax,eax
c0001831:	74 77                	je     c00018aa <dlcalloc+0x93>
c0001833:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001836:	89 d0                	mov    eax,edx
c0001838:	83 e0 fc             	and    eax,0xfffffffc
c000183b:	80 e2 02             	and    dl,0x2
c000183e:	75 5a                	jne    c000189a <dlcalloc+0x83>
c0001840:	83 e8 04             	sub    eax,0x4
c0001843:	83 f8 27             	cmp    eax,0x27
c0001846:	76 03                	jbe    c000184b <dlcalloc+0x34>
c0001848:	51                   	push   ecx
c0001849:	eb 53                	jmp    c000189e <dlcalloc+0x87>
c000184b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001851:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001858:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000185f:	83 f8 13             	cmp    eax,0x13
c0001862:	76 46                	jbe    c00018aa <dlcalloc+0x93>
c0001864:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000186b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001872:	83 f8 1b             	cmp    eax,0x1b
c0001875:	76 33                	jbe    c00018aa <dlcalloc+0x93>
c0001877:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000187e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001885:	83 f8 23             	cmp    eax,0x23
c0001888:	76 20                	jbe    c00018aa <dlcalloc+0x93>
c000188a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001891:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001898:	eb 10                	jmp    c00018aa <dlcalloc+0x93>
c000189a:	83 e8 08             	sub    eax,0x8
c000189d:	52                   	push   edx
c000189e:	50                   	push   eax
c000189f:	6a 00                	push   0x0
c00018a1:	53                   	push   ebx
c00018a2:	e8 49 ec ff ff       	call   c00004f0 <memset>
c00018a7:	83 c4 10             	add    esp,0x10
c00018aa:	89 d8                	mov    eax,ebx
c00018ac:	83 c4 08             	add    esp,0x8
c00018af:	5b                   	pop    ebx
c00018b0:	c3                   	ret    

c00018b1 <dlcfree>:
c00018b1:	e9 03 f4 ff ff       	jmp    c0000cb9 <dlfree>

c00018b6 <dlindependent_calloc>:
c00018b6:	83 ec 28             	sub    esp,0x28
c00018b9:	b9 03 00 00 00       	mov    ecx,0x3
c00018be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018ca:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d2:	e8 cb fa ff ff       	call   c00013a2 <iALLOc>
c00018d7:	83 c4 2c             	add    esp,0x2c
c00018da:	c3                   	ret    

c00018db <dlindependent_comalloc>:
c00018db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018e3:	31 c9                	xor    ecx,ecx
c00018e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018ed:	e9 b0 fa ff ff       	jmp    c00013a2 <iALLOc>

c00018f2 <dlvalloc>:
c00018f2:	83 ec 0c             	sub    esp,0xc
c00018f5:	83 3d 40 fb 01 c0 00 	cmp    DWORD PTR ds:0xc001fb40,0x0
c00018fc:	75 0a                	jne    c0001908 <dlvalloc+0x16>
c00018fe:	b8 40 fb 01 c0       	mov    eax,0xc001fb40
c0001903:	e8 ca f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001908:	50                   	push   eax
c0001909:	50                   	push   eax
c000190a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000190e:	ff 35 9c fe 01 c0    	push   DWORD PTR ds:0xc001fe9c
c0001914:	e8 db fd ff ff       	call   c00016f4 <dlmemalign>
c0001919:	83 c4 1c             	add    esp,0x1c
c000191c:	c3                   	ret    

c000191d <dlpvalloc>:
c000191d:	83 ec 0c             	sub    esp,0xc
c0001920:	83 3d 40 fb 01 c0 00 	cmp    DWORD PTR ds:0xc001fb40,0x0
c0001927:	75 0a                	jne    c0001933 <dlpvalloc+0x16>
c0001929:	b8 40 fb 01 c0       	mov    eax,0xc001fb40
c000192e:	e8 9f f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001933:	a1 9c fe 01 c0       	mov    eax,ds:0xc001fe9c
c0001938:	89 c1                	mov    ecx,eax
c000193a:	52                   	push   edx
c000193b:	f7 d9                	neg    ecx
c000193d:	52                   	push   edx
c000193e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001942:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001946:	21 ca                	and    edx,ecx
c0001948:	52                   	push   edx
c0001949:	50                   	push   eax
c000194a:	e8 a5 fd ff ff       	call   c00016f4 <dlmemalign>
c000194f:	83 c4 1c             	add    esp,0x1c
c0001952:	c3                   	ret    

c0001953 <dlmalloc_trim>:
c0001953:	b8 40 fb 01 c0       	mov    eax,0xc001fb40
c0001958:	e8 75 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c000195d:	31 c0                	xor    eax,eax
c000195f:	c3                   	ret    

c0001960 <dlmalloc_usable_size>:
c0001960:	53                   	push   ebx
c0001961:	31 c0                	xor    eax,eax
c0001963:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001967:	85 c9                	test   ecx,ecx
c0001969:	74 24                	je     c000198f <dlmalloc_usable_size+0x2f>
c000196b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000196e:	f6 c2 02             	test   dl,0x2
c0001971:	74 08                	je     c000197b <dlmalloc_usable_size+0x1b>
c0001973:	83 e2 fc             	and    edx,0xfffffffc
c0001976:	8d 42 f8             	lea    eax,[edx-0x8]
c0001979:	eb 14                	jmp    c000198f <dlmalloc_usable_size+0x2f>
c000197b:	89 d3                	mov    ebx,edx
c000197d:	31 c0                	xor    eax,eax
c000197f:	83 e3 fe             	and    ebx,0xfffffffe
c0001982:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001987:	74 06                	je     c000198f <dlmalloc_usable_size+0x2f>
c0001989:	83 e2 fc             	and    edx,0xfffffffc
c000198c:	8d 42 fc             	lea    eax,[edx-0x4]
c000198f:	5b                   	pop    ebx
c0001990:	c3                   	ret    

c0001991 <dlmallinfo>:
c0001991:	55                   	push   ebp
c0001992:	57                   	push   edi
c0001993:	56                   	push   esi
c0001994:	53                   	push   ebx
c0001995:	83 ec 08             	sub    esp,0x8
c0001998:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000199c:	83 3d 6c fb 01 c0 00 	cmp    DWORD PTR ds:0xc001fb6c,0x0
c00019a3:	75 0a                	jne    c00019af <dlmallinfo+0x1e>
c00019a5:	b8 40 fb 01 c0       	mov    eax,0xc001fb40
c00019aa:	e8 23 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c00019af:	a1 6c fb 01 c0       	mov    eax,ds:0xc001fb6c
c00019b4:	31 ed                	xor    ebp,ebp
c00019b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019b9:	31 c9                	xor    ecx,ecx
c00019bb:	83 e0 fc             	and    eax,0xfffffffc
c00019be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019c2:	31 c0                	xor    eax,eax
c00019c4:	8b 14 85 44 fb 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe04bc]
c00019cb:	85 d2                	test   edx,edx
c00019cd:	74 0e                	je     c00019dd <dlmallinfo+0x4c>
c00019cf:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019d2:	45                   	inc    ebp
c00019d3:	83 e6 fc             	and    esi,0xfffffffc
c00019d6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019d9:	01 f1                	add    ecx,esi
c00019db:	eb ee                	jmp    c00019cb <dlmallinfo+0x3a>
c00019dd:	40                   	inc    eax
c00019de:	83 f8 0a             	cmp    eax,0xa
c00019e1:	75 e1                	jne    c00019c4 <dlmallinfo+0x33>
c00019e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019e7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ee:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019f1:	b8 74 fb 01 c0       	mov    eax,0xc001fb74
c00019f6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019f9:	39 f0                	cmp    eax,esi
c00019fb:	74 10                	je     c0001a0d <dlmallinfo+0x7c>
c00019fd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a00:	ff 04 24             	inc    DWORD PTR [esp]
c0001a03:	83 e7 fc             	and    edi,0xfffffffc
c0001a06:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a09:	01 fa                	add    edx,edi
c0001a0b:	eb ec                	jmp    c00019f9 <dlmallinfo+0x68>
c0001a0d:	83 c0 08             	add    eax,0x8
c0001a10:	3d 6c fe 01 c0       	cmp    eax,0xc001fe6c
c0001a15:	75 df                	jne    c00019f6 <dlmallinfo+0x65>
c0001a17:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a1a:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a1d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a20:	a1 a8 fe 01 c0       	mov    eax,ds:0xc001fea8
c0001a25:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a28:	89 03                	mov    DWORD PTR [ebx],eax
c0001a2a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a2d:	8b 35 90 fe 01 c0    	mov    esi,DWORD PTR ds:0xc001fe90
c0001a33:	29 d0                	sub    eax,edx
c0001a35:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a38:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a3b:	8b 35 a4 fe 01 c0    	mov    esi,DWORD PTR ds:0xc001fea4
c0001a41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a45:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a48:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a4b:	8b 35 b4 fe 01 c0    	mov    esi,DWORD PTR ds:0xc001feb4
c0001a51:	89 d8                	mov    eax,ebx
c0001a53:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a56:	83 c4 08             	add    esp,0x8
c0001a59:	5b                   	pop    ebx
c0001a5a:	5e                   	pop    esi
c0001a5b:	5f                   	pop    edi
c0001a5c:	5d                   	pop    ebp
c0001a5d:	c2 04 00             	ret    0x4

c0001a60 <dlmalloc_stats>:
c0001a60:	83 ec 30             	sub    esp,0x30
c0001a63:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a67:	50                   	push   eax
c0001a68:	e8 24 ff ff ff       	call   c0001991 <dlmallinfo>
c0001a6d:	83 c4 30             	add    esp,0x30
c0001a70:	c3                   	ret    

c0001a71 <dlmallopt>:
c0001a71:	56                   	push   esi
c0001a72:	b8 40 fb 01 c0       	mov    eax,0xc001fb40
c0001a77:	53                   	push   ebx
c0001a78:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a80:	e8 4d f1 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001a85:	8d 46 04             	lea    eax,[esi+0x4]
c0001a88:	83 f8 05             	cmp    eax,0x5
c0001a8b:	77 67                	ja     c0001af4 <dlmallopt+0x83>
c0001a8d:	ff 24 85 44 cf 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe30bc]
c0001a94:	83 fb 50             	cmp    ebx,0x50
c0001a97:	77 5b                	ja     c0001af4 <dlmallopt+0x83>
c0001a99:	ba 08 00 00 00       	mov    edx,0x8
c0001a9e:	85 db                	test   ebx,ebx
c0001aa0:	74 12                	je     c0001ab4 <dlmallopt+0x43>
c0001aa2:	83 c3 0b             	add    ebx,0xb
c0001aa5:	ba 10 00 00 00       	mov    edx,0x10
c0001aaa:	83 fb 0f             	cmp    ebx,0xf
c0001aad:	76 05                	jbe    c0001ab4 <dlmallopt+0x43>
c0001aaf:	89 da                	mov    edx,ebx
c0001ab1:	83 e2 f8             	and    edx,0xfffffff8
c0001ab4:	a1 40 fb 01 c0       	mov    eax,ds:0xc001fb40
c0001ab9:	83 e0 03             	and    eax,0x3
c0001abc:	09 d0                	or     eax,edx
c0001abe:	a3 40 fb 01 c0       	mov    ds:0xc001fb40,eax
c0001ac3:	eb 31                	jmp    c0001af6 <dlmallopt+0x85>
c0001ac5:	89 1d 84 fe 01 c0    	mov    DWORD PTR ds:0xc001fe84,ebx
c0001acb:	eb 06                	jmp    c0001ad3 <dlmallopt+0x62>
c0001acd:	89 1d 88 fe 01 c0    	mov    DWORD PTR ds:0xc001fe88,ebx
c0001ad3:	be 01 00 00 00       	mov    esi,0x1
c0001ad8:	eb 1c                	jmp    c0001af6 <dlmallopt+0x85>
c0001ada:	89 1d 8c fe 01 c0    	mov    DWORD PTR ds:0xc001fe8c,ebx
c0001ae0:	eb f1                	jmp    c0001ad3 <dlmallopt+0x62>
c0001ae2:	31 f6                	xor    esi,esi
c0001ae4:	85 db                	test   ebx,ebx
c0001ae6:	75 0e                	jne    c0001af6 <dlmallopt+0x85>
c0001ae8:	c7 05 94 fe 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001fe94,0x0
c0001af2:	eb df                	jmp    c0001ad3 <dlmallopt+0x62>
c0001af4:	31 f6                	xor    esi,esi
c0001af6:	89 f0                	mov    eax,esi
c0001af8:	5b                   	pop    ebx
c0001af9:	5e                   	pop    esi
c0001afa:	c3                   	ret    
c0001afb:	90                   	nop

c0001afc <isblank>:
c0001afc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b01:	74 09                	je     c0001b0c <isblank+0x10>
c0001b03:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b08:	75 0a                	jne    c0001b14 <isblank+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <iscntrl>:
c0001b1c:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b21:	7e 09                	jle    c0001b2c <iscntrl+0x10>
c0001b23:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b28:	75 0a                	jne    c0001b34 <iscntrl+0x18>
c0001b2a:	66 90                	xchg   ax,ax
c0001b2c:	b8 01 00 00 00       	mov    eax,0x1
c0001b31:	c3                   	ret    
c0001b32:	66 90                	xchg   ax,ax
c0001b34:	b8 00 00 00 00       	mov    eax,0x0
c0001b39:	c3                   	ret    
c0001b3a:	66 90                	xchg   ax,ax

c0001b3c <isdigit>:
c0001b3c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b41:	7e 0d                	jle    c0001b50 <isdigit+0x14>
c0001b43:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b48:	7f 06                	jg     c0001b50 <isdigit+0x14>
c0001b4a:	b8 01 00 00 00       	mov    eax,0x1
c0001b4f:	c3                   	ret    
c0001b50:	b8 00 00 00 00       	mov    eax,0x0
c0001b55:	c3                   	ret    
c0001b56:	66 90                	xchg   ax,ax

c0001b58 <islower>:
c0001b58:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b5d:	7e 0d                	jle    c0001b6c <islower+0x14>
c0001b5f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b64:	7f 06                	jg     c0001b6c <islower+0x14>
c0001b66:	b8 01 00 00 00       	mov    eax,0x1
c0001b6b:	c3                   	ret    
c0001b6c:	b8 00 00 00 00       	mov    eax,0x0
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax

c0001b74 <isspace>:
c0001b74:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b79:	7c 19                	jl     c0001b94 <isspace+0x20>
c0001b7b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b80:	7e 0a                	jle    c0001b8c <isspace+0x18>
c0001b82:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b87:	75 0b                	jne    c0001b94 <isspace+0x20>
c0001b89:	8d 76 00             	lea    esi,[esi+0x0]
c0001b8c:	b8 01 00 00 00       	mov    eax,0x1
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax
c0001b94:	b8 00 00 00 00       	mov    eax,0x0
c0001b99:	c3                   	ret    
c0001b9a:	66 90                	xchg   ax,ax

c0001b9c <isupper>:
c0001b9c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ba1:	7e 0d                	jle    c0001bb0 <isupper+0x14>
c0001ba3:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001ba8:	7f 06                	jg     c0001bb0 <isupper+0x14>
c0001baa:	b8 01 00 00 00       	mov    eax,0x1
c0001baf:	c3                   	ret    
c0001bb0:	b8 00 00 00 00       	mov    eax,0x0
c0001bb5:	c3                   	ret    
c0001bb6:	66 90                	xchg   ax,ax

c0001bb8 <isalpha>:
c0001bb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bbc:	e8 db ff ff ff       	call   c0001b9c <isupper>
c0001bc1:	83 c4 04             	add    esp,0x4
c0001bc4:	85 c0                	test   eax,eax
c0001bc6:	75 10                	jne    c0001bd8 <isalpha+0x20>
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 87 ff ff ff       	call   c0001b58 <islower>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	74 08                	je     c0001be0 <isalpha+0x28>
c0001bd8:	b8 01 00 00 00       	mov    eax,0x1
c0001bdd:	c3                   	ret    
c0001bde:	66 90                	xchg   ax,ax
c0001be0:	b8 00 00 00 00       	mov    eax,0x0
c0001be5:	c3                   	ret    
c0001be6:	66 90                	xchg   ax,ax

c0001be8 <isalnum>:
c0001be8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bec:	e8 c7 ff ff ff       	call   c0001bb8 <isalpha>
c0001bf1:	83 c4 04             	add    esp,0x4
c0001bf4:	85 c0                	test   eax,eax
c0001bf6:	75 10                	jne    c0001c08 <isalnum+0x20>
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 3b ff ff ff       	call   c0001b3c <isdigit>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	74 08                	je     c0001c10 <isalnum+0x28>
c0001c08:	b8 01 00 00 00       	mov    eax,0x1
c0001c0d:	c3                   	ret    
c0001c0e:	66 90                	xchg   ax,ax
c0001c10:	b8 00 00 00 00       	mov    eax,0x0
c0001c15:	c3                   	ret    
c0001c16:	66 90                	xchg   ax,ax

c0001c18 <ispunct>:
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 c7 ff ff ff       	call   c0001be8 <isalnum>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 28                	jne    c0001c50 <ispunct+0x38>
c0001c28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c2c:	e8 43 ff ff ff       	call   c0001b74 <isspace>
c0001c31:	83 c4 04             	add    esp,0x4
c0001c34:	85 c0                	test   eax,eax
c0001c36:	75 18                	jne    c0001c50 <ispunct+0x38>
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 db fe ff ff       	call   c0001b1c <iscntrl>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 08                	jne    c0001c50 <ispunct+0x38>
c0001c48:	b8 01 00 00 00       	mov    eax,0x1
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax
c0001c50:	b8 00 00 00 00       	mov    eax,0x0
c0001c55:	c3                   	ret    
c0001c56:	66 90                	xchg   ax,ax

c0001c58 <isgraph>:
c0001c58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c5c:	e8 87 ff ff ff       	call   c0001be8 <isalnum>
c0001c61:	83 c4 04             	add    esp,0x4
c0001c64:	85 c0                	test   eax,eax
c0001c66:	75 10                	jne    c0001c78 <isgraph+0x20>
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 a7 ff ff ff       	call   c0001c18 <ispunct>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	74 08                	je     c0001c80 <isgraph+0x28>
c0001c78:	b8 01 00 00 00       	mov    eax,0x1
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isprint>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 c7 ff ff ff       	call   c0001c58 <isgraph>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 08                	jne    c0001ca0 <isprint+0x18>
c0001c98:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c9d:	75 09                	jne    c0001ca8 <isprint+0x20>
c0001c9f:	90                   	nop
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <isxdigit>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 83 fe ff ff       	call   c0001b3c <isdigit>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 20                	jne    c0001ce0 <isxdigit+0x30>
c0001cc0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001cc5:	7e 09                	jle    c0001cd0 <isxdigit+0x20>
c0001cc7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ccc:	7e 12                	jle    c0001ce0 <isxdigit+0x30>
c0001cce:	66 90                	xchg   ax,ax
c0001cd0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cd5:	7e 11                	jle    c0001ce8 <isxdigit+0x38>
c0001cd7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cdc:	7f 0a                	jg     c0001ce8 <isxdigit+0x38>
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    

c0001cee <disk_status>:
c0001cee:	31 c0                	xor    eax,eax
c0001cf0:	c3                   	ret    

c0001cf1 <disk_initialize>:
c0001cf1:	31 c0                	xor    eax,eax
c0001cf3:	c3                   	ret    

c0001cf4 <disk_read>:
c0001cf4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cf9:	0f b6 04 85 20 3f 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc0e0]
c0001d01:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d05:	e9 52 53 01 00       	jmp    c001705c <fatWrapperReadDisk>

c0001d0a <disk_write>:
c0001d0a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0f:	0f b6 04 85 20 3f 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc0e0]
c0001d17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1b:	e9 80 53 01 00       	jmp    c00170a0 <fatWrapperWriteDisk>

c0001d20 <disk_ioctl>:
c0001d20:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d29:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d2e:	0f b6 04 85 20 3f 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc0e0]
c0001d36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d3a:	e9 a5 53 01 00       	jmp    c00170e4 <fatWrapperIoctl>

c0001d3f <ld_word>:
c0001d3f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d43:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d46:	c1 e2 08             	shl    edx,0x8
c0001d49:	09 d0                	or     eax,edx
c0001d4b:	c3                   	ret    

c0001d4c <ld_dword>:
c0001d4c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d50:	89 d1                	mov    ecx,edx
c0001d52:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d56:	c1 e1 08             	shl    ecx,0x8
c0001d59:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d5c:	09 ca                	or     edx,ecx
c0001d5e:	c1 e2 08             	shl    edx,0x8
c0001d61:	09 d0                	or     eax,edx
c0001d63:	c3                   	ret    

c0001d64 <st_word>:
c0001d64:	66 89 10             	mov    WORD PTR [eax],dx
c0001d67:	c3                   	ret    

c0001d68 <st_dword>:
c0001d68:	89 10                	mov    DWORD PTR [eax],edx
c0001d6a:	c3                   	ret    

c0001d6b <mem_cpy>:
c0001d6b:	85 c9                	test   ecx,ecx
c0001d6d:	74 10                	je     c0001d7f <mem_cpy+0x14>
c0001d6f:	57                   	push   edi
c0001d70:	01 c1                	add    ecx,eax
c0001d72:	56                   	push   esi
c0001d73:	89 c7                	mov    edi,eax
c0001d75:	89 d6                	mov    esi,edx
c0001d77:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d78:	39 f9                	cmp    ecx,edi
c0001d7a:	75 fb                	jne    c0001d77 <mem_cpy+0xc>
c0001d7c:	5e                   	pop    esi
c0001d7d:	5f                   	pop    edi
c0001d7e:	c3                   	ret    
c0001d7f:	c3                   	ret    

c0001d80 <mem_set>:
c0001d80:	01 c1                	add    ecx,eax
c0001d82:	40                   	inc    eax
c0001d83:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d86:	39 c8                	cmp    eax,ecx
c0001d88:	75 f8                	jne    c0001d82 <mem_set+0x2>
c0001d8a:	c3                   	ret    

c0001d8b <mem_cmp>:
c0001d8b:	57                   	push   edi
c0001d8c:	56                   	push   esi
c0001d8d:	89 c6                	mov    esi,eax
c0001d8f:	53                   	push   ebx
c0001d90:	46                   	inc    esi
c0001d91:	42                   	inc    edx
c0001d92:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d96:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d9a:	29 fb                	sub    ebx,edi
c0001d9c:	89 cf                	mov    edi,ecx
c0001d9e:	29 f7                	sub    edi,esi
c0001da0:	01 c7                	add    edi,eax
c0001da2:	74 04                	je     c0001da8 <mem_cmp+0x1d>
c0001da4:	85 db                	test   ebx,ebx
c0001da6:	74 e8                	je     c0001d90 <mem_cmp+0x5>
c0001da8:	89 d8                	mov    eax,ebx
c0001daa:	5b                   	pop    ebx
c0001dab:	5e                   	pop    esi
c0001dac:	5f                   	pop    edi
c0001dad:	c3                   	ret    

c0001dae <chk_chr>:
c0001dae:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001db1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001db4:	74 07                	je     c0001dbd <chk_chr+0xf>
c0001db6:	39 d1                	cmp    ecx,edx
c0001db8:	74 03                	je     c0001dbd <chk_chr+0xf>
c0001dba:	40                   	inc    eax
c0001dbb:	eb f1                	jmp    c0001dae <chk_chr>
c0001dbd:	89 c8                	mov    eax,ecx
c0001dbf:	c3                   	ret    

c0001dc0 <dbc_1st>:
c0001dc0:	31 c0                	xor    eax,eax
c0001dc2:	c3                   	ret    

c0001dc3 <dbc_2nd>:
c0001dc3:	31 c0                	xor    eax,eax
c0001dc5:	c3                   	ret    

c0001dc6 <tchar2uni>:
c0001dc6:	57                   	push   edi
c0001dc7:	89 c7                	mov    edi,eax
c0001dc9:	56                   	push   esi
c0001dca:	53                   	push   ebx
c0001dcb:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dcd:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001dcf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001dd2:	84 c9                	test   cl,cl
c0001dd4:	78 0a                	js     c0001de0 <tchar2uni+0x1a>
c0001dd6:	0f b6 d1             	movzx  edx,cl
c0001dd9:	89 f3                	mov    ebx,esi
c0001ddb:	e9 9f 00 00 00       	jmp    c0001e7f <tchar2uni+0xb9>
c0001de0:	88 ca                	mov    dl,cl
c0001de2:	83 e2 e0             	and    edx,0xffffffe0
c0001de5:	80 fa c0             	cmp    dl,0xc0
c0001de8:	75 0c                	jne    c0001df6 <tchar2uni+0x30>
c0001dea:	89 ca                	mov    edx,ecx
c0001dec:	b9 01 00 00 00       	mov    ecx,0x1
c0001df1:	83 e2 1f             	and    edx,0x1f
c0001df4:	eb 2e                	jmp    c0001e24 <tchar2uni+0x5e>
c0001df6:	88 ca                	mov    dl,cl
c0001df8:	83 e2 f0             	and    edx,0xfffffff0
c0001dfb:	80 fa e0             	cmp    dl,0xe0
c0001dfe:	75 0c                	jne    c0001e0c <tchar2uni+0x46>
c0001e00:	89 ca                	mov    edx,ecx
c0001e02:	b9 02 00 00 00       	mov    ecx,0x2
c0001e07:	83 e2 0f             	and    edx,0xf
c0001e0a:	eb 18                	jmp    c0001e24 <tchar2uni+0x5e>
c0001e0c:	88 ca                	mov    dl,cl
c0001e0e:	83 e2 f8             	and    edx,0xfffffff8
c0001e11:	88 d0                	mov    al,dl
c0001e13:	83 ca ff             	or     edx,0xffffffff
c0001e16:	3c f0                	cmp    al,0xf0
c0001e18:	75 6c                	jne    c0001e86 <tchar2uni+0xc0>
c0001e1a:	89 ca                	mov    edx,ecx
c0001e1c:	b9 03 00 00 00       	mov    ecx,0x3
c0001e21:	83 e2 07             	and    edx,0x7
c0001e24:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e28:	46                   	inc    esi
c0001e29:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e2c:	88 c8                	mov    al,cl
c0001e2e:	83 e0 c0             	and    eax,0xffffffc0
c0001e31:	3c 80                	cmp    al,0x80
c0001e33:	75 4e                	jne    c0001e83 <tchar2uni+0xbd>
c0001e35:	c1 e2 06             	shl    edx,0x6
c0001e38:	83 e1 3f             	and    ecx,0x3f
c0001e3b:	09 ca                	or     edx,ecx
c0001e3d:	39 de                	cmp    esi,ebx
c0001e3f:	75 e7                	jne    c0001e28 <tchar2uni+0x62>
c0001e41:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e44:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e4a:	77 37                	ja     c0001e83 <tchar2uni+0xbd>
c0001e4c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e52:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e58:	76 29                	jbe    c0001e83 <tchar2uni+0xbd>
c0001e5a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e60:	76 1d                	jbe    c0001e7f <tchar2uni+0xb9>
c0001e62:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e68:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e6e:	c1 e1 06             	shl    ecx,0x6
c0001e71:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e77:	09 ca                	or     edx,ecx
c0001e79:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e7f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e81:	eb 03                	jmp    c0001e86 <tchar2uni+0xc0>
c0001e83:	83 ca ff             	or     edx,0xffffffff
c0001e86:	5b                   	pop    ebx
c0001e87:	89 d0                	mov    eax,edx
c0001e89:	5e                   	pop    esi
c0001e8a:	5f                   	pop    edi
c0001e8b:	c3                   	ret    

c0001e8c <put_utf>:
c0001e8c:	53                   	push   ebx
c0001e8d:	83 f8 7f             	cmp    eax,0x7f
c0001e90:	89 c3                	mov    ebx,eax
c0001e92:	b0 00                	mov    al,0x0
c0001e94:	77 11                	ja     c0001ea7 <put_utf+0x1b>
c0001e96:	85 c9                	test   ecx,ecx
c0001e98:	0f 84 e5 00 00 00    	je     c0001f83 <put_utf+0xf7>
c0001e9e:	88 1a                	mov    BYTE PTR [edx],bl
c0001ea0:	b0 01                	mov    al,0x1
c0001ea2:	e9 dc 00 00 00       	jmp    c0001f83 <put_utf+0xf7>
c0001ea7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001ead:	77 23                	ja     c0001ed2 <put_utf+0x46>
c0001eaf:	83 f9 01             	cmp    ecx,0x1
c0001eb2:	0f 86 cb 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001eb8:	89 d8                	mov    eax,ebx
c0001eba:	83 e3 3f             	and    ebx,0x3f
c0001ebd:	c1 e8 06             	shr    eax,0x6
c0001ec0:	83 cb 80             	or     ebx,0xffffff80
c0001ec3:	83 c8 c0             	or     eax,0xffffffc0
c0001ec6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ec9:	88 02                	mov    BYTE PTR [edx],al
c0001ecb:	b0 02                	mov    al,0x2
c0001ecd:	e9 b1 00 00 00       	jmp    c0001f83 <put_utf+0xf7>
c0001ed2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001ed8:	77 40                	ja     c0001f1a <put_utf+0x8e>
c0001eda:	83 f9 02             	cmp    ecx,0x2
c0001edd:	0f 86 a0 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001ee3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ee9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001eef:	0f 86 8e 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001ef5:	89 d8                	mov    eax,ebx
c0001ef7:	c1 e8 0c             	shr    eax,0xc
c0001efa:	83 c8 e0             	or     eax,0xffffffe0
c0001efd:	88 02                	mov    BYTE PTR [edx],al
c0001eff:	89 d8                	mov    eax,ebx
c0001f01:	83 e3 3f             	and    ebx,0x3f
c0001f04:	c1 e8 06             	shr    eax,0x6
c0001f07:	83 cb 80             	or     ebx,0xffffff80
c0001f0a:	83 e0 3f             	and    eax,0x3f
c0001f0d:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001f10:	83 c8 80             	or     eax,0xffffff80
c0001f13:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f16:	b0 03                	mov    al,0x3
c0001f18:	eb 69                	jmp    c0001f83 <put_utf+0xf7>
c0001f1a:	83 f9 03             	cmp    ecx,0x3
c0001f1d:	76 64                	jbe    c0001f83 <put_utf+0xf7>
c0001f1f:	89 d9                	mov    ecx,ebx
c0001f21:	0f b7 c3             	movzx  eax,bx
c0001f24:	66 31 c9             	xor    cx,cx
c0001f27:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f2d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f33:	c1 e9 06             	shr    ecx,0x6
c0001f36:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f3c:	77 43                	ja     c0001f81 <put_utf+0xf5>
c0001f3e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f44:	77 3b                	ja     c0001f81 <put_utf+0xf5>
c0001f46:	09 cb                	or     ebx,ecx
c0001f48:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f4e:	89 d8                	mov    eax,ebx
c0001f50:	c1 e8 12             	shr    eax,0x12
c0001f53:	83 c8 f0             	or     eax,0xfffffff0
c0001f56:	88 02                	mov    BYTE PTR [edx],al
c0001f58:	89 d8                	mov    eax,ebx
c0001f5a:	c1 e8 0c             	shr    eax,0xc
c0001f5d:	83 e0 3f             	and    eax,0x3f
c0001f60:	83 c8 80             	or     eax,0xffffff80
c0001f63:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f66:	89 d8                	mov    eax,ebx
c0001f68:	83 e3 3f             	and    ebx,0x3f
c0001f6b:	c1 e8 06             	shr    eax,0x6
c0001f6e:	83 cb 80             	or     ebx,0xffffff80
c0001f71:	83 e0 3f             	and    eax,0x3f
c0001f74:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f77:	83 c8 80             	or     eax,0xffffff80
c0001f7a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f7d:	b0 04                	mov    al,0x4
c0001f7f:	eb 02                	jmp    c0001f83 <put_utf+0xf7>
c0001f81:	31 c0                	xor    eax,eax
c0001f83:	5b                   	pop    ebx
c0001f84:	c3                   	ret    

c0001f85 <clst2sect>:
c0001f85:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f88:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f8b:	83 ea 02             	sub    edx,0x2
c0001f8e:	39 ca                	cmp    edx,ecx
c0001f90:	76 0d                	jbe    c0001f9f <clst2sect+0x1a>
c0001f92:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f96:	0f af d1             	imul   edx,ecx
c0001f99:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f9c:	89 d0                	mov    eax,edx
c0001f9e:	c3                   	ret    
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	c3                   	ret    

c0001fa2 <pick_lfn>:
c0001fa2:	55                   	push   ebp
c0001fa3:	57                   	push   edi
c0001fa4:	56                   	push   esi
c0001fa5:	89 d6                	mov    esi,edx
c0001fa7:	53                   	push   ebx
c0001fa8:	89 c3                	mov    ebx,eax
c0001faa:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fad:	e8 8d fd ff ff       	call   c0001d3f <ld_word>
c0001fb2:	66 85 c0             	test   ax,ax
c0001fb5:	74 04                	je     c0001fbb <pick_lfn+0x19>
c0001fb7:	31 c0                	xor    eax,eax
c0001fb9:	eb 5c                	jmp    c0002017 <pick_lfn+0x75>
c0001fbb:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001fbe:	bd 01 00 00 00       	mov    ebp,0x1
c0001fc3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fc6:	31 ff                	xor    edi,edi
c0001fc8:	49                   	dec    ecx
c0001fc9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fcc:	0f b6 87 a0 d0 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe2f60]
c0001fd3:	01 f0                	add    eax,esi
c0001fd5:	e8 65 fd ff ff       	call   c0001d3f <ld_word>
c0001fda:	66 85 ed             	test   bp,bp
c0001fdd:	74 11                	je     c0001ff0 <pick_lfn+0x4e>
c0001fdf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fe5:	77 d0                	ja     c0001fb7 <pick_lfn+0x15>
c0001fe7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001feb:	89 c5                	mov    ebp,eax
c0001fed:	41                   	inc    ecx
c0001fee:	eb 04                	jmp    c0001ff4 <pick_lfn+0x52>
c0001ff0:	66 40                	inc    ax
c0001ff2:	75 c3                	jne    c0001fb7 <pick_lfn+0x15>
c0001ff4:	47                   	inc    edi
c0001ff5:	83 ff 0d             	cmp    edi,0xd
c0001ff8:	75 d2                	jne    c0001fcc <pick_lfn+0x2a>
c0001ffa:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001ffd:	74 13                	je     c0002012 <pick_lfn+0x70>
c0001fff:	66 85 ed             	test   bp,bp
c0002002:	74 0e                	je     c0002012 <pick_lfn+0x70>
c0002004:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000200a:	77 ab                	ja     c0001fb7 <pick_lfn+0x15>
c000200c:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0002012:	b8 01 00 00 00       	mov    eax,0x1
c0002017:	5b                   	pop    ebx
c0002018:	5e                   	pop    esi
c0002019:	5f                   	pop    edi
c000201a:	5d                   	pop    ebp
c000201b:	c3                   	ret    

c000201c <put_lfn>:
c000201c:	55                   	push   ebp
c000201d:	31 ed                	xor    ebp,ebp
c000201f:	57                   	push   edi
c0002020:	89 d7                	mov    edi,edx
c0002022:	56                   	push   esi
c0002023:	31 f6                	xor    esi,esi
c0002025:	53                   	push   ebx
c0002026:	83 ec 08             	sub    esp,0x8
c0002029:	89 04 24             	mov    DWORD PTR [esp],eax
c000202c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002030:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002034:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000203a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000203d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002040:	31 d2                	xor    edx,edx
c0002042:	e8 1d fd ff ff       	call   c0001d64 <st_word>
c0002047:	0f b6 d9             	movzx  ebx,cl
c000204a:	4b                   	dec    ebx
c000204b:	6b db 0d             	imul   ebx,ebx,0xd
c000204e:	66 83 fe ff          	cmp    si,0xffff
c0002052:	74 08                	je     c000205c <put_lfn+0x40>
c0002054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002057:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000205b:	43                   	inc    ebx
c000205c:	0f b6 85 a0 d0 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe2f60]
c0002063:	0f b7 d6             	movzx  edx,si
c0002066:	01 f8                	add    eax,edi
c0002068:	e8 f7 fc ff ff       	call   c0001d64 <st_word>
c000206d:	66 85 f6             	test   si,si
c0002070:	75 03                	jne    c0002075 <put_lfn+0x59>
c0002072:	83 ce ff             	or     esi,0xffffffff
c0002075:	45                   	inc    ebp
c0002076:	83 fd 0d             	cmp    ebp,0xd
c0002079:	75 d3                	jne    c000204e <put_lfn+0x32>
c000207b:	66 46                	inc    si
c000207d:	74 0a                	je     c0002089 <put_lfn+0x6d>
c000207f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002082:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002087:	75 09                	jne    c0002092 <put_lfn+0x76>
c0002089:	88 c8                	mov    al,cl
c000208b:	83 c8 40             	or     eax,0x40
c000208e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002092:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002096:	88 07                	mov    BYTE PTR [edi],al
c0002098:	83 c4 08             	add    esp,0x8
c000209b:	5b                   	pop    ebx
c000209c:	5e                   	pop    esi
c000209d:	5f                   	pop    edi
c000209e:	5d                   	pop    ebp
c000209f:	c3                   	ret    

c00020a0 <gen_numname>:
c00020a0:	57                   	push   edi
c00020a1:	89 cf                	mov    edi,ecx
c00020a3:	56                   	push   esi
c00020a4:	b9 0b 00 00 00       	mov    ecx,0xb
c00020a9:	53                   	push   ebx
c00020aa:	89 c6                	mov    esi,eax
c00020ac:	83 ec 10             	sub    esp,0x10
c00020af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00020b3:	e8 b3 fc ff ff       	call   c0001d6b <mem_cpy>
c00020b8:	83 fb 05             	cmp    ebx,0x5
c00020bb:	76 2d                	jbe    c00020ea <gen_numname+0x4a>
c00020bd:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020c0:	66 85 c0             	test   ax,ax
c00020c3:	74 25                	je     c00020ea <gen_numname+0x4a>
c00020c5:	83 c7 02             	add    edi,0x2
c00020c8:	ba 10 00 00 00       	mov    edx,0x10
c00020cd:	01 db                	add    ebx,ebx
c00020cf:	89 c1                	mov    ecx,eax
c00020d1:	66 d1 e8             	shr    ax,1
c00020d4:	83 e1 01             	and    ecx,0x1
c00020d7:	01 cb                	add    ebx,ecx
c00020d9:	0f ba e3 10          	bt     ebx,0x10
c00020dd:	73 06                	jae    c00020e5 <gen_numname+0x45>
c00020df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020e5:	4a                   	dec    edx
c00020e6:	75 e5                	jne    c00020cd <gen_numname+0x2d>
c00020e8:	eb d3                	jmp    c00020bd <gen_numname+0x1d>
c00020ea:	b8 07 00 00 00       	mov    eax,0x7
c00020ef:	88 d9                	mov    cl,bl
c00020f1:	83 e1 0f             	and    ecx,0xf
c00020f4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020f7:	80 fa 39             	cmp    dl,0x39
c00020fa:	76 03                	jbe    c00020ff <gen_numname+0x5f>
c00020fc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020ff:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002102:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002106:	89 da                	mov    edx,ebx
c0002108:	c1 ea 04             	shr    edx,0x4
c000210b:	83 fb 0f             	cmp    ebx,0xf
c000210e:	76 06                	jbe    c0002116 <gen_numname+0x76>
c0002110:	89 c8                	mov    eax,ecx
c0002112:	89 d3                	mov    ebx,edx
c0002114:	eb d9                	jmp    c00020ef <gen_numname+0x4f>
c0002116:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000211b:	31 d2                	xor    edx,edx
c000211d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002120:	8d 04 16             	lea    eax,[esi+edx*1]
c0002123:	39 ca                	cmp    edx,ecx
c0002125:	73 18                	jae    c000213f <gen_numname+0x9f>
c0002127:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000212a:	3c 20                	cmp    al,0x20
c000212c:	74 11                	je     c000213f <gen_numname+0x9f>
c000212e:	e8 8d fc ff ff       	call   c0001dc0 <dbc_1st>
c0002133:	85 c0                	test   eax,eax
c0002135:	74 05                	je     c000213c <gen_numname+0x9c>
c0002137:	39 d3                	cmp    ebx,edx
c0002139:	74 04                	je     c000213f <gen_numname+0x9f>
c000213b:	42                   	inc    edx
c000213c:	42                   	inc    edx
c000213d:	eb e1                	jmp    c0002120 <gen_numname+0x80>
c000213f:	b0 20                	mov    al,0x20
c0002141:	83 f9 07             	cmp    ecx,0x7
c0002144:	77 05                	ja     c000214b <gen_numname+0xab>
c0002146:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000214a:	41                   	inc    ecx
c000214b:	42                   	inc    edx
c000214c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002150:	83 fa 07             	cmp    edx,0x7
c0002153:	76 ea                	jbe    c000213f <gen_numname+0x9f>
c0002155:	83 c4 10             	add    esp,0x10
c0002158:	5b                   	pop    ebx
c0002159:	5e                   	pop    esi
c000215a:	5f                   	pop    edi
c000215b:	c3                   	ret    

c000215c <sum_sfn>:
c000215c:	31 c9                	xor    ecx,ecx
c000215e:	31 d2                	xor    edx,edx
c0002160:	d0 ca                	ror    dl,1
c0002162:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002165:	41                   	inc    ecx
c0002166:	83 f9 0b             	cmp    ecx,0xb
c0002169:	75 f5                	jne    c0002160 <sum_sfn+0x4>
c000216b:	88 d0                	mov    al,dl
c000216d:	c3                   	ret    

c000216e <get_ldnumber>:
c000216e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002170:	85 d2                	test   edx,edx
c0002172:	74 14                	je     c0002188 <get_ldnumber+0x1a>
c0002174:	56                   	push   esi
c0002175:	53                   	push   ebx
c0002176:	89 d3                	mov    ebx,edx
c0002178:	43                   	inc    ebx
c0002179:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000217c:	80 f9 1f             	cmp    cl,0x1f
c000217f:	76 0d                	jbe    c000218e <get_ldnumber+0x20>
c0002181:	80 f9 3a             	cmp    cl,0x3a
c0002184:	75 f2                	jne    c0002178 <get_ldnumber+0xa>
c0002186:	eb 0a                	jmp    c0002192 <get_ldnumber+0x24>
c0002188:	83 c9 ff             	or     ecx,0xffffffff
c000218b:	89 c8                	mov    eax,ecx
c000218d:	c3                   	ret    
c000218e:	31 c9                	xor    ecx,ecx
c0002190:	eb 24                	jmp    c00021b6 <get_ldnumber+0x48>
c0002192:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002195:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002198:	80 f9 09             	cmp    cl,0x9
c000219b:	77 16                	ja     c00021b3 <get_ldnumber+0x45>
c000219d:	83 c2 02             	add    edx,0x2
c00021a0:	83 c9 ff             	or     ecx,0xffffffff
c00021a3:	39 d3                	cmp    ebx,edx
c00021a5:	75 0f                	jne    c00021b6 <get_ldnumber+0x48>
c00021a7:	89 f2                	mov    edx,esi
c00021a9:	89 18                	mov    DWORD PTR [eax],ebx
c00021ab:	0f be ca             	movsx  ecx,dl
c00021ae:	83 e9 30             	sub    ecx,0x30
c00021b1:	eb 03                	jmp    c00021b6 <get_ldnumber+0x48>
c00021b3:	83 c9 ff             	or     ecx,0xffffffff
c00021b6:	89 c8                	mov    eax,ecx
c00021b8:	5b                   	pop    ebx
c00021b9:	5e                   	pop    esi
c00021ba:	c3                   	ret    

c00021bb <validate>:
c00021bb:	56                   	push   esi
c00021bc:	53                   	push   ebx
c00021bd:	89 d6                	mov    esi,edx
c00021bf:	51                   	push   ecx
c00021c0:	85 c0                	test   eax,eax
c00021c2:	75 09                	jne    c00021cd <validate+0x12>
c00021c4:	b8 09 00 00 00       	mov    eax,0x9
c00021c9:	31 c9                	xor    ecx,ecx
c00021cb:	eb 2f                	jmp    c00021fc <validate+0x41>
c00021cd:	89 c3                	mov    ebx,eax
c00021cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00021d1:	85 c0                	test   eax,eax
c00021d3:	74 ef                	je     c00021c4 <validate+0x9>
c00021d5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021d8:	74 ea                	je     c00021c4 <validate+0x9>
c00021da:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021de:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021e2:	75 e0                	jne    c00021c4 <validate+0x9>
c00021e4:	83 ec 0c             	sub    esp,0xc
c00021e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021eb:	50                   	push   eax
c00021ec:	e8 fd fa ff ff       	call   c0001cee <disk_status>
c00021f1:	83 c4 10             	add    esp,0x10
c00021f4:	a8 01                	test   al,0x1
c00021f6:	75 cc                	jne    c00021c4 <validate+0x9>
c00021f8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021fa:	31 c0                	xor    eax,eax
c00021fc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021fe:	5a                   	pop    edx
c00021ff:	5b                   	pop    ebx
c0002200:	5e                   	pop    esi
c0002201:	c3                   	ret    

c0002202 <sync_window>:
c0002202:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002206:	74 58                	je     c0002260 <sync_window+0x5e>
c0002208:	56                   	push   esi
c0002209:	53                   	push   ebx
c000220a:	8d 70 34             	lea    esi,[eax+0x34]
c000220d:	51                   	push   ecx
c000220e:	89 c3                	mov    ebx,eax
c0002210:	6a 01                	push   0x1
c0002212:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002215:	56                   	push   esi
c0002216:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000221a:	50                   	push   eax
c000221b:	e8 ea fa ff ff       	call   c0001d0a <disk_write>
c0002220:	83 c4 10             	add    esp,0x10
c0002223:	ba 01 00 00 00       	mov    edx,0x1
c0002228:	85 c0                	test   eax,eax
c000222a:	75 2e                	jne    c000225a <sync_window+0x58>
c000222c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000222f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002232:	89 c1                	mov    ecx,eax
c0002234:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002238:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000223b:	39 d1                	cmp    ecx,edx
c000223d:	73 19                	jae    c0002258 <sync_window+0x56>
c000223f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002243:	75 13                	jne    c0002258 <sync_window+0x56>
c0002245:	6a 01                	push   0x1
c0002247:	01 d0                	add    eax,edx
c0002249:	50                   	push   eax
c000224a:	56                   	push   esi
c000224b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000224f:	50                   	push   eax
c0002250:	e8 b5 fa ff ff       	call   c0001d0a <disk_write>
c0002255:	83 c4 10             	add    esp,0x10
c0002258:	31 d2                	xor    edx,edx
c000225a:	89 d0                	mov    eax,edx
c000225c:	5a                   	pop    edx
c000225d:	5b                   	pop    ebx
c000225e:	5e                   	pop    esi
c000225f:	c3                   	ret    
c0002260:	31 d2                	xor    edx,edx
c0002262:	89 d0                	mov    eax,edx
c0002264:	c3                   	ret    

c0002265 <move_window>:
c0002265:	57                   	push   edi
c0002266:	56                   	push   esi
c0002267:	31 f6                	xor    esi,esi
c0002269:	53                   	push   ebx
c000226a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000226d:	74 32                	je     c00022a1 <move_window+0x3c>
c000226f:	89 c3                	mov    ebx,eax
c0002271:	89 d7                	mov    edi,edx
c0002273:	e8 8a ff ff ff       	call   c0002202 <sync_window>
c0002278:	89 c6                	mov    esi,eax
c000227a:	85 c0                	test   eax,eax
c000227c:	75 23                	jne    c00022a1 <move_window+0x3c>
c000227e:	6a 01                	push   0x1
c0002280:	8d 43 34             	lea    eax,[ebx+0x34]
c0002283:	57                   	push   edi
c0002284:	50                   	push   eax
c0002285:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002289:	50                   	push   eax
c000228a:	e8 65 fa ff ff       	call   c0001cf4 <disk_read>
c000228f:	83 c4 10             	add    esp,0x10
c0002292:	85 c0                	test   eax,eax
c0002294:	74 08                	je     c000229e <move_window+0x39>
c0002296:	be 01 00 00 00       	mov    esi,0x1
c000229b:	83 cf ff             	or     edi,0xffffffff
c000229e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00022a1:	89 f0                	mov    eax,esi
c00022a3:	5b                   	pop    ebx
c00022a4:	5e                   	pop    esi
c00022a5:	5f                   	pop    edi
c00022a6:	c3                   	ret    

c00022a7 <check_fs>:
c00022a7:	53                   	push   ebx
c00022a8:	89 c3                	mov    ebx,eax
c00022aa:	83 ec 08             	sub    esp,0x8
c00022ad:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022b1:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00022b8:	e8 a8 ff ff ff       	call   c0002265 <move_window>
c00022bd:	ba 04 00 00 00       	mov    edx,0x4
c00022c2:	85 c0                	test   eax,eax
c00022c4:	75 68                	jne    c000232e <check_fs+0x87>
c00022c6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022cc:	e8 6e fa ff ff       	call   c0001d3f <ld_word>
c00022d1:	ba 03 00 00 00       	mov    edx,0x3
c00022d6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022da:	75 52                	jne    c000232e <check_fs+0x87>
c00022dc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022df:	8d 50 18             	lea    edx,[eax+0x18]
c00022e2:	80 fa 01             	cmp    dl,0x1
c00022e5:	76 09                	jbe    c00022f0 <check_fs+0x49>
c00022e7:	ba 02 00 00 00       	mov    edx,0x2
c00022ec:	3c eb                	cmp    al,0xeb
c00022ee:	75 3e                	jne    c000232e <check_fs+0x87>
c00022f0:	ba a8 ee 01 c0       	mov    edx,0xc001eea8
c00022f5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022f8:	b9 03 00 00 00       	mov    ecx,0x3
c00022fd:	e8 89 fa ff ff       	call   c0001d8b <mem_cmp>
c0002302:	31 d2                	xor    edx,edx
c0002304:	85 c0                	test   eax,eax
c0002306:	74 26                	je     c000232e <check_fs+0x87>
c0002308:	ba 5c cf 01 c0       	mov    edx,0xc001cf5c
c000230d:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0002313:	b9 05 00 00 00       	mov    ecx,0x5
c0002318:	e8 6e fa ff ff       	call   c0001d8b <mem_cmp>
c000231d:	31 d2                	xor    edx,edx
c000231f:	85 c0                	test   eax,eax
c0002321:	74 0b                	je     c000232e <check_fs+0x87>
c0002323:	31 d2                	xor    edx,edx
c0002325:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002329:	0f 95 c2             	setne  dl
c000232c:	01 d2                	add    edx,edx
c000232e:	89 d0                	mov    eax,edx
c0002330:	83 c4 08             	add    esp,0x8
c0002333:	5b                   	pop    ebx
c0002334:	c3                   	ret    

c0002335 <find_volume>:
c0002335:	55                   	push   ebp
c0002336:	57                   	push   edi
c0002337:	56                   	push   esi
c0002338:	89 c6                	mov    esi,eax
c000233a:	53                   	push   ebx
c000233b:	89 d3                	mov    ebx,edx
c000233d:	83 ec 2c             	sub    esp,0x2c
c0002340:	31 d2                	xor    edx,edx
c0002342:	e8 60 ff ff ff       	call   c00022a7 <check_fs>
c0002347:	83 f8 02             	cmp    eax,0x2
c000234a:	74 06                	je     c0002352 <find_volume+0x1d>
c000234c:	77 62                	ja     c00023b0 <find_volume+0x7b>
c000234e:	85 db                	test   ebx,ebx
c0002350:	74 5e                	je     c00023b0 <find_volume+0x7b>
c0002352:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002356:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000235c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002362:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002366:	89 cf                	mov    edi,ecx
c0002368:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000236c:	89 e8                	mov    eax,ebp
c000236e:	83 c5 10             	add    ebp,0x10
c0002371:	e8 d6 f9 ff ff       	call   c0001d4c <ld_dword>
c0002376:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000237a:	89 01                	mov    DWORD PTR [ecx],eax
c000237c:	83 c1 04             	add    ecx,0x4
c000237f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002383:	75 e3                	jne    c0002368 <find_volume+0x33>
c0002385:	31 ed                	xor    ebp,ebp
c0002387:	85 db                	test   ebx,ebx
c0002389:	74 03                	je     c000238e <find_volume+0x59>
c000238b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000238e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002391:	b8 03 00 00 00       	mov    eax,0x3
c0002396:	85 d2                	test   edx,edx
c0002398:	74 0c                	je     c00023a6 <find_volume+0x71>
c000239a:	89 f0                	mov    eax,esi
c000239c:	e8 06 ff ff ff       	call   c00022a7 <check_fs>
c00023a1:	83 f8 01             	cmp    eax,0x1
c00023a4:	76 0a                	jbe    c00023b0 <find_volume+0x7b>
c00023a6:	85 db                	test   ebx,ebx
c00023a8:	75 06                	jne    c00023b0 <find_volume+0x7b>
c00023aa:	45                   	inc    ebp
c00023ab:	83 fd 03             	cmp    ebp,0x3
c00023ae:	76 de                	jbe    c000238e <find_volume+0x59>
c00023b0:	83 c4 2c             	add    esp,0x2c
c00023b3:	5b                   	pop    ebx
c00023b4:	5e                   	pop    esi
c00023b5:	5f                   	pop    edi
c00023b6:	5d                   	pop    ebp
c00023b7:	c3                   	ret    

c00023b8 <mount_volume>:
c00023b8:	55                   	push   ebp
c00023b9:	89 d5                	mov    ebp,edx
c00023bb:	57                   	push   edi
c00023bc:	89 cf                	mov    edi,ecx
c00023be:	56                   	push   esi
c00023bf:	53                   	push   ebx
c00023c0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023c5:	83 ec 2c             	sub    esp,0x2c
c00023c8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ce:	e8 9b fd ff ff       	call   c000216e <get_ldnumber>
c00023d3:	85 c0                	test   eax,eax
c00023d5:	0f 88 d6 02 00 00    	js     c00026b1 <mount_volume+0x2f9>
c00023db:	8b 34 85 e0 fe 01 c0 	mov    esi,DWORD PTR [eax*4-0x3ffe0120]
c00023e2:	89 c2                	mov    edx,eax
c00023e4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023e9:	85 f6                	test   esi,esi
c00023eb:	0f 84 c0 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c00023f1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023f4:	83 e7 fe             	and    edi,0xfffffffe
c00023f7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023fa:	74 3a                	je     c0002436 <mount_volume+0x7e>
c00023fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002400:	83 ec 0c             	sub    esp,0xc
c0002403:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002407:	50                   	push   eax
c0002408:	e8 e1 f8 ff ff       	call   c0001cee <disk_status>
c000240d:	83 c4 10             	add    esp,0x10
c0002410:	a8 01                	test   al,0x1
c0002412:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002416:	75 1e                	jne    c0002436 <mount_volume+0x7e>
c0002418:	31 db                	xor    ebx,ebx
c000241a:	89 f9                	mov    ecx,edi
c000241c:	84 c9                	test   cl,cl
c000241e:	0f 84 8d 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c0002424:	a8 04                	test   al,0x4
c0002426:	0f 84 85 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c000242c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002431:	e9 7b 02 00 00       	jmp    c00026b1 <mount_volume+0x2f9>
c0002436:	83 ec 0c             	sub    esp,0xc
c0002439:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000243c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000243f:	0f b6 c2             	movzx  eax,dl
c0002442:	bb 03 00 00 00       	mov    ebx,0x3
c0002447:	50                   	push   eax
c0002448:	e8 a4 f8 ff ff       	call   c0001cf1 <disk_initialize>
c000244d:	83 c4 10             	add    esp,0x10
c0002450:	a8 01                	test   al,0x1
c0002452:	0f 85 59 02 00 00    	jne    c00026b1 <mount_volume+0x2f9>
c0002458:	89 f9                	mov    ecx,edi
c000245a:	84 c9                	test   cl,cl
c000245c:	74 04                	je     c0002462 <mount_volume+0xaa>
c000245e:	a8 04                	test   al,0x4
c0002460:	75 ca                	jne    c000242c <mount_volume+0x74>
c0002462:	31 d2                	xor    edx,edx
c0002464:	89 f0                	mov    eax,esi
c0002466:	bb 01 00 00 00       	mov    ebx,0x1
c000246b:	e8 c5 fe ff ff       	call   c0002335 <find_volume>
c0002470:	83 f8 04             	cmp    eax,0x4
c0002473:	0f 84 38 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c0002479:	83 f8 01             	cmp    eax,0x1
c000247c:	76 0a                	jbe    c0002488 <mount_volume+0xd0>
c000247e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002483:	e9 29 02 00 00       	jmp    c00026b1 <mount_volume+0x2f9>
c0002488:	8d 46 3f             	lea    eax,[esi+0x3f]
c000248b:	e8 af f8 ff ff       	call   c0001d3f <ld_word>
c0002490:	66 3d 00 02          	cmp    ax,0x200
c0002494:	75 e8                	jne    c000247e <mount_volume+0xc6>
c0002496:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002499:	e8 a1 f8 ff ff       	call   c0001d3f <ld_word>
c000249e:	0f b7 c0             	movzx  eax,ax
c00024a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00024a5:	85 c0                	test   eax,eax
c00024a7:	75 0c                	jne    c00024b5 <mount_volume+0xfd>
c00024a9:	8d 46 58             	lea    eax,[esi+0x58]
c00024ac:	e8 9b f8 ff ff       	call   c0001d4c <ld_dword>
c00024b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00024b5:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00024b8:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00024bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00024bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024c3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024c6:	89 e8                	mov    eax,ebp
c00024c8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024cb:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ce:	3c 01                	cmp    al,0x1
c00024d0:	77 ac                	ja     c000247e <mount_volume+0xc6>
c00024d2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024d6:	89 c3                	mov    ebx,eax
c00024d8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024dc:	66 85 c0             	test   ax,ax
c00024df:	74 9d                	je     c000247e <mount_volume+0xc6>
c00024e1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024e4:	85 d8                	test   eax,ebx
c00024e6:	75 96                	jne    c000247e <mount_volume+0xc6>
c00024e8:	8d 46 45             	lea    eax,[esi+0x45]
c00024eb:	e8 4f f8 ff ff       	call   c0001d3f <ld_word>
c00024f0:	89 c7                	mov    edi,eax
c00024f2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024f6:	a8 0f                	test   al,0xf
c00024f8:	75 84                	jne    c000247e <mount_volume+0xc6>
c00024fa:	8d 46 47             	lea    eax,[esi+0x47]
c00024fd:	e8 3d f8 ff ff       	call   c0001d3f <ld_word>
c0002502:	0f b7 d0             	movzx  edx,ax
c0002505:	85 d2                	test   edx,edx
c0002507:	75 0a                	jne    c0002513 <mount_volume+0x15b>
c0002509:	8d 46 54             	lea    eax,[esi+0x54]
c000250c:	e8 3b f8 ff ff       	call   c0001d4c <ld_dword>
c0002511:	89 c2                	mov    edx,eax
c0002513:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002517:	8d 46 42             	lea    eax,[esi+0x42]
c000251a:	e8 20 f8 ff ff       	call   c0001d3f <ld_word>
c000251f:	66 85 c0             	test   ax,ax
c0002522:	0f 84 56 ff ff ff    	je     c000247e <mount_volume+0xc6>
c0002528:	89 e9                	mov    ecx,ebp
c000252a:	0f b7 c0             	movzx  eax,ax
c000252d:	0f b6 e9             	movzx  ebp,cl
c0002530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002534:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002538:	89 f8                	mov    eax,edi
c000253a:	0f af cd             	imul   ecx,ebp
c000253d:	66 c1 e8 04          	shr    ax,0x4
c0002541:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002545:	0f b7 c0             	movzx  eax,ax
c0002548:	01 c8                	add    eax,ecx
c000254a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000254e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002552:	39 c2                	cmp    edx,eax
c0002554:	0f 82 24 ff ff ff    	jb     c000247e <mount_volume+0xc6>
c000255a:	29 c2                	sub    edx,eax
c000255c:	89 d5                	mov    ebp,edx
c000255e:	89 d0                	mov    eax,edx
c0002560:	31 d2                	xor    edx,edx
c0002562:	f7 f3                	div    ebx
c0002564:	39 dd                	cmp    ebp,ebx
c0002566:	0f 82 12 ff ff ff    	jb     c000247e <mount_volume+0xc6>
c000256c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002571:	0f 87 07 ff ff ff    	ja     c000247e <mount_volume+0xc6>
c0002577:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000257c:	0f 86 1f 01 00 00    	jbe    c00026a1 <mount_volume+0x2e9>
c0002582:	bb 03 00 00 00       	mov    ebx,0x3
c0002587:	8d 68 02             	lea    ebp,[eax+0x2]
c000258a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000258e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002592:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002596:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002599:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000259c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00025a0:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00025a3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00025a7:	83 fb 03             	cmp    ebx,0x3
c00025aa:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00025ad:	75 21                	jne    c00025d0 <mount_volume+0x218>
c00025af:	8d 46 5e             	lea    eax,[esi+0x5e]
c00025b2:	e8 88 f7 ff ff       	call   c0001d3f <ld_word>
c00025b7:	66 09 c7             	or     di,ax
c00025ba:	0f 85 be fe ff ff    	jne    c000247e <mount_volume+0xc6>
c00025c0:	8d 46 60             	lea    eax,[esi+0x60]
c00025c3:	c1 e5 02             	shl    ebp,0x2
c00025c6:	e8 81 f7 ff ff       	call   c0001d4c <ld_dword>
c00025cb:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ce:	eb 22                	jmp    c00025f2 <mount_volume+0x23a>
c00025d0:	66 85 ff             	test   di,di
c00025d3:	0f 84 a5 fe ff ff    	je     c000247e <mount_volume+0xc6>
c00025d9:	01 c8                	add    eax,ecx
c00025db:	83 fb 02             	cmp    ebx,0x2
c00025de:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025e1:	75 04                	jne    c00025e7 <mount_volume+0x22f>
c00025e3:	01 ed                	add    ebp,ebp
c00025e5:	eb 0b                	jmp    c00025f2 <mount_volume+0x23a>
c00025e7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025eb:	83 e5 01             	and    ebp,0x1
c00025ee:	d1 e8                	shr    eax,1
c00025f0:	01 c5                	add    ebp,eax
c00025f2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025f8:	c1 ed 09             	shr    ebp,0x9
c00025fb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025ff:	0f 87 79 fe ff ff    	ja     c000247e <mount_volume+0xc6>
c0002605:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c000260c:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c0002613:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002617:	83 fb 03             	cmp    ebx,0x3
c000261a:	75 6e                	jne    c000268a <mount_volume+0x2d2>
c000261c:	8d 46 64             	lea    eax,[esi+0x64]
c000261f:	e8 1b f7 ff ff       	call   c0001d3f <ld_word>
c0002624:	66 48                	dec    ax
c0002626:	75 62                	jne    c000268a <mount_volume+0x2d2>
c0002628:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000262c:	89 f0                	mov    eax,esi
c000262e:	42                   	inc    edx
c000262f:	e8 31 fc ff ff       	call   c0002265 <move_window>
c0002634:	85 c0                	test   eax,eax
c0002636:	75 52                	jne    c000268a <mount_volume+0x2d2>
c0002638:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000263c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002642:	e8 f8 f6 ff ff       	call   c0001d3f <ld_word>
c0002647:	66 3d 55 aa          	cmp    ax,0xaa55
c000264b:	75 3d                	jne    c000268a <mount_volume+0x2d2>
c000264d:	8d 46 34             	lea    eax,[esi+0x34]
c0002650:	e8 f7 f6 ff ff       	call   c0001d4c <ld_dword>
c0002655:	3d 52 52 61 41       	cmp    eax,0x41615252
c000265a:	75 2e                	jne    c000268a <mount_volume+0x2d2>
c000265c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002662:	e8 e5 f6 ff ff       	call   c0001d4c <ld_dword>
c0002667:	3d 72 72 41 61       	cmp    eax,0x61417272
c000266c:	75 1c                	jne    c000268a <mount_volume+0x2d2>
c000266e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002674:	e8 d3 f6 ff ff       	call   c0001d4c <ld_dword>
c0002679:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000267c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002682:	e8 c5 f6 ff ff       	call   c0001d4c <ld_dword>
c0002687:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000268a:	66 a1 c0 fe 01 c0    	mov    ax,ds:0xc001fec0
c0002690:	88 1e                	mov    BYTE PTR [esi],bl
c0002692:	40                   	inc    eax
c0002693:	31 db                	xor    ebx,ebx
c0002695:	66 a3 c0 fe 01 c0    	mov    ds:0xc001fec0,ax
c000269b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000269f:	eb 10                	jmp    c00026b1 <mount_volume+0x2f9>
c00026a1:	31 db                	xor    ebx,ebx
c00026a3:	3d f5 0f 00 00       	cmp    eax,0xff5
c00026a8:	0f 97 c3             	seta   bl
c00026ab:	43                   	inc    ebx
c00026ac:	e9 d6 fe ff ff       	jmp    c0002587 <mount_volume+0x1cf>
c00026b1:	83 c4 2c             	add    esp,0x2c
c00026b4:	89 d8                	mov    eax,ebx
c00026b6:	5b                   	pop    ebx
c00026b7:	5e                   	pop    esi
c00026b8:	5f                   	pop    edi
c00026b9:	5d                   	pop    ebp
c00026ba:	c3                   	ret    

c00026bb <put_fat>:
c00026bb:	55                   	push   ebp
c00026bc:	bd 02 00 00 00       	mov    ebp,0x2
c00026c1:	57                   	push   edi
c00026c2:	56                   	push   esi
c00026c3:	53                   	push   ebx
c00026c4:	83 ec 1c             	sub    esp,0x1c
c00026c7:	83 fa 01             	cmp    edx,0x1
c00026ca:	0f 86 31 01 00 00    	jbe    c0002801 <put_fat+0x146>
c00026d0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026d3:	0f 86 28 01 00 00    	jbe    c0002801 <put_fat+0x146>
c00026d9:	89 c6                	mov    esi,eax
c00026db:	89 cf                	mov    edi,ecx
c00026dd:	8a 00                	mov    al,BYTE PTR [eax]
c00026df:	89 d3                	mov    ebx,edx
c00026e1:	3c 02                	cmp    al,0x2
c00026e3:	0f 84 ac 00 00 00    	je     c0002795 <put_fat+0xda>
c00026e9:	3c 03                	cmp    al,0x3
c00026eb:	0f 84 d1 00 00 00    	je     c00027c2 <put_fat+0x107>
c00026f1:	fe c8                	dec    al
c00026f3:	0f 85 08 01 00 00    	jne    c0002801 <put_fat+0x146>
c00026f9:	89 d1                	mov    ecx,edx
c00026fb:	89 f0                	mov    eax,esi
c00026fd:	d1 e9                	shr    ecx,1
c00026ff:	01 d1                	add    ecx,edx
c0002701:	89 ca                	mov    edx,ecx
c0002703:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002707:	c1 ea 09             	shr    edx,0x9
c000270a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000270d:	e8 53 fb ff ff       	call   c0002265 <move_window>
c0002712:	89 c5                	mov    ebp,eax
c0002714:	85 c0                	test   eax,eax
c0002716:	0f 85 e5 00 00 00    	jne    c0002801 <put_fat+0x146>
c000271c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002720:	8d 46 34             	lea    eax,[esi+0x34]
c0002723:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002727:	8d 41 01             	lea    eax,[ecx+0x1]
c000272a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002730:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002734:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002738:	89 f8                	mov    eax,edi
c000273a:	83 e3 01             	and    ebx,0x1
c000273d:	74 0c                	je     c000274b <put_fat+0x90>
c000273f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002741:	89 f8                	mov    eax,edi
c0002743:	83 e2 0f             	and    edx,0xf
c0002746:	c1 e0 04             	shl    eax,0x4
c0002749:	09 d0                	or     eax,edx
c000274b:	88 01                	mov    BYTE PTR [ecx],al
c000274d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002751:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002755:	c1 ea 09             	shr    edx,0x9
c0002758:	89 f0                	mov    eax,esi
c000275a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000275d:	e8 03 fb ff ff       	call   c0002265 <move_window>
c0002762:	89 c5                	mov    ebp,eax
c0002764:	85 c0                	test   eax,eax
c0002766:	0f 85 95 00 00 00    	jne    c0002801 <put_fat+0x146>
c000276c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002770:	25 ff 01 00 00       	and    eax,0x1ff
c0002775:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002779:	85 db                	test   ebx,ebx
c000277b:	74 07                	je     c0002784 <put_fat+0xc9>
c000277d:	c1 ef 04             	shr    edi,0x4
c0002780:	89 f9                	mov    ecx,edi
c0002782:	eb 0d                	jmp    c0002791 <put_fat+0xd6>
c0002784:	8a 08                	mov    cl,BYTE PTR [eax]
c0002786:	c1 ef 08             	shr    edi,0x8
c0002789:	83 e1 f0             	and    ecx,0xfffffff0
c000278c:	83 e7 0f             	and    edi,0xf
c000278f:	09 f9                	or     ecx,edi
c0002791:	88 08                	mov    BYTE PTR [eax],cl
c0002793:	eb 27                	jmp    c00027bc <put_fat+0x101>
c0002795:	c1 ea 08             	shr    edx,0x8
c0002798:	89 f0                	mov    eax,esi
c000279a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000279d:	e8 c3 fa ff ff       	call   c0002265 <move_window>
c00027a2:	89 c5                	mov    ebp,eax
c00027a4:	85 c0                	test   eax,eax
c00027a6:	75 59                	jne    c0002801 <put_fat+0x146>
c00027a8:	01 db                	add    ebx,ebx
c00027aa:	0f b7 d7             	movzx  edx,di
c00027ad:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00027b3:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00027b7:	e8 a8 f5 ff ff       	call   c0001d64 <st_word>
c00027bc:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027c0:	eb 3f                	jmp    c0002801 <put_fat+0x146>
c00027c2:	c1 ea 07             	shr    edx,0x7
c00027c5:	89 f0                	mov    eax,esi
c00027c7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027ca:	e8 96 fa ff ff       	call   c0002265 <move_window>
c00027cf:	89 c5                	mov    ebp,eax
c00027d1:	85 c0                	test   eax,eax
c00027d3:	75 2c                	jne    c0002801 <put_fat+0x146>
c00027d5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027db:	c1 e3 02             	shl    ebx,0x2
c00027de:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027e4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027e8:	89 d8                	mov    eax,ebx
c00027ea:	e8 5d f5 ff ff       	call   c0001d4c <ld_dword>
c00027ef:	25 00 00 00 f0       	and    eax,0xf0000000
c00027f4:	09 f8                	or     eax,edi
c00027f6:	89 c2                	mov    edx,eax
c00027f8:	89 d8                	mov    eax,ebx
c00027fa:	e8 69 f5 ff ff       	call   c0001d68 <st_dword>
c00027ff:	eb bb                	jmp    c00027bc <put_fat+0x101>
c0002801:	83 c4 1c             	add    esp,0x1c
c0002804:	89 e8                	mov    eax,ebp
c0002806:	5b                   	pop    ebx
c0002807:	5e                   	pop    esi
c0002808:	5f                   	pop    edi
c0002809:	5d                   	pop    ebp
c000280a:	c3                   	ret    

c000280b <dir_clear>:
c000280b:	55                   	push   ebp
c000280c:	57                   	push   edi
c000280d:	56                   	push   esi
c000280e:	89 c6                	mov    esi,eax
c0002810:	53                   	push   ebx
c0002811:	83 ec 1c             	sub    esp,0x1c
c0002814:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002818:	e8 e5 f9 ff ff       	call   c0002202 <sync_window>
c000281d:	85 c0                	test   eax,eax
c000281f:	0f 85 c0 00 00 00    	jne    c00028e5 <dir_clear+0xda>
c0002825:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002829:	89 f0                	mov    eax,esi
c000282b:	e8 55 f7 ff ff       	call   c0001f85 <clst2sect>
c0002830:	31 d2                	xor    edx,edx
c0002832:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002835:	89 c5                	mov    ebp,eax
c0002837:	b9 00 02 00 00       	mov    ecx,0x200
c000283c:	8d 46 34             	lea    eax,[esi+0x34]
c000283f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002843:	e8 38 f5 ff ff       	call   c0001d80 <mem_set>
c0002848:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000284c:	c1 e3 09             	shl    ebx,0x9
c000284f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002855:	76 1b                	jbe    c0002872 <dir_clear+0x67>
c0002857:	bb 00 80 00 00       	mov    ebx,0x8000
c000285c:	eb 14                	jmp    c0002872 <dir_clear+0x67>
c000285e:	83 ec 0c             	sub    esp,0xc
c0002861:	53                   	push   ebx
c0002862:	e8 25 32 00 00       	call   c0005a8c <ff_memalloc>
c0002867:	83 c4 10             	add    esp,0x10
c000286a:	89 c7                	mov    edi,eax
c000286c:	85 c0                	test   eax,eax
c000286e:	75 7c                	jne    c00028ec <dir_clear+0xe1>
c0002870:	d1 eb                	shr    ebx,1
c0002872:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002878:	77 e4                	ja     c000285e <dir_clear+0x53>
c000287a:	31 db                	xor    ebx,ebx
c000287c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002880:	39 d8                	cmp    eax,ebx
c0002882:	76 53                	jbe    c00028d7 <dir_clear+0xcc>
c0002884:	6a 01                	push   0x1
c0002886:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002889:	50                   	push   eax
c000288a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002892:	50                   	push   eax
c0002893:	e8 72 f4 ff ff       	call   c0001d0a <disk_write>
c0002898:	83 c4 10             	add    esp,0x10
c000289b:	85 c0                	test   eax,eax
c000289d:	75 38                	jne    c00028d7 <dir_clear+0xcc>
c000289f:	43                   	inc    ebx
c00028a0:	eb da                	jmp    c000287c <dir_clear+0x71>
c00028a2:	52                   	push   edx
c00028a3:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00028a6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00028aa:	50                   	push   eax
c00028ab:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00028af:	57                   	push   edi
c00028b0:	50                   	push   eax
c00028b1:	e8 54 f4 ff ff       	call   c0001d0a <disk_write>
c00028b6:	83 c4 10             	add    esp,0x10
c00028b9:	85 c0                	test   eax,eax
c00028bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028bf:	75 0a                	jne    c00028cb <dir_clear+0xc0>
c00028c1:	01 d3                	add    ebx,edx
c00028c3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028c7:	39 d8                	cmp    eax,ebx
c00028c9:	77 d7                	ja     c00028a2 <dir_clear+0x97>
c00028cb:	83 ec 0c             	sub    esp,0xc
c00028ce:	57                   	push   edi
c00028cf:	e8 d0 31 00 00       	call   c0005aa4 <ff_memfree>
c00028d4:	83 c4 10             	add    esp,0x10
c00028d7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028db:	39 d8                	cmp    eax,ebx
c00028dd:	0f 95 c0             	setne  al
c00028e0:	0f b6 c0             	movzx  eax,al
c00028e3:	eb 19                	jmp    c00028fe <dir_clear+0xf3>
c00028e5:	b8 01 00 00 00       	mov    eax,0x1
c00028ea:	eb 12                	jmp    c00028fe <dir_clear+0xf3>
c00028ec:	89 d9                	mov    ecx,ebx
c00028ee:	31 d2                	xor    edx,edx
c00028f0:	e8 8b f4 ff ff       	call   c0001d80 <mem_set>
c00028f5:	89 da                	mov    edx,ebx
c00028f7:	31 db                	xor    ebx,ebx
c00028f9:	c1 ea 09             	shr    edx,0x9
c00028fc:	eb c5                	jmp    c00028c3 <dir_clear+0xb8>
c00028fe:	83 c4 1c             	add    esp,0x1c
c0002901:	5b                   	pop    ebx
c0002902:	5e                   	pop    esi
c0002903:	5f                   	pop    edi
c0002904:	5d                   	pop    ebp
c0002905:	c3                   	ret    

c0002906 <create_name>:
c0002906:	55                   	push   ebp
c0002907:	89 d5                	mov    ebp,edx
c0002909:	57                   	push   edi
c000290a:	89 c7                	mov    edi,eax
c000290c:	56                   	push   esi
c000290d:	31 f6                	xor    esi,esi
c000290f:	53                   	push   ebx
c0002910:	83 ec 3c             	sub    esp,0x3c
c0002913:	8b 02                	mov    eax,DWORD PTR [edx]
c0002915:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002919:	8b 07                	mov    eax,DWORD PTR [edi]
c000291b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000291e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002922:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002926:	e8 9b f4 ff ff       	call   c0001dc6 <tchar2uni>
c000292b:	89 c3                	mov    ebx,eax
c000292d:	83 f8 ff             	cmp    eax,0xffffffff
c0002930:	75 0a                	jne    c000293c <create_name+0x36>
c0002932:	b8 06 00 00 00       	mov    eax,0x6
c0002937:	e9 9e 02 00 00       	jmp    c0002bda <create_name+0x2d4>
c000293c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002941:	76 0c                	jbe    c000294f <create_name+0x49>
c0002943:	c1 e8 10             	shr    eax,0x10
c0002946:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000294a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000294e:	46                   	inc    esi
c000294f:	66 83 fb 1f          	cmp    bx,0x1f
c0002953:	76 4f                	jbe    c00029a4 <create_name+0x9e>
c0002955:	66 83 fb 5c          	cmp    bx,0x5c
c0002959:	74 35                	je     c0002990 <create_name+0x8a>
c000295b:	66 83 fb 2f          	cmp    bx,0x2f
c000295f:	74 2f                	je     c0002990 <create_name+0x8a>
c0002961:	66 83 fb 7f          	cmp    bx,0x7f
c0002965:	77 11                	ja     c0002978 <create_name+0x72>
c0002967:	0f b7 d3             	movzx  edx,bx
c000296a:	b8 62 cf 01 c0       	mov    eax,0xc001cf62
c000296f:	e8 3a f4 ff ff       	call   c0001dae <chk_chr>
c0002974:	85 c0                	test   eax,eax
c0002976:	75 ba                	jne    c0002932 <create_name+0x2c>
c0002978:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000297e:	77 b2                	ja     c0002932 <create_name+0x2c>
c0002980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002984:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002988:	46                   	inc    esi
c0002989:	eb 97                	jmp    c0002922 <create_name+0x1c>
c000298b:	40                   	inc    eax
c000298c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002990:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002994:	8a 10                	mov    dl,BYTE PTR [eax]
c0002996:	80 fa 2f             	cmp    dl,0x2f
c0002999:	74 f0                	je     c000298b <create_name+0x85>
c000299b:	80 fa 5c             	cmp    dl,0x5c
c000299e:	74 eb                	je     c000298b <create_name+0x85>
c00029a0:	31 db                	xor    ebx,ebx
c00029a2:	eb 02                	jmp    c00029a6 <create_name+0xa0>
c00029a4:	b3 04                	mov    bl,0x4
c00029a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00029aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00029ad:	85 f6                	test   esi,esi
c00029af:	74 18                	je     c00029c9 <create_name+0xc3>
c00029b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029b5:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c00029ba:	66 83 f8 20          	cmp    ax,0x20
c00029be:	74 06                	je     c00029c6 <create_name+0xc0>
c00029c0:	66 83 f8 2e          	cmp    ax,0x2e
c00029c4:	75 03                	jne    c00029c9 <create_name+0xc3>
c00029c6:	4e                   	dec    esi
c00029c7:	eb e4                	jmp    c00029ad <create_name+0xa7>
c00029c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029cd:	31 ed                	xor    ebp,ebp
c00029cf:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029d5:	85 f6                	test   esi,esi
c00029d7:	0f 84 55 ff ff ff    	je     c0002932 <create_name+0x2c>
c00029dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029e4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029e8:	66 83 f8 20          	cmp    ax,0x20
c00029ec:	75 04                	jne    c00029f2 <create_name+0xec>
c00029ee:	89 d5                	mov    ebp,edx
c00029f0:	eb eb                	jmp    c00029dd <create_name+0xd7>
c00029f2:	85 ed                	test   ebp,ebp
c00029f4:	75 06                	jne    c00029fc <create_name+0xf6>
c00029f6:	66 83 f8 2e          	cmp    ax,0x2e
c00029fa:	75 08                	jne    c0002a04 <create_name+0xfe>
c00029fc:	83 cb 03             	or     ebx,0x3
c00029ff:	eb 03                	jmp    c0002a04 <create_name+0xfe>
c0002a01:	4e                   	dec    esi
c0002a02:	74 0c                	je     c0002a10 <create_name+0x10a>
c0002a04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a08:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002a0e:	75 f1                	jne    c0002a01 <create_name+0xfb>
c0002a10:	b9 0b 00 00 00       	mov    ecx,0xb
c0002a15:	8d 47 20             	lea    eax,[edi+0x20]
c0002a18:	ba 20 00 00 00       	mov    edx,0x20
c0002a1d:	e8 5e f3 ff ff       	call   c0001d80 <mem_set>
c0002a22:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a2a:	31 c9                	xor    ecx,ecx
c0002a2c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a31:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a34:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a3c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a40:	66 85 ed             	test   bp,bp
c0002a43:	0f 84 30 01 00 00    	je     c0002b79 <create_name+0x273>
c0002a49:	66 83 fd 20          	cmp    bp,0x20
c0002a4d:	74 10                	je     c0002a5f <create_name+0x159>
c0002a4f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a53:	75 13                	jne    c0002a68 <create_name+0x162>
c0002a55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a59:	0f 84 6b 01 00 00    	je     c0002bca <create_name+0x2c4>
c0002a5f:	83 cb 03             	or     ebx,0x3
c0002a62:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a66:	eb c9                	jmp    c0002a31 <create_name+0x12b>
c0002a68:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a6c:	73 0b                	jae    c0002a79 <create_name+0x173>
c0002a6e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a72:	75 47                	jne    c0002abb <create_name+0x1b5>
c0002a74:	e9 51 01 00 00       	jmp    c0002bca <create_name+0x2c4>
c0002a79:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a7e:	75 10                	jne    c0002a90 <create_name+0x18a>
c0002a80:	83 cb 03             	or     ebx,0x3
c0002a83:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a8b:	e9 e9 00 00 00       	jmp    c0002b79 <create_name+0x273>
c0002a90:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a94:	74 0d                	je     c0002aa3 <create_name+0x19d>
c0002a96:	83 cb 03             	or     ebx,0x3
c0002a99:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a9d:	0f 87 d6 00 00 00    	ja     c0002b79 <create_name+0x273>
c0002aa3:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002aa8:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002aac:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002ab4:	b9 08 00 00 00       	mov    ecx,0x8
c0002ab9:	eb a7                	jmp    c0002a62 <create_name+0x15c>
c0002abb:	66 83 fd 7f          	cmp    bp,0x7f
c0002abf:	76 68                	jbe    c0002b29 <create_name+0x223>
c0002ac1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002ac5:	88 da                	mov    dl,bl
c0002ac7:	83 ca 02             	or     edx,0x2
c0002aca:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002ace:	50                   	push   eax
c0002acf:	50                   	push   eax
c0002ad0:	68 b5 01 00 00       	push   0x1b5
c0002ad5:	55                   	push   ebp
c0002ad6:	e8 e1 2f 00 00       	call   c0005abc <ff_uni2oem>
c0002adb:	83 c4 10             	add    esp,0x10
c0002ade:	89 c5                	mov    ebp,eax
c0002ae0:	a8 80                	test   al,0x80
c0002ae2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ae6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aea:	74 0c                	je     c0002af8 <create_name+0x1f2>
c0002aec:	83 e5 7f             	and    ebp,0x7f
c0002aef:	0f b6 ad 20 d0 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe2fe0]
c0002af6:	eb 2a                	jmp    c0002b22 <create_name+0x21c>
c0002af8:	66 3d ff 00          	cmp    ax,0xff
c0002afc:	76 24                	jbe    c0002b22 <create_name+0x21c>
c0002afe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b02:	48                   	dec    eax
c0002b03:	39 c8                	cmp    eax,ecx
c0002b05:	77 0c                	ja     c0002b13 <create_name+0x20d>
c0002b07:	83 cb 03             	or     ebx,0x3
c0002b0a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002b0e:	e9 4f ff ff ff       	jmp    c0002a62 <create_name+0x15c>
c0002b13:	89 e8                	mov    eax,ebp
c0002b15:	88 d3                	mov    bl,dl
c0002b17:	66 c1 e8 08          	shr    ax,0x8
c0002b1b:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b1f:	41                   	inc    ecx
c0002b20:	eb 4b                	jmp    c0002b6d <create_name+0x267>
c0002b22:	88 d3                	mov    bl,dl
c0002b24:	66 85 ed             	test   bp,bp
c0002b27:	74 19                	je     c0002b42 <create_name+0x23c>
c0002b29:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b2d:	0f b7 d5             	movzx  edx,bp
c0002b30:	b8 6b cf 01 c0       	mov    eax,0xc001cf6b
c0002b35:	e8 74 f2 ff ff       	call   c0001dae <chk_chr>
c0002b3a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b3e:	85 c0                	test   eax,eax
c0002b40:	74 0a                	je     c0002b4c <create_name+0x246>
c0002b42:	83 cb 03             	or     ebx,0x3
c0002b45:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b4a:	eb 21                	jmp    c0002b6d <create_name+0x267>
c0002b4c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b4f:	66 83 f8 19          	cmp    ax,0x19
c0002b53:	77 07                	ja     c0002b5c <create_name+0x256>
c0002b55:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b5a:	eb 11                	jmp    c0002b6d <create_name+0x267>
c0002b5c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b5f:	66 83 f8 19          	cmp    ax,0x19
c0002b63:	77 08                	ja     c0002b6d <create_name+0x267>
c0002b65:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b6a:	83 ed 20             	sub    ebp,0x20
c0002b6d:	89 e8                	mov    eax,ebp
c0002b6f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b73:	41                   	inc    ecx
c0002b74:	e9 e9 fe ff ff       	jmp    c0002a62 <create_name+0x15c>
c0002b79:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b7d:	75 04                	jne    c0002b83 <create_name+0x27d>
c0002b7f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b83:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b88:	75 05                	jne    c0002b8f <create_name+0x289>
c0002b8a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b8f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b93:	83 e0 0c             	and    eax,0xc
c0002b96:	3c 0c                	cmp    al,0xc
c0002b98:	74 0b                	je     c0002ba5 <create_name+0x29f>
c0002b9a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b9e:	83 e0 03             	and    eax,0x3
c0002ba1:	3c 03                	cmp    al,0x3
c0002ba3:	75 05                	jne    c0002baa <create_name+0x2a4>
c0002ba5:	83 cb 02             	or     ebx,0x2
c0002ba8:	eb 19                	jmp    c0002bc3 <create_name+0x2bd>
c0002baa:	f6 c3 02             	test   bl,0x2
c0002bad:	75 14                	jne    c0002bc3 <create_name+0x2bd>
c0002baf:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002bb4:	74 03                	je     c0002bb9 <create_name+0x2b3>
c0002bb6:	83 cb 10             	or     ebx,0x10
c0002bb9:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002bbe:	74 03                	je     c0002bc3 <create_name+0x2bd>
c0002bc0:	83 cb 08             	or     ebx,0x8
c0002bc3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002bc6:	31 c0                	xor    eax,eax
c0002bc8:	eb 10                	jmp    c0002bda <create_name+0x2d4>
c0002bca:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002bcf:	0f 85 ce fe ff ff    	jne    c0002aa3 <create_name+0x19d>
c0002bd5:	e9 a6 fe ff ff       	jmp    c0002a80 <create_name+0x17a>
c0002bda:	83 c4 3c             	add    esp,0x3c
c0002bdd:	5b                   	pop    ebx
c0002bde:	5e                   	pop    esi
c0002bdf:	5f                   	pop    edi
c0002be0:	5d                   	pop    ebp
c0002be1:	c3                   	ret    

c0002be2 <cmp_lfn>:
c0002be2:	55                   	push   ebp
c0002be3:	57                   	push   edi
c0002be4:	89 d7                	mov    edi,edx
c0002be6:	56                   	push   esi
c0002be7:	53                   	push   ebx
c0002be8:	83 ec 1c             	sub    esp,0x1c
c0002beb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bef:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bf2:	e8 48 f1 ff ff       	call   c0001d3f <ld_word>
c0002bf7:	66 85 c0             	test   ax,ax
c0002bfa:	74 07                	je     c0002c03 <cmp_lfn+0x21>
c0002bfc:	31 c0                	xor    eax,eax
c0002bfe:	e9 9a 00 00 00       	jmp    c0002c9d <cmp_lfn+0xbb>
c0002c03:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002c05:	bd 01 00 00 00       	mov    ebp,0x1
c0002c0a:	83 e3 3f             	and    ebx,0x3f
c0002c0d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002c15:	4b                   	dec    ebx
c0002c16:	6b db 0d             	imul   ebx,ebx,0xd
c0002c19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002c1d:	0f b6 80 a0 d0 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe2f60]
c0002c24:	01 f8                	add    eax,edi
c0002c26:	e8 14 f1 ff ff       	call   c0001d3f <ld_word>
c0002c2b:	66 85 ed             	test   bp,bp
c0002c2e:	89 c6                	mov    esi,eax
c0002c30:	74 3c                	je     c0002c6e <cmp_lfn+0x8c>
c0002c32:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c38:	77 c2                	ja     c0002bfc <cmp_lfn+0x1a>
c0002c3a:	83 ec 0c             	sub    esp,0xc
c0002c3d:	0f b7 c0             	movzx  eax,ax
c0002c40:	50                   	push   eax
c0002c41:	e8 8e 2f 00 00       	call   c0005bd4 <ff_wtoupper>
c0002c46:	89 c5                	mov    ebp,eax
c0002c48:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c4b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c53:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c57:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c5a:	e8 75 2f 00 00       	call   c0005bd4 <ff_wtoupper>
c0002c5f:	83 c4 10             	add    esp,0x10
c0002c62:	39 c5                	cmp    ebp,eax
c0002c64:	75 96                	jne    c0002bfc <cmp_lfn+0x1a>
c0002c66:	89 f5                	mov    ebp,esi
c0002c68:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c6c:	eb 04                	jmp    c0002c72 <cmp_lfn+0x90>
c0002c6e:	66 46                	inc    si
c0002c70:	75 8a                	jne    c0002bfc <cmp_lfn+0x1a>
c0002c72:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c76:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c7b:	75 9c                	jne    c0002c19 <cmp_lfn+0x37>
c0002c7d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c80:	74 16                	je     c0002c98 <cmp_lfn+0xb6>
c0002c82:	66 85 ed             	test   bp,bp
c0002c85:	74 11                	je     c0002c98 <cmp_lfn+0xb6>
c0002c87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c8b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c90:	0f 94 c0             	sete   al
c0002c93:	0f b6 c0             	movzx  eax,al
c0002c96:	eb 05                	jmp    c0002c9d <cmp_lfn+0xbb>
c0002c98:	b8 01 00 00 00       	mov    eax,0x1
c0002c9d:	83 c4 1c             	add    esp,0x1c
c0002ca0:	5b                   	pop    ebx
c0002ca1:	5e                   	pop    esi
c0002ca2:	5f                   	pop    edi
c0002ca3:	5d                   	pop    ebp
c0002ca4:	c3                   	ret    

c0002ca5 <sync_fs>:
c0002ca5:	56                   	push   esi
c0002ca6:	53                   	push   ebx
c0002ca7:	53                   	push   ebx
c0002ca8:	89 c3                	mov    ebx,eax
c0002caa:	e8 53 f5 ff ff       	call   c0002202 <sync_window>
c0002caf:	85 c0                	test   eax,eax
c0002cb1:	0f 85 9a 00 00 00    	jne    c0002d51 <sync_fs+0xac>
c0002cb7:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002cba:	75 7b                	jne    c0002d37 <sync_fs+0x92>
c0002cbc:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002cc0:	75 75                	jne    c0002d37 <sync_fs+0x92>
c0002cc2:	b9 00 02 00 00       	mov    ecx,0x200
c0002cc7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002cca:	31 d2                	xor    edx,edx
c0002ccc:	89 f0                	mov    eax,esi
c0002cce:	e8 ad f0 ff ff       	call   c0001d80 <mem_set>
c0002cd3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cd9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cde:	e8 81 f0 ff ff       	call   c0001d64 <st_word>
c0002ce3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002ce8:	89 f0                	mov    eax,esi
c0002cea:	e8 79 f0 ff ff       	call   c0001d68 <st_dword>
c0002cef:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cf5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cfa:	e8 69 f0 ff ff       	call   c0001d68 <st_dword>
c0002cff:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002d02:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002d08:	e8 5b f0 ff ff       	call   c0001d68 <st_dword>
c0002d0d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002d10:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002d16:	e8 4d f0 ff ff       	call   c0001d68 <st_dword>
c0002d1b:	6a 01                	push   0x1
c0002d1d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d20:	40                   	inc    eax
c0002d21:	50                   	push   eax
c0002d22:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d25:	56                   	push   esi
c0002d26:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d2a:	50                   	push   eax
c0002d2b:	e8 da ef ff ff       	call   c0001d0a <disk_write>
c0002d30:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d34:	83 c4 10             	add    esp,0x10
c0002d37:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d3b:	51                   	push   ecx
c0002d3c:	6a 00                	push   0x0
c0002d3e:	6a 00                	push   0x0
c0002d40:	50                   	push   eax
c0002d41:	e8 da ef ff ff       	call   c0001d20 <disk_ioctl>
c0002d46:	83 c4 10             	add    esp,0x10
c0002d49:	85 c0                	test   eax,eax
c0002d4b:	0f 95 c0             	setne  al
c0002d4e:	0f b6 c0             	movzx  eax,al
c0002d51:	5a                   	pop    edx
c0002d52:	5b                   	pop    ebx
c0002d53:	5e                   	pop    esi
c0002d54:	c3                   	ret    

c0002d55 <create_partition>:
c0002d55:	55                   	push   ebp
c0002d56:	0f b6 c0             	movzx  eax,al
c0002d59:	57                   	push   edi
c0002d5a:	56                   	push   esi
c0002d5b:	53                   	push   ebx
c0002d5c:	83 ec 40             	sub    esp,0x40
c0002d5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d63:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d67:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d6b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d6f:	50                   	push   eax
c0002d70:	6a 01                	push   0x1
c0002d72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d76:	e8 a5 ef ff ff       	call   c0001d20 <disk_ioctl>
c0002d7b:	83 c4 10             	add    esp,0x10
c0002d7e:	85 c0                	test   eax,eax
c0002d80:	0f 85 69 01 00 00    	jne    c0002eef <create_partition+0x19a>
c0002d86:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d8a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d93:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d98:	31 d2                	xor    edx,edx
c0002d9a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002da3:	f7 f3                	div    ebx
c0002da5:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002daa:	76 0c                	jbe    c0002db8 <create_partition+0x63>
c0002dac:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002db0:	49                   	dec    ecx
c0002db1:	75 e5                	jne    c0002d98 <create_partition+0x43>
c0002db3:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002db8:	b9 00 02 00 00       	mov    ecx,0x200
c0002dbd:	31 d2                	xor    edx,edx
c0002dbf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dc3:	e8 b8 ef ff ff       	call   c0001d80 <mem_set>
c0002dc8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002dd1:	31 d2                	xor    edx,edx
c0002dd3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002ddb:	f7 f1                	div    ecx
c0002ddd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002de2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002de6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dea:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002df0:	85 c9                	test   ecx,ecx
c0002df2:	75 34                	jne    c0002e28 <create_partition+0xd3>
c0002df4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002df8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dfd:	05 fe 01 00 00       	add    eax,0x1fe
c0002e02:	e8 5d ef ff ff       	call   c0001d64 <st_word>
c0002e07:	6a 01                	push   0x1
c0002e09:	6a 00                	push   0x0
c0002e0b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002e0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002e13:	e8 f2 ee ff ff       	call   c0001d0a <disk_write>
c0002e18:	83 c4 10             	add    esp,0x10
c0002e1b:	85 c0                	test   eax,eax
c0002e1d:	0f 95 c0             	setne  al
c0002e20:	0f b6 c0             	movzx  eax,al
c0002e23:	e9 cc 00 00 00       	jmp    c0002ef4 <create_partition+0x19f>
c0002e28:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e2c:	76 c6                	jbe    c0002df4 <create_partition+0x9f>
c0002e2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e32:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e36:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e39:	83 fe 64             	cmp    esi,0x64
c0002e3c:	77 0d                	ja     c0002e4b <create_partition+0xf6>
c0002e3e:	74 07                	je     c0002e47 <create_partition+0xf2>
c0002e40:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e45:	eb 04                	jmp    c0002e4b <create_partition+0xf6>
c0002e47:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e4b:	31 c0                	xor    eax,eax
c0002e4d:	89 f2                	mov    edx,esi
c0002e4f:	01 ca                	add    edx,ecx
c0002e51:	0f 92 c0             	setb   al
c0002e54:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e58:	77 04                	ja     c0002e5e <create_partition+0x109>
c0002e5a:	85 c0                	test   eax,eax
c0002e5c:	74 08                	je     c0002e66 <create_partition+0x111>
c0002e5e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e62:	29 ce                	sub    esi,ecx
c0002e64:	eb 04                	jmp    c0002e6a <create_partition+0x115>
c0002e66:	85 f6                	test   esi,esi
c0002e68:	74 8a                	je     c0002df4 <create_partition+0x9f>
c0002e6a:	89 ca                	mov    edx,ecx
c0002e6c:	89 d8                	mov    eax,ebx
c0002e6e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e73:	e8 f0 ee ff ff       	call   c0001d68 <st_dword>
c0002e78:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e7b:	89 f2                	mov    edx,esi
c0002e7d:	83 c3 10             	add    ebx,0x10
c0002e80:	e8 e3 ee ff ff       	call   c0001d68 <st_dword>
c0002e85:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e8a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e8e:	31 d2                	xor    edx,edx
c0002e90:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e93:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e97:	89 c8                	mov    eax,ecx
c0002e99:	01 f1                	add    ecx,esi
c0002e9b:	f7 f5                	div    ebp
c0002e9d:	89 d5                	mov    ebp,edx
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	45                   	inc    ebp
c0002ea2:	f7 f7                	div    edi
c0002ea4:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002ea7:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002eaa:	89 c2                	mov    edx,eax
c0002eac:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002eaf:	c1 ea 02             	shr    edx,0x2
c0002eb2:	83 e2 c0             	and    edx,0xffffffc0
c0002eb5:	09 ea                	or     edx,ebp
c0002eb7:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002ebc:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002ebf:	31 d2                	xor    edx,edx
c0002ec1:	f7 f5                	div    ebp
c0002ec3:	89 d6                	mov    esi,edx
c0002ec5:	31 d2                	xor    edx,edx
c0002ec7:	46                   	inc    esi
c0002ec8:	f7 f7                	div    edi
c0002eca:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ecd:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002ed0:	89 c7                	mov    edi,eax
c0002ed2:	c1 ef 02             	shr    edi,0x2
c0002ed5:	83 e7 c0             	and    edi,0xffffffc0
c0002ed8:	09 fe                	or     esi,edi
c0002eda:	89 f2                	mov    edx,esi
c0002edc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002edf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ee4:	0f 85 06 ff ff ff    	jne    c0002df0 <create_partition+0x9b>
c0002eea:	e9 05 ff ff ff       	jmp    c0002df4 <create_partition+0x9f>
c0002eef:	b8 01 00 00 00       	mov    eax,0x1
c0002ef4:	83 c4 3c             	add    esp,0x3c
c0002ef7:	5b                   	pop    ebx
c0002ef8:	5e                   	pop    esi
c0002ef9:	5f                   	pop    edi
c0002efa:	5d                   	pop    ebp
c0002efb:	c3                   	ret    

c0002efc <get_fileinfo>:
c0002efc:	55                   	push   ebp
c0002efd:	57                   	push   edi
c0002efe:	56                   	push   esi
c0002eff:	53                   	push   ebx
c0002f00:	83 ec 1c             	sub    esp,0x1c
c0002f03:	8b 30                	mov    esi,DWORD PTR [eax]
c0002f05:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002f09:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002f0d:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002f11:	0f 84 c1 01 00 00    	je     c00030d8 <get_fileinfo+0x1dc>
c0002f17:	89 d3                	mov    ebx,edx
c0002f19:	89 c6                	mov    esi,eax
c0002f1b:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002f1f:	74 6a                	je     c0002f8b <get_fileinfo+0x8f>
c0002f21:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f29:	31 ed                	xor    ebp,ebp
c0002f2b:	31 ff                	xor    edi,edi
c0002f2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f31:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f35:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f38:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f3c:	66 85 d2             	test   dx,dx
c0002f3f:	74 3e                	je     c0002f7f <get_fileinfo+0x83>
c0002f41:	66 85 ed             	test   bp,bp
c0002f44:	75 0c                	jne    c0002f52 <get_fileinfo+0x56>
c0002f46:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f4c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f50:	76 22                	jbe    c0002f74 <get_fileinfo+0x78>
c0002f52:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f57:	89 e8                	mov    eax,ebp
c0002f59:	29 f9                	sub    ecx,edi
c0002f5b:	c1 e0 10             	shl    eax,0x10
c0002f5e:	09 d0                	or     eax,edx
c0002f60:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f64:	e8 23 ef ff ff       	call   c0001e8c <put_utf>
c0002f69:	84 c0                	test   al,al
c0002f6b:	74 10                	je     c0002f7d <get_fileinfo+0x81>
c0002f6d:	0f b6 c0             	movzx  eax,al
c0002f70:	31 d2                	xor    edx,edx
c0002f72:	01 c7                	add    edi,eax
c0002f74:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f79:	89 d5                	mov    ebp,edx
c0002f7b:	eb b0                	jmp    c0002f2d <get_fileinfo+0x31>
c0002f7d:	31 ff                	xor    edi,edi
c0002f7f:	66 85 ed             	test   bp,bp
c0002f82:	74 02                	je     c0002f86 <get_fileinfo+0x8a>
c0002f84:	31 ff                	xor    edi,edi
c0002f86:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f8b:	31 ff                	xor    edi,edi
c0002f8d:	31 c9                	xor    ecx,ecx
c0002f8f:	83 f9 0a             	cmp    ecx,0xa
c0002f92:	0f 87 ad 00 00 00    	ja     c0003045 <get_fileinfo+0x149>
c0002f98:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f9b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f9e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002fa2:	66 83 fa 20          	cmp    dx,0x20
c0002fa6:	0f 84 92 00 00 00    	je     c000303e <get_fileinfo+0x142>
c0002fac:	66 83 fa 05          	cmp    dx,0x5
c0002fb0:	75 05                	jne    c0002fb7 <get_fileinfo+0xbb>
c0002fb2:	ba e5 00 00 00       	mov    edx,0xe5
c0002fb7:	83 ff 0b             	cmp    edi,0xb
c0002fba:	77 0b                	ja     c0002fc7 <get_fileinfo+0xcb>
c0002fbc:	83 fd 09             	cmp    ebp,0x9
c0002fbf:	75 06                	jne    c0002fc7 <get_fileinfo+0xcb>
c0002fc1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fc6:	47                   	inc    edi
c0002fc7:	0f b7 c2             	movzx  eax,dx
c0002fca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fce:	e8 ed ed ff ff       	call   c0001dc0 <dbc_1st>
c0002fd3:	85 c0                	test   eax,eax
c0002fd5:	74 2f                	je     c0003006 <get_fileinfo+0x10a>
c0002fd7:	83 fd 08             	cmp    ebp,0x8
c0002fda:	74 2a                	je     c0003006 <get_fileinfo+0x10a>
c0002fdc:	83 fd 0b             	cmp    ebp,0xb
c0002fdf:	74 25                	je     c0003006 <get_fileinfo+0x10a>
c0002fe1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fe4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fe8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fec:	e8 d2 ed ff ff       	call   c0001dc3 <dbc_2nd>
c0002ff1:	85 c0                	test   eax,eax
c0002ff3:	74 11                	je     c0003006 <get_fileinfo+0x10a>
c0002ff5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ff9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002ffe:	c1 e2 08             	shl    edx,0x8
c0003001:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003004:	09 c2                	or     edx,eax
c0003006:	0f b7 d2             	movzx  edx,dx
c0003009:	50                   	push   eax
c000300a:	50                   	push   eax
c000300b:	68 b5 01 00 00       	push   0x1b5
c0003010:	52                   	push   edx
c0003011:	e8 46 2b 00 00       	call   c0005b5c <ff_oem2uni>
c0003016:	83 c4 10             	add    esp,0x10
c0003019:	66 85 c0             	test   ax,ax
c000301c:	75 04                	jne    c0003022 <get_fileinfo+0x126>
c000301e:	31 ff                	xor    edi,edi
c0003020:	eb 23                	jmp    c0003045 <get_fileinfo+0x149>
c0003022:	b9 0c 00 00 00       	mov    ecx,0xc
c0003027:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000302b:	29 f9                	sub    ecx,edi
c000302d:	0f b7 c0             	movzx  eax,ax
c0003030:	e8 57 ee ff ff       	call   c0001e8c <put_utf>
c0003035:	84 c0                	test   al,al
c0003037:	74 e5                	je     c000301e <get_fileinfo+0x122>
c0003039:	0f b6 c0             	movzx  eax,al
c000303c:	01 c7                	add    edi,eax
c000303e:	89 e9                	mov    ecx,ebp
c0003040:	e9 4a ff ff ff       	jmp    c0002f8f <get_fileinfo+0x93>
c0003045:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000304a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000304e:	75 54                	jne    c00030a4 <get_fileinfo+0x1a8>
c0003050:	85 ff                	test   edi,edi
c0003052:	75 0b                	jne    c000305f <get_fileinfo+0x163>
c0003054:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003058:	ba 01 00 00 00       	mov    edx,0x1
c000305d:	eb 33                	jmp    c0003092 <get_fileinfo+0x196>
c000305f:	b1 08                	mov    cl,0x8
c0003061:	31 d2                	xor    edx,edx
c0003063:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003069:	84 c0                	test   al,al
c000306b:	74 25                	je     c0003092 <get_fileinfo+0x196>
c000306d:	66 83 f8 2e          	cmp    ax,0x2e
c0003071:	74 16                	je     c0003089 <get_fileinfo+0x18d>
c0003073:	8d 78 bf             	lea    edi,[eax-0x41]
c0003076:	66 83 ff 19          	cmp    di,0x19
c000307a:	77 0f                	ja     c000308b <get_fileinfo+0x18f>
c000307c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000307f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003082:	74 07                	je     c000308b <get_fileinfo+0x18f>
c0003084:	83 c0 20             	add    eax,0x20
c0003087:	eb 02                	jmp    c000308b <get_fileinfo+0x18f>
c0003089:	b1 10                	mov    cl,0x10
c000308b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000308f:	42                   	inc    edx
c0003090:	eb d1                	jmp    c0003063 <get_fileinfo+0x167>
c0003092:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003097:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000309e:	75 04                	jne    c00030a4 <get_fileinfo+0x1a8>
c00030a0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00030a4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030a7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00030aa:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00030ad:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b0:	83 c0 1c             	add    eax,0x1c
c00030b3:	e8 94 ec ff ff       	call   c0001d4c <ld_dword>
c00030b8:	89 03                	mov    DWORD PTR [ebx],eax
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	83 c0 16             	add    eax,0x16
c00030c0:	e8 7a ec ff ff       	call   c0001d3f <ld_word>
c00030c5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030c9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030cc:	83 c0 18             	add    eax,0x18
c00030cf:	e8 6b ec ff ff       	call   c0001d3f <ld_word>
c00030d4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030d8:	83 c4 1c             	add    esp,0x1c
c00030db:	5b                   	pop    ebx
c00030dc:	5e                   	pop    esi
c00030dd:	5f                   	pop    edi
c00030de:	5d                   	pop    ebp
c00030df:	c3                   	ret    

c00030e0 <ld_clust.isra.0>:
c00030e0:	56                   	push   esi
c00030e1:	89 c6                	mov    esi,eax
c00030e3:	53                   	push   ebx
c00030e4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030e7:	89 d3                	mov    ebx,edx
c00030e9:	e8 51 ec ff ff       	call   c0001d3f <ld_word>
c00030ee:	0f b7 c8             	movzx  ecx,ax
c00030f1:	89 f0                	mov    eax,esi
c00030f3:	3c 03                	cmp    al,0x3
c00030f5:	75 0d                	jne    c0003104 <ld_clust.isra.0+0x24>
c00030f7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030fa:	e8 40 ec ff ff       	call   c0001d3f <ld_word>
c00030ff:	c1 e0 10             	shl    eax,0x10
c0003102:	09 c1                	or     ecx,eax
c0003104:	89 c8                	mov    eax,ecx
c0003106:	5b                   	pop    ebx
c0003107:	5e                   	pop    esi
c0003108:	c3                   	ret    

c0003109 <st_clust.isra.1>:
c0003109:	56                   	push   esi
c000310a:	89 c6                	mov    esi,eax
c000310c:	53                   	push   ebx
c000310d:	89 d3                	mov    ebx,edx
c000310f:	0f b7 d1             	movzx  edx,cx
c0003112:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003115:	e8 4a ec ff ff       	call   c0001d64 <st_word>
c000311a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000311d:	75 0f                	jne    c000312e <st_clust.isra.1+0x25>
c000311f:	c1 e9 10             	shr    ecx,0x10
c0003122:	8d 43 14             	lea    eax,[ebx+0x14]
c0003125:	89 ca                	mov    edx,ecx
c0003127:	5b                   	pop    ebx
c0003128:	5e                   	pop    esi
c0003129:	e9 36 ec ff ff       	jmp    c0001d64 <st_word>
c000312e:	5b                   	pop    ebx
c000312f:	5e                   	pop    esi
c0003130:	c3                   	ret    

c0003131 <get_fat.isra.2>:
c0003131:	b9 01 00 00 00       	mov    ecx,0x1
c0003136:	83 fa 01             	cmp    edx,0x1
c0003139:	0f 86 f1 00 00 00    	jbe    c0003230 <get_fat.isra.2+0xff>
c000313f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003142:	0f 83 e8 00 00 00    	jae    c0003230 <get_fat.isra.2+0xff>
c0003148:	55                   	push   ebp
c0003149:	57                   	push   edi
c000314a:	89 c7                	mov    edi,eax
c000314c:	56                   	push   esi
c000314d:	89 d6                	mov    esi,edx
c000314f:	53                   	push   ebx
c0003150:	83 ec 0c             	sub    esp,0xc
c0003153:	8a 00                	mov    al,BYTE PTR [eax]
c0003155:	3c 02                	cmp    al,0x2
c0003157:	74 78                	je     c00031d1 <get_fat.isra.2+0xa0>
c0003159:	3c 03                	cmp    al,0x3
c000315b:	0f 84 97 00 00 00    	je     c00031f8 <get_fat.isra.2+0xc7>
c0003161:	fe c8                	dec    al
c0003163:	0f 85 bd 00 00 00    	jne    c0003226 <get_fat.isra.2+0xf5>
c0003169:	89 d3                	mov    ebx,edx
c000316b:	89 f8                	mov    eax,edi
c000316d:	d1 eb                	shr    ebx,1
c000316f:	01 d3                	add    ebx,edx
c0003171:	89 da                	mov    edx,ebx
c0003173:	c1 ea 09             	shr    edx,0x9
c0003176:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003179:	e8 e7 f0 ff ff       	call   c0002265 <move_window>
c000317e:	85 c0                	test   eax,eax
c0003180:	74 08                	je     c000318a <get_fat.isra.2+0x59>
c0003182:	83 c9 ff             	or     ecx,0xffffffff
c0003185:	e9 9c 00 00 00       	jmp    c0003226 <get_fat.isra.2+0xf5>
c000318a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000318d:	89 f8                	mov    eax,edi
c000318f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003195:	89 ea                	mov    edx,ebp
c0003197:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000319b:	c1 ea 09             	shr    edx,0x9
c000319e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031a1:	e8 bf f0 ff ff       	call   c0002265 <move_window>
c00031a6:	85 c0                	test   eax,eax
c00031a8:	75 d8                	jne    c0003182 <get_fat.isra.2+0x51>
c00031aa:	0f b6 c3             	movzx  eax,bl
c00031ad:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00031b3:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c00031b8:	c1 e3 08             	shl    ebx,0x8
c00031bb:	09 c3                	or     ebx,eax
c00031bd:	89 d9                	mov    ecx,ebx
c00031bf:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031c5:	83 e6 01             	and    esi,0x1
c00031c8:	74 5c                	je     c0003226 <get_fat.isra.2+0xf5>
c00031ca:	89 d9                	mov    ecx,ebx
c00031cc:	c1 e9 04             	shr    ecx,0x4
c00031cf:	eb 55                	jmp    c0003226 <get_fat.isra.2+0xf5>
c00031d1:	c1 ea 08             	shr    edx,0x8
c00031d4:	89 f8                	mov    eax,edi
c00031d6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031d9:	e8 87 f0 ff ff       	call   c0002265 <move_window>
c00031de:	85 c0                	test   eax,eax
c00031e0:	75 a0                	jne    c0003182 <get_fat.isra.2+0x51>
c00031e2:	01 f6                	add    esi,esi
c00031e4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ea:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ee:	e8 4c eb ff ff       	call   c0001d3f <ld_word>
c00031f3:	0f b7 c8             	movzx  ecx,ax
c00031f6:	eb 2e                	jmp    c0003226 <get_fat.isra.2+0xf5>
c00031f8:	c1 ea 07             	shr    edx,0x7
c00031fb:	89 f8                	mov    eax,edi
c00031fd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003200:	e8 60 f0 ff ff       	call   c0002265 <move_window>
c0003205:	85 c0                	test   eax,eax
c0003207:	0f 85 75 ff ff ff    	jne    c0003182 <get_fat.isra.2+0x51>
c000320d:	c1 e6 02             	shl    esi,0x2
c0003210:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003216:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c000321a:	e8 2d eb ff ff       	call   c0001d4c <ld_dword>
c000321f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003224:	89 c1                	mov    ecx,eax
c0003226:	83 c4 0c             	add    esp,0xc
c0003229:	89 c8                	mov    eax,ecx
c000322b:	5b                   	pop    ebx
c000322c:	5e                   	pop    esi
c000322d:	5f                   	pop    edi
c000322e:	5d                   	pop    ebp
c000322f:	c3                   	ret    
c0003230:	89 c8                	mov    eax,ecx
c0003232:	c3                   	ret    

c0003233 <dir_sdi>:
c0003233:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003239:	0f 87 b6 00 00 00    	ja     c00032f5 <dir_sdi+0xc2>
c000323f:	55                   	push   ebp
c0003240:	57                   	push   edi
c0003241:	56                   	push   esi
c0003242:	53                   	push   ebx
c0003243:	89 d3                	mov    ebx,edx
c0003245:	83 ec 1c             	sub    esp,0x1c
c0003248:	f6 c2 1f             	test   dl,0x1f
c000324b:	74 0a                	je     c0003257 <dir_sdi+0x24>
c000324d:	b8 02 00 00 00       	mov    eax,0x2
c0003252:	e9 96 00 00 00       	jmp    c00032ed <dir_sdi+0xba>
c0003257:	89 c6                	mov    esi,eax
c0003259:	8b 38                	mov    edi,DWORD PTR [eax]
c000325b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000325e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003261:	85 c9                	test   ecx,ecx
c0003263:	75 23                	jne    c0003288 <dir_sdi+0x55>
c0003265:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003268:	76 07                	jbe    c0003271 <dir_sdi+0x3e>
c000326a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000326d:	85 c0                	test   eax,eax
c000326f:	75 15                	jne    c0003286 <dir_sdi+0x53>
c0003271:	89 da                	mov    edx,ebx
c0003273:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003277:	c1 ea 05             	shr    edx,0x5
c000327a:	39 c2                	cmp    edx,eax
c000327c:	73 cf                	jae    c000324d <dir_sdi+0x1a>
c000327e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003281:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003284:	eb 3d                	jmp    c00032c3 <dir_sdi+0x90>
c0003286:	89 c1                	mov    ecx,eax
c0003288:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000328c:	c1 e5 09             	shl    ebp,0x9
c000328f:	89 ca                	mov    edx,ecx
c0003291:	39 eb                	cmp    ebx,ebp
c0003293:	72 1c                	jb     c00032b1 <dir_sdi+0x7e>
c0003295:	8b 06                	mov    eax,DWORD PTR [esi]
c0003297:	e8 95 fe ff ff       	call   c0003131 <get_fat.isra.2>
c000329c:	89 c1                	mov    ecx,eax
c000329e:	83 f8 ff             	cmp    eax,0xffffffff
c00032a1:	74 45                	je     c00032e8 <dir_sdi+0xb5>
c00032a3:	83 f8 01             	cmp    eax,0x1
c00032a6:	76 a5                	jbe    c000324d <dir_sdi+0x1a>
c00032a8:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c00032ab:	76 a0                	jbe    c000324d <dir_sdi+0x1a>
c00032ad:	29 eb                	sub    ebx,ebp
c00032af:	eb de                	jmp    c000328f <dir_sdi+0x5c>
c00032b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00032b5:	89 f8                	mov    eax,edi
c00032b7:	e8 c9 ec ff ff       	call   c0001f85 <clst2sect>
c00032bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032c0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032c3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032c6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032c9:	85 d2                	test   edx,edx
c00032cb:	74 80                	je     c000324d <dir_sdi+0x1a>
c00032cd:	89 d8                	mov    eax,ebx
c00032cf:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032d5:	c1 e8 09             	shr    eax,0x9
c00032d8:	01 d0                	add    eax,edx
c00032da:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032dd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032e1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032e4:	31 c0                	xor    eax,eax
c00032e6:	eb 05                	jmp    c00032ed <dir_sdi+0xba>
c00032e8:	b8 01 00 00 00       	mov    eax,0x1
c00032ed:	83 c4 1c             	add    esp,0x1c
c00032f0:	5b                   	pop    ebx
c00032f1:	5e                   	pop    esi
c00032f2:	5f                   	pop    edi
c00032f3:	5d                   	pop    ebp
c00032f4:	c3                   	ret    
c00032f5:	b8 02 00 00 00       	mov    eax,0x2
c00032fa:	c3                   	ret    

c00032fb <create_chain>:
c00032fb:	55                   	push   ebp
c00032fc:	89 c5                	mov    ebp,eax
c00032fe:	57                   	push   edi
c00032ff:	89 d7                	mov    edi,edx
c0003301:	56                   	push   esi
c0003302:	53                   	push   ebx
c0003303:	83 ec 1c             	sub    esp,0x1c
c0003306:	85 d2                	test   edx,edx
c0003308:	8b 30                	mov    esi,DWORD PTR [eax]
c000330a:	75 0e                	jne    c000331a <create_chain+0x1f>
c000330c:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000330f:	85 c9                	test   ecx,ecx
c0003311:	74 34                	je     c0003347 <create_chain+0x4c>
c0003313:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c0003316:	77 34                	ja     c000334c <create_chain+0x51>
c0003318:	eb 2d                	jmp    c0003347 <create_chain+0x4c>
c000331a:	89 f0                	mov    eax,esi
c000331c:	e8 10 fe ff ff       	call   c0003131 <get_fat.isra.2>
c0003321:	89 c3                	mov    ebx,eax
c0003323:	83 f8 01             	cmp    eax,0x1
c0003326:	77 0a                	ja     c0003332 <create_chain+0x37>
c0003328:	bb 01 00 00 00       	mov    ebx,0x1
c000332d:	e9 f9 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003332:	83 f8 ff             	cmp    eax,0xffffffff
c0003335:	0f 84 ed 00 00 00    	je     c0003428 <create_chain+0x12d>
c000333b:	89 f9                	mov    ecx,edi
c000333d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003340:	76 0a                	jbe    c000334c <create_chain+0x51>
c0003342:	e9 e4 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003347:	b9 01 00 00 00       	mov    ecx,0x1
c000334c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003350:	75 07                	jne    c0003359 <create_chain+0x5e>
c0003352:	31 db                	xor    ebx,ebx
c0003354:	e9 d2 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003359:	39 f9                	cmp    ecx,edi
c000335b:	75 46                	jne    c00033a3 <create_chain+0xa8>
c000335d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003360:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003363:	77 05                	ja     c000336a <create_chain+0x6f>
c0003365:	bb 02 00 00 00       	mov    ebx,0x2
c000336a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000336e:	89 da                	mov    edx,ebx
c0003370:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003373:	e8 b9 fd ff ff       	call   c0003131 <get_fat.isra.2>
c0003378:	83 f8 01             	cmp    eax,0x1
c000337b:	74 ab                	je     c0003328 <create_chain+0x2d>
c000337d:	83 f8 ff             	cmp    eax,0xffffffff
c0003380:	0f 84 a2 00 00 00    	je     c0003428 <create_chain+0x12d>
c0003386:	85 c0                	test   eax,eax
c0003388:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000338c:	74 11                	je     c000339f <create_chain+0xa4>
c000338e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003391:	83 f8 01             	cmp    eax,0x1
c0003394:	76 0d                	jbe    c00033a3 <create_chain+0xa8>
c0003396:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003399:	73 08                	jae    c00033a3 <create_chain+0xa8>
c000339b:	89 c1                	mov    ecx,eax
c000339d:	eb 04                	jmp    c00033a3 <create_chain+0xa8>
c000339f:	85 db                	test   ebx,ebx
c00033a1:	75 3d                	jne    c00033e0 <create_chain+0xe5>
c00033a3:	89 cb                	mov    ebx,ecx
c00033a5:	43                   	inc    ebx
c00033a6:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c00033a9:	77 0a                	ja     c00033b5 <create_chain+0xba>
c00033ab:	83 f9 01             	cmp    ecx,0x1
c00033ae:	76 a2                	jbe    c0003352 <create_chain+0x57>
c00033b0:	bb 02 00 00 00       	mov    ebx,0x2
c00033b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b9:	89 da                	mov    edx,ebx
c00033bb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00033be:	e8 6e fd ff ff       	call   c0003131 <get_fat.isra.2>
c00033c3:	85 c0                	test   eax,eax
c00033c5:	74 19                	je     c00033e0 <create_chain+0xe5>
c00033c7:	83 f8 01             	cmp    eax,0x1
c00033ca:	0f 84 58 ff ff ff    	je     c0003328 <create_chain+0x2d>
c00033d0:	40                   	inc    eax
c00033d1:	74 55                	je     c0003428 <create_chain+0x12d>
c00033d3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d7:	39 cb                	cmp    ebx,ecx
c00033d9:	75 ca                	jne    c00033a5 <create_chain+0xaa>
c00033db:	e9 72 ff ff ff       	jmp    c0003352 <create_chain+0x57>
c00033e0:	83 c9 ff             	or     ecx,0xffffffff
c00033e3:	89 da                	mov    edx,ebx
c00033e5:	89 f0                	mov    eax,esi
c00033e7:	e8 cf f2 ff ff       	call   c00026bb <put_fat>
c00033ec:	85 c0                	test   eax,eax
c00033ee:	75 31                	jne    c0003421 <create_chain+0x126>
c00033f0:	85 ff                	test   edi,edi
c00033f2:	75 16                	jne    c000340a <create_chain+0x10f>
c00033f4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033f7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033fa:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033fd:	8d 57 fe             	lea    edx,[edi-0x2]
c0003400:	39 d0                	cmp    eax,edx
c0003402:	77 17                	ja     c000341b <create_chain+0x120>
c0003404:	48                   	dec    eax
c0003405:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0003408:	eb 11                	jmp    c000341b <create_chain+0x120>
c000340a:	89 d9                	mov    ecx,ebx
c000340c:	89 fa                	mov    edx,edi
c000340e:	89 f0                	mov    eax,esi
c0003410:	e8 a6 f2 ff ff       	call   c00026bb <put_fat>
c0003415:	85 c0                	test   eax,eax
c0003417:	74 db                	je     c00033f4 <create_chain+0xf9>
c0003419:	eb 06                	jmp    c0003421 <create_chain+0x126>
c000341b:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000341f:	eb 0a                	jmp    c000342b <create_chain+0x130>
c0003421:	48                   	dec    eax
c0003422:	0f 85 00 ff ff ff    	jne    c0003328 <create_chain+0x2d>
c0003428:	83 cb ff             	or     ebx,0xffffffff
c000342b:	83 c4 1c             	add    esp,0x1c
c000342e:	89 d8                	mov    eax,ebx
c0003430:	5b                   	pop    ebx
c0003431:	5e                   	pop    esi
c0003432:	5f                   	pop    edi
c0003433:	5d                   	pop    ebp
c0003434:	c3                   	ret    

c0003435 <remove_chain>:
c0003435:	55                   	push   ebp
c0003436:	57                   	push   edi
c0003437:	56                   	push   esi
c0003438:	89 d6                	mov    esi,edx
c000343a:	53                   	push   ebx
c000343b:	83 ec 0c             	sub    esp,0xc
c000343e:	83 fa 01             	cmp    edx,0x1
c0003441:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003443:	76 65                	jbe    c00034aa <remove_chain+0x75>
c0003445:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003448:	76 60                	jbe    c00034aa <remove_chain+0x75>
c000344a:	89 c5                	mov    ebp,eax
c000344c:	89 ca                	mov    edx,ecx
c000344e:	85 c9                	test   ecx,ecx
c0003450:	74 0e                	je     c0003460 <remove_chain+0x2b>
c0003452:	83 c9 ff             	or     ecx,0xffffffff
c0003455:	89 d8                	mov    eax,ebx
c0003457:	e8 5f f2 ff ff       	call   c00026bb <put_fat>
c000345c:	85 c0                	test   eax,eax
c000345e:	75 56                	jne    c00034b6 <remove_chain+0x81>
c0003460:	89 f2                	mov    edx,esi
c0003462:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003465:	e8 c7 fc ff ff       	call   c0003131 <get_fat.isra.2>
c000346a:	89 c7                	mov    edi,eax
c000346c:	85 c0                	test   eax,eax
c000346e:	75 04                	jne    c0003474 <remove_chain+0x3f>
c0003470:	31 c0                	xor    eax,eax
c0003472:	eb 42                	jmp    c00034b6 <remove_chain+0x81>
c0003474:	83 f8 01             	cmp    eax,0x1
c0003477:	74 31                	je     c00034aa <remove_chain+0x75>
c0003479:	83 f8 ff             	cmp    eax,0xffffffff
c000347c:	74 33                	je     c00034b1 <remove_chain+0x7c>
c000347e:	31 c9                	xor    ecx,ecx
c0003480:	89 f2                	mov    edx,esi
c0003482:	89 d8                	mov    eax,ebx
c0003484:	e8 32 f2 ff ff       	call   c00026bb <put_fat>
c0003489:	85 c0                	test   eax,eax
c000348b:	75 29                	jne    c00034b6 <remove_chain+0x81>
c000348d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003490:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003493:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003496:	39 c8                	cmp    eax,ecx
c0003498:	73 08                	jae    c00034a2 <remove_chain+0x6d>
c000349a:	40                   	inc    eax
c000349b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000349f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00034a2:	89 fe                	mov    esi,edi
c00034a4:	39 fa                	cmp    edx,edi
c00034a6:	77 b8                	ja     c0003460 <remove_chain+0x2b>
c00034a8:	eb c6                	jmp    c0003470 <remove_chain+0x3b>
c00034aa:	b8 02 00 00 00       	mov    eax,0x2
c00034af:	eb 05                	jmp    c00034b6 <remove_chain+0x81>
c00034b1:	b8 01 00 00 00       	mov    eax,0x1
c00034b6:	83 c4 0c             	add    esp,0xc
c00034b9:	5b                   	pop    ebx
c00034ba:	5e                   	pop    esi
c00034bb:	5f                   	pop    edi
c00034bc:	5d                   	pop    ebp
c00034bd:	c3                   	ret    

c00034be <dir_next>:
c00034be:	55                   	push   ebp
c00034bf:	57                   	push   edi
c00034c0:	56                   	push   esi
c00034c1:	53                   	push   ebx
c00034c2:	83 ec 1c             	sub    esp,0x1c
c00034c5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034c8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034ca:	83 c7 20             	add    edi,0x20
c00034cd:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034d3:	76 07                	jbe    c00034dc <dir_next+0x1e>
c00034d5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034dc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034df:	b9 04 00 00 00       	mov    ecx,0x4
c00034e4:	85 f6                	test   esi,esi
c00034e6:	0f 84 cd 00 00 00    	je     c00035b9 <dir_next+0xfb>
c00034ec:	89 c3                	mov    ebx,eax
c00034ee:	89 d1                	mov    ecx,edx
c00034f0:	89 f8                	mov    eax,edi
c00034f2:	25 ff 01 00 00       	and    eax,0x1ff
c00034f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034fb:	0f 85 a8 00 00 00    	jne    c00035a9 <dir_next+0xeb>
c0003501:	46                   	inc    esi
c0003502:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003505:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003508:	85 d2                	test   edx,edx
c000350a:	75 22                	jne    c000352e <dir_next+0x70>
c000350c:	89 fa                	mov    edx,edi
c000350e:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003512:	c1 ea 05             	shr    edx,0x5
c0003515:	39 c2                	cmp    edx,eax
c0003517:	0f 82 8c 00 00 00    	jb     c00035a9 <dir_next+0xeb>
c000351d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003524:	b9 04 00 00 00       	mov    ecx,0x4
c0003529:	e9 8b 00 00 00       	jmp    c00035b9 <dir_next+0xfb>
c000352e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003532:	89 fe                	mov    esi,edi
c0003534:	48                   	dec    eax
c0003535:	c1 ee 09             	shr    esi,0x9
c0003538:	85 f0                	test   eax,esi
c000353a:	75 6d                	jne    c00035a9 <dir_next+0xeb>
c000353c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003540:	89 e8                	mov    eax,ebp
c0003542:	e8 ea fb ff ff       	call   c0003131 <get_fat.isra.2>
c0003547:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000354b:	89 c6                	mov    esi,eax
c000354d:	83 f8 01             	cmp    eax,0x1
c0003550:	77 07                	ja     c0003559 <dir_next+0x9b>
c0003552:	b9 02 00 00 00       	mov    ecx,0x2
c0003557:	eb 60                	jmp    c00035b9 <dir_next+0xfb>
c0003559:	83 f8 ff             	cmp    eax,0xffffffff
c000355c:	75 07                	jne    c0003565 <dir_next+0xa7>
c000355e:	b9 01 00 00 00       	mov    ecx,0x1
c0003563:	eb 54                	jmp    c00035b9 <dir_next+0xfb>
c0003565:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003568:	77 30                	ja     c000359a <dir_next+0xdc>
c000356a:	85 c9                	test   ecx,ecx
c000356c:	74 af                	je     c000351d <dir_next+0x5f>
c000356e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003571:	89 d8                	mov    eax,ebx
c0003573:	e8 83 fd ff ff       	call   c00032fb <create_chain>
c0003578:	b9 07 00 00 00       	mov    ecx,0x7
c000357d:	89 c6                	mov    esi,eax
c000357f:	85 c0                	test   eax,eax
c0003581:	74 36                	je     c00035b9 <dir_next+0xfb>
c0003583:	83 f8 01             	cmp    eax,0x1
c0003586:	74 ca                	je     c0003552 <dir_next+0x94>
c0003588:	83 f8 ff             	cmp    eax,0xffffffff
c000358b:	74 d1                	je     c000355e <dir_next+0xa0>
c000358d:	89 c2                	mov    edx,eax
c000358f:	89 e8                	mov    eax,ebp
c0003591:	e8 75 f2 ff ff       	call   c000280b <dir_clear>
c0003596:	85 c0                	test   eax,eax
c0003598:	75 c4                	jne    c000355e <dir_next+0xa0>
c000359a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000359d:	89 f2                	mov    edx,esi
c000359f:	89 e8                	mov    eax,ebp
c00035a1:	e8 df e9 ff ff       	call   c0001f85 <clst2sect>
c00035a6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00035a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035ad:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00035b0:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00035b4:	31 c9                	xor    ecx,ecx
c00035b6:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00035b9:	83 c4 1c             	add    esp,0x1c
c00035bc:	89 c8                	mov    eax,ecx
c00035be:	5b                   	pop    ebx
c00035bf:	5e                   	pop    esi
c00035c0:	5f                   	pop    edi
c00035c1:	5d                   	pop    ebp
c00035c2:	c3                   	ret    

c00035c3 <dir_alloc>:
c00035c3:	55                   	push   ebp
c00035c4:	89 c5                	mov    ebp,eax
c00035c6:	57                   	push   edi
c00035c7:	89 d7                	mov    edi,edx
c00035c9:	56                   	push   esi
c00035ca:	31 d2                	xor    edx,edx
c00035cc:	53                   	push   ebx
c00035cd:	83 ec 0c             	sub    esp,0xc
c00035d0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035d2:	e8 5c fc ff ff       	call   c0003233 <dir_sdi>
c00035d7:	85 c0                	test   eax,eax
c00035d9:	75 37                	jne    c0003612 <dir_alloc+0x4f>
c00035db:	31 db                	xor    ebx,ebx
c00035dd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	e8 7e ec ff ff       	call   c0002265 <move_window>
c00035e7:	85 c0                	test   eax,eax
c00035e9:	75 27                	jne    c0003612 <dir_alloc+0x4f>
c00035eb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ee:	8a 12                	mov    dl,BYTE PTR [edx]
c00035f0:	84 d2                	test   dl,dl
c00035f2:	74 05                	je     c00035f9 <dir_alloc+0x36>
c00035f4:	80 fa e5             	cmp    dl,0xe5
c00035f7:	75 07                	jne    c0003600 <dir_alloc+0x3d>
c00035f9:	43                   	inc    ebx
c00035fa:	39 fb                	cmp    ebx,edi
c00035fc:	75 04                	jne    c0003602 <dir_alloc+0x3f>
c00035fe:	eb 1c                	jmp    c000361c <dir_alloc+0x59>
c0003600:	31 db                	xor    ebx,ebx
c0003602:	ba 01 00 00 00       	mov    edx,0x1
c0003607:	89 e8                	mov    eax,ebp
c0003609:	e8 b0 fe ff ff       	call   c00034be <dir_next>
c000360e:	85 c0                	test   eax,eax
c0003610:	74 cb                	je     c00035dd <dir_alloc+0x1a>
c0003612:	83 f8 04             	cmp    eax,0x4
c0003615:	75 05                	jne    c000361c <dir_alloc+0x59>
c0003617:	b8 07 00 00 00       	mov    eax,0x7
c000361c:	83 c4 0c             	add    esp,0xc
c000361f:	5b                   	pop    ebx
c0003620:	5e                   	pop    esi
c0003621:	5f                   	pop    edi
c0003622:	5d                   	pop    ebp
c0003623:	c3                   	ret    

c0003624 <dir_read>:
c0003624:	55                   	push   ebp
c0003625:	57                   	push   edi
c0003626:	bf ff ff ff ff       	mov    edi,0xffffffff
c000362b:	56                   	push   esi
c000362c:	be 04 00 00 00       	mov    esi,0x4
c0003631:	53                   	push   ebx
c0003632:	89 c3                	mov    ebx,eax
c0003634:	83 ec 1c             	sub    esp,0x1c
c0003637:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000363b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000363d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003642:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003645:	85 d2                	test   edx,edx
c0003647:	0f 84 d8 00 00 00    	je     c0003725 <dir_read+0x101>
c000364d:	89 e8                	mov    eax,ebp
c000364f:	e8 11 ec ff ff       	call   c0002265 <move_window>
c0003654:	89 c6                	mov    esi,eax
c0003656:	85 c0                	test   eax,eax
c0003658:	0f 85 d2 00 00 00    	jne    c0003730 <dir_read+0x10c>
c000365e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003661:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003663:	84 c9                	test   cl,cl
c0003665:	0f 84 c0 00 00 00    	je     c000372b <dir_read+0x107>
c000366b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000366e:	83 e0 3f             	and    eax,0x3f
c0003671:	80 f9 2e             	cmp    cl,0x2e
c0003674:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003678:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000367b:	0f 84 8a 00 00 00    	je     c000370b <dir_read+0xe7>
c0003681:	80 f9 e5             	cmp    cl,0xe5
c0003684:	0f 84 81 00 00 00    	je     c000370b <dir_read+0xe7>
c000368a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000368e:	83 e0 1f             	and    eax,0x1f
c0003691:	83 f8 08             	cmp    eax,0x8
c0003694:	0f 94 c0             	sete   al
c0003697:	0f b6 c0             	movzx  eax,al
c000369a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000369e:	75 6b                	jne    c000370b <dir_read+0xe7>
c00036a0:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00036a5:	75 44                	jne    c00036eb <dir_read+0xc7>
c00036a7:	f6 c1 40             	test   cl,0x40
c00036aa:	74 12                	je     c00036be <dir_read+0x9a>
c00036ac:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00036af:	83 e1 bf             	and    ecx,0xffffffbf
c00036b2:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00036b6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00036b9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00036bc:	eb 06                	jmp    c00036c4 <dir_read+0xa0>
c00036be:	89 f8                	mov    eax,edi
c00036c0:	38 c8                	cmp    al,cl
c00036c2:	75 47                	jne    c000370b <dir_read+0xe7>
c00036c4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036c8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036cd:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036d0:	75 3e                	jne    c0003710 <dir_read+0xec>
c00036d2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036d6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036d9:	e8 c4 e8 ff ff       	call   c0001fa2 <pick_lfn>
c00036de:	85 c0                	test   eax,eax
c00036e0:	74 2e                	je     c0003710 <dir_read+0xec>
c00036e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036e6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036e9:	eb 25                	jmp    c0003710 <dir_read+0xec>
c00036eb:	89 f8                	mov    eax,edi
c00036ed:	84 c0                	test   al,al
c00036ef:	75 11                	jne    c0003702 <dir_read+0xde>
c00036f1:	89 d0                	mov    eax,edx
c00036f3:	e8 64 ea ff ff       	call   c000215c <sum_sfn>
c00036f8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036fc:	75 04                	jne    c0003702 <dir_read+0xde>
c00036fe:	31 f6                	xor    esi,esi
c0003700:	eb 35                	jmp    c0003737 <dir_read+0x113>
c0003702:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003709:	eb 2c                	jmp    c0003737 <dir_read+0x113>
c000370b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003710:	31 d2                	xor    edx,edx
c0003712:	89 d8                	mov    eax,ebx
c0003714:	e8 a5 fd ff ff       	call   c00034be <dir_next>
c0003719:	89 c6                	mov    esi,eax
c000371b:	85 c0                	test   eax,eax
c000371d:	0f 84 1f ff ff ff    	je     c0003642 <dir_read+0x1e>
c0003723:	eb 0b                	jmp    c0003730 <dir_read+0x10c>
c0003725:	85 f6                	test   esi,esi
c0003727:	74 d5                	je     c00036fe <dir_read+0xda>
c0003729:	eb 05                	jmp    c0003730 <dir_read+0x10c>
c000372b:	be 04 00 00 00       	mov    esi,0x4
c0003730:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003737:	83 c4 1c             	add    esp,0x1c
c000373a:	89 f0                	mov    eax,esi
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <dir_remove>:
c0003741:	57                   	push   edi
c0003742:	56                   	push   esi
c0003743:	53                   	push   ebx
c0003744:	89 c3                	mov    ebx,eax
c0003746:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003749:	8b 30                	mov    esi,DWORD PTR [eax]
c000374b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000374e:	83 fa ff             	cmp    edx,0xffffffff
c0003751:	74 09                	je     c000375c <dir_remove+0x1b>
c0003753:	e8 db fa ff ff       	call   c0003233 <dir_sdi>
c0003758:	85 c0                	test   eax,eax
c000375a:	75 34                	jne    c0003790 <dir_remove+0x4f>
c000375c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000375f:	89 f0                	mov    eax,esi
c0003761:	e8 ff ea ff ff       	call   c0002265 <move_window>
c0003766:	85 c0                	test   eax,eax
c0003768:	75 1c                	jne    c0003786 <dir_remove+0x45>
c000376a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000376d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003770:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003774:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003777:	73 17                	jae    c0003790 <dir_remove+0x4f>
c0003779:	31 d2                	xor    edx,edx
c000377b:	89 d8                	mov    eax,ebx
c000377d:	e8 3c fd ff ff       	call   c00034be <dir_next>
c0003782:	85 c0                	test   eax,eax
c0003784:	74 d6                	je     c000375c <dir_remove+0x1b>
c0003786:	83 f8 04             	cmp    eax,0x4
c0003789:	75 05                	jne    c0003790 <dir_remove+0x4f>
c000378b:	b8 02 00 00 00       	mov    eax,0x2
c0003790:	5b                   	pop    ebx
c0003791:	5e                   	pop    esi
c0003792:	5f                   	pop    edi
c0003793:	c3                   	ret    

c0003794 <dir_find>:
c0003794:	55                   	push   ebp
c0003795:	31 d2                	xor    edx,edx
c0003797:	57                   	push   edi
c0003798:	56                   	push   esi
c0003799:	53                   	push   ebx
c000379a:	89 c3                	mov    ebx,eax
c000379c:	83 ec 1c             	sub    esp,0x1c
c000379f:	8b 00                	mov    eax,DWORD PTR [eax]
c00037a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037a5:	89 d8                	mov    eax,ebx
c00037a7:	e8 87 fa ff ff       	call   c0003233 <dir_sdi>
c00037ac:	89 c6                	mov    esi,eax
c00037ae:	85 c0                	test   eax,eax
c00037b0:	0f 85 02 01 00 00    	jne    c00038b8 <dir_find+0x124>
c00037b6:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00037bd:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037c2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ce:	e8 92 ea ff ff       	call   c0002265 <move_window>
c00037d3:	89 c6                	mov    esi,eax
c00037d5:	85 c0                	test   eax,eax
c00037d7:	0f 85 db 00 00 00    	jne    c00038b8 <dir_find+0x124>
c00037dd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037e0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037e3:	84 c9                	test   cl,cl
c00037e5:	0f 84 c8 00 00 00    	je     c00038b3 <dir_find+0x11f>
c00037eb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ee:	88 d0                	mov    al,dl
c00037f0:	83 e0 3f             	and    eax,0x3f
c00037f3:	80 f9 e5             	cmp    cl,0xe5
c00037f6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037f9:	0f 84 93 00 00 00    	je     c0003892 <dir_find+0xfe>
c00037ff:	80 e2 08             	and    dl,0x8
c0003802:	74 0a                	je     c000380e <dir_find+0x7a>
c0003804:	3c 0f                	cmp    al,0xf
c0003806:	0f 85 86 00 00 00    	jne    c0003892 <dir_find+0xfe>
c000380c:	eb 04                	jmp    c0003812 <dir_find+0x7e>
c000380e:	3c 0f                	cmp    al,0xf
c0003810:	75 54                	jne    c0003866 <dir_find+0xd2>
c0003812:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003816:	0f 85 82 00 00 00    	jne    c000389e <dir_find+0x10a>
c000381c:	f6 c1 40             	test   cl,0x40
c000381f:	74 12                	je     c0003833 <dir_find+0x9f>
c0003821:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003824:	83 e1 bf             	and    ecx,0xffffffbf
c0003827:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000382b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000382e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003831:	eb 06                	jmp    c0003839 <dir_find+0xa5>
c0003833:	89 f8                	mov    eax,edi
c0003835:	38 c8                	cmp    al,cl
c0003837:	75 60                	jne    c0003899 <dir_find+0x105>
c0003839:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000383d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003842:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003845:	75 57                	jne    c000389e <dir_find+0x10a>
c0003847:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000384b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000384f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003852:	89 ea                	mov    edx,ebp
c0003854:	e8 89 f3 ff ff       	call   c0002be2 <cmp_lfn>
c0003859:	85 c0                	test   eax,eax
c000385b:	74 41                	je     c000389e <dir_find+0x10a>
c000385d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003861:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003864:	eb 38                	jmp    c000389e <dir_find+0x10a>
c0003866:	89 f8                	mov    eax,edi
c0003868:	84 c0                	test   al,al
c000386a:	75 0d                	jne    c0003879 <dir_find+0xe5>
c000386c:	89 e8                	mov    eax,ebp
c000386e:	e8 e9 e8 ff ff       	call   c000215c <sum_sfn>
c0003873:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003877:	74 3f                	je     c00038b8 <dir_find+0x124>
c0003879:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000387d:	75 13                	jne    c0003892 <dir_find+0xfe>
c000387f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003882:	b9 0b 00 00 00       	mov    ecx,0xb
c0003887:	89 e8                	mov    eax,ebp
c0003889:	e8 fd e4 ff ff       	call   c0001d8b <mem_cmp>
c000388e:	85 c0                	test   eax,eax
c0003890:	74 26                	je     c00038b8 <dir_find+0x124>
c0003892:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003899:	bf ff ff ff ff       	mov    edi,0xffffffff
c000389e:	31 d2                	xor    edx,edx
c00038a0:	89 d8                	mov    eax,ebx
c00038a2:	e8 17 fc ff ff       	call   c00034be <dir_next>
c00038a7:	89 c6                	mov    esi,eax
c00038a9:	85 c0                	test   eax,eax
c00038ab:	0f 84 16 ff ff ff    	je     c00037c7 <dir_find+0x33>
c00038b1:	eb 05                	jmp    c00038b8 <dir_find+0x124>
c00038b3:	be 04 00 00 00       	mov    esi,0x4
c00038b8:	83 c4 1c             	add    esp,0x1c
c00038bb:	89 f0                	mov    eax,esi
c00038bd:	5b                   	pop    ebx
c00038be:	5e                   	pop    esi
c00038bf:	5f                   	pop    edi
c00038c0:	5d                   	pop    ebp
c00038c1:	c3                   	ret    

c00038c2 <follow_path>:
c00038c2:	56                   	push   esi
c00038c3:	53                   	push   ebx
c00038c4:	89 c3                	mov    ebx,eax
c00038c6:	83 ec 14             	sub    esp,0x14
c00038c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038cd:	8b 30                	mov    esi,DWORD PTR [eax]
c00038cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038d3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038d5:	80 fa 5c             	cmp    dl,0x5c
c00038d8:	75 07                	jne    c00038e1 <follow_path+0x1f>
c00038da:	40                   	inc    eax
c00038db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038df:	eb ee                	jmp    c00038cf <follow_path+0xd>
c00038e1:	80 fa 2f             	cmp    dl,0x2f
c00038e4:	74 f4                	je     c00038da <follow_path+0x18>
c00038e6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038ed:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038f0:	77 3e                	ja     c0003930 <follow_path+0x6e>
c00038f2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038f6:	31 d2                	xor    edx,edx
c00038f8:	89 d8                	mov    eax,ebx
c00038fa:	e8 34 f9 ff ff       	call   c0003233 <dir_sdi>
c00038ff:	eb 4f                	jmp    c0003950 <follow_path+0x8e>
c0003901:	89 d8                	mov    eax,ebx
c0003903:	e8 8c fe ff ff       	call   c0003794 <dir_find>
c0003908:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c000390b:	85 c0                	test   eax,eax
c000390d:	75 32                	jne    c0003941 <follow_path+0x7f>
c000390f:	80 e2 04             	and    dl,0x4
c0003912:	75 3c                	jne    c0003950 <follow_path+0x8e>
c0003914:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003918:	74 31                	je     c000394b <follow_path+0x89>
c000391a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000391d:	25 ff 01 00 00       	and    eax,0x1ff
c0003922:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003926:	8a 06                	mov    al,BYTE PTR [esi]
c0003928:	e8 b3 f7 ff ff       	call   c00030e0 <ld_clust.isra.0>
c000392d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003930:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003934:	89 d8                	mov    eax,ebx
c0003936:	e8 cb ef ff ff       	call   c0002906 <create_name>
c000393b:	85 c0                	test   eax,eax
c000393d:	74 c2                	je     c0003901 <follow_path+0x3f>
c000393f:	eb 0f                	jmp    c0003950 <follow_path+0x8e>
c0003941:	83 f8 04             	cmp    eax,0x4
c0003944:	75 0a                	jne    c0003950 <follow_path+0x8e>
c0003946:	80 e2 04             	and    dl,0x4
c0003949:	75 05                	jne    c0003950 <follow_path+0x8e>
c000394b:	b8 05 00 00 00       	mov    eax,0x5
c0003950:	83 c4 14             	add    esp,0x14
c0003953:	5b                   	pop    ebx
c0003954:	5e                   	pop    esi
c0003955:	c3                   	ret    

c0003956 <dir_register>:
c0003956:	55                   	push   ebp
c0003957:	57                   	push   edi
c0003958:	56                   	push   esi
c0003959:	be 06 00 00 00       	mov    esi,0x6
c000395e:	53                   	push   ebx
c000395f:	83 ec 2c             	sub    esp,0x2c
c0003962:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003966:	0f 85 65 01 00 00    	jne    c0003ad1 <dir_register+0x17b>
c000396c:	8b 38                	mov    edi,DWORD PTR [eax]
c000396e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003976:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003979:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000397d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003982:	74 06                	je     c000398a <dir_register+0x34>
c0003984:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003988:	eb ef                	jmp    c0003979 <dir_register+0x23>
c000398a:	89 c3                	mov    ebx,eax
c000398c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003991:	8d 40 20             	lea    eax,[eax+0x20]
c0003994:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003998:	89 c2                	mov    edx,eax
c000399a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000399e:	e8 c8 e3 ff ff       	call   c0001d6b <mem_cpy>
c00039a3:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00039a8:	74 48                	je     c00039f2 <dir_register+0x9c>
c00039aa:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c00039ae:	bd 01 00 00 00       	mov    ebp,0x1
c00039b3:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c00039b6:	55                   	push   ebp
c00039b7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00039bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039bf:	e8 dc e6 ff ff       	call   c00020a0 <gen_numname>
c00039c4:	58                   	pop    eax
c00039c5:	89 d8                	mov    eax,ebx
c00039c7:	e8 c8 fd ff ff       	call   c0003794 <dir_find>
c00039cc:	89 c6                	mov    esi,eax
c00039ce:	85 c0                	test   eax,eax
c00039d0:	75 10                	jne    c00039e2 <dir_register+0x8c>
c00039d2:	45                   	inc    ebp
c00039d3:	83 fd 64             	cmp    ebp,0x64
c00039d6:	75 db                	jne    c00039b3 <dir_register+0x5d>
c00039d8:	be 07 00 00 00       	mov    esi,0x7
c00039dd:	e9 ef 00 00 00       	jmp    c0003ad1 <dir_register+0x17b>
c00039e2:	83 f8 04             	cmp    eax,0x4
c00039e5:	0f 85 e6 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c00039eb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039ef:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039f2:	bd 01 00 00 00       	mov    ebp,0x1
c00039f7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039fc:	74 13                	je     c0003a11 <dir_register+0xbb>
c00039fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a02:	b9 0d 00 00 00       	mov    ecx,0xd
c0003a07:	83 c0 0c             	add    eax,0xc
c0003a0a:	31 d2                	xor    edx,edx
c0003a0c:	f7 f1                	div    ecx
c0003a0e:	8d 68 01             	lea    ebp,[eax+0x1]
c0003a11:	89 ea                	mov    edx,ebp
c0003a13:	89 d8                	mov    eax,ebx
c0003a15:	e8 a9 fb ff ff       	call   c00035c3 <dir_alloc>
c0003a1a:	89 c6                	mov    esi,eax
c0003a1c:	85 c0                	test   eax,eax
c0003a1e:	0f 85 ad 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c0003a24:	4d                   	dec    ebp
c0003a25:	74 6a                	je     c0003a91 <dir_register+0x13b>
c0003a27:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a2a:	89 e8                	mov    eax,ebp
c0003a2c:	c1 e0 05             	shl    eax,0x5
c0003a2f:	29 c2                	sub    edx,eax
c0003a31:	89 d8                	mov    eax,ebx
c0003a33:	e8 fb f7 ff ff       	call   c0003233 <dir_sdi>
c0003a38:	89 c6                	mov    esi,eax
c0003a3a:	85 c0                	test   eax,eax
c0003a3c:	0f 85 8f 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c0003a42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a46:	e8 11 e7 ff ff       	call   c000215c <sum_sfn>
c0003a4b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a4f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a52:	89 f8                	mov    eax,edi
c0003a54:	e8 0c e8 ff ff       	call   c0002265 <move_window>
c0003a59:	89 c6                	mov    esi,eax
c0003a5b:	85 c0                	test   eax,eax
c0003a5d:	75 72                	jne    c0003ad1 <dir_register+0x17b>
c0003a5f:	83 ec 0c             	sub    esp,0xc
c0003a62:	89 e8                	mov    eax,ebp
c0003a64:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a69:	0f b6 c8             	movzx  ecx,al
c0003a6c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a6f:	52                   	push   edx
c0003a70:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a73:	e8 a4 e5 ff ff       	call   c000201c <put_lfn>
c0003a78:	31 d2                	xor    edx,edx
c0003a7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a7e:	89 d8                	mov    eax,ebx
c0003a80:	e8 39 fa ff ff       	call   c00034be <dir_next>
c0003a85:	83 c4 10             	add    esp,0x10
c0003a88:	89 c6                	mov    esi,eax
c0003a8a:	85 c0                	test   eax,eax
c0003a8c:	75 43                	jne    c0003ad1 <dir_register+0x17b>
c0003a8e:	4d                   	dec    ebp
c0003a8f:	75 be                	jne    c0003a4f <dir_register+0xf9>
c0003a91:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a94:	89 f8                	mov    eax,edi
c0003a96:	e8 ca e7 ff ff       	call   c0002265 <move_window>
c0003a9b:	89 c6                	mov    esi,eax
c0003a9d:	85 c0                	test   eax,eax
c0003a9f:	75 30                	jne    c0003ad1 <dir_register+0x17b>
c0003aa1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003aa4:	b9 20 00 00 00       	mov    ecx,0x20
c0003aa9:	31 d2                	xor    edx,edx
c0003aab:	e8 d0 e2 ff ff       	call   c0001d80 <mem_set>
c0003ab0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003ab3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ab7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003abc:	e8 aa e2 ff ff       	call   c0001d6b <mem_cpy>
c0003ac1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003ac4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003ac7:	83 e0 18             	and    eax,0x18
c0003aca:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003acd:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ad1:	83 c4 2c             	add    esp,0x2c
c0003ad4:	89 f0                	mov    eax,esi
c0003ad6:	5b                   	pop    ebx
c0003ad7:	5e                   	pop    esi
c0003ad8:	5f                   	pop    edi
c0003ad9:	5d                   	pop    ebp
c0003ada:	c3                   	ret    

c0003adb <f_mount>:
c0003adb:	53                   	push   ebx
c0003adc:	83 ec 18             	sub    esp,0x18
c0003adf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ae3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ae7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003aeb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003aef:	e8 7a e6 ff ff       	call   c000216e <get_ldnumber>
c0003af4:	89 c2                	mov    edx,eax
c0003af6:	b8 0b 00 00 00       	mov    eax,0xb
c0003afb:	85 d2                	test   edx,edx
c0003afd:	78 39                	js     c0003b38 <f_mount+0x5d>
c0003aff:	8b 04 95 e0 fe 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0120]
c0003b06:	85 c0                	test   eax,eax
c0003b08:	74 03                	je     c0003b0d <f_mount+0x32>
c0003b0a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003b0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003b11:	85 c0                	test   eax,eax
c0003b13:	74 03                	je     c0003b18 <f_mount+0x3d>
c0003b15:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003b18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003b1c:	89 04 95 e0 fe 01 c0 	mov    DWORD PTR [edx*4-0x3ffe0120],eax
c0003b23:	31 c0                	xor    eax,eax
c0003b25:	84 db                	test   bl,bl
c0003b27:	74 0f                	je     c0003b38 <f_mount+0x5d>
c0003b29:	31 c9                	xor    ecx,ecx
c0003b2b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b2f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b33:	e8 80 e8 ff ff       	call   c00023b8 <mount_volume>
c0003b38:	83 c4 18             	add    esp,0x18
c0003b3b:	5b                   	pop    ebx
c0003b3c:	c3                   	ret    

c0003b3d <f_open>:
c0003b3d:	55                   	push   ebp
c0003b3e:	b8 09 00 00 00       	mov    eax,0x9
c0003b43:	57                   	push   edi
c0003b44:	56                   	push   esi
c0003b45:	53                   	push   ebx
c0003b46:	83 ec 5c             	sub    esp,0x5c
c0003b49:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b4d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b51:	85 db                	test   ebx,ebx
c0003b53:	0f 84 a7 02 00 00    	je     c0003e00 <f_open+0x2c3>
c0003b59:	89 fe                	mov    esi,edi
c0003b5b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b5f:	83 e6 3f             	and    esi,0x3f
c0003b62:	89 f0                	mov    eax,esi
c0003b64:	0f b6 c8             	movzx  ecx,al
c0003b67:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b6b:	e8 48 e8 ff ff       	call   c00023b8 <mount_volume>
c0003b70:	85 c0                	test   eax,eax
c0003b72:	0f 85 82 02 00 00    	jne    c0003dfa <f_open+0x2bd>
c0003b78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b7c:	83 ec 0c             	sub    esp,0xc
c0003b7f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b83:	68 00 02 00 00       	push   0x200
c0003b88:	e8 ff 1e 00 00       	call   c0005a8c <ff_memalloc>
c0003b8d:	83 c4 10             	add    esp,0x10
c0003b90:	89 c5                	mov    ebp,eax
c0003b92:	b8 11 00 00 00       	mov    eax,0x11
c0003b97:	85 ed                	test   ebp,ebp
c0003b99:	0f 84 61 02 00 00    	je     c0003e00 <f_open+0x2c3>
c0003b9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ba3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ba7:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003baa:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bae:	e8 0f fd ff ff       	call   c00038c2 <follow_path>
c0003bb3:	85 c0                	test   eax,eax
c0003bb5:	75 0c                	jne    c0003bc3 <f_open+0x86>
c0003bb7:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003bbc:	79 05                	jns    c0003bc3 <f_open+0x86>
c0003bbe:	b8 06 00 00 00       	mov    eax,0x6
c0003bc3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003bc9:	0f 84 de 00 00 00    	je     c0003cad <f_open+0x170>
c0003bcf:	85 c0                	test   eax,eax
c0003bd1:	74 1e                	je     c0003bf1 <f_open+0xb4>
c0003bd3:	83 f8 04             	cmp    eax,0x4
c0003bd6:	0f 85 06 02 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003bdc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003be0:	83 ce 08             	or     esi,0x8
c0003be3:	e8 6e fd ff ff       	call   c0003956 <dir_register>
c0003be8:	85 c0                	test   eax,eax
c0003bea:	74 2f                	je     c0003c1b <f_open+0xde>
c0003bec:	e9 f1 01 00 00       	jmp    c0003de2 <f_open+0x2a5>
c0003bf1:	b8 07 00 00 00       	mov    eax,0x7
c0003bf6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bfb:	0f 85 e1 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c01:	b8 08 00 00 00       	mov    eax,0x8
c0003c06:	f7 c7 04 00 00 00    	test   edi,0x4
c0003c0c:	0f 85 d0 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c12:	83 e7 08             	and    edi,0x8
c0003c15:	0f 84 bf 00 00 00    	je     c0003cda <f_open+0x19d>
c0003c1b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003c1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c23:	89 ca                	mov    edx,ecx
c0003c25:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c29:	8a 00                	mov    al,BYTE PTR [eax]
c0003c2b:	e8 b0 f4 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0003c30:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c34:	89 c7                	mov    edi,eax
c0003c36:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c3b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c3e:	e8 25 e1 ff ff       	call   c0001d68 <st_dword>
c0003c43:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c47:	31 c9                	xor    ecx,ecx
c0003c49:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c51:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c55:	e8 af f4 ff ff       	call   c0003109 <st_clust.isra.1>
c0003c5a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c5e:	31 d2                	xor    edx,edx
c0003c60:	83 c0 1c             	add    eax,0x1c
c0003c63:	e8 00 e1 ff ff       	call   c0001d68 <st_dword>
c0003c68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c6c:	85 ff                	test   edi,edi
c0003c6e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c72:	74 66                	je     c0003cda <f_open+0x19d>
c0003c74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c78:	31 c9                	xor    ecx,ecx
c0003c7a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c7d:	89 fa                	mov    edx,edi
c0003c7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c83:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c87:	e8 a9 f7 ff ff       	call   c0003435 <remove_chain>
c0003c8c:	85 c0                	test   eax,eax
c0003c8e:	0f 85 4e 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c94:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c98:	4f                   	dec    edi
c0003c99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9d:	e8 c3 e5 ff ff       	call   c0002265 <move_window>
c0003ca2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003ca6:	85 c0                	test   eax,eax
c0003ca8:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003cab:	eb 27                	jmp    c0003cd4 <f_open+0x197>
c0003cad:	85 c0                	test   eax,eax
c0003caf:	0f 85 2d 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cb5:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003cb9:	b8 04 00 00 00       	mov    eax,0x4
c0003cbe:	f6 c2 10             	test   dl,0x10
c0003cc1:	0f 85 1b 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cc7:	83 e7 02             	and    edi,0x2
c0003cca:	74 0e                	je     c0003cda <f_open+0x19d>
c0003ccc:	b8 07 00 00 00       	mov    eax,0x7
c0003cd1:	80 e2 01             	and    dl,0x1
c0003cd4:	0f 85 08 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cda:	f7 c6 08 00 00 00    	test   esi,0x8
c0003ce0:	74 03                	je     c0003ce5 <f_open+0x1a8>
c0003ce2:	83 ce 40             	or     esi,0x40
c0003ce5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003ce9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ced:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cf0:	89 fa                	mov    edx,edi
c0003cf2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cf6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cf9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cfc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cfe:	e8 dd f3 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0003d03:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003d06:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003d09:	e8 3e e0 ff ff       	call   c0001d4c <ld_dword>
c0003d0e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003d12:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003d15:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003d17:	31 d2                	xor    edx,edx
c0003d19:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003d1d:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d21:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d25:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d2c:	89 f0                	mov    eax,esi
c0003d2e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d35:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d38:	b9 00 02 00 00       	mov    ecx,0x200
c0003d3d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d44:	e8 37 e0 ff ff       	call   c0001d80 <mem_set>
c0003d49:	83 e6 20             	and    esi,0x20
c0003d4c:	75 07                	jne    c0003d55 <f_open+0x218>
c0003d4e:	31 c0                	xor    eax,eax
c0003d50:	e9 8d 00 00 00       	jmp    c0003de2 <f_open+0x2a5>
c0003d55:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d58:	85 ff                	test   edi,edi
c0003d5a:	74 f2                	je     c0003d4e <f_open+0x211>
c0003d5c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d63:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d66:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d6a:	c1 e6 09             	shl    esi,0x9
c0003d6d:	39 fe                	cmp    esi,edi
c0003d6f:	73 1c                	jae    c0003d8d <f_open+0x250>
c0003d71:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d73:	29 f7                	sub    edi,esi
c0003d75:	e8 b7 f3 ff ff       	call   c0003131 <get_fat.isra.2>
c0003d7a:	89 c2                	mov    edx,eax
c0003d7c:	83 f8 01             	cmp    eax,0x1
c0003d7f:	76 10                	jbe    c0003d91 <f_open+0x254>
c0003d81:	83 f8 ff             	cmp    eax,0xffffffff
c0003d84:	75 e7                	jne    c0003d6d <f_open+0x230>
c0003d86:	b8 01 00 00 00       	mov    eax,0x1
c0003d8b:	eb 09                	jmp    c0003d96 <f_open+0x259>
c0003d8d:	31 c0                	xor    eax,eax
c0003d8f:	eb 05                	jmp    c0003d96 <f_open+0x259>
c0003d91:	b8 02 00 00 00       	mov    eax,0x2
c0003d96:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d99:	85 c0                	test   eax,eax
c0003d9b:	75 45                	jne    c0003de2 <f_open+0x2a5>
c0003d9d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003da3:	74 a9                	je     c0003d4e <f_open+0x211>
c0003da5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003da9:	89 f0                	mov    eax,esi
c0003dab:	e8 d5 e1 ff ff       	call   c0001f85 <clst2sect>
c0003db0:	89 c2                	mov    edx,eax
c0003db2:	b8 02 00 00 00       	mov    eax,0x2
c0003db7:	85 d2                	test   edx,edx
c0003db9:	74 27                	je     c0003de2 <f_open+0x2a5>
c0003dbb:	89 f9                	mov    ecx,edi
c0003dbd:	c1 e9 09             	shr    ecx,0x9
c0003dc0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003dc3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003dc6:	6a 01                	push   0x1
c0003dc8:	50                   	push   eax
c0003dc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dcd:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003dd1:	50                   	push   eax
c0003dd2:	e8 1d df ff ff       	call   c0001cf4 <disk_read>
c0003dd7:	83 c4 10             	add    esp,0x10
c0003dda:	85 c0                	test   eax,eax
c0003ddc:	0f 95 c0             	setne  al
c0003ddf:	0f b6 c0             	movzx  eax,al
c0003de2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003de6:	83 ec 0c             	sub    esp,0xc
c0003de9:	55                   	push   ebp
c0003dea:	e8 b5 1c 00 00       	call   c0005aa4 <ff_memfree>
c0003def:	83 c4 10             	add    esp,0x10
c0003df2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003df6:	85 c0                	test   eax,eax
c0003df8:	74 06                	je     c0003e00 <f_open+0x2c3>
c0003dfa:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003e00:	83 c4 5c             	add    esp,0x5c
c0003e03:	5b                   	pop    ebx
c0003e04:	5e                   	pop    esi
c0003e05:	5f                   	pop    edi
c0003e06:	5d                   	pop    ebp
c0003e07:	c3                   	ret    

c0003e08 <f_read>:
c0003e08:	55                   	push   ebp
c0003e09:	57                   	push   edi
c0003e0a:	56                   	push   esi
c0003e0b:	53                   	push   ebx
c0003e0c:	83 ec 2c             	sub    esp,0x2c
c0003e0f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003e13:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003e17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003e1d:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e21:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e25:	89 d8                	mov    eax,ebx
c0003e27:	e8 8f e3 ff ff       	call   c00021bb <validate>
c0003e2c:	89 c5                	mov    ebp,eax
c0003e2e:	85 c0                	test   eax,eax
c0003e30:	0f 85 c7 01 00 00    	jne    c0003ffd <f_read+0x1f5>
c0003e36:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e3a:	85 ed                	test   ebp,ebp
c0003e3c:	0f 85 bb 01 00 00    	jne    c0003ffd <f_read+0x1f5>
c0003e42:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e46:	0f 84 ac 01 00 00    	je     c0003ff8 <f_read+0x1f0>
c0003e4c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e4f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e52:	89 c7                	mov    edi,eax
c0003e54:	39 f0                	cmp    eax,esi
c0003e56:	0f 86 ad 00 00 00    	jbe    c0003f09 <f_read+0x101>
c0003e5c:	89 f7                	mov    edi,esi
c0003e5e:	e9 a6 00 00 00       	jmp    c0003f09 <f_read+0x101>
c0003e63:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e66:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e6c:	0f 85 5b 01 00 00    	jne    c0003fcd <f_read+0x1c5>
c0003e72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e76:	89 d1                	mov    ecx,edx
c0003e78:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e7c:	c1 e9 09             	shr    ecx,0x9
c0003e7f:	48                   	dec    eax
c0003e80:	21 c8                	and    eax,ecx
c0003e82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e86:	0f 84 8a 00 00 00    	je     c0003f16 <f_read+0x10e>
c0003e8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e90:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e93:	89 c8                	mov    eax,ecx
c0003e95:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e99:	e8 e7 e0 ff ff       	call   c0001f85 <clst2sect>
c0003e9e:	85 c0                	test   eax,eax
c0003ea0:	0f 84 88 00 00 00    	je     c0003f2e <f_read+0x126>
c0003ea6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003eaa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003eae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003eb2:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003eb8:	0f 86 bd 00 00 00    	jbe    c0003f7b <f_read+0x173>
c0003ebe:	89 fe                	mov    esi,edi
c0003ec0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ec4:	c1 ee 09             	shr    esi,0x9
c0003ec7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ecb:	01 f2                	add    edx,esi
c0003ecd:	39 c2                	cmp    edx,eax
c0003ecf:	76 06                	jbe    c0003ed7 <f_read+0xcf>
c0003ed1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ed5:	89 c6                	mov    esi,eax
c0003ed7:	56                   	push   esi
c0003ed8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003edc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ee0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ee4:	50                   	push   eax
c0003ee5:	e8 0a de ff ff       	call   c0001cf4 <disk_read>
c0003eea:	83 c4 10             	add    esp,0x10
c0003eed:	85 c0                	test   eax,eax
c0003eef:	75 50                	jne    c0003f41 <f_read+0x139>
c0003ef1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ef5:	78 60                	js     c0003f57 <f_read+0x14f>
c0003ef7:	c1 e6 09             	shl    esi,0x9
c0003efa:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003efe:	29 f7                	sub    edi,esi
c0003f00:	01 30                	add    DWORD PTR [eax],esi
c0003f02:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003f06:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003f09:	85 ff                	test   edi,edi
c0003f0b:	0f 85 52 ff ff ff    	jne    c0003e63 <f_read+0x5b>
c0003f11:	e9 e7 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f16:	85 d2                	test   edx,edx
c0003f18:	75 05                	jne    c0003f1f <f_read+0x117>
c0003f1a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003f1d:	eb 0a                	jmp    c0003f29 <f_read+0x121>
c0003f1f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f22:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f24:	e8 08 f2 ff ff       	call   c0003131 <get_fat.isra.2>
c0003f29:	83 f8 01             	cmp    eax,0x1
c0003f2c:	77 0e                	ja     c0003f3c <f_read+0x134>
c0003f2e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f32:	bd 02 00 00 00       	mov    ebp,0x2
c0003f37:	e9 c1 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f3c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f3f:	75 0e                	jne    c0003f4f <f_read+0x147>
c0003f41:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f45:	bd 01 00 00 00       	mov    ebp,0x1
c0003f4a:	e9 ae 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f4f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f52:	e9 35 ff ff ff       	jmp    c0003e8c <f_read+0x84>
c0003f57:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f5e:	39 f0                	cmp    eax,esi
c0003f60:	73 95                	jae    c0003ef7 <f_read+0xef>
c0003f62:	c1 e0 09             	shl    eax,0x9
c0003f65:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f68:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f6c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f71:	e8 f5 dd ff ff       	call   c0001d6b <mem_cpy>
c0003f76:	e9 7c ff ff ff       	jmp    c0003ef7 <f_read+0xef>
c0003f7b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f7e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f82:	74 42                	je     c0003fc6 <f_read+0x1be>
c0003f84:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f87:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f8b:	79 19                	jns    c0003fa6 <f_read+0x19e>
c0003f8d:	6a 01                	push   0x1
c0003f8f:	50                   	push   eax
c0003f90:	56                   	push   esi
c0003f91:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 6f dd ff ff       	call   c0001d0a <disk_write>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	75 9f                	jne    c0003f41 <f_read+0x139>
c0003fa2:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003fa6:	6a 01                	push   0x1
c0003fa8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003fac:	56                   	push   esi
c0003fad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003fb1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003fb5:	50                   	push   eax
c0003fb6:	e8 39 dd ff ff       	call   c0001cf4 <disk_read>
c0003fbb:	83 c4 10             	add    esp,0x10
c0003fbe:	85 c0                	test   eax,eax
c0003fc0:	0f 85 7b ff ff ff    	jne    c0003f41 <f_read+0x139>
c0003fc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003fca:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fcd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fd0:	ba 00 02 00 00       	mov    edx,0x200
c0003fd5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fda:	89 fe                	mov    esi,edi
c0003fdc:	29 c2                	sub    edx,eax
c0003fde:	39 d7                	cmp    edi,edx
c0003fe0:	76 02                	jbe    c0003fe4 <f_read+0x1dc>
c0003fe2:	89 d6                	mov    esi,edx
c0003fe4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fe8:	89 f1                	mov    ecx,esi
c0003fea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fee:	e8 78 dd ff ff       	call   c0001d6b <mem_cpy>
c0003ff3:	e9 02 ff ff ff       	jmp    c0003efa <f_read+0xf2>
c0003ff8:	bd 07 00 00 00       	mov    ebp,0x7
c0003ffd:	83 c4 2c             	add    esp,0x2c
c0004000:	89 e8                	mov    eax,ebp
c0004002:	5b                   	pop    ebx
c0004003:	5e                   	pop    esi
c0004004:	5f                   	pop    edi
c0004005:	5d                   	pop    ebp
c0004006:	c3                   	ret    

c0004007 <f_write>:
c0004007:	55                   	push   ebp
c0004008:	57                   	push   edi
c0004009:	56                   	push   esi
c000400a:	53                   	push   ebx
c000400b:	83 ec 2c             	sub    esp,0x2c
c000400e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004012:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004016:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000401c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004020:	89 d8                	mov    eax,ebx
c0004022:	e8 94 e1 ff ff       	call   c00021bb <validate>
c0004027:	89 c5                	mov    ebp,eax
c0004029:	85 c0                	test   eax,eax
c000402b:	0f 85 00 02 00 00    	jne    c0004231 <f_write+0x22a>
c0004031:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004035:	85 ed                	test   ebp,ebp
c0004037:	0f 85 f4 01 00 00    	jne    c0004231 <f_write+0x22a>
c000403d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004041:	0f 84 e5 01 00 00    	je     c000422c <f_write+0x225>
c0004047:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000404a:	89 c7                	mov    edi,eax
c000404c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004050:	0f 83 ea 00 00 00    	jae    c0004140 <f_write+0x139>
c0004056:	f7 d0                	not    eax
c0004058:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000405c:	e9 df 00 00 00       	jmp    c0004140 <f_write+0x139>
c0004061:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004064:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000406a:	0f 85 8b 01 00 00    	jne    c00041fb <f_write+0x1f4>
c0004070:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004074:	89 d1                	mov    ecx,edx
c0004076:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000407a:	c1 e9 09             	shr    ecx,0x9
c000407d:	48                   	dec    eax
c000407e:	21 c8                	and    eax,ecx
c0004080:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004084:	0f 84 c3 00 00 00    	je     c000414d <f_write+0x146>
c000408a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000408e:	0f 88 18 01 00 00    	js     c00041ac <f_write+0x1a5>
c0004094:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004098:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000409b:	89 c8                	mov    eax,ecx
c000409d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00040a1:	e8 df de ff ff       	call   c0001f85 <clst2sect>
c00040a6:	85 c0                	test   eax,eax
c00040a8:	0f 84 c8 00 00 00    	je     c0004176 <f_write+0x16f>
c00040ae:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00040b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00040b6:	01 c7                	add    edi,eax
c00040b8:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040c0:	0f 86 0d 01 00 00    	jbe    c00041d3 <f_write+0x1cc>
c00040c6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040ca:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ce:	c1 ee 09             	shr    esi,0x9
c00040d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040d5:	01 f2                	add    edx,esi
c00040d7:	39 c2                	cmp    edx,eax
c00040d9:	76 06                	jbe    c00040e1 <f_write+0xda>
c00040db:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040df:	89 c6                	mov    esi,eax
c00040e1:	56                   	push   esi
c00040e2:	57                   	push   edi
c00040e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040e7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040eb:	50                   	push   eax
c00040ec:	e8 19 dc ff ff       	call   c0001d0a <disk_write>
c00040f1:	83 c4 10             	add    esp,0x10
c00040f4:	85 c0                	test   eax,eax
c00040f6:	0f 85 8d 00 00 00    	jne    c0004189 <f_write+0x182>
c00040fc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040ff:	29 fa                	sub    edx,edi
c0004101:	39 f2                	cmp    edx,esi
c0004103:	73 18                	jae    c000411d <f_write+0x116>
c0004105:	c1 e2 09             	shl    edx,0x9
c0004108:	8d 43 28             	lea    eax,[ebx+0x28]
c000410b:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000410f:	b9 00 02 00 00       	mov    ecx,0x200
c0004114:	e8 52 dc ff ff       	call   c0001d6b <mem_cpy>
c0004119:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000411d:	c1 e6 09             	shl    esi,0x9
c0004120:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004124:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004128:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000412c:	01 30                	add    DWORD PTR [eax],esi
c000412e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004131:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004134:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004137:	39 f0                	cmp    eax,esi
c0004139:	73 02                	jae    c000413d <f_write+0x136>
c000413b:	89 f0                	mov    eax,esi
c000413d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004140:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004145:	0f 85 16 ff ff ff    	jne    c0004061 <f_write+0x5a>
c000414b:	eb 1b                	jmp    c0004168 <f_write+0x161>
c000414d:	85 d2                	test   edx,edx
c000414f:	75 09                	jne    c000415a <f_write+0x153>
c0004151:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004154:	85 c0                	test   eax,eax
c0004156:	75 19                	jne    c0004171 <f_write+0x16a>
c0004158:	eb 03                	jmp    c000415d <f_write+0x156>
c000415a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 97 f1 ff ff       	call   c00032fb <create_chain>
c0004164:	85 c0                	test   eax,eax
c0004166:	75 09                	jne    c0004171 <f_write+0x16a>
c0004168:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000416c:	e9 c0 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004171:	83 f8 01             	cmp    eax,0x1
c0004174:	75 0e                	jne    c0004184 <f_write+0x17d>
c0004176:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000417a:	bd 02 00 00 00       	mov    ebp,0x2
c000417f:	e9 ad 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004184:	83 f8 ff             	cmp    eax,0xffffffff
c0004187:	75 0e                	jne    c0004197 <f_write+0x190>
c0004189:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000418d:	bd 01 00 00 00       	mov    ebp,0x1
c0004192:	e9 9a 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004197:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000419a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000419e:	0f 85 e6 fe ff ff    	jne    c000408a <f_write+0x83>
c00041a4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00041a7:	e9 de fe ff ff       	jmp    c000408a <f_write+0x83>
c00041ac:	6a 01                	push   0x1
c00041ae:	8d 43 28             	lea    eax,[ebx+0x28]
c00041b1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00041b4:	50                   	push   eax
c00041b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00041b9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00041bd:	50                   	push   eax
c00041be:	e8 47 db ff ff       	call   c0001d0a <disk_write>
c00041c3:	83 c4 10             	add    esp,0x10
c00041c6:	85 c0                	test   eax,eax
c00041c8:	75 bf                	jne    c0004189 <f_write+0x182>
c00041ca:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ce:	e9 c1 fe ff ff       	jmp    c0004094 <f_write+0x8d>
c00041d3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041d6:	74 20                	je     c00041f8 <f_write+0x1f1>
c00041d8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041db:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041de:	76 18                	jbe    c00041f8 <f_write+0x1f1>
c00041e0:	6a 01                	push   0x1
c00041e2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041e5:	57                   	push   edi
c00041e6:	50                   	push   eax
c00041e7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041eb:	50                   	push   eax
c00041ec:	e8 03 db ff ff       	call   c0001cf4 <disk_read>
c00041f1:	83 c4 10             	add    esp,0x10
c00041f4:	85 c0                	test   eax,eax
c00041f6:	75 91                	jne    c0004189 <f_write+0x182>
c00041f8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041fb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041fe:	ba 00 02 00 00       	mov    edx,0x200
c0004203:	25 ff 01 00 00       	and    eax,0x1ff
c0004208:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000420c:	29 c2                	sub    edx,eax
c000420e:	39 d6                	cmp    esi,edx
c0004210:	76 02                	jbe    c0004214 <f_write+0x20d>
c0004212:	89 d6                	mov    esi,edx
c0004214:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004218:	89 f1                	mov    ecx,esi
c000421a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000421e:	e8 48 db ff ff       	call   c0001d6b <mem_cpy>
c0004223:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004227:	e9 f4 fe ff ff       	jmp    c0004120 <f_write+0x119>
c000422c:	bd 07 00 00 00       	mov    ebp,0x7
c0004231:	83 c4 2c             	add    esp,0x2c
c0004234:	89 e8                	mov    eax,ebp
c0004236:	5b                   	pop    ebx
c0004237:	5e                   	pop    esi
c0004238:	5f                   	pop    edi
c0004239:	5d                   	pop    ebp
c000423a:	c3                   	ret    

c000423b <f_sync>:
c000423b:	56                   	push   esi
c000423c:	53                   	push   ebx
c000423d:	83 ec 14             	sub    esp,0x14
c0004240:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004244:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004248:	89 d8                	mov    eax,ebx
c000424a:	e8 6c df ff ff       	call   c00021bb <validate>
c000424f:	85 c0                	test   eax,eax
c0004251:	0f 85 93 00 00 00    	jne    c00042ea <f_sync+0xaf>
c0004257:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000425a:	f6 c2 40             	test   dl,0x40
c000425d:	0f 84 87 00 00 00    	je     c00042ea <f_sync+0xaf>
c0004263:	84 d2                	test   dl,dl
c0004265:	79 29                	jns    c0004290 <f_sync+0x55>
c0004267:	6a 01                	push   0x1
c0004269:	8d 43 28             	lea    eax,[ebx+0x28]
c000426c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000426f:	50                   	push   eax
c0004270:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004274:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004278:	50                   	push   eax
c0004279:	e8 8c da ff ff       	call   c0001d0a <disk_write>
c000427e:	83 c4 10             	add    esp,0x10
c0004281:	89 c2                	mov    edx,eax
c0004283:	b8 01 00 00 00       	mov    eax,0x1
c0004288:	85 d2                	test   edx,edx
c000428a:	75 5e                	jne    c00042ea <f_sync+0xaf>
c000428c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004290:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004297:	e8 c9 df ff ff       	call   c0002265 <move_window>
c000429c:	85 c0                	test   eax,eax
c000429e:	75 4a                	jne    c00042ea <f_sync+0xaf>
c00042a0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00042a3:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00042a7:	89 f2                	mov    edx,esi
c00042a9:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00042ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00042ae:	e8 56 ee ff ff       	call   c0003109 <st_clust.isra.1>
c00042b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042b6:	8d 46 1c             	lea    eax,[esi+0x1c]
c00042b9:	e8 aa da ff ff       	call   c0001d68 <st_dword>
c00042be:	8d 46 16             	lea    eax,[esi+0x16]
c00042c1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042c6:	e8 9d da ff ff       	call   c0001d68 <st_dword>
c00042cb:	8d 46 12             	lea    eax,[esi+0x12]
c00042ce:	31 d2                	xor    edx,edx
c00042d0:	e8 8f da ff ff       	call   c0001d64 <st_word>
c00042d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042e1:	e8 bf e9 ff ff       	call   c0002ca5 <sync_fs>
c00042e6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ea:	83 c4 14             	add    esp,0x14
c00042ed:	5b                   	pop    ebx
c00042ee:	5e                   	pop    esi
c00042ef:	c3                   	ret    

c00042f0 <f_close>:
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 24             	sub    esp,0x24
c00042f4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042f8:	53                   	push   ebx
c00042f9:	e8 3d ff ff ff       	call   c000423b <f_sync>
c00042fe:	83 c4 10             	add    esp,0x10
c0004301:	85 c0                	test   eax,eax
c0004303:	75 15                	jne    c000431a <f_close+0x2a>
c0004305:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004309:	89 d8                	mov    eax,ebx
c000430b:	e8 ab de ff ff       	call   c00021bb <validate>
c0004310:	85 c0                	test   eax,eax
c0004312:	75 06                	jne    c000431a <f_close+0x2a>
c0004314:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000431a:	83 c4 18             	add    esp,0x18
c000431d:	5b                   	pop    ebx
c000431e:	c3                   	ret    

c000431f <f_lseek>:
c000431f:	55                   	push   ebp
c0004320:	57                   	push   edi
c0004321:	56                   	push   esi
c0004322:	53                   	push   ebx
c0004323:	83 ec 2c             	sub    esp,0x2c
c0004326:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000432a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000432e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004332:	89 d8                	mov    eax,ebx
c0004334:	e8 82 de ff ff       	call   c00021bb <validate>
c0004339:	89 c5                	mov    ebp,eax
c000433b:	85 c0                	test   eax,eax
c000433d:	0f 85 79 01 00 00    	jne    c00044bc <f_lseek+0x19d>
c0004343:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004347:	85 ed                	test   ebp,ebp
c0004349:	0f 85 6d 01 00 00    	jne    c00044bc <f_lseek+0x19d>
c000434f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004352:	39 f0                	cmp    eax,esi
c0004354:	73 08                	jae    c000435e <f_lseek+0x3f>
c0004356:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000435a:	75 02                	jne    c000435e <f_lseek+0x3f>
c000435c:	89 c6                	mov    esi,eax
c000435e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004361:	85 f6                	test   esi,esi
c0004363:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000436a:	75 07                	jne    c0004373 <f_lseek+0x54>
c000436c:	31 f6                	xor    esi,esi
c000436e:	e9 e2 00 00 00       	jmp    c0004455 <f_lseek+0x136>
c0004373:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004377:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000437b:	c1 e7 09             	shl    edi,0x9
c000437e:	85 c9                	test   ecx,ecx
c0004380:	74 28                	je     c00043aa <f_lseek+0x8b>
c0004382:	49                   	dec    ecx
c0004383:	31 d2                	xor    edx,edx
c0004385:	8d 46 ff             	lea    eax,[esi-0x1]
c0004388:	f7 f7                	div    edi
c000438a:	31 d2                	xor    edx,edx
c000438c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004390:	89 c8                	mov    eax,ecx
c0004392:	f7 f7                	div    edi
c0004394:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004398:	72 10                	jb     c00043aa <f_lseek+0x8b>
c000439a:	89 f8                	mov    eax,edi
c000439c:	f7 d8                	neg    eax
c000439e:	21 c1                	and    ecx,eax
c00043a0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00043a3:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00043a6:	29 ce                	sub    esi,ecx
c00043a8:	eb 3c                	jmp    c00043e6 <f_lseek+0xc7>
c00043aa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00043ad:	85 c0                	test   eax,eax
c00043af:	75 32                	jne    c00043e3 <f_lseek+0xc4>
c00043b1:	31 d2                	xor    edx,edx
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 41 ef ff ff       	call   c00032fb <create_chain>
c00043ba:	83 f8 01             	cmp    eax,0x1
c00043bd:	75 0e                	jne    c00043cd <f_lseek+0xae>
c00043bf:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043c3:	bd 02 00 00 00       	mov    ebp,0x2
c00043c8:	e9 ef 00 00 00       	jmp    c00044bc <f_lseek+0x19d>
c00043cd:	83 f8 ff             	cmp    eax,0xffffffff
c00043d0:	75 0e                	jne    c00043e0 <f_lseek+0xc1>
c00043d2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043d6:	bd 01 00 00 00       	mov    ebp,0x1
c00043db:	e9 dc 00 00 00       	jmp    c00044bc <f_lseek+0x19d>
c00043e0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043e3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043e6:	85 c0                	test   eax,eax
c00043e8:	74 82                	je     c000436c <f_lseek+0x4d>
c00043ea:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043ed:	39 fe                	cmp    esi,edi
c00043ef:	76 3d                	jbe    c000442e <f_lseek+0x10f>
c00043f1:	01 fa                	add    edx,edi
c00043f3:	29 fe                	sub    esi,edi
c00043f5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043f8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043fc:	89 c2                	mov    edx,eax
c00043fe:	74 0d                	je     c000440d <f_lseek+0xee>
c0004400:	89 d8                	mov    eax,ebx
c0004402:	e8 f4 ee ff ff       	call   c00032fb <create_chain>
c0004407:	85 c0                	test   eax,eax
c0004409:	75 09                	jne    c0004414 <f_lseek+0xf5>
c000440b:	eb 1f                	jmp    c000442c <f_lseek+0x10d>
c000440d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000440f:	e8 1d ed ff ff       	call   c0003131 <get_fat.isra.2>
c0004414:	83 f8 ff             	cmp    eax,0xffffffff
c0004417:	74 b9                	je     c00043d2 <f_lseek+0xb3>
c0004419:	83 f8 01             	cmp    eax,0x1
c000441c:	76 a1                	jbe    c00043bf <f_lseek+0xa0>
c000441e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004422:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004425:	76 98                	jbe    c00043bf <f_lseek+0xa0>
c0004427:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000442a:	eb be                	jmp    c00043ea <f_lseek+0xcb>
c000442c:	31 f6                	xor    esi,esi
c000442e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004431:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004437:	0f 84 2f ff ff ff    	je     c000436c <f_lseek+0x4d>
c000443d:	89 c2                	mov    edx,eax
c000443f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004443:	e8 3d db ff ff       	call   c0001f85 <clst2sect>
c0004448:	85 c0                	test   eax,eax
c000444a:	0f 84 6f ff ff ff    	je     c00043bf <f_lseek+0xa0>
c0004450:	c1 ee 09             	shr    esi,0x9
c0004453:	01 c6                	add    esi,eax
c0004455:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004458:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000445b:	76 07                	jbe    c0004464 <f_lseek+0x145>
c000445d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004460:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004464:	a9 ff 01 00 00       	test   eax,0x1ff
c0004469:	74 51                	je     c00044bc <f_lseek+0x19d>
c000446b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000446e:	39 f0                	cmp    eax,esi
c0004470:	74 4a                	je     c00044bc <f_lseek+0x19d>
c0004472:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004475:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004479:	79 21                	jns    c000449c <f_lseek+0x17d>
c000447b:	6a 01                	push   0x1
c000447d:	50                   	push   eax
c000447e:	57                   	push   edi
c000447f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004483:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004487:	50                   	push   eax
c0004488:	e8 7d d8 ff ff       	call   c0001d0a <disk_write>
c000448d:	83 c4 10             	add    esp,0x10
c0004490:	85 c0                	test   eax,eax
c0004492:	0f 85 3a ff ff ff    	jne    c00043d2 <f_lseek+0xb3>
c0004498:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000449c:	6a 01                	push   0x1
c000449e:	56                   	push   esi
c000449f:	57                   	push   edi
c00044a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044a4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044a8:	50                   	push   eax
c00044a9:	e8 46 d8 ff ff       	call   c0001cf4 <disk_read>
c00044ae:	83 c4 10             	add    esp,0x10
c00044b1:	85 c0                	test   eax,eax
c00044b3:	0f 85 19 ff ff ff    	jne    c00043d2 <f_lseek+0xb3>
c00044b9:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00044bc:	83 c4 2c             	add    esp,0x2c
c00044bf:	89 e8                	mov    eax,ebp
c00044c1:	5b                   	pop    ebx
c00044c2:	5e                   	pop    esi
c00044c3:	5f                   	pop    edi
c00044c4:	5d                   	pop    ebp
c00044c5:	c3                   	ret    

c00044c6 <f_opendir>:
c00044c6:	56                   	push   esi
c00044c7:	b8 09 00 00 00       	mov    eax,0x9
c00044cc:	53                   	push   ebx
c00044cd:	83 ec 24             	sub    esp,0x24
c00044d0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044d4:	85 db                	test   ebx,ebx
c00044d6:	0f 84 af 00 00 00    	je     c000458b <f_opendir+0xc5>
c00044dc:	31 c9                	xor    ecx,ecx
c00044de:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044e2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044e6:	e8 cd de ff ff       	call   c00023b8 <mount_volume>
c00044eb:	85 c0                	test   eax,eax
c00044ed:	0f 85 92 00 00 00    	jne    c0004585 <f_opendir+0xbf>
c00044f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f7:	83 ec 0c             	sub    esp,0xc
c00044fa:	89 03                	mov    DWORD PTR [ebx],eax
c00044fc:	68 00 02 00 00       	push   0x200
c0004501:	e8 86 15 00 00       	call   c0005a8c <ff_memalloc>
c0004506:	83 c4 10             	add    esp,0x10
c0004509:	89 c6                	mov    esi,eax
c000450b:	b8 11 00 00 00       	mov    eax,0x11
c0004510:	85 f6                	test   esi,esi
c0004512:	74 77                	je     c000458b <f_opendir+0xc5>
c0004514:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004518:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000451c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000451f:	89 d8                	mov    eax,ebx
c0004521:	e8 9c f3 ff ff       	call   c00038c2 <follow_path>
c0004526:	85 c0                	test   eax,eax
c0004528:	75 37                	jne    c0004561 <f_opendir+0x9b>
c000452a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000452e:	78 1c                	js     c000454c <f_opendir+0x86>
c0004530:	b8 05 00 00 00       	mov    eax,0x5
c0004535:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004539:	74 26                	je     c0004561 <f_opendir+0x9b>
c000453b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000453e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004542:	8a 00                	mov    al,BYTE PTR [eax]
c0004544:	e8 97 eb ff ff       	call   c00030e0 <ld_clust.isra.0>
c0004549:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000454c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004550:	31 d2                	xor    edx,edx
c0004552:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004556:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000455a:	89 d8                	mov    eax,ebx
c000455c:	e8 d2 ec ff ff       	call   c0003233 <dir_sdi>
c0004561:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004565:	83 ec 0c             	sub    esp,0xc
c0004568:	56                   	push   esi
c0004569:	e8 36 15 00 00       	call   c0005aa4 <ff_memfree>
c000456e:	83 c4 10             	add    esp,0x10
c0004571:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004575:	83 f8 04             	cmp    eax,0x4
c0004578:	74 06                	je     c0004580 <f_opendir+0xba>
c000457a:	85 c0                	test   eax,eax
c000457c:	74 0d                	je     c000458b <f_opendir+0xc5>
c000457e:	eb 05                	jmp    c0004585 <f_opendir+0xbf>
c0004580:	b8 05 00 00 00       	mov    eax,0x5
c0004585:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458b:	83 c4 24             	add    esp,0x24
c000458e:	5b                   	pop    ebx
c000458f:	5e                   	pop    esi
c0004590:	c3                   	ret    

c0004591 <f_closedir>:
c0004591:	53                   	push   ebx
c0004592:	83 ec 18             	sub    esp,0x18
c0004595:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004599:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000459d:	89 d8                	mov    eax,ebx
c000459f:	e8 17 dc ff ff       	call   c00021bb <validate>
c00045a4:	85 c0                	test   eax,eax
c00045a6:	75 06                	jne    c00045ae <f_closedir+0x1d>
c00045a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00045ae:	83 c4 18             	add    esp,0x18
c00045b1:	5b                   	pop    ebx
c00045b2:	c3                   	ret    

c00045b3 <f_readdir>:
c00045b3:	57                   	push   edi
c00045b4:	56                   	push   esi
c00045b5:	53                   	push   ebx
c00045b6:	83 ec 20             	sub    esp,0x20
c00045b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00045bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045c5:	89 d8                	mov    eax,ebx
c00045c7:	e8 ef db ff ff       	call   c00021bb <validate>
c00045cc:	85 c0                	test   eax,eax
c00045ce:	75 6e                	jne    c000463e <f_readdir+0x8b>
c00045d0:	85 ff                	test   edi,edi
c00045d2:	75 0b                	jne    c00045df <f_readdir+0x2c>
c00045d4:	31 d2                	xor    edx,edx
c00045d6:	89 d8                	mov    eax,ebx
c00045d8:	e8 56 ec ff ff       	call   c0003233 <dir_sdi>
c00045dd:	eb 5f                	jmp    c000463e <f_readdir+0x8b>
c00045df:	83 ec 0c             	sub    esp,0xc
c00045e2:	68 00 02 00 00       	push   0x200
c00045e7:	e8 a0 14 00 00       	call   c0005a8c <ff_memalloc>
c00045ec:	83 c4 10             	add    esp,0x10
c00045ef:	89 c6                	mov    esi,eax
c00045f1:	b8 11 00 00 00       	mov    eax,0x11
c00045f6:	85 f6                	test   esi,esi
c00045f8:	74 44                	je     c000463e <f_readdir+0x8b>
c00045fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045fe:	31 d2                	xor    edx,edx
c0004600:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004603:	89 d8                	mov    eax,ebx
c0004605:	e8 1a f0 ff ff       	call   c0003624 <dir_read>
c000460a:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000460f:	75 19                	jne    c000462a <f_readdir+0x77>
c0004611:	89 fa                	mov    edx,edi
c0004613:	89 d8                	mov    eax,ebx
c0004615:	e8 e2 e8 ff ff       	call   c0002efc <get_fileinfo>
c000461a:	31 d2                	xor    edx,edx
c000461c:	89 d8                	mov    eax,ebx
c000461e:	e8 9b ee ff ff       	call   c00034be <dir_next>
c0004623:	83 f8 04             	cmp    eax,0x4
c0004626:	75 02                	jne    c000462a <f_readdir+0x77>
c0004628:	31 c0                	xor    eax,eax
c000462a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000462e:	83 ec 0c             	sub    esp,0xc
c0004631:	56                   	push   esi
c0004632:	e8 6d 14 00 00       	call   c0005aa4 <ff_memfree>
c0004637:	83 c4 10             	add    esp,0x10
c000463a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000463e:	83 c4 20             	add    esp,0x20
c0004641:	5b                   	pop    ebx
c0004642:	5e                   	pop    esi
c0004643:	5f                   	pop    edi
c0004644:	c3                   	ret    

c0004645 <f_stat>:
c0004645:	57                   	push   edi
c0004646:	31 c9                	xor    ecx,ecx
c0004648:	56                   	push   esi
c0004649:	53                   	push   ebx
c000464a:	83 ec 30             	sub    esp,0x30
c000464d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004651:	89 e2                	mov    edx,esp
c0004653:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004657:	e8 5c dd ff ff       	call   c00023b8 <mount_volume>
c000465c:	89 c3                	mov    ebx,eax
c000465e:	85 c0                	test   eax,eax
c0004660:	75 59                	jne    c00046bb <f_stat+0x76>
c0004662:	83 ec 0c             	sub    esp,0xc
c0004665:	bb 11 00 00 00       	mov    ebx,0x11
c000466a:	68 00 02 00 00       	push   0x200
c000466f:	e8 18 14 00 00       	call   c0005a8c <ff_memalloc>
c0004674:	83 c4 10             	add    esp,0x10
c0004677:	89 c6                	mov    esi,eax
c0004679:	85 c0                	test   eax,eax
c000467b:	74 3e                	je     c00046bb <f_stat+0x76>
c000467d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004680:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004684:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004687:	89 e0                	mov    eax,esp
c0004689:	e8 34 f2 ff ff       	call   c00038c2 <follow_path>
c000468e:	89 c3                	mov    ebx,eax
c0004690:	85 c0                	test   eax,eax
c0004692:	75 1b                	jne    c00046af <f_stat+0x6a>
c0004694:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004699:	78 0f                	js     c00046aa <f_stat+0x65>
c000469b:	85 ff                	test   edi,edi
c000469d:	74 10                	je     c00046af <f_stat+0x6a>
c000469f:	89 fa                	mov    edx,edi
c00046a1:	89 e0                	mov    eax,esp
c00046a3:	e8 54 e8 ff ff       	call   c0002efc <get_fileinfo>
c00046a8:	eb 05                	jmp    c00046af <f_stat+0x6a>
c00046aa:	bb 06 00 00 00       	mov    ebx,0x6
c00046af:	83 ec 0c             	sub    esp,0xc
c00046b2:	56                   	push   esi
c00046b3:	e8 ec 13 00 00       	call   c0005aa4 <ff_memfree>
c00046b8:	83 c4 10             	add    esp,0x10
c00046bb:	83 c4 30             	add    esp,0x30
c00046be:	89 d8                	mov    eax,ebx
c00046c0:	5b                   	pop    ebx
c00046c1:	5e                   	pop    esi
c00046c2:	5f                   	pop    edi
c00046c3:	c3                   	ret    

c00046c4 <f_getfree>:
c00046c4:	55                   	push   ebp
c00046c5:	31 c9                	xor    ecx,ecx
c00046c7:	57                   	push   edi
c00046c8:	56                   	push   esi
c00046c9:	53                   	push   ebx
c00046ca:	83 ec 2c             	sub    esp,0x2c
c00046cd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046d1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046d5:	e8 de dc ff ff       	call   c00023b8 <mount_volume>
c00046da:	89 c7                	mov    edi,eax
c00046dc:	85 c0                	test   eax,eax
c00046de:	0f 85 d8 00 00 00    	jne    c00047bc <f_getfree+0xf8>
c00046e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046e8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046ec:	89 30                	mov    DWORD PTR [eax],esi
c00046ee:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046f1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046f4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046f7:	39 d0                	cmp    eax,edx
c00046f9:	77 0b                	ja     c0004706 <f_getfree+0x42>
c00046fb:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046ff:	89 01                	mov    DWORD PTR [ecx],eax
c0004701:	e9 b6 00 00 00       	jmp    c00047bc <f_getfree+0xf8>
c0004706:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004709:	75 29                	jne    c0004734 <f_getfree+0x70>
c000470b:	bd 02 00 00 00       	mov    ebp,0x2
c0004710:	31 db                	xor    ebx,ebx
c0004712:	89 ea                	mov    edx,ebp
c0004714:	89 f0                	mov    eax,esi
c0004716:	e8 16 ea ff ff       	call   c0003131 <get_fat.isra.2>
c000471b:	83 f8 ff             	cmp    eax,0xffffffff
c000471e:	74 7b                	je     c000479b <f_getfree+0xd7>
c0004720:	83 f8 01             	cmp    eax,0x1
c0004723:	74 7d                	je     c00047a2 <f_getfree+0xde>
c0004725:	83 d3 00             	adc    ebx,0x0
c0004728:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472c:	45                   	inc    ebp
c000472d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004730:	77 e0                	ja     c0004712 <f_getfree+0x4e>
c0004732:	eb 77                	jmp    c00047ab <f_getfree+0xe7>
c0004734:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004737:	31 db                	xor    ebx,ebx
c0004739:	31 f6                	xor    esi,esi
c000473b:	85 f6                	test   esi,esi
c000473d:	75 18                	jne    c0004757 <f_getfree+0x93>
c000473f:	8d 42 01             	lea    eax,[edx+0x1]
c0004742:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004746:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000474a:	e8 16 db ff ff       	call   c0002265 <move_window>
c000474f:	85 c0                	test   eax,eax
c0004751:	75 56                	jne    c00047a9 <f_getfree+0xe5>
c0004753:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004757:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000475b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000475f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004763:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004766:	75 11                	jne    c0004779 <f_getfree+0xb5>
c0004768:	e8 d2 d5 ff ff       	call   c0001d3f <ld_word>
c000476d:	66 83 f8 01          	cmp    ax,0x1
c0004771:	83 d3 00             	adc    ebx,0x0
c0004774:	83 c6 02             	add    esi,0x2
c0004777:	eb 13                	jmp    c000478c <f_getfree+0xc8>
c0004779:	e8 ce d5 ff ff       	call   c0001d4c <ld_dword>
c000477e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004783:	83 f8 01             	cmp    eax,0x1
c0004786:	83 d3 00             	adc    ebx,0x0
c0004789:	83 c6 04             	add    esi,0x4
c000478c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004792:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004796:	4d                   	dec    ebp
c0004797:	75 a2                	jne    c000473b <f_getfree+0x77>
c0004799:	eb 10                	jmp    c00047ab <f_getfree+0xe7>
c000479b:	bf 01 00 00 00       	mov    edi,0x1
c00047a0:	eb 09                	jmp    c00047ab <f_getfree+0xe7>
c00047a2:	bf 02 00 00 00       	mov    edi,0x2
c00047a7:	eb 02                	jmp    c00047ab <f_getfree+0xe7>
c00047a9:	89 c7                	mov    edi,eax
c00047ab:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00047af:	89 18                	mov    DWORD PTR [eax],ebx
c00047b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00047b5:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c00047b8:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00047bc:	83 c4 2c             	add    esp,0x2c
c00047bf:	89 f8                	mov    eax,edi
c00047c1:	5b                   	pop    ebx
c00047c2:	5e                   	pop    esi
c00047c3:	5f                   	pop    edi
c00047c4:	5d                   	pop    ebp
c00047c5:	c3                   	ret    

c00047c6 <f_truncate>:
c00047c6:	56                   	push   esi
c00047c7:	53                   	push   ebx
c00047c8:	83 ec 14             	sub    esp,0x14
c00047cb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047cf:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047d3:	89 d8                	mov    eax,ebx
c00047d5:	e8 e1 d9 ff ff       	call   c00021bb <validate>
c00047da:	89 c6                	mov    esi,eax
c00047dc:	85 c0                	test   eax,eax
c00047de:	0f 85 be 00 00 00    	jne    c00048a2 <f_truncate+0xdc>
c00047e4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047e8:	85 f6                	test   esi,esi
c00047ea:	0f 85 b2 00 00 00    	jne    c00048a2 <f_truncate+0xdc>
c00047f0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047f4:	0f 84 a3 00 00 00    	je     c000489d <f_truncate+0xd7>
c00047fa:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047fd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004800:	0f 83 9c 00 00 00    	jae    c00048a2 <f_truncate+0xdc>
c0004806:	85 c0                	test   eax,eax
c0004808:	75 15                	jne    c000481f <f_truncate+0x59>
c000480a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000480d:	31 c9                	xor    ecx,ecx
c000480f:	89 d8                	mov    eax,ebx
c0004811:	e8 1f ec ff ff       	call   c0003435 <remove_chain>
c0004816:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000481d:	eb 35                	jmp    c0004854 <f_truncate+0x8e>
c000481f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004822:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004824:	e8 08 e9 ff ff       	call   c0003131 <get_fat.isra.2>
c0004829:	89 c2                	mov    edx,eax
c000482b:	b8 01 00 00 00       	mov    eax,0x1
c0004830:	83 fa ff             	cmp    edx,0xffffffff
c0004833:	74 1f                	je     c0004854 <f_truncate+0x8e>
c0004835:	b8 02 00 00 00       	mov    eax,0x2
c000483a:	83 fa 01             	cmp    edx,0x1
c000483d:	74 15                	je     c0004854 <f_truncate+0x8e>
c000483f:	31 c0                	xor    eax,eax
c0004841:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004845:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004848:	76 0a                	jbe    c0004854 <f_truncate+0x8e>
c000484a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000484d:	89 d8                	mov    eax,ebx
c000484f:	e8 e1 eb ff ff       	call   c0003435 <remove_chain>
c0004854:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004857:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000485a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000485d:	83 ca 40             	or     edx,0x40
c0004860:	85 c0                	test   eax,eax
c0004862:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004865:	75 2f                	jne    c0004896 <f_truncate+0xd0>
c0004867:	84 d2                	test   dl,dl
c0004869:	79 37                	jns    c00048a2 <f_truncate+0xdc>
c000486b:	6a 01                	push   0x1
c000486d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004870:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004873:	50                   	push   eax
c0004874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004878:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000487c:	50                   	push   eax
c000487d:	e8 88 d4 ff ff       	call   c0001d0a <disk_write>
c0004882:	83 c4 10             	add    esp,0x10
c0004885:	85 c0                	test   eax,eax
c0004887:	75 08                	jne    c0004891 <f_truncate+0xcb>
c0004889:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000488d:	31 f6                	xor    esi,esi
c000488f:	eb 11                	jmp    c00048a2 <f_truncate+0xdc>
c0004891:	b8 01 00 00 00       	mov    eax,0x1
c0004896:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004899:	89 c6                	mov    esi,eax
c000489b:	eb 05                	jmp    c00048a2 <f_truncate+0xdc>
c000489d:	be 07 00 00 00       	mov    esi,0x7
c00048a2:	89 f0                	mov    eax,esi
c00048a4:	83 c4 14             	add    esp,0x14
c00048a7:	5b                   	pop    ebx
c00048a8:	5e                   	pop    esi
c00048a9:	c3                   	ret    

c00048aa <f_unlink>:
c00048aa:	55                   	push   ebp
c00048ab:	b9 02 00 00 00       	mov    ecx,0x2
c00048b0:	57                   	push   edi
c00048b1:	56                   	push   esi
c00048b2:	53                   	push   ebx
c00048b3:	81 ec 8c 00 00 00    	sub    esp,0x8c
c00048b9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048bd:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048c4:	e8 ef da ff ff       	call   c00023b8 <mount_volume>
c00048c9:	85 c0                	test   eax,eax
c00048cb:	0f 85 f0 00 00 00    	jne    c00049c1 <f_unlink+0x117>
c00048d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048d5:	83 ec 0c             	sub    esp,0xc
c00048d8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048dc:	68 00 02 00 00       	push   0x200
c00048e1:	e8 a6 11 00 00       	call   c0005a8c <ff_memalloc>
c00048e6:	83 c4 10             	add    esp,0x10
c00048e9:	89 c3                	mov    ebx,eax
c00048eb:	b8 11 00 00 00       	mov    eax,0x11
c00048f0:	85 db                	test   ebx,ebx
c00048f2:	0f 84 c9 00 00 00    	je     c00049c1 <f_unlink+0x117>
c00048f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004903:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004906:	8d 44 24 20          	lea    eax,[esp+0x20]
c000490a:	e8 b3 ef ff ff       	call   c00038c2 <follow_path>
c000490f:	85 c0                	test   eax,eax
c0004911:	0f 85 96 00 00 00    	jne    c00049ad <f_unlink+0x103>
c0004917:	b8 06 00 00 00       	mov    eax,0x6
c000491c:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004921:	0f 88 86 00 00 00    	js     c00049ad <f_unlink+0x103>
c0004927:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000492c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004932:	74 07                	je     c000493b <f_unlink+0x91>
c0004934:	b8 07 00 00 00       	mov    eax,0x7
c0004939:	eb 72                	jmp    c00049ad <f_unlink+0x103>
c000493b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000493f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004943:	8a 07                	mov    al,BYTE PTR [edi]
c0004945:	e8 96 e7 ff ff       	call   c00030e0 <ld_clust.isra.0>
c000494a:	83 e5 10             	and    ebp,0x10
c000494d:	89 c6                	mov    esi,eax
c000494f:	75 0f                	jne    c0004960 <f_unlink+0xb6>
c0004951:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004955:	e8 e7 ed ff ff       	call   c0003741 <dir_remove>
c000495a:	85 c0                	test   eax,eax
c000495c:	74 2f                	je     c000498d <f_unlink+0xe3>
c000495e:	eb 4d                	jmp    c00049ad <f_unlink+0x103>
c0004960:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004964:	31 d2                	xor    edx,edx
c0004966:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000496a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000496e:	e8 c0 e8 ff ff       	call   c0003233 <dir_sdi>
c0004973:	85 c0                	test   eax,eax
c0004975:	75 36                	jne    c00049ad <f_unlink+0x103>
c0004977:	31 d2                	xor    edx,edx
c0004979:	8d 44 24 50          	lea    eax,[esp+0x50]
c000497d:	e8 a2 ec ff ff       	call   c0003624 <dir_read>
c0004982:	85 c0                	test   eax,eax
c0004984:	74 ae                	je     c0004934 <f_unlink+0x8a>
c0004986:	83 f8 04             	cmp    eax,0x4
c0004989:	75 22                	jne    c00049ad <f_unlink+0x103>
c000498b:	eb c4                	jmp    c0004951 <f_unlink+0xa7>
c000498d:	85 f6                	test   esi,esi
c000498f:	75 0b                	jne    c000499c <f_unlink+0xf2>
c0004991:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004995:	e8 0b e3 ff ff       	call   c0002ca5 <sync_fs>
c000499a:	eb 11                	jmp    c00049ad <f_unlink+0x103>
c000499c:	31 c9                	xor    ecx,ecx
c000499e:	89 f2                	mov    edx,esi
c00049a0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00049a4:	e8 8c ea ff ff       	call   c0003435 <remove_chain>
c00049a9:	85 c0                	test   eax,eax
c00049ab:	74 e4                	je     c0004991 <f_unlink+0xe7>
c00049ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049b1:	83 ec 0c             	sub    esp,0xc
c00049b4:	53                   	push   ebx
c00049b5:	e8 ea 10 00 00       	call   c0005aa4 <ff_memfree>
c00049ba:	83 c4 10             	add    esp,0x10
c00049bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049c1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049c7:	5b                   	pop    ebx
c00049c8:	5e                   	pop    esi
c00049c9:	5f                   	pop    edi
c00049ca:	5d                   	pop    ebp
c00049cb:	c3                   	ret    

c00049cc <f_mkdir>:
c00049cc:	57                   	push   edi
c00049cd:	b9 02 00 00 00       	mov    ecx,0x2
c00049d2:	56                   	push   esi
c00049d3:	53                   	push   ebx
c00049d4:	83 ec 50             	sub    esp,0x50
c00049d7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049db:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049df:	e8 d4 d9 ff ff       	call   c00023b8 <mount_volume>
c00049e4:	89 c3                	mov    ebx,eax
c00049e6:	85 c0                	test   eax,eax
c00049e8:	0f 85 70 01 00 00    	jne    c0004b5e <f_mkdir+0x192>
c00049ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f2:	bb 11 00 00 00       	mov    ebx,0x11
c00049f7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049fb:	83 ec 0c             	sub    esp,0xc
c00049fe:	68 00 02 00 00       	push   0x200
c0004a03:	e8 84 10 00 00       	call   c0005a8c <ff_memalloc>
c0004a08:	83 c4 10             	add    esp,0x10
c0004a0b:	89 c7                	mov    edi,eax
c0004a0d:	85 c0                	test   eax,eax
c0004a0f:	0f 84 49 01 00 00    	je     c0004b5e <f_mkdir+0x192>
c0004a15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a19:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004a1d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a20:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a24:	e8 99 ee ff ff       	call   c00038c2 <follow_path>
c0004a29:	89 c3                	mov    ebx,eax
c0004a2b:	85 c0                	test   eax,eax
c0004a2d:	74 3e                	je     c0004a6d <f_mkdir+0xa1>
c0004a2f:	83 f8 04             	cmp    eax,0x4
c0004a32:	75 3e                	jne    c0004a72 <f_mkdir+0xa6>
c0004a34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a3e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a42:	e8 b4 e8 ff ff       	call   c00032fb <create_chain>
c0004a47:	89 c6                	mov    esi,eax
c0004a49:	85 c0                	test   eax,eax
c0004a4b:	74 0c                	je     c0004a59 <f_mkdir+0x8d>
c0004a4d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a52:	83 f8 01             	cmp    eax,0x1
c0004a55:	74 07                	je     c0004a5e <f_mkdir+0x92>
c0004a57:	eb 2a                	jmp    c0004a83 <f_mkdir+0xb7>
c0004a59:	bb 07 00 00 00       	mov    ebx,0x7
c0004a5e:	31 c9                	xor    ecx,ecx
c0004a60:	89 f2                	mov    edx,esi
c0004a62:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a66:	e8 ca e9 ff ff       	call   c0003435 <remove_chain>
c0004a6b:	eb 05                	jmp    c0004a72 <f_mkdir+0xa6>
c0004a6d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a72:	83 ec 0c             	sub    esp,0xc
c0004a75:	57                   	push   edi
c0004a76:	e8 29 10 00 00       	call   c0005aa4 <ff_memfree>
c0004a7b:	83 c4 10             	add    esp,0x10
c0004a7e:	e9 db 00 00 00       	jmp    c0004b5e <f_mkdir+0x192>
c0004a83:	bb 01 00 00 00       	mov    ebx,0x1
c0004a88:	83 f8 ff             	cmp    eax,0xffffffff
c0004a8b:	74 d1                	je     c0004a5e <f_mkdir+0x92>
c0004a8d:	89 f2                	mov    edx,esi
c0004a8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a93:	e8 73 dd ff ff       	call   c000280b <dir_clear>
c0004a98:	89 c3                	mov    ebx,eax
c0004a9a:	85 c0                	test   eax,eax
c0004a9c:	75 c0                	jne    c0004a5e <f_mkdir+0x92>
c0004a9e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004aa3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004aa7:	ba 20 00 00 00       	mov    edx,0x20
c0004aac:	83 c0 34             	add    eax,0x34
c0004aaf:	e8 cc d2 ff ff       	call   c0001d80 <mem_set>
c0004ab4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab8:	ba 00 00 21 50       	mov    edx,0x50210000
c0004abd:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004ac1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004ac5:	83 c0 4a             	add    eax,0x4a
c0004ac8:	e8 9b d2 ff ff       	call   c0001d68 <st_dword>
c0004acd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad1:	89 f1                	mov    ecx,esi
c0004ad3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ad6:	e8 2e e6 ff ff       	call   c0003109 <st_clust.isra.1>
c0004adb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004adf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ae4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ae7:	83 c0 54             	add    eax,0x54
c0004aea:	e8 7c d2 ff ff       	call   c0001d6b <mem_cpy>
c0004aef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004af3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004af7:	8d 50 54             	lea    edx,[eax+0x54]
c0004afa:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004afe:	e8 06 e6 ff ff       	call   c0003109 <st_clust.isra.1>
c0004b03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b07:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b0b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b0f:	e8 42 ee ff ff       	call   c0003956 <dir_register>
c0004b14:	89 c3                	mov    ebx,eax
c0004b16:	85 c0                	test   eax,eax
c0004b18:	0f 85 40 ff ff ff    	jne    c0004a5e <f_mkdir+0x92>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b27:	83 c0 16             	add    eax,0x16
c0004b2a:	e8 39 d2 ff ff       	call   c0001d68 <st_dword>
c0004b2f:	89 f1                	mov    ecx,esi
c0004b31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b39:	e8 cb e5 ff ff       	call   c0003109 <st_clust.isra.1>
c0004b3e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b42:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b4a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b52:	e8 4e e1 ff ff       	call   c0002ca5 <sync_fs>
c0004b57:	89 c3                	mov    ebx,eax
c0004b59:	e9 14 ff ff ff       	jmp    c0004a72 <f_mkdir+0xa6>
c0004b5e:	83 c4 50             	add    esp,0x50
c0004b61:	89 d8                	mov    eax,ebx
c0004b63:	5b                   	pop    ebx
c0004b64:	5e                   	pop    esi
c0004b65:	5f                   	pop    edi
c0004b66:	c3                   	ret    

c0004b67 <f_rename>:
c0004b67:	57                   	push   edi
c0004b68:	56                   	push   esi
c0004b69:	53                   	push   ebx
c0004b6a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b70:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b77:	e8 f2 d5 ff ff       	call   c000216e <get_ldnumber>
c0004b7c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b81:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b85:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b8c:	e8 27 d8 ff ff       	call   c00023b8 <mount_volume>
c0004b91:	85 c0                	test   eax,eax
c0004b93:	0f 85 7a 01 00 00    	jne    c0004d13 <f_rename+0x1ac>
c0004b99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b9d:	83 ec 0c             	sub    esp,0xc
c0004ba0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ba4:	68 00 02 00 00       	push   0x200
c0004ba9:	e8 de 0e 00 00       	call   c0005a8c <ff_memalloc>
c0004bae:	83 c4 10             	add    esp,0x10
c0004bb1:	89 c6                	mov    esi,eax
c0004bb3:	b8 11 00 00 00       	mov    eax,0x11
c0004bb8:	85 f6                	test   esi,esi
c0004bba:	0f 84 53 01 00 00    	je     c0004d13 <f_rename+0x1ac>
c0004bc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bc4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bcb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bce:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bd2:	e8 eb ec ff ff       	call   c00038c2 <follow_path>
c0004bd7:	85 c0                	test   eax,eax
c0004bd9:	0f 85 20 01 00 00    	jne    c0004cff <f_rename+0x198>
c0004bdf:	b8 06 00 00 00       	mov    eax,0x6
c0004be4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004be9:	0f 85 10 01 00 00    	jne    c0004cff <f_rename+0x198>
c0004bef:	b9 20 00 00 00       	mov    ecx,0x20
c0004bf4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bf8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bfc:	e8 6a d1 ff ff       	call   c0001d6b <mem_cpy>
c0004c01:	b9 30 00 00 00       	mov    ecx,0x30
c0004c06:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004c0a:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c0e:	e8 58 d1 ff ff       	call   c0001d6b <mem_cpy>
c0004c13:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004c1a:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c1e:	e8 9f ec ff ff       	call   c00038c2 <follow_path>
c0004c23:	85 c0                	test   eax,eax
c0004c25:	75 20                	jne    c0004c47 <f_rename+0xe0>
c0004c27:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c2b:	b8 08 00 00 00       	mov    eax,0x8
c0004c30:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c34:	0f 85 c5 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c3a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c3e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c45:	eb 03                	jmp    c0004c4a <f_rename+0xe3>
c0004c47:	83 f8 04             	cmp    eax,0x4
c0004c4a:	0f 85 af 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c50:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c54:	e8 fd ec ff ff       	call   c0003956 <dir_register>
c0004c59:	85 c0                	test   eax,eax
c0004c5b:	0f 85 9e 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c61:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c68:	b9 13 00 00 00       	mov    ecx,0x13
c0004c6d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c70:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c74:	e8 f2 d0 ff ff       	call   c0001d6b <mem_cpy>
c0004c79:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c7d:	a8 10                	test   al,0x10
c0004c7f:	75 03                	jne    c0004c84 <f_rename+0x11d>
c0004c81:	83 c8 20             	or     eax,0x20
c0004c84:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c8b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c8f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c93:	74 54                	je     c0004ce9 <f_rename+0x182>
c0004c95:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c99:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c9d:	74 4a                	je     c0004ce9 <f_rename+0x182>
c0004c9f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ca3:	89 da                	mov    edx,ebx
c0004ca5:	8a 07                	mov    al,BYTE PTR [edi]
c0004ca7:	e8 34 e4 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0004cac:	89 c2                	mov    edx,eax
c0004cae:	89 f8                	mov    eax,edi
c0004cb0:	e8 d0 d2 ff ff       	call   c0001f85 <clst2sect>
c0004cb5:	89 c2                	mov    edx,eax
c0004cb7:	b8 02 00 00 00       	mov    eax,0x2
c0004cbc:	85 d2                	test   edx,edx
c0004cbe:	74 3f                	je     c0004cff <f_rename+0x198>
c0004cc0:	89 f8                	mov    eax,edi
c0004cc2:	e8 9e d5 ff ff       	call   c0002265 <move_window>
c0004cc7:	85 c0                	test   eax,eax
c0004cc9:	75 34                	jne    c0004cff <f_rename+0x198>
c0004ccb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ccf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cd3:	75 14                	jne    c0004ce9 <f_rename+0x182>
c0004cd5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cd8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cdc:	e8 28 e4 ff ff       	call   c0003109 <st_clust.isra.1>
c0004ce1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ce5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ce9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ced:	e8 4f ea ff ff       	call   c0003741 <dir_remove>
c0004cf2:	85 c0                	test   eax,eax
c0004cf4:	75 09                	jne    c0004cff <f_rename+0x198>
c0004cf6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cfa:	e8 a6 df ff ff       	call   c0002ca5 <sync_fs>
c0004cff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d03:	83 ec 0c             	sub    esp,0xc
c0004d06:	56                   	push   esi
c0004d07:	e8 98 0d 00 00       	call   c0005aa4 <ff_memfree>
c0004d0c:	83 c4 10             	add    esp,0x10
c0004d0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d13:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004d19:	5b                   	pop    ebx
c0004d1a:	5e                   	pop    esi
c0004d1b:	5f                   	pop    edi
c0004d1c:	c3                   	ret    

c0004d1d <f_chmod>:
c0004d1d:	57                   	push   edi
c0004d1e:	b9 02 00 00 00       	mov    ecx,0x2
c0004d23:	56                   	push   esi
c0004d24:	53                   	push   ebx
c0004d25:	83 ec 50             	sub    esp,0x50
c0004d28:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d2c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d30:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d34:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d38:	e8 7b d6 ff ff       	call   c00023b8 <mount_volume>
c0004d3d:	85 c0                	test   eax,eax
c0004d3f:	75 7e                	jne    c0004dbf <f_chmod+0xa2>
c0004d41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d45:	83 ec 0c             	sub    esp,0xc
c0004d48:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d4c:	68 00 02 00 00       	push   0x200
c0004d51:	e8 36 0d 00 00       	call   c0005a8c <ff_memalloc>
c0004d56:	83 c4 10             	add    esp,0x10
c0004d59:	89 c6                	mov    esi,eax
c0004d5b:	b8 11 00 00 00       	mov    eax,0x11
c0004d60:	85 f6                	test   esi,esi
c0004d62:	74 5b                	je     c0004dbf <f_chmod+0xa2>
c0004d64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d68:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d6c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d6f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d73:	e8 4a eb ff ff       	call   c00038c2 <follow_path>
c0004d78:	85 c0                	test   eax,eax
c0004d7a:	75 2f                	jne    c0004dab <f_chmod+0x8e>
c0004d7c:	b8 06 00 00 00       	mov    eax,0x6
c0004d81:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d86:	75 23                	jne    c0004dab <f_chmod+0x8e>
c0004d88:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d8c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d8f:	21 fb                	and    ebx,edi
c0004d91:	83 e3 27             	and    ebx,0x27
c0004d94:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d97:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d9e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004da2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004da6:	e8 fa de ff ff       	call   c0002ca5 <sync_fs>
c0004dab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004daf:	83 ec 0c             	sub    esp,0xc
c0004db2:	56                   	push   esi
c0004db3:	e8 ec 0c 00 00       	call   c0005aa4 <ff_memfree>
c0004db8:	83 c4 10             	add    esp,0x10
c0004dbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dbf:	83 c4 50             	add    esp,0x50
c0004dc2:	5b                   	pop    ebx
c0004dc3:	5e                   	pop    esi
c0004dc4:	5f                   	pop    edi
c0004dc5:	c3                   	ret    

c0004dc6 <f_utime>:
c0004dc6:	56                   	push   esi
c0004dc7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dcc:	53                   	push   ebx
c0004dcd:	83 ec 54             	sub    esp,0x54
c0004dd0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004dd4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004dd8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004ddc:	e8 d7 d5 ff ff       	call   c00023b8 <mount_volume>
c0004de1:	85 c0                	test   eax,eax
c0004de3:	0f 85 85 00 00 00    	jne    c0004e6e <f_utime+0xa8>
c0004de9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ded:	83 ec 0c             	sub    esp,0xc
c0004df0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004df4:	68 00 02 00 00       	push   0x200
c0004df9:	e8 8e 0c 00 00       	call   c0005a8c <ff_memalloc>
c0004dfe:	83 c4 10             	add    esp,0x10
c0004e01:	89 c3                	mov    ebx,eax
c0004e03:	b8 11 00 00 00       	mov    eax,0x11
c0004e08:	85 db                	test   ebx,ebx
c0004e0a:	74 62                	je     c0004e6e <f_utime+0xa8>
c0004e0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e10:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004e14:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004e17:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e1b:	e8 a2 ea ff ff       	call   c00038c2 <follow_path>
c0004e20:	85 c0                	test   eax,eax
c0004e22:	75 36                	jne    c0004e5a <f_utime+0x94>
c0004e24:	b8 06 00 00 00       	mov    eax,0x6
c0004e29:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e2e:	75 2a                	jne    c0004e5a <f_utime+0x94>
c0004e30:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e34:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e38:	c1 e2 10             	shl    edx,0x10
c0004e3b:	09 c2                	or     edx,eax
c0004e3d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e41:	83 c0 16             	add    eax,0x16
c0004e44:	e8 1f cf ff ff       	call   c0001d68 <st_dword>
c0004e49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e55:	e8 4b de ff ff       	call   c0002ca5 <sync_fs>
c0004e5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e5e:	83 ec 0c             	sub    esp,0xc
c0004e61:	53                   	push   ebx
c0004e62:	e8 3d 0c 00 00       	call   c0005aa4 <ff_memfree>
c0004e67:	83 c4 10             	add    esp,0x10
c0004e6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e6e:	83 c4 54             	add    esp,0x54
c0004e71:	5b                   	pop    ebx
c0004e72:	5e                   	pop    esi
c0004e73:	c3                   	ret    

c0004e74 <f_getlabel>:
c0004e74:	55                   	push   ebp
c0004e75:	31 c9                	xor    ecx,ecx
c0004e77:	57                   	push   edi
c0004e78:	56                   	push   esi
c0004e79:	53                   	push   ebx
c0004e7a:	83 ec 5c             	sub    esp,0x5c
c0004e7d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e81:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e85:	e8 2e d5 ff ff       	call   c00023b8 <mount_volume>
c0004e8a:	89 c6                	mov    esi,eax
c0004e8c:	85 c0                	test   eax,eax
c0004e8e:	0f 85 27 01 00 00    	jne    c0004fbb <f_getlabel+0x147>
c0004e94:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e99:	0f 84 d1 00 00 00    	je     c0004f70 <f_getlabel+0xfc>
c0004e9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ea3:	31 d2                	xor    edx,edx
c0004ea5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004ea9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004eb1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eb5:	e8 79 e3 ff ff       	call   c0003233 <dir_sdi>
c0004eba:	85 c0                	test   eax,eax
c0004ebc:	0f 85 a2 00 00 00    	jne    c0004f64 <f_getlabel+0xf0>
c0004ec2:	ba 01 00 00 00       	mov    edx,0x1
c0004ec7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ecb:	e8 54 e7 ff ff       	call   c0003624 <dir_read>
c0004ed0:	85 c0                	test   eax,eax
c0004ed2:	0f 85 8c 00 00 00    	jne    c0004f64 <f_getlabel+0xf0>
c0004ed8:	31 db                	xor    ebx,ebx
c0004eda:	31 c9                	xor    ecx,ecx
c0004edc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ee0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ee3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ee8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004eed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ef1:	e8 ca ce ff ff       	call   c0001dc0 <dbc_1st>
c0004ef6:	85 c0                	test   eax,eax
c0004ef8:	74 16                	je     c0004f10 <f_getlabel+0x9c>
c0004efa:	83 ff 0b             	cmp    edi,0xb
c0004efd:	74 11                	je     c0004f10 <f_getlabel+0x9c>
c0004eff:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004f04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f08:	8d 79 02             	lea    edi,[ecx+0x2]
c0004f0b:	c1 e0 08             	shl    eax,0x8
c0004f0e:	09 c2                	or     edx,eax
c0004f10:	0f b7 d2             	movzx  edx,dx
c0004f13:	50                   	push   eax
c0004f14:	50                   	push   eax
c0004f15:	68 b5 01 00 00       	push   0x1b5
c0004f1a:	52                   	push   edx
c0004f1b:	e8 3c 0c 00 00       	call   c0005b5c <ff_oem2uni>
c0004f20:	83 c4 10             	add    esp,0x10
c0004f23:	66 85 c0             	test   ax,ax
c0004f26:	74 25                	je     c0004f4d <f_getlabel+0xd9>
c0004f28:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f2c:	0f b7 c0             	movzx  eax,ax
c0004f2f:	01 da                	add    edx,ebx
c0004f31:	b9 04 00 00 00       	mov    ecx,0x4
c0004f36:	e8 51 cf ff ff       	call   c0001e8c <put_utf>
c0004f3b:	84 c0                	test   al,al
c0004f3d:	74 0e                	je     c0004f4d <f_getlabel+0xd9>
c0004f3f:	0f b6 c0             	movzx  eax,al
c0004f42:	01 c3                	add    ebx,eax
c0004f44:	83 ff 0b             	cmp    edi,0xb
c0004f47:	74 06                	je     c0004f4f <f_getlabel+0xdb>
c0004f49:	89 f9                	mov    ecx,edi
c0004f4b:	eb 8f                	jmp    c0004edc <f_getlabel+0x68>
c0004f4d:	31 db                	xor    ebx,ebx
c0004f4f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f53:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f56:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f5a:	74 14                	je     c0004f70 <f_getlabel+0xfc>
c0004f5c:	4b                   	dec    ebx
c0004f5d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f60:	74 f1                	je     c0004f53 <f_getlabel+0xdf>
c0004f62:	eb 0c                	jmp    c0004f70 <f_getlabel+0xfc>
c0004f64:	83 f8 04             	cmp    eax,0x4
c0004f67:	75 50                	jne    c0004fb9 <f_getlabel+0x145>
c0004f69:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f70:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f75:	74 44                	je     c0004fbb <f_getlabel+0x147>
c0004f77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f7b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f7e:	e8 e2 d2 ff ff       	call   c0002265 <move_window>
c0004f83:	89 c6                	mov    esi,eax
c0004f85:	85 c0                	test   eax,eax
c0004f87:	75 32                	jne    c0004fbb <f_getlabel+0x147>
c0004f89:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f8d:	b8 43 00 00 00       	mov    eax,0x43
c0004f92:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f94:	80 f9 03             	cmp    cl,0x3
c0004f97:	74 0f                	je     c0004fa8 <f_getlabel+0x134>
c0004f99:	31 c0                	xor    eax,eax
c0004f9b:	80 f9 04             	cmp    cl,0x4
c0004f9e:	0f 94 c0             	sete   al
c0004fa1:	48                   	dec    eax
c0004fa2:	83 e0 c3             	and    eax,0xffffffc3
c0004fa5:	83 c0 64             	add    eax,0x64
c0004fa8:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004fac:	e8 9b cd ff ff       	call   c0001d4c <ld_dword>
c0004fb1:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004fb5:	89 07                	mov    DWORD PTR [edi],eax
c0004fb7:	eb 02                	jmp    c0004fbb <f_getlabel+0x147>
c0004fb9:	89 c6                	mov    esi,eax
c0004fbb:	83 c4 5c             	add    esp,0x5c
c0004fbe:	89 f0                	mov    eax,esi
c0004fc0:	5b                   	pop    ebx
c0004fc1:	5e                   	pop    esi
c0004fc2:	5f                   	pop    edi
c0004fc3:	5d                   	pop    ebp
c0004fc4:	c3                   	ret    

c0004fc5 <f_setlabel>:
c0004fc5:	56                   	push   esi
c0004fc6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fcb:	53                   	push   ebx
c0004fcc:	83 ec 54             	sub    esp,0x54
c0004fcf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fd3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fd7:	e8 dc d3 ff ff       	call   c00023b8 <mount_volume>
c0004fdc:	89 c6                	mov    esi,eax
c0004fde:	85 c0                	test   eax,eax
c0004fe0:	0f 85 67 01 00 00    	jne    c000514d <f_setlabel+0x188>
c0004fe6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004feb:	ba 20 00 00 00       	mov    edx,0x20
c0004ff0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004ff4:	31 db                	xor    ebx,ebx
c0004ff6:	e8 85 cd ff ff       	call   c0001d80 <mem_set>
c0004ffb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fff:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005002:	76 5b                	jbe    c000505f <f_setlabel+0x9a>
c0005004:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005008:	e8 b9 cd ff ff       	call   c0001dc6 <tchar2uni>
c000500d:	3d ff ff 00 00       	cmp    eax,0xffff
c0005012:	76 0a                	jbe    c000501e <f_setlabel+0x59>
c0005014:	be 06 00 00 00       	mov    esi,0x6
c0005019:	e9 2f 01 00 00       	jmp    c000514d <f_setlabel+0x188>
c000501e:	83 ec 0c             	sub    esp,0xc
c0005021:	50                   	push   eax
c0005022:	e8 ad 0b 00 00       	call   c0005bd4 <ff_wtoupper>
c0005027:	5a                   	pop    edx
c0005028:	59                   	pop    ecx
c0005029:	68 b5 01 00 00       	push   0x1b5
c000502e:	50                   	push   eax
c000502f:	e8 88 0a 00 00       	call   c0005abc <ff_uni2oem>
c0005034:	83 c4 10             	add    esp,0x10
c0005037:	89 c6                	mov    esi,eax
c0005039:	66 85 c0             	test   ax,ax
c000503c:	74 d6                	je     c0005014 <f_setlabel+0x4f>
c000503e:	0f b7 d0             	movzx  edx,ax
c0005041:	b8 f0 cf 01 c0       	mov    eax,0xc001cff0
c0005046:	e8 63 cd ff ff       	call   c0001dae <chk_chr>
c000504b:	85 c0                	test   eax,eax
c000504d:	75 c5                	jne    c0005014 <f_setlabel+0x4f>
c000504f:	66 81 fe ff 00       	cmp    si,0xff
c0005054:	0f 87 c9 00 00 00    	ja     c0005123 <f_setlabel+0x15e>
c000505a:	e9 e4 00 00 00       	jmp    c0005143 <f_setlabel+0x17e>
c000505f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005064:	74 ae                	je     c0005014 <f_setlabel+0x4f>
c0005066:	85 db                	test   ebx,ebx
c0005068:	74 0e                	je     c0005078 <f_setlabel+0xb3>
c000506a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000506d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005072:	75 04                	jne    c0005078 <f_setlabel+0xb3>
c0005074:	89 c3                	mov    ebx,eax
c0005076:	eb ee                	jmp    c0005066 <f_setlabel+0xa1>
c0005078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000507c:	31 d2                	xor    edx,edx
c000507e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005082:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000508a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000508e:	e8 a0 e1 ff ff       	call   c0003233 <dir_sdi>
c0005093:	89 c6                	mov    esi,eax
c0005095:	85 c0                	test   eax,eax
c0005097:	0f 85 b0 00 00 00    	jne    c000514d <f_setlabel+0x188>
c000509d:	ba 01 00 00 00       	mov    edx,0x1
c00050a2:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050a6:	e8 79 e5 ff ff       	call   c0003624 <dir_read>
c00050ab:	85 c0                	test   eax,eax
c00050ad:	75 18                	jne    c00050c7 <f_setlabel+0x102>
c00050af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050b3:	85 db                	test   ebx,ebx
c00050b5:	74 0b                	je     c00050c2 <f_setlabel+0xfd>
c00050b7:	b9 0b 00 00 00       	mov    ecx,0xb
c00050bc:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050c0:	eb 47                	jmp    c0005109 <f_setlabel+0x144>
c00050c2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050c5:	eb 47                	jmp    c000510e <f_setlabel+0x149>
c00050c7:	83 f8 04             	cmp    eax,0x4
c00050ca:	75 53                	jne    c000511f <f_setlabel+0x15a>
c00050cc:	85 db                	test   ebx,ebx
c00050ce:	74 7d                	je     c000514d <f_setlabel+0x188>
c00050d0:	ba 01 00 00 00       	mov    edx,0x1
c00050d5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050d9:	e8 e5 e4 ff ff       	call   c00035c3 <dir_alloc>
c00050de:	89 c6                	mov    esi,eax
c00050e0:	85 c0                	test   eax,eax
c00050e2:	75 69                	jne    c000514d <f_setlabel+0x188>
c00050e4:	b9 20 00 00 00       	mov    ecx,0x20
c00050e9:	31 d2                	xor    edx,edx
c00050eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050ef:	e8 8c cc ff ff       	call   c0001d80 <mem_set>
c00050f4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050f8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050fd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005101:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005105:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005109:	e8 5d cc ff ff       	call   c0001d6b <mem_cpy>
c000510e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005112:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005116:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000511a:	e8 86 db ff ff       	call   c0002ca5 <sync_fs>
c000511f:	89 c6                	mov    esi,eax
c0005121:	eb 2a                	jmp    c000514d <f_setlabel+0x188>
c0005123:	83 fb 09             	cmp    ebx,0x9
c0005126:	0f 87 e8 fe ff ff    	ja     c0005014 <f_setlabel+0x4f>
c000512c:	89 f0                	mov    eax,esi
c000512e:	66 c1 e8 08          	shr    ax,0x8
c0005132:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005136:	43                   	inc    ebx
c0005137:	89 f0                	mov    eax,esi
c0005139:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000513d:	43                   	inc    ebx
c000513e:	e9 b8 fe ff ff       	jmp    c0004ffb <f_setlabel+0x36>
c0005143:	83 fb 0a             	cmp    ebx,0xa
c0005146:	76 ef                	jbe    c0005137 <f_setlabel+0x172>
c0005148:	e9 c7 fe ff ff       	jmp    c0005014 <f_setlabel+0x4f>
c000514d:	89 f0                	mov    eax,esi
c000514f:	83 c4 54             	add    esp,0x54
c0005152:	5b                   	pop    ebx
c0005153:	5e                   	pop    esi
c0005154:	c3                   	ret    

c0005155 <f_expand>:
c0005155:	55                   	push   ebp
c0005156:	57                   	push   edi
c0005157:	56                   	push   esi
c0005158:	53                   	push   ebx
c0005159:	83 ec 2c             	sub    esp,0x2c
c000515c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005160:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005164:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005168:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000516c:	89 d8                	mov    eax,ebx
c000516e:	e8 48 d0 ff ff       	call   c00021bb <validate>
c0005173:	89 c6                	mov    esi,eax
c0005175:	85 c0                	test   eax,eax
c0005177:	0f 85 2e 01 00 00    	jne    c00052ab <f_expand+0x156>
c000517d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005181:	85 f6                	test   esi,esi
c0005183:	0f 85 22 01 00 00    	jne    c00052ab <f_expand+0x156>
c0005189:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000518e:	75 0a                	jne    c000519a <f_expand+0x45>
c0005190:	be 07 00 00 00       	mov    esi,0x7
c0005195:	e9 11 01 00 00       	jmp    c00052ab <f_expand+0x156>
c000519a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000519e:	75 f0                	jne    c0005190 <f_expand+0x3b>
c00051a0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00051a4:	74 ea                	je     c0005190 <f_expand+0x3b>
c00051a6:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00051aa:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00051ae:	c1 e1 09             	shl    ecx,0x9
c00051b1:	8d 41 ff             	lea    eax,[ecx-0x1]
c00051b4:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00051b8:	0f 95 c0             	setne  al
c00051bb:	31 d2                	xor    edx,edx
c00051bd:	0f b6 c0             	movzx  eax,al
c00051c0:	89 c7                	mov    edi,eax
c00051c2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051c6:	f7 f1                	div    ecx
c00051c8:	01 f8                	add    eax,edi
c00051ca:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051d1:	83 ff 01             	cmp    edi,0x1
c00051d4:	76 05                	jbe    c00051db <f_expand+0x86>
c00051d6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051d9:	77 05                	ja     c00051e0 <f_expand+0x8b>
c00051db:	bf 02 00 00 00       	mov    edi,0x2
c00051e0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051e3:	89 fd                	mov    ebp,edi
c00051e5:	31 c9                	xor    ecx,ecx
c00051e7:	89 ea                	mov    edx,ebp
c00051e9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051ef:	45                   	inc    ebp
c00051f0:	e8 3c df ff ff       	call   c0003131 <get_fat.isra.2>
c00051f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051fd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005200:	77 05                	ja     c0005207 <f_expand+0xb2>
c0005202:	bd 02 00 00 00       	mov    ebp,0x2
c0005207:	83 f8 01             	cmp    eax,0x1
c000520a:	74 20                	je     c000522c <f_expand+0xd7>
c000520c:	83 f8 ff             	cmp    eax,0xffffffff
c000520f:	74 22                	je     c0005233 <f_expand+0xde>
c0005211:	85 c0                	test   eax,eax
c0005213:	75 09                	jne    c000521e <f_expand+0xc9>
c0005215:	41                   	inc    ecx
c0005216:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000521a:	75 07                	jne    c0005223 <f_expand+0xce>
c000521c:	eb 1c                	jmp    c000523a <f_expand+0xe5>
c000521e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005221:	31 c9                	xor    ecx,ecx
c0005223:	39 fd                	cmp    ebp,edi
c0005225:	75 c0                	jne    c00051e7 <f_expand+0x92>
c0005227:	e9 64 ff ff ff       	jmp    c0005190 <f_expand+0x3b>
c000522c:	be 02 00 00 00       	mov    esi,0x2
c0005231:	eb 78                	jmp    c00052ab <f_expand+0x156>
c0005233:	be 01 00 00 00       	mov    esi,0x1
c0005238:	eb 71                	jmp    c00052ab <f_expand+0x156>
c000523a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000523f:	74 2b                	je     c000526c <f_expand+0x117>
c0005241:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005244:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005248:	85 ed                	test   ebp,ebp
c000524a:	74 24                	je     c0005270 <f_expand+0x11b>
c000524c:	83 c9 ff             	or     ecx,0xffffffff
c000524f:	83 fd 01             	cmp    ebp,0x1
c0005252:	74 03                	je     c0005257 <f_expand+0x102>
c0005254:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005257:	89 fa                	mov    edx,edi
c0005259:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000525d:	e8 59 d4 ff ff       	call   c00026bb <put_fat>
c0005262:	85 c0                	test   eax,eax
c0005264:	75 43                	jne    c00052a9 <f_expand+0x154>
c0005266:	89 f8                	mov    eax,edi
c0005268:	4d                   	dec    ebp
c0005269:	47                   	inc    edi
c000526a:	eb dc                	jmp    c0005248 <f_expand+0xf3>
c000526c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000526f:	48                   	dec    eax
c0005270:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005274:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005279:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000527c:	74 2d                	je     c00052ab <f_expand+0x156>
c000527e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005282:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005285:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005288:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000528c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000528f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005292:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005295:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005298:	39 c8                	cmp    eax,ecx
c000529a:	77 0f                	ja     c00052ab <f_expand+0x156>
c000529c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00052a0:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c00052a4:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00052a7:	eb 02                	jmp    c00052ab <f_expand+0x156>
c00052a9:	89 c6                	mov    esi,eax
c00052ab:	83 c4 2c             	add    esp,0x2c
c00052ae:	89 f0                	mov    eax,esi
c00052b0:	5b                   	pop    ebx
c00052b1:	5e                   	pop    esi
c00052b2:	5f                   	pop    edi
c00052b3:	5d                   	pop    ebp
c00052b4:	c3                   	ret    

c00052b5 <f_mkfs>:
c00052b5:	55                   	push   ebp
c00052b6:	57                   	push   edi
c00052b7:	bf 0b 00 00 00       	mov    edi,0xb
c00052bc:	56                   	push   esi
c00052bd:	53                   	push   ebx
c00052be:	83 ec 4c             	sub    esp,0x4c
c00052c1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052c5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052c9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052cd:	e8 9c ce ff ff       	call   c000216e <get_ldnumber>
c00052d2:	85 c0                	test   eax,eax
c00052d4:	0f 88 a6 07 00 00    	js     c0005a80 <f_mkfs+0x7cb>
c00052da:	8b 14 85 e0 fe 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0120]
c00052e1:	85 d2                	test   edx,edx
c00052e3:	74 03                	je     c00052e8 <f_mkfs+0x33>
c00052e5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052e8:	85 db                	test   ebx,ebx
c00052ea:	75 05                	jne    c00052f1 <f_mkfs+0x3c>
c00052ec:	bb e0 cf 01 c0       	mov    ebx,0xc001cfe0
c00052f1:	83 ec 0c             	sub    esp,0xc
c00052f4:	0f b6 c0             	movzx  eax,al
c00052f7:	bf 03 00 00 00       	mov    edi,0x3
c00052fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005300:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005304:	e8 e8 c9 ff ff       	call   c0001cf1 <disk_initialize>
c0005309:	83 c4 10             	add    esp,0x10
c000530c:	a8 01                	test   al,0x1
c000530e:	0f 85 6c 07 00 00    	jne    c0005a80 <f_mkfs+0x7cb>
c0005314:	bf 0a 00 00 00       	mov    edi,0xa
c0005319:	a8 04                	test   al,0x4
c000531b:	0f 85 5f 07 00 00    	jne    c0005a80 <f_mkfs+0x7cb>
c0005321:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005324:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005328:	85 c0                	test   eax,eax
c000532a:	75 20                	jne    c000534c <f_mkfs+0x97>
c000532c:	51                   	push   ecx
c000532d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005331:	50                   	push   eax
c0005332:	6a 03                	push   0x3
c0005334:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005338:	e8 e3 c9 ff ff       	call   c0001d20 <disk_ioctl>
c000533d:	83 c4 10             	add    esp,0x10
c0005340:	85 c0                	test   eax,eax
c0005342:	74 08                	je     c000534c <f_mkfs+0x97>
c0005344:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000534c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005350:	8d 42 ff             	lea    eax,[edx-0x1]
c0005353:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005358:	77 04                	ja     c000535e <f_mkfs+0xa9>
c000535a:	85 c2                	test   edx,eax
c000535c:	74 08                	je     c0005366 <f_mkfs+0xb1>
c000535e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005366:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005369:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000536d:	48                   	dec    eax
c000536e:	3c 01                	cmp    al,0x1
c0005370:	76 05                	jbe    c0005377 <f_mkfs+0xc2>
c0005372:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005377:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000537a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000537e:	48                   	dec    eax
c000537f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005384:	77 07                	ja     c000538d <f_mkfs+0xd8>
c0005386:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000538b:	74 08                	je     c0005395 <f_mkfs+0xe0>
c000538d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005395:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005398:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000539e:	77 07                	ja     c00053a7 <f_mkfs+0xf2>
c00053a0:	8d 47 ff             	lea    eax,[edi-0x1]
c00053a3:	85 f8                	test   eax,edi
c00053a5:	74 02                	je     c00053a9 <f_mkfs+0xf4>
c00053a7:	31 ff                	xor    edi,edi
c00053a9:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c00053b1:	77 0a                	ja     c00053bd <f_mkfs+0x108>
c00053b3:	bf 11 00 00 00       	mov    edi,0x11
c00053b8:	e9 c3 06 00 00       	jmp    c0005a80 <f_mkfs+0x7cb>
c00053bd:	8a 1b                	mov    bl,BYTE PTR [ebx]
c00053bf:	89 ee                	mov    esi,ebp
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	75 1b                	jne    c00053e0 <f_mkfs+0x12b>
c00053c5:	83 ec 0c             	sub    esp,0xc
c00053c8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053cc:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053d1:	50                   	push   eax
c00053d2:	e8 b5 06 00 00       	call   c0005a8c <ff_memalloc>
c00053d7:	83 c4 10             	add    esp,0x10
c00053da:	89 c6                	mov    esi,eax
c00053dc:	85 c0                	test   eax,eax
c00053de:	74 d3                	je     c00053b3 <f_mkfs+0xfe>
c00053e0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053e8:	52                   	push   edx
c00053e9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053ed:	50                   	push   eax
c00053ee:	6a 01                	push   0x1
c00053f0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053f4:	e8 27 c9 ff ff       	call   c0001d20 <disk_ioctl>
c00053f9:	83 c4 10             	add    esp,0x10
c00053fc:	85 c0                	test   eax,eax
c00053fe:	0f 85 25 06 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005404:	88 d8                	mov    al,bl
c0005406:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000540e:	24 08                	and    al,0x8
c0005410:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0005414:	75 18                	jne    c000542e <f_mkfs+0x179>
c0005416:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000541a:	83 f8 3f             	cmp    eax,0x3f
c000541d:	76 0f                	jbe    c000542e <f_mkfs+0x179>
c000541f:	83 e8 3f             	sub    eax,0x3f
c0005422:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000542a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000542e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005432:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005436:	83 f8 7f             	cmp    eax,0x7f
c0005439:	0f 86 52 02 00 00    	jbe    c0005691 <f_mkfs+0x3dc>
c000543f:	b9 80 00 00 00       	mov    ecx,0x80
c0005444:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000544a:	77 05                	ja     c0005451 <f_mkfs+0x19c>
c000544c:	89 f9                	mov    ecx,edi
c000544e:	c1 e9 09             	shr    ecx,0x9
c0005451:	88 d8                	mov    al,bl
c0005453:	83 e0 01             	and    eax,0x1
c0005456:	80 e3 02             	and    bl,0x2
c0005459:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000545d:	74 0a                	je     c0005469 <f_mkfs+0x1b4>
c000545f:	84 c0                	test   al,al
c0005461:	0f 84 4c 01 00 00    	je     c00055b3 <f_mkfs+0x2fe>
c0005467:	eb 38                	jmp    c00054a1 <f_mkfs+0x1ec>
c0005469:	bf 13 00 00 00       	mov    edi,0x13
c000546e:	84 c0                	test   al,al
c0005470:	75 2f                	jne    c00054a1 <f_mkfs+0x1ec>
c0005472:	e9 c9 05 00 00       	jmp    c0005a40 <f_mkfs+0x78b>
c0005477:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000547c:	0f 85 08 02 00 00    	jne    c000568a <f_mkfs+0x3d5>
c0005482:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005487:	0f 86 e1 01 00 00    	jbe    c000566e <f_mkfs+0x3b9>
c000548d:	85 c9                	test   ecx,ecx
c000548f:	0f 85 bd 05 00 00    	jne    c0005a52 <f_mkfs+0x79d>
c0005495:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005498:	83 f9 40             	cmp    ecx,0x40
c000549b:	0f 87 c1 05 00 00    	ja     c0005a62 <f_mkfs+0x7ad>
c00054a1:	89 cf                	mov    edi,ecx
c00054a3:	85 c9                	test   ecx,ecx
c00054a5:	75 1d                	jne    c00054c4 <f_mkfs+0x20f>
c00054a7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00054ab:	ba c0 cf 01 c0       	mov    edx,0xc001cfc0
c00054b0:	c1 eb 0c             	shr    ebx,0xc
c00054b3:	bf 01 00 00 00       	mov    edi,0x1
c00054b8:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00054bb:	66 85 c0             	test   ax,ax
c00054be:	0f 85 5f 01 00 00    	jne    c0005623 <f_mkfs+0x36e>
c00054c4:	31 d2                	xor    edx,edx
c00054c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054ca:	f7 f7                	div    edi
c00054cc:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054d1:	0f 86 5e 01 00 00    	jbe    c0005635 <f_mkfs+0x380>
c00054d7:	83 c0 02             	add    eax,0x2
c00054da:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054df:	01 c0                	add    eax,eax
c00054e1:	05 ff 01 00 00       	add    eax,0x1ff
c00054e6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ee:	c1 e8 09             	shr    eax,0x9
c00054f1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054f9:	c1 e0 05             	shl    eax,0x5
c00054fc:	c1 e8 09             	shr    eax,0x9
c00054ff:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0005503:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0005508:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000550c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005510:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c0005514:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000551c:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005521:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005525:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000552d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005531:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005535:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005539:	f7 d8                	neg    eax
c000553b:	21 c3                	and    ebx,eax
c000553d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005541:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005546:	0f 85 fc 00 00 00    	jne    c0005648 <f_mkfs+0x393>
c000554c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005550:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005554:	89 f8                	mov    eax,edi
c0005556:	c1 e0 04             	shl    eax,0x4
c0005559:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000555d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005561:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005565:	0f 82 26 01 00 00    	jb     c0005691 <f_mkfs+0x3dc>
c000556b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000556f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005573:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005577:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000557c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005580:	29 d0                	sub    eax,edx
c0005582:	31 d2                	xor    edx,edx
c0005584:	f7 f7                	div    edi
c0005586:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000558b:	89 c3                	mov    ebx,eax
c000558d:	0f 85 e4 fe ff ff    	jne    c0005477 <f_mkfs+0x1c2>
c0005593:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005598:	0f 87 02 01 00 00    	ja     c00056a0 <f_mkfs+0x3eb>
c000559e:	85 c9                	test   ecx,ecx
c00055a0:	0f 85 eb 00 00 00    	jne    c0005691 <f_mkfs+0x3dc>
c00055a6:	83 ff 01             	cmp    edi,0x1
c00055a9:	0f 86 e2 00 00 00    	jbe    c0005691 <f_mkfs+0x3dc>
c00055af:	89 f9                	mov    ecx,edi
c00055b1:	d1 e9                	shr    ecx,1
c00055b3:	89 cb                	mov    ebx,ecx
c00055b5:	85 c9                	test   ecx,ecx
c00055b7:	75 26                	jne    c00055df <f_mkfs+0x32a>
c00055b9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00055bd:	ba d0 cf 01 c0       	mov    edx,0xc001cfd0
c00055c2:	c1 eb 11             	shr    ebx,0x11
c00055c5:	b9 01 00 00 00       	mov    ecx,0x1
c00055ca:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055cd:	66 85 c0             	test   ax,ax
c00055d0:	74 0b                	je     c00055dd <f_mkfs+0x328>
c00055d2:	83 c2 02             	add    edx,0x2
c00055d5:	39 d8                	cmp    eax,ebx
c00055d7:	77 04                	ja     c00055dd <f_mkfs+0x328>
c00055d9:	01 c9                	add    ecx,ecx
c00055db:	eb ed                	jmp    c00055ca <f_mkfs+0x315>
c00055dd:	31 db                	xor    ebx,ebx
c00055df:	31 d2                	xor    edx,edx
c00055e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055e5:	f7 f1                	div    ecx
c00055e7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ee:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055f3:	c1 ea 09             	shr    edx,0x9
c00055f6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055fb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055ff:	0f 87 8c 00 00 00    	ja     c0005691 <f_mkfs+0x3dc>
c0005605:	89 cf                	mov    edi,ecx
c0005607:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000560f:	89 d9                	mov    ecx,ebx
c0005611:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c0005619:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c000561e:	e9 e0 fe ff ff       	jmp    c0005503 <f_mkfs+0x24e>
c0005623:	83 c2 02             	add    edx,0x2
c0005626:	39 d8                	cmp    eax,ebx
c0005628:	0f 87 96 fe ff ff    	ja     c00054c4 <f_mkfs+0x20f>
c000562e:	01 ff                	add    edi,edi
c0005630:	e9 83 fe ff ff       	jmp    c00054b8 <f_mkfs+0x203>
c0005635:	8d 04 40             	lea    eax,[eax+eax*2]
c0005638:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000563d:	40                   	inc    eax
c000563e:	d1 e8                	shr    eax,1
c0005640:	83 c0 03             	add    eax,0x3
c0005643:	e9 99 fe ff ff       	jmp    c00054e1 <f_mkfs+0x22c>
c0005648:	31 d2                	xor    edx,edx
c000564a:	89 d8                	mov    eax,ebx
c000564c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005650:	85 d2                	test   edx,edx
c0005652:	74 09                	je     c000565d <f_mkfs+0x3a8>
c0005654:	4b                   	dec    ebx
c0005655:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005659:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000565d:	89 d8                	mov    eax,ebx
c000565f:	31 d2                	xor    edx,edx
c0005661:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005665:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005669:	e9 e6 fe ff ff       	jmp    c0005554 <f_mkfs+0x29f>
c000566e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005673:	77 2b                	ja     c00056a0 <f_mkfs+0x3eb>
c0005675:	85 c9                	test   ecx,ecx
c0005677:	75 18                	jne    c0005691 <f_mkfs+0x3dc>
c0005679:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000567c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005682:	0f 86 19 fe ff ff    	jbe    c00054a1 <f_mkfs+0x1ec>
c0005688:	eb 07                	jmp    c0005691 <f_mkfs+0x3dc>
c000568a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000568f:	76 0a                	jbe    c000569b <f_mkfs+0x3e6>
c0005691:	bf 0e 00 00 00       	mov    edi,0xe
c0005696:	e9 a5 03 00 00       	jmp    c0005a40 <f_mkfs+0x78b>
c000569b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056a0:	31 d2                	xor    edx,edx
c00056a2:	b9 00 02 00 00       	mov    ecx,0x200
c00056a7:	89 f0                	mov    eax,esi
c00056a9:	e8 d2 c6 ff ff       	call   c0001d80 <mem_set>
c00056ae:	b9 0b 00 00 00       	mov    ecx,0xb
c00056b3:	ba 72 cf 01 c0       	mov    edx,0xc001cf72
c00056b8:	89 f0                	mov    eax,esi
c00056ba:	e8 ac c6 ff ff       	call   c0001d6b <mem_cpy>
c00056bf:	8d 46 0b             	lea    eax,[esi+0xb]
c00056c2:	ba 00 02 00 00       	mov    edx,0x200
c00056c7:	e8 98 c6 ff ff       	call   c0001d64 <st_word>
c00056cc:	89 f8                	mov    eax,edi
c00056ce:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056d3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056d6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056d9:	e8 86 c6 ff ff       	call   c0001d64 <st_word>
c00056de:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056e2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056e7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ea:	75 08                	jne    c00056f4 <f_mkfs+0x43f>
c00056ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f8:	8d 46 11             	lea    eax,[esi+0x11]
c00056fb:	e8 64 c6 ff ff       	call   c0001d64 <st_word>
c0005700:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005704:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000570a:	77 0a                	ja     c0005716 <f_mkfs+0x461>
c000570c:	8d 46 13             	lea    eax,[esi+0x13]
c000570f:	e8 50 c6 ff ff       	call   c0001d64 <st_word>
c0005714:	eb 08                	jmp    c000571e <f_mkfs+0x469>
c0005716:	8d 46 20             	lea    eax,[esi+0x20]
c0005719:	e8 4a c6 ff ff       	call   c0001d68 <st_dword>
c000571e:	8d 46 18             	lea    eax,[esi+0x18]
c0005721:	ba 3f 00 00 00       	mov    edx,0x3f
c0005726:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000572a:	e8 35 c6 ff ff       	call   c0001d64 <st_word>
c000572f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005732:	ba ff 00 00 00       	mov    edx,0xff
c0005737:	e8 28 c6 ff ff       	call   c0001d64 <st_word>
c000573c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000573f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005743:	e8 20 c6 ff ff       	call   c0001d68 <st_dword>
c0005748:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000574d:	75 57                	jne    c00057a6 <f_mkfs+0x4f1>
c000574f:	8d 46 43             	lea    eax,[esi+0x43]
c0005752:	ba 00 00 21 50       	mov    edx,0x50210000
c0005757:	e8 0c c6 ff ff       	call   c0001d68 <st_dword>
c000575c:	8d 46 24             	lea    eax,[esi+0x24]
c000575f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005763:	e8 00 c6 ff ff       	call   c0001d68 <st_dword>
c0005768:	8d 46 2c             	lea    eax,[esi+0x2c]
c000576b:	ba 02 00 00 00       	mov    edx,0x2
c0005770:	e8 f3 c5 ff ff       	call   c0001d68 <st_dword>
c0005775:	8d 46 30             	lea    eax,[esi+0x30]
c0005778:	ba 01 00 00 00       	mov    edx,0x1
c000577d:	e8 e2 c5 ff ff       	call   c0001d64 <st_word>
c0005782:	8d 46 32             	lea    eax,[esi+0x32]
c0005785:	ba 06 00 00 00       	mov    edx,0x6
c000578a:	e8 d5 c5 ff ff       	call   c0001d64 <st_word>
c000578f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005793:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005797:	8d 46 47             	lea    eax,[esi+0x47]
c000579a:	b9 13 00 00 00       	mov    ecx,0x13
c000579f:	ba 7e cf 01 c0       	mov    edx,0xc001cf7e
c00057a4:	eb 2f                	jmp    c00057d5 <f_mkfs+0x520>
c00057a6:	8d 46 27             	lea    eax,[esi+0x27]
c00057a9:	ba 00 00 21 50       	mov    edx,0x50210000
c00057ae:	e8 b5 c5 ff ff       	call   c0001d68 <st_dword>
c00057b3:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c00057b8:	8d 46 16             	lea    eax,[esi+0x16]
c00057bb:	e8 a4 c5 ff ff       	call   c0001d64 <st_word>
c00057c0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057c4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057c8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057cb:	b9 13 00 00 00       	mov    ecx,0x13
c00057d0:	ba 92 cf 01 c0       	mov    edx,0xc001cf92
c00057d5:	e8 91 c5 ff ff       	call   c0001d6b <mem_cpy>
c00057da:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057e0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057e9:	e8 76 c5 ff ff       	call   c0001d64 <st_word>
c00057ee:	6a 01                	push   0x1
c00057f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057f4:	56                   	push   esi
c00057f5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057f9:	e8 0c c5 ff ff       	call   c0001d0a <disk_write>
c00057fe:	83 c4 10             	add    esp,0x10
c0005801:	85 c0                	test   eax,eax
c0005803:	0f 85 20 02 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005809:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000580e:	0f 85 98 00 00 00    	jne    c00058ac <f_mkfs+0x5f7>
c0005814:	6a 01                	push   0x1
c0005816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000581a:	83 c0 06             	add    eax,0x6
c000581d:	50                   	push   eax
c000581e:	56                   	push   esi
c000581f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005823:	e8 e2 c4 ff ff       	call   c0001d0a <disk_write>
c0005828:	b9 00 02 00 00       	mov    ecx,0x200
c000582d:	31 d2                	xor    edx,edx
c000582f:	89 f0                	mov    eax,esi
c0005831:	e8 4a c5 ff ff       	call   c0001d80 <mem_set>
c0005836:	ba 52 52 61 41       	mov    edx,0x41615252
c000583b:	89 f0                	mov    eax,esi
c000583d:	e8 26 c5 ff ff       	call   c0001d68 <st_dword>
c0005842:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005848:	ba 72 72 41 61       	mov    edx,0x61417272
c000584d:	e8 16 c5 ff ff       	call   c0001d68 <st_dword>
c0005852:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005855:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000585b:	e8 08 c5 ff ff       	call   c0001d68 <st_dword>
c0005860:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005866:	ba 02 00 00 00       	mov    edx,0x2
c000586b:	e8 f8 c4 ff ff       	call   c0001d68 <st_dword>
c0005870:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005875:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000587b:	e8 e4 c4 ff ff       	call   c0001d64 <st_word>
c0005880:	6a 01                	push   0x1
c0005882:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005886:	83 c0 07             	add    eax,0x7
c0005889:	50                   	push   eax
c000588a:	56                   	push   esi
c000588b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000588f:	e8 76 c4 ff ff       	call   c0001d0a <disk_write>
c0005894:	83 c4 20             	add    esp,0x20
c0005897:	6a 01                	push   0x1
c0005899:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000589d:	40                   	inc    eax
c000589e:	50                   	push   eax
c000589f:	56                   	push   esi
c00058a0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00058a4:	e8 61 c4 ff ff       	call   c0001d0a <disk_write>
c00058a9:	83 c4 10             	add    esp,0x10
c00058ac:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00058b0:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c00058b4:	c1 e8 09             	shr    eax,0x9
c00058b7:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00058bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058c1:	31 d2                	xor    edx,edx
c00058c3:	31 db                	xor    ebx,ebx
c00058c5:	89 f0                	mov    eax,esi
c00058c7:	e8 b4 c4 ff ff       	call   c0001d80 <mem_set>
c00058cc:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058d1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058d9:	0f 94 c3             	sete   bl
c00058dc:	4b                   	dec    ebx
c00058dd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058e3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ee:	75 21                	jne    c0005911 <f_mkfs+0x65c>
c00058f0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058f5:	89 f0                	mov    eax,esi
c00058f7:	e8 6c c4 ff ff       	call   c0001d68 <st_dword>
c00058fc:	8d 46 04             	lea    eax,[esi+0x4]
c00058ff:	83 ca ff             	or     edx,0xffffffff
c0005902:	e8 61 c4 ff ff       	call   c0001d68 <st_dword>
c0005907:	8d 46 08             	lea    eax,[esi+0x8]
c000590a:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000590f:	eb 04                	jmp    c0005915 <f_mkfs+0x660>
c0005911:	89 da                	mov    edx,ebx
c0005913:	89 f0                	mov    eax,esi
c0005915:	e8 4e c4 ff ff       	call   c0001d68 <st_dword>
c000591a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000591e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005922:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005926:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000592a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000592e:	76 08                	jbe    c0005938 <f_mkfs+0x683>
c0005930:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005934:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005938:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000593c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005940:	56                   	push   esi
c0005941:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005945:	e8 c0 c3 ff ff       	call   c0001d0a <disk_write>
c000594a:	83 c4 10             	add    esp,0x10
c000594d:	85 c0                	test   eax,eax
c000594f:	0f 85 d4 00 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005955:	b9 00 02 00 00       	mov    ecx,0x200
c000595a:	31 d2                	xor    edx,edx
c000595c:	89 f0                	mov    eax,esi
c000595e:	e8 1d c4 ff ff       	call   c0001d80 <mem_set>
c0005963:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005967:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000596b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000596f:	75 b1                	jne    c0005922 <f_mkfs+0x66d>
c0005971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005975:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000597d:	40                   	inc    eax
c000597e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005982:	0f 87 61 ff ff ff    	ja     c00058e9 <f_mkfs+0x634>
c0005988:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000598d:	74 04                	je     c0005993 <f_mkfs+0x6de>
c000598f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005993:	89 fb                	mov    ebx,edi
c0005995:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005999:	76 04                	jbe    c000599f <f_mkfs+0x6ea>
c000599b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000599f:	53                   	push   ebx
c00059a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00059a4:	56                   	push   esi
c00059a5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059a9:	e8 5c c3 ff ff       	call   c0001d0a <disk_write>
c00059ae:	83 c4 10             	add    esp,0x10
c00059b1:	85 c0                	test   eax,eax
c00059b3:	75 74                	jne    c0005a29 <f_mkfs+0x774>
c00059b5:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c00059b9:	29 df                	sub    edi,ebx
c00059bb:	75 d6                	jne    c0005993 <f_mkfs+0x6de>
c00059bd:	b1 0c                	mov    cl,0xc
c00059bf:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059c4:	74 18                	je     c00059de <f_mkfs+0x729>
c00059c6:	b1 06                	mov    cl,0x6
c00059c8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059d0:	77 0c                	ja     c00059de <f_mkfs+0x729>
c00059d2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059d7:	0f 94 c1             	sete   cl
c00059da:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059de:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059e3:	75 2d                	jne    c0005a12 <f_mkfs+0x75d>
c00059e5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059e9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059f1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059f5:	0f b6 c9             	movzx  ecx,cl
c00059f8:	83 ec 0c             	sub    esp,0xc
c00059fb:	56                   	push   esi
c00059fc:	8d 54 24 48          	lea    edx,[esp+0x48]
c0005a00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a04:	e8 4c d3 ff ff       	call   c0002d55 <create_partition>
c0005a09:	83 c4 10             	add    esp,0x10
c0005a0c:	89 c7                	mov    edi,eax
c0005a0e:	85 c0                	test   eax,eax
c0005a10:	75 2e                	jne    c0005a40 <f_mkfs+0x78b>
c0005a12:	31 ff                	xor    edi,edi
c0005a14:	50                   	push   eax
c0005a15:	6a 00                	push   0x0
c0005a17:	6a 00                	push   0x0
c0005a19:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005a1d:	e8 fe c2 ff ff       	call   c0001d20 <disk_ioctl>
c0005a22:	83 c4 10             	add    esp,0x10
c0005a25:	85 c0                	test   eax,eax
c0005a27:	74 17                	je     c0005a40 <f_mkfs+0x78b>
c0005a29:	85 ed                	test   ebp,ebp
c0005a2b:	75 0c                	jne    c0005a39 <f_mkfs+0x784>
c0005a2d:	83 ec 0c             	sub    esp,0xc
c0005a30:	56                   	push   esi
c0005a31:	e8 6e 00 00 00       	call   c0005aa4 <ff_memfree>
c0005a36:	83 c4 10             	add    esp,0x10
c0005a39:	bf 01 00 00 00       	mov    edi,0x1
c0005a3e:	eb 40                	jmp    c0005a80 <f_mkfs+0x7cb>
c0005a40:	85 ed                	test   ebp,ebp
c0005a42:	75 3c                	jne    c0005a80 <f_mkfs+0x7cb>
c0005a44:	83 ec 0c             	sub    esp,0xc
c0005a47:	56                   	push   esi
c0005a48:	e8 57 00 00 00       	call   c0005aa4 <ff_memfree>
c0005a4d:	83 c4 10             	add    esp,0x10
c0005a50:	eb 2e                	jmp    c0005a80 <f_mkfs+0x7cb>
c0005a52:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a57:	0f 85 56 fb ff ff    	jne    c00055b3 <f_mkfs+0x2fe>
c0005a5d:	e9 2f fc ff ff       	jmp    c0005691 <f_mkfs+0x3dc>
c0005a62:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a67:	0f 85 4c fb ff ff    	jne    c00055b9 <f_mkfs+0x304>
c0005a6d:	89 cf                	mov    edi,ecx
c0005a6f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a75:	0f 86 49 fa ff ff    	jbe    c00054c4 <f_mkfs+0x20f>
c0005a7b:	e9 11 fc ff ff       	jmp    c0005691 <f_mkfs+0x3dc>
c0005a80:	83 c4 4c             	add    esp,0x4c
c0005a83:	89 f8                	mov    eax,edi
c0005a85:	5b                   	pop    ebx
c0005a86:	5e                   	pop    esi
c0005a87:	5f                   	pop    edi
c0005a88:	5d                   	pop    ebp
c0005a89:	c3                   	ret    
c0005a8a:	66 90                	xchg   ax,ax

c0005a8c <ff_memalloc>:
c0005a8c:	83 ec 0c             	sub    esp,0xc
c0005a8f:	83 ec 0c             	sub    esp,0xc
c0005a92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a96:	e8 7e 23 00 00       	call   c0007e19 <malloc>
c0005a9b:	83 c4 10             	add    esp,0x10
c0005a9e:	83 c4 0c             	add    esp,0xc
c0005aa1:	c3                   	ret    
c0005aa2:	66 90                	xchg   ax,ax

c0005aa4 <ff_memfree>:
c0005aa4:	83 ec 0c             	sub    esp,0xc
c0005aa7:	83 ec 0c             	sub    esp,0xc
c0005aaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005aae:	e8 76 23 00 00       	call   c0007e29 <free>
c0005ab3:	83 c4 10             	add    esp,0x10
c0005ab6:	90                   	nop
c0005ab7:	83 c4 0c             	add    esp,0xc
c0005aba:	c3                   	ret    
c0005abb:	90                   	nop

c0005abc <ff_uni2oem>:
c0005abc:	83 ec 14             	sub    esp,0x14
c0005abf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ac3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005ac7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ace:	c7 44 24 0c c0 d3 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d3c0
c0005ad6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005adb:	77 0b                	ja     c0005ae8 <ff_uni2oem+0x2c>
c0005add:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ae1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ae6:	eb 68                	jmp    c0005b50 <ff_uni2oem+0x94>
c0005ae8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005af0:	77 5e                	ja     c0005b50 <ff_uni2oem+0x94>
c0005af2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005af8:	75 56                	jne    c0005b50 <ff_uni2oem+0x94>
c0005afa:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005b01:	eb 0d                	jmp    c0005b10 <ff_uni2oem+0x54>
c0005b03:	90                   	nop
c0005b04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b09:	40                   	inc    eax
c0005b0a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b0f:	90                   	nop
c0005b10:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005b16:	77 24                	ja     c0005b3c <ff_uni2oem+0x80>
c0005b18:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b1d:	25 ff ff 00 00       	and    eax,0xffff
c0005b22:	01 c0                	add    eax,eax
c0005b24:	89 c2                	mov    edx,eax
c0005b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b2a:	01 d0                	add    eax,edx
c0005b2c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b2f:	25 ff ff 00 00       	and    eax,0xffff
c0005b34:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b38:	75 ca                	jne    c0005b04 <ff_uni2oem+0x48>
c0005b3a:	66 90                	xchg   ax,ax
c0005b3c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b41:	83 e8 80             	sub    eax,0xffffff80
c0005b44:	25 ff 00 00 00       	and    eax,0xff
c0005b49:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b4e:	66 90                	xchg   ax,ax
c0005b50:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b55:	83 c4 14             	add    esp,0x14
c0005b58:	c3                   	ret    
c0005b59:	8d 76 00             	lea    esi,[esi+0x0]

c0005b5c <ff_oem2uni>:
c0005b5c:	83 ec 18             	sub    esp,0x18
c0005b5f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b67:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b6c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b70:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b77:	c7 44 24 10 c0 d3 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d3c0
c0005b7f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b85:	77 0d                	ja     c0005b94 <ff_oem2uni+0x38>
c0005b87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b8b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b90:	eb 36                	jmp    c0005bc8 <ff_oem2uni+0x6c>
c0005b92:	66 90                	xchg   ax,ax
c0005b94:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b9a:	75 2c                	jne    c0005bc8 <ff_oem2uni+0x6c>
c0005b9c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005ba3:	77 23                	ja     c0005bc8 <ff_oem2uni+0x6c>
c0005ba5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005ba9:	25 ff ff 00 00       	and    eax,0xffff
c0005bae:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005bb3:	01 c0                	add    eax,eax
c0005bb5:	89 c2                	mov    edx,eax
c0005bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005bbb:	01 d0                	add    eax,edx
c0005bbd:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bc0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005bc8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bcd:	83 c4 18             	add    esp,0x18
c0005bd0:	c3                   	ret    
c0005bd1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bd4 <ff_wtoupper>:
c0005bd4:	83 ec 10             	sub    esp,0x10
c0005bd7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bdf:	0f 87 77 01 00 00    	ja     c0005d5c <ff_wtoupper+0x188>
c0005be5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005be9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bee:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bf5:	77 09                	ja     c0005c00 <ff_wtoupper+0x2c>
c0005bf7:	b8 c0 d1 01 c0       	mov    eax,0xc001d1c0
c0005bfc:	eb 0a                	jmp    c0005c08 <ff_wtoupper+0x34>
c0005bfe:	66 90                	xchg   ax,ax
c0005c00:	b8 00 d1 01 c0       	mov    eax,0xc001d100
c0005c05:	8d 76 00             	lea    esi,[esi+0x0]
c0005c08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005c0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c10:	8d 50 02             	lea    edx,[eax+0x2]
c0005c13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c17:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c1a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005c1f:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c25:	0f 84 21 01 00 00    	je     c0005d4c <ff_wtoupper+0x178>
c0005c2b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c30:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c35:	0f 82 11 01 00 00    	jb     c0005d4c <ff_wtoupper+0x178>
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c42:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c46:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c49:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c4e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c53:	66 c1 e8 08          	shr    ax,0x8
c0005c57:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c5c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c63:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c68:	31 d2                	xor    edx,edx
c0005c6a:	66 89 c2             	mov    dx,ax
c0005c6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c71:	31 c9                	xor    ecx,ecx
c0005c73:	66 89 c1             	mov    cx,ax
c0005c76:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c7b:	25 ff ff 00 00       	and    eax,0xffff
c0005c80:	01 c8                	add    eax,ecx
c0005c82:	39 c2                	cmp    edx,eax
c0005c84:	0f 8d 9a 00 00 00    	jge    c0005d24 <ff_wtoupper+0x150>
c0005c8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c8e:	25 ff ff 00 00       	and    eax,0xffff
c0005c93:	83 f8 08             	cmp    eax,0x8
c0005c96:	0f 87 ac 00 00 00    	ja     c0005d48 <ff_wtoupper+0x174>
c0005c9c:	8b 04 85 c0 d0 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe2f40]
c0005ca3:	ff e0                	jmp    eax
c0005ca5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ca8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cad:	31 d2                	xor    edx,edx
c0005caf:	66 89 c2             	mov    dx,ax
c0005cb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005cb6:	25 ff ff 00 00       	and    eax,0xffff
c0005cbb:	29 c2                	sub    edx,eax
c0005cbd:	89 d0                	mov    eax,edx
c0005cbf:	01 c0                	add    eax,eax
c0005cc1:	89 c2                	mov    edx,eax
c0005cc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc7:	01 d0                	add    eax,edx
c0005cc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ccc:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cd1:	eb 4d                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cd3:	90                   	nop
c0005cd4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cd9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cdd:	83 e0 01             	and    eax,0x1
c0005ce0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005ce5:	eb 39                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005ce7:	90                   	nop
c0005ce8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cee:	eb 30                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cf6:	eb 28                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cf8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cfe:	eb 20                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d00:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005d06:	eb 18                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d08:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005d0e:	eb 10                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d10:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005d16:	eb 08                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d18:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005d1f:	90                   	nop
c0005d20:	eb 26                	jmp    c0005d48 <ff_wtoupper+0x174>
c0005d22:	66 90                	xchg   ax,ax
c0005d24:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d2a:	0f 85 dc fe ff ff    	jne    c0005c0c <ff_wtoupper+0x38>
c0005d30:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d35:	25 ff ff 00 00       	and    eax,0xffff
c0005d3a:	01 c0                	add    eax,eax
c0005d3c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d40:	e9 c7 fe ff ff       	jmp    c0005c0c <ff_wtoupper+0x38>
c0005d45:	8d 76 00             	lea    esi,[esi+0x0]
c0005d48:	90                   	nop
c0005d49:	8d 76 00             	lea    esi,[esi+0x0]
c0005d4c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d51:	25 ff ff 00 00       	and    eax,0xffff
c0005d56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d5a:	66 90                	xchg   ax,ax
c0005d5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d60:	83 c4 10             	add    esp,0x10
c0005d63:	c3                   	ret    

c0005d64 <utf2ucs>:
c0005d64:	57                   	push   edi
c0005d65:	56                   	push   esi
c0005d66:	53                   	push   ebx
c0005d67:	89 d7                	mov    edi,edx
c0005d69:	47                   	inc    edi
c0005d6a:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0005d6d:	0f be cb             	movsx  ecx,bl
c0005d70:	89 ce                	mov    esi,ecx
c0005d72:	c1 fe 08             	sar    esi,0x8
c0005d75:	89 f2                	mov    edx,esi
c0005d77:	88 10                	mov    BYTE PTR [eax],dl
c0005d79:	83 c0 02             	add    eax,0x2
c0005d7c:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005d7f:	85 c9                	test   ecx,ecx
c0005d81:	75 e6                	jne    c0005d69 <utf2ucs+0x5>
c0005d83:	5b                   	pop    ebx
c0005d84:	5e                   	pop    esi
c0005d85:	5f                   	pop    edi
c0005d86:	c3                   	ret    

c0005d87 <ucs2utfn>:
c0005d87:	57                   	push   edi
c0005d88:	56                   	push   esi
c0005d89:	53                   	push   ebx
c0005d8a:	89 cb                	mov    ebx,ecx
c0005d8c:	d1 eb                	shr    ebx,1
c0005d8e:	83 f9 01             	cmp    ecx,0x1
c0005d91:	76 17                	jbe    c0005daa <ucs2utfn+0x23>
c0005d93:	8d 7b ff             	lea    edi,[ebx-0x1]
c0005d96:	0f be 32             	movsx  esi,BYTE PTR [edx]
c0005d99:	c1 e6 08             	shl    esi,0x8
c0005d9c:	8d 4a 02             	lea    ecx,[edx+0x2]
c0005d9f:	0f be 52 01          	movsx  edx,BYTE PTR [edx+0x1]
c0005da3:	09 f2                	or     edx,esi
c0005da5:	83 fa 3b             	cmp    edx,0x3b
c0005da8:	75 40                	jne    c0005dea <ucs2utfn+0x63>
c0005daa:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005dad:	5b                   	pop    ebx
c0005dae:	5e                   	pop    esi
c0005daf:	5f                   	pop    edi
c0005db0:	c3                   	ret    
c0005db1:	81 fa ff 07 00 00    	cmp    edx,0x7ff
c0005db7:	7f 3d                	jg     c0005df6 <ucs2utfn+0x6f>
c0005db9:	89 d6                	mov    esi,edx
c0005dbb:	c1 fe 06             	sar    esi,0x6
c0005dbe:	83 ce c0             	or     esi,0xffffffc0
c0005dc1:	89 f3                	mov    ebx,esi
c0005dc3:	88 18                	mov    BYTE PTR [eax],bl
c0005dc5:	83 e2 3f             	and    edx,0x3f
c0005dc8:	83 ca 80             	or     edx,0xffffff80
c0005dcb:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0005dce:	8d 40 02             	lea    eax,[eax+0x2]
c0005dd1:	85 ff                	test   edi,edi
c0005dd3:	74 d5                	je     c0005daa <ucs2utfn+0x23>
c0005dd5:	4f                   	dec    edi
c0005dd6:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0005dd9:	c1 e2 08             	shl    edx,0x8
c0005ddc:	83 c1 02             	add    ecx,0x2
c0005ddf:	0f be 71 ff          	movsx  esi,BYTE PTR [ecx-0x1]
c0005de3:	09 f2                	or     edx,esi
c0005de5:	83 fa 3b             	cmp    edx,0x3b
c0005de8:	74 c0                	je     c0005daa <ucs2utfn+0x23>
c0005dea:	83 fa 7f             	cmp    edx,0x7f
c0005ded:	7f c2                	jg     c0005db1 <ucs2utfn+0x2a>
c0005def:	88 10                	mov    BYTE PTR [eax],dl
c0005df1:	8d 40 01             	lea    eax,[eax+0x1]
c0005df4:	eb db                	jmp    c0005dd1 <ucs2utfn+0x4a>
c0005df6:	89 d6                	mov    esi,edx
c0005df8:	c1 fe 0c             	sar    esi,0xc
c0005dfb:	83 ce e0             	or     esi,0xffffffe0
c0005dfe:	89 f3                	mov    ebx,esi
c0005e00:	88 18                	mov    BYTE PTR [eax],bl
c0005e02:	89 d6                	mov    esi,edx
c0005e04:	c1 fe 06             	sar    esi,0x6
c0005e07:	83 e6 3f             	and    esi,0x3f
c0005e0a:	83 ce 80             	or     esi,0xffffff80
c0005e0d:	89 f3                	mov    ebx,esi
c0005e0f:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0005e12:	83 e2 3f             	and    edx,0x3f
c0005e15:	83 ca 80             	or     edx,0xffffff80
c0005e18:	88 50 02             	mov    BYTE PTR [eax+0x2],dl
c0005e1b:	8d 40 03             	lea    eax,[eax+0x3]
c0005e1e:	eb b1                	jmp    c0005dd1 <ucs2utfn+0x4a>

c0005e20 <isjoliet>:
c0005e20:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005e23:	74 06                	je     c0005e2b <isjoliet+0xb>
c0005e25:	b8 00 00 00 00       	mov    eax,0x0
c0005e2a:	c3                   	ret    
c0005e2b:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005e2f:	74 06                	je     c0005e37 <isjoliet+0x17>
c0005e31:	b8 00 00 00 00       	mov    eax,0x0
c0005e36:	c3                   	ret    
c0005e37:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005e3a:	3c 43                	cmp    al,0x43
c0005e3c:	74 0f                	je     c0005e4d <isjoliet+0x2d>
c0005e3e:	3c 45                	cmp    al,0x45
c0005e40:	74 11                	je     c0005e53 <isjoliet+0x33>
c0005e42:	3c 40                	cmp    al,0x40
c0005e44:	0f 94 c0             	sete   al
c0005e47:	25 ff 00 00 00       	and    eax,0xff
c0005e4c:	c3                   	ret    
c0005e4d:	b8 02 00 00 00       	mov    eax,0x2
c0005e52:	c3                   	ret    
c0005e53:	b8 03 00 00 00       	mov    eax,0x3
c0005e58:	c3                   	ret    

c0005e59 <htohl_32>:
c0005e59:	31 d2                	xor    edx,edx
c0005e5b:	8a 50 01             	mov    dl,BYTE PTR [eax+0x1]
c0005e5e:	c1 e2 08             	shl    edx,0x8
c0005e61:	31 c9                	xor    ecx,ecx
c0005e63:	8a 48 02             	mov    cl,BYTE PTR [eax+0x2]
c0005e66:	c1 e1 10             	shl    ecx,0x10
c0005e69:	09 ca                	or     edx,ecx
c0005e6b:	31 c9                	xor    ecx,ecx
c0005e6d:	8a 08                	mov    cl,BYTE PTR [eax]
c0005e6f:	09 ca                	or     edx,ecx
c0005e71:	31 c9                	xor    ecx,ecx
c0005e73:	8a 48 03             	mov    cl,BYTE PTR [eax+0x3]
c0005e76:	89 c8                	mov    eax,ecx
c0005e78:	c1 e0 18             	shl    eax,0x18
c0005e7b:	09 d0                	or     eax,edx
c0005e7d:	c3                   	ret    

c0005e7e <iso_733>:
c0005e7e:	e8 d6 ff ff ff       	call   c0005e59 <htohl_32>
c0005e83:	c3                   	ret    

c0005e84 <bclear_cache>:
c0005e84:	b8 00 00 00 00       	mov    eax,0x0
c0005e89:	8b 14 85 60 fa 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe05a0]
c0005e90:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e96:	8b 14 85 c0 fa 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0540]
c0005e9d:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005ea3:	40                   	inc    eax
c0005ea4:	83 f8 10             	cmp    eax,0x10
c0005ea7:	75 e0                	jne    c0005e89 <bclear_cache+0x5>
c0005ea9:	c3                   	ret    

c0005eaa <bgrad_cache>:
c0005eaa:	83 fa 0e             	cmp    edx,0xe
c0005ead:	77 1c                	ja     c0005ecb <bgrad_cache+0x21>
c0005eaf:	56                   	push   esi
c0005eb0:	53                   	push   ebx
c0005eb1:	8d 14 90             	lea    edx,[eax+edx*4]
c0005eb4:	8b 32                	mov    esi,DWORD PTR [edx]
c0005eb6:	8d 58 3c             	lea    ebx,[eax+0x3c]
c0005eb9:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0005ebc:	89 0a                	mov    DWORD PTR [edx],ecx
c0005ebe:	83 c2 04             	add    edx,0x4
c0005ec1:	39 da                	cmp    edx,ebx
c0005ec3:	75 f4                	jne    c0005eb9 <bgrad_cache+0xf>
c0005ec5:	89 70 3c             	mov    DWORD PTR [eax+0x3c],esi
c0005ec8:	5b                   	pop    ebx
c0005ec9:	5e                   	pop    esi
c0005eca:	c3                   	ret    
c0005ecb:	c3                   	ret    

c0005ecc <bclear>:
c0005ecc:	e8 b3 ff ff ff       	call   c0005e84 <bclear_cache>
c0005ed1:	c3                   	ret    

c0005ed2 <iso_break_all>:
c0005ed2:	b8 10 00 02 c0       	mov    eax,0xc0020010
c0005ed7:	ba 50 09 02 c0       	mov    edx,0xc0020950
c0005edc:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0005ee2:	05 94 00 00 00       	add    eax,0x94
c0005ee7:	39 d0                	cmp    eax,edx
c0005ee9:	75 f1                	jne    c0005edc <iso_break_all+0xa>
c0005eeb:	c3                   	ret    

c0005eec <ucscompare>:
c0005eec:	55                   	push   ebp
c0005eed:	57                   	push   edi
c0005eee:	56                   	push   esi
c0005eef:	53                   	push   ebx
c0005ef0:	83 ec 1c             	sub    esp,0x1c
c0005ef3:	89 d7                	mov    edi,edx
c0005ef5:	85 c9                	test   ecx,ecx
c0005ef7:	0f 8e ab 00 00 00    	jle    c0005fa8 <ucscompare+0xbc>
c0005efd:	89 c5                	mov    ebp,eax
c0005eff:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0005f02:	c1 e0 08             	shl    eax,0x8
c0005f05:	0f be 55 01          	movsx  edx,BYTE PTR [ebp+0x1]
c0005f09:	09 d0                	or     eax,edx
c0005f0b:	0f be 37             	movsx  esi,BYTE PTR [edi]
c0005f0e:	c1 e6 08             	shl    esi,0x8
c0005f11:	0f be 57 01          	movsx  edx,BYTE PTR [edi+0x1]
c0005f15:	09 d6                	or     esi,edx
c0005f17:	83 f8 3b             	cmp    eax,0x3b
c0005f1a:	0f 84 92 00 00 00    	je     c0005fb2 <ucscompare+0xc6>
c0005f20:	49                   	dec    ecx
c0005f21:	83 e1 fe             	and    ecx,0xfffffffe
c0005f24:	83 c1 02             	add    ecx,0x2
c0005f27:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005f2b:	bb 00 00 00 00       	mov    ebx,0x0
c0005f30:	83 ec 0c             	sub    esp,0xc
c0005f33:	50                   	push   eax
c0005f34:	e8 b7 a9 ff ff       	call   c00008f0 <tolower>
c0005f39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005f3d:	89 34 24             	mov    DWORD PTR [esp],esi
c0005f40:	e8 ab a9 ff ff       	call   c00008f0 <tolower>
c0005f45:	83 c4 10             	add    esp,0x10
c0005f48:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0005f4c:	75 6e                	jne    c0005fbc <ucscompare+0xd0>
c0005f4e:	83 c3 02             	add    ebx,0x2
c0005f51:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0005f55:	74 26                	je     c0005f7d <ucscompare+0x91>
c0005f57:	0f be 44 1d 00       	movsx  eax,BYTE PTR [ebp+ebx*1+0x0]
c0005f5c:	c1 e0 08             	shl    eax,0x8
c0005f5f:	0f be 54 1d 01       	movsx  edx,BYTE PTR [ebp+ebx*1+0x1]
c0005f64:	09 d0                	or     eax,edx
c0005f66:	0f be 34 1f          	movsx  esi,BYTE PTR [edi+ebx*1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	0f be 54 1f 01       	movsx  edx,BYTE PTR [edi+ebx*1+0x1]
c0005f72:	09 d6                	or     esi,edx
c0005f74:	83 f8 3b             	cmp    eax,0x3b
c0005f77:	75 b7                	jne    c0005f30 <ucscompare+0x44>
c0005f79:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0005f7d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005f81:	0f be 04 0f          	movsx  eax,BYTE PTR [edi+ecx*1]
c0005f85:	c1 e0 08             	shl    eax,0x8
c0005f88:	0f be 54 0f 01       	movsx  edx,BYTE PTR [edi+ecx*1+0x1]
c0005f8d:	09 d0                	or     eax,edx
c0005f8f:	83 f8 2f             	cmp    eax,0x2f
c0005f92:	74 2f                	je     c0005fc3 <ucscompare+0xd7>
c0005f94:	85 c0                	test   eax,eax
c0005f96:	0f 95 c0             	setne  al
c0005f99:	25 ff 00 00 00       	and    eax,0xff
c0005f9e:	f7 d8                	neg    eax
c0005fa0:	83 c4 1c             	add    esp,0x1c
c0005fa3:	5b                   	pop    ebx
c0005fa4:	5e                   	pop    esi
c0005fa5:	5f                   	pop    edi
c0005fa6:	5d                   	pop    ebp
c0005fa7:	c3                   	ret    
c0005fa8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005fb0:	eb cb                	jmp    c0005f7d <ucscompare+0x91>
c0005fb2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005fba:	eb c1                	jmp    c0005f7d <ucscompare+0x91>
c0005fbc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0005fc1:	eb dd                	jmp    c0005fa0 <ucscompare+0xb4>
c0005fc3:	b8 00 00 00 00       	mov    eax,0x0
c0005fc8:	eb d6                	jmp    c0005fa0 <ucscompare+0xb4>

c0005fca <fncompare>:
c0005fca:	55                   	push   ebp
c0005fcb:	57                   	push   edi
c0005fcc:	56                   	push   esi
c0005fcd:	53                   	push   ebx
c0005fce:	83 ec 1c             	sub    esp,0x1c
c0005fd1:	89 cd                	mov    ebp,ecx
c0005fd3:	85 d2                	test   edx,edx
c0005fd5:	7e 71                	jle    c0006048 <fncompare+0x7e>
c0005fd7:	89 c7                	mov    edi,eax
c0005fd9:	89 d6                	mov    esi,edx
c0005fdb:	8a 00                	mov    al,BYTE PTR [eax]
c0005fdd:	3c 3b                	cmp    al,0x3b
c0005fdf:	74 6e                	je     c000604f <fncompare+0x85>
c0005fe1:	bb 00 00 00 00       	mov    ebx,0x0
c0005fe6:	eb 32                	jmp    c000601a <fncompare+0x50>
c0005fe8:	83 ec 0c             	sub    esp,0xc
c0005feb:	0f be c0             	movsx  eax,al
c0005fee:	50                   	push   eax
c0005fef:	e8 fc a8 ff ff       	call   c00008f0 <tolower>
c0005ff4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ff8:	0f be 44 1d 00       	movsx  eax,BYTE PTR [ebp+ebx*1+0x0]
c0005ffd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006000:	e8 eb a8 ff ff       	call   c00008f0 <tolower>
c0006005:	83 c4 10             	add    esp,0x10
c0006008:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000600c:	75 48                	jne    c0006056 <fncompare+0x8c>
c000600e:	43                   	inc    ebx
c000600f:	39 de                	cmp    esi,ebx
c0006011:	74 19                	je     c000602c <fncompare+0x62>
c0006013:	8a 04 1f             	mov    al,BYTE PTR [edi+ebx*1]
c0006016:	3c 3b                	cmp    al,0x3b
c0006018:	74 12                	je     c000602c <fncompare+0x62>
c000601a:	3c 2e                	cmp    al,0x2e
c000601c:	75 ca                	jne    c0005fe8 <fncompare+0x1e>
c000601e:	8d 56 ff             	lea    edx,[esi-0x1]
c0006021:	39 da                	cmp    edx,ebx
c0006023:	74 07                	je     c000602c <fncompare+0x62>
c0006025:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c000602a:	75 bc                	jne    c0005fe8 <fncompare+0x1e>
c000602c:	8a 44 1d 00          	mov    al,BYTE PTR [ebp+ebx*1+0x0]
c0006030:	3c 2f                	cmp    al,0x2f
c0006032:	74 29                	je     c000605d <fncompare+0x93>
c0006034:	84 c0                	test   al,al
c0006036:	0f 95 c0             	setne  al
c0006039:	25 ff 00 00 00       	and    eax,0xff
c000603e:	f7 d8                	neg    eax
c0006040:	83 c4 1c             	add    esp,0x1c
c0006043:	5b                   	pop    ebx
c0006044:	5e                   	pop    esi
c0006045:	5f                   	pop    edi
c0006046:	5d                   	pop    ebp
c0006047:	c3                   	ret    
c0006048:	bb 00 00 00 00       	mov    ebx,0x0
c000604d:	eb dd                	jmp    c000602c <fncompare+0x62>
c000604f:	bb 00 00 00 00       	mov    ebx,0x0
c0006054:	eb d6                	jmp    c000602c <fncompare+0x62>
c0006056:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000605b:	eb e3                	jmp    c0006040 <fncompare+0x76>
c000605d:	b8 00 00 00 00       	mov    eax,0x0
c0006062:	eb dc                	jmp    c0006040 <fncompare+0x76>

c0006064 <isoReadDiscSector>:
c0006064:	83 ec 0c             	sub    esp,0xc
c0006067:	0f be 05 a0 fa 01 c0 	movsx  eax,BYTE PTR ds:0xc001faa0
c000606e:	50                   	push   eax
c000606f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006073:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006077:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000607b:	e8 b8 18 01 00       	call   c0017938 <isoReadDiscSectorHelper>
c0006080:	83 c4 1c             	add    esp,0x1c
c0006083:	c3                   	ret    

c0006084 <bread_cache>:
c0006084:	55                   	push   ebp
c0006085:	57                   	push   edi
c0006086:	56                   	push   esi
c0006087:	53                   	push   ebx
c0006088:	83 ec 0c             	sub    esp,0xc
c000608b:	89 c6                	mov    esi,eax
c000608d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0006090:	3b 10                	cmp    edx,DWORD PTR [eax]
c0006092:	74 6a                	je     c00060fe <bread_cache+0x7a>
c0006094:	89 d7                	mov    edi,edx
c0006096:	ba 0e 00 00 00       	mov    edx,0xe
c000609b:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c000609e:	39 38                	cmp    DWORD PTR [eax],edi
c00060a0:	74 61                	je     c0006103 <bread_cache+0x7f>
c00060a2:	4a                   	dec    edx
c00060a3:	83 fa ff             	cmp    edx,0xffffffff
c00060a6:	75 f3                	jne    c000609b <bread_cache+0x17>
c00060a8:	8b 06                	mov    eax,DWORD PTR [esi]
c00060aa:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00060ad:	74 69                	je     c0006118 <bread_cache+0x94>
c00060af:	bb 01 00 00 00       	mov    ebx,0x1
c00060b4:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00060b7:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00060ba:	74 0b                	je     c00060c7 <bread_cache+0x43>
c00060bc:	43                   	inc    ebx
c00060bd:	83 fb 10             	cmp    ebx,0x10
c00060c0:	75 f2                	jne    c00060b4 <bread_cache+0x30>
c00060c2:	bb 00 00 00 00       	mov    ebx,0x0
c00060c7:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00060ca:	83 ec 04             	sub    esp,0x4
c00060cd:	6a 01                	push   0x1
c00060cf:	57                   	push   edi
c00060d0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00060d3:	83 c0 04             	add    eax,0x4
c00060d6:	50                   	push   eax
c00060d7:	e8 88 ff ff ff       	call   c0006064 <isoReadDiscSector>
c00060dc:	83 c4 10             	add    esp,0x10
c00060df:	85 c0                	test   eax,eax
c00060e1:	78 2e                	js     c0006111 <bread_cache+0x8d>
c00060e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00060e6:	89 38                	mov    DWORD PTR [eax],edi
c00060e8:	89 da                	mov    edx,ebx
c00060ea:	89 f0                	mov    eax,esi
c00060ec:	e8 b9 fd ff ff       	call   c0005eaa <bgrad_cache>
c00060f1:	b8 0f 00 00 00       	mov    eax,0xf
c00060f6:	83 c4 0c             	add    esp,0xc
c00060f9:	5b                   	pop    ebx
c00060fa:	5e                   	pop    esi
c00060fb:	5f                   	pop    edi
c00060fc:	5d                   	pop    ebp
c00060fd:	c3                   	ret    
c00060fe:	ba 0f 00 00 00       	mov    edx,0xf
c0006103:	89 f0                	mov    eax,esi
c0006105:	e8 a0 fd ff ff       	call   c0005eaa <bgrad_cache>
c000610a:	b8 0f 00 00 00       	mov    eax,0xf
c000610f:	eb e5                	jmp    c00060f6 <bread_cache+0x72>
c0006111:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006116:	eb de                	jmp    c00060f6 <bread_cache+0x72>
c0006118:	bb 00 00 00 00       	mov    ebx,0x0
c000611d:	eb a8                	jmp    c00060c7 <bread_cache+0x43>

c000611f <biread>:
c000611f:	83 ec 0c             	sub    esp,0xc
c0006122:	89 c2                	mov    edx,eax
c0006124:	b8 c0 fa 01 c0       	mov    eax,0xc001fac0
c0006129:	e8 56 ff ff ff       	call   c0006084 <bread_cache>
c000612e:	83 c4 0c             	add    esp,0xc
c0006131:	c3                   	ret    

c0006132 <bdread>:
c0006132:	83 ec 0c             	sub    esp,0xc
c0006135:	89 c2                	mov    edx,eax
c0006137:	b8 60 fa 01 c0       	mov    eax,0xc001fa60
c000613c:	e8 43 ff ff ff       	call   c0006084 <bread_cache>
c0006141:	83 c4 0c             	add    esp,0xc
c0006144:	c3                   	ret    

c0006145 <strnicmp>:
c0006145:	55                   	push   ebp
c0006146:	57                   	push   edi
c0006147:	56                   	push   esi
c0006148:	53                   	push   ebx
c0006149:	83 ec 0c             	sub    esp,0xc
c000614c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006150:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006154:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0006158:	85 ff                	test   edi,edi
c000615a:	74 51                	je     c00061ad <strnicmp+0x68>
c000615c:	8a 03                	mov    al,BYTE PTR [ebx]
c000615e:	84 c0                	test   al,al
c0006160:	74 52                	je     c00061b4 <strnicmp+0x6f>
c0006162:	8a 16                	mov    dl,BYTE PTR [esi]
c0006164:	84 d2                	test   dl,dl
c0006166:	74 53                	je     c00061bb <strnicmp+0x76>
c0006168:	01 df                	add    edi,ebx
c000616a:	eb 32                	jmp    c000619e <strnicmp+0x59>
c000616c:	83 ec 0c             	sub    esp,0xc
c000616f:	0f be c0             	movsx  eax,al
c0006172:	50                   	push   eax
c0006173:	e8 78 a7 ff ff       	call   c00008f0 <tolower>
c0006178:	89 c5                	mov    ebp,eax
c000617a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000617d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006180:	e8 6b a7 ff ff       	call   c00008f0 <tolower>
c0006185:	43                   	inc    ebx
c0006186:	46                   	inc    esi
c0006187:	83 c4 10             	add    esp,0x10
c000618a:	29 c5                	sub    ebp,eax
c000618c:	75 39                	jne    c00061c7 <strnicmp+0x82>
c000618e:	39 fb                	cmp    ebx,edi
c0006190:	74 30                	je     c00061c2 <strnicmp+0x7d>
c0006192:	8a 03                	mov    al,BYTE PTR [ebx]
c0006194:	84 c0                	test   al,al
c0006196:	74 39                	je     c00061d1 <strnicmp+0x8c>
c0006198:	8a 16                	mov    dl,BYTE PTR [esi]
c000619a:	84 d2                	test   dl,dl
c000619c:	74 08                	je     c00061a6 <strnicmp+0x61>
c000619e:	38 d0                	cmp    al,dl
c00061a0:	75 ca                	jne    c000616c <strnicmp+0x27>
c00061a2:	43                   	inc    ebx
c00061a3:	46                   	inc    esi
c00061a4:	eb e8                	jmp    c000618e <strnicmp+0x49>
c00061a6:	bd 00 00 00 00       	mov    ebp,0x0
c00061ab:	eb 1a                	jmp    c00061c7 <strnicmp+0x82>
c00061ad:	bd 00 00 00 00       	mov    ebp,0x0
c00061b2:	eb 13                	jmp    c00061c7 <strnicmp+0x82>
c00061b4:	bd 00 00 00 00       	mov    ebp,0x0
c00061b9:	eb 0c                	jmp    c00061c7 <strnicmp+0x82>
c00061bb:	bd 00 00 00 00       	mov    ebp,0x0
c00061c0:	eb 05                	jmp    c00061c7 <strnicmp+0x82>
c00061c2:	bd 00 00 00 00       	mov    ebp,0x0
c00061c7:	89 e8                	mov    eax,ebp
c00061c9:	83 c4 0c             	add    esp,0xc
c00061cc:	5b                   	pop    ebx
c00061cd:	5e                   	pop    esi
c00061ce:	5f                   	pop    edi
c00061cf:	5d                   	pop    ebp
c00061d0:	c3                   	ret    
c00061d1:	bd 00 00 00 00       	mov    ebp,0x0
c00061d6:	eb ef                	jmp    c00061c7 <strnicmp+0x82>

c00061d8 <find_object>:
c00061d8:	55                   	push   ebp
c00061d9:	57                   	push   edi
c00061da:	56                   	push   esi
c00061db:	53                   	push   ebx
c00061dc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00061e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00061e6:	89 d3                	mov    ebx,edx
c00061e8:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00061ec:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c00061f3:	83 3d f4 08 02 c0 00 	cmp    DWORD PTR ds:0xc00208f4,0x0
c00061fa:	75 14                	jne    c0006210 <find_object+0x38>
c00061fc:	85 f6                	test   esi,esi
c00061fe:	0f 8e f0 01 00 00    	jle    c00063f4 <find_object+0x21c>
c0006204:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006207:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000620b:	e9 9f 01 00 00       	jmp    c00063af <find_object+0x1d7>
c0006210:	89 c2                	mov    edx,eax
c0006212:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006216:	e8 49 fb ff ff       	call   c0005d64 <utf2ucs>
c000621b:	eb df                	jmp    c00061fc <find_object+0x24>
c000621d:	31 d2                	xor    edx,edx
c000621f:	8a 55 20             	mov    dl,BYTE PTR [ebp+0x20]
c0006222:	89 c6                	mov    esi,eax
c0006224:	81 e6 ff 00 00 00    	and    esi,0xff
c000622a:	29 d6                	sub    esi,edx
c000622c:	8d 5c 15 21          	lea    ebx,[ebp+edx*1+0x21]
c0006230:	f6 45 20 01          	test   BYTE PTR [ebp+0x20],0x1
c0006234:	74 3d                	je     c0006273 <find_object+0x9b>
c0006236:	83 ee 21             	sub    esi,0x21
c0006239:	83 fe 03             	cmp    esi,0x3
c000623c:	7e 08                	jle    c0006246 <find_object+0x6e>
c000623e:	8a 43 03             	mov    al,BYTE PTR [ebx+0x3]
c0006241:	48                   	dec    eax
c0006242:	3c 01                	cmp    al,0x1
c0006244:	76 69                	jbe    c00062af <find_object+0xd7>
c0006246:	31 d2                	xor    edx,edx
c0006248:	8a 55 20             	mov    dl,BYTE PTR [ebp+0x20]
c000624b:	8d 45 21             	lea    eax,[ebp+0x21]
c000624e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006252:	e8 73 fd ff ff       	call   c0005fca <fncompare>
c0006257:	85 c0                	test   eax,eax
c0006259:	0f 85 b1 00 00 00    	jne    c0006310 <find_object+0x138>
c000625f:	31 c0                	xor    eax,eax
c0006261:	8a 45 19             	mov    al,BYTE PTR [ebp+0x19]
c0006264:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0006268:	0f 85 a2 00 00 00    	jne    c0006310 <find_object+0x138>
c000626e:	e9 02 01 00 00       	jmp    c0006375 <find_object+0x19d>
c0006273:	43                   	inc    ebx
c0006274:	83 ee 22             	sub    esi,0x22
c0006277:	eb c0                	jmp    c0006239 <find_object+0x61>
c0006279:	0f be 7b 02          	movsx  edi,BYTE PTR [ebx+0x2]
c000627d:	83 ef 05             	sub    edi,0x5
c0006280:	83 ec 04             	sub    esp,0x4
c0006283:	57                   	push   edi
c0006284:	8d 43 05             	lea    eax,[ebx+0x5]
c0006287:	50                   	push   eax
c0006288:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000628c:	50                   	push   eax
c000628d:	e8 be a3 ff ff       	call   c0000650 <strncpy>
c0006292:	c6 44 3c 30 00       	mov    BYTE PTR [esp+edi*1+0x30],0x0
c0006297:	83 c4 10             	add    esp,0x10
c000629a:	0f be 43 02          	movsx  eax,BYTE PTR [ebx+0x2]
c000629e:	29 c6                	sub    esi,eax
c00062a0:	01 c3                	add    ebx,eax
c00062a2:	83 fe 03             	cmp    esi,0x3
c00062a5:	7e 21                	jle    c00062c8 <find_object+0xf0>
c00062a7:	8a 43 03             	mov    al,BYTE PTR [ebx+0x3]
c00062aa:	48                   	dec    eax
c00062ab:	3c 01                	cmp    al,0x1
c00062ad:	77 19                	ja     c00062c8 <find_object+0xf0>
c00062af:	83 ec 04             	sub    esp,0x4
c00062b2:	6a 02                	push   0x2
c00062b4:	68 c0 d4 01 c0       	push   0xc001d4c0
c00062b9:	53                   	push   ebx
c00062ba:	e8 c1 a4 ff ff       	call   c0000780 <strncmp>
c00062bf:	83 c4 10             	add    esp,0x10
c00062c2:	85 c0                	test   eax,eax
c00062c4:	75 d4                	jne    c000629a <find_object+0xc2>
c00062c6:	eb b1                	jmp    c0006279 <find_object+0xa1>
c00062c8:	85 ff                	test   edi,edi
c00062ca:	0f 8e 76 ff ff ff    	jle    c0006246 <find_object+0x6e>
c00062d0:	83 ec 08             	sub    esp,0x8
c00062d3:	6a 2f                	push   0x2f
c00062d5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00062d9:	57                   	push   edi
c00062da:	e8 71 a4 ff ff       	call   c0000750 <strchr>
c00062df:	83 c4 10             	add    esp,0x10
c00062e2:	85 c0                	test   eax,eax
c00062e4:	0f 84 98 00 00 00    	je     c0006382 <find_object+0x1aa>
c00062ea:	29 f8                	sub    eax,edi
c00062ec:	83 ec 04             	sub    esp,0x4
c00062ef:	50                   	push   eax
c00062f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00062f4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00062f8:	50                   	push   eax
c00062f9:	e8 47 fe ff ff       	call   c0006145 <strnicmp>
c00062fe:	83 c4 10             	add    esp,0x10
c0006301:	85 c0                	test   eax,eax
c0006303:	75 0b                	jne    c0006310 <find_object+0x138>
c0006305:	31 c0                	xor    eax,eax
c0006307:	8a 45 19             	mov    al,BYTE PTR [ebp+0x19]
c000630a:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000630e:	74 65                	je     c0006375 <find_object+0x19d>
c0006310:	31 c0                	xor    eax,eax
c0006312:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006315:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006319:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000631d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006323:	7f 71                	jg     c0006396 <find_object+0x1be>
c0006325:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006329:	39 c1                	cmp    ecx,eax
c000632b:	7d 69                	jge    c0006396 <find_object+0x1be>
c000632d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006331:	8b 04 85 c0 fa 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0540]
c0006338:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000633c:	8d 6c 10 04          	lea    ebp,[eax+edx*1+0x4]
c0006340:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006343:	84 c0                	test   al,al
c0006345:	74 4f                	je     c0006396 <find_object+0x1be>
c0006347:	8b 3d f4 08 02 c0    	mov    edi,DWORD PTR ds:0xc00208f4
c000634d:	85 ff                	test   edi,edi
c000634f:	0f 84 c8 fe ff ff    	je     c000621d <find_object+0x45>
c0006355:	31 c9                	xor    ecx,ecx
c0006357:	8a 4d 20             	mov    cl,BYTE PTR [ebp+0x20]
c000635a:	8d 45 21             	lea    eax,[ebp+0x21]
c000635d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006361:	e8 86 fb ff ff       	call   c0005eec <ucscompare>
c0006366:	85 c0                	test   eax,eax
c0006368:	75 a6                	jne    c0006310 <find_object+0x138>
c000636a:	31 c0                	xor    eax,eax
c000636c:	8a 45 19             	mov    al,BYTE PTR [ebp+0x19]
c000636f:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0006373:	75 9b                	jne    c0006310 <find_object+0x138>
c0006375:	89 e8                	mov    eax,ebp
c0006377:	81 c4 2c 01 00 00    	add    esp,0x12c
c000637d:	5b                   	pop    ebx
c000637e:	5e                   	pop    esi
c000637f:	5f                   	pop    edi
c0006380:	5d                   	pop    ebp
c0006381:	c3                   	ret    
c0006382:	83 ec 0c             	sub    esp,0xc
c0006385:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0006389:	e8 d2 a1 ff ff       	call   c0000560 <strlen>
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	e9 56 ff ff ff       	jmp    c00062ec <find_object+0x114>
c0006396:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000639a:	81 ac 24 40 01 00 00 00 08 00 00 	sub    DWORD PTR [esp+0x140],0x800
c00063a5:	83 bc 24 40 01 00 00 00 	cmp    DWORD PTR [esp+0x140],0x0
c00063ad:	7e 3e                	jle    c00063ed <find_object+0x215>
c00063af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063b3:	e8 67 fd ff ff       	call   c000611f <biread>
c00063b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00063bc:	85 c0                	test   eax,eax
c00063be:	78 3e                	js     c00063fe <find_object+0x226>
c00063c0:	8b 94 24 40 01 00 00 	mov    edx,DWORD PTR [esp+0x140]
c00063c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00063cb:	85 d2                	test   edx,edx
c00063cd:	7e c7                	jle    c0006396 <find_object+0x1be>
c00063cf:	8b 04 85 c0 fa 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0540]
c00063d6:	8d 68 04             	lea    ebp,[eax+0x4]
c00063d9:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00063dc:	84 c0                	test   al,al
c00063de:	74 b6                	je     c0006396 <find_object+0x1be>
c00063e0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00063e8:	e9 5a ff ff ff       	jmp    c0006347 <find_object+0x16f>
c00063ed:	bd 00 00 00 00       	mov    ebp,0x0
c00063f2:	eb 81                	jmp    c0006375 <find_object+0x19d>
c00063f4:	bd 00 00 00 00       	mov    ebp,0x0
c00063f9:	e9 77 ff ff ff       	jmp    c0006375 <find_object+0x19d>
c00063fe:	bd 00 00 00 00       	mov    ebp,0x0
c0006403:	e9 6d ff ff ff       	jmp    c0006375 <find_object+0x19d>

c0006408 <find_object_path>:
c0006408:	55                   	push   ebp
c0006409:	57                   	push   edi
c000640a:	56                   	push   esi
c000640b:	53                   	push   ebx
c000640c:	83 ec 1c             	sub    esp,0x1c
c000640f:	89 c6                	mov    esi,eax
c0006411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006415:	89 cf                	mov    edi,ecx
c0006417:	eb 03                	jmp    c000641c <find_object_path+0x14>
c0006419:	8d 73 01             	lea    esi,[ebx+0x1]
c000641c:	83 ec 08             	sub    esp,0x8
c000641f:	6a 2f                	push   0x2f
c0006421:	56                   	push   esi
c0006422:	e8 29 a3 ff ff       	call   c0000750 <strchr>
c0006427:	89 c3                	mov    ebx,eax
c0006429:	83 c4 10             	add    esp,0x10
c000642c:	85 c0                	test   eax,eax
c000642e:	74 33                	je     c0006463 <find_object_path+0x5b>
c0006430:	39 de                	cmp    esi,ebx
c0006432:	74 e5                	je     c0006419 <find_object_path+0x11>
c0006434:	8d 47 0a             	lea    eax,[edi+0xa]
c0006437:	e8 42 fa ff ff       	call   c0005e7e <iso_733>
c000643c:	89 c5                	mov    ebp,eax
c000643e:	8d 47 02             	lea    eax,[edi+0x2]
c0006441:	e8 38 fa ff ff       	call   c0005e7e <iso_733>
c0006446:	83 ec 0c             	sub    esp,0xc
c0006449:	55                   	push   ebp
c000644a:	89 c1                	mov    ecx,eax
c000644c:	ba 01 00 00 00       	mov    edx,0x1
c0006451:	89 f0                	mov    eax,esi
c0006453:	e8 80 fd ff ff       	call   c00061d8 <find_object>
c0006458:	89 c7                	mov    edi,eax
c000645a:	83 c4 10             	add    esp,0x10
c000645d:	85 c0                	test   eax,eax
c000645f:	75 b8                	jne    c0006419 <find_object_path+0x11>
c0006461:	eb 0e                	jmp    c0006471 <find_object_path+0x69>
c0006463:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006466:	75 11                	jne    c0006479 <find_object_path+0x71>
c0006468:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000646d:	74 32                	je     c00064a1 <find_object_path+0x99>
c000646f:	89 f8                	mov    eax,edi
c0006471:	83 c4 1c             	add    esp,0x1c
c0006474:	5b                   	pop    ebx
c0006475:	5e                   	pop    esi
c0006476:	5f                   	pop    edi
c0006477:	5d                   	pop    ebp
c0006478:	c3                   	ret    
c0006479:	8d 47 0a             	lea    eax,[edi+0xa]
c000647c:	e8 fd f9 ff ff       	call   c0005e7e <iso_733>
c0006481:	89 c3                	mov    ebx,eax
c0006483:	8d 47 02             	lea    eax,[edi+0x2]
c0006486:	e8 f3 f9 ff ff       	call   c0005e7e <iso_733>
c000648b:	83 ec 0c             	sub    esp,0xc
c000648e:	53                   	push   ebx
c000648f:	89 c1                	mov    ecx,eax
c0006491:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006495:	89 f0                	mov    eax,esi
c0006497:	e8 3c fd ff ff       	call   c00061d8 <find_object>
c000649c:	83 c4 10             	add    esp,0x10
c000649f:	eb d0                	jmp    c0006471 <find_object_path+0x69>
c00064a1:	b8 00 00 00 00       	mov    eax,0x0
c00064a6:	eb c9                	jmp    c0006471 <find_object_path+0x69>

c00064a8 <stricmp>:
c00064a8:	55                   	push   ebp
c00064a9:	57                   	push   edi
c00064aa:	56                   	push   esi
c00064ab:	53                   	push   ebx
c00064ac:	83 ec 0c             	sub    esp,0xc
c00064af:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00064b3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00064b7:	46                   	inc    esi
c00064b8:	47                   	inc    edi
c00064b9:	0f b6 6f ff          	movzx  ebp,BYTE PTR [edi-0x1]
c00064bd:	81 e5 ff 00 00 00    	and    ebp,0xff
c00064c3:	83 ec 0c             	sub    esp,0xc
c00064c6:	31 c0                	xor    eax,eax
c00064c8:	8a 46 ff             	mov    al,BYTE PTR [esi-0x1]
c00064cb:	50                   	push   eax
c00064cc:	e8 ff a3 ff ff       	call   c00008d0 <toupper>
c00064d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064d4:	e8 17 a4 ff ff       	call   c00008f0 <tolower>
c00064d9:	89 c3                	mov    ebx,eax
c00064db:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00064de:	e8 ed a3 ff ff       	call   c00008d0 <toupper>
c00064e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e6:	e8 05 a4 ff ff       	call   c00008f0 <tolower>
c00064eb:	83 c4 10             	add    esp,0x10
c00064ee:	39 c3                	cmp    ebx,eax
c00064f0:	75 04                	jne    c00064f6 <stricmp+0x4e>
c00064f2:	85 db                	test   ebx,ebx
c00064f4:	75 c1                	jne    c00064b7 <stricmp+0xf>
c00064f6:	29 c3                	sub    ebx,eax
c00064f8:	89 d8                	mov    eax,ebx
c00064fa:	83 c4 0c             	add    esp,0xc
c00064fd:	5b                   	pop    ebx
c00064fe:	5e                   	pop    esi
c00064ff:	5f                   	pop    edi
c0006500:	5d                   	pop    ebp
c0006501:	c3                   	ret    

c0006502 <iso_open>:
c0006502:	55                   	push   ebp
c0006503:	57                   	push   edi
c0006504:	56                   	push   esi
c0006505:	53                   	push   ebx
c0006506:	83 ec 0c             	sub    esp,0xc
c0006509:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000650e:	0f 95 c0             	setne  al
c0006511:	25 ff 00 00 00       	and    eax,0xff
c0006516:	89 c7                	mov    edi,eax
c0006518:	b9 c0 08 02 c0       	mov    ecx,0xc00208c0
c000651d:	89 c2                	mov    edx,eax
c000651f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006523:	e8 e0 fe ff ff       	call   c0006408 <find_object_path>
c0006528:	85 c0                	test   eax,eax
c000652a:	0f 84 93 00 00 00    	je     c00065c3 <iso_open+0xc1>
c0006530:	89 c6                	mov    esi,eax
c0006532:	83 3d 80 ff 01 c0 00 	cmp    DWORD PTR ds:0xc001ff80,0x0
c0006539:	0f 84 92 00 00 00    	je     c00065d1 <iso_open+0xcf>
c000653f:	ba 14 00 02 c0       	mov    edx,0xc0020014
c0006544:	bb 01 00 00 00       	mov    ebx,0x1
c0006549:	83 3a 00             	cmp    DWORD PTR [edx],0x0
c000654c:	74 13                	je     c0006561 <iso_open+0x5f>
c000654e:	43                   	inc    ebx
c000654f:	81 c2 94 00 00 00    	add    edx,0x94
c0006555:	83 fb 10             	cmp    ebx,0x10
c0006558:	75 ef                	jne    c0006549 <iso_open+0x47>
c000655a:	bb ff ff ff ff       	mov    ebx,0xffffffff
c000655f:	eb 58                	jmp    c00065b9 <iso_open+0xb7>
c0006561:	8d 04 db             	lea    eax,[ebx+ebx*8]
c0006564:	8d 04 83             	lea    eax,[ebx+eax*4]
c0006567:	c7 04 85 80 ff 01 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffe0080],0xffffffff
c0006572:	83 fb 0f             	cmp    ebx,0xf
c0006575:	7f 53                	jg     c00065ca <iso_open+0xc8>
c0006577:	8d 46 02             	lea    eax,[esi+0x2]
c000657a:	e8 ff f8 ff ff       	call   c0005e7e <iso_733>
c000657f:	8d 14 db             	lea    edx,[ebx+ebx*8]
c0006582:	8d 14 93             	lea    edx,[ebx+edx*4]
c0006585:	c1 e2 02             	shl    edx,0x2
c0006588:	8d aa 80 ff 01 c0    	lea    ebp,[edx-0x3ffe0080]
c000658e:	89 82 80 ff 01 c0    	mov    DWORD PTR [edx-0x3ffe0080],eax
c0006594:	89 ba 84 ff 01 c0    	mov    DWORD PTR [edx-0x3ffe007c],edi
c000659a:	c7 82 88 ff 01 c0 00 00 00 00 	mov    DWORD PTR [edx-0x3ffe0078],0x0
c00065a4:	8d 46 0a             	lea    eax,[esi+0xa]
c00065a7:	e8 d2 f8 ff ff       	call   c0005e7e <iso_733>
c00065ac:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00065af:	c7 85 90 00 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0x90],0x0
c00065b9:	89 d8                	mov    eax,ebx
c00065bb:	83 c4 0c             	add    esp,0xc
c00065be:	5b                   	pop    ebx
c00065bf:	5e                   	pop    esi
c00065c0:	5f                   	pop    edi
c00065c1:	5d                   	pop    ebp
c00065c2:	c3                   	ret    
c00065c3:	bb ff ff ff ff       	mov    ebx,0xffffffff
c00065c8:	eb ef                	jmp    c00065b9 <iso_open+0xb7>
c00065ca:	bb ff ff ff ff       	mov    ebx,0xffffffff
c00065cf:	eb e8                	jmp    c00065b9 <iso_open+0xb7>
c00065d1:	c7 05 80 ff 01 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc001ff80,0xffffffff
c00065db:	bb 00 00 00 00       	mov    ebx,0x0
c00065e0:	eb 95                	jmp    c0006577 <iso_open+0x75>

c00065e2 <iso_close>:
c00065e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065e6:	83 f8 0f             	cmp    eax,0xf
c00065e9:	7f 11                	jg     c00065fc <iso_close+0x1a>
c00065eb:	8d 14 c0             	lea    edx,[eax+eax*8]
c00065ee:	8d 04 90             	lea    eax,[eax+edx*4]
c00065f1:	c7 04 85 80 ff 01 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffe0080],0x0
c00065fc:	c3                   	ret    

c00065fd <iso_read>:
c00065fd:	55                   	push   ebp
c00065fe:	57                   	push   edi
c00065ff:	56                   	push   esi
c0006600:	53                   	push   ebx
c0006601:	83 ec 1c             	sub    esp,0x1c
c0006604:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0006608:	83 fd 0f             	cmp    ebp,0xf
c000660b:	0f 8f ba 01 00 00    	jg     c00067cb <iso_read+0x1ce>
c0006611:	8d 44 ed 00          	lea    eax,[ebp+ebp*8+0x0]
c0006615:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c0006619:	83 3c 85 80 ff 01 c0 00 	cmp    DWORD PTR [eax*4-0x3ffe0080],0x0
c0006621:	0f 84 b0 01 00 00    	je     c00067d7 <iso_read+0x1da>
c0006627:	8d 44 ed 00          	lea    eax,[ebp+ebp*8+0x0]
c000662b:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c000662f:	8b 04 85 10 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfff0]
c0006636:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000663a:	85 c0                	test   eax,eax
c000663c:	0f 85 a1 01 00 00    	jne    c00067e3 <iso_read+0x1e6>
c0006642:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0006647:	0f 84 71 01 00 00    	je     c00067be <iso_read+0x1c1>
c000664d:	8d 44 ed 00          	lea    eax,[ebp+ebp*8+0x0]
c0006651:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c0006655:	8d 14 85 80 ff 01 c0 	lea    edx,[eax*4-0x3ffe0080]
c000665c:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c000665f:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0006662:	29 c2                	sub    edx,eax
c0006664:	89 d1                	mov    ecx,edx
c0006666:	3b 54 24 38          	cmp    edx,DWORD PTR [esp+0x38]
c000666a:	76 04                	jbe    c0006670 <iso_read+0x73>
c000666c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006670:	85 c9                	test   ecx,ecx
c0006672:	0f 84 42 01 00 00    	je     c00067ba <iso_read+0x1bd>
c0006678:	8d 1c ed 00 00 00 00 	lea    ebx,[ebp*8+0x0]
c000667f:	e9 b7 00 00 00       	jmp    c000673b <iso_read+0x13e>
c0006684:	8d 91 ff 07 00 00    	lea    edx,[ecx+0x7ff]
c000668a:	e9 e9 00 00 00       	jmp    c0006778 <iso_read+0x17b>
c000668f:	ba 20 00 00 00       	mov    edx,0x20
c0006694:	e9 e2 00 00 00       	jmp    c000677b <iso_read+0x17e>
c0006699:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000669d:	39 ca                	cmp    edx,ecx
c000669f:	7e 04                	jle    c00066a5 <iso_read+0xa8>
c00066a1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00066a5:	8d 14 2b             	lea    edx,[ebx+ebp*1]
c00066a8:	8d 54 95 00          	lea    edx,[ebp+edx*4+0x0]
c00066ac:	c1 e8 0b             	shr    eax,0xb
c00066af:	03 04 95 80 ff 01 c0 	add    eax,DWORD PTR [edx*4-0x3ffe0080]
c00066b6:	e8 77 fa ff ff       	call   c0006132 <bdread>
c00066bb:	85 c0                	test   eax,eax
c00066bd:	0f 88 2c 01 00 00    	js     c00067ef <iso_read+0x1f2>
c00066c3:	8b 14 85 60 fa 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe05a0]
c00066ca:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00066cd:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c00066d1:	8b 04 85 88 ff 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0078]
c00066d8:	25 ff 07 00 00       	and    eax,0x7ff
c00066dd:	8d 74 02 04          	lea    esi,[edx+eax*1+0x4]
c00066e1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00066e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066eb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00066ef:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c00066f3:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00066f6:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c00066fa:	8d 14 85 80 ff 01 c0 	lea    edx,[eax*4-0x3ffe0080]
c0006701:	89 f8                	mov    eax,edi
c0006703:	03 42 08             	add    eax,DWORD PTR [edx+0x8]
c0006706:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006709:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c000670d:	29 7c 24 38          	sub    DWORD PTR [esp+0x38],edi
c0006711:	0f 84 a7 00 00 00    	je     c00067be <iso_read+0x1c1>
c0006717:	8d 14 2b             	lea    edx,[ebx+ebp*1]
c000671a:	8d 54 95 00          	lea    edx,[ebp+edx*4+0x0]
c000671e:	8b 14 95 8c ff 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0074]
c0006725:	29 c2                	sub    edx,eax
c0006727:	89 d1                	mov    ecx,edx
c0006729:	3b 54 24 38          	cmp    edx,DWORD PTR [esp+0x38]
c000672d:	76 04                	jbe    c0006733 <iso_read+0x136>
c000672f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006733:	85 c9                	test   ecx,ecx
c0006735:	0f 84 83 00 00 00    	je     c00067be <iso_read+0x1c1>
c000673b:	89 c6                	mov    esi,eax
c000673d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006743:	ba 00 08 00 00       	mov    edx,0x800
c0006748:	29 f2                	sub    edx,esi
c000674a:	81 fa 00 08 00 00    	cmp    edx,0x800
c0006750:	0f 85 43 ff ff ff    	jne    c0006699 <iso_read+0x9c>
c0006756:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000675c:	0f 8e 37 ff ff ff    	jle    c0006699 <iso_read+0x9c>
c0006762:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006768:	0f 8f 21 ff ff ff    	jg     c000668f <iso_read+0x92>
c000676e:	89 ca                	mov    edx,ecx
c0006770:	85 c9                	test   ecx,ecx
c0006772:	0f 88 0c ff ff ff    	js     c0006684 <iso_read+0x87>
c0006778:	c1 fa 0b             	sar    edx,0xb
c000677b:	89 d6                	mov    esi,edx
c000677d:	c1 e6 0b             	shl    esi,0xb
c0006780:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0006784:	83 ec 04             	sub    esp,0x4
c0006787:	52                   	push   edx
c0006788:	8d 14 2b             	lea    edx,[ebx+ebp*1]
c000678b:	8d 54 95 00          	lea    edx,[ebp+edx*4+0x0]
c000678f:	c1 e8 0b             	shr    eax,0xb
c0006792:	03 04 95 80 ff 01 c0 	add    eax,DWORD PTR [edx*4-0x3ffe0080]
c0006799:	50                   	push   eax
c000679a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000679e:	e8 c1 f8 ff ff       	call   c0006064 <isoReadDiscSector>
c00067a3:	83 c4 10             	add    esp,0x10
c00067a6:	85 c0                	test   eax,eax
c00067a8:	0f 8f 3d ff ff ff    	jg     c00066eb <iso_read+0xee>
c00067ae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067b3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067b8:	eb 09                	jmp    c00067c3 <iso_read+0x1c6>
c00067ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00067be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00067c2:	99                   	cdq    
c00067c3:	83 c4 1c             	add    esp,0x1c
c00067c6:	5b                   	pop    ebx
c00067c7:	5e                   	pop    esi
c00067c8:	5f                   	pop    edi
c00067c9:	5d                   	pop    ebp
c00067ca:	c3                   	ret    
c00067cb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067d0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067d5:	eb ec                	jmp    c00067c3 <iso_read+0x1c6>
c00067d7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067dc:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067e1:	eb e0                	jmp    c00067c3 <iso_read+0x1c6>
c00067e3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067e8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067ed:	eb d4                	jmp    c00067c3 <iso_read+0x1c6>
c00067ef:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067f4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067f9:	eb c8                	jmp    c00067c3 <iso_read+0x1c6>

c00067fb <iso_seek>:
c00067fb:	53                   	push   ebx
c00067fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006800:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006804:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006808:	83 f8 0f             	cmp    eax,0xf
c000680b:	0f 8f a4 00 00 00    	jg     c00068b5 <iso_seek+0xba>
c0006811:	8d 1c c0             	lea    ebx,[eax+eax*8]
c0006814:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0006817:	83 3c 9d 80 ff 01 c0 00 	cmp    DWORD PTR [ebx*4-0x3ffe0080],0x0
c000681f:	0f 84 9c 00 00 00    	je     c00068c1 <iso_seek+0xc6>
c0006825:	8d 1c c0             	lea    ebx,[eax+eax*8]
c0006828:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000682b:	83 3c 9d 10 00 02 c0 00 	cmp    DWORD PTR [ebx*4-0x3ffdfff0],0x0
c0006833:	0f 85 94 00 00 00    	jne    c00068cd <iso_seek+0xd2>
c0006839:	83 fa 01             	cmp    edx,0x1
c000683c:	74 53                	je     c0006891 <iso_seek+0x96>
c000683e:	83 fa 02             	cmp    edx,0x2
c0006841:	74 5d                	je     c00068a0 <iso_seek+0xa5>
c0006843:	85 d2                	test   edx,edx
c0006845:	74 0c                	je     c0006853 <iso_seek+0x58>
c0006847:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000684c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0006851:	eb 3c                	jmp    c000688f <iso_seek+0x94>
c0006853:	89 0c 9d 88 ff 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0078],ecx
c000685a:	8d 14 c0             	lea    edx,[eax+eax*8]
c000685d:	8d 14 90             	lea    edx,[eax+edx*4]
c0006860:	8b 0c 95 8c ff 01 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffe0074]
c0006867:	39 0c 95 88 ff 01 c0 	cmp    DWORD PTR [edx*4-0x3ffe0078],ecx
c000686e:	76 0d                	jbe    c000687d <iso_seek+0x82>
c0006870:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006873:	8d 14 90             	lea    edx,[eax+edx*4]
c0006876:	89 0c 95 88 ff 01 c0 	mov    DWORD PTR [edx*4-0x3ffe0078],ecx
c000687d:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006880:	8d 04 90             	lea    eax,[eax+edx*4]
c0006883:	8b 04 85 88 ff 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0078]
c000688a:	ba 00 00 00 00       	mov    edx,0x0
c000688f:	5b                   	pop    ebx
c0006890:	c3                   	ret    
c0006891:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006894:	8d 14 90             	lea    edx,[eax+edx*4]
c0006897:	01 0c 95 88 ff 01 c0 	add    DWORD PTR [edx*4-0x3ffe0078],ecx
c000689e:	eb ba                	jmp    c000685a <iso_seek+0x5f>
c00068a0:	8d 14 c0             	lea    edx,[eax+eax*8]
c00068a3:	8d 14 90             	lea    edx,[eax+edx*4]
c00068a6:	8d 14 95 80 ff 01 c0 	lea    edx,[edx*4-0x3ffe0080]
c00068ad:	03 4a 0c             	add    ecx,DWORD PTR [edx+0xc]
c00068b0:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068b3:	eb a5                	jmp    c000685a <iso_seek+0x5f>
c00068b5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00068ba:	ba ff ff ff ff       	mov    edx,0xffffffff
c00068bf:	eb ce                	jmp    c000688f <iso_seek+0x94>
c00068c1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00068c6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00068cb:	eb c2                	jmp    c000688f <iso_seek+0x94>
c00068cd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00068d2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00068d7:	eb b6                	jmp    c000688f <iso_seek+0x94>

c00068d9 <iso_tell>:
c00068d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00068dd:	83 f8 0f             	cmp    eax,0xf
c00068e0:	7f 33                	jg     c0006915 <iso_tell+0x3c>
c00068e2:	8d 14 c0             	lea    edx,[eax+eax*8]
c00068e5:	8d 14 90             	lea    edx,[eax+edx*4]
c00068e8:	83 3c 95 80 ff 01 c0 00 	cmp    DWORD PTR [edx*4-0x3ffe0080],0x0
c00068f0:	74 2e                	je     c0006920 <iso_tell+0x47>
c00068f2:	8d 14 c0             	lea    edx,[eax+eax*8]
c00068f5:	8d 14 90             	lea    edx,[eax+edx*4]
c00068f8:	83 3c 95 10 00 02 c0 00 	cmp    DWORD PTR [edx*4-0x3ffdfff0],0x0
c0006900:	75 29                	jne    c000692b <iso_tell+0x52>
c0006902:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006905:	8d 04 90             	lea    eax,[eax+edx*4]
c0006908:	8b 04 85 88 ff 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0078]
c000690f:	ba 00 00 00 00       	mov    edx,0x0
c0006914:	c3                   	ret    
c0006915:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000691a:	ba ff ff ff ff       	mov    edx,0xffffffff
c000691f:	c3                   	ret    
c0006920:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006925:	ba ff ff ff ff       	mov    edx,0xffffffff
c000692a:	c3                   	ret    
c000692b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006930:	ba ff ff ff ff       	mov    edx,0xffffffff
c0006935:	c3                   	ret    

c0006936 <iso_total>:
c0006936:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000693a:	83 f8 0f             	cmp    eax,0xf
c000693d:	7f 2e                	jg     c000696d <iso_total+0x37>
c000693f:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006942:	8d 14 90             	lea    edx,[eax+edx*4]
c0006945:	83 3c 95 80 ff 01 c0 00 	cmp    DWORD PTR [edx*4-0x3ffe0080],0x0
c000694d:	74 24                	je     c0006973 <iso_total+0x3d>
c000694f:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006952:	8d 14 90             	lea    edx,[eax+edx*4]
c0006955:	83 3c 95 10 00 02 c0 00 	cmp    DWORD PTR [edx*4-0x3ffdfff0],0x0
c000695d:	75 1a                	jne    c0006979 <iso_total+0x43>
c000695f:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006962:	8d 04 90             	lea    eax,[eax+edx*4]
c0006965:	8b 04 85 8c ff 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0074]
c000696c:	c3                   	ret    
c000696d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006972:	c3                   	ret    
c0006973:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006978:	c3                   	ret    
c0006979:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000697e:	c3                   	ret    

c000697f <fn_postprocess>:
c000697f:	c3                   	ret    

c0006980 <iso_readdir>:
c0006980:	55                   	push   ebp
c0006981:	57                   	push   edi
c0006982:	56                   	push   esi
c0006983:	53                   	push   ebx
c0006984:	83 ec 1c             	sub    esp,0x1c
c0006987:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000698b:	83 fe 0f             	cmp    esi,0xf
c000698e:	0f 8f 72 02 00 00    	jg     c0006c06 <iso_readdir+0x286>
c0006994:	8d 04 f6             	lea    eax,[esi+esi*8]
c0006997:	8d 04 86             	lea    eax,[esi+eax*4]
c000699a:	83 3c 85 80 ff 01 c0 00 	cmp    DWORD PTR [eax*4-0x3ffe0080],0x0
c00069a2:	0f 84 68 02 00 00    	je     c0006c10 <iso_readdir+0x290>
c00069a8:	8d 04 f6             	lea    eax,[esi+esi*8]
c00069ab:	8d 04 86             	lea    eax,[esi+eax*4]
c00069ae:	83 3c 85 84 ff 01 c0 00 	cmp    DWORD PTR [eax*4-0x3ffe007c],0x0
c00069b6:	0f 84 5e 02 00 00    	je     c0006c1a <iso_readdir+0x29a>
c00069bc:	8d 04 f6             	lea    eax,[esi+esi*8]
c00069bf:	8d 04 86             	lea    eax,[esi+eax*4]
c00069c2:	83 3c 85 10 00 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffdfff0],0x0
c00069ca:	0f 85 54 02 00 00    	jne    c0006c24 <iso_readdir+0x2a4>
c00069d0:	8d 04 f6             	lea    eax,[esi+esi*8]
c00069d3:	8d 14 86             	lea    edx,[esi+eax*4]
c00069d6:	8b 04 95 88 ff 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0078]
c00069dd:	8b 0c 95 8c ff 01 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffe0074]
c00069e4:	39 c8                	cmp    eax,ecx
c00069e6:	73 57                	jae    c0006a3f <iso_readdir+0xbf>
c00069e8:	8d 14 f6             	lea    edx,[esi+esi*8]
c00069eb:	8d 3c 96             	lea    edi,[esi+edx*4]
c00069ee:	c1 e7 02             	shl    edi,0x2
c00069f1:	c1 e8 0b             	shr    eax,0xb
c00069f4:	03 87 80 ff 01 c0    	add    eax,DWORD PTR [edi-0x3ffe0080]
c00069fa:	e8 20 f7 ff ff       	call   c000611f <biread>
c00069ff:	85 c0                	test   eax,eax
c0006a01:	0f 88 27 02 00 00    	js     c0006c2e <iso_readdir+0x2ae>
c0006a07:	8b 14 85 c0 fa 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0540]
c0006a0e:	83 c2 04             	add    edx,0x4
c0006a11:	8b 87 88 ff 01 c0    	mov    eax,DWORD PTR [edi-0x3ffe0078]
c0006a17:	89 c3                	mov    ebx,eax
c0006a19:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0006a1f:	01 d3                	add    ebx,edx
c0006a21:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0006a23:	84 c9                	test   cl,cl
c0006a25:	75 22                	jne    c0006a49 <iso_readdir+0xc9>
c0006a27:	25 00 f8 ff ff       	and    eax,0xfffff800
c0006a2c:	05 00 08 00 00       	add    eax,0x800
c0006a31:	89 87 88 ff 01 c0    	mov    DWORD PTR [edi-0x3ffe0078],eax
c0006a37:	3b 87 8c ff 01 c0    	cmp    eax,DWORD PTR [edi-0x3ffe0074]
c0006a3d:	72 b2                	jb     c00069f1 <iso_readdir+0x71>
c0006a3f:	b8 00 00 00 00       	mov    eax,0x0
c0006a44:	e9 83 00 00 00       	jmp    c0006acc <iso_readdir+0x14c>
c0006a49:	8d 3c f6             	lea    edi,[esi+esi*8]
c0006a4c:	8d 3c be             	lea    edi,[esi+edi*4]
c0006a4f:	3b 04 bd 8c ff 01 c0 	cmp    eax,DWORD PTR [edi*4-0x3ffe0074]
c0006a56:	0f 83 dc 01 00 00    	jae    c0006c38 <iso_readdir+0x2b8>
c0006a5c:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006a60:	75 06                	jne    c0006a68 <iso_readdir+0xe8>
c0006a62:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c0006a66:	74 6c                	je     c0006ad4 <iso_readdir+0x154>
c0006a68:	83 3d f4 08 02 c0 00 	cmp    DWORD PTR ds:0xc00208f4,0x0
c0006a6f:	0f 84 9d 00 00 00    	je     c0006b12 <iso_readdir+0x192>
c0006a75:	31 c9                	xor    ecx,ecx
c0006a77:	8a 4b 20             	mov    cl,BYTE PTR [ebx+0x20]
c0006a7a:	8d 53 21             	lea    edx,[ebx+0x21]
c0006a7d:	8d 04 f6             	lea    eax,[esi+esi*8]
c0006a80:	8d 04 86             	lea    eax,[esi+eax*4]
c0006a83:	8d 04 85 98 ff 01 c0 	lea    eax,[eax*4-0x3ffe0068]
c0006a8a:	e8 f8 f2 ff ff       	call   c0005d87 <ucs2utfn>
c0006a8f:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006a93:	0f 85 5e 01 00 00    	jne    c0006bf7 <iso_readdir+0x277>
c0006a99:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006a9c:	e8 dd f3 ff ff       	call   c0005e7e <iso_733>
c0006aa1:	ba 00 00 00 00       	mov    edx,0x0
c0006aa6:	8d 0c f6             	lea    ecx,[esi+esi*8]
c0006aa9:	c1 e1 02             	shl    ecx,0x2
c0006aac:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0006aaf:	8d 3c bd 80 ff 01 c0 	lea    edi,[edi*4-0x3ffe0080]
c0006ab6:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0006ab9:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c0006abc:	31 c0                	xor    eax,eax
c0006abe:	8a 03                	mov    al,BYTE PTR [ebx]
c0006ac0:	01 47 08             	add    DWORD PTR [edi+0x8],eax
c0006ac3:	01 ce                	add    esi,ecx
c0006ac5:	8d 04 b5 90 ff 01 c0 	lea    eax,[esi*4-0x3ffe0070]
c0006acc:	83 c4 1c             	add    esp,0x1c
c0006acf:	5b                   	pop    ebx
c0006ad0:	5e                   	pop    esi
c0006ad1:	5f                   	pop    edi
c0006ad2:	5d                   	pop    ebp
c0006ad3:	c3                   	ret    
c0006ad4:	81 e1 ff 00 00 00    	and    ecx,0xff
c0006ada:	01 c8                	add    eax,ecx
c0006adc:	8d 3c bd 80 ff 01 c0 	lea    edi,[edi*4-0x3ffe0080]
c0006ae3:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c0006ae6:	89 c1                	mov    ecx,eax
c0006ae8:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006aee:	31 db                	xor    ebx,ebx
c0006af0:	8a 1c 0a             	mov    bl,BYTE PTR [edx+ecx*1]
c0006af3:	89 d9                	mov    ecx,ebx
c0006af5:	01 c8                	add    eax,ecx
c0006af7:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c0006afa:	25 ff 07 00 00       	and    eax,0x7ff
c0006aff:	8d 1c 02             	lea    ebx,[edx+eax*1]
c0006b02:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006b05:	0f 85 5d ff ff ff    	jne    c0006a68 <iso_readdir+0xe8>
c0006b0b:	b8 00 00 00 00       	mov    eax,0x0
c0006b10:	eb ba                	jmp    c0006acc <iso_readdir+0x14c>
c0006b12:	8d 3c f6             	lea    edi,[esi+esi*8]
c0006b15:	c1 e7 02             	shl    edi,0x2
c0006b18:	8d 04 37             	lea    eax,[edi+esi*1]
c0006b1b:	8d 0c 85 98 ff 01 c0 	lea    ecx,[eax*4-0x3ffe0068]
c0006b22:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0006b26:	83 ec 04             	sub    esp,0x4
c0006b29:	31 c0                	xor    eax,eax
c0006b2b:	8a 43 20             	mov    al,BYTE PTR [ebx+0x20]
c0006b2e:	50                   	push   eax
c0006b2f:	8d 43 21             	lea    eax,[ebx+0x21]
c0006b32:	50                   	push   eax
c0006b33:	51                   	push   ecx
c0006b34:	e8 17 9b ff ff       	call   c0000650 <strncpy>
c0006b39:	31 c0                	xor    eax,eax
c0006b3b:	8a 43 20             	mov    al,BYTE PTR [ebx+0x20]
c0006b3e:	01 f7                	add    edi,esi
c0006b40:	c6 84 b8 98 ff 01 c0 00 	mov    BYTE PTR [eax+edi*4-0x3ffe0068],0x0
c0006b48:	31 c0                	xor    eax,eax
c0006b4a:	8a 43 20             	mov    al,BYTE PTR [ebx+0x20]
c0006b4d:	0f b6 2b             	movzx  ebp,BYTE PTR [ebx]
c0006b50:	81 e5 ff 00 00 00    	and    ebp,0xff
c0006b56:	29 c5                	sub    ebp,eax
c0006b58:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c0006b5c:	83 c4 10             	add    esp,0x10
c0006b5f:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006b63:	74 25                	je     c0006b8a <iso_readdir+0x20a>
c0006b65:	83 ed 21             	sub    ebp,0x21
c0006b68:	83 fd 03             	cmp    ebp,0x3
c0006b6b:	0f 8e 1e ff ff ff    	jle    c0006a8f <iso_readdir+0x10f>
c0006b71:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006b74:	48                   	dec    eax
c0006b75:	3c 01                	cmp    al,0x1
c0006b77:	0f 87 12 ff ff ff    	ja     c0006a8f <iso_readdir+0x10f>
c0006b7d:	8d 04 f5 00 00 00 00 	lea    eax,[esi*8+0x0]
c0006b84:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b88:	eb 23                	jmp    c0006bad <iso_readdir+0x22d>
c0006b8a:	47                   	inc    edi
c0006b8b:	83 ed 22             	sub    ebp,0x22
c0006b8e:	eb d8                	jmp    c0006b68 <iso_readdir+0x1e8>
c0006b90:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006b94:	29 c5                	sub    ebp,eax
c0006b96:	01 c7                	add    edi,eax
c0006b98:	83 fd 03             	cmp    ebp,0x3
c0006b9b:	0f 8e ee fe ff ff    	jle    c0006a8f <iso_readdir+0x10f>
c0006ba1:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006ba4:	48                   	dec    eax
c0006ba5:	3c 01                	cmp    al,0x1
c0006ba7:	0f 87 e2 fe ff ff    	ja     c0006a8f <iso_readdir+0x10f>
c0006bad:	83 ec 04             	sub    esp,0x4
c0006bb0:	6a 02                	push   0x2
c0006bb2:	68 c0 d4 01 c0       	push   0xc001d4c0
c0006bb7:	57                   	push   edi
c0006bb8:	e8 c3 9b ff ff       	call   c0000780 <strncmp>
c0006bbd:	83 c4 10             	add    esp,0x10
c0006bc0:	85 c0                	test   eax,eax
c0006bc2:	75 cc                	jne    c0006b90 <iso_readdir+0x210>
c0006bc4:	83 ec 04             	sub    esp,0x4
c0006bc7:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bcb:	83 e8 05             	sub    eax,0x5
c0006bce:	50                   	push   eax
c0006bcf:	8d 47 05             	lea    eax,[edi+0x5]
c0006bd2:	50                   	push   eax
c0006bd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0006bd7:	e8 74 9a ff ff       	call   c0000650 <strncpy>
c0006bdc:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006be0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006be4:	8d 14 31             	lea    edx,[ecx+esi*1]
c0006be7:	8d 14 96             	lea    edx,[esi+edx*4]
c0006bea:	c6 84 90 93 ff 01 c0 00 	mov    BYTE PTR [eax+edx*4-0x3ffe006d],0x0
c0006bf2:	83 c4 10             	add    esp,0x10
c0006bf5:	eb 99                	jmp    c0006b90 <iso_readdir+0x210>
c0006bf7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006bfc:	ba ff ff ff ff       	mov    edx,0xffffffff
c0006c01:	e9 a0 fe ff ff       	jmp    c0006aa6 <iso_readdir+0x126>
c0006c06:	b8 00 00 00 00       	mov    eax,0x0
c0006c0b:	e9 bc fe ff ff       	jmp    c0006acc <iso_readdir+0x14c>
c0006c10:	b8 00 00 00 00       	mov    eax,0x0
c0006c15:	e9 b2 fe ff ff       	jmp    c0006acc <iso_readdir+0x14c>
c0006c1a:	b8 00 00 00 00       	mov    eax,0x0
c0006c1f:	e9 a8 fe ff ff       	jmp    c0006acc <iso_readdir+0x14c>
c0006c24:	b8 00 00 00 00       	mov    eax,0x0
c0006c29:	e9 9e fe ff ff       	jmp    c0006acc <iso_readdir+0x14c>
c0006c2e:	b8 00 00 00 00       	mov    eax,0x0
c0006c33:	e9 94 fe ff ff       	jmp    c0006acc <iso_readdir+0x14c>
c0006c38:	b8 00 00 00 00       	mov    eax,0x0
c0006c3d:	e9 8a fe ff ff       	jmp    c0006acc <iso_readdir+0x14c>

c0006c42 <iso_reset>:
c0006c42:	e8 8b f2 ff ff       	call   c0005ed2 <iso_break_all>
c0006c47:	e8 80 f2 ff ff       	call   c0005ecc <bclear>
c0006c4c:	b8 00 00 00 00       	mov    eax,0x0
c0006c51:	c3                   	ret    

c0006c52 <init_percd>:
c0006c52:	57                   	push   edi
c0006c53:	56                   	push   esi
c0006c54:	53                   	push   ebx
c0006c55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c59:	a2 a0 fa 01 c0       	mov    ds:0xc001faa0,al
c0006c5e:	e8 df ff ff ff       	call   c0006c42 <iso_reset>
c0006c63:	c7 05 f4 08 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00208f4,0x0
c0006c6d:	bb 01 00 00 00       	mov    ebx,0x1
c0006c72:	eb 06                	jmp    c0006c7a <init_percd+0x28>
c0006c74:	43                   	inc    ebx
c0006c75:	83 fb 04             	cmp    ebx,0x4
c0006c78:	74 53                	je     c0006ccd <init_percd+0x7b>
c0006c7a:	a1 ec 08 02 c0       	mov    eax,ds:0xc00208ec
c0006c7f:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c83:	e8 97 f4 ff ff       	call   c000611f <biread>
c0006c88:	89 c6                	mov    esi,eax
c0006c8a:	85 c0                	test   eax,eax
c0006c8c:	0f 88 c1 00 00 00    	js     c0006d53 <init_percd+0x101>
c0006c92:	83 ec 04             	sub    esp,0x4
c0006c95:	6a 06                	push   0x6
c0006c97:	68 c3 d4 01 c0       	push   0xc001d4c3
c0006c9c:	8b 04 85 c0 fa 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0540]
c0006ca3:	83 c0 04             	add    eax,0x4
c0006ca6:	50                   	push   eax
c0006ca7:	e8 04 97 ff ff       	call   c00003b0 <memcmp>
c0006cac:	83 c4 10             	add    esp,0x10
c0006caf:	85 c0                	test   eax,eax
c0006cb1:	75 c1                	jne    c0006c74 <init_percd+0x22>
c0006cb3:	8b 04 b5 c0 fa 01 c0 	mov    eax,DWORD PTR [esi*4-0x3ffe0540]
c0006cba:	83 c0 5c             	add    eax,0x5c
c0006cbd:	e8 5e f1 ff ff       	call   c0005e20 <isjoliet>
c0006cc2:	a3 f4 08 02 c0       	mov    ds:0xc00208f4,eax
c0006cc7:	85 c0                	test   eax,eax
c0006cc9:	74 a9                	je     c0006c74 <init_percd+0x22>
c0006ccb:	eb 09                	jmp    c0006cd6 <init_percd+0x84>
c0006ccd:	83 3d f4 08 02 c0 00 	cmp    DWORD PTR ds:0xc00208f4,0x0
c0006cd4:	74 42                	je     c0006d18 <init_percd+0xc6>
c0006cd6:	8b 34 b5 c0 fa 01 c0 	mov    esi,DWORD PTR [esi*4-0x3ffe0540]
c0006cdd:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006ce3:	bf c0 08 02 c0       	mov    edi,0xc00208c0
c0006ce8:	b9 22 00 00 00       	mov    ecx,0x22
c0006ced:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006cef:	b8 c2 08 02 c0       	mov    eax,0xc00208c2
c0006cf4:	e8 85 f1 ff ff       	call   c0005e7e <iso_733>
c0006cf9:	a3 e8 08 02 c0       	mov    ds:0xc00208e8,eax
c0006cfe:	b8 ca 08 02 c0       	mov    eax,0xc00208ca
c0006d03:	e8 76 f1 ff ff       	call   c0005e7e <iso_733>
c0006d08:	a3 e4 08 02 c0       	mov    ds:0xc00208e4,eax
c0006d0d:	bb 00 00 00 00       	mov    ebx,0x0
c0006d12:	89 d8                	mov    eax,ebx
c0006d14:	5b                   	pop    ebx
c0006d15:	5e                   	pop    esi
c0006d16:	5f                   	pop    edi
c0006d17:	c3                   	ret    
c0006d18:	a1 ec 08 02 c0       	mov    eax,ds:0xc00208ec
c0006d1d:	83 c0 10             	add    eax,0x10
c0006d20:	e8 fa f3 ff ff       	call   c000611f <biread>
c0006d25:	89 c6                	mov    esi,eax
c0006d27:	85 c0                	test   eax,eax
c0006d29:	78 e7                	js     c0006d12 <init_percd+0xc0>
c0006d2b:	83 ec 04             	sub    esp,0x4
c0006d2e:	6a 06                	push   0x6
c0006d30:	68 ca d4 01 c0       	push   0xc001d4ca
c0006d35:	8b 04 85 c0 fa 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0540]
c0006d3c:	83 c0 04             	add    eax,0x4
c0006d3f:	50                   	push   eax
c0006d40:	e8 6b 96 ff ff       	call   c00003b0 <memcmp>
c0006d45:	83 c4 10             	add    esp,0x10
c0006d48:	85 c0                	test   eax,eax
c0006d4a:	74 8a                	je     c0006cd6 <init_percd+0x84>
c0006d4c:	bb ff ff ff ff       	mov    ebx,0xffffffff
c0006d51:	eb bf                	jmp    c0006d12 <init_percd+0xc0>
c0006d53:	89 c3                	mov    ebx,eax
c0006d55:	eb bb                	jmp    c0006d12 <init_percd+0xc0>

c0006d57 <iso_ioctl>:
c0006d57:	e8 e6 fe ff ff       	call   c0006c42 <iso_reset>
c0006d5c:	b8 00 00 00 00       	mov    eax,0x0
c0006d61:	c3                   	ret    

c0006d62 <fs_iso9660_init>:
c0006d62:	53                   	push   ebx
c0006d63:	83 ec 0c             	sub    esp,0xc
c0006d66:	68 40 09 00 00       	push   0x940
c0006d6b:	6a 00                	push   0x0
c0006d6d:	68 80 ff 01 c0       	push   0xc001ff80
c0006d72:	e8 79 97 ff ff       	call   c00004f0 <memset>
c0006d77:	c7 05 80 ff 01 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc001ff80,0xffffffff
c0006d81:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d88:	e8 8c 10 00 00       	call   c0007e19 <malloc>
c0006d8d:	a3 f0 08 02 c0       	mov    ds:0xc00208f0,eax
c0006d92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d99:	e8 7b 10 00 00       	call   c0007e19 <malloc>
c0006d9e:	a3 60 ff 01 c0       	mov    ds:0xc001ff60,eax
c0006da3:	83 c4 10             	add    esp,0x10
c0006da6:	bb 00 00 00 00       	mov    ebx,0x0
c0006dab:	83 ec 0c             	sub    esp,0xc
c0006dae:	68 04 08 00 00       	push   0x804
c0006db3:	e8 61 10 00 00       	call   c0007e19 <malloc>
c0006db8:	89 04 9d c0 fa 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0540],eax
c0006dbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006dcc:	e8 48 10 00 00       	call   c0007e19 <malloc>
c0006dd1:	89 04 9d 60 fa 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe05a0],eax
c0006dd8:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dde:	43                   	inc    ebx
c0006ddf:	83 c4 10             	add    esp,0x10
c0006de2:	83 fb 10             	cmp    ebx,0x10
c0006de5:	75 c4                	jne    c0006dab <fs_iso9660_init+0x49>
c0006de7:	b8 00 00 00 00       	mov    eax,0x0
c0006dec:	83 c4 08             	add    esp,0x8
c0006def:	5b                   	pop    ebx
c0006df0:	c3                   	ret    

c0006df1 <fs_iso9660_shutdown>:
c0006df1:	53                   	push   ebx
c0006df2:	83 ec 08             	sub    esp,0x8
c0006df5:	bb 00 00 00 00       	mov    ebx,0x0
c0006dfa:	83 ec 0c             	sub    esp,0xc
c0006dfd:	ff 34 9d c0 fa 01 c0 	push   DWORD PTR [ebx*4-0x3ffe0540]
c0006e04:	e8 20 10 00 00       	call   c0007e29 <free>
c0006e09:	83 c4 04             	add    esp,0x4
c0006e0c:	ff 34 9d 60 fa 01 c0 	push   DWORD PTR [ebx*4-0x3ffe05a0]
c0006e13:	e8 11 10 00 00       	call   c0007e29 <free>
c0006e18:	43                   	inc    ebx
c0006e19:	83 c4 10             	add    esp,0x10
c0006e1c:	83 fb 10             	cmp    ebx,0x10
c0006e1f:	75 d9                	jne    c0006dfa <fs_iso9660_shutdown+0x9>
c0006e21:	a1 f0 08 02 c0       	mov    eax,ds:0xc00208f0
c0006e26:	85 c0                	test   eax,eax
c0006e28:	74 0c                	je     c0006e36 <fs_iso9660_shutdown+0x45>
c0006e2a:	83 ec 0c             	sub    esp,0xc
c0006e2d:	50                   	push   eax
c0006e2e:	e8 f6 0f 00 00       	call   c0007e29 <free>
c0006e33:	83 c4 10             	add    esp,0x10
c0006e36:	a1 60 ff 01 c0       	mov    eax,ds:0xc001ff60
c0006e3b:	85 c0                	test   eax,eax
c0006e3d:	74 0c                	je     c0006e4b <fs_iso9660_shutdown+0x5a>
c0006e3f:	83 ec 0c             	sub    esp,0xc
c0006e42:	50                   	push   eax
c0006e43:	e8 e1 0f 00 00       	call   c0007e29 <free>
c0006e48:	83 c4 10             	add    esp,0x10
c0006e4b:	c7 05 60 ff 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001ff60,0x0
c0006e55:	c7 05 f0 08 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00208f0,0x0
c0006e5f:	b8 00 00 00 00       	mov    eax,0x0
c0006e64:	83 c4 08             	add    esp,0x8
c0006e67:	5b                   	pop    ebx
c0006e68:	c3                   	ret    

c0006e69 <CPU::current()>:
c0006e69:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c0006e6e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0006e74:	c3                   	ret    

c0006e75 <operator new(unsigned long)>:
c0006e75:	e9 9f 0f 00 00       	jmp    c0007e19 <malloc>

c0006e7a <operator delete(void*)>:
c0006e7a:	e9 ba 0f 00 00       	jmp    c0007e39 <rfree>

c0006e7f <disableIRQs()>:
c0006e7f:	fa                   	cli    
c0006e80:	c3                   	ret    

c0006e81 <enableIRQs()>:
c0006e81:	fb                   	sti    
c0006e82:	c3                   	ret    

c0006e83 <lockScheduler()>:
c0006e83:	fa                   	cli    
c0006e84:	ff 05 c8 3d 02 c0    	inc    DWORD PTR ds:0xc0023dc8
c0006e8a:	c3                   	ret    

c0006e8b <unlockScheduler()>:
c0006e8b:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c0006e90:	48                   	dec    eax
c0006e91:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c0006e96:	75 01                	jne    c0006e99 <unlockScheduler()+0xe>
c0006e98:	fb                   	sti    
c0006e99:	c3                   	ret    

c0006e9a <lockStuff()>:
c0006e9a:	fa                   	cli    
c0006e9b:	ff 05 c8 3d 02 c0    	inc    DWORD PTR ds:0xc0023dc8
c0006ea1:	ff 05 c4 3d 02 c0    	inc    DWORD PTR ds:0xc0023dc4
c0006ea7:	c3                   	ret    

c0006ea8 <unlockStuff()>:
c0006ea8:	83 ec 0c             	sub    esp,0xc
c0006eab:	a1 c4 3d 02 c0       	mov    eax,ds:0xc0023dc4
c0006eb0:	48                   	dec    eax
c0006eb1:	a3 c4 3d 02 c0       	mov    ds:0xc0023dc4,eax
c0006eb6:	75 18                	jne    c0006ed0 <unlockStuff()+0x28>
c0006eb8:	83 3d c0 3d 02 c0 00 	cmp    DWORD PTR ds:0xc0023dc0,0x0
c0006ebf:	74 0f                	je     c0006ed0 <unlockStuff()+0x28>
c0006ec1:	c7 05 c0 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023dc0,0x0
c0006ecb:	e8 7c cb 00 00       	call   c0013a4c <schedule()>
c0006ed0:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c0006ed5:	48                   	dec    eax
c0006ed6:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c0006edb:	75 01                	jne    c0006ede <unlockStuff()+0x36>
c0006edd:	fb                   	sti    
c0006ede:	83 c4 0c             	add    esp,0xc
c0006ee1:	c3                   	ret    

c0006ee2 <Virt::getAKernelVAS()>:
c0006ee2:	a1 f0 09 02 c0       	mov    eax,ds:0xc00209f0
c0006ee7:	c3                   	ret    

c0006ee8 <__not_memcpy>:
c0006ee8:	57                   	push   edi
c0006ee9:	56                   	push   esi
c0006eea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006eee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0006ef2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006ef6:	89 c7                	mov    edi,eax
c0006ef8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006efa:	5e                   	pop    esi
c0006efb:	5f                   	pop    edi
c0006efc:	c3                   	ret    
c0006efd:	66 90                	xchg   ax,ax
c0006eff:	90                   	nop

c0006f00 <Krnl::resolveCompatibilitySymbol(char*)>:
c0006f00:	83 ec 0c             	sub    esp,0xc
c0006f03:	83 ec 08             	sub    esp,0x8
c0006f06:	68 d1 d4 01 c0       	push   0xc001d4d1
c0006f0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006f0f:	e8 ec 97 ff ff       	call   c0000700 <strcmp>
c0006f14:	83 c4 10             	add    esp,0x10
c0006f17:	85 c0                	test   eax,eax
c0006f19:	0f 94 c0             	sete   al
c0006f1c:	84 c0                	test   al,al
c0006f1e:	74 0c                	je     c0006f2c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0006f20:	b8 f8 08 02 c0       	mov    eax,0xc00208f8
c0006f25:	e9 ea 00 00 00       	jmp    c0007014 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006f2a:	66 90                	xchg   ax,ax
c0006f2c:	83 ec 08             	sub    esp,0x8
c0006f2f:	68 da d4 01 c0       	push   0xc001d4da
c0006f34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006f38:	e8 c3 97 ff ff       	call   c0000700 <strcmp>
c0006f3d:	83 c4 10             	add    esp,0x10
c0006f40:	85 c0                	test   eax,eax
c0006f42:	0f 94 c0             	sete   al
c0006f45:	84 c0                	test   al,al
c0006f47:	74 0b                	je     c0006f54 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0006f49:	b8 70 c1 01 c0       	mov    eax,0xc001c170
c0006f4e:	e9 c1 00 00 00       	jmp    c0007014 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006f53:	90                   	nop
c0006f54:	83 ec 08             	sub    esp,0x8
c0006f57:	68 e4 d4 01 c0       	push   0xc001d4e4
c0006f5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006f60:	e8 9b 97 ff ff       	call   c0000700 <strcmp>
c0006f65:	83 c4 10             	add    esp,0x10
c0006f68:	85 c0                	test   eax,eax
c0006f6a:	0f 94 c0             	sete   al
c0006f6d:	84 c0                	test   al,al
c0006f6f:	74 0b                	je     c0006f7c <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0006f71:	b8 a4 be 01 c0       	mov    eax,0xc001bea4
c0006f76:	e9 99 00 00 00       	jmp    c0007014 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006f7b:	90                   	nop
c0006f7c:	83 ec 08             	sub    esp,0x8
c0006f7f:	68 ed d4 01 c0       	push   0xc001d4ed
c0006f84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006f88:	e8 73 97 ff ff       	call   c0000700 <strcmp>
c0006f8d:	83 c4 10             	add    esp,0x10
c0006f90:	85 c0                	test   eax,eax
c0006f92:	0f 94 c0             	sete   al
c0006f95:	84 c0                	test   al,al
c0006f97:	74 07                	je     c0006fa0 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c0006f99:	b8 70 c2 01 c0       	mov    eax,0xc001c270
c0006f9e:	eb 74                	jmp    c0007014 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006fa0:	83 ec 08             	sub    esp,0x8
c0006fa3:	68 f7 d4 01 c0       	push   0xc001d4f7
c0006fa8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006fac:	e8 4f 97 ff ff       	call   c0000700 <strcmp>
c0006fb1:	83 c4 10             	add    esp,0x10
c0006fb4:	85 c0                	test   eax,eax
c0006fb6:	0f 94 c0             	sete   al
c0006fb9:	84 c0                	test   al,al
c0006fbb:	74 07                	je     c0006fc4 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c0006fbd:	b8 f0 bf 01 c0       	mov    eax,0xc001bff0
c0006fc2:	eb 50                	jmp    c0007014 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006fc4:	83 ec 08             	sub    esp,0x8
c0006fc7:	68 00 d5 01 c0       	push   0xc001d500
c0006fcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006fd0:	e8 2b 97 ff ff       	call   c0000700 <strcmp>
c0006fd5:	83 c4 10             	add    esp,0x10
c0006fd8:	85 c0                	test   eax,eax
c0006fda:	0f 94 c0             	sete   al
c0006fdd:	84 c0                	test   al,al
c0006fdf:	74 07                	je     c0006fe8 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c0006fe1:	b8 fc 08 02 c0       	mov    eax,0xc00208fc
c0006fe6:	eb 2c                	jmp    c0007014 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006fe8:	83 ec 08             	sub    esp,0x8
c0006feb:	68 0d d5 01 c0       	push   0xc001d50d
c0006ff0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006ff4:	e8 07 97 ff ff       	call   c0000700 <strcmp>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	85 c0                	test   eax,eax
c0006ffe:	0f 94 c0             	sete   al
c0007001:	84 c0                	test   al,al
c0007003:	74 07                	je     c000700c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0007005:	b8 fd 08 02 c0       	mov    eax,0xc00208fd
c000700a:	eb 08                	jmp    c0007014 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000700c:	b8 00 00 00 00       	mov    eax,0x0
c0007011:	8d 76 00             	lea    esi,[esi+0x0]
c0007014:	83 c4 0c             	add    esp,0xc
c0007017:	c3                   	ret    

c0007018 <Computer::close(int, int, void*)>:
c0007018:	57                   	push   edi
c0007019:	56                   	push   esi
c000701a:	53                   	push   ebx
c000701b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000701f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007023:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0007027:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c000702d:	83 ec 0c             	sub    esp,0xc
c0007030:	50                   	push   eax
c0007031:	e8 d0 50 00 00       	call   c000c106 <Device::closeAll()>
c0007036:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c000703c:	83 c4 10             	add    esp,0x10
c000703f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007041:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0007045:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000704d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007051:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007055:	5b                   	pop    ebx
c0007056:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0007059:	5e                   	pop    esi
c000705a:	5f                   	pop    edi
c000705b:	ff e0                	jmp    eax

c000705d <Krnl::firstTask()>:
c000705d:	53                   	push   ebx
c000705e:	83 ec 14             	sub    esp,0x14
c0007061:	fb                   	sti    
c0007062:	68 1a d5 01 c0       	push   0xc001d51a
c0007067:	e8 07 0e 00 00       	call   c0007e73 <Krnl::setBootMessage(char const*)>
c000706c:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0007073:	e8 a1 0d 00 00       	call   c0007e19 <malloc>
c0007078:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000707f:	89 c3                	mov    ebx,eax
c0007081:	a1 f0 3d 02 c0       	mov    eax,ds:0xc0023df0
c0007086:	50                   	push   eax
c0007087:	68 33 d5 01 c0       	push   0xc001d533
c000708c:	6a 01                	push   0x1
c000708e:	53                   	push   ebx
c000708f:	e8 8c c5 00 00       	call   c0013620 <Process::Process(bool, char const*, Process*, char**)>
c0007094:	83 c4 20             	add    esp,0x20
c0007097:	68 ff 00 00 00       	push   0xff
c000709c:	6a 00                	push   0x0
c000709e:	68 73 78 00 c0       	push   0xc0007873
c00070a3:	53                   	push   ebx
c00070a4:	e8 83 c7 00 00       	call   c001382c <Process::createThread(void (*)(void*), void*, int)>
c00070a9:	8b 15 f0 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023df0
c00070af:	6a 7a                	push   0x7a
c00070b1:	6a 00                	push   0x0
c00070b3:	68 80 42 01 c0       	push   0xc0014280
c00070b8:	52                   	push   edx
c00070b9:	e8 6e c7 00 00       	call   c001382c <Process::createThread(void (*)(void*), void*, int)>
c00070be:	83 c4 14             	add    esp,0x14
c00070c1:	a3 a8 3d 02 c0       	mov    ds:0xc0023da8,eax
c00070c6:	68 30 d6 01 c0       	push   0xc001d630
c00070cb:	c6 05 fd 08 02 c0 01 	mov    BYTE PTR ds:0xc00208fd,0x1
c00070d2:	e8 9c 0d 00 00       	call   c0007e73 <Krnl::setBootMessage(char const*)>
c00070d7:	e8 83 d5 00 00       	call   c001465f <Vm::initialise8086()>
c00070dc:	e8 69 3e 00 00       	call   c000af4a <Fs::initVFS()>
c00070e1:	c7 04 24 40 d5 01 c0 	mov    DWORD PTR [esp],0xc001d540
c00070e8:	e8 86 0d 00 00       	call   c0007e73 <Krnl::setBootMessage(char const*)>
c00070ed:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c00070f2:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c00070f8:	8b 10                	mov    edx,DWORD PTR [eax]
c00070fa:	6a 00                	push   0x0
c00070fc:	6a 00                	push   0x0
c00070fe:	6a 00                	push   0x0
c0007100:	50                   	push   eax
c0007101:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007104:	83 c4 14             	add    esp,0x14
c0007107:	68 30 d6 01 c0       	push   0xc001d630
c000710c:	e8 62 0d 00 00       	call   c0007e73 <Krnl::setBootMessage(char const*)>
c0007111:	e8 9c ad 00 00       	call   c0011eb2 <Sys::loadSyscalls()>
c0007116:	e8 d3 94 00 00       	call   c00105ee <Krnl::loadSystemEnv()>
c000711b:	e8 98 97 00 00       	call   c00108b8 <Krnl::setupPowerManager()>
c0007120:	83 c4 0c             	add    esp,0xc
c0007123:	6a 3a                	push   0x3a
c0007125:	68 5a d5 01 c0       	push   0xc001d55a
c000712a:	68 63 d5 01 c0       	push   0xc001d563
c000712f:	e8 ae 9c 00 00       	call   c0010de2 <Reg::readIntWithDefault(char*, char*, int)>
c0007134:	89 04 24             	mov    DWORD PTR [esp],eax
c0007137:	e8 1c 49 00 00       	call   c000ba58 <User::loadClockSettings(int)>
c000713c:	c7 04 24 54 d6 01 c0 	mov    DWORD PTR [esp],0xc001d654
c0007143:	e8 2b 0d 00 00       	call   c0007e73 <Krnl::setBootMessage(char const*)>
c0007148:	59                   	pop    ecx
c0007149:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c000714e:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0007154:	53                   	push   ebx
c0007155:	e8 aa 4f 00 00       	call   c000c104 <Device::loadDriversForAll()>
c000715a:	c7 04 24 6b d5 01 c0 	mov    DWORD PTR [esp],0xc001d56b
c0007161:	e8 0d 0d 00 00       	call   c0007e73 <Krnl::setBootMessage(char const*)>
c0007166:	58                   	pop    eax
c0007167:	8b 1d f8 08 02 c0    	mov    ebx,DWORD PTR ds:0xc00208f8
c000716d:	5a                   	pop    edx
c000716e:	6a 01                	push   0x1
c0007170:	68 7c d5 01 c0       	push   0xc001d57c
c0007175:	e8 e0 be 00 00       	call   c001305a <Thr::loadDLL(char const*, bool)>
c000717a:	59                   	pop    ecx
c000717b:	5a                   	pop    edx
c000717c:	53                   	push   ebx
c000717d:	50                   	push   eax
c000717e:	e8 08 c1 00 00       	call   c001328b <Thr::executeDLL(unsigned long, void*)>
c0007183:	83 c4 10             	add    esp,0x10
c0007186:	83 ec 0c             	sub    esp,0xc
c0007189:	6a 02                	push   0x2
c000718b:	e8 b8 ca 00 00       	call   c0013c48 <blockTask(TaskState)>
c0007190:	83 c4 10             	add    esp,0x10
c0007193:	eb f1                	jmp    c0007186 <Krnl::firstTask()+0x129>
c0007195:	90                   	nop

c0007196 <Computer::Computer()>:
c0007196:	83 ec 0c             	sub    esp,0xc
c0007199:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000719d:	83 ec 08             	sub    esp,0x8
c00071a0:	68 98 d5 01 c0       	push   0xc001d598
c00071a5:	50                   	push   eax
c00071a6:	e8 d5 4f 00 00       	call   c000c180 <Device::Device(char const*)>
c00071ab:	83 c4 10             	add    esp,0x10
c00071ae:	ba a0 d6 01 c0       	mov    edx,0xc001d6a0
c00071b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071b7:	89 10                	mov    DWORD PTR [eax],edx
c00071b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071bd:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00071c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071cb:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c00071d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071d9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00071df:	83 ca 04             	or     edx,0x4
c00071e2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00071e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071ec:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00071f2:	31 d2                	xor    edx,edx
c00071f4:	88 c2                	mov    dl,al
c00071f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071fa:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0007201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007205:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000720b:	31 d2                	xor    edx,edx
c000720d:	88 c2                	mov    dl,al
c000720f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007213:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0007218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000721c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0007222:	8d 50 01             	lea    edx,[eax+0x1]
c0007225:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007229:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000722f:	31 d2                	xor    edx,edx
c0007231:	88 c2                	mov    dl,al
c0007233:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007237:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000723b:	83 e1 3f             	and    ecx,0x3f
c000723e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0007242:	90                   	nop
c0007243:	83 c4 0c             	add    esp,0xc
c0007246:	c3                   	ret    
c0007247:	90                   	nop

c0007248 <Computer::setBootMessage(char const*)>:
c0007248:	c3                   	ret    
c0007249:	90                   	nop

c000724a <Computer::detectFeatures()>:
c000724a:	55                   	push   ebp
c000724b:	57                   	push   edi
c000724c:	56                   	push   esi
c000724d:	53                   	push   ebx
c000724e:	83 ec 1c             	sub    esp,0x1c
c0007251:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007255:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c000725f:	e8 b5 8f ff ff       	call   c0000219 <detectCPUID>
c0007264:	85 c0                	test   eax,eax
c0007266:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c000726c:	0f 95 c2             	setne  dl
c000726f:	83 e0 fd             	and    eax,0xfffffffd
c0007272:	01 d2                	add    edx,edx
c0007274:	09 d0                	or     eax,edx
c0007276:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000727c:	a8 02                	test   al,0x2
c000727e:	75 46                	jne    c00072c6 <Computer::detectFeatures()+0x7c>
c0007280:	f6 05 11 09 02 c0 04 	test   BYTE PTR ds:0xc0020911,0x4
c0007287:	74 07                	je     c0007290 <Computer::detectFeatures()+0x46>
c0007289:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0007290:	e8 a1 4b 01 00       	call   c001be36 <x87Detect>
c0007295:	83 e0 01             	and    eax,0x1
c0007298:	c1 e0 04             	shl    eax,0x4
c000729b:	88 c2                	mov    dl,al
c000729d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00072a3:	83 e0 ef             	and    eax,0xffffffef
c00072a6:	09 d0                	or     eax,edx
c00072a8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00072ae:	a8 10                	test   al,0x10
c00072b0:	0f 85 2a 01 00 00    	jne    c00073e0 <Computer::detectFeatures()+0x196>
c00072b6:	84 c0                	test   al,al
c00072b8:	0f 88 45 01 00 00    	js     c0007403 <Computer::detectFeatures()+0x1b9>
c00072be:	83 c4 1c             	add    esp,0x1c
c00072c1:	5b                   	pop    ebx
c00072c2:	5e                   	pop    esi
c00072c3:	5f                   	pop    edi
c00072c4:	5d                   	pop    ebp
c00072c5:	c3                   	ret    
c00072c6:	83 ec 0c             	sub    esp,0xc
c00072c9:	6a 20                	push   0x20
c00072cb:	e8 40 84 00 00       	call   c000f710 <CPU::cpuidCheckEDX(unsigned int)>
c00072d0:	83 e0 01             	and    eax,0x1
c00072d3:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00072da:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00072e0:	83 e0 f7             	and    eax,0xfffffff7
c00072e3:	09 d0                	or     eax,edx
c00072e5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00072eb:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c00072f2:	e8 19 84 00 00       	call   c000f710 <CPU::cpuidCheckEDX(unsigned int)>
c00072f7:	83 e0 01             	and    eax,0x1
c00072fa:	88 c2                	mov    dl,al
c00072fc:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007302:	83 e0 fe             	and    eax,0xfffffffe
c0007305:	09 d0                	or     eax,edx
c0007307:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c000730d:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0007314:	e8 f7 83 00 00       	call   c000f710 <CPU::cpuidCheckEDX(unsigned int)>
c0007319:	c1 e0 07             	shl    eax,0x7
c000731c:	88 c2                	mov    dl,al
c000731e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007324:	83 e0 7f             	and    eax,0x7f
c0007327:	09 d0                	or     eax,edx
c0007329:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c000732f:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0007336:	e8 d5 83 00 00       	call   c000f710 <CPU::cpuidCheckEDX(unsigned int)>
c000733b:	83 c4 10             	add    esp,0x10
c000733e:	83 e0 01             	and    eax,0x1
c0007341:	c1 e0 05             	shl    eax,0x5
c0007344:	88 c2                	mov    dl,al
c0007346:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c000734c:	83 e0 df             	and    eax,0xffffffdf
c000734f:	09 d0                	or     eax,edx
c0007351:	f7 05 10 09 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0020910,0x401
c000735b:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007361:	0f 84 c2 00 00 00    	je     c0007429 <Computer::detectFeatures()+0x1df>
c0007367:	83 e0 fe             	and    eax,0xfffffffe
c000736a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007370:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0007376:	88 c2                	mov    dl,al
c0007378:	83 e2 09             	and    edx,0x9
c000737b:	fe ca                	dec    dl
c000737d:	75 09                	jne    c0007388 <Computer::detectFeatures()+0x13e>
c000737f:	83 e0 fe             	and    eax,0xfffffffe
c0007382:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007388:	83 ec 0c             	sub    esp,0xc
c000738b:	8d 44 24 18          	lea    eax,[esp+0x18]
c000738f:	50                   	push   eax
c0007390:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0007394:	55                   	push   ebp
c0007395:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007399:	57                   	push   edi
c000739a:	8d 74 24 18          	lea    esi,[esp+0x18]
c000739e:	56                   	push   esi
c000739f:	68 00 00 00 80       	push   0x80000000
c00073a4:	e8 e3 82 00 00       	call   c000f68c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00073a9:	83 c4 20             	add    esp,0x20
c00073ac:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c00073b3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00073b7:	0f 86 c3 fe ff ff    	jbe    c0007280 <Computer::detectFeatures()+0x36>
c00073bd:	83 ec 0c             	sub    esp,0xc
c00073c0:	50                   	push   eax
c00073c1:	55                   	push   ebp
c00073c2:	57                   	push   edi
c00073c3:	56                   	push   esi
c00073c4:	68 01 00 00 80       	push   0x80000001
c00073c9:	e8 be 82 00 00       	call   c000f68c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00073ce:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c00073d8:	83 c4 20             	add    esp,0x20
c00073db:	e9 a0 fe ff ff       	jmp    c0007280 <Computer::detectFeatures()+0x36>
c00073e0:	e8 0b 4a 01 00       	call   c001bdf0 <absolutelyNoChanceInHell>
c00073e5:	88 c2                	mov    dl,al
c00073e7:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00073ed:	c1 e2 07             	shl    edx,0x7
c00073f0:	83 e0 7f             	and    eax,0x7f
c00073f3:	09 d0                	or     eax,edx
c00073f5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00073fb:	84 c0                	test   al,al
c00073fd:	0f 89 bb fe ff ff    	jns    c00072be <Computer::detectFeatures()+0x74>
c0007403:	e8 68 47 01 00       	call   c001bb70 <avxDetect>
c0007408:	83 e0 01             	and    eax,0x1
c000740b:	c1 e0 05             	shl    eax,0x5
c000740e:	88 c2                	mov    dl,al
c0007410:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007416:	83 e0 df             	and    eax,0xffffffdf
c0007419:	09 d0                	or     eax,edx
c000741b:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007421:	83 c4 1c             	add    esp,0x1c
c0007424:	5b                   	pop    ebx
c0007425:	5e                   	pop    esi
c0007426:	5f                   	pop    edi
c0007427:	5d                   	pop    ebp
c0007428:	c3                   	ret    
c0007429:	83 ec 0c             	sub    esp,0xc
c000742c:	68 00 02 00 00       	push   0x200
c0007431:	e8 da 82 00 00       	call   c000f710 <CPU::cpuidCheckEDX(unsigned int)>
c0007436:	83 c4 10             	add    esp,0x10
c0007439:	83 e0 01             	and    eax,0x1
c000743c:	88 c2                	mov    dl,al
c000743e:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0007444:	83 e0 fe             	and    eax,0xfffffffe
c0007447:	09 d0                	or     eax,edx
c0007449:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000744f:	e9 1c ff ff ff       	jmp    c0007370 <Computer::detectFeatures()+0x126>

c0007454 <Computer::displayFeatures()>:
c0007454:	c3                   	ret    
c0007455:	90                   	nop

c0007456 <Computer::rdmsr(unsigned int)>:
c0007456:	83 ec 0c             	sub    esp,0xc
c0007459:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000745d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007464:	74 0a                	je     c0007470 <Computer::rdmsr(unsigned int)+0x1a>
c0007466:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000746a:	0f 32                	rdmsr  
c000746c:	83 c4 0c             	add    esp,0xc
c000746f:	c3                   	ret    
c0007470:	83 ec 0c             	sub    esp,0xc
c0007473:	68 a1 d5 01 c0       	push   0xc001d5a1
c0007478:	e8 7a 92 00 00       	call   c00106f7 <Krnl::panic(char const*)>
c000747d:	83 c4 10             	add    esp,0x10
c0007480:	eb e4                	jmp    c0007466 <Computer::rdmsr(unsigned int)+0x10>

c0007482 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0007482:	57                   	push   edi
c0007483:	56                   	push   esi
c0007484:	52                   	push   edx
c0007485:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007489:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000748d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0007491:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007498:	74 0e                	je     c00074a8 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000749a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000749e:	89 f0                	mov    eax,esi
c00074a0:	89 fa                	mov    edx,edi
c00074a2:	0f 30                	wrmsr  
c00074a4:	58                   	pop    eax
c00074a5:	5e                   	pop    esi
c00074a6:	5f                   	pop    edi
c00074a7:	c3                   	ret    
c00074a8:	83 ec 0c             	sub    esp,0xc
c00074ab:	68 a7 d5 01 c0       	push   0xc001d5a7
c00074b0:	e8 42 92 00 00       	call   c00106f7 <Krnl::panic(char const*)>
c00074b5:	83 c4 10             	add    esp,0x10
c00074b8:	eb e0                	jmp    c000749a <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c00074ba <Computer::shutdown()>:
c00074ba:	83 ec 0c             	sub    esp,0xc
c00074bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074c1:	8b 10                	mov    edx,DWORD PTR [eax]
c00074c3:	6a 00                	push   0x0
c00074c5:	6a 00                	push   0x0
c00074c7:	6a 00                	push   0x0
c00074c9:	50                   	push   eax
c00074ca:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00074cd:	83 c4 1c             	add    esp,0x1c
c00074d0:	c3                   	ret    
c00074d1:	90                   	nop

c00074d2 <Computer::restart()>:
c00074d2:	83 ec 0c             	sub    esp,0xc
c00074d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074d9:	8b 10                	mov    edx,DWORD PTR [eax]
c00074db:	6a 00                	push   0x0
c00074dd:	6a 00                	push   0x0
c00074df:	6a 01                	push   0x1
c00074e1:	50                   	push   eax
c00074e2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00074e5:	83 c4 1c             	add    esp,0x1c
c00074e8:	c3                   	ret    
c00074e9:	90                   	nop

c00074ea <Computer::sleep()>:
c00074ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00074ee:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c00074f4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00074f8:	e9 8b 7c 00 00       	jmp    c000f188 <ACPI::sleep()>
c00074fd:	90                   	nop

c00074fe <Computer::nmiEnabled()>:
c00074fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007502:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007508:	c3                   	ret    
c0007509:	90                   	nop

c000750a <Computer::readCMOS(unsigned char)>:
c000750a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000750e:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0007515:	19 c0                	sbb    eax,eax
c0007517:	83 e0 80             	and    eax,0xffffff80
c000751a:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000751e:	e6 70                	out    0x70,al
c0007520:	e4 71                	in     al,0x71
c0007522:	c3                   	ret    
c0007523:	90                   	nop

c0007524 <Computer::enableNMI(bool)>:
c0007524:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007528:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000752c:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0007532:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000753a:	eb ce                	jmp    c000750a <Computer::readCMOS(unsigned char)>

c000753c <Computer::open(int, int, void*)>:
c000753c:	56                   	push   esi
c000753d:	53                   	push   ebx
c000753e:	83 ec 10             	sub    esp,0x10
c0007541:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007545:	f6 05 10 09 02 c0 04 	test   BYTE PTR ds:0xc0020910,0x4
c000754c:	68 ad d5 01 c0       	push   0xc001d5ad
c0007551:	0f 94 05 e0 f7 01 c0 	sete   BYTE PTR ds:0xc001f7e0
c0007558:	e8 16 09 00 00       	call   c0007e73 <Krnl::setBootMessage(char const*)>
c000755d:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0007564:	e8 b0 08 00 00       	call   c0007e19 <malloc>
c0007569:	89 04 24             	mov    DWORD PTR [esp],eax
c000756c:	89 c6                	mov    esi,eax
c000756e:	e8 ad 77 00 00       	call   c000ed20 <ACPI::ACPI()>
c0007573:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0007579:	58                   	pop    eax
c000757a:	5a                   	pop    edx
c000757b:	56                   	push   esi
c000757c:	53                   	push   ebx
c000757d:	e8 66 4a 00 00       	call   c000bfe8 <Device::addChild(Device*)>
c0007582:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007585:	e8 c0 fc ff ff       	call   c000724a <Computer::detectFeatures()>
c000758a:	59                   	pop    ecx
c000758b:	5e                   	pop    esi
c000758c:	6a 01                	push   0x1
c000758e:	53                   	push   ebx
c000758f:	e8 90 ff ff ff       	call   c0007524 <Computer::enableNMI(bool)>
c0007594:	c7 04 24 c5 d5 01 c0 	mov    DWORD PTR [esp],0xc001d5c5
c000759b:	e8 d3 08 00 00       	call   c0007e73 <Krnl::setBootMessage(char const*)>
c00075a0:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c00075a7:	e8 6d 08 00 00       	call   c0007e19 <malloc>
c00075ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00075af:	89 c6                	mov    esi,eax
c00075b1:	e8 12 82 00 00       	call   c000f7c8 <CPU::CPU()>
c00075b6:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c00075bc:	58                   	pop    eax
c00075bd:	5a                   	pop    edx
c00075be:	56                   	push   esi
c00075bf:	53                   	push   ebx
c00075c0:	e8 23 4a 00 00       	call   c000bfe8 <Device::addChild(Device*)>
c00075c5:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00075cb:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00075cf:	8b 10                	mov    edx,DWORD PTR [eax]
c00075d1:	51                   	push   ecx
c00075d2:	6a 00                	push   0x0
c00075d4:	6a 00                	push   0x0
c00075d6:	50                   	push   eax
c00075d7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00075da:	83 c4 14             	add    esp,0x14
c00075dd:	68 74 d6 01 c0       	push   0xc001d674
c00075e2:	e8 8c 08 00 00       	call   c0007e73 <Krnl::setBootMessage(char const*)>
c00075e7:	e8 34 e1 00 00       	call   c0015720 <HalInitialiseCoprocessor()>
c00075ec:	c7 04 24 df d5 01 c0 	mov    DWORD PTR [esp],0xc001d5df
c00075f3:	e8 7b 08 00 00       	call   c0007e73 <Krnl::setBootMessage(char const*)>
c00075f8:	c7 04 24 5d 70 00 c0 	mov    DWORD PTR [esp],0xc000705d
c00075ff:	e8 40 c3 00 00       	call   c0013944 <setupMultitasking(void (*)())>
c0007604:	83 c4 14             	add    esp,0x14
c0007607:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000760c:	5b                   	pop    ebx
c000760d:	5e                   	pop    esi
c000760e:	c3                   	ret    
c000760f:	90                   	nop

c0007610 <Computer::disableNMI()>:
c0007610:	6a 00                	push   0x0
c0007612:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007616:	50                   	push   eax
c0007617:	e8 08 ff ff ff       	call   c0007524 <Computer::enableNMI(bool)>
c000761c:	5a                   	pop    edx
c000761d:	59                   	pop    ecx
c000761e:	c3                   	ret    
c000761f:	90                   	nop

c0007620 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007620:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007624:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000762b:	19 c0                	sbb    eax,eax
c000762d:	83 e0 80             	and    eax,0xffffff80
c0007630:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0007634:	e6 70                	out    0x70,al
c0007636:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000763a:	e6 71                	out    0x71,al
c000763c:	c3                   	ret    
c000763d:	90                   	nop

c000763e <Computer::handleNMI()>:
c000763e:	56                   	push   esi
c000763f:	53                   	push   ebx
c0007640:	83 ec 10             	sub    esp,0x10
c0007643:	e4 92                	in     al,0x92
c0007645:	89 c6                	mov    esi,eax
c0007647:	e4 61                	in     al,0x61
c0007649:	68 fa d5 01 c0       	push   0xc001d5fa
c000764e:	88 c3                	mov    bl,al
c0007650:	e8 53 35 00 00       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c0007655:	83 c4 10             	add    esp,0x10
c0007658:	83 e6 10             	and    esi,0x10
c000765b:	75 0d                	jne    c000766a <Computer::handleNMI()+0x2c>
c000765d:	f6 c3 40             	test   bl,0x40
c0007660:	75 1d                	jne    c000767f <Computer::handleNMI()+0x41>
c0007662:	84 db                	test   bl,bl
c0007664:	78 2d                	js     c0007693 <Computer::handleNMI()+0x55>
c0007666:	58                   	pop    eax
c0007667:	5b                   	pop    ebx
c0007668:	5e                   	pop    esi
c0007669:	c3                   	ret    
c000766a:	83 ec 0c             	sub    esp,0xc
c000766d:	68 0b d6 01 c0       	push   0xc001d60b
c0007672:	e8 80 90 00 00       	call   c00106f7 <Krnl::panic(char const*)>
c0007677:	83 c4 10             	add    esp,0x10
c000767a:	f6 c3 40             	test   bl,0x40
c000767d:	74 e3                	je     c0007662 <Computer::handleNMI()+0x24>
c000767f:	83 ec 0c             	sub    esp,0xc
c0007682:	68 18 d6 01 c0       	push   0xc001d618
c0007687:	e8 6b 90 00 00       	call   c00106f7 <Krnl::panic(char const*)>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	84 db                	test   bl,bl
c0007691:	79 d3                	jns    c0007666 <Computer::handleNMI()+0x28>
c0007693:	c7 44 24 10 22 d6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d622
c000769b:	5a                   	pop    edx
c000769c:	5b                   	pop    ebx
c000769d:	5e                   	pop    esi
c000769e:	e9 54 90 00 00       	jmp    c00106f7 <Krnl::panic(char const*)>
c00076a3:	90                   	nop

c00076a4 <GDTEntry::setBase(unsigned int)>:
c00076a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00076a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076ac:	89 c1                	mov    ecx,eax
c00076ae:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00076b2:	c1 e9 10             	shr    ecx,0x10
c00076b5:	c1 e8 18             	shr    eax,0x18
c00076b8:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c00076bb:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c00076be:	c3                   	ret    
c00076bf:	90                   	nop

c00076c0 <GDTEntry::setLimit(unsigned int)>:
c00076c0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00076c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00076c8:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c00076cb:	66 89 01             	mov    WORD PTR [ecx],ax
c00076ce:	83 e2 f0             	and    edx,0xfffffff0
c00076d1:	c1 e8 10             	shr    eax,0x10
c00076d4:	83 e0 0f             	and    eax,0xf
c00076d7:	09 d0                	or     eax,edx
c00076d9:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c00076dc:	c3                   	ret    
c00076dd:	90                   	nop

c00076de <GDT::GDT()>:
c00076de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00076e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00076e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00076ec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00076f2:	90                   	nop
c00076f3:	c3                   	ret    

c00076f4 <GDT::addEntry(GDTEntry)>:
c00076f4:	53                   	push   ebx
c00076f5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00076f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00076fd:	8b 02                	mov    eax,DWORD PTR [edx]
c00076ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007703:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0007707:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000770b:	8d 48 01             	lea    ecx,[eax+0x1]
c000770e:	c1 e0 03             	shl    eax,0x3
c0007711:	89 0a                	mov    DWORD PTR [edx],ecx
c0007713:	5b                   	pop    ebx
c0007714:	c3                   	ret    
c0007715:	90                   	nop

c0007716 <GDT::getNumberOfEntries()>:
c0007716:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000771a:	8b 00                	mov    eax,DWORD PTR [eax]
c000771c:	c3                   	ret    
c000771d:	90                   	nop

c000771e <GDT::flush()>:
c000771e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007722:	8b 10                	mov    edx,DWORD PTR [eax]
c0007724:	83 c0 04             	add    eax,0x4
c0007727:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000772e:	a3 02 09 02 c0       	mov    ds:0xc0020902,eax
c0007733:	66 89 15 00 09 02 c0 	mov    WORD PTR ds:0xc0020900,dx
c000773a:	e9 3e 8c ff ff       	jmp    c000037d <loadGDT>
c000773f:	90                   	nop

c0007740 <GDT::setup()>:
c0007740:	57                   	push   edi
c0007741:	56                   	push   esi
c0007742:	53                   	push   ebx
c0007743:	83 ec 30             	sub    esp,0x30
c0007746:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000774a:	6a 00                	push   0x0
c000774c:	8d 74 24 14          	lea    esi,[esp+0x14]
c0007750:	56                   	push   esi
c0007751:	e8 4e ff ff ff       	call   c00076a4 <GDTEntry::setBase(unsigned int)>
c0007756:	6a 00                	push   0x0
c0007758:	56                   	push   esi
c0007759:	e8 62 ff ff ff       	call   c00076c0 <GDTEntry::setLimit(unsigned int)>
c000775e:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007766:	6a 00                	push   0x0
c0007768:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000776c:	56                   	push   esi
c000776d:	e8 32 ff ff ff       	call   c00076a4 <GDTEntry::setBase(unsigned int)>
c0007772:	68 ff ff ff 00       	push   0xffffff
c0007777:	56                   	push   esi
c0007778:	e8 43 ff ff ff       	call   c00076c0 <GDTEntry::setLimit(unsigned int)>
c000777d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007781:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007785:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007789:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000778d:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007792:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007797:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000779b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000779f:	89 f8                	mov    eax,edi
c00077a1:	89 fa                	mov    edx,edi
c00077a3:	80 e4 f7             	and    ah,0xf7
c00077a6:	80 ce 60             	or     dh,0x60
c00077a9:	89 c7                	mov    edi,eax
c00077ab:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00077af:	80 cc 60             	or     ah,0x60
c00077b2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00077b6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00077ba:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00077be:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00077c2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00077c6:	83 c4 20             	add    esp,0x20
c00077c9:	6a 00                	push   0x0
c00077cb:	8d 44 24 24          	lea    eax,[esp+0x24]
c00077cf:	50                   	push   eax
c00077d0:	e8 cf fe ff ff       	call   c00076a4 <GDTEntry::setBase(unsigned int)>
c00077d5:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00077d9:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c00077dd:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c00077e2:	6a 00                	push   0x0
c00077e4:	8d 44 24 34          	lea    eax,[esp+0x34]
c00077e8:	50                   	push   eax
c00077e9:	e8 b6 fe ff ff       	call   c00076a4 <GDTEntry::setBase(unsigned int)>
c00077ee:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c00077f3:	83 c4 0c             	add    esp,0xc
c00077f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00077fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00077fe:	53                   	push   ebx
c00077ff:	e8 f0 fe ff ff       	call   c00076f4 <GDT::addEntry(GDTEntry)>
c0007804:	83 c4 0c             	add    esp,0xc
c0007807:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000780b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000780f:	53                   	push   ebx
c0007810:	e8 df fe ff ff       	call   c00076f4 <GDT::addEntry(GDTEntry)>
c0007815:	83 c4 0c             	add    esp,0xc
c0007818:	57                   	push   edi
c0007819:	56                   	push   esi
c000781a:	53                   	push   ebx
c000781b:	e8 d4 fe ff ff       	call   c00076f4 <GDT::addEntry(GDTEntry)>
c0007820:	83 c4 0c             	add    esp,0xc
c0007823:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0007827:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000782b:	53                   	push   ebx
c000782c:	e8 c3 fe ff ff       	call   c00076f4 <GDT::addEntry(GDTEntry)>
c0007831:	83 c4 0c             	add    esp,0xc
c0007834:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007838:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000783c:	53                   	push   ebx
c000783d:	e8 b2 fe ff ff       	call   c00076f4 <GDT::addEntry(GDTEntry)>
c0007842:	83 c4 0c             	add    esp,0xc
c0007845:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007849:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784d:	53                   	push   ebx
c000784e:	e8 a1 fe ff ff       	call   c00076f4 <GDT::addEntry(GDTEntry)>
c0007853:	83 c4 0c             	add    esp,0xc
c0007856:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000785a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000785e:	53                   	push   ebx
c000785f:	e8 90 fe ff ff       	call   c00076f4 <GDT::addEntry(GDTEntry)>
c0007864:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007867:	e8 b2 fe ff ff       	call   c000771e <GDT::flush()>
c000786c:	83 c4 40             	add    esp,0x40
c000786f:	5b                   	pop    ebx
c0007870:	5e                   	pop    esi
c0007871:	5f                   	pop    edi
c0007872:	c3                   	ret    

c0007873 <idleFunction(void*)>:
c0007873:	83 ec 0c             	sub    esp,0xc
c0007876:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c000787b:	48                   	dec    eax
c000787c:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c0007881:	75 01                	jne    c0007884 <idleFunction(void*)+0x11>
c0007883:	fb                   	sti    
c0007884:	f4                   	hlt    
c0007885:	e8 68 4b 01 00       	call   c001c3f2 <idleCommon()>
c000788a:	eb f8                	jmp    c0007884 <idleFunction(void*)+0x11>

c000788c <IDTEntry::IDTEntry(bool)>:
c000788c:	83 ec 04             	sub    esp,0x4
c000788f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007893:	88 04 24             	mov    BYTE PTR [esp],al
c0007896:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000789a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00078a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078a4:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00078a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078ac:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00078af:	83 e2 f0             	and    edx,0xfffffff0
c00078b2:	83 ca 0e             	or     edx,0xe
c00078b5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00078b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078bc:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00078bf:	83 e2 ef             	and    edx,0xffffffef
c00078c2:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00078c5:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00078c9:	74 05                	je     c00078d0 <IDTEntry::IDTEntry(bool)+0x44>
c00078cb:	b2 03                	mov    dl,0x3
c00078cd:	eb 05                	jmp    c00078d4 <IDTEntry::IDTEntry(bool)+0x48>
c00078cf:	90                   	nop
c00078d0:	b2 00                	mov    dl,0x0
c00078d2:	66 90                	xchg   ax,ax
c00078d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078d8:	83 e2 03             	and    edx,0x3
c00078db:	88 d1                	mov    cl,dl
c00078dd:	c1 e1 05             	shl    ecx,0x5
c00078e0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00078e3:	83 e2 9f             	and    edx,0xffffff9f
c00078e6:	09 ca                	or     edx,ecx
c00078e8:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00078eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078ef:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00078f2:	83 ca 80             	or     edx,0xffffff80
c00078f5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00078f8:	90                   	nop
c00078f9:	83 c4 04             	add    esp,0x4
c00078fc:	c3                   	ret    
c00078fd:	90                   	nop

c00078fe <IDTEntry::setOffset(unsigned int)>:
c00078fe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007902:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007906:	66 89 02             	mov    WORD PTR [edx],ax
c0007909:	c1 e8 10             	shr    eax,0x10
c000790c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0007910:	c3                   	ret    
c0007911:	90                   	nop
c0007912:	66 90                	xchg   ax,ax

c0007914 <IDT::IDT()>:
c0007914:	90                   	nop
c0007915:	c3                   	ret    

c0007916 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0007916:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000791a:	83 c0 30             	add    eax,0x30
c000791d:	c3                   	ret    

c000791e <IDT::addEntry(IDTEntry, int)>:
c000791e:	53                   	push   ebx
c000791f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007923:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007927:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000792b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000792f:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c0007932:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0007936:	5b                   	pop    ebx
c0007937:	c3                   	ret    

c0007938 <IDT::addEntry(int, void (*)(), bool)>:
c0007938:	53                   	push   ebx
c0007939:	83 ec 10             	sub    esp,0x10
c000793c:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0007941:	50                   	push   eax
c0007942:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0007946:	53                   	push   ebx
c0007947:	e8 40 ff ff ff       	call   c000788c <IDTEntry::IDTEntry(bool)>
c000794c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007950:	53                   	push   ebx
c0007951:	e8 a8 ff ff ff       	call   c00078fe <IDTEntry::setOffset(unsigned int)>
c0007956:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000795a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000795e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007962:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007966:	e8 b3 ff ff ff       	call   c000791e <IDT::addEntry(IDTEntry, int)>
c000796b:	83 c4 30             	add    esp,0x30
c000796e:	5b                   	pop    ebx
c000796f:	c3                   	ret    

c0007970 <IDT::flush()>:
c0007970:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007974:	66 c7 05 08 09 02 c0 ff 07 	mov    WORD PTR ds:0xc0020908,0x7ff
c000797d:	a3 0a 09 02 c0       	mov    ds:0xc002090a,eax
c0007982:	0f 01 1d 08 09 02 c0 	lidtd  ds:0xc0020908
c0007989:	c3                   	ret    

c000798a <IDT::setup()>:
c000798a:	57                   	push   edi
c000798b:	56                   	push   esi
c000798c:	53                   	push   ebx
c000798d:	83 ec 10             	sub    esp,0x10
c0007990:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007994:	6a 00                	push   0x0
c0007996:	68 00 bc 01 c0       	push   0xc001bc00
c000799b:	6a 00                	push   0x0
c000799d:	53                   	push   ebx
c000799e:	e8 95 ff ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c00079a3:	6a 00                	push   0x0
c00079a5:	68 10 bc 01 c0       	push   0xc001bc10
c00079aa:	6a 01                	push   0x1
c00079ac:	53                   	push   ebx
c00079ad:	e8 86 ff ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c00079b2:	83 c4 20             	add    esp,0x20
c00079b5:	6a 00                	push   0x0
c00079b7:	68 1a bc 01 c0       	push   0xc001bc1a
c00079bc:	6a 02                	push   0x2
c00079be:	53                   	push   ebx
c00079bf:	e8 74 ff ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c00079c4:	6a 00                	push   0x0
c00079c6:	68 24 bc 01 c0       	push   0xc001bc24
c00079cb:	6a 03                	push   0x3
c00079cd:	53                   	push   ebx
c00079ce:	e8 65 ff ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c00079d3:	83 c4 20             	add    esp,0x20
c00079d6:	6a 00                	push   0x0
c00079d8:	68 2e bc 01 c0       	push   0xc001bc2e
c00079dd:	6a 04                	push   0x4
c00079df:	53                   	push   ebx
c00079e0:	e8 53 ff ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c00079e5:	6a 00                	push   0x0
c00079e7:	68 38 bc 01 c0       	push   0xc001bc38
c00079ec:	6a 05                	push   0x5
c00079ee:	53                   	push   ebx
c00079ef:	e8 44 ff ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c00079f4:	83 c4 20             	add    esp,0x20
c00079f7:	6a 00                	push   0x0
c00079f9:	68 42 bc 01 c0       	push   0xc001bc42
c00079fe:	6a 06                	push   0x6
c0007a00:	53                   	push   ebx
c0007a01:	e8 32 ff ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c0007a06:	6a 00                	push   0x0
c0007a08:	68 4c bc 01 c0       	push   0xc001bc4c
c0007a0d:	6a 07                	push   0x7
c0007a0f:	53                   	push   ebx
c0007a10:	e8 23 ff ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c0007a15:	83 c4 20             	add    esp,0x20
c0007a18:	6a 00                	push   0x0
c0007a1a:	68 56 bc 01 c0       	push   0xc001bc56
c0007a1f:	6a 08                	push   0x8
c0007a21:	53                   	push   ebx
c0007a22:	e8 11 ff ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c0007a27:	6a 00                	push   0x0
c0007a29:	68 5e bc 01 c0       	push   0xc001bc5e
c0007a2e:	6a 09                	push   0x9
c0007a30:	53                   	push   ebx
c0007a31:	e8 02 ff ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c0007a36:	83 c4 20             	add    esp,0x20
c0007a39:	6a 00                	push   0x0
c0007a3b:	68 68 bc 01 c0       	push   0xc001bc68
c0007a40:	6a 0a                	push   0xa
c0007a42:	53                   	push   ebx
c0007a43:	e8 f0 fe ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c0007a48:	6a 00                	push   0x0
c0007a4a:	68 70 bc 01 c0       	push   0xc001bc70
c0007a4f:	6a 0b                	push   0xb
c0007a51:	53                   	push   ebx
c0007a52:	e8 e1 fe ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c0007a57:	83 c4 20             	add    esp,0x20
c0007a5a:	6a 00                	push   0x0
c0007a5c:	68 78 bc 01 c0       	push   0xc001bc78
c0007a61:	6a 0c                	push   0xc
c0007a63:	53                   	push   ebx
c0007a64:	e8 cf fe ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c0007a69:	6a 00                	push   0x0
c0007a6b:	68 80 bc 01 c0       	push   0xc001bc80
c0007a70:	6a 0d                	push   0xd
c0007a72:	53                   	push   ebx
c0007a73:	e8 c0 fe ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c0007a78:	83 c4 20             	add    esp,0x20
c0007a7b:	6a 00                	push   0x0
c0007a7d:	68 88 bc 01 c0       	push   0xc001bc88
c0007a82:	6a 0e                	push   0xe
c0007a84:	53                   	push   ebx
c0007a85:	e8 ae fe ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c0007a8a:	6a 00                	push   0x0
c0007a8c:	68 90 bc 01 c0       	push   0xc001bc90
c0007a91:	6a 0f                	push   0xf
c0007a93:	53                   	push   ebx
c0007a94:	e8 9f fe ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c0007a99:	83 c4 20             	add    esp,0x20
c0007a9c:	6a 00                	push   0x0
c0007a9e:	68 9a bc 01 c0       	push   0xc001bc9a
c0007aa3:	6a 10                	push   0x10
c0007aa5:	53                   	push   ebx
c0007aa6:	e8 8d fe ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c0007aab:	6a 00                	push   0x0
c0007aad:	68 a4 bc 01 c0       	push   0xc001bca4
c0007ab2:	6a 11                	push   0x11
c0007ab4:	53                   	push   ebx
c0007ab5:	e8 7e fe ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c0007aba:	83 c4 20             	add    esp,0x20
c0007abd:	6a 00                	push   0x0
c0007abf:	68 ae bc 01 c0       	push   0xc001bcae
c0007ac4:	6a 12                	push   0x12
c0007ac6:	53                   	push   ebx
c0007ac7:	e8 6c fe ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c0007acc:	6a 01                	push   0x1
c0007ace:	68 48 bd 01 c0       	push   0xc001bd48
c0007ad3:	6a 60                	push   0x60
c0007ad5:	53                   	push   ebx
c0007ad6:	e8 5d fe ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c0007adb:	83 c4 20             	add    esp,0x20
c0007ade:	6a 00                	push   0x0
c0007ae0:	68 4f bd 01 c0       	push   0xc001bd4f
c0007ae5:	6a 20                	push   0x20
c0007ae7:	53                   	push   ebx
c0007ae8:	e8 4b fe ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c0007aed:	6a 00                	push   0x0
c0007aef:	68 3a bd 01 c0       	push   0xc001bd3a
c0007af4:	6a 21                	push   0x21
c0007af6:	53                   	push   ebx
c0007af7:	e8 3c fe ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c0007afc:	83 c4 20             	add    esp,0x20
c0007aff:	6a 00                	push   0x0
c0007b01:	68 41 bd 01 c0       	push   0xc001bd41
c0007b06:	6a 22                	push   0x22
c0007b08:	53                   	push   ebx
c0007b09:	e8 2a fe ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c0007b0e:	6a 00                	push   0x0
c0007b10:	68 b8 bc 01 c0       	push   0xc001bcb8
c0007b15:	6a 23                	push   0x23
c0007b17:	53                   	push   ebx
c0007b18:	e8 1b fe ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c0007b1d:	83 c4 20             	add    esp,0x20
c0007b20:	6a 00                	push   0x0
c0007b22:	68 c2 bc 01 c0       	push   0xc001bcc2
c0007b27:	6a 24                	push   0x24
c0007b29:	53                   	push   ebx
c0007b2a:	e8 09 fe ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c0007b2f:	6a 00                	push   0x0
c0007b31:	68 cc bc 01 c0       	push   0xc001bccc
c0007b36:	6a 25                	push   0x25
c0007b38:	53                   	push   ebx
c0007b39:	e8 fa fd ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c0007b3e:	83 c4 20             	add    esp,0x20
c0007b41:	6a 00                	push   0x0
c0007b43:	68 d6 bc 01 c0       	push   0xc001bcd6
c0007b48:	6a 26                	push   0x26
c0007b4a:	53                   	push   ebx
c0007b4b:	e8 e8 fd ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c0007b50:	6a 00                	push   0x0
c0007b52:	68 e0 bc 01 c0       	push   0xc001bce0
c0007b57:	6a 27                	push   0x27
c0007b59:	53                   	push   ebx
c0007b5a:	e8 d9 fd ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c0007b5f:	83 c4 20             	add    esp,0x20
c0007b62:	6a 00                	push   0x0
c0007b64:	68 ea bc 01 c0       	push   0xc001bcea
c0007b69:	6a 28                	push   0x28
c0007b6b:	53                   	push   ebx
c0007b6c:	e8 c7 fd ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c0007b71:	6a 00                	push   0x0
c0007b73:	68 f4 bc 01 c0       	push   0xc001bcf4
c0007b78:	6a 29                	push   0x29
c0007b7a:	53                   	push   ebx
c0007b7b:	e8 b8 fd ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c0007b80:	83 c4 20             	add    esp,0x20
c0007b83:	6a 00                	push   0x0
c0007b85:	68 fe bc 01 c0       	push   0xc001bcfe
c0007b8a:	6a 2a                	push   0x2a
c0007b8c:	53                   	push   ebx
c0007b8d:	e8 a6 fd ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c0007b92:	6a 00                	push   0x0
c0007b94:	68 08 bd 01 c0       	push   0xc001bd08
c0007b99:	6a 2b                	push   0x2b
c0007b9b:	53                   	push   ebx
c0007b9c:	e8 97 fd ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c0007ba1:	83 c4 20             	add    esp,0x20
c0007ba4:	6a 00                	push   0x0
c0007ba6:	68 12 bd 01 c0       	push   0xc001bd12
c0007bab:	6a 2c                	push   0x2c
c0007bad:	53                   	push   ebx
c0007bae:	e8 85 fd ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c0007bb3:	6a 00                	push   0x0
c0007bb5:	68 1c bd 01 c0       	push   0xc001bd1c
c0007bba:	6a 2d                	push   0x2d
c0007bbc:	53                   	push   ebx
c0007bbd:	e8 76 fd ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c0007bc2:	83 c4 20             	add    esp,0x20
c0007bc5:	6a 00                	push   0x0
c0007bc7:	68 26 bd 01 c0       	push   0xc001bd26
c0007bcc:	6a 2e                	push   0x2e
c0007bce:	53                   	push   ebx
c0007bcf:	e8 64 fd ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c0007bd4:	6a 00                	push   0x0
c0007bd6:	68 30 bd 01 c0       	push   0xc001bd30
c0007bdb:	6a 2f                	push   0x2f
c0007bdd:	53                   	push   ebx
c0007bde:	e8 55 fd ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c0007be3:	83 c4 20             	add    esp,0x20
c0007be6:	6a 00                	push   0x0
c0007be8:	68 86 bd 01 c0       	push   0xc001bd86
c0007bed:	6a 30                	push   0x30
c0007bef:	53                   	push   ebx
c0007bf0:	e8 43 fd ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c0007bf5:	6a 00                	push   0x0
c0007bf7:	68 90 bd 01 c0       	push   0xc001bd90
c0007bfc:	6a 31                	push   0x31
c0007bfe:	53                   	push   ebx
c0007bff:	e8 34 fd ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c0007c04:	83 c4 20             	add    esp,0x20
c0007c07:	6a 00                	push   0x0
c0007c09:	68 9a bd 01 c0       	push   0xc001bd9a
c0007c0e:	6a 32                	push   0x32
c0007c10:	53                   	push   ebx
c0007c11:	e8 22 fd ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c0007c16:	6a 00                	push   0x0
c0007c18:	68 a4 bd 01 c0       	push   0xc001bda4
c0007c1d:	6a 33                	push   0x33
c0007c1f:	53                   	push   ebx
c0007c20:	e8 13 fd ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c0007c25:	83 c4 20             	add    esp,0x20
c0007c28:	6a 00                	push   0x0
c0007c2a:	68 ae bd 01 c0       	push   0xc001bdae
c0007c2f:	6a 34                	push   0x34
c0007c31:	53                   	push   ebx
c0007c32:	e8 01 fd ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c0007c37:	6a 00                	push   0x0
c0007c39:	68 b8 bd 01 c0       	push   0xc001bdb8
c0007c3e:	6a 35                	push   0x35
c0007c40:	53                   	push   ebx
c0007c41:	e8 f2 fc ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c0007c46:	83 c4 20             	add    esp,0x20
c0007c49:	6a 00                	push   0x0
c0007c4b:	68 c2 bd 01 c0       	push   0xc001bdc2
c0007c50:	6a 36                	push   0x36
c0007c52:	53                   	push   ebx
c0007c53:	e8 e0 fc ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c0007c58:	6a 00                	push   0x0
c0007c5a:	68 cc bd 01 c0       	push   0xc001bdcc
c0007c5f:	6a 37                	push   0x37
c0007c61:	53                   	push   ebx
c0007c62:	e8 d1 fc ff ff       	call   c0007938 <IDT::addEntry(int, void (*)(), bool)>
c0007c67:	83 c4 1c             	add    esp,0x1c
c0007c6a:	6a 03                	push   0x3
c0007c6c:	6a 02                	push   0x2
c0007c6e:	ff 35 f0 09 02 c0    	push   DWORD PTR ds:0xc00209f0
c0007c74:	e8 75 24 00 00       	call   c000a0ee <VAS::allocatePages(int, int)>
c0007c79:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007c80:	89 c6                	mov    esi,eax
c0007c82:	e8 92 01 00 00       	call   c0007e19 <malloc>
c0007c87:	81 c6 00 20 00 00    	add    esi,0x2000
c0007c8d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c90:	89 c7                	mov    edi,eax
c0007c92:	e8 01 16 00 00       	call   c0009298 <TSS::TSS()>
c0007c97:	83 c4 0c             	add    esp,0xc
c0007c9a:	68 56 bc 01 c0       	push   0xc001bc56
c0007c9f:	56                   	push   esi
c0007ca0:	57                   	push   edi
c0007ca1:	e8 36 16 00 00       	call   c00092dc <TSS::setup(unsigned long, unsigned long)>
c0007ca6:	89 c6                	mov    esi,eax
c0007ca8:	58                   	pop    eax
c0007ca9:	5a                   	pop    edx
c0007caa:	6a 00                	push   0x0
c0007cac:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007cb0:	50                   	push   eax
c0007cb1:	e8 d6 fb ff ff       	call   c000788c <IDTEntry::IDTEntry(bool)>
c0007cb6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007cba:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007cbf:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007cc6:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007ccc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007cd0:	80 ce 05             	or     dh,0x5
c0007cd3:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007cd6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007cda:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007cde:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007ce1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007ce4:	e8 87 fc ff ff       	call   c0007970 <IDT::flush()>
c0007ce9:	83 c4 20             	add    esp,0x20
c0007cec:	5b                   	pop    ebx
c0007ced:	5e                   	pop    esi
c0007cee:	5f                   	pop    edi
c0007cef:	c3                   	ret    

c0007cf0 <sbrk>:
c0007cf0:	55                   	push   ebp
c0007cf1:	57                   	push   edi
c0007cf2:	56                   	push   esi
c0007cf3:	53                   	push   ebx
c0007cf4:	83 ec 1c             	sub    esp,0x1c
c0007cf7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007cfb:	85 c0                	test   eax,eax
c0007cfd:	74 5f                	je     c0007d5e <sbrk+0x6e>
c0007cff:	78 64                	js     c0007d65 <sbrk+0x75>
c0007d01:	8b 15 68 f6 01 c0    	mov    edx,DWORD PTR ds:0xc001f668
c0007d07:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007d0b:	05 ff 0f 00 00       	add    eax,0xfff
c0007d10:	89 c5                	mov    ebp,eax
c0007d12:	78 69                	js     c0007d7d <sbrk+0x8d>
c0007d14:	c1 fd 0c             	sar    ebp,0xc
c0007d17:	bb 00 00 00 00       	mov    ebx,0x0
c0007d1c:	8b 35 f0 09 02 c0    	mov    esi,DWORD PTR ds:0xc00209f0
c0007d22:	8b 3d 68 f6 01 c0    	mov    edi,DWORD PTR ds:0xc001f668
c0007d28:	e8 b9 04 00 00       	call   c00081e6 <Phys::allocatePage()>
c0007d2d:	68 01 04 00 00       	push   0x401
c0007d32:	57                   	push   edi
c0007d33:	50                   	push   eax
c0007d34:	56                   	push   esi
c0007d35:	e8 b0 22 00 00       	call   c0009fea <VAS::mapPage(unsigned long, unsigned long, int)>
c0007d3a:	81 05 68 f6 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f668,0x1000
c0007d44:	43                   	inc    ebx
c0007d45:	83 c4 10             	add    esp,0x10
c0007d48:	39 dd                	cmp    ebp,ebx
c0007d4a:	75 d0                	jne    c0007d1c <sbrk+0x2c>
c0007d4c:	0f 20 d8             	mov    eax,cr3
c0007d4f:	0f 22 d8             	mov    cr3,eax
c0007d52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d56:	83 c4 1c             	add    esp,0x1c
c0007d59:	5b                   	pop    ebx
c0007d5a:	5e                   	pop    esi
c0007d5b:	5f                   	pop    edi
c0007d5c:	5d                   	pop    ebp
c0007d5d:	c3                   	ret    
c0007d5e:	a1 68 f6 01 c0       	mov    eax,ds:0xc001f668
c0007d63:	eb f1                	jmp    c0007d56 <sbrk+0x66>
c0007d65:	83 ec 08             	sub    esp,0x8
c0007d68:	50                   	push   eax
c0007d69:	68 c4 d6 01 c0       	push   0xc001d6c4
c0007d6e:	e8 35 2e 00 00       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c0007d73:	83 c4 10             	add    esp,0x10
c0007d76:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007d7b:	eb d9                	jmp    c0007d56 <sbrk+0x66>
c0007d7d:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007d83:	eb 8f                	jmp    c0007d14 <sbrk+0x24>

c0007d85 <mmap>:
c0007d85:	83 ec 18             	sub    esp,0x18
c0007d88:	68 f4 d6 01 c0       	push   0xc001d6f4
c0007d8d:	e8 65 89 00 00       	call   c00106f7 <Krnl::panic(char const*)>
c0007d92:	b8 00 00 00 00       	mov    eax,0x0
c0007d97:	83 c4 1c             	add    esp,0x1c
c0007d9a:	c3                   	ret    

c0007d9b <munmap>:
c0007d9b:	83 ec 18             	sub    esp,0x18
c0007d9e:	68 f9 d6 01 c0       	push   0xc001d6f9
c0007da3:	e8 4f 89 00 00       	call   c00106f7 <Krnl::panic(char const*)>
c0007da8:	b8 00 00 00 00       	mov    eax,0x0
c0007dad:	83 c4 1c             	add    esp,0x1c
c0007db0:	c3                   	ret    

c0007db1 <liballoc_lock()>:
c0007db1:	fa                   	cli    
c0007db2:	ff 05 c8 3d 02 c0    	inc    DWORD PTR ds:0xc0023dc8
c0007db8:	b8 00 00 00 00       	mov    eax,0x0
c0007dbd:	c3                   	ret    

c0007dbe <liballoc_unlock()>:
c0007dbe:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c0007dc3:	48                   	dec    eax
c0007dc4:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c0007dc9:	75 01                	jne    c0007dcc <liballoc_unlock()+0xe>
c0007dcb:	fb                   	sti    
c0007dcc:	b8 00 00 00 00       	mov    eax,0x0
c0007dd1:	c3                   	ret    

c0007dd2 <liballoc_alloc(int)>:
c0007dd2:	83 ec 10             	sub    esp,0x10
c0007dd5:	6a 01                	push   0x1
c0007dd7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007ddb:	ff 35 f0 09 02 c0    	push   DWORD PTR ds:0xc00209f0
c0007de1:	e8 08 23 00 00       	call   c000a0ee <VAS::allocatePages(int, int)>
c0007de6:	83 c4 1c             	add    esp,0x1c
c0007de9:	c3                   	ret    

c0007dea <liballoc_free(void*, int)>:
c0007dea:	83 ec 14             	sub    esp,0x14
c0007ded:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007df1:	ff 35 f0 09 02 c0    	push   DWORD PTR ds:0xc00209f0
c0007df7:	e8 ae 1f 00 00       	call   c0009daa <VAS::freeAllocatedPages(unsigned long)>
c0007dfc:	b8 00 00 00 00       	mov    eax,0x0
c0007e01:	83 c4 1c             	add    esp,0x1c
c0007e04:	c3                   	ret    

c0007e05 <realloc>:
c0007e05:	83 ec 14             	sub    esp,0x14
c0007e08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e10:	e8 3c 97 ff ff       	call   c0001551 <dlrealloc>
c0007e15:	83 c4 1c             	add    esp,0x1c
c0007e18:	c3                   	ret    

c0007e19 <malloc>:
c0007e19:	83 ec 18             	sub    esp,0x18
c0007e1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e20:	e8 ef 91 ff ff       	call   c0001014 <dlmalloc>
c0007e25:	83 c4 1c             	add    esp,0x1c
c0007e28:	c3                   	ret    

c0007e29 <free>:
c0007e29:	83 ec 18             	sub    esp,0x18
c0007e2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e30:	e8 84 8e ff ff       	call   c0000cb9 <dlfree>
c0007e35:	83 c4 1c             	add    esp,0x1c
c0007e38:	c3                   	ret    

c0007e39 <rfree>:
c0007e39:	83 ec 18             	sub    esp,0x18
c0007e3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e40:	e8 74 8e ff ff       	call   c0000cb9 <dlfree>
c0007e45:	83 c4 1c             	add    esp,0x1c
c0007e48:	c3                   	ret    

c0007e49 <calloc>:
c0007e49:	56                   	push   esi
c0007e4a:	53                   	push   ebx
c0007e4b:	83 ec 10             	sub    esp,0x10
c0007e4e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007e52:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007e57:	53                   	push   ebx
c0007e58:	e8 bc ff ff ff       	call   c0007e19 <malloc>
c0007e5d:	89 c6                	mov    esi,eax
c0007e5f:	83 c4 0c             	add    esp,0xc
c0007e62:	53                   	push   ebx
c0007e63:	6a 00                	push   0x0
c0007e65:	50                   	push   eax
c0007e66:	e8 85 86 ff ff       	call   c00004f0 <memset>
c0007e6b:	89 f0                	mov    eax,esi
c0007e6d:	83 c4 14             	add    esp,0x14
c0007e70:	5b                   	pop    ebx
c0007e71:	5e                   	pop    esi
c0007e72:	c3                   	ret    

c0007e73 <Krnl::setBootMessage(char const*)>:
c0007e73:	57                   	push   edi
c0007e74:	56                   	push   esi
c0007e75:	53                   	push   ebx
c0007e76:	81 ec a4 00 00 00    	sub    esp,0xa4
c0007e7c:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0007e83:	68 9e 00 00 00       	push   0x9e
c0007e88:	6a 00                	push   0x0
c0007e8a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0007e8e:	56                   	push   esi
c0007e8f:	e8 5c 86 ff ff       	call   c00004f0 <memset>
c0007e94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007e97:	e8 c4 86 ff ff       	call   c0000560 <strlen>
c0007e9c:	ba 50 00 00 00       	mov    edx,0x50
c0007ea1:	83 c4 10             	add    esp,0x10
c0007ea4:	29 c2                	sub    edx,eax
c0007ea6:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0007eaa:	d1 ea                	shr    edx,1
c0007eac:	84 c0                	test   al,al
c0007eae:	74 19                	je     c0007ec9 <Krnl::setBootMessage(char const*)+0x56>
c0007eb0:	01 d2                	add    edx,edx
c0007eb2:	43                   	inc    ebx
c0007eb3:	01 f2                	add    edx,esi
c0007eb5:	80 cc 0f             	or     ah,0xf
c0007eb8:	83 c2 02             	add    edx,0x2
c0007ebb:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0007ebf:	43                   	inc    ebx
c0007ec0:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0007ec5:	84 c0                	test   al,al
c0007ec7:	75 ec                	jne    c0007eb5 <Krnl::setBootMessage(char const*)+0x42>
c0007ec9:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0007ece:	b9 9e 00 00 00       	mov    ecx,0x9e
c0007ed3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007ed5:	81 c4 a0 00 00 00    	add    esp,0xa0
c0007edb:	5b                   	pop    ebx
c0007edc:	5e                   	pop    esi
c0007edd:	5f                   	pop    edi
c0007ede:	c3                   	ret    

c0007edf <kernel_main>:
c0007edf:	55                   	push   ebp
c0007ee0:	57                   	push   edi
c0007ee1:	bf f9 03 00 00       	mov    edi,0x3f9
c0007ee6:	56                   	push   esi
c0007ee7:	89 fa                	mov    edx,edi
c0007ee9:	53                   	push   ebx
c0007eea:	31 f6                	xor    esi,esi
c0007eec:	83 ec 38             	sub    esp,0x38
c0007eef:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007ef4:	a3 10 09 02 c0       	mov    ds:0xc0020910,eax
c0007ef9:	89 f0                	mov    eax,esi
c0007efb:	ee                   	out    dx,al
c0007efc:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007f01:	b0 80                	mov    al,0x80
c0007f03:	89 da                	mov    edx,ebx
c0007f05:	ee                   	out    dx,al
c0007f06:	b1 03                	mov    cl,0x3
c0007f08:	ba f8 03 00 00       	mov    edx,0x3f8
c0007f0d:	88 c8                	mov    al,cl
c0007f0f:	ee                   	out    dx,al
c0007f10:	89 f0                	mov    eax,esi
c0007f12:	89 fa                	mov    edx,edi
c0007f14:	ee                   	out    dx,al
c0007f15:	88 c8                	mov    al,cl
c0007f17:	89 da                	mov    edx,ebx
c0007f19:	ee                   	out    dx,al
c0007f1a:	b0 c7                	mov    al,0xc7
c0007f1c:	ba fa 03 00 00       	mov    edx,0x3fa
c0007f21:	ee                   	out    dx,al
c0007f22:	b0 0b                	mov    al,0xb
c0007f24:	ba fc 03 00 00       	mov    edx,0x3fc
c0007f29:	ee                   	out    dx,al
c0007f2a:	68 00 d7 01 c0       	push   0xc001d700
c0007f2f:	e8 74 2c 00 00       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c0007f34:	0f be 05 80 f6 01 c0 	movsx  eax,BYTE PTR ds:0xc001f680
c0007f3b:	83 c4 10             	add    esp,0x10
c0007f3e:	84 c0                	test   al,al
c0007f40:	74 5c                	je     c0007f9e <kernel_main+0xbf>
c0007f42:	31 db                	xor    ebx,ebx
c0007f44:	bd 0a 00 00 00       	mov    ebp,0xa
c0007f49:	bf 05 00 00 00       	mov    edi,0x5
c0007f4e:	31 f6                	xor    esi,esi
c0007f50:	eb 14                	jmp    c0007f66 <kernel_main+0x87>
c0007f52:	47                   	inc    edi
c0007f53:	bd 0a 00 00 00       	mov    ebp,0xa
c0007f58:	31 f6                	xor    esi,esi
c0007f5a:	43                   	inc    ebx
c0007f5b:	0f be 83 80 f6 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe0980]
c0007f62:	84 c0                	test   al,al
c0007f64:	74 38                	je     c0007f9e <kernel_main+0xbf>
c0007f66:	80 be b6 f6 01 c0 db 	cmp    BYTE PTR [esi-0x3ffe094a],0xdb
c0007f6d:	0f 84 97 00 00 00    	je     c000800a <kernel_main+0x12b>
c0007f73:	3c 0d                	cmp    al,0xd
c0007f75:	74 e3                	je     c0007f5a <kernel_main+0x7b>
c0007f77:	3c 0a                	cmp    al,0xa
c0007f79:	74 d7                	je     c0007f52 <kernel_main+0x73>
c0007f7b:	83 ec 0c             	sub    esp,0xc
c0007f7e:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0007f82:	57                   	push   edi
c0007f83:	43                   	inc    ebx
c0007f84:	52                   	push   edx
c0007f85:	46                   	inc    esi
c0007f86:	6a 00                	push   0x0
c0007f88:	6a 0e                	push   0xe
c0007f8a:	50                   	push   eax
c0007f8b:	e8 c4 e4 00 00       	call   c0016454 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0007f90:	83 c4 20             	add    esp,0x20
c0007f93:	0f be 83 80 f6 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe0980]
c0007f9a:	84 c0                	test   al,al
c0007f9c:	75 c8                	jne    c0007f66 <kernel_main+0x87>
c0007f9e:	83 ec 0c             	sub    esp,0xc
c0007fa1:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007fa6:	05 ff 0f 00 00       	add    eax,0xfff
c0007fab:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007fb0:	50                   	push   eax
c0007fb1:	e8 82 03 00 00       	call   c0008338 <Phys::physicalMemorySetup(unsigned int)>
c0007fb6:	e8 59 1b 00 00       	call   c0009b14 <Virt::virtualMemorySetup()>
c0007fbb:	58                   	pop    eax
c0007fbc:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007fc0:	53                   	push   ebx
c0007fc1:	e8 0a 1c 00 00       	call   c0009bd0 <VAS::VAS()>
c0007fc6:	89 1d f0 09 02 c0    	mov    DWORD PTR ds:0xc00209f0,ebx
c0007fcc:	e8 4f 80 ff ff       	call   c0000020 <callGlobalConstructors>
c0007fd1:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007fd8:	e8 3c fe ff ff       	call   c0007e19 <malloc>
c0007fdd:	89 04 24             	mov    DWORD PTR [esp],eax
c0007fe0:	89 c6                	mov    esi,eax
c0007fe2:	e8 af f1 ff ff       	call   c0007196 <Computer::Computer()>
c0007fe7:	6a 00                	push   0x0
c0007fe9:	89 35 f8 08 02 c0    	mov    DWORD PTR ds:0xc00208f8,esi
c0007fef:	6a 00                	push   0x0
c0007ff1:	6a 00                	push   0x0
c0007ff3:	56                   	push   esi
c0007ff4:	e8 43 f5 ff ff       	call   c000753c <Computer::open(int, int, void*)>
c0007ff9:	83 c4 14             	add    esp,0x14
c0007ffc:	53                   	push   ebx
c0007ffd:	e8 84 1e 00 00       	call   c0009e86 <VAS::~VAS()>
c0008002:	83 c4 3c             	add    esp,0x3c
c0008005:	5b                   	pop    ebx
c0008006:	5e                   	pop    esi
c0008007:	5f                   	pop    edi
c0008008:	5d                   	pop    ebp
c0008009:	c3                   	ret    
c000800a:	31 d2                	xor    edx,edx
c000800c:	8a 96 b5 f6 01 c0    	mov    dl,BYTE PTR [esi-0x3ffe094b]
c0008012:	83 e2 fe             	and    edx,0xfffffffe
c0008015:	81 fa ba 00 00 00    	cmp    edx,0xba
c000801b:	0f 85 52 ff ff ff    	jne    c0007f73 <kernel_main+0x94>
c0008021:	45                   	inc    ebp
c0008022:	e9 4c ff ff ff       	jmp    c0007f73 <kernel_main+0x94>

c0008027 <Phys::allocateDMA(unsigned long)>:
c0008027:	55                   	push   ebp
c0008028:	31 ed                	xor    ebp,ebp
c000802a:	57                   	push   edi
c000802b:	56                   	push   esi
c000802c:	53                   	push   ebx
c000802d:	31 db                	xor    ebx,ebx
c000802f:	83 ec 1c             	sub    esp,0x1c
c0008032:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008036:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000803e:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0008044:	31 c0                	xor    eax,eax
c0008046:	c1 ef 0c             	shr    edi,0xc
c0008049:	eb 19                	jmp    c0008064 <Phys::allocateDMA(unsigned long)+0x3d>
c000804b:	85 c0                	test   eax,eax
c000804d:	75 06                	jne    c0008055 <Phys::allocateDMA(unsigned long)+0x2e>
c000804f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008053:	89 dd                	mov    ebp,ebx
c0008055:	8d 70 01             	lea    esi,[eax+0x1]
c0008058:	39 f7                	cmp    edi,esi
c000805a:	74 33                	je     c000808f <Phys::allocateDMA(unsigned long)+0x68>
c000805c:	89 f0                	mov    eax,esi
c000805e:	43                   	inc    ebx
c000805f:	83 fb 0f             	cmp    ebx,0xf
c0008062:	7f 11                	jg     c0008075 <Phys::allocateDMA(unsigned long)+0x4e>
c0008064:	80 bb 2c 09 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdf6d4],0x0
c000806b:	74 de                	je     c000804b <Phys::allocateDMA(unsigned long)+0x24>
c000806d:	31 c0                	xor    eax,eax
c000806f:	43                   	inc    ebx
c0008070:	83 fb 0f             	cmp    ebx,0xf
c0008073:	7e ef                	jle    c0008064 <Phys::allocateDMA(unsigned long)+0x3d>
c0008075:	83 ec 0c             	sub    esp,0xc
c0008078:	68 18 d7 01 c0       	push   0xc001d718
c000807d:	e8 75 86 00 00       	call   c00106f7 <Krnl::panic(char const*)>
c0008082:	83 c4 10             	add    esp,0x10
c0008085:	31 c0                	xor    eax,eax
c0008087:	83 c4 1c             	add    esp,0x1c
c000808a:	5b                   	pop    ebx
c000808b:	5e                   	pop    esi
c000808c:	5f                   	pop    edi
c000808d:	5d                   	pop    ebp
c000808e:	c3                   	ret    
c000808f:	89 e9                	mov    ecx,ebp
c0008091:	c1 f9 04             	sar    ecx,0x4
c0008094:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0008098:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000809c:	89 ca                	mov    edx,ecx
c000809e:	4a                   	dec    edx
c000809f:	79 03                	jns    c00080a4 <Phys::allocateDMA(unsigned long)+0x7d>
c00080a1:	8d 51 0e             	lea    edx,[ecx+0xe]
c00080a4:	c1 fa 04             	sar    edx,0x4
c00080a7:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c00080ab:	74 08                	je     c00080b5 <Phys::allocateDMA(unsigned long)+0x8e>
c00080ad:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00080b1:	31 c0                	xor    eax,eax
c00080b3:	eb ba                	jmp    c000806f <Phys::allocateDMA(unsigned long)+0x48>
c00080b5:	85 f6                	test   esi,esi
c00080b7:	74 15                	je     c00080ce <Phys::allocateDMA(unsigned long)+0xa7>
c00080b9:	8d 95 2c 09 02 c0    	lea    edx,[ebp-0x3ffdf6d4]
c00080bf:	8d 84 05 2d 09 02 c0 	lea    eax,[ebp+eax*1-0x3ffdf6d3]
c00080c6:	c6 02 01             	mov    BYTE PTR [edx],0x1
c00080c9:	42                   	inc    edx
c00080ca:	39 d0                	cmp    eax,edx
c00080cc:	75 f8                	jne    c00080c6 <Phys::allocateDMA(unsigned long)+0x9f>
c00080ce:	01 3d 24 09 02 c0    	add    DWORD PTR ds:0xc0020924,edi
c00080d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00080d8:	85 c0                	test   eax,eax
c00080da:	74 17                	je     c00080f3 <Phys::allocateDMA(unsigned long)+0xcc>
c00080dc:	83 ec 0c             	sub    esp,0xc
c00080df:	68 18 d7 01 c0       	push   0xc001d718
c00080e4:	e8 0e 86 00 00       	call   c00106f7 <Krnl::panic(char const*)>
c00080e9:	83 c4 10             	add    esp,0x10
c00080ec:	89 f0                	mov    eax,esi
c00080ee:	e9 6b ff ff ff       	jmp    c000805e <Phys::allocateDMA(unsigned long)+0x37>
c00080f3:	c1 e5 0c             	shl    ebp,0xc
c00080f6:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00080fc:	eb 89                	jmp    c0008087 <Phys::allocateDMA(unsigned long)+0x60>

c00080fe <Phys::freeDMA(unsigned long, unsigned long)>:
c00080fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008102:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0008108:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000810c:	c1 ea 0c             	shr    edx,0xc
c000810f:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0008114:	29 15 24 09 02 c0    	sub    DWORD PTR ds:0xc0020924,edx
c000811a:	c1 e8 0c             	shr    eax,0xc
c000811d:	85 d2                	test   edx,edx
c000811f:	74 0f                	je     c0008130 <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0008121:	05 2c 09 02 c0       	add    eax,0xc002092c
c0008126:	01 c2                	add    edx,eax
c0008128:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000812b:	40                   	inc    eax
c000812c:	39 d0                	cmp    eax,edx
c000812e:	75 f8                	jne    c0008128 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0008130:	c3                   	ret    

c0008131 <Phys::setPageState(unsigned long, bool)>:
c0008131:	56                   	push   esi
c0008132:	ba 01 00 00 00       	mov    edx,0x1
c0008137:	53                   	push   ebx
c0008138:	8b 35 c4 f7 01 c0    	mov    esi,DWORD PTR ds:0xc001f7c4
c000813e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008142:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008146:	89 c8                	mov    eax,ecx
c0008148:	83 e1 07             	and    ecx,0x7
c000814b:	c1 e8 03             	shr    eax,0x3
c000814e:	d3 e3                	shl    ebx,cl
c0008150:	01 c6                	add    esi,eax
c0008152:	d3 e2                	shl    edx,cl
c0008154:	f7 d2                	not    edx
c0008156:	20 16                	and    BYTE PTR [esi],dl
c0008158:	03 05 c4 f7 01 c0    	add    eax,DWORD PTR ds:0xc001f7c4
c000815e:	08 18                	or     BYTE PTR [eax],bl
c0008160:	5b                   	pop    ebx
c0008161:	5e                   	pop    esi
c0008162:	c3                   	ret    

c0008163 <Phys::getPageState(unsigned long)>:
c0008163:	53                   	push   ebx
c0008164:	8b 15 c4 f7 01 c0    	mov    edx,DWORD PTR ds:0xc001f7c4
c000816a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000816e:	31 db                	xor    ebx,ebx
c0008170:	89 c8                	mov    eax,ecx
c0008172:	83 e1 07             	and    ecx,0x7
c0008175:	c1 e8 03             	shr    eax,0x3
c0008178:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c000817b:	89 d8                	mov    eax,ebx
c000817d:	5b                   	pop    ebx
c000817e:	d3 f8                	sar    eax,cl
c0008180:	83 e0 01             	and    eax,0x1
c0008183:	c3                   	ret    

c0008184 <Phys::freePage(unsigned long)>:
c0008184:	53                   	push   ebx
c0008185:	83 ec 08             	sub    esp,0x8
c0008188:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000818c:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0008192:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0008198:	76 3a                	jbe    c00081d4 <Phys::freePage(unsigned long)+0x50>
c000819a:	c1 e8 0c             	shr    eax,0xc
c000819d:	50                   	push   eax
c000819e:	89 c3                	mov    ebx,eax
c00081a0:	e8 be ff ff ff       	call   c0008163 <Phys::getPageState(unsigned long)>
c00081a5:	5a                   	pop    edx
c00081a6:	84 c0                	test   al,al
c00081a8:	74 19                	je     c00081c3 <Phys::freePage(unsigned long)+0x3f>
c00081aa:	83 ec 08             	sub    esp,0x8
c00081ad:	ff 0d 24 09 02 c0    	dec    DWORD PTR ds:0xc0020924
c00081b3:	6a 00                	push   0x0
c00081b5:	53                   	push   ebx
c00081b6:	e8 76 ff ff ff       	call   c0008131 <Phys::setPageState(unsigned long, bool)>
c00081bb:	83 c4 10             	add    esp,0x10
c00081be:	83 c4 08             	add    esp,0x8
c00081c1:	5b                   	pop    ebx
c00081c2:	c3                   	ret    
c00081c3:	c7 44 24 10 bd d7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d7bd
c00081cb:	83 c4 08             	add    esp,0x8
c00081ce:	5b                   	pop    ebx
c00081cf:	e9 23 85 00 00       	jmp    c00106f7 <Krnl::panic(char const*)>
c00081d4:	68 00 10 00 00       	push   0x1000
c00081d9:	50                   	push   eax
c00081da:	e8 1f ff ff ff       	call   c00080fe <Phys::freeDMA(unsigned long, unsigned long)>
c00081df:	59                   	pop    ecx
c00081e0:	5b                   	pop    ebx
c00081e1:	83 c4 08             	add    esp,0x8
c00081e4:	5b                   	pop    ebx
c00081e5:	c3                   	ret    

c00081e6 <Phys::allocatePage()>:
c00081e6:	56                   	push   esi
c00081e7:	53                   	push   ebx
c00081e8:	83 ec 14             	sub    esp,0x14
c00081eb:	8b 35 18 09 02 c0    	mov    esi,DWORD PTR ds:0xc0020918
c00081f1:	89 f3                	mov    ebx,esi
c00081f3:	eb 0a                	jmp    c00081ff <Phys::allocatePage()+0x19>
c00081f5:	89 1d 18 09 02 c0    	mov    DWORD PTR ds:0xc0020918,ebx
c00081fb:	39 de                	cmp    esi,ebx
c00081fd:	74 24                	je     c0008223 <Phys::allocatePage()+0x3d>
c00081ff:	53                   	push   ebx
c0008200:	e8 5e ff ff ff       	call   c0008163 <Phys::getPageState(unsigned long)>
c0008205:	5a                   	pop    edx
c0008206:	84 c0                	test   al,al
c0008208:	74 5f                	je     c0008269 <Phys::allocatePage()+0x83>
c000820a:	43                   	inc    ebx
c000820b:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0008211:	75 e2                	jne    c00081f5 <Phys::allocatePage()+0xf>
c0008213:	31 db                	xor    ebx,ebx
c0008215:	c7 05 18 09 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020918,0x0
c000821f:	39 de                	cmp    esi,ebx
c0008221:	75 dc                	jne    c00081ff <Phys::allocatePage()+0x19>
c0008223:	83 ec 0c             	sub    esp,0xc
c0008226:	80 35 3c 09 02 c0 01 	xor    BYTE PTR ds:0xc002093c,0x1
c000822d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008232:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008235:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000823b:	50                   	push   eax
c000823c:	e8 87 26 00 00       	call   c000a8c8 <VAS::scanForEviction()>
c0008241:	83 c4 10             	add    esp,0x10
c0008244:	85 c0                	test   eax,eax
c0008246:	75 3f                	jne    c0008287 <Phys::allocatePage()+0xa1>
c0008248:	83 ec 0c             	sub    esp,0xc
c000824b:	68 40 d7 01 c0       	push   0xc001d740
c0008250:	e8 a2 84 00 00       	call   c00106f7 <Krnl::panic(char const*)>
c0008255:	83 c4 10             	add    esp,0x10
c0008258:	8b 1d 18 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020918
c000825e:	53                   	push   ebx
c000825f:	e8 ff fe ff ff       	call   c0008163 <Phys::getPageState(unsigned long)>
c0008264:	5a                   	pop    edx
c0008265:	84 c0                	test   al,al
c0008267:	75 a1                	jne    c000820a <Phys::allocatePage()+0x24>
c0008269:	6a 01                	push   0x1
c000826b:	53                   	push   ebx
c000826c:	e8 c0 fe ff ff       	call   c0008131 <Phys::setPageState(unsigned long, bool)>
c0008271:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c0008276:	5a                   	pop    edx
c0008277:	ff 05 24 09 02 c0    	inc    DWORD PTR ds:0xc0020924
c000827d:	c1 e0 0c             	shl    eax,0xc
c0008280:	59                   	pop    ecx
c0008281:	83 c4 14             	add    esp,0x14
c0008284:	5b                   	pop    ebx
c0008285:	5e                   	pop    esi
c0008286:	c3                   	ret    
c0008287:	83 ec 08             	sub    esp,0x8
c000828a:	89 c2                	mov    edx,eax
c000828c:	6a 01                	push   0x1
c000828e:	c1 ea 0c             	shr    edx,0xc
c0008291:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008295:	52                   	push   edx
c0008296:	e8 96 fe ff ff       	call   c0008131 <Phys::setPageState(unsigned long, bool)>
c000829b:	83 c4 10             	add    esp,0x10
c000829e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082a2:	eb dd                	jmp    c0008281 <Phys::allocatePage()+0x9b>

c00082a4 <Phys::allocateContiguousPages(int)>:
c00082a4:	57                   	push   edi
c00082a5:	56                   	push   esi
c00082a6:	53                   	push   ebx
c00082a7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00082ab:	fa                   	cli    
c00082ac:	ff 05 c8 3d 02 c0    	inc    DWORD PTR ds:0xc0023dc8
c00082b2:	31 db                	xor    ebx,ebx
c00082b4:	85 db                	test   ebx,ebx
c00082b6:	75 11                	jne    c00082c9 <Phys::allocateContiguousPages(int)+0x25>
c00082b8:	e8 29 ff ff ff       	call   c00081e6 <Phys::allocatePage()>
c00082bd:	83 fe 01             	cmp    esi,0x1
c00082c0:	89 c7                	mov    edi,eax
c00082c2:	74 21                	je     c00082e5 <Phys::allocateContiguousPages(int)+0x41>
c00082c4:	bb 01 00 00 00       	mov    ebx,0x1
c00082c9:	e8 18 ff ff ff       	call   c00081e6 <Phys::allocatePage()>
c00082ce:	89 da                	mov    edx,ebx
c00082d0:	c1 e2 0c             	shl    edx,0xc
c00082d3:	01 fa                	add    edx,edi
c00082d5:	39 c2                	cmp    edx,eax
c00082d7:	74 20                	je     c00082f9 <Phys::allocateContiguousPages(int)+0x55>
c00082d9:	bb 01 00 00 00       	mov    ebx,0x1
c00082de:	89 c7                	mov    edi,eax
c00082e0:	83 fe 01             	cmp    esi,0x1
c00082e3:	75 e4                	jne    c00082c9 <Phys::allocateContiguousPages(int)+0x25>
c00082e5:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c00082ea:	48                   	dec    eax
c00082eb:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c00082f0:	75 01                	jne    c00082f3 <Phys::allocateContiguousPages(int)+0x4f>
c00082f2:	fb                   	sti    
c00082f3:	89 f8                	mov    eax,edi
c00082f5:	5b                   	pop    ebx
c00082f6:	5e                   	pop    esi
c00082f7:	5f                   	pop    edi
c00082f8:	c3                   	ret    
c00082f9:	43                   	inc    ebx
c00082fa:	39 f3                	cmp    ebx,esi
c00082fc:	75 b6                	jne    c00082b4 <Phys::allocateContiguousPages(int)+0x10>
c00082fe:	eb e5                	jmp    c00082e5 <Phys::allocateContiguousPages(int)+0x41>

c0008300 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0008300:	56                   	push   esi
c0008301:	53                   	push   ebx
c0008302:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008306:	39 1d 1c 09 02 c0    	cmp    DWORD PTR ds:0xc002091c,ebx
c000830c:	73 06                	jae    c0008314 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000830e:	89 1d 1c 09 02 c0    	mov    DWORD PTR ds:0xc002091c,ebx
c0008314:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008318:	c1 eb 0c             	shr    ebx,0xc
c000831b:	c1 e8 0c             	shr    eax,0xc
c000831e:	39 d8                	cmp    eax,ebx
c0008320:	73 13                	jae    c0008335 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0008322:	6a 00                	push   0x0
c0008324:	8d 70 01             	lea    esi,[eax+0x1]
c0008327:	50                   	push   eax
c0008328:	e8 04 fe ff ff       	call   c0008131 <Phys::setPageState(unsigned long, bool)>
c000832d:	5a                   	pop    edx
c000832e:	89 f0                	mov    eax,esi
c0008330:	59                   	pop    ecx
c0008331:	39 f3                	cmp    ebx,esi
c0008333:	75 ed                	jne    c0008322 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0008335:	5b                   	pop    ebx
c0008336:	5e                   	pop    esi
c0008337:	c3                   	ret    

c0008338 <Phys::physicalMemorySetup(unsigned int)>:
c0008338:	55                   	push   ebp
c0008339:	57                   	push   edi
c000833a:	56                   	push   esi
c000833b:	53                   	push   ebx
c000833c:	31 db                	xor    ebx,ebx
c000833e:	83 ec 40             	sub    esp,0x40
c0008341:	6a 10                	push   0x10
c0008343:	6a 00                	push   0x0
c0008345:	68 2c 09 02 c0       	push   0xc002092c
c000834a:	e8 a1 81 ff ff       	call   c00004f0 <memset>
c000834f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0008353:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008358:	05 00 10 00 00       	add    eax,0x1000
c000835d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008361:	5a                   	pop    edx
c0008362:	59                   	pop    ecx
c0008363:	50                   	push   eax
c0008364:	68 d3 d7 01 c0       	push   0xc001d7d3
c0008369:	e8 3a 28 00 00       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c000836e:	83 c4 10             	add    esp,0x10
c0008371:	83 ec 08             	sub    esp,0x8
c0008374:	6a 01                	push   0x1
c0008376:	53                   	push   ebx
c0008377:	43                   	inc    ebx
c0008378:	e8 b4 fd ff ff       	call   c0008131 <Phys::setPageState(unsigned long, bool)>
c000837d:	83 c4 10             	add    esp,0x10
c0008380:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0008386:	75 e9                	jne    c0008371 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0008388:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c000838e:	66 85 c0             	test   ax,ax
c0008391:	0f 84 97 01 00 00    	je     c000852e <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0008397:	89 c7                	mov    edi,eax
c0008399:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00083a1:	81 e7 ff ff 00 00    	and    edi,0xffff
c00083a7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00083ac:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00083b0:	eb 15                	jmp    c00083c7 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c00083b2:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00083b6:	83 c3 18             	add    ebx,0x18
c00083b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00083bd:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00083c1:	0f 84 77 01 00 00    	je     c000853e <Phys::physicalMemorySetup(unsigned int)+0x206>
c00083c7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00083ca:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00083cd:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00083d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00083d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00083d8:	8b 33                	mov    esi,DWORD PTR [ebx]
c00083da:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00083dd:	01 f0                	add    eax,esi
c00083df:	55                   	push   ebp
c00083e0:	11 fa                	adc    edx,edi
c00083e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083e6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00083ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083ee:	50                   	push   eax
c00083ef:	56                   	push   esi
c00083f0:	68 70 d7 01 c0       	push   0xc001d770
c00083f5:	e8 ae 27 00 00       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c00083fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fe:	83 c4 10             	add    esp,0x10
c0008401:	09 f8                	or     eax,edi
c0008403:	0f 85 35 01 00 00    	jne    c000853e <Phys::physicalMemorySetup(unsigned int)+0x206>
c0008409:	4d                   	dec    ebp
c000840a:	75 a6                	jne    c00083b2 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c000840c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008410:	ba 00 00 08 00       	mov    edx,0x80000
c0008415:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0008419:	39 f2                	cmp    edx,esi
c000841b:	89 c1                	mov    ecx,eax
c000841d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0008425:	19 f9                	sbb    ecx,edi
c0008427:	0f 82 a7 00 00 00    	jb     c00084d4 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000842d:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008431:	89 c1                	mov    ecx,eax
c0008433:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0008437:	0f 83 97 00 00 00    	jae    c00084d4 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000843d:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008442:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008446:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000844a:	39 fa                	cmp    edx,edi
c000844c:	19 e8                	sbb    eax,ebp
c000844e:	0f 82 9a 01 00 00    	jb     c00085ee <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0008454:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008458:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000845c:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0008462:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008467:	83 d5 ff             	adc    ebp,0xffffffff
c000846a:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000846e:	31 c0                	xor    eax,eax
c0008470:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008474:	39 fa                	cmp    edx,edi
c0008476:	89 c1                	mov    ecx,eax
c0008478:	19 e9                	sbb    ecx,ebp
c000847a:	0f 83 32 ff ff ff    	jae    c00083b2 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0008480:	be 00 00 08 00       	mov    esi,0x80000
c0008485:	51                   	push   ecx
c0008486:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000848a:	57                   	push   edi
c000848b:	56                   	push   esi
c000848c:	68 94 d7 01 c0       	push   0xc001d794
c0008491:	e8 12 27 00 00       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c0008496:	5d                   	pop    ebp
c0008497:	58                   	pop    eax
c0008498:	57                   	push   edi
c0008499:	56                   	push   esi
c000849a:	e8 61 fe ff ff       	call   c0008300 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000849f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00084a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00084a7:	83 c4 0c             	add    esp,0xc
c00084aa:	0f ac d0 0c          	shrd   eax,edx,0xc
c00084ae:	03 05 28 09 02 c0    	add    eax,DWORD PTR ds:0xc0020928
c00084b4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00084bb:	a3 28 09 02 c0       	mov    ds:0xc0020928,eax
c00084c0:	52                   	push   edx
c00084c1:	50                   	push   eax
c00084c2:	68 f9 d7 01 c0       	push   0xc001d7f9
c00084c7:	e8 dc 26 00 00       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c00084cc:	83 c4 10             	add    esp,0x10
c00084cf:	e9 de fe ff ff       	jmp    c00083b2 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c00084d4:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00084d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00084dc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00084e0:	39 ea                	cmp    edx,ebp
c00084e2:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00084e6:	0f 82 c6 fe ff ff    	jb     c00083b2 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c00084ec:	ba ff 1f 00 00       	mov    edx,0x1fff
c00084f1:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00084f5:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00084f9:	0f 83 b3 fe ff ff    	jae    c00083b2 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c00084ff:	39 ee                	cmp    esi,ebp
c0008501:	89 f8                	mov    eax,edi
c0008503:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0008507:	0f 83 78 ff ff ff    	jae    c0008485 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c000850d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008511:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008515:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0008519:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000851d:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008521:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008525:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008529:	e9 57 ff ff ff       	jmp    c0008485 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c000852e:	83 ec 0c             	sub    esp,0xc
c0008531:	68 eb d7 01 c0       	push   0xc001d7eb
c0008536:	e8 bc 81 00 00       	call   c00106f7 <Krnl::panic(char const*)>
c000853b:	83 c4 10             	add    esp,0x10
c000853e:	83 ec 08             	sub    esp,0x8
c0008541:	bb 60 00 00 00       	mov    ebx,0x60
c0008546:	6a 00                	push   0x0
c0008548:	6a 06                	push   0x6
c000854a:	e8 e2 fb ff ff       	call   c0008131 <Phys::setPageState(unsigned long, bool)>
c000854f:	58                   	pop    eax
c0008550:	5a                   	pop    edx
c0008551:	6a 00                	push   0x0
c0008553:	6a 07                	push   0x7
c0008555:	e8 d7 fb ff ff       	call   c0008131 <Phys::setPageState(unsigned long, bool)>
c000855a:	83 05 28 09 02 c0 02 	add    DWORD PTR ds:0xc0020928,0x2
c0008561:	83 c4 10             	add    esp,0x10
c0008564:	83 ec 08             	sub    esp,0x8
c0008567:	6a 00                	push   0x0
c0008569:	53                   	push   ebx
c000856a:	43                   	inc    ebx
c000856b:	e8 c1 fb ff ff       	call   c0008131 <Phys::setPageState(unsigned long, bool)>
c0008570:	83 c4 10             	add    esp,0x10
c0008573:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008579:	75 e9                	jne    c0008564 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c000857b:	a1 28 09 02 c0       	mov    eax,ds:0xc0020928
c0008580:	bb 40 01 00 00       	mov    ebx,0x140
c0008585:	83 c0 20             	add    eax,0x20
c0008588:	a3 28 09 02 c0       	mov    ds:0xc0020928,eax
c000858d:	eb 22                	jmp    c00085b1 <Phys::physicalMemorySetup(unsigned int)+0x279>
c000858f:	83 ec 08             	sub    esp,0x8
c0008592:	6a 00                	push   0x0
c0008594:	53                   	push   ebx
c0008595:	43                   	inc    ebx
c0008596:	e8 96 fb ff ff       	call   c0008131 <Phys::setPageState(unsigned long, bool)>
c000859b:	a1 28 09 02 c0       	mov    eax,ds:0xc0020928
c00085a0:	83 c4 10             	add    esp,0x10
c00085a3:	40                   	inc    eax
c00085a4:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00085aa:	a3 28 09 02 c0       	mov    ds:0xc0020928,eax
c00085af:	74 07                	je     c00085b8 <Phys::physicalMemorySetup(unsigned int)+0x280>
c00085b1:	3d ff 03 00 00       	cmp    eax,0x3ff
c00085b6:	7e d7                	jle    c000858f <Phys::physicalMemorySetup(unsigned int)+0x257>
c00085b8:	bb d0 01 00 00       	mov    ebx,0x1d0
c00085bd:	3d ff 07 00 00       	cmp    eax,0x7ff
c00085c2:	7f 22                	jg     c00085e6 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c00085c4:	83 ec 08             	sub    esp,0x8
c00085c7:	6a 00                	push   0x0
c00085c9:	53                   	push   ebx
c00085ca:	43                   	inc    ebx
c00085cb:	e8 61 fb ff ff       	call   c0008131 <Phys::setPageState(unsigned long, bool)>
c00085d0:	a1 28 09 02 c0       	mov    eax,ds:0xc0020928
c00085d5:	83 c4 10             	add    esp,0x10
c00085d8:	40                   	inc    eax
c00085d9:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00085df:	a3 28 09 02 c0       	mov    ds:0xc0020928,eax
c00085e4:	75 d7                	jne    c00085bd <Phys::physicalMemorySetup(unsigned int)+0x285>
c00085e6:	83 c4 3c             	add    esp,0x3c
c00085e9:	5b                   	pop    ebx
c00085ea:	5e                   	pop    esi
c00085eb:	5f                   	pop    edi
c00085ec:	5d                   	pop    ebp
c00085ed:	c3                   	ret    
c00085ee:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00085f6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00085fe:	e9 51 fe ff ff       	jmp    c0008454 <Phys::physicalMemorySetup(unsigned int)+0x11c>
c0008603:	90                   	nop

c0008604 <Pipe::isAtty()>:
c0008604:	31 c0                	xor    eax,eax
c0008606:	c3                   	ret    
c0008607:	90                   	nop

c0008608 <Pipe::~Pipe()>:
c0008608:	83 ec 0c             	sub    esp,0xc
c000860b:	ba 58 d8 01 c0       	mov    edx,0xc001d858
c0008610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008614:	89 10                	mov    DWORD PTR [eax],edx
c0008616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000861a:	83 ec 0c             	sub    esp,0xc
c000861d:	50                   	push   eax
c000861e:	e8 d1 10 00 00       	call   c00096f4 <UnixFile::~UnixFile()>
c0008623:	83 c4 10             	add    esp,0x10
c0008626:	90                   	nop
c0008627:	83 c4 0c             	add    esp,0xc
c000862a:	c3                   	ret    
c000862b:	90                   	nop

c000862c <Pipe::~Pipe()>:
c000862c:	83 ec 0c             	sub    esp,0xc
c000862f:	83 ec 0c             	sub    esp,0xc
c0008632:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008636:	e8 cd ff ff ff       	call   c0008608 <Pipe::~Pipe()>
c000863b:	83 c4 10             	add    esp,0x10
c000863e:	83 ec 08             	sub    esp,0x8
c0008641:	6a 20                	push   0x20
c0008643:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008647:	e8 66 24 00 00       	call   c000aab2 <operator delete(void*, unsigned long)>
c000864c:	83 c4 10             	add    esp,0x10
c000864f:	83 c4 0c             	add    esp,0xc
c0008652:	c3                   	ret    
c0008653:	90                   	nop

c0008654 <Pipe::write(unsigned long long, void*, int*)>:
c0008654:	55                   	push   ebp
c0008655:	57                   	push   edi
c0008656:	56                   	push   esi
c0008657:	53                   	push   ebx
c0008658:	83 ec 1c             	sub    esp,0x1c
c000865b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000865f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008663:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0008666:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000866a:	89 04 24             	mov    DWORD PTR [esp],eax
c000866d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008671:	89 d8                	mov    eax,ebx
c0008673:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0008676:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000867a:	89 d6                	mov    esi,edx
c000867c:	89 d7                	mov    edi,edx
c000867e:	c1 ff 1f             	sar    edi,0x1f
c0008681:	03 34 24             	add    esi,DWORD PTR [esp]
c0008684:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0008688:	c1 f8 1f             	sar    eax,0x1f
c000868b:	39 f3                	cmp    ebx,esi
c000868d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008691:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008695:	19 f8                	sbb    eax,edi
c0008697:	b8 01 00 00 00       	mov    eax,0x1
c000869c:	72 6e                	jb     c000870c <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000869e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00086a1:	01 d0                	add    eax,edx
c00086a3:	99                   	cdq    
c00086a4:	f7 fb                	idiv   ebx
c00086a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086aa:	29 d3                	sub    ebx,edx
c00086ac:	89 d7                	mov    edi,edx
c00086ae:	89 de                	mov    esi,ebx
c00086b0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00086b3:	c1 fb 1f             	sar    ebx,0x1f
c00086b6:	39 f2                	cmp    edx,esi
c00086b8:	19 d8                	sbb    eax,ebx
c00086ba:	b8 00 00 00 00       	mov    eax,0x0
c00086bf:	72 04                	jb     c00086c5 <Pipe::write(unsigned long long, void*, int*)+0x71>
c00086c1:	89 d0                	mov    eax,edx
c00086c3:	29 f0                	sub    eax,esi
c00086c5:	89 d3                	mov    ebx,edx
c00086c7:	29 c3                	sub    ebx,eax
c00086c9:	74 0b                	je     c00086d6 <Pipe::write(unsigned long long, void*, int*)+0x82>
c00086cb:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00086ce:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00086d2:	89 d9                	mov    ecx,ebx
c00086d4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00086d6:	85 c0                	test   eax,eax
c00086d8:	74 0d                	je     c00086e7 <Pipe::write(unsigned long long, void*, int*)+0x93>
c00086da:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00086de:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00086e1:	89 de                	mov    esi,ebx
c00086e3:	89 c1                	mov    ecx,eax
c00086e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00086e7:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c00086ea:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00086ef:	75 10                	jne    c0008701 <Pipe::write(unsigned long long, void*, int*)+0xad>
c00086f1:	83 ec 0c             	sub    esp,0xc
c00086f4:	68 15 d8 01 c0       	push   0xc001d815
c00086f9:	e8 f9 7f 00 00       	call   c00106f7 <Krnl::panic(char const*)>
c00086fe:	83 c4 10             	add    esp,0x10
c0008701:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008705:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008708:	89 08                	mov    DWORD PTR [eax],ecx
c000870a:	31 c0                	xor    eax,eax
c000870c:	83 c4 1c             	add    esp,0x1c
c000870f:	5b                   	pop    ebx
c0008710:	5e                   	pop    esi
c0008711:	5f                   	pop    edi
c0008712:	5d                   	pop    ebp
c0008713:	c3                   	ret    

c0008714 <Pipe::read(unsigned long long, void*, int*)>:
c0008714:	55                   	push   ebp
c0008715:	57                   	push   edi
c0008716:	56                   	push   esi
c0008717:	53                   	push   ebx
c0008718:	83 ec 1c             	sub    esp,0x1c
c000871b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000871f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008723:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008727:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000872a:	89 c8                	mov    eax,ecx
c000872c:	99                   	cdq    
c000872d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008731:	74 24                	je     c0008757 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008733:	39 f9                	cmp    ecx,edi
c0008735:	89 d1                	mov    ecx,edx
c0008737:	19 f1                	sbb    ecx,esi
c0008739:	73 1c                	jae    c0008757 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000873b:	fa                   	cli    
c000873c:	ff 05 c8 3d 02 c0    	inc    DWORD PTR ds:0xc0023dc8
c0008742:	e8 05 b3 00 00       	call   c0013a4c <schedule()>
c0008747:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c000874c:	48                   	dec    eax
c000874d:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c0008752:	75 d3                	jne    c0008727 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008754:	fb                   	sti    
c0008755:	eb d0                	jmp    c0008727 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008757:	39 f8                	cmp    eax,edi
c0008759:	89 d1                	mov    ecx,edx
c000875b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000875e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008762:	19 f1                	sbb    ecx,esi
c0008764:	73 07                	jae    c000876d <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008766:	89 04 24             	mov    DWORD PTR [esp],eax
c0008769:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000876d:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008770:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008773:	29 f7                	sub    edi,esi
c0008775:	89 f8                	mov    eax,edi
c0008777:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000877b:	99                   	cdq    
c000877c:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000877f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008783:	19 d0                	sbb    eax,edx
c0008785:	73 07                	jae    c000878e <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008787:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000878a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000878e:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0008791:	89 ea                	mov    edx,ebp
c0008793:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008797:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000879c:	74 0d                	je     c00087ab <Pipe::read(unsigned long long, void*, int*)+0x97>
c000879e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00087a1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00087a5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00087a9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00087ab:	85 d2                	test   edx,edx
c00087ad:	74 11                	je     c00087c0 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00087af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087b3:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00087b6:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00087ba:	89 d1                	mov    ecx,edx
c00087bc:	89 c7                	mov    edi,eax
c00087be:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00087c0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00087c3:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00087c6:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00087c9:	99                   	cdq    
c00087ca:	89 f7                	mov    edi,esi
c00087cc:	03 04 24             	add    eax,DWORD PTR [esp]
c00087cf:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00087d3:	c1 ff 1f             	sar    edi,0x1f
c00087d6:	57                   	push   edi
c00087d7:	56                   	push   esi
c00087d8:	52                   	push   edx
c00087d9:	50                   	push   eax
c00087da:	e8 91 3a 01 00       	call   c001c270 <__umoddi3>
c00087df:	83 c4 10             	add    esp,0x10
c00087e2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00087e5:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00087ea:	75 10                	jne    c00087fc <Pipe::read(unsigned long long, void*, int*)+0xe8>
c00087ec:	83 ec 0c             	sub    esp,0xc
c00087ef:	68 32 d8 01 c0       	push   0xc001d832
c00087f4:	e8 fe 7e 00 00       	call   c00106f7 <Krnl::panic(char const*)>
c00087f9:	83 c4 10             	add    esp,0x10
c00087fc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008800:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0008803:	89 10                	mov    DWORD PTR [eax],edx
c0008805:	83 c4 1c             	add    esp,0x1c
c0008808:	31 c0                	xor    eax,eax
c000880a:	5b                   	pop    ebx
c000880b:	5e                   	pop    esi
c000880c:	5f                   	pop    edi
c000880d:	5d                   	pop    ebp
c000880e:	c3                   	ret    
c000880f:	90                   	nop

c0008810 <Pipe::Pipe(int)>:
c0008810:	83 ec 0c             	sub    esp,0xc
c0008813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008817:	83 ec 08             	sub    esp,0x8
c000881a:	6a 00                	push   0x0
c000881c:	50                   	push   eax
c000881d:	e8 f0 0c 00 00       	call   c0009512 <UnixFile::UnixFile(int)>
c0008822:	83 c4 10             	add    esp,0x10
c0008825:	ba 58 d8 01 c0       	mov    edx,0xc001d858
c000882a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000882e:	89 10                	mov    DWORD PTR [eax],edx
c0008830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008834:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008838:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000883b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000883f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000884a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008851:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008855:	83 ec 0c             	sub    esp,0xc
c0008858:	50                   	push   eax
c0008859:	e8 bb f5 ff ff       	call   c0007e19 <malloc>
c000885e:	83 c4 10             	add    esp,0x10
c0008861:	89 c2                	mov    edx,eax
c0008863:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008867:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000886a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000886e:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008872:	90                   	nop
c0008873:	83 c4 0c             	add    esp,0xc
c0008876:	c3                   	ret    
c0008877:	90                   	nop

c0008878 <VgaText::isAtty()>:
c0008878:	b0 01                	mov    al,0x1
c000887a:	c3                   	ret    
c000887b:	90                   	nop

c000887c <VgaText::~VgaText()>:
c000887c:	83 ec 0c             	sub    esp,0xc
c000887f:	ba e0 d8 01 c0       	mov    edx,0xc001d8e0
c0008884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008888:	89 10                	mov    DWORD PTR [eax],edx
c000888a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000888e:	83 ec 0c             	sub    esp,0xc
c0008891:	50                   	push   eax
c0008892:	e8 5d 0e 00 00       	call   c00096f4 <UnixFile::~UnixFile()>
c0008897:	83 c4 10             	add    esp,0x10
c000889a:	90                   	nop
c000889b:	83 c4 0c             	add    esp,0xc
c000889e:	c3                   	ret    
c000889f:	90                   	nop

c00088a0 <VgaText::~VgaText()>:
c00088a0:	83 ec 0c             	sub    esp,0xc
c00088a3:	83 ec 0c             	sub    esp,0xc
c00088a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00088aa:	e8 cd ff ff ff       	call   c000887c <VgaText::~VgaText()>
c00088af:	83 c4 10             	add    esp,0x10
c00088b2:	83 ec 08             	sub    esp,0x8
c00088b5:	68 34 01 00 00       	push   0x134
c00088ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00088be:	e8 ef 21 00 00       	call   c000aab2 <operator delete(void*, unsigned long)>
c00088c3:	83 c4 10             	add    esp,0x10
c00088c6:	83 c4 0c             	add    esp,0xc
c00088c9:	c3                   	ret    

c00088ca <VgaText::read(unsigned long long, void*, int*)>:
c00088ca:	83 ec 10             	sub    esp,0x10
c00088cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00088d1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00088d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00088d9:	e8 24 45 00 00       	call   c000ce02 <readKeyboard(VgaText*, char*, unsigned long)>
c00088de:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00088e2:	89 02                	mov    DWORD PTR [edx],eax
c00088e4:	31 c0                	xor    eax,eax
c00088e6:	83 c4 1c             	add    esp,0x1c
c00088e9:	c3                   	ret    

c00088ea <setTerminalScrollLock(bool)>:
c00088ea:	c3                   	ret    

c00088eb <doTerminalCycle()>:
c00088eb:	c3                   	ret    

c00088ec <addToTerminalCycle(VgaText*)>:
c00088ec:	c3                   	ret    

c00088ed <scrollTerminalScrollLock(int)>:
c00088ed:	c3                   	ret    

c00088ee <VgaText::updateTitle()>:
c00088ee:	c3                   	ret    
c00088ef:	90                   	nop

c00088f0 <VgaText::load()>:
c00088f0:	c3                   	ret    
c00088f1:	90                   	nop

c00088f2 <VgaText::updateCursor()>:
c00088f2:	83 ec 14             	sub    esp,0x14
c00088f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00088f9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00088fc:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00088ff:	e8 bc db 00 00       	call   c00164c0 <HalConsoleCursorUpdate(int, int)>
c0008904:	83 c4 1c             	add    esp,0x1c
c0008907:	c3                   	ret    

c0008908 <VgaText::doANSI_SGR(int)>:
c0008908:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000890c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008910:	85 d2                	test   edx,edx
c0008912:	75 0b                	jne    c000891f <VgaText::doANSI_SGR(int)+0x17>
c0008914:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008917:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000891a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000891d:	eb 59                	jmp    c0008978 <VgaText::doANSI_SGR(int)+0x70>
c000891f:	83 fa 07             	cmp    edx,0x7
c0008922:	75 0b                	jne    c000892f <VgaText::doANSI_SGR(int)+0x27>
c0008924:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008927:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000892a:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000892d:	eb 49                	jmp    c0008978 <VgaText::doANSI_SGR(int)+0x70>
c000892f:	83 fa 1b             	cmp    edx,0x1b
c0008932:	74 e0                	je     c0008914 <VgaText::doANSI_SGR(int)+0xc>
c0008934:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008937:	83 f9 07             	cmp    ecx,0x7
c000893a:	77 09                	ja     c0008945 <VgaText::doANSI_SGR(int)+0x3d>
c000893c:	8b 14 8d 00 f8 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0800]
c0008943:	eb 20                	jmp    c0008965 <VgaText::doANSI_SGR(int)+0x5d>
c0008945:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008948:	83 f9 07             	cmp    ecx,0x7
c000894b:	77 09                	ja     c0008956 <VgaText::doANSI_SGR(int)+0x4e>
c000894d:	8b 14 8d 00 f8 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0800]
c0008954:	eb 22                	jmp    c0008978 <VgaText::doANSI_SGR(int)+0x70>
c0008956:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008959:	83 f9 07             	cmp    ecx,0x7
c000895c:	77 0b                	ja     c0008969 <VgaText::doANSI_SGR(int)+0x61>
c000895e:	8b 14 95 b8 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0948]
c0008965:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008968:	c3                   	ret    
c0008969:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000896c:	83 f9 07             	cmp    ecx,0x7
c000896f:	77 0a                	ja     c000897b <VgaText::doANSI_SGR(int)+0x73>
c0008971:	8b 14 95 90 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0970]
c0008978:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000897b:	c3                   	ret    

c000897c <VgaText::setDefaultBgColour(VgaColour)>:
c000897c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008984:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008987:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000898a:	c3                   	ret    
c000898b:	90                   	nop

c000898c <VgaText::setDefaultFgColour(VgaColour)>:
c000898c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008990:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008994:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008997:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000899a:	c3                   	ret    
c000899b:	90                   	nop

c000899c <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000899c:	53                   	push   ebx
c000899d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00089a1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00089a5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00089a9:	51                   	push   ecx
c00089aa:	e8 cd ff ff ff       	call   c000897c <VgaText::setDefaultBgColour(VgaColour)>
c00089af:	58                   	pop    eax
c00089b0:	5a                   	pop    edx
c00089b1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00089b5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00089b9:	5b                   	pop    ebx
c00089ba:	eb d0                	jmp    c000898c <VgaText::setDefaultFgColour(VgaColour)>

c00089bc <VgaText::setTitleTextColour(VgaColour)>:
c00089bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00089c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00089c4:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00089c7:	c3                   	ret    

c00089c8 <VgaText::setTitleColour(VgaColour)>:
c00089c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00089cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00089d0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00089d3:	c3                   	ret    

c00089d4 <VgaText::setTitle(char*)>:
c00089d4:	c3                   	ret    
c00089d5:	90                   	nop

c00089d6 <VgaText::combineColours(unsigned char, unsigned char)>:
c00089d6:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00089da:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00089df:	83 e0 0f             	and    eax,0xf
c00089e2:	c1 e2 04             	shl    edx,0x4
c00089e5:	09 d0                	or     eax,edx
c00089e7:	c3                   	ret    

c00089e8 <VgaText::scrollScreen()>:
c00089e8:	55                   	push   ebp
c00089e9:	b9 01 00 00 00       	mov    ecx,0x1
c00089ee:	57                   	push   edi
c00089ef:	56                   	push   esi
c00089f0:	53                   	push   ebx
c00089f1:	83 ec 0c             	sub    esp,0xc
c00089f4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00089f8:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00089fe:	31 ff                	xor    edi,edi
c0008a00:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008a03:	83 f9 18             	cmp    ecx,0x18
c0008a06:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0008a09:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0008a10:	75 27                	jne    c0008a39 <VgaText::scrollScreen()+0x51>
c0008a12:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008a15:	01 f5                	add    ebp,esi
c0008a17:	f7 c7 01 00 00 00    	test   edi,0x1
c0008a1d:	74 16                	je     c0008a35 <VgaText::scrollScreen()+0x4d>
c0008a1f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008a23:	50                   	push   eax
c0008a24:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008a28:	50                   	push   eax
c0008a29:	e8 a8 ff ff ff       	call   c00089d6 <VgaText::combineColours(unsigned char, unsigned char)>
c0008a2e:	5a                   	pop    edx
c0008a2f:	5a                   	pop    edx
c0008a30:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0008a33:	eb 04                	jmp    c0008a39 <VgaText::scrollScreen()+0x51>
c0008a35:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0008a39:	47                   	inc    edi
c0008a3a:	46                   	inc    esi
c0008a3b:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008a41:	75 bd                	jne    c0008a00 <VgaText::scrollScreen()+0x18>
c0008a43:	41                   	inc    ecx
c0008a44:	83 f9 19             	cmp    ecx,0x19
c0008a47:	75 af                	jne    c00089f8 <VgaText::scrollScreen()+0x10>
c0008a49:	39 1d 44 09 02 c0    	cmp    DWORD PTR ds:0xc0020944,ebx
c0008a4f:	75 1f                	jne    c0008a70 <VgaText::scrollScreen()+0x88>
c0008a51:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008a55:	74 05                	je     c0008a5c <VgaText::scrollScreen()+0x74>
c0008a57:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008a5a:	eb 14                	jmp    c0008a70 <VgaText::scrollScreen()+0x88>
c0008a5c:	50                   	push   eax
c0008a5d:	50                   	push   eax
c0008a5e:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008a62:	50                   	push   eax
c0008a63:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008a67:	50                   	push   eax
c0008a68:	e8 df d8 00 00       	call   c001634c <HalConsoleScroll(int, int)>
c0008a6d:	83 c4 10             	add    esp,0x10
c0008a70:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008a74:	83 c4 0c             	add    esp,0xc
c0008a77:	5b                   	pop    ebx
c0008a78:	5e                   	pop    esi
c0008a79:	5f                   	pop    edi
c0008a7a:	5d                   	pop    ebp
c0008a7b:	e9 72 fe ff ff       	jmp    c00088f2 <VgaText::updateCursor()>

c0008a80 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008a80:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008a85:	c1 e0 08             	shl    eax,0x8
c0008a88:	89 c2                	mov    edx,eax
c0008a8a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0008a8f:	09 d0                	or     eax,edx
c0008a91:	c3                   	ret    

c0008a92 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008a92:	55                   	push   ebp
c0008a93:	57                   	push   edi
c0008a94:	56                   	push   esi
c0008a95:	53                   	push   ebx
c0008a96:	83 ec 1c             	sub    esp,0x1c
c0008a99:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008a9d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008aa1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008aa5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008aa9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0008aad:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008ab1:	0f b6 c3             	movzx  eax,bl
c0008ab4:	50                   	push   eax
c0008ab5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008aba:	50                   	push   eax
c0008abb:	e8 16 ff ff ff       	call   c00089d6 <VgaText::combineColours(unsigned char, unsigned char)>
c0008ac0:	5a                   	pop    edx
c0008ac1:	0f b6 c0             	movzx  eax,al
c0008ac4:	59                   	pop    ecx
c0008ac5:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008aca:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008ace:	50                   	push   eax
c0008acf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008ad3:	e8 a8 ff ff ff       	call   c0008a80 <VgaText::combineCharAndColour(char, unsigned char)>
c0008ad8:	5a                   	pop    edx
c0008ad9:	66 6b d7 50          	imul   dx,di,0x50
c0008add:	59                   	pop    ecx
c0008ade:	01 f2                	add    edx,esi
c0008ae0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008ae3:	0f b7 d2             	movzx  edx,dx
c0008ae6:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008aea:	39 2d 44 09 02 c0    	cmp    DWORD PTR ds:0xc0020944,ebp
c0008af0:	75 28                	jne    c0008b1a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c0008af2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008af6:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008afa:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008afe:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008b02:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008b06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008b0a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008b0e:	83 c4 1c             	add    esp,0x1c
c0008b11:	5b                   	pop    ebx
c0008b12:	5e                   	pop    esi
c0008b13:	5f                   	pop    edi
c0008b14:	5d                   	pop    ebp
c0008b15:	e9 3a d9 00 00       	jmp    c0016454 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008b1a:	83 c4 1c             	add    esp,0x1c
c0008b1d:	5b                   	pop    ebx
c0008b1e:	5e                   	pop    esi
c0008b1f:	5f                   	pop    edi
c0008b20:	5d                   	pop    ebp
c0008b21:	c3                   	ret    

c0008b22 <VgaText::getCursorX()>:
c0008b22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b26:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008b29:	c3                   	ret    

c0008b2a <VgaText::getCursorY()>:
c0008b2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b2e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008b31:	c3                   	ret    

c0008b32 <VgaText::setCursor(int, int)>:
c0008b32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b36:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008b3a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008b3d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008b41:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008b44:	e9 a9 fd ff ff       	jmp    c00088f2 <VgaText::updateCursor()>

c0008b49 <setActiveTerminal(VgaText*)>:
c0008b49:	53                   	push   ebx
c0008b4a:	83 ec 08             	sub    esp,0x8
c0008b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b51:	85 db                	test   ebx,ebx
c0008b53:	75 11                	jne    c0008b66 <setActiveTerminal(VgaText*)+0x1d>
c0008b55:	c7 44 24 10 6c d8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d86c
c0008b5d:	83 c4 08             	add    esp,0x8
c0008b60:	5b                   	pop    ebx
c0008b61:	e9 91 7b 00 00       	jmp    c00106f7 <Krnl::panic(char const*)>
c0008b66:	a1 44 09 02 c0       	mov    eax,ds:0xc0020944
c0008b6b:	85 c0                	test   eax,eax
c0008b6d:	74 0c                	je     c0008b7b <setActiveTerminal(VgaText*)+0x32>
c0008b6f:	83 ec 0c             	sub    esp,0xc
c0008b72:	50                   	push   eax
c0008b73:	e8 7a fd ff ff       	call   c00088f2 <VgaText::updateCursor()>
c0008b78:	83 c4 10             	add    esp,0x10
c0008b7b:	89 1d 44 09 02 c0    	mov    DWORD PTR ds:0xc0020944,ebx
c0008b81:	50                   	push   eax
c0008b82:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008b85:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008b88:	53                   	push   ebx
c0008b89:	e8 a4 ff ff ff       	call   c0008b32 <VgaText::setCursor(int, int)>
c0008b8e:	83 c4 18             	add    esp,0x18
c0008b91:	5b                   	pop    ebx
c0008b92:	c3                   	ret    
c0008b93:	90                   	nop

c0008b94 <VgaText::clearScreen()>:
c0008b94:	57                   	push   edi
c0008b95:	56                   	push   esi
c0008b96:	31 f6                	xor    esi,esi
c0008b98:	53                   	push   ebx
c0008b99:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b9d:	52                   	push   edx
c0008b9e:	6a 00                	push   0x0
c0008ba0:	6a 00                	push   0x0
c0008ba2:	53                   	push   ebx
c0008ba3:	e8 8a ff ff ff       	call   c0008b32 <VgaText::setCursor(int, int)>
c0008ba8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008baf:	83 c4 10             	add    esp,0x10
c0008bb2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008bb5:	7e 20                	jle    c0008bd7 <VgaText::clearScreen()+0x43>
c0008bb7:	31 ff                	xor    edi,edi
c0008bb9:	50                   	push   eax
c0008bba:	50                   	push   eax
c0008bbb:	56                   	push   esi
c0008bbc:	57                   	push   edi
c0008bbd:	47                   	inc    edi
c0008bbe:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bc1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bc4:	6a 20                	push   0x20
c0008bc6:	53                   	push   ebx
c0008bc7:	e8 c6 fe ff ff       	call   c0008a92 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bcc:	83 c4 20             	add    esp,0x20
c0008bcf:	83 ff 50             	cmp    edi,0x50
c0008bd2:	75 e5                	jne    c0008bb9 <VgaText::clearScreen()+0x25>
c0008bd4:	46                   	inc    esi
c0008bd5:	eb db                	jmp    c0008bb2 <VgaText::clearScreen()+0x1e>
c0008bd7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008bde:	5b                   	pop    ebx
c0008bdf:	5e                   	pop    esi
c0008be0:	5f                   	pop    edi
c0008be1:	c3                   	ret    

c0008be2 <VgaText::setCursorX(int)>:
c0008be2:	83 ec 10             	sub    esp,0x10
c0008be5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008be9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008bec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008bf0:	50                   	push   eax
c0008bf1:	e8 3c ff ff ff       	call   c0008b32 <VgaText::setCursor(int, int)>
c0008bf6:	83 c4 1c             	add    esp,0x1c
c0008bf9:	c3                   	ret    

c0008bfa <VgaText::setCursorY(int)>:
c0008bfa:	83 ec 10             	sub    esp,0x10
c0008bfd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008c01:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008c05:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008c08:	50                   	push   eax
c0008c09:	e8 24 ff ff ff       	call   c0008b32 <VgaText::setCursor(int, int)>
c0008c0e:	83 c4 1c             	add    esp,0x1c
c0008c11:	c3                   	ret    

c0008c12 <VgaText::incrementCursor(bool)>:
c0008c12:	56                   	push   esi
c0008c13:	53                   	push   ebx
c0008c14:	51                   	push   ecx
c0008c15:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008c19:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008c1d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008c20:	40                   	inc    eax
c0008c21:	83 f8 50             	cmp    eax,0x50
c0008c24:	74 05                	je     c0008c2b <VgaText::incrementCursor(bool)+0x19>
c0008c26:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008c29:	eb 24                	jmp    c0008c4f <VgaText::incrementCursor(bool)+0x3d>
c0008c2b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008c2e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008c35:	8d 50 01             	lea    edx,[eax+0x1]
c0008c38:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008c3b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008c3e:	75 0f                	jne    c0008c4f <VgaText::incrementCursor(bool)+0x3d>
c0008c40:	83 ec 0c             	sub    esp,0xc
c0008c43:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008c46:	53                   	push   ebx
c0008c47:	e8 9c fd ff ff       	call   c00089e8 <VgaText::scrollScreen()>
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 f0                	mov    eax,esi
c0008c51:	84 c0                	test   al,al
c0008c53:	74 0c                	je     c0008c61 <VgaText::incrementCursor(bool)+0x4f>
c0008c55:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c59:	5a                   	pop    edx
c0008c5a:	5b                   	pop    ebx
c0008c5b:	5e                   	pop    esi
c0008c5c:	e9 91 fc ff ff       	jmp    c00088f2 <VgaText::updateCursor()>
c0008c61:	58                   	pop    eax
c0008c62:	5b                   	pop    ebx
c0008c63:	5e                   	pop    esi
c0008c64:	c3                   	ret    
c0008c65:	90                   	nop

c0008c66 <VgaText::decrementCursor(bool)>:
c0008c66:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008c6a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008c6e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008c71:	85 c0                	test   eax,eax
c0008c73:	74 04                	je     c0008c79 <VgaText::decrementCursor(bool)+0x13>
c0008c75:	48                   	dec    eax
c0008c76:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008c79:	84 c9                	test   cl,cl
c0008c7b:	74 09                	je     c0008c86 <VgaText::decrementCursor(bool)+0x20>
c0008c7d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008c81:	e9 6c fc ff ff       	jmp    c00088f2 <VgaText::updateCursor()>
c0008c86:	c3                   	ret    
c0008c87:	90                   	nop

c0008c88 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008c88:	53                   	push   ebx
c0008c89:	83 ec 08             	sub    esp,0x8
c0008c8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008c90:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008c94:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008c98:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008c9c:	3c 07                	cmp    al,0x7
c0008c9e:	75 21                	jne    c0008cc1 <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c0008ca0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008ca8:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0008cb0:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 3e 2d 00 00       	jmp    c000b9ff <Krnl::beep(int, int, bool)>
c0008cc1:	3c 0d                	cmp    al,0xd
c0008cc3:	75 09                	jne    c0008cce <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008cc5:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008ccc:	eb 2c                	jmp    c0008cfa <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008cce:	3c 0a                	cmp    al,0xa
c0008cd0:	75 31                	jne    c0008d03 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008cd2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008cd5:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008cdc:	8d 50 01             	lea    edx,[eax+0x1]
c0008cdf:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008ce2:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008ce5:	75 0f                	jne    c0008cf6 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008ce7:	83 ec 0c             	sub    esp,0xc
c0008cea:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008ced:	53                   	push   ebx
c0008cee:	e8 f5 fc ff ff       	call   c00089e8 <VgaText::scrollScreen()>
c0008cf3:	83 c4 10             	add    esp,0x10
c0008cf6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cfa:	83 c4 08             	add    esp,0x8
c0008cfd:	5b                   	pop    ebx
c0008cfe:	e9 ef fb ff ff       	jmp    c00088f2 <VgaText::updateCursor()>
c0008d03:	3c 08                	cmp    al,0x8
c0008d05:	75 25                	jne    c0008d2c <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c0008d07:	50                   	push   eax
c0008d08:	50                   	push   eax
c0008d09:	6a 01                	push   0x1
c0008d0b:	53                   	push   ebx
c0008d0c:	e8 55 ff ff ff       	call   c0008c66 <VgaText::decrementCursor(bool)>
c0008d11:	5a                   	pop    edx
c0008d12:	59                   	pop    ecx
c0008d13:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008d16:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008d19:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008d1c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008d1f:	6a 20                	push   0x20
c0008d21:	53                   	push   ebx
c0008d22:	e8 6b fd ff ff       	call   c0008a92 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008d27:	83 c4 28             	add    esp,0x28
c0008d2a:	5b                   	pop    ebx
c0008d2b:	c3                   	ret    
c0008d2c:	83 ec 08             	sub    esp,0x8
c0008d2f:	0f be c0             	movsx  eax,al
c0008d32:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008d35:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008d38:	51                   	push   ecx
c0008d39:	52                   	push   edx
c0008d3a:	50                   	push   eax
c0008d3b:	53                   	push   ebx
c0008d3c:	e8 51 fd ff ff       	call   c0008a92 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008d41:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008d45:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008d4d:	83 c4 28             	add    esp,0x28
c0008d50:	5b                   	pop    ebx
c0008d51:	e9 bc fe ff ff       	jmp    c0008c12 <VgaText::incrementCursor(bool)>

c0008d56 <VgaText::putchar(char)>:
c0008d56:	56                   	push   esi
c0008d57:	53                   	push   ebx
c0008d58:	83 ec 14             	sub    esp,0x14
c0008d5b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008d5f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008d63:	3c 5b                	cmp    al,0x5b
c0008d65:	75 18                	jne    c0008d7f <VgaText::putchar(char)+0x29>
c0008d67:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008d6b:	74 1f                	je     c0008d8c <VgaText::putchar(char)+0x36>
c0008d6d:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008d73:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008d7a:	e9 bd 00 00 00       	jmp    c0008e3c <VgaText::putchar(char)+0xe6>
c0008d7f:	3c 1b                	cmp    al,0x1b
c0008d81:	75 09                	jne    c0008d8c <VgaText::putchar(char)+0x36>
c0008d83:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008d87:	e9 b0 00 00 00       	jmp    c0008e3c <VgaText::putchar(char)+0xe6>
c0008d8c:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0008d8f:	84 c9                	test   cl,cl
c0008d91:	0f 84 92 00 00 00    	je     c0008e29 <VgaText::putchar(char)+0xd3>
c0008d97:	8d 50 c0             	lea    edx,[eax-0x40]
c0008d9a:	80 fa 3e             	cmp    dl,0x3e
c0008d9d:	77 76                	ja     c0008e15 <VgaText::putchar(char)+0xbf>
c0008d9f:	3c 6d                	cmp    al,0x6d
c0008da1:	75 47                	jne    c0008dea <VgaText::putchar(char)+0x94>
c0008da3:	31 f6                	xor    esi,esi
c0008da5:	31 d2                	xor    edx,edx
c0008da7:	31 c0                	xor    eax,eax
c0008da9:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0008dac:	7e 2d                	jle    c0008ddb <VgaText::putchar(char)+0x85>
c0008dae:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008db3:	80 fa 3b             	cmp    dl,0x3b
c0008db6:	75 17                	jne    c0008dcf <VgaText::putchar(char)+0x79>
c0008db8:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0008dbc:	50                   	push   eax
c0008dbd:	53                   	push   ebx
c0008dbe:	e8 45 fb ff ff       	call   c0008908 <VgaText::doANSI_SGR(int)>
c0008dc3:	59                   	pop    ecx
c0008dc4:	31 d2                	xor    edx,edx
c0008dc6:	58                   	pop    eax
c0008dc7:	31 c0                	xor    eax,eax
c0008dc9:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0008dcd:	eb 09                	jmp    c0008dd8 <VgaText::putchar(char)+0x82>
c0008dcf:	6b c0 0a             	imul   eax,eax,0xa
c0008dd2:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008dd6:	88 ca                	mov    dl,cl
c0008dd8:	46                   	inc    esi
c0008dd9:	eb ce                	jmp    c0008da9 <VgaText::putchar(char)+0x53>
c0008ddb:	84 d2                	test   dl,dl
c0008ddd:	74 2e                	je     c0008e0d <VgaText::putchar(char)+0xb7>
c0008ddf:	50                   	push   eax
c0008de0:	53                   	push   ebx
c0008de1:	e8 22 fb ff ff       	call   c0008908 <VgaText::doANSI_SGR(int)>
c0008de6:	58                   	pop    eax
c0008de7:	5a                   	pop    edx
c0008de8:	eb 23                	jmp    c0008e0d <VgaText::putchar(char)+0xb7>
c0008dea:	3c 4a                	cmp    al,0x4a
c0008dec:	75 1f                	jne    c0008e0d <VgaText::putchar(char)+0xb7>
c0008dee:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008df2:	75 19                	jne    c0008e0d <VgaText::putchar(char)+0xb7>
c0008df4:	83 ec 0c             	sub    esp,0xc
c0008df7:	53                   	push   ebx
c0008df8:	e8 97 fd ff ff       	call   c0008b94 <VgaText::clearScreen()>
c0008dfd:	83 c4 0c             	add    esp,0xc
c0008e00:	6a 00                	push   0x0
c0008e02:	6a 00                	push   0x0
c0008e04:	53                   	push   ebx
c0008e05:	e8 28 fd ff ff       	call   c0008b32 <VgaText::setCursor(int, int)>
c0008e0a:	83 c4 10             	add    esp,0x10
c0008e0d:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008e13:	eb 27                	jmp    c0008e3c <VgaText::putchar(char)+0xe6>
c0008e15:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0008e18:	83 fa 0e             	cmp    edx,0xe
c0008e1b:	7f 1f                	jg     c0008e3c <VgaText::putchar(char)+0xe6>
c0008e1d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0008e20:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008e23:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0008e27:	eb 13                	jmp    c0008e3c <VgaText::putchar(char)+0xe6>
c0008e29:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e2c:	0f be c0             	movsx  eax,al
c0008e2f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e32:	50                   	push   eax
c0008e33:	53                   	push   ebx
c0008e34:	e8 4f fe ff ff       	call   c0008c88 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008e39:	83 c4 10             	add    esp,0x10
c0008e3c:	83 c4 14             	add    esp,0x14
c0008e3f:	5b                   	pop    ebx
c0008e40:	5e                   	pop    esi
c0008e41:	c3                   	ret    

c0008e42 <VgaText::putx(unsigned int)>:
c0008e42:	57                   	push   edi
c0008e43:	b9 11 00 00 00       	mov    ecx,0x11
c0008e48:	56                   	push   esi
c0008e49:	be 7a d8 01 c0       	mov    esi,0xc001d87a
c0008e4e:	53                   	push   ebx
c0008e4f:	83 ec 20             	sub    esp,0x20
c0008e52:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008e56:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008e5a:	fc                   	cld    
c0008e5b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008e5d:	be 08 00 00 00       	mov    esi,0x8
c0008e62:	50                   	push   eax
c0008e63:	50                   	push   eax
c0008e64:	89 d8                	mov    eax,ebx
c0008e66:	c1 e3 04             	shl    ebx,0x4
c0008e69:	c1 e8 1c             	shr    eax,0x1c
c0008e6c:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008e71:	50                   	push   eax
c0008e72:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008e76:	e8 db fe ff ff       	call   c0008d56 <VgaText::putchar(char)>
c0008e7b:	83 c4 10             	add    esp,0x10
c0008e7e:	4e                   	dec    esi
c0008e7f:	75 e1                	jne    c0008e62 <VgaText::putx(unsigned int)+0x20>
c0008e81:	83 c4 20             	add    esp,0x20
c0008e84:	5b                   	pop    ebx
c0008e85:	5e                   	pop    esi
c0008e86:	5f                   	pop    edi
c0008e87:	c3                   	ret    

c0008e88 <VgaText::puts(char const*)>:
c0008e88:	53                   	push   ebx
c0008e89:	83 ec 08             	sub    esp,0x8
c0008e8c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008e90:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008e93:	84 c0                	test   al,al
c0008e95:	74 12                	je     c0008ea9 <VgaText::puts(char const*)+0x21>
c0008e97:	43                   	inc    ebx
c0008e98:	51                   	push   ecx
c0008e99:	51                   	push   ecx
c0008e9a:	50                   	push   eax
c0008e9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e9f:	e8 b2 fe ff ff       	call   c0008d56 <VgaText::putchar(char)>
c0008ea4:	83 c4 10             	add    esp,0x10
c0008ea7:	eb e7                	jmp    c0008e90 <VgaText::puts(char const*)+0x8>
c0008ea9:	83 c4 08             	add    esp,0x8
c0008eac:	5b                   	pop    ebx
c0008ead:	c3                   	ret    

c0008eae <VgaText::write(unsigned long long, void*, int*)>:
c0008eae:	55                   	push   ebp
c0008eaf:	57                   	push   edi
c0008eb0:	56                   	push   esi
c0008eb1:	53                   	push   ebx
c0008eb2:	83 ec 0c             	sub    esp,0xc
c0008eb5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008eb9:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ebd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ec1:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ec8:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ecb:	39 eb                	cmp    ebx,ebp
c0008ecd:	74 13                	je     c0008ee2 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008ecf:	43                   	inc    ebx
c0008ed0:	50                   	push   eax
c0008ed1:	50                   	push   eax
c0008ed2:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008ed6:	50                   	push   eax
c0008ed7:	56                   	push   esi
c0008ed8:	e8 79 fe ff ff       	call   c0008d56 <VgaText::putchar(char)>
c0008edd:	83 c4 10             	add    esp,0x10
c0008ee0:	eb e9                	jmp    c0008ecb <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008ee2:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008ee9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008eed:	89 38                	mov    DWORD PTR [eax],edi
c0008eef:	83 c4 0c             	add    esp,0xc
c0008ef2:	31 c0                	xor    eax,eax
c0008ef4:	5b                   	pop    ebx
c0008ef5:	5e                   	pop    esi
c0008ef6:	5f                   	pop    edi
c0008ef7:	5d                   	pop    ebp
c0008ef8:	c3                   	ret    
c0008ef9:	90                   	nop

c0008efa <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008efa:	55                   	push   ebp
c0008efb:	57                   	push   edi
c0008efc:	56                   	push   esi
c0008efd:	53                   	push   ebx
c0008efe:	83 ec 0c             	sub    esp,0xc
c0008f01:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008f05:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008f0a:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008f11:	50                   	push   eax
c0008f12:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008f17:	50                   	push   eax
c0008f18:	e8 b9 fa ff ff       	call   c00089d6 <VgaText::combineColours(unsigned char, unsigned char)>
c0008f1d:	5a                   	pop    edx
c0008f1e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008f23:	59                   	pop    ecx
c0008f24:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008f27:	89 c5                	mov    ebp,eax
c0008f29:	0f b7 f6             	movzx  esi,si
c0008f2c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008f30:	01 f6                	add    esi,esi
c0008f32:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008f35:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008f38:	84 c0                	test   al,al
c0008f3a:	0f 84 f4 00 00 00    	je     c0009034 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0008f40:	3c 0d                	cmp    al,0xd
c0008f42:	75 0c                	jne    c0008f50 <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c0008f44:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008f4b:	e9 de 00 00 00       	jmp    c000902e <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008f50:	3c 0a                	cmp    al,0xa
c0008f52:	75 45                	jne    c0008f99 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008f54:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008f57:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008f5e:	8d 48 01             	lea    ecx,[eax+0x1]
c0008f61:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008f64:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008f67:	75 0f                	jne    c0008f78 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008f69:	83 ec 0c             	sub    esp,0xc
c0008f6c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008f6f:	53                   	push   ebx
c0008f70:	e8 73 fa ff ff       	call   c00089e8 <VgaText::scrollScreen()>
c0008f75:	83 c4 10             	add    esp,0x10
c0008f78:	83 ec 0c             	sub    esp,0xc
c0008f7b:	53                   	push   ebx
c0008f7c:	e8 71 f9 ff ff       	call   c00088f2 <VgaText::updateCursor()>
c0008f81:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008f86:	83 c4 10             	add    esp,0x10
c0008f89:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008f8c:	0f b7 f6             	movzx  esi,si
c0008f8f:	01 f6                	add    esi,esi
c0008f91:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008f94:	e9 95 00 00 00       	jmp    c000902e <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008f99:	3c 08                	cmp    al,0x8
c0008f9b:	75 35                	jne    c0008fd2 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c0008f9d:	51                   	push   ecx
c0008f9e:	51                   	push   ecx
c0008f9f:	6a 01                	push   0x1
c0008fa1:	53                   	push   ebx
c0008fa2:	e8 bf fc ff ff       	call   c0008c66 <VgaText::decrementCursor(bool)>
c0008fa7:	5e                   	pop    esi
c0008fa8:	58                   	pop    eax
c0008fa9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008fac:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008faf:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008fb2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008fb5:	6a 20                	push   0x20
c0008fb7:	53                   	push   ebx
c0008fb8:	e8 d5 fa ff ff       	call   c0008a92 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008fbd:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008fc2:	83 c4 20             	add    esp,0x20
c0008fc5:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008fc8:	0f b7 f6             	movzx  esi,si
c0008fcb:	01 f6                	add    esi,esi
c0008fcd:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008fd0:	eb 5c                	jmp    c000902e <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008fd2:	52                   	push   edx
c0008fd3:	52                   	push   edx
c0008fd4:	89 ea                	mov    edx,ebp
c0008fd6:	0f b6 ca             	movzx  ecx,dl
c0008fd9:	51                   	push   ecx
c0008fda:	50                   	push   eax
c0008fdb:	e8 a0 fa ff ff       	call   c0008a80 <VgaText::combineCharAndColour(char, unsigned char)>
c0008fe0:	83 c4 10             	add    esp,0x10
c0008fe3:	66 89 06             	mov    WORD PTR [esi],ax
c0008fe6:	39 1d 44 09 02 c0    	cmp    DWORD PTR ds:0xc0020944,ebx
c0008fec:	75 1d                	jne    c000900b <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c0008fee:	83 ec 0c             	sub    esp,0xc
c0008ff1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008ff4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008ff7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008ffb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008fff:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0009002:	50                   	push   eax
c0009003:	e8 4c d4 00 00       	call   c0016454 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0009008:	83 c4 20             	add    esp,0x20
c000900b:	83 c6 02             	add    esi,0x2
c000900e:	50                   	push   eax
c000900f:	50                   	push   eax
c0009010:	6a 00                	push   0x0
c0009012:	53                   	push   ebx
c0009013:	e8 fa fb ff ff       	call   c0008c12 <VgaText::incrementCursor(bool)>
c0009018:	83 c4 10             	add    esp,0x10
c000901b:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000901f:	75 0d                	jne    c000902e <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0009021:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0009026:	0f b7 f6             	movzx  esi,si
c0009029:	01 f6                	add    esi,esi
c000902b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000902e:	47                   	inc    edi
c000902f:	e9 01 ff ff ff       	jmp    c0008f35 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0009034:	83 ec 0c             	sub    esp,0xc
c0009037:	53                   	push   ebx
c0009038:	e8 b5 f8 ff ff       	call   c00088f2 <VgaText::updateCursor()>
c000903d:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0009044:	83 c4 1c             	add    esp,0x1c
c0009047:	5b                   	pop    ebx
c0009048:	5e                   	pop    esi
c0009049:	5f                   	pop    edi
c000904a:	5d                   	pop    ebp
c000904b:	c3                   	ret    

c000904c <VgaText::VgaText(char const*)>:
c000904c:	56                   	push   esi
c000904d:	53                   	push   ebx
c000904e:	83 ec 04             	sub    esp,0x4
c0009051:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009055:	83 ec 08             	sub    esp,0x8
c0009058:	6a 00                	push   0x0
c000905a:	50                   	push   eax
c000905b:	e8 b2 04 00 00       	call   c0009512 <UnixFile::UnixFile(int)>
c0009060:	83 c4 10             	add    esp,0x10
c0009063:	ba e0 d8 01 c0       	mov    edx,0xc001d8e0
c0009068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000906c:	89 10                	mov    DWORD PTR [eax],edx
c000906e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009072:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0009079:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000907d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0009084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009088:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000908c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009090:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0009094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009098:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000909f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090a3:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00090aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090ae:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00090b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090b9:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00090c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090c4:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c00090cb:	83 ec 0c             	sub    esp,0xc
c00090ce:	6a 01                	push   0x1
c00090d0:	e8 80 08 00 00       	call   c0009955 <Virt::allocateKernelVirtualPages(int)>
c00090d5:	83 c4 10             	add    esp,0x10
c00090d8:	89 c2                	mov    edx,eax
c00090da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090de:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00090e1:	8b 1d f0 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209f0
c00090e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090eb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00090ee:	89 c6                	mov    esi,eax
c00090f0:	e8 f1 f0 ff ff       	call   c00081e6 <Phys::allocatePage()>
c00090f5:	68 05 0c 00 00       	push   0xc05
c00090fa:	56                   	push   esi
c00090fb:	50                   	push   eax
c00090fc:	53                   	push   ebx
c00090fd:	e8 e8 0e 00 00       	call   c0009fea <VAS::mapPage(unsigned long, unsigned long, int)>
c0009102:	83 c4 10             	add    esp,0x10
c0009105:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009109:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000910c:	83 ec 04             	sub    esp,0x4
c000910f:	68 a0 0f 00 00       	push   0xfa0
c0009114:	6a 00                	push   0x0
c0009116:	50                   	push   eax
c0009117:	e8 d4 73 ff ff       	call   c00004f0 <memset>
c000911c:	83 c4 10             	add    esp,0x10
c000911f:	83 ec 04             	sub    esp,0x4
c0009122:	6a 00                	push   0x0
c0009124:	6a 07                	push   0x7
c0009126:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000912a:	e8 6d f8 ff ff       	call   c000899c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000912f:	83 c4 10             	add    esp,0x10
c0009132:	83 ec 04             	sub    esp,0x4
c0009135:	6a 00                	push   0x0
c0009137:	6a 00                	push   0x0
c0009139:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000913d:	e8 f0 f9 ff ff       	call   c0008b32 <VgaText::setCursor(int, int)>
c0009142:	83 c4 10             	add    esp,0x10
c0009145:	83 ec 0c             	sub    esp,0xc
c0009148:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000914c:	e8 43 fa ff ff       	call   c0008b94 <VgaText::clearScreen()>
c0009151:	83 c4 10             	add    esp,0x10
c0009154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009158:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000915c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009160:	05 82 00 00 00       	add    eax,0x82
c0009165:	83 ec 04             	sub    esp,0x4
c0009168:	6a 30                	push   0x30
c000916a:	6a 00                	push   0x0
c000916c:	50                   	push   eax
c000916d:	e8 7e 73 ff ff       	call   c00004f0 <memset>
c0009172:	83 c4 10             	add    esp,0x10
c0009175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009179:	05 b2 00 00 00       	add    eax,0xb2
c000917e:	83 ec 04             	sub    esp,0x4
c0009181:	68 80 00 00 00       	push   0x80
c0009186:	6a 00                	push   0x0
c0009188:	50                   	push   eax
c0009189:	e8 62 73 ff ff       	call   c00004f0 <memset>
c000918e:	83 c4 10             	add    esp,0x10
c0009191:	90                   	nop
c0009192:	83 c4 04             	add    esp,0x4
c0009195:	5b                   	pop    ebx
c0009196:	5e                   	pop    esi
c0009197:	c3                   	ret    

c0009198 <VgaText::receiveKey(unsigned char)>:
c0009198:	57                   	push   edi
c0009199:	56                   	push   esi
c000919a:	53                   	push   ebx
c000919b:	83 ec 10             	sub    esp,0x10
c000919e:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00091a2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00091a6:	84 db                	test   bl,bl
c00091a8:	0f 84 ba 00 00 00    	je     c0009268 <VgaText::receiveKey(unsigned char)+0xd0>
c00091ae:	8d be 82 00 00 00    	lea    edi,[esi+0x82]
c00091b4:	80 fb 08             	cmp    bl,0x8
c00091b7:	75 2c                	jne    c00091e5 <VgaText::receiveKey(unsigned char)+0x4d>
c00091b9:	83 ec 0c             	sub    esp,0xc
c00091bc:	57                   	push   edi
c00091bd:	e8 9e 73 ff ff       	call   c0000560 <strlen>
c00091c2:	83 c4 10             	add    esp,0x10
c00091c5:	85 c0                	test   eax,eax
c00091c7:	74 41                	je     c000920a <VgaText::receiveKey(unsigned char)+0x72>
c00091c9:	50                   	push   eax
c00091ca:	50                   	push   eax
c00091cb:	6a 08                	push   0x8
c00091cd:	56                   	push   esi
c00091ce:	e8 83 fb ff ff       	call   c0008d56 <VgaText::putchar(char)>
c00091d3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00091d6:	e8 85 73 ff ff       	call   c0000560 <strlen>
c00091db:	c6 84 06 81 00 00 00 00 	mov    BYTE PTR [esi+eax*1+0x81],0x0
c00091e3:	eb 22                	jmp    c0009207 <VgaText::receiveKey(unsigned char)+0x6f>
c00091e5:	0f be c3             	movsx  eax,bl
c00091e8:	52                   	push   edx
c00091e9:	52                   	push   edx
c00091ea:	50                   	push   eax
c00091eb:	56                   	push   esi
c00091ec:	e8 65 fb ff ff       	call   c0008d56 <VgaText::putchar(char)>
c00091f1:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00091f5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00091fa:	59                   	pop    ecx
c00091fb:	58                   	pop    eax
c00091fc:	8d 44 24 16          	lea    eax,[esp+0x16]
c0009200:	50                   	push   eax
c0009201:	57                   	push   edi
c0009202:	e8 d9 75 ff ff       	call   c00007e0 <strcat>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0009211:	75 05                	jne    c0009218 <VgaText::receiveKey(unsigned char)+0x80>
c0009213:	80 fb 0a             	cmp    bl,0xa
c0009216:	75 50                	jne    c0009268 <VgaText::receiveKey(unsigned char)+0xd0>
c0009218:	83 ec 0c             	sub    esp,0xc
c000921b:	81 c6 b2 00 00 00    	add    esi,0xb2
c0009221:	56                   	push   esi
c0009222:	e8 39 73 ff ff       	call   c0000560 <strlen>
c0009227:	89 3c 24             	mov    DWORD PTR [esp],edi
c000922a:	89 c3                	mov    ebx,eax
c000922c:	e8 2f 73 ff ff       	call   c0000560 <strlen>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	8d 44 03 04          	lea    eax,[ebx+eax*1+0x4]
c0009238:	3d 80 00 00 00       	cmp    eax,0x80
c000923d:	76 10                	jbe    c000924f <VgaText::receiveKey(unsigned char)+0xb7>
c000923f:	83 ec 0c             	sub    esp,0xc
c0009242:	68 8b d8 01 c0       	push   0xc001d88b
c0009247:	e8 ab 74 00 00       	call   c00106f7 <Krnl::panic(char const*)>
c000924c:	83 c4 10             	add    esp,0x10
c000924f:	50                   	push   eax
c0009250:	50                   	push   eax
c0009251:	57                   	push   edi
c0009252:	56                   	push   esi
c0009253:	e8 88 75 ff ff       	call   c00007e0 <strcat>
c0009258:	83 c4 0c             	add    esp,0xc
c000925b:	6a 30                	push   0x30
c000925d:	6a 00                	push   0x0
c000925f:	57                   	push   edi
c0009260:	e8 8b 72 ff ff       	call   c00004f0 <memset>
c0009265:	83 c4 10             	add    esp,0x10
c0009268:	83 c4 10             	add    esp,0x10
c000926b:	5b                   	pop    ebx
c000926c:	5e                   	pop    esi
c000926d:	5f                   	pop    edi
c000926e:	c3                   	ret    
c000926f:	90                   	nop

c0009270 <VgaText::doUpdate()>:
c0009270:	c3                   	ret    

c0009271 <newTerminal(char*)>:
c0009271:	83 ec 28             	sub    esp,0x28
c0009274:	68 34 01 00 00       	push   0x134
c0009279:	e8 9b eb ff ff       	call   c0007e19 <malloc>
c000927e:	5a                   	pop    edx
c000927f:	59                   	pop    ecx
c0009280:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009284:	50                   	push   eax
c0009285:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009289:	e8 be fd ff ff       	call   c000904c <VgaText::VgaText(char const*)>
c000928e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009292:	83 c4 2c             	add    esp,0x2c
c0009295:	c3                   	ret    
c0009296:	66 90                	xchg   ax,ax

c0009298 <TSS::TSS()>:
c0009298:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000929c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00092a3:	90                   	nop
c00092a4:	c3                   	ret    
c00092a5:	90                   	nop
c00092a6:	66 90                	xchg   ax,ax

c00092a8 <TSS::setESP(unsigned long)>:
c00092a8:	55                   	push   ebp
c00092a9:	89 e5                	mov    ebp,esp
c00092ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00092ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00092b1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00092b4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00092b7:	90                   	nop
c00092b8:	5d                   	pop    ebp
c00092b9:	c3                   	ret    
c00092ba:	66 90                	xchg   ax,ax

c00092bc <TSS::flush()>:
c00092bc:	55                   	push   ebp
c00092bd:	89 e5                	mov    ebp,esp
c00092bf:	83 ec 10             	sub    esp,0x10
c00092c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00092c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00092c7:	83 c8 03             	or     eax,0x3
c00092ca:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00092ce:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00092d2:	66 89 d0             	mov    ax,dx
c00092d5:	0f 00 d8             	ltr    ax
c00092d8:	90                   	nop
c00092d9:	c9                   	leave  
c00092da:	c3                   	ret    
c00092db:	90                   	nop

c00092dc <TSS::setup(unsigned long, unsigned long)>:
c00092dc:	55                   	push   ebp
c00092dd:	89 e5                	mov    ebp,esp
c00092df:	83 ec 18             	sub    esp,0x18
c00092e2:	83 ec 0c             	sub    esp,0xc
c00092e5:	6a 68                	push   0x68
c00092e7:	e8 2d eb ff ff       	call   c0007e19 <malloc>
c00092ec:	83 c4 10             	add    esp,0x10
c00092ef:	89 c2                	mov    edx,eax
c00092f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00092f4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00092f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00092fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00092fd:	83 ec 04             	sub    esp,0x4
c0009300:	6a 68                	push   0x68
c0009302:	6a 00                	push   0x0
c0009304:	50                   	push   eax
c0009305:	e8 e6 71 ff ff       	call   c00004f0 <memset>
c000930a:	83 c4 10             	add    esp,0x10
c000930d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009310:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009313:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0009319:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000931c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000931f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0009325:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009328:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000932b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000932e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009331:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009334:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009337:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000933d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009340:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009343:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0009349:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000934c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000934f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009355:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009358:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000935b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0009361:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009364:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009367:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000936d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009370:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009373:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009379:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000937c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000937f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009382:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009385:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009388:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000938b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000938e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009391:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009394:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009397:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000939e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093a1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093a4:	0f 20 da             	mov    edx,cr3
c00093a7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00093aa:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00093ad:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00093b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093b3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093b6:	83 ec 08             	sub    esp,0x8
c00093b9:	50                   	push   eax
c00093ba:	8d 45 ec             	lea    eax,[ebp-0x14]
c00093bd:	50                   	push   eax
c00093be:	e8 e1 e2 ff ff       	call   c00076a4 <GDTEntry::setBase(unsigned int)>
c00093c3:	83 c4 10             	add    esp,0x10
c00093c6:	83 ec 08             	sub    esp,0x8
c00093c9:	6a 68                	push   0x68
c00093cb:	8d 45 ec             	lea    eax,[ebp-0x14]
c00093ce:	50                   	push   eax
c00093cf:	e8 ec e2 ff ff       	call   c00076c0 <GDTEntry::setLimit(unsigned int)>
c00093d4:	83 c4 10             	add    esp,0x10
c00093d7:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00093db:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00093de:	83 e0 0f             	and    eax,0xf
c00093e1:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00093e4:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00093e7:	83 c8 40             	or     eax,0x40
c00093ea:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00093ed:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c00093f2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00093f8:	05 78 01 00 00       	add    eax,0x178
c00093fd:	83 ec 04             	sub    esp,0x4
c0009400:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009403:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0009406:	50                   	push   eax
c0009407:	e8 e8 e2 ff ff       	call   c00076f4 <GDT::addEntry(GDTEntry)>
c000940c:	83 c4 10             	add    esp,0x10
c000940f:	89 c2                	mov    edx,eax
c0009411:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009414:	89 10                	mov    DWORD PTR [eax],edx
c0009416:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c000941b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009421:	05 78 01 00 00       	add    eax,0x178
c0009426:	83 ec 0c             	sub    esp,0xc
c0009429:	50                   	push   eax
c000942a:	e8 ef e2 ff ff       	call   c000771e <GDT::flush()>
c000942f:	83 c4 10             	add    esp,0x10
c0009432:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009435:	8b 00                	mov    eax,DWORD PTR [eax]
c0009437:	c9                   	leave  
c0009438:	c3                   	ret    
c0009439:	90                   	nop

c000943a <ReservedFilename::read(unsigned long long, void*, int*)>:
c000943a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000943e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009442:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009445:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000944a:	75 08                	jne    c0009454 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000944c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009452:	eb 38                	jmp    c000948c <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009454:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009459:	75 17                	jne    c0009472 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000945b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009460:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009463:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009469:	8b 10                	mov    edx,DWORD PTR [eax]
c000946b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000946f:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009472:	89 c1                	mov    ecx,eax
c0009474:	83 e1 fd             	and    ecx,0xfffffffd
c0009477:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000947d:	74 cd                	je     c000944c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000947f:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009484:	83 e0 ef             	and    eax,0xffffffef
c0009487:	83 f8 08             	cmp    eax,0x8
c000948a:	76 c0                	jbe    c000944c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000948c:	31 c0                	xor    eax,eax
c000948e:	c3                   	ret    
c000948f:	90                   	nop

c0009490 <ReservedFilename::isAtty()>:
c0009490:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009494:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009497:	31 c0                	xor    eax,eax
c0009499:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000949f:	74 09                	je     c00094aa <ReservedFilename::isAtty()+0x1a>
c00094a1:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00094a7:	0f 94 c0             	sete   al
c00094aa:	c3                   	ret    
c00094ab:	90                   	nop

c00094ac <ReservedFilename::write(unsigned long long, void*, int*)>:
c00094ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094b0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00094b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00094b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00094bb:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00094c0:	75 08                	jne    c00094ca <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00094c2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00094c8:	eb 3d                	jmp    c0009507 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00094ca:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00094cf:	75 17                	jne    c00094e8 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00094d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00094d6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00094d9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00094df:	8b 10                	mov    edx,DWORD PTR [eax]
c00094e1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00094e5:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00094e8:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00094ed:	75 04                	jne    c00094f3 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00094ef:	89 0a                	mov    DWORD PTR [edx],ecx
c00094f1:	eb 14                	jmp    c0009507 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00094f3:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00094f8:	74 c8                	je     c00094c2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00094fa:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00094ff:	83 e0 ef             	and    eax,0xffffffef
c0009502:	83 f8 08             	cmp    eax,0x8
c0009505:	76 bb                	jbe    c00094c2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0009507:	31 c0                	xor    eax,eax
c0009509:	c3                   	ret    

c000950a <UnixFile::getFileDescriptor()>:
c000950a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000950e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009511:	c3                   	ret    

c0009512 <UnixFile::UnixFile(int)>:
c0009512:	53                   	push   ebx
c0009513:	83 ec 28             	sub    esp,0x28
c0009516:	ba a8 d9 01 c0       	mov    edx,0xc001d9a8
c000951b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000951f:	89 10                	mov    DWORD PTR [eax],edx
c0009521:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0009529:	0f 8f 8c 01 00 00    	jg     c00096bb <UnixFile::UnixFile(int)+0x1a9>
c000952f:	a1 40 f8 01 c0       	mov    eax,ds:0xc001f840
c0009534:	8d 50 01             	lea    edx,[eax+0x1]
c0009537:	89 15 40 f8 01 c0    	mov    DWORD PTR ds:0xc001f840,edx
c000953d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009541:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009544:	83 ec 08             	sub    esp,0x8
c0009547:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000954b:	68 d8 09 02 c0       	push   0xc00209d8
c0009550:	e8 03 2f 01 00       	call   c001c458 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009555:	83 c4 10             	add    esp,0x10
c0009558:	a0 d4 09 02 c0       	mov    al,ds:0xc00209d4
c000955d:	83 f0 01             	xor    eax,0x1
c0009560:	84 c0                	test   al,al
c0009562:	0f 84 54 01 00 00    	je     c00096bc <UnixFile::UnixFile(int)+0x1aa>
c0009568:	c6 05 d4 09 02 c0 01 	mov    BYTE PTR ds:0xc00209d4,0x1
c000956f:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009577:	83 ec 0c             	sub    esp,0xc
c000957a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000957e:	e8 96 e8 ff ff       	call   c0007e19 <malloc>
c0009583:	83 c4 10             	add    esp,0x10
c0009586:	89 c3                	mov    ebx,eax
c0009588:	83 ec 08             	sub    esp,0x8
c000958b:	68 03 ff ff 0f       	push   0xfffff03
c0009590:	53                   	push   ebx
c0009591:	e8 2c 01 00 00       	call   c00096c2 <ReservedFilename::ReservedFilename(int)>
c0009596:	83 c4 10             	add    esp,0x10
c0009599:	89 1d cc 09 02 c0    	mov    DWORD PTR ds:0xc00209cc,ebx
c000959f:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00095a7:	83 ec 0c             	sub    esp,0xc
c00095aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095ae:	e8 66 e8 ff ff       	call   c0007e19 <malloc>
c00095b3:	83 c4 10             	add    esp,0x10
c00095b6:	89 c3                	mov    ebx,eax
c00095b8:	83 ec 08             	sub    esp,0x8
c00095bb:	68 01 ff ff 0f       	push   0xfffff01
c00095c0:	53                   	push   ebx
c00095c1:	e8 fc 00 00 00       	call   c00096c2 <ReservedFilename::ReservedFilename(int)>
c00095c6:	83 c4 10             	add    esp,0x10
c00095c9:	89 1d d0 09 02 c0    	mov    DWORD PTR ds:0xc00209d0,ebx
c00095cf:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00095d7:	83 ec 0c             	sub    esp,0xc
c00095da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00095de:	e8 36 e8 ff ff       	call   c0007e19 <malloc>
c00095e3:	83 c4 10             	add    esp,0x10
c00095e6:	89 c3                	mov    ebx,eax
c00095e8:	83 ec 08             	sub    esp,0x8
c00095eb:	68 00 ff ff 0f       	push   0xfffff00
c00095f0:	53                   	push   ebx
c00095f1:	e8 cc 00 00 00       	call   c00096c2 <ReservedFilename::ReservedFilename(int)>
c00095f6:	83 c4 10             	add    esp,0x10
c00095f9:	89 1d c4 09 02 c0    	mov    DWORD PTR ds:0xc00209c4,ebx
c00095ff:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0009607:	83 ec 0c             	sub    esp,0xc
c000960a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000960e:	e8 06 e8 ff ff       	call   c0007e19 <malloc>
c0009613:	83 c4 10             	add    esp,0x10
c0009616:	89 c3                	mov    ebx,eax
c0009618:	83 ec 08             	sub    esp,0x8
c000961b:	68 02 ff ff 0f       	push   0xfffff02
c0009620:	53                   	push   ebx
c0009621:	e8 9c 00 00 00       	call   c00096c2 <ReservedFilename::ReservedFilename(int)>
c0009626:	83 c4 10             	add    esp,0x10
c0009629:	89 1d c8 09 02 c0    	mov    DWORD PTR ds:0xc00209c8,ebx
c000962f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009637:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000963c:	7f 7e                	jg     c00096bc <UnixFile::UnixFile(int)+0x1aa>
c000963e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0009646:	83 ec 0c             	sub    esp,0xc
c0009649:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000964d:	e8 c7 e7 ff ff       	call   c0007e19 <malloc>
c0009652:	83 c4 10             	add    esp,0x10
c0009655:	89 c3                	mov    ebx,eax
c0009657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000965b:	05 10 ff ff 0f       	add    eax,0xfffff10
c0009660:	83 ec 08             	sub    esp,0x8
c0009663:	50                   	push   eax
c0009664:	53                   	push   ebx
c0009665:	e8 58 00 00 00       	call   c00096c2 <ReservedFilename::ReservedFilename(int)>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009671:	89 1c 85 a0 09 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf660],ebx
c0009678:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009680:	83 ec 0c             	sub    esp,0xc
c0009683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009687:	e8 8d e7 ff ff       	call   c0007e19 <malloc>
c000968c:	83 c4 10             	add    esp,0x10
c000968f:	89 c3                	mov    ebx,eax
c0009691:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009695:	05 20 ff ff 0f       	add    eax,0xfffff20
c000969a:	83 ec 08             	sub    esp,0x8
c000969d:	50                   	push   eax
c000969e:	53                   	push   ebx
c000969f:	e8 1e 00 00 00       	call   c00096c2 <ReservedFilename::ReservedFilename(int)>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096ab:	89 1c 85 60 09 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf6a0],ebx
c00096b2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00096b6:	e9 7c ff ff ff       	jmp    c0009637 <UnixFile::UnixFile(int)+0x125>
c00096bb:	90                   	nop
c00096bc:	83 c4 28             	add    esp,0x28
c00096bf:	5b                   	pop    ebx
c00096c0:	c3                   	ret    
c00096c1:	90                   	nop

c00096c2 <ReservedFilename::ReservedFilename(int)>:
c00096c2:	83 ec 0c             	sub    esp,0xc
c00096c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00096c9:	83 ec 08             	sub    esp,0x8
c00096cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00096d0:	50                   	push   eax
c00096d1:	e8 3c fe ff ff       	call   c0009512 <UnixFile::UnixFile(int)>
c00096d6:	83 c4 10             	add    esp,0x10
c00096d9:	ba c4 d9 01 c0       	mov    edx,0xc001d9c4
c00096de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00096e2:	89 10                	mov    DWORD PTR [eax],edx
c00096e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00096e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00096ec:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00096ef:	90                   	nop
c00096f0:	83 c4 0c             	add    esp,0xc
c00096f3:	c3                   	ret    

c00096f4 <UnixFile::~UnixFile()>:
c00096f4:	83 ec 1c             	sub    esp,0x1c
c00096f7:	ba a8 d9 01 c0       	mov    edx,0xc001d9a8
c00096fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009700:	89 10                	mov    DWORD PTR [eax],edx
c0009702:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009706:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009709:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000970e:	7f 73                	jg     c0009783 <UnixFile::~UnixFile()+0x8f>
c0009710:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009718:	83 ec 0c             	sub    esp,0xc
c000971b:	68 d8 09 02 c0       	push   0xc00209d8
c0009720:	e8 07 2e 01 00       	call   c001c52c <LinkedList<UnixFile>::getFirstElement()>
c0009725:	83 c4 10             	add    esp,0x10
c0009728:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000972c:	83 ec 0c             	sub    esp,0xc
c000972f:	68 d8 09 02 c0       	push   0xc00209d8
c0009734:	e8 fb 2d 01 00       	call   c001c534 <LinkedList<UnixFile>::removeFirst()>
c0009739:	83 c4 10             	add    esp,0x10
c000973c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009740:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009744:	74 40                	je     c0009786 <UnixFile::~UnixFile()+0x92>
c0009746:	83 ec 08             	sub    esp,0x8
c0009749:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000974d:	68 d8 09 02 c0       	push   0xc00209d8
c0009752:	e8 01 2d 01 00       	call   c001c458 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009757:	83 c4 10             	add    esp,0x10
c000975a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000975e:	8d 50 01             	lea    edx,[eax+0x1]
c0009761:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009765:	3d 88 13 00 00       	cmp    eax,0x1388
c000976a:	0f 94 c0             	sete   al
c000976d:	84 c0                	test   al,al
c000976f:	74 a7                	je     c0009718 <UnixFile::~UnixFile()+0x24>
c0009771:	83 ec 0c             	sub    esp,0xc
c0009774:	68 80 d9 01 c0       	push   0xc001d980
c0009779:	e8 79 6f 00 00       	call   c00106f7 <Krnl::panic(char const*)>
c000977e:	83 c4 10             	add    esp,0x10
c0009781:	eb 95                	jmp    c0009718 <UnixFile::~UnixFile()+0x24>
c0009783:	90                   	nop
c0009784:	eb 01                	jmp    c0009787 <UnixFile::~UnixFile()+0x93>
c0009786:	90                   	nop
c0009787:	90                   	nop
c0009788:	83 c4 1c             	add    esp,0x1c
c000978b:	c3                   	ret    

c000978c <UnixFile::~UnixFile()>:
c000978c:	83 ec 0c             	sub    esp,0xc
c000978f:	83 ec 0c             	sub    esp,0xc
c0009792:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009796:	e8 59 ff ff ff       	call   c00096f4 <UnixFile::~UnixFile()>
c000979b:	83 c4 10             	add    esp,0x10
c000979e:	83 ec 08             	sub    esp,0x8
c00097a1:	6a 0c                	push   0xc
c00097a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097a7:	e8 06 13 00 00       	call   c000aab2 <operator delete(void*, unsigned long)>
c00097ac:	83 c4 10             	add    esp,0x10
c00097af:	83 c4 0c             	add    esp,0xc
c00097b2:	c3                   	ret    
c00097b3:	90                   	nop

c00097b4 <ReservedFilename::~ReservedFilename()>:
c00097b4:	83 ec 0c             	sub    esp,0xc
c00097b7:	ba c4 d9 01 c0       	mov    edx,0xc001d9c4
c00097bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097c0:	89 10                	mov    DWORD PTR [eax],edx
c00097c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097c6:	83 ec 0c             	sub    esp,0xc
c00097c9:	50                   	push   eax
c00097ca:	e8 25 ff ff ff       	call   c00096f4 <UnixFile::~UnixFile()>
c00097cf:	83 c4 10             	add    esp,0x10
c00097d2:	90                   	nop
c00097d3:	83 c4 0c             	add    esp,0xc
c00097d6:	c3                   	ret    
c00097d7:	90                   	nop

c00097d8 <ReservedFilename::~ReservedFilename()>:
c00097d8:	83 ec 0c             	sub    esp,0xc
c00097db:	83 ec 0c             	sub    esp,0xc
c00097de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097e2:	e8 cd ff ff ff       	call   c00097b4 <ReservedFilename::~ReservedFilename()>
c00097e7:	83 c4 10             	add    esp,0x10
c00097ea:	83 ec 08             	sub    esp,0x8
c00097ed:	6a 0c                	push   0xc
c00097ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097f3:	e8 ba 12 00 00       	call   c000aab2 <operator delete(void*, unsigned long)>
c00097f8:	83 c4 10             	add    esp,0x10
c00097fb:	83 c4 0c             	add    esp,0xc
c00097fe:	c3                   	ret    

c00097ff <getFromFileDescriptor(int)>:
c00097ff:	53                   	push   ebx
c0009800:	83 ec 08             	sub    esp,0x8
c0009803:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009807:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000980d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0009813:	7f 2c                	jg     c0009841 <getFromFileDescriptor(int)+0x42>
c0009815:	83 ec 0c             	sub    esp,0xc
c0009818:	68 d8 09 02 c0       	push   0xc00209d8
c000981d:	e8 0a 2d 01 00       	call   c001c52c <LinkedList<UnixFile>::getFirstElement()>
c0009822:	83 c4 10             	add    esp,0x10
c0009825:	85 c0                	test   eax,eax
c0009827:	75 04                	jne    c000982d <getFromFileDescriptor(int)+0x2e>
c0009829:	31 c0                	xor    eax,eax
c000982b:	eb 6e                	jmp    c000989b <getFromFileDescriptor(int)+0x9c>
c000982d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009830:	74 69                	je     c000989b <getFromFileDescriptor(int)+0x9c>
c0009832:	52                   	push   edx
c0009833:	52                   	push   edx
c0009834:	50                   	push   eax
c0009835:	68 d8 09 02 c0       	push   0xc00209d8
c000983a:	e8 97 2d 01 00       	call   c001c5d6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000983f:	eb e1                	jmp    c0009822 <getFromFileDescriptor(int)+0x23>
c0009841:	a1 cc 09 02 c0       	mov    eax,ds:0xc00209cc
c0009846:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000984c:	74 4d                	je     c000989b <getFromFileDescriptor(int)+0x9c>
c000984e:	a1 d0 09 02 c0       	mov    eax,ds:0xc00209d0
c0009853:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009859:	74 40                	je     c000989b <getFromFileDescriptor(int)+0x9c>
c000985b:	a1 c8 09 02 c0       	mov    eax,ds:0xc00209c8
c0009860:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0009866:	74 33                	je     c000989b <getFromFileDescriptor(int)+0x9c>
c0009868:	a1 c4 09 02 c0       	mov    eax,ds:0xc00209c4
c000986d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009873:	74 26                	je     c000989b <getFromFileDescriptor(int)+0x9c>
c0009875:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000987b:	83 f8 08             	cmp    eax,0x8
c000987e:	77 09                	ja     c0009889 <getFromFileDescriptor(int)+0x8a>
c0009880:	8b 04 85 a0 09 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf660]
c0009887:	eb 12                	jmp    c000989b <getFromFileDescriptor(int)+0x9c>
c0009889:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000988f:	83 fb 08             	cmp    ebx,0x8
c0009892:	77 95                	ja     c0009829 <getFromFileDescriptor(int)+0x2a>
c0009894:	8b 04 9d 60 09 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdf6a0]
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <__static_initialization_and_destruction_0(int, int)>:
c00098a0:	83 ec 0c             	sub    esp,0xc
c00098a3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00098a8:	75 34                	jne    c00098de <__static_initialization_and_destruction_0(int, int)+0x3e>
c00098aa:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00098b2:	75 2a                	jne    c00098de <__static_initialization_and_destruction_0(int, int)+0x3e>
c00098b4:	83 ec 0c             	sub    esp,0xc
c00098b7:	68 d8 09 02 c0       	push   0xc00209d8
c00098bc:	e8 55 2b 01 00       	call   c001c416 <LinkedList<UnixFile>::LinkedList()>
c00098c1:	83 c4 10             	add    esp,0x10
c00098c4:	83 ec 04             	sub    esp,0x4
c00098c7:	68 64 f6 01 c0       	push   0xc001f664
c00098cc:	68 d8 09 02 c0       	push   0xc00209d8
c00098d1:	68 14 c4 01 c0       	push   0xc001c414
c00098d6:	e8 87 11 00 00       	call   c000aa62 <__cxa_atexit>
c00098db:	83 c4 10             	add    esp,0x10
c00098de:	90                   	nop
c00098df:	83 c4 0c             	add    esp,0xc
c00098e2:	c3                   	ret    

c00098e3 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00098e3:	83 ec 0c             	sub    esp,0xc
c00098e6:	83 ec 08             	sub    esp,0x8
c00098e9:	68 ff ff 00 00       	push   0xffff
c00098ee:	6a 01                	push   0x1
c00098f0:	e8 ab ff ff ff       	call   c00098a0 <__static_initialization_and_destruction_0(int, int)>
c00098f5:	83 c4 10             	add    esp,0x10
c00098f8:	83 c4 0c             	add    esp,0xc
c00098fb:	c3                   	ret    

c00098fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00098fc:	53                   	push   ebx
c00098fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009901:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009905:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000990b:	89 c8                	mov    eax,ecx
c000990d:	d1 e8                	shr    eax,1
c000990f:	03 05 48 f8 01 c0    	add    eax,DWORD PTR ds:0xc001f848
c0009915:	83 e1 01             	and    ecx,0x1
c0009918:	8a 10                	mov    dl,BYTE PTR [eax]
c000991a:	75 09                	jne    c0009925 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000991c:	83 e2 f0             	and    edx,0xfffffff0
c000991f:	09 da                	or     edx,ebx
c0009921:	88 10                	mov    BYTE PTR [eax],dl
c0009923:	5b                   	pop    ebx
c0009924:	c3                   	ret    
c0009925:	c1 e3 04             	shl    ebx,0x4
c0009928:	83 e2 0f             	and    edx,0xf
c000992b:	09 da                	or     edx,ebx
c000992d:	88 10                	mov    BYTE PTR [eax],dl
c000992f:	5b                   	pop    ebx
c0009930:	c3                   	ret    

c0009931 <Virt::getPageState(unsigned long)>:
c0009931:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009935:	8b 0d 48 f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f848
c000993b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009941:	89 d0                	mov    eax,edx
c0009943:	d1 e8                	shr    eax,1
c0009945:	83 e2 01             	and    edx,0x1
c0009948:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000994b:	75 04                	jne    c0009951 <Virt::getPageState(unsigned long)+0x20>
c000994d:	83 e0 0f             	and    eax,0xf
c0009950:	c3                   	ret    
c0009951:	c0 e8 04             	shr    al,0x4
c0009954:	c3                   	ret    

c0009955 <Virt::allocateKernelVirtualPages(int)>:
c0009955:	55                   	push   ebp
c0009956:	31 ed                	xor    ebp,ebp
c0009958:	57                   	push   edi
c0009959:	56                   	push   esi
c000995a:	53                   	push   ebx
c000995b:	31 db                	xor    ebx,ebx
c000995d:	83 ec 1c             	sub    esp,0x1c
c0009960:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009964:	8b 3d 44 f8 01 c0    	mov    edi,DWORD PTR ds:0xc001f844
c000996a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000996f:	57                   	push   edi
c0009970:	e8 bc ff ff ff       	call   c0009931 <Virt::getPageState(unsigned long)>
c0009975:	5a                   	pop    edx
c0009976:	84 c0                	test   al,al
c0009978:	75 3a                	jne    c00099b4 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000997a:	85 db                	test   ebx,ebx
c000997c:	75 02                	jne    c0009980 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000997e:	89 fd                	mov    ebp,edi
c0009980:	43                   	inc    ebx
c0009981:	39 f3                	cmp    ebx,esi
c0009983:	74 5a                	je     c00099df <Virt::allocateKernelVirtualPages(int)+0x8a>
c0009985:	47                   	inc    edi
c0009986:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000998c:	76 31                	jbe    c00099bf <Virt::allocateKernelVirtualPages(int)+0x6a>
c000998e:	c7 05 44 f8 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001f844,0xc8000
c0009998:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000999d:	75 28                	jne    c00099c7 <Virt::allocateKernelVirtualPages(int)+0x72>
c000999f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00099a4:	bf 00 80 0c 00       	mov    edi,0xc8000
c00099a9:	57                   	push   edi
c00099aa:	e8 82 ff ff ff       	call   c0009931 <Virt::getPageState(unsigned long)>
c00099af:	5a                   	pop    edx
c00099b0:	84 c0                	test   al,al
c00099b2:	74 c6                	je     c000997a <Virt::allocateKernelVirtualPages(int)+0x25>
c00099b4:	31 db                	xor    ebx,ebx
c00099b6:	47                   	inc    edi
c00099b7:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00099bd:	77 cf                	ja     c000998e <Virt::allocateKernelVirtualPages(int)+0x39>
c00099bf:	89 3d 44 f8 01 c0    	mov    DWORD PTR ds:0xc001f844,edi
c00099c5:	eb a8                	jmp    c000996f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00099c7:	83 ec 0c             	sub    esp,0xc
c00099ca:	68 d8 d9 01 c0       	push   0xc001d9d8
c00099cf:	e8 23 6d 00 00       	call   c00106f7 <Krnl::panic(char const*)>
c00099d4:	8b 3d 44 f8 01 c0    	mov    edi,DWORD PTR ds:0xc001f844
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	eb 90                	jmp    c000996f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00099df:	89 2d 44 f8 01 c0    	mov    DWORD PTR ds:0xc001f844,ebp
c00099e5:	4b                   	dec    ebx
c00099e6:	74 5f                	je     c0009a47 <Virt::allocateKernelVirtualPages(int)+0xf2>
c00099e8:	85 f6                	test   esi,esi
c00099ea:	74 3d                	je     c0009a29 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00099ec:	89 e8                	mov    eax,ebp
c00099ee:	31 db                	xor    ebx,ebx
c00099f0:	8d 7e ff             	lea    edi,[esi-0x1]
c00099f3:	eb 14                	jmp    c0009a09 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00099f5:	6a 01                	push   0x1
c00099f7:	43                   	inc    ebx
c00099f8:	50                   	push   eax
c00099f9:	e8 fe fe ff ff       	call   c00098fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00099fe:	58                   	pop    eax
c00099ff:	39 f3                	cmp    ebx,esi
c0009a01:	5a                   	pop    edx
c0009a02:	74 25                	je     c0009a29 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009a04:	a1 44 f8 01 c0       	mov    eax,ds:0xc001f844
c0009a09:	8d 50 01             	lea    edx,[eax+0x1]
c0009a0c:	85 db                	test   ebx,ebx
c0009a0e:	89 15 44 f8 01 c0    	mov    DWORD PTR ds:0xc001f844,edx
c0009a14:	74 20                	je     c0009a36 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0009a16:	39 df                	cmp    edi,ebx
c0009a18:	75 db                	jne    c00099f5 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0009a1a:	6a 03                	push   0x3
c0009a1c:	43                   	inc    ebx
c0009a1d:	50                   	push   eax
c0009a1e:	e8 d9 fe ff ff       	call   c00098fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a23:	59                   	pop    ecx
c0009a24:	39 f3                	cmp    ebx,esi
c0009a26:	58                   	pop    eax
c0009a27:	75 db                	jne    c0009a04 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009a29:	83 c4 1c             	add    esp,0x1c
c0009a2c:	89 e8                	mov    eax,ebp
c0009a2e:	5b                   	pop    ebx
c0009a2f:	c1 e0 0c             	shl    eax,0xc
c0009a32:	5e                   	pop    esi
c0009a33:	5f                   	pop    edi
c0009a34:	5d                   	pop    ebp
c0009a35:	c3                   	ret    
c0009a36:	6a 02                	push   0x2
c0009a38:	bb 01 00 00 00       	mov    ebx,0x1
c0009a3d:	50                   	push   eax
c0009a3e:	e8 b9 fe ff ff       	call   c00098fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a43:	58                   	pop    eax
c0009a44:	5a                   	pop    edx
c0009a45:	eb bd                	jmp    c0009a04 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009a47:	6a 04                	push   0x4
c0009a49:	8d 45 01             	lea    eax,[ebp+0x1]
c0009a4c:	55                   	push   ebp
c0009a4d:	a3 44 f8 01 c0       	mov    ds:0xc001f844,eax
c0009a52:	e8 a5 fe ff ff       	call   c00098fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a57:	59                   	pop    ecx
c0009a58:	89 e8                	mov    eax,ebp
c0009a5a:	5b                   	pop    ebx
c0009a5b:	c1 e0 0c             	shl    eax,0xc
c0009a5e:	83 c4 1c             	add    esp,0x1c
c0009a61:	5b                   	pop    ebx
c0009a62:	5e                   	pop    esi
c0009a63:	5f                   	pop    edi
c0009a64:	5d                   	pop    ebp
c0009a65:	c3                   	ret    

c0009a66 <Virt::freeSwapfilePage(unsigned long)>:
c0009a66:	53                   	push   ebx
c0009a67:	8b 15 ec 09 02 c0    	mov    edx,DWORD PTR ds:0xc00209ec
c0009a6d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009a71:	b8 01 00 00 00       	mov    eax,0x1
c0009a76:	89 cb                	mov    ebx,ecx
c0009a78:	d3 e0                	shl    eax,cl
c0009a7a:	c1 eb 05             	shr    ebx,0x5
c0009a7d:	f7 d0                	not    eax
c0009a7f:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0009a82:	5b                   	pop    ebx
c0009a83:	c3                   	ret    

c0009a84 <Virt::swapIDToSector(unsigned long)>:
c0009a84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a88:	0f af 05 4c f8 01 c0 	imul   eax,DWORD PTR ds:0xc001f84c
c0009a8f:	03 05 54 f8 01 c0    	add    eax,DWORD PTR ds:0xc001f854
c0009a95:	c3                   	ret    

c0009a96 <Virt::allocateSwapfilePage()>:
c0009a96:	55                   	push   ebp
c0009a97:	31 d2                	xor    edx,edx
c0009a99:	57                   	push   edi
c0009a9a:	56                   	push   esi
c0009a9b:	53                   	push   ebx
c0009a9c:	83 ec 0c             	sub    esp,0xc
c0009a9f:	8b 0d 4c f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f84c
c0009aa5:	a1 50 f8 01 c0       	mov    eax,ds:0xc001f850
c0009aaa:	f7 f1                	div    ecx
c0009aac:	39 0d 50 f8 01 c0    	cmp    DWORD PTR ds:0xc001f850,ecx
c0009ab2:	72 2d                	jb     c0009ae1 <Virt::allocateSwapfilePage()+0x4b>
c0009ab4:	8b 35 ec 09 02 c0    	mov    esi,DWORD PTR ds:0xc00209ec
c0009aba:	8b 16                	mov    edx,DWORD PTR [esi]
c0009abc:	f6 c2 01             	test   dl,0x1
c0009abf:	74 3c                	je     c0009afd <Virt::allocateSwapfilePage()+0x67>
c0009ac1:	31 c9                	xor    ecx,ecx
c0009ac3:	bf 01 00 00 00       	mov    edi,0x1
c0009ac8:	eb 12                	jmp    c0009adc <Virt::allocateSwapfilePage()+0x46>
c0009aca:	89 fd                	mov    ebp,edi
c0009acc:	89 ca                	mov    edx,ecx
c0009ace:	d3 e5                	shl    ebp,cl
c0009ad0:	c1 ea 05             	shr    edx,0x5
c0009ad3:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009ad6:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009ad8:	85 ea                	test   edx,ebp
c0009ada:	74 2a                	je     c0009b06 <Virt::allocateSwapfilePage()+0x70>
c0009adc:	41                   	inc    ecx
c0009add:	39 c8                	cmp    eax,ecx
c0009adf:	77 e9                	ja     c0009aca <Virt::allocateSwapfilePage()+0x34>
c0009ae1:	83 ec 0c             	sub    esp,0xc
c0009ae4:	68 3f db 01 c0       	push   0xc001db3f
c0009ae9:	e8 09 6c 00 00       	call   c00106f7 <Krnl::panic(char const*)>
c0009aee:	83 c4 10             	add    esp,0x10
c0009af1:	31 c9                	xor    ecx,ecx
c0009af3:	83 c4 0c             	add    esp,0xc
c0009af6:	89 c8                	mov    eax,ecx
c0009af8:	5b                   	pop    ebx
c0009af9:	5e                   	pop    esi
c0009afa:	5f                   	pop    edi
c0009afb:	5d                   	pop    ebp
c0009afc:	c3                   	ret    
c0009afd:	89 f3                	mov    ebx,esi
c0009aff:	bd 01 00 00 00       	mov    ebp,0x1
c0009b04:	31 c9                	xor    ecx,ecx
c0009b06:	09 ea                	or     edx,ebp
c0009b08:	89 c8                	mov    eax,ecx
c0009b0a:	89 13                	mov    DWORD PTR [ebx],edx
c0009b0c:	83 c4 0c             	add    esp,0xc
c0009b0f:	5b                   	pop    ebx
c0009b10:	5e                   	pop    esi
c0009b11:	5f                   	pop    edi
c0009b12:	5d                   	pop    ebp
c0009b13:	c3                   	ret    

c0009b14 <Virt::virtualMemorySetup()>:
c0009b14:	53                   	push   ebx
c0009b15:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009b1a:	6a 0f                	push   0xf
c0009b1c:	53                   	push   ebx
c0009b1d:	43                   	inc    ebx
c0009b1e:	e8 d9 fd ff ff       	call   c00098fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009b23:	58                   	pop    eax
c0009b24:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009b2a:	5a                   	pop    edx
c0009b2b:	75 ed                	jne    c0009b1a <Virt::virtualMemorySetup()+0x6>
c0009b2d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009b32:	6a 00                	push   0x0
c0009b34:	53                   	push   ebx
c0009b35:	43                   	inc    ebx
c0009b36:	e8 c1 fd ff ff       	call   c00098fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009b3b:	59                   	pop    ecx
c0009b3c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009b42:	58                   	pop    eax
c0009b43:	75 ed                	jne    c0009b32 <Virt::virtualMemorySetup()+0x1e>
c0009b45:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009b4a:	6a 0f                	push   0xf
c0009b4c:	53                   	push   ebx
c0009b4d:	43                   	inc    ebx
c0009b4e:	e8 a9 fd ff ff       	call   c00098fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009b53:	58                   	pop    eax
c0009b54:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009b5a:	5a                   	pop    edx
c0009b5b:	75 ed                	jne    c0009b4a <Virt::virtualMemorySetup()+0x36>
c0009b5d:	5b                   	pop    ebx
c0009b5e:	c3                   	ret    

c0009b5f <Virt::setupPageSwapping(int)>:
c0009b5f:	53                   	push   ebx
c0009b60:	83 ec 0c             	sub    esp,0xc
c0009b63:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009b67:	a1 68 2e 02 c0       	mov    eax,ds:0xc0022e68
c0009b6c:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009b72:	8b 10                	mov    edx,DWORD PTR [eax]
c0009b74:	53                   	push   ebx
c0009b75:	c1 e3 0b             	shl    ebx,0xb
c0009b78:	68 56 db 01 c0       	push   0xc001db56
c0009b7d:	50                   	push   eax
c0009b7e:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0009b81:	89 1d 50 f8 01 c0    	mov    DWORD PTR ds:0xc001f850,ebx
c0009b87:	c6 05 58 f8 01 c0 43 	mov    BYTE PTR ds:0xc001f858,0x43
c0009b8e:	c1 eb 08             	shr    ebx,0x8
c0009b91:	a3 54 f8 01 c0       	mov    ds:0xc001f854,eax
c0009b96:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009b99:	c7 05 4c f8 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001f84c,0x8
c0009ba3:	e8 71 e2 ff ff       	call   c0007e19 <malloc>
c0009ba8:	83 c4 0c             	add    esp,0xc
c0009bab:	89 c1                	mov    ecx,eax
c0009bad:	a3 ec 09 02 c0       	mov    ds:0xc00209ec,eax
c0009bb2:	31 d2                	xor    edx,edx
c0009bb4:	a1 50 f8 01 c0       	mov    eax,ds:0xc001f850
c0009bb9:	f7 35 4c f8 01 c0    	div    DWORD PTR ds:0xc001f84c
c0009bbf:	c1 e8 05             	shr    eax,0x5
c0009bc2:	50                   	push   eax
c0009bc3:	6a 00                	push   0x0
c0009bc5:	51                   	push   ecx
c0009bc6:	e8 25 69 ff ff       	call   c00004f0 <memset>
c0009bcb:	83 c4 18             	add    esp,0x18
c0009bce:	5b                   	pop    ebx
c0009bcf:	c3                   	ret    

c0009bd0 <VAS::VAS()>:
c0009bd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009bd4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009bdb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009bdf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009be6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009bea:	a3 f0 09 02 c0       	mov    ds:0xc00209f0,eax
c0009bef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009bf3:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009bf7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009bfb:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009bfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c02:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009c09:	90                   	nop
c0009c0a:	c3                   	ret    
c0009c0b:	90                   	nop

c0009c0c <VAS::VAS(VAS*)>:
c0009c0c:	83 ec 0c             	sub    esp,0xc
c0009c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c13:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c1e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009c25:	83 ec 0c             	sub    esp,0xc
c0009c28:	68 f8 d9 01 c0       	push   0xc001d9f8
c0009c2d:	e8 c5 6a 00 00       	call   c00106f7 <Krnl::panic(char const*)>
c0009c32:	83 c4 10             	add    esp,0x10
c0009c35:	90                   	nop
c0009c36:	83 c4 0c             	add    esp,0xc
c0009c39:	c3                   	ret    

c0009c3a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0009c3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009c3e:	89 c2                	mov    edx,eax
c0009c40:	c1 e8 0a             	shr    eax,0xa
c0009c43:	c1 ea 16             	shr    edx,0x16
c0009c46:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009c4b:	19 c9                	sbb    ecx,ecx
c0009c4d:	c1 e2 0c             	shl    edx,0xc
c0009c50:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009c56:	25 fc 0f 00 00       	and    eax,0xffc
c0009c5b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009c62:	01 d0                	add    eax,edx
c0009c64:	c3                   	ret    
c0009c65:	90                   	nop

c0009c66 <VAS::getPageTableEntry(unsigned long)>:
c0009c66:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009c6a:	89 ca                	mov    edx,ecx
c0009c6c:	c1 e9 0a             	shr    ecx,0xa
c0009c6f:	c1 ea 16             	shr    edx,0x16
c0009c72:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009c78:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009c7e:	c1 e0 0c             	shl    eax,0xc
c0009c81:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009c84:	c3                   	ret    

c0009c85 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009c85:	57                   	push   edi
c0009c86:	56                   	push   esi
c0009c87:	be 01 00 00 00       	mov    esi,0x1
c0009c8c:	53                   	push   ebx
c0009c8d:	83 ec 10             	sub    esp,0x10
c0009c90:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009c94:	c1 eb 0c             	shr    ebx,0xc
c0009c97:	eb 3f                	jmp    c0009cd8 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0009c99:	83 ec 08             	sub    esp,0x8
c0009c9c:	a1 f0 09 02 c0       	mov    eax,ds:0xc00209f0
c0009ca1:	57                   	push   edi
c0009ca2:	50                   	push   eax
c0009ca3:	e8 be ff ff ff       	call   c0009c66 <VAS::getPageTableEntry(unsigned long)>
c0009ca8:	83 c4 10             	add    esp,0x10
c0009cab:	8b 00                	mov    eax,DWORD PTR [eax]
c0009cad:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009cb1:	f6 c4 04             	test   ah,0x4
c0009cb4:	75 60                	jne    c0009d16 <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c0009cb6:	80 fa 04             	cmp    dl,0x4
c0009cb9:	74 79                	je     c0009d34 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c0009cbb:	80 fa 02             	cmp    dl,0x2
c0009cbe:	0f 84 89 00 00 00    	je     c0009d4d <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c0009cc4:	80 fa 03             	cmp    dl,0x3
c0009cc7:	0f 84 ae 00 00 00    	je     c0009d7b <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c0009ccd:	fe ca                	dec    dl
c0009ccf:	0f 84 93 00 00 00    	je     c0009d68 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009cd5:	43                   	inc    ebx
c0009cd6:	31 f6                	xor    esi,esi
c0009cd8:	53                   	push   ebx
c0009cd9:	89 df                	mov    edi,ebx
c0009cdb:	e8 51 fc ff ff       	call   c0009931 <Virt::getPageState(unsigned long)>
c0009ce0:	c1 e7 0c             	shl    edi,0xc
c0009ce3:	5a                   	pop    edx
c0009ce4:	84 c0                	test   al,al
c0009ce6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0009cea:	75 ad                	jne    c0009c99 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0009cec:	83 ec 0c             	sub    esp,0xc
c0009cef:	68 6d db 01 c0       	push   0xc001db6d
c0009cf4:	e8 fe 69 00 00       	call   c00106f7 <Krnl::panic(char const*)>
c0009cf9:	5a                   	pop    edx
c0009cfa:	59                   	pop    ecx
c0009cfb:	57                   	push   edi
c0009cfc:	8b 3d f0 09 02 c0    	mov    edi,DWORD PTR ds:0xc00209f0
c0009d02:	57                   	push   edi
c0009d03:	e8 5e ff ff ff       	call   c0009c66 <VAS::getPageTableEntry(unsigned long)>
c0009d08:	83 c4 10             	add    esp,0x10
c0009d0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009d0d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009d11:	f6 c4 04             	test   ah,0x4
c0009d14:	74 bf                	je     c0009cd5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009d16:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0009d1a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009d1f:	83 ec 0c             	sub    esp,0xc
c0009d22:	50                   	push   eax
c0009d23:	e8 5c e4 ff ff       	call   c0008184 <Phys::freePage(unsigned long)>
c0009d28:	83 c4 10             	add    esp,0x10
c0009d2b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009d2f:	80 fa 04             	cmp    dl,0x4
c0009d32:	75 87                	jne    c0009cbb <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0009d34:	89 f0                	mov    eax,esi
c0009d36:	84 c0                	test   al,al
c0009d38:	75 47                	jne    c0009d81 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c0009d3a:	c7 44 24 20 1c da 01 c0 	mov    DWORD PTR [esp+0x20],0xc001da1c
c0009d42:	83 c4 10             	add    esp,0x10
c0009d45:	5b                   	pop    ebx
c0009d46:	5e                   	pop    esi
c0009d47:	5f                   	pop    edi
c0009d48:	e9 aa 69 00 00       	jmp    c00106f7 <Krnl::panic(char const*)>
c0009d4d:	89 f0                	mov    eax,esi
c0009d4f:	84 c0                	test   al,al
c0009d51:	75 15                	jne    c0009d68 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009d53:	83 ec 0c             	sub    esp,0xc
c0009d56:	68 89 db 01 c0       	push   0xc001db89
c0009d5b:	e8 97 69 00 00       	call   c00106f7 <Krnl::panic(char const*)>
c0009d60:	83 c4 10             	add    esp,0x10
c0009d63:	e9 6d ff ff ff       	jmp    c0009cd5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009d68:	83 ec 08             	sub    esp,0x8
c0009d6b:	6a 00                	push   0x0
c0009d6d:	53                   	push   ebx
c0009d6e:	e8 89 fb ff ff       	call   c00098fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009d73:	83 c4 10             	add    esp,0x10
c0009d76:	e9 5a ff ff ff       	jmp    c0009cd5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009d7b:	89 f0                	mov    eax,esi
c0009d7d:	84 c0                	test   al,al
c0009d7f:	75 15                	jne    c0009d96 <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c0009d81:	83 ec 08             	sub    esp,0x8
c0009d84:	6a 00                	push   0x0
c0009d86:	53                   	push   ebx
c0009d87:	e8 70 fb ff ff       	call   c00098fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009d8c:	83 c4 10             	add    esp,0x10
c0009d8f:	83 c4 10             	add    esp,0x10
c0009d92:	5b                   	pop    ebx
c0009d93:	5e                   	pop    esi
c0009d94:	5f                   	pop    edi
c0009d95:	c3                   	ret    
c0009d96:	c7 44 24 20 a5 db 01 c0 	mov    DWORD PTR [esp+0x20],0xc001dba5
c0009d9e:	83 c4 10             	add    esp,0x10
c0009da1:	5b                   	pop    ebx
c0009da2:	5e                   	pop    esi
c0009da3:	5f                   	pop    edi
c0009da4:	e9 4e 69 00 00       	jmp    c00106f7 <Krnl::panic(char const*)>
c0009da9:	90                   	nop

c0009daa <VAS::freeAllocatedPages(unsigned long)>:
c0009daa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009dae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009db2:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009db6:	74 09                	je     c0009dc1 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009db8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009dbc:	e9 c4 fe ff ff       	jmp    c0009c85 <Virt::freeKernelVirtualPages(unsigned long)>
c0009dc1:	c7 44 24 04 40 da 01 c0 	mov    DWORD PTR [esp+0x4],0xc001da40
c0009dc9:	e9 da 0d 00 00       	jmp    c000aba8 <Dbg::kprintf(char const*, ...)>

c0009dce <VAS::virtualToPhysical(unsigned long)>:
c0009dce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009dd2:	50                   	push   eax
c0009dd3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009dd7:	52                   	push   edx
c0009dd8:	e8 89 fe ff ff       	call   c0009c66 <VAS::getPageTableEntry(unsigned long)>
c0009ddd:	59                   	pop    ecx
c0009dde:	8b 00                	mov    eax,DWORD PTR [eax]
c0009de0:	5a                   	pop    edx
c0009de1:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009de6:	c3                   	ret    
c0009de7:	90                   	nop

c0009de8 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009de8:	55                   	push   ebp
c0009de9:	57                   	push   edi
c0009dea:	56                   	push   esi
c0009deb:	53                   	push   ebx
c0009dec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009df0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009df4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009df8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009dfc:	85 db                	test   ebx,ebx
c0009dfe:	7e 22                	jle    c0009e22 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0009e00:	c1 e3 0c             	shl    ebx,0xc
c0009e03:	01 f3                	add    ebx,esi
c0009e05:	56                   	push   esi
c0009e06:	81 c6 00 10 00 00    	add    esi,0x1000
c0009e0c:	55                   	push   ebp
c0009e0d:	e8 54 fe ff ff       	call   c0009c66 <VAS::getPageTableEntry(unsigned long)>
c0009e12:	5a                   	pop    edx
c0009e13:	59                   	pop    ecx
c0009e14:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009e16:	21 f9                	and    ecx,edi
c0009e18:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0009e1c:	39 f3                	cmp    ebx,esi
c0009e1e:	89 08                	mov    DWORD PTR [eax],ecx
c0009e20:	75 e3                	jne    c0009e05 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0009e22:	5b                   	pop    ebx
c0009e23:	5e                   	pop    esi
c0009e24:	5f                   	pop    edi
c0009e25:	5d                   	pop    ebp
c0009e26:	c3                   	ret    
c0009e27:	90                   	nop

c0009e28 <VAS::setToWriteCombining(unsigned long, int)>:
c0009e28:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c0009e2d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e33:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009e3a:	75 01                	jne    c0009e3d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009e3c:	c3                   	ret    
c0009e3d:	68 80 00 00 00       	push   0x80
c0009e42:	6a ff                	push   0xffffffff
c0009e44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009e48:	50                   	push   eax
c0009e49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009e4d:	52                   	push   edx
c0009e4e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009e52:	51                   	push   ecx
c0009e53:	e8 90 ff ff ff       	call   c0009de8 <VAS::reflagRange(unsigned long, int, int, int)>
c0009e58:	83 c4 14             	add    esp,0x14
c0009e5b:	c3                   	ret    

c0009e5c <VAS::mapOtherVASIn(bool, VAS*)>:
c0009e5c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e65:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009e68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009e6c:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009e6f:	19 c0                	sbb    eax,eax
c0009e71:	83 ca 03             	or     edx,0x3
c0009e74:	83 e0 fc             	and    eax,0xfffffffc
c0009e77:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009e7e:	0f 20 d8             	mov    eax,cr3
c0009e81:	0f 22 d8             	mov    cr3,eax
c0009e84:	c3                   	ret    
c0009e85:	90                   	nop

c0009e86 <VAS::~VAS()>:
c0009e86:	83 ec 2c             	sub    esp,0x2c
c0009e89:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009e91:	fa                   	cli    
c0009e92:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c0009e97:	40                   	inc    eax
c0009e98:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c0009e9d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009ea2:	8b 00                	mov    eax,DWORD PTR [eax]
c0009ea4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009ea7:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009ead:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009eb1:	6a 01                	push   0x1
c0009eb3:	50                   	push   eax
c0009eb4:	e8 a3 ff ff ff       	call   c0009e5c <VAS::mapOtherVASIn(bool, VAS*)>
c0009eb9:	83 c4 0c             	add    esp,0xc
c0009ebc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009ec4:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009ecc:	0f 8f d4 00 00 00    	jg     c0009fa6 <VAS::~VAS()+0x120>
c0009ed2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ed6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ed9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009edd:	c1 e2 02             	shl    edx,0x2
c0009ee0:	01 d0                	add    eax,edx
c0009ee2:	8b 00                	mov    eax,DWORD PTR [eax]
c0009ee4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ee8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009eec:	83 e0 01             	and    eax,0x1
c0009eef:	0f 84 a8 00 00 00    	je     c0009f9d <VAS::~VAS()+0x117>
c0009ef5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009efd:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009f05:	7f 72                	jg     c0009f79 <VAS::~VAS()+0xf3>
c0009f07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f0b:	c1 e0 0a             	shl    eax,0xa
c0009f0e:	89 c2                	mov    edx,eax
c0009f10:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009f14:	01 d0                	add    eax,edx
c0009f16:	c1 e0 0c             	shl    eax,0xc
c0009f19:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f1d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009f22:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f24:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009f27:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009f2d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009f31:	6a 01                	push   0x1
c0009f33:	50                   	push   eax
c0009f34:	e8 01 fd ff ff       	call   c0009c3a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009f39:	83 c4 0c             	add    esp,0xc
c0009f3c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009f44:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f46:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009f4e:	25 01 04 00 00       	and    eax,0x401
c0009f53:	3d 01 04 00 00       	cmp    eax,0x401
c0009f58:	75 19                	jne    c0009f73 <VAS::~VAS()+0xed>
c0009f5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009f5e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f63:	83 ec 0c             	sub    esp,0xc
c0009f66:	50                   	push   eax
c0009f67:	e8 18 e2 ff ff       	call   c0008184 <Phys::freePage(unsigned long)>
c0009f6c:	83 c4 10             	add    esp,0x10
c0009f6f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009f73:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009f77:	eb 84                	jmp    c0009efd <VAS::~VAS()+0x77>
c0009f79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009f7d:	25 00 04 00 00       	and    eax,0x400
c0009f82:	74 19                	je     c0009f9d <VAS::~VAS()+0x117>
c0009f84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009f88:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f8d:	83 ec 0c             	sub    esp,0xc
c0009f90:	50                   	push   eax
c0009f91:	e8 ee e1 ff ff       	call   c0008184 <Phys::freePage(unsigned long)>
c0009f96:	83 c4 10             	add    esp,0x10
c0009f99:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009f9d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009fa1:	e9 1e ff ff ff       	jmp    c0009ec4 <VAS::~VAS()+0x3e>
c0009fa6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009faa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009fad:	83 ec 0c             	sub    esp,0xc
c0009fb0:	50                   	push   eax
c0009fb1:	e8 cf fc ff ff       	call   c0009c85 <Virt::freeKernelVirtualPages(unsigned long)>
c0009fb6:	83 c4 10             	add    esp,0x10
c0009fb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fbd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009fc0:	83 ec 0c             	sub    esp,0xc
c0009fc3:	50                   	push   eax
c0009fc4:	e8 bb e1 ff ff       	call   c0008184 <Phys::freePage(unsigned long)>
c0009fc9:	83 c4 10             	add    esp,0x10
c0009fcc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009fd0:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c0009fd5:	48                   	dec    eax
c0009fd6:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c0009fdb:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c0009fe0:	85 c0                	test   eax,eax
c0009fe2:	75 01                	jne    c0009fe5 <VAS::~VAS()+0x15f>
c0009fe4:	fb                   	sti    
c0009fe5:	90                   	nop
c0009fe6:	83 c4 2c             	add    esp,0x2c
c0009fe9:	c3                   	ret    

c0009fea <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009fea:	55                   	push   ebp
c0009feb:	57                   	push   edi
c0009fec:	56                   	push   esi
c0009fed:	53                   	push   ebx
c0009fee:	83 ec 1c             	sub    esp,0x1c
c0009ff1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009ff5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009ff9:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009fff:	77 0b                	ja     c000a00c <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c000a001:	0f 20 d8             	mov    eax,cr3
c000a004:	0f 20 d8             	mov    eax,cr3
c000a007:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000a00a:	75 47                	jne    c000a053 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c000a00c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a010:	09 d8                	or     eax,ebx
c000a012:	a9 ff 0f 00 00       	test   eax,0xfff
c000a017:	75 57                	jne    c000a070 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c000a019:	89 de                	mov    esi,ebx
c000a01b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a01e:	c1 ee 16             	shr    esi,0x16
c000a021:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000a028:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000a02c:	74 54                	je     c000a082 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c000a02e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a032:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000a038:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000a03c:	c1 e6 0c             	shl    esi,0xc
c000a03f:	c1 eb 0a             	shr    ebx,0xa
c000a042:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000a048:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000a04b:	83 c4 1c             	add    esp,0x1c
c000a04e:	5b                   	pop    ebx
c000a04f:	5e                   	pop    esi
c000a050:	5f                   	pop    edi
c000a051:	5d                   	pop    ebp
c000a052:	c3                   	ret    
c000a053:	83 ec 0c             	sub    esp,0xc
c000a056:	68 64 da 01 c0       	push   0xc001da64
c000a05b:	e8 48 0b 00 00       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c000a060:	83 c4 10             	add    esp,0x10
c000a063:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a067:	09 d8                	or     eax,ebx
c000a069:	a9 ff 0f 00 00       	test   eax,0xfff
c000a06e:	74 a9                	je     c000a019 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000a070:	83 ec 0c             	sub    esp,0xc
c000a073:	68 cc da 01 c0       	push   0xc001dacc
c000a078:	e8 7a 66 00 00       	call   c00106f7 <Krnl::panic(char const*)>
c000a07d:	83 c4 10             	add    esp,0x10
c000a080:	eb 97                	jmp    c000a019 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000a082:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a086:	e8 5b e1 ff ff       	call   c00081e6 <Phys::allocatePage()>
c000a08b:	83 ec 0c             	sub    esp,0xc
c000a08e:	89 c5                	mov    ebp,eax
c000a090:	8b 0d f0 09 02 c0    	mov    ecx,DWORD PTR ds:0xc00209f0
c000a096:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a09a:	6a 01                	push   0x1
c000a09c:	e8 b4 f8 ff ff       	call   c0009955 <Virt::allocateKernelVirtualPages(int)>
c000a0a1:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a0a8:	6a 01                	push   0x1
c000a0aa:	50                   	push   eax
c000a0ab:	55                   	push   ebp
c000a0ac:	81 cd 07 04 00 00    	or     ebp,0x407
c000a0b2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a0b6:	51                   	push   ecx
c000a0b7:	e8 28 02 00 00       	call   c000a2e4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0bc:	83 c4 1c             	add    esp,0x1c
c000a0bf:	68 00 10 00 00       	push   0x1000
c000a0c4:	6a 00                	push   0x0
c000a0c6:	50                   	push   eax
c000a0c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a0cb:	e8 20 64 ff ff       	call   c00004f0 <memset>
c000a0d0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a0d4:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a0d7:	e8 a9 fb ff ff       	call   c0009c85 <Virt::freeKernelVirtualPages(unsigned long)>
c000a0dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0e0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a0e3:	83 c4 10             	add    esp,0x10
c000a0e6:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000a0e9:	e9 40 ff ff ff       	jmp    c000a02e <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c000a0ee <VAS::allocatePages(int, int)>:
c000a0ee:	55                   	push   ebp
c000a0ef:	57                   	push   edi
c000a0f0:	56                   	push   esi
c000a0f1:	53                   	push   ebx
c000a0f2:	83 ec 1c             	sub    esp,0x1c
c000a0f5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000a0f9:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c000a0fe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a104:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000a10a:	83 e0 01             	and    eax,0x1
c000a10d:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000a111:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a115:	0f 85 cc 00 00 00    	jne    c000a1e7 <VAS::allocatePages(int, int)+0xf9>
c000a11b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a11e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a122:	85 c0                	test   eax,eax
c000a124:	0f 84 a1 00 00 00    	je     c000a1cb <VAS::allocatePages(int, int)+0xdd>
c000a12a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a12e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a132:	c1 e6 0c             	shl    esi,0xc
c000a135:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000a139:	85 c0                	test   eax,eax
c000a13b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000a13e:	7e 33                	jle    c000a173 <VAS::allocatePages(int, int)+0x85>
c000a140:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a144:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a148:	81 cd 00 04 00 00    	or     ebp,0x400
c000a14e:	e8 93 e0 ff ff       	call   c00081e6 <Phys::allocatePage()>
c000a153:	55                   	push   ebp
c000a154:	53                   	push   ebx
c000a155:	50                   	push   eax
c000a156:	57                   	push   edi
c000a157:	e8 8e fe ff ff       	call   c0009fea <VAS::mapPage(unsigned long, unsigned long, int)>
c000a15c:	83 c4 10             	add    esp,0x10
c000a15f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a164:	74 03                	je     c000a169 <VAS::allocatePages(int, int)+0x7b>
c000a166:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a169:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a16f:	39 de                	cmp    esi,ebx
c000a171:	75 db                	jne    c000a14e <VAS::allocatePages(int, int)+0x60>
c000a173:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a178:	75 12                	jne    c000a18c <VAS::allocatePages(int, int)+0x9e>
c000a17a:	0f 20 d8             	mov    eax,cr3
c000a17d:	0f 22 d8             	mov    cr3,eax
c000a180:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a184:	83 c4 1c             	add    esp,0x1c
c000a187:	5b                   	pop    ebx
c000a188:	5e                   	pop    esi
c000a189:	5f                   	pop    edi
c000a18a:	5d                   	pop    ebp
c000a18b:	c3                   	ret    
c000a18c:	c1 ee 0a             	shr    esi,0xa
c000a18f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a193:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000a199:	c1 eb 0a             	shr    ebx,0xa
c000a19c:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000a1a2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a1a8:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a1ae:	39 c3                	cmp    ebx,eax
c000a1b0:	77 ce                	ja     c000a180 <VAS::allocatePages(int, int)+0x92>
c000a1b2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a1b5:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a1bb:	39 d8                	cmp    eax,ebx
c000a1bd:	73 f3                	jae    c000a1b2 <VAS::allocatePages(int, int)+0xc4>
c000a1bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a1c3:	83 c4 1c             	add    esp,0x1c
c000a1c6:	5b                   	pop    ebx
c000a1c7:	5e                   	pop    esi
c000a1c8:	5f                   	pop    edi
c000a1c9:	5d                   	pop    ebp
c000a1ca:	c3                   	ret    
c000a1cb:	83 ec 0c             	sub    esp,0xc
c000a1ce:	68 f0 da 01 c0       	push   0xc001daf0
c000a1d3:	e8 1f 65 00 00       	call   c00106f7 <Krnl::panic(char const*)>
c000a1d8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a1db:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a1df:	83 c4 10             	add    esp,0x10
c000a1e2:	e9 43 ff ff ff       	jmp    c000a12a <VAS::allocatePages(int, int)+0x3c>
c000a1e7:	83 ec 0c             	sub    esp,0xc
c000a1ea:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000a1ee:	51                   	push   ecx
c000a1ef:	e8 61 f7 ff ff       	call   c0009955 <Virt::allocateKernelVirtualPages(int)>
c000a1f4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a1f8:	83 c4 10             	add    esp,0x10
c000a1fb:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000a200:	0f 87 9b 00 00 00    	ja     c000a2a1 <VAS::allocatePages(int, int)+0x1b3>
c000a206:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a20a:	85 d2                	test   edx,edx
c000a20c:	7e 3c                	jle    c000a24a <VAS::allocatePages(int, int)+0x15c>
c000a20e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a212:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a216:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a21a:	c1 e5 0c             	shl    ebp,0xc
c000a21d:	81 ce 00 04 00 00    	or     esi,0x400
c000a223:	01 dd                	add    ebp,ebx
c000a225:	e8 bc df ff ff       	call   c00081e6 <Phys::allocatePage()>
c000a22a:	56                   	push   esi
c000a22b:	53                   	push   ebx
c000a22c:	50                   	push   eax
c000a22d:	57                   	push   edi
c000a22e:	e8 b7 fd ff ff       	call   c0009fea <VAS::mapPage(unsigned long, unsigned long, int)>
c000a233:	83 c4 10             	add    esp,0x10
c000a236:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a23b:	74 03                	je     c000a240 <VAS::allocatePages(int, int)+0x152>
c000a23d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a240:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a246:	39 dd                	cmp    ebp,ebx
c000a248:	75 db                	jne    c000a225 <VAS::allocatePages(int, int)+0x137>
c000a24a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a24f:	0f 84 25 ff ff ff    	je     c000a17a <VAS::allocatePages(int, int)+0x8c>
c000a255:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a259:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a25d:	89 d3                	mov    ebx,edx
c000a25f:	c1 e0 0c             	shl    eax,0xc
c000a262:	c1 eb 0a             	shr    ebx,0xa
c000a265:	01 d0                	add    eax,edx
c000a267:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a26d:	c1 e8 0a             	shr    eax,0xa
c000a270:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a276:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a27b:	2d 00 00 40 00       	sub    eax,0x400000
c000a280:	39 c3                	cmp    ebx,eax
c000a282:	0f 87 f8 fe ff ff    	ja     c000a180 <VAS::allocatePages(int, int)+0x92>
c000a288:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a28b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a291:	39 d8                	cmp    eax,ebx
c000a293:	73 f3                	jae    c000a288 <VAS::allocatePages(int, int)+0x19a>
c000a295:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a299:	83 c4 1c             	add    esp,0x1c
c000a29c:	5b                   	pop    ebx
c000a29d:	5e                   	pop    esi
c000a29e:	5f                   	pop    edi
c000a29f:	5d                   	pop    ebp
c000a2a0:	c3                   	ret    
c000a2a1:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c000a2a6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a2ac:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c000a2b3:	0f 84 4d ff ff ff    	je     c000a206 <VAS::allocatePages(int, int)+0x118>
c000a2b9:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000a2c1:	e9 40 ff ff ff       	jmp    c000a206 <VAS::allocatePages(int, int)+0x118>

c000a2c6 <VAS::setCPUSpecific(unsigned long)>:
c000a2c6:	83 ec 0c             	sub    esp,0xc
c000a2c9:	6a 05                	push   0x5
c000a2cb:	68 00 00 40 c2       	push   0xc2400000
c000a2d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2d4:	50                   	push   eax
c000a2d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a2d9:	52                   	push   edx
c000a2da:	e8 0b fd ff ff       	call   c0009fea <VAS::mapPage(unsigned long, unsigned long, int)>
c000a2df:	83 c4 1c             	add    esp,0x1c
c000a2e2:	c3                   	ret    
c000a2e3:	90                   	nop

c000a2e4 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000a2e4:	55                   	push   ebp
c000a2e5:	57                   	push   edi
c000a2e6:	56                   	push   esi
c000a2e7:	53                   	push   ebx
c000a2e8:	83 ec 1c             	sub    esp,0x1c
c000a2eb:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c000a2f0:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000a2f4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a2fa:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a2fe:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000a304:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000a308:	83 e0 01             	and    eax,0x1
c000a30b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a30f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a313:	85 c0                	test   eax,eax
c000a315:	7e 39                	jle    c000a350 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000a317:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a31b:	89 f3                	mov    ebx,esi
c000a31d:	c1 e0 0c             	shl    eax,0xc
c000a320:	01 f0                	add    eax,esi
c000a322:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a326:	55                   	push   ebp
c000a327:	53                   	push   ebx
c000a328:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a32c:	29 f0                	sub    eax,esi
c000a32e:	01 d8                	add    eax,ebx
c000a330:	50                   	push   eax
c000a331:	57                   	push   edi
c000a332:	e8 b3 fc ff ff       	call   c0009fea <VAS::mapPage(unsigned long, unsigned long, int)>
c000a337:	83 c4 10             	add    esp,0x10
c000a33a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a33f:	74 03                	je     c000a344 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000a341:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a344:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a34a:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000a34e:	75 d6                	jne    c000a326 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000a350:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a355:	75 10                	jne    c000a367 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000a357:	0f 20 d8             	mov    eax,cr3
c000a35a:	0f 22 d8             	mov    cr3,eax
c000a35d:	83 c4 1c             	add    esp,0x1c
c000a360:	89 f0                	mov    eax,esi
c000a362:	5b                   	pop    ebx
c000a363:	5e                   	pop    esi
c000a364:	5f                   	pop    edi
c000a365:	5d                   	pop    ebp
c000a366:	c3                   	ret    
c000a367:	89 f3                	mov    ebx,esi
c000a369:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a36d:	c1 eb 0a             	shr    ebx,0xa
c000a370:	c1 e0 0c             	shl    eax,0xc
c000a373:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a379:	01 f0                	add    eax,esi
c000a37b:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a381:	c1 e8 0a             	shr    eax,0xa
c000a384:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a389:	2d 00 00 40 00       	sub    eax,0x400000
c000a38e:	39 c3                	cmp    ebx,eax
c000a390:	77 cb                	ja     c000a35d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000a392:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a395:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a39b:	39 d8                	cmp    eax,ebx
c000a39d:	73 f3                	jae    c000a392 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000a39f:	83 c4 1c             	add    esp,0x1c
c000a3a2:	89 f0                	mov    eax,esi
c000a3a4:	5b                   	pop    ebx
c000a3a5:	5e                   	pop    esi
c000a3a6:	5f                   	pop    edi
c000a3a7:	5d                   	pop    ebp
c000a3a8:	c3                   	ret    
c000a3a9:	90                   	nop

c000a3aa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000a3aa:	55                   	push   ebp
c000a3ab:	57                   	push   edi
c000a3ac:	56                   	push   esi
c000a3ad:	53                   	push   ebx
c000a3ae:	83 ec 1c             	sub    esp,0x1c
c000a3b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a3b5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a3b9:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000a3bd:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000a3c1:	a9 ff 0f 00 00       	test   eax,0xfff
c000a3c6:	75 4a                	jne    c000a412 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000a3c8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000a3cc:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a3cf:	c1 eb 16             	shr    ebx,0x16
c000a3d2:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000a3d9:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000a3dd:	74 4d                	je     c000a42c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000a3df:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a3e3:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000a3e7:	c1 e8 0a             	shr    eax,0xa
c000a3ea:	80 fa 01             	cmp    dl,0x1
c000a3ed:	19 d2                	sbb    edx,edx
c000a3ef:	c1 e3 0c             	shl    ebx,0xc
c000a3f2:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000a3f6:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000a3fc:	25 fc 0f 00 00       	and    eax,0xffc
c000a401:	01 d8                	add    eax,ebx
c000a403:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000a40a:	83 c4 1c             	add    esp,0x1c
c000a40d:	5b                   	pop    ebx
c000a40e:	5e                   	pop    esi
c000a40f:	5f                   	pop    edi
c000a410:	5d                   	pop    ebp
c000a411:	c3                   	ret    
c000a412:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a416:	83 ec 0c             	sub    esp,0xc
c000a419:	68 1c db 01 c0       	push   0xc001db1c
c000a41e:	e8 d4 62 00 00       	call   c00106f7 <Krnl::panic(char const*)>
c000a423:	83 c4 10             	add    esp,0x10
c000a426:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a42a:	eb 9c                	jmp    c000a3c8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000a42c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a430:	e8 b1 dd ff ff       	call   c00081e6 <Phys::allocatePage()>
c000a435:	83 ec 0c             	sub    esp,0xc
c000a438:	89 c5                	mov    ebp,eax
c000a43a:	8b 0d f0 09 02 c0    	mov    ecx,DWORD PTR ds:0xc00209f0
c000a440:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a444:	6a 01                	push   0x1
c000a446:	e8 0a f5 ff ff       	call   c0009955 <Virt::allocateKernelVirtualPages(int)>
c000a44b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a452:	6a 01                	push   0x1
c000a454:	50                   	push   eax
c000a455:	55                   	push   ebp
c000a456:	81 cd 07 04 00 00    	or     ebp,0x407
c000a45c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a460:	51                   	push   ecx
c000a461:	e8 7e fe ff ff       	call   c000a2e4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a466:	83 c4 1c             	add    esp,0x1c
c000a469:	68 00 10 00 00       	push   0x1000
c000a46e:	6a 00                	push   0x0
c000a470:	50                   	push   eax
c000a471:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a475:	e8 76 60 ff ff       	call   c00004f0 <memset>
c000a47a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a47e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a481:	e8 ff f7 ff ff       	call   c0009c85 <Virt::freeKernelVirtualPages(unsigned long)>
c000a486:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a489:	83 c4 10             	add    esp,0x10
c000a48c:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000a48f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a493:	e9 47 ff ff ff       	jmp    c000a3df <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000a498 <VAS::VAS(bool)>:
c000a498:	53                   	push   ebx
c000a499:	83 ec 28             	sub    esp,0x28
c000a49c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a4a0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a4a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a4a8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a4af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a4b3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a4ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a4be:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a4c2:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a4c5:	e8 1c dd ff ff       	call   c00081e6 <Phys::allocatePage()>
c000a4ca:	89 c2                	mov    edx,eax
c000a4cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a4d0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a4d3:	8b 1d f0 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209f0
c000a4d9:	83 ec 0c             	sub    esp,0xc
c000a4dc:	6a 01                	push   0x1
c000a4de:	e8 72 f4 ff ff       	call   c0009955 <Virt::allocateKernelVirtualPages(int)>
c000a4e3:	83 c4 10             	add    esp,0x10
c000a4e6:	89 c2                	mov    edx,eax
c000a4e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a4ec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a4ef:	83 ec 0c             	sub    esp,0xc
c000a4f2:	6a 03                	push   0x3
c000a4f4:	6a 01                	push   0x1
c000a4f6:	52                   	push   edx
c000a4f7:	50                   	push   eax
c000a4f8:	53                   	push   ebx
c000a4f9:	e8 e6 fd ff ff       	call   c000a2e4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a4fe:	83 c4 20             	add    esp,0x20
c000a501:	89 c2                	mov    edx,eax
c000a503:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a507:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a50a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a512:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a51a:	7f 1c                	jg     c000a538 <VAS::VAS(bool)+0xa0>
c000a51c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a520:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a523:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a527:	c1 e2 02             	shl    edx,0x2
c000a52a:	01 d0                	add    eax,edx
c000a52c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a532:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000a536:	eb da                	jmp    c000a512 <VAS::VAS(bool)+0x7a>
c000a538:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a540:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a548:	7f 7a                	jg     c000a5c4 <VAS::VAS(bool)+0x12c>
c000a54a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a54e:	2d 00 02 00 00       	sub    eax,0x200
c000a553:	c1 e0 0c             	shl    eax,0xc
c000a556:	83 c8 03             	or     eax,0x3
c000a559:	89 c2                	mov    edx,eax
c000a55b:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c000a560:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a566:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a56c:	83 e0 10             	and    eax,0x10
c000a56f:	84 c0                	test   al,al
c000a571:	74 07                	je     c000a57a <VAS::VAS(bool)+0xe2>
c000a573:	b8 00 01 00 00       	mov    eax,0x100
c000a578:	eb 05                	jmp    c000a57f <VAS::VAS(bool)+0xe7>
c000a57a:	b8 00 00 00 00       	mov    eax,0x0
c000a57f:	09 d0                	or     eax,edx
c000a581:	89 c1                	mov    ecx,eax
c000a583:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a587:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a58a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a58e:	c1 e2 02             	shl    edx,0x2
c000a591:	01 d0                	add    eax,edx
c000a593:	89 ca                	mov    edx,ecx
c000a595:	89 10                	mov    DWORD PTR [eax],edx
c000a597:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a59b:	2d 40 03 00 00       	sub    eax,0x340
c000a5a0:	83 f8 7f             	cmp    eax,0x7f
c000a5a3:	77 16                	ja     c000a5bb <VAS::VAS(bool)+0x123>
c000a5a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a5a9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a5ac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a5b0:	c1 e2 02             	shl    edx,0x2
c000a5b3:	01 d0                	add    eax,edx
c000a5b5:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a5bb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000a5bf:	e9 7c ff ff ff       	jmp    c000a540 <VAS::VAS(bool)+0xa8>
c000a5c4:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c000a5c9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a5cf:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a5d5:	83 e0 10             	and    eax,0x10
c000a5d8:	84 c0                	test   al,al
c000a5da:	74 07                	je     c000a5e3 <VAS::VAS(bool)+0x14b>
c000a5dc:	b8 03 41 00 00       	mov    eax,0x4103
c000a5e1:	eb 05                	jmp    c000a5e8 <VAS::VAS(bool)+0x150>
c000a5e3:	b8 03 40 00 00       	mov    eax,0x4003
c000a5e8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a5ec:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a5ef:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a5f5:	89 02                	mov    DWORD PTR [edx],eax
c000a5f7:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c000a5fc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a602:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a608:	83 ec 08             	sub    esp,0x8
c000a60b:	50                   	push   eax
c000a60c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a610:	e8 b1 fc ff ff       	call   c000a2c6 <VAS::setCPUSpecific(unsigned long)>
c000a615:	83 c4 10             	add    esp,0x10
c000a618:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a61c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a61f:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c000a624:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a62a:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a630:	83 e0 10             	and    eax,0x10
c000a633:	84 c0                	test   al,al
c000a635:	74 07                	je     c000a63e <VAS::VAS(bool)+0x1a6>
c000a637:	b8 00 01 00 00       	mov    eax,0x100
c000a63c:	eb 05                	jmp    c000a643 <VAS::VAS(bool)+0x1ab>
c000a63e:	b8 00 00 00 00       	mov    eax,0x0
c000a643:	09 c2                	or     edx,eax
c000a645:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a649:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a64c:	05 fc 0f 00 00       	add    eax,0xffc
c000a651:	83 ca 03             	or     edx,0x3
c000a654:	89 10                	mov    DWORD PTR [eax],edx
c000a656:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c000a65b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a661:	83 ec 0c             	sub    esp,0xc
c000a664:	50                   	push   eax
c000a665:	e8 12 1c 00 00       	call   c000c27c <Device::getName()>
c000a66a:	83 c4 10             	add    esp,0x10
c000a66d:	83 ec 08             	sub    esp,0x8
c000a670:	68 bf db 01 c0       	push   0xc001dbbf
c000a675:	50                   	push   eax
c000a676:	e8 85 60 ff ff       	call   c0000700 <strcmp>
c000a67b:	83 c4 10             	add    esp,0x10
c000a67e:	85 c0                	test   eax,eax
c000a680:	0f 94 c0             	sete   al
c000a683:	84 c0                	test   al,al
c000a685:	0f 84 87 00 00 00    	je     c000a712 <VAS::VAS(bool)+0x27a>
c000a68b:	fa                   	cli    
c000a68c:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c000a691:	40                   	inc    eax
c000a692:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c000a697:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c000a69c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a6a2:	05 7c 09 00 00       	add    eax,0x97c
c000a6a7:	83 ec 0c             	sub    esp,0xc
c000a6aa:	50                   	push   eax
c000a6ab:	e8 66 d2 ff ff       	call   c0007916 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a6b0:	83 c4 10             	add    esp,0x10
c000a6b3:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a6b8:	89 c3                	mov    ebx,eax
c000a6ba:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c000a6bf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a6c5:	05 7c 09 00 00       	add    eax,0x97c
c000a6ca:	83 ec 0c             	sub    esp,0xc
c000a6cd:	50                   	push   eax
c000a6ce:	e8 43 d2 ff ff       	call   c0007916 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a6d3:	83 c4 10             	add    esp,0x10
c000a6d6:	83 ec 08             	sub    esp,0x8
c000a6d9:	50                   	push   eax
c000a6da:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a6de:	e8 83 f5 ff ff       	call   c0009c66 <VAS::getPageTableEntry(unsigned long)>
c000a6e3:	83 c4 10             	add    esp,0x10
c000a6e6:	8b 00                	mov    eax,DWORD PTR [eax]
c000a6e8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a6ed:	6a 11                	push   0x11
c000a6ef:	53                   	push   ebx
c000a6f0:	50                   	push   eax
c000a6f1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a6f5:	e8 f0 f8 ff ff       	call   c0009fea <VAS::mapPage(unsigned long, unsigned long, int)>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c000a702:	48                   	dec    eax
c000a703:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c000a708:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c000a70d:	85 c0                	test   eax,eax
c000a70f:	75 01                	jne    c000a712 <VAS::VAS(bool)+0x27a>
c000a711:	fb                   	sti    
c000a712:	90                   	nop
c000a713:	83 c4 28             	add    esp,0x28
c000a716:	5b                   	pop    ebx
c000a717:	c3                   	ret    

c000a718 <VAS::evict(unsigned long)>:
c000a718:	55                   	push   ebp
c000a719:	57                   	push   edi
c000a71a:	56                   	push   esi
c000a71b:	53                   	push   ebx
c000a71c:	83 ec 1c             	sub    esp,0x1c
c000a71f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a723:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a727:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a72b:	e8 66 f3 ff ff       	call   c0009a96 <Virt::allocateSwapfilePage()>
c000a730:	8b 0d 4c f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f84c
c000a736:	89 c7                	mov    edi,eax
c000a738:	85 c9                	test   ecx,ecx
c000a73a:	7e 3e                	jle    c000a77a <VAS::evict(unsigned long)+0x62>
c000a73c:	89 ee                	mov    esi,ebp
c000a73e:	31 db                	xor    ebx,ebx
c000a740:	83 ec 0c             	sub    esp,0xc
c000a743:	57                   	push   edi
c000a744:	e8 3b f3 ff ff       	call   c0009a84 <Virt::swapIDToSector(unsigned long)>
c000a749:	89 34 24             	mov    DWORD PTR [esp],esi
c000a74c:	01 d8                	add    eax,ebx
c000a74e:	6a 01                	push   0x1
c000a750:	31 d2                	xor    edx,edx
c000a752:	43                   	inc    ebx
c000a753:	52                   	push   edx
c000a754:	81 c6 00 02 00 00    	add    esi,0x200
c000a75a:	50                   	push   eax
c000a75b:	0f be 05 58 f8 01 c0 	movsx  eax,BYTE PTR ds:0xc001f858
c000a762:	8b 14 85 5c 2d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd2a4]
c000a769:	52                   	push   edx
c000a76a:	e8 8d 2b 00 00       	call   c000d2fc <LogicalDisk::write(unsigned long long, int, void*)>
c000a76f:	83 c4 20             	add    esp,0x20
c000a772:	39 1d 4c f8 01 c0    	cmp    DWORD PTR ds:0xc001f84c,ebx
c000a778:	7f c6                	jg     c000a740 <VAS::evict(unsigned long)+0x28>
c000a77a:	83 ec 08             	sub    esp,0x8
c000a77d:	c1 e7 0b             	shl    edi,0xb
c000a780:	55                   	push   ebp
c000a781:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a785:	50                   	push   eax
c000a786:	e8 db f4 ff ff       	call   c0009c66 <VAS::getPageTableEntry(unsigned long)>
c000a78b:	8b 10                	mov    edx,DWORD PTR [eax]
c000a78d:	89 d1                	mov    ecx,edx
c000a78f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a795:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a79b:	09 cf                	or     edi,ecx
c000a79d:	89 38                	mov    DWORD PTR [eax],edi
c000a79f:	89 14 24             	mov    DWORD PTR [esp],edx
c000a7a2:	ff 05 e8 09 02 c0    	inc    DWORD PTR ds:0xc00209e8
c000a7a8:	e8 d7 d9 ff ff       	call   c0008184 <Phys::freePage(unsigned long)>
c000a7ad:	0f 20 d8             	mov    eax,cr3
c000a7b0:	0f 22 d8             	mov    cr3,eax
c000a7b3:	a1 e4 09 02 c0       	mov    eax,ds:0xc00209e4
c000a7b8:	c7 44 24 40 cd db 01 c0 	mov    DWORD PTR [esp+0x40],0xc001dbcd
c000a7c0:	8d 50 01             	lea    edx,[eax+0x1]
c000a7c3:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a7c7:	89 15 e4 09 02 c0    	mov    DWORD PTR ds:0xc00209e4,edx
c000a7cd:	83 c4 2c             	add    esp,0x2c
c000a7d0:	5b                   	pop    ebx
c000a7d1:	5e                   	pop    esi
c000a7d2:	5f                   	pop    edi
c000a7d3:	5d                   	pop    ebp
c000a7d4:	e9 cf 03 00 00       	jmp    c000aba8 <Dbg::kprintf(char const*, ...)>
c000a7d9:	90                   	nop

c000a7da <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a7da:	55                   	push   ebp
c000a7db:	57                   	push   edi
c000a7dc:	56                   	push   esi
c000a7dd:	53                   	push   ebx
c000a7de:	83 ec 14             	sub    esp,0x14
c000a7e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a7e5:	53                   	push   ebx
c000a7e6:	68 de db 01 c0       	push   0xc001dbde
c000a7eb:	e8 b8 03 00 00       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c000a7f0:	83 c4 10             	add    esp,0x10
c000a7f3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a7f9:	74 21                	je     c000a81c <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a7fb:	83 ec 08             	sub    esp,0x8
c000a7fe:	53                   	push   ebx
c000a7ff:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a803:	57                   	push   edi
c000a804:	e8 5d f4 ff ff       	call   c0009c66 <VAS::getPageTableEntry(unsigned long)>
c000a809:	83 c4 10             	add    esp,0x10
c000a80c:	89 c6                	mov    esi,eax
c000a80e:	85 c0                	test   eax,eax
c000a810:	74 0a                	je     c000a81c <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a812:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a814:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a81a:	74 0a                	je     c000a826 <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a81c:	31 c0                	xor    eax,eax
c000a81e:	83 c4 0c             	add    esp,0xc
c000a821:	5b                   	pop    ebx
c000a822:	5e                   	pop    esi
c000a823:	5f                   	pop    edi
c000a824:	5d                   	pop    ebp
c000a825:	c3                   	ret    
c000a826:	e8 bb d9 ff ff       	call   c00081e6 <Phys::allocatePage()>
c000a82b:	c1 ed 0b             	shr    ebp,0xb
c000a82e:	8b 16                	mov    edx,DWORD PTR [esi]
c000a830:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a836:	09 c2                	or     edx,eax
c000a838:	81 ca 01 08 00 00    	or     edx,0x801
c000a83e:	89 16                	mov    DWORD PTR [esi],edx
c000a840:	8b 35 4c f8 01 c0    	mov    esi,DWORD PTR ds:0xc001f84c
c000a846:	85 f6                	test   esi,esi
c000a848:	7e 3e                	jle    c000a888 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a84a:	89 df                	mov    edi,ebx
c000a84c:	31 f6                	xor    esi,esi
c000a84e:	83 ec 0c             	sub    esp,0xc
c000a851:	55                   	push   ebp
c000a852:	e8 2d f2 ff ff       	call   c0009a84 <Virt::swapIDToSector(unsigned long)>
c000a857:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a85a:	01 f0                	add    eax,esi
c000a85c:	6a 01                	push   0x1
c000a85e:	31 d2                	xor    edx,edx
c000a860:	46                   	inc    esi
c000a861:	52                   	push   edx
c000a862:	81 c7 00 02 00 00    	add    edi,0x200
c000a868:	50                   	push   eax
c000a869:	0f be 05 58 f8 01 c0 	movsx  eax,BYTE PTR ds:0xc001f858
c000a870:	8b 0c 85 5c 2d 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd2a4]
c000a877:	51                   	push   ecx
c000a878:	e8 13 2a 00 00       	call   c000d290 <LogicalDisk::read(unsigned long long, int, void*)>
c000a87d:	83 c4 20             	add    esp,0x20
c000a880:	39 35 4c f8 01 c0    	cmp    DWORD PTR ds:0xc001f84c,esi
c000a886:	7f c6                	jg     c000a84e <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a888:	a1 e8 09 02 c0       	mov    eax,ds:0xc00209e8
c000a88d:	48                   	dec    eax
c000a88e:	52                   	push   edx
c000a88f:	a3 e8 09 02 c0       	mov    ds:0xc00209e8,eax
c000a894:	50                   	push   eax
c000a895:	53                   	push   ebx
c000a896:	68 f1 db 01 c0       	push   0xc001dbf1
c000a89b:	e8 08 03 00 00       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c000a8a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a8a3:	e8 be f1 ff ff       	call   c0009a66 <Virt::freeSwapfilePage(unsigned long)>
c000a8a8:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c000a8ad:	83 c4 10             	add    esp,0x10
c000a8b0:	48                   	dec    eax
c000a8b1:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c000a8b6:	85 c0                	test   eax,eax
c000a8b8:	75 01                	jne    c000a8bb <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a8ba:	fb                   	sti    
c000a8bb:	0f 20 d8             	mov    eax,cr3
c000a8be:	0f 22 d8             	mov    cr3,eax
c000a8c1:	b0 01                	mov    al,0x1
c000a8c3:	e9 56 ff ff ff       	jmp    c000a81e <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a8c8 <VAS::scanForEviction()>:
c000a8c8:	57                   	push   edi
c000a8c9:	31 ff                	xor    edi,edi
c000a8cb:	56                   	push   esi
c000a8cc:	53                   	push   ebx
c000a8cd:	83 ec 10             	sub    esp,0x10
c000a8d0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a8d4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a8d7:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a8dd:	75 0e                	jne    c000a8ed <VAS::scanForEviction()+0x25>
c000a8df:	89 da                	mov    edx,ebx
c000a8e1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a8e4:	c1 ea 16             	shr    edx,0x16
c000a8e7:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a8eb:	74 4e                	je     c000a93b <VAS::scanForEviction()+0x73>
c000a8ed:	53                   	push   ebx
c000a8ee:	56                   	push   esi
c000a8ef:	e8 72 f3 ff ff       	call   c0009c66 <VAS::getPageTableEntry(unsigned long)>
c000a8f4:	5a                   	pop    edx
c000a8f5:	8b 10                	mov    edx,DWORD PTR [eax]
c000a8f7:	59                   	pop    ecx
c000a8f8:	89 d1                	mov    ecx,edx
c000a8fa:	81 e1 01 08 00 00    	and    ecx,0x801
c000a900:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a906:	74 3e                	je     c000a946 <VAS::scanForEviction()+0x7e>
c000a908:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a90e:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a914:	76 2b                	jbe    c000a941 <VAS::scanForEviction()+0x79>
c000a916:	47                   	inc    edi
c000a917:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a91e:	83 ff 03             	cmp    edi,0x3
c000a921:	74 32                	je     c000a955 <VAS::scanForEviction()+0x8d>
c000a923:	31 db                	xor    ebx,ebx
c000a925:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a92b:	75 c0                	jne    c000a8ed <VAS::scanForEviction()+0x25>
c000a92d:	89 da                	mov    edx,ebx
c000a92f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a932:	c1 ea 16             	shr    edx,0x16
c000a935:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a939:	75 b2                	jne    c000a8ed <VAS::scanForEviction()+0x25>
c000a93b:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a941:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a944:	eb 91                	jmp    c000a8d7 <VAS::scanForEviction()+0xf>
c000a946:	f6 c2 20             	test   dl,0x20
c000a949:	74 13                	je     c000a95e <VAS::scanForEviction()+0x96>
c000a94b:	83 e2 df             	and    edx,0xffffffdf
c000a94e:	89 10                	mov    DWORD PTR [eax],edx
c000a950:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a953:	eb b3                	jmp    c000a908 <VAS::scanForEviction()+0x40>
c000a955:	83 c4 10             	add    esp,0x10
c000a958:	31 c0                	xor    eax,eax
c000a95a:	5b                   	pop    ebx
c000a95b:	5e                   	pop    esi
c000a95c:	5f                   	pop    edi
c000a95d:	c3                   	ret    
c000a95e:	83 ec 08             	sub    esp,0x8
c000a961:	89 d0                	mov    eax,edx
c000a963:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a968:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a96c:	53                   	push   ebx
c000a96d:	68 06 dc 01 c0       	push   0xc001dc06
c000a972:	e8 31 02 00 00       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c000a977:	58                   	pop    eax
c000a978:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a97b:	5a                   	pop    edx
c000a97c:	51                   	push   ecx
c000a97d:	56                   	push   esi
c000a97e:	e8 95 fd ff ff       	call   c000a718 <VAS::evict(unsigned long)>
c000a983:	5b                   	pop    ebx
c000a984:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a987:	5f                   	pop    edi
c000a988:	50                   	push   eax
c000a989:	68 1a dc 01 c0       	push   0xc001dc1a
c000a98e:	e8 15 02 00 00       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c000a993:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a99a:	83 c4 10             	add    esp,0x10
c000a99d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a9a1:	83 c4 10             	add    esp,0x10
c000a9a4:	5b                   	pop    ebx
c000a9a5:	5e                   	pop    esi
c000a9a6:	5f                   	pop    edi
c000a9a7:	c3                   	ret    

c000a9a8 <mapVASFirstTime>:
c000a9a8:	55                   	push   ebp
c000a9a9:	57                   	push   edi
c000a9aa:	56                   	push   esi
c000a9ab:	53                   	push   ebx
c000a9ac:	83 ec 0c             	sub    esp,0xc
c000a9af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a9b4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a9b7:	4a                   	dec    edx
c000a9b8:	0f 84 8c 00 00 00    	je     c000aa4a <mapVASFirstTime+0xa2>
c000a9be:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a9c1:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a9c4:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a9c9:	c1 e5 15             	shl    ebp,0x15
c000a9cc:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a9d1:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a9d7:	29 eb                	sub    ebx,ebp
c000a9d9:	29 ef                	sub    edi,ebp
c000a9db:	e8 06 d8 ff ff       	call   c00081e6 <Phys::allocatePage()>
c000a9e0:	83 ec 0c             	sub    esp,0xc
c000a9e3:	68 03 04 00 00       	push   0x403
c000a9e8:	6a 01                	push   0x1
c000a9ea:	53                   	push   ebx
c000a9eb:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a9f1:	50                   	push   eax
c000a9f2:	56                   	push   esi
c000a9f3:	e8 ec f8 ff ff       	call   c000a2e4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a9f8:	83 c4 20             	add    esp,0x20
c000a9fb:	39 fb                	cmp    ebx,edi
c000a9fd:	75 dc                	jne    c000a9db <mapVASFirstTime+0x33>
c000a9ff:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000aa04:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000aa09:	29 eb                	sub    ebx,ebp
c000aa0b:	29 ef                	sub    edi,ebp
c000aa0d:	e8 d4 d7 ff ff       	call   c00081e6 <Phys::allocatePage()>
c000aa12:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000aa16:	19 d2                	sbb    edx,edx
c000aa18:	83 ec 0c             	sub    esp,0xc
c000aa1b:	83 e2 04             	and    edx,0x4
c000aa1e:	81 c2 03 04 00 00    	add    edx,0x403
c000aa24:	52                   	push   edx
c000aa25:	6a 01                	push   0x1
c000aa27:	53                   	push   ebx
c000aa28:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000aa2e:	50                   	push   eax
c000aa2f:	56                   	push   esi
c000aa30:	e8 af f8 ff ff       	call   c000a2e4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000aa35:	83 c4 20             	add    esp,0x20
c000aa38:	39 df                	cmp    edi,ebx
c000aa3a:	75 d1                	jne    c000aa0d <mapVASFirstTime+0x65>
c000aa3c:	0f 20 d8             	mov    eax,cr3
c000aa3f:	0f 22 d8             	mov    cr3,eax
c000aa42:	83 c4 0c             	add    esp,0xc
c000aa45:	5b                   	pop    ebx
c000aa46:	5e                   	pop    esi
c000aa47:	5f                   	pop    edi
c000aa48:	5d                   	pop    ebp
c000aa49:	c3                   	ret    
c000aa4a:	83 ec 0c             	sub    esp,0xc
c000aa4d:	68 2d dc 01 c0       	push   0xc001dc2d
c000aa52:	e8 51 01 00 00       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c000aa57:	83 c4 10             	add    esp,0x10
c000aa5a:	83 c4 0c             	add    esp,0xc
c000aa5d:	5b                   	pop    ebx
c000aa5e:	5e                   	pop    esi
c000aa5f:	5f                   	pop    edi
c000aa60:	5d                   	pop    ebp
c000aa61:	c3                   	ret    

c000aa62 <__cxa_atexit>:
c000aa62:	31 c0                	xor    eax,eax
c000aa64:	c3                   	ret    

c000aa65 <__cxa_finalize>:
c000aa65:	c3                   	ret    

c000aa66 <__stack_chk_fail>:
c000aa66:	55                   	push   ebp
c000aa67:	89 e5                	mov    ebp,esp
c000aa69:	83 ec 10             	sub    esp,0x10
c000aa6c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aa6f:	68 46 dc 01 c0       	push   0xc001dc46
c000aa74:	e8 2f 01 00 00       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c000aa79:	58                   	pop    eax
c000aa7a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000aa7d:	5a                   	pop    edx
c000aa7e:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000aa81:	68 46 dc 01 c0       	push   0xc001dc46
c000aa86:	e8 1d 01 00 00       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c000aa8b:	c7 04 24 4e dc 01 c0 	mov    DWORD PTR [esp],0xc001dc4e
c000aa92:	e8 60 5c 00 00       	call   c00106f7 <Krnl::panic(char const*)>
c000aa97:	83 c4 10             	add    esp,0x10
c000aa9a:	c9                   	leave  
c000aa9b:	c3                   	ret    

c000aa9c <__cxa_pure_virtual>:
c000aa9c:	83 ec 18             	sub    esp,0x18
c000aa9f:	68 66 dc 01 c0       	push   0xc001dc66
c000aaa4:	e8 4e 5c 00 00       	call   c00106f7 <Krnl::panic(char const*)>
c000aaa9:	83 c4 1c             	add    esp,0x1c
c000aaac:	c3                   	ret    

c000aaad <operator new[](unsigned long)>:
c000aaad:	e9 67 d3 ff ff       	jmp    c0007e19 <malloc>

c000aab2 <operator delete(void*, unsigned long)>:
c000aab2:	e9 82 d3 ff ff       	jmp    c0007e39 <rfree>

c000aab7 <operator delete[](void*)>:
c000aab7:	e9 7d d3 ff ff       	jmp    c0007e39 <rfree>

c000aabc <operator delete[](void*, unsigned long)>:
c000aabc:	e9 78 d3 ff ff       	jmp    c0007e39 <rfree>

c000aac1 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000aac1:	55                   	push   ebp
c000aac2:	b9 04 00 00 00       	mov    ecx,0x4
c000aac7:	57                   	push   edi
c000aac8:	56                   	push   esi
c000aac9:	be 7b d8 01 c0       	mov    esi,0xc001d87b
c000aace:	53                   	push   ebx
c000aacf:	83 ec 20             	sub    esp,0x20
c000aad2:	a1 7a d8 01 c0       	mov    eax,ds:0xc001d87a
c000aad7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000aadb:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000aadf:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000aae3:	a1 87 d8 01 c0       	mov    eax,ds:0xc001d887
c000aae8:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000aaec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000aaf0:	fc                   	cld    
c000aaf1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000aaf3:	89 ee                	mov    esi,ebp
c000aaf5:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000aaf9:	eb 02                	jmp    c000aafd <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000aafb:	89 c6                	mov    esi,eax
c000aafd:	31 d2                	xor    edx,edx
c000aaff:	41                   	inc    ecx
c000ab00:	89 f0                	mov    eax,esi
c000ab02:	f7 f3                	div    ebx
c000ab04:	39 de                	cmp    esi,ebx
c000ab06:	73 f3                	jae    c000aafb <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000ab08:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ab0b:	eb 02                	jmp    c000ab0f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000ab0d:	89 c5                	mov    ebp,eax
c000ab0f:	31 d2                	xor    edx,edx
c000ab11:	49                   	dec    ecx
c000ab12:	89 e8                	mov    eax,ebp
c000ab14:	f7 f3                	div    ebx
c000ab16:	39 dd                	cmp    ebp,ebx
c000ab18:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000ab1c:	88 11                	mov    BYTE PTR [ecx],dl
c000ab1e:	73 ed                	jae    c000ab0d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000ab20:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ab24:	83 c4 20             	add    esp,0x20
c000ab27:	5b                   	pop    ebx
c000ab28:	5e                   	pop    esi
c000ab29:	5f                   	pop    edi
c000ab2a:	5d                   	pop    ebp
c000ab2b:	c3                   	ret    

c000ab2c <Dbg::logc(char)>:
c000ab2c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ab30:	f6 05 10 09 02 c0 10 	test   BYTE PTR ds:0xc0020910,0x10
c000ab37:	75 12                	jne    c000ab4b <Dbg::logc(char)+0x1f>
c000ab39:	ba fd 03 00 00       	mov    edx,0x3fd
c000ab3e:	ec                   	in     al,dx
c000ab3f:	a8 20                	test   al,0x20
c000ab41:	74 fb                	je     c000ab3e <Dbg::logc(char)+0x12>
c000ab43:	ba f8 03 00 00       	mov    edx,0x3f8
c000ab48:	88 c8                	mov    al,cl
c000ab4a:	ee                   	out    dx,al
c000ab4b:	c3                   	ret    

c000ab4c <Dbg::logs(char*)>:
c000ab4c:	53                   	push   ebx
c000ab4d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ab51:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ab54:	84 c0                	test   al,al
c000ab56:	74 0f                	je     c000ab67 <Dbg::logs(char*)+0x1b>
c000ab58:	50                   	push   eax
c000ab59:	43                   	inc    ebx
c000ab5a:	e8 cd ff ff ff       	call   c000ab2c <Dbg::logc(char)>
c000ab5f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ab62:	5a                   	pop    edx
c000ab63:	84 c0                	test   al,al
c000ab65:	75 f1                	jne    c000ab58 <Dbg::logs(char*)+0xc>
c000ab67:	5b                   	pop    ebx
c000ab68:	c3                   	ret    

c000ab69 <Dbg::logWriteInt(unsigned int)>:
c000ab69:	83 ec 10             	sub    esp,0x10
c000ab6c:	6a 0a                	push   0xa
c000ab6e:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ab72:	50                   	push   eax
c000ab73:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ab77:	50                   	push   eax
c000ab78:	e8 44 ff ff ff       	call   c000aac1 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ab7d:	50                   	push   eax
c000ab7e:	e8 c9 ff ff ff       	call   c000ab4c <Dbg::logs(char*)>
c000ab83:	83 c4 20             	add    esp,0x20
c000ab86:	c3                   	ret    

c000ab87 <Dbg::logWriteIntBase(unsigned int, int)>:
c000ab87:	83 ec 10             	sub    esp,0x10
c000ab8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ab8e:	50                   	push   eax
c000ab8f:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ab93:	50                   	push   eax
c000ab94:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ab98:	52                   	push   edx
c000ab99:	e8 23 ff ff ff       	call   c000aac1 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ab9e:	50                   	push   eax
c000ab9f:	e8 a8 ff ff ff       	call   c000ab4c <Dbg::logs(char*)>
c000aba4:	83 c4 20             	add    esp,0x20
c000aba7:	c3                   	ret    

c000aba8 <Dbg::kprintf(char const*, ...)>:
c000aba8:	55                   	push   ebp
c000aba9:	57                   	push   edi
c000abaa:	56                   	push   esi
c000abab:	53                   	push   ebx
c000abac:	83 ec 0c             	sub    esp,0xc
c000abaf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000abb3:	f6 05 10 09 02 c0 10 	test   BYTE PTR ds:0xc0020910,0x10
c000abba:	74 08                	je     c000abc4 <Dbg::kprintf(char const*, ...)+0x1c>
c000abbc:	83 c4 0c             	add    esp,0xc
c000abbf:	5b                   	pop    ebx
c000abc0:	5e                   	pop    esi
c000abc1:	5f                   	pop    edi
c000abc2:	5d                   	pop    ebp
c000abc3:	c3                   	ret    
c000abc4:	8d 44 24 24          	lea    eax,[esp+0x24]
c000abc8:	31 ff                	xor    edi,edi
c000abca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000abce:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000abd1:	84 c0                	test   al,al
c000abd3:	74 e7                	je     c000abbc <Dbg::kprintf(char const*, ...)+0x14>
c000abd5:	8d 77 01             	lea    esi,[edi+0x1]
c000abd8:	3c 25                	cmp    al,0x25
c000abda:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000abdd:	75 47                	jne    c000ac26 <Dbg::kprintf(char const*, ...)+0x7e>
c000abdf:	83 c7 02             	add    edi,0x2
c000abe2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000abe5:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000abe8:	83 e8 25             	sub    eax,0x25
c000abeb:	3c 53                	cmp    al,0x53
c000abed:	0f 87 d2 00 00 00    	ja     c000acc5 <Dbg::kprintf(char const*, ...)+0x11d>
c000abf3:	25 ff 00 00 00       	and    eax,0xff
c000abf8:	ff 24 85 7c dc 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe2384]
c000abff:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ac03:	89 c8                	mov    eax,ecx
c000ac05:	83 c1 04             	add    ecx,0x4
c000ac08:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ac0c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000ac0e:	55                   	push   ebp
c000ac0f:	e8 55 ff ff ff       	call   c000ab69 <Dbg::logWriteInt(unsigned int)>
c000ac14:	58                   	pop    eax
c000ac15:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000ac18:	84 c0                	test   al,al
c000ac1a:	74 a0                	je     c000abbc <Dbg::kprintf(char const*, ...)+0x14>
c000ac1c:	8d 77 01             	lea    esi,[edi+0x1]
c000ac1f:	3c 25                	cmp    al,0x25
c000ac21:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000ac24:	74 b9                	je     c000abdf <Dbg::kprintf(char const*, ...)+0x37>
c000ac26:	50                   	push   eax
c000ac27:	89 f7                	mov    edi,esi
c000ac29:	e8 fe fe ff ff       	call   c000ab2c <Dbg::logc(char)>
c000ac2e:	89 ee                	mov    esi,ebp
c000ac30:	58                   	pop    eax
c000ac31:	eb e2                	jmp    c000ac15 <Dbg::kprintf(char const*, ...)+0x6d>
c000ac33:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ac37:	89 c8                	mov    eax,ecx
c000ac39:	83 c1 04             	add    ecx,0x4
c000ac3c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ac3e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ac42:	50                   	push   eax
c000ac43:	e8 04 ff ff ff       	call   c000ab4c <Dbg::logs(char*)>
c000ac48:	58                   	pop    eax
c000ac49:	eb ca                	jmp    c000ac15 <Dbg::kprintf(char const*, ...)+0x6d>
c000ac4b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ac4f:	89 d0                	mov    eax,edx
c000ac51:	83 c2 04             	add    edx,0x4
c000ac54:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac58:	8b 00                	mov    eax,DWORD PTR [eax]
c000ac5a:	50                   	push   eax
c000ac5b:	e8 09 ff ff ff       	call   c000ab69 <Dbg::logWriteInt(unsigned int)>
c000ac60:	58                   	pop    eax
c000ac61:	eb b2                	jmp    c000ac15 <Dbg::kprintf(char const*, ...)+0x6d>
c000ac63:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ac67:	89 d0                	mov    eax,edx
c000ac69:	83 c2 04             	add    edx,0x4
c000ac6c:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000ac6f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac73:	50                   	push   eax
c000ac74:	e8 b3 fe ff ff       	call   c000ab2c <Dbg::logc(char)>
c000ac79:	58                   	pop    eax
c000ac7a:	eb 99                	jmp    c000ac15 <Dbg::kprintf(char const*, ...)+0x6d>
c000ac7c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ac80:	89 c8                	mov    eax,ecx
c000ac82:	83 c1 04             	add    ecx,0x4
c000ac85:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ac89:	6a 10                	push   0x10
c000ac8b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ac8d:	51                   	push   ecx
c000ac8e:	e8 f4 fe ff ff       	call   c000ab87 <Dbg::logWriteIntBase(unsigned int, int)>
c000ac93:	5d                   	pop    ebp
c000ac94:	58                   	pop    eax
c000ac95:	e9 7b ff ff ff       	jmp    c000ac15 <Dbg::kprintf(char const*, ...)+0x6d>
c000ac9a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ac9e:	89 d0                	mov    eax,edx
c000aca0:	83 c2 08             	add    edx,0x8
c000aca3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca7:	6a 10                	push   0x10
c000aca9:	8b 00                	mov    eax,DWORD PTR [eax]
c000acab:	50                   	push   eax
c000acac:	e8 d6 fe ff ff       	call   c000ab87 <Dbg::logWriteIntBase(unsigned int, int)>
c000acb1:	58                   	pop    eax
c000acb2:	5a                   	pop    edx
c000acb3:	e9 5d ff ff ff       	jmp    c000ac15 <Dbg::kprintf(char const*, ...)+0x6d>
c000acb8:	6a 25                	push   0x25
c000acba:	e8 6d fe ff ff       	call   c000ab2c <Dbg::logc(char)>
c000acbf:	5a                   	pop    edx
c000acc0:	e9 50 ff ff ff       	jmp    c000ac15 <Dbg::kprintf(char const*, ...)+0x6d>
c000acc5:	6a 25                	push   0x25
c000acc7:	e8 60 fe ff ff       	call   c000ab2c <Dbg::logc(char)>
c000accc:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000acd0:	50                   	push   eax
c000acd1:	e8 56 fe ff ff       	call   c000ab2c <Dbg::logc(char)>
c000acd6:	5a                   	pop    edx
c000acd7:	59                   	pop    ecx
c000acd8:	e9 38 ff ff ff       	jmp    c000ac15 <Dbg::kprintf(char const*, ...)+0x6d>
c000acdd:	90                   	nop

c000acde <File::read(unsigned long long, void*, int*)>:
c000acde:	53                   	push   ebx
c000acdf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ace3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ace7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000acee:	3c 19                	cmp    al,0x19
c000acf0:	77 35                	ja     c000ad27 <File::read(unsigned long long, void*, int*)+0x49>
c000acf2:	8b 04 85 60 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd1a0]
c000acf9:	85 c0                	test   eax,eax
c000acfb:	74 2a                	je     c000ad27 <File::read(unsigned long long, void*, int*)+0x49>
c000acfd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ad03:	85 c0                	test   eax,eax
c000ad05:	74 20                	je     c000ad27 <File::read(unsigned long long, void*, int*)+0x49>
c000ad07:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad0b:	74 21                	je     c000ad2e <File::read(unsigned long long, void*, int*)+0x50>
c000ad0d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ad0f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ad13:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ad19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad1d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad21:	5b                   	pop    ebx
c000ad22:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ad25:	ff e0                	jmp    eax
c000ad27:	b8 0b 00 00 00       	mov    eax,0xb
c000ad2c:	eb 05                	jmp    c000ad33 <File::read(unsigned long long, void*, int*)+0x55>
c000ad2e:	b8 05 00 00 00       	mov    eax,0x5
c000ad33:	5b                   	pop    ebx
c000ad34:	c3                   	ret    
c000ad35:	90                   	nop

c000ad36 <File::write(unsigned long long, void*, int*)>:
c000ad36:	53                   	push   ebx
c000ad37:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad3b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ad3f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ad46:	3c 19                	cmp    al,0x19
c000ad48:	77 35                	ja     c000ad7f <File::write(unsigned long long, void*, int*)+0x49>
c000ad4a:	8b 04 85 60 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd1a0]
c000ad51:	85 c0                	test   eax,eax
c000ad53:	74 2a                	je     c000ad7f <File::write(unsigned long long, void*, int*)+0x49>
c000ad55:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ad5b:	85 c0                	test   eax,eax
c000ad5d:	74 20                	je     c000ad7f <File::write(unsigned long long, void*, int*)+0x49>
c000ad5f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad63:	74 21                	je     c000ad86 <File::write(unsigned long long, void*, int*)+0x50>
c000ad65:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ad67:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ad6b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ad71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad75:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad79:	5b                   	pop    ebx
c000ad7a:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000ad7d:	ff e0                	jmp    eax
c000ad7f:	b8 0b 00 00 00       	mov    eax,0xb
c000ad84:	eb 05                	jmp    c000ad8b <File::write(unsigned long long, void*, int*)+0x55>
c000ad86:	b8 05 00 00 00       	mov    eax,0x5
c000ad8b:	5b                   	pop    ebx
c000ad8c:	c3                   	ret    
c000ad8d:	90                   	nop

c000ad8e <Directory::read(unsigned long long, void*, int*)>:
c000ad8e:	53                   	push   ebx
c000ad8f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad93:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ad97:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ad9e:	3c 19                	cmp    al,0x19
c000ada0:	77 35                	ja     c000add7 <Directory::read(unsigned long long, void*, int*)+0x49>
c000ada2:	8b 04 85 60 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd1a0]
c000ada9:	85 c0                	test   eax,eax
c000adab:	74 2a                	je     c000add7 <Directory::read(unsigned long long, void*, int*)+0x49>
c000adad:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000adb3:	85 c0                	test   eax,eax
c000adb5:	74 20                	je     c000add7 <Directory::read(unsigned long long, void*, int*)+0x49>
c000adb7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000adbb:	74 21                	je     c000adde <Directory::read(unsigned long long, void*, int*)+0x50>
c000adbd:	8b 08                	mov    ecx,DWORD PTR [eax]
c000adbf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000adc3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000adc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000adcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000add1:	5b                   	pop    ebx
c000add2:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000add5:	ff e0                	jmp    eax
c000add7:	b8 0b 00 00 00       	mov    eax,0xb
c000addc:	eb 05                	jmp    c000ade3 <Directory::read(unsigned long long, void*, int*)+0x55>
c000adde:	b8 05 00 00 00       	mov    eax,0x5
c000ade3:	5b                   	pop    ebx
c000ade4:	c3                   	ret    
c000ade5:	90                   	nop

c000ade6 <Directory::write(unsigned long long, void*, int*)>:
c000ade6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000adea:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000adf1:	b8 0b 00 00 00       	mov    eax,0xb
c000adf6:	80 fa 19             	cmp    dl,0x19
c000adf9:	77 18                	ja     c000ae13 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000adfb:	8b 14 95 60 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd1a0]
c000ae02:	85 d2                	test   edx,edx
c000ae04:	74 0d                	je     c000ae13 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ae06:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000ae0d:	19 c0                	sbb    eax,eax
c000ae0f:	83 e0 0a             	and    eax,0xa
c000ae12:	40                   	inc    eax
c000ae13:	c3                   	ret    

c000ae14 <File::isAtty()>:
c000ae14:	31 c0                	xor    eax,eax
c000ae16:	c3                   	ret    
c000ae17:	90                   	nop

c000ae18 <Directory::isAtty()>:
c000ae18:	31 c0                	xor    eax,eax
c000ae1a:	c3                   	ret    
c000ae1b:	90                   	nop

c000ae1c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000ae1c:	b8 0a 00 00 00       	mov    eax,0xa
c000ae21:	c3                   	ret    

c000ae22 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000ae22:	b8 0a 00 00 00       	mov    eax,0xa
c000ae27:	c3                   	ret    

c000ae28 <Filesystem::allocateSwapfile(char const*, int)>:
c000ae28:	31 c0                	xor    eax,eax
c000ae2a:	31 d2                	xor    edx,edx
c000ae2c:	c3                   	ret    
c000ae2d:	90                   	nop

c000ae2e <File::~File()>:
c000ae2e:	83 ec 0c             	sub    esp,0xc
c000ae31:	ba 3c de 01 c0       	mov    edx,0xc001de3c
c000ae36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae3a:	89 10                	mov    DWORD PTR [eax],edx
c000ae3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae40:	83 ec 0c             	sub    esp,0xc
c000ae43:	50                   	push   eax
c000ae44:	e8 ab e8 ff ff       	call   c00096f4 <UnixFile::~UnixFile()>
c000ae49:	83 c4 10             	add    esp,0x10
c000ae4c:	90                   	nop
c000ae4d:	83 c4 0c             	add    esp,0xc
c000ae50:	c3                   	ret    
c000ae51:	90                   	nop

c000ae52 <File::~File()>:
c000ae52:	83 ec 0c             	sub    esp,0xc
c000ae55:	83 ec 0c             	sub    esp,0xc
c000ae58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae5c:	e8 cd ff ff ff       	call   c000ae2e <File::~File()>
c000ae61:	83 c4 10             	add    esp,0x10
c000ae64:	83 ec 08             	sub    esp,0x8
c000ae67:	68 14 01 00 00       	push   0x114
c000ae6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae70:	e8 3d fc ff ff       	call   c000aab2 <operator delete(void*, unsigned long)>
c000ae75:	83 c4 10             	add    esp,0x10
c000ae78:	83 c4 0c             	add    esp,0xc
c000ae7b:	c3                   	ret    

c000ae7c <Directory::~Directory()>:
c000ae7c:	83 ec 0c             	sub    esp,0xc
c000ae7f:	ba 58 de 01 c0       	mov    edx,0xc001de58
c000ae84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae88:	89 10                	mov    DWORD PTR [eax],edx
c000ae8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae8e:	83 ec 0c             	sub    esp,0xc
c000ae91:	50                   	push   eax
c000ae92:	e8 5d e8 ff ff       	call   c00096f4 <UnixFile::~UnixFile()>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	90                   	nop
c000ae9b:	83 c4 0c             	add    esp,0xc
c000ae9e:	c3                   	ret    
c000ae9f:	90                   	nop

c000aea0 <Directory::~Directory()>:
c000aea0:	83 ec 0c             	sub    esp,0xc
c000aea3:	83 ec 0c             	sub    esp,0xc
c000aea6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aeaa:	e8 cd ff ff ff       	call   c000ae7c <Directory::~Directory()>
c000aeaf:	83 c4 10             	add    esp,0x10
c000aeb2:	83 ec 08             	sub    esp,0x8
c000aeb5:	68 14 01 00 00       	push   0x114
c000aeba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aebe:	e8 ef fb ff ff       	call   c000aab2 <operator delete(void*, unsigned long)>
c000aec3:	83 c4 10             	add    esp,0x10
c000aec6:	83 c4 0c             	add    esp,0xc
c000aec9:	c3                   	ret    

c000aeca <Filesystem::Filesystem()>:
c000aeca:	ba d4 dd 01 c0       	mov    edx,0xc001ddd4
c000aecf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aed3:	89 10                	mov    DWORD PTR [eax],edx
c000aed5:	8b 15 f4 09 02 c0    	mov    edx,DWORD PTR ds:0xc00209f4
c000aedb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aedf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000aee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aee6:	a3 f4 09 02 c0       	mov    ds:0xc00209f4,eax
c000aeeb:	90                   	nop
c000aeec:	c3                   	ret    
c000aeed:	90                   	nop

c000aeee <Filesystem::~Filesystem()>:
c000aeee:	ba d4 dd 01 c0       	mov    edx,0xc001ddd4
c000aef3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aef7:	89 10                	mov    DWORD PTR [eax],edx
c000aef9:	90                   	nop
c000aefa:	c3                   	ret    
c000aefb:	90                   	nop

c000aefc <Filesystem::~Filesystem()>:
c000aefc:	83 ec 0c             	sub    esp,0xc
c000aeff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000af03:	e8 e6 ff ff ff       	call   c000aeee <Filesystem::~Filesystem()>
c000af08:	83 c4 04             	add    esp,0x4
c000af0b:	83 ec 08             	sub    esp,0x8
c000af0e:	6a 08                	push   0x8
c000af10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af14:	e8 99 fb ff ff       	call   c000aab2 <operator delete(void*, unsigned long)>
c000af19:	83 c4 10             	add    esp,0x10
c000af1c:	83 c4 0c             	add    esp,0xc
c000af1f:	c3                   	ret    

c000af20 <Fs::getcwd(Process*, char*, int)>:
c000af20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000af24:	31 c0                	xor    eax,eax
c000af26:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000af29:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000af2d:	7d 15                	jge    c000af44 <Fs::getcwd(Process*, char*, int)+0x24>
c000af2f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000af33:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000af3a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000af3d:	84 c9                	test   cl,cl
c000af3f:	74 06                	je     c000af47 <Fs::getcwd(Process*, char*, int)+0x27>
c000af41:	40                   	inc    eax
c000af42:	eb e2                	jmp    c000af26 <Fs::getcwd(Process*, char*, int)+0x6>
c000af44:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000af47:	31 c0                	xor    eax,eax
c000af49:	c3                   	ret    

c000af4a <Fs::initVFS()>:
c000af4a:	83 ec 18             	sub    esp,0x18
c000af4d:	6a 08                	push   0x8
c000af4f:	e8 c5 ce ff ff       	call   c0007e19 <malloc>
c000af54:	89 04 24             	mov    DWORD PTR [esp],eax
c000af57:	e8 a4 c2 00 00       	call   c0017200 <FAT::FAT()>
c000af5c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000af63:	e8 b1 ce ff ff       	call   c0007e19 <malloc>
c000af68:	89 04 24             	mov    DWORD PTR [esp],eax
c000af6b:	e8 66 cf 00 00       	call   c0017ed6 <ISO9660::ISO9660()>
c000af70:	83 c4 1c             	add    esp,0x1c
c000af73:	c3                   	ret    

c000af74 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000af74:	55                   	push   ebp
c000af75:	57                   	push   edi
c000af76:	56                   	push   esi
c000af77:	53                   	push   ebx
c000af78:	81 ec 10 04 00 00    	sub    esp,0x410
c000af7e:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000af85:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000af8c:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000af93:	68 00 04 00 00       	push   0x400
c000af98:	6a 00                	push   0x0
c000af9a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000af9e:	56                   	push   esi
c000af9f:	e8 4c 55 ff ff       	call   c00004f0 <memset>
c000afa4:	83 c4 10             	add    esp,0x10
c000afa7:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000afab:	75 0b                	jne    c000afb8 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000afad:	50                   	push   eax
c000afae:	50                   	push   eax
c000afaf:	57                   	push   edi
c000afb0:	56                   	push   esi
c000afb1:	e8 6a 56 ff ff       	call   c0000620 <strcpy>
c000afb6:	eb 41                	jmp    c000aff9 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000afb8:	8a 07                	mov    al,BYTE PTR [edi]
c000afba:	3c 5c                	cmp    al,0x5c
c000afbc:	74 04                	je     c000afc2 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000afbe:	3c 2f                	cmp    al,0x2f
c000afc0:	75 18                	jne    c000afda <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000afc2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000afc5:	3c 60                	cmp    al,0x60
c000afc7:	7e 03                	jle    c000afcc <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000afc9:	83 e8 20             	sub    eax,0x20
c000afcc:	88 04 24             	mov    BYTE PTR [esp],al
c000afcf:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000afd6:	50                   	push   eax
c000afd7:	50                   	push   eax
c000afd8:	eb 18                	jmp    c000aff2 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000afda:	50                   	push   eax
c000afdb:	50                   	push   eax
c000afdc:	55                   	push   ebp
c000afdd:	56                   	push   esi
c000afde:	e8 3d 56 ff ff       	call   c0000620 <strcpy>
c000afe3:	5a                   	pop    edx
c000afe4:	59                   	pop    ecx
c000afe5:	68 7f ea 01 c0       	push   0xc001ea7f
c000afea:	56                   	push   esi
c000afeb:	e8 f0 57 ff ff       	call   c00007e0 <strcat>
c000aff0:	5d                   	pop    ebp
c000aff1:	58                   	pop    eax
c000aff2:	57                   	push   edi
c000aff3:	56                   	push   esi
c000aff4:	e8 e7 57 ff ff       	call   c00007e0 <strcat>
c000aff9:	83 c4 10             	add    esp,0x10
c000affc:	8a 04 24             	mov    al,BYTE PTR [esp]
c000afff:	3c 60                	cmp    al,0x60
c000b001:	7e 03                	jle    c000b006 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000b003:	83 e8 20             	sub    eax,0x20
c000b006:	88 04 24             	mov    BYTE PTR [esp],al
c000b009:	88 03                	mov    BYTE PTR [ebx],al
c000b00b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b012:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b018:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b01c:	bf 03 00 00 00       	mov    edi,0x3
c000b021:	b8 03 00 00 00       	mov    eax,0x3
c000b026:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000b029:	84 d2                	test   dl,dl
c000b02b:	0f 84 91 00 00 00    	je     c000b0c2 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000b031:	8d 4f 01             	lea    ecx,[edi+0x1]
c000b034:	80 fa 5c             	cmp    dl,0x5c
c000b037:	74 05                	je     c000b03e <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000b039:	80 fa 2f             	cmp    dl,0x2f
c000b03c:	75 12                	jne    c000b050 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000b03e:	89 c5                	mov    ebp,eax
c000b040:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b045:	74 09                	je     c000b050 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000b047:	40                   	inc    eax
c000b048:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b04c:	89 cf                	mov    edi,ecx
c000b04e:	eb d6                	jmp    c000b026 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000b050:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b055:	75 5b                	jne    c000b0b2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000b057:	80 fa 2e             	cmp    dl,0x2e
c000b05a:	75 56                	jne    c000b0b2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000b05c:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000b060:	74 19                	je     c000b07b <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000b062:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000b067:	74 53                	je     c000b0bc <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000b069:	89 f9                	mov    ecx,edi
c000b06b:	41                   	inc    ecx
c000b06c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000b06f:	80 fa 2f             	cmp    dl,0x2f
c000b072:	74 f7                	je     c000b06b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000b074:	80 fa 5c             	cmp    dl,0x5c
c000b077:	74 f2                	je     c000b06b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000b079:	eb d1                	jmp    c000b04c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b07b:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000b080:	74 3a                	je     c000b0bc <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000b082:	83 f8 03             	cmp    eax,0x3
c000b085:	74 c5                	je     c000b04c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b087:	41                   	inc    ecx
c000b088:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000b08b:	80 fa 2f             	cmp    dl,0x2f
c000b08e:	74 f7                	je     c000b087 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000b090:	80 fa 5c             	cmp    dl,0x5c
c000b093:	74 f2                	je     c000b087 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000b095:	48                   	dec    eax
c000b096:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b09a:	75 06                	jne    c000b0a2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000b09c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b0a0:	eb f3                	jmp    c000b095 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000b0a2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b0a6:	74 07                	je     c000b0af <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000b0a8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b0ac:	48                   	dec    eax
c000b0ad:	eb f3                	jmp    c000b0a2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000b0af:	40                   	inc    eax
c000b0b0:	eb 9a                	jmp    c000b04c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b0b2:	80 fa 2f             	cmp    dl,0x2f
c000b0b5:	74 95                	je     c000b04c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b0b7:	80 fa 5c             	cmp    dl,0x5c
c000b0ba:	74 90                	je     c000b04c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b0bc:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000b0bf:	40                   	inc    eax
c000b0c0:	eb 8a                	jmp    c000b04c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b0c2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b0c6:	83 ec 0c             	sub    esp,0xc
c000b0c9:	53                   	push   ebx
c000b0ca:	e8 91 54 ff ff       	call   c0000560 <strlen>
c000b0cf:	83 c4 10             	add    esp,0x10
c000b0d2:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b0d7:	75 26                	jne    c000b0ff <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000b0d9:	83 ec 0c             	sub    esp,0xc
c000b0dc:	53                   	push   ebx
c000b0dd:	e8 7e 54 ff ff       	call   c0000560 <strlen>
c000b0e2:	83 c4 10             	add    esp,0x10
c000b0e5:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b0ea:	74 26                	je     c000b112 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000b0ec:	83 ec 0c             	sub    esp,0xc
c000b0ef:	53                   	push   ebx
c000b0f0:	e8 6b 54 ff ff       	call   c0000560 <strlen>
c000b0f5:	83 c4 10             	add    esp,0x10
c000b0f8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b0fd:	eb c7                	jmp    c000b0c6 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000b0ff:	83 ec 0c             	sub    esp,0xc
c000b102:	53                   	push   ebx
c000b103:	e8 58 54 ff ff       	call   c0000560 <strlen>
c000b108:	83 c4 10             	add    esp,0x10
c000b10b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b110:	74 c7                	je     c000b0d9 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000b112:	81 c4 0c 04 00 00    	add    esp,0x40c
c000b118:	5b                   	pop    ebx
c000b119:	5e                   	pop    esi
c000b11a:	5f                   	pop    edi
c000b11b:	5d                   	pop    ebp
c000b11c:	c3                   	ret    
c000b11d:	90                   	nop

c000b11e <File::File(char const*, Process*)>:
c000b11e:	83 ec 0c             	sub    esp,0xc
c000b121:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b125:	83 ec 08             	sub    esp,0x8
c000b128:	6a 00                	push   0x0
c000b12a:	50                   	push   eax
c000b12b:	e8 e2 e3 ff ff       	call   c0009512 <UnixFile::UnixFile(int)>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	ba 3c de 01 c0       	mov    edx,0xc001de3c
c000b138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b13c:	89 10                	mov    DWORD PTR [eax],edx
c000b13e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b142:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b148:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b14c:	83 c0 0d             	add    eax,0xd
c000b14f:	83 ec 04             	sub    esp,0x4
c000b152:	52                   	push   edx
c000b153:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b157:	50                   	push   eax
c000b158:	e8 17 fe ff ff       	call   c000af74 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b15d:	83 c4 10             	add    esp,0x10
c000b160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b164:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b167:	8d 50 bf             	lea    edx,[eax-0x41]
c000b16a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b16e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b174:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b178:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b17c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b180:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b186:	25 ff 00 00 00       	and    eax,0xff
c000b18b:	8b 04 85 60 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd1a0]
c000b192:	85 c0                	test   eax,eax
c000b194:	74 42                	je     c000b1d8 <File::File(char const*, Process*)+0xba>
c000b196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b19a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b1a0:	25 ff 00 00 00       	and    eax,0xff
c000b1a5:	8b 04 85 60 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd1a0]
c000b1ac:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b1b2:	85 c0                	test   eax,eax
c000b1b4:	75 22                	jne    c000b1d8 <File::File(char const*, Process*)+0xba>
c000b1b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1ba:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b1c0:	25 ff 00 00 00       	and    eax,0xff
c000b1c5:	8b 04 85 60 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd1a0]
c000b1cc:	83 ec 0c             	sub    esp,0xc
c000b1cf:	50                   	push   eax
c000b1d0:	e8 f9 1f 00 00       	call   c000d1ce <LogicalDisk::mount()>
c000b1d5:	83 c4 10             	add    esp,0x10
c000b1d8:	90                   	nop
c000b1d9:	83 c4 0c             	add    esp,0xc
c000b1dc:	c3                   	ret    
c000b1dd:	90                   	nop

c000b1de <File::open(FileOpenMode)>:
c000b1de:	53                   	push   ebx
c000b1df:	b8 0b 00 00 00       	mov    eax,0xb
c000b1e4:	83 ec 08             	sub    esp,0x8
c000b1e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b1eb:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b1f2:	80 fa 19             	cmp    dl,0x19
c000b1f5:	77 40                	ja     c000b237 <File::open(FileOpenMode)+0x59>
c000b1f7:	8b 14 95 60 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd1a0]
c000b1fe:	85 d2                	test   edx,edx
c000b200:	74 35                	je     c000b237 <File::open(FileOpenMode)+0x59>
c000b202:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b208:	85 d2                	test   edx,edx
c000b20a:	74 2b                	je     c000b237 <File::open(FileOpenMode)+0x59>
c000b20c:	b8 06 00 00 00       	mov    eax,0x6
c000b211:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b215:	75 20                	jne    c000b237 <File::open(FileOpenMode)+0x59>
c000b217:	8b 02                	mov    eax,DWORD PTR [edx]
c000b219:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b21f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b223:	51                   	push   ecx
c000b224:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b227:	51                   	push   ecx
c000b228:	52                   	push   edx
c000b229:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b22c:	83 c4 10             	add    esp,0x10
c000b22f:	85 c0                	test   eax,eax
c000b231:	75 04                	jne    c000b237 <File::open(FileOpenMode)+0x59>
c000b233:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b237:	83 c4 08             	add    esp,0x8
c000b23a:	5b                   	pop    ebx
c000b23b:	c3                   	ret    

c000b23c <File::close()>:
c000b23c:	53                   	push   ebx
c000b23d:	b8 0b 00 00 00       	mov    eax,0xb
c000b242:	83 ec 08             	sub    esp,0x8
c000b245:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b249:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b250:	80 fa 19             	cmp    dl,0x19
c000b253:	77 41                	ja     c000b296 <File::close()+0x5a>
c000b255:	8b 1c 95 60 2e 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd1a0]
c000b25c:	85 db                	test   ebx,ebx
c000b25e:	74 36                	je     c000b296 <File::close()+0x5a>
c000b260:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b267:	74 2d                	je     c000b296 <File::close()+0x5a>
c000b269:	b8 05 00 00 00       	mov    eax,0x5
c000b26e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b272:	74 22                	je     c000b296 <File::close()+0x5a>
c000b274:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b278:	8b 04 95 60 2e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd1a0]
c000b27f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b285:	53                   	push   ebx
c000b286:	53                   	push   ebx
c000b287:	8b 10                	mov    edx,DWORD PTR [eax]
c000b289:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b28f:	50                   	push   eax
c000b290:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000b293:	83 c4 10             	add    esp,0x10
c000b296:	83 c4 08             	add    esp,0x8
c000b299:	5b                   	pop    ebx
c000b29a:	c3                   	ret    
c000b29b:	90                   	nop

c000b29c <File::seek(unsigned long long)>:
c000b29c:	56                   	push   esi
c000b29d:	53                   	push   ebx
c000b29e:	b8 0b 00 00 00       	mov    eax,0xb
c000b2a3:	51                   	push   ecx
c000b2a4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b2a8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b2ac:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b2b3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b2b7:	80 fa 19             	cmp    dl,0x19
c000b2ba:	77 31                	ja     c000b2ed <File::seek(unsigned long long)+0x51>
c000b2bc:	8b 14 95 60 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd1a0]
c000b2c3:	85 d2                	test   edx,edx
c000b2c5:	74 26                	je     c000b2ed <File::seek(unsigned long long)+0x51>
c000b2c7:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b2cd:	85 d2                	test   edx,edx
c000b2cf:	74 1c                	je     c000b2ed <File::seek(unsigned long long)+0x51>
c000b2d1:	b8 05 00 00 00       	mov    eax,0x5
c000b2d6:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b2da:	74 11                	je     c000b2ed <File::seek(unsigned long long)+0x51>
c000b2dc:	8b 02                	mov    eax,DWORD PTR [edx]
c000b2de:	53                   	push   ebx
c000b2df:	51                   	push   ecx
c000b2e0:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b2e6:	52                   	push   edx
c000b2e7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b2ea:	83 c4 10             	add    esp,0x10
c000b2ed:	5a                   	pop    edx
c000b2ee:	5b                   	pop    ebx
c000b2ef:	5e                   	pop    esi
c000b2f0:	c3                   	ret    
c000b2f1:	90                   	nop

c000b2f2 <File::tell(unsigned long long*)>:
c000b2f2:	83 ec 0c             	sub    esp,0xc
c000b2f5:	b8 0b 00 00 00       	mov    eax,0xb
c000b2fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b2fe:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b305:	80 fa 19             	cmp    dl,0x19
c000b308:	77 34                	ja     c000b33e <File::tell(unsigned long long*)+0x4c>
c000b30a:	8b 14 95 60 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd1a0]
c000b311:	85 d2                	test   edx,edx
c000b313:	74 29                	je     c000b33e <File::tell(unsigned long long*)+0x4c>
c000b315:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b31b:	85 d2                	test   edx,edx
c000b31d:	74 1f                	je     c000b33e <File::tell(unsigned long long*)+0x4c>
c000b31f:	b8 05 00 00 00       	mov    eax,0x5
c000b324:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b328:	74 14                	je     c000b33e <File::tell(unsigned long long*)+0x4c>
c000b32a:	50                   	push   eax
c000b32b:	8b 02                	mov    eax,DWORD PTR [edx]
c000b32d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b331:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b337:	52                   	push   edx
c000b338:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b33b:	83 c4 10             	add    esp,0x10
c000b33e:	83 c4 0c             	add    esp,0xc
c000b341:	c3                   	ret    

c000b342 <File::rewind()>:
c000b342:	83 ec 10             	sub    esp,0x10
c000b345:	6a 00                	push   0x0
c000b347:	6a 00                	push   0x0
c000b349:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b34d:	e8 4a ff ff ff       	call   c000b29c <File::seek(unsigned long long)>
c000b352:	83 c4 1c             	add    esp,0x1c
c000b355:	c3                   	ret    

c000b356 <File::unlink()>:
c000b356:	83 ec 0c             	sub    esp,0xc
c000b359:	b8 0b 00 00 00       	mov    eax,0xb
c000b35e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b362:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b369:	80 f9 19             	cmp    cl,0x19
c000b36c:	77 2f                	ja     c000b39d <File::unlink()+0x47>
c000b36e:	8b 0c 8d 60 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd1a0]
c000b375:	85 c9                	test   ecx,ecx
c000b377:	74 24                	je     c000b39d <File::unlink()+0x47>
c000b379:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b37f:	85 c9                	test   ecx,ecx
c000b381:	74 1a                	je     c000b39d <File::unlink()+0x47>
c000b383:	b8 06 00 00 00       	mov    eax,0x6
c000b388:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b38c:	75 0f                	jne    c000b39d <File::unlink()+0x47>
c000b38e:	83 c2 0d             	add    edx,0xd
c000b391:	50                   	push   eax
c000b392:	50                   	push   eax
c000b393:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b395:	52                   	push   edx
c000b396:	51                   	push   ecx
c000b397:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b39a:	83 c4 10             	add    esp,0x10
c000b39d:	83 c4 0c             	add    esp,0xc
c000b3a0:	c3                   	ret    
c000b3a1:	90                   	nop

c000b3a2 <File::rename(char const*)>:
c000b3a2:	83 ec 0c             	sub    esp,0xc
c000b3a5:	b8 0b 00 00 00       	mov    eax,0xb
c000b3aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b3ae:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b3b5:	80 f9 19             	cmp    cl,0x19
c000b3b8:	77 32                	ja     c000b3ec <File::rename(char const*)+0x4a>
c000b3ba:	8b 0c 8d 60 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd1a0]
c000b3c1:	85 c9                	test   ecx,ecx
c000b3c3:	74 27                	je     c000b3ec <File::rename(char const*)+0x4a>
c000b3c5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b3cb:	85 c9                	test   ecx,ecx
c000b3cd:	74 1d                	je     c000b3ec <File::rename(char const*)+0x4a>
c000b3cf:	b8 06 00 00 00       	mov    eax,0x6
c000b3d4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b3d8:	75 12                	jne    c000b3ec <File::rename(char const*)+0x4a>
c000b3da:	83 c2 0d             	add    edx,0xd
c000b3dd:	50                   	push   eax
c000b3de:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b3e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b3e4:	52                   	push   edx
c000b3e5:	51                   	push   ecx
c000b3e6:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b3e9:	83 c4 10             	add    esp,0x10
c000b3ec:	83 c4 0c             	add    esp,0xc
c000b3ef:	c3                   	ret    

c000b3f0 <File::chfatattr(unsigned char, unsigned char)>:
c000b3f0:	57                   	push   edi
c000b3f1:	b8 0b 00 00 00       	mov    eax,0xb
c000b3f6:	56                   	push   esi
c000b3f7:	53                   	push   ebx
c000b3f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b3fc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b400:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b407:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b40b:	80 f9 19             	cmp    cl,0x19
c000b40e:	77 37                	ja     c000b447 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b410:	8b 0c 8d 60 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd1a0]
c000b417:	85 c9                	test   ecx,ecx
c000b419:	74 2c                	je     c000b447 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b41b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b421:	85 c9                	test   ecx,ecx
c000b423:	74 22                	je     c000b447 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b425:	b8 06 00 00 00       	mov    eax,0x6
c000b42a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b42e:	75 17                	jne    c000b447 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b430:	8b 39                	mov    edi,DWORD PTR [ecx]
c000b432:	89 f0                	mov    eax,esi
c000b434:	83 c2 0d             	add    edx,0xd
c000b437:	0f b6 f0             	movzx  esi,al
c000b43a:	0f b6 db             	movzx  ebx,bl
c000b43d:	56                   	push   esi
c000b43e:	53                   	push   ebx
c000b43f:	52                   	push   edx
c000b440:	51                   	push   ecx
c000b441:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000b444:	83 c4 10             	add    esp,0x10
c000b447:	5b                   	pop    ebx
c000b448:	5e                   	pop    esi
c000b449:	5f                   	pop    edi
c000b44a:	c3                   	ret    
c000b44b:	90                   	nop

c000b44c <File::exists()>:
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	31 c0                	xor    eax,eax
c000b451:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b455:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b45c:	80 f9 19             	cmp    cl,0x19
c000b45f:	77 24                	ja     c000b485 <File::exists()+0x39>
c000b461:	8b 0c 8d 60 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd1a0]
c000b468:	85 c9                	test   ecx,ecx
c000b46a:	74 19                	je     c000b485 <File::exists()+0x39>
c000b46c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b472:	85 c9                	test   ecx,ecx
c000b474:	74 0f                	je     c000b485 <File::exists()+0x39>
c000b476:	83 c2 0d             	add    edx,0xd
c000b479:	50                   	push   eax
c000b47a:	50                   	push   eax
c000b47b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b47d:	52                   	push   edx
c000b47e:	51                   	push   ecx
c000b47f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b482:	83 c4 10             	add    esp,0x10
c000b485:	83 c4 0c             	add    esp,0xc
c000b488:	c3                   	ret    
c000b489:	90                   	nop

c000b48a <File::stat(unsigned long long*, bool*)>:
c000b48a:	56                   	push   esi
c000b48b:	53                   	push   ebx
c000b48c:	50                   	push   eax
c000b48d:	b8 0b 00 00 00       	mov    eax,0xb
c000b492:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b496:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b49a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b4a1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b4a5:	80 f9 19             	cmp    cl,0x19
c000b4a8:	77 3d                	ja     c000b4e7 <File::stat(unsigned long long*, bool*)+0x5d>
c000b4aa:	8b 0c 8d 60 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd1a0]
c000b4b1:	85 c9                	test   ecx,ecx
c000b4b3:	74 32                	je     c000b4e7 <File::stat(unsigned long long*, bool*)+0x5d>
c000b4b5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b4bb:	85 c9                	test   ecx,ecx
c000b4bd:	74 28                	je     c000b4e7 <File::stat(unsigned long long*, bool*)+0x5d>
c000b4bf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b4c1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b4c5:	74 13                	je     c000b4da <File::stat(unsigned long long*, bool*)+0x50>
c000b4c7:	83 ec 04             	sub    esp,0x4
c000b4ca:	56                   	push   esi
c000b4cb:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b4d1:	51                   	push   ecx
c000b4d2:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b4d5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b4d8:	eb 0a                	jmp    c000b4e4 <File::stat(unsigned long long*, bool*)+0x5a>
c000b4da:	53                   	push   ebx
c000b4db:	83 c2 0d             	add    edx,0xd
c000b4de:	56                   	push   esi
c000b4df:	52                   	push   edx
c000b4e0:	51                   	push   ecx
c000b4e1:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b4e4:	83 c4 10             	add    esp,0x10
c000b4e7:	5a                   	pop    edx
c000b4e8:	5b                   	pop    ebx
c000b4e9:	5e                   	pop    esi
c000b4ea:	c3                   	ret    

c000b4eb <Fs::setcwd(Process*, char*)>:
c000b4eb:	55                   	push   ebp
c000b4ec:	57                   	push   edi
c000b4ed:	56                   	push   esi
c000b4ee:	53                   	push   ebx
c000b4ef:	81 ec 20 02 00 00    	sub    esp,0x220
c000b4f5:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b4fc:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b502:	57                   	push   edi
c000b503:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b50a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b50e:	56                   	push   esi
c000b50f:	e8 60 fa ff ff       	call   c000af74 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b514:	89 34 24             	mov    DWORD PTR [esp],esi
c000b517:	e8 44 50 ff ff       	call   c0000560 <strlen>
c000b51c:	83 c4 10             	add    esp,0x10
c000b51f:	83 f8 02             	cmp    eax,0x2
c000b522:	77 15                	ja     c000b539 <Fs::setcwd(Process*, char*)+0x4e>
c000b524:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b529:	83 eb 41             	sub    ebx,0x41
c000b52c:	8b 04 9d 60 2e 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdd1a0]
c000b533:	85 c0                	test   eax,eax
c000b535:	75 1c                	jne    c000b553 <Fs::setcwd(Process*, char*)+0x68>
c000b537:	eb 2f                	jmp    c000b568 <Fs::setcwd(Process*, char*)+0x7d>
c000b539:	83 ec 0c             	sub    esp,0xc
c000b53c:	56                   	push   esi
c000b53d:	e8 1e 50 ff ff       	call   c0000560 <strlen>
c000b542:	83 c4 10             	add    esp,0x10
c000b545:	83 f8 03             	cmp    eax,0x3
c000b548:	75 57                	jne    c000b5a1 <Fs::setcwd(Process*, char*)+0xb6>
c000b54a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b54f:	75 50                	jne    c000b5a1 <Fs::setcwd(Process*, char*)+0xb6>
c000b551:	eb d1                	jmp    c000b524 <Fs::setcwd(Process*, char*)+0x39>
c000b553:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000b55a:	75 0c                	jne    c000b568 <Fs::setcwd(Process*, char*)+0x7d>
c000b55c:	83 ec 0c             	sub    esp,0xc
c000b55f:	50                   	push   eax
c000b560:	e8 69 1c 00 00       	call   c000d1ce <LogicalDisk::mount()>
c000b565:	83 c4 10             	add    esp,0x10
c000b568:	b8 03 00 00 00       	mov    eax,0x3
c000b56d:	83 fb 19             	cmp    ebx,0x19
c000b570:	0f 87 c6 00 00 00    	ja     c000b63c <Fs::setcwd(Process*, char*)+0x151>
c000b576:	8b 14 9d 60 2e 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdd1a0]
c000b57d:	b8 05 00 00 00       	mov    eax,0x5
c000b582:	85 d2                	test   edx,edx
c000b584:	0f 84 b2 00 00 00    	je     c000b63c <Fs::setcwd(Process*, char*)+0x151>
c000b58a:	b8 06 00 00 00       	mov    eax,0x6
c000b58f:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b596:	0f 85 92 00 00 00    	jne    c000b62e <Fs::setcwd(Process*, char*)+0x143>
c000b59c:	e9 9b 00 00 00       	jmp    c000b63c <Fs::setcwd(Process*, char*)+0x151>
c000b5a1:	83 ec 0c             	sub    esp,0xc
c000b5a4:	68 14 01 00 00       	push   0x114
c000b5a9:	e8 6b c8 ff ff       	call   c0007e19 <malloc>
c000b5ae:	83 c4 0c             	add    esp,0xc
c000b5b1:	89 c3                	mov    ebx,eax
c000b5b3:	55                   	push   ebp
c000b5b4:	56                   	push   esi
c000b5b5:	50                   	push   eax
c000b5b6:	e8 63 fb ff ff       	call   c000b11e <File::File(char const*, Process*)>
c000b5bb:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b5c0:	83 c4 0c             	add    esp,0xc
c000b5c3:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b5c7:	50                   	push   eax
c000b5c8:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b5cc:	50                   	push   eax
c000b5cd:	53                   	push   ebx
c000b5ce:	e8 b7 fe ff ff       	call   c000b48a <File::stat(unsigned long long*, bool*)>
c000b5d3:	83 c4 10             	add    esp,0x10
c000b5d6:	83 f8 02             	cmp    eax,0x2
c000b5d9:	74 04                	je     c000b5df <Fs::setcwd(Process*, char*)+0xf4>
c000b5db:	85 c0                	test   eax,eax
c000b5dd:	74 1c                	je     c000b5fb <Fs::setcwd(Process*, char*)+0x110>
c000b5df:	b8 01 00 00 00       	mov    eax,0x1
c000b5e4:	85 db                	test   ebx,ebx
c000b5e6:	74 54                	je     c000b63c <Fs::setcwd(Process*, char*)+0x151>
c000b5e8:	83 ec 0c             	sub    esp,0xc
c000b5eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b5ed:	53                   	push   ebx
c000b5ee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b5f1:	83 c4 10             	add    esp,0x10
c000b5f4:	b8 01 00 00 00       	mov    eax,0x1
c000b5f9:	eb 41                	jmp    c000b63c <Fs::setcwd(Process*, char*)+0x151>
c000b5fb:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b600:	75 1c                	jne    c000b61e <Fs::setcwd(Process*, char*)+0x133>
c000b602:	b8 02 00 00 00       	mov    eax,0x2
c000b607:	85 db                	test   ebx,ebx
c000b609:	74 31                	je     c000b63c <Fs::setcwd(Process*, char*)+0x151>
c000b60b:	83 ec 0c             	sub    esp,0xc
c000b60e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b610:	53                   	push   ebx
c000b611:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b614:	83 c4 10             	add    esp,0x10
c000b617:	b8 02 00 00 00       	mov    eax,0x2
c000b61c:	eb 1e                	jmp    c000b63c <Fs::setcwd(Process*, char*)+0x151>
c000b61e:	85 db                	test   ebx,ebx
c000b620:	74 0c                	je     c000b62e <Fs::setcwd(Process*, char*)+0x143>
c000b622:	83 ec 0c             	sub    esp,0xc
c000b625:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b627:	53                   	push   ebx
c000b628:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b62b:	83 c4 10             	add    esp,0x10
c000b62e:	50                   	push   eax
c000b62f:	50                   	push   eax
c000b630:	56                   	push   esi
c000b631:	57                   	push   edi
c000b632:	e8 e9 4f ff ff       	call   c0000620 <strcpy>
c000b637:	83 c4 10             	add    esp,0x10
c000b63a:	31 c0                	xor    eax,eax
c000b63c:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b642:	5b                   	pop    ebx
c000b643:	5e                   	pop    esi
c000b644:	5f                   	pop    edi
c000b645:	5d                   	pop    ebp
c000b646:	c3                   	ret    
c000b647:	90                   	nop

c000b648 <Directory::Directory(char const*, Process*)>:
c000b648:	83 ec 0c             	sub    esp,0xc
c000b64b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b64f:	83 ec 08             	sub    esp,0x8
c000b652:	6a 00                	push   0x0
c000b654:	50                   	push   eax
c000b655:	e8 b8 de ff ff       	call   c0009512 <UnixFile::UnixFile(int)>
c000b65a:	83 c4 10             	add    esp,0x10
c000b65d:	ba 58 de 01 c0       	mov    edx,0xc001de58
c000b662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b666:	89 10                	mov    DWORD PTR [eax],edx
c000b668:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b66c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b676:	83 c0 0d             	add    eax,0xd
c000b679:	83 ec 04             	sub    esp,0x4
c000b67c:	52                   	push   edx
c000b67d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b681:	50                   	push   eax
c000b682:	e8 ed f8 ff ff       	call   c000af74 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b68e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b691:	8d 50 bf             	lea    edx,[eax-0x41]
c000b694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b698:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b69e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6a2:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b6a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6aa:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b6b0:	25 ff 00 00 00       	and    eax,0xff
c000b6b5:	8b 04 85 60 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd1a0]
c000b6bc:	85 c0                	test   eax,eax
c000b6be:	74 42                	je     c000b702 <Directory::Directory(char const*, Process*)+0xba>
c000b6c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6c4:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b6ca:	25 ff 00 00 00       	and    eax,0xff
c000b6cf:	8b 04 85 60 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd1a0]
c000b6d6:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b6dc:	85 c0                	test   eax,eax
c000b6de:	75 22                	jne    c000b702 <Directory::Directory(char const*, Process*)+0xba>
c000b6e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6e4:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b6ea:	25 ff 00 00 00       	and    eax,0xff
c000b6ef:	8b 04 85 60 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd1a0]
c000b6f6:	83 ec 0c             	sub    esp,0xc
c000b6f9:	50                   	push   eax
c000b6fa:	e8 cf 1a 00 00       	call   c000d1ce <LogicalDisk::mount()>
c000b6ff:	83 c4 10             	add    esp,0x10
c000b702:	90                   	nop
c000b703:	83 c4 0c             	add    esp,0xc
c000b706:	c3                   	ret    
c000b707:	90                   	nop

c000b708 <Directory::open()>:
c000b708:	53                   	push   ebx
c000b709:	b8 0b 00 00 00       	mov    eax,0xb
c000b70e:	83 ec 08             	sub    esp,0x8
c000b711:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b715:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b71c:	80 fa 19             	cmp    dl,0x19
c000b71f:	77 3d                	ja     c000b75e <Directory::open()+0x56>
c000b721:	8b 14 95 60 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd1a0]
c000b728:	85 d2                	test   edx,edx
c000b72a:	74 32                	je     c000b75e <Directory::open()+0x56>
c000b72c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b732:	85 d2                	test   edx,edx
c000b734:	74 28                	je     c000b75e <Directory::open()+0x56>
c000b736:	b8 06 00 00 00       	mov    eax,0x6
c000b73b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b73f:	75 1d                	jne    c000b75e <Directory::open()+0x56>
c000b741:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b747:	50                   	push   eax
c000b748:	8b 02                	mov    eax,DWORD PTR [edx]
c000b74a:	51                   	push   ecx
c000b74b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b74e:	51                   	push   ecx
c000b74f:	52                   	push   edx
c000b750:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b753:	83 c4 10             	add    esp,0x10
c000b756:	85 c0                	test   eax,eax
c000b758:	75 04                	jne    c000b75e <Directory::open()+0x56>
c000b75a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b75e:	83 c4 08             	add    esp,0x8
c000b761:	5b                   	pop    ebx
c000b762:	c3                   	ret    
c000b763:	90                   	nop

c000b764 <Directory::close()>:
c000b764:	53                   	push   ebx
c000b765:	b8 0b 00 00 00       	mov    eax,0xb
c000b76a:	83 ec 08             	sub    esp,0x8
c000b76d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b771:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b778:	80 fa 19             	cmp    dl,0x19
c000b77b:	77 41                	ja     c000b7be <Directory::close()+0x5a>
c000b77d:	8b 1c 95 60 2e 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd1a0]
c000b784:	85 db                	test   ebx,ebx
c000b786:	74 36                	je     c000b7be <Directory::close()+0x5a>
c000b788:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b78f:	74 2d                	je     c000b7be <Directory::close()+0x5a>
c000b791:	b8 05 00 00 00       	mov    eax,0x5
c000b796:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b79a:	74 22                	je     c000b7be <Directory::close()+0x5a>
c000b79c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b7a0:	8b 04 95 60 2e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd1a0]
c000b7a7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b7ad:	53                   	push   ebx
c000b7ae:	53                   	push   ebx
c000b7af:	8b 10                	mov    edx,DWORD PTR [eax]
c000b7b1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b7b7:	50                   	push   eax
c000b7b8:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b7bb:	83 c4 10             	add    esp,0x10
c000b7be:	83 c4 08             	add    esp,0x8
c000b7c1:	5b                   	pop    ebx
c000b7c2:	c3                   	ret    
c000b7c3:	90                   	nop

c000b7c4 <Directory::unlink()>:
c000b7c4:	83 ec 0c             	sub    esp,0xc
c000b7c7:	b8 0b 00 00 00       	mov    eax,0xb
c000b7cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b7d0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b7d7:	80 f9 19             	cmp    cl,0x19
c000b7da:	77 2f                	ja     c000b80b <Directory::unlink()+0x47>
c000b7dc:	8b 0c 8d 60 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd1a0]
c000b7e3:	85 c9                	test   ecx,ecx
c000b7e5:	74 24                	je     c000b80b <Directory::unlink()+0x47>
c000b7e7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b7ed:	85 c9                	test   ecx,ecx
c000b7ef:	74 1a                	je     c000b80b <Directory::unlink()+0x47>
c000b7f1:	b8 06 00 00 00       	mov    eax,0x6
c000b7f6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b7fa:	75 0f                	jne    c000b80b <Directory::unlink()+0x47>
c000b7fc:	83 c2 0d             	add    edx,0xd
c000b7ff:	50                   	push   eax
c000b800:	50                   	push   eax
c000b801:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b803:	52                   	push   edx
c000b804:	51                   	push   ecx
c000b805:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b808:	83 c4 10             	add    esp,0x10
c000b80b:	83 c4 0c             	add    esp,0xc
c000b80e:	c3                   	ret    
c000b80f:	90                   	nop

c000b810 <Directory::rename(char const*)>:
c000b810:	83 ec 0c             	sub    esp,0xc
c000b813:	b8 0b 00 00 00       	mov    eax,0xb
c000b818:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b81c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b823:	80 f9 19             	cmp    cl,0x19
c000b826:	77 32                	ja     c000b85a <Directory::rename(char const*)+0x4a>
c000b828:	8b 0c 8d 60 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd1a0]
c000b82f:	85 c9                	test   ecx,ecx
c000b831:	74 27                	je     c000b85a <Directory::rename(char const*)+0x4a>
c000b833:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b839:	85 c9                	test   ecx,ecx
c000b83b:	74 1d                	je     c000b85a <Directory::rename(char const*)+0x4a>
c000b83d:	b8 06 00 00 00       	mov    eax,0x6
c000b842:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b846:	75 12                	jne    c000b85a <Directory::rename(char const*)+0x4a>
c000b848:	83 c2 0d             	add    edx,0xd
c000b84b:	50                   	push   eax
c000b84c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b84e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b852:	52                   	push   edx
c000b853:	51                   	push   ecx
c000b854:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b857:	83 c4 10             	add    esp,0x10
c000b85a:	83 c4 0c             	add    esp,0xc
c000b85d:	c3                   	ret    

c000b85e <Directory::exists()>:
c000b85e:	83 ec 0c             	sub    esp,0xc
c000b861:	31 c0                	xor    eax,eax
c000b863:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b867:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b86e:	80 f9 19             	cmp    cl,0x19
c000b871:	77 24                	ja     c000b897 <Directory::exists()+0x39>
c000b873:	8b 0c 8d 60 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd1a0]
c000b87a:	85 c9                	test   ecx,ecx
c000b87c:	74 19                	je     c000b897 <Directory::exists()+0x39>
c000b87e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b884:	85 c9                	test   ecx,ecx
c000b886:	74 0f                	je     c000b897 <Directory::exists()+0x39>
c000b888:	83 c2 0d             	add    edx,0xd
c000b88b:	50                   	push   eax
c000b88c:	50                   	push   eax
c000b88d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b88f:	52                   	push   edx
c000b890:	51                   	push   ecx
c000b891:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b894:	83 c4 10             	add    esp,0x10
c000b897:	83 c4 0c             	add    esp,0xc
c000b89a:	c3                   	ret    
c000b89b:	90                   	nop

c000b89c <Directory::read(dirent*)>:
c000b89c:	83 ec 1c             	sub    esp,0x1c
c000b89f:	b8 0b 00 00 00       	mov    eax,0xb
c000b8a4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b8a8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b8af:	80 fa 19             	cmp    dl,0x19
c000b8b2:	77 30                	ja     c000b8e4 <Directory::read(dirent*)+0x48>
c000b8b4:	8b 14 95 60 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd1a0]
c000b8bb:	85 d2                	test   edx,edx
c000b8bd:	74 25                	je     c000b8e4 <Directory::read(dirent*)+0x48>
c000b8bf:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b8c6:	74 1c                	je     c000b8e4 <Directory::read(dirent*)+0x48>
c000b8c8:	83 ec 0c             	sub    esp,0xc
c000b8cb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b8cd:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b8d1:	52                   	push   edx
c000b8d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b8d6:	6a 00                	push   0x0
c000b8d8:	68 10 01 00 00       	push   0x110
c000b8dd:	51                   	push   ecx
c000b8de:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b8e1:	83 c4 20             	add    esp,0x20
c000b8e4:	83 c4 1c             	add    esp,0x1c
c000b8e7:	c3                   	ret    

c000b8e8 <Directory::create()>:
c000b8e8:	83 ec 0c             	sub    esp,0xc
c000b8eb:	b8 0b 00 00 00       	mov    eax,0xb
c000b8f0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b8f4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b8fb:	80 f9 19             	cmp    cl,0x19
c000b8fe:	77 2f                	ja     c000b92f <Directory::create()+0x47>
c000b900:	8b 0c 8d 60 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd1a0]
c000b907:	85 c9                	test   ecx,ecx
c000b909:	74 24                	je     c000b92f <Directory::create()+0x47>
c000b90b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b911:	85 c9                	test   ecx,ecx
c000b913:	74 1a                	je     c000b92f <Directory::create()+0x47>
c000b915:	b8 06 00 00 00       	mov    eax,0x6
c000b91a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b91e:	75 0f                	jne    c000b92f <Directory::create()+0x47>
c000b920:	83 c2 0d             	add    edx,0xd
c000b923:	50                   	push   eax
c000b924:	50                   	push   eax
c000b925:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b927:	52                   	push   edx
c000b928:	51                   	push   ecx
c000b929:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b92c:	83 c4 10             	add    esp,0x10
c000b92f:	83 c4 0c             	add    esp,0xc
c000b932:	c3                   	ret    
c000b933:	90                   	nop

c000b934 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b934:	b8 0a 00 00 00       	mov    eax,0xa
c000b939:	c3                   	ret    
c000b93a:	66 90                	xchg   ax,ax

c000b93c <Bus::Bus(char const*)>:
c000b93c:	83 ec 0c             	sub    esp,0xc
c000b93f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b943:	83 ec 08             	sub    esp,0x8
c000b946:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b94a:	50                   	push   eax
c000b94b:	e8 30 08 00 00       	call   c000c180 <Device::Device(char const*)>
c000b950:	83 c4 10             	add    esp,0x10
c000b953:	ba 74 de 01 c0       	mov    edx,0xc001de74
c000b958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b95c:	89 10                	mov    DWORD PTR [eax],edx
c000b95e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b962:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b96c:	90                   	nop
c000b96d:	83 c4 0c             	add    esp,0xc
c000b970:	c3                   	ret    
c000b971:	90                   	nop
c000b972:	66 90                	xchg   ax,ax

c000b974 <Bus::~Bus()>:
c000b974:	83 ec 0c             	sub    esp,0xc
c000b977:	ba 74 de 01 c0       	mov    edx,0xc001de74
c000b97c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b980:	89 10                	mov    DWORD PTR [eax],edx
c000b982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b986:	83 ec 0c             	sub    esp,0xc
c000b989:	50                   	push   eax
c000b98a:	e8 5b 05 00 00       	call   c000beea <Device::~Device()>
c000b98f:	83 c4 10             	add    esp,0x10
c000b992:	90                   	nop
c000b993:	83 c4 0c             	add    esp,0xc
c000b996:	c3                   	ret    
c000b997:	90                   	nop

c000b998 <Bus::~Bus()>:
c000b998:	83 ec 0c             	sub    esp,0xc
c000b99b:	83 ec 0c             	sub    esp,0xc
c000b99e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9a2:	e8 cd ff ff ff       	call   c000b974 <Bus::~Bus()>
c000b9a7:	83 c4 10             	add    esp,0x10
c000b9aa:	83 ec 08             	sub    esp,0x8
c000b9ad:	68 58 01 00 00       	push   0x158
c000b9b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9b6:	e8 f7 f0 ff ff       	call   c000aab2 <operator delete(void*, unsigned long)>
c000b9bb:	83 c4 10             	add    esp,0x10
c000b9be:	83 c4 0c             	add    esp,0xc
c000b9c1:	c3                   	ret    

c000b9c2 <beepThread(void*)>:
c000b9c2:	83 ec 0c             	sub    esp,0xc
c000b9c5:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c000b9ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b9ce:	48                   	dec    eax
c000b9cf:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c000b9d4:	75 01                	jne    c000b9d7 <beepThread(void*)+0x15>
c000b9d6:	fb                   	sti    
c000b9d7:	83 ec 0c             	sub    esp,0xc
c000b9da:	6b c2 0a             	imul   eax,edx,0xa
c000b9dd:	50                   	push   eax
c000b9de:	e8 69 83 00 00       	call   c0013d4c <milliTenthSleep(unsigned int)>
c000b9e3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b9ea:	e8 a5 9f 00 00       	call   c0015994 <HalMakeBeep(int)>
c000b9ef:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b9f7:	83 c4 1c             	add    esp,0x1c
c000b9fa:	e9 49 82 00 00       	jmp    c0013c48 <blockTask(TaskState)>

c000b9ff <Krnl::beep(int, int, bool)>:
c000b9ff:	56                   	push   esi
c000ba00:	53                   	push   ebx
c000ba01:	83 ec 10             	sub    esp,0x10
c000ba04:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000ba08:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ba0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba10:	e8 7f 9f 00 00       	call   c0015994 <HalMakeBeep(int)>
c000ba15:	83 c4 10             	add    esp,0x10
c000ba18:	89 f0                	mov    eax,esi
c000ba1a:	84 c0                	test   al,al
c000ba1c:	74 1e                	je     c000ba3c <Krnl::beep(int, int, bool)+0x3d>
c000ba1e:	83 ec 0c             	sub    esp,0xc
c000ba21:	6b db 0a             	imul   ebx,ebx,0xa
c000ba24:	53                   	push   ebx
c000ba25:	e8 22 83 00 00       	call   c0013d4c <milliTenthSleep(unsigned int)>
c000ba2a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000ba32:	83 c4 14             	add    esp,0x14
c000ba35:	5b                   	pop    ebx
c000ba36:	5e                   	pop    esi
c000ba37:	e9 58 9f 00 00       	jmp    c0015994 <HalMakeBeep(int)>
c000ba3c:	68 e6 00 00 00       	push   0xe6
c000ba41:	53                   	push   ebx
c000ba42:	68 c2 b9 00 c0       	push   0xc000b9c2
c000ba47:	ff 35 f0 3d 02 c0    	push   DWORD PTR ds:0xc0023df0
c000ba4d:	e8 da 7d 00 00       	call   c001382c <Process::createThread(void (*)(void*), void*, int)>
c000ba52:	83 c4 14             	add    esp,0x14
c000ba55:	5b                   	pop    ebx
c000ba56:	5e                   	pop    esi
c000ba57:	c3                   	ret    

c000ba58 <User::loadClockSettings(int)>:
c000ba58:	53                   	push   ebx
c000ba59:	83 ec 14             	sub    esp,0x14
c000ba5c:	68 14 01 00 00       	push   0x114
c000ba61:	e8 b3 c3 ff ff       	call   c0007e19 <malloc>
c000ba66:	83 c4 0c             	add    esp,0xc
c000ba69:	89 c3                	mov    ebx,eax
c000ba6b:	ff 35 f0 3d 02 c0    	push   DWORD PTR ds:0xc0023df0
c000ba71:	68 98 de 01 c0       	push   0xc001de98
c000ba76:	50                   	push   eax
c000ba77:	e8 a2 f6 ff ff       	call   c000b11e <File::File(char const*, Process*)>
c000ba7c:	58                   	pop    eax
c000ba7d:	5a                   	pop    edx
c000ba7e:	6a 01                	push   0x1
c000ba80:	53                   	push   ebx
c000ba81:	e8 58 f7 ff ff       	call   c000b1de <File::open(FileOpenMode)>
c000ba86:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ba89:	e8 ae f7 ff ff       	call   c000b23c <File::close()>
c000ba8e:	83 c4 10             	add    esp,0x10
c000ba91:	85 db                	test   ebx,ebx
c000ba93:	74 0f                	je     c000baa4 <User::loadClockSettings(int)+0x4c>
c000ba95:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba97:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ba9b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ba9e:	83 c4 08             	add    esp,0x8
c000baa1:	5b                   	pop    ebx
c000baa2:	ff e0                	jmp    eax
c000baa4:	83 c4 08             	add    esp,0x8
c000baa7:	5b                   	pop    ebx
c000baa8:	c3                   	ret    
c000baa9:	90                   	nop

c000baaa <Clock::Clock(char const*)>:
c000baaa:	83 ec 0c             	sub    esp,0xc
c000baad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bab1:	83 ec 08             	sub    esp,0x8
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	50                   	push   eax
c000bab9:	e8 c2 06 00 00       	call   c000c180 <Device::Device(char const*)>
c000babe:	83 c4 10             	add    esp,0x10
c000bac1:	ba c0 de 01 c0       	mov    edx,0xc001dec0
c000bac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000baca:	89 10                	mov    DWORD PTR [eax],edx
c000bacc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bad0:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000bada:	90                   	nop
c000badb:	83 c4 0c             	add    esp,0xc
c000bade:	c3                   	ret    
c000badf:	90                   	nop

c000bae0 <Clock::~Clock()>:
c000bae0:	83 ec 0c             	sub    esp,0xc
c000bae3:	ba c0 de 01 c0       	mov    edx,0xc001dec0
c000bae8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000baec:	89 10                	mov    DWORD PTR [eax],edx
c000baee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000baf2:	83 ec 0c             	sub    esp,0xc
c000baf5:	50                   	push   eax
c000baf6:	e8 ef 03 00 00       	call   c000beea <Device::~Device()>
c000bafb:	83 c4 10             	add    esp,0x10
c000bafe:	90                   	nop
c000baff:	83 c4 0c             	add    esp,0xc
c000bb02:	c3                   	ret    
c000bb03:	90                   	nop

c000bb04 <Clock::~Clock()>:
c000bb04:	83 ec 0c             	sub    esp,0xc
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb0e:	e8 cd ff ff ff       	call   c000bae0 <Clock::~Clock()>
c000bb13:	83 c4 10             	add    esp,0x10
c000bb16:	83 ec 08             	sub    esp,0x8
c000bb19:	68 58 01 00 00       	push   0x158
c000bb1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb22:	e8 8b ef ff ff       	call   c000aab2 <operator delete(void*, unsigned long)>
c000bb27:	83 c4 10             	add    esp,0x10
c000bb2a:	83 c4 0c             	add    esp,0xc
c000bb2d:	c3                   	ret    

c000bb2e <Clock::timeInSecondsLocal()>:
c000bb2e:	53                   	push   ebx
c000bb2f:	83 ec 14             	sub    esp,0x14
c000bb32:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bb36:	8b 10                	mov    edx,DWORD PTR [eax]
c000bb38:	50                   	push   eax
c000bb39:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000bb3c:	0f b6 0d f8 09 02 c0 	movzx  ecx,BYTE PTR ds:0xc00209f8
c000bb43:	03 0d fc 09 02 c0    	add    ecx,DWORD PTR ds:0xc00209fc
c000bb49:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bb4f:	89 cb                	mov    ebx,ecx
c000bb51:	c1 fb 1f             	sar    ebx,0x1f
c000bb54:	01 c8                	add    eax,ecx
c000bb56:	11 da                	adc    edx,ebx
c000bb58:	83 c4 10             	add    esp,0x10
c000bb5b:	31 c9                	xor    ecx,ecx
c000bb5d:	80 3d f9 09 02 c0 00 	cmp    BYTE PTR ds:0xc00209f9,0x0
c000bb64:	74 05                	je     c000bb6b <Clock::timeInSecondsLocal()+0x3d>
c000bb66:	b9 08 07 00 00       	mov    ecx,0x708
c000bb6b:	31 db                	xor    ebx,ebx
c000bb6d:	01 c8                	add    eax,ecx
c000bb6f:	11 da                	adc    edx,ebx
c000bb71:	83 c4 08             	add    esp,0x8
c000bb74:	5b                   	pop    ebx
c000bb75:	c3                   	ret    

c000bb76 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000bb76:	57                   	push   edi
c000bb77:	56                   	push   esi
c000bb78:	53                   	push   ebx
c000bb79:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bb7d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bb81:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bb83:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bb87:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000bb8a:	0f b6 05 f8 09 02 c0 	movzx  eax,BYTE PTR ds:0xc00209f8
c000bb91:	03 05 fc 09 02 c0    	add    eax,DWORD PTR ds:0xc00209fc
c000bb97:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000bb9d:	99                   	cdq    
c000bb9e:	29 c6                	sub    esi,eax
c000bba0:	19 d7                	sbb    edi,edx
c000bba2:	89 f0                	mov    eax,esi
c000bba4:	89 fa                	mov    edx,edi
c000bba6:	31 f6                	xor    esi,esi
c000bba8:	80 3d f9 09 02 c0 00 	cmp    BYTE PTR ds:0xc00209f9,0x0
c000bbaf:	74 05                	je     c000bbb6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000bbb1:	be 08 07 00 00       	mov    esi,0x708
c000bbb6:	31 ff                	xor    edi,edi
c000bbb8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000bbbc:	29 f0                	sub    eax,esi
c000bbbe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bbc2:	19 fa                	sbb    edx,edi
c000bbc4:	89 d8                	mov    eax,ebx
c000bbc6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bbca:	5b                   	pop    ebx
c000bbcb:	5e                   	pop    esi
c000bbcc:	5f                   	pop    edi
c000bbcd:	ff e0                	jmp    eax

c000bbcf <datetimeToSeconds(datetime_t)>:
c000bbcf:	55                   	push   ebp
c000bbd0:	57                   	push   edi
c000bbd1:	56                   	push   esi
c000bbd2:	53                   	push   ebx
c000bbd3:	83 ec 14             	sub    esp,0x14
c000bbd6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bbda:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000bbde:	89 d3                	mov    ebx,edx
c000bbe0:	0f b6 c6             	movzx  eax,dh
c000bbe3:	c1 eb 10             	shr    ebx,0x10
c000bbe6:	48                   	dec    eax
c000bbe7:	66 81 eb 6c 07       	sub    bx,0x76c
c000bbec:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000bbf0:	0f b6 f5             	movzx  esi,ch
c000bbf3:	89 cf                	mov    edi,ecx
c000bbf5:	6b f6 3c             	imul   esi,esi,0x3c
c000bbf8:	c1 ef 10             	shr    edi,0x10
c000bbfb:	0f b6 c9             	movzx  ecx,cl
c000bbfe:	89 f8                	mov    eax,edi
c000bc00:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bc06:	0f b6 f8             	movzx  edi,al
c000bc09:	0f b6 d2             	movzx  edx,dl
c000bc0c:	01 fe                	add    esi,edi
c000bc0e:	01 f1                	add    ecx,esi
c000bc10:	0f b7 f3             	movzx  esi,bx
c000bc13:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000bc17:	c1 f9 1f             	sar    ecx,0x1f
c000bc1a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000bc1f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bc23:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000bc28:	8b 0c 8d 00 df 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe2100]
c000bc2f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000bc33:	76 29                	jbe    c000bc5e <datetimeToSeconds(datetime_t)+0x8f>
c000bc35:	f6 c3 03             	test   bl,0x3
c000bc38:	75 24                	jne    c000bc5e <datetimeToSeconds(datetime_t)+0x8f>
c000bc3a:	31 d2                	xor    edx,edx
c000bc3c:	bf 64 00 00 00       	mov    edi,0x64
c000bc41:	89 d8                	mov    eax,ebx
c000bc43:	66 f7 f7             	div    di
c000bc46:	66 85 d2             	test   dx,dx
c000bc49:	75 12                	jne    c000bc5d <datetimeToSeconds(datetime_t)+0x8e>
c000bc4b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000bc51:	bf 90 01 00 00       	mov    edi,0x190
c000bc56:	99                   	cdq    
c000bc57:	f7 ff                	idiv   edi
c000bc59:	85 d2                	test   edx,edx
c000bc5b:	75 01                	jne    c000bc5e <datetimeToSeconds(datetime_t)+0x8f>
c000bc5d:	41                   	inc    ecx
c000bc5e:	66 83 fb 46          	cmp    bx,0x46
c000bc62:	76 45                	jbe    c000bca9 <datetimeToSeconds(datetime_t)+0xda>
c000bc64:	bb 46 00 00 00       	mov    ebx,0x46
c000bc69:	bf 64 00 00 00       	mov    edi,0x64
c000bc6e:	bd 90 01 00 00       	mov    ebp,0x190
c000bc73:	b8 6d 01 00 00       	mov    eax,0x16d
c000bc78:	f6 c3 03             	test   bl,0x3
c000bc7b:	75 23                	jne    c000bca0 <datetimeToSeconds(datetime_t)+0xd1>
c000bc7d:	89 d8                	mov    eax,ebx
c000bc7f:	99                   	cdq    
c000bc80:	f7 ff                	idiv   edi
c000bc82:	b8 6e 01 00 00       	mov    eax,0x16e
c000bc87:	85 d2                	test   edx,edx
c000bc89:	75 15                	jne    c000bca0 <datetimeToSeconds(datetime_t)+0xd1>
c000bc8b:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000bc91:	99                   	cdq    
c000bc92:	f7 fd                	idiv   ebp
c000bc94:	31 c0                	xor    eax,eax
c000bc96:	85 d2                	test   edx,edx
c000bc98:	0f 94 c0             	sete   al
c000bc9b:	05 6d 01 00 00       	add    eax,0x16d
c000bca0:	01 c1                	add    ecx,eax
c000bca2:	43                   	inc    ebx
c000bca3:	39 f3                	cmp    ebx,esi
c000bca5:	7c cc                	jl     c000bc73 <datetimeToSeconds(datetime_t)+0xa4>
c000bca7:	eb 3b                	jmp    c000bce4 <datetimeToSeconds(datetime_t)+0x115>
c000bca9:	74 39                	je     c000bce4 <datetimeToSeconds(datetime_t)+0x115>
c000bcab:	b8 45 00 00 00       	mov    eax,0x45
c000bcb0:	89 c2                	mov    edx,eax
c000bcb2:	83 e2 03             	and    edx,0x3
c000bcb5:	39 f0                	cmp    eax,esi
c000bcb7:	7e 13                	jle    c000bccc <datetimeToSeconds(datetime_t)+0xfd>
c000bcb9:	85 d2                	test   edx,edx
c000bcbb:	0f 94 c2             	sete   dl
c000bcbe:	48                   	dec    eax
c000bcbf:	0f b6 d2             	movzx  edx,dl
c000bcc2:	81 c2 6d 01 00 00    	add    edx,0x16d
c000bcc8:	29 d1                	sub    ecx,edx
c000bcca:	eb e4                	jmp    c000bcb0 <datetimeToSeconds(datetime_t)+0xe1>
c000bccc:	b8 6d 01 00 00       	mov    eax,0x16d
c000bcd1:	85 d2                	test   edx,edx
c000bcd3:	75 0d                	jne    c000bce2 <datetimeToSeconds(datetime_t)+0x113>
c000bcd5:	31 c0                	xor    eax,eax
c000bcd7:	66 85 db             	test   bx,bx
c000bcda:	0f 95 c0             	setne  al
c000bcdd:	05 6d 01 00 00       	add    eax,0x16d
c000bce2:	29 c1                	sub    ecx,eax
c000bce4:	b8 80 51 01 00       	mov    eax,0x15180
c000bce9:	f7 e9                	imul   ecx
c000bceb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000bcef:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000bcf3:	83 c4 14             	add    esp,0x14
c000bcf6:	5b                   	pop    ebx
c000bcf7:	5e                   	pop    esi
c000bcf8:	5f                   	pop    edi
c000bcf9:	5d                   	pop    ebp
c000bcfa:	c3                   	ret    
c000bcfb:	90                   	nop

c000bcfc <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000bcfc:	57                   	push   edi
c000bcfd:	56                   	push   esi
c000bcfe:	53                   	push   ebx
c000bcff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bd03:	8b 06                	mov    eax,DWORD PTR [esi]
c000bd05:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000bd08:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd0c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd10:	e8 ba fe ff ff       	call   c000bbcf <datetimeToSeconds(datetime_t)>
c000bd15:	59                   	pop    ecx
c000bd16:	0f b6 0d f8 09 02 c0 	movzx  ecx,BYTE PTR ds:0xc00209f8
c000bd1d:	5b                   	pop    ebx
c000bd1e:	03 0d fc 09 02 c0    	add    ecx,DWORD PTR ds:0xc00209fc
c000bd24:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bd2a:	89 cb                	mov    ebx,ecx
c000bd2c:	c1 fb 1f             	sar    ebx,0x1f
c000bd2f:	29 c8                	sub    eax,ecx
c000bd31:	19 da                	sbb    edx,ebx
c000bd33:	31 c9                	xor    ecx,ecx
c000bd35:	80 3d f9 09 02 c0 00 	cmp    BYTE PTR ds:0xc00209f9,0x0
c000bd3c:	74 05                	je     c000bd43 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000bd3e:	b9 08 07 00 00       	mov    ecx,0x708
c000bd43:	31 db                	xor    ebx,ebx
c000bd45:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000bd49:	29 c8                	sub    eax,ecx
c000bd4b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bd4f:	19 da                	sbb    edx,ebx
c000bd51:	89 f8                	mov    eax,edi
c000bd53:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bd57:	5b                   	pop    ebx
c000bd58:	5e                   	pop    esi
c000bd59:	5f                   	pop    edi
c000bd5a:	ff e0                	jmp    eax

c000bd5c <secondsToDatetime(unsigned long long)>:
c000bd5c:	55                   	push   ebp
c000bd5d:	57                   	push   edi
c000bd5e:	56                   	push   esi
c000bd5f:	53                   	push   ebx
c000bd60:	83 ec 1c             	sub    esp,0x1c
c000bd63:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bd67:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bd6b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bd6f:	6a 00                	push   0x0
c000bd71:	68 80 51 01 00       	push   0x15180
c000bd76:	55                   	push   ebp
c000bd77:	57                   	push   edi
c000bd78:	e8 f3 03 01 00       	call   c001c170 <__udivdi3>
c000bd7d:	83 c4 10             	add    esp,0x10
c000bd80:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000bd86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd8a:	6a 00                	push   0x0
c000bd8c:	68 80 51 01 00       	push   0x15180
c000bd91:	55                   	push   ebp
c000bd92:	57                   	push   edi
c000bd93:	bf 10 0e 00 00       	mov    edi,0xe10
c000bd98:	e8 d3 04 01 00       	call   c001c270 <__umoddi3>
c000bd9d:	83 c4 10             	add    esp,0x10
c000bda0:	99                   	cdq    
c000bda1:	f7 ff                	idiv   edi
c000bda3:	bf 3c 00 00 00       	mov    edi,0x3c
c000bda8:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000bdab:	89 d0                	mov    eax,edx
c000bdad:	99                   	cdq    
c000bdae:	f7 ff                	idiv   edi
c000bdb0:	85 db                	test   ebx,ebx
c000bdb2:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000bdb5:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000bdb8:	79 11                	jns    c000bdcb <secondsToDatetime(unsigned long long)+0x6f>
c000bdba:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bdbe:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000bdc4:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bdc9:	eb 07                	jmp    c000bdd2 <secondsToDatetime(unsigned long long)+0x76>
c000bdcb:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bdd0:	89 d8                	mov    eax,ebx
c000bdd2:	bf b4 05 00 00       	mov    edi,0x5b4
c000bdd7:	99                   	cdq    
c000bdd8:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000bddd:	f7 f9                	idiv   ecx
c000bddf:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000bde4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bde8:	31 d2                	xor    edx,edx
c000bdea:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000bdf2:	01 c3                	add    ebx,eax
c000bdf4:	89 d8                	mov    eax,ebx
c000bdf6:	f7 f1                	div    ecx
c000bdf8:	31 d2                	xor    edx,edx
c000bdfa:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000bdfd:	89 d8                	mov    eax,ebx
c000bdff:	f7 f7                	div    edi
c000be01:	31 d2                	xor    edx,edx
c000be03:	29 c1                	sub    ecx,eax
c000be05:	89 d8                	mov    eax,ebx
c000be07:	f7 f5                	div    ebp
c000be09:	bd 6d 01 00 00       	mov    ebp,0x16d
c000be0e:	29 c1                	sub    ecx,eax
c000be10:	31 d2                	xor    edx,edx
c000be12:	89 c8                	mov    eax,ecx
c000be14:	f7 f5                	div    ebp
c000be16:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000be1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000be1f:	31 d2                	xor    edx,edx
c000be21:	89 c8                	mov    eax,ecx
c000be23:	f7 f5                	div    ebp
c000be25:	31 d2                	xor    edx,edx
c000be27:	01 c3                	add    ebx,eax
c000be29:	89 c8                	mov    eax,ecx
c000be2b:	f7 f7                	div    edi
c000be2d:	bf 99 00 00 00       	mov    edi,0x99
c000be32:	29 c3                	sub    ebx,eax
c000be34:	31 d2                	xor    edx,edx
c000be36:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000be3e:	29 c3                	sub    ebx,eax
c000be40:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000be43:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000be46:	bb 05 00 00 00       	mov    ebx,0x5
c000be4b:	83 c1 02             	add    ecx,0x2
c000be4e:	89 c8                	mov    eax,ecx
c000be50:	f7 f7                	div    edi
c000be52:	31 d2                	xor    edx,edx
c000be54:	89 c7                	mov    edi,eax
c000be56:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000be5c:	83 c0 02             	add    eax,0x2
c000be5f:	f7 f3                	div    ebx
c000be61:	89 eb                	mov    ebx,ebp
c000be63:	29 c3                	sub    ebx,eax
c000be65:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000be6b:	88 1e                	mov    BYTE PTR [esi],bl
c000be6d:	19 c0                	sbb    eax,eax
c000be6f:	31 d2                	xor    edx,edx
c000be71:	83 e0 0c             	and    eax,0xc
c000be74:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000be78:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000be80:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000be84:	83 f9 01             	cmp    ecx,0x1
c000be87:	0f 96 c2             	setbe  dl
c000be8a:	41                   	inc    ecx
c000be8b:	01 d0                	add    eax,edx
c000be8d:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000be90:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000be94:	83 c4 1c             	add    esp,0x1c
c000be97:	89 f0                	mov    eax,esi
c000be99:	5b                   	pop    ebx
c000be9a:	5e                   	pop    esi
c000be9b:	5f                   	pop    edi
c000be9c:	5d                   	pop    ebp
c000be9d:	c2 04 00             	ret    0x4

c000bea0 <Clock::timeInDatetimeLocal()>:
c000bea0:	53                   	push   ebx
c000bea1:	83 ec 14             	sub    esp,0x14
c000bea4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bea8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000beac:	e8 7d fc ff ff       	call   c000bb2e <Clock::timeInSecondsLocal()>
c000beb1:	83 c4 0c             	add    esp,0xc
c000beb4:	52                   	push   edx
c000beb5:	50                   	push   eax
c000beb6:	53                   	push   ebx
c000beb7:	e8 a0 fe ff ff       	call   c000bd5c <secondsToDatetime(unsigned long long)>
c000bebc:	89 d8                	mov    eax,ebx
c000bebe:	83 c4 14             	add    esp,0x14
c000bec1:	5b                   	pop    ebx
c000bec2:	c2 04 00             	ret    0x4
c000bec5:	90                   	nop

c000bec6 <Device::hibernate()>:
c000bec6:	c3                   	ret    
c000bec7:	90                   	nop

c000bec8 <Device::wake()>:
c000bec8:	c3                   	ret    
c000bec9:	90                   	nop

c000beca <Device::detect()>:
c000beca:	c3                   	ret    
c000becb:	90                   	nop

c000becc <Device::disableLegacy()>:
c000becc:	c3                   	ret    
c000becd:	90                   	nop

c000bece <Device::powerSaving(PowerSavingLevel)>:
c000bece:	c3                   	ret    
c000becf:	90                   	nop

c000bed0 <DriverlessDevice::close(int, int, void*)>:
c000bed0:	31 c0                	xor    eax,eax
c000bed2:	c3                   	ret    
c000bed3:	90                   	nop

c000bed4 <DriverlessDevice::detect()>:
c000bed4:	c3                   	ret    
c000bed5:	90                   	nop

c000bed6 <DriverlessDevice::open(int, int, void*)>:
c000bed6:	83 ec 18             	sub    esp,0x18
c000bed9:	68 30 df 01 c0       	push   0xc001df30
c000bede:	e8 14 48 00 00       	call   c00106f7 <Krnl::panic(char const*)>
c000bee3:	83 c8 ff             	or     eax,0xffffffff
c000bee6:	83 c4 1c             	add    esp,0x1c
c000bee9:	c3                   	ret    

c000beea <Device::~Device()>:
c000beea:	ba 90 df 01 c0       	mov    edx,0xc001df90
c000beef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bef3:	89 10                	mov    DWORD PTR [eax],edx
c000bef5:	90                   	nop
c000bef6:	c3                   	ret    
c000bef7:	90                   	nop

c000bef8 <Device::~Device()>:
c000bef8:	83 ec 0c             	sub    esp,0xc
c000befb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000beff:	e8 e6 ff ff ff       	call   c000beea <Device::~Device()>
c000bf04:	83 c4 04             	add    esp,0x4
c000bf07:	83 ec 08             	sub    esp,0x8
c000bf0a:	68 58 01 00 00       	push   0x158
c000bf0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf13:	e8 9a eb ff ff       	call   c000aab2 <operator delete(void*, unsigned long)>
c000bf18:	83 c4 10             	add    esp,0x10
c000bf1b:	83 c4 0c             	add    esp,0xc
c000bf1e:	c3                   	ret    
c000bf1f:	90                   	nop

c000bf20 <Device::findAndLoadDriver()>:
c000bf20:	c7 44 24 04 4e df 01 c0 	mov    DWORD PTR [esp+0x4],0xc001df4e
c000bf28:	e9 7b ec ff ff       	jmp    c000aba8 <Dbg::kprintf(char const*, ...)>
c000bf2d:	90                   	nop

c000bf2e <Device::preOpenPCI(PCIDeviceInfo)>:
c000bf2e:	57                   	push   edi
c000bf2f:	b9 09 00 00 00       	mov    ecx,0x9
c000bf34:	56                   	push   esi
c000bf35:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bf39:	8d 74 24 10          	lea    esi,[esp+0x10]
c000bf3d:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000bf47:	81 c7 18 01 00 00    	add    edi,0x118
c000bf4d:	fc                   	cld    
c000bf4e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000bf50:	5e                   	pop    esi
c000bf51:	5f                   	pop    edi
c000bf52:	c3                   	ret    
c000bf53:	90                   	nop

c000bf54 <Device::preOpenACPI(void*, char*, char*)>:
c000bf54:	57                   	push   edi
c000bf55:	b9 1e 00 00 00       	mov    ecx,0x1e
c000bf5a:	56                   	push   esi
c000bf5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf5f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf63:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000bf6d:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000bf73:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000bf79:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bf7d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bf7f:	b9 0e 00 00 00       	mov    ecx,0xe
c000bf84:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000bf8a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bf8e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bf90:	5e                   	pop    esi
c000bf91:	5f                   	pop    edi
c000bf92:	c3                   	ret    
c000bf93:	90                   	nop

c000bf94 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bf94:	53                   	push   ebx
c000bf95:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bf99:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bf9d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bfa1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bfa5:	0f b6 c0             	movzx  eax,al
c000bfa8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000bfac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bfb0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bfb4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bfb8:	5b                   	pop    ebx
c000bfb9:	e9 a6 05 00 00       	jmp    c000c564 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000bfbe <Device::getParent()>:
c000bfbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfc2:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000bfc8:	c3                   	ret    
c000bfc9:	90                   	nop

c000bfca <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000bfca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bfce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bfd2:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000bfd7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bfdb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bfdf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bfe3:	e9 e8 06 00 00       	jmp    c000c6d0 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000bfe8 <Device::addChild(Device*)>:
c000bfe8:	53                   	push   ebx
c000bfe9:	83 ec 08             	sub    esp,0x8
c000bfec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bff0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bff4:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000bffa:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c000:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c002:	85 d2                	test   edx,edx
c000c004:	74 04                	je     c000c00a <Device::addChild(Device*)+0x22>
c000c006:	89 d3                	mov    ebx,edx
c000c008:	eb f6                	jmp    c000c000 <Device::addChild(Device*)+0x18>
c000c00a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c00d:	83 ec 0c             	sub    esp,0xc
c000c010:	6a 08                	push   0x8
c000c012:	e8 02 be ff ff       	call   c0007e19 <malloc>
c000c017:	89 03                	mov    DWORD PTR [ebx],eax
c000c019:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c01f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c026:	83 c4 18             	add    esp,0x18
c000c029:	5b                   	pop    ebx
c000c02a:	c3                   	ret    
c000c02b:	90                   	nop

c000c02c <Device::removeAllChildren()>:
c000c02c:	56                   	push   esi
c000c02d:	53                   	push   ebx
c000c02e:	52                   	push   edx
c000c02f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c033:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c039:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c03c:	74 17                	je     c000c055 <Device::removeAllChildren()+0x29>
c000c03e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c041:	85 c0                	test   eax,eax
c000c043:	74 0c                	je     c000c051 <Device::removeAllChildren()+0x25>
c000c045:	83 ec 0c             	sub    esp,0xc
c000c048:	8b 10                	mov    edx,DWORD PTR [eax]
c000c04a:	50                   	push   eax
c000c04b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c04e:	83 c4 10             	add    esp,0x10
c000c051:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c053:	eb e4                	jmp    c000c039 <Device::removeAllChildren()+0xd>
c000c055:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c05b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c061:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c067:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c06e:	58                   	pop    eax
c000c06f:	5b                   	pop    ebx
c000c070:	5e                   	pop    esi
c000c071:	c3                   	ret    

c000c072 <Device::hibernateAll()>:
c000c072:	53                   	push   ebx
c000c073:	83 ec 14             	sub    esp,0x14
c000c076:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c07a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c07c:	53                   	push   ebx
c000c07d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c080:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c086:	83 c4 10             	add    esp,0x10
c000c089:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c08c:	74 0f                	je     c000c09d <Device::hibernateAll()+0x2b>
c000c08e:	83 ec 0c             	sub    esp,0xc
c000c091:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c094:	e8 d9 ff ff ff       	call   c000c072 <Device::hibernateAll()>
c000c099:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c09b:	eb e9                	jmp    c000c086 <Device::hibernateAll()+0x14>
c000c09d:	83 c4 08             	add    esp,0x8
c000c0a0:	5b                   	pop    ebx
c000c0a1:	c3                   	ret    

c000c0a2 <Device::wakeAll()>:
c000c0a2:	53                   	push   ebx
c000c0a3:	83 ec 14             	sub    esp,0x14
c000c0a6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c0aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c0ac:	53                   	push   ebx
c000c0ad:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c0b0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c0b6:	83 c4 10             	add    esp,0x10
c000c0b9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c0bc:	74 0f                	je     c000c0cd <Device::wakeAll()+0x2b>
c000c0be:	83 ec 0c             	sub    esp,0xc
c000c0c1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c0c4:	e8 d9 ff ff ff       	call   c000c0a2 <Device::wakeAll()>
c000c0c9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c0cb:	eb e9                	jmp    c000c0b6 <Device::wakeAll()+0x14>
c000c0cd:	83 c4 08             	add    esp,0x8
c000c0d0:	5b                   	pop    ebx
c000c0d1:	c3                   	ret    

c000c0d2 <Device::detectAll()>:
c000c0d2:	53                   	push   ebx
c000c0d3:	83 ec 14             	sub    esp,0x14
c000c0d6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c0da:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c0dc:	53                   	push   ebx
c000c0dd:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c0e0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c0e6:	83 c4 10             	add    esp,0x10
c000c0e9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c0ec:	74 0f                	je     c000c0fd <Device::detectAll()+0x2b>
c000c0ee:	83 ec 0c             	sub    esp,0xc
c000c0f1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c0f4:	e8 d9 ff ff ff       	call   c000c0d2 <Device::detectAll()>
c000c0f9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c0fb:	eb e9                	jmp    c000c0e6 <Device::detectAll()+0x14>
c000c0fd:	83 c4 08             	add    esp,0x8
c000c100:	5b                   	pop    ebx
c000c101:	c3                   	ret    

c000c102 <Device::disableLegacyAll()>:
c000c102:	c3                   	ret    
c000c103:	90                   	nop

c000c104 <Device::loadDriversForAll()>:
c000c104:	c3                   	ret    
c000c105:	90                   	nop

c000c106 <Device::closeAll()>:
c000c106:	53                   	push   ebx
c000c107:	83 ec 08             	sub    esp,0x8
c000c10a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c10e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c110:	6a 00                	push   0x0
c000c112:	6a 00                	push   0x0
c000c114:	6a 00                	push   0x0
c000c116:	53                   	push   ebx
c000c117:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c11a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c120:	83 c4 10             	add    esp,0x10
c000c123:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c126:	74 0f                	je     c000c137 <Device::closeAll()+0x31>
c000c128:	83 ec 0c             	sub    esp,0xc
c000c12b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c12e:	e8 d3 ff ff ff       	call   c000c106 <Device::closeAll()>
c000c133:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c135:	eb e9                	jmp    c000c120 <Device::closeAll()+0x1a>
c000c137:	83 c4 08             	add    esp,0x8
c000c13a:	5b                   	pop    ebx
c000c13b:	c3                   	ret    

c000c13c <Device::powerSavingAll(PowerSavingLevel)>:
c000c13c:	56                   	push   esi
c000c13d:	53                   	push   ebx
c000c13e:	83 ec 0c             	sub    esp,0xc
c000c141:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c145:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c149:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c14b:	56                   	push   esi
c000c14c:	53                   	push   ebx
c000c14d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c150:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c156:	83 c4 10             	add    esp,0x10
c000c159:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c15c:	74 0f                	je     c000c16d <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c15e:	52                   	push   edx
c000c15f:	52                   	push   edx
c000c160:	56                   	push   esi
c000c161:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c164:	e8 d3 ff ff ff       	call   c000c13c <Device::powerSavingAll(PowerSavingLevel)>
c000c169:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c16b:	eb e9                	jmp    c000c156 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c16d:	58                   	pop    eax
c000c16e:	5b                   	pop    ebx
c000c16f:	5e                   	pop    esi
c000c170:	c3                   	ret    
c000c171:	90                   	nop

c000c172 <Device::setName(char const*)>:
c000c172:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c17a:	e9 a1 44 ff ff       	jmp    c0000620 <strcpy>
c000c17f:	90                   	nop

c000c180 <Device::Device(char const*)>:
c000c180:	83 ec 1c             	sub    esp,0x1c
c000c183:	ba 90 df 01 c0       	mov    edx,0xc001df90
c000c188:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c18c:	89 10                	mov    DWORD PTR [eax],edx
c000c18e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c192:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c19c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1a0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c1aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1ae:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c1b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1bc:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c1c6:	83 ec 08             	sub    esp,0x8
c000c1c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c1cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c1d1:	e8 9c ff ff ff       	call   c000c172 <Device::setName(char const*)>
c000c1d6:	83 c4 10             	add    esp,0x10
c000c1d9:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c1e1:	83 ec 0c             	sub    esp,0xc
c000c1e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c1e8:	e8 2c bc ff ff       	call   c0007e19 <malloc>
c000c1ed:	83 c4 10             	add    esp,0x10
c000c1f0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c1f6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c1fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c201:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c20b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c211:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c217:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c21b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c221:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c228:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c22c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c233:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c237:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c23e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c242:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c24c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c250:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c25a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c25e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c268:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c26c:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c276:	90                   	nop
c000c277:	83 c4 1c             	add    esp,0x1c
c000c27a:	c3                   	ret    
c000c27b:	90                   	nop

c000c27c <Device::getName()>:
c000c27c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c280:	05 d0 00 00 00       	add    eax,0xd0
c000c285:	c3                   	ret    

c000c286 <DriverlessDevice::DriverlessDevice(char const*)>:
c000c286:	83 ec 0c             	sub    esp,0xc
c000c289:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c28d:	83 ec 08             	sub    esp,0x8
c000c290:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c294:	50                   	push   eax
c000c295:	e8 e6 fe ff ff       	call   c000c180 <Device::Device(char const*)>
c000c29a:	83 c4 10             	add    esp,0x10
c000c29d:	ba bc df 01 c0       	mov    edx,0xc001dfbc
c000c2a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2a6:	89 10                	mov    DWORD PTR [eax],edx
c000c2a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2ac:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000c2b6:	90                   	nop
c000c2b7:	83 c4 0c             	add    esp,0xc
c000c2ba:	c3                   	ret    
c000c2bb:	90                   	nop

c000c2bc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c2bc:	57                   	push   edi
c000c2bd:	56                   	push   esi
c000c2be:	53                   	push   ebx
c000c2bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c2c3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c2c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c2cb:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c2d1:	75 0c                	jne    c000c2df <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c2d3:	52                   	push   edx
c000c2d4:	52                   	push   edx
c000c2d5:	53                   	push   ebx
c000c2d6:	56                   	push   esi
c000c2d7:	e8 46 03 01 00       	call   c001c622 <LinkedList<Device>::addElement(Device*)>
c000c2dc:	83 c4 10             	add    esp,0x10
c000c2df:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c2e5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c2e8:	74 12                	je     c000c2fc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c2ea:	50                   	push   eax
c000c2eb:	57                   	push   edi
c000c2ec:	56                   	push   esi
c000c2ed:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c2f0:	e8 c7 ff ff ff       	call   c000c2bc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c2f5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	eb e9                	jmp    c000c2e5 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c2fc:	5b                   	pop    ebx
c000c2fd:	5e                   	pop    esi
c000c2fe:	5f                   	pop    edi
c000c2ff:	c3                   	ret    

c000c300 <getDevicesOfType(DeviceType)>:
c000c300:	53                   	push   ebx
c000c301:	83 ec 14             	sub    esp,0x14
c000c304:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c308:	53                   	push   ebx
c000c309:	e8 f0 03 01 00       	call   c001c6fe <LinkedList<Device>::LinkedList()>
c000c30e:	83 c4 0c             	add    esp,0xc
c000c311:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c315:	53                   	push   ebx
c000c316:	ff 35 f8 08 02 c0    	push   DWORD PTR ds:0xc00208f8
c000c31c:	e8 9b ff ff ff       	call   c000c2bc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c321:	89 d8                	mov    eax,ebx
c000c323:	83 c4 18             	add    esp,0x18
c000c326:	5b                   	pop    ebx
c000c327:	c2 04 00             	ret    0x4
c000c32a:	66 90                	xchg   ax,ax

c000c32c <HardDiskController::HardDiskController(char const*)>:
c000c32c:	83 ec 0c             	sub    esp,0xc
c000c32f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c333:	83 ec 08             	sub    esp,0x8
c000c336:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c33a:	50                   	push   eax
c000c33b:	e8 40 fe ff ff       	call   c000c180 <Device::Device(char const*)>
c000c340:	83 c4 10             	add    esp,0x10
c000c343:	ba e8 df 01 c0       	mov    edx,0xc001dfe8
c000c348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c34c:	89 10                	mov    DWORD PTR [eax],edx
c000c34e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c352:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c35c:	90                   	nop
c000c35d:	83 c4 0c             	add    esp,0xc
c000c360:	c3                   	ret    
c000c361:	90                   	nop
c000c362:	66 90                	xchg   ax,ax

c000c364 <HardDiskController::~HardDiskController()>:
c000c364:	83 ec 0c             	sub    esp,0xc
c000c367:	ba e8 df 01 c0       	mov    edx,0xc001dfe8
c000c36c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c370:	89 10                	mov    DWORD PTR [eax],edx
c000c372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c376:	83 ec 0c             	sub    esp,0xc
c000c379:	50                   	push   eax
c000c37a:	e8 6b fb ff ff       	call   c000beea <Device::~Device()>
c000c37f:	83 c4 10             	add    esp,0x10
c000c382:	90                   	nop
c000c383:	83 c4 0c             	add    esp,0xc
c000c386:	c3                   	ret    
c000c387:	90                   	nop

c000c388 <HardDiskController::~HardDiskController()>:
c000c388:	83 ec 0c             	sub    esp,0xc
c000c38b:	83 ec 0c             	sub    esp,0xc
c000c38e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c392:	e8 cd ff ff ff       	call   c000c364 <HardDiskController::~HardDiskController()>
c000c397:	83 c4 10             	add    esp,0x10
c000c39a:	83 ec 08             	sub    esp,0x8
c000c39d:	68 58 01 00 00       	push   0x158
c000c3a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3a6:	e8 07 e7 ff ff       	call   c000aab2 <operator delete(void*, unsigned long)>
c000c3ab:	83 c4 10             	add    esp,0x10
c000c3ae:	83 c4 0c             	add    esp,0xc
c000c3b1:	c3                   	ret    

c000c3b2 <PhysicalDisk::eject()>:
c000c3b2:	83 c8 ff             	or     eax,0xffffffff
c000c3b5:	c3                   	ret    

c000c3b6 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c3b6:	83 ec 0c             	sub    esp,0xc
c000c3b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3bd:	83 ec 08             	sub    esp,0x8
c000c3c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c4:	50                   	push   eax
c000c3c5:	e8 b6 fd ff ff       	call   c000c180 <Device::Device(char const*)>
c000c3ca:	83 c4 10             	add    esp,0x10
c000c3cd:	ba 14 e0 01 c0       	mov    edx,0xc001e014
c000c3d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3d6:	89 10                	mov    DWORD PTR [eax],edx
c000c3d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3dc:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c3e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3e7:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c3ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3f2:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c3fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c400:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c404:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c40a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c40e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c418:	90                   	nop
c000c419:	83 c4 0c             	add    esp,0xc
c000c41c:	c3                   	ret    
c000c41d:	90                   	nop

c000c41e <PhysicalDisk::startCache()>:
c000c41e:	56                   	push   esi
c000c41f:	53                   	push   ebx
c000c420:	83 ec 10             	sub    esp,0x10
c000c423:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c427:	6a 44                	push   0x44
c000c429:	e8 eb b9 ff ff       	call   c0007e19 <malloc>
c000c42e:	89 c6                	mov    esi,eax
c000c430:	58                   	pop    eax
c000c431:	5a                   	pop    edx
c000c432:	53                   	push   ebx
c000c433:	56                   	push   esi
c000c434:	e8 ab 15 00 00       	call   c000d9e4 <VCache::VCache(PhysicalDisk*)>
c000c439:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c43f:	83 c4 14             	add    esp,0x14
c000c442:	5b                   	pop    ebx
c000c443:	5e                   	pop    esi
c000c444:	c3                   	ret    
c000c445:	90                   	nop

c000c446 <PhysicalDisk::~PhysicalDisk()>:
c000c446:	83 ec 0c             	sub    esp,0xc
c000c449:	ba 14 e0 01 c0       	mov    edx,0xc001e014
c000c44e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c452:	89 10                	mov    DWORD PTR [eax],edx
c000c454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c458:	83 ec 0c             	sub    esp,0xc
c000c45b:	50                   	push   eax
c000c45c:	e8 89 fa ff ff       	call   c000beea <Device::~Device()>
c000c461:	83 c4 10             	add    esp,0x10
c000c464:	90                   	nop
c000c465:	83 c4 0c             	add    esp,0xc
c000c468:	c3                   	ret    
c000c469:	90                   	nop

c000c46a <PhysicalDisk::~PhysicalDisk()>:
c000c46a:	83 ec 0c             	sub    esp,0xc
c000c46d:	83 ec 0c             	sub    esp,0xc
c000c470:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c474:	e8 cd ff ff ff       	call   c000c446 <PhysicalDisk::~PhysicalDisk()>
c000c479:	83 c4 10             	add    esp,0x10
c000c47c:	83 ec 08             	sub    esp,0x8
c000c47f:	68 6c 01 00 00       	push   0x16c
c000c484:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c488:	e8 25 e6 ff ff       	call   c000aab2 <operator delete(void*, unsigned long)>
c000c48d:	83 c4 10             	add    esp,0x10
c000c490:	83 c4 0c             	add    esp,0xc
c000c493:	c3                   	ret    

c000c494 <int_handler>:
c000c494:	55                   	push   ebp
c000c495:	57                   	push   edi
c000c496:	56                   	push   esi
c000c497:	53                   	push   ebx
c000c498:	83 ec 0c             	sub    esp,0xc
c000c49b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c49f:	80 3d 80 33 02 c0 00 	cmp    BYTE PTR ds:0xc0023380,0x0
c000c4a6:	74 0b                	je     c000c4b3 <int_handler+0x1f>
c000c4a8:	fa                   	cli    
c000c4a9:	f4                   	hlt    
c000c4aa:	80 3d 80 33 02 c0 00 	cmp    BYTE PTR ds:0xc0023380,0x0
c000c4b1:	75 f5                	jne    c000c4a8 <int_handler+0x14>
c000c4b3:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c4b6:	8d 46 e0             	lea    eax,[esi-0x20]
c000c4b9:	83 f8 17             	cmp    eax,0x17
c000c4bc:	76 3e                	jbe    c000c4fc <int_handler+0x68>
c000c4be:	c1 e6 04             	shl    esi,0x4
c000c4c1:	31 db                	xor    ebx,ebx
c000c4c3:	8d ae 00 1a 02 c0    	lea    ebp,[esi-0x3ffde600]
c000c4c9:	81 c6 00 0a 02 c0    	add    esi,0xc0020a00
c000c4cf:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c4d3:	85 c0                	test   eax,eax
c000c4d5:	74 13                	je     c000c4ea <int_handler+0x56>
c000c4d7:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c4da:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c4de:	74 2a                	je     c000c50a <int_handler+0x76>
c000c4e0:	83 ec 08             	sub    esp,0x8
c000c4e3:	52                   	push   edx
c000c4e4:	57                   	push   edi
c000c4e5:	ff d0                	call   eax
c000c4e7:	83 c4 10             	add    esp,0x10
c000c4ea:	43                   	inc    ebx
c000c4eb:	83 fb 04             	cmp    ebx,0x4
c000c4ee:	75 df                	jne    c000c4cf <int_handler+0x3b>
c000c4f0:	83 c4 0c             	add    esp,0xc
c000c4f3:	31 c0                	xor    eax,eax
c000c4f5:	5b                   	pop    ebx
c000c4f6:	31 d2                	xor    edx,edx
c000c4f8:	5e                   	pop    esi
c000c4f9:	5f                   	pop    edi
c000c4fa:	5d                   	pop    ebp
c000c4fb:	c3                   	ret    
c000c4fc:	83 ec 0c             	sub    esp,0xc
c000c4ff:	50                   	push   eax
c000c500:	e8 cc 94 00 00       	call   c00159d1 <HalEndOfInterrupt(int)>
c000c505:	83 c4 10             	add    esp,0x10
c000c508:	eb b4                	jmp    c000c4be <int_handler+0x2a>
c000c50a:	83 ec 08             	sub    esp,0x8
c000c50d:	52                   	push   edx
c000c50e:	57                   	push   edi
c000c50f:	ff d0                	call   eax
c000c511:	83 c4 10             	add    esp,0x10
c000c514:	83 c4 0c             	add    esp,0xc
c000c517:	5b                   	pop    ebx
c000c518:	5e                   	pop    esi
c000c519:	5f                   	pop    edi
c000c51a:	5d                   	pop    ebp
c000c51b:	c3                   	ret    

c000c51c <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c51c:	56                   	push   esi
c000c51d:	31 c0                	xor    eax,eax
c000c51f:	53                   	push   ebx
c000c520:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c524:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c528:	89 ca                	mov    edx,ecx
c000c52a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c52e:	c1 e2 04             	shl    edx,0x4
c000c531:	83 bc 82 00 1a 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffde600],0x0
c000c539:	74 15                	je     c000c550 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000c53b:	40                   	inc    eax
c000c53c:	83 f8 04             	cmp    eax,0x4
c000c53f:	75 f0                	jne    c000c531 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c541:	c7 44 24 0c 44 e0 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e044
c000c549:	5b                   	pop    ebx
c000c54a:	5e                   	pop    esi
c000c54b:	e9 a7 41 00 00       	jmp    c00106f7 <Krnl::panic(char const*)>
c000c550:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c553:	89 1c 85 00 1a 02 c0 	mov    DWORD PTR [eax*4-0x3ffde600],ebx
c000c55a:	89 34 85 00 0a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf600],esi
c000c561:	5b                   	pop    ebx
c000c562:	5e                   	pop    esi
c000c563:	c3                   	ret    

c000c564 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c564:	57                   	push   edi
c000c565:	8b 15 f8 08 02 c0    	mov    edx,DWORD PTR ds:0xc00208f8
c000c56b:	56                   	push   esi
c000c56c:	53                   	push   ebx
c000c56d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c571:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c575:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c57c:	74 5b                	je     c000c5d9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c57e:	89 c7                	mov    edi,eax
c000c580:	84 c0                	test   al,al
c000c582:	74 24                	je     c000c5a8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c584:	83 fe 0f             	cmp    esi,0xf
c000c587:	0f 8f d9 00 00 00    	jg     c000c666 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000c58d:	8a 86 60 f8 01 c0    	mov    al,BYTE PTR [esi-0x3ffe07a0]
c000c593:	25 ff 00 00 00       	and    eax,0xff
c000c598:	66 8b bc 00 a0 31 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdce60]
c000c5a0:	89 c6                	mov    esi,eax
c000c5a2:	66 d1 ef             	shr    di,1
c000c5a5:	83 e7 01             	and    edi,0x1
c000c5a8:	83 ec 08             	sub    esp,0x8
c000c5ab:	a1 c0 47 02 c0       	mov    eax,ds:0xc00247c0
c000c5b0:	31 db                	xor    ebx,ebx
c000c5b2:	50                   	push   eax
c000c5b3:	68 51 e0 01 c0       	push   0xc001e051
c000c5b8:	e8 eb e5 ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c000c5bd:	83 c4 10             	add    esp,0x10
c000c5c0:	a1 c0 47 02 c0       	mov    eax,ds:0xc00247c0
c000c5c5:	85 c0                	test   eax,eax
c000c5c7:	7f 51                	jg     c000c61a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000c5c9:	83 ec 0c             	sub    esp,0xc
c000c5cc:	68 68 e0 01 c0       	push   0xc001e068
c000c5d1:	e8 21 41 00 00       	call   c00106f7 <Krnl::panic(char const*)>
c000c5d6:	83 c4 10             	add    esp,0x10
c000c5d9:	8d 4e 20             	lea    ecx,[esi+0x20]
c000c5dc:	31 d2                	xor    edx,edx
c000c5de:	89 c8                	mov    eax,ecx
c000c5e0:	c1 e0 04             	shl    eax,0x4
c000c5e3:	8b 9c 90 00 1a 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffde600]
c000c5ea:	85 db                	test   ebx,ebx
c000c5ec:	0f 84 8b 00 00 00    	je     c000c67d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000c5f2:	42                   	inc    edx
c000c5f3:	83 fa 04             	cmp    edx,0x4
c000c5f6:	75 eb                	jne    c000c5e3 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c5f8:	83 ec 0c             	sub    esp,0xc
c000c5fb:	68 bc e0 01 c0       	push   0xc001e0bc
c000c600:	e8 f2 40 00 00       	call   c00106f7 <Krnl::panic(char const*)>
c000c605:	83 c4 10             	add    esp,0x10
c000c608:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c60d:	5b                   	pop    ebx
c000c60e:	5e                   	pop    esi
c000c60f:	5f                   	pop    edi
c000c610:	c3                   	ret    
c000c611:	43                   	inc    ebx
c000c612:	39 1d c0 47 02 c0    	cmp    DWORD PTR ds:0xc00247c0,ebx
c000c618:	7e af                	jle    c000c5c9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c61a:	83 ec 08             	sub    esp,0x8
c000c61d:	8b 04 9d e0 47 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb820]
c000c624:	56                   	push   esi
c000c625:	50                   	push   eax
c000c626:	e8 1b f0 00 00       	call   c001b646 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c62b:	83 c4 10             	add    esp,0x10
c000c62e:	84 c0                	test   al,al
c000c630:	74 df                	je     c000c611 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000c632:	81 e7 ff 00 00 00    	and    edi,0xff
c000c638:	50                   	push   eax
c000c639:	8d 46 20             	lea    eax,[esi+0x20]
c000c63c:	57                   	push   edi
c000c63d:	25 ff 00 00 00       	and    eax,0xff
c000c642:	6a 00                	push   0x0
c000c644:	50                   	push   eax
c000c645:	89 f0                	mov    eax,esi
c000c647:	6a 00                	push   0x0
c000c649:	25 ff 00 00 00       	and    eax,0xff
c000c64e:	6a 00                	push   0x0
c000c650:	50                   	push   eax
c000c651:	8b 04 9d e0 47 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb820]
c000c658:	50                   	push   eax
c000c659:	e8 62 f1 00 00       	call   c001b7c0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c65e:	83 c4 20             	add    esp,0x20
c000c661:	e9 73 ff ff ff       	jmp    c000c5d9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c666:	83 ec 0c             	sub    esp,0xc
c000c669:	31 ff                	xor    edi,edi
c000c66b:	68 84 e0 01 c0       	push   0xc001e084
c000c670:	e8 82 40 00 00       	call   c00106f7 <Krnl::panic(char const*)>
c000c675:	83 c4 10             	add    esp,0x10
c000c678:	e9 2b ff ff ff       	jmp    c000c5a8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c67d:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000c680:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c684:	89 14 85 00 1a 02 c0 	mov    DWORD PTR [eax*4-0x3ffde600],edx
c000c68b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c68f:	5b                   	pop    ebx
c000c690:	89 14 85 00 0a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf600],edx
c000c697:	89 f0                	mov    eax,esi
c000c699:	5e                   	pop    esi
c000c69a:	5f                   	pop    edi
c000c69b:	c3                   	ret    

c000c69c <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c69c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c6a0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c6a4:	c1 e0 04             	shl    eax,0x4
c000c6a7:	8d 50 10             	lea    edx,[eax+0x10]
c000c6aa:	39 88 00 1a 02 c0    	cmp    DWORD PTR [eax-0x3ffde600],ecx
c000c6b0:	74 08                	je     c000c6ba <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c6b2:	83 c0 04             	add    eax,0x4
c000c6b5:	39 d0                	cmp    eax,edx
c000c6b7:	75 f1                	jne    c000c6aa <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c6b9:	c3                   	ret    
c000c6ba:	c7 80 00 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde600],0x0
c000c6c4:	c7 80 00 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf600],0x0
c000c6ce:	eb e2                	jmp    c000c6b2 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c6d0 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c6d0:	53                   	push   ebx
c000c6d1:	83 ec 08             	sub    esp,0x8
c000c6d4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c6d8:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c6dd:	74 0e                	je     c000c6ed <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c6df:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c000c6e4:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c6eb:	75 37                	jne    c000c724 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c6ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6f1:	83 c0 20             	add    eax,0x20
c000c6f4:	c1 e0 04             	shl    eax,0x4
c000c6f7:	8d 50 10             	lea    edx,[eax+0x10]
c000c6fa:	39 98 00 1a 02 c0    	cmp    DWORD PTR [eax-0x3ffde600],ebx
c000c700:	74 0c                	je     c000c70e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c702:	83 c0 04             	add    eax,0x4
c000c705:	39 d0                	cmp    eax,edx
c000c707:	75 f1                	jne    c000c6fa <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c709:	83 c4 08             	add    esp,0x8
c000c70c:	5b                   	pop    ebx
c000c70d:	c3                   	ret    
c000c70e:	c7 80 00 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde600],0x0
c000c718:	c7 80 00 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf600],0x0
c000c722:	eb de                	jmp    c000c702 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c724:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c729:	7f 12                	jg     c000c73d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c72b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c72f:	31 c0                	xor    eax,eax
c000c731:	8a 81 60 f8 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe07a0]
c000c737:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c73b:	eb b0                	jmp    c000c6ed <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	68 75 e0 01 c0       	push   0xc001e075
c000c745:	e8 ad 3f 00 00       	call   c00106f7 <Krnl::panic(char const*)>
c000c74a:	83 c4 10             	add    esp,0x10
c000c74d:	eb 9e                	jmp    c000c6ed <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c74f <setupINTS()>:
c000c74f:	31 c0                	xor    eax,eax
c000c751:	c7 80 00 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde600],0x0
c000c75b:	c7 80 00 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf600],0x0
c000c765:	c7 80 04 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde5fc],0x0
c000c76f:	c7 80 04 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf5fc],0x0
c000c779:	c7 80 08 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde5f8],0x0
c000c783:	c7 80 08 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf5f8],0x0
c000c78d:	c7 80 0c 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde5f4],0x0
c000c797:	c7 80 0c 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf5f4],0x0
c000c7a1:	83 c0 10             	add    eax,0x10
c000c7a4:	3d 00 10 00 00       	cmp    eax,0x1000
c000c7a9:	75 a6                	jne    c000c751 <setupINTS()+0x2>
c000c7ab:	c3                   	ret    

c000c7ac <convertLegacyIRQNumber(int)>:
c000c7ac:	83 ec 0c             	sub    esp,0xc
c000c7af:	8b 15 f8 08 02 c0    	mov    edx,DWORD PTR ds:0xc00208f8
c000c7b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7b9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c7c0:	74 0f                	je     c000c7d1 <convertLegacyIRQNumber(int)+0x25>
c000c7c2:	83 f8 0f             	cmp    eax,0xf
c000c7c5:	7f 0e                	jg     c000c7d5 <convertLegacyIRQNumber(int)+0x29>
c000c7c7:	31 c9                	xor    ecx,ecx
c000c7c9:	8a 88 60 f8 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe07a0]
c000c7cf:	89 c8                	mov    eax,ecx
c000c7d1:	83 c4 0c             	add    esp,0xc
c000c7d4:	c3                   	ret    
c000c7d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c7d9:	83 ec 0c             	sub    esp,0xc
c000c7dc:	68 84 e0 01 c0       	push   0xc001e084
c000c7e1:	e8 11 3f 00 00       	call   c00106f7 <Krnl::panic(char const*)>
c000c7e6:	83 c4 10             	add    esp,0x10
c000c7e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7ed:	83 c4 0c             	add    esp,0xc
c000c7f0:	c3                   	ret    
c000c7f1:	90                   	nop

c000c7f2 <startGUI(void*)>:
c000c7f2:	55                   	push   ebp
c000c7f3:	89 e5                	mov    ebp,esp
c000c7f5:	53                   	push   ebx
c000c7f6:	83 ec 04             	sub    esp,0x4
c000c7f9:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c000c7fe:	48                   	dec    eax
c000c7ff:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c000c804:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c000c809:	85 c0                	test   eax,eax
c000c80b:	75 01                	jne    c000c80e <startGUI(void*)+0x1c>
c000c80d:	fb                   	sti    
c000c80e:	8b 1d f8 08 02 c0    	mov    ebx,DWORD PTR ds:0xc00208f8
c000c814:	83 ec 08             	sub    esp,0x8
c000c817:	6a 01                	push   0x1
c000c819:	68 e1 e0 01 c0       	push   0xc001e0e1
c000c81e:	e8 37 68 00 00       	call   c001305a <Thr::loadDLL(char const*, bool)>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	83 ec 08             	sub    esp,0x8
c000c829:	53                   	push   ebx
c000c82a:	50                   	push   eax
c000c82b:	e8 5b 6a 00 00       	call   c001328b <Thr::executeDLL(unsigned long, void*)>
c000c830:	83 c4 10             	add    esp,0x10
c000c833:	8b 1d f8 08 02 c0    	mov    ebx,DWORD PTR ds:0xc00208f8
c000c839:	83 ec 08             	sub    esp,0x8
c000c83c:	6a 01                	push   0x1
c000c83e:	68 fb e0 01 c0       	push   0xc001e0fb
c000c843:	e8 12 68 00 00       	call   c001305a <Thr::loadDLL(char const*, bool)>
c000c848:	83 c4 10             	add    esp,0x10
c000c84b:	83 ec 08             	sub    esp,0x8
c000c84e:	53                   	push   ebx
c000c84f:	50                   	push   eax
c000c850:	e8 36 6a 00 00       	call   c001328b <Thr::executeDLL(unsigned long, void*)>
c000c855:	83 c4 10             	add    esp,0x10
c000c858:	90                   	nop
c000c859:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c85c:	c9                   	leave  
c000c85d:	c3                   	ret    

c000c85e <startGUIVESA(void*)>:
c000c85e:	55                   	push   ebp
c000c85f:	89 e5                	mov    ebp,esp
c000c861:	53                   	push   ebx
c000c862:	83 ec 04             	sub    esp,0x4
c000c865:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c000c86a:	48                   	dec    eax
c000c86b:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c000c870:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c000c875:	85 c0                	test   eax,eax
c000c877:	75 01                	jne    c000c87a <startGUIVESA(void*)+0x1c>
c000c879:	fb                   	sti    
c000c87a:	8b 1d f8 08 02 c0    	mov    ebx,DWORD PTR ds:0xc00208f8
c000c880:	83 ec 08             	sub    esp,0x8
c000c883:	6a 01                	push   0x1
c000c885:	68 19 e1 01 c0       	push   0xc001e119
c000c88a:	e8 cb 67 00 00       	call   c001305a <Thr::loadDLL(char const*, bool)>
c000c88f:	83 c4 10             	add    esp,0x10
c000c892:	83 ec 08             	sub    esp,0x8
c000c895:	53                   	push   ebx
c000c896:	50                   	push   eax
c000c897:	e8 ef 69 00 00       	call   c001328b <Thr::executeDLL(unsigned long, void*)>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	8b 1d f8 08 02 c0    	mov    ebx,DWORD PTR ds:0xc00208f8
c000c8a5:	83 ec 08             	sub    esp,0x8
c000c8a8:	6a 01                	push   0x1
c000c8aa:	68 fb e0 01 c0       	push   0xc001e0fb
c000c8af:	e8 a6 67 00 00       	call   c001305a <Thr::loadDLL(char const*, bool)>
c000c8b4:	83 c4 10             	add    esp,0x10
c000c8b7:	83 ec 08             	sub    esp,0x8
c000c8ba:	53                   	push   ebx
c000c8bb:	50                   	push   eax
c000c8bc:	e8 ca 69 00 00       	call   c001328b <Thr::executeDLL(unsigned long, void*)>
c000c8c1:	83 c4 10             	add    esp,0x10
c000c8c4:	90                   	nop
c000c8c5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c8c8:	c9                   	leave  
c000c8c9:	c3                   	ret    

c000c8ca <sendKeyToTerminal(unsigned char)>:
c000c8ca:	55                   	push   ebp
c000c8cb:	89 e5                	mov    ebp,esp
c000c8cd:	83 ec 28             	sub    esp,0x28
c000c8d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8d3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c8d6:	8b 15 44 09 02 c0    	mov    edx,DWORD PTR ds:0xc0020944
c000c8dc:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c8df:	25 ff 00 00 00       	and    eax,0xff
c000c8e4:	83 ec 08             	sub    esp,0x8
c000c8e7:	50                   	push   eax
c000c8e8:	52                   	push   edx
c000c8e9:	e8 aa c8 ff ff       	call   c0009198 <VgaText::receiveKey(unsigned char)>
c000c8ee:	83 c4 10             	add    esp,0x10
c000c8f1:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c8f5:	0f 85 8f 00 00 00    	jne    c000c98a <sendKeyToTerminal(unsigned char)+0xc0>
c000c8fb:	fa                   	cli    
c000c8fc:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c000c901:	40                   	inc    eax
c000c902:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c000c907:	a1 c4 3d 02 c0       	mov    eax,ds:0xc0023dc4
c000c90c:	40                   	inc    eax
c000c90d:	a3 c4 3d 02 c0       	mov    ds:0xc0023dc4,eax
c000c912:	a1 00 2a 02 c0       	mov    eax,ds:0xc0022a00
c000c917:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c91a:	c7 05 00 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022a00,0x0
c000c924:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c928:	74 1f                	je     c000c949 <sendKeyToTerminal(unsigned char)+0x7f>
c000c92a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c92d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c930:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c933:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c936:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c939:	83 ec 0c             	sub    esp,0xc
c000c93c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c93f:	e8 cc 75 00 00       	call   c0013f10 <unblockTask(ThreadControlBlock*)>
c000c944:	83 c4 10             	add    esp,0x10
c000c947:	eb db                	jmp    c000c924 <sendKeyToTerminal(unsigned char)+0x5a>
c000c949:	a1 c4 3d 02 c0       	mov    eax,ds:0xc0023dc4
c000c94e:	48                   	dec    eax
c000c94f:	a3 c4 3d 02 c0       	mov    ds:0xc0023dc4,eax
c000c954:	a1 c4 3d 02 c0       	mov    eax,ds:0xc0023dc4
c000c959:	85 c0                	test   eax,eax
c000c95b:	75 18                	jne    c000c975 <sendKeyToTerminal(unsigned char)+0xab>
c000c95d:	a1 c0 3d 02 c0       	mov    eax,ds:0xc0023dc0
c000c962:	85 c0                	test   eax,eax
c000c964:	74 0f                	je     c000c975 <sendKeyToTerminal(unsigned char)+0xab>
c000c966:	c7 05 c0 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023dc0,0x0
c000c970:	e8 d7 70 00 00       	call   c0013a4c <schedule()>
c000c975:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c000c97a:	48                   	dec    eax
c000c97b:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c000c980:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c000c985:	85 c0                	test   eax,eax
c000c987:	75 01                	jne    c000c98a <sendKeyToTerminal(unsigned char)+0xc0>
c000c989:	fb                   	sti    
c000c98a:	90                   	nop
c000c98b:	c9                   	leave  
c000c98c:	c3                   	ret    

c000c98d <sendKeyboardToken(KeyboardToken)>:
c000c98d:	55                   	push   ebp
c000c98e:	89 e5                	mov    ebp,esp
c000c990:	83 ec 18             	sub    esp,0x18
c000c993:	e8 ab 3e 00 00       	call   c0010843 <Krnl::userIOReceived()>
c000c998:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c99b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c99e:	25 ff ff 00 00       	and    eax,0xffff
c000c9a3:	83 f2 01             	xor    edx,0x1
c000c9a6:	88 90 20 2a 02 c0    	mov    BYTE PTR [eax-0x3ffdd5e0],dl
c000c9ac:	a1 08 2a 02 c0       	mov    eax,ds:0xc0022a08
c000c9b1:	85 c0                	test   eax,eax
c000c9b3:	74 24                	je     c000c9d9 <sendKeyboardToken(KeyboardToken)+0x4c>
c000c9b5:	8b 0d 08 2a 02 c0    	mov    ecx,DWORD PTR ds:0xc0022a08
c000c9bb:	83 ec 04             	sub    esp,0x4
c000c9be:	68 20 2a 02 c0       	push   0xc0022a20
c000c9c3:	83 ec 08             	sub    esp,0x8
c000c9c6:	89 e2                	mov    edx,esp
c000c9c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9cb:	89 02                	mov    DWORD PTR [edx],eax
c000c9cd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c9d0:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c9d4:	ff d1                	call   ecx
c000c9d6:	83 c4 10             	add    esp,0x10
c000c9d9:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c9dd:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c9e0:	a0 28 2e 02 c0       	mov    al,ds:0xc0022e28
c000c9e5:	38 c2                	cmp    dl,al
c000c9e7:	74 1e                	je     c000ca07 <sendKeyboardToken(KeyboardToken)+0x7a>
c000c9e9:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c9ec:	a2 28 2e 02 c0       	mov    ds:0xc0022e28,al
c000c9f1:	a0 28 2e 02 c0       	mov    al,ds:0xc0022e28
c000c9f6:	25 ff 00 00 00       	and    eax,0xff
c000c9fb:	83 ec 0c             	sub    esp,0xc
c000c9fe:	50                   	push   eax
c000c9ff:	e8 e6 be ff ff       	call   c00088ea <setTerminalScrollLock(bool)>
c000ca04:	83 c4 10             	add    esp,0x10
c000ca07:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000ca0a:	84 c0                	test   al,al
c000ca0c:	0f 84 ae 00 00 00    	je     c000cac0 <sendKeyboardToken(KeyboardToken)+0x133>
c000ca12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca15:	66 3d 10 03          	cmp    ax,0x310
c000ca19:	75 06                	jne    c000ca21 <sendKeyboardToken(KeyboardToken)+0x94>
c000ca1b:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000ca21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca24:	66 3d 11 03          	cmp    ax,0x311
c000ca28:	75 06                	jne    c000ca30 <sendKeyboardToken(KeyboardToken)+0xa3>
c000ca2a:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000ca30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca33:	66 3d 12 03          	cmp    ax,0x312
c000ca37:	75 06                	jne    c000ca3f <sendKeyboardToken(KeyboardToken)+0xb2>
c000ca39:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000ca3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca42:	66 3d 13 03          	cmp    ax,0x313
c000ca46:	75 06                	jne    c000ca4e <sendKeyboardToken(KeyboardToken)+0xc1>
c000ca48:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000ca4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca51:	66 3d 14 03          	cmp    ax,0x314
c000ca55:	75 06                	jne    c000ca5d <sendKeyboardToken(KeyboardToken)+0xd0>
c000ca57:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000ca5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca60:	66 3d 15 03          	cmp    ax,0x315
c000ca64:	75 06                	jne    c000ca6c <sendKeyboardToken(KeyboardToken)+0xdf>
c000ca66:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000ca6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca6f:	66 3d 16 03          	cmp    ax,0x316
c000ca73:	75 06                	jne    c000ca7b <sendKeyboardToken(KeyboardToken)+0xee>
c000ca75:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000ca7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca7e:	66 3d 17 03          	cmp    ax,0x317
c000ca82:	75 06                	jne    c000ca8a <sendKeyboardToken(KeyboardToken)+0xfd>
c000ca84:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000ca8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca8d:	66 3d 18 03          	cmp    ax,0x318
c000ca91:	75 06                	jne    c000ca99 <sendKeyboardToken(KeyboardToken)+0x10c>
c000ca93:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000ca99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca9c:	66 3d 19 03          	cmp    ax,0x319
c000caa0:	75 06                	jne    c000caa8 <sendKeyboardToken(KeyboardToken)+0x11b>
c000caa2:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000caa8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caab:	66 3d 1a 03          	cmp    ax,0x31a
c000caaf:	0f 85 c9 00 00 00    	jne    c000cb7e <sendKeyboardToken(KeyboardToken)+0x1f1>
c000cab5:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000cabb:	e9 be 00 00 00       	jmp    c000cb7e <sendKeyboardToken(KeyboardToken)+0x1f1>
c000cac0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cac3:	66 3d 10 03          	cmp    ax,0x310
c000cac7:	75 0a                	jne    c000cad3 <sendKeyboardToken(KeyboardToken)+0x146>
c000cac9:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000cacf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cad3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cad6:	66 3d 11 03          	cmp    ax,0x311
c000cada:	75 0a                	jne    c000cae6 <sendKeyboardToken(KeyboardToken)+0x159>
c000cadc:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000cae2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cae6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cae9:	66 3d 12 03          	cmp    ax,0x312
c000caed:	75 0a                	jne    c000caf9 <sendKeyboardToken(KeyboardToken)+0x16c>
c000caef:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000caf5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000caf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cafc:	66 3d 13 03          	cmp    ax,0x313
c000cb00:	75 0a                	jne    c000cb0c <sendKeyboardToken(KeyboardToken)+0x17f>
c000cb02:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000cb08:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb0f:	66 3d 14 03          	cmp    ax,0x314
c000cb13:	75 0a                	jne    c000cb1f <sendKeyboardToken(KeyboardToken)+0x192>
c000cb15:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000cb1b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb22:	66 3d 15 03          	cmp    ax,0x315
c000cb26:	75 0a                	jne    c000cb32 <sendKeyboardToken(KeyboardToken)+0x1a5>
c000cb28:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000cb2e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb35:	66 3d 16 03          	cmp    ax,0x316
c000cb39:	75 0a                	jne    c000cb45 <sendKeyboardToken(KeyboardToken)+0x1b8>
c000cb3b:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000cb41:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb48:	66 3d 17 03          	cmp    ax,0x317
c000cb4c:	75 0a                	jne    c000cb58 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000cb4e:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000cb54:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb5b:	66 3d 18 03          	cmp    ax,0x318
c000cb5f:	75 0a                	jne    c000cb6b <sendKeyboardToken(KeyboardToken)+0x1de>
c000cb61:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000cb67:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb6e:	66 3d 19 03          	cmp    ax,0x319
c000cb72:	75 0a                	jne    c000cb7e <sendKeyboardToken(KeyboardToken)+0x1f1>
c000cb74:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000cb7a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb81:	66 3d 00 02          	cmp    ax,0x200
c000cb85:	75 2c                	jne    c000cbb3 <sendKeyboardToken(KeyboardToken)+0x226>
c000cb87:	a0 20 2e 02 c0       	mov    al,ds:0xc0022e20
c000cb8c:	83 f0 01             	xor    eax,0x1
c000cb8f:	84 c0                	test   al,al
c000cb91:	74 20                	je     c000cbb3 <sendKeyboardToken(KeyboardToken)+0x226>
c000cb93:	a1 f0 3d 02 c0       	mov    eax,ds:0xc0023df0
c000cb98:	6a 01                	push   0x1
c000cb9a:	6a 00                	push   0x0
c000cb9c:	68 f2 c7 00 c0       	push   0xc000c7f2
c000cba1:	50                   	push   eax
c000cba2:	e8 85 6c 00 00       	call   c001382c <Process::createThread(void (*)(void*), void*, int)>
c000cba7:	83 c4 10             	add    esp,0x10
c000cbaa:	c6 05 20 2e 02 c0 01 	mov    BYTE PTR ds:0xc0022e20,0x1
c000cbb1:	eb 33                	jmp    c000cbe6 <sendKeyboardToken(KeyboardToken)+0x259>
c000cbb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbb6:	66 3d 01 02          	cmp    ax,0x201
c000cbba:	75 2a                	jne    c000cbe6 <sendKeyboardToken(KeyboardToken)+0x259>
c000cbbc:	a0 20 2e 02 c0       	mov    al,ds:0xc0022e20
c000cbc1:	83 f0 01             	xor    eax,0x1
c000cbc4:	84 c0                	test   al,al
c000cbc6:	74 1e                	je     c000cbe6 <sendKeyboardToken(KeyboardToken)+0x259>
c000cbc8:	a1 f0 3d 02 c0       	mov    eax,ds:0xc0023df0
c000cbcd:	6a 01                	push   0x1
c000cbcf:	6a 00                	push   0x0
c000cbd1:	68 5e c8 00 c0       	push   0xc000c85e
c000cbd6:	50                   	push   eax
c000cbd7:	e8 50 6c 00 00       	call   c001382c <Process::createThread(void (*)(void*), void*, int)>
c000cbdc:	83 c4 10             	add    esp,0x10
c000cbdf:	c6 05 20 2e 02 c0 01 	mov    BYTE PTR ds:0xc0022e20,0x1
c000cbe6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbe9:	66 3d 1d 03          	cmp    ax,0x31d
c000cbed:	75 06                	jne    c000cbf5 <sendKeyboardToken(KeyboardToken)+0x268>
c000cbef:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000cbf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbf8:	66 3d 1c 03          	cmp    ax,0x31c
c000cbfc:	75 06                	jne    c000cc04 <sendKeyboardToken(KeyboardToken)+0x277>
c000cbfe:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000cc04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc07:	66 3d 1b 03          	cmp    ax,0x31b
c000cc0b:	75 06                	jne    c000cc13 <sendKeyboardToken(KeyboardToken)+0x286>
c000cc0d:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000cc13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc16:	66 3d 1e 03          	cmp    ax,0x31e
c000cc1a:	75 06                	jne    c000cc22 <sendKeyboardToken(KeyboardToken)+0x295>
c000cc1c:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000cc22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc25:	66 3d 1f 03          	cmp    ax,0x31f
c000cc29:	75 06                	jne    c000cc31 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000cc2b:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000cc31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc34:	66 3d 1a 03          	cmp    ax,0x31a
c000cc38:	75 06                	jne    c000cc40 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000cc3a:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000cc40:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000cc44:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cc47:	83 f0 01             	xor    eax,0x1
c000cc4a:	84 c0                	test   al,al
c000cc4c:	74 7b                	je     c000ccc9 <sendKeyboardToken(KeyboardToken)+0x33c>
c000cc4e:	a0 21 2b 02 c0       	mov    al,ds:0xc0022b21
c000cc53:	84 c0                	test   al,al
c000cc55:	74 43                	je     c000cc9a <sendKeyboardToken(KeyboardToken)+0x30d>
c000cc57:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cc5b:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000cc5f:	74 2d                	je     c000cc8e <sendKeyboardToken(KeyboardToken)+0x301>
c000cc61:	8b 15 24 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022e24
c000cc67:	89 d0                	mov    eax,edx
c000cc69:	c1 e0 02             	shl    eax,0x2
c000cc6c:	01 d0                	add    eax,edx
c000cc6e:	01 c0                	add    eax,eax
c000cc70:	a3 24 2e 02 c0       	mov    ds:0xc0022e24,eax
c000cc75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc78:	25 ff ff 00 00       	and    eax,0xffff
c000cc7d:	8d 50 d0             	lea    edx,[eax-0x30]
c000cc80:	a1 24 2e 02 c0       	mov    eax,ds:0xc0022e24
c000cc85:	01 d0                	add    eax,edx
c000cc87:	a3 24 2e 02 c0       	mov    ds:0xc0022e24,eax
c000cc8c:	eb 71                	jmp    c000ccff <sendKeyboardToken(KeyboardToken)+0x372>
c000cc8e:	c7 05 24 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022e24,0x0
c000cc98:	eb 65                	jmp    c000ccff <sendKeyboardToken(KeyboardToken)+0x372>
c000cc9a:	a1 24 2e 02 c0       	mov    eax,ds:0xc0022e24
c000cc9f:	85 c0                	test   eax,eax
c000cca1:	74 1a                	je     c000ccbd <sendKeyboardToken(KeyboardToken)+0x330>
c000cca3:	a1 24 2e 02 c0       	mov    eax,ds:0xc0022e24
c000cca8:	25 ff 00 00 00       	and    eax,0xff
c000ccad:	83 ec 0c             	sub    esp,0xc
c000ccb0:	50                   	push   eax
c000ccb1:	e8 14 fc ff ff       	call   c000c8ca <sendKeyToTerminal(unsigned char)>
c000ccb6:	83 c4 10             	add    esp,0x10
c000ccb9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ccbd:	c7 05 24 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022e24,0x0
c000ccc7:	eb 36                	jmp    c000ccff <sendKeyboardToken(KeyboardToken)+0x372>
c000ccc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cccc:	66 3d 01 01          	cmp    ax,0x101
c000ccd0:	75 2d                	jne    c000ccff <sendKeyboardToken(KeyboardToken)+0x372>
c000ccd2:	a1 24 2e 02 c0       	mov    eax,ds:0xc0022e24
c000ccd7:	85 c0                	test   eax,eax
c000ccd9:	74 1a                	je     c000ccf5 <sendKeyboardToken(KeyboardToken)+0x368>
c000ccdb:	a1 24 2e 02 c0       	mov    eax,ds:0xc0022e24
c000cce0:	25 ff 00 00 00       	and    eax,0xff
c000cce5:	83 ec 0c             	sub    esp,0xc
c000cce8:	50                   	push   eax
c000cce9:	e8 dc fb ff ff       	call   c000c8ca <sendKeyToTerminal(unsigned char)>
c000ccee:	83 c4 10             	add    esp,0x10
c000ccf1:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ccf5:	c7 05 24 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022e24,0x0
c000ccff:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cd02:	83 f0 01             	xor    eax,0x1
c000cd05:	84 c0                	test   al,al
c000cd07:	74 4e                	je     c000cd57 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cd09:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cd0c:	83 f0 01             	xor    eax,0x1
c000cd0f:	84 c0                	test   al,al
c000cd11:	74 44                	je     c000cd57 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cd13:	a0 20 2b 02 c0       	mov    al,ds:0xc0022b20
c000cd18:	83 f0 01             	xor    eax,0x1
c000cd1b:	84 c0                	test   al,al
c000cd1d:	74 38                	je     c000cd57 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cd1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd22:	66 83 f8 1f          	cmp    ax,0x1f
c000cd26:	76 09                	jbe    c000cd31 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000cd28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd2b:	66 83 f8 7e          	cmp    ax,0x7e
c000cd2f:	76 12                	jbe    c000cd43 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000cd31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd34:	66 83 f8 0a          	cmp    ax,0xa
c000cd38:	74 09                	je     c000cd43 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000cd3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd3d:	66 83 f8 08          	cmp    ax,0x8
c000cd41:	75 14                	jne    c000cd57 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cd43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd46:	25 ff 00 00 00       	and    eax,0xff
c000cd4b:	83 ec 0c             	sub    esp,0xc
c000cd4e:	50                   	push   eax
c000cd4f:	e8 76 fb ff ff       	call   c000c8ca <sendKeyToTerminal(unsigned char)>
c000cd54:	83 c4 10             	add    esp,0x10
c000cd57:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cd5a:	83 f0 01             	xor    eax,0x1
c000cd5d:	84 c0                	test   al,al
c000cd5f:	74 51                	je     c000cdb2 <sendKeyboardToken(KeyboardToken)+0x425>
c000cd61:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cd64:	83 f0 01             	xor    eax,0x1
c000cd67:	84 c0                	test   al,al
c000cd69:	74 47                	je     c000cdb2 <sendKeyboardToken(KeyboardToken)+0x425>
c000cd6b:	a0 20 2b 02 c0       	mov    al,ds:0xc0022b20
c000cd70:	84 c0                	test   al,al
c000cd72:	74 3e                	je     c000cdb2 <sendKeyboardToken(KeyboardToken)+0x425>
c000cd74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd77:	66 83 f8 3f          	cmp    ax,0x3f
c000cd7b:	76 35                	jbe    c000cdb2 <sendKeyboardToken(KeyboardToken)+0x425>
c000cd7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd80:	66 83 f8 7f          	cmp    ax,0x7f
c000cd84:	77 2c                	ja     c000cdb2 <sendKeyboardToken(KeyboardToken)+0x425>
c000cd86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd89:	88 c2                	mov    dl,al
c000cd8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd8e:	66 83 f8 5f          	cmp    ax,0x5f
c000cd92:	76 04                	jbe    c000cd98 <sendKeyboardToken(KeyboardToken)+0x40b>
c000cd94:	b0 20                	mov    al,0x20
c000cd96:	eb 02                	jmp    c000cd9a <sendKeyboardToken(KeyboardToken)+0x40d>
c000cd98:	b0 00                	mov    al,0x0
c000cd9a:	29 c2                	sub    edx,eax
c000cd9c:	88 d0                	mov    al,dl
c000cd9e:	83 e8 40             	sub    eax,0x40
c000cda1:	25 ff 00 00 00       	and    eax,0xff
c000cda6:	83 ec 0c             	sub    esp,0xc
c000cda9:	50                   	push   eax
c000cdaa:	e8 1b fb ff ff       	call   c000c8ca <sendKeyToTerminal(unsigned char)>
c000cdaf:	83 c4 10             	add    esp,0x10
c000cdb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdb5:	66 3d 00 03          	cmp    ax,0x300
c000cdb9:	75 0f                	jne    c000cdca <sendKeyboardToken(KeyboardToken)+0x43d>
c000cdbb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cdbe:	83 f0 01             	xor    eax,0x1
c000cdc1:	84 c0                	test   al,al
c000cdc3:	74 05                	je     c000cdca <sendKeyboardToken(KeyboardToken)+0x43d>
c000cdc5:	e8 21 bb ff ff       	call   c00088eb <doTerminalCycle()>
c000cdca:	90                   	nop
c000cdcb:	c9                   	leave  
c000cdcc:	c3                   	ret    

c000cdcd <clearInternalKeybuffer(VgaText*)>:
c000cdcd:	55                   	push   ebp
c000cdce:	89 e5                	mov    ebp,esp
c000cdd0:	83 ec 08             	sub    esp,0x8
c000cdd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdd6:	05 b2 00 00 00       	add    eax,0xb2
c000cddb:	83 ec 0c             	sub    esp,0xc
c000cdde:	50                   	push   eax
c000cddf:	e8 7c 37 ff ff       	call   c0000560 <strlen>
c000cde4:	83 c4 10             	add    esp,0x10
c000cde7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cdea:	81 c2 b2 00 00 00    	add    edx,0xb2
c000cdf0:	83 ec 04             	sub    esp,0x4
c000cdf3:	50                   	push   eax
c000cdf4:	6a 00                	push   0x0
c000cdf6:	52                   	push   edx
c000cdf7:	e8 f4 36 ff ff       	call   c00004f0 <memset>
c000cdfc:	83 c4 10             	add    esp,0x10
c000cdff:	90                   	nop
c000ce00:	c9                   	leave  
c000ce01:	c3                   	ret    

c000ce02 <readKeyboard(VgaText*, char*, unsigned long)>:
c000ce02:	55                   	push   ebp
c000ce03:	89 e5                	mov    ebp,esp
c000ce05:	83 ec 18             	sub    esp,0x18
c000ce08:	a1 08 2a 02 c0       	mov    eax,ds:0xc0022a08
c000ce0d:	85 c0                	test   eax,eax
c000ce0f:	74 2a                	je     c000ce3b <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000ce11:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000ce17:	8b 0d 08 2a 02 c0    	mov    ecx,DWORD PTR ds:0xc0022a08
c000ce1d:	83 ec 04             	sub    esp,0x4
c000ce20:	68 20 2a 02 c0       	push   0xc0022a20
c000ce25:	83 ec 08             	sub    esp,0x8
c000ce28:	89 e2                	mov    edx,esp
c000ce2a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000ce2d:	89 02                	mov    DWORD PTR [edx],eax
c000ce2f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000ce32:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000ce36:	ff d1                	call   ecx
c000ce38:	83 c4 10             	add    esp,0x10
c000ce3b:	fb                   	sti    
c000ce3c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000ce43:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000ce47:	0f 84 a1 00 00 00    	je     c000ceee <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000ce4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce50:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000ce56:	84 c0                	test   al,al
c000ce58:	75 28                	jne    c000ce82 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000ce5a:	fa                   	cli    
c000ce5b:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c000ce60:	40                   	inc    eax
c000ce61:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c000ce66:	e8 e1 6b 00 00       	call   c0013a4c <schedule()>
c000ce6b:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c000ce70:	48                   	dec    eax
c000ce71:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c000ce76:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c000ce7b:	85 c0                	test   eax,eax
c000ce7d:	75 ce                	jne    c000ce4d <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000ce7f:	fb                   	sti    
c000ce80:	eb cb                	jmp    c000ce4d <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000ce82:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ce85:	8d 50 01             	lea    edx,[eax+0x1]
c000ce88:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000ce8b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ce8e:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000ce94:	88 10                	mov    BYTE PTR [eax],dl
c000ce96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce99:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000ce9f:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000cea2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cea5:	05 b2 00 00 00       	add    eax,0xb2
c000ceaa:	83 ec 0c             	sub    esp,0xc
c000cead:	50                   	push   eax
c000ceae:	e8 ad 36 ff ff       	call   c0000560 <strlen>
c000ceb3:	83 c4 10             	add    esp,0x10
c000ceb6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ceb9:	81 c2 b2 00 00 00    	add    edx,0xb2
c000cebf:	8d 4a 01             	lea    ecx,[edx+0x1]
c000cec2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cec5:	81 c2 b2 00 00 00    	add    edx,0xb2
c000cecb:	83 ec 04             	sub    esp,0x4
c000cece:	50                   	push   eax
c000cecf:	51                   	push   ecx
c000ced0:	52                   	push   edx
c000ced1:	e8 2a 35 ff ff       	call   c0000400 <memmove>
c000ced6:	83 c4 10             	add    esp,0x10
c000ced9:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000cedc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000cedf:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000cee3:	0f 85 5a ff ff ff    	jne    c000ce43 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000cee9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ceec:	eb 03                	jmp    c000cef1 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000ceee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cef1:	c9                   	leave  
c000cef2:	c3                   	ret    
c000cef3:	90                   	nop

c000cef4 <Keyboard::Keyboard(char const*)>:
c000cef4:	83 ec 0c             	sub    esp,0xc
c000cef7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cefb:	83 ec 08             	sub    esp,0x8
c000cefe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf02:	50                   	push   eax
c000cf03:	e8 78 f2 ff ff       	call   c000c180 <Device::Device(char const*)>
c000cf08:	83 c4 10             	add    esp,0x10
c000cf0b:	ba 3c e1 01 c0       	mov    edx,0xc001e13c
c000cf10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf14:	89 10                	mov    DWORD PTR [eax],edx
c000cf16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf1a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000cf24:	c6 05 04 2a 02 c0 01 	mov    BYTE PTR ds:0xc0022a04,0x1
c000cf2b:	90                   	nop
c000cf2c:	83 c4 0c             	add    esp,0xc
c000cf2f:	c3                   	ret    

c000cf30 <Keyboard::~Keyboard()>:
c000cf30:	83 ec 0c             	sub    esp,0xc
c000cf33:	ba 3c e1 01 c0       	mov    edx,0xc001e13c
c000cf38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf3c:	89 10                	mov    DWORD PTR [eax],edx
c000cf3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf42:	83 ec 0c             	sub    esp,0xc
c000cf45:	50                   	push   eax
c000cf46:	e8 9f ef ff ff       	call   c000beea <Device::~Device()>
c000cf4b:	83 c4 10             	add    esp,0x10
c000cf4e:	90                   	nop
c000cf4f:	83 c4 0c             	add    esp,0xc
c000cf52:	c3                   	ret    
c000cf53:	90                   	nop

c000cf54 <Keyboard::~Keyboard()>:
c000cf54:	83 ec 0c             	sub    esp,0xc
c000cf57:	83 ec 0c             	sub    esp,0xc
c000cf5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf5e:	e8 cd ff ff ff       	call   c000cf30 <Keyboard::~Keyboard()>
c000cf63:	83 c4 10             	add    esp,0x10
c000cf66:	83 ec 08             	sub    esp,0x8
c000cf69:	68 5c 01 00 00       	push   0x15c
c000cf6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf72:	e8 3b db ff ff       	call   c000aab2 <operator delete(void*, unsigned long)>
c000cf77:	83 c4 10             	add    esp,0x10
c000cf7a:	83 c4 0c             	add    esp,0xc
c000cf7d:	c3                   	ret    

c000cf7e <LogicalDisk::close(int, int, void*)>:
c000cf7e:	83 c8 ff             	or     eax,0xffffffff
c000cf81:	c3                   	ret    

c000cf82 <LogicalDisk::~LogicalDisk()>:
c000cf82:	83 ec 0c             	sub    esp,0xc
c000cf85:	ba b4 e1 01 c0       	mov    edx,0xc001e1b4
c000cf8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf8e:	89 10                	mov    DWORD PTR [eax],edx
c000cf90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf94:	83 ec 0c             	sub    esp,0xc
c000cf97:	50                   	push   eax
c000cf98:	e8 4d ef ff ff       	call   c000beea <Device::~Device()>
c000cf9d:	83 c4 10             	add    esp,0x10
c000cfa0:	90                   	nop
c000cfa1:	83 c4 0c             	add    esp,0xc
c000cfa4:	c3                   	ret    
c000cfa5:	90                   	nop

c000cfa6 <LogicalDisk::~LogicalDisk()>:
c000cfa6:	83 ec 0c             	sub    esp,0xc
c000cfa9:	83 ec 0c             	sub    esp,0xc
c000cfac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb0:	e8 cd ff ff ff       	call   c000cf82 <LogicalDisk::~LogicalDisk()>
c000cfb5:	83 c4 10             	add    esp,0x10
c000cfb8:	83 ec 08             	sub    esp,0x8
c000cfbb:	68 74 01 00 00       	push   0x174
c000cfc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfc4:	e8 e9 da ff ff       	call   c000aab2 <operator delete(void*, unsigned long)>
c000cfc9:	83 c4 10             	add    esp,0x10
c000cfcc:	83 c4 0c             	add    esp,0xc
c000cfcf:	c3                   	ret    

c000cfd0 <LogicalDisk::open(int, int, void*)>:
c000cfd0:	83 ec 18             	sub    esp,0x18
c000cfd3:	68 68 e1 01 c0       	push   0xc001e168
c000cfd8:	e8 1a 37 00 00       	call   c00106f7 <Krnl::panic(char const*)>
c000cfdd:	83 c8 ff             	or     eax,0xffffffff
c000cfe0:	83 c4 1c             	add    esp,0x1c
c000cfe3:	c3                   	ret    

c000cfe4 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000cfe4:	53                   	push   ebx
c000cfe5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cfe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cfed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cff1:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000cff7:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000cffd:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d003:	77 10                	ja     c000d015 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d005:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d00b:	89 d3                	mov    ebx,edx
c000d00d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d013:	72 05                	jb     c000d01a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d015:	83 c8 ff             	or     eax,0xffffffff
c000d018:	89 c2                	mov    edx,eax
c000d01a:	5b                   	pop    ebx
c000d01b:	c3                   	ret    

c000d01c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d01c:	56                   	push   esi
c000d01d:	83 c8 ff             	or     eax,0xffffffff
c000d020:	53                   	push   ebx
c000d021:	89 c2                	mov    edx,eax
c000d023:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d027:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d02b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d02f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d035:	77 27                	ja     c000d05e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d037:	89 d8                	mov    eax,ebx
c000d039:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d03f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d045:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d04a:	89 c2                	mov    edx,eax
c000d04c:	73 10                	jae    c000d05e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d04e:	89 c8                	mov    eax,ecx
c000d050:	89 da                	mov    edx,ebx
c000d052:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d058:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d05e:	5b                   	pop    ebx
c000d05f:	5e                   	pop    esi
c000d060:	c3                   	ret    
c000d061:	90                   	nop

c000d062 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d062:	83 ec 1c             	sub    esp,0x1c
c000d065:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d069:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d06d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d071:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d075:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d079:	89 04 24             	mov    DWORD PTR [esp],eax
c000d07c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d080:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d084:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d088:	83 ec 08             	sub    esp,0x8
c000d08b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d08f:	50                   	push   eax
c000d090:	e8 eb f0 ff ff       	call   c000c180 <Device::Device(char const*)>
c000d095:	83 c4 10             	add    esp,0x10
c000d098:	ba b4 e1 01 c0       	mov    edx,0xc001e1b4
c000d09d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d0a1:	89 10                	mov    DWORD PTR [eax],edx
c000d0a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d0a7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d0ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d0b2:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d0b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d0bd:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d0c7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d0cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d0cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d0d3:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d0d9:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d0df:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d0e3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d0e6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d0ea:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d0f0:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d0f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d0fa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d0fe:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d104:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d108:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000d112:	90                   	nop
c000d113:	83 c4 1c             	add    esp,0x1c
c000d116:	c3                   	ret    
c000d117:	90                   	nop

c000d118 <LogicalDisk::assignDriveLetter()>:
c000d118:	55                   	push   ebp
c000d119:	57                   	push   edi
c000d11a:	56                   	push   esi
c000d11b:	53                   	push   ebx
c000d11c:	83 ec 14             	sub    esp,0x14
c000d11f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d123:	8b 3d 40 2e 02 c0    	mov    edi,DWORD PTR ds:0xc0022e40
c000d129:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d12f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d133:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000d139:	8b 3d 44 2e 02 c0    	mov    edi,DWORD PTR ds:0xc0022e44
c000d13f:	3c 01                	cmp    al,0x1
c000d141:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000d145:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000d149:	19 c0                	sbb    eax,eax
c000d14b:	83 e0 02             	and    eax,0x2
c000d14e:	83 c0 41             	add    eax,0x41
c000d151:	0f be e8             	movsx  ebp,al
c000d154:	3c 43                	cmp    al,0x43
c000d156:	75 10                	jne    c000d168 <LogicalDisk::assignDriveLetter()+0x50>
c000d158:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d15f:	75 5d                	jne    c000d1be <LogicalDisk::assignDriveLetter()+0xa6>
c000d161:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000d166:	75 56                	jne    c000d1be <LogicalDisk::assignDriveLetter()+0xa6>
c000d168:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d16b:	ba 01 00 00 00       	mov    edx,0x1
c000d170:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000d174:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000d178:	d3 e2                	shl    edx,cl
c000d17a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d17e:	89 d7                	mov    edi,edx
c000d180:	89 d6                	mov    esi,edx
c000d182:	c1 ff 1f             	sar    edi,0x1f
c000d185:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000d189:	21 f9                	and    ecx,edi
c000d18b:	09 d1                	or     ecx,edx
c000d18d:	75 2f                	jne    c000d1be <LogicalDisk::assignDriveLetter()+0xa6>
c000d18f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d193:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d197:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d19d:	09 f2                	or     edx,esi
c000d19f:	89 15 40 2e 02 c0    	mov    DWORD PTR ds:0xc0022e40,edx
c000d1a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1a9:	09 fa                	or     edx,edi
c000d1ab:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000d1af:	89 15 44 2e 02 c0    	mov    DWORD PTR ds:0xc0022e44,edx
c000d1b5:	89 1c bd 60 2e 02 c0 	mov    DWORD PTR [edi*4-0x3ffdd1a0],ebx
c000d1bc:	eb 08                	jmp    c000d1c6 <LogicalDisk::assignDriveLetter()+0xae>
c000d1be:	45                   	inc    ebp
c000d1bf:	40                   	inc    eax
c000d1c0:	3c 5b                	cmp    al,0x5b
c000d1c2:	75 90                	jne    c000d154 <LogicalDisk::assignDriveLetter()+0x3c>
c000d1c4:	31 c0                	xor    eax,eax
c000d1c6:	83 c4 14             	add    esp,0x14
c000d1c9:	5b                   	pop    ebx
c000d1ca:	5e                   	pop    esi
c000d1cb:	5f                   	pop    edi
c000d1cc:	5d                   	pop    ebp
c000d1cd:	c3                   	ret    

c000d1ce <LogicalDisk::mount()>:
c000d1ce:	56                   	push   esi
c000d1cf:	53                   	push   ebx
c000d1d0:	53                   	push   ebx
c000d1d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d1d5:	8b 1d f4 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209f4
c000d1db:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000d1e5:	85 db                	test   ebx,ebx
c000d1e7:	74 27                	je     c000d210 <LogicalDisk::mount()+0x42>
c000d1e9:	51                   	push   ecx
c000d1ea:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d1f1:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d1f3:	83 e8 41             	sub    eax,0x41
c000d1f6:	50                   	push   eax
c000d1f7:	56                   	push   esi
c000d1f8:	53                   	push   ebx
c000d1f9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d1fc:	83 c4 10             	add    esp,0x10
c000d1ff:	84 c0                	test   al,al
c000d201:	74 08                	je     c000d20b <LogicalDisk::mount()+0x3d>
c000d203:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000d209:	eb 07                	jmp    c000d212 <LogicalDisk::mount()+0x44>
c000d20b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d20e:	eb d5                	jmp    c000d1e5 <LogicalDisk::mount()+0x17>
c000d210:	31 c0                	xor    eax,eax
c000d212:	5a                   	pop    edx
c000d213:	5b                   	pop    ebx
c000d214:	5e                   	pop    esi
c000d215:	c3                   	ret    

c000d216 <LogicalDisk::unmount()>:
c000d216:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d21a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000d224:	c3                   	ret    
c000d225:	90                   	nop

c000d226 <LogicalDisk::eject()>:
c000d226:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d22a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d230:	8b 10                	mov    edx,DWORD PTR [eax]
c000d232:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d236:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d239:	90                   	nop

c000d23a <LogicalDisk::unassignDriveLetter()>:
c000d23a:	57                   	push   edi
c000d23b:	56                   	push   esi
c000d23c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d240:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d247:	84 c9                	test   cl,cl
c000d249:	75 0f                	jne    c000d25a <LogicalDisk::unassignDriveLetter()+0x20>
c000d24b:	c7 44 24 0c 8c e1 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e18c
c000d253:	5e                   	pop    esi
c000d254:	5f                   	pop    edi
c000d255:	e9 9d 34 00 00       	jmp    c00106f7 <Krnl::panic(char const*)>
c000d25a:	83 e9 41             	sub    ecx,0x41
c000d25d:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d264:	b8 01 00 00 00       	mov    eax,0x1
c000d269:	c7 04 8d 60 2e 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdd1a0],0x0
c000d274:	d3 e0                	shl    eax,cl
c000d276:	89 c7                	mov    edi,eax
c000d278:	f7 d0                	not    eax
c000d27a:	c1 ff 1f             	sar    edi,0x1f
c000d27d:	21 05 40 2e 02 c0    	and    DWORD PTR ds:0xc0022e40,eax
c000d283:	89 fe                	mov    esi,edi
c000d285:	f7 d6                	not    esi
c000d287:	21 35 44 2e 02 c0    	and    DWORD PTR ds:0xc0022e44,esi
c000d28d:	5e                   	pop    esi
c000d28e:	5f                   	pop    edi
c000d28f:	c3                   	ret    

c000d290 <LogicalDisk::read(unsigned long long, int, void*)>:
c000d290:	57                   	push   edi
c000d291:	56                   	push   esi
c000d292:	53                   	push   ebx
c000d293:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d297:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d29b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d29f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d2a3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d2a9:	77 41                	ja     c000d2ec <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d2ab:	99                   	cdq    
c000d2ac:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d2b2:	01 c8                	add    eax,ecx
c000d2b4:	11 da                	adc    edx,ebx
c000d2b6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d2bc:	19 d7                	sbb    edi,edx
c000d2be:	72 33                	jb     c000d2f3 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d2c0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d2c6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d2cc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d2d0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d2d4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d2da:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d2e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2e4:	5b                   	pop    ebx
c000d2e5:	5e                   	pop    esi
c000d2e6:	5f                   	pop    edi
c000d2e7:	e9 32 0a 00 00       	jmp    c000dd1e <VCache::read(unsigned long long, int, void*)>
c000d2ec:	b8 05 00 00 00       	mov    eax,0x5
c000d2f1:	eb 05                	jmp    c000d2f8 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d2f3:	b8 07 00 00 00       	mov    eax,0x7
c000d2f8:	5b                   	pop    ebx
c000d2f9:	5e                   	pop    esi
c000d2fa:	5f                   	pop    edi
c000d2fb:	c3                   	ret    

c000d2fc <LogicalDisk::write(unsigned long long, int, void*)>:
c000d2fc:	57                   	push   edi
c000d2fd:	56                   	push   esi
c000d2fe:	53                   	push   ebx
c000d2ff:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d303:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d307:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d30b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d30f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d315:	77 41                	ja     c000d358 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d317:	99                   	cdq    
c000d318:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d31e:	01 c8                	add    eax,ecx
c000d320:	11 da                	adc    edx,ebx
c000d322:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d328:	19 d7                	sbb    edi,edx
c000d32a:	72 33                	jb     c000d35f <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d32c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d332:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d338:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d33c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d340:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d346:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d34c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d350:	5b                   	pop    ebx
c000d351:	5e                   	pop    esi
c000d352:	5f                   	pop    edi
c000d353:	e9 cc 08 00 00       	jmp    c000dc24 <VCache::write(unsigned long long, int, void*)>
c000d358:	b8 05 00 00 00       	mov    eax,0x5
c000d35d:	eb 05                	jmp    c000d364 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d35f:	b8 07 00 00 00       	mov    eax,0x7
c000d364:	5b                   	pop    ebx
c000d365:	5e                   	pop    esi
c000d366:	5f                   	pop    edi
c000d367:	c3                   	ret    

c000d368 <Mouse::Mouse(char const*)>:
c000d368:	83 ec 0c             	sub    esp,0xc
c000d36b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d36f:	83 ec 08             	sub    esp,0x8
c000d372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d376:	50                   	push   eax
c000d377:	e8 04 ee ff ff       	call   c000c180 <Device::Device(char const*)>
c000d37c:	83 c4 10             	add    esp,0x10
c000d37f:	ba e0 e1 01 c0       	mov    edx,0xc001e1e0
c000d384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d388:	89 10                	mov    DWORD PTR [eax],edx
c000d38a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d38e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d398:	90                   	nop
c000d399:	83 c4 0c             	add    esp,0xc
c000d39c:	c3                   	ret    
c000d39d:	90                   	nop
c000d39e:	66 90                	xchg   ax,ax

c000d3a0 <Mouse::~Mouse()>:
c000d3a0:	83 ec 0c             	sub    esp,0xc
c000d3a3:	ba e0 e1 01 c0       	mov    edx,0xc001e1e0
c000d3a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3ac:	89 10                	mov    DWORD PTR [eax],edx
c000d3ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3b2:	83 ec 0c             	sub    esp,0xc
c000d3b5:	50                   	push   eax
c000d3b6:	e8 2f eb ff ff       	call   c000beea <Device::~Device()>
c000d3bb:	83 c4 10             	add    esp,0x10
c000d3be:	90                   	nop
c000d3bf:	83 c4 0c             	add    esp,0xc
c000d3c2:	c3                   	ret    
c000d3c3:	90                   	nop

c000d3c4 <Mouse::~Mouse()>:
c000d3c4:	83 ec 0c             	sub    esp,0xc
c000d3c7:	83 ec 0c             	sub    esp,0xc
c000d3ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ce:	e8 cd ff ff ff       	call   c000d3a0 <Mouse::~Mouse()>
c000d3d3:	83 c4 10             	add    esp,0x10
c000d3d6:	83 ec 08             	sub    esp,0x8
c000d3d9:	68 58 01 00 00       	push   0x158
c000d3de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3e2:	e8 cb d6 ff ff       	call   c000aab2 <operator delete(void*, unsigned long)>
c000d3e7:	83 c4 10             	add    esp,0x10
c000d3ea:	83 c4 0c             	add    esp,0xc
c000d3ed:	c3                   	ret    

c000d3ee <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d3ee:	55                   	push   ebp
c000d3ef:	57                   	push   edi
c000d3f0:	56                   	push   esi
c000d3f1:	53                   	push   ebx
c000d3f2:	81 ec 28 01 00 00    	sub    esp,0x128
c000d3f8:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000d3ff:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000d406:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000d40d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000d414:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d418:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d41c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d423:	e8 54 ee ff ff       	call   c000c27c <Device::getName()>
c000d428:	5a                   	pop    edx
c000d429:	59                   	pop    ecx
c000d42a:	50                   	push   eax
c000d42b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d42f:	55                   	push   ebp
c000d430:	e8 eb 31 ff ff       	call   c0000620 <strcpy>
c000d435:	5b                   	pop    ebx
c000d436:	58                   	pop    eax
c000d437:	68 04 e2 01 c0       	push   0xc001e204
c000d43c:	55                   	push   ebp
c000d43d:	e8 9e 33 ff ff       	call   c00007e0 <strcat>
c000d442:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000d449:	e8 cb a9 ff ff       	call   c0007e19 <malloc>
c000d44e:	83 c4 0c             	add    esp,0xc
c000d451:	89 c3                	mov    ebx,eax
c000d453:	57                   	push   edi
c000d454:	56                   	push   esi
c000d455:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d459:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d45d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d464:	55                   	push   ebp
c000d465:	50                   	push   eax
c000d466:	e8 f7 fb ff ff       	call   c000d062 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d46b:	83 c4 14             	add    esp,0x14
c000d46e:	53                   	push   ebx
c000d46f:	e8 a4 fc ff ff       	call   c000d118 <LogicalDisk::assignDriveLetter()>
c000d474:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d477:	e8 52 fd ff ff       	call   c000d1ce <LogicalDisk::mount()>
c000d47c:	58                   	pop    eax
c000d47d:	5a                   	pop    edx
c000d47e:	53                   	push   ebx
c000d47f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d486:	e8 5d eb ff ff       	call   c000bfe8 <Device::addChild(Device*)>
c000d48b:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d491:	5b                   	pop    ebx
c000d492:	5e                   	pop    esi
c000d493:	5f                   	pop    edi
c000d494:	5d                   	pop    ebp
c000d495:	c3                   	ret    

c000d496 <createPartitionsForDisk(PhysicalDisk*)>:
c000d496:	55                   	push   ebp
c000d497:	57                   	push   edi
c000d498:	56                   	push   esi
c000d499:	53                   	push   ebx
c000d49a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d4a0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d4a7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d4ad:	3d 00 02 00 00       	cmp    eax,0x200
c000d4b2:	74 27                	je     c000d4db <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d4b4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d4ba:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d4c0:	83 ec 10             	sub    esp,0x10
c000d4c3:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d4c7:	99                   	cdq    
c000d4c8:	c1 e6 0a             	shl    esi,0xa
c000d4cb:	52                   	push   edx
c000d4cc:	89 fd                	mov    ebp,edi
c000d4ce:	50                   	push   eax
c000d4cf:	55                   	push   ebp
c000d4d0:	56                   	push   esi
c000d4d1:	e8 9a ec 00 00       	call   c001c170 <__udivdi3>
c000d4d6:	e9 b1 00 00 00       	jmp    c000d58c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d4db:	83 ec 0c             	sub    esp,0xc
c000d4de:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d4e0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d4e4:	56                   	push   esi
c000d4e5:	6a 01                	push   0x1
c000d4e7:	6a 00                	push   0x0
c000d4e9:	6a 00                	push   0x0
c000d4eb:	53                   	push   ebx
c000d4ec:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d4ef:	83 c4 20             	add    esp,0x20
c000d4f2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d4fa:	75 0a                	jne    c000d506 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d4fc:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d504:	74 2c                	je     c000d532 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d506:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d50c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d512:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d518:	83 ec 10             	sub    esp,0x10
c000d51b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d51f:	89 f7                	mov    edi,esi
c000d521:	c1 e0 0a             	shl    eax,0xa
c000d524:	c1 ff 1f             	sar    edi,0x1f
c000d527:	57                   	push   edi
c000d528:	56                   	push   esi
c000d529:	52                   	push   edx
c000d52a:	50                   	push   eax
c000d52b:	e8 40 ec 00 00       	call   c001c170 <__udivdi3>
c000d530:	eb 5a                	jmp    c000d58c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d532:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d539:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000d540:	83 e1 7f             	and    ecx,0x7f
c000d543:	83 e0 7f             	and    eax,0x7f
c000d546:	01 c1                	add    ecx,eax
c000d548:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d54f:	83 e0 7f             	and    eax,0x7f
c000d552:	01 c1                	add    ecx,eax
c000d554:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d55b:	83 e0 7f             	and    eax,0x7f
c000d55e:	00 c1                	add    cl,al
c000d560:	74 41                	je     c000d5a3 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000d562:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d568:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d56e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d574:	83 ec 10             	sub    esp,0x10
c000d577:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d57b:	89 f7                	mov    edi,esi
c000d57d:	c1 e0 0a             	shl    eax,0xa
c000d580:	c1 ff 1f             	sar    edi,0x1f
c000d583:	57                   	push   edi
c000d584:	56                   	push   esi
c000d585:	52                   	push   edx
c000d586:	50                   	push   eax
c000d587:	e8 e4 eb 00 00       	call   c001c170 <__udivdi3>
c000d58c:	83 c4 14             	add    esp,0x14
c000d58f:	52                   	push   edx
c000d590:	50                   	push   eax
c000d591:	6a 00                	push   0x0
c000d593:	6a 00                	push   0x0
c000d595:	53                   	push   ebx
c000d596:	e8 53 fe ff ff       	call   c000d3ee <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d59b:	83 c4 20             	add    esp,0x20
c000d59e:	e9 79 01 00 00       	jmp    c000d71c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000d5a3:	89 f0                	mov    eax,esi
c000d5a5:	31 f6                	xor    esi,esi
c000d5a7:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d5ae:	75 02                	jne    c000d5b2 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000d5b0:	89 f1                	mov    ecx,esi
c000d5b2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d5b9:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000d5c0:	c1 e2 08             	shl    edx,0x8
c000d5c3:	c1 e7 10             	shl    edi,0x10
c000d5c6:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000d5ce:	09 fa                	or     edx,edi
c000d5d0:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000d5d8:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000d5df:	83 c0 10             	add    eax,0x10
c000d5e2:	09 fa                	or     edx,edi
c000d5e4:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000d5eb:	c1 e7 18             	shl    edi,0x18
c000d5ee:	09 fa                	or     edx,edi
c000d5f0:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000d5f7:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000d5fb:	c1 e7 10             	shl    edi,0x10
c000d5fe:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d605:	c1 e2 08             	shl    edx,0x8
c000d608:	09 fa                	or     edx,edi
c000d60a:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000d611:	09 fa                	or     edx,edi
c000d613:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000d61a:	c1 e7 18             	shl    edi,0x18
c000d61d:	09 fa                	or     edx,edi
c000d61f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000d623:	46                   	inc    esi
c000d624:	83 fe 04             	cmp    esi,0x4
c000d627:	0f 85 7a ff ff ff    	jne    c000d5a7 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000d62d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d631:	83 f0 01             	xor    eax,0x1
c000d634:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d638:	75 57                	jne    c000d691 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d63a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d63e:	83 f0 01             	xor    eax,0x1
c000d641:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d645:	75 4a                	jne    c000d691 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d647:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d64b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d653:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d65b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d661:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d667:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d66d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d671:	89 f7                	mov    edi,esi
c000d673:	c1 e0 0a             	shl    eax,0xa
c000d676:	c1 ff 1f             	sar    edi,0x1f
c000d679:	57                   	push   edi
c000d67a:	56                   	push   esi
c000d67b:	52                   	push   edx
c000d67c:	50                   	push   eax
c000d67d:	e8 ee ea 00 00       	call   c001c170 <__udivdi3>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d689:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d68d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d691:	84 c9                	test   cl,cl
c000d693:	74 53                	je     c000d6e8 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d695:	0f b6 c9             	movzx  ecx,cl
c000d698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d69c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6a0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d6a4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d6a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6ac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6b0:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d6b4:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d6b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d6bc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d6c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d6c8:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d6cc:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d6d0:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d6d4:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d6d8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d6dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d6e0:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d6e4:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d6e8:	31 ed                	xor    ebp,ebp
c000d6ea:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d6ee:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d6f2:	89 f8                	mov    eax,edi
c000d6f4:	09 f0                	or     eax,esi
c000d6f6:	74 1e                	je     c000d716 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d6f8:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d6fc:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d700:	89 d1                	mov    ecx,edx
c000d702:	09 c1                	or     ecx,eax
c000d704:	74 10                	je     c000d716 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d706:	83 ec 0c             	sub    esp,0xc
c000d709:	57                   	push   edi
c000d70a:	56                   	push   esi
c000d70b:	52                   	push   edx
c000d70c:	50                   	push   eax
c000d70d:	53                   	push   ebx
c000d70e:	e8 db fc ff ff       	call   c000d3ee <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d713:	83 c4 20             	add    esp,0x20
c000d716:	45                   	inc    ebp
c000d717:	83 fd 04             	cmp    ebp,0x4
c000d71a:	75 ce                	jne    c000d6ea <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d71c:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d722:	5b                   	pop    ebx
c000d723:	5e                   	pop    esi
c000d724:	5f                   	pop    edi
c000d725:	5d                   	pop    ebp
c000d726:	c3                   	ret    
c000d727:	90                   	nop

c000d728 <Serial::Serial(char const*)>:
c000d728:	83 ec 0c             	sub    esp,0xc
c000d72b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d72f:	83 ec 08             	sub    esp,0x8
c000d732:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d736:	50                   	push   eax
c000d737:	e8 44 ea ff ff       	call   c000c180 <Device::Device(char const*)>
c000d73c:	83 c4 10             	add    esp,0x10
c000d73f:	ba 18 e2 01 c0       	mov    edx,0xc001e218
c000d744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d748:	89 10                	mov    DWORD PTR [eax],edx
c000d74a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d74e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d758:	90                   	nop
c000d759:	83 c4 0c             	add    esp,0xc
c000d75c:	c3                   	ret    
c000d75d:	90                   	nop
c000d75e:	66 90                	xchg   ax,ax

c000d760 <Serial::~Serial()>:
c000d760:	83 ec 0c             	sub    esp,0xc
c000d763:	ba 18 e2 01 c0       	mov    edx,0xc001e218
c000d768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d76c:	89 10                	mov    DWORD PTR [eax],edx
c000d76e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d772:	83 ec 0c             	sub    esp,0xc
c000d775:	50                   	push   eax
c000d776:	e8 6f e7 ff ff       	call   c000beea <Device::~Device()>
c000d77b:	83 c4 10             	add    esp,0x10
c000d77e:	90                   	nop
c000d77f:	83 c4 0c             	add    esp,0xc
c000d782:	c3                   	ret    
c000d783:	90                   	nop

c000d784 <Serial::~Serial()>:
c000d784:	83 ec 0c             	sub    esp,0xc
c000d787:	83 ec 0c             	sub    esp,0xc
c000d78a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d78e:	e8 cd ff ff ff       	call   c000d760 <Serial::~Serial()>
c000d793:	83 c4 10             	add    esp,0x10
c000d796:	83 ec 08             	sub    esp,0x8
c000d799:	68 58 01 00 00       	push   0x158
c000d79e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7a2:	e8 0b d3 ff ff       	call   c000aab2 <operator delete(void*, unsigned long)>
c000d7a7:	83 c4 10             	add    esp,0x10
c000d7aa:	83 c4 0c             	add    esp,0xc
c000d7ad:	c3                   	ret    
c000d7ae:	66 90                	xchg   ax,ax

c000d7b0 <Timer::Timer(char const*)>:
c000d7b0:	83 ec 0c             	sub    esp,0xc
c000d7b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7b7:	83 ec 08             	sub    esp,0x8
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	50                   	push   eax
c000d7bf:	e8 bc e9 ff ff       	call   c000c180 <Device::Device(char const*)>
c000d7c4:	83 c4 10             	add    esp,0x10
c000d7c7:	ba 5c e2 01 c0       	mov    edx,0xc001e25c
c000d7cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7d0:	89 10                	mov    DWORD PTR [eax],edx
c000d7d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7d6:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d7e0:	90                   	nop
c000d7e1:	83 c4 0c             	add    esp,0xc
c000d7e4:	c3                   	ret    
c000d7e5:	90                   	nop
c000d7e6:	66 90                	xchg   ax,ax

c000d7e8 <Timer::~Timer()>:
c000d7e8:	83 ec 0c             	sub    esp,0xc
c000d7eb:	ba 5c e2 01 c0       	mov    edx,0xc001e25c
c000d7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f4:	89 10                	mov    DWORD PTR [eax],edx
c000d7f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7fa:	83 ec 0c             	sub    esp,0xc
c000d7fd:	50                   	push   eax
c000d7fe:	e8 e7 e6 ff ff       	call   c000beea <Device::~Device()>
c000d803:	83 c4 10             	add    esp,0x10
c000d806:	90                   	nop
c000d807:	83 c4 0c             	add    esp,0xc
c000d80a:	c3                   	ret    
c000d80b:	90                   	nop

c000d80c <Timer::~Timer()>:
c000d80c:	83 ec 0c             	sub    esp,0xc
c000d80f:	83 ec 0c             	sub    esp,0xc
c000d812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d816:	e8 cd ff ff ff       	call   c000d7e8 <Timer::~Timer()>
c000d81b:	83 c4 10             	add    esp,0x10
c000d81e:	83 ec 08             	sub    esp,0x8
c000d821:	68 5c 01 00 00       	push   0x15c
c000d826:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d82a:	e8 83 d2 ff ff       	call   c000aab2 <operator delete(void*, unsigned long)>
c000d82f:	83 c4 10             	add    esp,0x10
c000d832:	83 c4 0c             	add    esp,0xc
c000d835:	c3                   	ret    

c000d836 <Timer::read()>:
c000d836:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d83a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d840:	c3                   	ret    

c000d841 <setupTimer(int)>:
c000d841:	53                   	push   ebx
c000d842:	83 ec 14             	sub    esp,0x14
c000d845:	68 5c 01 00 00       	push   0x15c
c000d84a:	e8 ca a5 ff ff       	call   c0007e19 <malloc>
c000d84f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d852:	89 c3                	mov    ebx,eax
c000d854:	e8 87 e2 00 00       	call   c001bae0 <PIT::PIT()>
c000d859:	58                   	pop    eax
c000d85a:	5a                   	pop    edx
c000d85b:	53                   	push   ebx
c000d85c:	ff 35 f8 08 02 c0    	push   DWORD PTR ds:0xc00208f8
c000d862:	e8 81 e7 ff ff       	call   c000bfe8 <Device::addChild(Device*)>
c000d867:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d869:	6a 00                	push   0x0
c000d86b:	6a 00                	push   0x0
c000d86d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d871:	53                   	push   ebx
c000d872:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d875:	89 d8                	mov    eax,ebx
c000d877:	83 c4 28             	add    esp,0x28
c000d87a:	5b                   	pop    ebx
c000d87b:	c3                   	ret    

c000d87c <timerHandler(unsigned int)>:
c000d87c:	56                   	push   esi
c000d87d:	53                   	push   ebx
c000d87e:	51                   	push   ecx
c000d87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d883:	01 05 cc 2e 02 c0    	add    DWORD PTR ds:0xc0022ecc,eax
c000d889:	80 3d fd 08 02 c0 00 	cmp    BYTE PTR ds:0xc00208fd,0x0
c000d890:	0f 84 4a 01 00 00    	je     c000d9e0 <timerHandler(unsigned int)+0x164>
c000d896:	fa                   	cli    
c000d897:	ff 05 c8 3d 02 c0    	inc    DWORD PTR ds:0xc0023dc8
c000d89d:	83 ec 0c             	sub    esp,0xc
c000d8a0:	ff 05 c4 3d 02 c0    	inc    DWORD PTR ds:0xc0023dc4
c000d8a6:	68 d8 3d 02 c0       	push   0xc0023dd8
c000d8ab:	e8 90 ee 00 00       	call   c001c740 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d8b0:	83 c4 10             	add    esp,0x10
c000d8b3:	84 c0                	test   al,al
c000d8b5:	0f 85 a1 00 00 00    	jne    c000d95c <timerHandler(unsigned int)+0xe0>
c000d8bb:	83 ec 0c             	sub    esp,0xc
c000d8be:	68 d8 3d 02 c0       	push   0xc0023dd8
c000d8c3:	e8 94 ee 00 00       	call   c001c75c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d8c8:	83 c4 10             	add    esp,0x10
c000d8cb:	89 c6                	mov    esi,eax
c000d8cd:	8d 76 00             	lea    esi,[esi+0x0]
c000d8d0:	83 ec 0c             	sub    esp,0xc
c000d8d3:	68 d8 3d 02 c0       	push   0xc0023dd8
c000d8d8:	e8 7f ee 00 00       	call   c001c75c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d8dd:	c7 04 24 d8 3d 02 c0 	mov    DWORD PTR [esp],0xc0023dd8
c000d8e4:	89 c3                	mov    ebx,eax
c000d8e6:	e8 79 ee 00 00       	call   c001c764 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d8eb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d8ee:	83 c4 10             	add    esp,0x10
c000d8f1:	3b 05 cc 2e 02 c0    	cmp    eax,DWORD PTR ds:0xc0022ecc
c000d8f7:	77 23                	ja     c000d91c <timerHandler(unsigned int)+0xa0>
c000d8f9:	83 ec 0c             	sub    esp,0xc
c000d8fc:	53                   	push   ebx
c000d8fd:	e8 0e 66 00 00       	call   c0013f10 <unblockTask(ThreadControlBlock*)>
c000d902:	83 c4 10             	add    esp,0x10
c000d905:	39 de                	cmp    esi,ebx
c000d907:	75 27                	jne    c000d930 <timerHandler(unsigned int)+0xb4>
c000d909:	83 ec 0c             	sub    esp,0xc
c000d90c:	68 d8 3d 02 c0       	push   0xc0023dd8
c000d911:	e8 46 ee 00 00       	call   c001c75c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d916:	89 c6                	mov    esi,eax
c000d918:	eb 12                	jmp    c000d92c <timerHandler(unsigned int)+0xb0>
c000d91a:	66 90                	xchg   ax,ax
c000d91c:	52                   	push   edx
c000d91d:	52                   	push   edx
c000d91e:	53                   	push   ebx
c000d91f:	68 d8 3d 02 c0       	push   0xc0023dd8
c000d924:	e8 f3 ee 00 00       	call   c001c81c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d929:	8d 76 00             	lea    esi,[esi+0x0]
c000d92c:	83 c4 10             	add    esp,0x10
c000d92f:	90                   	nop
c000d930:	83 ec 0c             	sub    esp,0xc
c000d933:	68 d8 3d 02 c0       	push   0xc0023dd8
c000d938:	e8 03 ee 00 00       	call   c001c740 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d93d:	83 c4 10             	add    esp,0x10
c000d940:	84 c0                	test   al,al
c000d942:	75 18                	jne    c000d95c <timerHandler(unsigned int)+0xe0>
c000d944:	83 ec 0c             	sub    esp,0xc
c000d947:	68 d8 3d 02 c0       	push   0xc0023dd8
c000d94c:	e8 0b ee 00 00       	call   c001c75c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d951:	83 c4 10             	add    esp,0x10
c000d954:	39 f0                	cmp    eax,esi
c000d956:	0f 85 74 ff ff ff    	jne    c000d8d0 <timerHandler(unsigned int)+0x54>
c000d95c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d961:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d965:	74 41                	je     c000d9a8 <timerHandler(unsigned int)+0x12c>
c000d967:	80 3d fc 08 02 c0 00 	cmp    BYTE PTR ds:0xc00208fc,0x0
c000d96e:	74 38                	je     c000d9a8 <timerHandler(unsigned int)+0x12c>
c000d970:	fa                   	cli    
c000d971:	ff 05 c8 3d 02 c0    	inc    DWORD PTR ds:0xc0023dc8
c000d977:	a1 cc 2e 02 c0       	mov    eax,ds:0xc0022ecc
c000d97c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d982:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d985:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d98b:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d98e:	72 08                	jb     c000d998 <timerHandler(unsigned int)+0x11c>
c000d990:	e8 b7 60 00 00       	call   c0013a4c <schedule()>
c000d995:	8d 76 00             	lea    esi,[esi+0x0]
c000d998:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c000d99d:	48                   	dec    eax
c000d99e:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c000d9a3:	75 03                	jne    c000d9a8 <timerHandler(unsigned int)+0x12c>
c000d9a5:	fb                   	sti    
c000d9a6:	66 90                	xchg   ax,ax
c000d9a8:	a1 c4 3d 02 c0       	mov    eax,ds:0xc0023dc4
c000d9ad:	48                   	dec    eax
c000d9ae:	a3 c4 3d 02 c0       	mov    ds:0xc0023dc4,eax
c000d9b3:	75 1b                	jne    c000d9d0 <timerHandler(unsigned int)+0x154>
c000d9b5:	83 3d c0 3d 02 c0 00 	cmp    DWORD PTR ds:0xc0023dc0,0x0
c000d9bc:	74 12                	je     c000d9d0 <timerHandler(unsigned int)+0x154>
c000d9be:	c7 05 c0 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023dc0,0x0
c000d9c8:	e8 7f 60 00 00       	call   c0013a4c <schedule()>
c000d9cd:	8d 76 00             	lea    esi,[esi+0x0]
c000d9d0:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c000d9d5:	48                   	dec    eax
c000d9d6:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c000d9db:	75 03                	jne    c000d9e0 <timerHandler(unsigned int)+0x164>
c000d9dd:	fb                   	sti    
c000d9de:	66 90                	xchg   ax,ax
c000d9e0:	58                   	pop    eax
c000d9e1:	5b                   	pop    ebx
c000d9e2:	5e                   	pop    esi
c000d9e3:	c3                   	ret    

c000d9e4 <VCache::VCache(PhysicalDisk*)>:
c000d9e4:	53                   	push   ebx
c000d9e5:	83 ec 18             	sub    esp,0x18
c000d9e8:	ba 8c e2 01 c0       	mov    edx,0xc001e28c
c000d9ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9f1:	89 10                	mov    DWORD PTR [eax],edx
c000d9f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9f7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d9fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da02:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000da09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da0d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000da14:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000da1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da1f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000da26:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000da2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da31:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000da38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da3c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000da40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da44:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000da4b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000da52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da56:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000da5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da5e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000da62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da66:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000da6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da6e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000da75:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000da7d:	83 ec 0c             	sub    esp,0xc
c000da80:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000da84:	e8 90 a3 ff ff       	call   c0007e19 <malloc>
c000da89:	83 c4 10             	add    esp,0x10
c000da8c:	89 c3                	mov    ebx,eax
c000da8e:	83 ec 0c             	sub    esp,0xc
c000da91:	53                   	push   ebx
c000da92:	e8 81 5d 00 00       	call   c0013818 <Mutex::Mutex()>
c000da97:	83 c4 10             	add    esp,0x10
c000da9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da9e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000daa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daa5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000daa9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000daac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dab0:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000dab7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dabb:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000dac1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dac5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dac8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dacc:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000dad2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000dad8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dadc:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000dadf:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000dae2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dae6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000daea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000daee:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000daf4:	05 00 01 00 00       	add    eax,0x100
c000daf9:	c1 e0 04             	shl    eax,0x4
c000dafc:	83 ec 0c             	sub    esp,0xc
c000daff:	50                   	push   eax
c000db00:	e8 14 a3 ff ff       	call   c0007e19 <malloc>
c000db05:	83 c4 10             	add    esp,0x10
c000db08:	89 c2                	mov    edx,eax
c000db0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db0e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000db11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db15:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000db1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db20:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000db24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000db28:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000db2e:	c1 e0 06             	shl    eax,0x6
c000db31:	83 ec 0c             	sub    esp,0xc
c000db34:	50                   	push   eax
c000db35:	e8 df a2 ff ff       	call   c0007e19 <malloc>
c000db3a:	83 c4 10             	add    esp,0x10
c000db3d:	89 c2                	mov    edx,eax
c000db3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db43:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000db46:	90                   	nop
c000db47:	83 c4 18             	add    esp,0x18
c000db4a:	5b                   	pop    ebx
c000db4b:	c3                   	ret    

c000db4c <VCache::invalidateReadBuffer()>:
c000db4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db50:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000db56:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000db5a:	c3                   	ret    
c000db5b:	90                   	nop

c000db5c <VCache::writeWriteBuffer()>:
c000db5c:	53                   	push   ebx
c000db5d:	83 ec 08             	sub    esp,0x8
c000db60:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000db64:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000db68:	74 1e                	je     c000db88 <VCache::writeWriteBuffer()+0x2c>
c000db6a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000db6d:	83 ec 0c             	sub    esp,0xc
c000db70:	8b 10                	mov    edx,DWORD PTR [eax]
c000db72:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000db75:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000db78:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000db7b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000db7e:	50                   	push   eax
c000db7f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000db82:	83 c4 20             	add    esp,0x20
c000db85:	8d 76 00             	lea    esi,[esi+0x0]
c000db88:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000db8f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000db96:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000db9a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000dba1:	83 c4 08             	add    esp,0x8
c000dba4:	5b                   	pop    ebx
c000dba5:	c3                   	ret    
c000dba6:	66 90                	xchg   ax,ax

c000dba8 <VCache::~VCache()>:
c000dba8:	83 ec 0c             	sub    esp,0xc
c000dbab:	ba 8c e2 01 c0       	mov    edx,0xc001e28c
c000dbb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbb4:	89 10                	mov    DWORD PTR [eax],edx
c000dbb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbba:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000dbbd:	84 c0                	test   al,al
c000dbbf:	74 0f                	je     c000dbd0 <VCache::~VCache()+0x28>
c000dbc1:	83 ec 0c             	sub    esp,0xc
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	e8 8f ff ff ff       	call   c000db5c <VCache::writeWriteBuffer()>
c000dbcd:	83 c4 10             	add    esp,0x10
c000dbd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbd4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000dbd7:	83 ec 0c             	sub    esp,0xc
c000dbda:	50                   	push   eax
c000dbdb:	e8 49 a2 ff ff       	call   c0007e29 <free>
c000dbe0:	83 c4 10             	add    esp,0x10
c000dbe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbe7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000dbea:	83 ec 0c             	sub    esp,0xc
c000dbed:	50                   	push   eax
c000dbee:	e8 36 a2 ff ff       	call   c0007e29 <free>
c000dbf3:	83 c4 10             	add    esp,0x10
c000dbf6:	90                   	nop
c000dbf7:	83 c4 0c             	add    esp,0xc
c000dbfa:	c3                   	ret    
c000dbfb:	90                   	nop

c000dbfc <VCache::~VCache()>:
c000dbfc:	83 ec 0c             	sub    esp,0xc
c000dbff:	83 ec 0c             	sub    esp,0xc
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	e8 9d ff ff ff       	call   c000dba8 <VCache::~VCache()>
c000dc0b:	83 c4 10             	add    esp,0x10
c000dc0e:	83 ec 08             	sub    esp,0x8
c000dc11:	6a 44                	push   0x44
c000dc13:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc17:	e8 96 ce ff ff       	call   c000aab2 <operator delete(void*, unsigned long)>
c000dc1c:	83 c4 10             	add    esp,0x10
c000dc1f:	83 c4 0c             	add    esp,0xc
c000dc22:	c3                   	ret    
c000dc23:	90                   	nop

c000dc24 <VCache::write(unsigned long long, int, void*)>:
c000dc24:	55                   	push   ebp
c000dc25:	31 c0                	xor    eax,eax
c000dc27:	57                   	push   edi
c000dc28:	56                   	push   esi
c000dc29:	53                   	push   ebx
c000dc2a:	83 ec 0c             	sub    esp,0xc
c000dc2d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000dc31:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000dc35:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000dc39:	8d 76 00             	lea    esi,[esi+0x0]
c000dc3c:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c000dc40:	7d 1a                	jge    c000dc5c <VCache::write(unsigned long long, int, void*)+0x38>
c000dc42:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000dc45:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000dc4b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000dc4f:	0f af c8             	imul   ecx,eax
c000dc52:	01 ca                	add    edx,ecx
c000dc54:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000dc56:	40                   	inc    eax
c000dc57:	eb e3                	jmp    c000dc3c <VCache::write(unsigned long long, int, void*)+0x18>
c000dc59:	8d 76 00             	lea    esi,[esi+0x0]
c000dc5c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000dc60:	74 0a                	je     c000dc6c <VCache::write(unsigned long long, int, void*)+0x48>
c000dc62:	53                   	push   ebx
c000dc63:	e8 e4 fe ff ff       	call   c000db4c <VCache::invalidateReadBuffer()>
c000dc68:	58                   	pop    eax
c000dc69:	8d 76 00             	lea    esi,[esi+0x0]
c000dc6c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dc70:	74 5e                	je     c000dcd0 <VCache::write(unsigned long long, int, void*)+0xac>
c000dc72:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c000dc75:	89 e8                	mov    eax,ebp
c000dc77:	99                   	cdq    
c000dc78:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000dc7b:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000dc7e:	89 c1                	mov    ecx,eax
c000dc80:	89 d0                	mov    eax,edx
c000dc82:	31 f1                	xor    ecx,esi
c000dc84:	31 f8                	xor    eax,edi
c000dc86:	09 c1                	or     ecx,eax
c000dc88:	75 3a                	jne    c000dcc4 <VCache::write(unsigned long long, int, void*)+0xa0>
c000dc8a:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c000dc8f:	75 33                	jne    c000dcc4 <VCache::write(unsigned long long, int, void*)+0xa0>
c000dc91:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dc94:	89 ef                	mov    edi,ebp
c000dc96:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dc9c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dca0:	0f af f9             	imul   edi,ecx
c000dca3:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000dca6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dca8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dcab:	40                   	inc    eax
c000dcac:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000dcaf:	83 f8 40             	cmp    eax,0x40
c000dcb2:	75 60                	jne    c000dd14 <VCache::write(unsigned long long, int, void*)+0xf0>
c000dcb4:	83 ec 0c             	sub    esp,0xc
c000dcb7:	53                   	push   ebx
c000dcb8:	e8 9f fe ff ff       	call   c000db5c <VCache::writeWriteBuffer()>
c000dcbd:	83 c4 10             	add    esp,0x10
c000dcc0:	eb 52                	jmp    c000dd14 <VCache::write(unsigned long long, int, void*)+0xf0>
c000dcc2:	66 90                	xchg   ax,ax
c000dcc4:	83 ec 0c             	sub    esp,0xc
c000dcc7:	53                   	push   ebx
c000dcc8:	e8 8f fe ff ff       	call   c000db5c <VCache::writeWriteBuffer()>
c000dccd:	83 c4 10             	add    esp,0x10
c000dcd0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dcd3:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c000dcd8:	7f 22                	jg     c000dcfc <VCache::write(unsigned long long, int, void*)+0xd8>
c000dcda:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000dcdd:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c000dce0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000dce4:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000dce8:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000dceb:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dcee:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dcf4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dcf8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dcfa:	eb 18                	jmp    c000dd14 <VCache::write(unsigned long long, int, void*)+0xf0>
c000dcfc:	83 ec 0c             	sub    esp,0xc
c000dcff:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd01:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dd05:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dd09:	57                   	push   edi
c000dd0a:	56                   	push   esi
c000dd0b:	50                   	push   eax
c000dd0c:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000dd0f:	83 c4 20             	add    esp,0x20
c000dd12:	66 90                	xchg   ax,ax
c000dd14:	83 c4 0c             	add    esp,0xc
c000dd17:	31 c0                	xor    eax,eax
c000dd19:	5b                   	pop    ebx
c000dd1a:	5e                   	pop    esi
c000dd1b:	5f                   	pop    edi
c000dd1c:	5d                   	pop    ebp
c000dd1d:	c3                   	ret    

c000dd1e <VCache::read(unsigned long long, int, void*)>:
c000dd1e:	55                   	push   ebp
c000dd1f:	31 c0                	xor    eax,eax
c000dd21:	57                   	push   edi
c000dd22:	56                   	push   esi
c000dd23:	53                   	push   ebx
c000dd24:	83 ec 1c             	sub    esp,0x1c
c000dd27:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dd2b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000dd2f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000dd33:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000dd37:	90                   	nop
c000dd38:	39 e8                	cmp    eax,ebp
c000dd3a:	7d 18                	jge    c000dd54 <VCache::read(unsigned long long, int, void*)+0x36>
c000dd3c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000dd3f:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000dd45:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000dd49:	0f af c8             	imul   ecx,eax
c000dd4c:	01 ca                	add    edx,ecx
c000dd4e:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000dd50:	40                   	inc    eax
c000dd51:	eb e5                	jmp    c000dd38 <VCache::read(unsigned long long, int, void*)+0x1a>
c000dd53:	90                   	nop
c000dd54:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dd58:	74 0e                	je     c000dd68 <VCache::read(unsigned long long, int, void*)+0x4a>
c000dd5a:	83 ec 0c             	sub    esp,0xc
c000dd5d:	53                   	push   ebx
c000dd5e:	e8 f9 fd ff ff       	call   c000db5c <VCache::writeWriteBuffer()>
c000dd63:	83 c4 10             	add    esp,0x10
c000dd66:	66 90                	xchg   ax,ax
c000dd68:	83 fd 01             	cmp    ebp,0x1
c000dd6b:	0f 85 87 00 00 00    	jne    c000ddf8 <VCache::read(unsigned long long, int, void*)+0xda>
c000dd71:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dd74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dd78:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000dd7f:	75 77                	jne    c000ddf8 <VCache::read(unsigned long long, int, void*)+0xda>
c000dd81:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000dd84:	89 e9                	mov    ecx,ebp
c000dd86:	f7 d9                	neg    ecx
c000dd88:	89 c8                	mov    eax,ecx
c000dd8a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000dd8e:	c1 f8 1f             	sar    eax,0x1f
c000dd91:	21 f1                	and    ecx,esi
c000dd93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dd97:	89 c8                	mov    eax,ecx
c000dd99:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dd9d:	21 f9                	and    ecx,edi
c000dd9f:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000dda3:	89 ca                	mov    edx,ecx
c000dda5:	74 0d                	je     c000ddb4 <VCache::read(unsigned long long, int, void*)+0x96>
c000dda7:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c000ddaa:	75 08                	jne    c000ddb4 <VCache::read(unsigned long long, int, void*)+0x96>
c000ddac:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000ddaf:	74 27                	je     c000ddd8 <VCache::read(unsigned long long, int, void*)+0xba>
c000ddb1:	8d 76 00             	lea    esi,[esi+0x0]
c000ddb4:	83 ec 0c             	sub    esp,0xc
c000ddb7:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000ddbb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ddbf:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000ddc2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ddc5:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000ddc7:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ddca:	55                   	push   ebp
c000ddcb:	52                   	push   edx
c000ddcc:	50                   	push   eax
c000ddcd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ddd1:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000ddd4:	83 c4 20             	add    esp,0x20
c000ddd7:	90                   	nop
c000ddd8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dddb:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000dddf:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dde5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000dde8:	48                   	dec    eax
c000dde9:	21 c6                	and    esi,eax
c000ddeb:	0f af f1             	imul   esi,ecx
c000ddee:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000ddf1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ddf3:	eb 23                	jmp    c000de18 <VCache::read(unsigned long long, int, void*)+0xfa>
c000ddf5:	8d 76 00             	lea    esi,[esi+0x0]
c000ddf8:	83 ec 0c             	sub    esp,0xc
c000ddfb:	53                   	push   ebx
c000ddfc:	e8 4b fd ff ff       	call   c000db4c <VCache::invalidateReadBuffer()>
c000de01:	5a                   	pop    edx
c000de02:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000de05:	8b 10                	mov    edx,DWORD PTR [eax]
c000de07:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000de0b:	55                   	push   ebp
c000de0c:	57                   	push   edi
c000de0d:	56                   	push   esi
c000de0e:	50                   	push   eax
c000de0f:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000de12:	83 c4 20             	add    esp,0x20
c000de15:	8d 76 00             	lea    esi,[esi+0x0]
c000de18:	83 c4 1c             	add    esp,0x1c
c000de1b:	31 c0                	xor    eax,eax
c000de1d:	5b                   	pop    ebx
c000de1e:	5e                   	pop    esi
c000de1f:	5f                   	pop    edi
c000de20:	5d                   	pop    ebp
c000de21:	c3                   	ret    

c000de22 <Video::putrect(int, int, int, int, unsigned int)>:
c000de22:	55                   	push   ebp
c000de23:	57                   	push   edi
c000de24:	56                   	push   esi
c000de25:	53                   	push   ebx
c000de26:	83 ec 1c             	sub    esp,0x1c
c000de29:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000de2d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000de35:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000de39:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000de3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de41:	01 df                	add    edi,ebx
c000de43:	39 fb                	cmp    ebx,edi
c000de45:	7d 1f                	jge    c000de66 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000de47:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000de4b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000de4f:	7d 12                	jge    c000de63 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000de51:	8b 16                	mov    edx,DWORD PTR [esi]
c000de53:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de57:	53                   	push   ebx
c000de58:	55                   	push   ebp
c000de59:	45                   	inc    ebp
c000de5a:	56                   	push   esi
c000de5b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000de5e:	83 c4 10             	add    esp,0x10
c000de61:	eb e8                	jmp    c000de4b <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000de63:	43                   	inc    ebx
c000de64:	eb dd                	jmp    c000de43 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000de66:	83 c4 1c             	add    esp,0x1c
c000de69:	5b                   	pop    ebx
c000de6a:	5e                   	pop    esi
c000de6b:	5f                   	pop    edi
c000de6c:	5d                   	pop    ebp
c000de6d:	c3                   	ret    

c000de6e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000de6e:	55                   	push   ebp
c000de6f:	57                   	push   edi
c000de70:	31 ff                	xor    edi,edi
c000de72:	56                   	push   esi
c000de73:	53                   	push   ebx
c000de74:	83 ec 1c             	sub    esp,0x1c
c000de77:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000de7b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000de7f:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000de86:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000de8b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de8f:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000de93:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000de97:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000de9a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000de9e:	01 f9                	add    ecx,edi
c000dea0:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000dea4:	7d 2f                	jge    c000ded5 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000dea6:	31 f6                	xor    esi,esi
c000dea8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000deac:	01 f2                	add    edx,esi
c000deae:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000deb2:	7d 1a                	jge    c000dece <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000deb4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000deb7:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000deba:	46                   	inc    esi
c000debb:	51                   	push   ecx
c000debc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dec0:	52                   	push   edx
c000dec1:	55                   	push   ebp
c000dec2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dec5:	83 c4 10             	add    esp,0x10
c000dec8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000decc:	eb da                	jmp    c000dea8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000dece:	47                   	inc    edi
c000decf:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000ded3:	eb c5                	jmp    c000de9a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000ded5:	83 c4 1c             	add    esp,0x1c
c000ded8:	5b                   	pop    ebx
c000ded9:	5e                   	pop    esi
c000deda:	5f                   	pop    edi
c000dedb:	5d                   	pop    ebp
c000dedc:	c3                   	ret    
c000dedd:	90                   	nop

c000dede <Video::blit(unsigned int*, int, int, int, int)>:
c000dede:	55                   	push   ebp
c000dedf:	57                   	push   edi
c000dee0:	56                   	push   esi
c000dee1:	53                   	push   ebx
c000dee2:	83 ec 1c             	sub    esp,0x1c
c000dee5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dee9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000deed:	85 c0                	test   eax,eax
c000deef:	79 02                	jns    c000def3 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000def1:	31 c0                	xor    eax,eax
c000def3:	c1 e0 02             	shl    eax,0x2
c000def6:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000defa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000defe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000df02:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000df06:	39 d8                	cmp    eax,ebx
c000df08:	7e 49                	jle    c000df53 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000df0a:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000df10:	7c 41                	jl     c000df53 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000df12:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000df16:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000df1a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000df1e:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000df22:	39 f9                	cmp    ecx,edi
c000df24:	7e 22                	jle    c000df48 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000df26:	83 c5 04             	add    ebp,0x4
c000df29:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000df2f:	7c 14                	jl     c000df45 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000df31:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000df33:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000df36:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000df3a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000df3e:	56                   	push   esi
c000df3f:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000df42:	83 c4 10             	add    esp,0x10
c000df45:	47                   	inc    edi
c000df46:	eb d2                	jmp    c000df1a <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000df48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df4c:	43                   	inc    ebx
c000df4d:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000df51:	eb ab                	jmp    c000defe <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000df53:	83 c4 1c             	add    esp,0x1c
c000df56:	5b                   	pop    ebx
c000df57:	5e                   	pop    esi
c000df58:	5f                   	pop    edi
c000df59:	5d                   	pop    ebp
c000df5a:	c3                   	ret    
c000df5b:	90                   	nop

c000df5c <Video::clearScreen(unsigned int)>:
c000df5c:	57                   	push   edi
c000df5d:	56                   	push   esi
c000df5e:	53                   	push   ebx
c000df5f:	31 db                	xor    ebx,ebx
c000df61:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df65:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000df6b:	7e 1f                	jle    c000df8c <Video::clearScreen(unsigned int)+0x30>
c000df6d:	31 ff                	xor    edi,edi
c000df6f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000df75:	7e 12                	jle    c000df89 <Video::clearScreen(unsigned int)+0x2d>
c000df77:	8b 06                	mov    eax,DWORD PTR [esi]
c000df79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df7d:	53                   	push   ebx
c000df7e:	57                   	push   edi
c000df7f:	47                   	inc    edi
c000df80:	56                   	push   esi
c000df81:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000df84:	83 c4 10             	add    esp,0x10
c000df87:	eb e6                	jmp    c000df6f <Video::clearScreen(unsigned int)+0x13>
c000df89:	43                   	inc    ebx
c000df8a:	eb d9                	jmp    c000df65 <Video::clearScreen(unsigned int)+0x9>
c000df8c:	5b                   	pop    ebx
c000df8d:	5e                   	pop    esi
c000df8e:	5f                   	pop    edi
c000df8f:	c3                   	ret    

c000df90 <Video::putpixel(int, int, unsigned int)>:
c000df90:	c7 44 24 04 94 e2 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e294
c000df98:	e9 5a 27 00 00       	jmp    c00106f7 <Krnl::panic(char const*)>
c000df9d:	90                   	nop

c000df9e <Video::Video(char const*)>:
c000df9e:	83 ec 0c             	sub    esp,0xc
c000dfa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfa5:	83 ec 08             	sub    esp,0x8
c000dfa8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfac:	50                   	push   eax
c000dfad:	e8 ce e1 ff ff       	call   c000c180 <Device::Device(char const*)>
c000dfb2:	83 c4 10             	add    esp,0x10
c000dfb5:	ba 04 e3 01 c0       	mov    edx,0xc001e304
c000dfba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfbe:	89 10                	mov    DWORD PTR [eax],edx
c000dfc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfc4:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000dfce:	90                   	nop
c000dfcf:	83 c4 0c             	add    esp,0xc
c000dfd2:	c3                   	ret    
c000dfd3:	90                   	nop

c000dfd4 <Video::~Video()>:
c000dfd4:	83 ec 0c             	sub    esp,0xc
c000dfd7:	ba 04 e3 01 c0       	mov    edx,0xc001e304
c000dfdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfe0:	89 10                	mov    DWORD PTR [eax],edx
c000dfe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfe6:	83 ec 0c             	sub    esp,0xc
c000dfe9:	50                   	push   eax
c000dfea:	e8 fb de ff ff       	call   c000beea <Device::~Device()>
c000dfef:	83 c4 10             	add    esp,0x10
c000dff2:	90                   	nop
c000dff3:	83 c4 0c             	add    esp,0xc
c000dff6:	c3                   	ret    
c000dff7:	90                   	nop

c000dff8 <Video::~Video()>:
c000dff8:	83 ec 0c             	sub    esp,0xc
c000dffb:	83 ec 0c             	sub    esp,0xc
c000dffe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e002:	e8 cd ff ff ff       	call   c000dfd4 <Video::~Video()>
c000e007:	83 c4 10             	add    esp,0x10
c000e00a:	83 ec 08             	sub    esp,0x8
c000e00d:	68 64 01 00 00       	push   0x164
c000e012:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e016:	e8 97 ca ff ff       	call   c000aab2 <operator delete(void*, unsigned long)>
c000e01b:	83 c4 10             	add    esp,0x10
c000e01e:	83 c4 0c             	add    esp,0xc
c000e021:	c3                   	ret    

c000e022 <Video::isMonochrome()>:
c000e022:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e026:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e02c:	c3                   	ret    
c000e02d:	90                   	nop

c000e02e <Video::getWidth()>:
c000e02e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e032:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e038:	c3                   	ret    
c000e039:	90                   	nop

c000e03a <Video::getHeight()>:
c000e03a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e03e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e044:	c3                   	ret    
c000e045:	90                   	nop

c000e046 <Video::drawCursor(int, int, unsigned char*, int)>:
c000e046:	55                   	push   ebp
c000e047:	57                   	push   edi
c000e048:	56                   	push   esi
c000e049:	53                   	push   ebx
c000e04a:	83 ec 2c             	sub    esp,0x2c
c000e04d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e051:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e055:	83 f8 01             	cmp    eax,0x1
c000e058:	19 c9                	sbb    ecx,ecx
c000e05a:	31 db                	xor    ebx,ebx
c000e05c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e060:	89 cd                	mov    ebp,ecx
c000e062:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e06a:	f7 d5                	not    ebp
c000e06c:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000e072:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e076:	01 d8                	add    eax,ebx
c000e078:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e07c:	56                   	push   esi
c000e07d:	e8 b8 ff ff ff       	call   c000e03a <Video::getHeight()>
c000e082:	59                   	pop    ecx
c000e083:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e087:	7e 70                	jle    c000e0f9 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000e089:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e08d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000e091:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e094:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e098:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e09c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e0a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0a7:	89 f8                	mov    eax,edi
c000e0a9:	83 c0 20             	add    eax,0x20
c000e0ac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e0b0:	56                   	push   esi
c000e0b1:	e8 78 ff ff ff       	call   c000e02e <Video::getWidth()>
c000e0b6:	5a                   	pop    edx
c000e0b7:	39 c7                	cmp    edi,eax
c000e0b9:	7d 34                	jge    c000e0ef <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000e0bb:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e0c0:	74 05                	je     c000e0c7 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000e0c2:	8b 06                	mov    eax,DWORD PTR [esi]
c000e0c4:	55                   	push   ebp
c000e0c5:	eb 0d                	jmp    c000e0d4 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000e0c7:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e0cc:	74 12                	je     c000e0e0 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000e0ce:	8b 06                	mov    eax,DWORD PTR [esi]
c000e0d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e0d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e0d8:	57                   	push   edi
c000e0d9:	56                   	push   esi
c000e0da:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e0dd:	83 c4 10             	add    esp,0x10
c000e0e0:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e0e4:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e0e8:	47                   	inc    edi
c000e0e9:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000e0ed:	75 c1                	jne    c000e0b0 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000e0ef:	43                   	inc    ebx
c000e0f0:	83 fb 20             	cmp    ebx,0x20
c000e0f3:	0f 85 79 ff ff ff    	jne    c000e072 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000e0f9:	83 c4 2c             	add    esp,0x2c
c000e0fc:	5b                   	pop    ebx
c000e0fd:	5e                   	pop    esi
c000e0fe:	5f                   	pop    edi
c000e0ff:	5d                   	pop    ebp
c000e100:	c3                   	ret    
c000e101:	90                   	nop

c000e102 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e102:	55                   	push   ebp
c000e103:	57                   	push   edi
c000e104:	56                   	push   esi
c000e105:	53                   	push   ebx
c000e106:	83 ec 28             	sub    esp,0x28
c000e109:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e10d:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e111:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000e115:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000e119:	c1 e6 08             	shl    esi,0x8
c000e11c:	01 c6                	add    esi,eax
c000e11e:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000e122:	c1 e0 08             	shl    eax,0x8
c000e125:	01 d0                	add    eax,edx
c000e127:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e12b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e12f:	0f af c6             	imul   eax,esi
c000e132:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e139:	50                   	push   eax
c000e13a:	e8 da 9c ff ff       	call   c0007e19 <malloc>
c000e13f:	83 c4 10             	add    esp,0x10
c000e142:	89 c7                	mov    edi,eax
c000e144:	85 c0                	test   eax,eax
c000e146:	75 10                	jne    c000e158 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e148:	83 ec 0c             	sub    esp,0xc
c000e14b:	68 b5 e2 01 c0       	push   0xc001e2b5
c000e150:	e8 a2 25 00 00       	call   c00106f7 <Krnl::panic(char const*)>
c000e155:	83 c4 10             	add    esp,0x10
c000e158:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000e15b:	ba 12 00 00 00       	mov    edx,0x12
c000e160:	84 c0                	test   al,al
c000e162:	74 11                	je     c000e175 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000e164:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e168:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e16c:	c1 fa 03             	sar    edx,0x3
c000e16f:	0f af d1             	imul   edx,ecx
c000e172:	83 c2 12             	add    edx,0x12
c000e175:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e179:	74 04                	je     c000e17f <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000e17b:	85 f6                	test   esi,esi
c000e17d:	75 12                	jne    c000e191 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000e17f:	83 ec 0c             	sub    esp,0xc
c000e182:	68 c5 e2 01 c0       	push   0xc001e2c5
c000e187:	e8 1c ca ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c000e18c:	e9 b8 00 00 00       	jmp    c000e249 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000e191:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e195:	80 f9 02             	cmp    cl,0x2
c000e198:	0f 85 96 00 00 00    	jne    c000e234 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000e19e:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e1a3:	75 0e                	jne    c000e1b3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000e1a5:	84 c0                	test   al,al
c000e1a7:	75 0a                	jne    c000e1b3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000e1a9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e1ac:	83 e8 18             	sub    eax,0x18
c000e1af:	a8 f7                	test   al,0xf7
c000e1b1:	74 0a                	je     c000e1bd <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000e1b3:	83 ec 0c             	sub    esp,0xc
c000e1b6:	68 da e2 01 c0       	push   0xc001e2da
c000e1bb:	eb 7f                	jmp    c000e23c <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000e1bd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e1c5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e1cd:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000e1d1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e1d9:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e1dd:	75 0c                	jne    c000e1eb <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000e1df:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000e1e4:	c1 e0 18             	shl    eax,0x18
c000e1e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1eb:	45                   	inc    ebp
c000e1ec:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000e1f1:	c1 e1 10             	shl    ecx,0x10
c000e1f4:	89 c8                	mov    eax,ecx
c000e1f6:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000e1fb:	c1 e1 08             	shl    ecx,0x8
c000e1fe:	09 c1                	or     ecx,eax
c000e200:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000e204:	09 c1                	or     ecx,eax
c000e206:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000e20a:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000e20e:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e212:	c1 f8 03             	sar    eax,0x3
c000e215:	01 c2                	add    edx,eax
c000e217:	89 e8                	mov    eax,ebp
c000e219:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000e21d:	39 c6                	cmp    esi,eax
c000e21f:	7f b0                	jg     c000e1d1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000e221:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e225:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e229:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000e22c:	7e 22                	jle    c000e250 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000e22e:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000e232:	eb 99                	jmp    c000e1cd <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000e234:	50                   	push   eax
c000e235:	50                   	push   eax
c000e236:	51                   	push   ecx
c000e237:	68 e8 e2 01 c0       	push   0xc001e2e8
c000e23c:	e8 67 c9 ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c000e241:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e244:	e8 e0 9b ff ff       	call   c0007e29 <free>
c000e249:	83 c4 10             	add    esp,0x10
c000e24c:	31 ff                	xor    edi,edi
c000e24e:	eb 0f                	jmp    c000e25f <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000e250:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e254:	89 30                	mov    DWORD PTR [eax],esi
c000e256:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e25a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000e25d:	89 30                	mov    DWORD PTR [eax],esi
c000e25f:	83 c4 1c             	add    esp,0x1c
c000e262:	89 f8                	mov    eax,edi
c000e264:	5b                   	pop    ebx
c000e265:	5e                   	pop    esi
c000e266:	5f                   	pop    edi
c000e267:	5d                   	pop    ebp
c000e268:	c3                   	ret    
c000e269:	90                   	nop

c000e26a <Video::putTGA(int, int, unsigned char*, int)>:
c000e26a:	55                   	push   ebp
c000e26b:	57                   	push   edi
c000e26c:	56                   	push   esi
c000e26d:	53                   	push   ebx
c000e26e:	83 ec 28             	sub    esp,0x28
c000e271:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000e275:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e279:	50                   	push   eax
c000e27a:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e27e:	50                   	push   eax
c000e27f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e283:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e287:	56                   	push   esi
c000e288:	e8 75 fe ff ff       	call   c000e102 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000e28d:	83 c4 20             	add    esp,0x20
c000e290:	85 c0                	test   eax,eax
c000e292:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e296:	74 35                	je     c000e2cd <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e298:	89 c7                	mov    edi,eax
c000e29a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e29e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e2a2:	39 d8                	cmp    eax,ebx
c000e2a4:	7e 27                	jle    c000e2cd <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e2a6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e2aa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e2ae:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e2b2:	39 e8                	cmp    eax,ebp
c000e2b4:	7e 14                	jle    c000e2ca <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000e2b6:	8b 06                	mov    eax,DWORD PTR [esi]
c000e2b8:	83 c7 04             	add    edi,0x4
c000e2bb:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000e2be:	53                   	push   ebx
c000e2bf:	55                   	push   ebp
c000e2c0:	45                   	inc    ebp
c000e2c1:	56                   	push   esi
c000e2c2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e2c5:	83 c4 10             	add    esp,0x10
c000e2c8:	eb e0                	jmp    c000e2aa <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000e2ca:	43                   	inc    ebx
c000e2cb:	eb cd                	jmp    c000e29a <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e2cd:	83 c4 1c             	add    esp,0x1c
c000e2d0:	5b                   	pop    ebx
c000e2d1:	5e                   	pop    esi
c000e2d2:	5f                   	pop    edi
c000e2d3:	5d                   	pop    ebp
c000e2d4:	c3                   	ret    
c000e2d5:	66 90                	xchg   ax,ax
c000e2d7:	90                   	nop

c000e2d8 <ACPI::close(int, int, void*)>:
c000e2d8:	83 ec 1c             	sub    esp,0x1c
c000e2db:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000e2e3:	74 0b                	je     c000e2f0 <ACPI::close(int, int, void*)+0x18>
c000e2e5:	b8 00 00 00 00       	mov    eax,0x0
c000e2ea:	e9 9d 00 00 00       	jmp    c000e38c <ACPI::close(int, int, void*)+0xb4>
c000e2ef:	90                   	nop
c000e2f0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000e2f5:	75 29                	jne    c000e320 <ACPI::close(int, int, void*)+0x48>
c000e2f7:	a1 e8 2e 02 c0       	mov    eax,ds:0xc0022ee8
c000e2fc:	85 c0                	test   eax,eax
c000e2fe:	74 08                	je     c000e308 <ACPI::close(int, int, void*)+0x30>
c000e300:	a1 e8 2e 02 c0       	mov    eax,ds:0xc0022ee8
c000e305:	ff d0                	call   eax
c000e307:	90                   	nop
c000e308:	83 ec 0c             	sub    esp,0xc
c000e30b:	68 44 e3 01 c0       	push   0xc001e344
c000e310:	e8 e2 23 00 00       	call   c00106f7 <Krnl::panic(char const*)>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e31d:	eb 6d                	jmp    c000e38c <ACPI::close(int, int, void*)+0xb4>
c000e31f:	90                   	nop
c000e320:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000e325:	75 5d                	jne    c000e384 <ACPI::close(int, int, void*)+0xac>
c000e327:	a1 e4 2e 02 c0       	mov    eax,ds:0xc0022ee4
c000e32c:	85 c0                	test   eax,eax
c000e32e:	74 08                	je     c000e338 <ACPI::close(int, int, void*)+0x60>
c000e330:	a1 e4 2e 02 c0       	mov    eax,ds:0xc0022ee4
c000e335:	ff d0                	call   eax
c000e337:	90                   	nop
c000e338:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000e33d:	8d 76 00             	lea    esi,[esi+0x0]
c000e340:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e344:	25 ff 00 00 00       	and    eax,0xff
c000e349:	83 e0 02             	and    eax,0x2
c000e34c:	74 1e                	je     c000e36c <ACPI::close(int, int, void*)+0x94>
c000e34e:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000e355:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e359:	89 c2                	mov    edx,eax
c000e35b:	ec                   	in     al,dx
c000e35c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e360:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000e364:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e368:	eb d6                	jmp    c000e340 <ACPI::close(int, int, void*)+0x68>
c000e36a:	66 90                	xchg   ax,ax
c000e36c:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000e373:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000e378:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000e37c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e380:	ee                   	out    dx,al
c000e381:	8d 76 00             	lea    esi,[esi+0x0]
c000e384:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e389:	8d 76 00             	lea    esi,[esi+0x0]
c000e38c:	83 c4 1c             	add    esp,0x1c
c000e38f:	c3                   	ret    

c000e390 <findRSDP()>:
c000e390:	83 ec 1c             	sub    esp,0x1c
c000e393:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c000e398:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e39e:	83 e0 04             	and    eax,0x4
c000e3a1:	84 c0                	test   al,al
c000e3a3:	75 07                	jne    c000e3ac <findRSDP()+0x1c>
c000e3a5:	b8 00 00 00 00       	mov    eax,0x0
c000e3aa:	eb 70                	jmp    c000e41c <findRSDP()+0x8c>
c000e3ac:	a1 28 09 02 c0       	mov    eax,ds:0xc0020928
c000e3b1:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e3b6:	7f 1c                	jg     c000e3d4 <findRSDP()+0x44>
c000e3b8:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c000e3bd:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e3c3:	83 e2 fb             	and    edx,0xfffffffb
c000e3c6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e3cc:	b8 00 00 00 00       	mov    eax,0x0
c000e3d1:	eb 49                	jmp    c000e41c <findRSDP()+0x8c>
c000e3d3:	90                   	nop
c000e3d4:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000e3dc:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000e3e4:	77 2e                	ja     c000e414 <findRSDP()+0x84>
c000e3e6:	83 ec 04             	sub    esp,0x4
c000e3e9:	6a 08                	push   0x8
c000e3eb:	68 df e3 01 c0       	push   0xc001e3df
c000e3f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e3f4:	e8 b7 1f ff ff       	call   c00003b0 <memcmp>
c000e3f9:	83 c4 10             	add    esp,0x10
c000e3fc:	85 c0                	test   eax,eax
c000e3fe:	0f 94 c0             	sete   al
c000e401:	84 c0                	test   al,al
c000e403:	74 07                	je     c000e40c <findRSDP()+0x7c>
c000e405:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e409:	eb 11                	jmp    c000e41c <findRSDP()+0x8c>
c000e40b:	90                   	nop
c000e40c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000e411:	eb c9                	jmp    c000e3dc <findRSDP()+0x4c>
c000e413:	90                   	nop
c000e414:	b8 00 00 00 00       	mov    eax,0x0
c000e419:	8d 76 00             	lea    esi,[esi+0x0]
c000e41c:	83 c4 1c             	add    esp,0x1c
c000e41f:	c3                   	ret    

c000e420 <loadACPITables(unsigned char*)>:
c000e420:	57                   	push   edi
c000e421:	56                   	push   esi
c000e422:	53                   	push   ebx
c000e423:	83 ec 60             	sub    esp,0x60
c000e426:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c000e42b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e431:	83 e0 04             	and    eax,0x4
c000e434:	84 c0                	test   al,al
c000e436:	0f 84 3c 02 00 00    	je     c000e678 <loadACPITables(unsigned char*)+0x258>
c000e43c:	a0 00 31 02 c0       	mov    al,ds:0xc0023100
c000e441:	84 c0                	test   al,al
c000e443:	74 77                	je     c000e4bc <loadACPITables(unsigned char*)+0x9c>
c000e445:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e449:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e44d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e451:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e454:	83 e8 24             	sub    eax,0x24
c000e457:	c1 e8 03             	shr    eax,0x3
c000e45a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e45e:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000e466:	66 90                	xchg   ax,ax
c000e468:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e46c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000e470:	0f 8d b6 00 00 00    	jge    c000e52c <loadACPITables(unsigned char*)+0x10c>
c000e476:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e47a:	83 c0 24             	add    eax,0x24
c000e47d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e481:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e485:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e489:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e48d:	c1 e0 03             	shl    eax,0x3
c000e490:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e494:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e498:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e49b:	8b 00                	mov    eax,DWORD PTR [eax]
c000e49d:	89 c1                	mov    ecx,eax
c000e49f:	a1 ec 2e 02 c0       	mov    eax,ds:0xc0022eec
c000e4a4:	8d 50 01             	lea    edx,[eax+0x1]
c000e4a7:	89 15 ec 2e 02 c0    	mov    DWORD PTR ds:0xc0022eec,edx
c000e4ad:	89 ca                	mov    edx,ecx
c000e4af:	89 14 c5 04 2f 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd0fc],edx
c000e4b6:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000e4ba:	eb ac                	jmp    c000e468 <loadACPITables(unsigned char*)+0x48>
c000e4bc:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e4c0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e4c4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e4c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e4cb:	83 e8 24             	sub    eax,0x24
c000e4ce:	c1 e8 02             	shr    eax,0x2
c000e4d1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e4d5:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e4dd:	8d 76 00             	lea    esi,[esi+0x0]
c000e4e0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e4e4:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e4e8:	7d 42                	jge    c000e52c <loadACPITables(unsigned char*)+0x10c>
c000e4ea:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e4ee:	83 c0 24             	add    eax,0x24
c000e4f1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e4f5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e4f9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e4fd:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e501:	c1 e0 02             	shl    eax,0x2
c000e504:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e508:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e50c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e50e:	a1 ec 2e 02 c0       	mov    eax,ds:0xc0022eec
c000e513:	8d 50 01             	lea    edx,[eax+0x1]
c000e516:	89 15 ec 2e 02 c0    	mov    DWORD PTR ds:0xc0022eec,edx
c000e51c:	89 ca                	mov    edx,ecx
c000e51e:	89 14 c5 04 2f 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd0fc],edx
c000e525:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000e529:	eb b5                	jmp    c000e4e0 <loadACPITables(unsigned char*)+0xc0>
c000e52b:	90                   	nop
c000e52c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e534:	a1 ec 2e 02 c0       	mov    eax,ds:0xc0022eec
c000e539:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e53d:	0f 8d 39 01 00 00    	jge    c000e67c <loadACPITables(unsigned char*)+0x25c>
c000e543:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e547:	8b 04 c5 04 2f 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd0fc]
c000e54e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e552:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e556:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e55a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e55e:	25 ff 0f 00 00       	and    eax,0xfff
c000e563:	89 c6                	mov    esi,eax
c000e565:	8b 1d f0 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209f0
c000e56b:	83 ec 0c             	sub    esp,0xc
c000e56e:	6a 01                	push   0x1
c000e570:	e8 e0 b3 ff ff       	call   c0009955 <Virt::allocateKernelVirtualPages(int)>
c000e575:	83 c4 10             	add    esp,0x10
c000e578:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e57c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e582:	83 ec 0c             	sub    esp,0xc
c000e585:	6a 01                	push   0x1
c000e587:	6a 01                	push   0x1
c000e589:	50                   	push   eax
c000e58a:	52                   	push   edx
c000e58b:	53                   	push   ebx
c000e58c:	e8 53 bd ff ff       	call   c000a2e4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e591:	83 c4 20             	add    esp,0x20
c000e594:	09 f0                	or     eax,esi
c000e596:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e59a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e59e:	c1 e0 03             	shl    eax,0x3
c000e5a1:	05 00 2f 02 c0       	add    eax,0xc0022f00
c000e5a6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e5aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e5b2:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e5ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e5be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e5c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e5c6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e5ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e5ce:	89 c6                	mov    esi,eax
c000e5d0:	89 d7                	mov    edi,edx
c000e5d2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5d4:	89 c8                	mov    eax,ecx
c000e5d6:	89 fa                	mov    edx,edi
c000e5d8:	89 f3                	mov    ebx,esi
c000e5da:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e5de:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e5e2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e5e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e5ed:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e5f1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5f5:	05 00 10 00 00       	add    eax,0x1000
c000e5fa:	c1 e8 0c             	shr    eax,0xc
c000e5fd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e601:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e605:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e609:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e60d:	25 ff 0f 00 00       	and    eax,0xfff
c000e612:	89 c6                	mov    esi,eax
c000e614:	8b 1d f0 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209f0
c000e61a:	83 ec 0c             	sub    esp,0xc
c000e61d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e621:	e8 2f b3 ff ff       	call   c0009955 <Virt::allocateKernelVirtualPages(int)>
c000e626:	83 c4 10             	add    esp,0x10
c000e629:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e62d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e633:	83 ec 0c             	sub    esp,0xc
c000e636:	6a 01                	push   0x1
c000e638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e63c:	50                   	push   eax
c000e63d:	52                   	push   edx
c000e63e:	53                   	push   ebx
c000e63f:	e8 a0 bc ff ff       	call   c000a2e4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e644:	83 c4 20             	add    esp,0x20
c000e647:	09 f0                	or     eax,esi
c000e649:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e64d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e651:	83 ec 0c             	sub    esp,0xc
c000e654:	50                   	push   eax
c000e655:	e8 2b b6 ff ff       	call   c0009c85 <Virt::freeKernelVirtualPages(unsigned long)>
c000e65a:	83 c4 10             	add    esp,0x10
c000e65d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e661:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e665:	89 14 c5 04 2f 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd0fc],edx
c000e66c:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000e670:	e9 bf fe ff ff       	jmp    c000e534 <loadACPITables(unsigned char*)+0x114>
c000e675:	8d 76 00             	lea    esi,[esi+0x0]
c000e678:	90                   	nop
c000e679:	8d 76 00             	lea    esi,[esi+0x0]
c000e67c:	83 c4 60             	add    esp,0x60
c000e67f:	5b                   	pop    ebx
c000e680:	5e                   	pop    esi
c000e681:	5f                   	pop    edi
c000e682:	c3                   	ret    
c000e683:	90                   	nop

c000e684 <findRSDT(unsigned char*)>:
c000e684:	57                   	push   edi
c000e685:	56                   	push   esi
c000e686:	53                   	push   ebx
c000e687:	83 ec 50             	sub    esp,0x50
c000e68a:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c000e68f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e695:	83 e0 04             	and    eax,0x4
c000e698:	84 c0                	test   al,al
c000e69a:	75 0c                	jne    c000e6a8 <findRSDT(unsigned char*)+0x24>
c000e69c:	b8 00 00 00 00       	mov    eax,0x0
c000e6a1:	e9 26 01 00 00       	jmp    c000e7cc <findRSDT(unsigned char*)+0x148>
c000e6a6:	66 90                	xchg   ax,ax
c000e6a8:	89 e0                	mov    eax,esp
c000e6aa:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e6ae:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e6b2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e6b6:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e6be:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e6c2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e6c6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e6ca:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e6ce:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e6d2:	89 c6                	mov    esi,eax
c000e6d4:	89 d7                	mov    edi,edx
c000e6d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e6d8:	89 c8                	mov    eax,ecx
c000e6da:	89 fa                	mov    edx,edi
c000e6dc:	89 f3                	mov    ebx,esi
c000e6de:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e6e2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e6e6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e6ea:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e6ee:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e6f2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e6fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e6fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e702:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e70a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e70e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e712:	25 ff 0f 00 00       	and    eax,0xfff
c000e717:	89 c6                	mov    esi,eax
c000e719:	8b 1d f0 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209f0
c000e71f:	83 ec 0c             	sub    esp,0xc
c000e722:	6a 02                	push   0x2
c000e724:	e8 2c b2 ff ff       	call   c0009955 <Virt::allocateKernelVirtualPages(int)>
c000e729:	83 c4 10             	add    esp,0x10
c000e72c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e730:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e736:	83 ec 0c             	sub    esp,0xc
c000e739:	6a 01                	push   0x1
c000e73b:	6a 02                	push   0x2
c000e73d:	50                   	push   eax
c000e73e:	52                   	push   edx
c000e73f:	53                   	push   ebx
c000e740:	e8 9f bb ff ff       	call   c000a2e4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e745:	83 c4 20             	add    esp,0x20
c000e748:	09 f0                	or     eax,esi
c000e74a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e74e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e752:	25 ff 0f 00 00       	and    eax,0xfff
c000e757:	89 c6                	mov    esi,eax
c000e759:	8b 1d f0 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209f0
c000e75f:	83 ec 0c             	sub    esp,0xc
c000e762:	6a 02                	push   0x2
c000e764:	e8 ec b1 ff ff       	call   c0009955 <Virt::allocateKernelVirtualPages(int)>
c000e769:	83 c4 10             	add    esp,0x10
c000e76c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e770:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e776:	83 ec 0c             	sub    esp,0xc
c000e779:	6a 01                	push   0x1
c000e77b:	6a 02                	push   0x2
c000e77d:	50                   	push   eax
c000e77e:	52                   	push   edx
c000e77f:	53                   	push   ebx
c000e780:	e8 5f bb ff ff       	call   c000a2e4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e785:	83 c4 20             	add    esp,0x20
c000e788:	09 f0                	or     eax,esi
c000e78a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e78e:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e793:	75 13                	jne    c000e7a8 <findRSDT(unsigned char*)+0x124>
c000e795:	c6 05 00 31 02 c0 00 	mov    BYTE PTR ds:0xc0023100,0x0
c000e79c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7a0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e7a4:	eb 22                	jmp    c000e7c8 <findRSDT(unsigned char*)+0x144>
c000e7a6:	66 90                	xchg   ax,ax
c000e7a8:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e7ad:	75 11                	jne    c000e7c0 <findRSDT(unsigned char*)+0x13c>
c000e7af:	c6 05 00 31 02 c0 01 	mov    BYTE PTR ds:0xc0023100,0x1
c000e7b6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e7ba:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e7be:	eb 08                	jmp    c000e7c8 <findRSDT(unsigned char*)+0x144>
c000e7c0:	b8 00 00 00 00       	mov    eax,0x0
c000e7c5:	eb 05                	jmp    c000e7cc <findRSDT(unsigned char*)+0x148>
c000e7c7:	90                   	nop
c000e7c8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e7cc:	83 c4 50             	add    esp,0x50
c000e7cf:	5b                   	pop    ebx
c000e7d0:	5e                   	pop    esi
c000e7d1:	5f                   	pop    edi
c000e7d2:	c3                   	ret    
c000e7d3:	90                   	nop

c000e7d4 <findDataTable(unsigned char*, char*)>:
c000e7d4:	83 ec 1c             	sub    esp,0x1c
c000e7d7:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c000e7dc:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e7e2:	83 e0 04             	and    eax,0x4
c000e7e5:	84 c0                	test   al,al
c000e7e7:	75 07                	jne    c000e7f0 <findDataTable(unsigned char*, char*)+0x1c>
c000e7e9:	b8 00 00 00 00       	mov    eax,0x0
c000e7ee:	eb 58                	jmp    c000e848 <findDataTable(unsigned char*, char*)+0x74>
c000e7f0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e7f8:	a1 ec 2e 02 c0       	mov    eax,ds:0xc0022eec
c000e7fd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e801:	7d 3d                	jge    c000e840 <findDataTable(unsigned char*, char*)+0x6c>
c000e803:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e807:	c1 e0 03             	shl    eax,0x3
c000e80a:	05 00 2f 02 c0       	add    eax,0xc0022f00
c000e80f:	83 ec 04             	sub    esp,0x4
c000e812:	6a 04                	push   0x4
c000e814:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e818:	50                   	push   eax
c000e819:	e8 92 1b ff ff       	call   c00003b0 <memcmp>
c000e81e:	83 c4 10             	add    esp,0x10
c000e821:	85 c0                	test   eax,eax
c000e823:	0f 94 c0             	sete   al
c000e826:	84 c0                	test   al,al
c000e828:	74 0e                	je     c000e838 <findDataTable(unsigned char*, char*)+0x64>
c000e82a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e82e:	8b 04 c5 04 2f 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd0fc]
c000e835:	eb 11                	jmp    c000e848 <findDataTable(unsigned char*, char*)+0x74>
c000e837:	90                   	nop
c000e838:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e83c:	eb ba                	jmp    c000e7f8 <findDataTable(unsigned char*, char*)+0x24>
c000e83e:	66 90                	xchg   ax,ax
c000e840:	b8 00 00 00 00       	mov    eax,0x0
c000e845:	8d 76 00             	lea    esi,[esi+0x0]
c000e848:	83 c4 1c             	add    esp,0x1c
c000e84b:	c3                   	ret    

c000e84c <scanMADT()>:
c000e84c:	53                   	push   ebx
c000e84d:	83 ec 38             	sub    esp,0x38
c000e850:	a1 10 09 02 c0       	mov    eax,ds:0xc0020910
c000e855:	25 00 04 00 00       	and    eax,0x400
c000e85a:	74 14                	je     c000e870 <scanMADT()+0x24>
c000e85c:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c000e861:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e867:	83 e2 fb             	and    edx,0xfffffffb
c000e86a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e870:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c000e875:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e87b:	83 e0 04             	and    eax,0x4
c000e87e:	84 c0                	test   al,al
c000e880:	0f 84 8a 04 00 00    	je     c000ed10 <scanMADT()+0x4c4>
c000e886:	e8 05 fb ff ff       	call   c000e390 <findRSDP()>
c000e88b:	a3 0c 31 02 c0       	mov    ds:0xc002310c,eax
c000e890:	a1 0c 31 02 c0       	mov    eax,ds:0xc002310c
c000e895:	85 c0                	test   eax,eax
c000e897:	75 1b                	jne    c000e8b4 <scanMADT()+0x68>
c000e899:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c000e89e:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e8a4:	83 e2 fb             	and    edx,0xfffffffb
c000e8a7:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8ad:	e9 66 04 00 00       	jmp    c000ed18 <scanMADT()+0x4cc>
c000e8b2:	66 90                	xchg   ax,ax
c000e8b4:	a1 0c 31 02 c0       	mov    eax,ds:0xc002310c
c000e8b9:	83 ec 0c             	sub    esp,0xc
c000e8bc:	50                   	push   eax
c000e8bd:	e8 c2 fd ff ff       	call   c000e684 <findRSDT(unsigned char*)>
c000e8c2:	83 c4 10             	add    esp,0x10
c000e8c5:	a3 08 31 02 c0       	mov    ds:0xc0023108,eax
c000e8ca:	a1 08 31 02 c0       	mov    eax,ds:0xc0023108
c000e8cf:	85 c0                	test   eax,eax
c000e8d1:	75 19                	jne    c000e8ec <scanMADT()+0xa0>
c000e8d3:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c000e8d8:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e8de:	83 e2 fb             	and    edx,0xfffffffb
c000e8e1:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8e7:	e9 2c 04 00 00       	jmp    c000ed18 <scanMADT()+0x4cc>
c000e8ec:	a1 08 31 02 c0       	mov    eax,ds:0xc0023108
c000e8f1:	83 ec 0c             	sub    esp,0xc
c000e8f4:	50                   	push   eax
c000e8f5:	e8 26 fb ff ff       	call   c000e420 <loadACPITables(unsigned char*)>
c000e8fa:	83 c4 10             	add    esp,0x10
c000e8fd:	a1 08 31 02 c0       	mov    eax,ds:0xc0023108
c000e902:	83 ec 08             	sub    esp,0x8
c000e905:	68 e8 e3 01 c0       	push   0xc001e3e8
c000e90a:	50                   	push   eax
c000e90b:	e8 c4 fe ff ff       	call   c000e7d4 <findDataTable(unsigned char*, char*)>
c000e910:	83 c4 10             	add    esp,0x10
c000e913:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e917:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e91c:	75 1a                	jne    c000e938 <scanMADT()+0xec>
c000e91e:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c000e923:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e929:	83 e2 fe             	and    edx,0xfffffffe
c000e92c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e932:	e9 e1 03 00 00       	jmp    c000ed18 <scanMADT()+0x4cc>
c000e937:	90                   	nop
c000e938:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e940:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e944:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e947:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e94b:	0f 87 c7 03 00 00    	ja     c000ed18 <scanMADT()+0x4cc>
c000e951:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e959:	0f 87 b9 03 00 00    	ja     c000ed18 <scanMADT()+0x4cc>
c000e95f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e963:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e967:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e96b:	8d 50 01             	lea    edx,[eax+0x1]
c000e96e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e972:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e976:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e97a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e97e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e982:	8d 50 01             	lea    edx,[eax+0x1]
c000e985:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e989:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e98d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e991:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e995:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e99a:	0f 86 74 03 00 00    	jbe    c000ed14 <scanMADT()+0x4c8>
c000e9a0:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e9a5:	75 5d                	jne    c000ea04 <scanMADT()+0x1b8>
c000e9a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9ab:	8d 50 01             	lea    edx,[eax+0x1]
c000e9ae:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9b2:	8a 15 00 33 02 c0    	mov    dl,BYTE PTR ds:0xc0023300
c000e9b8:	81 e2 ff 00 00 00    	and    edx,0xff
c000e9be:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e9c2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e9c6:	88 82 40 33 02 c0    	mov    BYTE PTR [edx-0x3ffdccc0],al
c000e9cc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e9d0:	8d 42 01             	lea    eax,[edx+0x1]
c000e9d3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e9d7:	a0 00 33 02 c0       	mov    al,ds:0xc0023300
c000e9dc:	8d 48 01             	lea    ecx,[eax+0x1]
c000e9df:	88 0d 00 33 02 c0    	mov    BYTE PTR ds:0xc0023300,cl
c000e9e5:	25 ff 00 00 00       	and    eax,0xff
c000e9ea:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e9ee:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e9f2:	88 90 20 33 02 c0    	mov    BYTE PTR [eax-0x3ffdcce0],dl
c000e9f8:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e9fd:	e9 f6 02 00 00       	jmp    c000ecf8 <scanMADT()+0x4ac>
c000ea02:	66 90                	xchg   ax,ax
c000ea04:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000ea09:	0f 85 29 01 00 00    	jne    c000eb38 <scanMADT()+0x2ec>
c000ea0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea13:	8d 50 01             	lea    edx,[eax+0x1]
c000ea16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ea1a:	8a 15 c0 31 02 c0    	mov    dl,BYTE PTR ds:0xc00231c0
c000ea20:	81 e2 ff 00 00 00    	and    edx,0xff
c000ea26:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea2a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ea2e:	88 82 e0 31 02 c0    	mov    BYTE PTR [edx-0x3ffdce20],al
c000ea34:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000ea38:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ea3c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea40:	01 d0                	add    eax,edx
c000ea42:	83 c0 2c             	add    eax,0x2c
c000ea45:	8a 00                	mov    al,BYTE PTR [eax]
c000ea47:	31 d2                	xor    edx,edx
c000ea49:	88 c2                	mov    dl,al
c000ea4b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea4f:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea56:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ea5a:	25 ff 00 00 00       	and    eax,0xff
c000ea5f:	c1 e0 08             	shl    eax,0x8
c000ea62:	89 d1                	mov    ecx,edx
c000ea64:	09 c1                	or     ecx,eax
c000ea66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea6a:	8d 50 02             	lea    edx,[eax+0x2]
c000ea6d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea71:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ea75:	25 ff 00 00 00       	and    eax,0xff
c000ea7a:	c1 e0 10             	shl    eax,0x10
c000ea7d:	09 c1                	or     ecx,eax
c000ea7f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea83:	8d 50 03             	lea    edx,[eax+0x3]
c000ea86:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea8a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ea8e:	25 ff 00 00 00       	and    eax,0xff
c000ea93:	c1 e0 18             	shl    eax,0x18
c000ea96:	09 c1                	or     ecx,eax
c000ea98:	89 ca                	mov    edx,ecx
c000ea9a:	a0 c0 31 02 c0       	mov    al,ds:0xc00231c0
c000ea9f:	25 ff 00 00 00       	and    eax,0xff
c000eaa4:	89 14 85 00 32 02 c0 	mov    DWORD PTR [eax*4-0x3ffdce00],edx
c000eaab:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eab0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eab8:	01 d0                	add    eax,edx
c000eaba:	83 c0 2c             	add    eax,0x2c
c000eabd:	8a 00                	mov    al,BYTE PTR [eax]
c000eabf:	31 d2                	xor    edx,edx
c000eac1:	88 c2                	mov    dl,al
c000eac3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eac7:	8d 48 01             	lea    ecx,[eax+0x1]
c000eaca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eace:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ead2:	25 ff 00 00 00       	and    eax,0xff
c000ead7:	c1 e0 08             	shl    eax,0x8
c000eada:	89 d1                	mov    ecx,edx
c000eadc:	09 c1                	or     ecx,eax
c000eade:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eae2:	8d 50 02             	lea    edx,[eax+0x2]
c000eae5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eae9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eaed:	25 ff 00 00 00       	and    eax,0xff
c000eaf2:	c1 e0 10             	shl    eax,0x10
c000eaf5:	09 c1                	or     ecx,eax
c000eaf7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eafb:	8d 50 03             	lea    edx,[eax+0x3]
c000eafe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb02:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eb06:	25 ff 00 00 00       	and    eax,0xff
c000eb0b:	c1 e0 18             	shl    eax,0x18
c000eb0e:	09 c1                	or     ecx,eax
c000eb10:	89 ca                	mov    edx,ecx
c000eb12:	a0 c0 31 02 c0       	mov    al,ds:0xc00231c0
c000eb17:	25 ff 00 00 00       	and    eax,0xff
c000eb1c:	89 14 85 80 32 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcd80],edx
c000eb23:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eb28:	a0 c0 31 02 c0       	mov    al,ds:0xc00231c0
c000eb2d:	40                   	inc    eax
c000eb2e:	a2 c0 31 02 c0       	mov    ds:0xc00231c0,al
c000eb33:	e9 c0 01 00 00       	jmp    c000ecf8 <scanMADT()+0x4ac>
c000eb38:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000eb3d:	0f 85 fd 00 00 00    	jne    c000ec40 <scanMADT()+0x3f4>
c000eb43:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb47:	8d 50 01             	lea    edx,[eax+0x1]
c000eb4a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eb4e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb52:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eb56:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000eb5a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb5e:	8d 50 01             	lea    edx,[eax+0x1]
c000eb61:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eb65:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb69:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eb6d:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000eb71:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb75:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb79:	01 d0                	add    eax,edx
c000eb7b:	83 c0 2c             	add    eax,0x2c
c000eb7e:	8a 00                	mov    al,BYTE PTR [eax]
c000eb80:	31 d2                	xor    edx,edx
c000eb82:	88 c2                	mov    dl,al
c000eb84:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb88:	8d 48 01             	lea    ecx,[eax+0x1]
c000eb8b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb8f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eb93:	25 ff 00 00 00       	and    eax,0xff
c000eb98:	c1 e0 08             	shl    eax,0x8
c000eb9b:	89 d1                	mov    ecx,edx
c000eb9d:	09 c1                	or     ecx,eax
c000eb9f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eba3:	8d 50 02             	lea    edx,[eax+0x2]
c000eba6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebaa:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ebae:	25 ff 00 00 00       	and    eax,0xff
c000ebb3:	c1 e0 10             	shl    eax,0x10
c000ebb6:	09 c1                	or     ecx,eax
c000ebb8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebbc:	8d 50 03             	lea    edx,[eax+0x3]
c000ebbf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebc3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ebc7:	25 ff 00 00 00       	and    eax,0xff
c000ebcc:	c1 e0 18             	shl    eax,0x18
c000ebcf:	09 c8                	or     eax,ecx
c000ebd1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ebd5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ebda:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebde:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebe2:	01 d0                	add    eax,edx
c000ebe4:	83 c0 2c             	add    eax,0x2c
c000ebe7:	8a 00                	mov    al,BYTE PTR [eax]
c000ebe9:	25 ff 00 00 00       	and    eax,0xff
c000ebee:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ebf2:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ebf5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebf9:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000ebfd:	81 e2 ff 00 00 00    	and    edx,0xff
c000ec03:	c1 e2 08             	shl    edx,0x8
c000ec06:	09 d0                	or     eax,edx
c000ec08:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000ec0d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ec12:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000ec16:	25 ff 00 00 00       	and    eax,0xff
c000ec1b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ec1f:	88 90 60 f8 01 c0    	mov    BYTE PTR [eax-0x3ffe07a0],dl
c000ec25:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000ec29:	31 d2                	xor    edx,edx
c000ec2b:	88 c2                	mov    dl,al
c000ec2d:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000ec32:	66 89 84 12 a0 31 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdce60],ax
c000ec3a:	e9 b9 00 00 00       	jmp    c000ecf8 <scanMADT()+0x4ac>
c000ec3f:	90                   	nop
c000ec40:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000ec45:	0f 85 a1 00 00 00    	jne    c000ecec <scanMADT()+0x4a0>
c000ec4b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec4f:	8d 50 01             	lea    edx,[eax+0x1]
c000ec52:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec56:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec5a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ec5e:	25 ff 00 00 00       	and    eax,0xff
c000ec63:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec67:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec6f:	01 d0                	add    eax,edx
c000ec71:	83 c0 2c             	add    eax,0x2c
c000ec74:	8a 00                	mov    al,BYTE PTR [eax]
c000ec76:	31 d2                	xor    edx,edx
c000ec78:	88 c2                	mov    dl,al
c000ec7a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec7e:	8d 48 01             	lea    ecx,[eax+0x1]
c000ec81:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ec85:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ec89:	25 ff 00 00 00       	and    eax,0xff
c000ec8e:	c1 e0 08             	shl    eax,0x8
c000ec91:	09 d0                	or     eax,edx
c000ec93:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ec97:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ec9c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eca0:	8d 50 01             	lea    edx,[eax+0x1]
c000eca3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eca7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ecab:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ecaf:	25 ff 00 00 00       	and    eax,0xff
c000ecb4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ecb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ecbc:	c1 e0 08             	shl    eax,0x8
c000ecbf:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ecc3:	89 c1                	mov    ecx,eax
c000ecc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecc9:	c1 e0 18             	shl    eax,0x18
c000eccc:	89 c3                	mov    ebx,eax
c000ecce:	a1 10 31 02 c0       	mov    eax,ds:0xc0023110
c000ecd3:	8d 50 01             	lea    edx,[eax+0x1]
c000ecd6:	89 15 10 31 02 c0    	mov    DWORD PTR ds:0xc0023110,edx
c000ecdc:	09 d9                	or     ecx,ebx
c000ecde:	89 ca                	mov    edx,ecx
c000ece0:	89 14 85 20 31 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcee0],edx
c000ece7:	eb 0f                	jmp    c000ecf8 <scanMADT()+0x4ac>
c000ece9:	8d 76 00             	lea    esi,[esi+0x0]
c000ecec:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000ecf1:	75 05                	jne    c000ecf8 <scanMADT()+0x4ac>
c000ecf3:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000ecf8:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000ecfc:	31 d2                	xor    edx,edx
c000ecfe:	88 c2                	mov    dl,al
c000ed00:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ed04:	01 d0                	add    eax,edx
c000ed06:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ed0a:	e9 31 fc ff ff       	jmp    c000e940 <scanMADT()+0xf4>
c000ed0f:	90                   	nop
c000ed10:	90                   	nop
c000ed11:	eb 05                	jmp    c000ed18 <scanMADT()+0x4cc>
c000ed13:	90                   	nop
c000ed14:	90                   	nop
c000ed15:	8d 76 00             	lea    esi,[esi+0x0]
c000ed18:	83 c4 38             	add    esp,0x38
c000ed1b:	5b                   	pop    ebx
c000ed1c:	c3                   	ret    
c000ed1d:	90                   	nop
c000ed1e:	66 90                	xchg   ax,ax

c000ed20 <ACPI::ACPI()>:
c000ed20:	83 ec 0c             	sub    esp,0xc
c000ed23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed27:	83 ec 08             	sub    esp,0x8
c000ed2a:	68 ed e3 01 c0       	push   0xc001e3ed
c000ed2f:	50                   	push   eax
c000ed30:	e8 4b d4 ff ff       	call   c000c180 <Device::Device(char const*)>
c000ed35:	83 c4 10             	add    esp,0x10
c000ed38:	ba 24 e5 01 c0       	mov    edx,0xc001e524
c000ed3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed41:	89 10                	mov    DWORD PTR [eax],edx
c000ed43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed47:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000ed4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed52:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ed5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed60:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000ed6a:	e8 dd fa ff ff       	call   c000e84c <scanMADT()>
c000ed6f:	90                   	nop
c000ed70:	83 c4 0c             	add    esp,0xc
c000ed73:	c3                   	ret    

c000ed74 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000ed74:	83 ec 2c             	sub    esp,0x2c
c000ed77:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ed7b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ed7f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ed83:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000ed87:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ed8c:	88 d0                	mov    al,dl
c000ed8e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ed92:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ed97:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ed9f:	90                   	nop
c000eda0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eda4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000edaa:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000edae:	0f 8d 9c 00 00 00    	jge    c000ee50 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000edb4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edb8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edbc:	83 c2 2a             	add    edx,0x2a
c000edbf:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000edc3:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000edc8:	75 7a                	jne    c000ee44 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000edca:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edd2:	83 c2 2a             	add    edx,0x2a
c000edd5:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000edd9:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000eddd:	75 65                	jne    c000ee44 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000eddf:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000ede4:	74 3a                	je     c000ee20 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000ede6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edea:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edee:	83 c2 2a             	add    edx,0x2a
c000edf1:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000edf5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edf9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000edfc:	39 c2                	cmp    edx,eax
c000edfe:	74 10                	je     c000ee10 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000ee00:	83 ec 0c             	sub    esp,0xc
c000ee03:	68 68 e3 01 c0       	push   0xc001e368
c000ee08:	e8 ea 18 00 00       	call   c00106f7 <Krnl::panic(char const*)>
c000ee0d:	83 c4 10             	add    esp,0x10
c000ee10:	83 ec 0c             	sub    esp,0xc
c000ee13:	68 f2 e3 01 c0       	push   0xc001e3f2
c000ee18:	e8 da 18 00 00       	call   c00106f7 <Krnl::panic(char const*)>
c000ee1d:	83 c4 10             	add    esp,0x10
c000ee20:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee24:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee28:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee2c:	83 c2 2a             	add    edx,0x2a
c000ee2f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000ee33:	8b 02                	mov    eax,DWORD PTR [edx]
c000ee35:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000ee38:	89 01                	mov    DWORD PTR [ecx],eax
c000ee3a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000ee3d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ee42:	66 90                	xchg   ax,ax
c000ee44:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000ee48:	e9 53 ff ff ff       	jmp    c000eda0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000ee4d:	8d 76 00             	lea    esi,[esi+0x0]
c000ee50:	90                   	nop
c000ee51:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee55:	83 c4 2c             	add    esp,0x2c
c000ee58:	c2 04 00             	ret    0x4
c000ee5b:	90                   	nop

c000ee5c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000ee5c:	83 ec 1c             	sub    esp,0x1c
c000ee5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee63:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000ee67:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ee6b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000ee70:	88 c8                	mov    al,cl
c000ee72:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ee76:	88 d0                	mov    al,dl
c000ee78:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ee7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee80:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ee86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee8a:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ee8d:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000ee91:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000ee95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee99:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ee9f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000eea3:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000eea6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eeaa:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000eeaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eeb3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eeb9:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000eebd:	8d 48 01             	lea    ecx,[eax+0x1]
c000eec0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eec4:	83 c2 2a             	add    edx,0x2a
c000eec7:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000eecb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eecf:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eed5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eed9:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000eedc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000eee0:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000eee4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eee8:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000eeee:	8d 50 01             	lea    edx,[eax+0x1]
c000eef1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eef5:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000eefb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eeff:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ef05:	3d 00 02 00 00       	cmp    eax,0x200
c000ef0a:	75 10                	jne    c000ef1c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000ef0c:	83 ec 0c             	sub    esp,0xc
c000ef0f:	68 01 e4 01 c0       	push   0xc001e401
c000ef14:	e8 de 17 00 00       	call   c00106f7 <Krnl::panic(char const*)>
c000ef19:	83 c4 10             	add    esp,0x10
c000ef1c:	90                   	nop
c000ef1d:	83 c4 1c             	add    esp,0x1c
c000ef20:	c3                   	ret    
c000ef21:	90                   	nop
c000ef22:	66 90                	xchg   ax,ax

c000ef24 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ef24:	b8 00 00 00 00       	mov    eax,0x0
c000ef29:	c3                   	ret    
c000ef2a:	66 90                	xchg   ax,ax

c000ef2c <ACPI::detectPCI()>:
c000ef2c:	53                   	push   ebx
c000ef2d:	83 ec 28             	sub    esp,0x28
c000ef30:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ef35:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ef3a:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c000ef3f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef45:	83 e0 04             	and    eax,0x4
c000ef48:	84 c0                	test   al,al
c000ef4a:	74 2c                	je     c000ef78 <ACPI::detectPCI()+0x4c>
c000ef4c:	a1 08 31 02 c0       	mov    eax,ds:0xc0023108
c000ef51:	83 ec 08             	sub    esp,0x8
c000ef54:	68 1e e4 01 c0       	push   0xc001e41e
c000ef59:	50                   	push   eax
c000ef5a:	e8 75 f8 ff ff       	call   c000e7d4 <findDataTable(unsigned char*, char*)>
c000ef5f:	83 c4 10             	add    esp,0x10
c000ef62:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef66:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ef6b:	74 0b                	je     c000ef78 <ACPI::detectPCI()+0x4c>
c000ef6d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ef72:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ef77:	90                   	nop
c000ef78:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000ef80:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef84:	8a 00                	mov    al,BYTE PTR [eax]
c000ef86:	3c 01                	cmp    al,0x1
c000ef88:	75 0e                	jne    c000ef98 <ACPI::detectPCI()+0x6c>
c000ef8a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ef8f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ef94:	eb 2a                	jmp    c000efc0 <ACPI::detectPCI()+0x94>
c000ef96:	66 90                	xchg   ax,ax
c000ef98:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef9c:	8a 00                	mov    al,BYTE PTR [eax]
c000ef9e:	3c 02                	cmp    al,0x2
c000efa0:	75 1e                	jne    c000efc0 <ACPI::detectPCI()+0x94>
c000efa2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efa7:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000efac:	74 12                	je     c000efc0 <ACPI::detectPCI()+0x94>
c000efae:	83 ec 0c             	sub    esp,0xc
c000efb1:	68 98 e3 01 c0       	push   0xc001e398
c000efb6:	e8 3c 17 00 00       	call   c00106f7 <Krnl::panic(char const*)>
c000efbb:	83 c4 10             	add    esp,0x10
c000efbe:	66 90                	xchg   ax,ax
c000efc0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000efc4:	83 f0 01             	xor    eax,0x1
c000efc7:	84 c0                	test   al,al
c000efc9:	74 41                	je     c000f00c <ACPI::detectPCI()+0xe0>
c000efcb:	e8 80 11 ff ff       	call   c0000150 <manualPCIProbe>
c000efd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000efd4:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000efd9:	75 0d                	jne    c000efe8 <ACPI::detectPCI()+0xbc>
c000efdb:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efe0:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000efe5:	eb 25                	jmp    c000f00c <ACPI::detectPCI()+0xe0>
c000efe7:	90                   	nop
c000efe8:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000efed:	75 1d                	jne    c000f00c <ACPI::detectPCI()+0xe0>
c000efef:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eff4:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000eff9:	74 11                	je     c000f00c <ACPI::detectPCI()+0xe0>
c000effb:	83 ec 0c             	sub    esp,0xc
c000effe:	68 98 e3 01 c0       	push   0xc001e398
c000f003:	e8 ef 16 00 00       	call   c00106f7 <Krnl::panic(char const*)>
c000f008:	83 c4 10             	add    esp,0x10
c000f00b:	90                   	nop
c000f00c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000f011:	0f 84 85 00 00 00    	je     c000f09c <ACPI::detectPCI()+0x170>
c000f017:	83 ec 0c             	sub    esp,0xc
c000f01a:	68 23 e4 01 c0       	push   0xc001e423
c000f01f:	e8 4f 8e ff ff       	call   c0007e73 <Krnl::setBootMessage(char const*)>
c000f024:	83 c4 10             	add    esp,0x10
c000f027:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f02f:	83 ec 0c             	sub    esp,0xc
c000f032:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f036:	e8 de 8d ff ff       	call   c0007e19 <malloc>
c000f03b:	83 c4 10             	add    esp,0x10
c000f03e:	89 c3                	mov    ebx,eax
c000f040:	83 ec 0c             	sub    esp,0xc
c000f043:	53                   	push   ebx
c000f044:	e8 bd 94 00 00       	call   c0018506 <PCI::PCI()>
c000f049:	83 c4 10             	add    esp,0x10
c000f04c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f050:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f054:	83 ec 08             	sub    esp,0x8
c000f057:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f05b:	50                   	push   eax
c000f05c:	e8 87 cf ff ff       	call   c000bfe8 <Device::addChild(Device*)>
c000f061:	83 c4 10             	add    esp,0x10
c000f064:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f068:	8b 00                	mov    eax,DWORD PTR [eax]
c000f06a:	83 c0 08             	add    eax,0x8
c000f06d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f06f:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000f074:	74 0a                	je     c000f080 <ACPI::detectPCI()+0x154>
c000f076:	ba 01 00 00 00       	mov    edx,0x1
c000f07b:	eb 0b                	jmp    c000f088 <ACPI::detectPCI()+0x15c>
c000f07d:	8d 76 00             	lea    esi,[esi+0x0]
c000f080:	ba 02 00 00 00       	mov    edx,0x2
c000f085:	8d 76 00             	lea    esi,[esi+0x0]
c000f088:	6a 00                	push   0x0
c000f08a:	6a 00                	push   0x0
c000f08c:	52                   	push   edx
c000f08d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f091:	ff d0                	call   eax
c000f093:	83 c4 10             	add    esp,0x10
c000f096:	e9 91 00 00 00       	jmp    c000f12c <ACPI::detectPCI()+0x200>
c000f09b:	90                   	nop
c000f09c:	83 ec 0c             	sub    esp,0xc
c000f09f:	68 3b e4 01 c0       	push   0xc001e43b
c000f0a4:	e8 ca 8d ff ff       	call   c0007e73 <Krnl::setBootMessage(char const*)>
c000f0a9:	83 c4 10             	add    esp,0x10
c000f0ac:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f0b3:	83 ec 0c             	sub    esp,0xc
c000f0b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f0ba:	e8 5a 8d ff ff       	call   c0007e19 <malloc>
c000f0bf:	83 c4 10             	add    esp,0x10
c000f0c2:	89 c3                	mov    ebx,eax
c000f0c4:	83 ec 0c             	sub    esp,0xc
c000f0c7:	53                   	push   ebx
c000f0c8:	e8 65 9f 00 00       	call   c0019032 <IDE::IDE()>
c000f0cd:	83 c4 10             	add    esp,0x10
c000f0d0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f0d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f0d8:	83 ec 08             	sub    esp,0x8
c000f0db:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f0df:	50                   	push   eax
c000f0e0:	e8 03 cf ff ff       	call   c000bfe8 <Device::addChild(Device*)>
c000f0e5:	83 c4 10             	add    esp,0x10
c000f0e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0ec:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f0f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0fa:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f103:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f107:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f114:	8b 00                	mov    eax,DWORD PTR [eax]
c000f116:	83 c0 08             	add    eax,0x8
c000f119:	8b 00                	mov    eax,DWORD PTR [eax]
c000f11b:	6a 00                	push   0x0
c000f11d:	6a 00                	push   0x0
c000f11f:	6a 00                	push   0x0
c000f121:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f125:	ff d0                	call   eax
c000f127:	83 c4 10             	add    esp,0x10
c000f12a:	66 90                	xchg   ax,ax
c000f12c:	90                   	nop
c000f12d:	83 c4 28             	add    esp,0x28
c000f130:	5b                   	pop    ebx
c000f131:	c3                   	ret    
c000f132:	66 90                	xchg   ax,ax

c000f134 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f134:	83 ec 1c             	sub    esp,0x1c
c000f137:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f13b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f13e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f142:	8b 15 f8 08 02 c0    	mov    edx,DWORD PTR ds:0xc00208f8
c000f148:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f14c:	25 ff 00 00 00       	and    eax,0xff
c000f151:	83 ec 08             	sub    esp,0x8
c000f154:	50                   	push   eax
c000f155:	52                   	push   edx
c000f156:	e8 af 83 ff ff       	call   c000750a <Computer::readCMOS(unsigned char)>
c000f15b:	83 c4 10             	add    esp,0x10
c000f15e:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f162:	8b 15 f8 08 02 c0    	mov    edx,DWORD PTR ds:0xc00208f8
c000f168:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f16c:	25 ff 00 00 00       	and    eax,0xff
c000f171:	83 ec 04             	sub    esp,0x4
c000f174:	6a 01                	push   0x1
c000f176:	50                   	push   eax
c000f177:	52                   	push   edx
c000f178:	e8 a3 84 ff ff       	call   c0007620 <Computer::writeCMOS(unsigned char, unsigned char)>
c000f17d:	83 c4 10             	add    esp,0x10
c000f180:	90                   	nop
c000f181:	83 c4 1c             	add    esp,0x1c
c000f184:	c3                   	ret    
c000f185:	90                   	nop
c000f186:	66 90                	xchg   ax,ax

c000f188 <ACPI::sleep()>:
c000f188:	83 ec 0c             	sub    esp,0xc
c000f18b:	a1 e0 2e 02 c0       	mov    eax,ds:0xc0022ee0
c000f190:	85 c0                	test   eax,eax
c000f192:	74 08                	je     c000f19c <ACPI::sleep()+0x14>
c000f194:	a1 e0 2e 02 c0       	mov    eax,ds:0xc0022ee0
c000f199:	ff d0                	call   eax
c000f19b:	90                   	nop
c000f19c:	90                   	nop
c000f19d:	83 c4 0c             	add    esp,0xc
c000f1a0:	c3                   	ret    
c000f1a1:	90                   	nop
c000f1a2:	66 90                	xchg   ax,ax

c000f1a4 <ACPI::open(int, int, void*)>:
c000f1a4:	57                   	push   edi
c000f1a5:	56                   	push   esi
c000f1a6:	53                   	push   ebx
c000f1a7:	81 ec 70 01 00 00    	sub    esp,0x170
c000f1ad:	83 ec 0c             	sub    esp,0xc
c000f1b0:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f1b7:	e8 70 fd ff ff       	call   c000ef2c <ACPI::detectPCI()>
c000f1bc:	83 c4 10             	add    esp,0x10
c000f1bf:	83 ec 0c             	sub    esp,0xc
c000f1c2:	68 c0 e3 01 c0       	push   0xc001e3c0
c000f1c7:	e8 a7 8c ff ff       	call   c0007e73 <Krnl::setBootMessage(char const*)>
c000f1cc:	83 c4 10             	add    esp,0x10
c000f1cf:	83 ec 0c             	sub    esp,0xc
c000f1d2:	68 50 e4 01 c0       	push   0xc001e450
c000f1d7:	e8 07 34 00 00       	call   c00125e3 <Thr::loadKernelSymbolTable(char const*)>
c000f1dc:	83 c4 10             	add    esp,0x10
c000f1df:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000f1e7:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000f1f2:	83 ec 0c             	sub    esp,0xc
c000f1f5:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f1fc:	e8 18 8c ff ff       	call   c0007e19 <malloc>
c000f201:	83 c4 10             	add    esp,0x10
c000f204:	89 c3                	mov    ebx,eax
c000f206:	a1 f0 3d 02 c0       	mov    eax,ds:0xc0023df0
c000f20b:	83 ec 04             	sub    esp,0x4
c000f20e:	50                   	push   eax
c000f20f:	68 6e e4 01 c0       	push   0xc001e46e
c000f214:	53                   	push   ebx
c000f215:	e8 04 bf ff ff       	call   c000b11e <File::File(char const*, Process*)>
c000f21a:	83 c4 10             	add    esp,0x10
c000f21d:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000f224:	83 ec 08             	sub    esp,0x8
c000f227:	6a 01                	push   0x1
c000f229:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f230:	e8 a9 bf ff ff       	call   c000b1de <File::open(FileOpenMode)>
c000f235:	83 c4 10             	add    esp,0x10
c000f238:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000f23f:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000f247:	75 17                	jne    c000f260 <ACPI::open(int, int, void*)+0xbc>
c000f249:	83 ec 0c             	sub    esp,0xc
c000f24c:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f253:	e8 e4 bf ff ff       	call   c000b23c <File::close()>
c000f258:	83 c4 10             	add    esp,0x10
c000f25b:	eb 0b                	jmp    c000f268 <ACPI::open(int, int, void*)+0xc4>
c000f25d:	8d 76 00             	lea    esi,[esi+0x0]
c000f260:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000f268:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000f270:	74 1e                	je     c000f290 <ACPI::open(int, int, void*)+0xec>
c000f272:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000f279:	8b 00                	mov    eax,DWORD PTR [eax]
c000f27b:	83 c0 08             	add    eax,0x8
c000f27e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f280:	83 ec 0c             	sub    esp,0xc
c000f283:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f28a:	ff d0                	call   eax
c000f28c:	83 c4 10             	add    esp,0x10
c000f28f:	90                   	nop
c000f290:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000f297:	83 f0 01             	xor    eax,0x1
c000f29a:	84 c0                	test   al,al
c000f29c:	74 42                	je     c000f2e0 <ACPI::open(int, int, void*)+0x13c>
c000f29e:	83 ec 0c             	sub    esp,0xc
c000f2a1:	68 8c e4 01 c0       	push   0xc001e48c
c000f2a6:	e8 c8 8b ff ff       	call   c0007e73 <Krnl::setBootMessage(char const*)>
c000f2ab:	83 c4 10             	add    esp,0x10
c000f2ae:	83 ec 04             	sub    esp,0x4
c000f2b1:	6a 0c                	push   0xc
c000f2b3:	68 a7 e4 01 c0       	push   0xc001e4a7
c000f2b8:	68 b8 e4 01 c0       	push   0xc001e4b8
c000f2bd:	e8 20 1b 00 00       	call   c0010de2 <Reg::readIntWithDefault(char*, char*, int)>
c000f2c2:	83 c4 10             	add    esp,0x10
c000f2c5:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000f2cc:	83 ec 0c             	sub    esp,0xc
c000f2cf:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000f2d6:	e8 84 a8 ff ff       	call   c0009b5f <Virt::setupPageSwapping(int)>
c000f2db:	83 c4 10             	add    esp,0x10
c000f2de:	66 90                	xchg   ax,ax
c000f2e0:	83 ec 0c             	sub    esp,0xc
c000f2e3:	68 40 d5 01 c0       	push   0xc001d540
c000f2e8:	e8 86 8b ff ff       	call   c0007e73 <Krnl::setBootMessage(char const*)>
c000f2ed:	83 c4 10             	add    esp,0x10
c000f2f0:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000f2f7:	83 ec 08             	sub    esp,0x8
c000f2fa:	6a 12                	push   0x12
c000f2fc:	50                   	push   eax
c000f2fd:	e8 fe cf ff ff       	call   c000c300 <getDevicesOfType(DeviceType)>
c000f302:	83 c4 0c             	add    esp,0xc
c000f305:	8d 76 00             	lea    esi,[esi+0x0]
c000f308:	83 ec 0c             	sub    esp,0xc
c000f30b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f312:	50                   	push   eax
c000f313:	e8 34 d6 00 00       	call   c001c94c <LinkedList<Device>::isEmpty()>
c000f318:	83 c4 10             	add    esp,0x10
c000f31b:	83 f0 01             	xor    eax,0x1
c000f31e:	84 c0                	test   al,al
c000f320:	0f 84 46 01 00 00    	je     c000f46c <ACPI::open(int, int, void*)+0x2c8>
c000f326:	83 ec 0c             	sub    esp,0xc
c000f329:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f330:	50                   	push   eax
c000f331:	e8 32 d6 00 00       	call   c001c968 <LinkedList<Device>::getFirstElement()>
c000f336:	83 c4 10             	add    esp,0x10
c000f339:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000f340:	83 ec 0c             	sub    esp,0xc
c000f343:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f34a:	50                   	push   eax
c000f34b:	e8 20 d6 00 00       	call   c001c970 <LinkedList<Device>::removeFirst()>
c000f350:	83 c4 10             	add    esp,0x10
c000f353:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000f35a:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000f361:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000f368:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f36c:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000f372:	ba 09 00 00 00       	mov    edx,0x9
c000f377:	fc                   	cld    
c000f378:	89 c7                	mov    edi,eax
c000f37a:	89 de                	mov    esi,ebx
c000f37c:	89 d1                	mov    ecx,edx
c000f37e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f380:	83 ec 08             	sub    esp,0x8
c000f383:	8d 44 24 38          	lea    eax,[esp+0x38]
c000f387:	50                   	push   eax
c000f388:	83 ec 24             	sub    esp,0x24
c000f38b:	89 e0                	mov    eax,esp
c000f38d:	89 c3                	mov    ebx,eax
c000f38f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000f393:	ba 09 00 00 00       	mov    edx,0x9
c000f398:	89 df                	mov    edi,ebx
c000f39a:	89 c6                	mov    esi,eax
c000f39c:	89 d1                	mov    ecx,edx
c000f39e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f3a0:	e8 43 96 00 00       	call   c00189e8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f3a5:	83 c4 30             	add    esp,0x30
c000f3a8:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000f3af:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000f3b7:	0f 84 4b ff ff ff    	je     c000f308 <ACPI::open(int, int, void*)+0x164>
c000f3bd:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000f3c8:	83 ec 0c             	sub    esp,0xc
c000f3cb:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000f3d2:	e8 42 8a ff ff       	call   c0007e19 <malloc>
c000f3d7:	83 c4 10             	add    esp,0x10
c000f3da:	89 c3                	mov    ebx,eax
c000f3dc:	a1 f0 3d 02 c0       	mov    eax,ds:0xc0023df0
c000f3e1:	83 ec 04             	sub    esp,0x4
c000f3e4:	50                   	push   eax
c000f3e5:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f3ec:	53                   	push   ebx
c000f3ed:	e8 2c bd ff ff       	call   c000b11e <File::File(char const*, Process*)>
c000f3f2:	83 c4 10             	add    esp,0x10
c000f3f5:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000f3fc:	83 ec 0c             	sub    esp,0xc
c000f3ff:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f406:	e8 41 c0 ff ff       	call   c000b44c <File::exists()>
c000f40b:	83 c4 10             	add    esp,0x10
c000f40e:	84 c0                	test   al,al
c000f410:	74 2a                	je     c000f43c <ACPI::open(int, int, void*)+0x298>
c000f412:	83 ec 08             	sub    esp,0x8
c000f415:	6a 01                	push   0x1
c000f417:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f41e:	e8 37 3c 00 00       	call   c001305a <Thr::loadDLL(char const*, bool)>
c000f423:	83 c4 10             	add    esp,0x10
c000f426:	83 ec 08             	sub    esp,0x8
c000f429:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f430:	50                   	push   eax
c000f431:	e8 55 3e 00 00       	call   c001328b <Thr::executeDLL(unsigned long, void*)>
c000f436:	83 c4 10             	add    esp,0x10
c000f439:	8d 76 00             	lea    esi,[esi+0x0]
c000f43c:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000f444:	0f 84 be fe ff ff    	je     c000f308 <ACPI::open(int, int, void*)+0x164>
c000f44a:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000f451:	8b 00                	mov    eax,DWORD PTR [eax]
c000f453:	83 c0 08             	add    eax,0x8
c000f456:	8b 00                	mov    eax,DWORD PTR [eax]
c000f458:	83 ec 0c             	sub    esp,0xc
c000f45b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f462:	ff d0                	call   eax
c000f464:	83 c4 10             	add    esp,0x10
c000f467:	e9 9c fe ff ff       	jmp    c000f308 <ACPI::open(int, int, void*)+0x164>
c000f46c:	83 ec 0c             	sub    esp,0xc
c000f46f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f476:	50                   	push   eax
c000f477:	e8 cc d4 00 00       	call   c001c948 <LinkedList<Device>::~LinkedList()>
c000f47c:	83 c4 10             	add    esp,0x10
c000f47f:	8b 1d f8 08 02 c0    	mov    ebx,DWORD PTR ds:0xc00208f8
c000f485:	83 ec 08             	sub    esp,0x8
c000f488:	6a 01                	push   0x1
c000f48a:	68 bf e4 01 c0       	push   0xc001e4bf
c000f48f:	e8 c6 3b 00 00       	call   c001305a <Thr::loadDLL(char const*, bool)>
c000f494:	83 c4 10             	add    esp,0x10
c000f497:	83 ec 08             	sub    esp,0x8
c000f49a:	53                   	push   ebx
c000f49b:	50                   	push   eax
c000f49c:	e8 ea 3d 00 00       	call   c001328b <Thr::executeDLL(unsigned long, void*)>
c000f4a1:	83 c4 10             	add    esp,0x10
c000f4a4:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c000f4a9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f4af:	83 e0 04             	and    eax,0x4
c000f4b2:	84 c0                	test   al,al
c000f4b4:	0f 84 16 01 00 00    	je     c000f5d0 <ACPI::open(int, int, void*)+0x42c>
c000f4ba:	83 ec 0c             	sub    esp,0xc
c000f4bd:	68 dc e4 01 c0       	push   0xc001e4dc
c000f4c2:	e8 ac 89 ff ff       	call   c0007e73 <Krnl::setBootMessage(char const*)>
c000f4c7:	83 c4 10             	add    esp,0x10
c000f4ca:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000f4d5:	83 ec 0c             	sub    esp,0xc
c000f4d8:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000f4df:	e8 35 89 ff ff       	call   c0007e19 <malloc>
c000f4e4:	83 c4 10             	add    esp,0x10
c000f4e7:	89 c3                	mov    ebx,eax
c000f4e9:	a1 f0 3d 02 c0       	mov    eax,ds:0xc0023df0
c000f4ee:	83 ec 04             	sub    esp,0x4
c000f4f1:	50                   	push   eax
c000f4f2:	68 f9 e4 01 c0       	push   0xc001e4f9
c000f4f7:	53                   	push   ebx
c000f4f8:	e8 21 bc ff ff       	call   c000b11e <File::File(char const*, Process*)>
c000f4fd:	83 c4 10             	add    esp,0x10
c000f500:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000f507:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f50f:	74 1b                	je     c000f52c <ACPI::open(int, int, void*)+0x388>
c000f511:	83 ec 0c             	sub    esp,0xc
c000f514:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f51b:	e8 2c bf ff ff       	call   c000b44c <File::exists()>
c000f520:	83 c4 10             	add    esp,0x10
c000f523:	84 c0                	test   al,al
c000f525:	74 05                	je     c000f52c <ACPI::open(int, int, void*)+0x388>
c000f527:	b0 01                	mov    al,0x1
c000f529:	eb 05                	jmp    c000f530 <ACPI::open(int, int, void*)+0x38c>
c000f52b:	90                   	nop
c000f52c:	b0 00                	mov    al,0x0
c000f52e:	66 90                	xchg   ax,ax
c000f530:	84 c0                	test   al,al
c000f532:	74 28                	je     c000f55c <ACPI::open(int, int, void*)+0x3b8>
c000f534:	83 ec 08             	sub    esp,0x8
c000f537:	6a 01                	push   0x1
c000f539:	68 f9 e4 01 c0       	push   0xc001e4f9
c000f53e:	e8 17 3b 00 00       	call   c001305a <Thr::loadDLL(char const*, bool)>
c000f543:	83 c4 10             	add    esp,0x10
c000f546:	83 ec 08             	sub    esp,0x8
c000f549:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000f550:	50                   	push   eax
c000f551:	e8 35 3d 00 00       	call   c001328b <Thr::executeDLL(unsigned long, void*)>
c000f556:	83 c4 10             	add    esp,0x10
c000f559:	8d 76 00             	lea    esi,[esi+0x0]
c000f55c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f564:	74 2a                	je     c000f590 <ACPI::open(int, int, void*)+0x3ec>
c000f566:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f56e:	74 20                	je     c000f590 <ACPI::open(int, int, void*)+0x3ec>
c000f570:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000f577:	8b 00                	mov    eax,DWORD PTR [eax]
c000f579:	83 c0 08             	add    eax,0x8
c000f57c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f57e:	83 ec 0c             	sub    esp,0xc
c000f581:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f588:	ff d0                	call   eax
c000f58a:	83 c4 10             	add    esp,0x10
c000f58d:	8d 76 00             	lea    esi,[esi+0x0]
c000f590:	a1 08 31 02 c0       	mov    eax,ds:0xc0023108
c000f595:	83 ec 08             	sub    esp,0x8
c000f598:	68 16 e5 01 c0       	push   0xc001e516
c000f59d:	50                   	push   eax
c000f59e:	e8 31 f2 ff ff       	call   c000e7d4 <findDataTable(unsigned char*, char*)>
c000f5a3:	83 c4 10             	add    esp,0x10
c000f5a6:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f5ad:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f5b5:	74 19                	je     c000f5d0 <ACPI::open(int, int, void*)+0x42c>
c000f5b7:	83 ec 08             	sub    esp,0x8
c000f5ba:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f5c1:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f5c8:	e8 67 fb ff ff       	call   c000f134 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f5cd:	83 c4 10             	add    esp,0x10
c000f5d0:	b8 00 00 00 00       	mov    eax,0x0
c000f5d5:	81 c4 70 01 00 00    	add    esp,0x170
c000f5db:	5b                   	pop    ebx
c000f5dc:	5e                   	pop    esi
c000f5dd:	5f                   	pop    edi
c000f5de:	c3                   	ret    
c000f5df:	90                   	nop

c000f5e0 <CPU::close(int, int, void*)>:
c000f5e0:	31 c0                	xor    eax,eax
c000f5e2:	c3                   	ret    
c000f5e3:	90                   	nop

c000f5e4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f5e4:	60                   	pusha  
c000f5e5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f5e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f5ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f5f1:	9c                   	pushf  
c000f5f2:	fa                   	cli    
c000f5f3:	0f 09                	wbinvd 
c000f5f5:	0f 30                	wrmsr  
c000f5f7:	9d                   	popf   
c000f5f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f5fc:	89 02                	mov    DWORD PTR [edx],eax
c000f5fe:	61                   	popa   
c000f5ff:	c3                   	ret    

c000f600 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f600:	60                   	pusha  
c000f601:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f605:	9c                   	pushf  
c000f606:	fa                   	cli    
c000f607:	0f 09                	wbinvd 
c000f609:	31 c0                	xor    eax,eax
c000f60b:	31 d2                	xor    edx,edx
c000f60d:	0f 32                	rdmsr  
c000f60f:	9d                   	popf   
c000f610:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f614:	89 02                	mov    DWORD PTR [edx],eax
c000f616:	61                   	popa   
c000f617:	c3                   	ret    

c000f618 <CPU::AMD_K6_writeback(int, int, int)>:
c000f618:	56                   	push   esi
c000f619:	53                   	push   ebx
c000f61a:	83 ec 10             	sub    esp,0x10
c000f61d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f621:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f626:	75 5d                	jne    c000f685 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f628:	83 f8 08             	cmp    eax,0x8
c000f62b:	75 09                	jne    c000f636 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f62d:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f632:	7e 13                	jle    c000f647 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f634:	eb 30                	jmp    c000f666 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f636:	83 f8 06             	cmp    eax,0x6
c000f639:	7c 4a                	jl     c000f685 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f63b:	83 f8 07             	cmp    eax,0x7
c000f63e:	7e 07                	jle    c000f647 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f640:	83 f8 09             	cmp    eax,0x9
c000f643:	74 21                	je     c000f666 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f645:	eb 3e                	jmp    c000f685 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f647:	89 e6                	mov    esi,esp
c000f649:	8b 1d 1c 09 02 c0    	mov    ebx,DWORD PTR ds:0xc002091c
c000f64f:	56                   	push   esi
c000f650:	c1 eb 15             	shr    ebx,0x15
c000f653:	68 82 00 00 c0       	push   0xc0000082
c000f658:	83 e3 7e             	and    ebx,0x7e
c000f65b:	e8 a0 ff ff ff       	call   c000f600 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f660:	56                   	push   esi
c000f661:	6a 00                	push   0x0
c000f663:	53                   	push   ebx
c000f664:	eb 12                	jmp    c000f678 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f666:	89 e3                	mov    ebx,esp
c000f668:	53                   	push   ebx
c000f669:	68 82 00 00 c0       	push   0xc0000082
c000f66e:	e8 8d ff ff ff       	call   c000f600 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f673:	53                   	push   ebx
c000f674:	6a 00                	push   0x0
c000f676:	6a 00                	push   0x0
c000f678:	68 82 00 00 c0       	push   0xc0000082
c000f67d:	e8 62 ff ff ff       	call   c000f5e4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f682:	83 c4 18             	add    esp,0x18
c000f685:	83 c4 10             	add    esp,0x10
c000f688:	5b                   	pop    ebx
c000f689:	5e                   	pop    esi
c000f68a:	c3                   	ret    
c000f68b:	90                   	nop

c000f68c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f68c:	55                   	push   ebp
c000f68d:	57                   	push   edi
c000f68e:	56                   	push   esi
c000f68f:	53                   	push   ebx
c000f690:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f694:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f698:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f69c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f6a0:	39 05 70 f8 01 c0    	cmp    DWORD PTR ds:0xc001f870,eax
c000f6a6:	75 23                	jne    c000f6cb <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f6a8:	a1 6c 33 02 c0       	mov    eax,ds:0xc002336c
c000f6ad:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f6b1:	89 06                	mov    DWORD PTR [esi],eax
c000f6b3:	a1 68 33 02 c0       	mov    eax,ds:0xc0023368
c000f6b8:	89 07                	mov    DWORD PTR [edi],eax
c000f6ba:	a1 64 33 02 c0       	mov    eax,ds:0xc0023364
c000f6bf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f6c2:	a1 60 33 02 c0       	mov    eax,ds:0xc0023360
c000f6c7:	89 02                	mov    DWORD PTR [edx],eax
c000f6c9:	eb 3f                	jmp    c000f70a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f6cb:	31 c9                	xor    ecx,ecx
c000f6cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f6d1:	0f a2                	cpuid  
c000f6d3:	89 06                	mov    DWORD PTR [esi],eax
c000f6d5:	89 1f                	mov    DWORD PTR [edi],ebx
c000f6d7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f6db:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f6de:	89 10                	mov    DWORD PTR [eax],edx
c000f6e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f6e4:	a3 70 f8 01 c0       	mov    ds:0xc001f870,eax
c000f6e9:	8b 06                	mov    eax,DWORD PTR [esi]
c000f6eb:	a3 6c 33 02 c0       	mov    ds:0xc002336c,eax
c000f6f0:	8b 07                	mov    eax,DWORD PTR [edi]
c000f6f2:	a3 68 33 02 c0       	mov    ds:0xc0023368,eax
c000f6f7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f6fa:	a3 64 33 02 c0       	mov    ds:0xc0023364,eax
c000f6ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f703:	8b 00                	mov    eax,DWORD PTR [eax]
c000f705:	a3 60 33 02 c0       	mov    ds:0xc0023360,eax
c000f70a:	5b                   	pop    ebx
c000f70b:	5e                   	pop    esi
c000f70c:	5f                   	pop    edi
c000f70d:	5d                   	pop    ebp
c000f70e:	c3                   	ret    
c000f70f:	90                   	nop

c000f710 <CPU::cpuidCheckEDX(unsigned int)>:
c000f710:	83 ec 10             	sub    esp,0x10
c000f713:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f717:	50                   	push   eax
c000f718:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f71c:	50                   	push   eax
c000f71d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f721:	50                   	push   eax
c000f722:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f726:	50                   	push   eax
c000f727:	6a 01                	push   0x1
c000f729:	e8 5e ff ff ff       	call   c000f68c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f72e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f732:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f736:	0f 95 c0             	setne  al
c000f739:	83 c4 24             	add    esp,0x24
c000f73c:	c3                   	ret    
c000f73d:	90                   	nop

c000f73e <CPU::cpuidCheckECX(unsigned int)>:
c000f73e:	83 ec 10             	sub    esp,0x10
c000f741:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f745:	50                   	push   eax
c000f746:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f74a:	50                   	push   eax
c000f74b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f74f:	50                   	push   eax
c000f750:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f754:	50                   	push   eax
c000f755:	6a 01                	push   0x1
c000f757:	e8 30 ff ff ff       	call   c000f68c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f75c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f760:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f764:	0f 95 c0             	setne  al
c000f767:	83 c4 24             	add    esp,0x24
c000f76a:	c3                   	ret    
c000f76b:	90                   	nop

c000f76c <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f76c:	83 ec 10             	sub    esp,0x10
c000f76f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f773:	50                   	push   eax
c000f774:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f778:	50                   	push   eax
c000f779:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f77d:	50                   	push   eax
c000f77e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f782:	50                   	push   eax
c000f783:	6a 07                	push   0x7
c000f785:	e8 02 ff ff ff       	call   c000f68c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f78a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f78e:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f792:	0f 95 c0             	setne  al
c000f795:	83 c4 24             	add    esp,0x24
c000f798:	c3                   	ret    
c000f799:	90                   	nop

c000f79a <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f79a:	83 ec 10             	sub    esp,0x10
c000f79d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7a1:	50                   	push   eax
c000f7a2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7a6:	50                   	push   eax
c000f7a7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7ab:	50                   	push   eax
c000f7ac:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7b0:	50                   	push   eax
c000f7b1:	6a 07                	push   0x7
c000f7b3:	e8 d4 fe ff ff       	call   c000f68c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f7b8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7bc:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f7c0:	0f 95 c0             	setne  al
c000f7c3:	83 c4 24             	add    esp,0x24
c000f7c6:	c3                   	ret    
c000f7c7:	90                   	nop

c000f7c8 <CPU::CPU()>:
c000f7c8:	83 ec 0c             	sub    esp,0xc
c000f7cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7cf:	83 ec 08             	sub    esp,0x8
c000f7d2:	68 39 e6 01 c0       	push   0xc001e639
c000f7d7:	50                   	push   eax
c000f7d8:	e8 a3 c9 ff ff       	call   c000c180 <Device::Device(char const*)>
c000f7dd:	83 c4 10             	add    esp,0x10
c000f7e0:	ba c0 e6 01 c0       	mov    edx,0xc001e6c0
c000f7e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7e9:	89 10                	mov    DWORD PTR [eax],edx
c000f7eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7ef:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7fd:	05 78 01 00 00       	add    eax,0x178
c000f802:	83 ec 0c             	sub    esp,0xc
c000f805:	50                   	push   eax
c000f806:	e8 d3 7e ff ff       	call   c00076de <GDT::GDT()>
c000f80b:	83 c4 10             	add    esp,0x10
c000f80e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f812:	05 7c 09 00 00       	add    eax,0x97c
c000f817:	83 ec 0c             	sub    esp,0xc
c000f81a:	50                   	push   eax
c000f81b:	e8 f4 80 ff ff       	call   c0007914 <IDT::IDT()>
c000f820:	83 c4 10             	add    esp,0x10
c000f823:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f827:	05 7c 11 00 00       	add    eax,0x117c
c000f82c:	83 ec 0c             	sub    esp,0xc
c000f82f:	50                   	push   eax
c000f830:	e8 63 9a ff ff       	call   c0009298 <TSS::TSS()>
c000f835:	83 c4 10             	add    esp,0x10
c000f838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f83c:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f843:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f847:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f851:	90                   	nop
c000f852:	83 c4 0c             	add    esp,0xc
c000f855:	c3                   	ret    

c000f856 <CPU::displayFeatures()>:
c000f856:	c3                   	ret    
c000f857:	90                   	nop

c000f858 <CPU::detectFeatures()>:
c000f858:	55                   	push   ebp
c000f859:	57                   	push   edi
c000f85a:	56                   	push   esi
c000f85b:	53                   	push   ebx
c000f85c:	83 ec 30             	sub    esp,0x30
c000f85f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f863:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f86d:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f874:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f87a:	6a 0d                	push   0xd
c000f87c:	6a 00                	push   0x0
c000f87e:	55                   	push   ebp
c000f87f:	e8 6c 0c ff ff       	call   c00004f0 <memset>
c000f884:	83 c4 10             	add    esp,0x10
c000f887:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c000f88c:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f893:	0f 84 d5 05 00 00    	je     c000fe6e <CPU::detectFeatures()+0x616>
c000f899:	83 ec 0c             	sub    esp,0xc
c000f89c:	89 ef                	mov    edi,ebp
c000f89e:	6a 10                	push   0x10
c000f8a0:	e8 6b fe ff ff       	call   c000f710 <CPU::cpuidCheckEDX(unsigned int)>
c000f8a5:	83 e0 01             	and    eax,0x1
c000f8a8:	8d 14 00             	lea    edx,[eax+eax*1]
c000f8ab:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8b1:	83 e0 fd             	and    eax,0xfffffffd
c000f8b4:	09 d0                	or     eax,edx
c000f8b6:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8bc:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f8c3:	e8 48 fe ff ff       	call   c000f710 <CPU::cpuidCheckEDX(unsigned int)>
c000f8c8:	83 e0 01             	and    eax,0x1
c000f8cb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f8d2:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8d8:	83 e0 fb             	and    eax,0xfffffffb
c000f8db:	09 d0                	or     eax,edx
c000f8dd:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8e3:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f8ea:	e8 21 fe ff ff       	call   c000f710 <CPU::cpuidCheckEDX(unsigned int)>
c000f8ef:	83 e0 01             	and    eax,0x1
c000f8f2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f8f9:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8ff:	83 e0 f7             	and    eax,0xfffffff7
c000f902:	09 d0                	or     eax,edx
c000f904:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f90a:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f911:	e8 fa fd ff ff       	call   c000f710 <CPU::cpuidCheckEDX(unsigned int)>
c000f916:	83 e0 01             	and    eax,0x1
c000f919:	c1 e0 04             	shl    eax,0x4
c000f91c:	88 c2                	mov    dl,al
c000f91e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f924:	83 e0 ef             	and    eax,0xffffffef
c000f927:	09 d0                	or     eax,edx
c000f929:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f92f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f936:	e8 d5 fd ff ff       	call   c000f710 <CPU::cpuidCheckEDX(unsigned int)>
c000f93b:	83 e0 01             	and    eax,0x1
c000f93e:	c1 e0 05             	shl    eax,0x5
c000f941:	88 c2                	mov    dl,al
c000f943:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f949:	83 e0 df             	and    eax,0xffffffdf
c000f94c:	09 d0                	or     eax,edx
c000f94e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f954:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f95b:	e8 b0 fd ff ff       	call   c000f710 <CPU::cpuidCheckEDX(unsigned int)>
c000f960:	83 e0 01             	and    eax,0x1
c000f963:	8d 14 00             	lea    edx,[eax+eax*1]
c000f966:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f96c:	83 e0 fd             	and    eax,0xfffffffd
c000f96f:	09 d0                	or     eax,edx
c000f971:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f977:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f97e:	e8 8d fd ff ff       	call   c000f710 <CPU::cpuidCheckEDX(unsigned int)>
c000f983:	83 e0 01             	and    eax,0x1
c000f986:	c1 e0 06             	shl    eax,0x6
c000f989:	88 c2                	mov    dl,al
c000f98b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f991:	83 e0 bf             	and    eax,0xffffffbf
c000f994:	09 d0                	or     eax,edx
c000f996:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f99c:	58                   	pop    eax
c000f99d:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f9a1:	50                   	push   eax
c000f9a2:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f9a6:	50                   	push   eax
c000f9a7:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f9ab:	56                   	push   esi
c000f9ac:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f9b0:	50                   	push   eax
c000f9b1:	6a 00                	push   0x0
c000f9b3:	e8 d4 fc ff ff       	call   c000f68c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f9b8:	b8 04 00 00 00       	mov    eax,0x4
c000f9bd:	89 c1                	mov    ecx,eax
c000f9bf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f9c1:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f9c7:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f9cb:	89 c1                	mov    ecx,eax
c000f9cd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f9cf:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f9d5:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f9d9:	89 c1                	mov    ecx,eax
c000f9db:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f9dd:	83 c4 18             	add    esp,0x18
c000f9e0:	68 48 e5 01 c0       	push   0xc001e548
c000f9e5:	55                   	push   ebp
c000f9e6:	e8 15 0d ff ff       	call   c0000700 <strcmp>
c000f9eb:	83 c4 10             	add    esp,0x10
c000f9ee:	85 c0                	test   eax,eax
c000f9f0:	75 0f                	jne    c000fa01 <CPU::detectFeatures()+0x1a9>
c000f9f2:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f9fc:	e9 22 02 00 00       	jmp    c000fc23 <CPU::detectFeatures()+0x3cb>
c000fa01:	50                   	push   eax
c000fa02:	50                   	push   eax
c000fa03:	68 55 e5 01 c0       	push   0xc001e555
c000fa08:	55                   	push   ebp
c000fa09:	e8 f2 0c ff ff       	call   c0000700 <strcmp>
c000fa0e:	83 c4 10             	add    esp,0x10
c000fa11:	85 c0                	test   eax,eax
c000fa13:	74 dd                	je     c000f9f2 <CPU::detectFeatures()+0x19a>
c000fa15:	50                   	push   eax
c000fa16:	50                   	push   eax
c000fa17:	68 62 e5 01 c0       	push   0xc001e562
c000fa1c:	55                   	push   ebp
c000fa1d:	e8 de 0c ff ff       	call   c0000700 <strcmp>
c000fa22:	83 c4 10             	add    esp,0x10
c000fa25:	85 c0                	test   eax,eax
c000fa27:	74 2a                	je     c000fa53 <CPU::detectFeatures()+0x1fb>
c000fa29:	50                   	push   eax
c000fa2a:	50                   	push   eax
c000fa2b:	68 6f e5 01 c0       	push   0xc001e56f
c000fa30:	55                   	push   ebp
c000fa31:	e8 ca 0c ff ff       	call   c0000700 <strcmp>
c000fa36:	83 c4 10             	add    esp,0x10
c000fa39:	85 c0                	test   eax,eax
c000fa3b:	74 16                	je     c000fa53 <CPU::detectFeatures()+0x1fb>
c000fa3d:	50                   	push   eax
c000fa3e:	50                   	push   eax
c000fa3f:	68 7c e5 01 c0       	push   0xc001e57c
c000fa44:	55                   	push   ebp
c000fa45:	e8 b6 0c ff ff       	call   c0000700 <strcmp>
c000fa4a:	83 c4 10             	add    esp,0x10
c000fa4d:	85 c0                	test   eax,eax
c000fa4f:	74 48                	je     c000fa99 <CPU::detectFeatures()+0x241>
c000fa51:	eb 0f                	jmp    c000fa62 <CPU::detectFeatures()+0x20a>
c000fa53:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000fa5d:	e9 c1 01 00 00       	jmp    c000fc23 <CPU::detectFeatures()+0x3cb>
c000fa62:	50                   	push   eax
c000fa63:	50                   	push   eax
c000fa64:	68 89 e5 01 c0       	push   0xc001e589
c000fa69:	55                   	push   ebp
c000fa6a:	e8 91 0c ff ff       	call   c0000700 <strcmp>
c000fa6f:	83 c4 10             	add    esp,0x10
c000fa72:	85 c0                	test   eax,eax
c000fa74:	74 23                	je     c000fa99 <CPU::detectFeatures()+0x241>
c000fa76:	57                   	push   edi
c000fa77:	57                   	push   edi
c000fa78:	68 96 e5 01 c0       	push   0xc001e596
c000fa7d:	55                   	push   ebp
c000fa7e:	e8 7d 0c ff ff       	call   c0000700 <strcmp>
c000fa83:	83 c4 10             	add    esp,0x10
c000fa86:	85 c0                	test   eax,eax
c000fa88:	75 1e                	jne    c000faa8 <CPU::detectFeatures()+0x250>
c000fa8a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fa94:	e9 8a 01 00 00       	jmp    c000fc23 <CPU::detectFeatures()+0x3cb>
c000fa99:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000faa3:	e9 7b 01 00 00       	jmp    c000fc23 <CPU::detectFeatures()+0x3cb>
c000faa8:	56                   	push   esi
c000faa9:	56                   	push   esi
c000faaa:	68 a3 e5 01 c0       	push   0xc001e5a3
c000faaf:	55                   	push   ebp
c000fab0:	e8 4b 0c ff ff       	call   c0000700 <strcmp>
c000fab5:	83 c4 10             	add    esp,0x10
c000fab8:	85 c0                	test   eax,eax
c000faba:	75 0f                	jne    c000facb <CPU::detectFeatures()+0x273>
c000fabc:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000fac6:	e9 58 01 00 00       	jmp    c000fc23 <CPU::detectFeatures()+0x3cb>
c000facb:	51                   	push   ecx
c000facc:	51                   	push   ecx
c000facd:	68 62 e5 01 c0       	push   0xc001e562
c000fad2:	55                   	push   ebp
c000fad3:	e8 28 0c ff ff       	call   c0000700 <strcmp>
c000fad8:	83 c4 10             	add    esp,0x10
c000fadb:	85 c0                	test   eax,eax
c000fadd:	75 0f                	jne    c000faee <CPU::detectFeatures()+0x296>
c000fadf:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000fae9:	e9 35 01 00 00       	jmp    c000fc23 <CPU::detectFeatures()+0x3cb>
c000faee:	52                   	push   edx
c000faef:	52                   	push   edx
c000faf0:	68 b0 e5 01 c0       	push   0xc001e5b0
c000faf5:	55                   	push   ebp
c000faf6:	e8 05 0c ff ff       	call   c0000700 <strcmp>
c000fafb:	83 c4 10             	add    esp,0x10
c000fafe:	85 c0                	test   eax,eax
c000fb00:	75 0f                	jne    c000fb11 <CPU::detectFeatures()+0x2b9>
c000fb02:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000fb0c:	e9 12 01 00 00       	jmp    c000fc23 <CPU::detectFeatures()+0x3cb>
c000fb11:	50                   	push   eax
c000fb12:	50                   	push   eax
c000fb13:	68 bd e5 01 c0       	push   0xc001e5bd
c000fb18:	55                   	push   ebp
c000fb19:	e8 e2 0b ff ff       	call   c0000700 <strcmp>
c000fb1e:	83 c4 10             	add    esp,0x10
c000fb21:	85 c0                	test   eax,eax
c000fb23:	75 0f                	jne    c000fb34 <CPU::detectFeatures()+0x2dc>
c000fb25:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000fb2f:	e9 ef 00 00 00       	jmp    c000fc23 <CPU::detectFeatures()+0x3cb>
c000fb34:	50                   	push   eax
c000fb35:	50                   	push   eax
c000fb36:	68 ca e5 01 c0       	push   0xc001e5ca
c000fb3b:	55                   	push   ebp
c000fb3c:	e8 bf 0b ff ff       	call   c0000700 <strcmp>
c000fb41:	83 c4 10             	add    esp,0x10
c000fb44:	85 c0                	test   eax,eax
c000fb46:	75 0f                	jne    c000fb57 <CPU::detectFeatures()+0x2ff>
c000fb48:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000fb52:	e9 cc 00 00 00       	jmp    c000fc23 <CPU::detectFeatures()+0x3cb>
c000fb57:	50                   	push   eax
c000fb58:	50                   	push   eax
c000fb59:	68 d7 e5 01 c0       	push   0xc001e5d7
c000fb5e:	55                   	push   ebp
c000fb5f:	e8 9c 0b ff ff       	call   c0000700 <strcmp>
c000fb64:	83 c4 10             	add    esp,0x10
c000fb67:	85 c0                	test   eax,eax
c000fb69:	75 0f                	jne    c000fb7a <CPU::detectFeatures()+0x322>
c000fb6b:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000fb75:	e9 a9 00 00 00       	jmp    c000fc23 <CPU::detectFeatures()+0x3cb>
c000fb7a:	50                   	push   eax
c000fb7b:	50                   	push   eax
c000fb7c:	68 e4 e5 01 c0       	push   0xc001e5e4
c000fb81:	55                   	push   ebp
c000fb82:	e8 79 0b ff ff       	call   c0000700 <strcmp>
c000fb87:	83 c4 10             	add    esp,0x10
c000fb8a:	85 c0                	test   eax,eax
c000fb8c:	75 0f                	jne    c000fb9d <CPU::detectFeatures()+0x345>
c000fb8e:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000fb98:	e9 86 00 00 00       	jmp    c000fc23 <CPU::detectFeatures()+0x3cb>
c000fb9d:	50                   	push   eax
c000fb9e:	50                   	push   eax
c000fb9f:	68 f1 e5 01 c0       	push   0xc001e5f1
c000fba4:	55                   	push   ebp
c000fba5:	e8 56 0b ff ff       	call   c0000700 <strcmp>
c000fbaa:	83 c4 10             	add    esp,0x10
c000fbad:	85 c0                	test   eax,eax
c000fbaf:	75 0c                	jne    c000fbbd <CPU::detectFeatures()+0x365>
c000fbb1:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000fbbb:	eb 66                	jmp    c000fc23 <CPU::detectFeatures()+0x3cb>
c000fbbd:	50                   	push   eax
c000fbbe:	50                   	push   eax
c000fbbf:	68 fe e5 01 c0       	push   0xc001e5fe
c000fbc4:	55                   	push   ebp
c000fbc5:	e8 36 0b ff ff       	call   c0000700 <strcmp>
c000fbca:	83 c4 10             	add    esp,0x10
c000fbcd:	85 c0                	test   eax,eax
c000fbcf:	75 0c                	jne    c000fbdd <CPU::detectFeatures()+0x385>
c000fbd1:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000fbdb:	eb 46                	jmp    c000fc23 <CPU::detectFeatures()+0x3cb>
c000fbdd:	57                   	push   edi
c000fbde:	57                   	push   edi
c000fbdf:	68 0b e6 01 c0       	push   0xc001e60b
c000fbe4:	55                   	push   ebp
c000fbe5:	e8 16 0b ff ff       	call   c0000700 <strcmp>
c000fbea:	83 c4 10             	add    esp,0x10
c000fbed:	85 c0                	test   eax,eax
c000fbef:	74 e0                	je     c000fbd1 <CPU::detectFeatures()+0x379>
c000fbf1:	56                   	push   esi
c000fbf2:	56                   	push   esi
c000fbf3:	68 18 e6 01 c0       	push   0xc001e618
c000fbf8:	55                   	push   ebp
c000fbf9:	e8 02 0b ff ff       	call   c0000700 <strcmp>
c000fbfe:	83 c4 10             	add    esp,0x10
c000fc01:	85 c0                	test   eax,eax
c000fc03:	74 cc                	je     c000fbd1 <CPU::detectFeatures()+0x379>
c000fc05:	51                   	push   ecx
c000fc06:	51                   	push   ecx
c000fc07:	68 25 e6 01 c0       	push   0xc001e625
c000fc0c:	55                   	push   ebp
c000fc0d:	e8 ee 0a ff ff       	call   c0000700 <strcmp>
c000fc12:	83 c4 10             	add    esp,0x10
c000fc15:	85 c0                	test   eax,eax
c000fc17:	74 b8                	je     c000fbd1 <CPU::detectFeatures()+0x379>
c000fc19:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000fc23:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000fc28:	0f 86 be 00 00 00    	jbe    c000fcec <CPU::detectFeatures()+0x494>
c000fc2e:	83 ec 0c             	sub    esp,0xc
c000fc31:	68 80 00 00 00       	push   0x80
c000fc36:	e8 31 fb ff ff       	call   c000f76c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc3b:	83 e0 01             	and    eax,0x1
c000fc3e:	c1 e0 06             	shl    eax,0x6
c000fc41:	88 c2                	mov    dl,al
c000fc43:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fc49:	83 e0 bf             	and    eax,0xffffffbf
c000fc4c:	09 d0                	or     eax,edx
c000fc4e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fc54:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000fc5b:	e8 0c fb ff ff       	call   c000f76c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc60:	83 e0 01             	and    eax,0x1
c000fc63:	c1 e0 04             	shl    eax,0x4
c000fc66:	88 c2                	mov    dl,al
c000fc68:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fc6e:	83 e0 ef             	and    eax,0xffffffef
c000fc71:	09 d0                	or     eax,edx
c000fc73:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fc79:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000fc80:	e8 e7 fa ff ff       	call   c000f76c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc85:	c1 e0 07             	shl    eax,0x7
c000fc88:	88 c2                	mov    dl,al
c000fc8a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fc90:	83 e0 7f             	and    eax,0x7f
c000fc93:	09 d0                	or     eax,edx
c000fc95:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fc9b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000fca2:	e8 f3 fa ff ff       	call   c000f79a <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fca7:	83 e0 01             	and    eax,0x1
c000fcaa:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000fcb1:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fcb7:	83 e0 f7             	and    eax,0xfffffff7
c000fcba:	09 d0                	or     eax,edx
c000fcbc:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fcc2:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000fcc9:	e8 cc fa ff ff       	call   c000f79a <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fcce:	83 c4 10             	add    esp,0x10
c000fcd1:	83 e0 01             	and    eax,0x1
c000fcd4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fcdb:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fce1:	83 e0 fb             	and    eax,0xfffffffb
c000fce4:	09 d0                	or     eax,edx
c000fce6:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fcec:	83 ec 0c             	sub    esp,0xc
c000fcef:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fcf3:	50                   	push   eax
c000fcf4:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fcf8:	50                   	push   eax
c000fcf9:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fcfd:	56                   	push   esi
c000fcfe:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fd02:	50                   	push   eax
c000fd03:	6a 01                	push   0x1
c000fd05:	e8 82 f9 ff ff       	call   c000f68c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fd0a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fd0e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000fd14:	88 ca                	mov    dl,cl
c000fd16:	83 e0 f0             	and    eax,0xfffffff0
c000fd19:	83 e2 0f             	and    edx,0xf
c000fd1c:	09 d0                	or     eax,edx
c000fd1e:	88 ca                	mov    dl,cl
c000fd20:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000fd26:	c0 ea 04             	shr    dl,0x4
c000fd29:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000fd2d:	0f b6 c2             	movzx  eax,dl
c000fd30:	83 c4 20             	add    esp,0x20
c000fd33:	c1 e0 06             	shl    eax,0x6
c000fd36:	89 c7                	mov    edi,eax
c000fd38:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000fd3e:	66 25 3f c0          	and    ax,0xc03f
c000fd42:	09 f8                	or     eax,edi
c000fd44:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000fd4b:	89 c8                	mov    eax,ecx
c000fd4d:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000fd54:	c1 e8 08             	shr    eax,0x8
c000fd57:	83 e5 3f             	and    ebp,0x3f
c000fd5a:	83 e0 0f             	and    eax,0xf
c000fd5d:	89 c7                	mov    edi,eax
c000fd5f:	c1 e7 06             	shl    edi,0x6
c000fd62:	09 ef                	or     edi,ebp
c000fd64:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000fd6b:	89 fa                	mov    edx,edi
c000fd6d:	83 e5 c0             	and    ebp,0xffffffc0
c000fd70:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000fd76:	88 c2                	mov    dl,al
c000fd78:	c0 ea 02             	shr    dl,0x2
c000fd7b:	89 d7                	mov    edi,edx
c000fd7d:	09 ef                	or     edi,ebp
c000fd7f:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000fd85:	89 fa                	mov    edx,edi
c000fd87:	83 e5 cf             	and    ebp,0xffffffcf
c000fd8a:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000fd90:	89 cf                	mov    edi,ecx
c000fd92:	c1 ef 0c             	shr    edi,0xc
c000fd95:	83 e7 03             	and    edi,0x3
c000fd98:	c1 e7 04             	shl    edi,0x4
c000fd9b:	09 ef                	or     edi,ebp
c000fd9d:	3c 06                	cmp    al,0x6
c000fd9f:	89 fa                	mov    edx,edi
c000fda1:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000fda7:	74 04                	je     c000fdad <CPU::detectFeatures()+0x555>
c000fda9:	3c 0f                	cmp    al,0xf
c000fdab:	75 5c                	jne    c000fe09 <CPU::detectFeatures()+0x5b1>
c000fdad:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000fdb1:	89 cf                	mov    edi,ecx
c000fdb3:	c1 ef 10             	shr    edi,0x10
c000fdb6:	c1 e7 04             	shl    edi,0x4
c000fdb9:	09 fa                	or     edx,edi
c000fdbb:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000fdc1:	0f b6 d2             	movzx  edx,dl
c000fdc4:	66 81 e7 3f c0       	and    di,0xc03f
c000fdc9:	c1 e2 06             	shl    edx,0x6
c000fdcc:	09 fa                	or     edx,edi
c000fdce:	3c 0f                	cmp    al,0xf
c000fdd0:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000fdd7:	75 30                	jne    c000fe09 <CPU::detectFeatures()+0x5b1>
c000fdd9:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000fddf:	c1 e9 14             	shr    ecx,0x14
c000fde2:	83 e0 3f             	and    eax,0x3f
c000fde5:	83 c1 0f             	add    ecx,0xf
c000fde8:	88 ca                	mov    dl,cl
c000fdea:	c0 e9 02             	shr    cl,0x2
c000fded:	c1 e2 06             	shl    edx,0x6
c000fdf0:	09 d0                	or     eax,edx
c000fdf2:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000fdf8:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000fdfe:	83 e0 c0             	and    eax,0xffffffc0
c000fe01:	09 c1                	or     ecx,eax
c000fe03:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000fe09:	83 ec 0c             	sub    esp,0xc
c000fe0c:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000fe13:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fe17:	50                   	push   eax
c000fe18:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000fe1c:	55                   	push   ebp
c000fe1d:	56                   	push   esi
c000fe1e:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000fe22:	57                   	push   edi
c000fe23:	68 00 00 00 80       	push   0x80000000
c000fe28:	e8 5f f8 ff ff       	call   c000f68c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fe2d:	83 c4 20             	add    esp,0x20
c000fe30:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000fe38:	76 22                	jbe    c000fe5c <CPU::detectFeatures()+0x604>
c000fe3a:	83 ec 0c             	sub    esp,0xc
c000fe3d:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fe41:	50                   	push   eax
c000fe42:	55                   	push   ebp
c000fe43:	56                   	push   esi
c000fe44:	57                   	push   edi
c000fe45:	68 01 00 00 80       	push   0x80000001
c000fe4a:	e8 3d f8 ff ff       	call   c000f68c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fe4f:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000fe59:	83 c4 20             	add    esp,0x20
c000fe5c:	52                   	push   edx
c000fe5d:	52                   	push   edx
c000fe5e:	68 31 e6 01 c0       	push   0xc001e631
c000fe63:	53                   	push   ebx
c000fe64:	e8 09 c3 ff ff       	call   c000c172 <Device::setName(char const*)>
c000fe69:	83 c4 10             	add    esp,0x10
c000fe6c:	eb 67                	jmp    c000fed5 <CPU::detectFeatures()+0x67d>
c000fe6e:	50                   	push   eax
c000fe6f:	50                   	push   eax
c000fe70:	68 96 e5 01 c0       	push   0xc001e596
c000fe75:	55                   	push   ebp
c000fe76:	e8 a5 07 ff ff       	call   c0000620 <strcpy>
c000fe7b:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fe85:	e8 59 03 ff ff       	call   c00001e3 <is486>
c000fe8a:	83 c4 10             	add    esp,0x10
c000fe8d:	85 c0                	test   eax,eax
c000fe8f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fe95:	74 1d                	je     c000feb4 <CPU::detectFeatures()+0x65c>
c000fe97:	83 c8 07             	or     eax,0x7
c000fe9a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fea0:	0f 20 c0             	mov    eax,cr0
c000fea3:	83 e0 14             	and    eax,0x14
c000fea6:	83 f8 04             	cmp    eax,0x4
c000fea9:	75 0e                	jne    c000feb9 <CPU::detectFeatures()+0x661>
c000feab:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000feb2:	eb 21                	jmp    c000fed5 <CPU::detectFeatures()+0x67d>
c000feb4:	83 e0 f8             	and    eax,0xfffffff8
c000feb7:	eb e1                	jmp    c000fe9a <CPU::detectFeatures()+0x642>
c000feb9:	e8 00 03 ff ff       	call   c00001be <hasLegacyFPU>
c000febe:	83 e0 01             	and    eax,0x1
c000fec1:	8d 14 00             	lea    edx,[eax+eax*1]
c000fec4:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000feca:	83 e0 fd             	and    eax,0xfffffffd
c000fecd:	09 d0                	or     eax,edx
c000fecf:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fed5:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000fedc:	74 0e                	je     c000feec <CPU::detectFeatures()+0x694>
c000fede:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c000fee3:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000feea:	eb 20                	jmp    c000ff0c <CPU::detectFeatures()+0x6b4>
c000feec:	e8 cd 02 ff ff       	call   c00001be <hasLegacyFPU>
c000fef1:	83 e0 01             	and    eax,0x1
c000fef4:	8d 14 00             	lea    edx,[eax+eax*1]
c000fef7:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fefd:	83 e0 fd             	and    eax,0xfffffffd
c000ff00:	09 d0                	or     eax,edx
c000ff02:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ff08:	a8 02                	test   al,0x2
c000ff0a:	75 d2                	jne    c000fede <CPU::detectFeatures()+0x686>
c000ff0c:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000ff13:	83 c4 2c             	add    esp,0x2c
c000ff16:	5b                   	pop    ebx
c000ff17:	5e                   	pop    esi
c000ff18:	5f                   	pop    edi
c000ff19:	5d                   	pop    ebp
c000ff1a:	c3                   	ret    
c000ff1b:	90                   	nop

c000ff1c <CPU::setupSMEP()>:
c000ff1c:	0f 20 e0             	mov    eax,cr4
c000ff1f:	0d 00 00 10 00       	or     eax,0x100000
c000ff24:	0f 22 e0             	mov    cr4,eax
c000ff27:	c3                   	ret    

c000ff28 <CPU::setupUMIP()>:
c000ff28:	0f 20 e0             	mov    eax,cr4
c000ff2b:	80 cc 08             	or     ah,0x8
c000ff2e:	0f 22 e0             	mov    cr4,eax
c000ff31:	c3                   	ret    

c000ff32 <CPU::setupTSC()>:
c000ff32:	0f 20 e0             	mov    eax,cr4
c000ff35:	83 c8 04             	or     eax,0x4
c000ff38:	0f 22 e0             	mov    cr4,eax
c000ff3b:	c3                   	ret    

c000ff3c <CPU::setupLargePages()>:
c000ff3c:	0f 20 e0             	mov    eax,cr4
c000ff3f:	83 c8 10             	or     eax,0x10
c000ff42:	0f 22 e0             	mov    cr4,eax
c000ff45:	c3                   	ret    

c000ff46 <CPU::setupPAT()>:
c000ff46:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c000ff4b:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000ff52:	74 2c                	je     c000ff80 <CPU::setupPAT()+0x3a>
c000ff54:	53                   	push   ebx
c000ff55:	83 ec 10             	sub    esp,0x10
c000ff58:	68 77 02 00 00       	push   0x277
c000ff5d:	50                   	push   eax
c000ff5e:	e8 f3 74 ff ff       	call   c0007456 <Computer::rdmsr(unsigned int)>
c000ff63:	83 e2 f8             	and    edx,0xfffffff8
c000ff66:	83 ca 01             	or     edx,0x1
c000ff69:	52                   	push   edx
c000ff6a:	50                   	push   eax
c000ff6b:	68 77 02 00 00       	push   0x277
c000ff70:	ff 35 f8 08 02 c0    	push   DWORD PTR ds:0xc00208f8
c000ff76:	e8 07 75 ff ff       	call   c0007482 <Computer::wrmsr(unsigned int, unsigned long long)>
c000ff7b:	83 c4 28             	add    esp,0x28
c000ff7e:	5b                   	pop    ebx
c000ff7f:	c3                   	ret    
c000ff80:	c3                   	ret    
c000ff81:	90                   	nop

c000ff82 <CPU::setupMTRR()>:
c000ff82:	c3                   	ret    
c000ff83:	90                   	nop

c000ff84 <CPU::setupGlobalPages()>:
c000ff84:	0f 20 e0             	mov    eax,cr4
c000ff87:	0c 80                	or     al,0x80
c000ff89:	0f 22 e0             	mov    cr4,eax
c000ff8c:	c3                   	ret    
c000ff8d:	90                   	nop

c000ff8e <CPU::allowUsermodeDataAccess()>:
c000ff8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff92:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ff99:	74 03                	je     c000ff9e <CPU::allowUsermodeDataAccess()+0x10>
c000ff9b:	0f 01 cb             	stac   
c000ff9e:	c3                   	ret    
c000ff9f:	90                   	nop

c000ffa0 <CPU::prohibitUsermodeDataAccess()>:
c000ffa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffa4:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ffab:	74 03                	je     c000ffb0 <CPU::prohibitUsermodeDataAccess()+0x10>
c000ffad:	0f 01 ca             	clac   
c000ffb0:	c3                   	ret    
c000ffb1:	90                   	nop

c000ffb2 <CPU::setupSMAP()>:
c000ffb2:	0f 20 e0             	mov    eax,cr4
c000ffb5:	0d 00 00 20 00       	or     eax,0x200000
c000ffba:	0f 22 e0             	mov    cr4,eax
c000ffbd:	eb e1                	jmp    c000ffa0 <CPU::prohibitUsermodeDataAccess()>
c000ffbf:	90                   	nop

c000ffc0 <CPU::setupFeatures()>:
c000ffc0:	53                   	push   ebx
c000ffc1:	83 ec 08             	sub    esp,0x8
c000ffc4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ffc8:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000ffcf:	74 18                	je     c000ffe9 <CPU::setupFeatures()+0x29>
c000ffd1:	83 ec 0c             	sub    esp,0xc
c000ffd4:	68 3d e6 01 c0       	push   0xc001e63d
c000ffd9:	e8 ca ab ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c000ffde:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffe1:	e8 42 ff ff ff       	call   c000ff28 <CPU::setupUMIP()>
c000ffe6:	83 c4 10             	add    esp,0x10
c000ffe9:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000fff0:	74 18                	je     c001000a <CPU::setupFeatures()+0x4a>
c000fff2:	83 ec 0c             	sub    esp,0xc
c000fff5:	68 47 e6 01 c0       	push   0xc001e647
c000fffa:	e8 a9 ab ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c000ffff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010002:	e8 2b ff ff ff       	call   c000ff32 <CPU::setupTSC()>
c0010007:	83 c4 10             	add    esp,0x10
c001000a:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010011:	74 18                	je     c001002b <CPU::setupFeatures()+0x6b>
c0010013:	83 ec 0c             	sub    esp,0xc
c0010016:	68 50 e6 01 c0       	push   0xc001e650
c001001b:	e8 88 ab ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c0010020:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010023:	e8 14 ff ff ff       	call   c000ff3c <CPU::setupLargePages()>
c0010028:	83 c4 10             	add    esp,0x10
c001002b:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010032:	74 18                	je     c001004c <CPU::setupFeatures()+0x8c>
c0010034:	83 ec 0c             	sub    esp,0xc
c0010037:	68 59 e6 01 c0       	push   0xc001e659
c001003c:	e8 67 ab ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c0010041:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010044:	e8 3b ff ff ff       	call   c000ff84 <CPU::setupGlobalPages()>
c0010049:	83 c4 10             	add    esp,0x10
c001004c:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010053:	74 18                	je     c001006d <CPU::setupFeatures()+0xad>
c0010055:	83 ec 0c             	sub    esp,0xc
c0010058:	68 6b e6 01 c0       	push   0xc001e66b
c001005d:	e8 46 ab ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c0010062:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010065:	e8 dc fe ff ff       	call   c000ff46 <CPU::setupPAT()>
c001006a:	83 c4 10             	add    esp,0x10
c001006d:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010074:	74 11                	je     c0010087 <CPU::setupFeatures()+0xc7>
c0010076:	c7 44 24 10 74 e6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e674
c001007e:	83 c4 08             	add    esp,0x8
c0010081:	5b                   	pop    ebx
c0010082:	e9 21 ab ff ff       	jmp    c000aba8 <Dbg::kprintf(char const*, ...)>
c0010087:	83 c4 08             	add    esp,0x8
c001008a:	5b                   	pop    ebx
c001008b:	c3                   	ret    

c001008c <CPU::open(int, int, void*)>:
c001008c:	57                   	push   edi
c001008d:	56                   	push   esi
c001008e:	53                   	push   ebx
c001008f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010093:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010097:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001009d:	83 ec 0c             	sub    esp,0xc
c00100a0:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00100a6:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00100ac:	50                   	push   eax
c00100ad:	e8 8e 76 ff ff       	call   c0007740 <GDT::setup()>
c00100b2:	83 c4 0c             	add    esp,0xc
c00100b5:	6a 00                	push   0x0
c00100b7:	68 ef be ad de       	push   0xdeadbeef
c00100bc:	57                   	push   edi
c00100bd:	e8 1a 92 ff ff       	call   c00092dc <TSS::setup(unsigned long, unsigned long)>
c00100c2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00100c5:	e8 f2 91 ff ff       	call   c00092bc <TSS::flush()>
c00100ca:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00100d0:	89 04 24             	mov    DWORD PTR [esp],eax
c00100d3:	e8 b2 78 ff ff       	call   c000798a <IDT::setup()>
c00100d8:	b8 00 04 00 00       	mov    eax,0x400
c00100dd:	0f 23 f8             	mov    db7,eax
c00100e0:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00100ea:	e8 f7 80 ff ff       	call   c00081e6 <Phys::allocatePage()>
c00100ef:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00100f5:	89 30                	mov    DWORD PTR [eax],esi
c00100f7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00100fd:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010100:	58                   	pop    eax
c0010101:	5a                   	pop    edx
c0010102:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010108:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001010c:	e8 b5 a1 ff ff       	call   c000a2c6 <VAS::setCPUSpecific(unsigned long)>
c0010111:	c7 04 24 7e e6 01 c0 	mov    DWORD PTR [esp],0xc001e67e
c0010118:	e8 56 7d ff ff       	call   c0007e73 <Krnl::setBootMessage(char const*)>
c001011d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010120:	e8 33 f7 ff ff       	call   c000f858 <CPU::detectFeatures()>
c0010125:	c7 04 24 a1 e6 01 c0 	mov    DWORD PTR [esp],0xc001e6a1
c001012c:	e8 42 7d ff ff       	call   c0007e73 <Krnl::setBootMessage(char const*)>
c0010131:	e8 b8 56 00 00       	call   c00157ee <HalInitialise()>
c0010136:	a1 10 09 02 c0       	mov    eax,ds:0xc0020910
c001013b:	83 e0 10             	and    eax,0x10
c001013e:	83 f8 01             	cmp    eax,0x1
c0010141:	19 c0                	sbb    eax,eax
c0010143:	83 e0 46             	and    eax,0x46
c0010146:	83 c0 1e             	add    eax,0x1e
c0010149:	89 04 24             	mov    DWORD PTR [esp],eax
c001014c:	e8 f0 d6 ff ff       	call   c000d841 <setupTimer(int)>
c0010151:	83 c4 10             	add    esp,0x10
c0010154:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001015a:	f6 05 10 09 02 c0 20 	test   BYTE PTR ds:0xc0020910,0x20
c0010161:	74 0c                	je     c001016f <CPU::open(int, int, void*)+0xe3>
c0010163:	83 ec 0c             	sub    esp,0xc
c0010166:	53                   	push   ebx
c0010167:	e8 54 fe ff ff       	call   c000ffc0 <CPU::setupFeatures()>
c001016c:	83 c4 10             	add    esp,0x10
c001016f:	5b                   	pop    ebx
c0010170:	31 c0                	xor    eax,eax
c0010172:	5e                   	pop    esi
c0010173:	5f                   	pop    edi
c0010174:	c3                   	ret    
c0010175:	90                   	nop

c0010176 <EnvVarContainer::getEnv(char const*)>:
c0010176:	57                   	push   edi
c0010177:	56                   	push   esi
c0010178:	53                   	push   ebx
c0010179:	31 db                	xor    ebx,ebx
c001017b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001017f:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010181:	7e 2b                	jle    c00101ae <EnvVarContainer::getEnv(char const*)+0x38>
c0010183:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001018a:	50                   	push   eax
c001018b:	50                   	push   eax
c001018c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001018f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010192:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010196:	e8 65 05 ff ff       	call   c0000700 <strcmp>
c001019b:	83 c4 10             	add    esp,0x10
c001019e:	85 c0                	test   eax,eax
c00101a0:	75 09                	jne    c00101ab <EnvVarContainer::getEnv(char const*)+0x35>
c00101a2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00101a5:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00101a9:	eb 05                	jmp    c00101b0 <EnvVarContainer::getEnv(char const*)+0x3a>
c00101ab:	43                   	inc    ebx
c00101ac:	eb d1                	jmp    c001017f <EnvVarContainer::getEnv(char const*)+0x9>
c00101ae:	31 c0                	xor    eax,eax
c00101b0:	5b                   	pop    ebx
c00101b1:	5e                   	pop    esi
c00101b2:	5f                   	pop    edi
c00101b3:	c3                   	ret    

c00101b4 <EnvVarContainer::setEnv(char const*, char const*)>:
c00101b4:	55                   	push   ebp
c00101b5:	57                   	push   edi
c00101b6:	56                   	push   esi
c00101b7:	53                   	push   ebx
c00101b8:	83 ec 28             	sub    esp,0x28
c00101bb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00101bf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00101c3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00101c7:	56                   	push   esi
c00101c8:	e8 93 03 ff ff       	call   c0000560 <strlen>
c00101cd:	40                   	inc    eax
c00101ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00101d1:	e8 43 7c ff ff       	call   c0007e19 <malloc>
c00101d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00101d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00101dd:	e8 7e 03 ff ff       	call   c0000560 <strlen>
c00101e2:	40                   	inc    eax
c00101e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00101e6:	e8 2e 7c ff ff       	call   c0007e19 <malloc>
c00101eb:	89 34 24             	mov    DWORD PTR [esp],esi
c00101ee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00101f2:	e8 69 03 ff ff       	call   c0000560 <strlen>
c00101f7:	83 c4 0c             	add    esp,0xc
c00101fa:	40                   	inc    eax
c00101fb:	50                   	push   eax
c00101fc:	6a 00                	push   0x0
c00101fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010202:	e8 e9 02 ff ff       	call   c00004f0 <memset>
c0010207:	89 34 24             	mov    DWORD PTR [esp],esi
c001020a:	e8 51 03 ff ff       	call   c0000560 <strlen>
c001020f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010213:	8d 48 01             	lea    ecx,[eax+0x1]
c0010216:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010218:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001021b:	89 de                	mov    esi,ebx
c001021d:	e8 3e 03 ff ff       	call   c0000560 <strlen>
c0010222:	83 c4 0c             	add    esp,0xc
c0010225:	40                   	inc    eax
c0010226:	50                   	push   eax
c0010227:	6a 00                	push   0x0
c0010229:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001022d:	e8 be 02 ff ff       	call   c00004f0 <memset>
c0010232:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010235:	e8 26 03 ff ff       	call   c0000560 <strlen>
c001023a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001023e:	8d 48 01             	lea    ecx,[eax+0x1]
c0010241:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010243:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010246:	40                   	inc    eax
c0010247:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001024a:	c1 e0 03             	shl    eax,0x3
c001024d:	5a                   	pop    edx
c001024e:	59                   	pop    ecx
c001024f:	50                   	push   eax
c0010250:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010253:	e8 ad 7b ff ff       	call   c0007e05 <realloc>
c0010258:	8d 74 24 18          	lea    esi,[esp+0x18]
c001025c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001025f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010262:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010266:	b9 08 00 00 00       	mov    ecx,0x8
c001026b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001026d:	83 c4 2c             	add    esp,0x2c
c0010270:	5b                   	pop    ebx
c0010271:	5e                   	pop    esi
c0010272:	5f                   	pop    edi
c0010273:	5d                   	pop    ebp
c0010274:	c3                   	ret    
c0010275:	90                   	nop

c0010276 <EnvVarContainer::deleteEnv(char const*)>:
c0010276:	c3                   	ret    
c0010277:	90                   	nop

c0010278 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010278:	55                   	push   ebp
c0010279:	57                   	push   edi
c001027a:	56                   	push   esi
c001027b:	53                   	push   ebx
c001027c:	81 ec 38 01 00 00    	sub    esp,0x138
c0010282:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010289:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010290:	68 14 01 00 00       	push   0x114
c0010295:	e8 7f 7b ff ff       	call   c0007e19 <malloc>
c001029a:	83 c4 0c             	add    esp,0xc
c001029d:	89 c3                	mov    ebx,eax
c001029f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00102a2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00102a9:	50                   	push   eax
c00102aa:	e8 6f ae ff ff       	call   c000b11e <File::File(char const*, Process*)>
c00102af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102b2:	e8 95 b1 ff ff       	call   c000b44c <File::exists()>
c00102b7:	83 c4 10             	add    esp,0x10
c00102ba:	84 c0                	test   al,al
c00102bc:	75 31                	jne    c00102ef <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00102be:	50                   	push   eax
c00102bf:	50                   	push   eax
c00102c0:	6a 12                	push   0x12
c00102c2:	53                   	push   ebx
c00102c3:	e8 16 af ff ff       	call   c000b1de <File::open(FileOpenMode)>
c00102c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00102ca:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00102cd:	89 34 24             	mov    DWORD PTR [esp],esi
c00102d0:	e8 8b 02 ff ff       	call   c0000560 <strlen>
c00102d5:	5a                   	pop    edx
c00102d6:	31 d2                	xor    edx,edx
c00102d8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00102dc:	51                   	push   ecx
c00102dd:	56                   	push   esi
c00102de:	52                   	push   edx
c00102df:	50                   	push   eax
c00102e0:	53                   	push   ebx
c00102e1:	ff d7                	call   edi
c00102e3:	83 c4 14             	add    esp,0x14
c00102e6:	53                   	push   ebx
c00102e7:	e8 50 af ff ff       	call   c000b23c <File::close()>
c00102ec:	83 c4 10             	add    esp,0x10
c00102ef:	56                   	push   esi
c00102f0:	31 f6                	xor    esi,esi
c00102f2:	68 00 01 00 00       	push   0x100
c00102f7:	6a 00                	push   0x0
c00102f9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00102fd:	50                   	push   eax
c00102fe:	e8 ed 01 ff ff       	call   c00004f0 <memset>
c0010303:	5f                   	pop    edi
c0010304:	58                   	pop    eax
c0010305:	6a 01                	push   0x1
c0010307:	53                   	push   ebx
c0010308:	e8 d1 ae ff ff       	call   c000b1de <File::open(FileOpenMode)>
c001030d:	83 c4 10             	add    esp,0x10
c0010310:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010318:	83 ec 0c             	sub    esp,0xc
c001031b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001031d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010321:	51                   	push   ecx
c0010322:	8d 54 24 23          	lea    edx,[esp+0x23]
c0010326:	52                   	push   edx
c0010327:	6a 00                	push   0x0
c0010329:	6a 01                	push   0x1
c001032b:	53                   	push   ebx
c001032c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001032f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0010333:	83 c4 20             	add    esp,0x20
c0010336:	3c 0d                	cmp    al,0xd
c0010338:	0f 84 09 01 00 00    	je     c0010447 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001033e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010343:	0f 84 ef 00 00 00    	je     c0010438 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0010349:	3c 0a                	cmp    al,0xa
c001034b:	74 13                	je     c0010360 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c001034d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010352:	74 0c                	je     c0010360 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0010354:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001035a:	0f 8e d8 00 00 00    	jle    c0010438 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0010360:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010364:	83 ec 0c             	sub    esp,0xc
c0010367:	8d 78 01             	lea    edi,[eax+0x1]
c001036a:	57                   	push   edi
c001036b:	e8 a9 7a ff ff       	call   c0007e19 <malloc>
c0010370:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010374:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010378:	8d 56 04             	lea    edx,[esi+0x4]
c001037b:	89 14 24             	mov    DWORD PTR [esp],edx
c001037e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010382:	e8 92 7a ff ff       	call   c0007e19 <malloc>
c0010387:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001038b:	83 c4 0c             	add    esp,0xc
c001038e:	57                   	push   edi
c001038f:	6a 00                	push   0x0
c0010391:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010395:	e8 56 01 ff ff       	call   c00004f0 <memset>
c001039a:	8d 74 24 30          	lea    esi,[esp+0x30]
c001039e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00103a2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00103a6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103a8:	83 c4 0c             	add    esp,0xc
c00103ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00103af:	52                   	push   edx
c00103b0:	6a 00                	push   0x0
c00103b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00103b6:	e8 35 01 ff ff       	call   c00004f0 <memset>
c00103bb:	8d 74 24 30          	lea    esi,[esp+0x30]
c00103bf:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00103c3:	89 34 24             	mov    DWORD PTR [esp],esi
c00103c6:	e8 95 01 ff ff       	call   c0000560 <strlen>
c00103cb:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00103cf:	89 c1                	mov    ecx,eax
c00103d1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103d3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00103d6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00103d9:	40                   	inc    eax
c00103da:	83 c4 10             	add    esp,0x10
c00103dd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00103e0:	85 d2                	test   edx,edx
c00103e2:	75 0c                	jne    c00103f0 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c00103e4:	83 ec 0c             	sub    esp,0xc
c00103e7:	6a 08                	push   0x8
c00103e9:	e8 2b 7a ff ff       	call   c0007e19 <malloc>
c00103ee:	eb 0c                	jmp    c00103fc <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c00103f0:	c1 e0 03             	shl    eax,0x3
c00103f3:	51                   	push   ecx
c00103f4:	51                   	push   ecx
c00103f5:	50                   	push   eax
c00103f6:	52                   	push   edx
c00103f7:	e8 09 7a ff ff       	call   c0007e05 <realloc>
c00103fc:	83 c4 10             	add    esp,0x10
c00103ff:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010402:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010405:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010408:	8d 74 24 18          	lea    esi,[esp+0x18]
c001040c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010410:	b9 08 00 00 00       	mov    ecx,0x8
c0010415:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010417:	31 f6                	xor    esi,esi
c0010419:	50                   	push   eax
c001041a:	68 00 01 00 00       	push   0x100
c001041f:	6a 00                	push   0x0
c0010421:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010425:	50                   	push   eax
c0010426:	e8 c5 00 ff ff       	call   c00004f0 <memset>
c001042b:	83 c4 10             	add    esp,0x10
c001042e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010436:	eb 0f                	jmp    c0010447 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0010438:	3c 3d                	cmp    al,0x3d
c001043a:	74 07                	je     c0010443 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c001043c:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0010440:	46                   	inc    esi
c0010441:	eb 04                	jmp    c0010447 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0010443:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0010447:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001044c:	0f 85 c6 fe ff ff    	jne    c0010318 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010452:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010458:	5b                   	pop    ebx
c0010459:	5e                   	pop    esi
c001045a:	5f                   	pop    edi
c001045b:	5d                   	pop    ebp
c001045c:	c3                   	ret    
c001045d:	90                   	nop

c001045e <EnvVarContainer::__loadSystem()>:
c001045e:	83 ec 10             	sub    esp,0x10
c0010461:	68 80 f8 01 c0       	push   0xc001f880
c0010466:	68 e4 e6 01 c0       	push   0xc001e6e4
c001046b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001046f:	e8 04 fe ff ff       	call   c0010278 <EnvVarContainer::loadFrom(char const*, char const*)>
c0010474:	83 c4 1c             	add    esp,0x1c
c0010477:	c3                   	ret    

c0010478 <EnvVarContainer::__loadUser()>:
c0010478:	c3                   	ret    
c0010479:	90                   	nop

c001047a <EnvVarContainer::EnvVarContainer(Process*)>:
c001047a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001047e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010484:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010488:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001048c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001048f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010493:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001049a:	90                   	nop
c001049b:	c3                   	ret    

c001049c <EnvVarContainer::~EnvVarContainer()>:
c001049c:	83 ec 0c             	sub    esp,0xc
c001049f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00104a6:	85 c0                	test   eax,eax
c00104a8:	74 1d                	je     c00104c7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00104aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00104b0:	85 c0                	test   eax,eax
c00104b2:	74 13                	je     c00104c7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00104b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00104bb:	83 ec 0c             	sub    esp,0xc
c00104be:	50                   	push   eax
c00104bf:	e8 65 79 ff ff       	call   c0007e29 <free>
c00104c4:	83 c4 10             	add    esp,0x10
c00104c7:	90                   	nop
c00104c8:	83 c4 0c             	add    esp,0xc
c00104cb:	c3                   	ret    

c00104cc <Krnl::getEnv(Process*, char const*)>:
c00104cc:	53                   	push   ebx
c00104cd:	83 ec 08             	sub    esp,0x8
c00104d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00104d8:	39 05 f0 3d 02 c0    	cmp    DWORD PTR ds:0xc0023df0,eax
c00104de:	74 04                	je     c00104e4 <Krnl::getEnv(Process*, char const*)+0x18>
c00104e0:	85 c0                	test   eax,eax
c00104e2:	75 0b                	jne    c00104ef <Krnl::getEnv(Process*, char const*)+0x23>
c00104e4:	a1 70 33 02 c0       	mov    eax,ds:0xc0023370
c00104e9:	85 c0                	test   eax,eax
c00104eb:	75 19                	jne    c0010506 <Krnl::getEnv(Process*, char const*)+0x3a>
c00104ed:	eb 27                	jmp    c0010516 <Krnl::getEnv(Process*, char const*)+0x4a>
c00104ef:	52                   	push   edx
c00104f0:	52                   	push   edx
c00104f1:	53                   	push   ebx
c00104f2:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00104f8:	e8 79 fc ff ff       	call   c0010176 <EnvVarContainer::getEnv(char const*)>
c00104fd:	83 c4 10             	add    esp,0x10
c0010500:	85 c0                	test   eax,eax
c0010502:	75 28                	jne    c001052c <Krnl::getEnv(Process*, char const*)+0x60>
c0010504:	eb de                	jmp    c00104e4 <Krnl::getEnv(Process*, char const*)+0x18>
c0010506:	52                   	push   edx
c0010507:	52                   	push   edx
c0010508:	53                   	push   ebx
c0010509:	50                   	push   eax
c001050a:	e8 67 fc ff ff       	call   c0010176 <EnvVarContainer::getEnv(char const*)>
c001050f:	83 c4 10             	add    esp,0x10
c0010512:	85 c0                	test   eax,eax
c0010514:	75 16                	jne    c001052c <Krnl::getEnv(Process*, char const*)+0x60>
c0010516:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001051a:	a1 74 33 02 c0       	mov    eax,ds:0xc0023374
c001051f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010523:	83 c4 08             	add    esp,0x8
c0010526:	5b                   	pop    ebx
c0010527:	e9 4a fc ff ff       	jmp    c0010176 <EnvVarContainer::getEnv(char const*)>
c001052c:	83 c4 08             	add    esp,0x8
c001052f:	5b                   	pop    ebx
c0010530:	c3                   	ret    

c0010531 <Krnl::setEnvSystem(char const*, char const*)>:
c0010531:	83 ec 10             	sub    esp,0x10
c0010534:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010538:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001053c:	ff 35 74 33 02 c0    	push   DWORD PTR ds:0xc0023374
c0010542:	e8 6d fc ff ff       	call   c00101b4 <EnvVarContainer::setEnv(char const*, char const*)>
c0010547:	83 c4 1c             	add    esp,0x1c
c001054a:	c3                   	ret    

c001054b <Krnl::setEnvUser(char const*, char const*)>:
c001054b:	a1 70 33 02 c0       	mov    eax,ds:0xc0023370
c0010550:	85 c0                	test   eax,eax
c0010552:	74 15                	je     c0010569 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0010554:	83 ec 10             	sub    esp,0x10
c0010557:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001055b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001055f:	50                   	push   eax
c0010560:	e8 4f fc ff ff       	call   c00101b4 <EnvVarContainer::setEnv(char const*, char const*)>
c0010565:	83 c4 1c             	add    esp,0x1c
c0010568:	c3                   	ret    
c0010569:	c3                   	ret    

c001056a <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001056a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001056e:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0010574:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010578:	e9 37 fc ff ff       	jmp    c00101b4 <EnvVarContainer::setEnv(char const*, char const*)>

c001057d <Krnl::deleteEnvSystem(char const*)>:
c001057d:	c3                   	ret    

c001057e <Krnl::deleteEnvUser(char const*)>:
c001057e:	c3                   	ret    

c001057f <Krnl::deleteEnvProcess(Process*, char const*)>:
c001057f:	c3                   	ret    

c0010580 <Krnl::newProcessEnv(Process*)>:
c0010580:	83 ec 28             	sub    esp,0x28
c0010583:	6a 0c                	push   0xc
c0010585:	e8 8f 78 ff ff       	call   c0007e19 <malloc>
c001058a:	5a                   	pop    edx
c001058b:	59                   	pop    ecx
c001058c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010590:	50                   	push   eax
c0010591:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010595:	e8 e0 fe ff ff       	call   c001047a <EnvVarContainer::EnvVarContainer(Process*)>
c001059a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001059e:	83 c4 2c             	add    esp,0x2c
c00105a1:	c3                   	ret    

c00105a2 <Krnl::copyProcessEnv(Process*, Process*)>:
c00105a2:	57                   	push   edi
c00105a3:	56                   	push   esi
c00105a4:	53                   	push   ebx
c00105a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105a9:	83 ec 0c             	sub    esp,0xc
c00105ac:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00105b2:	6a 0c                	push   0xc
c00105b4:	e8 60 78 ff ff       	call   c0007e19 <malloc>
c00105b9:	89 c3                	mov    ebx,eax
c00105bb:	58                   	pop    eax
c00105bc:	5a                   	pop    edx
c00105bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105c1:	53                   	push   ebx
c00105c2:	e8 b3 fe ff ff       	call   c001047a <EnvVarContainer::EnvVarContainer(Process*)>
c00105c7:	8b 07                	mov    eax,DWORD PTR [edi]
c00105c9:	89 03                	mov    DWORD PTR [ebx],eax
c00105cb:	c1 e0 03             	shl    eax,0x3
c00105ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00105d1:	e8 43 78 ff ff       	call   c0007e19 <malloc>
c00105d6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00105d9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00105db:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00105de:	c1 e1 03             	shl    ecx,0x3
c00105e1:	89 c7                	mov    edi,eax
c00105e3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105e5:	83 c4 10             	add    esp,0x10
c00105e8:	89 d8                	mov    eax,ebx
c00105ea:	5b                   	pop    ebx
c00105eb:	5e                   	pop    esi
c00105ec:	5f                   	pop    edi
c00105ed:	c3                   	ret    

c00105ee <Krnl::loadSystemEnv()>:
c00105ee:	53                   	push   ebx
c00105ef:	83 ec 14             	sub    esp,0x14
c00105f2:	6a 0c                	push   0xc
c00105f4:	e8 20 78 ff ff       	call   c0007e19 <malloc>
c00105f9:	89 c3                	mov    ebx,eax
c00105fb:	58                   	pop    eax
c00105fc:	5a                   	pop    edx
c00105fd:	ff 35 f0 3d 02 c0    	push   DWORD PTR ds:0xc0023df0
c0010603:	53                   	push   ebx
c0010604:	e8 71 fe ff ff       	call   c001047a <EnvVarContainer::EnvVarContainer(Process*)>
c0010609:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001060c:	89 1d 74 33 02 c0    	mov    DWORD PTR ds:0xc0023374,ebx
c0010612:	e8 47 fe ff ff       	call   c001045e <EnvVarContainer::__loadSystem()>
c0010617:	83 c4 18             	add    esp,0x18
c001061a:	5b                   	pop    ebx
c001061b:	c3                   	ret    

c001061c <Krnl::loadUserEnv()>:
c001061c:	53                   	push   ebx
c001061d:	83 ec 14             	sub    esp,0x14
c0010620:	6a 0c                	push   0xc
c0010622:	e8 f2 77 ff ff       	call   c0007e19 <malloc>
c0010627:	89 c3                	mov    ebx,eax
c0010629:	58                   	pop    eax
c001062a:	5a                   	pop    edx
c001062b:	ff 35 f0 3d 02 c0    	push   DWORD PTR ds:0xc0023df0
c0010631:	53                   	push   ebx
c0010632:	e8 43 fe ff ff       	call   c001047a <EnvVarContainer::EnvVarContainer(Process*)>
c0010637:	89 1d 70 33 02 c0    	mov    DWORD PTR ds:0xc0023370,ebx
c001063d:	83 c4 18             	add    esp,0x18
c0010640:	5b                   	pop    ebx
c0010641:	c3                   	ret    

c0010642 <Krnl::flushEnv()>:
c0010642:	c3                   	ret    

c0010643 <Krnl::getProcessTotalEnvCount(Process*)>:
c0010643:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010647:	8b 15 70 33 02 c0    	mov    edx,DWORD PTR ds:0xc0023370
c001064d:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010653:	a1 74 33 02 c0       	mov    eax,ds:0xc0023374
c0010658:	8b 00                	mov    eax,DWORD PTR [eax]
c001065a:	03 01                	add    eax,DWORD PTR [ecx]
c001065c:	85 d2                	test   edx,edx
c001065e:	74 02                	je     c0010662 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0010660:	03 02                	add    eax,DWORD PTR [edx]
c0010662:	c3                   	ret    

c0010663 <Krnl::getProcessEnvPair(Process*, int)>:
c0010663:	57                   	push   edi
c0010664:	56                   	push   esi
c0010665:	8b 35 70 33 02 c0    	mov    esi,DWORD PTR ds:0xc0023370
c001066b:	53                   	push   ebx
c001066c:	85 f6                	test   esi,esi
c001066e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010672:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010676:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001067c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010680:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010682:	75 16                	jne    c001069a <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0010684:	39 c2                	cmp    edx,eax
c0010686:	7c 16                	jl     c001069e <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010688:	8b 0d 74 33 02 c0    	mov    ecx,DWORD PTR ds:0xc0023374
c001068e:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010690:	01 c6                	add    esi,eax
c0010692:	39 d6                	cmp    esi,edx
c0010694:	7e 3c                	jle    c00106d2 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010696:	29 c2                	sub    edx,eax
c0010698:	eb 04                	jmp    c001069e <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001069a:	39 c2                	cmp    edx,eax
c001069c:	7d 05                	jge    c00106a3 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001069e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00106a1:	eb 20                	jmp    c00106c3 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c00106a3:	8b 3e                	mov    edi,DWORD PTR [esi]
c00106a5:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00106a8:	39 d1                	cmp    ecx,edx
c00106aa:	7e 04                	jle    c00106b0 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00106ac:	29 c2                	sub    edx,eax
c00106ae:	eb 10                	jmp    c00106c0 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00106b0:	8b 35 74 33 02 c0    	mov    esi,DWORD PTR ds:0xc0023374
c00106b6:	03 0e                	add    ecx,DWORD PTR [esi]
c00106b8:	39 d1                	cmp    ecx,edx
c00106ba:	7e 16                	jle    c00106d2 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00106bc:	29 c2                	sub    edx,eax
c00106be:	29 fa                	sub    edx,edi
c00106c0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00106c3:	8d 14 d0             	lea    edx,[eax+edx*8]
c00106c6:	8b 02                	mov    eax,DWORD PTR [edx]
c00106c8:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00106cb:	89 03                	mov    DWORD PTR [ebx],eax
c00106cd:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00106d0:	eb 1d                	jmp    c00106ef <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c00106d2:	83 ec 0c             	sub    esp,0xc
c00106d5:	68 06 e7 01 c0       	push   0xc001e706
c00106da:	e8 18 00 00 00       	call   c00106f7 <Krnl::panic(char const*)>
c00106df:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00106e5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00106ec:	83 c4 10             	add    esp,0x10
c00106ef:	89 d8                	mov    eax,ebx
c00106f1:	5b                   	pop    ebx
c00106f2:	5e                   	pop    esi
c00106f3:	5f                   	pop    edi
c00106f4:	c2 04 00             	ret    0x4

c00106f7 <Krnl::panic(char const*)>:
c00106f7:	53                   	push   ebx
c00106f8:	83 ec 10             	sub    esp,0x10
c00106fb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00106ff:	fa                   	cli    
c0010700:	c6 05 80 33 02 c0 01 	mov    BYTE PTR ds:0xc0023380,0x1
c0010707:	53                   	push   ebx
c0010708:	68 20 e7 01 c0       	push   0xc001e720
c001070d:	e8 96 a4 ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c0010712:	83 c4 0c             	add    esp,0xc
c0010715:	a1 44 09 02 c0       	mov    eax,ds:0xc0020944
c001071a:	6a 01                	push   0x1
c001071c:	6a 0f                	push   0xf
c001071e:	50                   	push   eax
c001071f:	e8 78 82 ff ff       	call   c000899c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010724:	5a                   	pop    edx
c0010725:	8b 0d 44 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020944
c001072b:	51                   	push   ecx
c001072c:	e8 63 84 ff ff       	call   c0008b94 <VgaText::clearScreen()>
c0010731:	58                   	pop    eax
c0010732:	8b 0d 44 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020944
c0010738:	5a                   	pop    edx
c0010739:	68 51 e7 01 c0       	push   0xc001e751
c001073e:	51                   	push   ecx
c001073f:	e8 90 82 ff ff       	call   c00089d4 <VgaText::setTitle(char*)>
c0010744:	83 c4 0c             	add    esp,0xc
c0010747:	a1 44 09 02 c0       	mov    eax,ds:0xc0020944
c001074c:	6a 01                	push   0x1
c001074e:	6a 0f                	push   0xf
c0010750:	50                   	push   eax
c0010751:	e8 46 82 ff ff       	call   c000899c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010756:	58                   	pop    eax
c0010757:	8b 0d 44 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020944
c001075d:	5a                   	pop    edx
c001075e:	68 39 e7 01 c0       	push   0xc001e739
c0010763:	51                   	push   ecx
c0010764:	e8 1f 87 ff ff       	call   c0008e88 <VgaText::puts(char const*)>
c0010769:	83 c4 0c             	add    esp,0xc
c001076c:	a1 44 09 02 c0       	mov    eax,ds:0xc0020944
c0010771:	6a 0f                	push   0xf
c0010773:	6a 01                	push   0x1
c0010775:	50                   	push   eax
c0010776:	e8 21 82 ff ff       	call   c000899c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001077b:	58                   	pop    eax
c001077c:	8b 0d 44 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020944
c0010782:	5a                   	pop    edx
c0010783:	68 42 e7 01 c0       	push   0xc001e742
c0010788:	51                   	push   ecx
c0010789:	e8 fa 86 ff ff       	call   c0008e88 <VgaText::puts(char const*)>
c001078e:	83 c4 0c             	add    esp,0xc
c0010791:	a1 44 09 02 c0       	mov    eax,ds:0xc0020944
c0010796:	6a 01                	push   0x1
c0010798:	6a 0f                	push   0xf
c001079a:	50                   	push   eax
c001079b:	e8 fc 81 ff ff       	call   c000899c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00107a0:	58                   	pop    eax
c00107a1:	8b 0d 44 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020944
c00107a7:	5a                   	pop    edx
c00107a8:	68 4f e7 01 c0       	push   0xc001e74f
c00107ad:	51                   	push   ecx
c00107ae:	e8 d5 86 ff ff       	call   c0008e88 <VgaText::puts(char const*)>
c00107b3:	58                   	pop    eax
c00107b4:	8b 0d 44 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020944
c00107ba:	5a                   	pop    edx
c00107bb:	68 60 e7 01 c0       	push   0xc001e760
c00107c0:	51                   	push   ecx
c00107c1:	e8 c2 86 ff ff       	call   c0008e88 <VgaText::puts(char const*)>
c00107c6:	58                   	pop    eax
c00107c7:	8b 0d 44 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020944
c00107cd:	5a                   	pop    edx
c00107ce:	68 52 e7 01 c0       	push   0xc001e752
c00107d3:	51                   	push   ecx
c00107d4:	e8 af 86 ff ff       	call   c0008e88 <VgaText::puts(char const*)>
c00107d9:	58                   	pop    eax
c00107da:	8b 0d 44 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020944
c00107e0:	5a                   	pop    edx
c00107e1:	53                   	push   ebx
c00107e2:	51                   	push   ecx
c00107e3:	e8 a0 86 ff ff       	call   c0008e88 <VgaText::puts(char const*)>
c00107e8:	5b                   	pop    ebx
c00107e9:	58                   	pop    eax
c00107ea:	a1 44 09 02 c0       	mov    eax,ds:0xc0020944
c00107ef:	68 4f e7 01 c0       	push   0xc001e74f
c00107f4:	50                   	push   eax
c00107f5:	e8 8e 86 ff ff       	call   c0008e88 <VgaText::puts(char const*)>
c00107fa:	83 c4 10             	add    esp,0x10
c00107fd:	eb fe                	jmp    c00107fd <Krnl::panic(char const*)+0x106>

c00107ff <Krnl::powerThread(void*)>:
c00107ff:	83 ec 0c             	sub    esp,0xc
c0010802:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c0010807:	48                   	dec    eax
c0010808:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c001080d:	75 01                	jne    c0010810 <Krnl::powerThread(void*)+0x11>
c001080f:	fb                   	sti    
c0010810:	83 ec 0c             	sub    esp,0xc
c0010813:	c6 05 a0 33 02 c0 00 	mov    BYTE PTR ds:0xc00233a0,0x0
c001081a:	6a 0a                	push   0xa
c001081c:	e8 3b 35 00 00       	call   c0013d5c <sleep(unsigned int)>
c0010821:	83 05 e4 33 02 c0 0a 	add    DWORD PTR ds:0xc00233e4,0xa
c0010828:	83 c4 10             	add    esp,0x10
c001082b:	eb e3                	jmp    c0010810 <Krnl::powerThread(void*)+0x11>

c001082d <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c001082d:	57                   	push   edi
c001082e:	b9 09 00 00 00       	mov    ecx,0x9
c0010833:	56                   	push   esi
c0010834:	bf c0 33 02 c0       	mov    edi,0xc00233c0
c0010839:	fc                   	cld    
c001083a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001083e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010840:	5e                   	pop    esi
c0010841:	5f                   	pop    edi
c0010842:	c3                   	ret    

c0010843 <Krnl::userIOReceived()>:
c0010843:	c7 05 e4 33 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00233e4,0x0
c001084d:	c3                   	ret    

c001084e <Krnl::handlePowerButton()>:
c001084e:	83 ec 0c             	sub    esp,0xc
c0010851:	a1 c0 33 02 c0       	mov    eax,ds:0xc00233c0
c0010856:	83 f8 02             	cmp    eax,0x2
c0010859:	75 10                	jne    c001086b <Krnl::handlePowerButton()+0x1d>
c001085b:	83 ec 0c             	sub    esp,0xc
c001085e:	ff 35 f8 08 02 c0    	push   DWORD PTR ds:0xc00208f8
c0010864:	e8 51 6c ff ff       	call   c00074ba <Computer::shutdown()>
c0010869:	eb 11                	jmp    c001087c <Krnl::handlePowerButton()+0x2e>
c001086b:	48                   	dec    eax
c001086c:	75 11                	jne    c001087f <Krnl::handlePowerButton()+0x31>
c001086e:	83 ec 0c             	sub    esp,0xc
c0010871:	ff 35 f8 08 02 c0    	push   DWORD PTR ds:0xc00208f8
c0010877:	e8 6e 6c ff ff       	call   c00074ea <Computer::sleep()>
c001087c:	83 c4 10             	add    esp,0x10
c001087f:	83 c4 0c             	add    esp,0xc
c0010882:	c3                   	ret    

c0010883 <Krnl::handleSleepButton()>:
c0010883:	83 ec 0c             	sub    esp,0xc
c0010886:	a1 c4 33 02 c0       	mov    eax,ds:0xc00233c4
c001088b:	83 f8 02             	cmp    eax,0x2
c001088e:	75 10                	jne    c00108a0 <Krnl::handleSleepButton()+0x1d>
c0010890:	83 ec 0c             	sub    esp,0xc
c0010893:	ff 35 f8 08 02 c0    	push   DWORD PTR ds:0xc00208f8
c0010899:	e8 1c 6c ff ff       	call   c00074ba <Computer::shutdown()>
c001089e:	eb 11                	jmp    c00108b1 <Krnl::handleSleepButton()+0x2e>
c00108a0:	48                   	dec    eax
c00108a1:	75 11                	jne    c00108b4 <Krnl::handleSleepButton()+0x31>
c00108a3:	83 ec 0c             	sub    esp,0xc
c00108a6:	ff 35 f8 08 02 c0    	push   DWORD PTR ds:0xc00208f8
c00108ac:	e8 39 6c ff ff       	call   c00074ea <Computer::sleep()>
c00108b1:	83 c4 10             	add    esp,0x10
c00108b4:	83 c4 0c             	add    esp,0xc
c00108b7:	c3                   	ret    

c00108b8 <Krnl::setupPowerManager()>:
c00108b8:	83 ec 0c             	sub    esp,0xc
c00108bb:	c7 05 e4 33 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00233e4,0x0
c00108c5:	68 f0 00 00 00       	push   0xf0
c00108ca:	c6 05 a0 33 02 c0 00 	mov    BYTE PTR ds:0xc00233a0,0x0
c00108d1:	6a 00                	push   0x0
c00108d3:	68 ff 07 01 c0       	push   0xc00107ff
c00108d8:	ff 35 f0 3d 02 c0    	push   DWORD PTR ds:0xc0023df0
c00108de:	e8 49 2f 00 00       	call   c001382c <Process::createThread(void (*)(void*), void*, int)>
c00108e3:	c7 05 c0 33 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc00233c0,0x2
c00108ed:	c7 05 c4 33 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00233c4,0x1
c00108f7:	c7 05 c8 33 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc00233c8,0x3
c0010901:	c7 05 cc 33 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00233cc,0x0
c001090b:	c7 05 d8 33 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00233d8,0x0
c0010915:	c7 05 d0 33 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00233d0,0x0
c001091f:	c7 05 dc 33 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00233dc,0x0
c0010929:	c7 05 d4 33 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00233d4,0x3c
c0010933:	c7 05 e0 33 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00233e0,0x3c
c001093d:	83 c4 1c             	add    esp,0x1c
c0010940:	c3                   	ret    

c0010941 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0010941:	55                   	push   ebp
c0010942:	57                   	push   edi
c0010943:	56                   	push   esi
c0010944:	53                   	push   ebx
c0010945:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001094b:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0010952:	8a 1e                	mov    bl,BYTE PTR [esi]
c0010954:	8d 6e 01             	lea    ebp,[esi+0x1]
c0010957:	80 fb 40             	cmp    bl,0x40
c001095a:	75 1b                	jne    c0010977 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001095c:	8a 16                	mov    dl,BYTE PTR [esi]
c001095e:	84 d2                	test   dl,dl
c0010960:	0f 84 f1 00 00 00    	je     c0010a57 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0010966:	8d 46 01             	lea    eax,[esi+0x1]
c0010969:	80 fa 3a             	cmp    dl,0x3a
c001096c:	74 04                	je     c0010972 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001096e:	89 c6                	mov    esi,eax
c0010970:	eb ea                	jmp    c001095c <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0010972:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010975:	89 c6                	mov    esi,eax
c0010977:	50                   	push   eax
c0010978:	6a 40                	push   0x40
c001097a:	6a 00                	push   0x0
c001097c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0010980:	50                   	push   eax
c0010981:	e8 6a fb fe ff       	call   c00004f0 <memset>
c0010986:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001098d:	31 c0                	xor    eax,eax
c001098f:	83 c4 10             	add    esp,0x10
c0010992:	8a 0f                	mov    cl,BYTE PTR [edi]
c0010994:	84 c9                	test   cl,cl
c0010996:	0f 84 bb 00 00 00    	je     c0010a57 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001099c:	3d c7 00 00 00       	cmp    eax,0xc7
c00109a1:	0f 8f b0 00 00 00    	jg     c0010a57 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00109a7:	80 f9 0a             	cmp    cl,0xa
c00109aa:	0f 85 98 00 00 00    	jne    c0010a48 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00109b0:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00109b5:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00109b9:	a8 df                	test   al,0xdf
c00109bb:	0f 94 c1             	sete   cl
c00109be:	3c 23                	cmp    al,0x23
c00109c0:	0f 94 c2             	sete   dl
c00109c3:	08 d1                	or     cl,dl
c00109c5:	75 4a                	jne    c0010a11 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00109c7:	8d 50 f7             	lea    edx,[eax-0x9]
c00109ca:	80 fa 01             	cmp    dl,0x1
c00109cd:	76 42                	jbe    c0010a11 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00109cf:	3c 5b                	cmp    al,0x5b
c00109d1:	75 42                	jne    c0010a15 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00109d3:	80 fb 40             	cmp    bl,0x40
c00109d6:	75 39                	jne    c0010a11 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00109d8:	83 ec 0c             	sub    esp,0xc
c00109db:	8d 54 24 65          	lea    edx,[esp+0x65]
c00109df:	52                   	push   edx
c00109e0:	e8 7b fb fe ff       	call   c0000560 <strlen>
c00109e5:	83 c4 10             	add    esp,0x10
c00109e8:	83 f8 3f             	cmp    eax,0x3f
c00109eb:	77 6a                	ja     c0010a57 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00109ed:	50                   	push   eax
c00109ee:	50                   	push   eax
c00109ef:	8d 54 24 61          	lea    edx,[esp+0x61]
c00109f3:	52                   	push   edx
c00109f4:	8d 54 24 24          	lea    edx,[esp+0x24]
c00109f8:	52                   	push   edx
c00109f9:	e8 22 fc fe ff       	call   c0000620 <strcpy>
c00109fe:	58                   	pop    eax
c00109ff:	8d 54 24 24          	lea    edx,[esp+0x24]
c0010a03:	52                   	push   edx
c0010a04:	e8 57 fb fe ff       	call   c0000560 <strlen>
c0010a09:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0010a0e:	83 c4 10             	add    esp,0x10
c0010a11:	31 d2                	xor    edx,edx
c0010a13:	eb 3a                	jmp    c0010a4f <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0010a15:	80 fb 40             	cmp    bl,0x40
c0010a18:	74 06                	je     c0010a20 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0010a1a:	8d 44 24 58          	lea    eax,[esp+0x58]
c0010a1e:	eb 20                	jmp    c0010a40 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0010a20:	50                   	push   eax
c0010a21:	50                   	push   eax
c0010a22:	55                   	push   ebp
c0010a23:	8d 44 24 24          	lea    eax,[esp+0x24]
c0010a27:	50                   	push   eax
c0010a28:	e8 d3 fc fe ff       	call   c0000700 <strcmp>
c0010a2d:	83 c4 10             	add    esp,0x10
c0010a30:	85 c0                	test   eax,eax
c0010a32:	75 dd                	jne    c0010a11 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0010a34:	eb e4                	jmp    c0010a1a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0010a36:	8d 50 01             	lea    edx,[eax+0x1]
c0010a39:	80 f9 3d             	cmp    cl,0x3d
c0010a3c:	74 1d                	je     c0010a5b <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0010a3e:	89 d0                	mov    eax,edx
c0010a40:	8a 08                	mov    cl,BYTE PTR [eax]
c0010a42:	84 c9                	test   cl,cl
c0010a44:	75 f0                	jne    c0010a36 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0010a46:	eb 0f                	jmp    c0010a57 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0010a48:	8d 50 01             	lea    edx,[eax+0x1]
c0010a4b:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0010a4f:	47                   	inc    edi
c0010a50:	89 d0                	mov    eax,edx
c0010a52:	e9 3b ff ff ff       	jmp    c0010992 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0010a57:	31 c0                	xor    eax,eax
c0010a59:	eb 33                	jmp    c0010a8e <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0010a5b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010a5f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0010a62:	50                   	push   eax
c0010a63:	50                   	push   eax
c0010a64:	8d 44 24 60          	lea    eax,[esp+0x60]
c0010a68:	50                   	push   eax
c0010a69:	56                   	push   esi
c0010a6a:	e8 91 fc fe ff       	call   c0000700 <strcmp>
c0010a6f:	83 c4 10             	add    esp,0x10
c0010a72:	85 c0                	test   eax,eax
c0010a74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010a78:	75 97                	jne    c0010a11 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0010a7a:	51                   	push   ecx
c0010a7b:	51                   	push   ecx
c0010a7c:	52                   	push   edx
c0010a7d:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0010a84:	e8 97 fb fe ff       	call   c0000620 <strcpy>
c0010a89:	83 c4 10             	add    esp,0x10
c0010a8c:	b0 01                	mov    al,0x1
c0010a8e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010a94:	5b                   	pop    ebx
c0010a95:	5e                   	pop    esi
c0010a96:	5f                   	pop    edi
c0010a97:	5d                   	pop    ebp
c0010a98:	c3                   	ret    

c0010a99 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0010a99:	57                   	push   edi
c0010a9a:	56                   	push   esi
c0010a9b:	53                   	push   ebx
c0010a9c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0010aa2:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0010aa9:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0010ab0:	53                   	push   ebx
c0010ab1:	e8 aa fa fe ff       	call   c0000560 <strlen>
c0010ab6:	89 34 24             	mov    DWORD PTR [esp],esi
c0010ab9:	89 c7                	mov    edi,eax
c0010abb:	e8 a0 fa fe ff       	call   c0000560 <strlen>
c0010ac0:	83 c4 10             	add    esp,0x10
c0010ac3:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0010ac7:	3d ff 00 00 00       	cmp    eax,0xff
c0010acc:	0f 87 d3 00 00 00    	ja     c0010ba5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0010ad2:	57                   	push   edi
c0010ad3:	57                   	push   edi
c0010ad4:	56                   	push   esi
c0010ad5:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0010ad9:	56                   	push   esi
c0010ada:	e8 41 fb fe ff       	call   c0000620 <strcpy>
c0010adf:	58                   	pop    eax
c0010ae0:	5a                   	pop    edx
c0010ae1:	68 7f ea 01 c0       	push   0xc001ea7f
c0010ae6:	56                   	push   esi
c0010ae7:	e8 f4 fc fe ff       	call   c00007e0 <strcat>
c0010aec:	59                   	pop    ecx
c0010aed:	5f                   	pop    edi
c0010aee:	53                   	push   ebx
c0010aef:	56                   	push   esi
c0010af0:	e8 eb fc fe ff       	call   c00007e0 <strcat>
c0010af5:	58                   	pop    eax
c0010af6:	5a                   	pop    edx
c0010af7:	68 9a e7 01 c0       	push   0xc001e79a
c0010afc:	56                   	push   esi
c0010afd:	e8 de fc fe ff       	call   c00007e0 <strcat>
c0010b02:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0010b09:	e8 0b 73 ff ff       	call   c0007e19 <malloc>
c0010b0e:	83 c4 0c             	add    esp,0xc
c0010b11:	89 c3                	mov    ebx,eax
c0010b13:	ff 35 f0 3d 02 c0    	push   DWORD PTR ds:0xc0023df0
c0010b19:	56                   	push   esi
c0010b1a:	50                   	push   eax
c0010b1b:	e8 fe a5 ff ff       	call   c000b11e <File::File(char const*, Process*)>
c0010b20:	83 c4 10             	add    esp,0x10
c0010b23:	85 db                	test   ebx,ebx
c0010b25:	74 7e                	je     c0010ba5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0010b27:	51                   	push   ecx
c0010b28:	51                   	push   ecx
c0010b29:	6a 01                	push   0x1
c0010b2b:	53                   	push   ebx
c0010b2c:	e8 ad a6 ff ff       	call   c000b1de <File::open(FileOpenMode)>
c0010b31:	83 c4 10             	add    esp,0x10
c0010b34:	85 c0                	test   eax,eax
c0010b36:	74 08                	je     c0010b40 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0010b38:	83 ec 0c             	sub    esp,0xc
c0010b3b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010b3d:	53                   	push   ebx
c0010b3e:	eb 5f                	jmp    c0010b9f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0010b40:	52                   	push   edx
c0010b41:	8d 44 24 17          	lea    eax,[esp+0x17]
c0010b45:	50                   	push   eax
c0010b46:	8d 44 24 20          	lea    eax,[esp+0x20]
c0010b4a:	50                   	push   eax
c0010b4b:	53                   	push   ebx
c0010b4c:	e8 39 a9 ff ff       	call   c000b48a <File::stat(unsigned long long*, bool*)>
c0010b51:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010b55:	83 c4 10             	add    esp,0x10
c0010b58:	89 c1                	mov    ecx,eax
c0010b5a:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0010b5e:	74 31                	je     c0010b91 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0010b60:	83 ec 0c             	sub    esp,0xc
c0010b63:	50                   	push   eax
c0010b64:	e8 b0 72 ff ff       	call   c0007e19 <malloc>
c0010b69:	89 c6                	mov    esi,eax
c0010b6b:	58                   	pop    eax
c0010b6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010b6e:	8d 54 24 20          	lea    edx,[esp+0x20]
c0010b72:	52                   	push   edx
c0010b73:	56                   	push   esi
c0010b74:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010b78:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010b7c:	53                   	push   ebx
c0010b7d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010b80:	83 c4 20             	add    esp,0x20
c0010b83:	85 c0                	test   eax,eax
c0010b85:	75 0a                	jne    c0010b91 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0010b87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010b8b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0010b8f:	74 18                	je     c0010ba9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0010b91:	83 ec 0c             	sub    esp,0xc
c0010b94:	53                   	push   ebx
c0010b95:	e8 a2 a6 ff ff       	call   c000b23c <File::close()>
c0010b9a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010b9c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b9f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010ba2:	83 c4 10             	add    esp,0x10
c0010ba5:	31 c0                	xor    eax,eax
c0010ba7:	eb 3b                	jmp    c0010be4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0010ba9:	83 ec 0c             	sub    esp,0xc
c0010bac:	53                   	push   ebx
c0010bad:	e8 8a a6 ff ff       	call   c000b23c <File::close()>
c0010bb2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010bb4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010bb7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010bba:	83 c4 0c             	add    esp,0xc
c0010bbd:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0010bc4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0010bcb:	56                   	push   esi
c0010bcc:	e8 70 fd ff ff       	call   c0010941 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0010bd1:	89 34 24             	mov    DWORD PTR [esp],esi
c0010bd4:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0010bd8:	e8 4c 72 ff ff       	call   c0007e29 <free>
c0010bdd:	83 c4 10             	add    esp,0x10
c0010be0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0010be4:	81 c4 20 01 00 00    	add    esp,0x120
c0010bea:	5b                   	pop    ebx
c0010beb:	5e                   	pop    esi
c0010bec:	5f                   	pop    edi
c0010bed:	c3                   	ret    

c0010bee <Reg::getLine(char*, char*, char*)>:
c0010bee:	57                   	push   edi
c0010bef:	56                   	push   esi
c0010bf0:	53                   	push   ebx
c0010bf1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bf5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010bf9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010bfd:	57                   	push   edi
c0010bfe:	56                   	push   esi
c0010bff:	53                   	push   ebx
c0010c00:	68 9f e7 01 c0       	push   0xc001e79f
c0010c05:	e8 8f fe ff ff       	call   c0010a99 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0010c0a:	83 c4 10             	add    esp,0x10
c0010c0d:	84 c0                	test   al,al
c0010c0f:	75 10                	jne    c0010c21 <Reg::getLine(char*, char*, char*)+0x33>
c0010c11:	57                   	push   edi
c0010c12:	56                   	push   esi
c0010c13:	53                   	push   ebx
c0010c14:	68 c4 e7 01 c0       	push   0xc001e7c4
c0010c19:	e8 7b fe ff ff       	call   c0010a99 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0010c1e:	83 c4 10             	add    esp,0x10
c0010c21:	5b                   	pop    ebx
c0010c22:	5e                   	pop    esi
c0010c23:	5f                   	pop    edi
c0010c24:	c3                   	ret    

c0010c25 <Reg::readInt(char*, char*, int*)>:
c0010c25:	55                   	push   ebp
c0010c26:	57                   	push   edi
c0010c27:	56                   	push   esi
c0010c28:	53                   	push   ebx
c0010c29:	81 ec f0 00 00 00    	sub    esp,0xf0
c0010c2f:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0010c33:	57                   	push   edi
c0010c34:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0010c3b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0010c42:	e8 a7 ff ff ff       	call   c0010bee <Reg::getLine(char*, char*, char*)>
c0010c47:	83 c4 10             	add    esp,0x10
c0010c4a:	84 c0                	test   al,al
c0010c4c:	0f 84 b3 00 00 00    	je     c0010d05 <Reg::readInt(char*, char*, int*)+0xe0>
c0010c52:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0010c56:	80 fa 2b             	cmp    dl,0x2b
c0010c59:	74 0c                	je     c0010c67 <Reg::readInt(char*, char*, int*)+0x42>
c0010c5b:	80 fa 2d             	cmp    dl,0x2d
c0010c5e:	75 0e                	jne    c0010c6e <Reg::readInt(char*, char*, int*)+0x49>
c0010c60:	ba 01 00 00 00       	mov    edx,0x1
c0010c65:	eb 0b                	jmp    c0010c72 <Reg::readInt(char*, char*, int*)+0x4d>
c0010c67:	ba 01 00 00 00       	mov    edx,0x1
c0010c6c:	eb 02                	jmp    c0010c70 <Reg::readInt(char*, char*, int*)+0x4b>
c0010c6e:	31 d2                	xor    edx,edx
c0010c70:	31 c0                	xor    eax,eax
c0010c72:	be 0a 00 00 00       	mov    esi,0xa
c0010c77:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0010c7c:	75 20                	jne    c0010c9e <Reg::readInt(char*, char*, int*)+0x79>
c0010c7e:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0010c82:	80 f9 78             	cmp    cl,0x78
c0010c85:	75 0a                	jne    c0010c91 <Reg::readInt(char*, char*, int*)+0x6c>
c0010c87:	83 c2 02             	add    edx,0x2
c0010c8a:	be 10 00 00 00       	mov    esi,0x10
c0010c8f:	eb 0d                	jmp    c0010c9e <Reg::readInt(char*, char*, int*)+0x79>
c0010c91:	80 f9 62             	cmp    cl,0x62
c0010c94:	75 08                	jne    c0010c9e <Reg::readInt(char*, char*, int*)+0x79>
c0010c96:	83 c2 02             	add    edx,0x2
c0010c99:	be 02 00 00 00       	mov    esi,0x2
c0010c9e:	01 d7                	add    edi,edx
c0010ca0:	31 d2                	xor    edx,edx
c0010ca2:	8a 1f                	mov    bl,BYTE PTR [edi]
c0010ca4:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0010ca8:	80 fb 0d             	cmp    bl,0xd
c0010cab:	0f 94 c3             	sete   bl
c0010cae:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0010cb3:	0f 94 c1             	sete   cl
c0010cb6:	08 cb                	or     bl,cl
c0010cb8:	75 3a                	jne    c0010cf4 <Reg::readInt(char*, char*, int*)+0xcf>
c0010cba:	0f af d6             	imul   edx,esi
c0010cbd:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0010cc2:	83 fe 10             	cmp    esi,0x10
c0010cc5:	75 26                	jne    c0010ced <Reg::readInt(char*, char*, int*)+0xc8>
c0010cc7:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010ccb:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0010cce:	89 e9                	mov    ecx,ebp
c0010cd0:	80 f9 05             	cmp    cl,0x5
c0010cd3:	77 06                	ja     c0010cdb <Reg::readInt(char*, char*, int*)+0xb6>
c0010cd5:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0010cd9:	eb 16                	jmp    c0010cf1 <Reg::readInt(char*, char*, int*)+0xcc>
c0010cdb:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010cdf:	83 e9 61             	sub    ecx,0x61
c0010ce2:	80 f9 05             	cmp    cl,0x5
c0010ce5:	77 06                	ja     c0010ced <Reg::readInt(char*, char*, int*)+0xc8>
c0010ce7:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0010ceb:	eb 04                	jmp    c0010cf1 <Reg::readInt(char*, char*, int*)+0xcc>
c0010ced:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0010cf1:	47                   	inc    edi
c0010cf2:	eb ae                	jmp    c0010ca2 <Reg::readInt(char*, char*, int*)+0x7d>
c0010cf4:	84 c0                	test   al,al
c0010cf6:	74 02                	je     c0010cfa <Reg::readInt(char*, char*, int*)+0xd5>
c0010cf8:	f7 da                	neg    edx
c0010cfa:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0010d01:	89 10                	mov    DWORD PTR [eax],edx
c0010d03:	88 d8                	mov    al,bl
c0010d05:	81 c4 ec 00 00 00    	add    esp,0xec
c0010d0b:	5b                   	pop    ebx
c0010d0c:	5e                   	pop    esi
c0010d0d:	5f                   	pop    edi
c0010d0e:	5d                   	pop    ebp
c0010d0f:	c3                   	ret    

c0010d10 <Reg::readString(char*, char*, char*, int)>:
c0010d10:	57                   	push   edi
c0010d11:	56                   	push   esi
c0010d12:	53                   	push   ebx
c0010d13:	81 ec d4 00 00 00    	sub    esp,0xd4
c0010d19:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0010d20:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0010d24:	57                   	push   edi
c0010d25:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0010d2c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0010d33:	e8 b6 fe ff ff       	call   c0010bee <Reg::getLine(char*, char*, char*)>
c0010d38:	83 c4 10             	add    esp,0x10
c0010d3b:	89 c6                	mov    esi,eax
c0010d3d:	84 c0                	test   al,al
c0010d3f:	74 44                	je     c0010d85 <Reg::readString(char*, char*, char*, int)+0x75>
c0010d41:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0010d48:	31 c0                	xor    eax,eax
c0010d4a:	4a                   	dec    edx
c0010d4b:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0010d4e:	84 c9                	test   cl,cl
c0010d50:	74 0f                	je     c0010d61 <Reg::readString(char*, char*, char*, int)+0x51>
c0010d52:	39 c2                	cmp    edx,eax
c0010d54:	7e 0b                	jle    c0010d61 <Reg::readString(char*, char*, char*, int)+0x51>
c0010d56:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0010d59:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0010d5e:	40                   	inc    eax
c0010d5f:	eb ea                	jmp    c0010d4b <Reg::readString(char*, char*, char*, int)+0x3b>
c0010d61:	83 ec 0c             	sub    esp,0xc
c0010d64:	53                   	push   ebx
c0010d65:	e8 f6 f7 fe ff       	call   c0000560 <strlen>
c0010d6a:	83 c4 10             	add    esp,0x10
c0010d6d:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0010d72:	75 11                	jne    c0010d85 <Reg::readString(char*, char*, char*, int)+0x75>
c0010d74:	83 ec 0c             	sub    esp,0xc
c0010d77:	53                   	push   ebx
c0010d78:	e8 e3 f7 fe ff       	call   c0000560 <strlen>
c0010d7d:	83 c4 10             	add    esp,0x10
c0010d80:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0010d85:	81 c4 d0 00 00 00    	add    esp,0xd0
c0010d8b:	89 f0                	mov    eax,esi
c0010d8d:	5b                   	pop    ebx
c0010d8e:	5e                   	pop    esi
c0010d8f:	5f                   	pop    edi
c0010d90:	c3                   	ret    

c0010d91 <Reg::readBool(char*, char*, bool*)>:
c0010d91:	83 ec 20             	sub    esp,0x20
c0010d94:	8d 44 24 10          	lea    eax,[esp+0x10]
c0010d98:	50                   	push   eax
c0010d99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010d9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010da1:	e8 7f fe ff ff       	call   c0010c25 <Reg::readInt(char*, char*, int*)>
c0010da6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010dab:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010daf:	0f 95 02             	setne  BYTE PTR [edx]
c0010db2:	83 c4 2c             	add    esp,0x2c
c0010db5:	c3                   	ret    

c0010db6 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0010db6:	53                   	push   ebx
c0010db7:	83 ec 1c             	sub    esp,0x1c
c0010dba:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0010dbe:	8d 44 24 13          	lea    eax,[esp+0x13]
c0010dc2:	50                   	push   eax
c0010dc3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010dc7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010dcb:	e8 c1 ff ff ff       	call   c0010d91 <Reg::readBool(char*, char*, bool*)>
c0010dd0:	83 c4 10             	add    esp,0x10
c0010dd3:	84 c0                	test   al,al
c0010dd5:	74 04                	je     c0010ddb <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0010dd7:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0010ddb:	88 d8                	mov    al,bl
c0010ddd:	83 c4 18             	add    esp,0x18
c0010de0:	5b                   	pop    ebx
c0010de1:	c3                   	ret    

c0010de2 <Reg::readIntWithDefault(char*, char*, int)>:
c0010de2:	53                   	push   ebx
c0010de3:	83 ec 1c             	sub    esp,0x1c
c0010de6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010dea:	8d 44 24 10          	lea    eax,[esp+0x10]
c0010dee:	50                   	push   eax
c0010def:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010df3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010df7:	e8 29 fe ff ff       	call   c0010c25 <Reg::readInt(char*, char*, int*)>
c0010dfc:	83 c4 10             	add    esp,0x10
c0010dff:	84 c0                	test   al,al
c0010e01:	74 04                	je     c0010e07 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0010e03:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010e07:	89 d8                	mov    eax,ebx
c0010e09:	83 c4 18             	add    esp,0x18
c0010e0c:	5b                   	pop    ebx
c0010e0d:	c3                   	ret    

c0010e0e <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0010e0e:	57                   	push   edi
c0010e0f:	56                   	push   esi
c0010e10:	56                   	push   esi
c0010e11:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010e15:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0010e19:	56                   	push   esi
c0010e1a:	57                   	push   edi
c0010e1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e23:	e8 e8 fe ff ff       	call   c0010d10 <Reg::readString(char*, char*, char*, int)>
c0010e28:	83 c4 10             	add    esp,0x10
c0010e2b:	84 c0                	test   al,al
c0010e2d:	75 1a                	jne    c0010e49 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0010e2f:	51                   	push   ecx
c0010e30:	56                   	push   esi
c0010e31:	6a 00                	push   0x0
c0010e33:	57                   	push   edi
c0010e34:	e8 b7 f6 fe ff       	call   c00004f0 <memset>
c0010e39:	8d 4e ff             	lea    ecx,[esi-0x1]
c0010e3c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010e40:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e42:	83 c4 10             	add    esp,0x10
c0010e45:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0010e49:	89 f8                	mov    eax,edi
c0010e4b:	5a                   	pop    edx
c0010e4c:	5e                   	pop    esi
c0010e4d:	5f                   	pop    edi
c0010e4e:	c3                   	ret    

c0010e4f <Sys::eject(regs*)>:
c0010e4f:	83 ec 0c             	sub    esp,0xc
c0010e52:	83 ca ff             	or     edx,0xffffffff
c0010e55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e59:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0010e5c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010e61:	83 e9 41             	sub    ecx,0x41
c0010e64:	83 f9 19             	cmp    ecx,0x19
c0010e67:	77 18                	ja     c0010e81 <Sys::eject(regs*)+0x32>
c0010e69:	8b 0c 8d 60 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd1a0]
c0010e70:	85 c9                	test   ecx,ecx
c0010e72:	74 0d                	je     c0010e81 <Sys::eject(regs*)+0x32>
c0010e74:	83 ec 0c             	sub    esp,0xc
c0010e77:	51                   	push   ecx
c0010e78:	e8 a9 c3 ff ff       	call   c000d226 <LogicalDisk::eject()>
c0010e7d:	83 c4 10             	add    esp,0x10
c0010e80:	99                   	cdq    
c0010e81:	83 c4 0c             	add    esp,0xc
c0010e84:	c3                   	ret    

c0010e85 <Sys::exit(regs*)>:
c0010e85:	83 ec 18             	sub    esp,0x18
c0010e88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010e8c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0010e8f:	e8 dc 34 00 00       	call   c0014370 <terminateTask(int)>
c0010e94:	83 c8 ff             	or     eax,0xffffffff
c0010e97:	83 c4 1c             	add    esp,0x1c
c0010e9a:	89 c2                	mov    edx,eax
c0010e9c:	c3                   	ret    

c0010e9d <Sys::getCwd(regs*)>:
c0010e9d:	83 ec 10             	sub    esp,0x10
c0010ea0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010ea4:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0010ea7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0010eaa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010eaf:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010eb2:	e8 69 a0 ff ff       	call   c000af20 <Fs::getcwd(Process*, char*, int)>
c0010eb7:	83 c4 1c             	add    esp,0x1c
c0010eba:	99                   	cdq    
c0010ebb:	c3                   	ret    

c0010ebc <Sys::getPID(regs*)>:
c0010ebc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ec1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ec4:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ec6:	99                   	cdq    
c0010ec7:	c3                   	ret    

c0010ec8 <Sys::getRAMData(regs*)>:
c0010ec8:	8b 0d 28 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020928
c0010ece:	69 05 24 09 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0020924,0xc8
c0010ed8:	99                   	cdq    
c0010ed9:	f7 f9                	idiv   ecx
c0010edb:	c1 e0 18             	shl    eax,0x18
c0010ede:	09 c8                	or     eax,ecx
c0010ee0:	99                   	cdq    
c0010ee1:	c3                   	ret    

c0010ee2 <Sys::getVGAPtr(regs*)>:
c0010ee2:	55                   	push   ebp
c0010ee3:	57                   	push   edi
c0010ee4:	56                   	push   esi
c0010ee5:	53                   	push   ebx
c0010ee6:	83 ec 18             	sub    esp,0x18
c0010ee9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010eed:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010ef0:	e8 7b 2f 00 00       	call   c0013e70 <Thr::processFromPID(int)>
c0010ef5:	83 c4 10             	add    esp,0x10
c0010ef8:	89 c1                	mov    ecx,eax
c0010efa:	b8 01 00 00 00       	mov    eax,0x1
c0010eff:	85 c9                	test   ecx,ecx
c0010f01:	74 57                	je     c0010f5a <Sys::getVGAPtr(regs*)+0x78>
c0010f03:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0010f09:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0010f0d:	74 0c                	je     c0010f1b <Sys::getVGAPtr(regs*)+0x39>
c0010f0f:	83 ec 0c             	sub    esp,0xc
c0010f12:	55                   	push   ebp
c0010f13:	e8 31 7c ff ff       	call   c0008b49 <setActiveTerminal(VgaText*)>
c0010f18:	83 c4 10             	add    esp,0x10
c0010f1b:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0010f1e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010f21:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0010f26:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f28:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0010f2b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010f2e:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0010f34:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010f37:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0010f3a:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0010f40:	50                   	push   eax
c0010f41:	50                   	push   eax
c0010f42:	68 df e7 01 c0       	push   0xc001e7df
c0010f47:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010f4a:	05 a8 0f 00 00       	add    eax,0xfa8
c0010f4f:	50                   	push   eax
c0010f50:	e8 cb f6 fe ff       	call   c0000620 <strcpy>
c0010f55:	83 c4 10             	add    esp,0x10
c0010f58:	31 c0                	xor    eax,eax
c0010f5a:	83 c4 0c             	add    esp,0xc
c0010f5d:	31 d2                	xor    edx,edx
c0010f5f:	5b                   	pop    ebx
c0010f60:	5e                   	pop    esi
c0010f61:	5f                   	pop    edi
c0010f62:	5d                   	pop    ebp
c0010f63:	c3                   	ret    

c0010f64 <Sys::loadDLL(regs*)>:
c0010f64:	56                   	push   esi
c0010f65:	53                   	push   ebx
c0010f66:	31 d2                	xor    edx,edx
c0010f68:	51                   	push   ecx
c0010f69:	b8 01 00 00 00       	mov    eax,0x1
c0010f6e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010f72:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0010f76:	0f 84 8c 00 00 00    	je     c0011008 <Sys::loadDLL(regs*)+0xa4>
c0010f7c:	83 ec 0c             	sub    esp,0xc
c0010f7f:	68 14 01 00 00       	push   0x114
c0010f84:	e8 90 6e ff ff       	call   c0007e19 <malloc>
c0010f89:	83 c4 0c             	add    esp,0xc
c0010f8c:	89 c3                	mov    ebx,eax
c0010f8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f93:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010f96:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0010f99:	53                   	push   ebx
c0010f9a:	e8 7f a1 ff ff       	call   c000b11e <File::File(char const*, Process*)>
c0010f9f:	83 c4 10             	add    esp,0x10
c0010fa2:	31 d2                	xor    edx,edx
c0010fa4:	b8 02 00 00 00       	mov    eax,0x2
c0010fa9:	85 db                	test   ebx,ebx
c0010fab:	74 5b                	je     c0011008 <Sys::loadDLL(regs*)+0xa4>
c0010fad:	83 ec 0c             	sub    esp,0xc
c0010fb0:	53                   	push   ebx
c0010fb1:	e8 96 a4 ff ff       	call   c000b44c <File::exists()>
c0010fb6:	83 c4 10             	add    esp,0x10
c0010fb9:	84 c0                	test   al,al
c0010fbb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010fbd:	75 11                	jne    c0010fd0 <Sys::loadDLL(regs*)+0x6c>
c0010fbf:	83 ec 0c             	sub    esp,0xc
c0010fc2:	53                   	push   ebx
c0010fc3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010fc6:	83 c4 10             	add    esp,0x10
c0010fc9:	b8 03 00 00 00       	mov    eax,0x3
c0010fce:	eb 36                	jmp    c0011006 <Sys::loadDLL(regs*)+0xa2>
c0010fd0:	83 ec 0c             	sub    esp,0xc
c0010fd3:	53                   	push   ebx
c0010fd4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010fd7:	58                   	pop    eax
c0010fd8:	5a                   	pop    edx
c0010fd9:	6a 00                	push   0x0
c0010fdb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0010fde:	e8 77 20 00 00       	call   c001305a <Thr::loadDLL(char const*, bool)>
c0010fe3:	83 c4 10             	add    esp,0x10
c0010fe6:	89 c1                	mov    ecx,eax
c0010fe8:	31 d2                	xor    edx,edx
c0010fea:	b8 04 00 00 00       	mov    eax,0x4
c0010fef:	85 c9                	test   ecx,ecx
c0010ff1:	74 15                	je     c0011008 <Sys::loadDLL(regs*)+0xa4>
c0010ff3:	53                   	push   ebx
c0010ff4:	53                   	push   ebx
c0010ff5:	ff 35 f8 08 02 c0    	push   DWORD PTR ds:0xc00208f8
c0010ffb:	51                   	push   ecx
c0010ffc:	e8 8a 22 00 00       	call   c001328b <Thr::executeDLL(unsigned long, void*)>
c0011001:	83 c4 10             	add    esp,0x10
c0011004:	31 c0                	xor    eax,eax
c0011006:	31 d2                	xor    edx,edx
c0011008:	59                   	pop    ecx
c0011009:	5b                   	pop    ebx
c001100a:	5e                   	pop    esi
c001100b:	c3                   	ret    

c001100c <Sys::read(regs*)>:
c001100c:	57                   	push   edi
c001100d:	56                   	push   esi
c001100e:	53                   	push   ebx
c001100f:	83 ec 10             	sub    esp,0x10
c0011012:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011016:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011019:	83 f8 02             	cmp    eax,0x2
c001101c:	77 10                	ja     c001102e <Sys::read(regs*)+0x22>
c001101e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011023:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011026:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001102c:	eb 0e                	jmp    c001103c <Sys::read(regs*)+0x30>
c001102e:	83 ec 0c             	sub    esp,0xc
c0011031:	50                   	push   eax
c0011032:	e8 c8 87 ff ff       	call   c00097ff <getFromFileDescriptor(int)>
c0011037:	83 c4 10             	add    esp,0x10
c001103a:	89 c1                	mov    ecx,eax
c001103c:	83 c8 ff             	or     eax,0xffffffff
c001103f:	85 c9                	test   ecx,ecx
c0011041:	89 c2                	mov    edx,eax
c0011043:	74 28                	je     c001106d <Sys::read(regs*)+0x61>
c0011045:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001104d:	31 ff                	xor    edi,edi
c001104f:	83 ec 0c             	sub    esp,0xc
c0011052:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011054:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011058:	52                   	push   edx
c0011059:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001105c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001105f:	57                   	push   edi
c0011060:	56                   	push   esi
c0011061:	51                   	push   ecx
c0011062:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011065:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011069:	83 c4 20             	add    esp,0x20
c001106c:	99                   	cdq    
c001106d:	83 c4 10             	add    esp,0x10
c0011070:	5b                   	pop    ebx
c0011071:	5e                   	pop    esi
c0011072:	5f                   	pop    edi
c0011073:	c3                   	ret    

c0011074 <Sys::sbrk(regs*)>:
c0011074:	56                   	push   esi
c0011075:	53                   	push   ebx
c0011076:	50                   	push   eax
c0011077:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001107c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011080:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011083:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0011086:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c001108c:	85 db                	test   ebx,ebx
c001108e:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0011091:	74 02                	je     c0011095 <Sys::sbrk(regs*)+0x21>
c0011093:	79 06                	jns    c001109b <Sys::sbrk(regs*)+0x27>
c0011095:	89 f0                	mov    eax,esi
c0011097:	31 d2                	xor    edx,edx
c0011099:	eb 2a                	jmp    c00110c5 <Sys::sbrk(regs*)+0x51>
c001109b:	83 c8 ff             	or     eax,0xffffffff
c001109e:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00110a4:	89 c2                	mov    edx,eax
c00110a6:	77 1d                	ja     c00110c5 <Sys::sbrk(regs*)+0x51>
c00110a8:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00110ae:	50                   	push   eax
c00110af:	c1 ea 0c             	shr    edx,0xc
c00110b2:	68 07 0c 00 00       	push   0xc07
c00110b7:	52                   	push   edx
c00110b8:	51                   	push   ecx
c00110b9:	e8 30 90 ff ff       	call   c000a0ee <VAS::allocatePages(int, int)>
c00110be:	89 f0                	mov    eax,esi
c00110c0:	31 d2                	xor    edx,edx
c00110c2:	83 c4 10             	add    esp,0x10
c00110c5:	59                   	pop    ecx
c00110c6:	5b                   	pop    ebx
c00110c7:	5e                   	pop    esi
c00110c8:	c3                   	ret    

c00110c9 <Sys::setCwd(regs*)>:
c00110c9:	83 ec 14             	sub    esp,0x14
c00110cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00110d0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00110d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110d8:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00110db:	e8 0b a4 ff ff       	call   c000b4eb <Fs::setcwd(Process*, char*)>
c00110e0:	83 c4 1c             	add    esp,0x1c
c00110e3:	99                   	cdq    
c00110e4:	c3                   	ret    

c00110e5 <Sys::setTime(regs*)>:
c00110e5:	55                   	push   ebp
c00110e6:	31 c9                	xor    ecx,ecx
c00110e8:	57                   	push   edi
c00110e9:	bd 0c 00 00 00       	mov    ebp,0xc
c00110ee:	56                   	push   esi
c00110ef:	53                   	push   ebx
c00110f0:	31 db                	xor    ebx,ebx
c00110f2:	83 ec 10             	sub    esp,0x10
c00110f5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00110f9:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00110fc:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00110ff:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0011102:	89 c2                	mov    edx,eax
c0011104:	66 81 ef 6c 07       	sub    di,0x76c
c0011109:	83 e2 1f             	and    edx,0x1f
c001110c:	c1 e7 10             	shl    edi,0x10
c001110f:	42                   	inc    edx
c0011110:	c1 e8 05             	shr    eax,0x5
c0011113:	88 d1                	mov    cl,dl
c0011115:	31 d2                	xor    edx,edx
c0011117:	f7 f5                	div    ebp
c0011119:	89 dd                	mov    ebp,ebx
c001111b:	88 d5                	mov    ch,dl
c001111d:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0011123:	0f b7 c1             	movzx  eax,cx
c0011126:	31 d2                	xor    edx,edx
c0011128:	09 f8                	or     eax,edi
c001112a:	bf 3c 00 00 00       	mov    edi,0x3c
c001112f:	89 c1                	mov    ecx,eax
c0011131:	89 f0                	mov    eax,esi
c0011133:	f7 f7                	div    edi
c0011135:	c1 e2 10             	shl    edx,0x10
c0011138:	09 d5                	or     ebp,edx
c001113a:	31 d2                	xor    edx,edx
c001113c:	89 eb                	mov    ebx,ebp
c001113e:	f7 f7                	div    edi
c0011140:	bf 10 0e 00 00       	mov    edi,0xe10
c0011145:	88 d7                	mov    bh,dl
c0011147:	89 f0                	mov    eax,esi
c0011149:	31 d2                	xor    edx,edx
c001114b:	f7 f7                	div    edi
c001114d:	bf 18 00 00 00       	mov    edi,0x18
c0011152:	31 d2                	xor    edx,edx
c0011154:	f7 f7                	div    edi
c0011156:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c001115b:	88 d3                	mov    bl,dl
c001115d:	53                   	push   ebx
c001115e:	51                   	push   ecx
c001115f:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0011165:	e8 92 ab ff ff       	call   c000bcfc <Clock::setTimeInDatetimeLocal(datetime_t)>
c001116a:	83 c4 1c             	add    esp,0x1c
c001116d:	83 f0 01             	xor    eax,0x1
c0011170:	5b                   	pop    ebx
c0011171:	0f b6 c0             	movzx  eax,al
c0011174:	5e                   	pop    esi
c0011175:	31 d2                	xor    edx,edx
c0011177:	5f                   	pop    edi
c0011178:	5d                   	pop    ebp
c0011179:	c3                   	ret    

c001117a <Sys::timezone(regs*)>:
c001117a:	53                   	push   ebx
c001117b:	83 ec 08             	sub    esp,0x8
c001117e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011182:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0011186:	75 17                	jne    c001119f <Sys::timezone(regs*)+0x25>
c0011188:	83 ec 0c             	sub    esp,0xc
c001118b:	68 e9 e7 01 c0       	push   0xc001e7e9
c0011190:	e8 13 9a ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c0011195:	83 c8 ff             	or     eax,0xffffffff
c0011198:	83 c4 10             	add    esp,0x10
c001119b:	89 c2                	mov    edx,eax
c001119d:	eb 20                	jmp    c00111bf <Sys::timezone(regs*)+0x45>
c001119f:	83 ec 0c             	sub    esp,0xc
c00111a2:	68 fe e7 01 c0       	push   0xc001e7fe
c00111a7:	e8 fc 99 ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c00111ac:	58                   	pop    eax
c00111ad:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00111b0:	e8 a3 a8 ff ff       	call   c000ba58 <User::loadClockSettings(int)>
c00111b5:	83 c4 10             	add    esp,0x10
c00111b8:	b8 01 00 00 00       	mov    eax,0x1
c00111bd:	31 d2                	xor    edx,edx
c00111bf:	83 c4 08             	add    esp,0x8
c00111c2:	5b                   	pop    ebx
c00111c3:	c3                   	ret    

c00111c4 <Sys::write(regs*)>:
c00111c4:	57                   	push   edi
c00111c5:	56                   	push   esi
c00111c6:	53                   	push   ebx
c00111c7:	83 ec 10             	sub    esp,0x10
c00111ca:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00111ce:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00111d1:	83 f8 02             	cmp    eax,0x2
c00111d4:	77 10                	ja     c00111e6 <Sys::write(regs*)+0x22>
c00111d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111db:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00111de:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00111e4:	eb 0e                	jmp    c00111f4 <Sys::write(regs*)+0x30>
c00111e6:	83 ec 0c             	sub    esp,0xc
c00111e9:	50                   	push   eax
c00111ea:	e8 10 86 ff ff       	call   c00097ff <getFromFileDescriptor(int)>
c00111ef:	83 c4 10             	add    esp,0x10
c00111f2:	89 c1                	mov    ecx,eax
c00111f4:	83 c8 ff             	or     eax,0xffffffff
c00111f7:	85 c9                	test   ecx,ecx
c00111f9:	89 c2                	mov    edx,eax
c00111fb:	74 28                	je     c0011225 <Sys::write(regs*)+0x61>
c00111fd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011205:	31 ff                	xor    edi,edi
c0011207:	83 ec 0c             	sub    esp,0xc
c001120a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001120c:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011210:	52                   	push   edx
c0011211:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011214:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011217:	57                   	push   edi
c0011218:	56                   	push   esi
c0011219:	51                   	push   ecx
c001121a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001121d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011221:	83 c4 20             	add    esp,0x20
c0011224:	99                   	cdq    
c0011225:	83 c4 10             	add    esp,0x10
c0011228:	5b                   	pop    ebx
c0011229:	5e                   	pop    esi
c001122a:	5f                   	pop    edi
c001122b:	c3                   	ret    

c001122c <Sys::wsbe(regs*)>:
c001122c:	57                   	push   edi
c001122d:	b9 0b 00 00 00       	mov    ecx,0xb
c0011232:	56                   	push   esi
c0011233:	be 3d e8 01 c0       	mov    esi,0xc001e83d
c0011238:	53                   	push   ebx
c0011239:	83 ec 30             	sub    esp,0x30
c001123c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011240:	fc                   	cld    
c0011241:	83 ec 0c             	sub    esp,0xc
c0011244:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011246:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001124a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001124f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011252:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0011258:	8b 06                	mov    eax,DWORD PTR [esi]
c001125a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001125d:	57                   	push   edi
c001125e:	e8 fd f2 fe ff       	call   c0000560 <strlen>
c0011263:	5a                   	pop    edx
c0011264:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0011268:	52                   	push   edx
c0011269:	31 d2                	xor    edx,edx
c001126b:	57                   	push   edi
c001126c:	52                   	push   edx
c001126d:	50                   	push   eax
c001126e:	56                   	push   esi
c001126f:	ff d3                	call   ebx
c0011271:	83 c4 14             	add    esp,0x14
c0011274:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011278:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001127b:	e8 f0 30 00 00       	call   c0014370 <terminateTask(int)>
c0011280:	83 c4 40             	add    esp,0x40
c0011283:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011288:	5b                   	pop    ebx
c0011289:	31 d2                	xor    edx,edx
c001128b:	5e                   	pop    esi
c001128c:	5f                   	pop    edi
c001128d:	c3                   	ret    

c001128e <Sys::yield(regs*)>:
c001128e:	83 ec 0c             	sub    esp,0xc
c0011291:	fa                   	cli    
c0011292:	ff 05 c8 3d 02 c0    	inc    DWORD PTR ds:0xc0023dc8
c0011298:	e8 af 27 00 00       	call   c0013a4c <schedule()>
c001129d:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c00112a2:	48                   	dec    eax
c00112a3:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c00112a8:	75 01                	jne    c00112ab <Sys::yield(regs*)+0x1d>
c00112aa:	fb                   	sti    
c00112ab:	31 c0                	xor    eax,eax
c00112ad:	31 d2                	xor    edx,edx
c00112af:	83 c4 0c             	add    esp,0xc
c00112b2:	c3                   	ret    

c00112b3 <sysCallSeekDir(regs*)>:
c00112b3:	31 c0                	xor    eax,eax
c00112b5:	31 d2                	xor    edx,edx
c00112b7:	c3                   	ret    

c00112b8 <sysCallTellDir(regs*)>:
c00112b8:	31 c0                	xor    eax,eax
c00112ba:	31 d2                	xor    edx,edx
c00112bc:	c3                   	ret    

c00112bd <sysCallVerify(regs*)>:
c00112bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112c1:	31 d2                	xor    edx,edx
c00112c3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00112c6:	c3                   	ret    

c00112c7 <sysCallGetArgc(regs*)>:
c00112c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00112cc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00112cf:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00112d5:	99                   	cdq    
c00112d6:	c3                   	ret    

c00112d7 <sysCallTTYName(regs*)>:
c00112d7:	b8 01 00 00 00       	mov    eax,0x1
c00112dc:	31 d2                	xor    edx,edx
c00112de:	c3                   	ret    

c00112df <sysFormatDisk(regs*)>:
c00112df:	56                   	push   esi
c00112e0:	53                   	push   ebx
c00112e1:	50                   	push   eax
c00112e2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00112e6:	8b 1d f4 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209f4
c00112ec:	eb 28                	jmp    c0011316 <sysFormatDisk(regs*)+0x37>
c00112ee:	83 ec 0c             	sub    esp,0xc
c00112f1:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00112f4:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00112f7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00112f9:	51                   	push   ecx
c00112fa:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00112fd:	51                   	push   ecx
c00112fe:	50                   	push   eax
c00112ff:	8b 04 85 60 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd1a0]
c0011306:	50                   	push   eax
c0011307:	53                   	push   ebx
c0011308:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001130b:	83 c4 20             	add    esp,0x20
c001130e:	83 f8 08             	cmp    eax,0x8
c0011311:	75 12                	jne    c0011325 <sysFormatDisk(regs*)+0x46>
c0011313:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011316:	85 db                	test   ebx,ebx
c0011318:	75 d4                	jne    c00112ee <sysFormatDisk(regs*)+0xf>
c001131a:	59                   	pop    ecx
c001131b:	b8 03 00 00 00       	mov    eax,0x3
c0011320:	31 d2                	xor    edx,edx
c0011322:	5b                   	pop    ebx
c0011323:	5e                   	pop    esi
c0011324:	c3                   	ret    
c0011325:	85 c0                	test   eax,eax
c0011327:	74 1b                	je     c0011344 <sysFormatDisk(regs*)+0x65>
c0011329:	83 f8 09             	cmp    eax,0x9
c001132c:	74 0b                	je     c0011339 <sysFormatDisk(regs*)+0x5a>
c001132e:	59                   	pop    ecx
c001132f:	b8 02 00 00 00       	mov    eax,0x2
c0011334:	31 d2                	xor    edx,edx
c0011336:	5b                   	pop    ebx
c0011337:	5e                   	pop    esi
c0011338:	c3                   	ret    
c0011339:	59                   	pop    ecx
c001133a:	b8 01 00 00 00       	mov    eax,0x1
c001133f:	31 d2                	xor    edx,edx
c0011341:	5b                   	pop    ebx
c0011342:	5e                   	pop    esi
c0011343:	c3                   	ret    
c0011344:	59                   	pop    ecx
c0011345:	31 c0                	xor    eax,eax
c0011347:	31 d2                	xor    edx,edx
c0011349:	5b                   	pop    ebx
c001134a:	5e                   	pop    esi
c001134b:	c3                   	ret    

c001134c <sysSetDiskVolumeLabel(regs*)>:
c001134c:	56                   	push   esi
c001134d:	53                   	push   ebx
c001134e:	53                   	push   ebx
c001134f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011353:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011356:	83 f8 19             	cmp    eax,0x19
c0011359:	77 2d                	ja     c0011388 <sysSetDiskVolumeLabel(regs*)+0x3c>
c001135b:	8b 0c 85 60 2e 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd1a0]
c0011362:	85 c9                	test   ecx,ecx
c0011364:	74 22                	je     c0011388 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0011366:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011369:	85 db                	test   ebx,ebx
c001136b:	74 1b                	je     c0011388 <sysSetDiskVolumeLabel(regs*)+0x3c>
c001136d:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0011373:	85 d2                	test   edx,edx
c0011375:	74 11                	je     c0011388 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0011377:	8b 32                	mov    esi,DWORD PTR [edx]
c0011379:	53                   	push   ebx
c001137a:	50                   	push   eax
c001137b:	51                   	push   ecx
c001137c:	52                   	push   edx
c001137d:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0011380:	83 c4 10             	add    esp,0x10
c0011383:	99                   	cdq    
c0011384:	59                   	pop    ecx
c0011385:	5b                   	pop    ebx
c0011386:	5e                   	pop    esi
c0011387:	c3                   	ret    
c0011388:	59                   	pop    ecx
c0011389:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001138e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011393:	5b                   	pop    ebx
c0011394:	5e                   	pop    esi
c0011395:	c3                   	ret    

c0011396 <sysGetDiskVolumeLabel(regs*)>:
c0011396:	57                   	push   edi
c0011397:	56                   	push   esi
c0011398:	53                   	push   ebx
c0011399:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001139d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00113a0:	83 fa 19             	cmp    edx,0x19
c00113a3:	77 38                	ja     c00113dd <sysGetDiskVolumeLabel(regs*)+0x47>
c00113a5:	8b 0c 95 60 2e 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdd1a0]
c00113ac:	85 c9                	test   ecx,ecx
c00113ae:	74 2d                	je     c00113dd <sysGetDiskVolumeLabel(regs*)+0x47>
c00113b0:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00113b3:	85 db                	test   ebx,ebx
c00113b5:	74 26                	je     c00113dd <sysGetDiskVolumeLabel(regs*)+0x47>
c00113b7:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00113ba:	85 f6                	test   esi,esi
c00113bc:	74 1f                	je     c00113dd <sysGetDiskVolumeLabel(regs*)+0x47>
c00113be:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c00113c4:	85 c0                	test   eax,eax
c00113c6:	74 15                	je     c00113dd <sysGetDiskVolumeLabel(regs*)+0x47>
c00113c8:	83 ec 0c             	sub    esp,0xc
c00113cb:	8b 38                	mov    edi,DWORD PTR [eax]
c00113cd:	56                   	push   esi
c00113ce:	53                   	push   ebx
c00113cf:	52                   	push   edx
c00113d0:	51                   	push   ecx
c00113d1:	50                   	push   eax
c00113d2:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00113d5:	83 c4 20             	add    esp,0x20
c00113d8:	99                   	cdq    
c00113d9:	5b                   	pop    ebx
c00113da:	5e                   	pop    esi
c00113db:	5f                   	pop    edi
c00113dc:	c3                   	ret    
c00113dd:	5b                   	pop    ebx
c00113de:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00113e3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113e8:	5e                   	pop    esi
c00113e9:	5f                   	pop    edi
c00113ea:	c3                   	ret    

c00113eb <sysShutdown(regs*)>:
c00113eb:	83 ec 0c             	sub    esp,0xc
c00113ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113f2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00113f5:	85 c0                	test   eax,eax
c00113f7:	74 18                	je     c0011411 <sysShutdown(regs*)+0x26>
c00113f9:	83 f8 01             	cmp    eax,0x1
c00113fc:	74 38                	je     c0011436 <sysShutdown(regs*)+0x4b>
c00113fe:	83 f8 02             	cmp    eax,0x2
c0011401:	74 24                	je     c0011427 <sysShutdown(regs*)+0x3c>
c0011403:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011408:	ba ff ff ff ff       	mov    edx,0xffffffff
c001140d:	83 c4 0c             	add    esp,0xc
c0011410:	c3                   	ret    
c0011411:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c0011416:	8b 10                	mov    edx,DWORD PTR [eax]
c0011418:	6a 00                	push   0x0
c001141a:	6a 00                	push   0x0
c001141c:	6a 00                	push   0x0
c001141e:	50                   	push   eax
c001141f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011422:	83 c4 10             	add    esp,0x10
c0011425:	eb dc                	jmp    c0011403 <sysShutdown(regs*)+0x18>
c0011427:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c001142c:	8b 10                	mov    edx,DWORD PTR [eax]
c001142e:	6a 00                	push   0x0
c0011430:	6a 00                	push   0x0
c0011432:	6a 01                	push   0x1
c0011434:	eb e8                	jmp    c001141e <sysShutdown(regs*)+0x33>
c0011436:	a1 e0 2e 02 c0       	mov    eax,ds:0xc0022ee0
c001143b:	85 c0                	test   eax,eax
c001143d:	74 02                	je     c0011441 <sysShutdown(regs*)+0x56>
c001143f:	ff d0                	call   eax
c0011441:	31 c0                	xor    eax,eax
c0011443:	31 d2                	xor    edx,edx
c0011445:	83 c4 0c             	add    esp,0xc
c0011448:	c3                   	ret    

c0011449 <sysCallRealpath(regs*)>:
c0011449:	83 ec 0c             	sub    esp,0xc
c001144c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011450:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011453:	85 d2                	test   edx,edx
c0011455:	74 07                	je     c001145e <sysCallRealpath(regs*)+0x15>
c0011457:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001145a:	85 c0                	test   eax,eax
c001145c:	75 0b                	jne    c0011469 <sysCallRealpath(regs*)+0x20>
c001145e:	b8 01 00 00 00       	mov    eax,0x1
c0011463:	31 d2                	xor    edx,edx
c0011465:	83 c4 0c             	add    esp,0xc
c0011468:	c3                   	ret    
c0011469:	51                   	push   ecx
c001146a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011470:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011473:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011479:	51                   	push   ecx
c001147a:	52                   	push   edx
c001147b:	50                   	push   eax
c001147c:	e8 f3 9a ff ff       	call   c000af74 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011481:	83 c4 10             	add    esp,0x10
c0011484:	31 c0                	xor    eax,eax
c0011486:	31 d2                	xor    edx,edx
c0011488:	83 c4 0c             	add    esp,0xc
c001148b:	c3                   	ret    

c001148c <sysCallReadDir(regs*)>:
c001148c:	53                   	push   ebx
c001148d:	83 ec 18             	sub    esp,0x18
c0011490:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011494:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011497:	83 f8 02             	cmp    eax,0x2
c001149a:	76 61                	jbe    c00114fd <sysCallReadDir(regs*)+0x71>
c001149c:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00114a3:	77 49                	ja     c00114ee <sysCallReadDir(regs*)+0x62>
c00114a5:	83 ec 0c             	sub    esp,0xc
c00114a8:	50                   	push   eax
c00114a9:	e8 51 83 ff ff       	call   c00097ff <getFromFileDescriptor(int)>
c00114ae:	83 c4 10             	add    esp,0x10
c00114b1:	85 c0                	test   eax,eax
c00114b3:	74 39                	je     c00114ee <sysCallReadDir(regs*)+0x62>
c00114b5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00114bd:	83 ec 0c             	sub    esp,0xc
c00114c0:	8b 10                	mov    edx,DWORD PTR [eax]
c00114c2:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00114c6:	51                   	push   ecx
c00114c7:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00114ca:	51                   	push   ecx
c00114cb:	6a 00                	push   0x0
c00114cd:	68 10 01 00 00       	push   0x110
c00114d2:	50                   	push   eax
c00114d3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00114d6:	83 c4 20             	add    esp,0x20
c00114d9:	85 c0                	test   eax,eax
c00114db:	74 29                	je     c0011506 <sysCallReadDir(regs*)+0x7a>
c00114dd:	83 f8 07             	cmp    eax,0x7
c00114e0:	74 1b                	je     c00114fd <sysCallReadDir(regs*)+0x71>
c00114e2:	b8 02 00 00 00       	mov    eax,0x2
c00114e7:	31 d2                	xor    edx,edx
c00114e9:	83 c4 18             	add    esp,0x18
c00114ec:	5b                   	pop    ebx
c00114ed:	c3                   	ret    
c00114ee:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114f3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114f8:	83 c4 18             	add    esp,0x18
c00114fb:	5b                   	pop    ebx
c00114fc:	c3                   	ret    
c00114fd:	b8 01 00 00 00       	mov    eax,0x1
c0011502:	31 d2                	xor    edx,edx
c0011504:	eb e3                	jmp    c00114e9 <sysCallReadDir(regs*)+0x5d>
c0011506:	31 c0                	xor    eax,eax
c0011508:	31 d2                	xor    edx,edx
c001150a:	eb dd                	jmp    c00114e9 <sysCallReadDir(regs*)+0x5d>

c001150c <sysCallIsATTY(regs*)>:
c001150c:	83 ec 0c             	sub    esp,0xc
c001150f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011513:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011516:	83 f8 02             	cmp    eax,0x2
c0011519:	76 07                	jbe    c0011522 <sysCallIsATTY(regs*)+0x16>
c001151b:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011520:	75 28                	jne    c001154a <sysCallIsATTY(regs*)+0x3e>
c0011522:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011527:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001152a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011530:	85 c0                	test   eax,eax
c0011532:	74 26                	je     c001155a <sysCallIsATTY(regs*)+0x4e>
c0011534:	83 ec 0c             	sub    esp,0xc
c0011537:	8b 10                	mov    edx,DWORD PTR [eax]
c0011539:	50                   	push   eax
c001153a:	ff 12                	call   DWORD PTR [edx]
c001153c:	31 d2                	xor    edx,edx
c001153e:	25 ff 00 00 00       	and    eax,0xff
c0011543:	83 c4 10             	add    esp,0x10
c0011546:	83 c4 0c             	add    esp,0xc
c0011549:	c3                   	ret    
c001154a:	83 ec 0c             	sub    esp,0xc
c001154d:	50                   	push   eax
c001154e:	e8 ac 82 ff ff       	call   c00097ff <getFromFileDescriptor(int)>
c0011553:	83 c4 10             	add    esp,0x10
c0011556:	85 c0                	test   eax,eax
c0011558:	75 da                	jne    c0011534 <sysCallIsATTY(regs*)+0x28>
c001155a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001155f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011564:	83 c4 0c             	add    esp,0xc
c0011567:	c3                   	ret    

c0011568 <sysCallSeek(regs*)>:
c0011568:	53                   	push   ebx
c0011569:	83 ec 08             	sub    esp,0x8
c001156c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011570:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011573:	8d 50 fd             	lea    edx,[eax-0x3]
c0011576:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001157c:	77 34                	ja     c00115b2 <sysCallSeek(regs*)+0x4a>
c001157e:	83 ec 0c             	sub    esp,0xc
c0011581:	50                   	push   eax
c0011582:	e8 78 82 ff ff       	call   c00097ff <getFromFileDescriptor(int)>
c0011587:	83 c4 0c             	add    esp,0xc
c001158a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001158d:	31 db                	xor    ebx,ebx
c001158f:	53                   	push   ebx
c0011590:	51                   	push   ecx
c0011591:	50                   	push   eax
c0011592:	e8 05 9d ff ff       	call   c000b29c <File::seek(unsigned long long)>
c0011597:	83 c4 10             	add    esp,0x10
c001159a:	85 c0                	test   eax,eax
c001159c:	0f 95 c0             	setne  al
c001159f:	31 d2                	xor    edx,edx
c00115a1:	25 ff 00 00 00       	and    eax,0xff
c00115a6:	f7 d8                	neg    eax
c00115a8:	83 d2 00             	adc    edx,0x0
c00115ab:	83 c4 08             	add    esp,0x8
c00115ae:	f7 da                	neg    edx
c00115b0:	5b                   	pop    ebx
c00115b1:	c3                   	ret    
c00115b2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115b7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115bc:	83 c4 08             	add    esp,0x8
c00115bf:	5b                   	pop    ebx
c00115c0:	c3                   	ret    

c00115c1 <sysCallTell(regs*)>:
c00115c1:	53                   	push   ebx
c00115c2:	83 ec 08             	sub    esp,0x8
c00115c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00115c9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00115cc:	83 f8 02             	cmp    eax,0x2
c00115cf:	76 50                	jbe    c0011621 <sysCallTell(regs*)+0x60>
c00115d1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00115d6:	76 19                	jbe    c00115f1 <sysCallTell(regs*)+0x30>
c00115d8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00115db:	31 d2                	xor    edx,edx
c00115dd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00115e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115ea:	31 c0                	xor    eax,eax
c00115ec:	83 c4 08             	add    esp,0x8
c00115ef:	5b                   	pop    ebx
c00115f0:	c3                   	ret    
c00115f1:	83 ec 0c             	sub    esp,0xc
c00115f4:	50                   	push   eax
c00115f5:	e8 05 82 ff ff       	call   c00097ff <getFromFileDescriptor(int)>
c00115fa:	5a                   	pop    edx
c00115fb:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00115fe:	59                   	pop    ecx
c00115ff:	53                   	push   ebx
c0011600:	50                   	push   eax
c0011601:	e8 ec 9c ff ff       	call   c000b2f2 <File::tell(unsigned long long*)>
c0011606:	83 c4 10             	add    esp,0x10
c0011609:	85 c0                	test   eax,eax
c001160b:	0f 95 c0             	setne  al
c001160e:	31 d2                	xor    edx,edx
c0011610:	25 ff 00 00 00       	and    eax,0xff
c0011615:	f7 d8                	neg    eax
c0011617:	83 d2 00             	adc    edx,0x0
c001161a:	83 c4 08             	add    esp,0x8
c001161d:	f7 da                	neg    edx
c001161f:	5b                   	pop    ebx
c0011620:	c3                   	ret    
c0011621:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011626:	ba ff ff ff ff       	mov    edx,0xffffffff
c001162b:	83 c4 08             	add    esp,0x8
c001162e:	5b                   	pop    ebx
c001162f:	c3                   	ret    

c0011630 <sysCallSize(regs*)>:
c0011630:	53                   	push   ebx
c0011631:	83 ec 18             	sub    esp,0x18
c0011634:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011638:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001163b:	83 f8 02             	cmp    eax,0x2
c001163e:	76 56                	jbe    c0011696 <sysCallSize(regs*)+0x66>
c0011640:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011645:	76 19                	jbe    c0011660 <sysCallSize(regs*)+0x30>
c0011647:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001164a:	31 d2                	xor    edx,edx
c001164c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011652:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011659:	31 c0                	xor    eax,eax
c001165b:	83 c4 18             	add    esp,0x18
c001165e:	5b                   	pop    ebx
c001165f:	c3                   	ret    
c0011660:	83 ec 0c             	sub    esp,0xc
c0011663:	50                   	push   eax
c0011664:	e8 96 81 ff ff       	call   c00097ff <getFromFileDescriptor(int)>
c0011669:	83 c4 0c             	add    esp,0xc
c001166c:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011670:	52                   	push   edx
c0011671:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011674:	52                   	push   edx
c0011675:	50                   	push   eax
c0011676:	e8 0f 9e ff ff       	call   c000b48a <File::stat(unsigned long long*, bool*)>
c001167b:	83 c4 10             	add    esp,0x10
c001167e:	85 c0                	test   eax,eax
c0011680:	0f 95 c0             	setne  al
c0011683:	31 d2                	xor    edx,edx
c0011685:	25 ff 00 00 00       	and    eax,0xff
c001168a:	f7 d8                	neg    eax
c001168c:	83 d2 00             	adc    edx,0x0
c001168f:	83 c4 18             	add    esp,0x18
c0011692:	f7 da                	neg    edx
c0011694:	5b                   	pop    ebx
c0011695:	c3                   	ret    
c0011696:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001169b:	ba ff ff ff ff       	mov    edx,0xffffffff
c00116a0:	83 c4 18             	add    esp,0x18
c00116a3:	5b                   	pop    ebx
c00116a4:	c3                   	ret    

c00116a5 <sysCallSizeFromFilename(regs*)>:
c00116a5:	57                   	push   edi
c00116a6:	56                   	push   esi
c00116a7:	53                   	push   ebx
c00116a8:	83 ec 20             	sub    esp,0x20
c00116ab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00116af:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00116b2:	83 fb 02             	cmp    ebx,0x2
c00116b5:	0f 86 8c 00 00 00    	jbe    c0011747 <sysCallSizeFromFilename(regs*)+0xa2>
c00116bb:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00116c1:	76 1b                	jbe    c00116de <sysCallSizeFromFilename(regs*)+0x39>
c00116c3:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00116c6:	31 d2                	xor    edx,edx
c00116c8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00116ce:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00116d5:	83 c4 20             	add    esp,0x20
c00116d8:	31 c0                	xor    eax,eax
c00116da:	5b                   	pop    ebx
c00116db:	5e                   	pop    esi
c00116dc:	5f                   	pop    edi
c00116dd:	c3                   	ret    
c00116de:	83 ec 0c             	sub    esp,0xc
c00116e1:	68 14 01 00 00       	push   0x114
c00116e6:	e8 2e 67 ff ff       	call   c0007e19 <malloc>
c00116eb:	83 c4 0c             	add    esp,0xc
c00116ee:	89 c7                	mov    edi,eax
c00116f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116f5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00116f8:	50                   	push   eax
c00116f9:	53                   	push   ebx
c00116fa:	57                   	push   edi
c00116fb:	e8 1e 9a ff ff       	call   c000b11e <File::File(char const*, Process*)>
c0011700:	83 c4 0c             	add    esp,0xc
c0011703:	8d 44 24 23          	lea    eax,[esp+0x23]
c0011707:	50                   	push   eax
c0011708:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c001170b:	52                   	push   edx
c001170c:	57                   	push   edi
c001170d:	e8 78 9d ff ff       	call   c000b48a <File::stat(unsigned long long*, bool*)>
c0011712:	83 c4 10             	add    esp,0x10
c0011715:	85 ff                	test   edi,edi
c0011717:	74 14                	je     c001172d <sysCallSizeFromFilename(regs*)+0x88>
c0011719:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001171d:	8b 17                	mov    edx,DWORD PTR [edi]
c001171f:	83 ec 0c             	sub    esp,0xc
c0011722:	57                   	push   edi
c0011723:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011726:	83 c4 10             	add    esp,0x10
c0011729:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001172d:	85 c0                	test   eax,eax
c001172f:	0f 95 c0             	setne  al
c0011732:	31 d2                	xor    edx,edx
c0011734:	25 ff 00 00 00       	and    eax,0xff
c0011739:	f7 d8                	neg    eax
c001173b:	83 d2 00             	adc    edx,0x0
c001173e:	83 c4 20             	add    esp,0x20
c0011741:	f7 da                	neg    edx
c0011743:	5b                   	pop    ebx
c0011744:	5e                   	pop    esi
c0011745:	5f                   	pop    edi
c0011746:	c3                   	ret    
c0011747:	83 c4 20             	add    esp,0x20
c001174a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001174f:	5b                   	pop    ebx
c0011750:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011755:	5e                   	pop    esi
c0011756:	5f                   	pop    edi
c0011757:	c3                   	ret    

c0011758 <sysCallClose(regs*)>:
c0011758:	53                   	push   ebx
c0011759:	83 ec 08             	sub    esp,0x8
c001175c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011760:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011763:	83 f8 02             	cmp    eax,0x2
c0011766:	76 41                	jbe    c00117a9 <sysCallClose(regs*)+0x51>
c0011768:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001176e:	83 fa 01             	cmp    edx,0x1
c0011771:	76 2d                	jbe    c00117a0 <sysCallClose(regs*)+0x48>
c0011773:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011778:	77 2f                	ja     c00117a9 <sysCallClose(regs*)+0x51>
c001177a:	83 ec 0c             	sub    esp,0xc
c001177d:	50                   	push   eax
c001177e:	e8 7c 80 ff ff       	call   c00097ff <getFromFileDescriptor(int)>
c0011783:	89 c3                	mov    ebx,eax
c0011785:	89 04 24             	mov    DWORD PTR [esp],eax
c0011788:	e8 af 9a ff ff       	call   c000b23c <File::close()>
c001178d:	83 c4 10             	add    esp,0x10
c0011790:	85 db                	test   ebx,ebx
c0011792:	74 0c                	je     c00117a0 <sysCallClose(regs*)+0x48>
c0011794:	83 ec 0c             	sub    esp,0xc
c0011797:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011799:	53                   	push   ebx
c001179a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001179d:	83 c4 10             	add    esp,0x10
c00117a0:	31 c0                	xor    eax,eax
c00117a2:	31 d2                	xor    edx,edx
c00117a4:	83 c4 08             	add    esp,0x8
c00117a7:	5b                   	pop    ebx
c00117a8:	c3                   	ret    
c00117a9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00117ae:	ba ff ff ff ff       	mov    edx,0xffffffff
c00117b3:	83 c4 08             	add    esp,0x8
c00117b6:	5b                   	pop    ebx
c00117b7:	c3                   	ret    

c00117b8 <sysCallOpenDir(regs*)>:
c00117b8:	56                   	push   esi
c00117b9:	53                   	push   ebx
c00117ba:	50                   	push   eax
c00117bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00117bf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00117c2:	85 c0                	test   eax,eax
c00117c4:	74 5b                	je     c0011821 <sysCallOpenDir(regs*)+0x69>
c00117c6:	83 ec 0c             	sub    esp,0xc
c00117c9:	68 14 01 00 00       	push   0x114
c00117ce:	e8 46 66 ff ff       	call   c0007e19 <malloc>
c00117d3:	83 c4 0c             	add    esp,0xc
c00117d6:	89 c6                	mov    esi,eax
c00117d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117dd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00117e0:	50                   	push   eax
c00117e1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00117e4:	50                   	push   eax
c00117e5:	56                   	push   esi
c00117e6:	e8 5d 9e ff ff       	call   c000b648 <Directory::Directory(char const*, Process*)>
c00117eb:	83 c4 10             	add    esp,0x10
c00117ee:	85 f6                	test   esi,esi
c00117f0:	74 2f                	je     c0011821 <sysCallOpenDir(regs*)+0x69>
c00117f2:	83 ec 0c             	sub    esp,0xc
c00117f5:	56                   	push   esi
c00117f6:	e8 0d 9f ff ff       	call   c000b708 <Directory::open()>
c00117fb:	83 c4 10             	add    esp,0x10
c00117fe:	85 c0                	test   eax,eax
c0011800:	75 1f                	jne    c0011821 <sysCallOpenDir(regs*)+0x69>
c0011802:	83 ec 0c             	sub    esp,0xc
c0011805:	56                   	push   esi
c0011806:	e8 ff 7c ff ff       	call   c000950a <UnixFile::getFileDescriptor()>
c001180b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001180e:	83 c4 10             	add    esp,0x10
c0011811:	89 02                	mov    DWORD PTR [edx],eax
c0011813:	c1 f8 1f             	sar    eax,0x1f
c0011816:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011819:	31 c0                	xor    eax,eax
c001181b:	59                   	pop    ecx
c001181c:	31 d2                	xor    edx,edx
c001181e:	5b                   	pop    ebx
c001181f:	5e                   	pop    esi
c0011820:	c3                   	ret    
c0011821:	59                   	pop    ecx
c0011822:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011827:	ba ff ff ff ff       	mov    edx,0xffffffff
c001182c:	5b                   	pop    ebx
c001182d:	5e                   	pop    esi
c001182e:	c3                   	ret    

c001182f <sysCallCloseDir(regs*)>:
c001182f:	53                   	push   ebx
c0011830:	83 ec 08             	sub    esp,0x8
c0011833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011837:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001183a:	8d 50 fd             	lea    edx,[eax-0x3]
c001183d:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011843:	77 2f                	ja     c0011874 <sysCallCloseDir(regs*)+0x45>
c0011845:	83 ec 0c             	sub    esp,0xc
c0011848:	50                   	push   eax
c0011849:	e8 b1 7f ff ff       	call   c00097ff <getFromFileDescriptor(int)>
c001184e:	89 c3                	mov    ebx,eax
c0011850:	89 04 24             	mov    DWORD PTR [esp],eax
c0011853:	e8 0c 9f ff ff       	call   c000b764 <Directory::close()>
c0011858:	83 c4 10             	add    esp,0x10
c001185b:	85 db                	test   ebx,ebx
c001185d:	74 0c                	je     c001186b <sysCallCloseDir(regs*)+0x3c>
c001185f:	83 ec 0c             	sub    esp,0xc
c0011862:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011864:	53                   	push   ebx
c0011865:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011868:	83 c4 10             	add    esp,0x10
c001186b:	31 c0                	xor    eax,eax
c001186d:	31 d2                	xor    edx,edx
c001186f:	83 c4 08             	add    esp,0x8
c0011872:	5b                   	pop    ebx
c0011873:	c3                   	ret    
c0011874:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011879:	ba ff ff ff ff       	mov    edx,0xffffffff
c001187e:	83 c4 08             	add    esp,0x8
c0011881:	5b                   	pop    ebx
c0011882:	c3                   	ret    

c0011883 <sysCallMakeDir(regs*)>:
c0011883:	56                   	push   esi
c0011884:	53                   	push   ebx
c0011885:	83 ec 10             	sub    esp,0x10
c0011888:	68 14 01 00 00       	push   0x114
c001188d:	e8 87 65 ff ff       	call   c0007e19 <malloc>
c0011892:	83 c4 0c             	add    esp,0xc
c0011895:	89 c3                	mov    ebx,eax
c0011897:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001189c:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c001189f:	56                   	push   esi
c00118a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00118a4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00118a7:	50                   	push   eax
c00118a8:	53                   	push   ebx
c00118a9:	e8 9a 9d ff ff       	call   c000b648 <Directory::Directory(char const*, Process*)>
c00118ae:	83 c4 10             	add    esp,0x10
c00118b1:	85 db                	test   ebx,ebx
c00118b3:	74 32                	je     c00118e7 <sysCallMakeDir(regs*)+0x64>
c00118b5:	83 ec 0c             	sub    esp,0xc
c00118b8:	53                   	push   ebx
c00118b9:	e8 2a a0 ff ff       	call   c000b8e8 <Directory::create()>
c00118be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118c1:	89 c6                	mov    esi,eax
c00118c3:	e8 9c 9e ff ff       	call   c000b764 <Directory::close()>
c00118c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118cd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118d0:	83 c4 10             	add    esp,0x10
c00118d3:	31 c0                	xor    eax,eax
c00118d5:	59                   	pop    ecx
c00118d6:	85 f6                	test   esi,esi
c00118d8:	5b                   	pop    ebx
c00118d9:	0f 95 c0             	setne  al
c00118dc:	5e                   	pop    esi
c00118dd:	31 d2                	xor    edx,edx
c00118df:	f7 d8                	neg    eax
c00118e1:	83 d2 00             	adc    edx,0x0
c00118e4:	f7 da                	neg    edx
c00118e6:	c3                   	ret    
c00118e7:	59                   	pop    ecx
c00118e8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00118ed:	ba ff ff ff ff       	mov    edx,0xffffffff
c00118f2:	5b                   	pop    ebx
c00118f3:	5e                   	pop    esi
c00118f4:	c3                   	ret    

c00118f5 <sysCallWait(regs*)>:
c00118f5:	83 ec 10             	sub    esp,0x10
c00118f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00118fc:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00118ff:	52                   	push   edx
c0011900:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011903:	51                   	push   ecx
c0011904:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011907:	50                   	push   eax
c0011908:	e8 6b 23 00 00       	call   c0013c78 <waitTask(int, int*, int)>
c001190d:	83 c4 1c             	add    esp,0x1c
c0011910:	99                   	cdq    
c0011911:	c3                   	ret    

c0011912 <sysCallNotImpl(regs*)>:
c0011912:	83 ec 18             	sub    esp,0x18
c0011915:	68 69 e8 01 c0       	push   0xc001e869
c001191a:	e8 d8 ed ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c001191f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011924:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011929:	83 c4 1c             	add    esp,0x1c
c001192c:	c3                   	ret    

c001192d <sysPanic(regs*)>:
c001192d:	83 ec 18             	sub    esp,0x18
c0011930:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011934:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011937:	50                   	push   eax
c0011938:	e8 ba ed ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c001193d:	b8 01 00 00 00       	mov    eax,0x1
c0011942:	31 d2                	xor    edx,edx
c0011944:	83 c4 1c             	add    esp,0x1c
c0011947:	c3                   	ret    

c0011948 <sysCallRmdir(regs*)>:
c0011948:	56                   	push   esi
c0011949:	53                   	push   ebx
c001194a:	83 ec 20             	sub    esp,0x20
c001194d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011951:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011954:	68 14 01 00 00       	push   0x114
c0011959:	e8 bb 64 ff ff       	call   c0007e19 <malloc>
c001195e:	83 c4 0c             	add    esp,0xc
c0011961:	89 c3                	mov    ebx,eax
c0011963:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011968:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001196b:	50                   	push   eax
c001196c:	56                   	push   esi
c001196d:	53                   	push   ebx
c001196e:	e8 ab 97 ff ff       	call   c000b11e <File::File(char const*, Process*)>
c0011973:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011976:	e8 db 99 ff ff       	call   c000b356 <File::unlink()>
c001197b:	83 c4 10             	add    esp,0x10
c001197e:	85 db                	test   ebx,ebx
c0011980:	74 14                	je     c0011996 <sysCallRmdir(regs*)+0x4e>
c0011982:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011986:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011988:	83 ec 0c             	sub    esp,0xc
c001198b:	53                   	push   ebx
c001198c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001198f:	83 c4 10             	add    esp,0x10
c0011992:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011996:	85 c0                	test   eax,eax
c0011998:	0f 95 c0             	setne  al
c001199b:	31 d2                	xor    edx,edx
c001199d:	25 ff 00 00 00       	and    eax,0xff
c00119a2:	f7 d8                	neg    eax
c00119a4:	83 d2 00             	adc    edx,0x0
c00119a7:	83 c4 14             	add    esp,0x14
c00119aa:	f7 da                	neg    edx
c00119ac:	5b                   	pop    ebx
c00119ad:	5e                   	pop    esi
c00119ae:	c3                   	ret    

c00119af <sysCallUnlink(regs*)>:
c00119af:	56                   	push   esi
c00119b0:	53                   	push   ebx
c00119b1:	83 ec 20             	sub    esp,0x20
c00119b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00119b8:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00119bb:	68 14 01 00 00       	push   0x114
c00119c0:	e8 54 64 ff ff       	call   c0007e19 <malloc>
c00119c5:	83 c4 0c             	add    esp,0xc
c00119c8:	89 c3                	mov    ebx,eax
c00119ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119cf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119d2:	50                   	push   eax
c00119d3:	56                   	push   esi
c00119d4:	53                   	push   ebx
c00119d5:	e8 44 97 ff ff       	call   c000b11e <File::File(char const*, Process*)>
c00119da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00119dd:	e8 74 99 ff ff       	call   c000b356 <File::unlink()>
c00119e2:	83 c4 10             	add    esp,0x10
c00119e5:	85 db                	test   ebx,ebx
c00119e7:	74 14                	je     c00119fd <sysCallUnlink(regs*)+0x4e>
c00119e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00119ed:	8b 13                	mov    edx,DWORD PTR [ebx]
c00119ef:	83 ec 0c             	sub    esp,0xc
c00119f2:	53                   	push   ebx
c00119f3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00119f6:	83 c4 10             	add    esp,0x10
c00119f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119fd:	85 c0                	test   eax,eax
c00119ff:	0f 95 c0             	setne  al
c0011a02:	31 d2                	xor    edx,edx
c0011a04:	25 ff 00 00 00       	and    eax,0xff
c0011a09:	f7 d8                	neg    eax
c0011a0b:	83 d2 00             	adc    edx,0x0
c0011a0e:	83 c4 14             	add    esp,0x14
c0011a11:	f7 da                	neg    edx
c0011a13:	5b                   	pop    ebx
c0011a14:	5e                   	pop    esi
c0011a15:	c3                   	ret    

c0011a16 <sysCallGetArgv(regs*)>:
c0011a16:	83 ec 0c             	sub    esp,0xc
c0011a19:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011a1d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011a20:	85 c0                	test   eax,eax
c0011a22:	78 2c                	js     c0011a50 <sysCallGetArgv(regs*)+0x3a>
c0011a24:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011a2a:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011a2d:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0011a33:	7d 1b                	jge    c0011a50 <sysCallGetArgv(regs*)+0x3a>
c0011a35:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0011a3c:	85 c0                	test   eax,eax
c0011a3e:	74 18                	je     c0011a58 <sysCallGetArgv(regs*)+0x42>
c0011a40:	83 ec 08             	sub    esp,0x8
c0011a43:	50                   	push   eax
c0011a44:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011a47:	50                   	push   eax
c0011a48:	e8 d3 eb fe ff       	call   c0000620 <strcpy>
c0011a4d:	83 c4 10             	add    esp,0x10
c0011a50:	31 c0                	xor    eax,eax
c0011a52:	31 d2                	xor    edx,edx
c0011a54:	83 c4 0c             	add    esp,0xc
c0011a57:	c3                   	ret    
c0011a58:	b8 01 00 00 00       	mov    eax,0x1
c0011a5d:	31 d2                	xor    edx,edx
c0011a5f:	83 c4 0c             	add    esp,0xc
c0011a62:	c3                   	ret    

c0011a63 <sysCallUSleep(regs*)>:
c0011a63:	83 ec 1c             	sub    esp,0x1c
c0011a66:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011a6a:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011a6d:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011a70:	6a 00                	push   0x0
c0011a72:	6a 64                	push   0x64
c0011a74:	52                   	push   edx
c0011a75:	50                   	push   eax
c0011a76:	e8 f5 a6 00 00       	call   c001c170 <__udivdi3>
c0011a7b:	83 c4 14             	add    esp,0x14
c0011a7e:	50                   	push   eax
c0011a7f:	e8 c8 22 00 00       	call   c0013d4c <milliTenthSleep(unsigned int)>
c0011a84:	31 c0                	xor    eax,eax
c0011a86:	31 d2                	xor    edx,edx
c0011a88:	83 c4 1c             	add    esp,0x1c
c0011a8b:	c3                   	ret    

c0011a8c <sysCallSpawn(regs*)>:
c0011a8c:	56                   	push   esi
c0011a8d:	53                   	push   ebx
c0011a8e:	50                   	push   eax
c0011a8f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a93:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a96:	85 c0                	test   eax,eax
c0011a98:	75 08                	jne    c0011aa2 <sysCallSpawn(regs*)+0x16>
c0011a9a:	59                   	pop    ecx
c0011a9b:	31 c0                	xor    eax,eax
c0011a9d:	31 d2                	xor    edx,edx
c0011a9f:	5b                   	pop    ebx
c0011aa0:	5e                   	pop    esi
c0011aa1:	c3                   	ret    
c0011aa2:	83 ec 0c             	sub    esp,0xc
c0011aa5:	68 1f 07 00 00       	push   0x71f
c0011aaa:	e8 6a 63 ff ff       	call   c0007e19 <malloc>
c0011aaf:	83 c4 10             	add    esp,0x10
c0011ab2:	89 c6                	mov    esi,eax
c0011ab4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011ab7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011aba:	85 c0                	test   eax,eax
c0011abc:	75 33                	jne    c0011af1 <sysCallSpawn(regs*)+0x65>
c0011abe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ac3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ac6:	52                   	push   edx
c0011ac7:	50                   	push   eax
c0011ac8:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0011acb:	53                   	push   ebx
c0011acc:	56                   	push   esi
c0011acd:	e8 5e 19 00 00       	call   c0013430 <Process::Process(char const*, Process*, char**)>
c0011ad2:	83 c4 10             	add    esp,0x10
c0011ad5:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011adc:	75 bc                	jne    c0011a9a <sysCallSpawn(regs*)+0xe>
c0011ade:	83 ec 0c             	sub    esp,0xc
c0011ae1:	56                   	push   esi
c0011ae2:	e8 3d 1e 00 00       	call   c0013924 <Process::createUserThread()>
c0011ae7:	8b 06                	mov    eax,DWORD PTR [esi]
c0011ae9:	83 c4 10             	add    esp,0x10
c0011aec:	99                   	cdq    
c0011aed:	59                   	pop    ecx
c0011aee:	5b                   	pop    ebx
c0011aef:	5e                   	pop    esi
c0011af0:	c3                   	ret    
c0011af1:	31 c0                	xor    eax,eax
c0011af3:	eb d1                	jmp    c0011ac6 <sysCallSpawn(regs*)+0x3a>

c0011af5 <sysCallGetEnv(regs*)>:
c0011af5:	57                   	push   edi
c0011af6:	56                   	push   esi
c0011af7:	53                   	push   ebx
c0011af8:	83 ec 1c             	sub    esp,0x1c
c0011afb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011aff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b04:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011b07:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011b0a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b0d:	50                   	push   eax
c0011b0e:	e8 30 eb ff ff       	call   c0010643 <Krnl::getProcessTotalEnvCount(Process*)>
c0011b13:	83 c4 10             	add    esp,0x10
c0011b16:	39 c7                	cmp    edi,eax
c0011b18:	7c 14                	jl     c0011b2e <sysCallGetEnv(regs*)+0x39>
c0011b1a:	85 f6                	test   esi,esi
c0011b1c:	75 0b                	jne    c0011b29 <sysCallGetEnv(regs*)+0x34>
c0011b1e:	83 c4 10             	add    esp,0x10
c0011b21:	31 c0                	xor    eax,eax
c0011b23:	5b                   	pop    ebx
c0011b24:	31 d2                	xor    edx,edx
c0011b26:	5e                   	pop    esi
c0011b27:	5f                   	pop    edi
c0011b28:	c3                   	ret    
c0011b29:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011b2c:	eb f0                	jmp    c0011b1e <sysCallGetEnv(regs*)+0x29>
c0011b2e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011b32:	52                   	push   edx
c0011b33:	57                   	push   edi
c0011b34:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011b3a:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0011b3d:	51                   	push   ecx
c0011b3e:	50                   	push   eax
c0011b3f:	e8 1f eb ff ff       	call   c0010663 <Krnl::getProcessEnvPair(Process*, int)>
c0011b44:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011b47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011b4b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011b4f:	83 c4 0c             	add    esp,0xc
c0011b52:	85 db                	test   ebx,ebx
c0011b54:	75 23                	jne    c0011b79 <sysCallGetEnv(regs*)+0x84>
c0011b56:	83 ec 0c             	sub    esp,0xc
c0011b59:	50                   	push   eax
c0011b5a:	e8 01 ea fe ff       	call   c0000560 <strlen>
c0011b5f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011b62:	89 c3                	mov    ebx,eax
c0011b64:	e8 f7 e9 fe ff       	call   c0000560 <strlen>
c0011b69:	31 d2                	xor    edx,edx
c0011b6b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011b6f:	83 c4 10             	add    esp,0x10
c0011b72:	83 c4 10             	add    esp,0x10
c0011b75:	5b                   	pop    ebx
c0011b76:	5e                   	pop    esi
c0011b77:	5f                   	pop    edi
c0011b78:	c3                   	ret    
c0011b79:	83 ec 08             	sub    esp,0x8
c0011b7c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011b7f:	50                   	push   eax
c0011b80:	56                   	push   esi
c0011b81:	e8 9a ea fe ff       	call   c0000620 <strcpy>
c0011b86:	58                   	pop    eax
c0011b87:	5a                   	pop    edx
c0011b88:	68 83 e8 01 c0       	push   0xc001e883
c0011b8d:	56                   	push   esi
c0011b8e:	e8 4d ec fe ff       	call   c00007e0 <strcat>
c0011b93:	59                   	pop    ecx
c0011b94:	5b                   	pop    ebx
c0011b95:	57                   	push   edi
c0011b96:	56                   	push   esi
c0011b97:	e8 44 ec fe ff       	call   c00007e0 <strcat>
c0011b9c:	83 c4 10             	add    esp,0x10
c0011b9f:	e9 7a ff ff ff       	jmp    c0011b1e <sysCallGetEnv(regs*)+0x29>

c0011ba4 <sysSetFatAttrib(regs*)>:
c0011ba4:	57                   	push   edi
c0011ba5:	56                   	push   esi
c0011ba6:	53                   	push   ebx
c0011ba7:	83 ec 1c             	sub    esp,0x1c
c0011baa:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011bae:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011bb1:	68 14 01 00 00       	push   0x114
c0011bb6:	e8 5e 62 ff ff       	call   c0007e19 <malloc>
c0011bbb:	83 c4 0c             	add    esp,0xc
c0011bbe:	89 c3                	mov    ebx,eax
c0011bc0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bc5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bc8:	50                   	push   eax
c0011bc9:	57                   	push   edi
c0011bca:	53                   	push   ebx
c0011bcb:	e8 4e 95 ff ff       	call   c000b11e <File::File(char const*, Process*)>
c0011bd0:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011bd3:	83 c4 0c             	add    esp,0xc
c0011bd6:	0f b6 d4             	movzx  edx,ah
c0011bd9:	25 ff 00 00 00       	and    eax,0xff
c0011bde:	52                   	push   edx
c0011bdf:	50                   	push   eax
c0011be0:	53                   	push   ebx
c0011be1:	e8 0a 98 ff ff       	call   c000b3f0 <File::chfatattr(unsigned char, unsigned char)>
c0011be6:	83 c4 10             	add    esp,0x10
c0011be9:	85 db                	test   ebx,ebx
c0011beb:	74 14                	je     c0011c01 <sysSetFatAttrib(regs*)+0x5d>
c0011bed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011bf1:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011bf3:	83 ec 0c             	sub    esp,0xc
c0011bf6:	53                   	push   ebx
c0011bf7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011bfa:	83 c4 10             	add    esp,0x10
c0011bfd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c01:	85 c0                	test   eax,eax
c0011c03:	0f 95 c0             	setne  al
c0011c06:	31 d2                	xor    edx,edx
c0011c08:	25 ff 00 00 00       	and    eax,0xff
c0011c0d:	f7 d8                	neg    eax
c0011c0f:	83 d2 00             	adc    edx,0x0
c0011c12:	83 c4 10             	add    esp,0x10
c0011c15:	f7 da                	neg    edx
c0011c17:	5b                   	pop    ebx
c0011c18:	5e                   	pop    esi
c0011c19:	5f                   	pop    edi
c0011c1a:	c3                   	ret    

c0011c1b <sysPipe(regs*)>:
c0011c1b:	57                   	push   edi
c0011c1c:	56                   	push   esi
c0011c1d:	53                   	push   ebx
c0011c1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c22:	83 ec 0c             	sub    esp,0xc
c0011c25:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011c28:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011c2b:	6a 20                	push   0x20
c0011c2d:	e8 e7 61 ff ff       	call   c0007e19 <malloc>
c0011c32:	89 c3                	mov    ebx,eax
c0011c34:	58                   	pop    eax
c0011c35:	5a                   	pop    edx
c0011c36:	68 00 50 00 00       	push   0x5000
c0011c3b:	53                   	push   ebx
c0011c3c:	e8 cf 6b ff ff       	call   c0008810 <Pipe::Pipe(int)>
c0011c41:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011c44:	e8 c1 78 ff ff       	call   c000950a <UnixFile::getFileDescriptor()>
c0011c49:	89 07                	mov    DWORD PTR [edi],eax
c0011c4b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011c4e:	e8 b7 78 ff ff       	call   c000950a <UnixFile::getFileDescriptor()>
c0011c53:	83 c4 10             	add    esp,0x10
c0011c56:	89 06                	mov    DWORD PTR [esi],eax
c0011c58:	31 d2                	xor    edx,edx
c0011c5a:	5b                   	pop    ebx
c0011c5b:	31 c0                	xor    eax,eax
c0011c5d:	5e                   	pop    esi
c0011c5e:	5f                   	pop    edi
c0011c5f:	c3                   	ret    

c0011c60 <sysGetUnixTime(regs*)>:
c0011c60:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c0011c65:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011c6b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011c6f:	e9 ba 9e ff ff       	jmp    c000bb2e <Clock::timeInSecondsLocal()>

c0011c74 <string_ends_with(char const*, char const*)>:
c0011c74:	57                   	push   edi
c0011c75:	56                   	push   esi
c0011c76:	53                   	push   ebx
c0011c77:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011c7b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011c7f:	83 ec 0c             	sub    esp,0xc
c0011c82:	53                   	push   ebx
c0011c83:	e8 d8 e8 fe ff       	call   c0000560 <strlen>
c0011c88:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011c8b:	89 c6                	mov    esi,eax
c0011c8d:	e8 ce e8 fe ff       	call   c0000560 <strlen>
c0011c92:	83 c4 10             	add    esp,0x10
c0011c95:	39 c6                	cmp    esi,eax
c0011c97:	7d 06                	jge    c0011c9f <string_ends_with(char const*, char const*)+0x2b>
c0011c99:	5b                   	pop    ebx
c0011c9a:	31 c0                	xor    eax,eax
c0011c9c:	5e                   	pop    esi
c0011c9d:	5f                   	pop    edi
c0011c9e:	c3                   	ret    
c0011c9f:	83 ec 08             	sub    esp,0x8
c0011ca2:	29 c6                	sub    esi,eax
c0011ca4:	57                   	push   edi
c0011ca5:	01 f3                	add    ebx,esi
c0011ca7:	53                   	push   ebx
c0011ca8:	e8 53 ea fe ff       	call   c0000700 <strcmp>
c0011cad:	83 c4 10             	add    esp,0x10
c0011cb0:	85 c0                	test   eax,eax
c0011cb2:	5b                   	pop    ebx
c0011cb3:	0f 94 c0             	sete   al
c0011cb6:	5e                   	pop    esi
c0011cb7:	25 ff 00 00 00       	and    eax,0xff
c0011cbc:	5f                   	pop    edi
c0011cbd:	c3                   	ret    

c0011cbe <sysCallOpen(regs*)>:
c0011cbe:	56                   	push   esi
c0011cbf:	53                   	push   ebx
c0011cc0:	81 ec 04 01 00 00    	sub    esp,0x104
c0011cc6:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011ccd:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011cd0:	85 c9                	test   ecx,ecx
c0011cd2:	0f 84 b9 01 00 00    	je     c0011e91 <sysCallOpen(regs*)+0x1d3>
c0011cd8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011cdb:	85 c0                	test   eax,eax
c0011cdd:	0f 84 ae 01 00 00    	je     c0011e91 <sysCallOpen(regs*)+0x1d3>
c0011ce3:	52                   	push   edx
c0011ce4:	68 85 e8 01 c0       	push   0xc001e885
c0011ce9:	50                   	push   eax
c0011cea:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011cee:	56                   	push   esi
c0011cef:	e8 80 92 ff ff       	call   c000af74 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011cf4:	89 34 24             	mov    DWORD PTR [esp],esi
c0011cf7:	e8 64 e8 fe ff       	call   c0000560 <strlen>
c0011cfc:	83 c4 10             	add    esp,0x10
c0011cff:	48                   	dec    eax
c0011d00:	74 1d                	je     c0011d1f <sysCallOpen(regs*)+0x61>
c0011d02:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0011d05:	eb 0f                	jmp    c0011d16 <sysCallOpen(regs*)+0x58>
c0011d07:	80 fa 3a             	cmp    dl,0x3a
c0011d0a:	74 0f                	je     c0011d1b <sysCallOpen(regs*)+0x5d>
c0011d0c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011d10:	48                   	dec    eax
c0011d11:	74 0c                	je     c0011d1f <sysCallOpen(regs*)+0x61>
c0011d13:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0011d16:	80 fa 2e             	cmp    dl,0x2e
c0011d19:	75 ec                	jne    c0011d07 <sysCallOpen(regs*)+0x49>
c0011d1b:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011d1f:	83 ec 08             	sub    esp,0x8
c0011d22:	68 89 e8 01 c0       	push   0xc001e889
c0011d27:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d2a:	50                   	push   eax
c0011d2b:	e8 44 ff ff ff       	call   c0011c74 <string_ends_with(char const*, char const*)>
c0011d30:	83 c4 10             	add    esp,0x10
c0011d33:	85 c0                	test   eax,eax
c0011d35:	74 1d                	je     c0011d54 <sysCallOpen(regs*)+0x96>
c0011d37:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d3a:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011d40:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d47:	81 c4 04 01 00 00    	add    esp,0x104
c0011d4d:	31 c0                	xor    eax,eax
c0011d4f:	31 d2                	xor    edx,edx
c0011d51:	5b                   	pop    ebx
c0011d52:	5e                   	pop    esi
c0011d53:	c3                   	ret    
c0011d54:	83 ec 08             	sub    esp,0x8
c0011d57:	68 8e e8 01 c0       	push   0xc001e88e
c0011d5c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d5f:	50                   	push   eax
c0011d60:	e8 0f ff ff ff       	call   c0011c74 <string_ends_with(char const*, char const*)>
c0011d65:	83 c4 10             	add    esp,0x10
c0011d68:	85 c0                	test   eax,eax
c0011d6a:	75 cb                	jne    c0011d37 <sysCallOpen(regs*)+0x79>
c0011d6c:	83 ec 08             	sub    esp,0x8
c0011d6f:	68 8a e8 01 c0       	push   0xc001e88a
c0011d74:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d77:	50                   	push   eax
c0011d78:	e8 83 e9 fe ff       	call   c0000700 <strcmp>
c0011d7d:	83 c4 10             	add    esp,0x10
c0011d80:	85 c0                	test   eax,eax
c0011d82:	74 b3                	je     c0011d37 <sysCallOpen(regs*)+0x79>
c0011d84:	83 ec 08             	sub    esp,0x8
c0011d87:	68 89 e8 01 c0       	push   0xc001e889
c0011d8c:	56                   	push   esi
c0011d8d:	e8 e2 fe ff ff       	call   c0011c74 <string_ends_with(char const*, char const*)>
c0011d92:	83 c4 10             	add    esp,0x10
c0011d95:	85 c0                	test   eax,eax
c0011d97:	75 9e                	jne    c0011d37 <sysCallOpen(regs*)+0x79>
c0011d99:	83 ec 08             	sub    esp,0x8
c0011d9c:	68 93 e8 01 c0       	push   0xc001e893
c0011da1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011da4:	50                   	push   eax
c0011da5:	e8 ca fe ff ff       	call   c0011c74 <string_ends_with(char const*, char const*)>
c0011daa:	83 c4 10             	add    esp,0x10
c0011dad:	85 c0                	test   eax,eax
c0011daf:	0f 85 ef 00 00 00    	jne    c0011ea4 <sysCallOpen(regs*)+0x1e6>
c0011db5:	83 ec 08             	sub    esp,0x8
c0011db8:	68 98 e8 01 c0       	push   0xc001e898
c0011dbd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011dc0:	50                   	push   eax
c0011dc1:	e8 ae fe ff ff       	call   c0011c74 <string_ends_with(char const*, char const*)>
c0011dc6:	83 c4 10             	add    esp,0x10
c0011dc9:	85 c0                	test   eax,eax
c0011dcb:	0f 85 d3 00 00 00    	jne    c0011ea4 <sysCallOpen(regs*)+0x1e6>
c0011dd1:	83 ec 08             	sub    esp,0x8
c0011dd4:	68 94 e8 01 c0       	push   0xc001e894
c0011dd9:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011ddc:	51                   	push   ecx
c0011ddd:	e8 1e e9 fe ff       	call   c0000700 <strcmp>
c0011de2:	83 c4 10             	add    esp,0x10
c0011de5:	85 c0                	test   eax,eax
c0011de7:	0f 84 b7 00 00 00    	je     c0011ea4 <sysCallOpen(regs*)+0x1e6>
c0011ded:	83 ec 08             	sub    esp,0x8
c0011df0:	68 93 e8 01 c0       	push   0xc001e893
c0011df5:	56                   	push   esi
c0011df6:	e8 79 fe ff ff       	call   c0011c74 <string_ends_with(char const*, char const*)>
c0011dfb:	83 c4 10             	add    esp,0x10
c0011dfe:	85 c0                	test   eax,eax
c0011e00:	0f 85 9e 00 00 00    	jne    c0011ea4 <sysCallOpen(regs*)+0x1e6>
c0011e06:	83 ec 0c             	sub    esp,0xc
c0011e09:	68 14 01 00 00       	push   0x114
c0011e0e:	e8 06 60 ff ff       	call   c0007e19 <malloc>
c0011e13:	83 c4 0c             	add    esp,0xc
c0011e16:	89 c6                	mov    esi,eax
c0011e18:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e1d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e20:	50                   	push   eax
c0011e21:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011e24:	52                   	push   edx
c0011e25:	56                   	push   esi
c0011e26:	e8 f3 92 ff ff       	call   c000b11e <File::File(char const*, Process*)>
c0011e2b:	83 c4 10             	add    esp,0x10
c0011e2e:	85 f6                	test   esi,esi
c0011e30:	74 5f                	je     c0011e91 <sysCallOpen(regs*)+0x1d3>
c0011e32:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011e35:	89 d0                	mov    eax,edx
c0011e37:	25 ff 00 00 00       	and    eax,0xff
c0011e3c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011e3f:	89 d0                	mov    eax,edx
c0011e41:	83 e0 01             	and    eax,0x1
c0011e44:	f6 c2 02             	test   dl,0x2
c0011e47:	74 03                	je     c0011e4c <sysCallOpen(regs*)+0x18e>
c0011e49:	83 c8 02             	or     eax,0x2
c0011e4c:	f6 c2 04             	test   dl,0x4
c0011e4f:	74 03                	je     c0011e54 <sysCallOpen(regs*)+0x196>
c0011e51:	83 c8 04             	or     eax,0x4
c0011e54:	f6 c2 08             	test   dl,0x8
c0011e57:	74 03                	je     c0011e5c <sysCallOpen(regs*)+0x19e>
c0011e59:	83 c8 0a             	or     eax,0xa
c0011e5c:	83 e2 10             	and    edx,0x10
c0011e5f:	74 03                	je     c0011e64 <sysCallOpen(regs*)+0x1a6>
c0011e61:	83 c8 12             	or     eax,0x12
c0011e64:	83 ec 08             	sub    esp,0x8
c0011e67:	50                   	push   eax
c0011e68:	56                   	push   esi
c0011e69:	e8 70 93 ff ff       	call   c000b1de <File::open(FileOpenMode)>
c0011e6e:	83 c4 10             	add    esp,0x10
c0011e71:	85 c0                	test   eax,eax
c0011e73:	75 1c                	jne    c0011e91 <sysCallOpen(regs*)+0x1d3>
c0011e75:	83 ec 0c             	sub    esp,0xc
c0011e78:	56                   	push   esi
c0011e79:	e8 8c 76 ff ff       	call   c000950a <UnixFile::getFileDescriptor()>
c0011e7e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011e81:	83 c4 10             	add    esp,0x10
c0011e84:	89 02                	mov    DWORD PTR [edx],eax
c0011e86:	c1 f8 1f             	sar    eax,0x1f
c0011e89:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011e8c:	e9 b6 fe ff ff       	jmp    c0011d47 <sysCallOpen(regs*)+0x89>
c0011e91:	81 c4 04 01 00 00    	add    esp,0x104
c0011e97:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e9c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ea1:	5b                   	pop    ebx
c0011ea2:	5e                   	pop    esi
c0011ea3:	c3                   	ret    
c0011ea4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011ea7:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011ead:	e9 8e fe ff ff       	jmp    c0011d40 <sysCallOpen(regs*)+0x82>

c0011eb2 <Sys::loadSyscalls()>:
c0011eb2:	c7 05 00 34 02 c0 8e 12 01 c0 	mov    DWORD PTR ds:0xc0023400,0xc001128e
c0011ebc:	c7 05 04 34 02 c0 85 0e 01 c0 	mov    DWORD PTR ds:0xc0023404,0xc0010e85
c0011ec6:	c7 05 08 34 02 c0 74 10 01 c0 	mov    DWORD PTR ds:0xc0023408,0xc0011074
c0011ed0:	c7 05 0c 34 02 c0 c4 11 01 c0 	mov    DWORD PTR ds:0xc002340c,0xc00111c4
c0011eda:	c7 05 10 34 02 c0 0c 10 01 c0 	mov    DWORD PTR ds:0xc0023410,0xc001100c
c0011ee4:	c7 05 14 34 02 c0 bc 0e 01 c0 	mov    DWORD PTR ds:0xc0023414,0xc0010ebc
c0011eee:	c7 05 18 34 02 c0 9d 0e 01 c0 	mov    DWORD PTR ds:0xc0023418,0xc0010e9d
c0011ef8:	c7 05 1c 34 02 c0 c9 10 01 c0 	mov    DWORD PTR ds:0xc002341c,0xc00110c9
c0011f02:	c7 05 24 34 02 c0 58 17 01 c0 	mov    DWORD PTR ds:0xc0023424,0xc0011758
c0011f0c:	c7 05 20 34 02 c0 be 1c 01 c0 	mov    DWORD PTR ds:0xc0023420,0xc0011cbe
c0011f16:	c7 05 28 34 02 c0 b8 17 01 c0 	mov    DWORD PTR ds:0xc0023428,0xc00117b8
c0011f20:	c7 05 2c 34 02 c0 8c 14 01 c0 	mov    DWORD PTR ds:0xc002342c,0xc001148c
c0011f2a:	c7 05 30 34 02 c0 b3 12 01 c0 	mov    DWORD PTR ds:0xc0023430,0xc00112b3
c0011f34:	c7 05 34 34 02 c0 b8 12 01 c0 	mov    DWORD PTR ds:0xc0023434,0xc00112b8
c0011f3e:	c7 05 38 34 02 c0 83 18 01 c0 	mov    DWORD PTR ds:0xc0023438,0xc0011883
c0011f48:	c7 05 3c 34 02 c0 2f 18 01 c0 	mov    DWORD PTR ds:0xc002343c,0xc001182f
c0011f52:	c7 05 40 34 02 c0 68 15 01 c0 	mov    DWORD PTR ds:0xc0023440,0xc0011568
c0011f5c:	c7 05 44 34 02 c0 c1 15 01 c0 	mov    DWORD PTR ds:0xc0023444,0xc00115c1
c0011f66:	c7 05 48 34 02 c0 30 16 01 c0 	mov    DWORD PTR ds:0xc0023448,0xc0011630
c0011f70:	c7 05 4c 34 02 c0 bd 12 01 c0 	mov    DWORD PTR ds:0xc002344c,0xc00112bd
c0011f7a:	c7 05 50 34 02 c0 f5 18 01 c0 	mov    DWORD PTR ds:0xc0023450,0xc00118f5
c0011f84:	c7 05 54 34 02 c0 12 19 01 c0 	mov    DWORD PTR ds:0xc0023454,0xc0011912
c0011f8e:	c7 05 58 34 02 c0 12 19 01 c0 	mov    DWORD PTR ds:0xc0023458,0xc0011912
c0011f98:	c7 05 5c 34 02 c0 48 19 01 c0 	mov    DWORD PTR ds:0xc002345c,0xc0011948
c0011fa2:	c7 05 60 34 02 c0 af 19 01 c0 	mov    DWORD PTR ds:0xc0023460,0xc00119af
c0011fac:	c7 05 64 34 02 c0 c7 12 01 c0 	mov    DWORD PTR ds:0xc0023464,0xc00112c7
c0011fb6:	c7 05 68 34 02 c0 16 1a 01 c0 	mov    DWORD PTR ds:0xc0023468,0xc0011a16
c0011fc0:	c7 05 6c 34 02 c0 49 14 01 c0 	mov    DWORD PTR ds:0xc002346c,0xc0011449
c0011fca:	c7 05 70 34 02 c0 d7 12 01 c0 	mov    DWORD PTR ds:0xc0023470,0xc00112d7
c0011fd4:	c7 05 74 34 02 c0 0c 15 01 c0 	mov    DWORD PTR ds:0xc0023474,0xc001150c
c0011fde:	c7 05 78 34 02 c0 63 1a 01 c0 	mov    DWORD PTR ds:0xc0023478,0xc0011a63
c0011fe8:	c7 05 7c 34 02 c0 a5 16 01 c0 	mov    DWORD PTR ds:0xc002347c,0xc00116a5
c0011ff2:	c7 05 80 34 02 c0 8c 1a 01 c0 	mov    DWORD PTR ds:0xc0023480,0xc0011a8c
c0011ffc:	c7 05 84 34 02 c0 f5 1a 01 c0 	mov    DWORD PTR ds:0xc0023484,0xc0011af5
c0012006:	c7 05 8c 34 02 c0 df 12 01 c0 	mov    DWORD PTR ds:0xc002348c,0xc00112df
c0012010:	c7 05 90 34 02 c0 4c 13 01 c0 	mov    DWORD PTR ds:0xc0023490,0xc001134c
c001201a:	c7 05 94 34 02 c0 96 13 01 c0 	mov    DWORD PTR ds:0xc0023494,0xc0011396
c0012024:	c7 05 98 34 02 c0 a4 1b 01 c0 	mov    DWORD PTR ds:0xc0023498,0xc0011ba4
c001202e:	c7 05 9c 34 02 c0 2d 19 01 c0 	mov    DWORD PTR ds:0xc002349c,0xc001192d
c0012038:	c7 05 a0 34 02 c0 eb 13 01 c0 	mov    DWORD PTR ds:0xc00234a0,0xc00113eb
c0012042:	c7 05 a4 34 02 c0 1b 1c 01 c0 	mov    DWORD PTR ds:0xc00234a4,0xc0011c1b
c001204c:	c7 05 a8 34 02 c0 60 1c 01 c0 	mov    DWORD PTR ds:0xc00234a8,0xc0011c60
c0012056:	c7 05 ac 34 02 c0 64 0f 01 c0 	mov    DWORD PTR ds:0xc00234ac,0xc0010f64
c0012060:	c7 05 b0 34 02 c0 e5 10 01 c0 	mov    DWORD PTR ds:0xc00234b0,0xc00110e5
c001206a:	c7 05 b4 34 02 c0 7a 11 01 c0 	mov    DWORD PTR ds:0xc00234b4,0xc001117a
c0012074:	c7 05 b8 34 02 c0 4f 0e 01 c0 	mov    DWORD PTR ds:0xc00234b8,0xc0010e4f
c001207e:	c7 05 bc 34 02 c0 2c 12 01 c0 	mov    DWORD PTR ds:0xc00234bc,0xc001122c
c0012088:	c7 05 c0 34 02 c0 c8 0e 01 c0 	mov    DWORD PTR ds:0xc00234c0,0xc0010ec8
c0012092:	c7 05 c4 34 02 c0 e2 0e 01 c0 	mov    DWORD PTR ds:0xc00234c4,0xc0010ee2
c001209c:	c3                   	ret    

c001209d <Sys::systemCall(regs*, void*)>:
c001209d:	53                   	push   ebx
c001209e:	83 ec 08             	sub    esp,0x8
c00120a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00120a5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00120a8:	83 f8 7f             	cmp    eax,0x7f
c00120ab:	77 16                	ja     c00120c3 <Sys::systemCall(regs*, void*)+0x26>
c00120ad:	8b 14 85 00 34 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcc00]
c00120b4:	85 d2                	test   edx,edx
c00120b6:	74 0b                	je     c00120c3 <Sys::systemCall(regs*, void*)+0x26>
c00120b8:	83 ec 0c             	sub    esp,0xc
c00120bb:	53                   	push   ebx
c00120bc:	ff d2                	call   edx
c00120be:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00120c1:	eb 0d                	jmp    c00120d0 <Sys::systemCall(regs*, void*)+0x33>
c00120c3:	52                   	push   edx
c00120c4:	52                   	push   edx
c00120c5:	50                   	push   eax
c00120c6:	68 9d e8 01 c0       	push   0xc001e89d
c00120cb:	e8 d8 8a ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c00120d0:	83 c4 10             	add    esp,0x10
c00120d3:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00120d8:	31 d2                	xor    edx,edx
c00120da:	83 c4 08             	add    esp,0x8
c00120dd:	5b                   	pop    ebx
c00120de:	c3                   	ret    

c00120df <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00120df:	55                   	push   ebp
c00120e0:	57                   	push   edi
c00120e1:	56                   	push   esi
c00120e2:	53                   	push   ebx
c00120e3:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00120e9:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00120f1:	0f 95 c2             	setne  dl
c00120f4:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00120fc:	0f 94 c0             	sete   al
c00120ff:	84 c2                	test   dl,al
c0012101:	74 34                	je     c0012137 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0012103:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001210e:	74 27                	je     c0012137 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0012110:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0012117:	05 00 10 00 00       	add    eax,0x1000
c001211c:	89 c1                	mov    ecx,eax
c001211e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012123:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0012129:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0012130:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0012137:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c001213e:	83 ec 0c             	sub    esp,0xc
c0012141:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0012147:	6a 01                	push   0x1
c0012149:	e8 07 78 ff ff       	call   c0009955 <Virt::allocateKernelVirtualPages(int)>
c001214e:	83 c4 10             	add    esp,0x10
c0012151:	89 c3                	mov    ebx,eax
c0012153:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0012159:	0f 86 25 01 00 00    	jbe    c0012284 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c001215f:	c1 ee 0c             	shr    esi,0xc
c0012162:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0012169:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001216d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012175:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001217c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012180:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0012187:	29 ef                	sub    edi,ebp
c0012189:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c001218d:	0f 83 f8 00 00 00    	jae    c001228b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0012193:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0012199:	76 05                	jbe    c00121a0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c001219b:	bf 00 10 00 00       	mov    edi,0x1000
c00121a0:	83 ec 0c             	sub    esp,0xc
c00121a3:	31 d2                	xor    edx,edx
c00121a5:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00121ac:	8b 08                	mov    ecx,DWORD PTR [eax]
c00121ae:	8d 44 24 28          	lea    eax,[esp+0x28]
c00121b2:	50                   	push   eax
c00121b3:	8d 74 24 30          	lea    esi,[esp+0x30]
c00121b7:	56                   	push   esi
c00121b8:	52                   	push   edx
c00121b9:	57                   	push   edi
c00121ba:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00121c1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00121c4:	83 c4 20             	add    esp,0x20
c00121c7:	85 c0                	test   eax,eax
c00121c9:	75 06                	jne    c00121d1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c00121cb:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00121cf:	74 13                	je     c00121e4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c00121d1:	83 ec 0c             	sub    esp,0xc
c00121d4:	53                   	push   ebx
c00121d5:	e8 ab 7a ff ff       	call   c0009c85 <Virt::freeKernelVirtualPages(unsigned long)>
c00121da:	83 c4 10             	add    esp,0x10
c00121dd:	31 c0                	xor    eax,eax
c00121df:	e9 7c 01 00 00       	jmp    c0012360 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c00121e4:	fa                   	cli    
c00121e5:	ff 05 c8 3d 02 c0    	inc    DWORD PTR ds:0xc0023dc8
c00121eb:	e8 f6 5f ff ff       	call   c00081e6 <Phys::allocatePage()>
c00121f0:	6a 07                	push   0x7
c00121f2:	89 c7                	mov    edi,eax
c00121f4:	53                   	push   ebx
c00121f5:	50                   	push   eax
c00121f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121fb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00121fe:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012204:	e8 e1 7d ff ff       	call   c0009fea <VAS::mapPage(unsigned long, unsigned long, int)>
c0012209:	83 c4 0c             	add    esp,0xc
c001220c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0012213:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012219:	6a 00                	push   0x0
c001221b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012220:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012223:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012229:	e8 2e 7c ff ff       	call   c0009e5c <VAS::mapOtherVASIn(bool, VAS*)>
c001222e:	58                   	pop    eax
c001222f:	5a                   	pop    edx
c0012230:	68 07 0c 00 00       	push   0xc07
c0012235:	55                   	push   ebp
c0012236:	57                   	push   edi
c0012237:	89 df                	mov    edi,ebx
c0012239:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0012240:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012246:	6a 00                	push   0x0
c0012248:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001224d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012250:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012256:	e8 4f 81 ff ff       	call   c000a3aa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001225b:	b9 00 10 00 00       	mov    ecx,0x1000
c0012260:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012262:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c0012267:	83 c4 20             	add    esp,0x20
c001226a:	48                   	dec    eax
c001226b:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c0012270:	85 c0                	test   eax,eax
c0012272:	75 01                	jne    c0012275 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0012274:	fb                   	sti    
c0012275:	81 c5 00 10 00 00    	add    ebp,0x1000
c001227b:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001227f:	e9 f1 fe ff ff       	jmp    c0012175 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0012284:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001228b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0012292:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0012298:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001229e:	0f 86 ae 00 00 00    	jbe    c0012352 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c00122a4:	fa                   	cli    
c00122a5:	ff 05 c8 3d 02 c0    	inc    DWORD PTR ds:0xc0023dc8
c00122ab:	c1 ee 0c             	shr    esi,0xc
c00122ae:	51                   	push   ecx
c00122af:	31 ff                	xor    edi,edi
c00122b1:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00122b8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00122be:	6a 00                	push   0x0
c00122c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122c5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00122c8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00122ce:	e8 89 7b ff ff       	call   c0009e5c <VAS::mapOtherVASIn(bool, VAS*)>
c00122d3:	83 c4 10             	add    esp,0x10
c00122d6:	e8 0b 5f ff ff       	call   c00081e6 <Phys::allocatePage()>
c00122db:	47                   	inc    edi
c00122dc:	6a 07                	push   0x7
c00122de:	53                   	push   ebx
c00122df:	50                   	push   eax
c00122e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00122e4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00122ea:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00122ed:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00122f3:	e8 f2 7c ff ff       	call   c0009fea <VAS::mapPage(unsigned long, unsigned long, int)>
c00122f8:	58                   	pop    eax
c00122f9:	5a                   	pop    edx
c00122fa:	68 07 0c 00 00       	push   0xc07
c00122ff:	55                   	push   ebp
c0012300:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012306:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001230a:	50                   	push   eax
c001230b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0012312:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012318:	6a 00                	push   0x0
c001231a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001231f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012322:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012328:	e8 7d 80 ff ff       	call   c000a3aa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001232d:	83 c4 1c             	add    esp,0x1c
c0012330:	68 00 10 00 00       	push   0x1000
c0012335:	6a 00                	push   0x0
c0012337:	53                   	push   ebx
c0012338:	e8 b3 e1 fe ff       	call   c00004f0 <memset>
c001233d:	83 c4 10             	add    esp,0x10
c0012340:	39 fe                	cmp    esi,edi
c0012342:	77 92                	ja     c00122d6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0012344:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c0012349:	48                   	dec    eax
c001234a:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c001234f:	75 01                	jne    c0012352 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012351:	fb                   	sti    
c0012352:	83 ec 0c             	sub    esp,0xc
c0012355:	53                   	push   ebx
c0012356:	e8 2a 79 ff ff       	call   c0009c85 <Virt::freeKernelVirtualPages(unsigned long)>
c001235b:	83 c4 10             	add    esp,0x10
c001235e:	b0 01                	mov    al,0x1
c0012360:	81 c4 2c 10 00 00    	add    esp,0x102c
c0012366:	5b                   	pop    ebx
c0012367:	5e                   	pop    esi
c0012368:	5f                   	pop    edi
c0012369:	5d                   	pop    ebp
c001236a:	c3                   	ret    

c001236b <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001236b:	55                   	push   ebp
c001236c:	57                   	push   edi
c001236d:	56                   	push   esi
c001236e:	53                   	push   ebx
c001236f:	83 ec 48             	sub    esp,0x48
c0012372:	68 14 01 00 00       	push   0x114
c0012377:	e8 9d 5a ff ff       	call   c0007e19 <malloc>
c001237c:	83 c4 0c             	add    esp,0xc
c001237f:	89 c6                	mov    esi,eax
c0012381:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012385:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012389:	50                   	push   eax
c001238a:	e8 8f 8d ff ff       	call   c000b11e <File::File(char const*, Process*)>
c001238f:	58                   	pop    eax
c0012390:	5a                   	pop    edx
c0012391:	6a 01                	push   0x1
c0012393:	56                   	push   esi
c0012394:	e8 45 8e ff ff       	call   c000b1de <File::open(FileOpenMode)>
c0012399:	83 c4 10             	add    esp,0x10
c001239c:	85 c0                	test   eax,eax
c001239e:	0f 85 47 01 00 00    	jne    c00124eb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00123a4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00123ac:	83 ec 0c             	sub    esp,0xc
c00123af:	6a 34                	push   0x34
c00123b1:	e8 63 5a ff ff       	call   c0007e19 <malloc>
c00123b6:	89 c3                	mov    ebx,eax
c00123b8:	58                   	pop    eax
c00123b9:	8b 06                	mov    eax,DWORD PTR [esi]
c00123bb:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00123bf:	57                   	push   edi
c00123c0:	53                   	push   ebx
c00123c1:	6a 00                	push   0x0
c00123c3:	6a 34                	push   0x34
c00123c5:	56                   	push   esi
c00123c6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00123c9:	83 c4 20             	add    esp,0x20
c00123cc:	85 c0                	test   eax,eax
c00123ce:	0f 85 17 01 00 00    	jne    c00124eb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00123d4:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00123da:	0f 85 0b 01 00 00    	jne    c00124eb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00123e0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00123e3:	85 c0                	test   eax,eax
c00123e5:	0f 84 00 01 00 00    	je     c00124eb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00123eb:	31 d2                	xor    edx,edx
c00123ed:	55                   	push   ebp
c00123ee:	52                   	push   edx
c00123ef:	50                   	push   eax
c00123f0:	56                   	push   esi
c00123f1:	e8 a6 8e ff ff       	call   c000b29c <File::seek(unsigned long long)>
c00123f6:	83 c4 10             	add    esp,0x10
c00123f9:	85 c0                	test   eax,eax
c00123fb:	0f 85 ea 00 00 00    	jne    c00124eb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012401:	83 ec 0c             	sub    esp,0xc
c0012404:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012407:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001240b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001240f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012413:	0f af c2             	imul   eax,edx
c0012416:	50                   	push   eax
c0012417:	e8 fd 59 ff ff       	call   c0007e19 <malloc>
c001241c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001241e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012422:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012425:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012429:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001242d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012431:	0f af c2             	imul   eax,edx
c0012434:	99                   	cdq    
c0012435:	52                   	push   edx
c0012436:	50                   	push   eax
c0012437:	56                   	push   esi
c0012438:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001243b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001243e:	83 c4 20             	add    esp,0x20
c0012441:	85 c0                	test   eax,eax
c0012443:	0f 84 a2 00 00 00    	je     c00124eb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012449:	31 d2                	xor    edx,edx
c001244b:	51                   	push   ecx
c001244c:	52                   	push   edx
c001244d:	50                   	push   eax
c001244e:	56                   	push   esi
c001244f:	e8 48 8e ff ff       	call   c000b29c <File::seek(unsigned long long)>
c0012454:	83 c4 10             	add    esp,0x10
c0012457:	85 c0                	test   eax,eax
c0012459:	0f 85 8c 00 00 00    	jne    c00124eb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001245f:	83 ec 0c             	sub    esp,0xc
c0012462:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0012466:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001246a:	31 ed                	xor    ebp,ebp
c001246c:	0f af c2             	imul   eax,edx
c001246f:	50                   	push   eax
c0012470:	e8 a4 59 ff ff       	call   c0007e19 <malloc>
c0012475:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012477:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001247b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001247e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012482:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0012486:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001248a:	0f af c2             	imul   eax,edx
c001248d:	99                   	cdq    
c001248e:	52                   	push   edx
c001248f:	50                   	push   eax
c0012490:	56                   	push   esi
c0012491:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012494:	83 c4 20             	add    esp,0x20
c0012497:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001249f:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00124a3:	0f 86 80 00 00 00    	jbe    c0012529 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00124a9:	0f b7 fd             	movzx  edi,bp
c00124ac:	c1 e7 05             	shl    edi,0x5
c00124af:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00124b3:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00124b6:	75 6b                	jne    c0012523 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00124b8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00124bb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00124bf:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00124c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00124c6:	52                   	push   edx
c00124c7:	31 d2                	xor    edx,edx
c00124c9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00124cc:	52                   	push   edx
c00124cd:	50                   	push   eax
c00124ce:	56                   	push   esi
c00124cf:	e8 c8 8d ff ff       	call   c000b29c <File::seek(unsigned long long)>
c00124d4:	83 c4 10             	add    esp,0x10
c00124d7:	85 c0                	test   eax,eax
c00124d9:	74 17                	je     c00124f2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00124db:	83 ec 0c             	sub    esp,0xc
c00124de:	68 b1 e8 01 c0       	push   0xc001e8b1
c00124e3:	e8 c0 86 ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c00124e8:	83 c4 10             	add    esp,0x10
c00124eb:	31 c0                	xor    eax,eax
c00124ed:	e9 87 00 00 00       	jmp    c0012579 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00124f2:	83 ec 0c             	sub    esp,0xc
c00124f5:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00124f8:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00124fb:	50                   	push   eax
c00124fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012500:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012504:	56                   	push   esi
c0012505:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0012509:	e8 d1 fb ff ff       	call   c00120df <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001250e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012512:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0012516:	83 c4 20             	add    esp,0x20
c0012519:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001251d:	73 04                	jae    c0012523 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001251f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012523:	45                   	inc    ebp
c0012524:	e9 76 ff ff ff       	jmp    c001249f <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0012529:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001252d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012531:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012535:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c001253b:	83 ec 0c             	sub    esp,0xc
c001253e:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0012544:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012549:	05 00 10 00 00       	add    eax,0x1000
c001254e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012551:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012555:	e8 cf 58 ff ff       	call   c0007e29 <free>
c001255a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001255d:	e8 c7 58 ff ff       	call   c0007e29 <free>
c0012562:	58                   	pop    eax
c0012563:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012567:	e8 bd 58 ff ff       	call   c0007e29 <free>
c001256c:	89 34 24             	mov    DWORD PTR [esp],esi
c001256f:	e8 c8 8c ff ff       	call   c000b23c <File::close()>
c0012574:	83 c4 10             	add    esp,0x10
c0012577:	b0 01                	mov    al,0x1
c0012579:	83 c4 3c             	add    esp,0x3c
c001257c:	5b                   	pop    ebx
c001257d:	5e                   	pop    esi
c001257e:	5f                   	pop    edi
c001257f:	5d                   	pop    ebp
c0012580:	c3                   	ret    

c0012581 <Thr::runtimeReferenceHelper()>:
c0012581:	83 ec 18             	sub    esp,0x18
c0012584:	68 b9 e8 01 c0       	push   0xc001e8b9
c0012589:	e8 1a 86 ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c001258e:	fa                   	cli    
c001258f:	83 c4 10             	add    esp,0x10
c0012592:	eb fe                	jmp    c0012592 <Thr::runtimeReferenceHelper()+0x11>

c0012594 <Thr::getAddressOfKernelSymbol(char const*)>:
c0012594:	57                   	push   edi
c0012595:	56                   	push   esi
c0012596:	53                   	push   ebx
c0012597:	31 db                	xor    ebx,ebx
c0012599:	39 1d a0 3d 02 c0    	cmp    DWORD PTR ds:0xc0023da0,ebx
c001259f:	7e 3c                	jle    c00125dd <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00125a1:	8b 34 9d 20 3d 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdc2e0]
c00125a8:	31 ff                	xor    edi,edi
c00125aa:	39 3c 9d 20 3c 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdc3e0],edi
c00125b1:	7e 27                	jle    c00125da <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00125b3:	50                   	push   eax
c00125b4:	50                   	push   eax
c00125b5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00125b9:	8b 06                	mov    eax,DWORD PTR [esi]
c00125bb:	03 04 9d a0 3c 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdc360]
c00125c2:	50                   	push   eax
c00125c3:	e8 38 e1 fe ff       	call   c0000700 <strcmp>
c00125c8:	83 c4 10             	add    esp,0x10
c00125cb:	85 c0                	test   eax,eax
c00125cd:	75 05                	jne    c00125d4 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00125cf:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00125d2:	eb 0b                	jmp    c00125df <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00125d4:	83 c6 10             	add    esi,0x10
c00125d7:	47                   	inc    edi
c00125d8:	eb d0                	jmp    c00125aa <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00125da:	43                   	inc    ebx
c00125db:	eb bc                	jmp    c0012599 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00125dd:	31 c0                	xor    eax,eax
c00125df:	5b                   	pop    ebx
c00125e0:	5e                   	pop    esi
c00125e1:	5f                   	pop    edi
c00125e2:	c3                   	ret    

c00125e3 <Thr::loadKernelSymbolTable(char const*)>:
c00125e3:	55                   	push   ebp
c00125e4:	57                   	push   edi
c00125e5:	56                   	push   esi
c00125e6:	53                   	push   ebx
c00125e7:	83 ec 68             	sub    esp,0x68
c00125ea:	8b 35 f0 3d 02 c0    	mov    esi,DWORD PTR ds:0xc0023df0
c00125f0:	68 14 01 00 00       	push   0x114
c00125f5:	e8 1f 58 ff ff       	call   c0007e19 <malloc>
c00125fa:	83 c4 0c             	add    esp,0xc
c00125fd:	89 c3                	mov    ebx,eax
c00125ff:	56                   	push   esi
c0012600:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0012604:	50                   	push   eax
c0012605:	e8 14 8b ff ff       	call   c000b11e <File::File(char const*, Process*)>
c001260a:	5e                   	pop    esi
c001260b:	5f                   	pop    edi
c001260c:	6a 01                	push   0x1
c001260e:	53                   	push   ebx
c001260f:	e8 ca 8b ff ff       	call   c000b1de <File::open(FileOpenMode)>
c0012614:	83 c4 10             	add    esp,0x10
c0012617:	85 c0                	test   eax,eax
c0012619:	74 0a                	je     c0012625 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001261b:	83 ec 0c             	sub    esp,0xc
c001261e:	68 db e8 01 c0       	push   0xc001e8db
c0012623:	eb 34                	jmp    c0012659 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0012625:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001262d:	83 ec 0c             	sub    esp,0xc
c0012630:	6a 34                	push   0x34
c0012632:	e8 e2 57 ff ff       	call   c0007e19 <malloc>
c0012637:	59                   	pop    ecx
c0012638:	89 c7                	mov    edi,eax
c001263a:	8d 74 24 34          	lea    esi,[esp+0x34]
c001263e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012640:	56                   	push   esi
c0012641:	57                   	push   edi
c0012642:	6a 00                	push   0x0
c0012644:	6a 34                	push   0x34
c0012646:	53                   	push   ebx
c0012647:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001264a:	83 c4 20             	add    esp,0x20
c001264d:	85 c0                	test   eax,eax
c001264f:	74 17                	je     c0012668 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0012651:	83 ec 0c             	sub    esp,0xc
c0012654:	68 f2 e8 01 c0       	push   0xc001e8f2
c0012659:	e8 99 e0 ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c001265e:	83 c4 10             	add    esp,0x10
c0012661:	31 c0                	xor    eax,eax
c0012663:	e9 31 02 00 00       	jmp    c0012899 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0012668:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001266e:	75 e1                	jne    c0012651 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012670:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0012673:	85 c0                	test   eax,eax
c0012675:	74 da                	je     c0012651 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012677:	52                   	push   edx
c0012678:	31 d2                	xor    edx,edx
c001267a:	52                   	push   edx
c001267b:	50                   	push   eax
c001267c:	53                   	push   ebx
c001267d:	e8 1a 8c ff ff       	call   c000b29c <File::seek(unsigned long long)>
c0012682:	83 c4 10             	add    esp,0x10
c0012685:	85 c0                	test   eax,eax
c0012687:	75 c8                	jne    c0012651 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012689:	83 ec 0c             	sub    esp,0xc
c001268c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012690:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012694:	31 ed                	xor    ebp,ebp
c0012696:	0f af c2             	imul   eax,edx
c0012699:	50                   	push   eax
c001269a:	e8 7a 57 ff ff       	call   c0007e19 <malloc>
c001269f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00126a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126a5:	89 34 24             	mov    DWORD PTR [esp],esi
c00126a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00126ac:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00126b0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00126b4:	0f af c2             	imul   eax,edx
c00126b7:	99                   	cdq    
c00126b8:	52                   	push   edx
c00126b9:	50                   	push   eax
c00126ba:	53                   	push   ebx
c00126bb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00126be:	83 c4 20             	add    esp,0x20
c00126c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00126c9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00126d1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00126d9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00126e1:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c00126e5:	0f 86 aa 00 00 00    	jbe    c0012795 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00126eb:	0f b7 f5             	movzx  esi,bp
c00126ee:	6b f6 28             	imul   esi,esi,0x28
c00126f1:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00126f5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00126f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126fc:	50                   	push   eax
c00126fd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012701:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0012705:	8b 16                	mov    edx,DWORD PTR [esi]
c0012707:	6b c0 28             	imul   eax,eax,0x28
c001270a:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001270e:	89 d0                	mov    eax,edx
c0012710:	31 d2                	xor    edx,edx
c0012712:	52                   	push   edx
c0012713:	50                   	push   eax
c0012714:	53                   	push   ebx
c0012715:	e8 82 8b ff ff       	call   c000b29c <File::seek(unsigned long long)>
c001271a:	83 c4 0c             	add    esp,0xc
c001271d:	6a 20                	push   0x20
c001271f:	6a 00                	push   0x0
c0012721:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012725:	52                   	push   edx
c0012726:	e8 c5 dd fe ff       	call   c00004f0 <memset>
c001272b:	58                   	pop    eax
c001272c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001272e:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0012732:	51                   	push   ecx
c0012733:	8d 54 24 40          	lea    edx,[esp+0x40]
c0012737:	52                   	push   edx
c0012738:	6a 00                	push   0x0
c001273a:	6a 1f                	push   0x1f
c001273c:	53                   	push   ebx
c001273d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012740:	83 c4 18             	add    esp,0x18
c0012743:	68 09 e9 01 c0       	push   0xc001e909
c0012748:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001274c:	52                   	push   edx
c001274d:	e8 ae df fe ff       	call   c0000700 <strcmp>
c0012752:	83 c4 10             	add    esp,0x10
c0012755:	85 c0                	test   eax,eax
c0012757:	75 0f                	jne    c0012768 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0012759:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001275c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012760:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012764:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012768:	50                   	push   eax
c0012769:	50                   	push   eax
c001276a:	68 11 e9 01 c0       	push   0xc001e911
c001276f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012773:	50                   	push   eax
c0012774:	e8 87 df fe ff       	call   c0000700 <strcmp>
c0012779:	83 c4 10             	add    esp,0x10
c001277c:	85 c0                	test   eax,eax
c001277e:	75 0f                	jne    c001278f <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0012780:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012783:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012787:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001278b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001278f:	45                   	inc    ebp
c0012790:	e9 4c ff ff ff       	jmp    c00126e1 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0012795:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001279a:	75 10                	jne    c00127ac <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001279c:	83 ec 0c             	sub    esp,0xc
c001279f:	68 19 e9 01 c0       	push   0xc001e919
c00127a4:	e8 4e df ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c00127a9:	83 c4 10             	add    esp,0x10
c00127ac:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00127b1:	75 10                	jne    c00127c3 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00127b3:	83 ec 0c             	sub    esp,0xc
c00127b6:	68 19 e9 01 c0       	push   0xc001e919
c00127bb:	e8 37 df ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c00127c0:	83 c4 10             	add    esp,0x10
c00127c3:	31 d2                	xor    edx,edx
c00127c5:	50                   	push   eax
c00127c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127ca:	52                   	push   edx
c00127cb:	50                   	push   eax
c00127cc:	53                   	push   ebx
c00127cd:	e8 ca 8a ff ff       	call   c000b29c <File::seek(unsigned long long)>
c00127d2:	5a                   	pop    edx
c00127d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00127d7:	e8 3d 56 ff ff       	call   c0007e19 <malloc>
c00127dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00127e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00127e4:	31 c9                	xor    ecx,ecx
c00127e6:	5e                   	pop    esi
c00127e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00127e9:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00127ed:	55                   	push   ebp
c00127ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00127f2:	51                   	push   ecx
c00127f3:	52                   	push   edx
c00127f4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00127f8:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00127fc:	53                   	push   ebx
c00127fd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012800:	83 c4 14             	add    esp,0x14
c0012803:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012807:	e8 0d 56 ff ff       	call   c0007e19 <malloc>
c001280c:	89 c6                	mov    esi,eax
c001280e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012810:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012813:	56                   	push   esi
c0012814:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0012818:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001281c:	51                   	push   ecx
c001281d:	52                   	push   edx
c001281e:	53                   	push   ebx
c001281f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012822:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012826:	8b 15 a0 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023da0
c001282c:	83 c4 1c             	add    esp,0x1c
c001282f:	c1 e8 04             	shr    eax,0x4
c0012832:	89 04 95 20 3c 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc3e0],eax
c0012839:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001283d:	31 d2                	xor    edx,edx
c001283f:	52                   	push   edx
c0012840:	50                   	push   eax
c0012841:	53                   	push   ebx
c0012842:	e8 55 8a ff ff       	call   c000b29c <File::seek(unsigned long long)>
c0012847:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012849:	31 d2                	xor    edx,edx
c001284b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001284e:	56                   	push   esi
c001284f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012853:	52                   	push   edx
c0012854:	50                   	push   eax
c0012855:	53                   	push   ebx
c0012856:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012859:	83 c4 14             	add    esp,0x14
c001285c:	53                   	push   ebx
c001285d:	e8 da 89 ff ff       	call   c000b23c <File::close()>
c0012862:	5d                   	pop    ebp
c0012863:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012867:	e8 bd 55 ff ff       	call   c0007e29 <free>
c001286c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001286f:	e8 b5 55 ff ff       	call   c0007e29 <free>
c0012874:	a1 a0 3d 02 c0       	mov    eax,ds:0xc0023da0
c0012879:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001287d:	8d 50 01             	lea    edx,[eax+0x1]
c0012880:	89 0c 85 20 3d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc2e0],ecx
c0012887:	89 34 85 a0 3c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc360],esi
c001288e:	89 15 a0 3d 02 c0    	mov    DWORD PTR ds:0xc0023da0,edx
c0012894:	83 c4 10             	add    esp,0x10
c0012897:	b0 01                	mov    al,0x1
c0012899:	83 c4 5c             	add    esp,0x5c
c001289c:	5b                   	pop    ebx
c001289d:	5e                   	pop    esi
c001289e:	5f                   	pop    edi
c001289f:	5d                   	pop    ebp
c00128a0:	c3                   	ret    

c00128a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00128a1:	55                   	push   ebp
c00128a2:	57                   	push   edi
c00128a3:	56                   	push   esi
c00128a4:	53                   	push   ebx
c00128a5:	81 ec 68 03 00 00    	sub    esp,0x368
c00128ab:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00128b2:	8b 1d f0 3d 02 c0    	mov    ebx,DWORD PTR ds:0xc0023df0
c00128b8:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00128bc:	68 14 01 00 00       	push   0x114
c00128c1:	e8 53 55 ff ff       	call   c0007e19 <malloc>
c00128c6:	83 c4 0c             	add    esp,0xc
c00128c9:	89 c5                	mov    ebp,eax
c00128cb:	53                   	push   ebx
c00128cc:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00128d3:	50                   	push   eax
c00128d4:	e8 45 88 ff ff       	call   c000b11e <File::File(char const*, Process*)>
c00128d9:	5e                   	pop    esi
c00128da:	5f                   	pop    edi
c00128db:	6a 01                	push   0x1
c00128dd:	55                   	push   ebp
c00128de:	e8 fb 88 ff ff       	call   c000b1de <File::open(FileOpenMode)>
c00128e3:	83 c4 10             	add    esp,0x10
c00128e6:	85 c0                	test   eax,eax
c00128e8:	0f 85 a7 06 00 00    	jne    c0012f95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00128ee:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00128f6:	83 ec 0c             	sub    esp,0xc
c00128f9:	6a 34                	push   0x34
c00128fb:	e8 19 55 ff ff       	call   c0007e19 <malloc>
c0012900:	5b                   	pop    ebx
c0012901:	89 c7                	mov    edi,eax
c0012903:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012907:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001290a:	53                   	push   ebx
c001290b:	57                   	push   edi
c001290c:	6a 00                	push   0x0
c001290e:	6a 34                	push   0x34
c0012910:	55                   	push   ebp
c0012911:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012914:	83 c4 20             	add    esp,0x20
c0012917:	85 c0                	test   eax,eax
c0012919:	0f 85 76 06 00 00    	jne    c0012f95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001291f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0012925:	0f 85 6a 06 00 00    	jne    c0012f95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001292b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001292e:	85 c0                	test   eax,eax
c0012930:	0f 84 5f 06 00 00    	je     c0012f95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012936:	31 d2                	xor    edx,edx
c0012938:	51                   	push   ecx
c0012939:	52                   	push   edx
c001293a:	50                   	push   eax
c001293b:	55                   	push   ebp
c001293c:	e8 5b 89 ff ff       	call   c000b29c <File::seek(unsigned long long)>
c0012941:	83 c4 10             	add    esp,0x10
c0012944:	85 c0                	test   eax,eax
c0012946:	0f 85 49 06 00 00    	jne    c0012f95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001294c:	83 ec 0c             	sub    esp,0xc
c001294f:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0012952:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012956:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001295a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001295e:	0f af c2             	imul   eax,edx
c0012961:	50                   	push   eax
c0012962:	e8 b2 54 ff ff       	call   c0007e19 <malloc>
c0012967:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001296a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001296e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012971:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012975:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012979:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001297d:	0f af c2             	imul   eax,edx
c0012980:	99                   	cdq    
c0012981:	52                   	push   edx
c0012982:	50                   	push   eax
c0012983:	55                   	push   ebp
c0012984:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012987:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001298a:	83 c4 20             	add    esp,0x20
c001298d:	85 c0                	test   eax,eax
c001298f:	0f 84 00 06 00 00    	je     c0012f95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012995:	52                   	push   edx
c0012996:	31 d2                	xor    edx,edx
c0012998:	52                   	push   edx
c0012999:	50                   	push   eax
c001299a:	55                   	push   ebp
c001299b:	e8 fc 88 ff ff       	call   c000b29c <File::seek(unsigned long long)>
c00129a0:	83 c4 10             	add    esp,0x10
c00129a3:	85 c0                	test   eax,eax
c00129a5:	0f 85 ea 05 00 00    	jne    c0012f95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00129ab:	83 ec 0c             	sub    esp,0xc
c00129ae:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00129b2:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00129b6:	31 f6                	xor    esi,esi
c00129b8:	0f af c2             	imul   eax,edx
c00129bb:	50                   	push   eax
c00129bc:	e8 58 54 ff ff       	call   c0007e19 <malloc>
c00129c1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00129c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00129c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00129cb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00129cf:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00129d3:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00129d7:	0f af c2             	imul   eax,edx
c00129da:	99                   	cdq    
c00129db:	52                   	push   edx
c00129dc:	50                   	push   eax
c00129dd:	55                   	push   ebp
c00129de:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00129e1:	83 c4 20             	add    esp,0x20
c00129e4:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c00129e8:	0f 86 8a 00 00 00    	jbe    c0012a78 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00129ee:	0f b7 de             	movzx  ebx,si
c00129f1:	c1 e3 05             	shl    ebx,0x5
c00129f4:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00129f8:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00129fb:	75 75                	jne    c0012a72 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00129fd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012a00:	31 d2                	xor    edx,edx
c0012a02:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012a06:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0012a09:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a0d:	50                   	push   eax
c0012a0e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0012a11:	52                   	push   edx
c0012a12:	50                   	push   eax
c0012a13:	55                   	push   ebp
c0012a14:	e8 83 88 ff ff       	call   c000b29c <File::seek(unsigned long long)>
c0012a19:	83 c4 10             	add    esp,0x10
c0012a1c:	85 c0                	test   eax,eax
c0012a1e:	0f 85 71 05 00 00    	jne    c0012f95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012a24:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0012a2b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012a2e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0012a32:	31 d2                	xor    edx,edx
c0012a34:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0012a38:	83 ec 0c             	sub    esp,0xc
c0012a3b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012a3f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012a46:	50                   	push   eax
c0012a47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012a4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a4f:	52                   	push   edx
c0012a50:	50                   	push   eax
c0012a51:	55                   	push   ebp
c0012a52:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012a55:	83 c4 1c             	add    esp,0x1c
c0012a58:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0012a5b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0012a5e:	50                   	push   eax
c0012a5f:	6a 00                	push   0x0
c0012a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a65:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0012a69:	50                   	push   eax
c0012a6a:	e8 81 da fe ff       	call   c00004f0 <memset>
c0012a6f:	83 c4 10             	add    esp,0x10
c0012a72:	46                   	inc    esi
c0012a73:	e9 6c ff ff ff       	jmp    c00129e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0012a78:	53                   	push   ebx
c0012a79:	31 db                	xor    ebx,ebx
c0012a7b:	68 00 01 00 00       	push   0x100
c0012a80:	6a 00                	push   0x0
c0012a82:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0012a86:	50                   	push   eax
c0012a87:	e8 64 da fe ff       	call   c00004f0 <memset>
c0012a8c:	83 c4 0c             	add    esp,0xc
c0012a8f:	68 00 01 00 00       	push   0x100
c0012a94:	6a 00                	push   0x0
c0012a96:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0012a9d:	50                   	push   eax
c0012a9e:	e8 4d da fe ff       	call   c00004f0 <memset>
c0012aa3:	83 c4 10             	add    esp,0x10
c0012aa6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0012aae:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012ab6:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0012abe:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012ac6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012ace:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0012ad2:	0f 86 30 01 00 00    	jbe    c0012c08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0012ad8:	0f b7 f3             	movzx  esi,bx
c0012adb:	6b f6 28             	imul   esi,esi,0x28
c0012ade:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012ae2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012ae5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012ae9:	52                   	push   edx
c0012aea:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012aee:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0012af2:	8b 06                	mov    eax,DWORD PTR [esi]
c0012af4:	6b d2 28             	imul   edx,edx,0x28
c0012af7:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0012afb:	31 d2                	xor    edx,edx
c0012afd:	52                   	push   edx
c0012afe:	50                   	push   eax
c0012aff:	55                   	push   ebp
c0012b00:	e8 97 87 ff ff       	call   c000b29c <File::seek(unsigned long long)>
c0012b05:	83 c4 0c             	add    esp,0xc
c0012b08:	6a 20                	push   0x20
c0012b0a:	6a 00                	push   0x0
c0012b0c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012b13:	51                   	push   ecx
c0012b14:	e8 d7 d9 fe ff       	call   c00004f0 <memset>
c0012b19:	59                   	pop    ecx
c0012b1a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012b1d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012b21:	52                   	push   edx
c0012b22:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0012b29:	51                   	push   ecx
c0012b2a:	6a 00                	push   0x0
c0012b2c:	6a 1f                	push   0x1f
c0012b2e:	55                   	push   ebp
c0012b2f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012b32:	83 c4 1c             	add    esp,0x1c
c0012b35:	6a 09                	push   0x9
c0012b37:	68 33 e9 01 c0       	push   0xc001e933
c0012b3c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012b43:	51                   	push   ecx
c0012b44:	e8 67 d8 fe ff       	call   c00003b0 <memcmp>
c0012b49:	83 c4 10             	add    esp,0x10
c0012b4c:	85 c0                	test   eax,eax
c0012b4e:	75 21                	jne    c0012b71 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0012b50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b54:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b58:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012b5c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012b60:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012b63:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012b6a:	89 d0                	mov    eax,edx
c0012b6c:	40                   	inc    eax
c0012b6d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012b71:	50                   	push   eax
c0012b72:	6a 09                	push   0x9
c0012b74:	68 3d e9 01 c0       	push   0xc001e93d
c0012b79:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b80:	50                   	push   eax
c0012b81:	e8 2a d8 fe ff       	call   c00003b0 <memcmp>
c0012b86:	83 c4 10             	add    esp,0x10
c0012b89:	85 c0                	test   eax,eax
c0012b8b:	75 21                	jne    c0012bae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0012b8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b95:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012b99:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012b9d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012ba0:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012ba7:	89 d0                	mov    eax,edx
c0012ba9:	40                   	inc    eax
c0012baa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012bae:	50                   	push   eax
c0012baf:	50                   	push   eax
c0012bb0:	68 09 e9 01 c0       	push   0xc001e909
c0012bb5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012bbc:	50                   	push   eax
c0012bbd:	e8 3e db fe ff       	call   c0000700 <strcmp>
c0012bc2:	83 c4 10             	add    esp,0x10
c0012bc5:	85 c0                	test   eax,eax
c0012bc7:	75 0f                	jne    c0012bd8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0012bc9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012bcc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012bd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012bd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012bd8:	50                   	push   eax
c0012bd9:	50                   	push   eax
c0012bda:	68 11 e9 01 c0       	push   0xc001e911
c0012bdf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012be6:	50                   	push   eax
c0012be7:	e8 14 db fe ff       	call   c0000700 <strcmp>
c0012bec:	83 c4 10             	add    esp,0x10
c0012bef:	85 c0                	test   eax,eax
c0012bf1:	75 0f                	jne    c0012c02 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0012bf3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012bf6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012bfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012bfe:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012c02:	43                   	inc    ebx
c0012c03:	e9 c6 fe ff ff       	jmp    c0012ace <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0012c08:	31 d2                	xor    edx,edx
c0012c0a:	50                   	push   eax
c0012c0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c0f:	52                   	push   edx
c0012c10:	50                   	push   eax
c0012c11:	55                   	push   ebp
c0012c12:	e8 85 86 ff ff       	call   c000b29c <File::seek(unsigned long long)>
c0012c17:	58                   	pop    eax
c0012c18:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c1c:	e8 f8 51 ff ff       	call   c0007e19 <malloc>
c0012c21:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012c24:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012c28:	31 d2                	xor    edx,edx
c0012c2a:	58                   	pop    eax
c0012c2b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012c2f:	53                   	push   ebx
c0012c30:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012c34:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012c38:	52                   	push   edx
c0012c39:	50                   	push   eax
c0012c3a:	55                   	push   ebp
c0012c3b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012c3e:	83 c4 14             	add    esp,0x14
c0012c41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012c45:	e8 cf 51 ff ff       	call   c0007e19 <malloc>
c0012c4a:	31 d2                	xor    edx,edx
c0012c4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012c50:	83 c4 0c             	add    esp,0xc
c0012c53:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012c57:	52                   	push   edx
c0012c58:	50                   	push   eax
c0012c59:	55                   	push   ebp
c0012c5a:	e8 3d 86 ff ff       	call   c000b29c <File::seek(unsigned long long)>
c0012c5f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012c62:	31 d2                	xor    edx,edx
c0012c64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012c67:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012c6b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012c6f:	52                   	push   edx
c0012c70:	50                   	push   eax
c0012c71:	55                   	push   ebp
c0012c72:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012c75:	83 c4 20             	add    esp,0x20
c0012c78:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012c80:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012c84:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0012c88:	0f 84 0b 03 00 00    	je     c0012f99 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0012c8e:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0012c95:	31 d2                	xor    edx,edx
c0012c97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012c9b:	c1 e8 03             	shr    eax,0x3
c0012c9e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012ca2:	51                   	push   ecx
c0012ca3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012ca7:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0012cab:	52                   	push   edx
c0012cac:	50                   	push   eax
c0012cad:	55                   	push   ebp
c0012cae:	e8 e9 85 ff ff       	call   c000b29c <File::seek(unsigned long long)>
c0012cb3:	5b                   	pop    ebx
c0012cb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012cb8:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0012cbf:	e8 55 51 ff ff       	call   c0007e19 <malloc>
c0012cc4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012cc7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012ccb:	31 d2                	xor    edx,edx
c0012ccd:	5e                   	pop    esi
c0012cce:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012cd2:	50                   	push   eax
c0012cd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cd7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012cdb:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0012ce2:	52                   	push   edx
c0012ce3:	50                   	push   eax
c0012ce4:	55                   	push   ebp
c0012ce5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012ce8:	83 c4 20             	add    esp,0x20
c0012ceb:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012cf3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012cf7:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0012cfb:	0f 8d 7c 02 00 00    	jge    c0012f7d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0012d01:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012d05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012d09:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0012d0e:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0012d11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012d15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012d19:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0012d1d:	89 d8                	mov    eax,ebx
c0012d1f:	c1 e8 08             	shr    eax,0x8
c0012d22:	89 c6                	mov    esi,eax
c0012d24:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012d28:	c1 e6 04             	shl    esi,0x4
c0012d2b:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0012d2f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0012d32:	85 d2                	test   edx,edx
c0012d34:	0f 85 bf 00 00 00    	jne    c0012df9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012d3a:	83 ec 0c             	sub    esp,0xc
c0012d3d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012d41:	03 06                	add    eax,DWORD PTR [esi]
c0012d43:	50                   	push   eax
c0012d44:	e8 4b f8 ff ff       	call   c0012594 <Thr::getAddressOfKernelSymbol(char const*)>
c0012d49:	83 c4 10             	add    esp,0x10
c0012d4c:	89 c2                	mov    edx,eax
c0012d4e:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0012d53:	85 c0                	test   eax,eax
c0012d55:	0f 85 9e 00 00 00    	jne    c0012df9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012d5b:	83 ec 0c             	sub    esp,0xc
c0012d5e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012d62:	03 06                	add    eax,DWORD PTR [esi]
c0012d64:	50                   	push   eax
c0012d65:	e8 96 41 ff ff       	call   c0006f00 <Krnl::resolveCompatibilitySymbol(char*)>
c0012d6a:	83 c4 10             	add    esp,0x10
c0012d6d:	89 c2                	mov    edx,eax
c0012d6f:	85 c0                	test   eax,eax
c0012d71:	0f 85 82 00 00 00    	jne    c0012df9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012d77:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012d7b:	50                   	push   eax
c0012d7c:	50                   	push   eax
c0012d7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d81:	03 06                	add    eax,DWORD PTR [esi]
c0012d83:	50                   	push   eax
c0012d84:	68 47 e9 01 c0       	push   0xc001e947
c0012d89:	e8 1a 7e ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c0012d8e:	58                   	pop    eax
c0012d8f:	5a                   	pop    edx
c0012d90:	68 61 e9 01 c0       	push   0xc001e961
c0012d95:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012d9c:	50                   	push   eax
c0012d9d:	e8 7e d8 fe ff       	call   c0000620 <strcpy>
c0012da2:	59                   	pop    ecx
c0012da3:	58                   	pop    eax
c0012da4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012da8:	03 06                	add    eax,DWORD PTR [esi]
c0012daa:	50                   	push   eax
c0012dab:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012db2:	50                   	push   eax
c0012db3:	e8 28 da fe ff       	call   c00007e0 <strcat>
c0012db8:	58                   	pop    eax
c0012db9:	5a                   	pop    edx
c0012dba:	68 f7 e9 01 c0       	push   0xc001e9f7
c0012dbf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012dc6:	50                   	push   eax
c0012dc7:	e8 14 da fe ff       	call   c00007e0 <strcat>
c0012dcc:	83 c4 10             	add    esp,0x10
c0012dcf:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012dd4:	0f 84 5d 01 00 00    	je     c0012f37 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012dda:	83 ec 0c             	sub    esp,0xc
c0012ddd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012de4:	50                   	push   eax
c0012de5:	e8 0d d9 ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c0012dea:	83 c4 10             	add    esp,0x10
c0012ded:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012df1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012df5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0012df9:	80 fb 01             	cmp    bl,0x1
c0012dfc:	0f 85 88 00 00 00    	jne    c0012e8a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0012e02:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012e09:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012e0d:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0012e11:	01 ce                	add    esi,ecx
c0012e13:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012e19:	0f 94 c0             	sete   al
c0012e1c:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012e22:	0f 94 c3             	sete   bl
c0012e25:	09 c3                	or     ebx,eax
c0012e27:	8b 06                	mov    eax,DWORD PTR [esi]
c0012e29:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012e2e:	74 41                	je     c0012e71 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0012e30:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012e33:	84 db                	test   bl,bl
c0012e35:	75 15                	jne    c0012e4c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0012e37:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012e3b:	66 83 f8 0c          	cmp    ax,0xc
c0012e3f:	76 05                	jbe    c0012e46 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0012e41:	b8 0c 00 00 00       	mov    eax,0xc
c0012e46:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012e4a:	76 37                	jbe    c0012e83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012e4c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012e50:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012e55:	0f 84 dc 00 00 00    	je     c0012f37 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012e5b:	83 ec 0c             	sub    esp,0xc
c0012e5e:	68 78 e9 01 c0       	push   0xc001e978
c0012e63:	e8 8f d8 ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c0012e68:	83 c4 10             	add    esp,0x10
c0012e6b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012e6f:	eb 12                	jmp    c0012e83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012e71:	01 c1                	add    ecx,eax
c0012e73:	84 db                	test   bl,bl
c0012e75:	75 0c                	jne    c0012e83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012e77:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012e7b:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012e7f:	77 02                	ja     c0012e83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012e81:	01 d1                	add    ecx,edx
c0012e83:	89 0e                	mov    DWORD PTR [esi],ecx
c0012e85:	e9 ea 00 00 00       	jmp    c0012f74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012e8a:	80 fb 02             	cmp    bl,0x2
c0012e8d:	75 7c                	jne    c0012f0b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0012e8f:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012e96:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0012e9a:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0012e9e:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012ea4:	74 20                	je     c0012ec6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012ea6:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012eac:	74 18                	je     c0012ec6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012eae:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012eb2:	b9 0a 00 00 00       	mov    ecx,0xa
c0012eb7:	66 83 f8 0e          	cmp    ax,0xe
c0012ebb:	77 03                	ja     c0012ec0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012ebd:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012ec0:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012ec4:	76 1f                	jbe    c0012ee5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0012ec6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0012eca:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012ecf:	74 66                	je     c0012f37 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012ed1:	83 ec 0c             	sub    esp,0xc
c0012ed4:	68 94 e9 01 c0       	push   0xc001e994
c0012ed9:	e8 19 d8 ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c0012ede:	83 c4 10             	add    esp,0x10
c0012ee1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012ee5:	8b 06                	mov    eax,DWORD PTR [esi]
c0012ee7:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012eec:	74 13                	je     c0012f01 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0012eee:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012ef2:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012ef9:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0012efd:	01 c8                	add    eax,ecx
c0012eff:	eb 04                	jmp    c0012f05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012f01:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012f05:	01 c2                	add    edx,eax
c0012f07:	89 16                	mov    DWORD PTR [esi],edx
c0012f09:	eb 69                	jmp    c0012f74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012f0b:	0f b6 db             	movzx  ebx,bl
c0012f0e:	50                   	push   eax
c0012f0f:	50                   	push   eax
c0012f10:	53                   	push   ebx
c0012f11:	68 b0 e9 01 c0       	push   0xc001e9b0
c0012f16:	e8 8d 7c ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c0012f1b:	83 c4 10             	add    esp,0x10
c0012f1e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012f23:	74 12                	je     c0012f37 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012f25:	83 ec 0c             	sub    esp,0xc
c0012f28:	68 bb e9 01 c0       	push   0xc001e9bb
c0012f2d:	e8 c5 d7 ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c0012f32:	83 c4 10             	add    esp,0x10
c0012f35:	eb 3d                	jmp    c0012f74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012f37:	83 ec 0c             	sub    esp,0xc
c0012f3a:	55                   	push   ebp
c0012f3b:	e8 fc 82 ff ff       	call   c000b23c <File::close()>
c0012f40:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012f43:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012f46:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f49:	59                   	pop    ecx
c0012f4a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f4e:	e8 d6 4e ff ff       	call   c0007e29 <free>
c0012f53:	5b                   	pop    ebx
c0012f54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012f58:	e8 cc 4e ff ff       	call   c0007e29 <free>
c0012f5d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012f60:	e8 c4 4e ff ff       	call   c0007e29 <free>
c0012f65:	5e                   	pop    esi
c0012f66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f6a:	e8 ba 4e ff ff       	call   c0007e29 <free>
c0012f6f:	83 c4 10             	add    esp,0x10
c0012f72:	eb 21                	jmp    c0012f95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012f74:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012f78:	e9 76 fd ff ff       	jmp    c0012cf3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0012f7d:	83 ec 0c             	sub    esp,0xc
c0012f80:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f84:	e8 a0 4e ff ff       	call   c0007e29 <free>
c0012f89:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0012f8d:	83 c4 10             	add    esp,0x10
c0012f90:	e9 eb fc ff ff       	jmp    c0012c80 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012f95:	31 c0                	xor    eax,eax
c0012f97:	eb 33                	jmp    c0012fcc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012f99:	83 ec 0c             	sub    esp,0xc
c0012f9c:	55                   	push   ebp
c0012f9d:	e8 9a 82 ff ff       	call   c000b23c <File::close()>
c0012fa2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012fa5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012fa8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012fab:	58                   	pop    eax
c0012fac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012fb0:	e8 74 4e ff ff       	call   c0007e29 <free>
c0012fb5:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012fb8:	e8 6c 4e ff ff       	call   c0007e29 <free>
c0012fbd:	5a                   	pop    edx
c0012fbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fc2:	e8 62 4e ff ff       	call   c0007e29 <free>
c0012fc7:	83 c4 10             	add    esp,0x10
c0012fca:	b0 01                	mov    al,0x1
c0012fcc:	81 c4 5c 03 00 00    	add    esp,0x35c
c0012fd2:	5b                   	pop    ebx
c0012fd3:	5e                   	pop    esi
c0012fd4:	5f                   	pop    edi
c0012fd5:	5d                   	pop    ebp
c0012fd6:	c3                   	ret    

c0012fd7 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0012fd7:	56                   	push   esi
c0012fd8:	31 d2                	xor    edx,edx
c0012fda:	53                   	push   ebx
c0012fdb:	8b 1d 00 36 02 c0    	mov    ebx,DWORD PTR ds:0xc0023600
c0012fe1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012fe5:	39 d3                	cmp    ebx,edx
c0012fe7:	7e 1b                	jle    c0013004 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0012fe9:	8b 04 95 20 38 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc7e0]
c0012ff0:	39 c8                	cmp    eax,ecx
c0012ff2:	77 0d                	ja     c0013001 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0012ff4:	8b 34 95 20 36 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdc9e0]
c0012ffb:	01 c6                	add    esi,eax
c0012ffd:	39 ce                	cmp    esi,ecx
c0012fff:	77 05                	ja     c0013006 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0013001:	42                   	inc    edx
c0013002:	eb e1                	jmp    c0012fe5 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0013004:	31 c0                	xor    eax,eax
c0013006:	5b                   	pop    ebx
c0013007:	5e                   	pop    esi
c0013008:	c3                   	ret    

c0013009 <Thr::getDriverNameFromAddress(unsigned long)>:
c0013009:	53                   	push   ebx
c001300a:	31 c0                	xor    eax,eax
c001300c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013010:	8b 1d 00 36 02 c0    	mov    ebx,DWORD PTR ds:0xc0023600
c0013016:	39 c3                	cmp    ebx,eax
c0013018:	7e 22                	jle    c001303c <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001301a:	8b 14 85 20 38 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc7e0]
c0013021:	39 ca                	cmp    edx,ecx
c0013023:	77 14                	ja     c0013039 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0013025:	03 14 85 20 36 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdc9e0]
c001302c:	39 ca                	cmp    edx,ecx
c001302e:	76 09                	jbe    c0013039 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0013030:	8b 04 85 20 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc5e0]
c0013037:	eb 05                	jmp    c001303e <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0013039:	40                   	inc    eax
c001303a:	eb da                	jmp    c0013016 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001303c:	31 c0                	xor    eax,eax
c001303e:	5b                   	pop    ebx
c001303f:	c3                   	ret    

c0013040 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0013040:	53                   	push   ebx
c0013041:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0013045:	53                   	push   ebx
c0013046:	e8 8c ff ff ff       	call   c0012fd7 <Thr::getDriverBaseFromAddress(unsigned long)>
c001304b:	5a                   	pop    edx
c001304c:	31 d2                	xor    edx,edx
c001304e:	85 c0                	test   eax,eax
c0013050:	74 04                	je     c0013056 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0013052:	89 da                	mov    edx,ebx
c0013054:	29 c2                	sub    edx,eax
c0013056:	89 d0                	mov    eax,edx
c0013058:	5b                   	pop    ebx
c0013059:	c3                   	ret    

c001305a <Thr::loadDLL(char const*, bool)>:
c001305a:	55                   	push   ebp
c001305b:	57                   	push   edi
c001305c:	56                   	push   esi
c001305d:	53                   	push   ebx
c001305e:	81 ec 34 01 00 00    	sub    esp,0x134
c0013064:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001306b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0013072:	56                   	push   esi
c0013073:	68 d3 e9 01 c0       	push   0xc001e9d3
c0013078:	e8 2b 7b ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c001307d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013084:	e8 90 4d ff ff       	call   c0007e19 <malloc>
c0013089:	83 c4 0c             	add    esp,0xc
c001308c:	89 c3                	mov    ebx,eax
c001308e:	ff 35 f0 3d 02 c0    	push   DWORD PTR ds:0xc0023df0
c0013094:	56                   	push   esi
c0013095:	50                   	push   eax
c0013096:	e8 83 80 ff ff       	call   c000b11e <File::File(char const*, Process*)>
c001309b:	83 c4 10             	add    esp,0x10
c001309e:	85 db                	test   ebx,ebx
c00130a0:	75 3c                	jne    c00130de <Thr::loadDLL(char const*, bool)+0x84>
c00130a2:	89 f8                	mov    eax,edi
c00130a4:	84 c0                	test   al,al
c00130a6:	0f 84 d2 01 00 00    	je     c001327e <Thr::loadDLL(char const*, bool)+0x224>
c00130ac:	55                   	push   ebp
c00130ad:	55                   	push   ebp
c00130ae:	68 e4 e9 01 c0       	push   0xc001e9e4
c00130b3:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00130b7:	55                   	push   ebp
c00130b8:	e8 63 d5 fe ff       	call   c0000620 <strcpy>
c00130bd:	58                   	pop    eax
c00130be:	5a                   	pop    edx
c00130bf:	56                   	push   esi
c00130c0:	55                   	push   ebp
c00130c1:	e8 1a d7 fe ff       	call   c00007e0 <strcat>
c00130c6:	59                   	pop    ecx
c00130c7:	58                   	pop    eax
c00130c8:	68 f7 e9 01 c0       	push   0xc001e9f7
c00130cd:	55                   	push   ebp
c00130ce:	e8 0d d7 fe ff       	call   c00007e0 <strcat>
c00130d3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00130d6:	e8 1c d6 ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c00130db:	83 c4 10             	add    esp,0x10
c00130de:	51                   	push   ecx
c00130df:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00130e3:	50                   	push   eax
c00130e4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00130e8:	50                   	push   eax
c00130e9:	53                   	push   ebx
c00130ea:	e8 9b 83 ff ff       	call   c000b48a <File::stat(unsigned long long*, bool*)>
c00130ef:	83 c4 10             	add    esp,0x10
c00130f2:	85 db                	test   ebx,ebx
c00130f4:	74 0c                	je     c0013102 <Thr::loadDLL(char const*, bool)+0xa8>
c00130f6:	83 ec 0c             	sub    esp,0xc
c00130f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00130fb:	53                   	push   ebx
c00130fc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00130ff:	83 c4 10             	add    esp,0x10
c0013102:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0013107:	75 0a                	jne    c0013113 <Thr::loadDLL(char const*, bool)+0xb9>
c0013109:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001310d:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0013111:	75 3c                	jne    c001314f <Thr::loadDLL(char const*, bool)+0xf5>
c0013113:	89 f8                	mov    eax,edi
c0013115:	84 c0                	test   al,al
c0013117:	0f 84 49 01 00 00    	je     c0013266 <Thr::loadDLL(char const*, bool)+0x20c>
c001311d:	51                   	push   ecx
c001311e:	51                   	push   ecx
c001311f:	68 e4 e9 01 c0       	push   0xc001e9e4
c0013124:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0013128:	53                   	push   ebx
c0013129:	e8 f2 d4 fe ff       	call   c0000620 <strcpy>
c001312e:	5d                   	pop    ebp
c001312f:	58                   	pop    eax
c0013130:	56                   	push   esi
c0013131:	53                   	push   ebx
c0013132:	e8 a9 d6 fe ff       	call   c00007e0 <strcat>
c0013137:	58                   	pop    eax
c0013138:	5a                   	pop    edx
c0013139:	68 f7 e9 01 c0       	push   0xc001e9f7
c001313e:	53                   	push   ebx
c001313f:	e8 9c d6 fe ff       	call   c00007e0 <strcat>
c0013144:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013147:	e8 ab d5 ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c001314c:	83 c4 10             	add    esp,0x10
c001314f:	52                   	push   edx
c0013150:	6a 03                	push   0x3
c0013152:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013156:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001315a:	05 ff 0f 00 00       	add    eax,0xfff
c001315f:	83 d2 00             	adc    edx,0x0
c0013162:	0f ac d0 0c          	shrd   eax,edx,0xc
c0013166:	50                   	push   eax
c0013167:	ff 35 f0 09 02 c0    	push   DWORD PTR ds:0xc00209f0
c001316d:	e8 7c 6f ff ff       	call   c000a0ee <VAS::allocatePages(int, int)>
c0013172:	59                   	pop    ecx
c0013173:	89 c3                	mov    ebx,eax
c0013175:	5d                   	pop    ebp
c0013176:	50                   	push   eax
c0013177:	68 de d7 01 c0       	push   0xc001d7de
c001317c:	e8 27 7a ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c0013181:	89 34 24             	mov    DWORD PTR [esp],esi
c0013184:	e8 d7 d3 fe ff       	call   c0000560 <strlen>
c0013189:	8b 2d 00 36 02 c0    	mov    ebp,DWORD PTR ds:0xc0023600
c001318f:	40                   	inc    eax
c0013190:	89 04 24             	mov    DWORD PTR [esp],eax
c0013193:	e8 81 4c ff ff       	call   c0007e19 <malloc>
c0013198:	89 04 ad 20 3a 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdc5e0],eax
c001319f:	58                   	pop    eax
c00131a0:	a1 00 36 02 c0       	mov    eax,ds:0xc0023600
c00131a5:	5a                   	pop    edx
c00131a6:	56                   	push   esi
c00131a7:	ff 34 85 20 3a 02 c0 	push   DWORD PTR [eax*4-0x3ffdc5e0]
c00131ae:	e8 6d d4 fe ff       	call   c0000620 <strcpy>
c00131b3:	a1 00 36 02 c0       	mov    eax,ds:0xc0023600
c00131b8:	8d 50 01             	lea    edx,[eax+0x1]
c00131bb:	89 1c 85 20 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7e0],ebx
c00131c2:	89 15 00 36 02 c0    	mov    DWORD PTR ds:0xc0023600,edx
c00131c8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00131cc:	83 c4 0c             	add    esp,0xc
c00131cf:	89 14 85 20 36 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc9e0],edx
c00131d6:	6a 01                	push   0x1
c00131d8:	53                   	push   ebx
c00131d9:	56                   	push   esi
c00131da:	e8 c2 f6 ff ff       	call   c00128a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00131df:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00131e3:	83 c4 10             	add    esp,0x10
c00131e6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00131eb:	0f 85 89 00 00 00    	jne    c001327a <Thr::loadDLL(char const*, bool)+0x220>
c00131f1:	89 f8                	mov    eax,edi
c00131f3:	84 c0                	test   al,al
c00131f5:	74 73                	je     c001326a <Thr::loadDLL(char const*, bool)+0x210>
c00131f7:	83 ec 0c             	sub    esp,0xc
c00131fa:	68 f9 e9 01 c0       	push   0xc001e9f9
c00131ff:	e8 f3 d4 ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c0013204:	83 c4 10             	add    esp,0x10
c0013207:	eb 61                	jmp    c001326a <Thr::loadDLL(char const*, bool)+0x210>
c0013209:	50                   	push   eax
c001320a:	50                   	push   eax
c001320b:	89 e8                	mov    eax,ebp
c001320d:	c1 e0 0c             	shl    eax,0xc
c0013210:	01 d8                	add    eax,ebx
c0013212:	50                   	push   eax
c0013213:	ff 35 f0 09 02 c0    	push   DWORD PTR ds:0xc00209f0
c0013219:	e8 48 6a ff ff       	call   c0009c66 <VAS::getPageTableEntry(unsigned long)>
c001321e:	83 c4 10             	add    esp,0x10
c0013221:	8b 00                	mov    eax,DWORD PTR [eax]
c0013223:	a8 60                	test   al,0x60
c0013225:	75 11                	jne    c0013238 <Thr::loadDLL(char const*, bool)+0x1de>
c0013227:	83 ec 0c             	sub    esp,0xc
c001322a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001322f:	50                   	push   eax
c0013230:	e8 4f 4f ff ff       	call   c0008184 <Phys::freePage(unsigned long)>
c0013235:	83 c4 10             	add    esp,0x10
c0013238:	45                   	inc    ebp
c0013239:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001323d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013241:	05 ff 0f 00 00       	add    eax,0xfff
c0013246:	bf 00 00 00 00       	mov    edi,0x0
c001324b:	83 d2 00             	adc    edx,0x0
c001324e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0013252:	c1 ea 0c             	shr    edx,0xc
c0013255:	39 c5                	cmp    ebp,eax
c0013257:	89 d1                	mov    ecx,edx
c0013259:	89 f8                	mov    eax,edi
c001325b:	19 c8                	sbb    eax,ecx
c001325d:	72 aa                	jb     c0013209 <Thr::loadDLL(char const*, bool)+0x1af>
c001325f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013264:	75 18                	jne    c001327e <Thr::loadDLL(char const*, bool)+0x224>
c0013266:	31 db                	xor    ebx,ebx
c0013268:	eb 14                	jmp    c001327e <Thr::loadDLL(char const*, bool)+0x224>
c001326a:	83 ec 0c             	sub    esp,0xc
c001326d:	68 18 ea 01 c0       	push   0xc001ea18
c0013272:	e8 80 d4 ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c0013277:	83 c4 10             	add    esp,0x10
c001327a:	31 ed                	xor    ebp,ebp
c001327c:	eb bb                	jmp    c0013239 <Thr::loadDLL(char const*, bool)+0x1df>
c001327e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013284:	89 d8                	mov    eax,ebx
c0013286:	5b                   	pop    ebx
c0013287:	5e                   	pop    esi
c0013288:	5f                   	pop    edi
c0013289:	5d                   	pop    ebp
c001328a:	c3                   	ret    

c001328b <Thr::executeDLL(unsigned long, void*)>:
c001328b:	56                   	push   esi
c001328c:	53                   	push   ebx
c001328d:	52                   	push   edx
c001328e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013292:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013296:	85 db                	test   ebx,ebx
c0013298:	75 10                	jne    c00132aa <Thr::executeDLL(unsigned long, void*)+0x1f>
c001329a:	83 ec 0c             	sub    esp,0xc
c001329d:	68 34 ea 01 c0       	push   0xc001ea34
c00132a2:	e8 50 d4 ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c00132a7:	83 c4 10             	add    esp,0x10
c00132aa:	50                   	push   eax
c00132ab:	50                   	push   eax
c00132ac:	53                   	push   ebx
c00132ad:	68 5e ea 01 c0       	push   0xc001ea5e
c00132b2:	e8 f1 78 ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c00132b7:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00132bb:	89 d8                	mov    eax,ebx
c00132bd:	83 c4 14             	add    esp,0x14
c00132c0:	5b                   	pop    ebx
c00132c1:	5e                   	pop    esi
c00132c2:	ff e0                	jmp    eax

c00132c4 <userModeEntryPoint(void*)>:
c00132c4:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c00132c9:	48                   	dec    eax
c00132ca:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c00132cf:	75 03                	jne    c00132d4 <userModeEntryPoint(void*)+0x10>
c00132d1:	fb                   	sti    
c00132d2:	66 90                	xchg   ax,ax
c00132d4:	fb                   	sti    
c00132d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00132da:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00132dd:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00132e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00132e7:	e9 73 cf fe ff       	jmp    c000025f <goToUsermode>

c00132ec <changeTSS>:
c00132ec:	83 ec 14             	sub    esp,0x14
c00132ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00132f4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00132f7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00132fc:	c1 e2 15             	shl    edx,0x15
c00132ff:	29 d0                	sub    eax,edx
c0013301:	50                   	push   eax
c0013302:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c0013307:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001330d:	05 7c 11 00 00       	add    eax,0x117c
c0013312:	50                   	push   eax
c0013313:	e8 90 5f ff ff       	call   c00092a8 <TSS::setESP(unsigned long)>
c0013318:	83 c4 1c             	add    esp,0x1c
c001331b:	c3                   	ret    

c001331c <switchToThread(ThreadControlBlock*)>:
c001331c:	57                   	push   edi
c001331d:	a1 c4 3d 02 c0       	mov    eax,ds:0xc0023dc4
c0013322:	56                   	push   esi
c0013323:	85 c0                	test   eax,eax
c0013325:	53                   	push   ebx
c0013326:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001332a:	0f 85 90 00 00 00    	jne    c00133c0 <switchToThread(ThreadControlBlock*)+0xa4>
c0013330:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c0013333:	80 fa ff             	cmp    dl,0xff
c0013336:	0f 84 80 00 00 00    	je     c00133bc <switchToThread(ThreadControlBlock*)+0xa0>
c001333c:	81 e2 ff 00 00 00    	and    edx,0xff
c0013342:	b8 00 04 00 00       	mov    eax,0x400
c0013347:	29 d0                	sub    eax,edx
c0013349:	d1 f8                	sar    eax,1
c001334b:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c001334e:	66 90                	xchg   ax,ax
c0013350:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0013353:	e8 7b 24 00 00       	call   c00157d3 <HalQueryPerformanceCounter()>
c0013358:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c001335d:	89 15 0c 3e 02 c0    	mov    DWORD PTR ds:0xc0023e0c,edx
c0013363:	89 c6                	mov    esi,eax
c0013365:	89 d7                	mov    edi,edx
c0013367:	2b 35 f8 3d 02 c0    	sub    esi,DWORD PTR ds:0xc0023df8
c001336d:	a3 f8 3d 02 c0       	mov    ds:0xc0023df8,eax
c0013372:	1b 3d fc 3d 02 c0    	sbb    edi,DWORD PTR ds:0xc0023dfc
c0013378:	89 35 00 3e 02 c0    	mov    DWORD PTR ds:0xc0023e00,esi
c001337e:	89 3d 04 3e 02 c0    	mov    DWORD PTR ds:0xc0023e04,edi
c0013384:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001338a:	89 15 fc 3d 02 c0    	mov    DWORD PTR ds:0xc0023dfc,edx
c0013390:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0013393:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0013396:	01 c6                	add    esi,eax
c0013398:	11 d7                	adc    edi,edx
c001339a:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c001339d:	83 ec 0c             	sub    esp,0xc
c00133a0:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00133a3:	53                   	push   ebx
c00133a4:	e8 ee ce fe ff       	call   c0000297 <switchToThreadASM>
c00133a9:	0f 20 c0             	mov    eax,cr0
c00133ac:	83 c8 08             	or     eax,0x8
c00133af:	0f 22 c0             	mov    cr0,eax
c00133b2:	83 c4 10             	add    esp,0x10
c00133b5:	5b                   	pop    ebx
c00133b6:	5e                   	pop    esi
c00133b7:	5f                   	pop    edi
c00133b8:	c3                   	ret    
c00133b9:	8d 76 00             	lea    esi,[esi+0x0]
c00133bc:	31 c0                	xor    eax,eax
c00133be:	eb 90                	jmp    c0013350 <switchToThread(ThreadControlBlock*)+0x34>
c00133c0:	5b                   	pop    ebx
c00133c1:	c7 05 c0 3d 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023dc0,0x1
c00133cb:	5e                   	pop    esi
c00133cc:	5f                   	pop    edi
c00133cd:	c3                   	ret    
c00133ce:	66 90                	xchg   ax,ax

c00133d0 <Process::addArgs(char**)>:
c00133d0:	57                   	push   edi
c00133d1:	56                   	push   esi
c00133d2:	53                   	push   ebx
c00133d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00133d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00133db:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00133e5:	85 ff                	test   edi,edi
c00133e7:	74 43                	je     c001342c <Process::addArgs(char**)+0x5c>
c00133e9:	8b 07                	mov    eax,DWORD PTR [edi]
c00133eb:	85 c0                	test   eax,eax
c00133ed:	74 3d                	je     c001342c <Process::addArgs(char**)+0x5c>
c00133ef:	31 db                	xor    ebx,ebx
c00133f1:	8d 76 00             	lea    esi,[esi+0x0]
c00133f4:	83 ec 0c             	sub    esp,0xc
c00133f7:	50                   	push   eax
c00133f8:	e8 63 d1 fe ff       	call   c0000560 <strlen>
c00133fd:	40                   	inc    eax
c00133fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0013401:	e8 13 4a ff ff       	call   c0007e19 <malloc>
c0013406:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c001340d:	5a                   	pop    edx
c001340e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013411:	59                   	pop    ecx
c0013412:	43                   	inc    ebx
c0013413:	52                   	push   edx
c0013414:	50                   	push   eax
c0013415:	e8 06 d2 fe ff       	call   c0000620 <strcpy>
c001341a:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0013420:	83 c4 10             	add    esp,0x10
c0013423:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0013426:	85 c0                	test   eax,eax
c0013428:	75 ca                	jne    c00133f4 <Process::addArgs(char**)+0x24>
c001342a:	66 90                	xchg   ax,ax
c001342c:	5b                   	pop    ebx
c001342d:	5e                   	pop    esi
c001342e:	5f                   	pop    edi
c001342f:	c3                   	ret    

c0013430 <Process::Process(char const*, Process*, char**)>:
c0013430:	56                   	push   esi
c0013431:	53                   	push   ebx
c0013432:	83 ec 14             	sub    esp,0x14
c0013435:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013439:	05 0c 02 00 00       	add    eax,0x20c
c001343e:	bb 07 00 00 00       	mov    ebx,0x7
c0013443:	89 c6                	mov    esi,eax
c0013445:	8d 76 00             	lea    esi,[esi+0x0]
c0013448:	85 db                	test   ebx,ebx
c001344a:	78 14                	js     c0013460 <Process::Process(char const*, Process*, char**)+0x30>
c001344c:	83 ec 0c             	sub    esp,0xc
c001344f:	56                   	push   esi
c0013450:	e8 27 96 00 00       	call   c001ca7c <ThreadControlBlock::ThreadControlBlock()>
c0013455:	83 c4 10             	add    esp,0x10
c0013458:	83 c6 5f             	add    esi,0x5f
c001345b:	4b                   	dec    ebx
c001345c:	eb ea                	jmp    c0013448 <Process::Process(char const*, Process*, char**)+0x18>
c001345e:	66 90                	xchg   ax,ax
c0013460:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013464:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001346b:	83 ec 0c             	sub    esp,0xc
c001346e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013472:	e8 09 d1 ff ff       	call   c0010580 <Krnl::newProcessEnv(Process*)>
c0013477:	83 c4 10             	add    esp,0x10
c001347a:	89 c2                	mov    edx,eax
c001347c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013480:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0013486:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001348a:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0013493:	a1 d0 f8 01 c0       	mov    eax,ds:0xc001f8d0
c0013498:	8d 50 01             	lea    edx,[eax+0x1]
c001349b:	89 15 d0 f8 01 c0    	mov    DWORD PTR ds:0xc001f8d0,edx
c00134a1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00134a5:	89 02                	mov    DWORD PTR [edx],eax
c00134a7:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00134af:	83 ec 0c             	sub    esp,0xc
c00134b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00134b6:	e8 5e 49 ff ff       	call   c0007e19 <malloc>
c00134bb:	83 c4 10             	add    esp,0x10
c00134be:	89 c3                	mov    ebx,eax
c00134c0:	83 ec 08             	sub    esp,0x8
c00134c3:	6a 00                	push   0x0
c00134c5:	53                   	push   ebx
c00134c6:	e8 cd 6f ff ff       	call   c000a498 <VAS::VAS(bool)>
c00134cb:	83 c4 10             	add    esp,0x10
c00134ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134d2:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00134d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134dc:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00134e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134ea:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00134ee:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00134f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134f8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00134fe:	85 c0                	test   eax,eax
c0013500:	74 42                	je     c0013544 <Process::Process(char const*, Process*, char**)+0x114>
c0013502:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013506:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001350c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013512:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013516:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001351c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013520:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013526:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001352c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013530:	05 0c 01 00 00       	add    eax,0x10c
c0013535:	83 ec 08             	sub    esp,0x8
c0013538:	52                   	push   edx
c0013539:	50                   	push   eax
c001353a:	e8 e1 d0 fe ff       	call   c0000620 <strcpy>
c001353f:	83 c4 10             	add    esp,0x10
c0013542:	eb 64                	jmp    c00135a8 <Process::Process(char const*, Process*, char**)+0x178>
c0013544:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c001354c:	83 ec 0c             	sub    esp,0xc
c001354f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013553:	e8 c1 48 ff ff       	call   c0007e19 <malloc>
c0013558:	83 c4 10             	add    esp,0x10
c001355b:	89 c3                	mov    ebx,eax
c001355d:	83 ec 08             	sub    esp,0x8
c0013560:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013564:	53                   	push   ebx
c0013565:	e8 e2 5a ff ff       	call   c000904c <VgaText::VgaText(char const*)>
c001356a:	83 c4 10             	add    esp,0x10
c001356d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013571:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0013577:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001357b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013581:	83 ec 0c             	sub    esp,0xc
c0013584:	50                   	push   eax
c0013585:	e8 62 53 ff ff       	call   c00088ec <addToTerminalCycle(VgaText*)>
c001358a:	83 c4 10             	add    esp,0x10
c001358d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013591:	05 0c 01 00 00       	add    eax,0x10c
c0013596:	83 ec 08             	sub    esp,0x8
c0013599:	68 7d ea 01 c0       	push   0xc001ea7d
c001359e:	50                   	push   eax
c001359f:	e8 7c d0 fe ff       	call   c0000620 <strcpy>
c00135a4:	83 c4 10             	add    esp,0x10
c00135a7:	90                   	nop
c00135a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135ac:	83 c0 0c             	add    eax,0xc
c00135af:	83 ec 08             	sub    esp,0x8
c00135b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00135b6:	50                   	push   eax
c00135b7:	e8 64 d0 fe ff       	call   c0000620 <strcpy>
c00135bc:	83 c4 10             	add    esp,0x10
c00135bf:	83 ec 08             	sub    esp,0x8
c00135c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00135c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00135ca:	e8 01 fe ff ff       	call   c00133d0 <Process::addArgs(char**)>
c00135cf:	83 c4 10             	add    esp,0x10
c00135d2:	83 ec 08             	sub    esp,0x8
c00135d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00135d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00135dd:	e8 89 ed ff ff       	call   c001236b <Thr::loadProgramIntoMemory(Process*, char const*)>
c00135e2:	83 c4 10             	add    esp,0x10
c00135e5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00135e9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00135ed:	83 f0 01             	xor    eax,0x1
c00135f0:	88 c2                	mov    dl,al
c00135f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135f6:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00135fc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013600:	25 ff 00 00 00       	and    eax,0xff
c0013605:	83 ec 08             	sub    esp,0x8
c0013608:	50                   	push   eax
c0013609:	68 d4 ea 01 c0       	push   0xc001ead4
c001360e:	e8 95 75 ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c0013613:	83 c4 10             	add    esp,0x10
c0013616:	90                   	nop
c0013617:	83 c4 14             	add    esp,0x14
c001361a:	5b                   	pop    ebx
c001361b:	5e                   	pop    esi
c001361c:	c3                   	ret    
c001361d:	90                   	nop
c001361e:	66 90                	xchg   ax,ax

c0013620 <Process::Process(bool, char const*, Process*, char**)>:
c0013620:	56                   	push   esi
c0013621:	53                   	push   ebx
c0013622:	83 ec 24             	sub    esp,0x24
c0013625:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013629:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001362d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013631:	05 0c 02 00 00       	add    eax,0x20c
c0013636:	bb 07 00 00 00       	mov    ebx,0x7
c001363b:	89 c6                	mov    esi,eax
c001363d:	8d 76 00             	lea    esi,[esi+0x0]
c0013640:	85 db                	test   ebx,ebx
c0013642:	78 14                	js     c0013658 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0013644:	83 ec 0c             	sub    esp,0xc
c0013647:	56                   	push   esi
c0013648:	e8 2f 94 00 00       	call   c001ca7c <ThreadControlBlock::ThreadControlBlock()>
c001364d:	83 c4 10             	add    esp,0x10
c0013650:	83 c6 5f             	add    esi,0x5f
c0013653:	4b                   	dec    ebx
c0013654:	eb ea                	jmp    c0013640 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0013656:	66 90                	xchg   ax,ax
c0013658:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001365c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0013663:	83 ec 0c             	sub    esp,0xc
c0013666:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001366a:	e8 11 cf ff ff       	call   c0010580 <Krnl::newProcessEnv(Process*)>
c001366f:	83 c4 10             	add    esp,0x10
c0013672:	89 c2                	mov    edx,eax
c0013674:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013678:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001367e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013682:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001368b:	a1 d0 f8 01 c0       	mov    eax,ds:0xc001f8d0
c0013690:	8d 50 01             	lea    edx,[eax+0x1]
c0013693:	89 15 d0 f8 01 c0    	mov    DWORD PTR ds:0xc001f8d0,edx
c0013699:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001369d:	89 02                	mov    DWORD PTR [edx],eax
c001369f:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00136a7:	83 ec 0c             	sub    esp,0xc
c00136aa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00136ae:	e8 66 47 ff ff       	call   c0007e19 <malloc>
c00136b3:	83 c4 10             	add    esp,0x10
c00136b6:	89 c3                	mov    ebx,eax
c00136b8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00136bc:	25 ff 00 00 00       	and    eax,0xff
c00136c1:	83 ec 08             	sub    esp,0x8
c00136c4:	50                   	push   eax
c00136c5:	53                   	push   ebx
c00136c6:	e8 cd 6d ff ff       	call   c000a498 <VAS::VAS(bool)>
c00136cb:	83 c4 10             	add    esp,0x10
c00136ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136d2:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00136d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136dc:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00136e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136ea:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00136ee:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00136f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136f8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00136fe:	85 c0                	test   eax,eax
c0013700:	74 42                	je     c0013744 <Process::Process(bool, char const*, Process*, char**)+0x124>
c0013702:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013706:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001370c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013712:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013716:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001371c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013720:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013726:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001372c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013730:	05 0c 01 00 00       	add    eax,0x10c
c0013735:	83 ec 08             	sub    esp,0x8
c0013738:	52                   	push   edx
c0013739:	50                   	push   eax
c001373a:	e8 e1 ce fe ff       	call   c0000620 <strcpy>
c001373f:	83 c4 10             	add    esp,0x10
c0013742:	eb 64                	jmp    c00137a8 <Process::Process(bool, char const*, Process*, char**)+0x188>
c0013744:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c001374c:	83 ec 0c             	sub    esp,0xc
c001374f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013753:	e8 c1 46 ff ff       	call   c0007e19 <malloc>
c0013758:	83 c4 10             	add    esp,0x10
c001375b:	89 c3                	mov    ebx,eax
c001375d:	83 ec 08             	sub    esp,0x8
c0013760:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013764:	53                   	push   ebx
c0013765:	e8 e2 58 ff ff       	call   c000904c <VgaText::VgaText(char const*)>
c001376a:	83 c4 10             	add    esp,0x10
c001376d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013771:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0013777:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001377b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013781:	83 ec 0c             	sub    esp,0xc
c0013784:	50                   	push   eax
c0013785:	e8 62 51 ff ff       	call   c00088ec <addToTerminalCycle(VgaText*)>
c001378a:	83 c4 10             	add    esp,0x10
c001378d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013791:	05 0c 01 00 00       	add    eax,0x10c
c0013796:	83 ec 08             	sub    esp,0x8
c0013799:	68 7d ea 01 c0       	push   0xc001ea7d
c001379e:	50                   	push   eax
c001379f:	e8 7c ce fe ff       	call   c0000620 <strcpy>
c00137a4:	83 c4 10             	add    esp,0x10
c00137a7:	90                   	nop
c00137a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00137ac:	83 c0 0c             	add    eax,0xc
c00137af:	83 ec 08             	sub    esp,0x8
c00137b2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00137b6:	50                   	push   eax
c00137b7:	e8 64 ce fe ff       	call   c0000620 <strcpy>
c00137bc:	83 c4 10             	add    esp,0x10
c00137bf:	83 ec 08             	sub    esp,0x8
c00137c2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00137c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00137ca:	e8 01 fc ff ff       	call   c00133d0 <Process::addArgs(char**)>
c00137cf:	83 c4 10             	add    esp,0x10
c00137d2:	90                   	nop
c00137d3:	83 c4 24             	add    esp,0x24
c00137d6:	5b                   	pop    ebx
c00137d7:	5e                   	pop    esi
c00137d8:	c3                   	ret    
c00137d9:	8d 76 00             	lea    esi,[esi+0x0]

c00137dc <taskStartupFunction>:
c00137dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137e1:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00137e4:	c3                   	ret    
c00137e5:	90                   	nop
c00137e6:	66 90                	xchg   ax,ax

c00137e8 <Semaphore::Semaphore(int)>:
c00137e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00137f0:	89 10                	mov    DWORD PTR [eax],edx
c00137f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137f6:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00137fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013801:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013808:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001380c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013813:	90                   	nop
c0013814:	c3                   	ret    
c0013815:	90                   	nop
c0013816:	66 90                	xchg   ax,ax

c0013818 <Mutex::Mutex()>:
c0013818:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001381c:	6a 01                	push   0x1
c001381e:	50                   	push   eax
c001381f:	e8 c4 ff ff ff       	call   c00137e8 <Semaphore::Semaphore(int)>
c0013824:	83 c4 08             	add    esp,0x8
c0013827:	90                   	nop
c0013828:	c3                   	ret    
c0013829:	90                   	nop
c001382a:	66 90                	xchg   ax,ax

c001382c <Process::createThread(void (*)(void*), void*, int)>:
c001382c:	57                   	push   edi
c001382d:	31 c9                	xor    ecx,ecx
c001382f:	56                   	push   esi
c0013830:	53                   	push   ebx
c0013831:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013835:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c001383c:	89 f2                	mov    edx,esi
c001383e:	66 90                	xchg   ax,ax
c0013840:	31 c0                	xor    eax,eax
c0013842:	66 89 d0             	mov    ax,dx
c0013845:	83 e2 01             	and    edx,0x1
c0013848:	74 12                	je     c001385c <Process::createThread(void (*)(void*), void*, int)+0x30>
c001384a:	d1 f8                	sar    eax,1
c001384c:	41                   	inc    ecx
c001384d:	89 c2                	mov    edx,eax
c001384f:	83 f9 10             	cmp    ecx,0x10
c0013852:	75 ec                	jne    c0013840 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0013854:	31 db                	xor    ebx,ebx
c0013856:	89 d8                	mov    eax,ebx
c0013858:	5b                   	pop    ebx
c0013859:	5e                   	pop    esi
c001385a:	5f                   	pop    edi
c001385b:	c3                   	ret    
c001385c:	b8 01 00 00 00       	mov    eax,0x1
c0013861:	d3 e0                	shl    eax,cl
c0013863:	09 c6                	or     esi,eax
c0013865:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0013868:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c001386f:	01 c0                	add    eax,eax
c0013871:	01 c8                	add    eax,ecx
c0013873:	8d 04 80             	lea    eax,[eax+eax*4]
c0013876:	01 d8                	add    eax,ebx
c0013878:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c001387f:	75 0b                	jne    c001388c <Process::createThread(void (*)(void*), void*, int)+0x60>
c0013881:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c001388b:	90                   	nop
c001388c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0013892:	83 ec 08             	sub    esp,0x8
c0013895:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013898:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001389b:	01 c0                	add    eax,eax
c001389d:	01 c8                	add    eax,ecx
c001389f:	8d 3c 80             	lea    edi,[eax+eax*4]
c00138a2:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00138a5:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00138ab:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00138b1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00138b5:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00138bb:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00138c1:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00138c8:	89 ca                	mov    edx,ecx
c00138ca:	f7 da                	neg    edx
c00138cc:	c1 e2 15             	shl    edx,0x15
c00138cf:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00138d5:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00138db:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00138df:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00138e9:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00138ef:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00138f3:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00138f9:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0013903:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001390d:	53                   	push   ebx
c001390e:	68 e4 3d 02 c0       	push   0xc0023de4
c0013913:	e8 04 8f 00 00       	call   c001c81c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013918:	83 c4 10             	add    esp,0x10
c001391b:	89 d8                	mov    eax,ebx
c001391d:	5b                   	pop    ebx
c001391e:	5e                   	pop    esi
c001391f:	5f                   	pop    edi
c0013920:	c3                   	ret    
c0013921:	90                   	nop
c0013922:	66 90                	xchg   ax,ax

c0013924 <Process::createUserThread()>:
c0013924:	83 ec 0c             	sub    esp,0xc
c0013927:	68 80 00 00 00       	push   0x80
c001392c:	6a 00                	push   0x0
c001392e:	68 c4 32 01 c0       	push   0xc00132c4
c0013933:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013937:	50                   	push   eax
c0013938:	e8 ef fe ff ff       	call   c001382c <Process::createThread(void (*)(void*), void*, int)>
c001393d:	83 c4 1c             	add    esp,0x1c
c0013940:	c3                   	ret    
c0013941:	8d 76 00             	lea    esi,[esi+0x0]

c0013944 <setupMultitasking(void (*)())>:
c0013944:	56                   	push   esi
c0013945:	53                   	push   ebx
c0013946:	53                   	push   ebx
c0013947:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001394b:	eb 13                	jmp    c0013960 <setupMultitasking(void (*)())+0x1c>
c001394d:	8d 76 00             	lea    esi,[esi+0x0]
c0013950:	83 ec 0c             	sub    esp,0xc
c0013953:	68 e4 3d 02 c0       	push   0xc0023de4
c0013958:	e8 07 8e 00 00       	call   c001c764 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001395d:	83 c4 10             	add    esp,0x10
c0013960:	83 ec 0c             	sub    esp,0xc
c0013963:	68 e4 3d 02 c0       	push   0xc0023de4
c0013968:	e8 d3 8d 00 00       	call   c001c740 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001396d:	83 c4 10             	add    esp,0x10
c0013970:	84 c0                	test   al,al
c0013972:	74 dc                	je     c0013950 <setupMultitasking(void (*)())+0xc>
c0013974:	83 ec 0c             	sub    esp,0xc
c0013977:	68 1f 07 00 00       	push   0x71f
c001397c:	e8 98 44 ff ff       	call   c0007e19 <malloc>
c0013981:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0013988:	89 c3                	mov    ebx,eax
c001398a:	6a 00                	push   0x0
c001398c:	68 81 ea 01 c0       	push   0xc001ea81
c0013991:	6a 01                	push   0x1
c0013993:	50                   	push   eax
c0013994:	e8 87 fc ff ff       	call   c0013620 <Process::Process(bool, char const*, Process*, char**)>
c0013999:	83 c4 14             	add    esp,0x14
c001399c:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00139a2:	89 1d f0 3d 02 c0    	mov    DWORD PTR ds:0xc0023df0,ebx
c00139a8:	50                   	push   eax
c00139a9:	e8 9b 51 ff ff       	call   c0008b49 <setActiveTerminal(VgaText*)>
c00139ae:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c00139b6:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00139c0:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00139c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00139c9:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00139d3:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00139d9:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00139df:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00139e9:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00139f3:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00139fd:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0013a03:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0013a09:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0013a13:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0013a19:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0013a23:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0013a29:	5a                   	pop    edx
c0013a2a:	59                   	pop    ecx
c0013a2b:	68 7d ea 01 c0       	push   0xc001ea7d
c0013a30:	50                   	push   eax
c0013a31:	e8 ea cb fe ff       	call   c0000620 <strcpy>
c0013a36:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0013a3d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0013a41:	83 c4 14             	add    esp,0x14
c0013a44:	5b                   	pop    ebx
c0013a45:	5e                   	pop    esi
c0013a46:	e9 3e c8 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0013a4b:	90                   	nop

c0013a4c <schedule()>:
c0013a4c:	8b 15 c4 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023dc4
c0013a52:	85 d2                	test   edx,edx
c0013a54:	74 0e                	je     c0013a64 <schedule()+0x18>
c0013a56:	c7 05 c0 3d 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023dc0,0x1
c0013a60:	c3                   	ret    
c0013a61:	8d 76 00             	lea    esi,[esi+0x0]
c0013a64:	53                   	push   ebx
c0013a65:	83 ec 14             	sub    esp,0x14
c0013a68:	68 e4 3d 02 c0       	push   0xc0023de4
c0013a6d:	e8 ce 8c 00 00       	call   c001c740 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013a72:	83 c4 10             	add    esp,0x10
c0013a75:	84 c0                	test   al,al
c0013a77:	75 3b                	jne    c0013ab4 <schedule()+0x68>
c0013a79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a7e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0013a81:	4a                   	dec    edx
c0013a82:	74 38                	je     c0013abc <schedule()+0x70>
c0013a84:	83 ec 0c             	sub    esp,0xc
c0013a87:	68 e4 3d 02 c0       	push   0xc0023de4
c0013a8c:	e8 cb 8c 00 00       	call   c001c75c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013a91:	c7 04 24 e4 3d 02 c0 	mov    DWORD PTR [esp],0xc0023de4
c0013a98:	89 c3                	mov    ebx,eax
c0013a9a:	e8 c5 8c 00 00       	call   c001c764 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013a9f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0013aa6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013aa9:	e8 6e f8 ff ff       	call   c001331c <switchToThread(ThreadControlBlock*)>
c0013aae:	83 c4 10             	add    esp,0x10
c0013ab1:	8d 76 00             	lea    esi,[esi+0x0]
c0013ab4:	83 c4 08             	add    esp,0x8
c0013ab7:	5b                   	pop    ebx
c0013ab8:	c3                   	ret    
c0013ab9:	8d 76 00             	lea    esi,[esi+0x0]
c0013abc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0013ac3:	83 ec 08             	sub    esp,0x8
c0013ac6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013acb:	50                   	push   eax
c0013acc:	68 e4 3d 02 c0       	push   0xc0023de4
c0013ad1:	e8 46 8d 00 00       	call   c001c81c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013ad6:	83 c4 10             	add    esp,0x10
c0013ad9:	eb a9                	jmp    c0013a84 <schedule()+0x38>
c0013adb:	90                   	nop

c0013adc <Semaphore::tryAcquire()>:
c0013adc:	53                   	push   ebx
c0013add:	83 ec 08             	sub    esp,0x8
c0013ae0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013ae4:	fa                   	cli    
c0013ae5:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c0013aea:	8d 50 01             	lea    edx,[eax+0x1]
c0013aed:	89 15 c8 3d 02 c0    	mov    DWORD PTR ds:0xc0023dc8,edx
c0013af3:	8b 15 c4 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023dc4
c0013af9:	8d 5a 01             	lea    ebx,[edx+0x1]
c0013afc:	89 1d c4 3d 02 c0    	mov    DWORD PTR ds:0xc0023dc4,ebx
c0013b02:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0013b05:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0013b07:	7c 33                	jl     c0013b3c <Semaphore::tryAcquire()+0x60>
c0013b09:	89 15 c4 3d 02 c0    	mov    DWORD PTR ds:0xc0023dc4,edx
c0013b0f:	85 d2                	test   edx,edx
c0013b11:	75 0d                	jne    c0013b20 <Semaphore::tryAcquire()+0x44>
c0013b13:	8b 15 c0 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023dc0
c0013b19:	85 d2                	test   edx,edx
c0013b1b:	75 6b                	jne    c0013b88 <Semaphore::tryAcquire()+0xac>
c0013b1d:	8d 76 00             	lea    esi,[esi+0x0]
c0013b20:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c0013b25:	85 c0                	test   eax,eax
c0013b27:	74 0b                	je     c0013b34 <Semaphore::tryAcquire()+0x58>
c0013b29:	8d 76 00             	lea    esi,[esi+0x0]
c0013b2c:	31 c0                	xor    eax,eax
c0013b2e:	83 c4 08             	add    esp,0x8
c0013b31:	5b                   	pop    ebx
c0013b32:	c3                   	ret    
c0013b33:	90                   	nop
c0013b34:	fb                   	sti    
c0013b35:	83 c4 08             	add    esp,0x8
c0013b38:	5b                   	pop    ebx
c0013b39:	c3                   	ret    
c0013b3a:	66 90                	xchg   ax,ax
c0013b3c:	43                   	inc    ebx
c0013b3d:	89 15 c4 3d 02 c0    	mov    DWORD PTR ds:0xc0023dc4,edx
c0013b43:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0013b46:	85 d2                	test   edx,edx
c0013b48:	75 22                	jne    c0013b6c <Semaphore::tryAcquire()+0x90>
c0013b4a:	8b 0d c0 3d 02 c0    	mov    ecx,DWORD PTR ds:0xc0023dc0
c0013b50:	85 c9                	test   ecx,ecx
c0013b52:	74 18                	je     c0013b6c <Semaphore::tryAcquire()+0x90>
c0013b54:	c7 05 c0 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023dc0,0x0
c0013b5e:	e8 e9 fe ff ff       	call   c0013a4c <schedule()>
c0013b63:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c0013b68:	48                   	dec    eax
c0013b69:	8d 76 00             	lea    esi,[esi+0x0]
c0013b6c:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c0013b71:	85 c0                	test   eax,eax
c0013b73:	75 0b                	jne    c0013b80 <Semaphore::tryAcquire()+0xa4>
c0013b75:	fb                   	sti    
c0013b76:	b0 01                	mov    al,0x1
c0013b78:	83 c4 08             	add    esp,0x8
c0013b7b:	5b                   	pop    ebx
c0013b7c:	c3                   	ret    
c0013b7d:	8d 76 00             	lea    esi,[esi+0x0]
c0013b80:	b0 01                	mov    al,0x1
c0013b82:	83 c4 08             	add    esp,0x8
c0013b85:	5b                   	pop    ebx
c0013b86:	c3                   	ret    
c0013b87:	90                   	nop
c0013b88:	c7 05 c0 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023dc0,0x0
c0013b92:	e8 b5 fe ff ff       	call   c0013a4c <schedule()>
c0013b97:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c0013b9c:	48                   	dec    eax
c0013b9d:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c0013ba2:	85 c0                	test   eax,eax
c0013ba4:	75 86                	jne    c0013b2c <Semaphore::tryAcquire()+0x50>
c0013ba6:	eb 8c                	jmp    c0013b34 <Semaphore::tryAcquire()+0x58>

c0013ba8 <Semaphore::assertLocked(char const*)>:
c0013ba8:	83 ec 0c             	sub    esp,0xc
c0013bab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013baf:	fa                   	cli    
c0013bb0:	ff 05 c8 3d 02 c0    	inc    DWORD PTR ds:0xc0023dc8
c0013bb6:	a1 c4 3d 02 c0       	mov    eax,ds:0xc0023dc4
c0013bbb:	8d 48 01             	lea    ecx,[eax+0x1]
c0013bbe:	89 0d c4 3d 02 c0    	mov    DWORD PTR ds:0xc0023dc4,ecx
c0013bc4:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013bc6:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0013bc9:	7c 29                	jl     c0013bf4 <Semaphore::assertLocked(char const*)+0x4c>
c0013bcb:	90                   	nop
c0013bcc:	a3 c4 3d 02 c0       	mov    ds:0xc0023dc4,eax
c0013bd1:	85 c0                	test   eax,eax
c0013bd3:	75 0b                	jne    c0013be0 <Semaphore::assertLocked(char const*)+0x38>
c0013bd5:	a1 c0 3d 02 c0       	mov    eax,ds:0xc0023dc0
c0013bda:	85 c0                	test   eax,eax
c0013bdc:	75 2e                	jne    c0013c0c <Semaphore::assertLocked(char const*)+0x64>
c0013bde:	66 90                	xchg   ax,ax
c0013be0:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c0013be5:	48                   	dec    eax
c0013be6:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c0013beb:	75 03                	jne    c0013bf0 <Semaphore::assertLocked(char const*)+0x48>
c0013bed:	fb                   	sti    
c0013bee:	66 90                	xchg   ax,ax
c0013bf0:	83 c4 0c             	add    esp,0xc
c0013bf3:	c3                   	ret    
c0013bf4:	83 ec 0c             	sub    esp,0xc
c0013bf7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013bfb:	52                   	push   edx
c0013bfc:	e8 f6 ca ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c0013c01:	a1 c4 3d 02 c0       	mov    eax,ds:0xc0023dc4
c0013c06:	83 c4 10             	add    esp,0x10
c0013c09:	48                   	dec    eax
c0013c0a:	eb c0                	jmp    c0013bcc <Semaphore::assertLocked(char const*)+0x24>
c0013c0c:	c7 05 c0 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023dc0,0x0
c0013c16:	e8 31 fe ff ff       	call   c0013a4c <schedule()>
c0013c1b:	eb c3                	jmp    c0013be0 <Semaphore::assertLocked(char const*)+0x38>
c0013c1d:	8d 76 00             	lea    esi,[esi+0x0]

c0013c20 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0013c20:	83 ec 0c             	sub    esp,0xc
c0013c23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c28:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c2c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013c2f:	e8 18 fe ff ff       	call   c0013a4c <schedule()>
c0013c34:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c0013c39:	48                   	dec    eax
c0013c3a:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c0013c3f:	75 03                	jne    c0013c44 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0013c41:	fb                   	sti    
c0013c42:	66 90                	xchg   ax,ax
c0013c44:	83 c4 0c             	add    esp,0xc
c0013c47:	c3                   	ret    

c0013c48 <blockTask(TaskState)>:
c0013c48:	83 ec 0c             	sub    esp,0xc
c0013c4b:	fa                   	cli    
c0013c4c:	ff 05 c8 3d 02 c0    	inc    DWORD PTR ds:0xc0023dc8
c0013c52:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c56:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c5b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013c5e:	e8 e9 fd ff ff       	call   c0013a4c <schedule()>
c0013c63:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c0013c68:	48                   	dec    eax
c0013c69:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c0013c6e:	75 04                	jne    c0013c74 <blockTask(TaskState)+0x2c>
c0013c70:	fb                   	sti    
c0013c71:	8d 76 00             	lea    esi,[esi+0x0]
c0013c74:	83 c4 0c             	add    esp,0xc
c0013c77:	c3                   	ret    

c0013c78 <waitTask(int, int*, int)>:
c0013c78:	83 ec 18             	sub    esp,0x18
c0013c7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c80:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013c84:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0013c87:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013c8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c90:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0013c93:	6a 07                	push   0x7
c0013c95:	e8 ae ff ff ff       	call   c0013c48 <blockTask(TaskState)>
c0013c9a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c9f:	83 c4 10             	add    esp,0x10
c0013ca2:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0013ca5:	85 d2                	test   edx,edx
c0013ca7:	74 0b                	je     c0013cb4 <waitTask(int, int*, int)+0x3c>
c0013ca9:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0013cac:	89 02                	mov    DWORD PTR [edx],eax
c0013cae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cb3:	90                   	nop
c0013cb4:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0013cb7:	83 c4 0c             	add    esp,0xc
c0013cba:	c3                   	ret    
c0013cbb:	90                   	nop

c0013cbc <milliTenthSleepUntil(unsigned int)>:
c0013cbc:	83 ec 0c             	sub    esp,0xc
c0013cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cc3:	39 05 cc 2e 02 c0    	cmp    DWORD PTR ds:0xc0022ecc,eax
c0013cc9:	76 05                	jbe    c0013cd0 <milliTenthSleepUntil(unsigned int)+0x14>
c0013ccb:	90                   	nop
c0013ccc:	83 c4 0c             	add    esp,0xc
c0013ccf:	c3                   	ret    
c0013cd0:	fa                   	cli    
c0013cd1:	ff 05 c8 3d 02 c0    	inc    DWORD PTR ds:0xc0023dc8
c0013cd7:	83 ec 08             	sub    esp,0x8
c0013cda:	ff 05 c4 3d 02 c0    	inc    DWORD PTR ds:0xc0023dc4
c0013ce0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013ce6:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013ce9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013cef:	52                   	push   edx
c0013cf0:	68 d8 3d 02 c0       	push   0xc0023dd8
c0013cf5:	e8 22 8b 00 00       	call   c001c81c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013cfa:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013d01:	e8 42 ff ff ff       	call   c0013c48 <blockTask(TaskState)>
c0013d06:	a1 c4 3d 02 c0       	mov    eax,ds:0xc0023dc4
c0013d0b:	83 c4 10             	add    esp,0x10
c0013d0e:	48                   	dec    eax
c0013d0f:	a3 c4 3d 02 c0       	mov    ds:0xc0023dc4,eax
c0013d14:	85 c0                	test   eax,eax
c0013d16:	75 0c                	jne    c0013d24 <milliTenthSleepUntil(unsigned int)+0x68>
c0013d18:	a1 c0 3d 02 c0       	mov    eax,ds:0xc0023dc0
c0013d1d:	85 c0                	test   eax,eax
c0013d1f:	75 17                	jne    c0013d38 <milliTenthSleepUntil(unsigned int)+0x7c>
c0013d21:	8d 76 00             	lea    esi,[esi+0x0]
c0013d24:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c0013d29:	48                   	dec    eax
c0013d2a:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c0013d2f:	75 9b                	jne    c0013ccc <milliTenthSleepUntil(unsigned int)+0x10>
c0013d31:	fb                   	sti    
c0013d32:	83 c4 0c             	add    esp,0xc
c0013d35:	c3                   	ret    
c0013d36:	66 90                	xchg   ax,ax
c0013d38:	c7 05 c0 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023dc0,0x0
c0013d42:	e8 05 fd ff ff       	call   c0013a4c <schedule()>
c0013d47:	eb db                	jmp    c0013d24 <milliTenthSleepUntil(unsigned int)+0x68>
c0013d49:	8d 76 00             	lea    esi,[esi+0x0]

c0013d4c <milliTenthSleep(unsigned int)>:
c0013d4c:	a1 cc 2e 02 c0       	mov    eax,ds:0xc0022ecc
c0013d51:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0013d55:	e9 62 ff ff ff       	jmp    c0013cbc <milliTenthSleepUntil(unsigned int)>
c0013d5a:	66 90                	xchg   ax,ax

c0013d5c <sleep(unsigned int)>:
c0013d5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d60:	8d 04 80             	lea    eax,[eax+eax*4]
c0013d63:	8d 04 80             	lea    eax,[eax+eax*4]
c0013d66:	8d 04 80             	lea    eax,[eax+eax*4]
c0013d69:	8d 04 80             	lea    eax,[eax+eax*4]
c0013d6c:	c1 e0 04             	shl    eax,0x4
c0013d6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013d73:	eb d7                	jmp    c0013d4c <milliTenthSleep(unsigned int)>
c0013d75:	90                   	nop
c0013d76:	66 90                	xchg   ax,ax

c0013d78 <Semaphore::acquire()>:
c0013d78:	83 ec 0c             	sub    esp,0xc
c0013d7b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013d7f:	fa                   	cli    
c0013d80:	a1 c4 3d 02 c0       	mov    eax,ds:0xc0023dc4
c0013d85:	ff 05 c8 3d 02 c0    	inc    DWORD PTR ds:0xc0023dc8
c0013d8b:	8d 48 01             	lea    ecx,[eax+0x1]
c0013d8e:	89 0d c4 3d 02 c0    	mov    DWORD PTR ds:0xc0023dc4,ecx
c0013d94:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0013d97:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013d99:	7d 2d                	jge    c0013dc8 <Semaphore::acquire()+0x50>
c0013d9b:	41                   	inc    ecx
c0013d9c:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0013d9f:	90                   	nop
c0013da0:	a3 c4 3d 02 c0       	mov    ds:0xc0023dc4,eax
c0013da5:	85 c0                	test   eax,eax
c0013da7:	75 0b                	jne    c0013db4 <Semaphore::acquire()+0x3c>
c0013da9:	a1 c0 3d 02 c0       	mov    eax,ds:0xc0023dc0
c0013dae:	85 c0                	test   eax,eax
c0013db0:	75 62                	jne    c0013e14 <Semaphore::acquire()+0x9c>
c0013db2:	66 90                	xchg   ax,ax
c0013db4:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c0013db9:	48                   	dec    eax
c0013dba:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c0013dbf:	75 03                	jne    c0013dc4 <Semaphore::acquire()+0x4c>
c0013dc1:	fb                   	sti    
c0013dc2:	66 90                	xchg   ax,ax
c0013dc4:	83 c4 0c             	add    esp,0xc
c0013dc7:	c3                   	ret    
c0013dc8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013dcd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013dd4:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013dd7:	85 c9                	test   ecx,ecx
c0013dd9:	74 4d                	je     c0013e28 <Semaphore::acquire()+0xb0>
c0013ddb:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0013dde:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013de4:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0013de7:	90                   	nop
c0013de8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ded:	83 ec 0c             	sub    esp,0xc
c0013df0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0013df3:	68 fc ea 01 c0       	push   0xc001eafc
c0013df8:	e8 ab 6d ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c0013dfd:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013e04:	e8 3f fe ff ff       	call   c0013c48 <blockTask(TaskState)>
c0013e09:	a1 c4 3d 02 c0       	mov    eax,ds:0xc0023dc4
c0013e0e:	83 c4 10             	add    esp,0x10
c0013e11:	48                   	dec    eax
c0013e12:	eb 8c                	jmp    c0013da0 <Semaphore::acquire()+0x28>
c0013e14:	c7 05 c0 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023dc0,0x0
c0013e1e:	e8 29 fc ff ff       	call   c0013a4c <schedule()>
c0013e23:	eb 8f                	jmp    c0013db4 <Semaphore::acquire()+0x3c>
c0013e25:	8d 76 00             	lea    esi,[esi+0x0]
c0013e28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e2d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013e30:	eb b6                	jmp    c0013de8 <Semaphore::acquire()+0x70>
c0013e32:	66 90                	xchg   ax,ax

c0013e34 <taskReturned>:
c0013e34:	83 ec 18             	sub    esp,0x18
c0013e37:	68 1c eb 01 c0       	push   0xc001eb1c
c0013e3c:	e8 b6 c8 ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c0013e41:	83 c4 10             	add    esp,0x10
c0013e44:	83 ec 0c             	sub    esp,0xc
c0013e47:	6a 02                	push   0x2
c0013e49:	e8 fa fd ff ff       	call   c0013c48 <blockTask(TaskState)>
c0013e4e:	fa                   	cli    
c0013e4f:	ff 05 c8 3d 02 c0    	inc    DWORD PTR ds:0xc0023dc8
c0013e55:	e8 f2 fb ff ff       	call   c0013a4c <schedule()>
c0013e5a:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c0013e5f:	83 c4 10             	add    esp,0x10
c0013e62:	48                   	dec    eax
c0013e63:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c0013e68:	85 c0                	test   eax,eax
c0013e6a:	75 d8                	jne    c0013e44 <taskReturned+0x10>
c0013e6c:	fb                   	sti    
c0013e6d:	eb d5                	jmp    c0013e44 <taskReturned+0x10>
c0013e6f:	90                   	nop

c0013e70 <Thr::processFromPID(int)>:
c0013e70:	57                   	push   edi
c0013e71:	56                   	push   esi
c0013e72:	53                   	push   ebx
c0013e73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013e77:	fa                   	cli    
c0013e78:	ff 05 c8 3d 02 c0    	inc    DWORD PTR ds:0xc0023dc8
c0013e7e:	83 ec 0c             	sub    esp,0xc
c0013e81:	68 e4 3d 02 c0       	push   0xc0023de4
c0013e86:	e8 d1 88 00 00       	call   c001c75c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013e8b:	83 c4 10             	add    esp,0x10
c0013e8e:	89 c7                	mov    edi,eax
c0013e90:	eb 16                	jmp    c0013ea8 <Thr::processFromPID(int)+0x38>
c0013e92:	66 90                	xchg   ax,ax
c0013e94:	83 ec 0c             	sub    esp,0xc
c0013e97:	68 e4 3d 02 c0       	push   0xc0023de4
c0013e9c:	e8 bb 88 00 00       	call   c001c75c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ea1:	83 c4 10             	add    esp,0x10
c0013ea4:	39 f8                	cmp    eax,edi
c0013ea6:	74 4c                	je     c0013ef4 <Thr::processFromPID(int)+0x84>
c0013ea8:	83 ec 0c             	sub    esp,0xc
c0013eab:	68 e4 3d 02 c0       	push   0xc0023de4
c0013eb0:	e8 a7 88 00 00       	call   c001c75c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013eb5:	c7 04 24 e4 3d 02 c0 	mov    DWORD PTR [esp],0xc0023de4
c0013ebc:	89 c3                	mov    ebx,eax
c0013ebe:	e8 a1 88 00 00       	call   c001c764 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013ec3:	58                   	pop    eax
c0013ec4:	5a                   	pop    edx
c0013ec5:	53                   	push   ebx
c0013ec6:	68 e4 3d 02 c0       	push   0xc0023de4
c0013ecb:	e8 4c 89 00 00       	call   c001c81c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013ed0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013ed3:	83 c4 10             	add    esp,0x10
c0013ed6:	39 30                	cmp    DWORD PTR [eax],esi
c0013ed8:	75 ba                	jne    c0013e94 <Thr::processFromPID(int)+0x24>
c0013eda:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c0013edf:	48                   	dec    eax
c0013ee0:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c0013ee5:	74 09                	je     c0013ef0 <Thr::processFromPID(int)+0x80>
c0013ee7:	90                   	nop
c0013ee8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013eeb:	5b                   	pop    ebx
c0013eec:	5e                   	pop    esi
c0013eed:	5f                   	pop    edi
c0013eee:	c3                   	ret    
c0013eef:	90                   	nop
c0013ef0:	fb                   	sti    
c0013ef1:	eb f5                	jmp    c0013ee8 <Thr::processFromPID(int)+0x78>
c0013ef3:	90                   	nop
c0013ef4:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c0013ef9:	48                   	dec    eax
c0013efa:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c0013eff:	75 07                	jne    c0013f08 <Thr::processFromPID(int)+0x98>
c0013f01:	fb                   	sti    
c0013f02:	5b                   	pop    ebx
c0013f03:	5e                   	pop    esi
c0013f04:	5f                   	pop    edi
c0013f05:	c3                   	ret    
c0013f06:	66 90                	xchg   ax,ax
c0013f08:	5b                   	pop    ebx
c0013f09:	31 c0                	xor    eax,eax
c0013f0b:	5e                   	pop    esi
c0013f0c:	5f                   	pop    edi
c0013f0d:	c3                   	ret    
c0013f0e:	66 90                	xchg   ax,ax

c0013f10 <unblockTask(ThreadControlBlock*)>:
c0013f10:	53                   	push   ebx
c0013f11:	83 ec 08             	sub    esp,0x8
c0013f14:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f18:	fa                   	cli    
c0013f19:	ff 05 c8 3d 02 c0    	inc    DWORD PTR ds:0xc0023dc8
c0013f1f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013f22:	85 c0                	test   eax,eax
c0013f24:	74 66                	je     c0013f8c <unblockTask(ThreadControlBlock*)+0x7c>
c0013f26:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013f29:	48                   	dec    eax
c0013f2a:	74 38                	je     c0013f64 <unblockTask(ThreadControlBlock*)+0x54>
c0013f2c:	83 ec 0c             	sub    esp,0xc
c0013f2f:	68 e4 3d 02 c0       	push   0xc0023de4
c0013f34:	e8 23 88 00 00       	call   c001c75c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f39:	83 c4 10             	add    esp,0x10
c0013f3c:	85 c0                	test   eax,eax
c0013f3e:	75 1c                	jne    c0013f5c <unblockTask(ThreadControlBlock*)+0x4c>
c0013f40:	eb 5e                	jmp    c0013fa0 <unblockTask(ThreadControlBlock*)+0x90>
c0013f42:	66 90                	xchg   ax,ax
c0013f44:	83 ec 08             	sub    esp,0x8
c0013f47:	50                   	push   eax
c0013f48:	68 e4 3d 02 c0       	push   0xc0023de4
c0013f4d:	e8 ba 8b 00 00       	call   c001cb0c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013f52:	83 c4 10             	add    esp,0x10
c0013f55:	85 c0                	test   eax,eax
c0013f57:	74 47                	je     c0013fa0 <unblockTask(ThreadControlBlock*)+0x90>
c0013f59:	8d 76 00             	lea    esi,[esi+0x0]
c0013f5c:	39 c3                	cmp    ebx,eax
c0013f5e:	75 e4                	jne    c0013f44 <unblockTask(ThreadControlBlock*)+0x34>
c0013f60:	eb 12                	jmp    c0013f74 <unblockTask(ThreadControlBlock*)+0x64>
c0013f62:	66 90                	xchg   ax,ax
c0013f64:	83 ec 0c             	sub    esp,0xc
c0013f67:	68 9f ea 01 c0       	push   0xc001ea9f
c0013f6c:	e8 37 6c ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c0013f71:	83 c4 10             	add    esp,0x10
c0013f74:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c0013f79:	48                   	dec    eax
c0013f7a:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c0013f7f:	75 03                	jne    c0013f84 <unblockTask(ThreadControlBlock*)+0x74>
c0013f81:	fb                   	sti    
c0013f82:	66 90                	xchg   ax,ax
c0013f84:	83 c4 08             	add    esp,0x8
c0013f87:	5b                   	pop    ebx
c0013f88:	c3                   	ret    
c0013f89:	8d 76 00             	lea    esi,[esi+0x0]
c0013f8c:	83 ec 0c             	sub    esp,0xc
c0013f8f:	68 88 ea 01 c0       	push   0xc001ea88
c0013f94:	e8 0f 6c ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c0013f99:	83 c4 10             	add    esp,0x10
c0013f9c:	eb d6                	jmp    c0013f74 <unblockTask(ThreadControlBlock*)+0x64>
c0013f9e:	66 90                	xchg   ax,ax
c0013fa0:	83 ec 08             	sub    esp,0x8
c0013fa3:	53                   	push   ebx
c0013fa4:	68 e4 3d 02 c0       	push   0xc0023de4
c0013fa9:	e8 6e 88 00 00       	call   c001c81c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013fae:	83 c4 10             	add    esp,0x10
c0013fb1:	eb c1                	jmp    c0013f74 <unblockTask(ThreadControlBlock*)+0x64>
c0013fb3:	90                   	nop

c0013fb4 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0013fb4:	55                   	push   ebp
c0013fb5:	57                   	push   edi
c0013fb6:	56                   	push   esi
c0013fb7:	53                   	push   ebx
c0013fb8:	83 ec 1c             	sub    esp,0x1c
c0013fbb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013fbf:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013fc2:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0013fc8:	85 ed                	test   ebp,ebp
c0013fca:	7e 24                	jle    c0013ff0 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0013fcc:	31 f6                	xor    esi,esi
c0013fce:	66 90                	xchg   ax,ax
c0013fd0:	83 ec 0c             	sub    esp,0xc
c0013fd3:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0013fda:	46                   	inc    esi
c0013fdb:	57                   	push   edi
c0013fdc:	e8 48 3e ff ff       	call   c0007e29 <free>
c0013fe1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013fe4:	83 c4 10             	add    esp,0x10
c0013fe7:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0013fed:	7f e1                	jg     c0013fd0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0013fef:	90                   	nop
c0013ff0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013ffa:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013fff:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0014002:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0014005:	d3 c0                	rol    eax,cl
c0014007:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c001400e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014011:	89 f7                	mov    edi,esi
c0014013:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c001401b:	0f 85 77 01 00 00    	jne    c0014198 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0014021:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0014027:	85 ed                	test   ebp,ebp
c0014029:	74 1d                	je     c0014048 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c001402b:	83 ec 0c             	sub    esp,0xc
c001402e:	55                   	push   ebp
c001402f:	e8 68 c4 ff ff       	call   c001049c <EnvVarContainer::~EnvVarContainer()>
c0014034:	59                   	pop    ecx
c0014035:	5e                   	pop    esi
c0014036:	6a 0c                	push   0xc
c0014038:	55                   	push   ebp
c0014039:	e8 74 6a ff ff       	call   c000aab2 <operator delete(void*, unsigned long)>
c001403e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014041:	83 c4 10             	add    esp,0x10
c0014044:	89 f7                	mov    edi,esi
c0014046:	66 90                	xchg   ax,ax
c0014048:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001404e:	85 c0                	test   eax,eax
c0014050:	0f 84 b6 00 00 00    	je     c001410c <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0014056:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0014059:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001405d:	31 c9                	xor    ecx,ecx
c001405f:	eb 17                	jmp    c0014078 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0014061:	8d 76 00             	lea    esi,[esi+0x0]
c0014064:	41                   	inc    ecx
c0014065:	83 f9 10             	cmp    ecx,0x10
c0014068:	0f 84 9e 00 00 00    	je     c001410c <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c001406e:	66 90                	xchg   ax,ax
c0014070:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0014076:	66 90                	xchg   ax,ax
c0014078:	31 d2                	xor    edx,edx
c001407a:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0014081:	d3 fa                	sar    edx,cl
c0014083:	83 e2 01             	and    edx,0x1
c0014086:	74 dc                	je     c0014064 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0014088:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c001408b:	01 d2                	add    edx,edx
c001408d:	01 ca                	add    edx,ecx
c001408f:	8d 14 92             	lea    edx,[edx+edx*4]
c0014092:	01 d0                	add    eax,edx
c0014094:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001409a:	83 fd 07             	cmp    ebp,0x7
c001409d:	75 c5                	jne    c0014064 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001409f:	05 40 02 00 00       	add    eax,0x240
c00140a4:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00140a7:	83 fd ff             	cmp    ebp,0xffffffff
c00140aa:	0f 8c f0 00 00 00    	jl     c00141a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00140b0:	0f 84 ae 01 00 00    	je     c0014264 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c00140b6:	85 ed                	test   ebp,ebp
c00140b8:	0f 84 92 01 00 00    	je     c0014250 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c00140be:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00140c0:	75 a2                	jne    c0014064 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00140c2:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00140c8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00140cc:	01 d0                	add    eax,edx
c00140ce:	66 90                	xchg   ax,ax
c00140d0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00140d4:	83 ec 0c             	sub    esp,0xc
c00140d7:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00140dd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00140e0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00140e6:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00140ed:	50                   	push   eax
c00140ee:	e8 1d fe ff ff       	call   c0013f10 <unblockTask(ThreadControlBlock*)>
c00140f3:	83 c4 10             	add    esp,0x10
c00140f6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00140f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00140fd:	89 f7                	mov    edi,esi
c00140ff:	41                   	inc    ecx
c0014100:	83 f9 10             	cmp    ecx,0x10
c0014103:	0f 85 67 ff ff ff    	jne    c0014070 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0014109:	8d 76 00             	lea    esi,[esi+0x0]
c001410c:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0014112:	85 c0                	test   eax,eax
c0014114:	74 62                	je     c0014178 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0014116:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c001411c:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0014122:	74 54                	je     c0014178 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0014124:	83 ec 0c             	sub    esp,0xc
c0014127:	68 e4 3d 02 c0       	push   0xc0023de4
c001412c:	e8 2b 86 00 00       	call   c001c75c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014131:	c7 04 24 e4 3d 02 c0 	mov    DWORD PTR [esp],0xc0023de4
c0014138:	89 c7                	mov    edi,eax
c001413a:	e8 01 86 00 00       	call   c001c740 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001413f:	83 c4 10             	add    esp,0x10
c0014142:	84 c0                	test   al,al
c0014144:	0f 84 ce 00 00 00    	je     c0014218 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c001414a:	66 90                	xchg   ax,ax
c001414c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001414f:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014155:	85 d2                	test   edx,edx
c0014157:	74 0f                	je     c0014168 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0014159:	83 ec 0c             	sub    esp,0xc
c001415c:	8b 02                	mov    eax,DWORD PTR [edx]
c001415e:	52                   	push   edx
c001415f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014162:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014165:	83 c4 10             	add    esp,0x10
c0014168:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0014172:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0014175:	8d 76 00             	lea    esi,[esi+0x0]
c0014178:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001417e:	85 db                	test   ebx,ebx
c0014180:	74 16                	je     c0014198 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0014182:	83 ec 0c             	sub    esp,0xc
c0014185:	53                   	push   ebx
c0014186:	e8 fb 5c ff ff       	call   c0009e86 <VAS::~VAS()>
c001418b:	58                   	pop    eax
c001418c:	5a                   	pop    edx
c001418d:	6a 14                	push   0x14
c001418f:	53                   	push   ebx
c0014190:	e8 1d 69 ff ff       	call   c000aab2 <operator delete(void*, unsigned long)>
c0014195:	83 c4 10             	add    esp,0x10
c0014198:	83 c4 1c             	add    esp,0x1c
c001419b:	5b                   	pop    ebx
c001419c:	5e                   	pop    esi
c001419d:	5f                   	pop    edi
c001419e:	5d                   	pop    ebp
c001419f:	c3                   	ret    
c00141a0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00141a4:	83 ec 0c             	sub    esp,0xc
c00141a7:	68 50 eb 01 c0       	push   0xc001eb50
c00141ac:	e8 46 c5 ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c00141b1:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00141b4:	83 c4 10             	add    esp,0x10
c00141b7:	89 f7                	mov    edi,esi
c00141b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00141bd:	e9 a2 fe ff ff       	jmp    c0014064 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00141c2:	66 90                	xchg   ax,ax
c00141c4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00141ca:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00141d0:	75 1e                	jne    c00141f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c00141d2:	83 ec 0c             	sub    esp,0xc
c00141d5:	68 b8 eb 01 c0       	push   0xc001ebb8
c00141da:	e8 c9 69 ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c00141df:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00141e6:	e8 5d fa ff ff       	call   c0013c48 <blockTask(TaskState)>
c00141eb:	83 c4 10             	add    esp,0x10
c00141ee:	66 90                	xchg   ax,ax
c00141f0:	83 ec 08             	sub    esp,0x8
c00141f3:	56                   	push   esi
c00141f4:	68 e4 3d 02 c0       	push   0xc0023de4
c00141f9:	e8 1e 86 00 00       	call   c001c81c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00141fe:	c7 04 24 e4 3d 02 c0 	mov    DWORD PTR [esp],0xc0023de4
c0014205:	e8 52 85 00 00       	call   c001c75c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001420a:	83 c4 10             	add    esp,0x10
c001420d:	39 f8                	cmp    eax,edi
c001420f:	0f 84 37 ff ff ff    	je     c001414c <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0014215:	8d 76 00             	lea    esi,[esi+0x0]
c0014218:	83 ec 0c             	sub    esp,0xc
c001421b:	68 e4 3d 02 c0       	push   0xc0023de4
c0014220:	e8 37 85 00 00       	call   c001c75c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014225:	c7 04 24 e4 3d 02 c0 	mov    DWORD PTR [esp],0xc0023de4
c001422c:	89 c6                	mov    esi,eax
c001422e:	e8 31 85 00 00       	call   c001c764 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014233:	83 c4 10             	add    esp,0x10
c0014236:	39 f3                	cmp    ebx,esi
c0014238:	74 b6                	je     c00141f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c001423a:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c001423d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014240:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0014246:	75 a8                	jne    c00141f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014248:	e9 77 ff ff ff       	jmp    c00141c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c001424d:	8d 76 00             	lea    esi,[esi+0x0]
c0014250:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014254:	83 ec 0c             	sub    esp,0xc
c0014257:	68 84 eb 01 c0       	push   0xc001eb84
c001425c:	e9 4b ff ff ff       	jmp    c00141ac <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0014261:	8d 76 00             	lea    esi,[esi+0x0]
c0014264:	8b 36                	mov    esi,DWORD PTR [esi]
c0014266:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001426a:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c001426d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014270:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0014276:	01 d7                	add    edi,edx
c0014278:	89 f8                	mov    eax,edi
c001427a:	e9 51 fe ff ff       	jmp    c00140d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c001427f:	90                   	nop

c0014280 <cleanerTaskFunction(void*)>:
c0014280:	53                   	push   ebx
c0014281:	83 ec 08             	sub    esp,0x8
c0014284:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c0014289:	48                   	dec    eax
c001428a:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c001428f:	75 03                	jne    c0014294 <cleanerTaskFunction(void*)+0x14>
c0014291:	fb                   	sti    
c0014292:	66 90                	xchg   ax,ax
c0014294:	fa                   	cli    
c0014295:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c001429a:	80 3d ac 3d 02 c0 00 	cmp    BYTE PTR ds:0xc0023dac,0x0
c00142a1:	8d 50 01             	lea    edx,[eax+0x1]
c00142a4:	89 15 c8 3d 02 c0    	mov    DWORD PTR ds:0xc0023dc8,edx
c00142aa:	0f 84 ac 00 00 00    	je     c001435c <cleanerTaskFunction(void*)+0xdc>
c00142b0:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c00142b5:	85 c0                	test   eax,eax
c00142b7:	75 03                	jne    c00142bc <cleanerTaskFunction(void*)+0x3c>
c00142b9:	fb                   	sti    
c00142ba:	66 90                	xchg   ax,ax
c00142bc:	c6 05 ac 3d 02 c0 00 	mov    BYTE PTR ds:0xc0023dac,0x0
c00142c3:	fa                   	cli    
c00142c4:	ff 05 c8 3d 02 c0    	inc    DWORD PTR ds:0xc0023dc8
c00142ca:	ff 05 c4 3d 02 c0    	inc    DWORD PTR ds:0xc0023dc4
c00142d0:	fa                   	cli    
c00142d1:	ff 05 c8 3d 02 c0    	inc    DWORD PTR ds:0xc0023dc8
c00142d7:	eb 2b                	jmp    c0014304 <cleanerTaskFunction(void*)+0x84>
c00142d9:	8d 76 00             	lea    esi,[esi+0x0]
c00142dc:	83 ec 0c             	sub    esp,0xc
c00142df:	68 cc 3d 02 c0       	push   0xc0023dcc
c00142e4:	e8 73 84 00 00       	call   c001c75c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00142e9:	c7 04 24 cc 3d 02 c0 	mov    DWORD PTR [esp],0xc0023dcc
c00142f0:	89 c3                	mov    ebx,eax
c00142f2:	e8 6d 84 00 00       	call   c001c764 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00142f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00142fa:	e8 b5 fc ff ff       	call   c0013fb4 <cleanupTerminatedTask(ThreadControlBlock*)>
c00142ff:	83 c4 10             	add    esp,0x10
c0014302:	66 90                	xchg   ax,ax
c0014304:	83 ec 0c             	sub    esp,0xc
c0014307:	68 cc 3d 02 c0       	push   0xc0023dcc
c001430c:	e8 2f 84 00 00       	call   c001c740 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014311:	83 c4 10             	add    esp,0x10
c0014314:	84 c0                	test   al,al
c0014316:	74 c4                	je     c00142dc <cleanerTaskFunction(void*)+0x5c>
c0014318:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c001431d:	48                   	dec    eax
c001431e:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c0014323:	75 03                	jne    c0014328 <cleanerTaskFunction(void*)+0xa8>
c0014325:	fb                   	sti    
c0014326:	66 90                	xchg   ax,ax
c0014328:	a1 c4 3d 02 c0       	mov    eax,ds:0xc0023dc4
c001432d:	48                   	dec    eax
c001432e:	a3 c4 3d 02 c0       	mov    ds:0xc0023dc4,eax
c0014333:	0f 85 4b ff ff ff    	jne    c0014284 <cleanerTaskFunction(void*)+0x4>
c0014339:	a1 c0 3d 02 c0       	mov    eax,ds:0xc0023dc0
c001433e:	85 c0                	test   eax,eax
c0014340:	0f 84 3e ff ff ff    	je     c0014284 <cleanerTaskFunction(void*)+0x4>
c0014346:	c7 05 c0 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023dc0,0x0
c0014350:	e8 f7 f6 ff ff       	call   c0013a4c <schedule()>
c0014355:	e9 2a ff ff ff       	jmp    c0014284 <cleanerTaskFunction(void*)+0x4>
c001435a:	66 90                	xchg   ax,ax
c001435c:	83 ec 0c             	sub    esp,0xc
c001435f:	6a 02                	push   0x2
c0014361:	e8 ba f8 ff ff       	call   c0013c20 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0014366:	83 c4 10             	add    esp,0x10
c0014369:	e9 4e ff ff ff       	jmp    c00142bc <cleanerTaskFunction(void*)+0x3c>
c001436e:	66 90                	xchg   ax,ax

c0014370 <terminateTask(int)>:
c0014370:	83 ec 14             	sub    esp,0x14
c0014373:	fa                   	cli    
c0014374:	ff 05 c8 3d 02 c0    	inc    DWORD PTR ds:0xc0023dc8
c001437a:	ff 05 c4 3d 02 c0    	inc    DWORD PTR ds:0xc0023dc4
c0014380:	fa                   	cli    
c0014381:	ff 05 c8 3d 02 c0    	inc    DWORD PTR ds:0xc0023dc8
c0014387:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001438b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014390:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0014393:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014398:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001439b:	50                   	push   eax
c001439c:	68 cc 3d 02 c0       	push   0xc0023dcc
c00143a1:	e8 76 84 00 00       	call   c001c81c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00143a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143ab:	83 c4 10             	add    esp,0x10
c00143ae:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00143b5:	a1 a8 3d 02 c0       	mov    eax,ds:0xc0023da8
c00143ba:	85 c0                	test   eax,eax
c00143bc:	74 5e                	je     c001441c <terminateTask(int)+0xac>
c00143be:	83 ec 0c             	sub    esp,0xc
c00143c1:	c6 05 ac 3d 02 c0 01 	mov    BYTE PTR ds:0xc0023dac,0x1
c00143c8:	50                   	push   eax
c00143c9:	e8 42 fb ff ff       	call   c0013f10 <unblockTask(ThreadControlBlock*)>
c00143ce:	83 c4 10             	add    esp,0x10
c00143d1:	8d 76 00             	lea    esi,[esi+0x0]
c00143d4:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c00143d9:	48                   	dec    eax
c00143da:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c00143df:	75 03                	jne    c00143e4 <terminateTask(int)+0x74>
c00143e1:	fb                   	sti    
c00143e2:	66 90                	xchg   ax,ax
c00143e4:	a1 c4 3d 02 c0       	mov    eax,ds:0xc0023dc4
c00143e9:	48                   	dec    eax
c00143ea:	a3 c4 3d 02 c0       	mov    ds:0xc0023dc4,eax
c00143ef:	75 0b                	jne    c00143fc <terminateTask(int)+0x8c>
c00143f1:	83 3d c0 3d 02 c0 00 	cmp    DWORD PTR ds:0xc0023dc0,0x0
c00143f8:	75 36                	jne    c0014430 <terminateTask(int)+0xc0>
c00143fa:	66 90                	xchg   ax,ax
c00143fc:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c0014401:	48                   	dec    eax
c0014402:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c0014407:	75 03                	jne    c001440c <terminateTask(int)+0x9c>
c0014409:	fb                   	sti    
c001440a:	66 90                	xchg   ax,ax
c001440c:	fa                   	cli    
c001440d:	ff 05 c8 3d 02 c0    	inc    DWORD PTR ds:0xc0023dc8
c0014413:	90                   	nop
c0014414:	e8 33 f6 ff ff       	call   c0013a4c <schedule()>
c0014419:	eb e1                	jmp    c00143fc <terminateTask(int)+0x8c>
c001441b:	90                   	nop
c001441c:	83 ec 0c             	sub    esp,0xc
c001441f:	68 b6 ea 01 c0       	push   0xc001eab6
c0014424:	e8 7f 67 ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c0014429:	83 c4 10             	add    esp,0x10
c001442c:	eb a6                	jmp    c00143d4 <terminateTask(int)+0x64>
c001442e:	66 90                	xchg   ax,ax
c0014430:	c7 05 c0 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023dc0,0x0
c001443a:	eb d8                	jmp    c0014414 <terminateTask(int)+0xa4>

c001443c <Thr::terminateFromIRQ(int)>:
c001443c:	83 ec 18             	sub    esp,0x18
c001443f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014443:	50                   	push   eax
c0014444:	e8 27 ff ff ff       	call   c0014370 <terminateTask(int)>
c0014449:	90                   	nop
c001444a:	66 90                	xchg   ax,ax

c001444c <Semaphore::release()>:
c001444c:	83 ec 0c             	sub    esp,0xc
c001444f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014453:	fa                   	cli    
c0014454:	a1 c4 3d 02 c0       	mov    eax,ds:0xc0023dc4
c0014459:	ff 05 c8 3d 02 c0    	inc    DWORD PTR ds:0xc0023dc8
c001445f:	8d 48 01             	lea    ecx,[eax+0x1]
c0014462:	89 0d c4 3d 02 c0    	mov    DWORD PTR ds:0xc0023dc4,ecx
c0014468:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001446b:	85 c9                	test   ecx,ecx
c001446d:	74 41                	je     c00144b0 <Semaphore::release()+0x64>
c001446f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0014472:	83 ec 0c             	sub    esp,0xc
c0014475:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014478:	51                   	push   ecx
c0014479:	e8 92 fa ff ff       	call   c0013f10 <unblockTask(ThreadControlBlock*)>
c001447e:	a1 c4 3d 02 c0       	mov    eax,ds:0xc0023dc4
c0014483:	83 c4 10             	add    esp,0x10
c0014486:	48                   	dec    eax
c0014487:	90                   	nop
c0014488:	a3 c4 3d 02 c0       	mov    ds:0xc0023dc4,eax
c001448d:	85 c0                	test   eax,eax
c001448f:	75 0b                	jne    c001449c <Semaphore::release()+0x50>
c0014491:	a1 c0 3d 02 c0       	mov    eax,ds:0xc0023dc0
c0014496:	85 c0                	test   eax,eax
c0014498:	75 1e                	jne    c00144b8 <Semaphore::release()+0x6c>
c001449a:	66 90                	xchg   ax,ax
c001449c:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c00144a1:	48                   	dec    eax
c00144a2:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c00144a7:	75 03                	jne    c00144ac <Semaphore::release()+0x60>
c00144a9:	fb                   	sti    
c00144aa:	66 90                	xchg   ax,ax
c00144ac:	83 c4 0c             	add    esp,0xc
c00144af:	c3                   	ret    
c00144b0:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c00144b3:	eb d3                	jmp    c0014488 <Semaphore::release()+0x3c>
c00144b5:	8d 76 00             	lea    esi,[esi+0x0]
c00144b8:	c7 05 c0 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023dc0,0x0
c00144c2:	e8 85 f5 ff ff       	call   c0013a4c <schedule()>
c00144c7:	eb d3                	jmp    c001449c <Semaphore::release()+0x50>
c00144c9:	8d 76 00             	lea    esi,[esi+0x0]

c00144cc <__static_initialization_and_destruction_0(int, int)>:
c00144cc:	83 ec 0c             	sub    esp,0xc
c00144cf:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00144d4:	0f 85 8e 00 00 00    	jne    c0014568 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00144da:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00144e2:	0f 85 80 00 00 00    	jne    c0014568 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00144e8:	83 ec 0c             	sub    esp,0xc
c00144eb:	68 e4 3d 02 c0       	push   0xc0023de4
c00144f0:	e8 d3 85 00 00       	call   c001cac8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00144f5:	83 c4 10             	add    esp,0x10
c00144f8:	83 ec 04             	sub    esp,0x4
c00144fb:	68 64 f6 01 c0       	push   0xc001f664
c0014500:	68 e4 3d 02 c0       	push   0xc0023de4
c0014505:	68 78 ca 01 c0       	push   0xc001ca78
c001450a:	e8 53 65 ff ff       	call   c000aa62 <__cxa_atexit>
c001450f:	83 c4 10             	add    esp,0x10
c0014512:	83 ec 0c             	sub    esp,0xc
c0014515:	68 d8 3d 02 c0       	push   0xc0023dd8
c001451a:	e8 a9 85 00 00       	call   c001cac8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001451f:	83 c4 10             	add    esp,0x10
c0014522:	83 ec 04             	sub    esp,0x4
c0014525:	68 64 f6 01 c0       	push   0xc001f664
c001452a:	68 d8 3d 02 c0       	push   0xc0023dd8
c001452f:	68 78 ca 01 c0       	push   0xc001ca78
c0014534:	e8 29 65 ff ff       	call   c000aa62 <__cxa_atexit>
c0014539:	83 c4 10             	add    esp,0x10
c001453c:	83 ec 0c             	sub    esp,0xc
c001453f:	68 cc 3d 02 c0       	push   0xc0023dcc
c0014544:	e8 7f 85 00 00       	call   c001cac8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014549:	83 c4 10             	add    esp,0x10
c001454c:	83 ec 04             	sub    esp,0x4
c001454f:	68 64 f6 01 c0       	push   0xc001f664
c0014554:	68 cc 3d 02 c0       	push   0xc0023dcc
c0014559:	68 78 ca 01 c0       	push   0xc001ca78
c001455e:	e8 ff 64 ff ff       	call   c000aa62 <__cxa_atexit>
c0014563:	83 c4 10             	add    esp,0x10
c0014566:	66 90                	xchg   ax,ax
c0014568:	90                   	nop
c0014569:	83 c4 0c             	add    esp,0xc
c001456c:	c3                   	ret    
c001456d:	8d 76 00             	lea    esi,[esi+0x0]

c0014570 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0014570:	83 ec 0c             	sub    esp,0xc
c0014573:	83 ec 08             	sub    esp,0x8
c0014576:	68 ff ff 00 00       	push   0xffff
c001457b:	6a 01                	push   0x1
c001457d:	e8 4a ff ff ff       	call   c00144cc <__static_initialization_and_destruction_0(int, int)>
c0014582:	83 c4 10             	add    esp,0x10
c0014585:	83 c4 0c             	add    esp,0xc
c0014588:	c3                   	ret    

c0014589 <Vm::inbv(unsigned short)>:
c0014589:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001458d:	66 81 fa fe fe       	cmp    dx,0xfefe
c0014592:	75 06                	jne    c001459a <Vm::inbv(unsigned short)+0x11>
c0014594:	a0 2c 3e 02 c0       	mov    al,ds:0xc0023e2c
c0014599:	c3                   	ret    
c001459a:	ec                   	in     al,dx
c001459b:	c3                   	ret    

c001459c <Vm::outbv(unsigned short, unsigned char)>:
c001459c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00145a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00145a4:	66 81 fa fe fe       	cmp    dx,0xfefe
c00145a9:	75 25                	jne    c00145d0 <Vm::outbv(unsigned short, unsigned char)+0x34>
c00145ab:	8b 0d 2c 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023e2c
c00145b1:	8d 51 01             	lea    edx,[ecx+0x1]
c00145b4:	88 81 40 3e 02 c0    	mov    BYTE PTR [ecx-0x3ffdc1c0],al
c00145ba:	89 15 2c 3e 02 c0    	mov    DWORD PTR ds:0xc0023e2c,edx
c00145c0:	83 fa 20             	cmp    edx,0x20
c00145c3:	75 0c                	jne    c00145d1 <Vm::outbv(unsigned short, unsigned char)+0x35>
c00145c5:	c7 05 2c 3e 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0023e2c,0x1f
c00145cf:	c3                   	ret    
c00145d0:	ee                   	out    dx,al
c00145d1:	c3                   	ret    

c00145d2 <Vm::realToLinear(unsigned short, unsigned short)>:
c00145d2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00145d7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00145dc:	c1 e0 04             	shl    eax,0x4
c00145df:	01 d0                	add    eax,edx
c00145e1:	c3                   	ret    

c00145e2 <Vm::getSegment(unsigned int)>:
c00145e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00145e6:	c1 e8 10             	shr    eax,0x10
c00145e9:	c3                   	ret    

c00145ea <Vm::getOffset(unsigned int)>:
c00145ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00145ee:	c3                   	ret    

c00145ef <Vm::mainloop2()>:
c00145ef:	83 ec 18             	sub    esp,0x18
c00145f2:	fa                   	cli    
c00145f3:	ff 05 c8 3d 02 c0    	inc    DWORD PTR ds:0xc0023dc8
c00145f9:	6a 02                	push   0x2
c00145fb:	c6 05 25 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023e25,0x1
c0014602:	e8 19 f6 ff ff       	call   c0013c20 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0014607:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001460c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0014610:	52                   	push   edx
c0014611:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0014615:	52                   	push   edx
c0014616:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c001461a:	52                   	push   edx
c001461b:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c001461f:	50                   	push   eax
c0014620:	e8 0a bc fe ff       	call   c000022f <goToVM86>
c0014625:	83 c4 2c             	add    esp,0x2c
c0014628:	c3                   	ret    

c0014629 <Vm::mainVm8086Loop(void*)>:
c0014629:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c001462e:	48                   	dec    eax
c001462f:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c0014634:	75 01                	jne    c0014637 <Vm::mainVm8086Loop(void*)+0xe>
c0014636:	fb                   	sti    
c0014637:	eb b6                	jmp    c00145ef <Vm::mainloop2()>

c0014639 <Vm::mainloop3(unsigned long)>:
c0014639:	83 ec 18             	sub    esp,0x18
c001463c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014640:	fa                   	cli    
c0014641:	ff 05 c8 3d 02 c0    	inc    DWORD PTR ds:0xc0023dc8
c0014647:	6a 02                	push   0x2
c0014649:	c6 05 24 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023e24,0x1
c0014650:	a3 20 3e 02 c0       	mov    ds:0xc0023e20,eax
c0014655:	e8 c6 f5 ff ff       	call   c0013c20 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001465a:	83 c4 1c             	add    esp,0x1c
c001465d:	eb 90                	jmp    c00145ef <Vm::mainloop2()>

c001465f <Vm::initialise8086()>:
c001465f:	83 ec 0c             	sub    esp,0xc
c0014662:	68 80 00 00 00       	push   0x80
c0014667:	6a 00                	push   0x0
c0014669:	68 29 46 01 c0       	push   0xc0014629
c001466e:	ff 35 f0 3d 02 c0    	push   DWORD PTR ds:0xc0023df0
c0014674:	e8 b3 f1 ff ff       	call   c001382c <Process::createThread(void (*)(void*), void*, int)>
c0014679:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0014680:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c0014685:	68 00 01 00 00       	push   0x100
c001468a:	a1 f0 3d 02 c0       	mov    eax,ds:0xc0023df0
c001468f:	6a 00                	push   0x0
c0014691:	6a 00                	push   0x0
c0014693:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014699:	e8 46 5c ff ff       	call   c000a2e4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001469e:	83 c4 2c             	add    esp,0x2c
c00146a1:	c3                   	ret    

c00146a2 <Vm::finish8086()>:
c00146a2:	53                   	push   ebx
c00146a3:	83 ec 08             	sub    esp,0x8
c00146a6:	fa                   	cli    
c00146a7:	ff 05 c8 3d 02 c0    	inc    DWORD PTR ds:0xc0023dc8
c00146ad:	80 3d 24 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023e24,0x0
c00146b4:	75 15                	jne    c00146cb <Vm::finish8086()+0x29>
c00146b6:	e8 91 f3 ff ff       	call   c0013a4c <schedule()>
c00146bb:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c00146c0:	48                   	dec    eax
c00146c1:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c00146c6:	75 de                	jne    c00146a6 <Vm::finish8086()+0x4>
c00146c8:	fb                   	sti    
c00146c9:	eb db                	jmp    c00146a6 <Vm::finish8086()+0x4>
c00146cb:	83 ec 0c             	sub    esp,0xc
c00146ce:	8b 1d 20 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023e20
c00146d4:	ff 35 28 3e 02 c0    	push   DWORD PTR ds:0xc0023e28
c00146da:	c6 05 24 3e 02 c0 00 	mov    BYTE PTR ds:0xc0023e24,0x0
c00146e1:	e8 2a f8 ff ff       	call   c0013f10 <unblockTask(ThreadControlBlock*)>
c00146e6:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c00146eb:	83 c4 10             	add    esp,0x10
c00146ee:	8d 50 ff             	lea    edx,[eax-0x1]
c00146f1:	89 15 c8 3d 02 c0    	mov    DWORD PTR ds:0xc0023dc8,edx
c00146f7:	85 d2                	test   edx,edx
c00146f9:	75 01                	jne    c00146fc <Vm::finish8086()+0x5a>
c00146fb:	fb                   	sti    
c00146fc:	89 d8                	mov    eax,ebx
c00146fe:	83 c4 08             	add    esp,0x8
c0014701:	5b                   	pop    ebx
c0014702:	c3                   	ret    

c0014703 <Vm::getOutput8086(unsigned char*)>:
c0014703:	57                   	push   edi
c0014704:	8b 0d 2c 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023e2c
c001470a:	56                   	push   esi
c001470b:	be 40 3e 02 c0       	mov    esi,0xc0023e40
c0014710:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014714:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014716:	a1 2c 3e 02 c0       	mov    eax,ds:0xc0023e2c
c001471b:	5e                   	pop    esi
c001471c:	c7 05 2c 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e2c,0x0
c0014726:	5f                   	pop    edi
c0014727:	c3                   	ret    

c0014728 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014728:	55                   	push   ebp
c0014729:	57                   	push   edi
c001472a:	56                   	push   esi
c001472b:	53                   	push   ebx
c001472c:	83 ec 0c             	sub    esp,0xc
c001472f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014733:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0014737:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001473b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001473f:	fa                   	cli    
c0014740:	ff 05 c8 3d 02 c0    	inc    DWORD PTR ds:0xc0023dc8
c0014746:	80 3d 25 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023e25,0x0
c001474d:	75 15                	jne    c0014764 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c001474f:	e8 f8 f2 ff ff       	call   c0013a4c <schedule()>
c0014754:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c0014759:	48                   	dec    eax
c001475a:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c001475f:	75 de                	jne    c001473f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014761:	fb                   	sti    
c0014762:	eb db                	jmp    c001473f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014764:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c0014769:	c7 05 2c 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e2c,0x0
c0014773:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0014777:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001477b:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001477f:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014783:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0014787:	0f b7 ff             	movzx  edi,di
c001478a:	0f b7 f6             	movzx  esi,si
c001478d:	50                   	push   eax
c001478e:	6a 20                	push   0x20
c0014790:	6a 00                	push   0x0
c0014792:	68 40 3e 02 c0       	push   0xc0023e40
c0014797:	e8 54 bd fe ff       	call   c00004f0 <memset>
c001479c:	5a                   	pop    edx
c001479d:	59                   	pop    ecx
c001479e:	57                   	push   edi
c001479f:	56                   	push   esi
c00147a0:	e8 2d fe ff ff       	call   c00145d2 <Vm::realToLinear(unsigned short, unsigned short)>
c00147a5:	83 c4 10             	add    esp,0x10
c00147a8:	89 c7                	mov    edi,eax
c00147aa:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00147ae:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00147b2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00147b4:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c00147b9:	c6 05 25 3e 02 c0 00 	mov    BYTE PTR ds:0xc0023e25,0x0
c00147c0:	48                   	dec    eax
c00147c1:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c00147c6:	75 01                	jne    c00147c9 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c00147c8:	fb                   	sti    
c00147c9:	83 ec 0c             	sub    esp,0xc
c00147cc:	ff 35 28 3e 02 c0    	push   DWORD PTR ds:0xc0023e28
c00147d2:	e8 39 f7 ff ff       	call   c0013f10 <unblockTask(ThreadControlBlock*)>
c00147d7:	83 c4 1c             	add    esp,0x1c
c00147da:	b0 01                	mov    al,0x1
c00147dc:	5b                   	pop    ebx
c00147dd:	5e                   	pop    esi
c00147de:	5f                   	pop    edi
c00147df:	5d                   	pop    ebp
c00147e0:	c3                   	ret    

c00147e1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00147e1:	55                   	push   ebp
c00147e2:	57                   	push   edi
c00147e3:	56                   	push   esi
c00147e4:	53                   	push   ebx
c00147e5:	83 ec 2c             	sub    esp,0x2c
c00147e8:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00147ec:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00147f0:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00147f4:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00147f8:	fa                   	cli    
c00147f9:	ff 05 c8 3d 02 c0    	inc    DWORD PTR ds:0xc0023dc8
c00147ff:	0f b6 35 25 3e 02 c0 	movzx  esi,BYTE PTR ds:0xc0023e25
c0014806:	89 f0                	mov    eax,esi
c0014808:	84 c0                	test   al,al
c001480a:	75 1d                	jne    c0014829 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001480c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014810:	e8 37 f2 ff ff       	call   c0013a4c <schedule()>
c0014815:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c001481a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001481e:	48                   	dec    eax
c001481f:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c0014824:	75 d2                	jne    c00147f8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014826:	fb                   	sti    
c0014827:	eb cf                	jmp    c00147f8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014829:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c001482e:	c7 05 2c 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e2c,0x0
c0014838:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c001483c:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014840:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0014844:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0014848:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001484c:	50                   	push   eax
c001484d:	6a 20                	push   0x20
c001484f:	6a 00                	push   0x0
c0014851:	68 40 3e 02 c0       	push   0xc0023e40
c0014856:	e8 95 bc fe ff       	call   c00004f0 <memset>
c001485b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014862:	e8 b2 35 ff ff       	call   c0007e19 <malloc>
c0014867:	83 c4 0c             	add    esp,0xc
c001486a:	89 c3                	mov    ebx,eax
c001486c:	ff 35 f0 3d 02 c0    	push   DWORD PTR ds:0xc0023df0
c0014872:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0014876:	50                   	push   eax
c0014877:	e8 a2 68 ff ff       	call   c000b11e <File::File(char const*, Process*)>
c001487c:	83 c4 10             	add    esp,0x10
c001487f:	85 db                	test   ebx,ebx
c0014881:	75 0a                	jne    c001488d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0014883:	83 ec 0c             	sub    esp,0xc
c0014886:	68 e0 eb 01 c0       	push   0xc001ebe0
c001488b:	eb 3e                	jmp    c00148cb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001488d:	50                   	push   eax
c001488e:	8d 44 24 17          	lea    eax,[esp+0x17]
c0014892:	50                   	push   eax
c0014893:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014897:	50                   	push   eax
c0014898:	53                   	push   ebx
c0014899:	e8 ec 6b ff ff       	call   c000b48a <File::stat(unsigned long long*, bool*)>
c001489e:	83 c4 10             	add    esp,0x10
c00148a1:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00148a6:	74 0a                	je     c00148b2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c00148a8:	83 ec 0c             	sub    esp,0xc
c00148ab:	68 f4 eb 01 c0       	push   0xc001ebf4
c00148b0:	eb 19                	jmp    c00148cb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00148b2:	51                   	push   ecx
c00148b3:	51                   	push   ecx
c00148b4:	6a 01                	push   0x1
c00148b6:	53                   	push   ebx
c00148b7:	e8 22 69 ff ff       	call   c000b1de <File::open(FileOpenMode)>
c00148bc:	83 c4 10             	add    esp,0x10
c00148bf:	85 c0                	test   eax,eax
c00148c1:	74 24                	je     c00148e7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c00148c3:	83 ec 0c             	sub    esp,0xc
c00148c6:	68 0d ec 01 c0       	push   0xc001ec0d
c00148cb:	e8 27 be ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c00148d0:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c00148d5:	83 c4 10             	add    esp,0x10
c00148d8:	48                   	dec    eax
c00148d9:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c00148de:	85 c0                	test   eax,eax
c00148e0:	75 01                	jne    c00148e3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c00148e2:	fb                   	sti    
c00148e3:	31 f6                	xor    esi,esi
c00148e5:	eb 58                	jmp    c001493f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c00148e7:	0f b7 ed             	movzx  ebp,bp
c00148ea:	50                   	push   eax
c00148eb:	0f b7 ff             	movzx  edi,di
c00148ee:	50                   	push   eax
c00148ef:	55                   	push   ebp
c00148f0:	57                   	push   edi
c00148f1:	e8 dc fc ff ff       	call   c00145d2 <Vm::realToLinear(unsigned short, unsigned short)>
c00148f6:	5a                   	pop    edx
c00148f7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00148f9:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00148fd:	51                   	push   ecx
c00148fe:	50                   	push   eax
c00148ff:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014903:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014907:	53                   	push   ebx
c0014908:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001490b:	83 c4 14             	add    esp,0x14
c001490e:	53                   	push   ebx
c001490f:	e8 28 69 ff ff       	call   c000b23c <File::close()>
c0014914:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c0014919:	83 c4 10             	add    esp,0x10
c001491c:	48                   	dec    eax
c001491d:	c6 05 25 3e 02 c0 00 	mov    BYTE PTR ds:0xc0023e25,0x0
c0014924:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c0014929:	85 c0                	test   eax,eax
c001492b:	75 01                	jne    c001492e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001492d:	fb                   	sti    
c001492e:	83 ec 0c             	sub    esp,0xc
c0014931:	ff 35 28 3e 02 c0    	push   DWORD PTR ds:0xc0023e28
c0014937:	e8 d4 f5 ff ff       	call   c0013f10 <unblockTask(ThreadControlBlock*)>
c001493c:	83 c4 10             	add    esp,0x10
c001493f:	83 c4 2c             	add    esp,0x2c
c0014942:	89 f0                	mov    eax,esi
c0014944:	5b                   	pop    ebx
c0014945:	5e                   	pop    esi
c0014946:	5f                   	pop    edi
c0014947:	5d                   	pop    ebp
c0014948:	c3                   	ret    

c0014949 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0014949:	57                   	push   edi
c001494a:	56                   	push   esi
c001494b:	53                   	push   ebx
c001494c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014950:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014954:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014958:	83 e8 06             	sub    eax,0x6
c001495b:	0f b7 c0             	movzx  eax,ax
c001495e:	50                   	push   eax
c001495f:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0014964:	50                   	push   eax
c0014965:	e8 68 fc ff ff       	call   c00145d2 <Vm::realToLinear(unsigned short, unsigned short)>
c001496a:	5a                   	pop    edx
c001496b:	5e                   	pop    esi
c001496c:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001496f:	8d 56 fa             	lea    edx,[esi-0x6]
c0014972:	81 e2 ff ff 00 00    	and    edx,0xffff
c0014978:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001497b:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001497e:	83 c2 02             	add    edx,0x2
c0014981:	66 89 10             	mov    WORD PTR [eax],dx
c0014984:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0014987:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001498b:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001498e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0014992:	89 d6                	mov    esi,edx
c0014994:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001499a:	66 81 e6 ff fd       	and    si,0xfdff
c001499f:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c00149a3:	74 07                	je     c00149ac <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00149a5:	89 d6                	mov    esi,edx
c00149a7:	66 81 ce 00 02       	or     si,0x200
c00149ac:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00149b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149b5:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00149b9:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c00149c1:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c00149c4:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c00149cc:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c00149cf:	5b                   	pop    ebx
c00149d0:	5e                   	pop    esi
c00149d1:	5f                   	pop    edi
c00149d2:	c3                   	ret    

c00149d3 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00149d3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00149d8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00149dd:	c1 e0 04             	shl    eax,0x4
c00149e0:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00149e3:	c3                   	ret    

c00149e4 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00149e4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00149e9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00149ee:	c1 e0 04             	shl    eax,0x4
c00149f1:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00149f5:	c3                   	ret    

c00149f6 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00149f6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00149fb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014a00:	c1 e0 04             	shl    eax,0x4
c0014a03:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0014a06:	c3                   	ret    

c0014a07 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0014a07:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a0c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014a11:	c1 e0 04             	shl    eax,0x4
c0014a14:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014a18:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0014a1b:	c3                   	ret    

c0014a1c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0014a1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a21:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014a26:	c1 e0 04             	shl    eax,0x4
c0014a29:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014a2d:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0014a31:	c3                   	ret    

c0014a32 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0014a32:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a37:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014a3c:	c1 e0 04             	shl    eax,0x4
c0014a3f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014a43:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0014a46:	c3                   	ret    

c0014a47 <Vm::faultHandler(regs*)>:
c0014a47:	55                   	push   ebp
c0014a48:	57                   	push   edi
c0014a49:	56                   	push   esi
c0014a4a:	53                   	push   ebx
c0014a4b:	83 ec 1c             	sub    esp,0x1c
c0014a4e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014a52:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014a55:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0014a59:	0f b7 f8             	movzx  edi,ax
c0014a5c:	52                   	push   edx
c0014a5d:	0f b7 c0             	movzx  eax,ax
c0014a60:	50                   	push   eax
c0014a61:	e8 6c fb ff ff       	call   c00145d2 <Vm::realToLinear(unsigned short, unsigned short)>
c0014a66:	5a                   	pop    edx
c0014a67:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0014a6a:	59                   	pop    ecx
c0014a6b:	89 c1                	mov    ecx,eax
c0014a6d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014a70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014a74:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a79:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014a7d:	0f b7 c5             	movzx  eax,bp
c0014a80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014a84:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0014a88:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014a8c:	e8 41 fb ff ff       	call   c00145d2 <Vm::realToLinear(unsigned short, unsigned short)>
c0014a91:	5e                   	pop    esi
c0014a92:	be 06 00 00 00       	mov    esi,0x6
c0014a97:	5a                   	pop    edx
c0014a98:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0014a9d:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0014aa2:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0014aa5:	80 fa 9d             	cmp    dl,0x9d
c0014aa8:	0f 84 2c 02 00 00    	je     c0014cda <Vm::faultHandler(regs*)+0x293>
c0014aae:	0f 87 91 00 00 00    	ja     c0014b45 <Vm::faultHandler(regs*)+0xfe>
c0014ab4:	80 fa 66             	cmp    dl,0x66
c0014ab7:	0f 84 98 01 00 00    	je     c0014c55 <Vm::faultHandler(regs*)+0x20e>
c0014abd:	77 47                	ja     c0014b06 <Vm::faultHandler(regs*)+0xbf>
c0014abf:	80 fa 36             	cmp    dl,0x36
c0014ac2:	0f 84 80 01 00 00    	je     c0014c48 <Vm::faultHandler(regs*)+0x201>
c0014ac8:	77 1a                	ja     c0014ae4 <Vm::faultHandler(regs*)+0x9d>
c0014aca:	80 fa 26             	cmp    dl,0x26
c0014acd:	0f 84 4e 01 00 00    	je     c0014c21 <Vm::faultHandler(regs*)+0x1da>
c0014ad3:	80 fa 2e             	cmp    dl,0x2e
c0014ad6:	0f 85 e2 05 00 00    	jne    c00150be <Vm::faultHandler(regs*)+0x677>
c0014adc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014adf:	31 f6                	xor    esi,esi
c0014ae1:	41                   	inc    ecx
c0014ae2:	eb be                	jmp    c0014aa2 <Vm::faultHandler(regs*)+0x5b>
c0014ae4:	80 fa 64             	cmp    dl,0x64
c0014ae7:	0f 84 41 01 00 00    	je     c0014c2e <Vm::faultHandler(regs*)+0x1e7>
c0014aed:	0f 87 48 01 00 00    	ja     c0014c3b <Vm::faultHandler(regs*)+0x1f4>
c0014af3:	80 fa 3e             	cmp    dl,0x3e
c0014af6:	0f 85 c2 05 00 00    	jne    c00150be <Vm::faultHandler(regs*)+0x677>
c0014afc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014aff:	be 01 00 00 00       	mov    esi,0x1
c0014b04:	eb db                	jmp    c0014ae1 <Vm::faultHandler(regs*)+0x9a>
c0014b06:	80 fa 6d             	cmp    dl,0x6d
c0014b09:	0f 84 ec 02 00 00    	je     c0014dfb <Vm::faultHandler(regs*)+0x3b4>
c0014b0f:	77 17                	ja     c0014b28 <Vm::faultHandler(regs*)+0xe1>
c0014b11:	80 fa 67             	cmp    dl,0x67
c0014b14:	0f 84 48 01 00 00    	je     c0014c62 <Vm::faultHandler(regs*)+0x21b>
c0014b1a:	80 fa 6c             	cmp    dl,0x6c
c0014b1d:	0f 84 69 02 00 00    	je     c0014d8c <Vm::faultHandler(regs*)+0x345>
c0014b23:	e9 96 05 00 00       	jmp    c00150be <Vm::faultHandler(regs*)+0x677>
c0014b28:	80 fa 6f             	cmp    dl,0x6f
c0014b2b:	0f 84 f4 03 00 00    	je     c0014f25 <Vm::faultHandler(regs*)+0x4de>
c0014b31:	0f 82 59 03 00 00    	jb     c0014e90 <Vm::faultHandler(regs*)+0x449>
c0014b37:	80 fa 9c             	cmp    dl,0x9c
c0014b3a:	0f 84 2f 01 00 00    	je     c0014c6f <Vm::faultHandler(regs*)+0x228>
c0014b40:	e9 79 05 00 00       	jmp    c00150be <Vm::faultHandler(regs*)+0x677>
c0014b45:	80 fa ec             	cmp    dl,0xec
c0014b48:	0f 84 14 05 00 00    	je     c0015062 <Vm::faultHandler(regs*)+0x61b>
c0014b4e:	77 7b                	ja     c0014bcb <Vm::faultHandler(regs*)+0x184>
c0014b50:	80 fa e4             	cmp    dl,0xe4
c0014b53:	0f 84 93 04 00 00    	je     c0014fec <Vm::faultHandler(regs*)+0x5a5>
c0014b59:	77 53                	ja     c0014bae <Vm::faultHandler(regs*)+0x167>
c0014b5b:	80 fa cd             	cmp    dl,0xcd
c0014b5e:	0f 84 d9 01 00 00    	je     c0014d3d <Vm::faultHandler(regs*)+0x2f6>
c0014b64:	80 fa cf             	cmp    dl,0xcf
c0014b67:	0f 85 51 05 00 00    	jne    c00150be <Vm::faultHandler(regs*)+0x677>
c0014b6d:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014b70:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0014b73:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0014b77:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0014b7a:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0014b7e:	81 ca 00 02 02 00    	or     edx,0x20200
c0014b84:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014b87:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014b8b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014b91:	66 c1 e8 09          	shr    ax,0x9
c0014b95:	83 e0 01             	and    eax,0x1
c0014b98:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014b9b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014b9e:	83 c0 06             	add    eax,0x6
c0014ba1:	25 ff ff 00 00       	and    eax,0xffff
c0014ba6:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014ba9:	e9 0c 05 00 00       	jmp    c00150ba <Vm::faultHandler(regs*)+0x673>
c0014bae:	80 fa e6             	cmp    dl,0xe6
c0014bb1:	0f 84 7f 04 00 00    	je     c0015036 <Vm::faultHandler(regs*)+0x5ef>
c0014bb7:	0f 82 4b 04 00 00    	jb     c0015008 <Vm::faultHandler(regs*)+0x5c1>
c0014bbd:	80 fa e7             	cmp    dl,0xe7
c0014bc0:	0f 84 87 04 00 00    	je     c001504d <Vm::faultHandler(regs*)+0x606>
c0014bc6:	e9 f3 04 00 00       	jmp    c00150be <Vm::faultHandler(regs*)+0x677>
c0014bcb:	80 fa ef             	cmp    dl,0xef
c0014bce:	0f 84 d1 04 00 00    	je     c00150a5 <Vm::faultHandler(regs*)+0x65e>
c0014bd4:	77 28                	ja     c0014bfe <Vm::faultHandler(regs*)+0x1b7>
c0014bd6:	80 fa ed             	cmp    dl,0xed
c0014bd9:	0f 84 9f 04 00 00    	je     c001507e <Vm::faultHandler(regs*)+0x637>
c0014bdf:	80 fa ee             	cmp    dl,0xee
c0014be2:	0f 85 d6 04 00 00    	jne    c00150be <Vm::faultHandler(regs*)+0x677>
c0014be8:	50                   	push   eax
c0014be9:	50                   	push   eax
c0014bea:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014bee:	50                   	push   eax
c0014bef:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014bf3:	50                   	push   eax
c0014bf4:	e8 a3 f9 ff ff       	call   c001459c <Vm::outbv(unsigned short, unsigned char)>
c0014bf9:	e9 9f 04 00 00       	jmp    c001509d <Vm::faultHandler(regs*)+0x656>
c0014bfe:	80 fa fa             	cmp    dl,0xfa
c0014c01:	0f 84 69 01 00 00    	je     c0014d70 <Vm::faultHandler(regs*)+0x329>
c0014c07:	80 fa fb             	cmp    dl,0xfb
c0014c0a:	0f 84 6e 01 00 00    	je     c0014d7e <Vm::faultHandler(regs*)+0x337>
c0014c10:	80 fa f3             	cmp    dl,0xf3
c0014c13:	0f 85 a5 04 00 00    	jne    c00150be <Vm::faultHandler(regs*)+0x677>
c0014c19:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c1c:	e9 c0 fe ff ff       	jmp    c0014ae1 <Vm::faultHandler(regs*)+0x9a>
c0014c21:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c24:	be 02 00 00 00       	mov    esi,0x2
c0014c29:	e9 b3 fe ff ff       	jmp    c0014ae1 <Vm::faultHandler(regs*)+0x9a>
c0014c2e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c31:	be 03 00 00 00       	mov    esi,0x3
c0014c36:	e9 a6 fe ff ff       	jmp    c0014ae1 <Vm::faultHandler(regs*)+0x9a>
c0014c3b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c3e:	be 04 00 00 00       	mov    esi,0x4
c0014c43:	e9 99 fe ff ff       	jmp    c0014ae1 <Vm::faultHandler(regs*)+0x9a>
c0014c48:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c4b:	be 05 00 00 00       	mov    esi,0x5
c0014c50:	e9 8c fe ff ff       	jmp    c0014ae1 <Vm::faultHandler(regs*)+0x9a>
c0014c55:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c58:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0014c5d:	e9 7f fe ff ff       	jmp    c0014ae1 <Vm::faultHandler(regs*)+0x9a>
c0014c62:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c65:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0014c6a:	e9 72 fe ff ff       	jmp    c0014ae1 <Vm::faultHandler(regs*)+0x9a>
c0014c6f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0014c72:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014c76:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014c7b:	74 30                	je     c0014cad <Vm::faultHandler(regs*)+0x266>
c0014c7d:	83 e9 04             	sub    ecx,0x4
c0014c80:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014c86:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014c8c:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014c8f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014c92:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014c98:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014c9c:	0f 84 15 04 00 00    	je     c00150b7 <Vm::faultHandler(regs*)+0x670>
c0014ca2:	80 ce 02             	or     dh,0x2
c0014ca5:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014ca8:	e9 0a 04 00 00       	jmp    c00150b7 <Vm::faultHandler(regs*)+0x670>
c0014cad:	83 e9 02             	sub    ecx,0x2
c0014cb0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014cb6:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014cb9:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014cbd:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014cc3:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014cc7:	74 05                	je     c0014cce <Vm::faultHandler(regs*)+0x287>
c0014cc9:	80 ce 02             	or     dh,0x2
c0014ccc:	eb 03                	jmp    c0014cd1 <Vm::faultHandler(regs*)+0x28a>
c0014cce:	80 e6 fd             	and    dh,0xfd
c0014cd1:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014cd5:	e9 dd 03 00 00       	jmp    c00150b7 <Vm::faultHandler(regs*)+0x670>
c0014cda:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014cdf:	74 2a                	je     c0014d0b <Vm::faultHandler(regs*)+0x2c4>
c0014ce1:	8b 10                	mov    edx,DWORD PTR [eax]
c0014ce3:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014ce9:	81 ca 00 02 02 00    	or     edx,0x20200
c0014cef:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014cf2:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cf4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014cfa:	c1 e8 09             	shr    eax,0x9
c0014cfd:	83 e0 01             	and    eax,0x1
c0014d00:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014d03:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014d06:	83 c0 04             	add    eax,0x4
c0014d09:	eb 25                	jmp    c0014d30 <Vm::faultHandler(regs*)+0x2e9>
c0014d0b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014d0e:	81 ca 00 02 02 00    	or     edx,0x20200
c0014d14:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014d17:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014d1a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014d20:	66 c1 e8 09          	shr    ax,0x9
c0014d24:	83 e0 01             	and    eax,0x1
c0014d27:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014d2a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014d2d:	83 c0 02             	add    eax,0x2
c0014d30:	25 ff ff 00 00       	and    eax,0xffff
c0014d35:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014d38:	e9 7a 03 00 00       	jmp    c00150b7 <Vm::faultHandler(regs*)+0x670>
c0014d3d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014d41:	3c ee                	cmp    al,0xee
c0014d43:	75 10                	jne    c0014d55 <Vm::faultHandler(regs*)+0x30e>
c0014d45:	83 ec 0c             	sub    esp,0xc
c0014d48:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014d4b:	e8 e9 f8 ff ff       	call   c0014639 <Vm::mainloop3(unsigned long)>
c0014d50:	e9 4b 03 00 00       	jmp    c00150a0 <Vm::faultHandler(regs*)+0x659>
c0014d55:	83 ec 0c             	sub    esp,0xc
c0014d58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014d5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d60:	51                   	push   ecx
c0014d61:	50                   	push   eax
c0014d62:	53                   	push   ebx
c0014d63:	e8 e1 fb ff ff       	call   c0014949 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0014d68:	83 c4 20             	add    esp,0x20
c0014d6b:	e9 4a 03 00 00       	jmp    c00150ba <Vm::faultHandler(regs*)+0x673>
c0014d70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d75:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014d79:	e9 39 03 00 00       	jmp    c00150b7 <Vm::faultHandler(regs*)+0x670>
c0014d7e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d83:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0014d87:	e9 2b 03 00 00       	jmp    c00150b7 <Vm::faultHandler(regs*)+0x670>
c0014d8c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014d8f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014d94:	74 2b                	je     c0014dc1 <Vm::faultHandler(regs*)+0x37a>
c0014d96:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0014d9d:	76 22                	jbe    c0014dc1 <Vm::faultHandler(regs*)+0x37a>
c0014d9f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014da3:	50                   	push   eax
c0014da4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014da8:	50                   	push   eax
c0014da9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014dad:	50                   	push   eax
c0014dae:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014db2:	50                   	push   eax
c0014db3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014db7:	50                   	push   eax
c0014db8:	6a 6c                	push   0x6c
c0014dba:	6a 6c                	push   0x6c
c0014dbc:	e9 b9 01 00 00       	jmp    c0014f7a <Vm::faultHandler(regs*)+0x533>
c0014dc1:	83 ec 0c             	sub    esp,0xc
c0014dc4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014dc8:	0f b7 f6             	movzx  esi,si
c0014dcb:	50                   	push   eax
c0014dcc:	e8 b8 f7 ff ff       	call   c0014589 <Vm::inbv(unsigned short)>
c0014dd1:	83 c4 0c             	add    esp,0xc
c0014dd4:	0f b6 c0             	movzx  eax,al
c0014dd7:	50                   	push   eax
c0014dd8:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0014ddc:	50                   	push   eax
c0014ddd:	56                   	push   esi
c0014dde:	e8 24 fc ff ff       	call   c0014a07 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0014de3:	83 c4 10             	add    esp,0x10
c0014de6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014de9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014ded:	74 03                	je     c0014df2 <Vm::faultHandler(regs*)+0x3ab>
c0014def:	48                   	dec    eax
c0014df0:	eb 01                	jmp    c0014df3 <Vm::faultHandler(regs*)+0x3ac>
c0014df2:	40                   	inc    eax
c0014df3:	0f b7 c0             	movzx  eax,ax
c0014df6:	e9 8d 00 00 00       	jmp    c0014e88 <Vm::faultHandler(regs*)+0x441>
c0014dfb:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014dfe:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014e01:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014e06:	74 29                	je     c0014e31 <Vm::faultHandler(regs*)+0x3ea>
c0014e08:	3d ff ff 00 00       	cmp    eax,0xffff
c0014e0d:	76 22                	jbe    c0014e31 <Vm::faultHandler(regs*)+0x3ea>
c0014e0f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014e13:	50                   	push   eax
c0014e14:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014e18:	50                   	push   eax
c0014e19:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014e1d:	50                   	push   eax
c0014e1e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014e22:	50                   	push   eax
c0014e23:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014e27:	50                   	push   eax
c0014e28:	6a 6d                	push   0x6d
c0014e2a:	6a 6d                	push   0x6d
c0014e2c:	e9 49 01 00 00       	jmp    c0014f7a <Vm::faultHandler(regs*)+0x533>
c0014e31:	0f b7 c8             	movzx  ecx,ax
c0014e34:	0f b7 f6             	movzx  esi,si
c0014e37:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014e3a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e3f:	74 20                	je     c0014e61 <Vm::faultHandler(regs*)+0x41a>
c0014e41:	ed                   	in     eax,dx
c0014e42:	55                   	push   ebp
c0014e43:	50                   	push   eax
c0014e44:	51                   	push   ecx
c0014e45:	56                   	push   esi
c0014e46:	e8 e7 fb ff ff       	call   c0014a32 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0014e4b:	83 c4 10             	add    esp,0x10
c0014e4e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014e51:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014e55:	74 05                	je     c0014e5c <Vm::faultHandler(regs*)+0x415>
c0014e57:	83 e8 04             	sub    eax,0x4
c0014e5a:	eb 27                	jmp    c0014e83 <Vm::faultHandler(regs*)+0x43c>
c0014e5c:	83 c0 04             	add    eax,0x4
c0014e5f:	eb 22                	jmp    c0014e83 <Vm::faultHandler(regs*)+0x43c>
c0014e61:	66 ed                	in     ax,dx
c0014e63:	0f b7 c0             	movzx  eax,ax
c0014e66:	57                   	push   edi
c0014e67:	50                   	push   eax
c0014e68:	51                   	push   ecx
c0014e69:	56                   	push   esi
c0014e6a:	e8 ad fb ff ff       	call   c0014a1c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0014e6f:	83 c4 10             	add    esp,0x10
c0014e72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014e75:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014e79:	74 05                	je     c0014e80 <Vm::faultHandler(regs*)+0x439>
c0014e7b:	83 e8 02             	sub    eax,0x2
c0014e7e:	eb 03                	jmp    c0014e83 <Vm::faultHandler(regs*)+0x43c>
c0014e80:	83 c0 02             	add    eax,0x2
c0014e83:	25 ff ff 00 00       	and    eax,0xffff
c0014e88:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0014e8b:	e9 27 02 00 00       	jmp    c00150b7 <Vm::faultHandler(regs*)+0x670>
c0014e90:	8d 46 ff             	lea    eax,[esi-0x1]
c0014e93:	3c 05                	cmp    al,0x5
c0014e95:	77 24                	ja     c0014ebb <Vm::faultHandler(regs*)+0x474>
c0014e97:	0f b6 c0             	movzx  eax,al
c0014e9a:	ff 24 85 80 ec 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1380]
c0014ea1:	0f b7 fd             	movzx  edi,bp
c0014ea4:	eb 15                	jmp    c0014ebb <Vm::faultHandler(regs*)+0x474>
c0014ea6:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0014eaa:	eb 0f                	jmp    c0014ebb <Vm::faultHandler(regs*)+0x474>
c0014eac:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014eb0:	eb 09                	jmp    c0014ebb <Vm::faultHandler(regs*)+0x474>
c0014eb2:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0014eb6:	eb 03                	jmp    c0014ebb <Vm::faultHandler(regs*)+0x474>
c0014eb8:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0014ebb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014ebe:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014ec3:	74 29                	je     c0014eee <Vm::faultHandler(regs*)+0x4a7>
c0014ec5:	3d ff ff 00 00       	cmp    eax,0xffff
c0014eca:	76 22                	jbe    c0014eee <Vm::faultHandler(regs*)+0x4a7>
c0014ecc:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014ed0:	50                   	push   eax
c0014ed1:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014ed5:	50                   	push   eax
c0014ed6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014eda:	50                   	push   eax
c0014edb:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014edf:	50                   	push   eax
c0014ee0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014ee4:	50                   	push   eax
c0014ee5:	6a 6e                	push   0x6e
c0014ee7:	6a 6e                	push   0x6e
c0014ee9:	e9 8c 00 00 00       	jmp    c0014f7a <Vm::faultHandler(regs*)+0x533>
c0014eee:	0f b7 c0             	movzx  eax,ax
c0014ef1:	52                   	push   edx
c0014ef2:	52                   	push   edx
c0014ef3:	50                   	push   eax
c0014ef4:	57                   	push   edi
c0014ef5:	e8 d9 fa ff ff       	call   c00149d3 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0014efa:	59                   	pop    ecx
c0014efb:	0f b6 c0             	movzx  eax,al
c0014efe:	5e                   	pop    esi
c0014eff:	50                   	push   eax
c0014f00:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014f04:	50                   	push   eax
c0014f05:	e8 92 f6 ff ff       	call   c001459c <Vm::outbv(unsigned short, unsigned char)>
c0014f0a:	83 c4 10             	add    esp,0x10
c0014f0d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014f10:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014f14:	74 03                	je     c0014f19 <Vm::faultHandler(regs*)+0x4d2>
c0014f16:	48                   	dec    eax
c0014f17:	eb 01                	jmp    c0014f1a <Vm::faultHandler(regs*)+0x4d3>
c0014f19:	40                   	inc    eax
c0014f1a:	0f b7 c0             	movzx  eax,ax
c0014f1d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014f20:	e9 92 01 00 00       	jmp    c00150b7 <Vm::faultHandler(regs*)+0x670>
c0014f25:	8d 46 ff             	lea    eax,[esi-0x1]
c0014f28:	3c 05                	cmp    al,0x5
c0014f2a:	77 1f                	ja     c0014f4b <Vm::faultHandler(regs*)+0x504>
c0014f2c:	0f b6 c0             	movzx  eax,al
c0014f2f:	ff 24 85 98 ec 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1368]
c0014f36:	89 ef                	mov    edi,ebp
c0014f38:	eb 11                	jmp    c0014f4b <Vm::faultHandler(regs*)+0x504>
c0014f3a:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014f3d:	eb 0c                	jmp    c0014f4b <Vm::faultHandler(regs*)+0x504>
c0014f3f:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0014f42:	eb 07                	jmp    c0014f4b <Vm::faultHandler(regs*)+0x504>
c0014f44:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0014f47:	eb 02                	jmp    c0014f4b <Vm::faultHandler(regs*)+0x504>
c0014f49:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0014f4b:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014f4e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014f53:	74 37                	je     c0014f8c <Vm::faultHandler(regs*)+0x545>
c0014f55:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0014f5b:	76 2f                	jbe    c0014f8c <Vm::faultHandler(regs*)+0x545>
c0014f5d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014f61:	50                   	push   eax
c0014f62:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014f66:	50                   	push   eax
c0014f67:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014f6b:	50                   	push   eax
c0014f6c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014f70:	50                   	push   eax
c0014f71:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014f75:	50                   	push   eax
c0014f76:	6a 6f                	push   0x6f
c0014f78:	6a 6f                	push   0x6f
c0014f7a:	68 26 ec 01 c0       	push   0xc001ec26
c0014f7f:	e8 24 5c ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c0014f84:	83 c4 20             	add    esp,0x20
c0014f87:	e9 86 01 00 00       	jmp    c0015112 <Vm::faultHandler(regs*)+0x6cb>
c0014f8c:	0f b7 d7             	movzx  edx,di
c0014f8f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0014f92:	0f b7 c6             	movzx  eax,si
c0014f95:	81 e1 00 04 00 00    	and    ecx,0x400
c0014f9b:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0014f9e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014fa3:	74 1d                	je     c0014fc2 <Vm::faultHandler(regs*)+0x57b>
c0014fa5:	55                   	push   ebp
c0014fa6:	55                   	push   ebp
c0014fa7:	50                   	push   eax
c0014fa8:	52                   	push   edx
c0014fa9:	e8 48 fa ff ff       	call   c00149f6 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0014fae:	83 c4 10             	add    esp,0x10
c0014fb1:	89 fa                	mov    edx,edi
c0014fb3:	ef                   	out    dx,eax
c0014fb4:	85 c9                	test   ecx,ecx
c0014fb6:	74 05                	je     c0014fbd <Vm::faultHandler(regs*)+0x576>
c0014fb8:	83 ee 04             	sub    esi,0x4
c0014fbb:	eb 21                	jmp    c0014fde <Vm::faultHandler(regs*)+0x597>
c0014fbd:	83 c6 04             	add    esi,0x4
c0014fc0:	eb 1c                	jmp    c0014fde <Vm::faultHandler(regs*)+0x597>
c0014fc2:	55                   	push   ebp
c0014fc3:	55                   	push   ebp
c0014fc4:	50                   	push   eax
c0014fc5:	52                   	push   edx
c0014fc6:	e8 19 fa ff ff       	call   c00149e4 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0014fcb:	83 c4 10             	add    esp,0x10
c0014fce:	89 fa                	mov    edx,edi
c0014fd0:	66 ef                	out    dx,ax
c0014fd2:	85 c9                	test   ecx,ecx
c0014fd4:	74 05                	je     c0014fdb <Vm::faultHandler(regs*)+0x594>
c0014fd6:	83 ee 02             	sub    esi,0x2
c0014fd9:	eb 03                	jmp    c0014fde <Vm::faultHandler(regs*)+0x597>
c0014fdb:	83 c6 02             	add    esi,0x2
c0014fde:	81 e6 ff ff 00 00    	and    esi,0xffff
c0014fe4:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0014fe7:	e9 cb 00 00 00       	jmp    c00150b7 <Vm::faultHandler(regs*)+0x670>
c0014fec:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014ff3:	83 ec 0c             	sub    esp,0xc
c0014ff6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014ffa:	50                   	push   eax
c0014ffb:	e8 89 f5 ff ff       	call   c0014589 <Vm::inbv(unsigned short)>
c0015000:	0f b6 c0             	movzx  eax,al
c0015003:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0015006:	eb 3f                	jmp    c0015047 <Vm::faultHandler(regs*)+0x600>
c0015008:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001500d:	74 07                	je     c0015016 <Vm::faultHandler(regs*)+0x5cf>
c001500f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0015013:	ed                   	in     eax,dx
c0015014:	eb 14                	jmp    c001502a <Vm::faultHandler(regs*)+0x5e3>
c0015016:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0015019:	66 31 f6             	xor    si,si
c001501c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001501f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0015023:	66 ed                	in     ax,dx
c0015025:	0f b7 c0             	movzx  eax,ax
c0015028:	09 f0                	or     eax,esi
c001502a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001502d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0015031:	e9 84 00 00 00       	jmp    c00150ba <Vm::faultHandler(regs*)+0x673>
c0015036:	52                   	push   edx
c0015037:	52                   	push   edx
c0015038:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001503c:	50                   	push   eax
c001503d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015041:	50                   	push   eax
c0015042:	e8 55 f5 ff ff       	call   c001459c <Vm::outbv(unsigned short, unsigned char)>
c0015047:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001504b:	eb 53                	jmp    c00150a0 <Vm::faultHandler(regs*)+0x659>
c001504d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0015050:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0015054:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015059:	74 03                	je     c001505e <Vm::faultHandler(regs*)+0x617>
c001505b:	ef                   	out    dx,eax
c001505c:	eb cf                	jmp    c001502d <Vm::faultHandler(regs*)+0x5e6>
c001505e:	66 ef                	out    dx,ax
c0015060:	eb cb                	jmp    c001502d <Vm::faultHandler(regs*)+0x5e6>
c0015062:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0015069:	83 ec 0c             	sub    esp,0xc
c001506c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0015070:	50                   	push   eax
c0015071:	e8 13 f5 ff ff       	call   c0014589 <Vm::inbv(unsigned short)>
c0015076:	0f b6 c0             	movzx  eax,al
c0015079:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001507c:	eb 1f                	jmp    c001509d <Vm::faultHandler(regs*)+0x656>
c001507e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0015081:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015086:	74 03                	je     c001508b <Vm::faultHandler(regs*)+0x644>
c0015088:	ed                   	in     eax,dx
c0015089:	eb 0d                	jmp    c0015098 <Vm::faultHandler(regs*)+0x651>
c001508b:	66 ed                	in     ax,dx
c001508d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0015090:	0f b7 c0             	movzx  eax,ax
c0015093:	66 31 d2             	xor    dx,dx
c0015096:	09 d0                	or     eax,edx
c0015098:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001509b:	eb 1a                	jmp    c00150b7 <Vm::faultHandler(regs*)+0x670>
c001509d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00150a0:	83 c4 10             	add    esp,0x10
c00150a3:	eb 15                	jmp    c00150ba <Vm::faultHandler(regs*)+0x673>
c00150a5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00150a8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00150ab:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00150b0:	74 03                	je     c00150b5 <Vm::faultHandler(regs*)+0x66e>
c00150b2:	ef                   	out    dx,eax
c00150b3:	eb 02                	jmp    c00150b7 <Vm::faultHandler(regs*)+0x670>
c00150b5:	66 ef                	out    dx,ax
c00150b7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00150ba:	b0 01                	mov    al,0x1
c00150bc:	eb 56                	jmp    c0015114 <Vm::faultHandler(regs*)+0x6cd>
c00150be:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00150c2:	50                   	push   eax
c00150c3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00150c7:	50                   	push   eax
c00150c8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00150cc:	50                   	push   eax
c00150cd:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00150d1:	50                   	push   eax
c00150d2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00150d6:	50                   	push   eax
c00150d7:	52                   	push   edx
c00150d8:	52                   	push   edx
c00150d9:	68 53 ec 01 c0       	push   0xc001ec53
c00150de:	e8 c5 5a ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c00150e3:	83 c4 20             	add    esp,0x20
c00150e6:	83 ec 0c             	sub    esp,0xc
c00150e9:	6a 60                	push   0x60
c00150eb:	e8 99 f4 ff ff       	call   c0014589 <Vm::inbv(unsigned short)>
c00150f0:	83 c4 10             	add    esp,0x10
c00150f3:	3c 1c                	cmp    al,0x1c
c00150f5:	74 04                	je     c00150fb <Vm::faultHandler(regs*)+0x6b4>
c00150f7:	3c 5a                	cmp    al,0x5a
c00150f9:	75 eb                	jne    c00150e6 <Vm::faultHandler(regs*)+0x69f>
c00150fb:	3c 5a                	cmp    al,0x5a
c00150fd:	74 04                	je     c0015103 <Vm::faultHandler(regs*)+0x6bc>
c00150ff:	3c 1c                	cmp    al,0x1c
c0015101:	75 0f                	jne    c0015112 <Vm::faultHandler(regs*)+0x6cb>
c0015103:	83 ec 0c             	sub    esp,0xc
c0015106:	6a 60                	push   0x60
c0015108:	e8 7c f4 ff ff       	call   c0014589 <Vm::inbv(unsigned short)>
c001510d:	83 c4 10             	add    esp,0x10
c0015110:	eb e9                	jmp    c00150fb <Vm::faultHandler(regs*)+0x6b4>
c0015112:	31 c0                	xor    eax,eax
c0015114:	83 c4 1c             	add    esp,0x1c
c0015117:	5b                   	pop    ebx
c0015118:	5e                   	pop    esi
c0015119:	5f                   	pop    edi
c001511a:	5d                   	pop    ebp
c001511b:	c3                   	ret    

c001511c <noCopro(unsigned long)>:
c001511c:	c3                   	ret    

c001511d <nmiHandler(regs*, void*)>:
c001511d:	83 ec 0c             	sub    esp,0xc
c0015120:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c0015125:	83 ec 0c             	sub    esp,0xc
c0015128:	50                   	push   eax
c0015129:	e8 10 25 ff ff       	call   c000763e <Computer::handleNMI()>
c001512e:	83 c4 10             	add    esp,0x10
c0015131:	90                   	nop
c0015132:	83 c4 0c             	add    esp,0xc
c0015135:	c3                   	ret    

c0015136 <doubleFault(regs*, void*)>:
c0015136:	55                   	push   ebp
c0015137:	89 e5                	mov    ebp,esp
c0015139:	83 ec 08             	sub    esp,0x8
c001513c:	83 ec 0c             	sub    esp,0xc
c001513f:	68 b0 ec 01 c0       	push   0xc001ecb0
c0015144:	e8 ae b5 ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c0015149:	83 c4 10             	add    esp,0x10
c001514c:	90                   	nop
c001514d:	c9                   	leave  
c001514e:	c3                   	ret    

c001514f <displayDebugInfo(regs*)>:
c001514f:	83 ec 1c             	sub    esp,0x1c
c0015152:	0f 20 c0             	mov    eax,cr0
c0015155:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015159:	0f 20 d0             	mov    eax,cr2
c001515c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015160:	0f 20 d8             	mov    eax,cr3
c0015163:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015167:	0f 20 e0             	mov    eax,cr4
c001516a:	89 04 24             	mov    DWORD PTR [esp],eax
c001516d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015171:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0015174:	83 ec 08             	sub    esp,0x8
c0015177:	50                   	push   eax
c0015178:	68 cc ec 01 c0       	push   0xc001eccc
c001517d:	e8 26 5a ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c0015182:	83 c4 10             	add    esp,0x10
c0015185:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015189:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001518c:	83 ec 08             	sub    esp,0x8
c001518f:	50                   	push   eax
c0015190:	68 bd ec 01 c0       	push   0xc001ecbd
c0015195:	e8 0e 5a ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c001519a:	83 c4 10             	add    esp,0x10
c001519d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151a1:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00151a4:	83 ec 08             	sub    esp,0x8
c00151a7:	50                   	push   eax
c00151a8:	68 c8 ec 01 c0       	push   0xc001ecc8
c00151ad:	e8 f6 59 ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c00151b2:	83 c4 10             	add    esp,0x10
c00151b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151b9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151bc:	83 ec 08             	sub    esp,0x8
c00151bf:	50                   	push   eax
c00151c0:	68 d7 ec 01 c0       	push   0xc001ecd7
c00151c5:	e8 de 59 ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c00151ca:	83 c4 10             	add    esp,0x10
c00151cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151d1:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00151d4:	83 ec 08             	sub    esp,0x8
c00151d7:	50                   	push   eax
c00151d8:	68 e2 ec 01 c0       	push   0xc001ece2
c00151dd:	e8 c6 59 ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c00151e2:	83 c4 10             	add    esp,0x10
c00151e5:	83 ec 08             	sub    esp,0x8
c00151e8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00151ec:	68 ed ec 01 c0       	push   0xc001eced
c00151f1:	e8 b2 59 ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c00151f6:	83 c4 10             	add    esp,0x10
c00151f9:	83 ec 08             	sub    esp,0x8
c00151fc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0015200:	68 f8 ec 01 c0       	push   0xc001ecf8
c0015205:	e8 9e 59 ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c001520a:	83 c4 10             	add    esp,0x10
c001520d:	a1 f0 3d 02 c0       	mov    eax,ds:0xc0023df0
c0015212:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015218:	83 ec 0c             	sub    esp,0xc
c001521b:	50                   	push   eax
c001521c:	e8 28 39 ff ff       	call   c0008b49 <setActiveTerminal(VgaText*)>
c0015221:	83 c4 10             	add    esp,0x10
c0015224:	a1 f0 3d 02 c0       	mov    eax,ds:0xc0023df0
c0015229:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001522f:	83 ec 08             	sub    esp,0x8
c0015232:	68 03 ed 01 c0       	push   0xc001ed03
c0015237:	50                   	push   eax
c0015238:	e8 4b 3c ff ff       	call   c0008e88 <VgaText::puts(char const*)>
c001523d:	83 c4 10             	add    esp,0x10
c0015240:	a1 f0 3d 02 c0       	mov    eax,ds:0xc0023df0
c0015245:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001524b:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0015250:	8b 12                	mov    edx,DWORD PTR [edx]
c0015252:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015255:	83 c2 0c             	add    edx,0xc
c0015258:	83 ec 08             	sub    esp,0x8
c001525b:	52                   	push   edx
c001525c:	50                   	push   eax
c001525d:	e8 26 3c ff ff       	call   c0008e88 <VgaText::puts(char const*)>
c0015262:	83 c4 10             	add    esp,0x10
c0015265:	a1 f0 3d 02 c0       	mov    eax,ds:0xc0023df0
c001526a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015270:	83 ec 08             	sub    esp,0x8
c0015273:	68 0c ed 01 c0       	push   0xc001ed0c
c0015278:	50                   	push   eax
c0015279:	e8 0a 3c ff ff       	call   c0008e88 <VgaText::puts(char const*)>
c001527e:	83 c4 10             	add    esp,0x10
c0015281:	a1 f0 3d 02 c0       	mov    eax,ds:0xc0023df0
c0015286:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001528c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015290:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0015293:	83 ec 08             	sub    esp,0x8
c0015296:	52                   	push   edx
c0015297:	50                   	push   eax
c0015298:	e8 a5 3b ff ff       	call   c0008e42 <VgaText::putx(unsigned int)>
c001529d:	83 c4 10             	add    esp,0x10
c00152a0:	a1 f0 3d 02 c0       	mov    eax,ds:0xc0023df0
c00152a5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152ab:	83 ec 08             	sub    esp,0x8
c00152ae:	68 14 ed 01 c0       	push   0xc001ed14
c00152b3:	50                   	push   eax
c00152b4:	e8 cf 3b ff ff       	call   c0008e88 <VgaText::puts(char const*)>
c00152b9:	83 c4 10             	add    esp,0x10
c00152bc:	a1 f0 3d 02 c0       	mov    eax,ds:0xc0023df0
c00152c1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152c7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00152cb:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00152ce:	83 ec 08             	sub    esp,0x8
c00152d1:	52                   	push   edx
c00152d2:	50                   	push   eax
c00152d3:	e8 6a 3b ff ff       	call   c0008e42 <VgaText::putx(unsigned int)>
c00152d8:	83 c4 10             	add    esp,0x10
c00152db:	a1 f0 3d 02 c0       	mov    eax,ds:0xc0023df0
c00152e0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152e6:	83 ec 08             	sub    esp,0x8
c00152e9:	68 1c ed 01 c0       	push   0xc001ed1c
c00152ee:	50                   	push   eax
c00152ef:	e8 94 3b ff ff       	call   c0008e88 <VgaText::puts(char const*)>
c00152f4:	83 c4 10             	add    esp,0x10
c00152f7:	a1 f0 3d 02 c0       	mov    eax,ds:0xc0023df0
c00152fc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015302:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015306:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0015309:	83 ec 08             	sub    esp,0x8
c001530c:	52                   	push   edx
c001530d:	50                   	push   eax
c001530e:	e8 2f 3b ff ff       	call   c0008e42 <VgaText::putx(unsigned int)>
c0015313:	83 c4 10             	add    esp,0x10
c0015316:	a1 f0 3d 02 c0       	mov    eax,ds:0xc0023df0
c001531b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015321:	83 ec 08             	sub    esp,0x8
c0015324:	68 24 ed 01 c0       	push   0xc001ed24
c0015329:	50                   	push   eax
c001532a:	e8 59 3b ff ff       	call   c0008e88 <VgaText::puts(char const*)>
c001532f:	83 c4 10             	add    esp,0x10
c0015332:	a1 f0 3d 02 c0       	mov    eax,ds:0xc0023df0
c0015337:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001533d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015341:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015344:	83 ec 08             	sub    esp,0x8
c0015347:	52                   	push   edx
c0015348:	50                   	push   eax
c0015349:	e8 f4 3a ff ff       	call   c0008e42 <VgaText::putx(unsigned int)>
c001534e:	83 c4 10             	add    esp,0x10
c0015351:	a1 f0 3d 02 c0       	mov    eax,ds:0xc0023df0
c0015356:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001535c:	83 ec 08             	sub    esp,0x8
c001535f:	68 2c ed 01 c0       	push   0xc001ed2c
c0015364:	50                   	push   eax
c0015365:	e8 1e 3b ff ff       	call   c0008e88 <VgaText::puts(char const*)>
c001536a:	83 c4 10             	add    esp,0x10
c001536d:	a1 f0 3d 02 c0       	mov    eax,ds:0xc0023df0
c0015372:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015378:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001537c:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001537f:	83 ec 08             	sub    esp,0x8
c0015382:	52                   	push   edx
c0015383:	50                   	push   eax
c0015384:	e8 b9 3a ff ff       	call   c0008e42 <VgaText::putx(unsigned int)>
c0015389:	83 c4 10             	add    esp,0x10
c001538c:	a1 f0 3d 02 c0       	mov    eax,ds:0xc0023df0
c0015391:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015397:	83 ec 08             	sub    esp,0x8
c001539a:	68 34 ed 01 c0       	push   0xc001ed34
c001539f:	50                   	push   eax
c00153a0:	e8 e3 3a ff ff       	call   c0008e88 <VgaText::puts(char const*)>
c00153a5:	83 c4 10             	add    esp,0x10
c00153a8:	a1 f0 3d 02 c0       	mov    eax,ds:0xc0023df0
c00153ad:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153b3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00153b7:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00153ba:	83 ec 08             	sub    esp,0x8
c00153bd:	52                   	push   edx
c00153be:	50                   	push   eax
c00153bf:	e8 7e 3a ff ff       	call   c0008e42 <VgaText::putx(unsigned int)>
c00153c4:	83 c4 10             	add    esp,0x10
c00153c7:	a1 f0 3d 02 c0       	mov    eax,ds:0xc0023df0
c00153cc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153d2:	83 ec 08             	sub    esp,0x8
c00153d5:	68 3c ed 01 c0       	push   0xc001ed3c
c00153da:	50                   	push   eax
c00153db:	e8 a8 3a ff ff       	call   c0008e88 <VgaText::puts(char const*)>
c00153e0:	83 c4 10             	add    esp,0x10
c00153e3:	a1 f0 3d 02 c0       	mov    eax,ds:0xc0023df0
c00153e8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153ee:	83 ec 08             	sub    esp,0x8
c00153f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00153f5:	50                   	push   eax
c00153f6:	e8 47 3a ff ff       	call   c0008e42 <VgaText::putx(unsigned int)>
c00153fb:	83 c4 10             	add    esp,0x10
c00153fe:	a1 f0 3d 02 c0       	mov    eax,ds:0xc0023df0
c0015403:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015409:	83 ec 08             	sub    esp,0x8
c001540c:	68 45 ed 01 c0       	push   0xc001ed45
c0015411:	50                   	push   eax
c0015412:	e8 71 3a ff ff       	call   c0008e88 <VgaText::puts(char const*)>
c0015417:	83 c4 10             	add    esp,0x10
c001541a:	a1 f0 3d 02 c0       	mov    eax,ds:0xc0023df0
c001541f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015425:	83 ec 08             	sub    esp,0x8
c0015428:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001542c:	50                   	push   eax
c001542d:	e8 10 3a ff ff       	call   c0008e42 <VgaText::putx(unsigned int)>
c0015432:	83 c4 10             	add    esp,0x10
c0015435:	a1 f0 3d 02 c0       	mov    eax,ds:0xc0023df0
c001543a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015440:	83 ec 08             	sub    esp,0x8
c0015443:	68 4d ed 01 c0       	push   0xc001ed4d
c0015448:	50                   	push   eax
c0015449:	e8 3a 3a ff ff       	call   c0008e88 <VgaText::puts(char const*)>
c001544e:	83 c4 10             	add    esp,0x10
c0015451:	a1 f0 3d 02 c0       	mov    eax,ds:0xc0023df0
c0015456:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001545c:	83 ec 08             	sub    esp,0x8
c001545f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0015463:	50                   	push   eax
c0015464:	e8 d9 39 ff ff       	call   c0008e42 <VgaText::putx(unsigned int)>
c0015469:	83 c4 10             	add    esp,0x10
c001546c:	fa                   	cli    
c001546d:	f4                   	hlt    
c001546e:	eb fe                	jmp    c001546e <displayDebugInfo(regs*)+0x31f>

c0015470 <displayProgramFault(char const*)>:
c0015470:	83 ec 0c             	sub    esp,0xc
c0015473:	83 ec 0c             	sub    esp,0xc
c0015476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001547a:	e8 29 57 ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c001547f:	83 c4 10             	add    esp,0x10
c0015482:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015487:	8b 00                	mov    eax,DWORD PTR [eax]
c0015489:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001548c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015492:	85 c0                	test   eax,eax
c0015494:	74 21                	je     c00154b7 <displayProgramFault(char const*)+0x47>
c0015496:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001549b:	8b 00                	mov    eax,DWORD PTR [eax]
c001549d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00154a0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00154a6:	6a 04                	push   0x4
c00154a8:	6a 0f                	push   0xf
c00154aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00154ae:	50                   	push   eax
c00154af:	e8 46 3a ff ff       	call   c0008efa <VgaText::puts(char const*, VgaColour, VgaColour)>
c00154b4:	83 c4 10             	add    esp,0x10
c00154b7:	90                   	nop
c00154b8:	83 c4 0c             	add    esp,0xc
c00154bb:	c3                   	ret    

c00154bc <gpFault(regs*, void*)>:
c00154bc:	83 ec 1c             	sub    esp,0x1c
c00154bf:	c7 05 70 3e 02 c0 47 4a 01 c0 	mov    DWORD PTR ds:0xc0023e70,0xc0014a47
c00154c9:	a1 70 3e 02 c0       	mov    eax,ds:0xc0023e70
c00154ce:	85 c0                	test   eax,eax
c00154d0:	74 1c                	je     c00154ee <gpFault(regs*, void*)+0x32>
c00154d2:	a1 70 3e 02 c0       	mov    eax,ds:0xc0023e70
c00154d7:	83 ec 0c             	sub    esp,0xc
c00154da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00154de:	ff d0                	call   eax
c00154e0:	83 c4 10             	add    esp,0x10
c00154e3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00154e7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00154ec:	75 2e                	jne    c001551c <gpFault(regs*, void*)+0x60>
c00154ee:	83 ec 0c             	sub    esp,0xc
c00154f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00154f5:	e8 55 fc ff ff       	call   c001514f <displayDebugInfo(regs*)>
c00154fa:	83 c4 10             	add    esp,0x10
c00154fd:	83 ec 0c             	sub    esp,0xc
c0015500:	68 55 ed 01 c0       	push   0xc001ed55
c0015505:	e8 66 ff ff ff       	call   c0015470 <displayProgramFault(char const*)>
c001550a:	83 c4 10             	add    esp,0x10
c001550d:	83 ec 0c             	sub    esp,0xc
c0015510:	6a 00                	push   0x0
c0015512:	e8 25 ef ff ff       	call   c001443c <Thr::terminateFromIRQ(int)>
c0015517:	83 c4 10             	add    esp,0x10
c001551a:	eb 01                	jmp    c001551d <gpFault(regs*, void*)+0x61>
c001551c:	90                   	nop
c001551d:	83 c4 1c             	add    esp,0x1c
c0015520:	c3                   	ret    

c0015521 <pgFault(regs*, void*)>:
c0015521:	83 ec 1c             	sub    esp,0x1c
c0015524:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015528:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001552b:	0f 20 d0             	mov    eax,cr2
c001552e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015532:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015536:	83 ec 04             	sub    esp,0x4
c0015539:	52                   	push   edx
c001553a:	50                   	push   eax
c001553b:	68 c0 ed 01 c0       	push   0xc001edc0
c0015540:	e8 63 56 ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c0015545:	83 c4 10             	add    esp,0x10
c0015548:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001554d:	8b 00                	mov    eax,DWORD PTR [eax]
c001554f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015552:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0015558:	0f 20 d2             	mov    edx,cr2
c001555b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001555f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015563:	83 ec 08             	sub    esp,0x8
c0015566:	52                   	push   edx
c0015567:	50                   	push   eax
c0015568:	e8 6d 52 ff ff       	call   c000a7da <VAS::tryLoadBackOffDisk(unsigned long)>
c001556d:	83 c4 10             	add    esp,0x10
c0015570:	84 c0                	test   al,al
c0015572:	75 2e                	jne    c00155a2 <pgFault(regs*, void*)+0x81>
c0015574:	83 ec 0c             	sub    esp,0xc
c0015577:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001557b:	e8 cf fb ff ff       	call   c001514f <displayDebugInfo(regs*)>
c0015580:	83 c4 10             	add    esp,0x10
c0015583:	83 ec 0c             	sub    esp,0xc
c0015586:	68 6e ed 01 c0       	push   0xc001ed6e
c001558b:	e8 e0 fe ff ff       	call   c0015470 <displayProgramFault(char const*)>
c0015590:	83 c4 10             	add    esp,0x10
c0015593:	83 ec 0c             	sub    esp,0xc
c0015596:	6a 00                	push   0x0
c0015598:	e8 9f ee ff ff       	call   c001443c <Thr::terminateFromIRQ(int)>
c001559d:	83 c4 10             	add    esp,0x10
c00155a0:	eb 01                	jmp    c00155a3 <pgFault(regs*, void*)+0x82>
c00155a2:	90                   	nop
c00155a3:	83 c4 1c             	add    esp,0x1c
c00155a6:	c3                   	ret    

c00155a7 <otherISRHandler(regs*, void*)>:
c00155a7:	83 ec 0c             	sub    esp,0xc
c00155aa:	83 ec 0c             	sub    esp,0xc
c00155ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00155b1:	e8 99 fb ff ff       	call   c001514f <displayDebugInfo(regs*)>
c00155b6:	83 c4 10             	add    esp,0x10
c00155b9:	83 ec 0c             	sub    esp,0xc
c00155bc:	68 e8 ed 01 c0       	push   0xc001ede8
c00155c1:	e8 aa fe ff ff       	call   c0015470 <displayProgramFault(char const*)>
c00155c6:	83 c4 10             	add    esp,0x10
c00155c9:	83 ec 0c             	sub    esp,0xc
c00155cc:	6a 00                	push   0x0
c00155ce:	e8 69 ee ff ff       	call   c001443c <Thr::terminateFromIRQ(int)>
c00155d3:	83 c4 10             	add    esp,0x10
c00155d6:	90                   	nop
c00155d7:	83 c4 0c             	add    esp,0xc
c00155da:	c3                   	ret    

c00155db <opcodeFault(regs*, void*)>:
c00155db:	55                   	push   ebp
c00155dc:	89 e5                	mov    ebp,esp
c00155de:	83 ec 08             	sub    esp,0x8
c00155e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155e4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00155e7:	83 ec 08             	sub    esp,0x8
c00155ea:	50                   	push   eax
c00155eb:	68 79 ed 01 c0       	push   0xc001ed79
c00155f0:	e8 b3 55 ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c00155f5:	83 c4 10             	add    esp,0x10
c00155f8:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c00155fd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015603:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0015609:	84 c0                	test   al,al
c001560b:	74 21                	je     c001562e <opcodeFault(regs*, void*)+0x53>
c001560d:	83 ec 0c             	sub    esp,0xc
c0015610:	68 10 ee 01 c0       	push   0xc001ee10
c0015615:	e8 8e 55 ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c001561a:	83 c4 10             	add    esp,0x10
c001561d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015620:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015623:	8d 50 19             	lea    edx,[eax+0x19]
c0015626:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015629:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001562c:	eb 2b                	jmp    c0015659 <opcodeFault(regs*, void*)+0x7e>
c001562e:	83 ec 0c             	sub    esp,0xc
c0015631:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015634:	e8 16 fb ff ff       	call   c001514f <displayDebugInfo(regs*)>
c0015639:	83 c4 10             	add    esp,0x10
c001563c:	83 ec 0c             	sub    esp,0xc
c001563f:	68 87 ed 01 c0       	push   0xc001ed87
c0015644:	e8 27 fe ff ff       	call   c0015470 <displayProgramFault(char const*)>
c0015649:	83 c4 10             	add    esp,0x10
c001564c:	83 ec 0c             	sub    esp,0xc
c001564f:	6a 00                	push   0x0
c0015651:	e8 e6 ed ff ff       	call   c001443c <Thr::terminateFromIRQ(int)>
c0015656:	83 c4 10             	add    esp,0x10
c0015659:	c9                   	leave  
c001565a:	c3                   	ret    

c001565b <i386SaveCoprocessor(void*)>:
c001565b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001565f:	83 c0 3f             	add    eax,0x3f
c0015662:	83 e0 c0             	and    eax,0xffffffc0
c0015665:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015669:	ff 25 6c 3e 02 c0    	jmp    DWORD PTR ds:0xc0023e6c

c001566f <i386LoadCoprocessor(void*)>:
c001566f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015673:	83 c0 3f             	add    eax,0x3f
c0015676:	83 e0 c0             	and    eax,0xffffffc0
c0015679:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001567d:	ff 25 68 3e 02 c0    	jmp    DWORD PTR ds:0xc0023e68

c0015683 <x87EmulHandler(regs*, void*)>:
c0015683:	53                   	push   ebx
c0015684:	83 ec 08             	sub    esp,0x8
c0015687:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001568c:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0015690:	74 10                	je     c00156a2 <x87EmulHandler(regs*, void*)+0x1f>
c0015692:	83 ec 0c             	sub    esp,0xc
c0015695:	68 94 ed 01 c0       	push   0xc001ed94
c001569a:	e8 58 b0 ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c001569f:	83 c4 10             	add    esp,0x10
c00156a2:	0f 20 c0             	mov    eax,cr0
c00156a5:	a8 08                	test   al,0x8
c00156a7:	74 59                	je     c0015702 <x87EmulHandler(regs*, void*)+0x7f>
c00156a9:	0f 06                	clts   
c00156ab:	a1 64 3e 02 c0       	mov    eax,ds:0xc0023e64
c00156b0:	85 c0                	test   eax,eax
c00156b2:	74 0e                	je     c00156c2 <x87EmulHandler(regs*, void*)+0x3f>
c00156b4:	83 ec 0c             	sub    esp,0xc
c00156b7:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00156ba:	e8 9c ff ff ff       	call   c001565b <i386SaveCoprocessor(void*)>
c00156bf:	83 c4 10             	add    esp,0x10
c00156c2:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00156c8:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00156cc:	75 12                	jne    c00156e0 <x87EmulHandler(regs*, void*)+0x5d>
c00156ce:	83 ec 0c             	sub    esp,0xc
c00156d1:	68 40 02 00 00       	push   0x240
c00156d6:	e8 3e 27 ff ff       	call   c0007e19 <malloc>
c00156db:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00156de:	eb 10                	jmp    c00156f0 <x87EmulHandler(regs*, void*)+0x6d>
c00156e0:	83 ec 0c             	sub    esp,0xc
c00156e3:	a1 64 3e 02 c0       	mov    eax,ds:0xc0023e64
c00156e8:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00156eb:	e8 7f ff ff ff       	call   c001566f <i386LoadCoprocessor(void*)>
c00156f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156f5:	83 c4 10             	add    esp,0x10
c00156f8:	a3 64 3e 02 c0       	mov    ds:0xc0023e64,eax
c00156fd:	83 c4 08             	add    esp,0x8
c0015700:	5b                   	pop    ebx
c0015701:	c3                   	ret    
c0015702:	83 ec 0c             	sub    esp,0xc
c0015705:	68 a8 ed 01 c0       	push   0xc001eda8
c001570a:	e8 99 54 ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c001570f:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015717:	83 c4 18             	add    esp,0x18
c001571a:	5b                   	pop    ebx
c001571b:	e9 1c ed ff ff       	jmp    c001443c <Thr::terminateFromIRQ(int)>

c0015720 <HalInitialiseCoprocessor()>:
c0015720:	83 ec 10             	sub    esp,0x10
c0015723:	c7 05 64 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e64,0x0
c001572d:	6a 00                	push   0x0
c001572f:	68 83 56 01 c0       	push   0xc0015683
c0015734:	6a 07                	push   0x7
c0015736:	e8 e1 6d ff ff       	call   c000c51c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001573b:	e8 30 64 00 00       	call   c001bb70 <avxDetect>
c0015740:	83 c4 10             	add    esp,0x10
c0015743:	85 c0                	test   eax,eax
c0015745:	74 1c                	je     c0015763 <HalInitialiseCoprocessor()+0x43>
c0015747:	c7 05 6c 3e 02 c0 9a bb 01 c0 	mov    DWORD PTR ds:0xc0023e6c,0xc001bb9a
c0015751:	c7 05 68 3e 02 c0 ab bb 01 c0 	mov    DWORD PTR ds:0xc0023e68,0xc001bbab
c001575b:	83 c4 0c             	add    esp,0xc
c001575e:	e9 59 64 00 00       	jmp    c001bbbc <avxInit>
c0015763:	e8 88 66 00 00       	call   c001bdf0 <absolutelyNoChanceInHell>
c0015768:	85 c0                	test   eax,eax
c001576a:	74 1c                	je     c0015788 <HalInitialiseCoprocessor()+0x68>
c001576c:	c7 05 6c 3e 02 c0 08 be 01 c0 	mov    DWORD PTR ds:0xc0023e6c,0xc001be08
c0015776:	c7 05 68 3e 02 c0 10 be 01 c0 	mov    DWORD PTR ds:0xc0023e68,0xc001be10
c0015780:	83 c4 0c             	add    esp,0xc
c0015783:	e9 90 66 00 00       	jmp    c001be18 <sseInit>
c0015788:	e8 a9 66 00 00       	call   c001be36 <x87Detect>
c001578d:	85 c0                	test   eax,eax
c001578f:	74 1c                	je     c00157ad <HalInitialiseCoprocessor()+0x8d>
c0015791:	c7 05 6c 3e 02 c0 51 be 01 c0 	mov    DWORD PTR ds:0xc0023e6c,0xc001be51
c001579b:	c7 05 68 3e 02 c0 58 be 01 c0 	mov    DWORD PTR ds:0xc0023e68,0xc001be58
c00157a5:	83 c4 0c             	add    esp,0xc
c00157a8:	e9 b2 66 00 00       	jmp    c001be5f <x87Init>
c00157ad:	c7 05 6c 3e 02 c0 1c 51 01 c0 	mov    DWORD PTR ds:0xc0023e6c,0xc001511c
c00157b7:	c7 05 68 3e 02 c0 1c 51 01 c0 	mov    DWORD PTR ds:0xc0023e68,0xc001511c
c00157c1:	0f 20 c0             	mov    eax,cr0
c00157c4:	83 c8 04             	or     eax,0x4
c00157c7:	0f 22 c0             	mov    cr0,eax
c00157ca:	83 c4 0c             	add    esp,0xc
c00157cd:	c3                   	ret    

c00157ce <HalPanic(char const*)>:
c00157ce:	e9 24 af ff ff       	jmp    c00106f7 <Krnl::panic(char const*)>

c00157d3 <HalQueryPerformanceCounter()>:
c00157d3:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c00157d8:	31 d2                	xor    edx,edx
c00157da:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00157e0:	31 c0                	xor    eax,eax
c00157e2:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00157e9:	74 02                	je     c00157ed <HalQueryPerformanceCounter()+0x1a>
c00157eb:	0f 31                	rdtsc  
c00157ed:	c3                   	ret    

c00157ee <HalInitialise()>:
c00157ee:	53                   	push   ebx
c00157ef:	83 ec 08             	sub    esp,0x8
c00157f2:	e8 58 6f ff ff       	call   c000c74f <setupINTS()>
c00157f7:	80 3d c0 31 02 c0 00 	cmp    BYTE PTR ds:0xc00231c0,0x0
c00157fe:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c0015803:	75 07                	jne    c001580c <HalInitialise()+0x1e>
c0015805:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c001580c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c0015812:	83 e0 01             	and    eax,0x1
c0015815:	a2 60 3e 02 c0       	mov    ds:0xc0023e60,al
c001581a:	e8 a9 02 00 00       	call   c0015ac8 <picOpen()>
c001581f:	80 3d 60 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023e60,0x0
c0015826:	74 0a                	je     c0015832 <HalInitialise()+0x44>
c0015828:	e8 e3 01 00 00       	call   c0015a10 <picDisable()>
c001582d:	e8 ae 5c 00 00       	call   c001b4e0 <apicOpen()>
c0015832:	bb 0f 00 00 00       	mov    ebx,0xf
c0015837:	50                   	push   eax
c0015838:	6a 00                	push   0x0
c001583a:	68 a7 55 01 c0       	push   0xc00155a7
c001583f:	6a 00                	push   0x0
c0015841:	e8 d6 6c ff ff       	call   c000c51c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015846:	83 c4 0c             	add    esp,0xc
c0015849:	6a 00                	push   0x0
c001584b:	68 a7 55 01 c0       	push   0xc00155a7
c0015850:	6a 01                	push   0x1
c0015852:	e8 c5 6c ff ff       	call   c000c51c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015857:	83 c4 0c             	add    esp,0xc
c001585a:	6a 00                	push   0x0
c001585c:	68 1d 51 01 c0       	push   0xc001511d
c0015861:	6a 02                	push   0x2
c0015863:	e8 b4 6c ff ff       	call   c000c51c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015868:	83 c4 0c             	add    esp,0xc
c001586b:	6a 00                	push   0x0
c001586d:	68 a7 55 01 c0       	push   0xc00155a7
c0015872:	6a 03                	push   0x3
c0015874:	e8 a3 6c ff ff       	call   c000c51c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015879:	83 c4 0c             	add    esp,0xc
c001587c:	6a 00                	push   0x0
c001587e:	68 a7 55 01 c0       	push   0xc00155a7
c0015883:	6a 04                	push   0x4
c0015885:	e8 92 6c ff ff       	call   c000c51c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001588a:	83 c4 0c             	add    esp,0xc
c001588d:	6a 00                	push   0x0
c001588f:	68 a7 55 01 c0       	push   0xc00155a7
c0015894:	6a 05                	push   0x5
c0015896:	e8 81 6c ff ff       	call   c000c51c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001589b:	83 c4 0c             	add    esp,0xc
c001589e:	6a 00                	push   0x0
c00158a0:	68 db 55 01 c0       	push   0xc00155db
c00158a5:	6a 06                	push   0x6
c00158a7:	e8 70 6c ff ff       	call   c000c51c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158ac:	83 c4 0c             	add    esp,0xc
c00158af:	6a 00                	push   0x0
c00158b1:	68 36 51 01 c0       	push   0xc0015136
c00158b6:	6a 08                	push   0x8
c00158b8:	e8 5f 6c ff ff       	call   c000c51c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158bd:	83 c4 0c             	add    esp,0xc
c00158c0:	6a 00                	push   0x0
c00158c2:	68 a7 55 01 c0       	push   0xc00155a7
c00158c7:	6a 09                	push   0x9
c00158c9:	e8 4e 6c ff ff       	call   c000c51c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158ce:	83 c4 0c             	add    esp,0xc
c00158d1:	6a 00                	push   0x0
c00158d3:	68 a7 55 01 c0       	push   0xc00155a7
c00158d8:	6a 0a                	push   0xa
c00158da:	e8 3d 6c ff ff       	call   c000c51c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158df:	83 c4 0c             	add    esp,0xc
c00158e2:	6a 00                	push   0x0
c00158e4:	68 a7 55 01 c0       	push   0xc00155a7
c00158e9:	6a 0b                	push   0xb
c00158eb:	e8 2c 6c ff ff       	call   c000c51c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158f0:	83 c4 0c             	add    esp,0xc
c00158f3:	6a 00                	push   0x0
c00158f5:	68 bc 54 01 c0       	push   0xc00154bc
c00158fa:	6a 0d                	push   0xd
c00158fc:	e8 1b 6c ff ff       	call   c000c51c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015901:	83 c4 0c             	add    esp,0xc
c0015904:	6a 00                	push   0x0
c0015906:	68 21 55 01 c0       	push   0xc0015521
c001590b:	6a 0e                	push   0xe
c001590d:	e8 0a 6c ff ff       	call   c000c51c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015912:	83 c4 10             	add    esp,0x10
c0015915:	50                   	push   eax
c0015916:	6a 00                	push   0x0
c0015918:	68 a7 55 01 c0       	push   0xc00155a7
c001591d:	53                   	push   ebx
c001591e:	43                   	inc    ebx
c001591f:	e8 f8 6b ff ff       	call   c000c51c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015924:	83 c4 10             	add    esp,0x10
c0015927:	83 fb 1e             	cmp    ebx,0x1e
c001592a:	75 e9                	jne    c0015915 <HalInitialise()+0x127>
c001592c:	50                   	push   eax
c001592d:	6a 00                	push   0x0
c001592f:	68 9d 20 01 c0       	push   0xc001209d
c0015934:	6a 60                	push   0x60
c0015936:	e8 e1 6b ff ff       	call   c000c51c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001593b:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c0015940:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001594a:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0015951:	e8 c3 24 ff ff       	call   c0007e19 <malloc>
c0015956:	89 04 24             	mov    DWORD PTR [esp],eax
c0015959:	89 c3                	mov    ebx,eax
c001595b:	e8 30 09 00 00       	call   c0016290 <RTC::RTC()>
c0015960:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001596a:	5a                   	pop    edx
c001596b:	59                   	pop    ecx
c001596c:	53                   	push   ebx
c001596d:	ff 35 f8 08 02 c0    	push   DWORD PTR ds:0xc00208f8
c0015973:	e8 70 66 ff ff       	call   c000bfe8 <Device::addChild(Device*)>
c0015978:	8b 03                	mov    eax,DWORD PTR [ebx]
c001597a:	6a 00                	push   0x0
c001597c:	6a 00                	push   0x0
c001597e:	6a 00                	push   0x0
c0015980:	53                   	push   ebx
c0015981:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015984:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c0015989:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c001598f:	83 c4 28             	add    esp,0x28
c0015992:	5b                   	pop    ebx
c0015993:	c3                   	ret    

c0015994 <HalMakeBeep(int)>:
c0015994:	53                   	push   ebx
c0015995:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015999:	85 db                	test   ebx,ebx
c001599b:	75 07                	jne    c00159a4 <HalMakeBeep(int)+0x10>
c001599d:	e4 61                	in     al,0x61
c001599f:	83 e0 fc             	and    eax,0xfffffffc
c00159a2:	eb 26                	jmp    c00159ca <HalMakeBeep(int)+0x36>
c00159a4:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00159a9:	99                   	cdq    
c00159aa:	f7 fb                	idiv   ebx
c00159ac:	89 c1                	mov    ecx,eax
c00159ae:	b0 b6                	mov    al,0xb6
c00159b0:	e6 43                	out    0x43,al
c00159b2:	88 c8                	mov    al,cl
c00159b4:	e6 42                	out    0x42,al
c00159b6:	89 c8                	mov    eax,ecx
c00159b8:	c1 e8 08             	shr    eax,0x8
c00159bb:	e6 42                	out    0x42,al
c00159bd:	e4 61                	in     al,0x61
c00159bf:	88 c2                	mov    dl,al
c00159c1:	83 ca 03             	or     edx,0x3
c00159c4:	38 c2                	cmp    dl,al
c00159c6:	74 04                	je     c00159cc <HalMakeBeep(int)+0x38>
c00159c8:	88 d0                	mov    al,dl
c00159ca:	e6 61                	out    0x61,al
c00159cc:	5b                   	pop    ebx
c00159cd:	c3                   	ret    

c00159ce <HalGetRand()>:
c00159ce:	31 c0                	xor    eax,eax
c00159d0:	c3                   	ret    

c00159d1 <HalEndOfInterrupt(int)>:
c00159d1:	80 3d 60 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023e60,0x0
c00159d8:	74 23                	je     c00159fd <HalEndOfInterrupt(int)+0x2c>
c00159da:	83 ec 14             	sub    esp,0x14
c00159dd:	6a 1b                	push   0x1b
c00159df:	ff 35 f8 08 02 c0    	push   DWORD PTR ds:0xc00208f8
c00159e5:	e8 6c 1a ff ff       	call   c0007456 <Computer::rdmsr(unsigned int)>
c00159ea:	25 00 f0 ff ff       	and    eax,0xfffff000
c00159ef:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00159f9:	83 c4 1c             	add    esp,0x1c
c00159fc:	c3                   	ret    
c00159fd:	e9 56 02 00 00       	jmp    c0015c58 <picEOI(int)>

c0015a02 <HalRestart()>:
c0015a02:	c3                   	ret    

c0015a03 <HalShutdown()>:
c0015a03:	c3                   	ret    

c0015a04 <HalSleep()>:
c0015a04:	c3                   	ret    
c0015a05:	66 90                	xchg   ax,ax
c0015a07:	90                   	nop

c0015a08 <picIoWait()>:
c0015a08:	eb 00                	jmp    c0015a0a <picIoWait()+0x2>
c0015a0a:	eb 00                	jmp    c0015a0c <picIoWait()+0x4>
c0015a0c:	90                   	nop
c0015a0d:	c3                   	ret    
c0015a0e:	66 90                	xchg   ax,ax

c0015a10 <picDisable()>:
c0015a10:	83 ec 10             	sub    esp,0x10
c0015a13:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0015a1a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0015a1f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015a23:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015a28:	ee                   	out    dx,al
c0015a29:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0015a30:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0015a35:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015a39:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0015a3e:	ee                   	out    dx,al
c0015a3f:	90                   	nop
c0015a40:	83 c4 10             	add    esp,0x10
c0015a43:	c3                   	ret    

c0015a44 <picGetIRQReg(int)>:
c0015a44:	83 ec 10             	sub    esp,0x10
c0015a47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a4b:	25 ff 00 00 00       	and    eax,0xff
c0015a50:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015a57:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0015a5b:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015a5f:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015a64:	ee                   	out    dx,al
c0015a65:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a69:	25 ff 00 00 00       	and    eax,0xff
c0015a6e:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015a75:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0015a79:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015a7d:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015a82:	ee                   	out    dx,al
c0015a83:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0015a8a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0015a8f:	89 c2                	mov    edx,eax
c0015a91:	ec                   	in     al,dx
c0015a92:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0015a96:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015a9a:	25 ff 00 00 00       	and    eax,0xff
c0015a9f:	c1 e0 08             	shl    eax,0x8
c0015aa2:	89 c1                	mov    ecx,eax
c0015aa4:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0015aab:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015ab0:	89 c2                	mov    edx,eax
c0015ab2:	ec                   	in     al,dx
c0015ab3:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0015ab7:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015abb:	25 ff 00 00 00       	and    eax,0xff
c0015ac0:	09 c8                	or     eax,ecx
c0015ac2:	83 c4 10             	add    esp,0x10
c0015ac5:	c3                   	ret    
c0015ac6:	66 90                	xchg   ax,ax

c0015ac8 <picOpen()>:
c0015ac8:	83 ec 50             	sub    esp,0x50
c0015acb:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0015ad2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015ad7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015adb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015adf:	ee                   	out    dx,al
c0015ae0:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0015ae7:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0015aec:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015af0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015af4:	ee                   	out    dx,al
c0015af5:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0015afd:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0015b05:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0015b0c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015b10:	89 c2                	mov    edx,eax
c0015b12:	ec                   	in     al,dx
c0015b13:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0015b17:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015b1b:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0015b1f:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0015b26:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015b2a:	89 c2                	mov    edx,eax
c0015b2c:	ec                   	in     al,dx
c0015b2d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015b31:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015b35:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0015b39:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0015b40:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0015b45:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0015b49:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015b4d:	ee                   	out    dx,al
c0015b4e:	e8 b5 fe ff ff       	call   c0015a08 <picIoWait()>
c0015b53:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0015b5a:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0015b5f:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015b63:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015b67:	ee                   	out    dx,al
c0015b68:	e8 9b fe ff ff       	call   c0015a08 <picIoWait()>
c0015b6d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015b71:	25 ff 00 00 00       	and    eax,0xff
c0015b76:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015b7d:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015b81:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015b85:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015b89:	ee                   	out    dx,al
c0015b8a:	e8 79 fe ff ff       	call   c0015a08 <picIoWait()>
c0015b8f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015b93:	25 ff 00 00 00       	and    eax,0xff
c0015b98:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015b9f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015ba3:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015ba7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015bab:	ee                   	out    dx,al
c0015bac:	e8 57 fe ff ff       	call   c0015a08 <picIoWait()>
c0015bb1:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015bb8:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0015bbd:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015bc1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015bc5:	ee                   	out    dx,al
c0015bc6:	e8 3d fe ff ff       	call   c0015a08 <picIoWait()>
c0015bcb:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015bd2:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015bd7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0015bdb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015bdf:	ee                   	out    dx,al
c0015be0:	e8 23 fe ff ff       	call   c0015a08 <picIoWait()>
c0015be5:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0015bec:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015bf1:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015bf5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015bf9:	ee                   	out    dx,al
c0015bfa:	e8 09 fe ff ff       	call   c0015a08 <picIoWait()>
c0015bff:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015c06:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0015c0b:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015c0f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015c13:	ee                   	out    dx,al
c0015c14:	e8 ef fd ff ff       	call   c0015a08 <picIoWait()>
c0015c19:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0015c1d:	25 ff 00 00 00       	and    eax,0xff
c0015c22:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015c29:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015c2d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015c31:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015c35:	ee                   	out    dx,al
c0015c36:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0015c3a:	25 ff 00 00 00       	and    eax,0xff
c0015c3f:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0015c46:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015c4a:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0015c4e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0015c52:	ee                   	out    dx,al
c0015c53:	90                   	nop
c0015c54:	83 c4 50             	add    esp,0x50
c0015c57:	c3                   	ret    

c0015c58 <picEOI(int)>:
c0015c58:	83 ec 10             	sub    esp,0x10
c0015c5b:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015c60:	75 22                	jne    c0015c84 <picEOI(int)+0x2c>
c0015c62:	6a 0b                	push   0xb
c0015c64:	e8 db fd ff ff       	call   c0015a44 <picGetIRQReg(int)>
c0015c69:	83 c4 04             	add    esp,0x4
c0015c6c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015c71:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015c76:	25 ff ff 00 00       	and    eax,0xffff
c0015c7b:	25 80 00 00 00       	and    eax,0x80
c0015c80:	74 72                	je     c0015cf4 <picEOI(int)+0x9c>
c0015c82:	66 90                	xchg   ax,ax
c0015c84:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015c89:	75 31                	jne    c0015cbc <picEOI(int)+0x64>
c0015c8b:	6a 0b                	push   0xb
c0015c8d:	e8 b2 fd ff ff       	call   c0015a44 <picGetIRQReg(int)>
c0015c92:	83 c4 04             	add    esp,0x4
c0015c95:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015c9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015c9e:	66 85 c0             	test   ax,ax
c0015ca1:	78 19                	js     c0015cbc <picEOI(int)+0x64>
c0015ca3:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0015caa:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015caf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015cb3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015cb8:	ee                   	out    dx,al
c0015cb9:	eb 3d                	jmp    c0015cf8 <picEOI(int)+0xa0>
c0015cbb:	90                   	nop
c0015cbc:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015cc1:	7e 19                	jle    c0015cdc <picEOI(int)+0x84>
c0015cc3:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015cca:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0015ccf:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015cd3:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015cd8:	ee                   	out    dx,al
c0015cd9:	8d 76 00             	lea    esi,[esi+0x0]
c0015cdc:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015ce3:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015ce8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015cec:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015cf1:	ee                   	out    dx,al
c0015cf2:	eb 04                	jmp    c0015cf8 <picEOI(int)+0xa0>
c0015cf4:	90                   	nop
c0015cf5:	8d 76 00             	lea    esi,[esi+0x0]
c0015cf8:	83 c4 10             	add    esp,0x10
c0015cfb:	c3                   	ret    

c0015cfc <RTC::open(int, int, void*)>:
c0015cfc:	31 c0                	xor    eax,eax
c0015cfe:	c3                   	ret    
c0015cff:	90                   	nop

c0015d00 <RTC::close(int, int, void*)>:
c0015d00:	31 c0                	xor    eax,eax
c0015d02:	c3                   	ret    
c0015d03:	90                   	nop

c0015d04 <RTC::timeInSecondsUTC()>:
c0015d04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d08:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015d0e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015d14:	c3                   	ret    
c0015d15:	90                   	nop

c0015d16 <RTC::timeInDatetimeUTC()>:
c0015d16:	53                   	push   ebx
c0015d17:	83 ec 14             	sub    esp,0x14
c0015d1a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015d1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d22:	8b 10                	mov    edx,DWORD PTR [eax]
c0015d24:	50                   	push   eax
c0015d25:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015d28:	83 c4 0c             	add    esp,0xc
c0015d2b:	52                   	push   edx
c0015d2c:	50                   	push   eax
c0015d2d:	53                   	push   ebx
c0015d2e:	e8 29 60 ff ff       	call   c000bd5c <secondsToDatetime(unsigned long long)>
c0015d33:	89 d8                	mov    eax,ebx
c0015d35:	83 c4 14             	add    esp,0x14
c0015d38:	5b                   	pop    ebx
c0015d39:	c2 04 00             	ret    0x4

c0015d3c <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015d3c:	56                   	push   esi
c0015d3d:	53                   	push   ebx
c0015d3e:	83 ec 14             	sub    esp,0x14
c0015d41:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015d45:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015d47:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015d4a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015d4e:	52                   	push   edx
c0015d4f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d53:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d57:	50                   	push   eax
c0015d58:	e8 ff 5f ff ff       	call   c000bd5c <secondsToDatetime(unsigned long long)>
c0015d5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015d61:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015d65:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015d69:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015d6d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015d71:	89 f0                	mov    eax,esi
c0015d73:	83 c4 20             	add    esp,0x20
c0015d76:	5b                   	pop    ebx
c0015d77:	5e                   	pop    esi
c0015d78:	ff e0                	jmp    eax

c0015d7a <RTC::~RTC()>:
c0015d7a:	83 ec 0c             	sub    esp,0xc
c0015d7d:	ba 50 ee 01 c0       	mov    edx,0xc001ee50
c0015d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d86:	89 10                	mov    DWORD PTR [eax],edx
c0015d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d8c:	83 ec 0c             	sub    esp,0xc
c0015d8f:	50                   	push   eax
c0015d90:	e8 4b 5d ff ff       	call   c000bae0 <Clock::~Clock()>
c0015d95:	83 c4 10             	add    esp,0x10
c0015d98:	90                   	nop
c0015d99:	83 c4 0c             	add    esp,0xc
c0015d9c:	c3                   	ret    
c0015d9d:	90                   	nop

c0015d9e <RTC::~RTC()>:
c0015d9e:	83 ec 0c             	sub    esp,0xc
c0015da1:	83 ec 0c             	sub    esp,0xc
c0015da4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015da8:	e8 cd ff ff ff       	call   c0015d7a <RTC::~RTC()>
c0015dad:	83 c4 10             	add    esp,0x10
c0015db0:	83 ec 08             	sub    esp,0x8
c0015db3:	68 60 01 00 00       	push   0x160
c0015db8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015dbc:	e8 f1 4c ff ff       	call   c000aab2 <operator delete(void*, unsigned long)>
c0015dc1:	83 c4 10             	add    esp,0x10
c0015dc4:	83 c4 0c             	add    esp,0xc
c0015dc7:	c3                   	ret    

c0015dc8 <RTC::get_update_in_progress_flag()>:
c0015dc8:	83 ec 14             	sub    esp,0x14
c0015dcb:	6a 0a                	push   0xa
c0015dcd:	ff 35 f8 08 02 c0    	push   DWORD PTR ds:0xc00208f8
c0015dd3:	e8 32 17 ff ff       	call   c000750a <Computer::readCMOS(unsigned char)>
c0015dd8:	83 c4 1c             	add    esp,0x1c
c0015ddb:	c0 e8 07             	shr    al,0x7
c0015dde:	c3                   	ret    
c0015ddf:	90                   	nop

c0015de0 <RTC::completeRTCRefresh()>:
c0015de0:	55                   	push   ebp
c0015de1:	57                   	push   edi
c0015de2:	56                   	push   esi
c0015de3:	53                   	push   ebx
c0015de4:	83 ec 2c             	sub    esp,0x2c
c0015de7:	8b 1d cc 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022ecc
c0015ded:	83 ec 0c             	sub    esp,0xc
c0015df0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015df4:	e8 cf ff ff ff       	call   c0015dc8 <RTC::get_update_in_progress_flag()>
c0015df9:	83 c4 10             	add    esp,0x10
c0015dfc:	84 c0                	test   al,al
c0015dfe:	74 0e                	je     c0015e0e <RTC::completeRTCRefresh()+0x2e>
c0015e00:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015e06:	3b 05 cc 2e 02 c0    	cmp    eax,DWORD PTR ds:0xc0022ecc
c0015e0c:	73 df                	jae    c0015ded <RTC::completeRTCRefresh()+0xd>
c0015e0e:	55                   	push   ebp
c0015e0f:	55                   	push   ebp
c0015e10:	6a 00                	push   0x0
c0015e12:	ff 35 f8 08 02 c0    	push   DWORD PTR ds:0xc00208f8
c0015e18:	e8 ed 16 ff ff       	call   c000750a <Computer::readCMOS(unsigned char)>
c0015e1d:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015e21:	58                   	pop    eax
c0015e22:	5a                   	pop    edx
c0015e23:	6a 02                	push   0x2
c0015e25:	ff 35 f8 08 02 c0    	push   DWORD PTR ds:0xc00208f8
c0015e2b:	e8 da 16 ff ff       	call   c000750a <Computer::readCMOS(unsigned char)>
c0015e30:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015e34:	59                   	pop    ecx
c0015e35:	5b                   	pop    ebx
c0015e36:	6a 04                	push   0x4
c0015e38:	ff 35 f8 08 02 c0    	push   DWORD PTR ds:0xc00208f8
c0015e3e:	e8 c7 16 ff ff       	call   c000750a <Computer::readCMOS(unsigned char)>
c0015e43:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0015e47:	5e                   	pop    esi
c0015e48:	5f                   	pop    edi
c0015e49:	6a 07                	push   0x7
c0015e4b:	ff 35 f8 08 02 c0    	push   DWORD PTR ds:0xc00208f8
c0015e51:	e8 b4 16 ff ff       	call   c000750a <Computer::readCMOS(unsigned char)>
c0015e56:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015e5a:	5d                   	pop    ebp
c0015e5b:	58                   	pop    eax
c0015e5c:	6a 08                	push   0x8
c0015e5e:	ff 35 f8 08 02 c0    	push   DWORD PTR ds:0xc00208f8
c0015e64:	e8 a1 16 ff ff       	call   c000750a <Computer::readCMOS(unsigned char)>
c0015e69:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015e6d:	58                   	pop    eax
c0015e6e:	5a                   	pop    edx
c0015e6f:	6a 09                	push   0x9
c0015e71:	ff 35 f8 08 02 c0    	push   DWORD PTR ds:0xc00208f8
c0015e77:	e8 8e 16 ff ff       	call   c000750a <Computer::readCMOS(unsigned char)>
c0015e7c:	83 c4 10             	add    esp,0x10
c0015e7f:	0f b6 e8             	movzx  ebp,al
c0015e82:	8b 1d cc 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022ecc
c0015e88:	83 ec 0c             	sub    esp,0xc
c0015e8b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015e8f:	e8 34 ff ff ff       	call   c0015dc8 <RTC::get_update_in_progress_flag()>
c0015e94:	83 c4 10             	add    esp,0x10
c0015e97:	84 c0                	test   al,al
c0015e99:	74 0e                	je     c0015ea9 <RTC::completeRTCRefresh()+0xc9>
c0015e9b:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015ea1:	3b 05 cc 2e 02 c0    	cmp    eax,DWORD PTR ds:0xc0022ecc
c0015ea7:	73 df                	jae    c0015e88 <RTC::completeRTCRefresh()+0xa8>
c0015ea9:	50                   	push   eax
c0015eaa:	50                   	push   eax
c0015eab:	6a 00                	push   0x0
c0015ead:	ff 35 f8 08 02 c0    	push   DWORD PTR ds:0xc00208f8
c0015eb3:	e8 52 16 ff ff       	call   c000750a <Computer::readCMOS(unsigned char)>
c0015eb8:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015ebc:	58                   	pop    eax
c0015ebd:	5a                   	pop    edx
c0015ebe:	6a 02                	push   0x2
c0015ec0:	ff 35 f8 08 02 c0    	push   DWORD PTR ds:0xc00208f8
c0015ec6:	e8 3f 16 ff ff       	call   c000750a <Computer::readCMOS(unsigned char)>
c0015ecb:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015ecf:	59                   	pop    ecx
c0015ed0:	5b                   	pop    ebx
c0015ed1:	6a 04                	push   0x4
c0015ed3:	ff 35 f8 08 02 c0    	push   DWORD PTR ds:0xc00208f8
c0015ed9:	e8 2c 16 ff ff       	call   c000750a <Computer::readCMOS(unsigned char)>
c0015ede:	5e                   	pop    esi
c0015edf:	88 c3                	mov    bl,al
c0015ee1:	5f                   	pop    edi
c0015ee2:	6a 07                	push   0x7
c0015ee4:	ff 35 f8 08 02 c0    	push   DWORD PTR ds:0xc00208f8
c0015eea:	e8 1b 16 ff ff       	call   c000750a <Computer::readCMOS(unsigned char)>
c0015eef:	89 c6                	mov    esi,eax
c0015ef1:	58                   	pop    eax
c0015ef2:	5a                   	pop    edx
c0015ef3:	6a 08                	push   0x8
c0015ef5:	ff 35 f8 08 02 c0    	push   DWORD PTR ds:0xc00208f8
c0015efb:	e8 0a 16 ff ff       	call   c000750a <Computer::readCMOS(unsigned char)>
c0015f00:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015f04:	59                   	pop    ecx
c0015f05:	5f                   	pop    edi
c0015f06:	6a 09                	push   0x9
c0015f08:	ff 35 f8 08 02 c0    	push   DWORD PTR ds:0xc00208f8
c0015f0e:	e8 f7 15 ff ff       	call   c000750a <Computer::readCMOS(unsigned char)>
c0015f13:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015f17:	0f b6 f8             	movzx  edi,al
c0015f1a:	83 c4 10             	add    esp,0x10
c0015f1d:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015f21:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015f25:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015f29:	89 f1                	mov    ecx,esi
c0015f2b:	0f 94 c0             	sete   al
c0015f2e:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015f32:	0f 94 c2             	sete   dl
c0015f35:	21 d0                	and    eax,edx
c0015f37:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015f3b:	0f 94 c2             	sete   dl
c0015f3e:	21 c2                	and    edx,eax
c0015f40:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015f44:	0f 94 c0             	sete   al
c0015f47:	21 d0                	and    eax,edx
c0015f49:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015f4d:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015f51:	0f 94 c1             	sete   cl
c0015f54:	84 c8                	test   al,cl
c0015f56:	75 29                	jne    c0015f81 <RTC::completeRTCRefresh()+0x1a1>
c0015f58:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015f5c:	89 fd                	mov    ebp,edi
c0015f5e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015f62:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015f66:	89 f0                	mov    eax,esi
c0015f68:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015f6c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015f70:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015f74:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015f78:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015f7c:	e9 01 ff ff ff       	jmp    c0015e82 <RTC::completeRTCRefresh()+0xa2>
c0015f81:	39 fd                	cmp    ebp,edi
c0015f83:	75 d3                	jne    c0015f58 <RTC::completeRTCRefresh()+0x178>
c0015f85:	55                   	push   ebp
c0015f86:	55                   	push   ebp
c0015f87:	6a 0b                	push   0xb
c0015f89:	ff 35 f8 08 02 c0    	push   DWORD PTR ds:0xc00208f8
c0015f8f:	e8 76 15 ff ff       	call   c000750a <Computer::readCMOS(unsigned char)>
c0015f94:	83 c4 10             	add    esp,0x10
c0015f97:	89 c5                	mov    ebp,eax
c0015f99:	a8 04                	test   al,0x4
c0015f9b:	75 78                	jne    c0016015 <RTC::completeRTCRefresh()+0x235>
c0015f9d:	b1 0a                	mov    cl,0xa
c0015f9f:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015fa3:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015fa7:	83 e2 0f             	and    edx,0xf
c0015faa:	c0 e8 04             	shr    al,0x4
c0015fad:	c1 ef 04             	shr    edi,0x4
c0015fb0:	f6 e1                	mul    cl
c0015fb2:	6b ff 0a             	imul   edi,edi,0xa
c0015fb5:	01 d0                	add    eax,edx
c0015fb7:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015fbb:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0015fbf:	83 e2 0f             	and    edx,0xf
c0015fc2:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015fc6:	c0 e8 04             	shr    al,0x4
c0015fc9:	f6 e1                	mul    cl
c0015fcb:	01 d0                	add    eax,edx
c0015fcd:	88 da                	mov    dl,bl
c0015fcf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015fd3:	83 e2 0f             	and    edx,0xf
c0015fd6:	88 d8                	mov    al,bl
c0015fd8:	83 e3 80             	and    ebx,0xffffff80
c0015fdb:	c0 e8 04             	shr    al,0x4
c0015fde:	83 e0 07             	and    eax,0x7
c0015fe1:	f6 e1                	mul    cl
c0015fe3:	01 d0                	add    eax,edx
c0015fe5:	89 f2                	mov    edx,esi
c0015fe7:	09 c3                	or     ebx,eax
c0015fe9:	83 e2 0f             	and    edx,0xf
c0015fec:	89 f0                	mov    eax,esi
c0015fee:	c0 e8 04             	shr    al,0x4
c0015ff1:	f6 e1                	mul    cl
c0015ff3:	8d 34 02             	lea    esi,[edx+eax*1]
c0015ff6:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015ffa:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015ffe:	83 e2 0f             	and    edx,0xf
c0016001:	c0 e8 04             	shr    al,0x4
c0016004:	f6 e1                	mul    cl
c0016006:	01 d0                	add    eax,edx
c0016008:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001600c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016010:	83 e0 0f             	and    eax,0xf
c0016013:	01 c7                	add    edi,eax
c0016015:	83 e5 02             	and    ebp,0x2
c0016018:	75 14                	jne    c001602e <RTC::completeRTCRefresh()+0x24e>
c001601a:	84 db                	test   bl,bl
c001601c:	79 10                	jns    c001602e <RTC::completeRTCRefresh()+0x24e>
c001601e:	83 e3 7f             	and    ebx,0x7f
c0016021:	b9 18 00 00 00       	mov    ecx,0x18
c0016026:	8d 43 0c             	lea    eax,[ebx+0xc]
c0016029:	99                   	cdq    
c001602a:	f7 f9                	idiv   ecx
c001602c:	88 d3                	mov    bl,dl
c001602e:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0016034:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c001603a:	77 06                	ja     c0016042 <RTC::completeRTCRefresh()+0x262>
c001603c:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0016042:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0016047:	31 d2                	xor    edx,edx
c0016049:	c1 e1 10             	shl    ecx,0x10
c001604c:	89 d7                	mov    edi,edx
c001604e:	c1 e5 10             	shl    ebp,0x10
c0016051:	31 c0                	xor    eax,eax
c0016053:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0016059:	09 cf                	or     edi,ecx
c001605b:	89 fa                	mov    edx,edi
c001605d:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0016061:	88 da                	mov    dl,bl
c0016063:	89 f3                	mov    ebx,esi
c0016065:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0016069:	88 d8                	mov    al,bl
c001606b:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c001606f:	0f b7 c8             	movzx  ecx,ax
c0016072:	09 e9                	or     ecx,ebp
c0016074:	89 c8                	mov    eax,ecx
c0016076:	51                   	push   ecx
c0016077:	51                   	push   ecx
c0016078:	52                   	push   edx
c0016079:	50                   	push   eax
c001607a:	e8 50 5b ff ff       	call   c000bbcf <datetimeToSeconds(datetime_t)>
c001607f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016083:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0016089:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001608f:	83 c4 3c             	add    esp,0x3c
c0016092:	5b                   	pop    ebx
c0016093:	5e                   	pop    esi
c0016094:	5f                   	pop    edi
c0016095:	5d                   	pop    ebp
c0016096:	c3                   	ret    
c0016097:	90                   	nop

c0016098 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0016098:	55                   	push   ebp
c0016099:	57                   	push   edi
c001609a:	56                   	push   esi
c001609b:	53                   	push   ebx
c001609c:	83 ec 30             	sub    esp,0x30
c001609f:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00160a3:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00160a7:	6a 00                	push   0x0
c00160a9:	6a 00                	push   0x0
c00160ab:	ff 35 f8 08 02 c0    	push   DWORD PTR ds:0xc00208f8
c00160b1:	e8 6a 15 ff ff       	call   c0007620 <Computer::writeCMOS(unsigned char, unsigned char)>
c00160b6:	83 c4 0c             	add    esp,0xc
c00160b9:	6a 00                	push   0x0
c00160bb:	6a 02                	push   0x2
c00160bd:	ff 35 f8 08 02 c0    	push   DWORD PTR ds:0xc00208f8
c00160c3:	e8 58 15 ff ff       	call   c0007620 <Computer::writeCMOS(unsigned char, unsigned char)>
c00160c8:	31 d2                	xor    edx,edx
c00160ca:	89 f9                	mov    ecx,edi
c00160cc:	89 f8                	mov    eax,edi
c00160ce:	c1 e9 10             	shr    ecx,0x10
c00160d1:	0f b6 c4             	movzx  eax,ah
c00160d4:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c00160d8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00160dc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00160e0:	b9 64 00 00 00       	mov    ecx,0x64
c00160e5:	89 f0                	mov    eax,esi
c00160e7:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00160eb:	89 f0                	mov    eax,esi
c00160ed:	0f b6 c4             	movzx  eax,ah
c00160f0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00160f4:	89 f0                	mov    eax,esi
c00160f6:	c1 e8 10             	shr    eax,0x10
c00160f9:	66 f7 f1             	div    cx
c00160fc:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0016101:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0016106:	59                   	pop    ecx
c0016107:	5b                   	pop    ebx
c0016108:	89 fb                	mov    ebx,edi
c001610a:	6a 0b                	push   0xb
c001610c:	ff 35 f8 08 02 c0    	push   DWORD PTR ds:0xc00208f8
c0016112:	e8 f3 13 ff ff       	call   c000750a <Computer::readCMOS(unsigned char)>
c0016117:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001611b:	83 c4 10             	add    esp,0x10
c001611e:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0016123:	75 74                	jne    c0016199 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0016125:	b2 0a                	mov    dl,0xa
c0016127:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001612b:	0f b6 c1             	movzx  eax,cl
c001612e:	f6 f2                	div    dl
c0016130:	88 c3                	mov    bl,al
c0016132:	88 e0                	mov    al,ah
c0016134:	c1 e3 04             	shl    ebx,0x4
c0016137:	09 c3                	or     ebx,eax
c0016139:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001613e:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0016142:	f6 f2                	div    dl
c0016144:	88 c1                	mov    cl,al
c0016146:	88 e0                	mov    al,ah
c0016148:	c1 e1 04             	shl    ecx,0x4
c001614b:	09 c1                	or     ecx,eax
c001614d:	89 f8                	mov    eax,edi
c001614f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0016153:	0f b6 c0             	movzx  eax,al
c0016156:	f6 f2                	div    dl
c0016158:	88 c3                	mov    bl,al
c001615a:	88 e0                	mov    al,ah
c001615c:	c1 e3 04             	shl    ebx,0x4
c001615f:	09 c3                	or     ebx,eax
c0016161:	89 f0                	mov    eax,esi
c0016163:	0f b6 c0             	movzx  eax,al
c0016166:	f6 f2                	div    dl
c0016168:	88 c1                	mov    cl,al
c001616a:	88 e0                	mov    al,ah
c001616c:	c1 e1 04             	shl    ecx,0x4
c001616f:	09 c1                	or     ecx,eax
c0016171:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016176:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c001617a:	f6 f2                	div    dl
c001617c:	88 c1                	mov    cl,al
c001617e:	88 e0                	mov    al,ah
c0016180:	c1 e1 04             	shl    ecx,0x4
c0016183:	09 c1                	or     ecx,eax
c0016185:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c001618a:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001618e:	f6 f2                	div    dl
c0016190:	89 c5                	mov    ebp,eax
c0016192:	88 e0                	mov    al,ah
c0016194:	c1 e5 04             	shl    ebp,0x4
c0016197:	09 c5                	or     ebp,eax
c0016199:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c001619e:	75 17                	jne    c00161b7 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00161a0:	80 fb 0b             	cmp    bl,0xb
c00161a3:	76 0c                	jbe    c00161b1 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c00161a5:	80 eb 0c             	sub    bl,0xc
c00161a8:	75 02                	jne    c00161ac <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c00161aa:	b3 0c                	mov    bl,0xc
c00161ac:	83 cb 80             	or     ebx,0xffffff80
c00161af:	eb 06                	jmp    c00161b7 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00161b1:	84 db                	test   bl,bl
c00161b3:	75 02                	jne    c00161b7 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00161b5:	b3 0c                	mov    bl,0xc
c00161b7:	0f b6 db             	movzx  ebx,bl
c00161ba:	50                   	push   eax
c00161bb:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00161c0:	50                   	push   eax
c00161c1:	6a 00                	push   0x0
c00161c3:	ff 35 f8 08 02 c0    	push   DWORD PTR ds:0xc00208f8
c00161c9:	e8 52 14 ff ff       	call   c0007620 <Computer::writeCMOS(unsigned char, unsigned char)>
c00161ce:	83 c4 0c             	add    esp,0xc
c00161d1:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00161d6:	50                   	push   eax
c00161d7:	6a 02                	push   0x2
c00161d9:	ff 35 f8 08 02 c0    	push   DWORD PTR ds:0xc00208f8
c00161df:	e8 3c 14 ff ff       	call   c0007620 <Computer::writeCMOS(unsigned char, unsigned char)>
c00161e4:	83 c4 0c             	add    esp,0xc
c00161e7:	53                   	push   ebx
c00161e8:	6a 04                	push   0x4
c00161ea:	ff 35 f8 08 02 c0    	push   DWORD PTR ds:0xc00208f8
c00161f0:	e8 2b 14 ff ff       	call   c0007620 <Computer::writeCMOS(unsigned char, unsigned char)>
c00161f5:	83 c4 0c             	add    esp,0xc
c00161f8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00161fd:	50                   	push   eax
c00161fe:	6a 07                	push   0x7
c0016200:	ff 35 f8 08 02 c0    	push   DWORD PTR ds:0xc00208f8
c0016206:	e8 15 14 ff ff       	call   c0007620 <Computer::writeCMOS(unsigned char, unsigned char)>
c001620b:	83 c4 0c             	add    esp,0xc
c001620e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0016213:	50                   	push   eax
c0016214:	6a 08                	push   0x8
c0016216:	ff 35 f8 08 02 c0    	push   DWORD PTR ds:0xc00208f8
c001621c:	e8 ff 13 ff ff       	call   c0007620 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016221:	83 c4 0c             	add    esp,0xc
c0016224:	89 e8                	mov    eax,ebp
c0016226:	0f b6 e8             	movzx  ebp,al
c0016229:	55                   	push   ebp
c001622a:	6a 09                	push   0x9
c001622c:	ff 35 f8 08 02 c0    	push   DWORD PTR ds:0xc00208f8
c0016232:	e8 e9 13 ff ff       	call   c0007620 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016237:	5a                   	pop    edx
c0016238:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001623c:	e8 9f fb ff ff       	call   c0015de0 <RTC::completeRTCRefresh()>
c0016241:	83 c4 3c             	add    esp,0x3c
c0016244:	b0 01                	mov    al,0x1
c0016246:	5b                   	pop    ebx
c0016247:	5e                   	pop    esi
c0016248:	5f                   	pop    edi
c0016249:	5d                   	pop    ebp
c001624a:	c3                   	ret    

c001624b <rtcIRQHandler(regs*, void*)>:
c001624b:	53                   	push   ebx
c001624c:	83 ec 10             	sub    esp,0x10
c001624f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016253:	6a 0c                	push   0xc
c0016255:	ff 35 f8 08 02 c0    	push   DWORD PTR ds:0xc00208f8
c001625b:	e8 aa 12 ff ff       	call   c000750a <Computer::readCMOS(unsigned char)>
c0016260:	83 c4 10             	add    esp,0x10
c0016263:	84 c0                	test   al,al
c0016265:	79 24                	jns    c001628b <rtcIRQHandler(regs*, void*)+0x40>
c0016267:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001626e:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0016275:	66 ff 05 74 3e 02 c0 	inc    WORD PTR ds:0xc0023e74
c001627c:	75 0d                	jne    c001628b <rtcIRQHandler(regs*, void*)+0x40>
c001627e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0016282:	83 c4 08             	add    esp,0x8
c0016285:	5b                   	pop    ebx
c0016286:	e9 55 fb ff ff       	jmp    c0015de0 <RTC::completeRTCRefresh()>
c001628b:	83 c4 08             	add    esp,0x8
c001628e:	5b                   	pop    ebx
c001628f:	c3                   	ret    

c0016290 <RTC::RTC()>:
c0016290:	83 ec 1c             	sub    esp,0x1c
c0016293:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016297:	83 ec 08             	sub    esp,0x8
c001629a:	68 33 ee 01 c0       	push   0xc001ee33
c001629f:	50                   	push   eax
c00162a0:	e8 05 58 ff ff       	call   c000baaa <Clock::Clock(char const*)>
c00162a5:	83 c4 10             	add    esp,0x10
c00162a8:	ba 50 ee 01 c0       	mov    edx,0xc001ee50
c00162ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162b1:	89 10                	mov    DWORD PTR [eax],edx
c00162b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162b7:	83 ec 0c             	sub    esp,0xc
c00162ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00162be:	6a 01                	push   0x1
c00162c0:	68 4b 62 01 c0       	push   0xc001624b
c00162c5:	6a 08                	push   0x8
c00162c7:	50                   	push   eax
c00162c8:	e8 c7 5c ff ff       	call   c000bf94 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00162cd:	83 c4 20             	add    esp,0x20
c00162d0:	89 c2                	mov    edx,eax
c00162d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162d6:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00162dc:	fa                   	cli    
c00162dd:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c00162e2:	40                   	inc    eax
c00162e3:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c00162e8:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c00162ed:	83 ec 08             	sub    esp,0x8
c00162f0:	6a 0b                	push   0xb
c00162f2:	50                   	push   eax
c00162f3:	e8 12 12 ff ff       	call   c000750a <Computer::readCMOS(unsigned char)>
c00162f8:	83 c4 10             	add    esp,0x10
c00162fb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00162ff:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c0016304:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0016308:	83 ca 10             	or     edx,0x10
c001630b:	81 e2 ff 00 00 00    	and    edx,0xff
c0016311:	83 ec 04             	sub    esp,0x4
c0016314:	52                   	push   edx
c0016315:	6a 0b                	push   0xb
c0016317:	50                   	push   eax
c0016318:	e8 03 13 ff ff       	call   c0007620 <Computer::writeCMOS(unsigned char, unsigned char)>
c001631d:	83 c4 10             	add    esp,0x10
c0016320:	83 ec 0c             	sub    esp,0xc
c0016323:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016327:	e8 b4 fa ff ff       	call   c0015de0 <RTC::completeRTCRefresh()>
c001632c:	83 c4 10             	add    esp,0x10
c001632f:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c0016334:	48                   	dec    eax
c0016335:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c001633a:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c001633f:	85 c0                	test   eax,eax
c0016341:	75 01                	jne    c0016344 <RTC::RTC()+0xb4>
c0016343:	fb                   	sti    
c0016344:	90                   	nop
c0016345:	83 c4 1c             	add    esp,0x1c
c0016348:	c3                   	ret    
c0016349:	66 90                	xchg   ax,ax
c001634b:	90                   	nop

c001634c <HalConsoleScroll(int, int)>:
c001634c:	83 ec 10             	sub    esp,0x10
c001634f:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0016357:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001635f:	90                   	nop
c0016360:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0016365:	0f 8f e1 00 00 00    	jg     c001644c <HalConsoleScroll(int, int)+0x100>
c001636b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016373:	90                   	nop
c0016374:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001637c:	0f 8f be 00 00 00    	jg     c0016440 <HalConsoleScroll(int, int)+0xf4>
c0016382:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016386:	89 d0                	mov    eax,edx
c0016388:	c1 e0 02             	shl    eax,0x2
c001638b:	01 d0                	add    eax,edx
c001638d:	c1 e0 05             	shl    eax,0x5
c0016390:	89 c2                	mov    edx,eax
c0016392:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016396:	01 d0                	add    eax,edx
c0016398:	89 c2                	mov    edx,eax
c001639a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001639e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00163a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163a5:	89 d0                	mov    eax,edx
c00163a7:	c1 e0 02             	shl    eax,0x2
c00163aa:	01 d0                	add    eax,edx
c00163ac:	c1 e0 05             	shl    eax,0x5
c00163af:	89 c2                	mov    edx,eax
c00163b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163b5:	01 d0                	add    eax,edx
c00163b7:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c00163bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163c1:	01 c2                	add    edx,eax
c00163c3:	8a 01                	mov    al,BYTE PTR [ecx]
c00163c5:	88 02                	mov    BYTE PTR [edx],al
c00163c7:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00163cc:	75 66                	jne    c0016434 <HalConsoleScroll(int, int)+0xe8>
c00163ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163d2:	83 e0 01             	and    eax,0x1
c00163d5:	74 39                	je     c0016410 <HalConsoleScroll(int, int)+0xc4>
c00163d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00163db:	83 e0 0f             	and    eax,0xf
c00163de:	88 c2                	mov    dl,al
c00163e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00163e4:	c1 e0 04             	shl    eax,0x4
c00163e7:	88 d1                	mov    cl,dl
c00163e9:	09 c1                	or     ecx,eax
c00163eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163ef:	89 d0                	mov    eax,edx
c00163f1:	c1 e0 02             	shl    eax,0x2
c00163f4:	01 d0                	add    eax,edx
c00163f6:	c1 e0 05             	shl    eax,0x5
c00163f9:	89 c2                	mov    edx,eax
c00163fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163ff:	01 d0                	add    eax,edx
c0016401:	89 c2                	mov    edx,eax
c0016403:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016407:	01 d0                	add    eax,edx
c0016409:	88 ca                	mov    dl,cl
c001640b:	88 10                	mov    BYTE PTR [eax],dl
c001640d:	eb 25                	jmp    c0016434 <HalConsoleScroll(int, int)+0xe8>
c001640f:	90                   	nop
c0016410:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016414:	89 d0                	mov    eax,edx
c0016416:	c1 e0 02             	shl    eax,0x2
c0016419:	01 d0                	add    eax,edx
c001641b:	c1 e0 05             	shl    eax,0x5
c001641e:	89 c2                	mov    edx,eax
c0016420:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016424:	01 d0                	add    eax,edx
c0016426:	89 c2                	mov    edx,eax
c0016428:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001642c:	01 d0                	add    eax,edx
c001642e:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0016431:	8d 76 00             	lea    esi,[esi+0x0]
c0016434:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0016438:	e9 37 ff ff ff       	jmp    c0016374 <HalConsoleScroll(int, int)+0x28>
c001643d:	8d 76 00             	lea    esi,[esi+0x0]
c0016440:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016444:	e9 17 ff ff ff       	jmp    c0016360 <HalConsoleScroll(int, int)+0x14>
c0016449:	8d 76 00             	lea    esi,[esi+0x0]
c001644c:	90                   	nop
c001644d:	83 c4 10             	add    esp,0x10
c0016450:	c3                   	ret    
c0016451:	8d 76 00             	lea    esi,[esi+0x0]

c0016454 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0016454:	83 ec 14             	sub    esp,0x14
c0016457:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001645b:	88 04 24             	mov    BYTE PTR [esp],al
c001645e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0016461:	25 ff 00 00 00       	and    eax,0xff
c0016466:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001646a:	89 d1                	mov    ecx,edx
c001646c:	83 e1 0f             	and    ecx,0xf
c001646f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016473:	c1 e2 04             	shl    edx,0x4
c0016476:	81 e2 ff 00 00 00    	and    edx,0xff
c001647c:	09 ca                	or     edx,ecx
c001647e:	c1 e2 08             	shl    edx,0x8
c0016481:	09 d0                	or     eax,edx
c0016483:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0016488:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0016490:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016494:	89 d0                	mov    eax,edx
c0016496:	c1 e0 02             	shl    eax,0x2
c0016499:	01 d0                	add    eax,edx
c001649b:	c1 e0 04             	shl    eax,0x4
c001649e:	89 c2                	mov    edx,eax
c00164a0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00164a4:	01 d0                	add    eax,edx
c00164a6:	01 c0                	add    eax,eax
c00164a8:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00164ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00164b0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00164b5:	66 89 02             	mov    WORD PTR [edx],ax
c00164b8:	90                   	nop
c00164b9:	83 c4 14             	add    esp,0x14
c00164bc:	c3                   	ret    
c00164bd:	8d 76 00             	lea    esi,[esi+0x0]

c00164c0 <HalConsoleCursorUpdate(int, int)>:
c00164c0:	83 ec 20             	sub    esp,0x20
c00164c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00164c7:	89 c2                	mov    edx,eax
c00164c9:	89 d0                	mov    eax,edx
c00164cb:	c1 e0 02             	shl    eax,0x2
c00164ce:	01 d0                	add    eax,edx
c00164d0:	c1 e0 04             	shl    eax,0x4
c00164d3:	89 c2                	mov    edx,eax
c00164d5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00164d9:	01 d0                	add    eax,edx
c00164db:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00164e0:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c00164e7:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c00164ec:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00164f0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00164f4:	ee                   	out    dx,al
c00164f5:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00164fa:	25 ff 00 00 00       	and    eax,0xff
c00164ff:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0016506:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001650a:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001650e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016512:	ee                   	out    dx,al
c0016513:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001651a:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001651f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0016523:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016527:	ee                   	out    dx,al
c0016528:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001652d:	66 c1 e8 08          	shr    ax,0x8
c0016531:	25 ff 00 00 00       	and    eax,0xff
c0016536:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001653d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0016541:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0016545:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016549:	ee                   	out    dx,al
c001654a:	90                   	nop
c001654b:	83 c4 20             	add    esp,0x20
c001654e:	c3                   	ret    
c001654f:	90                   	nop

c0016550 <FAT::getName()>:
c0016550:	b8 84 ee 01 c0       	mov    eax,0xc001ee84
c0016555:	c3                   	ret    
c0016556:	66 90                	xchg   ax,ax

c0016558 <FAT::tell(void*, unsigned long long*)>:
c0016558:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001655d:	75 09                	jne    c0016568 <FAT::tell(void*, unsigned long long*)+0x10>
c001655f:	b8 04 00 00 00       	mov    eax,0x4
c0016564:	c3                   	ret    
c0016565:	8d 76 00             	lea    esi,[esi+0x0]
c0016568:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001656d:	75 09                	jne    c0016578 <FAT::tell(void*, unsigned long long*)+0x20>
c001656f:	b8 04 00 00 00       	mov    eax,0x4
c0016574:	c3                   	ret    
c0016575:	8d 76 00             	lea    esi,[esi+0x0]
c0016578:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001657c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001657f:	ba 00 00 00 00       	mov    edx,0x0
c0016584:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016588:	89 01                	mov    DWORD PTR [ecx],eax
c001658a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001658d:	b8 00 00 00 00       	mov    eax,0x0
c0016592:	c3                   	ret    
c0016593:	90                   	nop

c0016594 <FAT::stat(void*, unsigned long long*)>:
c0016594:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016599:	75 09                	jne    c00165a4 <FAT::stat(void*, unsigned long long*)+0x10>
c001659b:	b8 04 00 00 00       	mov    eax,0x4
c00165a0:	c3                   	ret    
c00165a1:	8d 76 00             	lea    esi,[esi+0x0]
c00165a4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00165a9:	75 09                	jne    c00165b4 <FAT::stat(void*, unsigned long long*)+0x20>
c00165ab:	b8 04 00 00 00       	mov    eax,0x4
c00165b0:	c3                   	ret    
c00165b1:	8d 76 00             	lea    esi,[esi+0x0]
c00165b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165b8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00165bb:	ba 00 00 00 00       	mov    edx,0x0
c00165c0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00165c4:	89 01                	mov    DWORD PTR [ecx],eax
c00165c6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00165c9:	b8 00 00 00 00       	mov    eax,0x0
c00165ce:	c3                   	ret    
c00165cf:	90                   	nop

c00165d0 <FAT::~FAT()>:
c00165d0:	83 ec 0c             	sub    esp,0xc
c00165d3:	ba d0 ee 01 c0       	mov    edx,0xc001eed0
c00165d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165dc:	89 10                	mov    DWORD PTR [eax],edx
c00165de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165e2:	83 ec 0c             	sub    esp,0xc
c00165e5:	50                   	push   eax
c00165e6:	e8 03 49 ff ff       	call   c000aeee <Filesystem::~Filesystem()>
c00165eb:	83 c4 10             	add    esp,0x10
c00165ee:	90                   	nop
c00165ef:	83 c4 0c             	add    esp,0xc
c00165f2:	c3                   	ret    
c00165f3:	90                   	nop

c00165f4 <FAT::~FAT()>:
c00165f4:	83 ec 0c             	sub    esp,0xc
c00165f7:	83 ec 0c             	sub    esp,0xc
c00165fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165fe:	e8 cd ff ff ff       	call   c00165d0 <FAT::~FAT()>
c0016603:	83 c4 10             	add    esp,0x10
c0016606:	83 ec 08             	sub    esp,0x8
c0016609:	6a 08                	push   0x8
c001660b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001660f:	e8 9e 44 ff ff       	call   c000aab2 <operator delete(void*, unsigned long)>
c0016614:	83 c4 10             	add    esp,0x10
c0016617:	83 c4 0c             	add    esp,0xc
c001661a:	c3                   	ret    
c001661b:	90                   	nop

c001661c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001661c:	83 ec 1c             	sub    esp,0x1c
c001661f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0016626:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001662b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001662f:	8b 04 85 a0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc160]
c0016636:	83 f8 ff             	cmp    eax,0xffffffff
c0016639:	75 35                	jne    c0016670 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001663b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001663f:	88 c2                	mov    dl,al
c0016641:	a1 80 3e 02 c0       	mov    eax,ds:0xc0023e80
c0016646:	01 d0                	add    eax,edx
c0016648:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001664c:	8b 15 80 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e80
c0016652:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016656:	89 14 85 a0 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc160],edx
c001665d:	a1 80 3e 02 c0       	mov    eax,ds:0xc0023e80
c0016662:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016666:	89 14 85 20 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0e0],edx
c001666d:	eb 19                	jmp    c0016688 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001666f:	90                   	nop
c0016670:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016674:	88 c2                	mov    dl,al
c0016676:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001667a:	8b 04 85 a0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc160]
c0016681:	01 d0                	add    eax,edx
c0016683:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016687:	90                   	nop
c0016688:	83 ec 04             	sub    esp,0x4
c001668b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001668f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016693:	8d 44 24 15          	lea    eax,[esp+0x15]
c0016697:	50                   	push   eax
c0016698:	e8 d7 e7 fe ff       	call   c0004e74 <f_getlabel>
c001669d:	83 c4 10             	add    esp,0x10
c00166a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00166a4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00166a9:	75 09                	jne    c00166b4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00166ab:	b8 00 00 00 00       	mov    eax,0x0
c00166b0:	eb 0a                	jmp    c00166bc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00166b2:	66 90                	xchg   ax,ax
c00166b4:	b8 01 00 00 00       	mov    eax,0x1
c00166b9:	8d 76 00             	lea    esi,[esi+0x0]
c00166bc:	83 c4 1c             	add    esp,0x1c
c00166bf:	c3                   	ret    

c00166c0 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00166c0:	57                   	push   edi
c00166c1:	83 ec 58             	sub    esp,0x58
c00166c4:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00166cc:	8d 54 24 10          	lea    edx,[esp+0x10]
c00166d0:	b8 00 00 00 00       	mov    eax,0x0
c00166d5:	b9 0f 00 00 00       	mov    ecx,0xf
c00166da:	fc                   	cld    
c00166db:	89 d7                	mov    edi,edx
c00166dd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00166df:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00166e3:	8b 04 85 a0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc160]
c00166ea:	83 f8 ff             	cmp    eax,0xffffffff
c00166ed:	75 35                	jne    c0016724 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c00166ef:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00166f3:	88 c2                	mov    dl,al
c00166f5:	a1 80 3e 02 c0       	mov    eax,ds:0xc0023e80
c00166fa:	01 d0                	add    eax,edx
c00166fc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016700:	8b 15 80 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e80
c0016706:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001670a:	89 14 85 a0 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc160],edx
c0016711:	a1 80 3e 02 c0       	mov    eax,ds:0xc0023e80
c0016716:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001671a:	89 14 85 20 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0e0],edx
c0016721:	eb 19                	jmp    c001673c <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0016723:	90                   	nop
c0016724:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016728:	88 c2                	mov    dl,al
c001672a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001672e:	8b 04 85 a0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc160]
c0016735:	01 d0                	add    eax,edx
c0016737:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001673b:	90                   	nop
c001673c:	83 ec 08             	sub    esp,0x8
c001673f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0016743:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016747:	50                   	push   eax
c0016748:	e8 93 a0 fe ff       	call   c00007e0 <strcat>
c001674d:	83 c4 10             	add    esp,0x10
c0016750:	83 ec 0c             	sub    esp,0xc
c0016753:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016757:	50                   	push   eax
c0016758:	e8 68 e8 fe ff       	call   c0004fc5 <f_setlabel>
c001675d:	83 c4 10             	add    esp,0x10
c0016760:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0016764:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0016769:	75 09                	jne    c0016774 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001676b:	b8 00 00 00 00       	mov    eax,0x0
c0016770:	eb 0a                	jmp    c001677c <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0016772:	66 90                	xchg   ax,ax
c0016774:	b8 01 00 00 00       	mov    eax,0x1
c0016779:	8d 76 00             	lea    esi,[esi+0x0]
c001677c:	83 c4 58             	add    esp,0x58
c001677f:	5f                   	pop    edi
c0016780:	c3                   	ret    
c0016781:	90                   	nop
c0016782:	66 90                	xchg   ax,ax

c0016784 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0016784:	83 ec 2c             	sub    esp,0x2c
c0016787:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001678f:	83 ec 08             	sub    esp,0x8
c0016792:	68 a8 ee 01 c0       	push   0xc001eea8
c0016797:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001679b:	e8 60 9f fe ff       	call   c0000700 <strcmp>
c00167a0:	83 c4 10             	add    esp,0x10
c00167a3:	85 c0                	test   eax,eax
c00167a5:	0f 94 c0             	sete   al
c00167a8:	84 c0                	test   al,al
c00167aa:	74 10                	je     c00167bc <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00167ac:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00167b4:	e9 b3 00 00 00       	jmp    c001686c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00167b9:	8d 76 00             	lea    esi,[esi+0x0]
c00167bc:	83 ec 08             	sub    esp,0x8
c00167bf:	68 9a ee 01 c0       	push   0xc001ee9a
c00167c4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00167c8:	e8 33 9f fe ff       	call   c0000700 <strcmp>
c00167cd:	83 c4 10             	add    esp,0x10
c00167d0:	85 c0                	test   eax,eax
c00167d2:	0f 94 c0             	sete   al
c00167d5:	84 c0                	test   al,al
c00167d7:	74 0f                	je     c00167e8 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c00167d9:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00167e1:	e9 86 00 00 00       	jmp    c001686c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00167e6:	66 90                	xchg   ax,ax
c00167e8:	83 ec 08             	sub    esp,0x8
c00167eb:	68 a0 ee 01 c0       	push   0xc001eea0
c00167f0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00167f4:	e8 07 9f fe ff       	call   c0000700 <strcmp>
c00167f9:	83 c4 10             	add    esp,0x10
c00167fc:	85 c0                	test   eax,eax
c00167fe:	0f 94 c0             	sete   al
c0016801:	84 c0                	test   al,al
c0016803:	74 0b                	je     c0016810 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c0016805:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001680d:	eb 5d                	jmp    c001686c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001680f:	90                   	nop
c0016810:	83 ec 08             	sub    esp,0x8
c0016813:	68 5c cf 01 c0       	push   0xc001cf5c
c0016818:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001681c:	e8 df 9e fe ff       	call   c0000700 <strcmp>
c0016821:	83 c4 10             	add    esp,0x10
c0016824:	85 c0                	test   eax,eax
c0016826:	0f 94 c0             	sete   al
c0016829:	84 c0                	test   al,al
c001682b:	74 0b                	je     c0016838 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001682d:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0016835:	eb 35                	jmp    c001686c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016837:	90                   	nop
c0016838:	83 ec 08             	sub    esp,0x8
c001683b:	68 a6 ee 01 c0       	push   0xc001eea6
c0016840:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016844:	e8 b7 9e fe ff       	call   c0000700 <strcmp>
c0016849:	83 c4 10             	add    esp,0x10
c001684c:	85 c0                	test   eax,eax
c001684e:	0f 94 c0             	sete   al
c0016851:	84 c0                	test   al,al
c0016853:	74 0b                	je     c0016860 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c0016855:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001685d:	eb 0d                	jmp    c001686c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001685f:	90                   	nop
c0016860:	b8 08 00 00 00       	mov    eax,0x8
c0016865:	e9 ea 00 00 00       	jmp    c0016954 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001686a:	66 90                	xchg   ax,ax
c001686c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0016873:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0016878:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001687c:	8b 04 85 a0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc160]
c0016883:	83 f8 ff             	cmp    eax,0xffffffff
c0016886:	75 34                	jne    c00168bc <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c0016888:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001688c:	88 c2                	mov    dl,al
c001688e:	a1 80 3e 02 c0       	mov    eax,ds:0xc0023e80
c0016893:	01 d0                	add    eax,edx
c0016895:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016899:	8b 15 80 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e80
c001689f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00168a3:	89 14 85 a0 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc160],edx
c00168aa:	a1 80 3e 02 c0       	mov    eax,ds:0xc0023e80
c00168af:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00168b3:	89 14 85 20 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0e0],edx
c00168ba:	eb 18                	jmp    c00168d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c00168bc:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00168c0:	88 c2                	mov    dl,al
c00168c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00168c6:	8b 04 85 a0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc160]
c00168cd:	01 d0                	add    eax,edx
c00168cf:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00168d3:	90                   	nop
c00168d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00168d8:	88 04 24             	mov    BYTE PTR [esp],al
c00168db:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00168df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00168e3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00168eb:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00168f0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00168f8:	83 ec 0c             	sub    esp,0xc
c00168fb:	68 00 20 00 00       	push   0x2000
c0016900:	e8 14 15 ff ff       	call   c0007e19 <malloc>
c0016905:	83 c4 10             	add    esp,0x10
c0016908:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001690c:	68 00 20 00 00       	push   0x2000
c0016911:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016915:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016919:	50                   	push   eax
c001691a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001691e:	50                   	push   eax
c001691f:	e8 91 e9 fe ff       	call   c00052b5 <f_mkfs>
c0016924:	83 c4 10             	add    esp,0x10
c0016927:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001692b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0016930:	75 0a                	jne    c001693c <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c0016932:	b8 00 00 00 00       	mov    eax,0x0
c0016937:	eb 1b                	jmp    c0016954 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016939:	8d 76 00             	lea    esi,[esi+0x0]
c001693c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0016941:	75 09                	jne    c001694c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0016943:	b8 09 00 00 00       	mov    eax,0x9
c0016948:	eb 0a                	jmp    c0016954 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001694a:	66 90                	xchg   ax,ax
c001694c:	b8 01 00 00 00       	mov    eax,0x1
c0016951:	8d 76 00             	lea    esi,[esi+0x0]
c0016954:	83 c4 2c             	add    esp,0x2c
c0016957:	c3                   	ret    

c0016958 <FAT::tryMount(LogicalDisk*, int)>:
c0016958:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001695e:	a1 80 3e 02 c0       	mov    eax,ds:0xc0023e80
c0016963:	83 f8 14             	cmp    eax,0x14
c0016966:	75 18                	jne    c0016980 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0016968:	83 ec 0c             	sub    esp,0xc
c001696b:	68 ac ee 01 c0       	push   0xc001eeac
c0016970:	e8 82 9d ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c0016975:	83 c4 10             	add    esp,0x10
c0016978:	b0 00                	mov    al,0x0
c001697a:	e9 e9 01 00 00       	jmp    c0016b68 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001697f:	90                   	nop
c0016980:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0016987:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001698d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016993:	3d 00 02 00 00       	cmp    eax,0x200
c0016998:	74 0a                	je     c00169a4 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001699a:	b0 00                	mov    al,0x0
c001699c:	e9 c7 01 00 00       	jmp    c0016b68 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00169a1:	8d 76 00             	lea    esi,[esi+0x0]
c00169a4:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00169ac:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00169b3:	8b 04 85 a0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc160]
c00169ba:	83 f8 ff             	cmp    eax,0xffffffff
c00169bd:	74 09                	je     c00169c8 <FAT::tryMount(LogicalDisk*, int)+0x70>
c00169bf:	b0 01                	mov    al,0x1
c00169c1:	e9 a2 01 00 00       	jmp    c0016b68 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00169c6:	66 90                	xchg   ax,ax
c00169c8:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00169d2:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00169da:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00169e1:	88 c2                	mov    dl,al
c00169e3:	a1 80 3e 02 c0       	mov    eax,ds:0xc0023e80
c00169e8:	01 d0                	add    eax,edx
c00169ea:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00169f1:	8b 15 80 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e80
c00169f7:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00169fe:	89 14 85 a0 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc160],edx
c0016a05:	a1 80 3e 02 c0       	mov    eax,ds:0xc0023e80
c0016a0a:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0016a11:	89 14 85 20 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0e0],edx
c0016a18:	83 ec 0c             	sub    esp,0xc
c0016a1b:	68 34 02 00 00       	push   0x234
c0016a20:	e8 f4 13 ff ff       	call   c0007e19 <malloc>
c0016a25:	83 c4 10             	add    esp,0x10
c0016a28:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0016a2f:	83 ec 04             	sub    esp,0x4
c0016a32:	6a 00                	push   0x0
c0016a34:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016a3b:	50                   	push   eax
c0016a3c:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016a43:	e8 93 d0 fe ff       	call   c0003adb <f_mount>
c0016a48:	83 c4 10             	add    esp,0x10
c0016a4b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016a52:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0016a5a:	74 1c                	je     c0016a78 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0016a5c:	83 ec 0c             	sub    esp,0xc
c0016a5f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016a66:	e8 ce 13 ff ff       	call   c0007e39 <rfree>
c0016a6b:	83 c4 10             	add    esp,0x10
c0016a6e:	b0 00                	mov    al,0x0
c0016a70:	e9 f3 00 00 00       	jmp    c0016b68 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016a75:	8d 76 00             	lea    esi,[esi+0x0]
c0016a78:	83 ec 04             	sub    esp,0x4
c0016a7b:	68 00 01 00 00       	push   0x100
c0016a80:	6a 00                	push   0x0
c0016a82:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016a89:	50                   	push   eax
c0016a8a:	e8 61 9a fe ff       	call   c00004f0 <memset>
c0016a8f:	83 c4 10             	add    esp,0x10
c0016a92:	83 ec 08             	sub    esp,0x8
c0016a95:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016a9c:	50                   	push   eax
c0016a9d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016aa4:	50                   	push   eax
c0016aa5:	e8 36 9d fe ff       	call   c00007e0 <strcat>
c0016aaa:	83 c4 10             	add    esp,0x10
c0016aad:	83 ec 08             	sub    esp,0x8
c0016ab0:	68 ba ee 01 c0       	push   0xc001eeba
c0016ab5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016abc:	50                   	push   eax
c0016abd:	e8 1e 9d fe ff       	call   c00007e0 <strcat>
c0016ac2:	83 c4 10             	add    esp,0x10
c0016ac5:	83 ec 04             	sub    esp,0x4
c0016ac8:	6a 01                	push   0x1
c0016aca:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0016ad1:	50                   	push   eax
c0016ad2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016ad6:	50                   	push   eax
c0016ad7:	e8 61 d0 fe ff       	call   c0003b3d <f_open>
c0016adc:	83 c4 10             	add    esp,0x10
c0016adf:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016ae6:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0016aed:	85 c0                	test   eax,eax
c0016aef:	74 0b                	je     c0016afc <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0016af1:	78 31                	js     c0016b24 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016af3:	83 e8 04             	sub    eax,0x4
c0016af6:	83 f8 01             	cmp    eax,0x1
c0016af9:	77 29                	ja     c0016b24 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016afb:	90                   	nop
c0016afc:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0016b04:	83 ec 0c             	sub    esp,0xc
c0016b07:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016b0b:	50                   	push   eax
c0016b0c:	e8 df d7 fe ff       	call   c00042f0 <f_close>
c0016b11:	83 c4 10             	add    esp,0x10
c0016b14:	90                   	nop
c0016b15:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0016b1d:	74 41                	je     c0016b60 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0016b1f:	eb 33                	jmp    c0016b54 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0016b21:	8d 76 00             	lea    esi,[esi+0x0]
c0016b24:	83 ec 0c             	sub    esp,0xc
c0016b27:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016b2e:	e8 06 13 ff ff       	call   c0007e39 <rfree>
c0016b33:	83 c4 10             	add    esp,0x10
c0016b36:	83 ec 04             	sub    esp,0x4
c0016b39:	6a 00                	push   0x0
c0016b3b:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016b42:	50                   	push   eax
c0016b43:	6a 00                	push   0x0
c0016b45:	e8 91 cf fe ff       	call   c0003adb <f_mount>
c0016b4a:	83 c4 10             	add    esp,0x10
c0016b4d:	b0 00                	mov    al,0x0
c0016b4f:	eb 17                	jmp    c0016b68 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016b51:	8d 76 00             	lea    esi,[esi+0x0]
c0016b54:	a1 80 3e 02 c0       	mov    eax,ds:0xc0023e80
c0016b59:	40                   	inc    eax
c0016b5a:	a3 80 3e 02 c0       	mov    ds:0xc0023e80,eax
c0016b5f:	90                   	nop
c0016b60:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016b67:	90                   	nop
c0016b68:	81 c4 4c 03 00 00    	add    esp,0x34c
c0016b6e:	c3                   	ret    
c0016b6f:	90                   	nop

c0016b70 <FAT::allocateSwapfile(char const*, int)>:
c0016b70:	55                   	push   ebp
c0016b71:	57                   	push   edi
c0016b72:	56                   	push   esi
c0016b73:	53                   	push   ebx
c0016b74:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0016b7a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016b85:	83 ec 0c             	sub    esp,0xc
c0016b88:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0016b8f:	e8 85 12 ff ff       	call   c0007e19 <malloc>
c0016b94:	83 c4 10             	add    esp,0x10
c0016b97:	89 c7                	mov    edi,eax
c0016b99:	a1 f0 3d 02 c0       	mov    eax,ds:0xc0023df0
c0016b9e:	83 ec 04             	sub    esp,0x4
c0016ba1:	50                   	push   eax
c0016ba2:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016ba9:	57                   	push   edi
c0016baa:	e8 6f 45 ff ff       	call   c000b11e <File::File(char const*, Process*)>
c0016baf:	83 c4 10             	add    esp,0x10
c0016bb2:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016bb9:	83 ec 04             	sub    esp,0x4
c0016bbc:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016bc0:	50                   	push   eax
c0016bc1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016bc5:	50                   	push   eax
c0016bc6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016bcd:	e8 b8 48 ff ff       	call   c000b48a <File::stat(unsigned long long*, bool*)>
c0016bd2:	83 c4 10             	add    esp,0x10
c0016bd5:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016bdc:	c1 e0 14             	shl    eax,0x14
c0016bdf:	89 c7                	mov    edi,eax
c0016be1:	89 c5                	mov    ebp,eax
c0016be3:	c1 fd 1f             	sar    ebp,0x1f
c0016be6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016bee:	89 f9                	mov    ecx,edi
c0016bf0:	31 c1                	xor    ecx,eax
c0016bf2:	89 cb                	mov    ebx,ecx
c0016bf4:	89 e9                	mov    ecx,ebp
c0016bf6:	31 d1                	xor    ecx,edx
c0016bf8:	89 ce                	mov    esi,ecx
c0016bfa:	89 f0                	mov    eax,esi
c0016bfc:	09 d8                	or     eax,ebx
c0016bfe:	0f 84 9c 00 00 00    	je     c0016ca0 <FAT::allocateSwapfile(char const*, int)+0x130>
c0016c04:	83 ec 0c             	sub    esp,0xc
c0016c07:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c0e:	e8 43 47 ff ff       	call   c000b356 <File::unlink()>
c0016c13:	83 c4 10             	add    esp,0x10
c0016c16:	83 ec 08             	sub    esp,0x8
c0016c19:	6a 12                	push   0x12
c0016c1b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c22:	e8 b7 45 ff ff       	call   c000b1de <File::open(FileOpenMode)>
c0016c27:	83 c4 10             	add    esp,0x10
c0016c2a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016c31:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016c37:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016c3e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016c45:	c1 e0 14             	shl    eax,0x14
c0016c48:	83 ec 04             	sub    esp,0x4
c0016c4b:	6a 01                	push   0x1
c0016c4d:	50                   	push   eax
c0016c4e:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016c55:	e8 fb e4 fe ff       	call   c0005155 <f_expand>
c0016c5a:	83 c4 10             	add    esp,0x10
c0016c5d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016c64:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c66:	83 c0 10             	add    eax,0x10
c0016c69:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c6b:	83 ec 0c             	sub    esp,0xc
c0016c6e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016c72:	52                   	push   edx
c0016c73:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016c77:	52                   	push   edx
c0016c78:	6a 00                	push   0x0
c0016c7a:	68 00 04 00 00       	push   0x400
c0016c7f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016c86:	ff d0                	call   eax
c0016c88:	83 c4 20             	add    esp,0x20
c0016c8b:	83 ec 0c             	sub    esp,0xc
c0016c8e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c95:	e8 a2 45 ff ff       	call   c000b23c <File::close()>
c0016c9a:	83 c4 10             	add    esp,0x10
c0016c9d:	8d 76 00             	lea    esi,[esi+0x0]
c0016ca0:	83 ec 08             	sub    esp,0x8
c0016ca3:	6a 01                	push   0x1
c0016ca5:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016cac:	e8 2d 45 ff ff       	call   c000b1de <File::open(FileOpenMode)>
c0016cb1:	83 c4 10             	add    esp,0x10
c0016cb4:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016cbb:	8b 00                	mov    eax,DWORD PTR [eax]
c0016cbd:	83 c0 0c             	add    eax,0xc
c0016cc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0016cc2:	83 ec 0c             	sub    esp,0xc
c0016cc5:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016cc9:	52                   	push   edx
c0016cca:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0016cce:	52                   	push   edx
c0016ccf:	6a 00                	push   0x0
c0016cd1:	6a 04                	push   0x4
c0016cd3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016cda:	ff d0                	call   eax
c0016cdc:	83 c4 20             	add    esp,0x20
c0016cdf:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016ce6:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016cec:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016cf3:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0016cfa:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016cfd:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016d04:	83 ec 0c             	sub    esp,0xc
c0016d07:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016d0e:	e8 29 45 ff ff       	call   c000b23c <File::close()>
c0016d13:	83 c4 10             	add    esp,0x10
c0016d16:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016d1d:	ba 00 00 00 00       	mov    edx,0x0
c0016d22:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016d28:	5b                   	pop    ebx
c0016d29:	5e                   	pop    esi
c0016d2a:	5f                   	pop    edi
c0016d2b:	5d                   	pop    ebp
c0016d2c:	c3                   	ret    
c0016d2d:	90                   	nop
c0016d2e:	66 90                	xchg   ax,ax

c0016d30 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016d30:	57                   	push   edi
c0016d31:	56                   	push   esi
c0016d32:	53                   	push   ebx
c0016d33:	81 ec 50 02 00 00    	sub    esp,0x250
c0016d39:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016d41:	74 0d                	je     c0016d50 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0016d43:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016d4b:	75 0f                	jne    c0016d5c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016d4d:	8d 76 00             	lea    esi,[esi+0x0]
c0016d50:	b8 04 00 00 00       	mov    eax,0x4
c0016d55:	e9 36 01 00 00       	jmp    c0016e90 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016d5a:	66 90                	xchg   ax,ax
c0016d5c:	83 ec 08             	sub    esp,0x8
c0016d5f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016d66:	50                   	push   eax
c0016d67:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0016d6e:	e8 40 d8 fe ff       	call   c00045b3 <f_readdir>
c0016d73:	83 c4 10             	add    esp,0x10
c0016d76:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016d7d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016d84:	83 ec 0c             	sub    esp,0xc
c0016d87:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016d8e:	83 c0 16             	add    eax,0x16
c0016d91:	50                   	push   eax
c0016d92:	e8 c9 97 fe ff       	call   c0000560 <strlen>
c0016d97:	83 c4 10             	add    esp,0x10
c0016d9a:	ba 00 00 00 00       	mov    edx,0x0
c0016d9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016da3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016da7:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016dae:	25 ff 00 00 00       	and    eax,0xff
c0016db3:	83 e0 10             	and    eax,0x10
c0016db6:	74 08                	je     c0016dc0 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016db8:	b8 02 00 00 00       	mov    eax,0x2
c0016dbd:	eb 09                	jmp    c0016dc8 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0016dbf:	90                   	nop
c0016dc0:	b8 01 00 00 00       	mov    eax,0x1
c0016dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0016dc8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016dcc:	83 ec 08             	sub    esp,0x8
c0016dcf:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016dd6:	83 c0 16             	add    eax,0x16
c0016dd9:	50                   	push   eax
c0016dda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016dde:	83 c0 10             	add    eax,0x10
c0016de1:	50                   	push   eax
c0016de2:	e8 39 98 fe ff       	call   c0000620 <strcpy>
c0016de7:	83 c4 10             	add    esp,0x10
c0016dea:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016df1:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016df8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016dfc:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016e03:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016e0a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016e11:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016e18:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016e1f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0016e26:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016e2d:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016e34:	89 c6                	mov    esi,eax
c0016e36:	89 d7                	mov    edi,edx
c0016e38:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e3a:	89 c8                	mov    eax,ecx
c0016e3c:	89 fa                	mov    edx,edi
c0016e3e:	89 f3                	mov    ebx,esi
c0016e40:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0016e47:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016e4e:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016e55:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016e5c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016e62:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016e69:	84 c0                	test   al,al
c0016e6b:	75 07                	jne    c0016e74 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016e6d:	b8 07 00 00 00       	mov    eax,0x7
c0016e72:	eb 1c                	jmp    c0016e90 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016e74:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016e7b:	85 c0                	test   eax,eax
c0016e7d:	75 09                	jne    c0016e88 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016e7f:	b8 00 00 00 00       	mov    eax,0x0
c0016e84:	eb 0a                	jmp    c0016e90 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016e86:	66 90                	xchg   ax,ax
c0016e88:	b8 01 00 00 00       	mov    eax,0x1
c0016e8d:	8d 76 00             	lea    esi,[esi+0x0]
c0016e90:	81 c4 50 02 00 00    	add    esp,0x250
c0016e96:	5b                   	pop    ebx
c0016e97:	5e                   	pop    esi
c0016e98:	5f                   	pop    edi
c0016e99:	c3                   	ret    
c0016e9a:	66 90                	xchg   ax,ax

c0016e9c <FAT::read(void*, unsigned long, void*, int*)>:
c0016e9c:	83 ec 1c             	sub    esp,0x1c
c0016e9f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016ea4:	74 0a                	je     c0016eb0 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016ea6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016eab:	75 0b                	jne    c0016eb8 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016ead:	8d 76 00             	lea    esi,[esi+0x0]
c0016eb0:	b8 04 00 00 00       	mov    eax,0x4
c0016eb5:	eb 41                	jmp    c0016ef8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016eb7:	90                   	nop
c0016eb8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016ebc:	50                   	push   eax
c0016ebd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016ec1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016ec5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016ec9:	e8 3a cf fe ff       	call   c0003e08 <f_read>
c0016ece:	83 c4 10             	add    esp,0x10
c0016ed1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ed5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016ed9:	89 c2                	mov    edx,eax
c0016edb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016edf:	89 10                	mov    DWORD PTR [eax],edx
c0016ee1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ee5:	85 c0                	test   eax,eax
c0016ee7:	75 07                	jne    c0016ef0 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016ee9:	b8 00 00 00 00       	mov    eax,0x0
c0016eee:	eb 08                	jmp    c0016ef8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016ef0:	b8 01 00 00 00       	mov    eax,0x1
c0016ef5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ef8:	83 c4 1c             	add    esp,0x1c
c0016efb:	c3                   	ret    

c0016efc <FAT::write(void*, unsigned long, void*, int*)>:
c0016efc:	83 ec 1c             	sub    esp,0x1c
c0016eff:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f04:	74 0a                	je     c0016f10 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016f06:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016f0b:	75 0b                	jne    c0016f18 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016f0d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f10:	b8 04 00 00 00       	mov    eax,0x4
c0016f15:	eb 41                	jmp    c0016f58 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016f17:	90                   	nop
c0016f18:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016f1c:	50                   	push   eax
c0016f1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016f21:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016f25:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f29:	e8 d9 d0 fe ff       	call   c0004007 <f_write>
c0016f2e:	83 c4 10             	add    esp,0x10
c0016f31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f35:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f39:	89 c2                	mov    edx,eax
c0016f3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f3f:	89 10                	mov    DWORD PTR [eax],edx
c0016f41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f45:	85 c0                	test   eax,eax
c0016f47:	75 07                	jne    c0016f50 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016f49:	b8 00 00 00 00       	mov    eax,0x0
c0016f4e:	eb 08                	jmp    c0016f58 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016f50:	b8 01 00 00 00       	mov    eax,0x1
c0016f55:	8d 76 00             	lea    esi,[esi+0x0]
c0016f58:	83 c4 1c             	add    esp,0x1c
c0016f5b:	c3                   	ret    

c0016f5c <FAT::close(void*)>:
c0016f5c:	83 ec 1c             	sub    esp,0x1c
c0016f5f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f64:	75 0a                	jne    c0016f70 <FAT::close(void*)+0x14>
c0016f66:	b8 04 00 00 00       	mov    eax,0x4
c0016f6b:	eb 3f                	jmp    c0016fac <FAT::close(void*)+0x50>
c0016f6d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f70:	83 ec 0c             	sub    esp,0xc
c0016f73:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f77:	e8 74 d3 fe ff       	call   c00042f0 <f_close>
c0016f7c:	83 c4 10             	add    esp,0x10
c0016f7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f83:	83 ec 0c             	sub    esp,0xc
c0016f86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f8a:	e8 9a 0e ff ff       	call   c0007e29 <free>
c0016f8f:	83 c4 10             	add    esp,0x10
c0016f92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f96:	85 c0                	test   eax,eax
c0016f98:	75 0a                	jne    c0016fa4 <FAT::close(void*)+0x48>
c0016f9a:	b8 00 00 00 00       	mov    eax,0x0
c0016f9f:	eb 0b                	jmp    c0016fac <FAT::close(void*)+0x50>
c0016fa1:	8d 76 00             	lea    esi,[esi+0x0]
c0016fa4:	b8 01 00 00 00       	mov    eax,0x1
c0016fa9:	8d 76 00             	lea    esi,[esi+0x0]
c0016fac:	83 c4 1c             	add    esp,0x1c
c0016faf:	c3                   	ret    

c0016fb0 <FAT::closeDir(void*)>:
c0016fb0:	83 ec 1c             	sub    esp,0x1c
c0016fb3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016fb8:	75 0a                	jne    c0016fc4 <FAT::closeDir(void*)+0x14>
c0016fba:	b8 04 00 00 00       	mov    eax,0x4
c0016fbf:	eb 3f                	jmp    c0017000 <FAT::closeDir(void*)+0x50>
c0016fc1:	8d 76 00             	lea    esi,[esi+0x0]
c0016fc4:	83 ec 0c             	sub    esp,0xc
c0016fc7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fcb:	e8 c1 d5 fe ff       	call   c0004591 <f_closedir>
c0016fd0:	83 c4 10             	add    esp,0x10
c0016fd3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fd7:	83 ec 0c             	sub    esp,0xc
c0016fda:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fde:	e8 46 0e ff ff       	call   c0007e29 <free>
c0016fe3:	83 c4 10             	add    esp,0x10
c0016fe6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016fea:	85 c0                	test   eax,eax
c0016fec:	75 0a                	jne    c0016ff8 <FAT::closeDir(void*)+0x48>
c0016fee:	b8 00 00 00 00       	mov    eax,0x0
c0016ff3:	eb 0b                	jmp    c0017000 <FAT::closeDir(void*)+0x50>
c0016ff5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ff8:	b8 01 00 00 00       	mov    eax,0x1
c0016ffd:	8d 76 00             	lea    esi,[esi+0x0]
c0017000:	83 c4 1c             	add    esp,0x1c
c0017003:	c3                   	ret    

c0017004 <FAT::seek(void*, unsigned long long)>:
c0017004:	83 ec 2c             	sub    esp,0x2c
c0017007:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001700b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001700f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017013:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017017:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001701c:	75 0a                	jne    c0017028 <FAT::seek(void*, unsigned long long)+0x24>
c001701e:	b8 04 00 00 00       	mov    eax,0x4
c0017023:	eb 33                	jmp    c0017058 <FAT::seek(void*, unsigned long long)+0x54>
c0017025:	8d 76 00             	lea    esi,[esi+0x0]
c0017028:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001702c:	83 ec 08             	sub    esp,0x8
c001702f:	50                   	push   eax
c0017030:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017034:	e8 e6 d2 fe ff       	call   c000431f <f_lseek>
c0017039:	83 c4 10             	add    esp,0x10
c001703c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017040:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017044:	85 c0                	test   eax,eax
c0017046:	75 08                	jne    c0017050 <FAT::seek(void*, unsigned long long)+0x4c>
c0017048:	b8 00 00 00 00       	mov    eax,0x0
c001704d:	eb 09                	jmp    c0017058 <FAT::seek(void*, unsigned long long)+0x54>
c001704f:	90                   	nop
c0017050:	b8 01 00 00 00       	mov    eax,0x1
c0017055:	8d 76 00             	lea    esi,[esi+0x0]
c0017058:	83 c4 2c             	add    esp,0x2c
c001705b:	c3                   	ret    

c001705c <fatWrapperReadDisk>:
c001705c:	53                   	push   ebx
c001705d:	83 ec 18             	sub    esp,0x18
c0017060:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017064:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017068:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001706c:	25 ff 00 00 00       	and    eax,0xff
c0017071:	8b 0c 85 60 2e 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd1a0]
c0017078:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001707c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017080:	ba 00 00 00 00       	mov    edx,0x0
c0017085:	83 ec 0c             	sub    esp,0xc
c0017088:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001708c:	53                   	push   ebx
c001708d:	52                   	push   edx
c001708e:	50                   	push   eax
c001708f:	51                   	push   ecx
c0017090:	e8 fb 61 ff ff       	call   c000d290 <LogicalDisk::read(unsigned long long, int, void*)>
c0017095:	83 c4 20             	add    esp,0x20
c0017098:	83 c4 18             	add    esp,0x18
c001709b:	5b                   	pop    ebx
c001709c:	c3                   	ret    
c001709d:	8d 76 00             	lea    esi,[esi+0x0]

c00170a0 <fatWrapperWriteDisk>:
c00170a0:	53                   	push   ebx
c00170a1:	83 ec 18             	sub    esp,0x18
c00170a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170a8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00170ac:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170b0:	25 ff 00 00 00       	and    eax,0xff
c00170b5:	8b 0c 85 60 2e 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd1a0]
c00170bc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00170c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170c4:	ba 00 00 00 00       	mov    edx,0x0
c00170c9:	83 ec 0c             	sub    esp,0xc
c00170cc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00170d0:	53                   	push   ebx
c00170d1:	52                   	push   edx
c00170d2:	50                   	push   eax
c00170d3:	51                   	push   ecx
c00170d4:	e8 23 62 ff ff       	call   c000d2fc <LogicalDisk::write(unsigned long long, int, void*)>
c00170d9:	83 c4 20             	add    esp,0x20
c00170dc:	83 c4 18             	add    esp,0x18
c00170df:	5b                   	pop    ebx
c00170e0:	c3                   	ret    
c00170e1:	8d 76 00             	lea    esi,[esi+0x0]

c00170e4 <fatWrapperIoctl>:
c00170e4:	53                   	push   ebx
c00170e5:	83 ec 28             	sub    esp,0x28
c00170e8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00170ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00170f0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00170f4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00170f8:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c00170fd:	75 35                	jne    c0017134 <fatWrapperIoctl+0x50>
c00170ff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017103:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017107:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001710b:	25 ff 00 00 00       	and    eax,0xff
c0017110:	8b 04 85 60 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd1a0]
c0017117:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001711d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017123:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017127:	66 89 02             	mov    WORD PTR [edx],ax
c001712a:	b8 00 00 00 00       	mov    eax,0x0
c001712f:	e9 c4 00 00 00       	jmp    c00171f8 <fatWrapperIoctl+0x114>
c0017134:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0017139:	75 75                	jne    c00171b0 <fatWrapperIoctl+0xcc>
c001713b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001713f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017143:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017147:	25 ff 00 00 00       	and    eax,0xff
c001714c:	8b 04 85 60 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd1a0]
c0017153:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017159:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001715f:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0017165:	89 c8                	mov    eax,ecx
c0017167:	89 da                	mov    edx,ebx
c0017169:	0f a4 c2 0a          	shld   edx,eax,0xa
c001716d:	c1 e0 0a             	shl    eax,0xa
c0017170:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017174:	81 e1 ff 00 00 00    	and    ecx,0xff
c001717a:	8b 0c 8d 60 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd1a0]
c0017181:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0017187:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001718d:	89 cb                	mov    ebx,ecx
c001718f:	c1 fb 1f             	sar    ebx,0x1f
c0017192:	53                   	push   ebx
c0017193:	51                   	push   ecx
c0017194:	52                   	push   edx
c0017195:	50                   	push   eax
c0017196:	e8 d5 4f 00 00       	call   c001c170 <__udivdi3>
c001719b:	83 c4 10             	add    esp,0x10
c001719e:	89 c2                	mov    edx,eax
c00171a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00171a4:	89 10                	mov    DWORD PTR [eax],edx
c00171a6:	b8 00 00 00 00       	mov    eax,0x0
c00171ab:	eb 4b                	jmp    c00171f8 <fatWrapperIoctl+0x114>
c00171ad:	8d 76 00             	lea    esi,[esi+0x0]
c00171b0:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00171b5:	75 09                	jne    c00171c0 <fatWrapperIoctl+0xdc>
c00171b7:	b8 00 00 00 00       	mov    eax,0x0
c00171bc:	eb 3a                	jmp    c00171f8 <fatWrapperIoctl+0x114>
c00171be:	66 90                	xchg   ax,ax
c00171c0:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00171c5:	75 19                	jne    c00171e0 <fatWrapperIoctl+0xfc>
c00171c7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00171cb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00171cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00171d3:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00171d9:	b8 00 00 00 00       	mov    eax,0x0
c00171de:	eb 18                	jmp    c00171f8 <fatWrapperIoctl+0x114>
c00171e0:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00171e5:	75 09                	jne    c00171f0 <fatWrapperIoctl+0x10c>
c00171e7:	b8 00 00 00 00       	mov    eax,0x0
c00171ec:	eb 0a                	jmp    c00171f8 <fatWrapperIoctl+0x114>
c00171ee:	66 90                	xchg   ax,ax
c00171f0:	b8 04 00 00 00       	mov    eax,0x4
c00171f5:	8d 76 00             	lea    esi,[esi+0x0]
c00171f8:	83 c4 28             	add    esp,0x28
c00171fb:	5b                   	pop    ebx
c00171fc:	c3                   	ret    
c00171fd:	90                   	nop
c00171fe:	66 90                	xchg   ax,ax

c0017200 <FAT::FAT()>:
c0017200:	83 ec 1c             	sub    esp,0x1c
c0017203:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017207:	83 ec 0c             	sub    esp,0xc
c001720a:	50                   	push   eax
c001720b:	e8 ba 3c ff ff       	call   c000aeca <Filesystem::Filesystem()>
c0017210:	83 c4 10             	add    esp,0x10
c0017213:	ba d0 ee 01 c0       	mov    edx,0xc001eed0
c0017218:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001721c:	89 10                	mov    DWORD PTR [eax],edx
c001721e:	c7 05 80 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e80,0x0
c0017228:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017230:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0017235:	7f 15                	jg     c001724c <FAT::FAT()+0x4c>
c0017237:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001723b:	c7 04 85 a0 3e 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdc160],0xffffffff
c0017246:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001724a:	eb e4                	jmp    c0017230 <FAT::FAT()+0x30>
c001724c:	90                   	nop
c001724d:	83 c4 1c             	add    esp,0x1c
c0017250:	c3                   	ret    
c0017251:	90                   	nop
c0017252:	66 90                	xchg   ax,ax

c0017254 <FAT::fixFilepath(char*)>:
c0017254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017258:	8a 00                	mov    al,BYTE PTR [eax]
c001725a:	3c 40                	cmp    al,0x40
c001725c:	7e 2e                	jle    c001728c <FAT::fixFilepath(char*)+0x38>
c001725e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017262:	8a 00                	mov    al,BYTE PTR [eax]
c0017264:	83 e8 41             	sub    eax,0x41
c0017267:	88 c2                	mov    dl,al
c0017269:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001726d:	88 10                	mov    BYTE PTR [eax],dl
c001726f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017273:	8a 00                	mov    al,BYTE PTR [eax]
c0017275:	0f be c0             	movsx  eax,al
c0017278:	8b 04 85 a0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc160]
c001727f:	83 c0 30             	add    eax,0x30
c0017282:	88 c2                	mov    dl,al
c0017284:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017288:	88 10                	mov    BYTE PTR [eax],dl
c001728a:	66 90                	xchg   ax,ax
c001728c:	90                   	nop
c001728d:	c3                   	ret    
c001728e:	66 90                	xchg   ax,ax

c0017290 <FAT::open(char const*, void**, FileOpenMode)>:
c0017290:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017296:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001729e:	74 0c                	je     c00172ac <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00172a0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00172a8:	75 0e                	jne    c00172b8 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c00172aa:	66 90                	xchg   ax,ax
c00172ac:	b8 04 00 00 00       	mov    eax,0x4
c00172b1:	e9 0a 01 00 00       	jmp    c00173c0 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00172b6:	66 90                	xchg   ax,ax
c00172b8:	83 ec 08             	sub    esp,0x8
c00172bb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00172c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00172c6:	50                   	push   eax
c00172c7:	e8 54 93 fe ff       	call   c0000620 <strcpy>
c00172cc:	83 c4 10             	add    esp,0x10
c00172cf:	83 ec 08             	sub    esp,0x8
c00172d2:	8d 44 24 10          	lea    eax,[esp+0x10]
c00172d6:	50                   	push   eax
c00172d7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00172de:	e8 71 ff ff ff       	call   c0017254 <FAT::fixFilepath(char*)>
c00172e3:	83 c4 10             	add    esp,0x10
c00172e6:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00172ee:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00172f5:	83 e0 01             	and    eax,0x1
c00172f8:	74 0a                	je     c0017304 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c00172fa:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0017302:	66 90                	xchg   ax,ax
c0017304:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001730b:	83 e0 04             	and    eax,0x4
c001730e:	74 10                	je     c0017320 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0017310:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0017318:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0017320:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017327:	83 e0 02             	and    eax,0x2
c001732a:	74 08                	je     c0017334 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001732c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0017334:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001733b:	83 e0 08             	and    eax,0x8
c001733e:	74 08                	je     c0017348 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0017340:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0017348:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001734f:	83 e0 10             	and    eax,0x10
c0017352:	74 08                	je     c001735c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0017354:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001735c:	83 ec 0c             	sub    esp,0xc
c001735f:	68 28 02 00 00       	push   0x228
c0017364:	e8 b0 0a ff ff       	call   c0007e19 <malloc>
c0017369:	83 c4 10             	add    esp,0x10
c001736c:	89 c2                	mov    edx,eax
c001736e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017375:	89 10                	mov    DWORD PTR [eax],edx
c0017377:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001737e:	31 d2                	xor    edx,edx
c0017380:	88 c2                	mov    dl,al
c0017382:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017389:	8b 00                	mov    eax,DWORD PTR [eax]
c001738b:	83 ec 04             	sub    esp,0x4
c001738e:	52                   	push   edx
c001738f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0017393:	52                   	push   edx
c0017394:	50                   	push   eax
c0017395:	e8 a3 c7 fe ff       	call   c0003b3d <f_open>
c001739a:	83 c4 10             	add    esp,0x10
c001739d:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00173a4:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00173ac:	74 0a                	je     c00173b8 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c00173ae:	b8 01 00 00 00       	mov    eax,0x1
c00173b3:	eb 0b                	jmp    c00173c0 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00173b5:	8d 76 00             	lea    esi,[esi+0x0]
c00173b8:	b8 00 00 00 00       	mov    eax,0x0
c00173bd:	8d 76 00             	lea    esi,[esi+0x0]
c00173c0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00173c6:	c3                   	ret    
c00173c7:	90                   	nop

c00173c8 <FAT::openDir(char const*, void**)>:
c00173c8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00173ce:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00173d6:	74 0c                	je     c00173e4 <FAT::openDir(char const*, void**)+0x1c>
c00173d8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00173e0:	75 0e                	jne    c00173f0 <FAT::openDir(char const*, void**)+0x28>
c00173e2:	66 90                	xchg   ax,ax
c00173e4:	b8 04 00 00 00       	mov    eax,0x4
c00173e9:	e9 82 00 00 00       	jmp    c0017470 <FAT::openDir(char const*, void**)+0xa8>
c00173ee:	66 90                	xchg   ax,ax
c00173f0:	83 ec 08             	sub    esp,0x8
c00173f3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00173fa:	8d 44 24 18          	lea    eax,[esp+0x18]
c00173fe:	50                   	push   eax
c00173ff:	e8 1c 92 fe ff       	call   c0000620 <strcpy>
c0017404:	83 c4 10             	add    esp,0x10
c0017407:	83 ec 08             	sub    esp,0x8
c001740a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001740e:	50                   	push   eax
c001740f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017416:	e8 39 fe ff ff       	call   c0017254 <FAT::fixFilepath(char*)>
c001741b:	83 c4 10             	add    esp,0x10
c001741e:	83 ec 0c             	sub    esp,0xc
c0017421:	6a 30                	push   0x30
c0017423:	e8 f1 09 ff ff       	call   c0007e19 <malloc>
c0017428:	83 c4 10             	add    esp,0x10
c001742b:	89 c2                	mov    edx,eax
c001742d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017434:	89 10                	mov    DWORD PTR [eax],edx
c0017436:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001743d:	8b 00                	mov    eax,DWORD PTR [eax]
c001743f:	83 ec 08             	sub    esp,0x8
c0017442:	8d 54 24 14          	lea    edx,[esp+0x14]
c0017446:	52                   	push   edx
c0017447:	50                   	push   eax
c0017448:	e8 79 d0 fe ff       	call   c00044c6 <f_opendir>
c001744d:	83 c4 10             	add    esp,0x10
c0017450:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017457:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001745f:	74 07                	je     c0017468 <FAT::openDir(char const*, void**)+0xa0>
c0017461:	b8 01 00 00 00       	mov    eax,0x1
c0017466:	eb 08                	jmp    c0017470 <FAT::openDir(char const*, void**)+0xa8>
c0017468:	b8 00 00 00 00       	mov    eax,0x0
c001746d:	8d 76 00             	lea    esi,[esi+0x0]
c0017470:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017476:	c3                   	ret    
c0017477:	90                   	nop

c0017478 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0017478:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001747e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0017486:	75 0c                	jne    c0017494 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0017488:	b8 04 00 00 00       	mov    eax,0x4
c001748d:	e9 d6 00 00 00       	jmp    c0017568 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017492:	66 90                	xchg   ax,ax
c0017494:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001749c:	75 0a                	jne    c00174a8 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001749e:	b8 04 00 00 00       	mov    eax,0x4
c00174a3:	e9 c0 00 00 00       	jmp    c0017568 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00174a8:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00174b0:	75 0a                	jne    c00174bc <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c00174b2:	b8 04 00 00 00       	mov    eax,0x4
c00174b7:	e9 ac 00 00 00       	jmp    c0017568 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00174bc:	83 ec 08             	sub    esp,0x8
c00174bf:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00174c6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00174cd:	50                   	push   eax
c00174ce:	e8 4d 91 fe ff       	call   c0000620 <strcpy>
c00174d3:	83 c4 10             	add    esp,0x10
c00174d6:	83 ec 08             	sub    esp,0x8
c00174d9:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00174e0:	50                   	push   eax
c00174e1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00174e8:	e8 67 fd ff ff       	call   c0017254 <FAT::fixFilepath(char*)>
c00174ed:	83 c4 10             	add    esp,0x10
c00174f0:	83 ec 08             	sub    esp,0x8
c00174f3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00174f7:	50                   	push   eax
c00174f8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00174ff:	50                   	push   eax
c0017500:	e8 40 d1 fe ff       	call   c0004645 <f_stat>
c0017505:	83 c4 10             	add    esp,0x10
c0017508:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001750f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0017516:	85 c0                	test   eax,eax
c0017518:	74 0a                	je     c0017524 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001751a:	83 f8 04             	cmp    eax,0x4
c001751d:	74 39                	je     c0017558 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001751f:	eb 3f                	jmp    c0017560 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0017521:	8d 76 00             	lea    esi,[esi+0x0]
c0017524:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017528:	25 ff 00 00 00       	and    eax,0xff
c001752d:	83 e0 10             	and    eax,0x10
c0017530:	0f 95 c2             	setne  dl
c0017533:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001753a:	88 10                	mov    BYTE PTR [eax],dl
c001753c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017540:	ba 00 00 00 00       	mov    edx,0x0
c0017545:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001754c:	89 01                	mov    DWORD PTR [ecx],eax
c001754e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017551:	b8 00 00 00 00       	mov    eax,0x0
c0017556:	eb 10                	jmp    c0017568 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017558:	b8 02 00 00 00       	mov    eax,0x2
c001755d:	eb 09                	jmp    c0017568 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001755f:	90                   	nop
c0017560:	b8 01 00 00 00       	mov    eax,0x1
c0017565:	8d 76 00             	lea    esi,[esi+0x0]
c0017568:	81 c4 2c 02 00 00    	add    esp,0x22c
c001756e:	c3                   	ret    
c001756f:	90                   	nop

c0017570 <FAT::unlink(char const*)>:
c0017570:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017576:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001757e:	75 08                	jne    c0017588 <FAT::unlink(char const*)+0x18>
c0017580:	b8 04 00 00 00       	mov    eax,0x4
c0017585:	eb 61                	jmp    c00175e8 <FAT::unlink(char const*)+0x78>
c0017587:	90                   	nop
c0017588:	83 ec 08             	sub    esp,0x8
c001758b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017592:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017596:	50                   	push   eax
c0017597:	e8 84 90 fe ff       	call   c0000620 <strcpy>
c001759c:	83 c4 10             	add    esp,0x10
c001759f:	83 ec 08             	sub    esp,0x8
c00175a2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00175a6:	50                   	push   eax
c00175a7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00175ae:	e8 a1 fc ff ff       	call   c0017254 <FAT::fixFilepath(char*)>
c00175b3:	83 c4 10             	add    esp,0x10
c00175b6:	83 ec 0c             	sub    esp,0xc
c00175b9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00175bd:	50                   	push   eax
c00175be:	e8 e7 d2 fe ff       	call   c00048aa <f_unlink>
c00175c3:	83 c4 10             	add    esp,0x10
c00175c6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00175cd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00175d4:	85 c0                	test   eax,eax
c00175d6:	75 08                	jne    c00175e0 <FAT::unlink(char const*)+0x70>
c00175d8:	b8 00 00 00 00       	mov    eax,0x0
c00175dd:	eb 09                	jmp    c00175e8 <FAT::unlink(char const*)+0x78>
c00175df:	90                   	nop
c00175e0:	b8 01 00 00 00       	mov    eax,0x1
c00175e5:	8d 76 00             	lea    esi,[esi+0x0]
c00175e8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00175ee:	c3                   	ret    
c00175ef:	90                   	nop

c00175f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00175f0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00175f6:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00175fd:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0017604:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017608:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001760c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0017614:	75 0a                	jne    c0017620 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0017616:	b8 04 00 00 00       	mov    eax,0x4
c001761b:	e9 54 01 00 00       	jmp    c0017774 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017620:	83 ec 08             	sub    esp,0x8
c0017623:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001762a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001762e:	50                   	push   eax
c001762f:	e8 ec 8f fe ff       	call   c0000620 <strcpy>
c0017634:	83 c4 10             	add    esp,0x10
c0017637:	83 ec 08             	sub    esp,0x8
c001763a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001763e:	50                   	push   eax
c001763f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0017646:	e8 09 fc ff ff       	call   c0017254 <FAT::fixFilepath(char*)>
c001764b:	83 c4 10             	add    esp,0x10
c001764e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0017656:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001765e:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017662:	25 ff 00 00 00       	and    eax,0xff
c0017667:	83 e0 01             	and    eax,0x1
c001766a:	74 08                	je     c0017674 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c001766c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0017674:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017678:	25 ff 00 00 00       	and    eax,0xff
c001767d:	83 e0 02             	and    eax,0x2
c0017680:	74 0a                	je     c001768c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c0017682:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001768a:	66 90                	xchg   ax,ax
c001768c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017690:	25 ff 00 00 00       	and    eax,0xff
c0017695:	83 e0 04             	and    eax,0x4
c0017698:	74 0a                	je     c00176a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c001769a:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00176a2:	66 90                	xchg   ax,ax
c00176a4:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176a8:	25 ff 00 00 00       	and    eax,0xff
c00176ad:	83 e0 08             	and    eax,0x8
c00176b0:	74 0a                	je     c00176bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c00176b2:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00176ba:	66 90                	xchg   ax,ax
c00176bc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00176c0:	25 ff 00 00 00       	and    eax,0xff
c00176c5:	83 e0 01             	and    eax,0x1
c00176c8:	74 0a                	je     c00176d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c00176ca:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00176d2:	66 90                	xchg   ax,ax
c00176d4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00176d8:	25 ff 00 00 00       	and    eax,0xff
c00176dd:	83 e0 02             	and    eax,0x2
c00176e0:	74 0a                	je     c00176ec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c00176e2:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00176ea:	66 90                	xchg   ax,ax
c00176ec:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00176f0:	25 ff 00 00 00       	and    eax,0xff
c00176f5:	83 e0 04             	and    eax,0x4
c00176f8:	74 0a                	je     c0017704 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c00176fa:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0017702:	66 90                	xchg   ax,ax
c0017704:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017708:	25 ff 00 00 00       	and    eax,0xff
c001770d:	83 e0 08             	and    eax,0x8
c0017710:	74 0a                	je     c001771c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c0017712:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001771a:	66 90                	xchg   ax,ax
c001771c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0017723:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001772a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0017731:	31 d2                	xor    edx,edx
c0017733:	88 c2                	mov    dl,al
c0017735:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001773c:	25 ff 00 00 00       	and    eax,0xff
c0017741:	83 ec 04             	sub    esp,0x4
c0017744:	52                   	push   edx
c0017745:	50                   	push   eax
c0017746:	8d 44 24 24          	lea    eax,[esp+0x24]
c001774a:	50                   	push   eax
c001774b:	e8 cd d5 fe ff       	call   c0004d1d <f_chmod>
c0017750:	83 c4 10             	add    esp,0x10
c0017753:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001775a:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0017761:	85 c0                	test   eax,eax
c0017763:	75 07                	jne    c001776c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c0017765:	b8 00 00 00 00       	mov    eax,0x0
c001776a:	eb 08                	jmp    c0017774 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c001776c:	b8 01 00 00 00       	mov    eax,0x1
c0017771:	8d 76 00             	lea    esi,[esi+0x0]
c0017774:	81 c4 2c 01 00 00    	add    esp,0x12c
c001777a:	c3                   	ret    
c001777b:	90                   	nop

c001777c <FAT::rename(char const*, char const*)>:
c001777c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0017782:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001778a:	74 0c                	je     c0017798 <FAT::rename(char const*, char const*)+0x1c>
c001778c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0017794:	75 0e                	jne    c00177a4 <FAT::rename(char const*, char const*)+0x28>
c0017796:	66 90                	xchg   ax,ax
c0017798:	b8 04 00 00 00       	mov    eax,0x4
c001779d:	e9 9e 00 00 00       	jmp    c0017840 <FAT::rename(char const*, char const*)+0xc4>
c00177a2:	66 90                	xchg   ax,ax
c00177a4:	83 ec 08             	sub    esp,0x8
c00177a7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00177ae:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00177b5:	50                   	push   eax
c00177b6:	e8 65 8e fe ff       	call   c0000620 <strcpy>
c00177bb:	83 c4 10             	add    esp,0x10
c00177be:	83 ec 08             	sub    esp,0x8
c00177c1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00177c8:	50                   	push   eax
c00177c9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00177d0:	e8 7f fa ff ff       	call   c0017254 <FAT::fixFilepath(char*)>
c00177d5:	83 c4 10             	add    esp,0x10
c00177d8:	83 ec 08             	sub    esp,0x8
c00177db:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00177e2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177e6:	50                   	push   eax
c00177e7:	e8 34 8e fe ff       	call   c0000620 <strcpy>
c00177ec:	83 c4 10             	add    esp,0x10
c00177ef:	83 ec 08             	sub    esp,0x8
c00177f2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00177f6:	50                   	push   eax
c00177f7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00177fe:	e8 51 fa ff ff       	call   c0017254 <FAT::fixFilepath(char*)>
c0017803:	83 c4 10             	add    esp,0x10
c0017806:	83 ec 08             	sub    esp,0x8
c0017809:	8d 44 24 14          	lea    eax,[esp+0x14]
c001780d:	50                   	push   eax
c001780e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017815:	50                   	push   eax
c0017816:	e8 4c d3 fe ff       	call   c0004b67 <f_rename>
c001781b:	83 c4 10             	add    esp,0x10
c001781e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0017825:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001782c:	85 c0                	test   eax,eax
c001782e:	75 08                	jne    c0017838 <FAT::rename(char const*, char const*)+0xbc>
c0017830:	b8 00 00 00 00       	mov    eax,0x0
c0017835:	eb 09                	jmp    c0017840 <FAT::rename(char const*, char const*)+0xc4>
c0017837:	90                   	nop
c0017838:	b8 01 00 00 00       	mov    eax,0x1
c001783d:	8d 76 00             	lea    esi,[esi+0x0]
c0017840:	81 c4 1c 02 00 00    	add    esp,0x21c
c0017846:	c3                   	ret    
c0017847:	90                   	nop

c0017848 <FAT::mkdir(char const*)>:
c0017848:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001784e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017856:	75 08                	jne    c0017860 <FAT::mkdir(char const*)+0x18>
c0017858:	b8 04 00 00 00       	mov    eax,0x4
c001785d:	eb 61                	jmp    c00178c0 <FAT::mkdir(char const*)+0x78>
c001785f:	90                   	nop
c0017860:	83 ec 08             	sub    esp,0x8
c0017863:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001786a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001786e:	50                   	push   eax
c001786f:	e8 ac 8d fe ff       	call   c0000620 <strcpy>
c0017874:	83 c4 10             	add    esp,0x10
c0017877:	83 ec 08             	sub    esp,0x8
c001787a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001787e:	50                   	push   eax
c001787f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017886:	e8 c9 f9 ff ff       	call   c0017254 <FAT::fixFilepath(char*)>
c001788b:	83 c4 10             	add    esp,0x10
c001788e:	83 ec 0c             	sub    esp,0xc
c0017891:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017895:	50                   	push   eax
c0017896:	e8 31 d1 fe ff       	call   c00049cc <f_mkdir>
c001789b:	83 c4 10             	add    esp,0x10
c001789e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00178a5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00178ac:	85 c0                	test   eax,eax
c00178ae:	75 08                	jne    c00178b8 <FAT::mkdir(char const*)+0x70>
c00178b0:	b8 00 00 00 00       	mov    eax,0x0
c00178b5:	eb 09                	jmp    c00178c0 <FAT::mkdir(char const*)+0x78>
c00178b7:	90                   	nop
c00178b8:	b8 01 00 00 00       	mov    eax,0x1
c00178bd:	8d 76 00             	lea    esi,[esi+0x0]
c00178c0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00178c6:	c3                   	ret    
c00178c7:	90                   	nop

c00178c8 <FAT::exists(char const*)>:
c00178c8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00178ce:	83 ec 08             	sub    esp,0x8
c00178d1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00178d8:	8d 44 24 10          	lea    eax,[esp+0x10]
c00178dc:	50                   	push   eax
c00178dd:	e8 3e 8d fe ff       	call   c0000620 <strcpy>
c00178e2:	83 c4 10             	add    esp,0x10
c00178e5:	83 ec 08             	sub    esp,0x8
c00178e8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00178ec:	50                   	push   eax
c00178ed:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00178f4:	e8 5b f9 ff ff       	call   c0017254 <FAT::fixFilepath(char*)>
c00178f9:	83 c4 10             	add    esp,0x10
c00178fc:	83 ec 08             	sub    esp,0x8
c00178ff:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0017906:	50                   	push   eax
c0017907:	8d 44 24 10          	lea    eax,[esp+0x10]
c001790b:	50                   	push   eax
c001790c:	e8 34 cd fe ff       	call   c0004645 <f_stat>
c0017911:	83 c4 10             	add    esp,0x10
c0017914:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001791b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0017922:	85 c0                	test   eax,eax
c0017924:	75 06                	jne    c001792c <FAT::exists(char const*)+0x64>
c0017926:	b0 01                	mov    al,0x1
c0017928:	eb 06                	jmp    c0017930 <FAT::exists(char const*)+0x68>
c001792a:	66 90                	xchg   ax,ax
c001792c:	b0 00                	mov    al,0x0
c001792e:	66 90                	xchg   ax,ax
c0017930:	81 c4 2c 02 00 00    	add    esp,0x22c
c0017936:	c3                   	ret    
c0017937:	90                   	nop

c0017938 <isoReadDiscSectorHelper>:
c0017938:	83 ec 2c             	sub    esp,0x2c
c001793b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001793f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017943:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0017948:	83 e8 41             	sub    eax,0x41
c001794b:	8b 0c 85 60 2e 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd1a0]
c0017952:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017956:	ba 00 00 00 00       	mov    edx,0x0
c001795b:	83 ec 0c             	sub    esp,0xc
c001795e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017962:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017966:	52                   	push   edx
c0017967:	50                   	push   eax
c0017968:	51                   	push   ecx
c0017969:	e8 22 59 ff ff       	call   c000d290 <LogicalDisk::read(unsigned long long, int, void*)>
c001796e:	83 c4 20             	add    esp,0x20
c0017971:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017975:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001797a:	74 0c                	je     c0017988 <isoReadDiscSectorHelper+0x50>
c001797c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017980:	c1 e0 0b             	shl    eax,0xb
c0017983:	eb 0b                	jmp    c0017990 <isoReadDiscSectorHelper+0x58>
c0017985:	8d 76 00             	lea    esi,[esi+0x0]
c0017988:	b8 00 00 00 00       	mov    eax,0x0
c001798d:	8d 76 00             	lea    esi,[esi+0x0]
c0017990:	83 c4 2c             	add    esp,0x2c
c0017993:	c3                   	ret    

c0017994 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0017994:	b8 08 00 00 00       	mov    eax,0x8
c0017999:	c3                   	ret    

c001799a <ISO9660::getName()>:
c001799a:	b8 30 ef 01 c0       	mov    eax,0xc001ef30
c001799f:	c3                   	ret    

c00179a0 <ISO9660::closeDir(void*)>:
c00179a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00179a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00179a6:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00179a9:	90                   	nop

c00179aa <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00179aa:	b8 01 00 00 00       	mov    eax,0x1
c00179af:	c3                   	ret    

c00179b0 <ISO9660::unlink(char const*)>:
c00179b0:	b8 01 00 00 00       	mov    eax,0x1
c00179b5:	c3                   	ret    

c00179b6 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00179b6:	b8 03 00 00 00       	mov    eax,0x3
c00179bb:	c3                   	ret    

c00179bc <ISO9660::rename(char const*, char const*)>:
c00179bc:	b8 01 00 00 00       	mov    eax,0x1
c00179c1:	c3                   	ret    

c00179c2 <ISO9660::mkdir(char const*)>:
c00179c2:	b8 01 00 00 00       	mov    eax,0x1
c00179c7:	c3                   	ret    

c00179c8 <ISO9660::~ISO9660()>:
c00179c8:	83 ec 0c             	sub    esp,0xc
c00179cb:	ba 9c ef 01 c0       	mov    edx,0xc001ef9c
c00179d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179d4:	89 10                	mov    DWORD PTR [eax],edx
c00179d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179da:	83 ec 0c             	sub    esp,0xc
c00179dd:	50                   	push   eax
c00179de:	e8 0b 35 ff ff       	call   c000aeee <Filesystem::~Filesystem()>
c00179e3:	83 c4 10             	add    esp,0x10
c00179e6:	90                   	nop
c00179e7:	83 c4 0c             	add    esp,0xc
c00179ea:	c3                   	ret    
c00179eb:	90                   	nop

c00179ec <ISO9660::~ISO9660()>:
c00179ec:	83 ec 0c             	sub    esp,0xc
c00179ef:	83 ec 0c             	sub    esp,0xc
c00179f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179f6:	e8 cd ff ff ff       	call   c00179c8 <ISO9660::~ISO9660()>
c00179fb:	83 c4 10             	add    esp,0x10
c00179fe:	83 ec 08             	sub    esp,0x8
c0017a01:	6a 08                	push   0x8
c0017a03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a07:	e8 a6 30 ff ff       	call   c000aab2 <operator delete(void*, unsigned long)>
c0017a0c:	83 c4 10             	add    esp,0x10
c0017a0f:	83 c4 0c             	add    esp,0xc
c0017a12:	c3                   	ret    
c0017a13:	90                   	nop

c0017a14 <ISO9660::exists(char const*)>:
c0017a14:	83 ec 18             	sub    esp,0x18
c0017a17:	68 4b ef 01 c0       	push   0xc001ef4b
c0017a1c:	e8 ad dd ff ff       	call   c00157ce <HalPanic(char const*)>
c0017a21:	31 c0                	xor    eax,eax
c0017a23:	83 c4 1c             	add    esp,0x1c
c0017a26:	c3                   	ret    
c0017a27:	90                   	nop

c0017a28 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0017a28:	56                   	push   esi
c0017a29:	53                   	push   ebx
c0017a2a:	53                   	push   ebx
c0017a2b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017a2f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017a33:	85 db                	test   ebx,ebx
c0017a35:	74 72                	je     c0017aa9 <ISO9660::open(char const*, void**, FileOpenMode)+0x81>
c0017a37:	85 f6                	test   esi,esi
c0017a39:	74 6e                	je     c0017aa9 <ISO9660::open(char const*, void**, FileOpenMode)+0x81>
c0017a3b:	ba 03 00 00 00       	mov    edx,0x3
c0017a40:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0017a45:	75 67                	jne    c0017aae <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017a47:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017a4a:	3a 05 80 3f 02 c0    	cmp    al,BYTE PTR ds:0xc0023f80
c0017a50:	74 34                	je     c0017a86 <ISO9660::open(char const*, void**, FileOpenMode)+0x5e>
c0017a52:	83 ec 0c             	sub    esp,0xc
c0017a55:	50                   	push   eax
c0017a56:	e8 f7 f1 fe ff       	call   c0006c52 <init_percd>
c0017a5b:	83 c4 10             	add    esp,0x10
c0017a5e:	ba 0b 00 00 00       	mov    edx,0xb
c0017a63:	40                   	inc    eax
c0017a64:	74 48                	je     c0017aae <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017a66:	80 3d 80 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023f80,0x0
c0017a6d:	74 10                	je     c0017a7f <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0017a6f:	83 ec 0c             	sub    esp,0xc
c0017a72:	68 69 ef 01 c0       	push   0xc001ef69
c0017a77:	e8 52 dd ff ff       	call   c00157ce <HalPanic(char const*)>
c0017a7c:	83 c4 10             	add    esp,0x10
c0017a7f:	8a 03                	mov    al,BYTE PTR [ebx]
c0017a81:	a2 80 3f 02 c0       	mov    ds:0xc0023f80,al
c0017a86:	83 c3 03             	add    ebx,0x3
c0017a89:	51                   	push   ecx
c0017a8a:	51                   	push   ecx
c0017a8b:	6a 00                	push   0x0
c0017a8d:	53                   	push   ebx
c0017a8e:	e8 6f ea fe ff       	call   c0006502 <iso_open>
c0017a93:	83 c4 10             	add    esp,0x10
c0017a96:	ba 01 00 00 00       	mov    edx,0x1
c0017a9b:	83 f8 ff             	cmp    eax,0xffffffff
c0017a9e:	74 0e                	je     c0017aae <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017aa0:	83 c0 64             	add    eax,0x64
c0017aa3:	31 d2                	xor    edx,edx
c0017aa5:	89 06                	mov    DWORD PTR [esi],eax
c0017aa7:	eb 05                	jmp    c0017aae <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017aa9:	ba 04 00 00 00       	mov    edx,0x4
c0017aae:	89 d0                	mov    eax,edx
c0017ab0:	5a                   	pop    edx
c0017ab1:	5b                   	pop    ebx
c0017ab2:	5e                   	pop    esi
c0017ab3:	c3                   	ret    

c0017ab4 <ISO9660::openDir(char const*, void**)>:
c0017ab4:	56                   	push   esi
c0017ab5:	53                   	push   ebx
c0017ab6:	53                   	push   ebx
c0017ab7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017abb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017abf:	85 db                	test   ebx,ebx
c0017ac1:	74 66                	je     c0017b29 <ISO9660::openDir(char const*, void**)+0x75>
c0017ac3:	85 f6                	test   esi,esi
c0017ac5:	74 62                	je     c0017b29 <ISO9660::openDir(char const*, void**)+0x75>
c0017ac7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017aca:	3a 05 80 3f 02 c0    	cmp    al,BYTE PTR ds:0xc0023f80
c0017ad0:	74 34                	je     c0017b06 <ISO9660::openDir(char const*, void**)+0x52>
c0017ad2:	83 ec 0c             	sub    esp,0xc
c0017ad5:	50                   	push   eax
c0017ad6:	e8 77 f1 fe ff       	call   c0006c52 <init_percd>
c0017adb:	83 c4 10             	add    esp,0x10
c0017ade:	ba 0b 00 00 00       	mov    edx,0xb
c0017ae3:	40                   	inc    eax
c0017ae4:	74 48                	je     c0017b2e <ISO9660::openDir(char const*, void**)+0x7a>
c0017ae6:	80 3d 80 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023f80,0x0
c0017aed:	74 10                	je     c0017aff <ISO9660::openDir(char const*, void**)+0x4b>
c0017aef:	83 ec 0c             	sub    esp,0xc
c0017af2:	68 69 ef 01 c0       	push   0xc001ef69
c0017af7:	e8 d2 dc ff ff       	call   c00157ce <HalPanic(char const*)>
c0017afc:	83 c4 10             	add    esp,0x10
c0017aff:	8a 03                	mov    al,BYTE PTR [ebx]
c0017b01:	a2 80 3f 02 c0       	mov    ds:0xc0023f80,al
c0017b06:	83 c3 03             	add    ebx,0x3
c0017b09:	51                   	push   ecx
c0017b0a:	51                   	push   ecx
c0017b0b:	6a 01                	push   0x1
c0017b0d:	53                   	push   ebx
c0017b0e:	e8 ef e9 fe ff       	call   c0006502 <iso_open>
c0017b13:	83 c4 10             	add    esp,0x10
c0017b16:	ba 01 00 00 00       	mov    edx,0x1
c0017b1b:	83 f8 ff             	cmp    eax,0xffffffff
c0017b1e:	74 0e                	je     c0017b2e <ISO9660::openDir(char const*, void**)+0x7a>
c0017b20:	83 c0 64             	add    eax,0x64
c0017b23:	31 d2                	xor    edx,edx
c0017b25:	89 06                	mov    DWORD PTR [esi],eax
c0017b27:	eb 05                	jmp    c0017b2e <ISO9660::openDir(char const*, void**)+0x7a>
c0017b29:	ba 04 00 00 00       	mov    edx,0x4
c0017b2e:	89 d0                	mov    eax,edx
c0017b30:	5a                   	pop    edx
c0017b31:	5b                   	pop    ebx
c0017b32:	5e                   	pop    esi
c0017b33:	c3                   	ret    

c0017b34 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0017b34:	53                   	push   ebx
c0017b35:	83 ec 08             	sub    esp,0x8
c0017b38:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b3c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017b40:	85 c0                	test   eax,eax
c0017b42:	74 25                	je     c0017b69 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017b44:	85 db                	test   ebx,ebx
c0017b46:	74 21                	je     c0017b69 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017b48:	83 e8 64             	sub    eax,0x64
c0017b4b:	52                   	push   edx
c0017b4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b50:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017b54:	50                   	push   eax
c0017b55:	e8 a3 ea fe ff       	call   c00065fd <iso_read>
c0017b5a:	83 c4 10             	add    esp,0x10
c0017b5d:	89 03                	mov    DWORD PTR [ebx],eax
c0017b5f:	09 d0                	or     eax,edx
c0017b61:	0f 94 c0             	sete   al
c0017b64:	0f b6 c0             	movzx  eax,al
c0017b67:	eb 05                	jmp    c0017b6e <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c0017b69:	b8 04 00 00 00       	mov    eax,0x4
c0017b6e:	83 c4 08             	add    esp,0x8
c0017b71:	5b                   	pop    ebx
c0017b72:	c3                   	ret    
c0017b73:	90                   	nop

c0017b74 <ISO9660::seek(void*, unsigned long long)>:
c0017b74:	57                   	push   edi
c0017b75:	56                   	push   esi
c0017b76:	b8 04 00 00 00       	mov    eax,0x4
c0017b7b:	51                   	push   ecx
c0017b7c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017b80:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017b84:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017b88:	85 d2                	test   edx,edx
c0017b8a:	74 1c                	je     c0017ba8 <ISO9660::seek(void*, unsigned long long)+0x34>
c0017b8c:	6a 00                	push   0x0
c0017b8e:	83 ea 64             	sub    edx,0x64
c0017b91:	57                   	push   edi
c0017b92:	56                   	push   esi
c0017b93:	52                   	push   edx
c0017b94:	e8 62 ec fe ff       	call   c00067fb <iso_seek>
c0017b99:	83 c4 10             	add    esp,0x10
c0017b9c:	31 f0                	xor    eax,esi
c0017b9e:	31 fa                	xor    edx,edi
c0017ba0:	09 d0                	or     eax,edx
c0017ba2:	0f 95 c0             	setne  al
c0017ba5:	0f b6 c0             	movzx  eax,al
c0017ba8:	5a                   	pop    edx
c0017ba9:	5e                   	pop    esi
c0017baa:	5f                   	pop    edi
c0017bab:	c3                   	ret    

c0017bac <ISO9660::tell(void*, unsigned long long*)>:
c0017bac:	53                   	push   ebx
c0017bad:	83 ec 08             	sub    esp,0x8
c0017bb0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017bb4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017bb8:	85 c0                	test   eax,eax
c0017bba:	74 1c                	je     c0017bd8 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017bbc:	85 db                	test   ebx,ebx
c0017bbe:	74 18                	je     c0017bd8 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017bc0:	83 ec 0c             	sub    esp,0xc
c0017bc3:	83 e8 64             	sub    eax,0x64
c0017bc6:	50                   	push   eax
c0017bc7:	e8 0d ed fe ff       	call   c00068d9 <iso_tell>
c0017bcc:	83 c4 10             	add    esp,0x10
c0017bcf:	89 03                	mov    DWORD PTR [ebx],eax
c0017bd1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0017bd4:	31 c0                	xor    eax,eax
c0017bd6:	eb 05                	jmp    c0017bdd <ISO9660::tell(void*, unsigned long long*)+0x31>
c0017bd8:	b8 04 00 00 00       	mov    eax,0x4
c0017bdd:	83 c4 08             	add    esp,0x8
c0017be0:	5b                   	pop    ebx
c0017be1:	c3                   	ret    

c0017be2 <ISO9660::stat(void*, unsigned long long*)>:
c0017be2:	53                   	push   ebx
c0017be3:	83 ec 08             	sub    esp,0x8
c0017be6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017bea:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017bee:	85 c0                	test   eax,eax
c0017bf0:	74 20                	je     c0017c12 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017bf2:	85 db                	test   ebx,ebx
c0017bf4:	74 1c                	je     c0017c12 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017bf6:	83 ec 0c             	sub    esp,0xc
c0017bf9:	83 e8 64             	sub    eax,0x64
c0017bfc:	50                   	push   eax
c0017bfd:	e8 34 ed fe ff       	call   c0006936 <iso_total>
c0017c02:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017c09:	89 03                	mov    DWORD PTR [ebx],eax
c0017c0b:	83 c4 10             	add    esp,0x10
c0017c0e:	31 c0                	xor    eax,eax
c0017c10:	eb 05                	jmp    c0017c17 <ISO9660::stat(void*, unsigned long long*)+0x35>
c0017c12:	b8 04 00 00 00       	mov    eax,0x4
c0017c17:	83 c4 08             	add    esp,0x8
c0017c1a:	5b                   	pop    ebx
c0017c1b:	c3                   	ret    

c0017c1c <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0017c1c:	55                   	push   ebp
c0017c1d:	57                   	push   edi
c0017c1e:	56                   	push   esi
c0017c1f:	53                   	push   ebx
c0017c20:	83 ec 0c             	sub    esp,0xc
c0017c23:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017c27:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0017c2b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017c2f:	85 ff                	test   edi,edi
c0017c31:	0f 94 c2             	sete   dl
c0017c34:	85 f6                	test   esi,esi
c0017c36:	0f 94 c0             	sete   al
c0017c39:	08 c2                	or     dl,al
c0017c3b:	0f 85 ab 00 00 00    	jne    c0017cec <ISO9660::stat(char const*, unsigned long long*, bool*)+0xd0>
c0017c41:	85 db                	test   ebx,ebx
c0017c43:	0f 84 a3 00 00 00    	je     c0017cec <ISO9660::stat(char const*, unsigned long long*, bool*)+0xd0>
c0017c49:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0017c4c:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0017c52:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017c59:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017c5c:	3a 05 80 3f 02 c0    	cmp    al,BYTE PTR ds:0xc0023f80
c0017c62:	74 34                	je     c0017c98 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x7c>
c0017c64:	83 ec 0c             	sub    esp,0xc
c0017c67:	50                   	push   eax
c0017c68:	e8 e5 ef fe ff       	call   c0006c52 <init_percd>
c0017c6d:	83 c4 10             	add    esp,0x10
c0017c70:	ba 0b 00 00 00       	mov    edx,0xb
c0017c75:	40                   	inc    eax
c0017c76:	74 79                	je     c0017cf1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xd5>
c0017c78:	80 3d 80 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023f80,0x0
c0017c7f:	74 10                	je     c0017c91 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x75>
c0017c81:	83 ec 0c             	sub    esp,0xc
c0017c84:	68 69 ef 01 c0       	push   0xc001ef69
c0017c89:	e8 40 db ff ff       	call   c00157ce <HalPanic(char const*)>
c0017c8e:	83 c4 10             	add    esp,0x10
c0017c91:	8a 03                	mov    al,BYTE PTR [ebx]
c0017c93:	a2 80 3f 02 c0       	mov    ds:0xc0023f80,al
c0017c98:	83 c3 03             	add    ebx,0x3
c0017c9b:	52                   	push   edx
c0017c9c:	52                   	push   edx
c0017c9d:	6a 00                	push   0x0
c0017c9f:	53                   	push   ebx
c0017ca0:	e8 5d e8 fe ff       	call   c0006502 <iso_open>
c0017ca5:	83 c4 10             	add    esp,0x10
c0017ca8:	89 c5                	mov    ebp,eax
c0017caa:	83 f8 ff             	cmp    eax,0xffffffff
c0017cad:	75 1c                	jne    c0017ccb <ISO9660::stat(char const*, unsigned long long*, bool*)+0xaf>
c0017caf:	50                   	push   eax
c0017cb0:	50                   	push   eax
c0017cb1:	6a 01                	push   0x1
c0017cb3:	53                   	push   ebx
c0017cb4:	e8 49 e8 fe ff       	call   c0006502 <iso_open>
c0017cb9:	83 c4 10             	add    esp,0x10
c0017cbc:	89 c5                	mov    ebp,eax
c0017cbe:	c6 07 01             	mov    BYTE PTR [edi],0x1
c0017cc1:	ba 02 00 00 00       	mov    edx,0x2
c0017cc6:	83 f8 ff             	cmp    eax,0xffffffff
c0017cc9:	74 26                	je     c0017cf1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xd5>
c0017ccb:	83 ec 0c             	sub    esp,0xc
c0017cce:	55                   	push   ebp
c0017ccf:	e8 62 ec fe ff       	call   c0006936 <iso_total>
c0017cd4:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017cdb:	89 06                	mov    DWORD PTR [esi],eax
c0017cdd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017ce0:	e8 fd e8 fe ff       	call   c00065e2 <iso_close>
c0017ce5:	83 c4 10             	add    esp,0x10
c0017ce8:	31 d2                	xor    edx,edx
c0017cea:	eb 05                	jmp    c0017cf1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xd5>
c0017cec:	ba 04 00 00 00       	mov    edx,0x4
c0017cf1:	83 c4 0c             	add    esp,0xc
c0017cf4:	89 d0                	mov    eax,edx
c0017cf6:	5b                   	pop    ebx
c0017cf7:	5e                   	pop    esi
c0017cf8:	5f                   	pop    edi
c0017cf9:	5d                   	pop    ebp
c0017cfa:	c3                   	ret    
c0017cfb:	90                   	nop

c0017cfc <ISO9660::close(void*)>:
c0017cfc:	83 ec 0c             	sub    esp,0xc
c0017cff:	b8 04 00 00 00       	mov    eax,0x4
c0017d04:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d08:	85 d2                	test   edx,edx
c0017d0a:	74 11                	je     c0017d1d <ISO9660::close(void*)+0x21>
c0017d0c:	83 ec 0c             	sub    esp,0xc
c0017d0f:	83 ea 64             	sub    edx,0x64
c0017d12:	52                   	push   edx
c0017d13:	e8 ca e8 fe ff       	call   c00065e2 <iso_close>
c0017d18:	83 c4 10             	add    esp,0x10
c0017d1b:	31 c0                	xor    eax,eax
c0017d1d:	83 c4 0c             	add    esp,0xc
c0017d20:	c3                   	ret    
c0017d21:	90                   	nop

c0017d22 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017d22:	57                   	push   edi
c0017d23:	56                   	push   esi
c0017d24:	53                   	push   ebx
c0017d25:	81 ec 10 01 00 00    	sub    esp,0x110
c0017d2b:	8b 84 24 24 01 00 00 	mov    eax,DWORD PTR [esp+0x124]
c0017d32:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0017d39:	85 c0                	test   eax,eax
c0017d3b:	0f 84 8a 00 00 00    	je     c0017dcb <ISO9660::readDir(void*, unsigned long, void*, int*)+0xa9>
c0017d41:	85 db                	test   ebx,ebx
c0017d43:	0f 84 82 00 00 00    	je     c0017dcb <ISO9660::readDir(void*, unsigned long, void*, int*)+0xa9>
c0017d49:	83 ec 0c             	sub    esp,0xc
c0017d4c:	83 e8 64             	sub    eax,0x64
c0017d4f:	50                   	push   eax
c0017d50:	e8 2b ec fe ff       	call   c0006980 <iso_readdir>
c0017d55:	83 c4 10             	add    esp,0x10
c0017d58:	89 c6                	mov    esi,eax
c0017d5a:	b8 01 00 00 00       	mov    eax,0x1
c0017d5f:	85 f6                	test   esi,esi
c0017d61:	74 6d                	je     c0017dd0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xae>
c0017d63:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0017d69:	8d 7e 08             	lea    edi,[esi+0x8]
c0017d6c:	83 ec 0c             	sub    esp,0xc
c0017d6f:	57                   	push   edi
c0017d70:	e8 eb 87 fe ff       	call   c0000560 <strlen>
c0017d75:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017d7d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017d81:	83 c4 10             	add    esp,0x10
c0017d84:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0017d88:	75 0a                	jne    c0017d94 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x72>
c0017d8a:	b8 02 00 00 00       	mov    eax,0x2
c0017d8f:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0017d92:	74 05                	je     c0017d99 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x77>
c0017d94:	b8 01 00 00 00       	mov    eax,0x1
c0017d99:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017d9d:	50                   	push   eax
c0017d9e:	50                   	push   eax
c0017d9f:	57                   	push   edi
c0017da0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017da4:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0017da8:	50                   	push   eax
c0017da9:	e8 72 88 fe ff       	call   c0000620 <strcpy>
c0017dae:	8b 8c 24 38 01 00 00 	mov    ecx,DWORD PTR [esp+0x138]
c0017db5:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0017dbc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017dbe:	31 c0                	xor    eax,eax
c0017dc0:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0017dc6:	83 c4 10             	add    esp,0x10
c0017dc9:	eb 05                	jmp    c0017dd0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xae>
c0017dcb:	b8 04 00 00 00       	mov    eax,0x4
c0017dd0:	81 c4 10 01 00 00    	add    esp,0x110
c0017dd6:	5b                   	pop    ebx
c0017dd7:	5e                   	pop    esi
c0017dd8:	5f                   	pop    edi
c0017dd9:	c3                   	ret    

c0017dda <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017dda:	57                   	push   edi
c0017ddb:	56                   	push   esi
c0017ddc:	53                   	push   ebx
c0017ddd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017de1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017de5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017de9:	39 35 84 3f 02 c0    	cmp    DWORD PTR ds:0xc0023f84,esi
c0017def:	75 08                	jne    c0017df9 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017df1:	38 1d d4 f8 01 c0    	cmp    BYTE PTR ds:0xc001f8d4,bl
c0017df7:	74 59                	je     c0017e52 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x78>
c0017df9:	83 ec 0c             	sub    esp,0xc
c0017dfc:	31 d2                	xor    edx,edx
c0017dfe:	68 a0 3f 02 c0       	push   0xc0023fa0
c0017e03:	0f be c3             	movsx  eax,bl
c0017e06:	6a 01                	push   0x1
c0017e08:	52                   	push   edx
c0017e09:	56                   	push   esi
c0017e0a:	ff 34 85 5c 2d 02 c0 	push   DWORD PTR [eax*4-0x3ffdd2a4]
c0017e11:	e8 7a 54 ff ff       	call   c000d290 <LogicalDisk::read(unsigned long long, int, void*)>
c0017e16:	83 c4 20             	add    esp,0x20
c0017e19:	85 c0                	test   eax,eax
c0017e1b:	75 0e                	jne    c0017e2b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017e1d:	89 35 84 3f 02 c0    	mov    DWORD PTR ds:0xc0023f84,esi
c0017e23:	88 1d d4 f8 01 c0    	mov    BYTE PTR ds:0xc001f8d4,bl
c0017e29:	eb 27                	jmp    c0017e52 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x78>
c0017e2b:	83 ec 0c             	sub    esp,0xc
c0017e2e:	68 79 ef 01 c0       	push   0xc001ef79
c0017e33:	e8 70 2d ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c0017e38:	83 c4 0c             	add    esp,0xc
c0017e3b:	68 00 08 00 00       	push   0x800
c0017e40:	6a 00                	push   0x0
c0017e42:	57                   	push   edi
c0017e43:	e8 a8 86 fe ff       	call   c00004f0 <memset>
c0017e48:	83 c4 10             	add    esp,0x10
c0017e4b:	b8 01 00 00 00       	mov    eax,0x1
c0017e50:	eb 0e                	jmp    c0017e60 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x86>
c0017e52:	be a0 3f 02 c0       	mov    esi,0xc0023fa0
c0017e57:	b9 00 08 00 00       	mov    ecx,0x800
c0017e5c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017e5e:	31 c0                	xor    eax,eax
c0017e60:	5b                   	pop    ebx
c0017e61:	5e                   	pop    esi
c0017e62:	5f                   	pop    edi
c0017e63:	c3                   	ret    

c0017e64 <ISO9660::tryMount(LogicalDisk*, int)>:
c0017e64:	53                   	push   ebx
c0017e65:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017e6b:	c7 05 84 3f 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0023f84,0xdeadbeef
c0017e75:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017e7c:	8d 58 41             	lea    ebx,[eax+0x41]
c0017e7f:	0f be db             	movsx  ebx,bl
c0017e82:	53                   	push   ebx
c0017e83:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017e87:	50                   	push   eax
c0017e88:	6a 10                	push   0x10
c0017e8a:	e8 4b ff ff ff       	call   c0017dda <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017e8f:	83 c4 10             	add    esp,0x10
c0017e92:	31 d2                	xor    edx,edx
c0017e94:	85 c0                	test   eax,eax
c0017e96:	75 33                	jne    c0017ecb <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017e98:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017e9d:	75 2c                	jne    c0017ecb <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017e9f:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0017ea4:	75 25                	jne    c0017ecb <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017ea6:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017eab:	75 1e                	jne    c0017ecb <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017ead:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0017eb2:	75 17                	jne    c0017ecb <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017eb4:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017eb9:	75 10                	jne    c0017ecb <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017ebb:	83 ec 0c             	sub    esp,0xc
c0017ebe:	53                   	push   ebx
c0017ebf:	e8 8e ed fe ff       	call   c0006c52 <init_percd>
c0017ec4:	83 c4 10             	add    esp,0x10
c0017ec7:	40                   	inc    eax
c0017ec8:	0f 95 c2             	setne  dl
c0017ecb:	88 d0                	mov    al,dl
c0017ecd:	81 c4 08 08 00 00    	add    esp,0x808
c0017ed3:	5b                   	pop    ebx
c0017ed4:	c3                   	ret    
c0017ed5:	90                   	nop

c0017ed6 <ISO9660::ISO9660()>:
c0017ed6:	83 ec 0c             	sub    esp,0xc
c0017ed9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017edd:	83 ec 0c             	sub    esp,0xc
c0017ee0:	50                   	push   eax
c0017ee1:	e8 e4 2f ff ff       	call   c000aeca <Filesystem::Filesystem()>
c0017ee6:	83 c4 10             	add    esp,0x10
c0017ee9:	ba 9c ef 01 c0       	mov    edx,0xc001ef9c
c0017eee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ef2:	89 10                	mov    DWORD PTR [eax],edx
c0017ef4:	e8 69 ee fe ff       	call   c0006d62 <fs_iso9660_init>
c0017ef9:	90                   	nop
c0017efa:	83 c4 0c             	add    esp,0xc
c0017efd:	c3                   	ret    

c0017efe <SoundCard::beginPlayback()>:
c0017efe:	c7 44 24 04 fc ef 01 c0 	mov    DWORD PTR [esp+0x4],0xc001effc
c0017f06:	e9 ec 87 ff ff       	jmp    c00106f7 <Krnl::panic(char const*)>
c0017f0b:	90                   	nop

c0017f0c <SoundCard::stopPlayback()>:
c0017f0c:	c7 44 24 04 fc ef 01 c0 	mov    DWORD PTR [esp+0x4],0xc001effc
c0017f14:	e9 de 87 ff ff       	jmp    c00106f7 <Krnl::panic(char const*)>
c0017f19:	90                   	nop

c0017f1a <SoundCard::SoundCard(char const*)>:
c0017f1a:	83 ec 1c             	sub    esp,0x1c
c0017f1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f21:	83 ec 08             	sub    esp,0x8
c0017f24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f28:	50                   	push   eax
c0017f29:	e8 52 42 ff ff       	call   c000c180 <Device::Device(char const*)>
c0017f2e:	83 c4 10             	add    esp,0x10
c0017f31:	ba 48 f0 01 c0       	mov    edx,0xc001f048
c0017f36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f3a:	89 10                	mov    DWORD PTR [eax],edx
c0017f3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f40:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017f47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f4b:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017f55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f59:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0017f63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f67:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0017f71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f75:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0017f7f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017f87:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0017f8c:	7f 19                	jg     c0017fa7 <SoundCard::SoundCard(char const*)+0x8d>
c0017f8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f92:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017f96:	83 c2 54             	add    edx,0x54
c0017f99:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0017fa1:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017fa5:	eb e0                	jmp    c0017f87 <SoundCard::SoundCard(char const*)+0x6d>
c0017fa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fab:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017fb2:	90                   	nop
c0017fb3:	83 c4 1c             	add    esp,0x1c
c0017fb6:	c3                   	ret    
c0017fb7:	90                   	nop

c0017fb8 <SoundCard::~SoundCard()>:
c0017fb8:	83 ec 0c             	sub    esp,0xc
c0017fbb:	ba 48 f0 01 c0       	mov    edx,0xc001f048
c0017fc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fc4:	89 10                	mov    DWORD PTR [eax],edx
c0017fc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fca:	83 ec 0c             	sub    esp,0xc
c0017fcd:	50                   	push   eax
c0017fce:	e8 17 3f ff ff       	call   c000beea <Device::~Device()>
c0017fd3:	83 c4 10             	add    esp,0x10
c0017fd6:	90                   	nop
c0017fd7:	83 c4 0c             	add    esp,0xc
c0017fda:	c3                   	ret    
c0017fdb:	90                   	nop

c0017fdc <SoundCard::~SoundCard()>:
c0017fdc:	83 ec 0c             	sub    esp,0xc
c0017fdf:	83 ec 0c             	sub    esp,0xc
c0017fe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017fe6:	e8 cd ff ff ff       	call   c0017fb8 <SoundCard::~SoundCard()>
c0017feb:	83 c4 10             	add    esp,0x10
c0017fee:	83 ec 08             	sub    esp,0x8
c0017ff1:	68 e8 01 00 00       	push   0x1e8
c0017ff6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ffa:	e8 b3 2a ff ff       	call   c000aab2 <operator delete(void*, unsigned long)>
c0017fff:	83 c4 10             	add    esp,0x10
c0018002:	83 c4 0c             	add    esp,0xc
c0018005:	c3                   	ret    

c0018006 <SoundCard::configureRates(int, int, int)>:
c0018006:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001800a:	31 c0                	xor    eax,eax
c001800c:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0018013:	75 20                	jne    c0018035 <SoundCard::configureRates(int, int, int)+0x2f>
c0018015:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018019:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001801f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018023:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0018029:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001802d:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0018033:	b0 01                	mov    al,0x1
c0018035:	c3                   	ret    

c0018036 <SoundCard::getSamples16(int, short*)>:
c0018036:	55                   	push   ebp
c0018037:	57                   	push   edi
c0018038:	31 ff                	xor    edi,edi
c001803a:	56                   	push   esi
c001803b:	53                   	push   ebx
c001803c:	31 db                	xor    ebx,ebx
c001803e:	83 ec 10             	sub    esp,0x10
c0018041:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0018045:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0018049:	8d 04 36             	lea    eax,[esi+esi*1]
c001804c:	50                   	push   eax
c001804d:	6a 00                	push   0x0
c001804f:	55                   	push   ebp
c0018050:	e8 9b 84 fe ff       	call   c00004f0 <memset>
c0018055:	83 c4 10             	add    esp,0x10
c0018058:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001805c:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0018063:	85 c0                	test   eax,eax
c0018065:	74 1b                	je     c0018082 <SoundCard::getSamples16(int, short*)+0x4c>
c0018067:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001806b:	75 15                	jne    c0018082 <SoundCard::getSamples16(int, short*)+0x4c>
c001806d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018071:	55                   	push   ebp
c0018072:	56                   	push   esi
c0018073:	50                   	push   eax
c0018074:	e8 ef 02 00 00       	call   c0018368 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0018079:	83 c4 10             	add    esp,0x10
c001807c:	39 c7                	cmp    edi,eax
c001807e:	7d 02                	jge    c0018082 <SoundCard::getSamples16(int, short*)+0x4c>
c0018080:	89 c7                	mov    edi,eax
c0018082:	43                   	inc    ebx
c0018083:	83 fb 20             	cmp    ebx,0x20
c0018086:	75 d0                	jne    c0018058 <SoundCard::getSamples16(int, short*)+0x22>
c0018088:	83 c4 0c             	add    esp,0xc
c001808b:	89 f8                	mov    eax,edi
c001808d:	5b                   	pop    ebx
c001808e:	5e                   	pop    esi
c001808f:	5f                   	pop    edi
c0018090:	5d                   	pop    ebp
c0018091:	c3                   	ret    

c0018092 <SoundCard::getSamples32(int, int*)>:
c0018092:	55                   	push   ebp
c0018093:	57                   	push   edi
c0018094:	31 ff                	xor    edi,edi
c0018096:	56                   	push   esi
c0018097:	31 f6                	xor    esi,esi
c0018099:	53                   	push   ebx
c001809a:	83 ec 10             	sub    esp,0x10
c001809d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180a1:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00180a5:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00180a9:	c1 e0 02             	shl    eax,0x2
c00180ac:	50                   	push   eax
c00180ad:	6a 00                	push   0x0
c00180af:	55                   	push   ebp
c00180b0:	e8 3b 84 fe ff       	call   c00004f0 <memset>
c00180b5:	83 c4 10             	add    esp,0x10
c00180b8:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c00180bf:	85 c0                	test   eax,eax
c00180c1:	74 1b                	je     c00180de <SoundCard::getSamples32(int, int*)+0x4c>
c00180c3:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c00180c7:	75 15                	jne    c00180de <SoundCard::getSamples32(int, int*)+0x4c>
c00180c9:	53                   	push   ebx
c00180ca:	55                   	push   ebp
c00180cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00180cf:	50                   	push   eax
c00180d0:	e8 57 03 00 00       	call   c001842c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c00180d5:	83 c4 10             	add    esp,0x10
c00180d8:	39 c6                	cmp    esi,eax
c00180da:	7d 02                	jge    c00180de <SoundCard::getSamples32(int, int*)+0x4c>
c00180dc:	89 c6                	mov    esi,eax
c00180de:	47                   	inc    edi
c00180df:	83 ff 20             	cmp    edi,0x20
c00180e2:	75 d4                	jne    c00180b8 <SoundCard::getSamples32(int, int*)+0x26>
c00180e4:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c00180ea:	85 f6                	test   esi,esi
c00180ec:	75 0f                	jne    c00180fd <SoundCard::getSamples32(int, int*)+0x6b>
c00180ee:	84 c0                	test   al,al
c00180f0:	74 1b                	je     c001810d <SoundCard::getSamples32(int, int*)+0x7b>
c00180f2:	83 ec 0c             	sub    esp,0xc
c00180f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00180f7:	53                   	push   ebx
c00180f8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00180fb:	eb 0d                	jmp    c001810a <SoundCard::getSamples32(int, int*)+0x78>
c00180fd:	84 c0                	test   al,al
c00180ff:	75 0c                	jne    c001810d <SoundCard::getSamples32(int, int*)+0x7b>
c0018101:	83 ec 0c             	sub    esp,0xc
c0018104:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018106:	53                   	push   ebx
c0018107:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001810a:	83 c4 10             	add    esp,0x10
c001810d:	83 c4 0c             	add    esp,0xc
c0018110:	89 f0                	mov    eax,esi
c0018112:	5b                   	pop    ebx
c0018113:	5e                   	pop    esi
c0018114:	5f                   	pop    edi
c0018115:	5d                   	pop    ebp
c0018116:	c3                   	ret    
c0018117:	90                   	nop

c0018118 <SoundCard::addChannel(SoundPort*)>:
c0018118:	83 ec 0c             	sub    esp,0xc
c001811b:	31 c0                	xor    eax,eax
c001811d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018121:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0018129:	74 1b                	je     c0018146 <SoundCard::addChannel(SoundPort*)+0x2e>
c001812b:	40                   	inc    eax
c001812c:	83 f8 20             	cmp    eax,0x20
c001812f:	75 f0                	jne    c0018121 <SoundCard::addChannel(SoundPort*)+0x9>
c0018131:	83 ec 0c             	sub    esp,0xc
c0018134:	68 21 f0 01 c0       	push   0xc001f021
c0018139:	e8 b9 85 ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c001813e:	83 c4 10             	add    esp,0x10
c0018141:	83 c8 ff             	or     eax,0xffffffff
c0018144:	eb 0b                	jmp    c0018151 <SoundCard::addChannel(SoundPort*)+0x39>
c0018146:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001814a:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0018151:	83 c4 0c             	add    esp,0xc
c0018154:	c3                   	ret    
c0018155:	90                   	nop

c0018156 <SoundCard::removeChannel(int)>:
c0018156:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001815a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001815e:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0018169:	c3                   	ret    
c001816a:	66 90                	xchg   ax,ax

c001816c <SoundPort::SoundPort(int, int, int, int)>:
c001816c:	83 ec 0c             	sub    esp,0xc
c001816f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018173:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001817a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001817e:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0018182:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018186:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001818a:	89 10                	mov    DWORD PTR [eax],edx
c001818c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018190:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018194:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0018197:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001819b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001819f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00181a2:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c00181a7:	75 13                	jne    c00181bc <SoundPort::SoundPort(int, int, int, int)+0x50>
c00181a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00181af:	05 a0 0f 00 00       	add    eax,0xfa0
c00181b4:	01 c0                	add    eax,eax
c00181b6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00181ba:	66 90                	xchg   ax,ax
c00181bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00181c4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00181c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181cb:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00181d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181d6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00181d9:	c1 e0 02             	shl    eax,0x2
c00181dc:	83 ec 0c             	sub    esp,0xc
c00181df:	50                   	push   eax
c00181e0:	e8 34 fc fe ff       	call   c0007e19 <malloc>
c00181e5:	83 c4 10             	add    esp,0x10
c00181e8:	89 c2                	mov    edx,eax
c00181ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181ee:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00181f1:	90                   	nop
c00181f2:	83 c4 0c             	add    esp,0xc
c00181f5:	c3                   	ret    
c00181f6:	66 90                	xchg   ax,ax

c00181f8 <SoundPort::~SoundPort()>:
c00181f8:	83 ec 0c             	sub    esp,0xc
c00181fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181ff:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018202:	85 c0                	test   eax,eax
c0018204:	74 1e                	je     c0018224 <SoundPort::~SoundPort()+0x2c>
c0018206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001820a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001820d:	83 ec 0c             	sub    esp,0xc
c0018210:	50                   	push   eax
c0018211:	e8 13 fc fe ff       	call   c0007e29 <free>
c0018216:	83 c4 10             	add    esp,0x10
c0018219:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001821d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018224:	90                   	nop
c0018225:	83 c4 0c             	add    esp,0xc
c0018228:	c3                   	ret    
c0018229:	90                   	nop
c001822a:	66 90                	xchg   ax,ax

c001822c <SoundPort::unpause()>:
c001822c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018230:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0018234:	c3                   	ret    
c0018235:	90                   	nop
c0018236:	66 90                	xchg   ax,ax

c0018238 <SoundPort::pause()>:
c0018238:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001823c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0018240:	c3                   	ret    
c0018241:	90                   	nop
c0018242:	66 90                	xchg   ax,ax

c0018244 <SoundPort::getBufferUsed()>:
c0018244:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018248:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001824b:	c3                   	ret    

c001824c <SoundPort::getBufferSize()>:
c001824c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018250:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018253:	c3                   	ret    

c0018254 <SoundPort::buffer16(short*, int)>:
c0018254:	55                   	push   ebp
c0018255:	57                   	push   edi
c0018256:	56                   	push   esi
c0018257:	53                   	push   ebx
c0018258:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001825c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0018260:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0018263:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0018266:	74 68                	je     c00182d0 <SoundPort::buffer16(short*, int)+0x7c>
c0018268:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001826c:	85 c9                	test   ecx,ecx
c001826e:	7e 60                	jle    c00182d0 <SoundPort::buffer16(short*, int)+0x7c>
c0018270:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0018274:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0018277:	c1 e1 0f             	shl    ecx,0xf
c001827a:	8d 70 01             	lea    esi,[eax+0x1]
c001827d:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0018280:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0018283:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018286:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018289:	74 4d                	je     c00182d8 <SoundPort::buffer16(short*, int)+0x84>
c001828b:	31 f6                	xor    esi,esi
c001828d:	eb 21                	jmp    c00182b0 <SoundPort::buffer16(short*, int)+0x5c>
c001828f:	90                   	nop
c0018290:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0018295:	8d 79 01             	lea    edi,[ecx+0x1]
c0018298:	c1 e3 0f             	shl    ebx,0xf
c001829b:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001829e:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c00182a1:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c00182a4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00182a7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00182aa:	74 1c                	je     c00182c8 <SoundPort::buffer16(short*, int)+0x74>
c00182ac:	89 c6                	mov    esi,eax
c00182ae:	66 90                	xchg   ax,ax
c00182b0:	8d 46 01             	lea    eax,[esi+0x1]
c00182b3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00182b7:	75 d7                	jne    c0018290 <SoundPort::buffer16(short*, int)+0x3c>
c00182b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00182bd:	8d 76 00             	lea    esi,[esi+0x0]
c00182c0:	5b                   	pop    ebx
c00182c1:	5e                   	pop    esi
c00182c2:	5f                   	pop    edi
c00182c3:	5d                   	pop    ebp
c00182c4:	c3                   	ret    
c00182c5:	8d 76 00             	lea    esi,[esi+0x0]
c00182c8:	5b                   	pop    ebx
c00182c9:	8d 46 02             	lea    eax,[esi+0x2]
c00182cc:	5e                   	pop    esi
c00182cd:	5f                   	pop    edi
c00182ce:	5d                   	pop    ebp
c00182cf:	c3                   	ret    
c00182d0:	5b                   	pop    ebx
c00182d1:	31 c0                	xor    eax,eax
c00182d3:	5e                   	pop    esi
c00182d4:	5f                   	pop    edi
c00182d5:	5d                   	pop    ebp
c00182d6:	c3                   	ret    
c00182d7:	90                   	nop
c00182d8:	b8 01 00 00 00       	mov    eax,0x1
c00182dd:	eb e1                	jmp    c00182c0 <SoundPort::buffer16(short*, int)+0x6c>
c00182df:	90                   	nop

c00182e0 <SoundPort::buffer32(int*, int)>:
c00182e0:	55                   	push   ebp
c00182e1:	57                   	push   edi
c00182e2:	56                   	push   esi
c00182e3:	53                   	push   ebx
c00182e4:	51                   	push   ecx
c00182e5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182ed:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00182f0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00182f4:	89 04 24             	mov    DWORD PTR [esp],eax
c00182f7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00182fa:	74 5c                	je     c0018358 <SoundPort::buffer32(int*, int)+0x78>
c00182fc:	85 c0                	test   eax,eax
c00182fe:	7e 58                	jle    c0018358 <SoundPort::buffer32(int*, int)+0x78>
c0018300:	8d 71 01             	lea    esi,[ecx+0x1]
c0018303:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0018306:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0018309:	8b 37                	mov    esi,DWORD PTR [edi]
c001830b:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001830e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018311:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018314:	74 4a                	je     c0018360 <SoundPort::buffer32(int*, int)+0x80>
c0018316:	31 f6                	xor    esi,esi
c0018318:	eb 1e                	jmp    c0018338 <SoundPort::buffer32(int*, int)+0x58>
c001831a:	66 90                	xchg   ax,ax
c001831c:	8d 69 01             	lea    ebp,[ecx+0x1]
c001831f:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0018322:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0018325:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0018328:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001832c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001832f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018332:	74 18                	je     c001834c <SoundPort::buffer32(int*, int)+0x6c>
c0018334:	89 de                	mov    esi,ebx
c0018336:	66 90                	xchg   ax,ax
c0018338:	8d 5e 01             	lea    ebx,[esi+0x1]
c001833b:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001833e:	75 dc                	jne    c001831c <SoundPort::buffer32(int*, int)+0x3c>
c0018340:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0018343:	90                   	nop
c0018344:	5a                   	pop    edx
c0018345:	5b                   	pop    ebx
c0018346:	5e                   	pop    esi
c0018347:	5f                   	pop    edi
c0018348:	5d                   	pop    ebp
c0018349:	c3                   	ret    
c001834a:	66 90                	xchg   ax,ax
c001834c:	5a                   	pop    edx
c001834d:	8d 46 02             	lea    eax,[esi+0x2]
c0018350:	5b                   	pop    ebx
c0018351:	5e                   	pop    esi
c0018352:	5f                   	pop    edi
c0018353:	5d                   	pop    ebp
c0018354:	c3                   	ret    
c0018355:	8d 76 00             	lea    esi,[esi+0x0]
c0018358:	5a                   	pop    edx
c0018359:	31 c0                	xor    eax,eax
c001835b:	5b                   	pop    ebx
c001835c:	5e                   	pop    esi
c001835d:	5f                   	pop    edi
c001835e:	5d                   	pop    ebp
c001835f:	c3                   	ret    
c0018360:	b8 01 00 00 00       	mov    eax,0x1
c0018365:	eb dd                	jmp    c0018344 <SoundPort::buffer32(int*, int)+0x64>
c0018367:	90                   	nop

c0018368 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0018368:	57                   	push   edi
c0018369:	56                   	push   esi
c001836a:	53                   	push   ebx
c001836b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001836f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0018373:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0018379:	39 03                	cmp    DWORD PTR [ebx],eax
c001837b:	74 13                	je     c0018390 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001837d:	83 ec 0c             	sub    esp,0xc
c0018380:	68 74 f0 01 c0       	push   0xc001f074
c0018385:	e8 6d 83 ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c001838a:	83 c4 10             	add    esp,0x10
c001838d:	8d 76 00             	lea    esi,[esi+0x0]
c0018390:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c0018396:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0018399:	74 11                	je     c00183ac <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001839b:	83 ec 0c             	sub    esp,0xc
c001839e:	68 b3 f0 01 c0       	push   0xc001f0b3
c00183a3:	e8 4f 83 ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c00183a8:	83 c4 10             	add    esp,0x10
c00183ab:	90                   	nop
c00183ac:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c00183b2:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c00183b5:	74 11                	je     c00183c8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c00183b7:	83 ec 0c             	sub    esp,0xc
c00183ba:	68 b3 f0 01 c0       	push   0xc001f0b3
c00183bf:	e8 33 83 ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c00183c4:	83 c4 10             	add    esp,0x10
c00183c7:	90                   	nop
c00183c8:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00183cb:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c00183cf:	7e 07                	jle    c00183d8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c00183d1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00183d5:	8d 76 00             	lea    esi,[esi+0x0]
c00183d8:	85 f6                	test   esi,esi
c00183da:	7e 2c                	jle    c0018408 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c00183dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183e0:	8d 3c 36             	lea    edi,[esi+esi*1]
c00183e3:	31 c9                	xor    ecx,ecx
c00183e5:	01 d7                	add    edi,edx
c00183e7:	90                   	nop
c00183e8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00183eb:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c00183ee:	85 c0                	test   eax,eax
c00183f0:	79 06                	jns    c00183f8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c00183f2:	05 ff 7f 00 00       	add    eax,0x7fff
c00183f7:	90                   	nop
c00183f8:	c1 f8 0f             	sar    eax,0xf
c00183fb:	83 c1 04             	add    ecx,0x4
c00183fe:	66 01 02             	add    WORD PTR [edx],ax
c0018401:	83 c2 02             	add    edx,0x2
c0018404:	39 d7                	cmp    edi,edx
c0018406:	75 e0                	jne    c00183e8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0018408:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001840b:	50                   	push   eax
c001840c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001840f:	29 f0                	sub    eax,esi
c0018411:	c1 e0 02             	shl    eax,0x2
c0018414:	50                   	push   eax
c0018415:	8d 04 b2             	lea    eax,[edx+esi*4]
c0018418:	50                   	push   eax
c0018419:	52                   	push   edx
c001841a:	e8 e1 7f fe ff       	call   c0000400 <memmove>
c001841f:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c0018422:	83 c4 10             	add    esp,0x10
c0018425:	89 f0                	mov    eax,esi
c0018427:	5b                   	pop    ebx
c0018428:	5e                   	pop    esi
c0018429:	5f                   	pop    edi
c001842a:	c3                   	ret    
c001842b:	90                   	nop

c001842c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001842c:	57                   	push   edi
c001842d:	56                   	push   esi
c001842e:	53                   	push   ebx
c001842f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018433:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018437:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001843b:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0018441:	39 06                	cmp    DWORD PTR [esi],eax
c0018443:	74 13                	je     c0018458 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0018445:	83 ec 0c             	sub    esp,0xc
c0018448:	68 94 f0 01 c0       	push   0xc001f094
c001844d:	e8 a5 82 ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c0018452:	83 c4 10             	add    esp,0x10
c0018455:	8d 76 00             	lea    esi,[esi+0x0]
c0018458:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001845e:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0018461:	74 11                	je     c0018474 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0018463:	83 ec 0c             	sub    esp,0xc
c0018466:	68 cf f0 01 c0       	push   0xc001f0cf
c001846b:	e8 87 82 ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c0018470:	83 c4 10             	add    esp,0x10
c0018473:	90                   	nop
c0018474:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001847a:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001847d:	74 11                	je     c0018490 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001847f:	83 ec 0c             	sub    esp,0xc
c0018482:	68 cf f0 01 c0       	push   0xc001f0cf
c0018487:	e8 6b 82 ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c001848c:	83 c4 10             	add    esp,0x10
c001848f:	90                   	nop
c0018490:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0018493:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c0018497:	7e 07                	jle    c00184a0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0018499:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001849d:	8d 76 00             	lea    esi,[esi+0x0]
c00184a0:	85 ff                	test   edi,edi
c00184a2:	7e 1c                	jle    c00184c0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c00184a4:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c00184ab:	31 c0                	xor    eax,eax
c00184ad:	8d 76 00             	lea    esi,[esi+0x0]
c00184b0:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00184b3:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c00184b6:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c00184b9:	83 c0 04             	add    eax,0x4
c00184bc:	39 c1                	cmp    ecx,eax
c00184be:	75 f0                	jne    c00184b0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c00184c0:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00184c3:	50                   	push   eax
c00184c4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00184c7:	29 f8                	sub    eax,edi
c00184c9:	c1 e0 02             	shl    eax,0x2
c00184cc:	50                   	push   eax
c00184cd:	8d 04 ba             	lea    eax,[edx+edi*4]
c00184d0:	50                   	push   eax
c00184d1:	52                   	push   edx
c00184d2:	e8 29 7f fe ff       	call   c0000400 <memmove>
c00184d7:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c00184da:	83 c4 10             	add    esp,0x10
c00184dd:	89 f8                	mov    eax,edi
c00184df:	5b                   	pop    ebx
c00184e0:	5e                   	pop    esi
c00184e1:	5f                   	pop    edi
c00184e2:	c3                   	ret    
c00184e3:	90                   	nop

c00184e4 <PCI::open(int, int, void*)>:
c00184e4:	83 ec 18             	sub    esp,0x18
c00184e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00184eb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00184ef:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00184f5:	8b 10                	mov    edx,DWORD PTR [eax]
c00184f7:	50                   	push   eax
c00184f8:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00184fb:	31 c0                	xor    eax,eax
c00184fd:	83 c4 1c             	add    esp,0x1c
c0018500:	c3                   	ret    
c0018501:	90                   	nop

c0018502 <PCI::close(int, int, void*)>:
c0018502:	31 c0                	xor    eax,eax
c0018504:	c3                   	ret    
c0018505:	90                   	nop

c0018506 <PCI::PCI()>:
c0018506:	83 ec 0c             	sub    esp,0xc
c0018509:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001850d:	83 ec 08             	sub    esp,0x8
c0018510:	68 eb f0 01 c0       	push   0xc001f0eb
c0018515:	50                   	push   eax
c0018516:	e8 21 34 ff ff       	call   c000b93c <Bus::Bus(char const*)>
c001851b:	83 c4 10             	add    esp,0x10
c001851e:	ba 94 f1 01 c0       	mov    edx,0xc001f194
c0018523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018527:	89 10                	mov    DWORD PTR [eax],edx
c0018529:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001852d:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0018537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001853b:	a3 a0 47 02 c0       	mov    ds:0xc00247a0,eax
c0018540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018544:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001854a:	31 d2                	xor    edx,edx
c001854c:	88 c2                	mov    dl,al
c001854e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018552:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0018559:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001855d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018563:	31 d2                	xor    edx,edx
c0018565:	88 c2                	mov    dl,al
c0018567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001856b:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0018570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018574:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001857a:	8d 50 01             	lea    edx,[eax+0x1]
c001857d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018581:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0018587:	31 d2                	xor    edx,edx
c0018589:	88 c2                	mov    dl,al
c001858b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001858f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0018593:	83 c9 c0             	or     ecx,0xffffffc0
c0018596:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001859a:	90                   	nop
c001859b:	83 c4 0c             	add    esp,0xc
c001859e:	c3                   	ret    
c001859f:	90                   	nop

c00185a0 <PCI::readBAR8(unsigned int, int)>:
c00185a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185a8:	f6 c2 01             	test   dl,0x1
c00185ab:	74 07                	je     c00185b4 <PCI::readBAR8(unsigned int, int)+0x14>
c00185ad:	83 e2 fc             	and    edx,0xfffffffc
c00185b0:	01 c2                	add    edx,eax
c00185b2:	ec                   	in     al,dx
c00185b3:	c3                   	ret    
c00185b4:	83 e2 f0             	and    edx,0xfffffff0
c00185b7:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00185ba:	c3                   	ret    
c00185bb:	90                   	nop

c00185bc <PCI::readBAR16(unsigned int, int)>:
c00185bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185c4:	f6 c2 01             	test   dl,0x1
c00185c7:	74 08                	je     c00185d1 <PCI::readBAR16(unsigned int, int)+0x15>
c00185c9:	83 e2 fc             	and    edx,0xfffffffc
c00185cc:	01 c2                	add    edx,eax
c00185ce:	66 ed                	in     ax,dx
c00185d0:	c3                   	ret    
c00185d1:	83 e2 f0             	and    edx,0xfffffff0
c00185d4:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00185d8:	c3                   	ret    
c00185d9:	90                   	nop

c00185da <PCI::readBAR32(unsigned int, int)>:
c00185da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185e2:	f6 c2 01             	test   dl,0x1
c00185e5:	74 07                	je     c00185ee <PCI::readBAR32(unsigned int, int)+0x14>
c00185e7:	83 e2 fc             	and    edx,0xfffffffc
c00185ea:	01 c2                	add    edx,eax
c00185ec:	ed                   	in     eax,dx
c00185ed:	c3                   	ret    
c00185ee:	83 e2 f0             	and    edx,0xfffffff0
c00185f1:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c00185f4:	c3                   	ret    
c00185f5:	90                   	nop

c00185f6 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c00185f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185fe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018602:	f6 c2 01             	test   dl,0x1
c0018605:	74 07                	je     c001860e <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0018607:	83 e2 fc             	and    edx,0xfffffffc
c001860a:	01 ca                	add    edx,ecx
c001860c:	ee                   	out    dx,al
c001860d:	c3                   	ret    
c001860e:	83 e2 f0             	and    edx,0xfffffff0
c0018611:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0018614:	c3                   	ret    
c0018615:	90                   	nop

c0018616 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0018616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001861a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001861e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018622:	f6 c2 01             	test   dl,0x1
c0018625:	74 08                	je     c001862f <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0018627:	83 e2 fc             	and    edx,0xfffffffc
c001862a:	01 ca                	add    edx,ecx
c001862c:	66 ef                	out    dx,ax
c001862e:	c3                   	ret    
c001862f:	83 e2 f0             	and    edx,0xfffffff0
c0018632:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0018636:	c3                   	ret    
c0018637:	90                   	nop

c0018638 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0018638:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001863c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018640:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018644:	f6 c2 01             	test   dl,0x1
c0018647:	74 07                	je     c0018650 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0018649:	83 e2 fc             	and    edx,0xfffffffc
c001864c:	01 ca                	add    edx,ecx
c001864e:	ef                   	out    dx,eax
c001864f:	c3                   	ret    
c0018650:	83 e2 f0             	and    edx,0xfffffff0
c0018653:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0018656:	c3                   	ret    
c0018657:	90                   	nop

c0018658 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018658:	55                   	push   ebp
c0018659:	57                   	push   edi
c001865a:	56                   	push   esi
c001865b:	53                   	push   ebx
c001865c:	83 ec 0c             	sub    esp,0xc
c001865f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0018663:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0018667:	89 f0                	mov    eax,esi
c0018669:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001866d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018671:	3c 07                	cmp    al,0x7
c0018673:	76 10                	jbe    c0018685 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0018675:	83 ec 0c             	sub    esp,0xc
c0018678:	68 f3 f0 01 c0       	push   0xc001f0f3
c001867d:	e8 75 80 ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c0018682:	83 c4 10             	add    esp,0x10
c0018685:	80 fb 0f             	cmp    bl,0xf
c0018688:	76 10                	jbe    c001869a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001868a:	83 ec 0c             	sub    esp,0xc
c001868d:	68 23 f1 01 c0       	push   0xc001f123
c0018692:	e8 60 80 ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c0018697:	83 c4 10             	add    esp,0x10
c001869a:	8d 04 36             	lea    eax,[esi+esi*1]
c001869d:	ba f8 0c 00 00       	mov    edx,0xcf8
c00186a2:	83 c8 f0             	or     eax,0xfffffff0
c00186a5:	ee                   	out    dx,al
c00186a6:	ba fa 0c 00 00       	mov    edx,0xcfa
c00186ab:	89 e8                	mov    eax,ebp
c00186ad:	ee                   	out    dx,al
c00186ae:	83 c4 0c             	add    esp,0xc
c00186b1:	89 d8                	mov    eax,ebx
c00186b3:	66 81 e7 fc 00       	and    di,0xfc
c00186b8:	5b                   	pop    ebx
c00186b9:	c1 e0 08             	shl    eax,0x8
c00186bc:	5e                   	pop    esi
c00186bd:	09 f8                	or     eax,edi
c00186bf:	5f                   	pop    edi
c00186c0:	66 0d 00 c0          	or     ax,0xc000
c00186c4:	5d                   	pop    ebp
c00186c5:	c3                   	ret    

c00186c6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00186c6:	57                   	push   edi
c00186c7:	56                   	push   esi
c00186c8:	53                   	push   ebx
c00186c9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00186cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186d1:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c00186d7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00186db:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00186df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00186e3:	83 ff 01             	cmp    edi,0x1
c00186e6:	75 3e                	jne    c0018726 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c00186e8:	89 de                	mov    esi,ebx
c00186ea:	0f b6 c0             	movzx  eax,al
c00186ed:	81 e6 fc 00 00 00    	and    esi,0xfc
c00186f3:	c1 e0 10             	shl    eax,0x10
c00186f6:	0f b6 c9             	movzx  ecx,cl
c00186f9:	09 f0                	or     eax,esi
c00186fb:	c1 e1 08             	shl    ecx,0x8
c00186fe:	0f b6 d2             	movzx  edx,dl
c0018701:	09 c8                	or     eax,ecx
c0018703:	c1 e2 0b             	shl    edx,0xb
c0018706:	09 d0                	or     eax,edx
c0018708:	ba f8 0c 00 00       	mov    edx,0xcf8
c001870d:	0d 00 00 00 80       	or     eax,0x80000000
c0018712:	ef                   	out    dx,eax
c0018713:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018718:	ed                   	in     eax,dx
c0018719:	83 e3 02             	and    ebx,0x2
c001871c:	0f b6 cb             	movzx  ecx,bl
c001871f:	c1 e1 03             	shl    ecx,0x3
c0018722:	d3 e8                	shr    eax,cl
c0018724:	eb 43                	jmp    c0018769 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0018726:	83 ff 02             	cmp    edi,0x2
c0018729:	75 2c                	jne    c0018757 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001872b:	83 ec 0c             	sub    esp,0xc
c001872e:	0f b6 c9             	movzx  ecx,cl
c0018731:	0f b6 d2             	movzx  edx,dl
c0018734:	0f b6 fb             	movzx  edi,bl
c0018737:	0f b6 c0             	movzx  eax,al
c001873a:	57                   	push   edi
c001873b:	51                   	push   ecx
c001873c:	52                   	push   edx
c001873d:	50                   	push   eax
c001873e:	56                   	push   esi
c001873f:	e8 14 ff ff ff       	call   c0018658 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018744:	89 c2                	mov    edx,eax
c0018746:	ed                   	in     eax,dx
c0018747:	83 e3 02             	and    ebx,0x2
c001874a:	83 c4 20             	add    esp,0x20
c001874d:	0f b6 cb             	movzx  ecx,bl
c0018750:	c1 e1 03             	shl    ecx,0x3
c0018753:	d3 e8                	shr    eax,cl
c0018755:	eb 12                	jmp    c0018769 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0018757:	83 ec 0c             	sub    esp,0xc
c001875a:	68 53 f1 01 c0       	push   0xc001f153
c001875f:	e8 93 7f ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c0018764:	83 c4 10             	add    esp,0x10
c0018767:	31 c0                	xor    eax,eax
c0018769:	5b                   	pop    ebx
c001876a:	5e                   	pop    esi
c001876b:	5f                   	pop    edi
c001876c:	c3                   	ret    
c001876d:	90                   	nop

c001876e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001876e:	83 ec 18             	sub    esp,0x18
c0018771:	6a 00                	push   0x0
c0018773:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018778:	50                   	push   eax
c0018779:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001877e:	50                   	push   eax
c001877f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018784:	50                   	push   eax
c0018785:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018789:	e8 38 ff ff ff       	call   c00186c6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001878e:	83 c4 2c             	add    esp,0x2c
c0018791:	c3                   	ret    

c0018792 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0018792:	83 ec 18             	sub    esp,0x18
c0018795:	6a 0e                	push   0xe
c0018797:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001879c:	50                   	push   eax
c001879d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187a2:	50                   	push   eax
c00187a3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187a8:	50                   	push   eax
c00187a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187ad:	e8 14 ff ff ff       	call   c00186c6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187b2:	83 c4 2c             	add    esp,0x2c
c00187b5:	0f b6 c0             	movzx  eax,al
c00187b8:	c3                   	ret    
c00187b9:	90                   	nop

c00187ba <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00187ba:	55                   	push   ebp
c00187bb:	57                   	push   edi
c00187bc:	56                   	push   esi
c00187bd:	53                   	push   ebx
c00187be:	83 ec 18             	sub    esp,0x18
c00187c1:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c00187c6:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c00187cb:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c00187d0:	6a 0a                	push   0xa
c00187d2:	56                   	push   esi
c00187d3:	55                   	push   ebp
c00187d4:	57                   	push   edi
c00187d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00187d9:	e8 e8 fe ff ff       	call   c00186c6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187de:	83 c4 14             	add    esp,0x14
c00187e1:	89 c3                	mov    ebx,eax
c00187e3:	6a 0a                	push   0xa
c00187e5:	0f b6 db             	movzx  ebx,bl
c00187e8:	56                   	push   esi
c00187e9:	55                   	push   ebp
c00187ea:	57                   	push   edi
c00187eb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00187ef:	e8 d2 fe ff ff       	call   c00186c6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187f4:	83 c4 2c             	add    esp,0x2c
c00187f7:	25 00 ff 00 00       	and    eax,0xff00
c00187fc:	09 d8                	or     eax,ebx
c00187fe:	5b                   	pop    ebx
c00187ff:	5e                   	pop    esi
c0018800:	5f                   	pop    edi
c0018801:	5d                   	pop    ebp
c0018802:	c3                   	ret    
c0018803:	90                   	nop

c0018804 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0018804:	83 ec 18             	sub    esp,0x18
c0018807:	6a 08                	push   0x8
c0018809:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001880e:	50                   	push   eax
c001880f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018814:	50                   	push   eax
c0018815:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001881a:	50                   	push   eax
c001881b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001881f:	e8 a2 fe ff ff       	call   c00186c6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018824:	83 c4 2c             	add    esp,0x2c
c0018827:	0f b6 c4             	movzx  eax,ah
c001882a:	c3                   	ret    
c001882b:	90                   	nop

c001882c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001882c:	83 ec 18             	sub    esp,0x18
c001882f:	6a 08                	push   0x8
c0018831:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018836:	50                   	push   eax
c0018837:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001883c:	50                   	push   eax
c001883d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018842:	50                   	push   eax
c0018843:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018847:	e8 7a fe ff ff       	call   c00186c6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001884c:	83 c4 2c             	add    esp,0x2c
c001884f:	c3                   	ret    

c0018850 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0018850:	83 ec 18             	sub    esp,0x18
c0018853:	6a 3c                	push   0x3c
c0018855:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001885a:	50                   	push   eax
c001885b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018860:	50                   	push   eax
c0018861:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018866:	50                   	push   eax
c0018867:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001886b:	e8 56 fe ff ff       	call   c00186c6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018870:	83 c4 2c             	add    esp,0x2c
c0018873:	c3                   	ret    

c0018874 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0018874:	83 ec 18             	sub    esp,0x18
c0018877:	6a 18                	push   0x18
c0018879:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001887e:	50                   	push   eax
c001887f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018884:	50                   	push   eax
c0018885:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001888a:	50                   	push   eax
c001888b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001888f:	e8 32 fe ff ff       	call   c00186c6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018894:	83 c4 2c             	add    esp,0x2c
c0018897:	0f b6 c4             	movzx  eax,ah
c001889a:	c3                   	ret    
c001889b:	90                   	nop

c001889c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001889c:	55                   	push   ebp
c001889d:	57                   	push   edi
c001889e:	56                   	push   esi
c001889f:	53                   	push   ebx
c00188a0:	83 ec 28             	sub    esp,0x28
c00188a3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00188a7:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c00188ac:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c00188b1:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c00188b6:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00188bd:	8d 43 12             	lea    eax,[ebx+0x12]
c00188c0:	83 c3 10             	add    ebx,0x10
c00188c3:	0f b6 c0             	movzx  eax,al
c00188c6:	0f b6 db             	movzx  ebx,bl
c00188c9:	50                   	push   eax
c00188ca:	51                   	push   ecx
c00188cb:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00188cf:	57                   	push   edi
c00188d0:	55                   	push   ebp
c00188d1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00188d5:	e8 ec fd ff ff       	call   c00186c6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188da:	83 c4 14             	add    esp,0x14
c00188dd:	89 c6                	mov    esi,eax
c00188df:	53                   	push   ebx
c00188e0:	c1 e6 10             	shl    esi,0x10
c00188e3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00188e7:	51                   	push   ecx
c00188e8:	57                   	push   edi
c00188e9:	55                   	push   ebp
c00188ea:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00188ee:	e8 d3 fd ff ff       	call   c00186c6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188f3:	83 c4 3c             	add    esp,0x3c
c00188f6:	0f b7 c0             	movzx  eax,ax
c00188f9:	5b                   	pop    ebx
c00188fa:	09 f0                	or     eax,esi
c00188fc:	5e                   	pop    esi
c00188fd:	5f                   	pop    edi
c00188fe:	5d                   	pop    ebp
c00188ff:	c3                   	ret    

c0018900 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0018900:	55                   	push   ebp
c0018901:	57                   	push   edi
c0018902:	56                   	push   esi
c0018903:	53                   	push   ebx
c0018904:	83 ec 0c             	sub    esp,0xc
c0018907:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001890b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001890f:	89 f5                	mov    ebp,esi
c0018911:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0018917:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001891b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001891f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018923:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0018927:	83 f9 01             	cmp    ecx,0x1
c001892a:	75 5d                	jne    c0018989 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001892c:	0f b6 c8             	movzx  ecx,al
c001892f:	0f b6 d2             	movzx  edx,dl
c0018932:	c1 e1 10             	shl    ecx,0x10
c0018935:	c1 e2 0b             	shl    edx,0xb
c0018938:	89 f0                	mov    eax,esi
c001893a:	25 fc 00 00 00       	and    eax,0xfc
c001893f:	09 c1                	or     ecx,eax
c0018941:	89 e8                	mov    eax,ebp
c0018943:	0f b6 c0             	movzx  eax,al
c0018946:	c1 e0 08             	shl    eax,0x8
c0018949:	09 c1                	or     ecx,eax
c001894b:	09 d1                	or     ecx,edx
c001894d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018952:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0018958:	89 c8                	mov    eax,ecx
c001895a:	ef                   	out    dx,eax
c001895b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018960:	ed                   	in     eax,dx
c0018961:	0f b7 db             	movzx  ebx,bx
c0018964:	83 e6 02             	and    esi,0x2
c0018967:	74 0a                	je     c0018973 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0018969:	0f b7 d0             	movzx  edx,ax
c001896c:	c1 e3 10             	shl    ebx,0x10
c001896f:	09 d3                	or     ebx,edx
c0018971:	eb 05                	jmp    c0018978 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0018973:	66 31 c0             	xor    ax,ax
c0018976:	09 c3                	or     ebx,eax
c0018978:	ba f8 0c 00 00       	mov    edx,0xcf8
c001897d:	89 c8                	mov    eax,ecx
c001897f:	ef                   	out    dx,eax
c0018980:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018985:	89 d8                	mov    eax,ebx
c0018987:	eb 41                	jmp    c00189ca <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018989:	83 f9 02             	cmp    ecx,0x2
c001898c:	75 45                	jne    c00189d3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001898e:	83 ec 0c             	sub    esp,0xc
c0018991:	0f b6 d2             	movzx  edx,dl
c0018994:	89 f1                	mov    ecx,esi
c0018996:	0f b6 c0             	movzx  eax,al
c0018999:	0f b6 f1             	movzx  esi,cl
c001899c:	89 e9                	mov    ecx,ebp
c001899e:	56                   	push   esi
c001899f:	0f b6 c9             	movzx  ecx,cl
c00189a2:	51                   	push   ecx
c00189a3:	52                   	push   edx
c00189a4:	50                   	push   eax
c00189a5:	57                   	push   edi
c00189a6:	e8 ad fc ff ff       	call   c0018658 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00189ab:	89 c2                	mov    edx,eax
c00189ad:	ed                   	in     eax,dx
c00189ae:	83 c4 20             	add    esp,0x20
c00189b1:	0f b7 db             	movzx  ebx,bx
c00189b4:	f6 c2 02             	test   dl,0x2
c00189b7:	74 0c                	je     c00189c5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c00189b9:	0f b7 c8             	movzx  ecx,ax
c00189bc:	89 d8                	mov    eax,ebx
c00189be:	c1 e0 10             	shl    eax,0x10
c00189c1:	09 c8                	or     eax,ecx
c00189c3:	eb 05                	jmp    c00189ca <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00189c5:	66 31 c0             	xor    ax,ax
c00189c8:	09 d8                	or     eax,ebx
c00189ca:	ef                   	out    dx,eax
c00189cb:	83 c4 0c             	add    esp,0xc
c00189ce:	5b                   	pop    ebx
c00189cf:	5e                   	pop    esi
c00189d0:	5f                   	pop    edi
c00189d1:	5d                   	pop    ebp
c00189d2:	c3                   	ret    
c00189d3:	c7 44 24 20 53 f1 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f153
c00189db:	83 c4 0c             	add    esp,0xc
c00189de:	5b                   	pop    ebx
c00189df:	5e                   	pop    esi
c00189e0:	5f                   	pop    edi
c00189e1:	5d                   	pop    ebp
c00189e2:	e9 10 7d ff ff       	jmp    c00106f7 <Krnl::panic(char const*)>
c00189e7:	90                   	nop

c00189e8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c00189e8:	55                   	push   ebp
c00189e9:	57                   	push   edi
c00189ea:	56                   	push   esi
c00189eb:	53                   	push   ebx
c00189ec:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00189f2:	80 3d ac 47 02 c0 00 	cmp    BYTE PTR ds:0xc00247ac,0x0
c00189f9:	0f 85 84 00 00 00    	jne    c0018a83 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c00189ff:	83 ec 0c             	sub    esp,0xc
c0018a02:	68 14 01 00 00       	push   0x114
c0018a07:	e8 0d f4 fe ff       	call   c0007e19 <malloc>
c0018a0c:	83 c4 0c             	add    esp,0xc
c0018a0f:	89 c3                	mov    ebx,eax
c0018a11:	ff 35 f0 3d 02 c0    	push   DWORD PTR ds:0xc0023df0
c0018a17:	68 59 f1 01 c0       	push   0xc001f159
c0018a1c:	50                   	push   eax
c0018a1d:	e8 fc 26 ff ff       	call   c000b11e <File::File(char const*, Process*)>
c0018a22:	5a                   	pop    edx
c0018a23:	59                   	pop    ecx
c0018a24:	6a 01                	push   0x1
c0018a26:	53                   	push   ebx
c0018a27:	e8 b2 27 ff ff       	call   c000b1de <File::open(FileOpenMode)>
c0018a2c:	83 c4 0c             	add    esp,0xc
c0018a2f:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0018a33:	50                   	push   eax
c0018a34:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018a38:	50                   	push   eax
c0018a39:	53                   	push   ebx
c0018a3a:	e8 4b 2a ff ff       	call   c000b48a <File::stat(unsigned long long*, bool*)>
c0018a3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a43:	40                   	inc    eax
c0018a44:	89 04 24             	mov    DWORD PTR [esp],eax
c0018a47:	e8 cd f3 fe ff       	call   c0007e19 <malloc>
c0018a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018a50:	a3 a8 47 02 c0       	mov    ds:0xc00247a8,eax
c0018a55:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0018a59:	5e                   	pop    esi
c0018a5a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018a5c:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0018a60:	51                   	push   ecx
c0018a61:	50                   	push   eax
c0018a62:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018a66:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018a6a:	53                   	push   ebx
c0018a6b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018a6e:	83 c4 14             	add    esp,0x14
c0018a71:	53                   	push   ebx
c0018a72:	e8 c5 27 ff ff       	call   c000b23c <File::close()>
c0018a77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a7b:	83 c4 10             	add    esp,0x10
c0018a7e:	a3 a4 47 02 c0       	mov    ds:0xc00247a4,eax
c0018a83:	a1 a4 47 02 c0       	mov    eax,ds:0xc00247a4
c0018a88:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c0018a8e:	89 04 24             	mov    DWORD PTR [esp],eax
c0018a91:	31 ff                	xor    edi,edi
c0018a93:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0018a9b:	31 f6                	xor    esi,esi
c0018a9d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018aa2:	31 db                	xor    ebx,ebx
c0018aa4:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0018aac:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018ab1:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0018ab8:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0018abc:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0018ac3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018ac7:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018aca:	0f 8e 6b 01 00 00    	jle    c0018c3b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018ad0:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018ad3:	d4 40                	aam    0x40
c0018ad5:	d5 39                	aad    0x39
c0018ad7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018adb:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018adf:	d4 40                	aam    0x40
c0018ae1:	d5 39                	aad    0x39
c0018ae3:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018ae7:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0018aeb:	d4 40                	aam    0x40
c0018aed:	d5 39                	aad    0x39
c0018aef:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018af3:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0018af7:	d4 40                	aam    0x40
c0018af9:	d5 39                	aad    0x39
c0018afb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018aff:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0018b03:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018b07:	3c 56                	cmp    al,0x56
c0018b09:	74 45                	je     c0018b50 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018b0b:	d4 40                	aam    0x40
c0018b0d:	d5 39                	aad    0x39
c0018b0f:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018b12:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018b16:	0f b6 c9             	movzx  ecx,cl
c0018b19:	c1 e1 04             	shl    ecx,0x4
c0018b1c:	d4 40                	aam    0x40
c0018b1e:	d5 39                	aad    0x39
c0018b20:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018b23:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018b27:	0f b6 db             	movzx  ebx,bl
c0018b2a:	09 cb                	or     ebx,ecx
c0018b2c:	c1 e3 04             	shl    ebx,0x4
c0018b2f:	d4 40                	aam    0x40
c0018b31:	d5 39                	aad    0x39
c0018b33:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018b36:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018b3a:	0f b6 c9             	movzx  ecx,cl
c0018b3d:	09 cb                	or     ebx,ecx
c0018b3f:	c1 e3 04             	shl    ebx,0x4
c0018b42:	89 d9                	mov    ecx,ebx
c0018b44:	d4 40                	aam    0x40
c0018b46:	d5 39                	aad    0x39
c0018b48:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018b4b:	0f b6 db             	movzx  ebx,bl
c0018b4e:	09 cb                	or     ebx,ecx
c0018b50:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018b54:	80 f9 44             	cmp    cl,0x44
c0018b57:	74 47                	je     c0018ba0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018b59:	88 c8                	mov    al,cl
c0018b5b:	d4 40                	aam    0x40
c0018b5d:	d5 39                	aad    0x39
c0018b5f:	83 e8 30             	sub    eax,0x30
c0018b62:	0f b6 e8             	movzx  ebp,al
c0018b65:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018b69:	c1 e5 04             	shl    ebp,0x4
c0018b6c:	d4 40                	aam    0x40
c0018b6e:	d5 39                	aad    0x39
c0018b70:	83 e8 30             	sub    eax,0x30
c0018b73:	0f b6 f0             	movzx  esi,al
c0018b76:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018b7a:	09 ee                	or     esi,ebp
c0018b7c:	c1 e6 04             	shl    esi,0x4
c0018b7f:	d4 40                	aam    0x40
c0018b81:	d5 39                	aad    0x39
c0018b83:	83 e8 30             	sub    eax,0x30
c0018b86:	0f b6 e8             	movzx  ebp,al
c0018b89:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018b8d:	09 ee                	or     esi,ebp
c0018b8f:	c1 e6 04             	shl    esi,0x4
c0018b92:	89 f5                	mov    ebp,esi
c0018b94:	d4 40                	aam    0x40
c0018b96:	d5 39                	aad    0x39
c0018b98:	83 e8 30             	sub    eax,0x30
c0018b9b:	0f b6 f0             	movzx  esi,al
c0018b9e:	09 ee                	or     esi,ebp
c0018ba0:	83 c7 10             	add    edi,0x10
c0018ba3:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0018ba7:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018baa:	3c 0a                	cmp    al,0xa
c0018bac:	74 09                	je     c0018bb7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018bae:	45                   	inc    ebp
c0018baf:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018bb2:	75 16                	jne    c0018bca <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018bb4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0018bb7:	3c 0a                	cmp    al,0xa
c0018bb9:	0f 94 c0             	sete   al
c0018bbc:	0f b6 c0             	movzx  eax,al
c0018bbf:	01 c7                	add    edi,eax
c0018bc1:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0018bc6:	75 0c                	jne    c0018bd4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018bc8:	eb 15                	jmp    c0018bdf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018bca:	47                   	inc    edi
c0018bcb:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018bce:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0018bd2:	eb d3                	jmp    c0018ba7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018bd4:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018bd9:	0f 85 e8 fe ff ff    	jne    c0018ac7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018bdf:	80 f9 44             	cmp    cl,0x44
c0018be2:	74 0b                	je     c0018bef <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018be4:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018be9:	0f 85 d8 fe ff ff    	jne    c0018ac7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018bef:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018bf3:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018bf7:	c1 e1 04             	shl    ecx,0x4
c0018bfa:	83 e8 30             	sub    eax,0x30
c0018bfd:	09 c8                	or     eax,ecx
c0018bff:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0018c03:	0f 85 be fe ff ff    	jne    c0018ac7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c09:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018c0d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018c11:	c1 e1 04             	shl    ecx,0x4
c0018c14:	83 e8 30             	sub    eax,0x30
c0018c17:	09 c8                	or     eax,ecx
c0018c19:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018c1d:	0f 85 a4 fe ff ff    	jne    c0018ac7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c23:	50                   	push   eax
c0018c24:	50                   	push   eax
c0018c25:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018c29:	50                   	push   eax
c0018c2a:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018c31:	e8 ea 79 fe ff       	call   c0000620 <strcpy>
c0018c36:	83 c4 10             	add    esp,0x10
c0018c39:	eb 15                	jmp    c0018c50 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018c3b:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018c42:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018c4d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018c50:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018c57:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018c5d:	5b                   	pop    ebx
c0018c5e:	5e                   	pop    esi
c0018c5f:	5f                   	pop    edi
c0018c60:	5d                   	pop    ebp
c0018c61:	c3                   	ret    

c0018c62 <PCI::checkBus(unsigned char)>:
c0018c62:	56                   	push   esi
c0018c63:	53                   	push   ebx
c0018c64:	31 f6                	xor    esi,esi
c0018c66:	51                   	push   ecx
c0018c67:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018c6b:	0f b6 c3             	movzx  eax,bl
c0018c6e:	52                   	push   edx
c0018c6f:	56                   	push   esi
c0018c70:	46                   	inc    esi
c0018c71:	50                   	push   eax
c0018c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018c76:	e8 f3 02 00 00       	call   c0018f6e <PCI::checkDevice(unsigned char, unsigned char)>
c0018c7b:	83 c4 10             	add    esp,0x10
c0018c7e:	83 fe 20             	cmp    esi,0x20
c0018c81:	75 e8                	jne    c0018c6b <PCI::checkBus(unsigned char)+0x9>
c0018c83:	58                   	pop    eax
c0018c84:	5b                   	pop    ebx
c0018c85:	5e                   	pop    esi
c0018c86:	c3                   	ret    
c0018c87:	90                   	nop

c0018c88 <PCI::foundDevice(PCIDeviceInfo)>:
c0018c88:	55                   	push   ebp
c0018c89:	57                   	push   edi
c0018c8a:	56                   	push   esi
c0018c8b:	53                   	push   ebx
c0018c8c:	83 ec 1c             	sub    esp,0x1c
c0018c8f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018c93:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018c99:	0f 84 52 01 00 00    	je     c0018df1 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018c9f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018ca3:	66 81 f9 06 04       	cmp    cx,0x406
c0018ca8:	75 2c                	jne    c0018cd6 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018caa:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018caf:	50                   	push   eax
c0018cb0:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018cb5:	50                   	push   eax
c0018cb6:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018cbb:	50                   	push   eax
c0018cbc:	56                   	push   esi
c0018cbd:	e8 b2 fb ff ff       	call   c0018874 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0018cc2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018cc6:	0f b6 c0             	movzx  eax,al
c0018cc9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018ccd:	83 c4 2c             	add    esp,0x2c
c0018cd0:	5b                   	pop    ebx
c0018cd1:	5e                   	pop    esi
c0018cd2:	5f                   	pop    edi
c0018cd3:	5d                   	pop    ebp
c0018cd4:	eb 8c                	jmp    c0018c62 <PCI::checkBus(unsigned char)>
c0018cd6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018cda:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018ce0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018ce4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018ce8:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018cec:	88 d3                	mov    bl,dl
c0018cee:	85 c0                	test   eax,eax
c0018cf0:	74 33                	je     c0018d25 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0018cf2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018cf5:	85 d2                	test   edx,edx
c0018cf7:	74 28                	je     c0018d21 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018cf9:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018cff:	31 ef                	xor    edi,ebp
c0018d01:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018d07:	75 18                	jne    c0018d21 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d09:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018d0d:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0018d13:	75 0c                	jne    c0018d21 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d15:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018d1b:	0f 84 d0 00 00 00    	je     c0018df1 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018d21:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d23:	eb c9                	jmp    c0018cee <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018d25:	66 81 f9 01 06       	cmp    cx,0x601
c0018d2a:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018d2e:	75 19                	jne    c0018d49 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018d30:	83 ec 0c             	sub    esp,0xc
c0018d33:	68 64 01 00 00       	push   0x164
c0018d38:	e8 dc f0 fe ff       	call   c0007e19 <malloc>
c0018d3d:	89 c5                	mov    ebp,eax
c0018d3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d42:	e8 47 0e 00 00       	call   c0019b8e <SATABus::SATABus()>
c0018d47:	eb 1e                	jmp    c0018d67 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018d49:	66 81 f9 01 01       	cmp    cx,0x101
c0018d4e:	75 60                	jne    c0018db0 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018d50:	83 ec 0c             	sub    esp,0xc
c0018d53:	68 70 02 00 00       	push   0x270
c0018d58:	e8 bc f0 fe ff       	call   c0007e19 <malloc>
c0018d5d:	89 c5                	mov    ebp,eax
c0018d5f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d62:	e8 cb 02 00 00       	call   c0019032 <IDE::IDE()>
c0018d67:	58                   	pop    eax
c0018d68:	5a                   	pop    edx
c0018d69:	55                   	push   ebp
c0018d6a:	56                   	push   esi
c0018d6b:	e8 78 32 ff ff       	call   c000bfe8 <Device::addChild(Device*)>
c0018d70:	83 ec 1c             	sub    esp,0x1c
c0018d73:	b9 09 00 00 00       	mov    ecx,0x9
c0018d78:	fc                   	cld    
c0018d79:	89 e7                	mov    edi,esp
c0018d7b:	89 de                	mov    esi,ebx
c0018d7d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018d7f:	55                   	push   ebp
c0018d80:	e8 a9 31 ff ff       	call   c000bf2e <Device::preOpenPCI(PCIDeviceInfo)>
c0018d85:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018d88:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018d8c:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018d94:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018d9c:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0018da4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018da7:	83 c4 4c             	add    esp,0x4c
c0018daa:	5b                   	pop    ebx
c0018dab:	5e                   	pop    esi
c0018dac:	5f                   	pop    edi
c0018dad:	5d                   	pop    ebp
c0018dae:	ff e0                	jmp    eax
c0018db0:	83 ec 0c             	sub    esp,0xc
c0018db3:	68 58 01 00 00       	push   0x158
c0018db8:	e8 5c f0 fe ff       	call   c0007e19 <malloc>
c0018dbd:	89 c5                	mov    ebp,eax
c0018dbf:	58                   	pop    eax
c0018dc0:	5a                   	pop    edx
c0018dc1:	68 72 f1 01 c0       	push   0xc001f172
c0018dc6:	55                   	push   ebp
c0018dc7:	e8 ba 34 ff ff       	call   c000c286 <DriverlessDevice::DriverlessDevice(char const*)>
c0018dcc:	59                   	pop    ecx
c0018dcd:	5f                   	pop    edi
c0018dce:	55                   	push   ebp
c0018dcf:	56                   	push   esi
c0018dd0:	e8 13 32 ff ff       	call   c000bfe8 <Device::addChild(Device*)>
c0018dd5:	b9 09 00 00 00       	mov    ecx,0x9
c0018dda:	fc                   	cld    
c0018ddb:	89 df                	mov    edi,ebx
c0018ddd:	89 de                	mov    esi,ebx
c0018ddf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018de1:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018de5:	83 c4 2c             	add    esp,0x2c
c0018de8:	5b                   	pop    ebx
c0018de9:	5e                   	pop    esi
c0018dea:	5f                   	pop    edi
c0018deb:	5d                   	pop    ebp
c0018dec:	e9 3d 31 ff ff       	jmp    c000bf2e <Device::preOpenPCI(PCIDeviceInfo)>
c0018df1:	83 c4 1c             	add    esp,0x1c
c0018df4:	5b                   	pop    ebx
c0018df5:	5e                   	pop    esi
c0018df6:	5f                   	pop    edi
c0018df7:	5d                   	pop    ebp
c0018df8:	c3                   	ret    
c0018df9:	90                   	nop

c0018dfa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018dfa:	55                   	push   ebp
c0018dfb:	57                   	push   edi
c0018dfc:	56                   	push   esi
c0018dfd:	53                   	push   ebx
c0018dfe:	83 ec 68             	sub    esp,0x68
c0018e01:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018e05:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018e0c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018e10:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018e17:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018e1c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018e20:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018e27:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018e2c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018e30:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018e35:	6a 0c                	push   0xc
c0018e37:	57                   	push   edi
c0018e38:	53                   	push   ebx
c0018e39:	56                   	push   esi
c0018e3a:	55                   	push   ebp
c0018e3b:	e8 86 f8 ff ff       	call   c00186c6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e40:	83 c4 20             	add    esp,0x20
c0018e43:	57                   	push   edi
c0018e44:	53                   	push   ebx
c0018e45:	56                   	push   esi
c0018e46:	55                   	push   ebp
c0018e47:	e8 6e f9 ff ff       	call   c00187ba <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018e4c:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018e51:	57                   	push   edi
c0018e52:	53                   	push   ebx
c0018e53:	56                   	push   esi
c0018e54:	55                   	push   ebp
c0018e55:	e8 f6 f9 ff ff       	call   c0018850 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018e5a:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018e5e:	83 c4 14             	add    esp,0x14
c0018e61:	6a 3c                	push   0x3c
c0018e63:	57                   	push   edi
c0018e64:	53                   	push   ebx
c0018e65:	56                   	push   esi
c0018e66:	55                   	push   ebp
c0018e67:	e8 5a f8 ff ff       	call   c00186c6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e6c:	0f b6 c4             	movzx  eax,ah
c0018e6f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018e73:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0018e77:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018e7b:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c0018e80:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0018e86:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018e8c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018e90:	83 c4 20             	add    esp,0x20
c0018e93:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018e98:	74 30                	je     c0018eca <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018e9a:	31 c0                	xor    eax,eax
c0018e9c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018ea0:	7e 28                	jle    c0018eca <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018ea2:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018eaa:	39 cb                	cmp    ebx,ecx
c0018eac:	75 19                	jne    c0018ec7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018eae:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0018eb6:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018eba:	75 0b                	jne    c0018ec7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018ebc:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0018ec3:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0018ec7:	40                   	inc    eax
c0018ec8:	eb d2                	jmp    c0018e9c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018eca:	31 d2                	xor    edx,edx
c0018ecc:	83 ec 0c             	sub    esp,0xc
c0018ecf:	57                   	push   edi
c0018ed0:	53                   	push   ebx
c0018ed1:	56                   	push   esi
c0018ed2:	52                   	push   edx
c0018ed3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0018ed7:	55                   	push   ebp
c0018ed8:	e8 bf f9 ff ff       	call   c001889c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018edd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018ee1:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018ee5:	42                   	inc    edx
c0018ee6:	83 c4 20             	add    esp,0x20
c0018ee9:	83 fa 06             	cmp    edx,0x6
c0018eec:	75 de                	jne    c0018ecc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018eee:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018ef3:	83 ec 0c             	sub    esp,0xc
c0018ef6:	86 e0                	xchg   al,ah
c0018ef8:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018efd:	6a 02                	push   0x2
c0018eff:	57                   	push   edi
c0018f00:	53                   	push   ebx
c0018f01:	56                   	push   esi
c0018f02:	55                   	push   ebp
c0018f03:	e8 be f7 ff ff       	call   c00186c6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018f08:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018f0d:	83 c4 20             	add    esp,0x20
c0018f10:	57                   	push   edi
c0018f11:	53                   	push   ebx
c0018f12:	56                   	push   esi
c0018f13:	55                   	push   ebp
c0018f14:	e8 eb f8 ff ff       	call   c0018804 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018f19:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018f1d:	57                   	push   edi
c0018f1e:	53                   	push   ebx
c0018f1f:	56                   	push   esi
c0018f20:	55                   	push   ebp
c0018f21:	e8 48 f8 ff ff       	call   c001876e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018f26:	b9 09 00 00 00       	mov    ecx,0x9
c0018f2b:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018f30:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018f34:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018f38:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018f3c:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018f40:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018f44:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018f48:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018f4c:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018f50:	83 ec 0c             	sub    esp,0xc
c0018f53:	fc                   	cld    
c0018f54:	89 e7                	mov    edi,esp
c0018f56:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018f5a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018f5c:	55                   	push   ebp
c0018f5d:	e8 26 fd ff ff       	call   c0018c88 <PCI::foundDevice(PCIDeviceInfo)>
c0018f62:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018f68:	5b                   	pop    ebx
c0018f69:	5e                   	pop    esi
c0018f6a:	5f                   	pop    edi
c0018f6b:	5d                   	pop    ebp
c0018f6c:	c3                   	ret    
c0018f6d:	90                   	nop

c0018f6e <PCI::checkDevice(unsigned char, unsigned char)>:
c0018f6e:	55                   	push   ebp
c0018f6f:	57                   	push   edi
c0018f70:	56                   	push   esi
c0018f71:	53                   	push   ebx
c0018f72:	83 ec 0c             	sub    esp,0xc
c0018f75:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018f79:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0018f7e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018f83:	6a 00                	push   0x0
c0018f85:	56                   	push   esi
c0018f86:	57                   	push   edi
c0018f87:	55                   	push   ebp
c0018f88:	e8 e1 f7 ff ff       	call   c001876e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018f8d:	6a 00                	push   0x0
c0018f8f:	56                   	push   esi
c0018f90:	57                   	push   edi
c0018f91:	55                   	push   ebp
c0018f92:	e8 63 fe ff ff       	call   c0018dfa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018f97:	83 c4 20             	add    esp,0x20
c0018f9a:	6a 00                	push   0x0
c0018f9c:	56                   	push   esi
c0018f9d:	57                   	push   edi
c0018f9e:	55                   	push   ebp
c0018f9f:	e8 ee f7 ff ff       	call   c0018792 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018fa4:	83 c4 10             	add    esp,0x10
c0018fa7:	84 c0                	test   al,al
c0018fa9:	79 27                	jns    c0018fd2 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0018fab:	bb 01 00 00 00       	mov    ebx,0x1
c0018fb0:	53                   	push   ebx
c0018fb1:	56                   	push   esi
c0018fb2:	57                   	push   edi
c0018fb3:	55                   	push   ebp
c0018fb4:	e8 b5 f7 ff ff       	call   c001876e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018fb9:	83 c4 10             	add    esp,0x10
c0018fbc:	66 40                	inc    ax
c0018fbe:	74 0c                	je     c0018fcc <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0018fc0:	53                   	push   ebx
c0018fc1:	56                   	push   esi
c0018fc2:	57                   	push   edi
c0018fc3:	55                   	push   ebp
c0018fc4:	e8 31 fe ff ff       	call   c0018dfa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018fc9:	83 c4 10             	add    esp,0x10
c0018fcc:	43                   	inc    ebx
c0018fcd:	83 fb 08             	cmp    ebx,0x8
c0018fd0:	75 de                	jne    c0018fb0 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0018fd2:	83 c4 0c             	add    esp,0xc
c0018fd5:	5b                   	pop    ebx
c0018fd6:	5e                   	pop    esi
c0018fd7:	5f                   	pop    edi
c0018fd8:	5d                   	pop    ebp
c0018fd9:	c3                   	ret    

c0018fda <PCI::detect()>:
c0018fda:	56                   	push   esi
c0018fdb:	53                   	push   ebx
c0018fdc:	53                   	push   ebx
c0018fdd:	31 db                	xor    ebx,ebx
c0018fdf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018fe3:	6a 00                	push   0x0
c0018fe5:	6a 00                	push   0x0
c0018fe7:	6a 00                	push   0x0
c0018fe9:	56                   	push   esi
c0018fea:	e8 a3 f7 ff ff       	call   c0018792 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018fef:	83 c4 10             	add    esp,0x10
c0018ff2:	a8 80                	test   al,0x80
c0018ff4:	75 21                	jne    c0019017 <PCI::detect()+0x3d>
c0018ff6:	51                   	push   ecx
c0018ff7:	51                   	push   ecx
c0018ff8:	6a 00                	push   0x0
c0018ffa:	56                   	push   esi
c0018ffb:	e8 62 fc ff ff       	call   c0018c62 <PCI::checkBus(unsigned char)>
c0019000:	83 c4 10             	add    esp,0x10
c0019003:	eb 24                	jmp    c0019029 <PCI::detect()+0x4f>
c0019005:	52                   	push   edx
c0019006:	52                   	push   edx
c0019007:	53                   	push   ebx
c0019008:	43                   	inc    ebx
c0019009:	56                   	push   esi
c001900a:	e8 53 fc ff ff       	call   c0018c62 <PCI::checkBus(unsigned char)>
c001900f:	83 c4 10             	add    esp,0x10
c0019012:	83 fb 08             	cmp    ebx,0x8
c0019015:	74 12                	je     c0019029 <PCI::detect()+0x4f>
c0019017:	53                   	push   ebx
c0019018:	6a 00                	push   0x0
c001901a:	6a 00                	push   0x0
c001901c:	56                   	push   esi
c001901d:	e8 4c f7 ff ff       	call   c001876e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0019022:	83 c4 10             	add    esp,0x10
c0019025:	66 40                	inc    ax
c0019027:	74 dc                	je     c0019005 <PCI::detect()+0x2b>
c0019029:	58                   	pop    eax
c001902a:	5b                   	pop    ebx
c001902b:	5e                   	pop    esi
c001902c:	c3                   	ret    
c001902d:	90                   	nop

c001902e <IDE::close(int, int, void*)>:
c001902e:	83 c8 ff             	or     eax,0xffffffff
c0019031:	c3                   	ret    

c0019032 <IDE::IDE()>:
c0019032:	83 ec 0c             	sub    esp,0xc
c0019035:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019039:	83 ec 08             	sub    esp,0x8
c001903c:	68 b8 f1 01 c0       	push   0xc001f1b8
c0019041:	50                   	push   eax
c0019042:	e8 e5 32 ff ff       	call   c000c32c <HardDiskController::HardDiskController(char const*)>
c0019047:	83 c4 10             	add    esp,0x10
c001904a:	ba 48 f2 01 c0       	mov    edx,0xc001f248
c001904f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019053:	89 10                	mov    DWORD PTR [eax],edx
c0019055:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019059:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0019060:	90                   	nop
c0019061:	83 c4 0c             	add    esp,0xc
c0019064:	c3                   	ret    
c0019065:	90                   	nop

c0019066 <IDE::prepareInterrupt(unsigned char)>:
c0019066:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001906b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001906f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0019077:	c3                   	ret    

c0019078 <selectDrive(unsigned char, unsigned char)>:
c0019078:	c3                   	ret    
c0019079:	90                   	nop

c001907a <IDE::getBase(unsigned char)>:
c001907a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001907f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019083:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001908b:	c3                   	ret    

c001908c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001908c:	55                   	push   ebp
c001908d:	57                   	push   edi
c001908e:	56                   	push   esi
c001908f:	53                   	push   ebx
c0019090:	83 ec 1c             	sub    esp,0x1c
c0019093:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0019097:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001909b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001909e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00190a2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00190a6:	80 f9 03             	cmp    cl,0x3
c00190a9:	77 51                	ja     c00190fc <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00190ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00190af:	0f b6 f2             	movzx  esi,dl
c00190b2:	0f b6 db             	movzx  ebx,bl
c00190b5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00190b8:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00190bc:	83 ca 80             	or     edx,0xffffff80
c00190bf:	0f b6 d2             	movzx  edx,dl
c00190c2:	52                   	push   edx
c00190c3:	6a 0c                	push   0xc
c00190c5:	56                   	push   esi
c00190c6:	57                   	push   edi
c00190c7:	e8 c0 ff ff ff       	call   c001908c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00190cc:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00190d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00190d5:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00190d9:	ee                   	out    dx,al
c00190da:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00190df:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00190e3:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00190e7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00190eb:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00190f3:	83 c4 2c             	add    esp,0x2c
c00190f6:	5b                   	pop    ebx
c00190f7:	5e                   	pop    esi
c00190f8:	5f                   	pop    edi
c00190f9:	5d                   	pop    ebp
c00190fa:	eb 90                	jmp    c001908c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00190fc:	80 fb 07             	cmp    bl,0x7
c00190ff:	77 12                	ja     c0019113 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0019101:	0f b6 d2             	movzx  edx,dl
c0019104:	0f b6 db             	movzx  ebx,bl
c0019107:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001910f:	89 da                	mov    edx,ebx
c0019111:	eb 2f                	jmp    c0019142 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0019113:	80 fb 0d             	cmp    bl,0xd
c0019116:	77 13                	ja     c001912b <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0019118:	0f b6 d2             	movzx  edx,dl
c001911b:	0f b6 db             	movzx  ebx,bl
c001911e:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0019125:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0019129:	eb 17                	jmp    c0019142 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001912b:	80 fb 15             	cmp    bl,0x15
c001912e:	77 13                	ja     c0019143 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0019130:	0f b6 d2             	movzx  edx,dl
c0019133:	0f b6 db             	movzx  ebx,bl
c0019136:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001913e:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0019142:	ee                   	out    dx,al
c0019143:	83 c4 1c             	add    esp,0x1c
c0019146:	5b                   	pop    ebx
c0019147:	5e                   	pop    esi
c0019148:	5f                   	pop    edi
c0019149:	5d                   	pop    ebp
c001914a:	c3                   	ret    
c001914b:	90                   	nop

c001914c <IDE::read(unsigned char, unsigned char)>:
c001914c:	55                   	push   ebp
c001914d:	57                   	push   edi
c001914e:	56                   	push   esi
c001914f:	53                   	push   ebx
c0019150:	83 ec 1c             	sub    esp,0x1c
c0019153:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0019157:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001915b:	8d 43 f8             	lea    eax,[ebx-0x8]
c001915e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019162:	3c 03                	cmp    al,0x3
c0019164:	77 43                	ja     c00191a9 <IDE::read(unsigned char, unsigned char)+0x5d>
c0019166:	0f b6 f2             	movzx  esi,dl
c0019169:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001916c:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0019170:	83 c8 80             	or     eax,0xffffff80
c0019173:	0f b6 c0             	movzx  eax,al
c0019176:	50                   	push   eax
c0019177:	6a 0c                	push   0xc
c0019179:	56                   	push   esi
c001917a:	57                   	push   edi
c001917b:	e8 0c ff ff ff       	call   c001908c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019180:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0019185:	0f b6 c3             	movzx  eax,bl
c0019188:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001918c:	ec                   	in     al,dx
c001918d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019191:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0019196:	52                   	push   edx
c0019197:	6a 0c                	push   0xc
c0019199:	56                   	push   esi
c001919a:	57                   	push   edi
c001919b:	e8 ec fe ff ff       	call   c001908c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00191a0:	83 c4 20             	add    esp,0x20
c00191a3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00191a7:	eb 49                	jmp    c00191f2 <IDE::read(unsigned char, unsigned char)+0xa6>
c00191a9:	80 fb 07             	cmp    bl,0x7
c00191ac:	77 12                	ja     c00191c0 <IDE::read(unsigned char, unsigned char)+0x74>
c00191ae:	0f b6 d2             	movzx  edx,dl
c00191b1:	0f b6 c3             	movzx  eax,bl
c00191b4:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00191bc:	89 c2                	mov    edx,eax
c00191be:	eb 31                	jmp    c00191f1 <IDE::read(unsigned char, unsigned char)+0xa5>
c00191c0:	80 fb 0d             	cmp    bl,0xd
c00191c3:	77 13                	ja     c00191d8 <IDE::read(unsigned char, unsigned char)+0x8c>
c00191c5:	0f b6 d2             	movzx  edx,dl
c00191c8:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00191cf:	0f b6 d3             	movzx  edx,bl
c00191d2:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00191d6:	eb 19                	jmp    c00191f1 <IDE::read(unsigned char, unsigned char)+0xa5>
c00191d8:	31 c0                	xor    eax,eax
c00191da:	80 fb 15             	cmp    bl,0x15
c00191dd:	77 13                	ja     c00191f2 <IDE::read(unsigned char, unsigned char)+0xa6>
c00191df:	0f b6 d2             	movzx  edx,dl
c00191e2:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00191ea:	0f b6 d3             	movzx  edx,bl
c00191ed:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00191f1:	ec                   	in     al,dx
c00191f2:	83 c4 1c             	add    esp,0x1c
c00191f5:	5b                   	pop    ebx
c00191f6:	5e                   	pop    esi
c00191f7:	5f                   	pop    edi
c00191f8:	5d                   	pop    ebp
c00191f9:	c3                   	ret    

c00191fa <IDE::waitInterrupt(unsigned char)>:
c00191fa:	57                   	push   edi
c00191fb:	56                   	push   esi
c00191fc:	31 f6                	xor    esi,esi
c00191fe:	53                   	push   ebx
c00191ff:	83 ec 10             	sub    esp,0x10
c0019202:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0019206:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001920a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001920e:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0019213:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c001921a:	84 db                	test   bl,bl
c001921c:	75 33                	jne    c0019251 <IDE::waitInterrupt(unsigned char)+0x57>
c001921e:	52                   	push   edx
c001921f:	6a 0c                	push   0xc
c0019221:	50                   	push   eax
c0019222:	57                   	push   edi
c0019223:	e8 24 ff ff ff       	call   c001914c <IDE::read(unsigned char, unsigned char)>
c0019228:	83 c4 10             	add    esp,0x10
c001922b:	a8 01                	test   al,0x1
c001922d:	75 2a                	jne    c0019259 <IDE::waitInterrupt(unsigned char)+0x5f>
c001922f:	f7 c6 04 00 00 00    	test   esi,0x4
c0019235:	75 12                	jne    c0019249 <IDE::waitInterrupt(unsigned char)+0x4f>
c0019237:	83 fe 32             	cmp    esi,0x32
c001923a:	7e 0d                	jle    c0019249 <IDE::waitInterrupt(unsigned char)+0x4f>
c001923c:	83 ec 0c             	sub    esp,0xc
c001923f:	6a 64                	push   0x64
c0019241:	e8 06 ab ff ff       	call   c0013d4c <milliTenthSleep(unsigned int)>
c0019246:	83 c4 10             	add    esp,0x10
c0019249:	83 fe 3c             	cmp    esi,0x3c
c001924c:	74 0b                	je     c0019259 <IDE::waitInterrupt(unsigned char)+0x5f>
c001924e:	46                   	inc    esi
c001924f:	eb bd                	jmp    c001920e <IDE::waitInterrupt(unsigned char)+0x14>
c0019251:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c0019259:	83 c4 10             	add    esp,0x10
c001925c:	88 d8                	mov    al,bl
c001925e:	5b                   	pop    ebx
c001925f:	5e                   	pop    esi
c0019260:	5f                   	pop    edi
c0019261:	c3                   	ret    

c0019262 <ideChannel0IRQHandler(regs*, void*)>:
c0019262:	83 ec 10             	sub    esp,0x10
c0019265:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019269:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0019270:	6a 07                	push   0x7
c0019272:	6a 00                	push   0x0
c0019274:	50                   	push   eax
c0019275:	e8 d2 fe ff ff       	call   c001914c <IDE::read(unsigned char, unsigned char)>
c001927a:	83 c4 1c             	add    esp,0x1c
c001927d:	c3                   	ret    

c001927e <ideChannel1IRQHandler(regs*, void*)>:
c001927e:	83 ec 10             	sub    esp,0x10
c0019281:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019285:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001928c:	6a 07                	push   0x7
c001928e:	6a 01                	push   0x1
c0019290:	50                   	push   eax
c0019291:	e8 b6 fe ff ff       	call   c001914c <IDE::read(unsigned char, unsigned char)>
c0019296:	83 c4 1c             	add    esp,0x1c
c0019299:	c3                   	ret    

c001929a <IDE::enableIRQs(unsigned char, bool)>:
c001929a:	57                   	push   edi
c001929b:	56                   	push   esi
c001929c:	be 04 00 00 00       	mov    esi,0x4
c00192a1:	53                   	push   ebx
c00192a2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00192a7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00192ab:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00192b0:	0f 94 c0             	sete   al
c00192b3:	01 c0                	add    eax,eax
c00192b5:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00192bc:	0f b6 c0             	movzx  eax,al
c00192bf:	50                   	push   eax
c00192c0:	6a 0c                	push   0xc
c00192c2:	57                   	push   edi
c00192c3:	53                   	push   ebx
c00192c4:	e8 c3 fd ff ff       	call   c001908c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00192c9:	83 c4 10             	add    esp,0x10
c00192cc:	50                   	push   eax
c00192cd:	6a 0c                	push   0xc
c00192cf:	57                   	push   edi
c00192d0:	53                   	push   ebx
c00192d1:	e8 76 fe ff ff       	call   c001914c <IDE::read(unsigned char, unsigned char)>
c00192d6:	83 c4 10             	add    esp,0x10
c00192d9:	4e                   	dec    esi
c00192da:	75 f0                	jne    c00192cc <IDE::enableIRQs(unsigned char, bool)+0x32>
c00192dc:	5b                   	pop    ebx
c00192dd:	5e                   	pop    esi
c00192de:	5f                   	pop    edi
c00192df:	c3                   	ret    

c00192e0 <IDE::open(int, int, void*)>:
c00192e0:	55                   	push   ebp
c00192e1:	57                   	push   edi
c00192e2:	56                   	push   esi
c00192e3:	53                   	push   ebx
c00192e4:	83 ec 1c             	sub    esp,0x1c
c00192e7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00192eb:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00192f4:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00192fd:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0019304:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001930b:	0f 85 b0 02 00 00    	jne    c00195c1 <IDE::open(int, int, void*)+0x2e1>
c0019311:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0019317:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001931b:	83 e0 7f             	and    eax,0x7f
c001931e:	3c 05                	cmp    al,0x5
c0019320:	74 04                	je     c0019326 <IDE::open(int, int, void*)+0x46>
c0019322:	3c 0f                	cmp    al,0xf
c0019324:	75 32                	jne    c0019358 <IDE::open(int, int, void*)+0x78>
c0019326:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001932c:	83 e0 fc             	and    eax,0xfffffffc
c001932f:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0019336:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001933c:	83 e0 fc             	and    eax,0xfffffffc
c001933f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0019346:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001934c:	83 e0 fc             	and    eax,0xfffffffc
c001934f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019356:	eb 14                	jmp    c001936c <IDE::open(int, int, void*)+0x8c>
c0019358:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0019362:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001936c:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0019373:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001937a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001937e:	89 c6                	mov    esi,eax
c0019380:	bf f8 0c 00 00       	mov    edi,0xcf8
c0019385:	c1 e6 10             	shl    esi,0x10
c0019388:	89 e8                	mov    eax,ebp
c001938a:	89 fa                	mov    edx,edi
c001938c:	c1 e0 0b             	shl    eax,0xb
c001938f:	09 f0                	or     eax,esi
c0019391:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0019398:	c1 e6 08             	shl    esi,0x8
c001939b:	09 c6                	or     esi,eax
c001939d:	89 f0                	mov    eax,esi
c001939f:	0d 08 00 00 80       	or     eax,0x80000008
c00193a4:	ef                   	out    dx,eax
c00193a5:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00193aa:	89 ca                	mov    edx,ecx
c00193ac:	ed                   	in     eax,dx
c00193ad:	c1 e8 10             	shr    eax,0x10
c00193b0:	3d ff ff 00 00       	cmp    eax,0xffff
c00193b5:	0f 84 f5 00 00 00    	je     c00194b0 <IDE::open(int, int, void*)+0x1d0>
c00193bb:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00193c1:	89 fa                	mov    edx,edi
c00193c3:	89 f0                	mov    eax,esi
c00193c5:	ef                   	out    dx,eax
c00193c6:	b0 fe                	mov    al,0xfe
c00193c8:	89 ca                	mov    edx,ecx
c00193ca:	ee                   	out    dx,al
c00193cb:	89 f0                	mov    eax,esi
c00193cd:	89 fa                	mov    edx,edi
c00193cf:	ef                   	out    dx,eax
c00193d0:	89 ca                	mov    edx,ecx
c00193d2:	ed                   	in     eax,dx
c00193d3:	3c fe                	cmp    al,0xfe
c00193d5:	0f 85 a9 00 00 00    	jne    c0019484 <IDE::open(int, int, void*)+0x1a4>
c00193db:	8b 15 f8 08 02 c0    	mov    edx,DWORD PTR ds:0xc00208f8
c00193e1:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c00193e8:	74 33                	je     c001941d <IDE::open(int, int, void*)+0x13d>
c00193ea:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00193f0:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00193f4:	40                   	inc    eax
c00193f5:	83 ec 0c             	sub    esp,0xc
c00193f8:	0f b6 c0             	movzx  eax,al
c00193fb:	50                   	push   eax
c00193fc:	55                   	push   ebp
c00193fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019401:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c0019407:	51                   	push   ecx
c0019408:	e8 67 59 ff ff       	call   c000ed74 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001940d:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0019412:	83 c4 1c             	add    esp,0x1c
c0019415:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001941b:	eb 0a                	jmp    c0019427 <IDE::open(int, int, void*)+0x147>
c001941d:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0019427:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001942e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0019435:	c1 e1 10             	shl    ecx,0x10
c0019438:	c1 e0 08             	shl    eax,0x8
c001943b:	bf f8 0c 00 00       	mov    edi,0xcf8
c0019440:	09 c1                	or     ecx,eax
c0019442:	89 fa                	mov    edx,edi
c0019444:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001944b:	c1 e0 0b             	shl    eax,0xb
c001944e:	09 c1                	or     ecx,eax
c0019450:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0019456:	89 c8                	mov    eax,ecx
c0019458:	ef                   	out    dx,eax
c0019459:	be fc 0c 00 00       	mov    esi,0xcfc
c001945e:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0019464:	89 f2                	mov    edx,esi
c0019466:	ee                   	out    dx,al
c0019467:	89 c8                	mov    eax,ecx
c0019469:	89 fa                	mov    edx,edi
c001946b:	ef                   	out    dx,eax
c001946c:	89 f2                	mov    edx,esi
c001946e:	ed                   	in     eax,dx
c001946f:	0f b6 c0             	movzx  eax,al
c0019472:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0019478:	74 46                	je     c00194c0 <IDE::open(int, int, void*)+0x1e0>
c001947a:	83 ec 0c             	sub    esp,0xc
c001947d:	68 d0 f1 01 c0       	push   0xc001f1d0
c0019482:	eb 34                	jmp    c00194b8 <IDE::open(int, int, void*)+0x1d8>
c0019484:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001948d:	75 17                	jne    c00194a6 <IDE::open(int, int, void*)+0x1c6>
c001948f:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0019494:	74 07                	je     c001949d <IDE::open(int, int, void*)+0x1bd>
c0019496:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001949b:	75 09                	jne    c00194a6 <IDE::open(int, int, void*)+0x1c6>
c001949d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00194a4:	eb 1a                	jmp    c00194c0 <IDE::open(int, int, void*)+0x1e0>
c00194a6:	83 ec 0c             	sub    esp,0xc
c00194a9:	68 d8 f1 01 c0       	push   0xc001f1d8
c00194ae:	eb 08                	jmp    c00194b8 <IDE::open(int, int, void*)+0x1d8>
c00194b0:	83 ec 0c             	sub    esp,0xc
c00194b3:	68 09 f2 01 c0       	push   0xc001f209
c00194b8:	e8 3a 72 ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c00194bd:	83 c4 10             	add    esp,0x10
c00194c0:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00194c7:	79 1a                	jns    c00194e3 <IDE::open(int, int, void*)+0x203>
c00194c9:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00194cf:	83 e0 fc             	and    eax,0xfffffffc
c00194d2:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00194d9:	83 c0 08             	add    eax,0x8
c00194dc:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00194e3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00194e9:	89 c2                	mov    edx,eax
c00194eb:	83 e2 0f             	and    edx,0xf
c00194ee:	66 83 fa 08          	cmp    dx,0x8
c00194f2:	75 0a                	jne    c00194fe <IDE::open(int, int, void*)+0x21e>
c00194f4:	83 e8 02             	sub    eax,0x2
c00194f7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00194fe:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0019504:	89 c2                	mov    edx,eax
c0019506:	83 e2 0f             	and    edx,0xf
c0019509:	66 83 fa 08          	cmp    dx,0x8
c001950d:	75 0a                	jne    c0019519 <IDE::open(int, int, void*)+0x239>
c001950f:	83 e8 02             	sub    eax,0x2
c0019512:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019519:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019520:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0019527:	89 d0                	mov    eax,edx
c0019529:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001952c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019530:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0019534:	8d 4a 01             	lea    ecx,[edx+0x1]
c0019537:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001953c:	0f b6 c9             	movzx  ecx,cl
c001953f:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0019546:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019549:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001954d:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0019551:	8d 50 02             	lea    edx,[eax+0x2]
c0019554:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0019559:	0f b6 d2             	movzx  edx,dl
c001955c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0019562:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019565:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019569:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001956d:	8d 48 03             	lea    ecx,[eax+0x3]
c0019570:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019575:	0f b6 c9             	movzx  ecx,cl
c0019578:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001957e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019581:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019585:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0019589:	8d 50 04             	lea    edx,[eax+0x4]
c001958c:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0019592:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0019597:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001959e:	66 85 f6             	test   si,si
c00195a1:	74 5b                	je     c00195fe <IDE::open(int, int, void*)+0x31e>
c00195a3:	0f b6 d2             	movzx  edx,dl
c00195a6:	83 c0 05             	add    eax,0x5
c00195a9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00195ac:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00195b0:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00195b4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00195ba:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00195bf:	eb 3d                	jmp    c00195fe <IDE::open(int, int, void*)+0x31e>
c00195c1:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c00195c7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00195ce:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00195d5:	66 05 06 02          	add    ax,0x206
c00195d9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00195e0:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c00195e7:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00195ee:	66 05 06 02          	add    ax,0x206
c00195f2:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00195f9:	e9 e5 fe ff ff       	jmp    c00194e3 <IDE::open(int, int, void*)+0x203>
c00195fe:	50                   	push   eax
c00195ff:	50                   	push   eax
c0019600:	6a 00                	push   0x0
c0019602:	53                   	push   ebx
c0019603:	e8 5e fa ff ff       	call   c0019066 <IDE::prepareInterrupt(unsigned char)>
c0019608:	5a                   	pop    edx
c0019609:	59                   	pop    ecx
c001960a:	6a 01                	push   0x1
c001960c:	53                   	push   ebx
c001960d:	e8 54 fa ff ff       	call   c0019066 <IDE::prepareInterrupt(unsigned char)>
c0019612:	83 c4 0c             	add    esp,0xc
c0019615:	6a 00                	push   0x0
c0019617:	6a 00                	push   0x0
c0019619:	53                   	push   ebx
c001961a:	e8 7b fc ff ff       	call   c001929a <IDE::enableIRQs(unsigned char, bool)>
c001961f:	83 c4 0c             	add    esp,0xc
c0019622:	6a 00                	push   0x0
c0019624:	6a 01                	push   0x1
c0019626:	53                   	push   ebx
c0019627:	e8 6e fc ff ff       	call   c001929a <IDE::enableIRQs(unsigned char, bool)>
c001962c:	83 c4 10             	add    esp,0x10
c001962f:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0019636:	74 34                	je     c001966c <IDE::open(int, int, void*)+0x38c>
c0019638:	83 ec 0c             	sub    esp,0xc
c001963b:	53                   	push   ebx
c001963c:	6a 01                	push   0x1
c001963e:	68 62 92 01 c0       	push   0xc0019262
c0019643:	6a 0e                	push   0xe
c0019645:	53                   	push   ebx
c0019646:	e8 49 29 ff ff       	call   c000bf94 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001964b:	83 c4 14             	add    esp,0x14
c001964e:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0019654:	53                   	push   ebx
c0019655:	6a 01                	push   0x1
c0019657:	68 7e 92 01 c0       	push   0xc001927e
c001965c:	6a 0f                	push   0xf
c001965e:	53                   	push   ebx
c001965f:	e8 30 29 ff ff       	call   c000bf94 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019664:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001966a:	eb 38                	jmp    c00196a4 <IDE::open(int, int, void*)+0x3c4>
c001966c:	83 ec 0c             	sub    esp,0xc
c001966f:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0019679:	53                   	push   ebx
c001967a:	6a 00                	push   0x0
c001967c:	68 62 92 01 c0       	push   0xc0019262
c0019681:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0019687:	53                   	push   ebx
c0019688:	e8 07 29 ff ff       	call   c000bf94 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001968d:	83 c4 14             	add    esp,0x14
c0019690:	53                   	push   ebx
c0019691:	6a 00                	push   0x0
c0019693:	68 7e 92 01 c0       	push   0xc001927e
c0019698:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001969e:	53                   	push   ebx
c001969f:	e8 f0 28 ff ff       	call   c000bf94 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00196a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00196a6:	83 c4 20             	add    esp,0x20
c00196a9:	83 ec 0c             	sub    esp,0xc
c00196ac:	53                   	push   ebx
c00196ad:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00196b0:	83 c4 0c             	add    esp,0xc
c00196b3:	6a 07                	push   0x7
c00196b5:	6a 00                	push   0x0
c00196b7:	53                   	push   ebx
c00196b8:	e8 8f fa ff ff       	call   c001914c <IDE::read(unsigned char, unsigned char)>
c00196bd:	83 c4 0c             	add    esp,0xc
c00196c0:	6a 07                	push   0x7
c00196c2:	6a 01                	push   0x1
c00196c4:	53                   	push   ebx
c00196c5:	e8 82 fa ff ff       	call   c001914c <IDE::read(unsigned char, unsigned char)>
c00196ca:	83 c4 0c             	add    esp,0xc
c00196cd:	6a 01                	push   0x1
c00196cf:	6a 00                	push   0x0
c00196d1:	53                   	push   ebx
c00196d2:	e8 c3 fb ff ff       	call   c001929a <IDE::enableIRQs(unsigned char, bool)>
c00196d7:	83 c4 0c             	add    esp,0xc
c00196da:	6a 01                	push   0x1
c00196dc:	6a 01                	push   0x1
c00196de:	53                   	push   ebx
c00196df:	e8 b6 fb ff ff       	call   c001929a <IDE::enableIRQs(unsigned char, bool)>
c00196e4:	83 c4 2c             	add    esp,0x2c
c00196e7:	31 c0                	xor    eax,eax
c00196e9:	5b                   	pop    ebx
c00196ea:	5e                   	pop    esi
c00196eb:	5f                   	pop    edi
c00196ec:	5d                   	pop    ebp
c00196ed:	c3                   	ret    

c00196ee <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00196ee:	55                   	push   ebp
c00196ef:	57                   	push   edi
c00196f0:	56                   	push   esi
c00196f1:	53                   	push   ebx
c00196f2:	83 ec 1c             	sub    esp,0x1c
c00196f5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00196f9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00196fd:	8d 50 f8             	lea    edx,[eax-0x8]
c0019700:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019704:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0019708:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001970c:	80 fa 03             	cmp    dl,0x3
c001970f:	77 5d                	ja     c001976e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0019711:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019715:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019719:	0f b6 db             	movzx  ebx,bl
c001971c:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001971f:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0019723:	83 ca 80             	or     edx,0xffffff80
c0019726:	0f b6 d2             	movzx  edx,dl
c0019729:	52                   	push   edx
c001972a:	6a 0c                	push   0xc
c001972c:	53                   	push   ebx
c001972d:	56                   	push   esi
c001972e:	e8 59 f9 ff ff       	call   c001908c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019733:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0019738:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001973c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019740:	0f b6 c0             	movzx  eax,al
c0019743:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0019747:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019749:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001974e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0019752:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0019756:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001975a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0019762:	83 c4 2c             	add    esp,0x2c
c0019765:	5b                   	pop    ebx
c0019766:	5e                   	pop    esi
c0019767:	5f                   	pop    edi
c0019768:	5d                   	pop    ebp
c0019769:	e9 1e f9 ff ff       	jmp    c001908c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001976e:	3c 07                	cmp    al,0x7
c0019770:	77 10                	ja     c0019782 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0019772:	0f b6 db             	movzx  ebx,bl
c0019775:	0f b6 d0             	movzx  edx,al
c0019778:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0019780:	eb 2d                	jmp    c00197af <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0019782:	3c 0d                	cmp    al,0xd
c0019784:	77 13                	ja     c0019799 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0019786:	0f b6 db             	movzx  ebx,bl
c0019789:	0f b6 c0             	movzx  eax,al
c001978c:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0019793:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0019797:	eb 16                	jmp    c00197af <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0019799:	3c 15                	cmp    al,0x15
c001979b:	77 14                	ja     c00197b1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001979d:	0f b6 db             	movzx  ebx,bl
c00197a0:	0f b6 c0             	movzx  eax,al
c00197a3:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00197ab:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00197af:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00197b1:	83 c4 1c             	add    esp,0x1c
c00197b4:	5b                   	pop    ebx
c00197b5:	5e                   	pop    esi
c00197b6:	5f                   	pop    edi
c00197b7:	5d                   	pop    ebp
c00197b8:	c3                   	ret    
c00197b9:	90                   	nop

c00197ba <IDE::detect()>:
c00197ba:	55                   	push   ebp
c00197bb:	57                   	push   edi
c00197bc:	56                   	push   esi
c00197bd:	53                   	push   ebx
c00197be:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00197c4:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00197cb:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00197d2:	0f 85 97 02 00 00    	jne    c0019a6f <IDE::detect()+0x2b5>
c00197d8:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00197df:	31 f6                	xor    esi,esi
c00197e1:	31 ed                	xor    ebp,ebp
c00197e3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00197eb:	89 e8                	mov    eax,ebp
c00197ed:	c1 e0 06             	shl    eax,0x6
c00197f0:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00197f8:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00197fc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019800:	c1 e0 04             	shl    eax,0x4
c0019803:	83 c8 a0             	or     eax,0xffffffa0
c0019806:	0f b6 c0             	movzx  eax,al
c0019809:	50                   	push   eax
c001980a:	6a 06                	push   0x6
c001980c:	56                   	push   esi
c001980d:	53                   	push   ebx
c001980e:	e8 79 f8 ff ff       	call   c001908c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019813:	83 c4 0c             	add    esp,0xc
c0019816:	6a 0c                	push   0xc
c0019818:	56                   	push   esi
c0019819:	53                   	push   ebx
c001981a:	e8 2d f9 ff ff       	call   c001914c <IDE::read(unsigned char, unsigned char)>
c001981f:	83 c4 0c             	add    esp,0xc
c0019822:	6a 0c                	push   0xc
c0019824:	56                   	push   esi
c0019825:	53                   	push   ebx
c0019826:	e8 21 f9 ff ff       	call   c001914c <IDE::read(unsigned char, unsigned char)>
c001982b:	83 c4 0c             	add    esp,0xc
c001982e:	6a 0c                	push   0xc
c0019830:	56                   	push   esi
c0019831:	53                   	push   ebx
c0019832:	e8 15 f9 ff ff       	call   c001914c <IDE::read(unsigned char, unsigned char)>
c0019837:	83 c4 0c             	add    esp,0xc
c001983a:	6a 0c                	push   0xc
c001983c:	56                   	push   esi
c001983d:	53                   	push   ebx
c001983e:	e8 09 f9 ff ff       	call   c001914c <IDE::read(unsigned char, unsigned char)>
c0019843:	68 ec 00 00 00       	push   0xec
c0019848:	6a 07                	push   0x7
c001984a:	56                   	push   esi
c001984b:	53                   	push   ebx
c001984c:	e8 3b f8 ff ff       	call   c001908c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019851:	83 c4 1c             	add    esp,0x1c
c0019854:	6a 0c                	push   0xc
c0019856:	56                   	push   esi
c0019857:	53                   	push   ebx
c0019858:	e8 ef f8 ff ff       	call   c001914c <IDE::read(unsigned char, unsigned char)>
c001985d:	83 c4 0c             	add    esp,0xc
c0019860:	6a 0c                	push   0xc
c0019862:	56                   	push   esi
c0019863:	53                   	push   ebx
c0019864:	e8 e3 f8 ff ff       	call   c001914c <IDE::read(unsigned char, unsigned char)>
c0019869:	83 c4 0c             	add    esp,0xc
c001986c:	6a 0c                	push   0xc
c001986e:	56                   	push   esi
c001986f:	53                   	push   ebx
c0019870:	e8 d7 f8 ff ff       	call   c001914c <IDE::read(unsigned char, unsigned char)>
c0019875:	83 c4 0c             	add    esp,0xc
c0019878:	6a 0c                	push   0xc
c001987a:	56                   	push   esi
c001987b:	53                   	push   ebx
c001987c:	e8 cb f8 ff ff       	call   c001914c <IDE::read(unsigned char, unsigned char)>
c0019881:	83 c4 0c             	add    esp,0xc
c0019884:	6a 0c                	push   0xc
c0019886:	56                   	push   esi
c0019887:	53                   	push   ebx
c0019888:	e8 bf f8 ff ff       	call   c001914c <IDE::read(unsigned char, unsigned char)>
c001988d:	83 c4 10             	add    esp,0x10
c0019890:	84 c0                	test   al,al
c0019892:	0f 84 5f 01 00 00    	je     c00199f7 <IDE::detect()+0x23d>
c0019898:	31 ff                	xor    edi,edi
c001989a:	50                   	push   eax
c001989b:	6a 0c                	push   0xc
c001989d:	56                   	push   esi
c001989e:	53                   	push   ebx
c001989f:	e8 a8 f8 ff ff       	call   c001914c <IDE::read(unsigned char, unsigned char)>
c00198a4:	83 c4 10             	add    esp,0x10
c00198a7:	a8 01                	test   al,0x1
c00198a9:	0f 85 69 01 00 00    	jne    c0019a18 <IDE::detect()+0x25e>
c00198af:	84 c0                	test   al,al
c00198b1:	78 04                	js     c00198b7 <IDE::detect()+0xfd>
c00198b3:	a8 08                	test   al,0x8
c00198b5:	75 23                	jne    c00198da <IDE::detect()+0x120>
c00198b7:	47                   	inc    edi
c00198b8:	81 ff 17 01 00 00    	cmp    edi,0x117
c00198be:	7e da                	jle    c001989a <IDE::detect()+0xe0>
c00198c0:	83 ec 0c             	sub    esp,0xc
c00198c3:	6a 32                	push   0x32
c00198c5:	e8 82 a4 ff ff       	call   c0013d4c <milliTenthSleep(unsigned int)>
c00198ca:	83 c4 10             	add    esp,0x10
c00198cd:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00198d3:	75 c5                	jne    c001989a <IDE::detect()+0xe0>
c00198d5:	e9 3e 01 00 00       	jmp    c0019a18 <IDE::detect()+0x25e>
c00198da:	31 c9                	xor    ecx,ecx
c00198dc:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00198e0:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00198e4:	83 ec 0c             	sub    esp,0xc
c00198e7:	68 80 00 00 00       	push   0x80
c00198ec:	57                   	push   edi
c00198ed:	6a 00                	push   0x0
c00198ef:	56                   	push   esi
c00198f0:	53                   	push   ebx
c00198f1:	e8 f8 fd ff ff       	call   c00196ee <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00198f6:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00198fb:	89 e8                	mov    eax,ebp
c00198fd:	89 d1                	mov    ecx,edx
c00198ff:	c1 e0 06             	shl    eax,0x6
c0019902:	01 d8                	add    eax,ebx
c0019904:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001990b:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0019912:	89 f2                	mov    edx,esi
c0019914:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001991a:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001991e:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0019924:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019928:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001992f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0019937:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001993e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0019946:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001994c:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0019953:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0019959:	8d 54 24 58          	lea    edx,[esp+0x58]
c001995d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0019961:	83 c4 20             	add    esp,0x20
c0019964:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0019967:	83 c0 02             	add    eax,0x2
c001996a:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0019970:	83 c7 02             	add    edi,0x2
c0019973:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0019976:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001997c:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0019980:	75 e2                	jne    c0019964 <IDE::detect()+0x1aa>
c0019982:	89 e8                	mov    eax,ebp
c0019984:	c1 e0 06             	shl    eax,0x6
c0019987:	01 d8                	add    eax,ebx
c0019989:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001998f:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0019996:	66 c1 ea 09          	shr    dx,0x9
c001999a:	83 e2 01             	and    edx,0x1
c001999d:	84 c9                	test   cl,cl
c001999f:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00199a5:	75 22                	jne    c00199c9 <IDE::detect()+0x20f>
c00199a7:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c00199ae:	74 46                	je     c00199f6 <IDE::detect()+0x23c>
c00199b0:	83 ec 0c             	sub    esp,0xc
c00199b3:	68 7c 01 00 00       	push   0x17c
c00199b8:	e8 5c e4 fe ff       	call   c0007e19 <malloc>
c00199bd:	89 c7                	mov    edi,eax
c00199bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00199c2:	e8 11 05 00 00       	call   c0019ed8 <ATA::ATA()>
c00199c7:	eb 17                	jmp    c00199e0 <IDE::detect()+0x226>
c00199c9:	83 ec 0c             	sub    esp,0xc
c00199cc:	68 84 01 00 00       	push   0x184
c00199d1:	e8 43 e4 fe ff       	call   c0007e19 <malloc>
c00199d6:	89 c7                	mov    edi,eax
c00199d8:	89 04 24             	mov    DWORD PTR [esp],eax
c00199db:	e8 f0 0a 00 00       	call   c001a4d0 <ATAPI::ATAPI()>
c00199e0:	5a                   	pop    edx
c00199e1:	59                   	pop    ecx
c00199e2:	57                   	push   edi
c00199e3:	53                   	push   ebx
c00199e4:	e8 ff 25 ff ff       	call   c000bfe8 <Device::addChild(Device*)>
c00199e9:	8b 07                	mov    eax,DWORD PTR [edi]
c00199eb:	53                   	push   ebx
c00199ec:	55                   	push   ebp
c00199ed:	6a 00                	push   0x0
c00199ef:	57                   	push   edi
c00199f0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00199f3:	83 c4 20             	add    esp,0x20
c00199f6:	45                   	inc    ebp
c00199f7:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00199fc:	74 0d                	je     c0019a0b <IDE::detect()+0x251>
c00199fe:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0019a06:	e9 e0 fd ff ff       	jmp    c00197eb <IDE::detect()+0x31>
c0019a0b:	4e                   	dec    esi
c0019a0c:	74 61                	je     c0019a6f <IDE::detect()+0x2b5>
c0019a0e:	be 01 00 00 00       	mov    esi,0x1
c0019a13:	e9 cb fd ff ff       	jmp    c00197e3 <IDE::detect()+0x29>
c0019a18:	50                   	push   eax
c0019a19:	6a 04                	push   0x4
c0019a1b:	56                   	push   esi
c0019a1c:	53                   	push   ebx
c0019a1d:	e8 2a f7 ff ff       	call   c001914c <IDE::read(unsigned char, unsigned char)>
c0019a22:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019a26:	83 c4 0c             	add    esp,0xc
c0019a29:	6a 05                	push   0x5
c0019a2b:	56                   	push   esi
c0019a2c:	53                   	push   ebx
c0019a2d:	e8 1a f7 ff ff       	call   c001914c <IDE::read(unsigned char, unsigned char)>
c0019a32:	83 c4 10             	add    esp,0x10
c0019a35:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019a39:	80 fa 14             	cmp    dl,0x14
c0019a3c:	75 04                	jne    c0019a42 <IDE::detect()+0x288>
c0019a3e:	3c eb                	cmp    al,0xeb
c0019a40:	eb 07                	jmp    c0019a49 <IDE::detect()+0x28f>
c0019a42:	3c 96                	cmp    al,0x96
c0019a44:	75 b1                	jne    c00199f7 <IDE::detect()+0x23d>
c0019a46:	80 fa 69             	cmp    dl,0x69
c0019a49:	75 ac                	jne    c00199f7 <IDE::detect()+0x23d>
c0019a4b:	68 a1 00 00 00       	push   0xa1
c0019a50:	6a 07                	push   0x7
c0019a52:	56                   	push   esi
c0019a53:	53                   	push   ebx
c0019a54:	e8 33 f6 ff ff       	call   c001908c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019a59:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0019a60:	e8 e7 a2 ff ff       	call   c0013d4c <milliTenthSleep(unsigned int)>
c0019a65:	83 c4 10             	add    esp,0x10
c0019a68:	b1 01                	mov    cl,0x1
c0019a6a:	e9 6d fe ff ff       	jmp    c00198dc <IDE::detect()+0x122>
c0019a6f:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019a75:	5b                   	pop    ebx
c0019a76:	5e                   	pop    esi
c0019a77:	5f                   	pop    edi
c0019a78:	5d                   	pop    ebp
c0019a79:	c3                   	ret    

c0019a7a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0019a7a:	55                   	push   ebp
c0019a7b:	57                   	push   edi
c0019a7c:	56                   	push   esi
c0019a7d:	53                   	push   ebx
c0019a7e:	83 ec 1c             	sub    esp,0x1c
c0019a81:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019a85:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019a89:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019a8d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0019a91:	88 c3                	mov    bl,al
c0019a93:	84 c0                	test   al,al
c0019a95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a99:	0f 84 81 00 00 00    	je     c0019b20 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a9f:	83 ec 0c             	sub    esp,0xc
c0019aa2:	68 33 f2 01 c0       	push   0xc001f233
c0019aa7:	e8 fc 10 ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c0019aac:	83 c4 10             	add    esp,0x10
c0019aaf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ab3:	3c 01                	cmp    al,0x1
c0019ab5:	74 63                	je     c0019b1a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0019ab7:	3c 02                	cmp    al,0x2
c0019ab9:	75 53                	jne    c0019b0e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0019abb:	01 f6                	add    esi,esi
c0019abd:	09 ee                	or     esi,ebp
c0019abf:	50                   	push   eax
c0019ac0:	89 f0                	mov    eax,esi
c0019ac2:	6a 01                	push   0x1
c0019ac4:	0f b6 f0             	movzx  esi,al
c0019ac7:	c1 e6 06             	shl    esi,0x6
c0019aca:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0019ad2:	50                   	push   eax
c0019ad3:	57                   	push   edi
c0019ad4:	e8 73 f6 ff ff       	call   c001914c <IDE::read(unsigned char, unsigned char)>
c0019ad9:	83 c4 10             	add    esp,0x10
c0019adc:	a8 01                	test   al,0x1
c0019ade:	74 02                	je     c0019ae2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019ae0:	b3 07                	mov    bl,0x7
c0019ae2:	a8 02                	test   al,0x2
c0019ae4:	74 02                	je     c0019ae8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0019ae6:	b3 03                	mov    bl,0x3
c0019ae8:	a8 04                	test   al,0x4
c0019aea:	74 02                	je     c0019aee <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019aec:	b3 14                	mov    bl,0x14
c0019aee:	a8 08                	test   al,0x8
c0019af0:	74 02                	je     c0019af4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0019af2:	b3 03                	mov    bl,0x3
c0019af4:	a8 10                	test   al,0x10
c0019af6:	74 02                	je     c0019afa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019af8:	b3 15                	mov    bl,0x15
c0019afa:	a8 20                	test   al,0x20
c0019afc:	74 02                	je     c0019b00 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0019afe:	b3 03                	mov    bl,0x3
c0019b00:	a8 40                	test   al,0x40
c0019b02:	74 02                	je     c0019b06 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019b04:	b3 16                	mov    bl,0x16
c0019b06:	84 c0                	test   al,al
c0019b08:	79 16                	jns    c0019b20 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b0a:	b3 0d                	mov    bl,0xd
c0019b0c:	eb 12                	jmp    c0019b20 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b0e:	3c 03                	cmp    al,0x3
c0019b10:	74 0c                	je     c0019b1e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0019b12:	3c 04                	cmp    al,0x4
c0019b14:	75 0a                	jne    c0019b20 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b16:	b3 08                	mov    bl,0x8
c0019b18:	eb 06                	jmp    c0019b20 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b1a:	b3 13                	mov    bl,0x13
c0019b1c:	eb 02                	jmp    c0019b20 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b1e:	b3 17                	mov    bl,0x17
c0019b20:	83 c4 1c             	add    esp,0x1c
c0019b23:	88 d8                	mov    al,bl
c0019b25:	5b                   	pop    ebx
c0019b26:	5e                   	pop    esi
c0019b27:	5f                   	pop    edi
c0019b28:	5d                   	pop    ebp
c0019b29:	c3                   	ret    

c0019b2a <IDE::polling(unsigned char, unsigned int)>:
c0019b2a:	55                   	push   ebp
c0019b2b:	bd 04 00 00 00       	mov    ebp,0x4
c0019b30:	57                   	push   edi
c0019b31:	56                   	push   esi
c0019b32:	53                   	push   ebx
c0019b33:	83 ec 0c             	sub    esp,0xc
c0019b36:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019b3a:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0019b3e:	0f b6 f3             	movzx  esi,bl
c0019b41:	52                   	push   edx
c0019b42:	6a 0c                	push   0xc
c0019b44:	56                   	push   esi
c0019b45:	57                   	push   edi
c0019b46:	e8 01 f6 ff ff       	call   c001914c <IDE::read(unsigned char, unsigned char)>
c0019b4b:	83 c4 10             	add    esp,0x10
c0019b4e:	4d                   	dec    ebp
c0019b4f:	75 ed                	jne    c0019b3e <IDE::polling(unsigned char, unsigned int)+0x14>
c0019b51:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019b56:	50                   	push   eax
c0019b57:	6a 0c                	push   0xc
c0019b59:	56                   	push   esi
c0019b5a:	57                   	push   edi
c0019b5b:	e8 ec f5 ff ff       	call   c001914c <IDE::read(unsigned char, unsigned char)>
c0019b60:	83 c4 10             	add    esp,0x10
c0019b63:	a8 01                	test   al,0x1
c0019b65:	75 17                	jne    c0019b7e <IDE::polling(unsigned char, unsigned int)+0x54>
c0019b67:	a8 20                	test   al,0x20
c0019b69:	75 0f                	jne    c0019b7a <IDE::polling(unsigned char, unsigned int)+0x50>
c0019b6b:	4b                   	dec    ebx
c0019b6c:	74 10                	je     c0019b7e <IDE::polling(unsigned char, unsigned int)+0x54>
c0019b6e:	84 c0                	test   al,al
c0019b70:	78 e4                	js     c0019b56 <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019b72:	a8 08                	test   al,0x8
c0019b74:	74 e0                	je     c0019b56 <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019b76:	31 c0                	xor    eax,eax
c0019b78:	eb 06                	jmp    c0019b80 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019b7a:	b0 01                	mov    al,0x1
c0019b7c:	eb 02                	jmp    c0019b80 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019b7e:	b0 02                	mov    al,0x2
c0019b80:	83 c4 0c             	add    esp,0xc
c0019b83:	5b                   	pop    ebx
c0019b84:	5e                   	pop    esi
c0019b85:	5f                   	pop    edi
c0019b86:	5d                   	pop    ebp
c0019b87:	c3                   	ret    

c0019b88 <SATABus::close(int, int, void*)>:
c0019b88:	31 c0                	xor    eax,eax
c0019b8a:	c3                   	ret    
c0019b8b:	90                   	nop

c0019b8c <SATABus::detect()>:
c0019b8c:	c3                   	ret    
c0019b8d:	90                   	nop

c0019b8e <SATABus::SATABus()>:
c0019b8e:	83 ec 0c             	sub    esp,0xc
c0019b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b95:	83 ec 08             	sub    esp,0x8
c0019b98:	68 6c f2 01 c0       	push   0xc001f26c
c0019b9d:	50                   	push   eax
c0019b9e:	e8 89 27 ff ff       	call   c000c32c <HardDiskController::HardDiskController(char const*)>
c0019ba3:	83 c4 10             	add    esp,0x10
c0019ba6:	ba 98 f2 01 c0       	mov    edx,0xc001f298
c0019bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019baf:	89 10                	mov    DWORD PTR [eax],edx
c0019bb1:	83 ec 0c             	sub    esp,0xc
c0019bb4:	6a 50                	push   0x50
c0019bb6:	e8 e9 e6 fe ff       	call   c00082a4 <Phys::allocateContiguousPages(int)>
c0019bbb:	83 c4 10             	add    esp,0x10
c0019bbe:	89 c2                	mov    edx,eax
c0019bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bc4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019bca:	83 ec 0c             	sub    esp,0xc
c0019bcd:	6a 50                	push   0x50
c0019bcf:	e8 81 fd fe ff       	call   c0009955 <Virt::allocateKernelVirtualPages(int)>
c0019bd4:	83 c4 10             	add    esp,0x10
c0019bd7:	89 c2                	mov    edx,eax
c0019bd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bdd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019be3:	a1 f0 09 02 c0       	mov    eax,ds:0xc00209f0
c0019be8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019bec:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0019bf2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019bf6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019bfc:	83 ec 0c             	sub    esp,0xc
c0019bff:	6a 03                	push   0x3
c0019c01:	6a 50                	push   0x50
c0019c03:	51                   	push   ecx
c0019c04:	52                   	push   edx
c0019c05:	50                   	push   eax
c0019c06:	e8 d9 06 ff ff       	call   c000a2e4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019c0b:	83 c4 20             	add    esp,0x20
c0019c0e:	90                   	nop
c0019c0f:	83 c4 0c             	add    esp,0xc
c0019c12:	c3                   	ret    
c0019c13:	90                   	nop

c0019c14 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019c14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c18:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019c1b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019c1e:	09 c2                	or     edx,eax
c0019c20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c24:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019c2a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019c2c:	31 c0                	xor    eax,eax
c0019c2e:	c1 e9 08             	shr    ecx,0x8
c0019c31:	83 e1 0f             	and    ecx,0xf
c0019c34:	39 c8                	cmp    eax,ecx
c0019c36:	74 0a                	je     c0019c42 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019c38:	f6 c2 01             	test   dl,0x1
c0019c3b:	74 08                	je     c0019c45 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019c3d:	d1 ea                	shr    edx,1
c0019c3f:	40                   	inc    eax
c0019c40:	eb f2                	jmp    c0019c34 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0019c42:	83 c8 ff             	or     eax,0xffffffff
c0019c45:	c3                   	ret    

c0019c46 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019c46:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019c4a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019c4d:	89 c2                	mov    edx,eax
c0019c4f:	c1 ea 08             	shr    edx,0x8
c0019c52:	83 e2 0f             	and    edx,0xf
c0019c55:	fe ca                	dec    dl
c0019c57:	75 31                	jne    c0019c8a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019c59:	83 e0 0f             	and    eax,0xf
c0019c5c:	3c 03                	cmp    al,0x3
c0019c5e:	75 2a                	jne    c0019c8a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019c60:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019c63:	b8 02 00 00 00       	mov    eax,0x2
c0019c68:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019c6e:	74 1c                	je     c0019c8c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019c70:	b8 04 00 00 00       	mov    eax,0x4
c0019c75:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019c7b:	74 0f                	je     c0019c8c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019c7d:	31 c0                	xor    eax,eax
c0019c7f:	83 fa 03             	cmp    edx,0x3
c0019c82:	0f 94 c0             	sete   al
c0019c85:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019c89:	c3                   	ret    
c0019c8a:	31 c0                	xor    eax,eax
c0019c8c:	c3                   	ret    
c0019c8d:	90                   	nop

c0019c8e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019c8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c92:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c95:	0f ba e2 0f          	bt     edx,0xf
c0019c99:	72 f7                	jb     c0019c92 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019c9b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c9e:	83 ca 10             	or     edx,0x10
c0019ca1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019ca4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019ca7:	83 ca 01             	or     edx,0x1
c0019caa:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019cad:	c3                   	ret    

c0019cae <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019cae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cb2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cb5:	83 e2 fe             	and    edx,0xfffffffe
c0019cb8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019cbb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cbe:	83 e2 ef             	and    edx,0xffffffef
c0019cc1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019cc4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cc7:	0f ba e2 0e          	bt     edx,0xe
c0019ccb:	72 f7                	jb     c0019cc4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019ccd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cd0:	0f ba e2 0f          	bt     edx,0xf
c0019cd4:	72 ee                	jb     c0019cc4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019cd6:	c3                   	ret    
c0019cd7:	90                   	nop

c0019cd8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019cd8:	55                   	push   ebp
c0019cd9:	57                   	push   edi
c0019cda:	56                   	push   esi
c0019cdb:	53                   	push   ebx
c0019cdc:	83 ec 1c             	sub    esp,0x1c
c0019cdf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019ce3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019ce7:	53                   	push   ebx
c0019ce8:	56                   	push   esi
c0019ce9:	e8 c0 ff ff ff       	call   c0019cae <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019cee:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019cf2:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019cf8:	83 ec 0c             	sub    esp,0xc
c0019cfb:	c1 e5 0a             	shl    ebp,0xa
c0019cfe:	01 e8                	add    eax,ebp
c0019d00:	89 03                	mov    DWORD PTR [ebx],eax
c0019d02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d04:	68 00 04 00 00       	push   0x400
c0019d09:	6a 00                	push   0x0
c0019d0b:	50                   	push   eax
c0019d0c:	e8 df 67 fe ff       	call   c00004f0 <memset>
c0019d11:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019d17:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019d1b:	01 e8                	add    eax,ebp
c0019d1d:	83 c4 1c             	add    esp,0x1c
c0019d20:	89 03                	mov    DWORD PTR [ebx],eax
c0019d22:	c1 e2 08             	shl    edx,0x8
c0019d25:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019d2c:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0019d32:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019d38:	01 f8                	add    eax,edi
c0019d3a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019d3d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019d40:	68 00 01 00 00       	push   0x100
c0019d45:	6a 00                	push   0x0
c0019d47:	50                   	push   eax
c0019d48:	e8 a3 67 fe ff       	call   c00004f0 <memset>
c0019d4d:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0019d53:	01 fa                	add    edx,edi
c0019d55:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019d59:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019d5c:	c1 e7 0d             	shl    edi,0xd
c0019d5f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0019d66:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019d6c:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019d72:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019d76:	31 ff                	xor    edi,edi
c0019d78:	83 c4 10             	add    esp,0x10
c0019d7b:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0019d81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d85:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019d8b:	83 c5 20             	add    ebp,0x20
c0019d8e:	01 f8                	add    eax,edi
c0019d90:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019d93:	52                   	push   edx
c0019d94:	68 00 01 00 00       	push   0x100
c0019d99:	6a 00                	push   0x0
c0019d9b:	50                   	push   eax
c0019d9c:	e8 4f 67 fe ff       	call   c00004f0 <memset>
c0019da1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019da5:	83 c4 10             	add    esp,0x10
c0019da8:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019dae:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0019db5:	01 f8                	add    eax,edi
c0019db7:	81 c7 00 01 00 00    	add    edi,0x100
c0019dbd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019dc0:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019dc6:	75 b3                	jne    c0019d7b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019dc8:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019dcf:	50                   	push   eax
c0019dd0:	50                   	push   eax
c0019dd1:	53                   	push   ebx
c0019dd2:	56                   	push   esi
c0019dd3:	e8 b6 fe ff ff       	call   c0019c8e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019dd8:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019ddf:	83 c4 2c             	add    esp,0x2c
c0019de2:	5b                   	pop    ebx
c0019de3:	5e                   	pop    esi
c0019de4:	5f                   	pop    edi
c0019de5:	5d                   	pop    ebp
c0019de6:	c3                   	ret    
c0019de7:	90                   	nop

c0019de8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019de8:	55                   	push   ebp
c0019de9:	57                   	push   edi
c0019dea:	56                   	push   esi
c0019deb:	53                   	push   ebx
c0019dec:	31 db                	xor    ebx,ebx
c0019dee:	83 ec 0c             	sub    esp,0xc
c0019df1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019df5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019df9:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019dfc:	f7 c7 01 00 00 00    	test   edi,0x1
c0019e02:	74 7a                	je     c0019e7e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019e04:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019e08:	89 d8                	mov    eax,ebx
c0019e0a:	c1 e0 07             	shl    eax,0x7
c0019e0d:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019e14:	55                   	push   ebp
c0019e15:	56                   	push   esi
c0019e16:	e8 2b fe ff ff       	call   c0019c46 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019e1b:	5a                   	pop    edx
c0019e1c:	83 f8 01             	cmp    eax,0x1
c0019e1f:	59                   	pop    ecx
c0019e20:	75 21                	jne    c0019e43 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019e22:	50                   	push   eax
c0019e23:	53                   	push   ebx
c0019e24:	55                   	push   ebp
c0019e25:	56                   	push   esi
c0019e26:	e8 ad fe ff ff       	call   c0019cd8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019e2b:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019e32:	e8 e2 df fe ff       	call   c0007e19 <malloc>
c0019e37:	89 c5                	mov    ebp,eax
c0019e39:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e3c:	e8 43 0d 00 00       	call   c001ab84 <SATA::SATA()>
c0019e41:	eb 24                	jmp    c0019e67 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019e43:	83 f8 04             	cmp    eax,0x4
c0019e46:	75 36                	jne    c0019e7e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019e48:	51                   	push   ecx
c0019e49:	53                   	push   ebx
c0019e4a:	55                   	push   ebp
c0019e4b:	56                   	push   esi
c0019e4c:	e8 87 fe ff ff       	call   c0019cd8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019e51:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019e58:	e8 bc df fe ff       	call   c0007e19 <malloc>
c0019e5d:	89 c5                	mov    ebp,eax
c0019e5f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e62:	e8 71 11 00 00       	call   c001afd8 <SATAPI::SATAPI()>
c0019e67:	58                   	pop    eax
c0019e68:	5a                   	pop    edx
c0019e69:	55                   	push   ebp
c0019e6a:	56                   	push   esi
c0019e6b:	e8 78 21 ff ff       	call   c000bfe8 <Device::addChild(Device*)>
c0019e70:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019e73:	56                   	push   esi
c0019e74:	6a 00                	push   0x0
c0019e76:	53                   	push   ebx
c0019e77:	55                   	push   ebp
c0019e78:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019e7b:	83 c4 20             	add    esp,0x20
c0019e7e:	d1 ef                	shr    edi,1
c0019e80:	43                   	inc    ebx
c0019e81:	83 fb 20             	cmp    ebx,0x20
c0019e84:	0f 85 72 ff ff ff    	jne    c0019dfc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0019e8a:	83 c4 0c             	add    esp,0xc
c0019e8d:	5b                   	pop    ebx
c0019e8e:	5e                   	pop    esi
c0019e8f:	5f                   	pop    edi
c0019e90:	5d                   	pop    ebp
c0019e91:	c3                   	ret    

c0019e92 <SATABus::open(int, int, void*)>:
c0019e92:	83 ec 14             	sub    esp,0x14
c0019e95:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019e99:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019e9f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019ea5:	52                   	push   edx
c0019ea6:	50                   	push   eax
c0019ea7:	e8 3c ff ff ff       	call   c0019de8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019eac:	31 c0                	xor    eax,eax
c0019eae:	83 c4 1c             	add    esp,0x1c
c0019eb1:	c3                   	ret    

c0019eb2 <ATA::close(int, int, void*)>:
c0019eb2:	83 ec 0c             	sub    esp,0xc
c0019eb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019eb9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019ebf:	85 c0                	test   eax,eax
c0019ec1:	74 0c                	je     c0019ecf <ATA::close(int, int, void*)+0x1d>
c0019ec3:	83 ec 0c             	sub    esp,0xc
c0019ec6:	8b 10                	mov    edx,DWORD PTR [eax]
c0019ec8:	50                   	push   eax
c0019ec9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019ecc:	83 c4 10             	add    esp,0x10
c0019ecf:	31 c0                	xor    eax,eax
c0019ed1:	83 c4 0c             	add    esp,0xc
c0019ed4:	c3                   	ret    
c0019ed5:	90                   	nop

c0019ed6 <ATA::powerSaving(PowerSavingLevel)>:
c0019ed6:	c3                   	ret    
c0019ed7:	90                   	nop

c0019ed8 <ATA::ATA()>:
c0019ed8:	83 ec 0c             	sub    esp,0xc
c0019edb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019edf:	83 ec 04             	sub    esp,0x4
c0019ee2:	68 00 02 00 00       	push   0x200
c0019ee7:	68 65 f3 01 c0       	push   0xc001f365
c0019eec:	50                   	push   eax
c0019eed:	e8 c4 24 ff ff       	call   c000c3b6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019ef2:	83 c4 10             	add    esp,0x10
c0019ef5:	ba d8 f2 01 c0       	mov    edx,0xc001f2d8
c0019efa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019efe:	89 10                	mov    DWORD PTR [eax],edx
c0019f00:	90                   	nop
c0019f01:	83 c4 0c             	add    esp,0xc
c0019f04:	c3                   	ret    
c0019f05:	90                   	nop

c0019f06 <ATA::flush(bool)>:
c0019f06:	53                   	push   ebx
c0019f07:	83 ec 08             	sub    esp,0x8
c0019f0a:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019f0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f13:	19 c0                	sbb    eax,eax
c0019f15:	83 e0 fd             	and    eax,0xfffffffd
c0019f18:	05 ea 00 00 00       	add    eax,0xea
c0019f1d:	50                   	push   eax
c0019f1e:	6a 07                	push   0x7
c0019f20:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019f27:	50                   	push   eax
c0019f28:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f2e:	e8 59 f1 ff ff       	call   c001908c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019f33:	83 c4 0c             	add    esp,0xc
c0019f36:	6a 00                	push   0x0
c0019f38:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019f3f:	50                   	push   eax
c0019f40:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f46:	e8 df fb ff ff       	call   c0019b2a <IDE::polling(unsigned char, unsigned int)>
c0019f4b:	83 c4 18             	add    esp,0x18
c0019f4e:	5b                   	pop    ebx
c0019f4f:	c3                   	ret    

c0019f50 <ATA::readyForCommand()>:
c0019f50:	56                   	push   esi
c0019f51:	53                   	push   ebx
c0019f52:	53                   	push   ebx
c0019f53:	31 db                	xor    ebx,ebx
c0019f55:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019f59:	51                   	push   ecx
c0019f5a:	6a 0c                	push   0xc
c0019f5c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019f63:	50                   	push   eax
c0019f64:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019f6a:	e8 dd f1 ff ff       	call   c001914c <IDE::read(unsigned char, unsigned char)>
c0019f6f:	83 c4 10             	add    esp,0x10
c0019f72:	a8 88                	test   al,0x88
c0019f74:	74 1f                	je     c0019f95 <ATA::readyForCommand()+0x45>
c0019f76:	43                   	inc    ebx
c0019f77:	83 fb 63             	cmp    ebx,0x63
c0019f7a:	7e dd                	jle    c0019f59 <ATA::readyForCommand()+0x9>
c0019f7c:	83 ec 0c             	sub    esp,0xc
c0019f7f:	6a 0a                	push   0xa
c0019f81:	e8 c6 9d ff ff       	call   c0013d4c <milliTenthSleep(unsigned int)>
c0019f86:	83 c4 10             	add    esp,0x10
c0019f89:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0019f8f:	75 c8                	jne    c0019f59 <ATA::readyForCommand()+0x9>
c0019f91:	31 c0                	xor    eax,eax
c0019f93:	eb 02                	jmp    c0019f97 <ATA::readyForCommand()+0x47>
c0019f95:	b0 01                	mov    al,0x1
c0019f97:	5a                   	pop    edx
c0019f98:	5b                   	pop    ebx
c0019f99:	5e                   	pop    esi
c0019f9a:	c3                   	ret    
c0019f9b:	90                   	nop

c0019f9c <ATA::access(unsigned long long, int, void*, bool)>:
c0019f9c:	55                   	push   ebp
c0019f9d:	57                   	push   edi
c0019f9e:	56                   	push   esi
c0019f9f:	53                   	push   ebx
c0019fa0:	83 ec 2c             	sub    esp,0x2c
c0019fa3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019fa7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0019fab:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019faf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019fb3:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019fb7:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019fbb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019fbf:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019fc5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019fc9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019fcf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019fd3:	c1 e0 06             	shl    eax,0x6
c0019fd6:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0019fde:	74 5d                	je     c001a03d <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0019fe0:	89 fa                	mov    edx,edi
c0019fe2:	89 f0                	mov    eax,esi
c0019fe4:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0019fe8:	c1 ea 1c             	shr    edx,0x1c
c0019feb:	89 d1                	mov    ecx,edx
c0019fed:	09 c1                	or     ecx,eax
c0019fef:	74 25                	je     c001a016 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0019ff1:	31 ed                	xor    ebp,ebp
c0019ff3:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0019ffa:	89 fa                	mov    edx,edi
c0019ffc:	89 f0                	mov    eax,esi
c0019ffe:	0f ad d0             	shrd   eax,edx,cl
c001a001:	d3 ea                	shr    edx,cl
c001a003:	f6 c1 20             	test   cl,0x20
c001a006:	74 02                	je     c001a00a <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001a008:	89 d0                	mov    eax,edx
c001a00a:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001a00e:	45                   	inc    ebp
c001a00f:	83 fd 06             	cmp    ebp,0x6
c001a012:	75 df                	jne    c0019ff3 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001a014:	eb 76                	jmp    c001a08c <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001a016:	89 f0                	mov    eax,esi
c001a018:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001a01d:	89 fa                	mov    edx,edi
c001a01f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a026:	0f ac d0 10          	shrd   eax,edx,0x10
c001a02a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a02f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a033:	c1 ee 18             	shr    esi,0x18
c001a036:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001a03b:	eb 56                	jmp    c001a093 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a03d:	6a 00                	push   0x0
c001a03f:	6a 3f                	push   0x3f
c001a041:	57                   	push   edi
c001a042:	56                   	push   esi
c001a043:	e8 28 22 00 00       	call   c001c270 <__umoddi3>
c001a048:	83 c4 10             	add    esp,0x10
c001a04b:	40                   	inc    eax
c001a04c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001a050:	6a 00                	push   0x0
c001a052:	68 f0 03 00 00       	push   0x3f0
c001a057:	57                   	push   edi
c001a058:	56                   	push   esi
c001a059:	e8 12 21 00 00       	call   c001c170 <__udivdi3>
c001a05e:	83 c4 10             	add    esp,0x10
c001a061:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001a066:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a06d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a072:	6a 00                	push   0x0
c001a074:	6a 3f                	push   0x3f
c001a076:	57                   	push   edi
c001a077:	56                   	push   esi
c001a078:	e8 f3 20 00 00       	call   c001c170 <__udivdi3>
c001a07d:	83 c4 10             	add    esp,0x10
c001a080:	89 c6                	mov    esi,eax
c001a082:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001a087:	83 e6 0f             	and    esi,0xf
c001a08a:	eb 07                	jmp    c001a093 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a08c:	31 f6                	xor    esi,esi
c001a08e:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001a093:	bf 01 00 00 00       	mov    edi,0x1
c001a098:	50                   	push   eax
c001a099:	6a 00                	push   0x0
c001a09b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0a2:	50                   	push   eax
c001a0a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a0a7:	e8 ee f1 ff ff       	call   c001929a <IDE::enableIRQs(unsigned char, bool)>
c001a0ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a0af:	e8 9c fe ff ff       	call   c0019f50 <ATA::readyForCommand()>
c001a0b4:	83 c4 10             	add    esp,0x10
c001a0b7:	84 c0                	test   al,al
c001a0b9:	0f 84 4e 02 00 00    	je     c001a30d <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a0bf:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a0c5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a0cb:	c1 e0 04             	shl    eax,0x4
c001a0ce:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001a0d5:	09 c6                	or     esi,eax
c001a0d7:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001a0dc:	75 05                	jne    c001a0e3 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001a0de:	83 ce a0             	or     esi,0xffffffa0
c001a0e1:	eb 03                	jmp    c001a0e6 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001a0e3:	83 ce e0             	or     esi,0xffffffe0
c001a0e6:	89 f0                	mov    eax,esi
c001a0e8:	0f b6 f0             	movzx  esi,al
c001a0eb:	56                   	push   esi
c001a0ec:	6a 06                	push   0x6
c001a0ee:	51                   	push   ecx
c001a0ef:	52                   	push   edx
c001a0f0:	e8 97 ef ff ff       	call   c001908c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0f5:	83 c4 10             	add    esp,0x10
c001a0f8:	6a 00                	push   0x0
c001a0fa:	6a 01                	push   0x1
c001a0fc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a103:	50                   	push   eax
c001a104:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a10a:	e8 7d ef ff ff       	call   c001908c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a10f:	83 c4 10             	add    esp,0x10
c001a112:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a117:	75 6e                	jne    c001a187 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001a119:	6a 00                	push   0x0
c001a11b:	6a 08                	push   0x8
c001a11d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a124:	50                   	push   eax
c001a125:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a12b:	e8 5c ef ff ff       	call   c001908c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a130:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001a135:	50                   	push   eax
c001a136:	6a 09                	push   0x9
c001a138:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a13f:	50                   	push   eax
c001a140:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a146:	e8 41 ef ff ff       	call   c001908c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a14b:	83 c4 20             	add    esp,0x20
c001a14e:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001a153:	50                   	push   eax
c001a154:	6a 0a                	push   0xa
c001a156:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a15d:	50                   	push   eax
c001a15e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a164:	e8 23 ef ff ff       	call   c001908c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a169:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001a16e:	50                   	push   eax
c001a16f:	6a 0b                	push   0xb
c001a171:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a178:	50                   	push   eax
c001a179:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a17f:	e8 08 ef ff ff       	call   c001908c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a184:	83 c4 20             	add    esp,0x20
c001a187:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001a18c:	50                   	push   eax
c001a18d:	6a 02                	push   0x2
c001a18f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a196:	50                   	push   eax
c001a197:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a19d:	e8 ea ee ff ff       	call   c001908c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1a2:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001a1a7:	50                   	push   eax
c001a1a8:	6a 03                	push   0x3
c001a1aa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1b1:	50                   	push   eax
c001a1b2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1b8:	e8 cf ee ff ff       	call   c001908c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1bd:	83 c4 20             	add    esp,0x20
c001a1c0:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001a1c5:	50                   	push   eax
c001a1c6:	6a 04                	push   0x4
c001a1c8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1cf:	50                   	push   eax
c001a1d0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1d6:	e8 b1 ee ff ff       	call   c001908c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a1e0:	50                   	push   eax
c001a1e1:	6a 05                	push   0x5
c001a1e3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1ea:	50                   	push   eax
c001a1eb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1f1:	e8 96 ee ff ff       	call   c001908c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1f6:	83 c4 20             	add    esp,0x20
c001a1f9:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a1fe:	0f 94 c0             	sete   al
c001a201:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a206:	74 09                	je     c001a211 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001a208:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001a20f:	eb 07                	jmp    c001a218 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001a211:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001a218:	0f b6 c0             	movzx  eax,al
c001a21b:	50                   	push   eax
c001a21c:	6a 07                	push   0x7
c001a21e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a225:	50                   	push   eax
c001a226:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a22c:	e8 5b ee ff ff       	call   c001908c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a231:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a235:	83 c4 10             	add    esp,0x10
c001a238:	85 f6                	test   esi,esi
c001a23a:	0f 84 ae 00 00 00    	je     c001a2ee <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001a240:	50                   	push   eax
c001a241:	6a 01                	push   0x1
c001a243:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a24a:	50                   	push   eax
c001a24b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a251:	e8 d4 f8 ff ff       	call   c0019b2a <IDE::polling(unsigned char, unsigned int)>
c001a256:	83 c4 10             	add    esp,0x10
c001a259:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001a25f:	84 c0                	test   al,al
c001a261:	74 20                	je     c001a283 <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001a263:	0f b6 f8             	movzx  edi,al
c001a266:	0f b6 d2             	movzx  edx,dl
c001a269:	57                   	push   edi
c001a26a:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001a271:	50                   	push   eax
c001a272:	52                   	push   edx
c001a273:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a279:	e8 fc f7 ff ff       	call   c0019a7a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a27e:	e9 87 00 00 00       	jmp    c001a30a <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001a283:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a288:	74 33                	je     c001a2bd <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001a28a:	31 ed                	xor    ebp,ebp
c001a28c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a290:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001a294:	50                   	push   eax
c001a295:	50                   	push   eax
c001a296:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a29d:	50                   	push   eax
c001a29e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2a4:	e8 d1 ed ff ff       	call   c001907a <IDE::getBase(unsigned char)>
c001a2a9:	89 c2                	mov    edx,eax
c001a2ab:	89 f8                	mov    eax,edi
c001a2ad:	66 ef                	out    dx,ax
c001a2af:	45                   	inc    ebp
c001a2b0:	83 c4 10             	add    esp,0x10
c001a2b3:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001a2b9:	75 d1                	jne    c001a28c <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001a2bb:	eb 23                	jmp    c001a2e0 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001a2bd:	0f b6 d2             	movzx  edx,dl
c001a2c0:	51                   	push   ecx
c001a2c1:	51                   	push   ecx
c001a2c2:	52                   	push   edx
c001a2c3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2c9:	e8 ac ed ff ff       	call   c001907a <IDE::getBase(unsigned char)>
c001a2ce:	b9 00 01 00 00       	mov    ecx,0x100
c001a2d3:	89 c2                	mov    edx,eax
c001a2d5:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001a2d9:	fc                   	cld    
c001a2da:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001a2dd:	83 c4 10             	add    esp,0x10
c001a2e0:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001a2e8:	4e                   	dec    esi
c001a2e9:	e9 4a ff ff ff       	jmp    c001a238 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001a2ee:	31 ff                	xor    edi,edi
c001a2f0:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a2f5:	74 16                	je     c001a30d <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a2f7:	50                   	push   eax
c001a2f8:	50                   	push   eax
c001a2f9:	31 c0                	xor    eax,eax
c001a2fb:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001a300:	0f 94 c0             	sete   al
c001a303:	50                   	push   eax
c001a304:	53                   	push   ebx
c001a305:	e8 fc fb ff ff       	call   c0019f06 <ATA::flush(bool)>
c001a30a:	83 c4 10             	add    esp,0x10
c001a30d:	83 c4 2c             	add    esp,0x2c
c001a310:	89 f8                	mov    eax,edi
c001a312:	5b                   	pop    ebx
c001a313:	5e                   	pop    esi
c001a314:	5f                   	pop    edi
c001a315:	5d                   	pop    ebp
c001a316:	c3                   	ret    
c001a317:	90                   	nop

c001a318 <ATA::read(unsigned long long, int, void*)>:
c001a318:	57                   	push   edi
c001a319:	b8 04 00 00 00       	mov    eax,0x4
c001a31e:	56                   	push   esi
c001a31f:	53                   	push   ebx
c001a320:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a324:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a328:	8d 7a ff             	lea    edi,[edx-0x1]
c001a32b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a32f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a333:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a339:	77 25                	ja     c001a360 <ATA::read(unsigned long long, int, void*)+0x48>
c001a33b:	b8 06 00 00 00       	mov    eax,0x6
c001a340:	85 f6                	test   esi,esi
c001a342:	74 1c                	je     c001a360 <ATA::read(unsigned long long, int, void*)+0x48>
c001a344:	50                   	push   eax
c001a345:	50                   	push   eax
c001a346:	6a 00                	push   0x0
c001a348:	56                   	push   esi
c001a349:	52                   	push   edx
c001a34a:	53                   	push   ebx
c001a34b:	51                   	push   ecx
c001a34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a350:	e8 47 fc ff ff       	call   c0019f9c <ATA::access(unsigned long long, int, void*, bool)>
c001a355:	83 c4 20             	add    esp,0x20
c001a358:	85 c0                	test   eax,eax
c001a35a:	0f 95 c0             	setne  al
c001a35d:	0f b6 c0             	movzx  eax,al
c001a360:	5b                   	pop    ebx
c001a361:	5e                   	pop    esi
c001a362:	5f                   	pop    edi
c001a363:	c3                   	ret    

c001a364 <ATA::write(unsigned long long, int, void*)>:
c001a364:	57                   	push   edi
c001a365:	b8 04 00 00 00       	mov    eax,0x4
c001a36a:	56                   	push   esi
c001a36b:	53                   	push   ebx
c001a36c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a370:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a374:	8d 7a ff             	lea    edi,[edx-0x1]
c001a377:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a37b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a37f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a385:	77 25                	ja     c001a3ac <ATA::write(unsigned long long, int, void*)+0x48>
c001a387:	b8 06 00 00 00       	mov    eax,0x6
c001a38c:	85 f6                	test   esi,esi
c001a38e:	74 1c                	je     c001a3ac <ATA::write(unsigned long long, int, void*)+0x48>
c001a390:	50                   	push   eax
c001a391:	50                   	push   eax
c001a392:	6a 01                	push   0x1
c001a394:	56                   	push   esi
c001a395:	52                   	push   edx
c001a396:	53                   	push   ebx
c001a397:	51                   	push   ecx
c001a398:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a39c:	e8 fb fb ff ff       	call   c0019f9c <ATA::access(unsigned long long, int, void*, bool)>
c001a3a1:	83 c4 20             	add    esp,0x20
c001a3a4:	85 c0                	test   eax,eax
c001a3a6:	0f 95 c0             	setne  al
c001a3a9:	0f b6 c0             	movzx  eax,al
c001a3ac:	5b                   	pop    ebx
c001a3ad:	5e                   	pop    esi
c001a3ae:	5f                   	pop    edi
c001a3af:	c3                   	ret    

c001a3b0 <ATA::detectCHS()>:
c001a3b0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a3b4:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001a3ba:	c1 e0 06             	shl    eax,0x6
c001a3bd:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001a3c3:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001a3cd:	c7 44 24 04 bc f2 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f2bc
c001a3d5:	e9 1d 63 ff ff       	jmp    c00106f7 <Krnl::panic(char const*)>

c001a3da <ATA::open(int, int, void*)>:
c001a3da:	53                   	push   ebx
c001a3db:	83 ec 08             	sub    esp,0x8
c001a3de:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a3e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a3e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a3ea:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a3f0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a3f6:	c1 e0 06             	shl    eax,0x6
c001a3f9:	01 d0                	add    eax,edx
c001a3fb:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001a402:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001a408:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001a40f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a419:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001a41f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a426:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001a42d:	75 0c                	jne    c001a43b <ATA::open(int, int, void*)+0x61>
c001a42f:	83 ec 0c             	sub    esp,0xc
c001a432:	53                   	push   ebx
c001a433:	e8 78 ff ff ff       	call   c001a3b0 <ATA::detectCHS()>
c001a438:	83 c4 10             	add    esp,0x10
c001a43b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a441:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a447:	c1 e0 06             	shl    eax,0x6
c001a44a:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001a451:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a45b:	d1 e8                	shr    eax,1
c001a45d:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001a463:	6a 04                	push   0x4
c001a465:	6a 0c                	push   0xc
c001a467:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a46e:	50                   	push   eax
c001a46f:	52                   	push   edx
c001a470:	e8 17 ec ff ff       	call   c001908c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a475:	90                   	nop
c001a476:	90                   	nop
c001a477:	6a 00                	push   0x0
c001a479:	6a 0c                	push   0xc
c001a47b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a482:	50                   	push   eax
c001a483:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a489:	e8 fe eb ff ff       	call   c001908c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a48e:	83 c4 14             	add    esp,0x14
c001a491:	53                   	push   ebx
c001a492:	e8 87 1f ff ff       	call   c000c41e <PhysicalDisk::startCache()>
c001a497:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a49a:	e8 f7 2f ff ff       	call   c000d496 <createPartitionsForDisk(PhysicalDisk*)>
c001a49f:	31 c0                	xor    eax,eax
c001a4a1:	83 c4 18             	add    esp,0x18
c001a4a4:	5b                   	pop    ebx
c001a4a5:	c3                   	ret    

c001a4a6 <ATAPI::write(unsigned long long, int, void*)>:
c001a4a6:	b8 03 00 00 00       	mov    eax,0x3
c001a4ab:	c3                   	ret    

c001a4ac <ATAPI::close(int, int, void*)>:
c001a4ac:	83 ec 0c             	sub    esp,0xc
c001a4af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4b3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a4b9:	85 c0                	test   eax,eax
c001a4bb:	74 0c                	je     c001a4c9 <ATAPI::close(int, int, void*)+0x1d>
c001a4bd:	83 ec 0c             	sub    esp,0xc
c001a4c0:	8b 10                	mov    edx,DWORD PTR [eax]
c001a4c2:	50                   	push   eax
c001a4c3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a4c6:	83 c4 10             	add    esp,0x10
c001a4c9:	31 c0                	xor    eax,eax
c001a4cb:	83 c4 0c             	add    esp,0xc
c001a4ce:	c3                   	ret    
c001a4cf:	90                   	nop

c001a4d0 <ATAPI::ATAPI()>:
c001a4d0:	83 ec 0c             	sub    esp,0xc
c001a4d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4d7:	83 ec 04             	sub    esp,0x4
c001a4da:	68 00 08 00 00       	push   0x800
c001a4df:	68 29 f4 01 c0       	push   0xc001f429
c001a4e4:	50                   	push   eax
c001a4e5:	e8 cc 1e ff ff       	call   c000c3b6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a4ea:	83 c4 10             	add    esp,0x10
c001a4ed:	ba 20 f3 01 c0       	mov    edx,0xc001f320
c001a4f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4f6:	89 10                	mov    DWORD PTR [eax],edx
c001a4f8:	90                   	nop
c001a4f9:	83 c4 0c             	add    esp,0xc
c001a4fc:	c3                   	ret    
c001a4fd:	90                   	nop

c001a4fe <ATAPI::readyForCommand()>:
c001a4fe:	56                   	push   esi
c001a4ff:	53                   	push   ebx
c001a500:	53                   	push   ebx
c001a501:	31 db                	xor    ebx,ebx
c001a503:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a507:	51                   	push   ecx
c001a508:	6a 0c                	push   0xc
c001a50a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a511:	50                   	push   eax
c001a512:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a518:	e8 2f ec ff ff       	call   c001914c <IDE::read(unsigned char, unsigned char)>
c001a51d:	83 c4 10             	add    esp,0x10
c001a520:	a8 88                	test   al,0x88
c001a522:	74 25                	je     c001a549 <ATAPI::readyForCommand()+0x4b>
c001a524:	43                   	inc    ebx
c001a525:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a52b:	7e da                	jle    c001a507 <ATAPI::readyForCommand()+0x9>
c001a52d:	83 ec 0c             	sub    esp,0xc
c001a530:	68 5e 01 00 00       	push   0x15e
c001a535:	e8 12 98 ff ff       	call   c0013d4c <milliTenthSleep(unsigned int)>
c001a53a:	83 c4 10             	add    esp,0x10
c001a53d:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a543:	75 c2                	jne    c001a507 <ATAPI::readyForCommand()+0x9>
c001a545:	31 c0                	xor    eax,eax
c001a547:	eb 02                	jmp    c001a54b <ATAPI::readyForCommand()+0x4d>
c001a549:	b0 01                	mov    al,0x1
c001a54b:	5a                   	pop    edx
c001a54c:	5b                   	pop    ebx
c001a54d:	5e                   	pop    esi
c001a54e:	c3                   	ret    
c001a54f:	90                   	nop

c001a550 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a550:	55                   	push   ebp
c001a551:	57                   	push   edi
c001a552:	56                   	push   esi
c001a553:	53                   	push   ebx
c001a554:	83 ec 20             	sub    esp,0x20
c001a557:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a55b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a55f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a563:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a567:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a56b:	6a 01                	push   0x1
c001a56d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a574:	50                   	push   eax
c001a575:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a57b:	e8 1a ed ff ff       	call   c001929a <IDE::enableIRQs(unsigned char, bool)>
c001a580:	5e                   	pop    esi
c001a581:	58                   	pop    eax
c001a582:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a589:	50                   	push   eax
c001a58a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a590:	e8 d1 ea ff ff       	call   c0019066 <IDE::prepareInterrupt(unsigned char)>
c001a595:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a598:	e8 61 ff ff ff       	call   c001a4fe <ATAPI::readyForCommand()>
c001a59d:	83 c4 10             	add    esp,0x10
c001a5a0:	84 c0                	test   al,al
c001a5a2:	75 0a                	jne    c001a5ae <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a5a4:	bb 01 00 00 00       	mov    ebx,0x1
c001a5a9:	e9 57 02 00 00       	jmp    c001a805 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a5ae:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a5b4:	c1 e0 04             	shl    eax,0x4
c001a5b7:	0f b6 c0             	movzx  eax,al
c001a5ba:	50                   	push   eax
c001a5bb:	6a 06                	push   0x6
c001a5bd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5c4:	50                   	push   eax
c001a5c5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5cb:	e8 bc ea ff ff       	call   c001908c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a5d0:	6a 00                	push   0x0
c001a5d2:	6a 01                	push   0x1
c001a5d4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5db:	50                   	push   eax
c001a5dc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5e2:	e8 a5 ea ff ff       	call   c001908c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a5e7:	83 c4 20             	add    esp,0x20
c001a5ea:	0f b6 c3             	movzx  eax,bl
c001a5ed:	0f b6 df             	movzx  ebx,bh
c001a5f0:	50                   	push   eax
c001a5f1:	6a 04                	push   0x4
c001a5f3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5fa:	50                   	push   eax
c001a5fb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a601:	e8 86 ea ff ff       	call   c001908c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a606:	53                   	push   ebx
c001a607:	6a 05                	push   0x5
c001a609:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a610:	50                   	push   eax
c001a611:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a617:	e8 70 ea ff ff       	call   c001908c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a61c:	83 c4 20             	add    esp,0x20
c001a61f:	68 a0 00 00 00       	push   0xa0
c001a624:	6a 07                	push   0x7
c001a626:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a62d:	50                   	push   eax
c001a62e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a634:	e8 53 ea ff ff       	call   c001908c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a639:	83 c4 0c             	add    esp,0xc
c001a63c:	6a 01                	push   0x1
c001a63e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a645:	50                   	push   eax
c001a646:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a64c:	e8 d9 f4 ff ff       	call   c0019b2a <IDE::polling(unsigned char, unsigned int)>
c001a651:	83 c4 10             	add    esp,0x10
c001a654:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a65a:	84 c0                	test   al,al
c001a65c:	74 23                	je     c001a681 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a65e:	0f b6 d8             	movzx  ebx,al
c001a661:	0f b6 d2             	movzx  edx,dl
c001a664:	53                   	push   ebx
c001a665:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a66c:	50                   	push   eax
c001a66d:	52                   	push   edx
c001a66e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a674:	e8 01 f4 ff ff       	call   c0019a7a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a679:	83 c4 10             	add    esp,0x10
c001a67c:	e9 84 01 00 00       	jmp    c001a805 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a681:	0f b6 d2             	movzx  edx,dl
c001a684:	53                   	push   ebx
c001a685:	53                   	push   ebx
c001a686:	52                   	push   edx
c001a687:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a68d:	e8 e8 e9 ff ff       	call   c001907a <IDE::getBase(unsigned char)>
c001a692:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a696:	b9 06 00 00 00       	mov    ecx,0x6
c001a69b:	89 c2                	mov    edx,eax
c001a69d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a6a0:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a6a4:	83 c4 10             	add    esp,0x10
c001a6a7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a6ad:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a6b4:	85 db                	test   ebx,ebx
c001a6b6:	0f 84 ec 00 00 00    	je     c001a7a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a6bc:	51                   	push   ecx
c001a6bd:	51                   	push   ecx
c001a6be:	52                   	push   edx
c001a6bf:	50                   	push   eax
c001a6c0:	e8 35 eb ff ff       	call   c00191fa <IDE::waitInterrupt(unsigned char)>
c001a6c5:	83 c4 10             	add    esp,0x10
c001a6c8:	84 c0                	test   al,al
c001a6ca:	0f 84 d4 fe ff ff    	je     c001a5a4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a6d0:	56                   	push   esi
c001a6d1:	56                   	push   esi
c001a6d2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a6d9:	50                   	push   eax
c001a6da:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6e0:	e8 81 e9 ff ff       	call   c0019066 <IDE::prepareInterrupt(unsigned char)>
c001a6e5:	83 c4 0c             	add    esp,0xc
c001a6e8:	6a 04                	push   0x4
c001a6ea:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a6f1:	50                   	push   eax
c001a6f2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6f8:	e8 4f ea ff ff       	call   c001914c <IDE::read(unsigned char, unsigned char)>
c001a6fd:	83 c4 0c             	add    esp,0xc
c001a700:	89 c6                	mov    esi,eax
c001a702:	6a 05                	push   0x5
c001a704:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a70b:	50                   	push   eax
c001a70c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a712:	e8 35 ea ff ff       	call   c001914c <IDE::read(unsigned char, unsigned char)>
c001a717:	89 f1                	mov    ecx,esi
c001a719:	0f b6 c0             	movzx  eax,al
c001a71c:	0f b6 f1             	movzx  esi,cl
c001a71f:	c1 e0 08             	shl    eax,0x8
c001a722:	09 c6                	or     esi,eax
c001a724:	d1 fe                	sar    esi,1
c001a726:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a72a:	83 c4 10             	add    esp,0x10
c001a72d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a732:	74 41                	je     c001a775 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a734:	31 c9                	xor    ecx,ecx
c001a736:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a73c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a743:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a747:	75 0a                	jne    c001a753 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a749:	01 c9                	add    ecx,ecx
c001a74b:	01 cd                	add    ebp,ecx
c001a74d:	4b                   	dec    ebx
c001a74e:	e9 54 ff ff ff       	jmp    c001a6a7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a753:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a758:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a75c:	51                   	push   ecx
c001a75d:	51                   	push   ecx
c001a75e:	52                   	push   edx
c001a75f:	50                   	push   eax
c001a760:	e8 15 e9 ff ff       	call   c001907a <IDE::getBase(unsigned char)>
c001a765:	89 c2                	mov    edx,eax
c001a767:	89 f0                	mov    eax,esi
c001a769:	66 ef                	out    dx,ax
c001a76b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a76f:	83 c4 10             	add    esp,0x10
c001a772:	41                   	inc    ecx
c001a773:	eb c1                	jmp    c001a736 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a775:	31 f6                	xor    esi,esi
c001a777:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a77d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a784:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a788:	75 06                	jne    c001a790 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a78a:	01 f6                	add    esi,esi
c001a78c:	01 f5                	add    ebp,esi
c001a78e:	eb bd                	jmp    c001a74d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a790:	51                   	push   ecx
c001a791:	51                   	push   ecx
c001a792:	52                   	push   edx
c001a793:	50                   	push   eax
c001a794:	e8 e1 e8 ff ff       	call   c001907a <IDE::getBase(unsigned char)>
c001a799:	89 c2                	mov    edx,eax
c001a79b:	66 ed                	in     ax,dx
c001a79d:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001a7a2:	83 c4 10             	add    esp,0x10
c001a7a5:	46                   	inc    esi
c001a7a6:	eb cf                	jmp    c001a777 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001a7a8:	51                   	push   ecx
c001a7a9:	51                   	push   ecx
c001a7aa:	52                   	push   edx
c001a7ab:	50                   	push   eax
c001a7ac:	e8 49 ea ff ff       	call   c00191fa <IDE::waitInterrupt(unsigned char)>
c001a7b1:	83 c4 10             	add    esp,0x10
c001a7b4:	84 c0                	test   al,al
c001a7b6:	0f 84 e8 fd ff ff    	je     c001a5a4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a7bc:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a7c1:	52                   	push   edx
c001a7c2:	52                   	push   edx
c001a7c3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a7ca:	50                   	push   eax
c001a7cb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a7d1:	e8 90 e8 ff ff       	call   c0019066 <IDE::prepareInterrupt(unsigned char)>
c001a7d6:	83 c4 10             	add    esp,0x10
c001a7d9:	50                   	push   eax
c001a7da:	50                   	push   eax
c001a7db:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a7e2:	50                   	push   eax
c001a7e3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a7e9:	e8 8c e8 ff ff       	call   c001907a <IDE::getBase(unsigned char)>
c001a7ee:	8d 50 07             	lea    edx,[eax+0x7]
c001a7f1:	ec                   	in     al,dx
c001a7f2:	83 c4 10             	add    esp,0x10
c001a7f5:	a8 88                	test   al,0x88
c001a7f7:	74 0a                	je     c001a803 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001a7f9:	4b                   	dec    ebx
c001a7fa:	75 dd                	jne    c001a7d9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001a7fc:	bb 02 00 00 00       	mov    ebx,0x2
c001a801:	eb 02                	jmp    c001a805 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a803:	31 db                	xor    ebx,ebx
c001a805:	83 c4 1c             	add    esp,0x1c
c001a808:	89 d8                	mov    eax,ebx
c001a80a:	5b                   	pop    ebx
c001a80b:	5e                   	pop    esi
c001a80c:	5f                   	pop    edi
c001a80d:	5d                   	pop    ebp
c001a80e:	c3                   	ret    
c001a80f:	90                   	nop

c001a810 <ATAPI::diskRemoved()>:
c001a810:	53                   	push   ebx
c001a811:	83 ec 14             	sub    esp,0x14
c001a814:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a818:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a81f:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001a825:	e8 ec 29 ff ff       	call   c000d216 <LogicalDisk::unmount()>
c001a82a:	58                   	pop    eax
c001a82b:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a831:	e8 26 33 ff ff       	call   c000db5c <VCache::writeWriteBuffer()>
c001a836:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a83c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a840:	83 c4 18             	add    esp,0x18
c001a843:	5b                   	pop    ebx
c001a844:	e9 03 33 ff ff       	jmp    c000db4c <VCache::invalidateReadBuffer()>
c001a849:	90                   	nop

c001a84a <ATAPI::eject()>:
c001a84a:	57                   	push   edi
c001a84b:	b9 03 00 00 00       	mov    ecx,0x3
c001a850:	53                   	push   ebx
c001a851:	83 ec 14             	sub    esp,0x14
c001a854:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a858:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a85c:	fc                   	cld    
c001a85d:	31 c0                	xor    eax,eax
c001a85f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a861:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a866:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a86b:	50                   	push   eax
c001a86c:	50                   	push   eax
c001a86d:	6a 00                	push   0x0
c001a86f:	6a 00                	push   0x0
c001a871:	6a 00                	push   0x0
c001a873:	6a 02                	push   0x2
c001a875:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a879:	50                   	push   eax
c001a87a:	53                   	push   ebx
c001a87b:	e8 d0 fc ff ff       	call   c001a550 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a880:	83 c4 14             	add    esp,0x14
c001a883:	53                   	push   ebx
c001a884:	e8 87 ff ff ff       	call   c001a810 <ATAPI::diskRemoved()>
c001a889:	83 c4 24             	add    esp,0x24
c001a88c:	31 c0                	xor    eax,eax
c001a88e:	5b                   	pop    ebx
c001a88f:	5f                   	pop    edi
c001a890:	c3                   	ret    
c001a891:	90                   	nop

c001a892 <ATAPI::diskInserted()>:
c001a892:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a896:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001a89d:	c3                   	ret    

c001a89e <ATAPI::detectMedia()>:
c001a89e:	56                   	push   esi
c001a89f:	53                   	push   ebx
c001a8a0:	83 ec 28             	sub    esp,0x28
c001a8a3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a8a7:	6a 0c                	push   0xc
c001a8a9:	6a 00                	push   0x0
c001a8ab:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a8af:	56                   	push   esi
c001a8b0:	e8 3b 5c fe ff       	call   c00004f0 <memset>
c001a8b5:	58                   	pop    eax
c001a8b6:	5a                   	pop    edx
c001a8b7:	6a 00                	push   0x0
c001a8b9:	6a 00                	push   0x0
c001a8bb:	6a 00                	push   0x0
c001a8bd:	6a 00                	push   0x0
c001a8bf:	56                   	push   esi
c001a8c0:	53                   	push   ebx
c001a8c1:	e8 8a fc ff ff       	call   c001a550 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a8c6:	83 c4 1c             	add    esp,0x1c
c001a8c9:	6a 0c                	push   0xc
c001a8cb:	6a 00                	push   0x0
c001a8cd:	56                   	push   esi
c001a8ce:	e8 1d 5c fe ff       	call   c00004f0 <memset>
c001a8d3:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a8d8:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a8dd:	59                   	pop    ecx
c001a8de:	58                   	pop    eax
c001a8df:	6a 01                	push   0x1
c001a8e1:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a8e5:	50                   	push   eax
c001a8e6:	6a 00                	push   0x0
c001a8e8:	6a 12                	push   0x12
c001a8ea:	56                   	push   esi
c001a8eb:	53                   	push   ebx
c001a8ec:	e8 5f fc ff ff       	call   c001a550 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a8f1:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001a8f5:	83 c4 20             	add    esp,0x20
c001a8f8:	83 e0 7f             	and    eax,0x7f
c001a8fb:	3c 70                	cmp    al,0x70
c001a8fd:	74 15                	je     c001a914 <ATAPI::detectMedia()+0x76>
c001a8ff:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a906:	75 0c                	jne    c001a914 <ATAPI::detectMedia()+0x76>
c001a908:	83 ec 0c             	sub    esp,0xc
c001a90b:	53                   	push   ebx
c001a90c:	e8 81 ff ff ff       	call   c001a892 <ATAPI::diskInserted()>
c001a911:	83 c4 10             	add    esp,0x10
c001a914:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a918:	83 e0 0f             	and    eax,0xf
c001a91b:	3c 02                	cmp    al,0x2
c001a91d:	75 1b                	jne    c001a93a <ATAPI::detectMedia()+0x9c>
c001a91f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a924:	75 2d                	jne    c001a953 <ATAPI::detectMedia()+0xb5>
c001a926:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a92d:	74 24                	je     c001a953 <ATAPI::detectMedia()+0xb5>
c001a92f:	83 ec 0c             	sub    esp,0xc
c001a932:	53                   	push   ebx
c001a933:	e8 d8 fe ff ff       	call   c001a810 <ATAPI::diskRemoved()>
c001a938:	eb 16                	jmp    c001a950 <ATAPI::detectMedia()+0xb2>
c001a93a:	84 c0                	test   al,al
c001a93c:	75 15                	jne    c001a953 <ATAPI::detectMedia()+0xb5>
c001a93e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a945:	75 0c                	jne    c001a953 <ATAPI::detectMedia()+0xb5>
c001a947:	83 ec 0c             	sub    esp,0xc
c001a94a:	53                   	push   ebx
c001a94b:	e8 42 ff ff ff       	call   c001a892 <ATAPI::diskInserted()>
c001a950:	83 c4 10             	add    esp,0x10
c001a953:	83 c4 24             	add    esp,0x24
c001a956:	5b                   	pop    ebx
c001a957:	5e                   	pop    esi
c001a958:	c3                   	ret    
c001a959:	90                   	nop

c001a95a <ATAPI::open(int, int, void*)>:
c001a95a:	56                   	push   esi
c001a95b:	53                   	push   ebx
c001a95c:	50                   	push   eax
c001a95d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a961:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a965:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a969:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a96f:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a975:	c1 e0 06             	shl    eax,0x6
c001a978:	01 d0                	add    eax,edx
c001a97a:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001a981:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001a987:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001a98e:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001a998:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a99e:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001a9a5:	6a 04                	push   0x4
c001a9a7:	6a 0c                	push   0xc
c001a9a9:	51                   	push   ecx
c001a9aa:	52                   	push   edx
c001a9ab:	e8 dc e6 ff ff       	call   c001908c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a9b0:	90                   	nop
c001a9b1:	90                   	nop
c001a9b2:	6a 00                	push   0x0
c001a9b4:	6a 0c                	push   0xc
c001a9b6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a9bd:	50                   	push   eax
c001a9be:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a9c4:	e8 c3 e6 ff ff       	call   c001908c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a9c9:	83 c4 14             	add    esp,0x14
c001a9cc:	68 74 01 00 00       	push   0x174
c001a9d1:	e8 43 d4 fe ff       	call   c0007e19 <malloc>
c001a9d6:	83 c4 0c             	add    esp,0xc
c001a9d9:	89 c6                	mov    esi,eax
c001a9db:	6a 00                	push   0x0
c001a9dd:	68 ff ff ff 7f       	push   0x7fffffff
c001a9e2:	6a 00                	push   0x0
c001a9e4:	6a 00                	push   0x0
c001a9e6:	53                   	push   ebx
c001a9e7:	68 1b f4 01 c0       	push   0xc001f41b
c001a9ec:	50                   	push   eax
c001a9ed:	e8 70 26 ff ff       	call   c000d062 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001a9f2:	83 c4 14             	add    esp,0x14
c001a9f5:	56                   	push   esi
c001a9f6:	e8 1d 27 ff ff       	call   c000d118 <LogicalDisk::assignDriveLetter()>
c001a9fb:	5a                   	pop    edx
c001a9fc:	0f be c0             	movsx  eax,al
c001a9ff:	59                   	pop    ecx
c001aa00:	50                   	push   eax
c001aa01:	68 08 f3 01 c0       	push   0xc001f308
c001aa06:	e8 9d 01 ff ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c001aa0b:	58                   	pop    eax
c001aa0c:	5a                   	pop    edx
c001aa0d:	56                   	push   esi
c001aa0e:	53                   	push   ebx
c001aa0f:	e8 d4 15 ff ff       	call   c000bfe8 <Device::addChild(Device*)>
c001aa14:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001aa1a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aa1d:	e8 fc 19 ff ff       	call   c000c41e <PhysicalDisk::startCache()>
c001aa22:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001aa29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aa2c:	e8 6d fe ff ff       	call   c001a89e <ATAPI::detectMedia()>
c001aa31:	83 c4 14             	add    esp,0x14
c001aa34:	31 c0                	xor    eax,eax
c001aa36:	5b                   	pop    ebx
c001aa37:	5e                   	pop    esi
c001aa38:	c3                   	ret    
c001aa39:	90                   	nop

c001aa3a <ATAPI::read(unsigned long long, int, void*)>:
c001aa3a:	55                   	push   ebp
c001aa3b:	57                   	push   edi
c001aa3c:	56                   	push   esi
c001aa3d:	53                   	push   ebx
c001aa3e:	83 ec 1c             	sub    esp,0x1c
c001aa41:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001aa45:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001aa49:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001aa4d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001aa54:	74 3c                	je     c001aa92 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001aa56:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001aa5a:	b9 03 00 00 00       	mov    ecx,0x3
c001aa5f:	fc                   	cld    
c001aa60:	31 c0                	xor    eax,eax
c001aa62:	0f ce                	bswap  esi
c001aa64:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001aa66:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001aa6b:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001aa6f:	89 e8                	mov    eax,ebp
c001aa71:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001aa75:	50                   	push   eax
c001aa76:	50                   	push   eax
c001aa77:	55                   	push   ebp
c001aa78:	c1 e5 0b             	shl    ebp,0xb
c001aa7b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001aa7f:	6a 00                	push   0x0
c001aa81:	55                   	push   ebp
c001aa82:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aa86:	50                   	push   eax
c001aa87:	53                   	push   ebx
c001aa88:	e8 c3 fa ff ff       	call   c001a550 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001aa8d:	83 c4 20             	add    esp,0x20
c001aa90:	eb 1a                	jmp    c001aaac <ATAPI::read(unsigned long long, int, void*)+0x72>
c001aa92:	83 ec 0c             	sub    esp,0xc
c001aa95:	53                   	push   ebx
c001aa96:	e8 03 fe ff ff       	call   c001a89e <ATAPI::detectMedia()>
c001aa9b:	83 c4 10             	add    esp,0x10
c001aa9e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001aaa5:	75 af                	jne    c001aa56 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001aaa7:	b8 02 00 00 00       	mov    eax,0x2
c001aaac:	83 c4 1c             	add    esp,0x1c
c001aaaf:	5b                   	pop    ebx
c001aab0:	5e                   	pop    esi
c001aab1:	5f                   	pop    edi
c001aab2:	5d                   	pop    ebp
c001aab3:	c3                   	ret    

c001aab4 <SATA::close(int, int, void*)>:
c001aab4:	83 ec 0c             	sub    esp,0xc
c001aab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aabb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001aac1:	85 c0                	test   eax,eax
c001aac3:	74 0c                	je     c001aad1 <SATA::close(int, int, void*)+0x1d>
c001aac5:	83 ec 0c             	sub    esp,0xc
c001aac8:	8b 10                	mov    edx,DWORD PTR [eax]
c001aaca:	50                   	push   eax
c001aacb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001aace:	83 c4 10             	add    esp,0x10
c001aad1:	31 c0                	xor    eax,eax
c001aad3:	83 c4 0c             	add    esp,0xc
c001aad6:	c3                   	ret    
c001aad7:	90                   	nop

c001aad8 <SATA::powerSaving(PowerSavingLevel)>:
c001aad8:	c3                   	ret    
c001aad9:	90                   	nop

c001aada <SATA::open(int, int, void*)>:
c001aada:	56                   	push   esi
c001aadb:	53                   	push   ebx
c001aadc:	50                   	push   eax
c001aadd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aae5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001aaef:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001aaf5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001aaff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab03:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ab0d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ab13:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ab1a:	e8 c7 d6 fe ff       	call   c00081e6 <Phys::allocatePage()>
c001ab1f:	89 c6                	mov    esi,eax
c001ab21:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ab27:	81 c6 00 10 00 00    	add    esi,0x1000
c001ab2d:	e8 b4 d6 fe ff       	call   c00081e6 <Phys::allocatePage()>
c001ab32:	39 c6                	cmp    esi,eax
c001ab34:	74 10                	je     c001ab46 <SATA::open(int, int, void*)+0x6c>
c001ab36:	83 ec 0c             	sub    esp,0xc
c001ab39:	68 50 f3 01 c0       	push   0xc001f350
c001ab3e:	e8 b4 5b ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c001ab43:	83 c4 10             	add    esp,0x10
c001ab46:	83 ec 0c             	sub    esp,0xc
c001ab49:	6a 02                	push   0x2
c001ab4b:	e8 05 ee fe ff       	call   c0009955 <Virt::allocateKernelVirtualPages(int)>
c001ab50:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ab56:	6a 03                	push   0x3
c001ab58:	50                   	push   eax
c001ab59:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001ab5f:	ff 35 f0 09 02 c0    	push   DWORD PTR ds:0xc00209f0
c001ab65:	e8 80 f4 fe ff       	call   c0009fea <VAS::mapPage(unsigned long, unsigned long, int)>
c001ab6a:	83 c4 14             	add    esp,0x14
c001ab6d:	53                   	push   ebx
c001ab6e:	e8 ab 18 ff ff       	call   c000c41e <PhysicalDisk::startCache()>
c001ab73:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ab76:	e8 1b 29 ff ff       	call   c000d496 <createPartitionsForDisk(PhysicalDisk*)>
c001ab7b:	83 c4 14             	add    esp,0x14
c001ab7e:	31 c0                	xor    eax,eax
c001ab80:	5b                   	pop    ebx
c001ab81:	5e                   	pop    esi
c001ab82:	c3                   	ret    
c001ab83:	90                   	nop

c001ab84 <SATA::SATA()>:
c001ab84:	83 ec 0c             	sub    esp,0xc
c001ab87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab8b:	83 ec 04             	sub    esp,0x4
c001ab8e:	68 00 02 00 00       	push   0x200
c001ab93:	68 64 f3 01 c0       	push   0xc001f364
c001ab98:	50                   	push   eax
c001ab99:	e8 18 18 ff ff       	call   c000c3b6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ab9e:	83 c4 10             	add    esp,0x10
c001aba1:	ba d4 f3 01 c0       	mov    edx,0xc001f3d4
c001aba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abaa:	89 10                	mov    DWORD PTR [eax],edx
c001abac:	90                   	nop
c001abad:	83 c4 0c             	add    esp,0xc
c001abb0:	c3                   	ret    
c001abb1:	90                   	nop

c001abb2 <SATA::access(unsigned long long, int, void*, bool)>:
c001abb2:	55                   	push   ebp
c001abb3:	57                   	push   edi
c001abb4:	56                   	push   esi
c001abb5:	53                   	push   ebx
c001abb6:	83 ec 2c             	sub    esp,0x2c
c001abb9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001abbd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001abc1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001abc5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001abc9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001abcd:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001abd2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001abd6:	7e 10                	jle    c001abe8 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001abd8:	83 ec 0c             	sub    esp,0xc
c001abdb:	68 74 f3 01 c0       	push   0xc001f374
c001abe0:	e8 12 5b ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c001abe5:	83 c4 10             	add    esp,0x10
c001abe8:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001abee:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001abf4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001abfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001abfe:	89 d0                	mov    eax,edx
c001ac00:	c1 e0 07             	shl    eax,0x7
c001ac03:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ac07:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001ac11:	51                   	push   ecx
c001ac12:	8d 42 02             	lea    eax,[edx+0x2]
c001ac15:	51                   	push   ecx
c001ac16:	c1 e0 07             	shl    eax,0x7
c001ac19:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ac1d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ac21:	50                   	push   eax
c001ac22:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001ac28:	e8 e7 ef ff ff       	call   c0019c14 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001ac2d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ac31:	83 c4 10             	add    esp,0x10
c001ac34:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001ac39:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ac3d:	0f 84 4f 01 00 00    	je     c001ad92 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ac43:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ac47:	c1 e0 09             	shl    eax,0x9
c001ac4a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ac4f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ac53:	74 0e                	je     c001ac63 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001ac55:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001ac5b:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001ac5f:	89 c1                	mov    ecx,eax
c001ac61:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ac63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ac67:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ac6d:	8d 42 02             	lea    eax,[edx+0x2]
c001ac70:	c1 e0 07             	shl    eax,0x7
c001ac73:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ac77:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac79:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001ac7f:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001ac85:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ac89:	c1 e1 05             	shl    ecx,0x5
c001ac8c:	01 c8                	add    eax,ecx
c001ac8e:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001ac92:	83 e1 01             	and    ecx,0x1
c001ac95:	89 ce                	mov    esi,ecx
c001ac97:	8a 08                	mov    cl,BYTE PTR [eax]
c001ac99:	c1 e6 06             	shl    esi,0x6
c001ac9c:	83 e1 bf             	and    ecx,0xffffffbf
c001ac9f:	09 f1                	or     ecx,esi
c001aca1:	88 08                	mov    BYTE PTR [eax],cl
c001aca3:	8b 08                	mov    ecx,DWORD PTR [eax]
c001aca5:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001acab:	81 c9 05 00 01 00    	or     ecx,0x10005
c001acb1:	89 08                	mov    DWORD PTR [eax],ecx
c001acb3:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001acb9:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001acbf:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001acc5:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001acc8:	50                   	push   eax
c001acc9:	68 90 00 00 00       	push   0x90
c001acce:	6a 00                	push   0x0
c001acd0:	56                   	push   esi
c001acd1:	e8 1a 58 fe ff       	call   c00004f0 <memset>
c001acd6:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001acdc:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001ace0:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001ace6:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001acea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001acee:	83 c4 10             	add    esp,0x10
c001acf1:	48                   	dec    eax
c001acf2:	25 ff ff 3f 00       	and    eax,0x3fffff
c001acf7:	89 c1                	mov    ecx,eax
c001acf9:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001acff:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ad04:	09 c8                	or     eax,ecx
c001ad06:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001ad0c:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ad0f:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001ad16:	66 25 00 7f          	and    ax,0x7f00
c001ad1a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ad1e:	66 0d 27 80          	or     ax,0x8027
c001ad22:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001ad27:	66 89 06             	mov    WORD PTR [esi],ax
c001ad2a:	19 c0                	sbb    eax,eax
c001ad2c:	83 e0 f0             	and    eax,0xfffffff0
c001ad2f:	83 c0 35             	add    eax,0x35
c001ad32:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001ad35:	89 e8                	mov    eax,ebp
c001ad37:	c1 e8 10             	shr    eax,0x10
c001ad3a:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001ad3d:	89 e8                	mov    eax,ebp
c001ad3f:	c1 e8 18             	shr    eax,0x18
c001ad42:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001ad45:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ad49:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001ad4c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad50:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001ad53:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ad57:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001ad5b:	89 d6                	mov    esi,edx
c001ad5d:	31 c0                	xor    eax,eax
c001ad5f:	c1 e6 07             	shl    esi,0x7
c001ad62:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ad66:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001ad6c:	80 e1 88             	and    cl,0x88
c001ad6f:	74 0a                	je     c001ad7b <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001ad71:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ad76:	74 0a                	je     c001ad82 <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001ad78:	40                   	inc    eax
c001ad79:	eb eb                	jmp    c001ad66 <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001ad7b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ad80:	75 17                	jne    c001ad99 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001ad82:	83 ec 0c             	sub    esp,0xc
c001ad85:	68 ad f3 01 c0       	push   0xc001f3ad
c001ad8a:	e8 19 fe fe ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c001ad8f:	83 c4 10             	add    esp,0x10
c001ad92:	b8 01 00 00 00       	mov    eax,0x1
c001ad97:	eb 5d                	jmp    c001adf6 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ad99:	b8 01 00 00 00       	mov    eax,0x1
c001ad9e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001ada2:	c1 e2 07             	shl    edx,0x7
c001ada5:	d3 e0                	shl    eax,cl
c001ada7:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001adab:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001adb1:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001adb7:	85 c8                	test   eax,ecx
c001adb9:	74 16                	je     c001add1 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001adbb:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001adc1:	0f ba e1 1e          	bt     ecx,0x1e
c001adc5:	73 ea                	jae    c001adb1 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001adc7:	83 ec 0c             	sub    esp,0xc
c001adca:	68 bb f3 01 c0       	push   0xc001f3bb
c001adcf:	eb b9                	jmp    c001ad8a <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001add1:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001add7:	0f ba e0 1e          	bt     eax,0x1e
c001addb:	72 b5                	jb     c001ad92 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001addd:	31 c0                	xor    eax,eax
c001addf:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ade4:	75 10                	jne    c001adf6 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ade6:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001adec:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001adf0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001adf4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001adf6:	83 c4 2c             	add    esp,0x2c
c001adf9:	5b                   	pop    ebx
c001adfa:	5e                   	pop    esi
c001adfb:	5f                   	pop    edi
c001adfc:	5d                   	pop    ebp
c001adfd:	c3                   	ret    

c001adfe <SATA::read(unsigned long long, int, void*)>:
c001adfe:	57                   	push   edi
c001adff:	b8 04 00 00 00       	mov    eax,0x4
c001ae04:	56                   	push   esi
c001ae05:	53                   	push   ebx
c001ae06:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ae0a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ae0e:	8d 7a ff             	lea    edi,[edx-0x1]
c001ae11:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ae15:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ae19:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ae1f:	77 25                	ja     c001ae46 <SATA::read(unsigned long long, int, void*)+0x48>
c001ae21:	b8 06 00 00 00       	mov    eax,0x6
c001ae26:	85 f6                	test   esi,esi
c001ae28:	74 1c                	je     c001ae46 <SATA::read(unsigned long long, int, void*)+0x48>
c001ae2a:	50                   	push   eax
c001ae2b:	50                   	push   eax
c001ae2c:	6a 00                	push   0x0
c001ae2e:	56                   	push   esi
c001ae2f:	52                   	push   edx
c001ae30:	53                   	push   ebx
c001ae31:	51                   	push   ecx
c001ae32:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae36:	e8 77 fd ff ff       	call   c001abb2 <SATA::access(unsigned long long, int, void*, bool)>
c001ae3b:	83 c4 20             	add    esp,0x20
c001ae3e:	85 c0                	test   eax,eax
c001ae40:	0f 95 c0             	setne  al
c001ae43:	0f b6 c0             	movzx  eax,al
c001ae46:	5b                   	pop    ebx
c001ae47:	5e                   	pop    esi
c001ae48:	5f                   	pop    edi
c001ae49:	c3                   	ret    

c001ae4a <SATA::write(unsigned long long, int, void*)>:
c001ae4a:	55                   	push   ebp
c001ae4b:	b8 04 00 00 00       	mov    eax,0x4
c001ae50:	57                   	push   edi
c001ae51:	56                   	push   esi
c001ae52:	53                   	push   ebx
c001ae53:	83 ec 0c             	sub    esp,0xc
c001ae56:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ae5a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ae5e:	8d 73 ff             	lea    esi,[ebx-0x1]
c001ae61:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ae65:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001ae69:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001ae6f:	77 3d                	ja     c001aeae <SATA::write(unsigned long long, int, void*)+0x64>
c001ae71:	b8 06 00 00 00       	mov    eax,0x6
c001ae76:	85 ed                	test   ebp,ebp
c001ae78:	74 34                	je     c001aeae <SATA::write(unsigned long long, int, void*)+0x64>
c001ae7a:	c1 e3 09             	shl    ebx,0x9
c001ae7d:	01 eb                	add    ebx,ebp
c001ae7f:	89 d6                	mov    esi,edx
c001ae81:	89 cf                	mov    edi,ecx
c001ae83:	83 c6 01             	add    esi,0x1
c001ae86:	83 d7 00             	adc    edi,0x0
c001ae89:	50                   	push   eax
c001ae8a:	50                   	push   eax
c001ae8b:	6a 01                	push   0x1
c001ae8d:	55                   	push   ebp
c001ae8e:	81 c5 00 02 00 00    	add    ebp,0x200
c001ae94:	6a 01                	push   0x1
c001ae96:	51                   	push   ecx
c001ae97:	52                   	push   edx
c001ae98:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ae9c:	e8 11 fd ff ff       	call   c001abb2 <SATA::access(unsigned long long, int, void*, bool)>
c001aea1:	83 c4 20             	add    esp,0x20
c001aea4:	89 f2                	mov    edx,esi
c001aea6:	89 f9                	mov    ecx,edi
c001aea8:	39 dd                	cmp    ebp,ebx
c001aeaa:	75 d3                	jne    c001ae7f <SATA::write(unsigned long long, int, void*)+0x35>
c001aeac:	31 c0                	xor    eax,eax
c001aeae:	83 c4 0c             	add    esp,0xc
c001aeb1:	5b                   	pop    ebx
c001aeb2:	5e                   	pop    esi
c001aeb3:	5f                   	pop    edi
c001aeb4:	5d                   	pop    ebp
c001aeb5:	c3                   	ret    

c001aeb6 <SATAPI::write(unsigned long long, int, void*)>:
c001aeb6:	b8 03 00 00 00       	mov    eax,0x3
c001aebb:	c3                   	ret    

c001aebc <SATAPI::close(int, int, void*)>:
c001aebc:	83 ec 0c             	sub    esp,0xc
c001aebf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aec3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001aec9:	85 c0                	test   eax,eax
c001aecb:	74 0c                	je     c001aed9 <SATAPI::close(int, int, void*)+0x1d>
c001aecd:	83 ec 0c             	sub    esp,0xc
c001aed0:	8b 10                	mov    edx,DWORD PTR [eax]
c001aed2:	50                   	push   eax
c001aed3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001aed6:	83 c4 10             	add    esp,0x10
c001aed9:	31 c0                	xor    eax,eax
c001aedb:	83 c4 0c             	add    esp,0xc
c001aede:	c3                   	ret    
c001aedf:	90                   	nop

c001aee0 <SATAPI::open(int, int, void*)>:
c001aee0:	56                   	push   esi
c001aee1:	53                   	push   ebx
c001aee2:	51                   	push   ecx
c001aee3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aee7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aeeb:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001aef5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001aefb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001af05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af09:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001af13:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001af19:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001af20:	e8 c1 d2 fe ff       	call   c00081e6 <Phys::allocatePage()>
c001af25:	89 c6                	mov    esi,eax
c001af27:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001af2d:	81 c6 00 10 00 00    	add    esi,0x1000
c001af33:	e8 ae d2 fe ff       	call   c00081e6 <Phys::allocatePage()>
c001af38:	39 c6                	cmp    esi,eax
c001af3a:	74 10                	je     c001af4c <SATAPI::open(int, int, void*)+0x6c>
c001af3c:	83 ec 0c             	sub    esp,0xc
c001af3f:	68 04 f4 01 c0       	push   0xc001f404
c001af44:	e8 ae 57 ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c001af49:	83 c4 10             	add    esp,0x10
c001af4c:	83 ec 0c             	sub    esp,0xc
c001af4f:	6a 02                	push   0x2
c001af51:	e8 ff e9 fe ff       	call   c0009955 <Virt::allocateKernelVirtualPages(int)>
c001af56:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001af5c:	6a 03                	push   0x3
c001af5e:	50                   	push   eax
c001af5f:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001af65:	ff 35 f0 09 02 c0    	push   DWORD PTR ds:0xc00209f0
c001af6b:	e8 7a f0 fe ff       	call   c0009fea <VAS::mapPage(unsigned long, unsigned long, int)>
c001af70:	83 c4 14             	add    esp,0x14
c001af73:	68 74 01 00 00       	push   0x174
c001af78:	e8 9c ce fe ff       	call   c0007e19 <malloc>
c001af7d:	83 c4 0c             	add    esp,0xc
c001af80:	89 c6                	mov    esi,eax
c001af82:	6a 00                	push   0x0
c001af84:	68 ff ff ff 7f       	push   0x7fffffff
c001af89:	6a 00                	push   0x0
c001af8b:	6a 00                	push   0x0
c001af8d:	53                   	push   ebx
c001af8e:	68 1a f4 01 c0       	push   0xc001f41a
c001af93:	50                   	push   eax
c001af94:	e8 c9 20 ff ff       	call   c000d062 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001af99:	83 c4 14             	add    esp,0x14
c001af9c:	56                   	push   esi
c001af9d:	e8 76 21 ff ff       	call   c000d118 <LogicalDisk::assignDriveLetter()>
c001afa2:	5a                   	pop    edx
c001afa3:	0f be c0             	movsx  eax,al
c001afa6:	59                   	pop    ecx
c001afa7:	50                   	push   eax
c001afa8:	68 08 f3 01 c0       	push   0xc001f308
c001afad:	e8 f6 fb fe ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c001afb2:	58                   	pop    eax
c001afb3:	5a                   	pop    edx
c001afb4:	56                   	push   esi
c001afb5:	53                   	push   ebx
c001afb6:	e8 2d 10 ff ff       	call   c000bfe8 <Device::addChild(Device*)>
c001afbb:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001afc1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001afc4:	e8 55 14 ff ff       	call   c000c41e <PhysicalDisk::startCache()>
c001afc9:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001afd0:	31 c0                	xor    eax,eax
c001afd2:	83 c4 14             	add    esp,0x14
c001afd5:	5b                   	pop    ebx
c001afd6:	5e                   	pop    esi
c001afd7:	c3                   	ret    

c001afd8 <SATAPI::SATAPI()>:
c001afd8:	83 ec 0c             	sub    esp,0xc
c001afdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afdf:	83 ec 04             	sub    esp,0x4
c001afe2:	68 00 08 00 00       	push   0x800
c001afe7:	68 28 f4 01 c0       	push   0xc001f428
c001afec:	50                   	push   eax
c001afed:	e8 c4 13 ff ff       	call   c000c3b6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001aff2:	83 c4 10             	add    esp,0x10
c001aff5:	ba 64 f5 01 c0       	mov    edx,0xc001f564
c001affa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001affe:	89 10                	mov    DWORD PTR [eax],edx
c001b000:	90                   	nop
c001b001:	83 c4 0c             	add    esp,0xc
c001b004:	c3                   	ret    
c001b005:	90                   	nop

c001b006 <SATAPI::diskRemoved()>:
c001b006:	c3                   	ret    
c001b007:	90                   	nop

c001b008 <SATAPI::diskInserted()>:
c001b008:	83 ec 18             	sub    esp,0x18
c001b00b:	68 34 f4 01 c0       	push   0xc001f434
c001b010:	e8 93 fb fe ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c001b015:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b019:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001b020:	83 c4 1c             	add    esp,0x1c
c001b023:	c3                   	ret    

c001b024 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001b024:	55                   	push   ebp
c001b025:	57                   	push   edi
c001b026:	56                   	push   esi
c001b027:	53                   	push   ebx
c001b028:	83 ec 38             	sub    esp,0x38
c001b02b:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001b02f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001b033:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001b037:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b03b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b03f:	68 4c f4 01 c0       	push   0xc001f44c
c001b044:	e8 5f fb fe ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c001b049:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001b04f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b055:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b059:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001b05f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b063:	c1 e0 07             	shl    eax,0x7
c001b066:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001b06a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b06e:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001b078:	58                   	pop    eax
c001b079:	5a                   	pop    edx
c001b07a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b07e:	8d 58 02             	lea    ebx,[eax+0x2]
c001b081:	c1 e3 07             	shl    ebx,0x7
c001b084:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001b088:	53                   	push   ebx
c001b089:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b08f:	e8 80 eb ff ff       	call   c0019c14 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001b094:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b098:	83 c4 10             	add    esp,0x10
c001b09b:	b8 01 00 00 00       	mov    eax,0x1
c001b0a0:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001b0a5:	0f 84 4c 02 00 00    	je     c001b2f7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001b0ab:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b0b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b0b3:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001b0b9:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001b0bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b0c3:	c1 e1 05             	shl    ecx,0x5
c001b0c6:	01 c8                	add    eax,ecx
c001b0c8:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b0ca:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001b0d0:	81 c9 25 00 01 00    	or     ecx,0x10025
c001b0d6:	89 08                	mov    DWORD PTR [eax],ecx
c001b0d8:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b0de:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001b0e4:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001b0ea:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001b0ed:	8d 7b 40             	lea    edi,[ebx+0x40]
c001b0f0:	50                   	push   eax
c001b0f1:	68 90 00 00 00       	push   0x90
c001b0f6:	6a 00                	push   0x0
c001b0f8:	53                   	push   ebx
c001b0f9:	e8 f2 53 fe ff       	call   c00004f0 <memset>
c001b0fe:	b9 0c 00 00 00       	mov    ecx,0xc
c001b103:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001b107:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b109:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001b10f:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001b113:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001b119:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001b11d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001b121:	48                   	dec    eax
c001b122:	25 ff ff 3f 00       	and    eax,0x3fffff
c001b127:	89 c1                	mov    ecx,eax
c001b129:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001b12f:	25 00 00 c0 ff       	and    eax,0xffc00000
c001b134:	09 c8                	or     eax,ecx
c001b136:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001b13c:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001b13f:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001b146:	66 25 00 7f          	and    ax,0x7f00
c001b14a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b14e:	66 0d 27 80          	or     ax,0x8027
c001b152:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001b156:	66 89 03             	mov    WORD PTR [ebx],ax
c001b159:	89 d0                	mov    eax,edx
c001b15b:	c1 ea 18             	shr    edx,0x18
c001b15e:	c1 e8 10             	shr    eax,0x10
c001b161:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001b164:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001b167:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b16b:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001b16e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b172:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001b175:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b179:	83 c4 10             	add    esp,0x10
c001b17c:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001b180:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b184:	31 c0                	xor    eax,eax
c001b186:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001b18c:	80 e1 88             	and    cl,0x88
c001b18f:	74 0a                	je     c001b19b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c001b191:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b196:	74 0a                	je     c001b1a2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c001b198:	40                   	inc    eax
c001b199:	eb eb                	jmp    c001b186 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c001b19b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b1a0:	75 16                	jne    c001b1b8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x194>
c001b1a2:	83 ec 0c             	sub    esp,0xc
c001b1a5:	68 66 f4 01 c0       	push   0xc001f466
c001b1aa:	e8 f9 f9 fe ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c001b1af:	5f                   	pop    edi
c001b1b0:	5d                   	pop    ebp
c001b1b1:	68 7b f4 01 c0       	push   0xc001f47b
c001b1b6:	eb 4f                	jmp    c001b207 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e3>
c001b1b8:	be 01 00 00 00       	mov    esi,0x1
c001b1bd:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b1c1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b1c5:	d3 e6                	shl    esi,cl
c001b1c7:	c1 e7 07             	shl    edi,0x7
c001b1ca:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001b1d0:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001b1d5:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001b1d9:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001b1df:	85 c6                	test   esi,eax
c001b1e1:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001b1e7:	0f 84 cb 00 00 00    	je     c001b2b8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c001b1ed:	0f ba e0 1e          	bt     eax,0x1e
c001b1f1:	73 2c                	jae    c001b21f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c001b1f3:	83 ec 0c             	sub    esp,0xc
c001b1f6:	68 8d f4 01 c0       	push   0xc001f48d
c001b1fb:	e8 a8 f9 fe ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c001b200:	5b                   	pop    ebx
c001b201:	5e                   	pop    esi
c001b202:	68 a0 f4 01 c0       	push   0xc001f4a0
c001b207:	ff 35 44 09 02 c0    	push   DWORD PTR ds:0xc0020944
c001b20d:	e8 76 dc fe ff       	call   c0008e88 <VgaText::puts(char const*)>
c001b212:	83 c4 10             	add    esp,0x10
c001b215:	b8 01 00 00 00       	mov    eax,0x1
c001b21a:	e9 d8 00 00 00       	jmp    c001b2f7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001b21f:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001b225:	83 f8 0d             	cmp    eax,0xd
c001b228:	77 0a                	ja     c001b234 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x210>
c001b22a:	83 ec 0c             	sub    esp,0xc
c001b22d:	68 c8 00 00 00       	push   0xc8
c001b232:	eb 28                	jmp    c001b25c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x238>
c001b234:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001b23a:	83 f8 0d             	cmp    eax,0xd
c001b23d:	77 0a                	ja     c001b249 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x225>
c001b23f:	83 ec 0c             	sub    esp,0xc
c001b242:	68 58 02 00 00       	push   0x258
c001b247:	eb 13                	jmp    c001b25c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x238>
c001b249:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001b24f:	83 f8 06             	cmp    eax,0x6
c001b252:	77 10                	ja     c001b264 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x240>
c001b254:	83 ec 0c             	sub    esp,0xc
c001b257:	68 dc 05 00 00       	push   0x5dc
c001b25c:	e8 eb 8a ff ff       	call   c0013d4c <milliTenthSleep(unsigned int)>
c001b261:	83 c4 10             	add    esp,0x10
c001b264:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001b268:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001b26b:	75 06                	jne    c001b273 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24f>
c001b26d:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001b271:	74 15                	je     c001b288 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001b273:	83 fb 06             	cmp    ebx,0x6
c001b276:	77 10                	ja     c001b288 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001b278:	83 ec 0c             	sub    esp,0xc
c001b27b:	68 c4 09 00 00       	push   0x9c4
c001b280:	e8 c7 8a ff ff       	call   c0013d4c <milliTenthSleep(unsigned int)>
c001b285:	83 c4 10             	add    esp,0x10
c001b288:	43                   	inc    ebx
c001b289:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001b28f:	0f 85 44 ff ff ff    	jne    c001b1d9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b5>
c001b295:	51                   	push   ecx
c001b296:	51                   	push   ecx
c001b297:	68 b1 f4 01 c0       	push   0xc001f4b1
c001b29c:	ff 35 44 09 02 c0    	push   DWORD PTR ds:0xc0020944
c001b2a2:	e8 e1 db fe ff       	call   c0008e88 <VgaText::puts(char const*)>
c001b2a7:	c7 04 24 c1 f4 01 c0 	mov    DWORD PTR [esp],0xc001f4c1
c001b2ae:	e8 f5 f8 fe ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c001b2b3:	e9 5a ff ff ff       	jmp    c001b212 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ee>
c001b2b8:	0f ba e0 1e          	bt     eax,0x1e
c001b2bc:	73 19                	jae    c001b2d7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b3>
c001b2be:	83 ec 0c             	sub    esp,0xc
c001b2c1:	68 d5 f4 01 c0       	push   0xc001f4d5
c001b2c6:	e8 dd f8 fe ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c001b2cb:	58                   	pop    eax
c001b2cc:	5a                   	pop    edx
c001b2cd:	68 ea f4 01 c0       	push   0xc001f4ea
c001b2d2:	e9 30 ff ff ff       	jmp    c001b207 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e3>
c001b2d7:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001b2dc:	74 17                	je     c001b2f5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001b2de:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001b2e3:	74 10                	je     c001b2f5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001b2e5:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001b2eb:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001b2ef:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b2f3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b2f5:	31 c0                	xor    eax,eax
c001b2f7:	83 c4 2c             	add    esp,0x2c
c001b2fa:	5b                   	pop    ebx
c001b2fb:	5e                   	pop    esi
c001b2fc:	5f                   	pop    edi
c001b2fd:	5d                   	pop    ebp
c001b2fe:	c3                   	ret    
c001b2ff:	90                   	nop

c001b300 <SATAPI::eject()>:
c001b300:	57                   	push   edi
c001b301:	b9 03 00 00 00       	mov    ecx,0x3
c001b306:	83 ec 18             	sub    esp,0x18
c001b309:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b30d:	fc                   	cld    
c001b30e:	31 c0                	xor    eax,eax
c001b310:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b312:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001b317:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001b31c:	50                   	push   eax
c001b31d:	6a 00                	push   0x0
c001b31f:	6a 00                	push   0x0
c001b321:	6a 00                	push   0x0
c001b323:	6a 00                	push   0x0
c001b325:	6a 02                	push   0x2
c001b327:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b32b:	50                   	push   eax
c001b32c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b330:	e8 ef fc ff ff       	call   c001b024 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b335:	31 c0                	xor    eax,eax
c001b337:	83 c4 38             	add    esp,0x38
c001b33a:	5f                   	pop    edi
c001b33b:	c3                   	ret    

c001b33c <SATAPI::read(unsigned long long, int, void*)>:
c001b33c:	57                   	push   edi
c001b33d:	56                   	push   esi
c001b33e:	53                   	push   ebx
c001b33f:	83 ec 3c             	sub    esp,0x3c
c001b342:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b346:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001b34a:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b34e:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001b352:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b356:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b35a:	68 fd f4 01 c0       	push   0xc001f4fd
c001b35f:	e8 44 f8 fe ff       	call   c000aba8 <Dbg::kprintf(char const*, ...)>
c001b364:	83 c4 10             	add    esp,0x10
c001b367:	83 fe 04             	cmp    esi,0x4
c001b36a:	7e 10                	jle    c001b37c <SATAPI::read(unsigned long long, int, void*)+0x40>
c001b36c:	83 ec 0c             	sub    esp,0xc
c001b36f:	68 0e f5 01 c0       	push   0xc001f50e
c001b374:	e8 7e 53 ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c001b379:	83 c4 10             	add    esp,0x10
c001b37c:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b382:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001b388:	51                   	push   ecx
c001b389:	50                   	push   eax
c001b38a:	83 c0 02             	add    eax,0x2
c001b38d:	c1 e0 07             	shl    eax,0x7
c001b390:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001b396:	50                   	push   eax
c001b397:	52                   	push   edx
c001b398:	e8 3b e9 ff ff       	call   c0019cd8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b39d:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001b3a1:	b9 03 00 00 00       	mov    ecx,0x3
c001b3a6:	fc                   	cld    
c001b3a7:	31 c0                	xor    eax,eax
c001b3a9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b3ab:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001b3b0:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001b3b5:	83 c4 0c             	add    esp,0xc
c001b3b8:	6a 00                	push   0x0
c001b3ba:	6a 00                	push   0x0
c001b3bc:	6a 00                	push   0x0
c001b3be:	6a 00                	push   0x0
c001b3c0:	6a 02                	push   0x2
c001b3c2:	8d 44 24 30          	lea    eax,[esp+0x30]
c001b3c6:	50                   	push   eax
c001b3c7:	53                   	push   ebx
c001b3c8:	e8 57 fc ff ff       	call   c001b024 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b3cd:	83 c4 20             	add    esp,0x20
c001b3d0:	85 c0                	test   eax,eax
c001b3d2:	74 1f                	je     c001b3f3 <SATAPI::read(unsigned long long, int, void*)+0xb7>
c001b3d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b3d8:	50                   	push   eax
c001b3d9:	50                   	push   eax
c001b3da:	68 38 f5 01 c0       	push   0xc001f538
c001b3df:	ff 35 44 09 02 c0    	push   DWORD PTR ds:0xc0020944
c001b3e5:	e8 9e da fe ff       	call   c0008e88 <VgaText::puts(char const*)>
c001b3ea:	58                   	pop    eax
c001b3eb:	5a                   	pop    edx
c001b3ec:	68 40 f5 01 c0       	push   0xc001f540
c001b3f1:	eb 61                	jmp    c001b454 <SATAPI::read(unsigned long long, int, void*)+0x118>
c001b3f3:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b3f7:	b9 03 00 00 00       	mov    ecx,0x3
c001b3fc:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b3fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b402:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001b407:	0f c8                	bswap  eax
c001b409:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001b40d:	89 f0                	mov    eax,esi
c001b40f:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b413:	57                   	push   edi
c001b414:	56                   	push   esi
c001b415:	c1 e6 0b             	shl    esi,0xb
c001b418:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b41c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b420:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b424:	56                   	push   esi
c001b425:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001b429:	50                   	push   eax
c001b42a:	53                   	push   ebx
c001b42b:	e8 f4 fb ff ff       	call   c001b024 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b430:	83 c4 20             	add    esp,0x20
c001b433:	85 c0                	test   eax,eax
c001b435:	74 2f                	je     c001b466 <SATAPI::read(unsigned long long, int, void*)+0x12a>
c001b437:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b43b:	50                   	push   eax
c001b43c:	50                   	push   eax
c001b43d:	68 4a f5 01 c0       	push   0xc001f54a
c001b442:	ff 35 44 09 02 c0    	push   DWORD PTR ds:0xc0020944
c001b448:	e8 3b da fe ff       	call   c0008e88 <VgaText::puts(char const*)>
c001b44d:	5a                   	pop    edx
c001b44e:	59                   	pop    ecx
c001b44f:	68 52 f5 01 c0       	push   0xc001f552
c001b454:	ff 35 44 09 02 c0    	push   DWORD PTR ds:0xc0020944
c001b45a:	e8 29 da fe ff       	call   c0008e88 <VgaText::puts(char const*)>
c001b45f:	83 c4 10             	add    esp,0x10
c001b462:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b466:	83 c4 30             	add    esp,0x30
c001b469:	5b                   	pop    ebx
c001b46a:	5e                   	pop    esi
c001b46b:	5f                   	pop    edi
c001b46c:	c3                   	ret    
c001b46d:	90                   	nop

c001b46e <SATAPI::detectMedia()>:
c001b46e:	c3                   	ret    
c001b46f:	90                   	nop

c001b470 <IOAPIC::close(int, int, void*)>:
c001b470:	b8 00 00 00 00       	mov    eax,0x0
c001b475:	c3                   	ret    

c001b476 <apicGetBase()>:
c001b476:	55                   	push   ebp
c001b477:	89 e5                	mov    ebp,esp
c001b479:	83 ec 18             	sub    esp,0x18
c001b47c:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c001b481:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001b487:	83 e0 08             	and    eax,0x8
c001b48a:	84 c0                	test   al,al
c001b48c:	75 07                	jne    c001b495 <apicGetBase()+0x1f>
c001b48e:	b8 00 00 00 00       	mov    eax,0x0
c001b493:	eb 21                	jmp    c001b4b6 <apicGetBase()+0x40>
c001b495:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c001b49a:	83 ec 08             	sub    esp,0x8
c001b49d:	6a 1b                	push   0x1b
c001b49f:	50                   	push   eax
c001b4a0:	e8 b1 bf fe ff       	call   c0007456 <Computer::rdmsr(unsigned int)>
c001b4a5:	83 c4 10             	add    esp,0x10
c001b4a8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b4ab:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001b4ae:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b4b1:	25 00 00 ff ff       	and    eax,0xffff0000
c001b4b6:	c9                   	leave  
c001b4b7:	c3                   	ret    

c001b4b8 <IOAPIC::IOAPIC()>:
c001b4b8:	83 ec 0c             	sub    esp,0xc
c001b4bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4bf:	83 ec 08             	sub    esp,0x8
c001b4c2:	68 94 f5 01 c0       	push   0xc001f594
c001b4c7:	50                   	push   eax
c001b4c8:	e8 b3 0c ff ff       	call   c000c180 <Device::Device(char const*)>
c001b4cd:	83 c4 10             	add    esp,0x10
c001b4d0:	ba a4 f5 01 c0       	mov    edx,0xc001f5a4
c001b4d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4d9:	89 10                	mov    DWORD PTR [eax],edx
c001b4db:	90                   	nop
c001b4dc:	83 c4 0c             	add    esp,0xc
c001b4df:	c3                   	ret    

c001b4e0 <apicOpen()>:
c001b4e0:	55                   	push   ebp
c001b4e1:	89 e5                	mov    ebp,esp
c001b4e3:	53                   	push   ebx
c001b4e4:	83 ec 34             	sub    esp,0x34
c001b4e7:	a0 00 48 02 c0       	mov    al,ds:0xc0024800
c001b4ec:	83 f0 01             	xor    eax,0x1
c001b4ef:	84 c0                	test   al,al
c001b4f1:	0f 84 9d 00 00 00    	je     c001b594 <apicOpen()+0xb4>
c001b4f7:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001b4fb:	a0 c0 31 02 c0       	mov    al,ds:0xc00231c0
c001b500:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001b503:	0f 83 84 00 00 00    	jae    c001b58d <apicOpen()+0xad>
c001b509:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001b510:	83 ec 0c             	sub    esp,0xc
c001b513:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001b516:	e8 fe c8 fe ff       	call   c0007e19 <malloc>
c001b51b:	83 c4 10             	add    esp,0x10
c001b51e:	89 c3                	mov    ebx,eax
c001b520:	83 ec 0c             	sub    esp,0xc
c001b523:	53                   	push   ebx
c001b524:	e8 8f ff ff ff       	call   c001b4b8 <IOAPIC::IOAPIC()>
c001b529:	83 c4 10             	add    esp,0x10
c001b52c:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001b52f:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b532:	25 ff 00 00 00       	and    eax,0xff
c001b537:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001b53a:	89 14 85 e0 47 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb820],edx
c001b541:	a1 c0 47 02 c0       	mov    eax,ds:0xc00247c0
c001b546:	40                   	inc    eax
c001b547:	a3 c0 47 02 c0       	mov    ds:0xc00247c0,eax
c001b54c:	a1 f8 08 02 c0       	mov    eax,ds:0xc00208f8
c001b551:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001b557:	83 ec 08             	sub    esp,0x8
c001b55a:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b55d:	50                   	push   eax
c001b55e:	e8 85 0a ff ff       	call   c000bfe8 <Device::addChild(Device*)>
c001b563:	83 c4 10             	add    esp,0x10
c001b566:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b569:	8b 00                	mov    eax,DWORD PTR [eax]
c001b56b:	83 c0 08             	add    eax,0x8
c001b56e:	8b 10                	mov    edx,DWORD PTR [eax]
c001b570:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b573:	25 ff 00 00 00       	and    eax,0xff
c001b578:	6a 00                	push   0x0
c001b57a:	6a 00                	push   0x0
c001b57c:	50                   	push   eax
c001b57d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b580:	ff d2                	call   edx
c001b582:	83 c4 10             	add    esp,0x10
c001b585:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001b588:	e9 6e ff ff ff       	jmp    c001b4fb <apicOpen()+0x1b>
c001b58d:	c6 05 00 48 02 c0 01 	mov    BYTE PTR ds:0xc0024800,0x1
c001b594:	e8 dd fe ff ff       	call   c001b476 <apicGetBase()>
c001b599:	05 f0 00 00 00       	add    eax,0xf0
c001b59e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b5a1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b5a4:	8b 00                	mov    eax,DWORD PTR [eax]
c001b5a6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b5a9:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b5b0:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b5b7:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b5ba:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b5bd:	89 10                	mov    DWORD PTR [eax],edx
c001b5bf:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b5c6:	a1 10 31 02 c0       	mov    eax,ds:0xc0023110
c001b5cb:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b5ce:	7d 70                	jge    c001b640 <apicOpen()+0x160>
c001b5d0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b5d3:	8b 04 85 20 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcee0]
c001b5da:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b5dd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b5e0:	8b 04 85 20 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcee0]
c001b5e7:	c1 e8 08             	shr    eax,0x8
c001b5ea:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b5ee:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b5f1:	8b 04 85 20 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcee0]
c001b5f8:	c1 e8 18             	shr    eax,0x18
c001b5fb:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b5fe:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b602:	75 37                	jne    c001b63b <apicOpen()+0x15b>
c001b604:	e8 6d fe ff ff       	call   c001b476 <apicGetBase()>
c001b609:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b60d:	75 07                	jne    c001b616 <apicOpen()+0x136>
c001b60f:	ba 60 03 00 00       	mov    edx,0x360
c001b614:	eb 05                	jmp    c001b61b <apicOpen()+0x13b>
c001b616:	ba 50 03 00 00       	mov    edx,0x350
c001b61b:	01 d0                	add    eax,edx
c001b61d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b620:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b623:	8b 00                	mov    eax,DWORD PTR [eax]
c001b625:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b628:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b62f:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b633:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b636:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b639:	89 10                	mov    DWORD PTR [eax],edx
c001b63b:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b63e:	eb 86                	jmp    c001b5c6 <apicOpen()+0xe6>
c001b640:	90                   	nop
c001b641:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b644:	c9                   	leave  
c001b645:	c3                   	ret    

c001b646 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b646:	55                   	push   ebp
c001b647:	89 e5                	mov    ebp,esp
c001b649:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b64c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b652:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b655:	72 1d                	jb     c001b674 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b657:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b65a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b660:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b663:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b669:	01 d0                	add    eax,edx
c001b66b:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b66e:	73 04                	jae    c001b674 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b670:	b0 01                	mov    al,0x1
c001b672:	eb 02                	jmp    c001b676 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b674:	b0 00                	mov    al,0x0
c001b676:	5d                   	pop    ebp
c001b677:	c3                   	ret    

c001b678 <IOAPIC::read(int)>:
c001b678:	55                   	push   ebp
c001b679:	89 e5                	mov    ebp,esp
c001b67b:	83 ec 10             	sub    esp,0x10
c001b67e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b681:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b687:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b68a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b68d:	31 d2                	xor    edx,edx
c001b68f:	88 c2                	mov    dl,al
c001b691:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b694:	89 10                	mov    DWORD PTR [eax],edx
c001b696:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b699:	83 c0 10             	add    eax,0x10
c001b69c:	8b 00                	mov    eax,DWORD PTR [eax]
c001b69e:	c9                   	leave  
c001b69f:	c3                   	ret    

c001b6a0 <IOAPIC::open(int, int, void*)>:
c001b6a0:	55                   	push   ebp
c001b6a1:	89 e5                	mov    ebp,esp
c001b6a3:	57                   	push   edi
c001b6a4:	56                   	push   esi
c001b6a5:	53                   	push   ebx
c001b6a6:	83 ec 04             	sub    esp,0x4
c001b6a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6ac:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b6af:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b6b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6b8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b6be:	8b 14 85 00 32 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdce00]
c001b6c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6c8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b6ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6d1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b6d7:	8b 14 85 80 32 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcd80]
c001b6de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6e1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b6e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6ea:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b6f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6f3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b6f9:	89 c6                	mov    esi,eax
c001b6fb:	81 e6 ff 00 00 00    	and    esi,0xff
c001b701:	89 d0                	mov    eax,edx
c001b703:	ba 00 00 00 00       	mov    edx,0x0
c001b708:	89 c7                	mov    edi,eax
c001b70a:	83 e7 ff             	and    edi,0xffffffff
c001b70d:	89 f9                	mov    ecx,edi
c001b70f:	89 d0                	mov    eax,edx
c001b711:	25 ff 00 00 00       	and    eax,0xff
c001b716:	89 c3                	mov    ebx,eax
c001b718:	89 c8                	mov    eax,ecx
c001b71a:	89 da                	mov    edx,ebx
c001b71c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b71f:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b722:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b726:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b72a:	83 e0 00             	and    eax,0x0
c001b72d:	09 d0                	or     eax,edx
c001b72f:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b733:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b736:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b73c:	8d 50 01             	lea    edx,[eax+0x1]
c001b73f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b742:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b748:	31 d2                	xor    edx,edx
c001b74a:	88 c2                	mov    dl,al
c001b74c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b74f:	83 c2 08             	add    edx,0x8
c001b752:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b756:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b75c:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b762:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b766:	6a 01                	push   0x1
c001b768:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b76b:	e8 08 ff ff ff       	call   c001b678 <IOAPIC::read(int)>
c001b770:	83 c4 08             	add    esp,0x8
c001b773:	c1 f8 10             	sar    eax,0x10
c001b776:	25 ff 00 00 00       	and    eax,0xff
c001b77b:	8d 50 01             	lea    edx,[eax+0x1]
c001b77e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b781:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b787:	b8 00 00 00 00       	mov    eax,0x0
c001b78c:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b78f:	5b                   	pop    ebx
c001b790:	5e                   	pop    esi
c001b791:	5f                   	pop    edi
c001b792:	5d                   	pop    ebp
c001b793:	c3                   	ret    

c001b794 <IOAPIC::write(int, int)>:
c001b794:	55                   	push   ebp
c001b795:	89 e5                	mov    ebp,esp
c001b797:	83 ec 10             	sub    esp,0x10
c001b79a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b79d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b7a3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b7a6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b7a9:	31 d2                	xor    edx,edx
c001b7ab:	88 c2                	mov    dl,al
c001b7ad:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b7b0:	89 10                	mov    DWORD PTR [eax],edx
c001b7b2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b7b5:	8d 50 10             	lea    edx,[eax+0x10]
c001b7b8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b7bb:	89 02                	mov    DWORD PTR [edx],eax
c001b7bd:	90                   	nop
c001b7be:	c9                   	leave  
c001b7bf:	c3                   	ret    

c001b7c0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001b7c0:	55                   	push   ebp
c001b7c1:	89 e5                	mov    ebp,esp
c001b7c3:	53                   	push   ebx
c001b7c4:	83 ec 2c             	sub    esp,0x2c
c001b7c7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b7ca:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001b7cd:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001b7d0:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001b7d3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001b7d6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b7d9:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b7dc:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001b7df:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001b7e2:	88 d8                	mov    al,bl
c001b7e4:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001b7e7:	88 c8                	mov    al,cl
c001b7e9:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001b7ec:	88 d0                	mov    al,dl
c001b7ee:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001b7f1:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b7f4:	25 ff 00 00 00       	and    eax,0xff
c001b7f9:	83 c0 08             	add    eax,0x8
c001b7fc:	01 c0                	add    eax,eax
c001b7fe:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b801:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b804:	25 ff 00 00 00       	and    eax,0xff
c001b809:	83 c0 08             	add    eax,0x8
c001b80c:	01 c0                	add    eax,eax
c001b80e:	40                   	inc    eax
c001b80f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001b812:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b815:	50                   	push   eax
c001b816:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b819:	e8 5a fe ff ff       	call   c001b678 <IOAPIC::read(int)>
c001b81e:	83 c4 08             	add    esp,0x8
c001b821:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b824:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001b82b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b82e:	c1 e0 18             	shl    eax,0x18
c001b831:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001b834:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001b837:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b83a:	52                   	push   edx
c001b83b:	50                   	push   eax
c001b83c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b83f:	e8 50 ff ff ff       	call   c001b794 <IOAPIC::write(int, int)>
c001b844:	83 c4 0c             	add    esp,0xc
c001b847:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b84a:	50                   	push   eax
c001b84b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b84e:	e8 25 fe ff ff       	call   c001b678 <IOAPIC::read(int)>
c001b853:	83 c4 08             	add    esp,0x8
c001b856:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001b859:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001b860:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001b867:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001b86e:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001b872:	74 09                	je     c001b87d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001b874:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001b87b:	eb 07                	jmp    c001b884 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001b87d:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001b884:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001b888:	74 09                	je     c001b893 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001b88a:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001b891:	eb 07                	jmp    c001b89a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001b893:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001b89a:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001b8a1:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001b8a4:	25 ff 00 00 00       	and    eax,0xff
c001b8a9:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001b8ac:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001b8af:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b8b2:	52                   	push   edx
c001b8b3:	50                   	push   eax
c001b8b4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b8b7:	e8 d8 fe ff ff       	call   c001b794 <IOAPIC::write(int, int)>
c001b8bc:	83 c4 0c             	add    esp,0xc
c001b8bf:	90                   	nop
c001b8c0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b8c3:	c9                   	leave  
c001b8c4:	c3                   	ret    
c001b8c5:	66 90                	xchg   ax,ax
c001b8c7:	90                   	nop

c001b8c8 <APICTimer::close(int, int, void*)>:
c001b8c8:	b8 00 00 00 00       	mov    eax,0x0
c001b8cd:	c3                   	ret    
c001b8ce:	66 90                	xchg   ax,ax

c001b8d0 <apicTimerHandler(regs*, void*)>:
c001b8d0:	83 ec 0c             	sub    esp,0xc
c001b8d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b8d7:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b8d9:	b8 10 27 00 00       	mov    eax,0x2710
c001b8de:	ba 00 00 00 00       	mov    edx,0x0
c001b8e3:	f7 f1                	div    ecx
c001b8e5:	83 ec 0c             	sub    esp,0xc
c001b8e8:	50                   	push   eax
c001b8e9:	e8 8e 1f ff ff       	call   c000d87c <timerHandler(unsigned int)>
c001b8ee:	83 c4 10             	add    esp,0x10
c001b8f1:	90                   	nop
c001b8f2:	83 c4 0c             	add    esp,0xc
c001b8f5:	c3                   	ret    
c001b8f6:	66 90                	xchg   ax,ax

c001b8f8 <APICTimer::open(int, int, void*)>:
c001b8f8:	83 ec 0c             	sub    esp,0xc
c001b8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8ff:	8b 00                	mov    eax,DWORD PTR [eax]
c001b901:	83 c0 24             	add    eax,0x24
c001b904:	8b 00                	mov    eax,DWORD PTR [eax]
c001b906:	83 ec 08             	sub    esp,0x8
c001b909:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b90d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b911:	ff d0                	call   eax
c001b913:	83 c4 10             	add    esp,0x10
c001b916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b91a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b91e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b928:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b92c:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001b932:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b936:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b93c:	83 ec 0c             	sub    esp,0xc
c001b93f:	51                   	push   ecx
c001b940:	6a 01                	push   0x1
c001b942:	68 d0 b8 01 c0       	push   0xc001b8d0
c001b947:	52                   	push   edx
c001b948:	50                   	push   eax
c001b949:	e8 46 06 ff ff       	call   c000bf94 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b94e:	83 c4 20             	add    esp,0x20
c001b951:	89 c2                	mov    edx,eax
c001b953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b957:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b95d:	b8 00 00 00 00       	mov    eax,0x0
c001b962:	83 c4 0c             	add    esp,0xc
c001b965:	c3                   	ret    
c001b966:	66 90                	xchg   ax,ax

c001b968 <APICTimer::write(int)>:
c001b968:	83 ec 0c             	sub    esp,0xc
c001b96b:	83 ec 0c             	sub    esp,0xc
c001b96e:	68 c8 f5 01 c0       	push   0xc001f5c8
c001b973:	e8 7f 4d ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c001b978:	83 c4 10             	add    esp,0x10
c001b97b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b97f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b983:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b989:	90                   	nop
c001b98a:	83 c4 0c             	add    esp,0xc
c001b98d:	c3                   	ret    
c001b98e:	66 90                	xchg   ax,ax

c001b990 <APICTimer::APICTimer()>:
c001b990:	83 ec 0c             	sub    esp,0xc
c001b993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b997:	83 ec 08             	sub    esp,0x8
c001b99a:	68 d8 f5 01 c0       	push   0xc001f5d8
c001b99f:	50                   	push   eax
c001b9a0:	e8 0b 1e ff ff       	call   c000d7b0 <Timer::Timer(char const*)>
c001b9a5:	83 c4 10             	add    esp,0x10
c001b9a8:	ba ec f5 01 c0       	mov    edx,0xc001f5ec
c001b9ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9b1:	89 10                	mov    DWORD PTR [eax],edx
c001b9b3:	90                   	nop
c001b9b4:	83 c4 0c             	add    esp,0xc
c001b9b7:	c3                   	ret    

c001b9b8 <PIT::write(int)>:
c001b9b8:	83 ec 10             	sub    esp,0x10
c001b9bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b9bf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b9c3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b9c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b9cd:	a3 04 48 02 c0       	mov    ds:0xc0024804,eax
c001b9d2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001b9d7:	99                   	cdq    
c001b9d8:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001b9dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b9e0:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001b9e7:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001b9ec:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b9f0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b9f5:	ee                   	out    dx,al
c001b9f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9fa:	25 ff 00 00 00       	and    eax,0xff
c001b9ff:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ba06:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ba0a:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ba0e:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ba13:	ee                   	out    dx,al
c001ba14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba18:	c1 f8 08             	sar    eax,0x8
c001ba1b:	25 ff 00 00 00       	and    eax,0xff
c001ba20:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ba27:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ba2b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ba2f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ba34:	ee                   	out    dx,al
c001ba35:	90                   	nop
c001ba36:	83 c4 10             	add    esp,0x10
c001ba39:	c3                   	ret    
c001ba3a:	66 90                	xchg   ax,ax

c001ba3c <pitHandler(regs*, void*)>:
c001ba3c:	83 ec 0c             	sub    esp,0xc
c001ba3f:	8b 0d 04 48 02 c0    	mov    ecx,DWORD PTR ds:0xc0024804
c001ba45:	b8 10 27 00 00       	mov    eax,0x2710
c001ba4a:	99                   	cdq    
c001ba4b:	f7 f9                	idiv   ecx
c001ba4d:	83 ec 0c             	sub    esp,0xc
c001ba50:	50                   	push   eax
c001ba51:	e8 26 1e ff ff       	call   c000d87c <timerHandler(unsigned int)>
c001ba56:	83 c4 10             	add    esp,0x10
c001ba59:	90                   	nop
c001ba5a:	83 c4 0c             	add    esp,0xc
c001ba5d:	c3                   	ret    
c001ba5e:	66 90                	xchg   ax,ax

c001ba60 <PIT::open(int, int, void*)>:
c001ba60:	83 ec 0c             	sub    esp,0xc
c001ba63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba67:	8b 00                	mov    eax,DWORD PTR [eax]
c001ba69:	83 c0 24             	add    eax,0x24
c001ba6c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ba6e:	83 ec 08             	sub    esp,0x8
c001ba71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba79:	ff d0                	call   eax
c001ba7b:	83 c4 10             	add    esp,0x10
c001ba7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba82:	83 ec 0c             	sub    esp,0xc
c001ba85:	6a 00                	push   0x0
c001ba87:	6a 01                	push   0x1
c001ba89:	68 3c ba 01 c0       	push   0xc001ba3c
c001ba8e:	6a 00                	push   0x0
c001ba90:	50                   	push   eax
c001ba91:	e8 fe 04 ff ff       	call   c000bf94 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ba96:	83 c4 20             	add    esp,0x20
c001ba99:	89 c2                	mov    edx,eax
c001ba9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba9f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001baa5:	b8 00 00 00 00       	mov    eax,0x0
c001baaa:	83 c4 0c             	add    esp,0xc
c001baad:	c3                   	ret    
c001baae:	66 90                	xchg   ax,ax

c001bab0 <PIT::close(int, int, void*)>:
c001bab0:	83 ec 0c             	sub    esp,0xc
c001bab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bab7:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001bac1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bac5:	6a 01                	push   0x1
c001bac7:	68 3c ba 01 c0       	push   0xc001ba3c
c001bacc:	6a 00                	push   0x0
c001bace:	50                   	push   eax
c001bacf:	e8 f6 04 ff ff       	call   c000bfca <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001bad4:	83 c4 10             	add    esp,0x10
c001bad7:	b8 00 00 00 00       	mov    eax,0x0
c001badc:	83 c4 0c             	add    esp,0xc
c001badf:	c3                   	ret    

c001bae0 <PIT::PIT()>:
c001bae0:	83 ec 0c             	sub    esp,0xc
c001bae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bae7:	83 ec 08             	sub    esp,0x8
c001baea:	68 14 f6 01 c0       	push   0xc001f614
c001baef:	50                   	push   eax
c001baf0:	e8 bb 1c ff ff       	call   c000d7b0 <Timer::Timer(char const*)>
c001baf5:	83 c4 10             	add    esp,0x10
c001baf8:	ba 3c f6 01 c0       	mov    edx,0xc001f63c
c001bafd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb01:	89 10                	mov    DWORD PTR [eax],edx
c001bb03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb07:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bb0d:	31 d2                	xor    edx,edx
c001bb0f:	88 c2                	mov    dl,al
c001bb11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb15:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001bb1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb20:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bb26:	31 d2                	xor    edx,edx
c001bb28:	88 c2                	mov    dl,al
c001bb2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb2e:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001bb33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb37:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bb3d:	8d 50 01             	lea    edx,[eax+0x1]
c001bb40:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bb44:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001bb4a:	31 d2                	xor    edx,edx
c001bb4c:	88 c2                	mov    dl,al
c001bb4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb52:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001bb56:	83 e1 3f             	and    ecx,0x3f
c001bb59:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001bb5d:	90                   	nop
c001bb5e:	83 c4 0c             	add    esp,0xc
c001bb61:	c3                   	ret    
c001bb62:	66 90                	xchg   ax,ax
c001bb64:	66 90                	xchg   ax,ax
c001bb66:	66 90                	xchg   ax,ax
c001bb68:	66 90                	xchg   ax,ax
c001bb6a:	66 90                	xchg   ax,ax
c001bb6c:	66 90                	xchg   ax,ax
c001bb6e:	66 90                	xchg   ax,ax

c001bb70 <avxDetect>:
c001bb70:	b8 01 00 00 00       	mov    eax,0x1
c001bb75:	0f a2                	cpuid  
c001bb77:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001bb7d:	74 15                	je     c001bb94 <avxDetect.noAVX>
c001bb7f:	b8 01 00 00 00       	mov    eax,0x1
c001bb84:	0f a2                	cpuid  
c001bb86:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001bb8c:	74 06                	je     c001bb94 <avxDetect.noAVX>
c001bb8e:	b8 01 00 00 00       	mov    eax,0x1
c001bb93:	c3                   	ret    

c001bb94 <avxDetect.noAVX>:
c001bb94:	b8 00 00 00 00       	mov    eax,0x0
c001bb99:	c3                   	ret    

c001bb9a <avxSave>:
c001bb9a:	53                   	push   ebx
c001bb9b:	52                   	push   edx
c001bb9c:	31 c0                	xor    eax,eax
c001bb9e:	48                   	dec    eax
c001bb9f:	89 c2                	mov    edx,eax
c001bba1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bba5:	0f ae 23             	xsave  [ebx]
c001bba8:	5a                   	pop    edx
c001bba9:	5b                   	pop    ebx
c001bbaa:	c3                   	ret    

c001bbab <avxLoad>:
c001bbab:	53                   	push   ebx
c001bbac:	52                   	push   edx
c001bbad:	31 c0                	xor    eax,eax
c001bbaf:	48                   	dec    eax
c001bbb0:	89 c2                	mov    edx,eax
c001bbb2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bbb6:	0f ae 2b             	xrstor [ebx]
c001bbb9:	5a                   	pop    edx
c001bbba:	5b                   	pop    ebx
c001bbbb:	c3                   	ret    

c001bbbc <avxInit>:
c001bbbc:	e8 57 02 00 00       	call   c001be18 <sseInit>
c001bbc1:	50                   	push   eax
c001bbc2:	51                   	push   ecx
c001bbc3:	0f 20 e0             	mov    eax,cr4
c001bbc6:	0d 00 00 04 00       	or     eax,0x40000
c001bbcb:	0f 22 e0             	mov    cr4,eax
c001bbce:	31 c9                	xor    ecx,ecx
c001bbd0:	0f 01 d0             	xgetbv 
c001bbd3:	0d 07 00 00 00       	or     eax,0x7
c001bbd8:	0f 01 d1             	xsetbv 
c001bbdb:	59                   	pop    ecx
c001bbdc:	58                   	pop    eax
c001bbdd:	c3                   	ret    

c001bbde <avxClose>:
c001bbde:	c3                   	ret    

c001bbdf <wouldSheSayYes>:
c001bbdf:	c3                   	ret    
c001bbe0:	49                   	dec    ecx
c001bbe1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001bbe5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001bbe9:	75 20                	jne    c001bc0b <isr0+0xb>
c001bbeb:	4e                   	dec    esi
c001bbec:	79 61                	jns    c001bc4f <isr7+0x3>
c001bbee:	68 2e 2e 2e 00       	push   0x2e2e2e
c001bbf3:	66 90                	xchg   ax,ax
c001bbf5:	66 90                	xchg   ax,ax
c001bbf7:	66 90                	xchg   ax,ax
c001bbf9:	66 90                	xchg   ax,ax
c001bbfb:	66 90                	xchg   ax,ax
c001bbfd:	66 90                	xchg   ax,ax
c001bbff:	90                   	nop

c001bc00 <isr0>:
c001bc00:	fa                   	cli    
c001bc01:	68 00 00 00 00       	push   0x0
c001bc06:	68 00 00 00 00       	push   0x0
c001bc0b:	e9 44 01 00 00       	jmp    c001bd54 <int_common_stub>

c001bc10 <isr1>:
c001bc10:	fa                   	cli    
c001bc11:	6a 00                	push   0x0
c001bc13:	6a 01                	push   0x1
c001bc15:	e9 3a 01 00 00       	jmp    c001bd54 <int_common_stub>

c001bc1a <isr2>:
c001bc1a:	fa                   	cli    
c001bc1b:	6a 00                	push   0x0
c001bc1d:	6a 02                	push   0x2
c001bc1f:	e9 30 01 00 00       	jmp    c001bd54 <int_common_stub>

c001bc24 <isr3>:
c001bc24:	fa                   	cli    
c001bc25:	6a 00                	push   0x0
c001bc27:	6a 03                	push   0x3
c001bc29:	e9 26 01 00 00       	jmp    c001bd54 <int_common_stub>

c001bc2e <isr4>:
c001bc2e:	fa                   	cli    
c001bc2f:	6a 00                	push   0x0
c001bc31:	6a 04                	push   0x4
c001bc33:	e9 1c 01 00 00       	jmp    c001bd54 <int_common_stub>

c001bc38 <isr5>:
c001bc38:	fa                   	cli    
c001bc39:	6a 00                	push   0x0
c001bc3b:	6a 05                	push   0x5
c001bc3d:	e9 12 01 00 00       	jmp    c001bd54 <int_common_stub>

c001bc42 <isr6>:
c001bc42:	fa                   	cli    
c001bc43:	6a 00                	push   0x0
c001bc45:	6a 06                	push   0x6
c001bc47:	e9 08 01 00 00       	jmp    c001bd54 <int_common_stub>

c001bc4c <isr7>:
c001bc4c:	fa                   	cli    
c001bc4d:	6a 00                	push   0x0
c001bc4f:	6a 07                	push   0x7
c001bc51:	e9 fe 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bc56 <isr8>:
c001bc56:	fa                   	cli    
c001bc57:	6a 08                	push   0x8
c001bc59:	e9 f6 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bc5e <isr9>:
c001bc5e:	fa                   	cli    
c001bc5f:	6a 00                	push   0x0
c001bc61:	6a 09                	push   0x9
c001bc63:	e9 ec 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bc68 <isr10>:
c001bc68:	fa                   	cli    
c001bc69:	6a 0a                	push   0xa
c001bc6b:	e9 e4 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bc70 <isr11>:
c001bc70:	fa                   	cli    
c001bc71:	6a 0b                	push   0xb
c001bc73:	e9 dc 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bc78 <isr12>:
c001bc78:	fa                   	cli    
c001bc79:	6a 0c                	push   0xc
c001bc7b:	e9 d4 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bc80 <isr13>:
c001bc80:	fa                   	cli    
c001bc81:	6a 0d                	push   0xd
c001bc83:	e9 cc 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bc88 <isr14>:
c001bc88:	fa                   	cli    
c001bc89:	6a 0e                	push   0xe
c001bc8b:	e9 c4 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bc90 <isr15>:
c001bc90:	fa                   	cli    
c001bc91:	6a 00                	push   0x0
c001bc93:	6a 0f                	push   0xf
c001bc95:	e9 ba 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bc9a <isr16>:
c001bc9a:	fa                   	cli    
c001bc9b:	6a 00                	push   0x0
c001bc9d:	6a 10                	push   0x10
c001bc9f:	e9 b0 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bca4 <isr17>:
c001bca4:	fa                   	cli    
c001bca5:	6a 00                	push   0x0
c001bca7:	6a 11                	push   0x11
c001bca9:	e9 a6 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bcae <isr18>:
c001bcae:	fa                   	cli    
c001bcaf:	6a 00                	push   0x0
c001bcb1:	6a 12                	push   0x12
c001bcb3:	e9 9c 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bcb8 <irq3>:
c001bcb8:	fa                   	cli    
c001bcb9:	6a 00                	push   0x0
c001bcbb:	6a 23                	push   0x23
c001bcbd:	e9 92 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bcc2 <irq4>:
c001bcc2:	fa                   	cli    
c001bcc3:	6a 00                	push   0x0
c001bcc5:	6a 24                	push   0x24
c001bcc7:	e9 88 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bccc <irq5>:
c001bccc:	fa                   	cli    
c001bccd:	6a 00                	push   0x0
c001bccf:	6a 25                	push   0x25
c001bcd1:	e9 7e 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bcd6 <irq6>:
c001bcd6:	fa                   	cli    
c001bcd7:	6a 00                	push   0x0
c001bcd9:	6a 26                	push   0x26
c001bcdb:	e9 74 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bce0 <irq7>:
c001bce0:	fa                   	cli    
c001bce1:	6a 00                	push   0x0
c001bce3:	6a 27                	push   0x27
c001bce5:	e9 6a 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bcea <irq8>:
c001bcea:	fa                   	cli    
c001bceb:	6a 00                	push   0x0
c001bced:	6a 28                	push   0x28
c001bcef:	e9 60 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bcf4 <irq9>:
c001bcf4:	fa                   	cli    
c001bcf5:	6a 00                	push   0x0
c001bcf7:	6a 29                	push   0x29
c001bcf9:	e9 56 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bcfe <irq10>:
c001bcfe:	fa                   	cli    
c001bcff:	6a 00                	push   0x0
c001bd01:	6a 2a                	push   0x2a
c001bd03:	e9 4c 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bd08 <irq11>:
c001bd08:	fa                   	cli    
c001bd09:	6a 00                	push   0x0
c001bd0b:	6a 2b                	push   0x2b
c001bd0d:	e9 42 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bd12 <irq12>:
c001bd12:	fa                   	cli    
c001bd13:	6a 00                	push   0x0
c001bd15:	6a 2c                	push   0x2c
c001bd17:	e9 38 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bd1c <irq13>:
c001bd1c:	fa                   	cli    
c001bd1d:	6a 00                	push   0x0
c001bd1f:	6a 2d                	push   0x2d
c001bd21:	e9 2e 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bd26 <irq14>:
c001bd26:	fa                   	cli    
c001bd27:	6a 00                	push   0x0
c001bd29:	6a 2e                	push   0x2e
c001bd2b:	e9 24 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bd30 <irq15>:
c001bd30:	fa                   	cli    
c001bd31:	6a 00                	push   0x0
c001bd33:	6a 2f                	push   0x2f
c001bd35:	e9 1a 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bd3a <irq1>:
c001bd3a:	fa                   	cli    
c001bd3b:	6a 00                	push   0x0
c001bd3d:	6a 21                	push   0x21
c001bd3f:	eb 13                	jmp    c001bd54 <int_common_stub>

c001bd41 <irq2>:
c001bd41:	fa                   	cli    
c001bd42:	6a 00                	push   0x0
c001bd44:	6a 22                	push   0x22
c001bd46:	eb 0c                	jmp    c001bd54 <int_common_stub>

c001bd48 <isr96>:
c001bd48:	6a 00                	push   0x0
c001bd4a:	6a 60                	push   0x60
c001bd4c:	fb                   	sti    
c001bd4d:	eb 05                	jmp    c001bd54 <int_common_stub>

c001bd4f <irq0>:
c001bd4f:	fa                   	cli    
c001bd50:	6a 00                	push   0x0
c001bd52:	6a 20                	push   0x20

c001bd54 <int_common_stub>:
c001bd54:	60                   	pusha  
c001bd55:	1e                   	push   ds
c001bd56:	06                   	push   es
c001bd57:	0f a0                	push   fs
c001bd59:	0f a8                	push   gs
c001bd5b:	66 b8 10 00          	mov    ax,0x10
c001bd5f:	66 8e d8             	mov    ds,ax
c001bd62:	66 8e c0             	mov    es,ax
c001bd65:	66 8e e0             	mov    fs,ax
c001bd68:	66 8e e8             	mov    gs,ax
c001bd6b:	54                   	push   esp
c001bd6c:	fc                   	cld    
c001bd6d:	e8 22 07 ff ff       	call   c000c494 <int_handler>
c001bd72:	81 c4 04 00 00 00    	add    esp,0x4
c001bd78:	0f a9                	pop    gs
c001bd7a:	0f a1                	pop    fs
c001bd7c:	07                   	pop    es
c001bd7d:	1f                   	pop    ds
c001bd7e:	61                   	popa   
c001bd7f:	81 c4 08 00 00 00    	add    esp,0x8
c001bd85:	cf                   	iret   

c001bd86 <irq16>:
c001bd86:	fa                   	cli    
c001bd87:	6a 00                	push   0x0
c001bd89:	6a 30                	push   0x30
c001bd8b:	e9 c4 ff ff ff       	jmp    c001bd54 <int_common_stub>

c001bd90 <irq17>:
c001bd90:	fa                   	cli    
c001bd91:	6a 00                	push   0x0
c001bd93:	6a 31                	push   0x31
c001bd95:	e9 ba ff ff ff       	jmp    c001bd54 <int_common_stub>

c001bd9a <irq18>:
c001bd9a:	fa                   	cli    
c001bd9b:	6a 00                	push   0x0
c001bd9d:	6a 32                	push   0x32
c001bd9f:	e9 b0 ff ff ff       	jmp    c001bd54 <int_common_stub>

c001bda4 <irq19>:
c001bda4:	fa                   	cli    
c001bda5:	6a 00                	push   0x0
c001bda7:	6a 33                	push   0x33
c001bda9:	e9 a6 ff ff ff       	jmp    c001bd54 <int_common_stub>

c001bdae <irq20>:
c001bdae:	fa                   	cli    
c001bdaf:	6a 00                	push   0x0
c001bdb1:	6a 34                	push   0x34
c001bdb3:	e9 9c ff ff ff       	jmp    c001bd54 <int_common_stub>

c001bdb8 <irq21>:
c001bdb8:	fa                   	cli    
c001bdb9:	6a 00                	push   0x0
c001bdbb:	6a 35                	push   0x35
c001bdbd:	e9 92 ff ff ff       	jmp    c001bd54 <int_common_stub>

c001bdc2 <irq22>:
c001bdc2:	fa                   	cli    
c001bdc3:	6a 00                	push   0x0
c001bdc5:	6a 36                	push   0x36
c001bdc7:	e9 88 ff ff ff       	jmp    c001bd54 <int_common_stub>

c001bdcc <irq23>:
c001bdcc:	fa                   	cli    
c001bdcd:	6a 00                	push   0x0
c001bdcf:	6a 37                	push   0x37
c001bdd1:	e9 7e ff ff ff       	jmp    c001bd54 <int_common_stub>
c001bdd6:	66 90                	xchg   ax,ax
c001bdd8:	66 90                	xchg   ax,ax
c001bdda:	66 90                	xchg   ax,ax
c001bddc:	66 90                	xchg   ax,ax
c001bdde:	66 90                	xchg   ax,ax

c001bde0 <i386GetRDRAND>:
c001bde0:	b9 64 00 00 00       	mov    ecx,0x64

c001bde5 <retry>:
c001bde5:	0f c7 f0             	rdrand eax
c001bde8:	72 05                	jb     c001bdef <retry.done>
c001bdea:	e2 f9                	loop   c001bde5 <retry>

c001bdec <retry.fail>:
c001bdec:	31 c0                	xor    eax,eax
c001bdee:	c3                   	ret    

c001bdef <retry.done>:
c001bdef:	c3                   	ret    

c001bdf0 <absolutelyNoChanceInHell>:
c001bdf0:	b8 01 00 00 00       	mov    eax,0x1
c001bdf5:	0f a2                	cpuid  
c001bdf7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001bdfd:	74 06                	je     c001be05 <sseDetect.noSSE>
c001bdff:	b8 01 00 00 00       	mov    eax,0x1
c001be04:	c3                   	ret    

c001be05 <sseDetect.noSSE>:
c001be05:	31 c0                	xor    eax,eax
c001be07:	c3                   	ret    

c001be08 <sseSave>:
c001be08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be0c:	0f ae 00             	fxsave [eax]
c001be0f:	c3                   	ret    

c001be10 <sseLoad>:
c001be10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be14:	0f ae 08             	fxrstor [eax]
c001be17:	c3                   	ret    

c001be18 <sseInit>:
c001be18:	e8 42 00 00 00       	call   c001be5f <x87Init>
c001be1d:	0f 20 e0             	mov    eax,cr4
c001be20:	66 0d 00 06          	or     ax,0x600
c001be24:	0f 22 e0             	mov    cr4,eax
c001be27:	c3                   	ret    

c001be28 <sseClose>:
c001be28:	c3                   	ret    
c001be29:	66 90                	xchg   ax,ax
c001be2b:	66 90                	xchg   ax,ax
c001be2d:	66 90                	xchg   ax,ax
c001be2f:	90                   	nop

c001be30 <value_37F>:
c001be30:	7f 03                	jg     c001be35 <value_37A+0x1>

c001be32 <value_37E>:
c001be32:	7e 03                	jle    c001be37 <x87Detect+0x1>

c001be34 <value_37A>:
c001be34:	7a 03                	jp     c001be39 <x87Detect+0x3>

c001be36 <x87Detect>:
c001be36:	b8 01 00 00 00       	mov    eax,0x1
c001be3b:	0f a2                	cpuid  
c001be3d:	f7 c2 01 00 00 00    	test   edx,0x1
c001be43:	74 06                	je     c001be4b <x87Detect.nox87>
c001be45:	b8 01 00 00 00       	mov    eax,0x1
c001be4a:	c3                   	ret    

c001be4b <x87Detect.nox87>:
c001be4b:	b8 00 00 00 00       	mov    eax,0x0
c001be50:	c3                   	ret    

c001be51 <x87Save>:
c001be51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be55:	dd 30                	fnsave [eax]
c001be57:	c3                   	ret    

c001be58 <x87Load>:
c001be58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be5c:	dd 20                	frstor [eax]
c001be5e:	c3                   	ret    

c001be5f <x87Init>:
c001be5f:	0f 20 c0             	mov    eax,cr0
c001be62:	66 25 fb ff          	and    ax,0xfffb
c001be66:	66 0d 22 00          	or     ax,0x22
c001be6a:	0f 22 c0             	mov    cr0,eax
c001be6d:	db e3                	fninit 
c001be6f:	0f 06                	clts   
c001be71:	d9 2d 34 be 01 c0    	fldcw  WORD PTR ds:0xc001be34
c001be77:	c3                   	ret    

c001be78 <x87Close>:
c001be78:	c3                   	ret    
c001be79:	66 90                	xchg   ax,ax
c001be7b:	90                   	nop

c001be7c <__do_global_ctors_aux>:
c001be7c:	a1 2c ce 01 c0       	mov    eax,ds:0xc001ce2c
c001be81:	83 f8 ff             	cmp    eax,0xffffffff
c001be84:	74 1a                	je     c001bea0 <__do_global_ctors_aux+0x24>
c001be86:	55                   	push   ebp
c001be87:	89 e5                	mov    ebp,esp
c001be89:	53                   	push   ebx
c001be8a:	52                   	push   edx
c001be8b:	bb 2c ce 01 c0       	mov    ebx,0xc001ce2c
c001be90:	ff d0                	call   eax
c001be92:	83 eb 04             	sub    ebx,0x4
c001be95:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be97:	83 f8 ff             	cmp    eax,0xffffffff
c001be9a:	75 f4                	jne    c001be90 <__do_global_ctors_aux+0x14>
c001be9c:	58                   	pop    eax
c001be9d:	5b                   	pop    ebx
c001be9e:	5d                   	pop    ebp
c001be9f:	c3                   	ret    
c001bea0:	c3                   	ret    
c001bea1:	66 90                	xchg   ax,ax
c001bea3:	90                   	nop

c001bea4 <__divdi3>:
c001bea4:	55                   	push   ebp
c001bea5:	57                   	push   edi
c001bea6:	56                   	push   esi
c001bea7:	53                   	push   ebx
c001bea8:	83 ec 1c             	sub    esp,0x1c
c001beab:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001beaf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001beb3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001beb6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001beba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bebe:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bec2:	85 db                	test   ebx,ebx
c001bec4:	0f 88 8e 00 00 00    	js     c001bf58 <__divdi3+0xb4>
c001beca:	89 dd                	mov    ebp,ebx
c001becc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001bed4:	89 d3                	mov    ebx,edx
c001bed6:	85 d2                	test   edx,edx
c001bed8:	79 0d                	jns    c001bee7 <__divdi3+0x43>
c001beda:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001bede:	f7 d8                	neg    eax
c001bee0:	83 d2 00             	adc    edx,0x0
c001bee3:	f7 da                	neg    edx
c001bee5:	89 d3                	mov    ebx,edx
c001bee7:	89 c7                	mov    edi,eax
c001bee9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001beec:	85 db                	test   ebx,ebx
c001beee:	75 48                	jne    c001bf38 <__divdi3+0x94>
c001bef0:	39 ef                	cmp    edi,ebp
c001bef2:	76 24                	jbe    c001bf18 <__divdi3+0x74>
c001bef4:	89 ea                	mov    edx,ebp
c001bef6:	f7 f7                	div    edi
c001bef8:	89 c1                	mov    ecx,eax
c001befa:	31 f6                	xor    esi,esi
c001befc:	89 c8                	mov    eax,ecx
c001befe:	89 f2                	mov    edx,esi
c001bf00:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bf04:	85 c9                	test   ecx,ecx
c001bf06:	74 07                	je     c001bf0f <__divdi3+0x6b>
c001bf08:	f7 d8                	neg    eax
c001bf0a:	83 d2 00             	adc    edx,0x0
c001bf0d:	f7 da                	neg    edx
c001bf0f:	83 c4 1c             	add    esp,0x1c
c001bf12:	5b                   	pop    ebx
c001bf13:	5e                   	pop    esi
c001bf14:	5f                   	pop    edi
c001bf15:	5d                   	pop    ebp
c001bf16:	c3                   	ret    
c001bf17:	90                   	nop
c001bf18:	85 ff                	test   edi,edi
c001bf1a:	75 0b                	jne    c001bf27 <__divdi3+0x83>
c001bf1c:	b8 01 00 00 00       	mov    eax,0x1
c001bf21:	31 d2                	xor    edx,edx
c001bf23:	f7 f3                	div    ebx
c001bf25:	89 c7                	mov    edi,eax
c001bf27:	31 d2                	xor    edx,edx
c001bf29:	89 e8                	mov    eax,ebp
c001bf2b:	f7 f7                	div    edi
c001bf2d:	89 c6                	mov    esi,eax
c001bf2f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bf32:	f7 f7                	div    edi
c001bf34:	89 c1                	mov    ecx,eax
c001bf36:	eb c4                	jmp    c001befc <__divdi3+0x58>
c001bf38:	39 eb                	cmp    ebx,ebp
c001bf3a:	77 3c                	ja     c001bf78 <__divdi3+0xd4>
c001bf3c:	0f bd f3             	bsr    esi,ebx
c001bf3f:	83 f6 1f             	xor    esi,0x1f
c001bf42:	75 40                	jne    c001bf84 <__divdi3+0xe0>
c001bf44:	39 eb                	cmp    ebx,ebp
c001bf46:	72 09                	jb     c001bf51 <__divdi3+0xad>
c001bf48:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001bf4b:	0f 87 97 00 00 00    	ja     c001bfe8 <__divdi3+0x144>
c001bf51:	b9 01 00 00 00       	mov    ecx,0x1
c001bf56:	eb a4                	jmp    c001befc <__divdi3+0x58>
c001bf58:	f7 d9                	neg    ecx
c001bf5a:	83 d3 00             	adc    ebx,0x0
c001bf5d:	f7 db                	neg    ebx
c001bf5f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001bf62:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001bf66:	89 dd                	mov    ebp,ebx
c001bf68:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001bf70:	e9 5f ff ff ff       	jmp    c001bed4 <__divdi3+0x30>
c001bf75:	8d 76 00             	lea    esi,[esi+0x0]
c001bf78:	31 f6                	xor    esi,esi
c001bf7a:	31 c9                	xor    ecx,ecx
c001bf7c:	e9 7b ff ff ff       	jmp    c001befc <__divdi3+0x58>
c001bf81:	8d 76 00             	lea    esi,[esi+0x0]
c001bf84:	b8 20 00 00 00       	mov    eax,0x20
c001bf89:	29 f0                	sub    eax,esi
c001bf8b:	89 f1                	mov    ecx,esi
c001bf8d:	d3 e3                	shl    ebx,cl
c001bf8f:	89 fa                	mov    edx,edi
c001bf91:	88 c1                	mov    cl,al
c001bf93:	d3 ea                	shr    edx,cl
c001bf95:	09 da                	or     edx,ebx
c001bf97:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bf9b:	89 f1                	mov    ecx,esi
c001bf9d:	d3 e7                	shl    edi,cl
c001bf9f:	89 eb                	mov    ebx,ebp
c001bfa1:	88 c1                	mov    cl,al
c001bfa3:	d3 eb                	shr    ebx,cl
c001bfa5:	89 f1                	mov    ecx,esi
c001bfa7:	d3 e5                	shl    ebp,cl
c001bfa9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001bfac:	88 c1                	mov    cl,al
c001bfae:	d3 ea                	shr    edx,cl
c001bfb0:	09 d5                	or     ebp,edx
c001bfb2:	89 e8                	mov    eax,ebp
c001bfb4:	89 da                	mov    edx,ebx
c001bfb6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001bfba:	89 d3                	mov    ebx,edx
c001bfbc:	89 c5                	mov    ebp,eax
c001bfbe:	f7 e7                	mul    edi
c001bfc0:	39 d3                	cmp    ebx,edx
c001bfc2:	72 18                	jb     c001bfdc <__divdi3+0x138>
c001bfc4:	74 0a                	je     c001bfd0 <__divdi3+0x12c>
c001bfc6:	89 e9                	mov    ecx,ebp
c001bfc8:	31 f6                	xor    esi,esi
c001bfca:	e9 2d ff ff ff       	jmp    c001befc <__divdi3+0x58>
c001bfcf:	90                   	nop
c001bfd0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001bfd3:	89 f1                	mov    ecx,esi
c001bfd5:	d3 e7                	shl    edi,cl
c001bfd7:	39 c7                	cmp    edi,eax
c001bfd9:	73 eb                	jae    c001bfc6 <__divdi3+0x122>
c001bfdb:	90                   	nop
c001bfdc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001bfdf:	31 f6                	xor    esi,esi
c001bfe1:	e9 16 ff ff ff       	jmp    c001befc <__divdi3+0x58>
c001bfe6:	66 90                	xchg   ax,ax
c001bfe8:	31 c9                	xor    ecx,ecx
c001bfea:	e9 0d ff ff ff       	jmp    c001befc <__divdi3+0x58>
c001bfef:	90                   	nop

c001bff0 <__moddi3>:
c001bff0:	55                   	push   ebp
c001bff1:	57                   	push   edi
c001bff2:	56                   	push   esi
c001bff3:	53                   	push   ebx
c001bff4:	83 ec 2c             	sub    esp,0x2c
c001bff7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001bffb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001bfff:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001c003:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001c007:	85 db                	test   ebx,ebx
c001c009:	0f 88 85 00 00 00    	js     c001c094 <__moddi3+0xa4>
c001c00f:	89 de                	mov    esi,ebx
c001c011:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c019:	89 d7                	mov    edi,edx
c001c01b:	85 d2                	test   edx,edx
c001c01d:	79 09                	jns    c001c028 <__moddi3+0x38>
c001c01f:	f7 d8                	neg    eax
c001c021:	83 d2 00             	adc    edx,0x0
c001c024:	f7 da                	neg    edx
c001c026:	89 d7                	mov    edi,edx
c001c028:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c02c:	89 cd                	mov    ebp,ecx
c001c02e:	85 ff                	test   edi,edi
c001c030:	75 52                	jne    c001c084 <__moddi3+0x94>
c001c032:	89 c3                	mov    ebx,eax
c001c034:	39 f0                	cmp    eax,esi
c001c036:	76 24                	jbe    c001c05c <__moddi3+0x6c>
c001c038:	89 c8                	mov    eax,ecx
c001c03a:	89 f2                	mov    edx,esi
c001c03c:	f7 f3                	div    ebx
c001c03e:	89 d6                	mov    esi,edx
c001c040:	89 f0                	mov    eax,esi
c001c042:	31 d2                	xor    edx,edx
c001c044:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c048:	85 c9                	test   ecx,ecx
c001c04a:	74 07                	je     c001c053 <__moddi3+0x63>
c001c04c:	f7 d8                	neg    eax
c001c04e:	83 d2 00             	adc    edx,0x0
c001c051:	f7 da                	neg    edx
c001c053:	83 c4 2c             	add    esp,0x2c
c001c056:	5b                   	pop    ebx
c001c057:	5e                   	pop    esi
c001c058:	5f                   	pop    edi
c001c059:	5d                   	pop    ebp
c001c05a:	c3                   	ret    
c001c05b:	90                   	nop
c001c05c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c060:	85 db                	test   ebx,ebx
c001c062:	75 0d                	jne    c001c071 <__moddi3+0x81>
c001c064:	b8 01 00 00 00       	mov    eax,0x1
c001c069:	31 d2                	xor    edx,edx
c001c06b:	f7 f7                	div    edi
c001c06d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c071:	89 f0                	mov    eax,esi
c001c073:	31 d2                	xor    edx,edx
c001c075:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c079:	f7 f7                	div    edi
c001c07b:	89 e8                	mov    eax,ebp
c001c07d:	f7 f7                	div    edi
c001c07f:	89 d6                	mov    esi,edx
c001c081:	eb bd                	jmp    c001c040 <__moddi3+0x50>
c001c083:	90                   	nop
c001c084:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c088:	39 f7                	cmp    edi,esi
c001c08a:	76 20                	jbe    c001c0ac <__moddi3+0xbc>
c001c08c:	89 c8                	mov    eax,ecx
c001c08e:	89 f2                	mov    edx,esi
c001c090:	eb b2                	jmp    c001c044 <__moddi3+0x54>
c001c092:	66 90                	xchg   ax,ax
c001c094:	f7 d9                	neg    ecx
c001c096:	83 d3 00             	adc    ebx,0x0
c001c099:	f7 db                	neg    ebx
c001c09b:	89 de                	mov    esi,ebx
c001c09d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001c0a5:	e9 6f ff ff ff       	jmp    c001c019 <__moddi3+0x29>
c001c0aa:	66 90                	xchg   ax,ax
c001c0ac:	0f bd c7             	bsr    eax,edi
c001c0af:	83 f0 1f             	xor    eax,0x1f
c001c0b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c0b6:	75 24                	jne    c001c0dc <__moddi3+0xec>
c001c0b8:	39 f7                	cmp    edi,esi
c001c0ba:	72 06                	jb     c001c0c2 <__moddi3+0xd2>
c001c0bc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001c0c0:	77 0c                	ja     c001c0ce <__moddi3+0xde>
c001c0c2:	89 e9                	mov    ecx,ebp
c001c0c4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001c0c8:	19 fe                	sbb    esi,edi
c001c0ca:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c0ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c0d2:	89 f2                	mov    edx,esi
c001c0d4:	e9 6b ff ff ff       	jmp    c001c044 <__moddi3+0x54>
c001c0d9:	8d 76 00             	lea    esi,[esi+0x0]
c001c0dc:	b8 20 00 00 00       	mov    eax,0x20
c001c0e1:	89 c2                	mov    edx,eax
c001c0e3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c0e7:	29 da                	sub    edx,ebx
c001c0e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c0ed:	88 d9                	mov    cl,bl
c001c0ef:	d3 e7                	shl    edi,cl
c001c0f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c0f5:	88 d1                	mov    cl,dl
c001c0f7:	d3 e8                	shr    eax,cl
c001c0f9:	09 c7                	or     edi,eax
c001c0fb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001c0ff:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c103:	89 d8                	mov    eax,ebx
c001c105:	88 d9                	mov    cl,bl
c001c107:	d3 e7                	shl    edi,cl
c001c109:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c10d:	89 f3                	mov    ebx,esi
c001c10f:	88 d1                	mov    cl,dl
c001c111:	d3 eb                	shr    ebx,cl
c001c113:	89 c7                	mov    edi,eax
c001c115:	88 c1                	mov    cl,al
c001c117:	d3 e6                	shl    esi,cl
c001c119:	89 e8                	mov    eax,ebp
c001c11b:	88 d1                	mov    cl,dl
c001c11d:	d3 e8                	shr    eax,cl
c001c11f:	09 f0                	or     eax,esi
c001c121:	89 f9                	mov    ecx,edi
c001c123:	d3 e5                	shl    ebp,cl
c001c125:	89 da                	mov    edx,ebx
c001c127:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001c12b:	89 d3                	mov    ebx,edx
c001c12d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c131:	89 c6                	mov    esi,eax
c001c133:	89 d1                	mov    ecx,edx
c001c135:	39 d3                	cmp    ebx,edx
c001c137:	72 27                	jb     c001c160 <__moddi3+0x170>
c001c139:	74 21                	je     c001c15c <__moddi3+0x16c>
c001c13b:	29 f5                	sub    ebp,esi
c001c13d:	19 cb                	sbb    ebx,ecx
c001c13f:	89 de                	mov    esi,ebx
c001c141:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001c145:	d3 e6                	shl    esi,cl
c001c147:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c14b:	89 f9                	mov    ecx,edi
c001c14d:	d3 ed                	shr    ebp,cl
c001c14f:	09 ee                	or     esi,ebp
c001c151:	89 f0                	mov    eax,esi
c001c153:	d3 eb                	shr    ebx,cl
c001c155:	89 da                	mov    edx,ebx
c001c157:	e9 e8 fe ff ff       	jmp    c001c044 <__moddi3+0x54>
c001c15c:	39 c5                	cmp    ebp,eax
c001c15e:	73 db                	jae    c001c13b <__moddi3+0x14b>
c001c160:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c164:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001c168:	89 d1                	mov    ecx,edx
c001c16a:	89 c6                	mov    esi,eax
c001c16c:	eb cd                	jmp    c001c13b <__moddi3+0x14b>
c001c16e:	66 90                	xchg   ax,ax

c001c170 <__udivdi3>:
c001c170:	55                   	push   ebp
c001c171:	57                   	push   edi
c001c172:	56                   	push   esi
c001c173:	53                   	push   ebx
c001c174:	83 ec 1c             	sub    esp,0x1c
c001c177:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c17b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c17f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c183:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c187:	85 d2                	test   edx,edx
c001c189:	75 41                	jne    c001c1cc <__udivdi3+0x5c>
c001c18b:	39 f7                	cmp    edi,esi
c001c18d:	76 15                	jbe    c001c1a4 <__udivdi3+0x34>
c001c18f:	89 e8                	mov    eax,ebp
c001c191:	89 f2                	mov    edx,esi
c001c193:	f7 f7                	div    edi
c001c195:	31 db                	xor    ebx,ebx
c001c197:	89 da                	mov    edx,ebx
c001c199:	83 c4 1c             	add    esp,0x1c
c001c19c:	5b                   	pop    ebx
c001c19d:	5e                   	pop    esi
c001c19e:	5f                   	pop    edi
c001c19f:	5d                   	pop    ebp
c001c1a0:	c3                   	ret    
c001c1a1:	8d 76 00             	lea    esi,[esi+0x0]
c001c1a4:	89 f9                	mov    ecx,edi
c001c1a6:	85 ff                	test   edi,edi
c001c1a8:	75 0b                	jne    c001c1b5 <__udivdi3+0x45>
c001c1aa:	b8 01 00 00 00       	mov    eax,0x1
c001c1af:	31 d2                	xor    edx,edx
c001c1b1:	f7 f7                	div    edi
c001c1b3:	89 c1                	mov    ecx,eax
c001c1b5:	31 d2                	xor    edx,edx
c001c1b7:	89 f0                	mov    eax,esi
c001c1b9:	f7 f1                	div    ecx
c001c1bb:	89 c3                	mov    ebx,eax
c001c1bd:	89 e8                	mov    eax,ebp
c001c1bf:	f7 f1                	div    ecx
c001c1c1:	89 da                	mov    edx,ebx
c001c1c3:	83 c4 1c             	add    esp,0x1c
c001c1c6:	5b                   	pop    ebx
c001c1c7:	5e                   	pop    esi
c001c1c8:	5f                   	pop    edi
c001c1c9:	5d                   	pop    ebp
c001c1ca:	c3                   	ret    
c001c1cb:	90                   	nop
c001c1cc:	39 f2                	cmp    edx,esi
c001c1ce:	77 1c                	ja     c001c1ec <__udivdi3+0x7c>
c001c1d0:	0f bd da             	bsr    ebx,edx
c001c1d3:	83 f3 1f             	xor    ebx,0x1f
c001c1d6:	75 24                	jne    c001c1fc <__udivdi3+0x8c>
c001c1d8:	39 f2                	cmp    edx,esi
c001c1da:	72 08                	jb     c001c1e4 <__udivdi3+0x74>
c001c1dc:	39 ef                	cmp    edi,ebp
c001c1de:	0f 87 84 00 00 00    	ja     c001c268 <__udivdi3+0xf8>
c001c1e4:	b8 01 00 00 00       	mov    eax,0x1
c001c1e9:	eb ac                	jmp    c001c197 <__udivdi3+0x27>
c001c1eb:	90                   	nop
c001c1ec:	31 db                	xor    ebx,ebx
c001c1ee:	31 c0                	xor    eax,eax
c001c1f0:	89 da                	mov    edx,ebx
c001c1f2:	83 c4 1c             	add    esp,0x1c
c001c1f5:	5b                   	pop    ebx
c001c1f6:	5e                   	pop    esi
c001c1f7:	5f                   	pop    edi
c001c1f8:	5d                   	pop    ebp
c001c1f9:	c3                   	ret    
c001c1fa:	66 90                	xchg   ax,ax
c001c1fc:	b8 20 00 00 00       	mov    eax,0x20
c001c201:	29 d8                	sub    eax,ebx
c001c203:	88 d9                	mov    cl,bl
c001c205:	d3 e2                	shl    edx,cl
c001c207:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c20b:	89 fa                	mov    edx,edi
c001c20d:	88 c1                	mov    cl,al
c001c20f:	d3 ea                	shr    edx,cl
c001c211:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c215:	09 d1                	or     ecx,edx
c001c217:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c21b:	88 d9                	mov    cl,bl
c001c21d:	d3 e7                	shl    edi,cl
c001c21f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c223:	89 f7                	mov    edi,esi
c001c225:	88 c1                	mov    cl,al
c001c227:	d3 ef                	shr    edi,cl
c001c229:	88 d9                	mov    cl,bl
c001c22b:	d3 e6                	shl    esi,cl
c001c22d:	89 ea                	mov    edx,ebp
c001c22f:	88 c1                	mov    cl,al
c001c231:	d3 ea                	shr    edx,cl
c001c233:	09 d6                	or     esi,edx
c001c235:	89 f0                	mov    eax,esi
c001c237:	89 fa                	mov    edx,edi
c001c239:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c23d:	89 d7                	mov    edi,edx
c001c23f:	89 c6                	mov    esi,eax
c001c241:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c245:	39 d7                	cmp    edi,edx
c001c247:	72 13                	jb     c001c25c <__udivdi3+0xec>
c001c249:	74 09                	je     c001c254 <__udivdi3+0xe4>
c001c24b:	89 f0                	mov    eax,esi
c001c24d:	31 db                	xor    ebx,ebx
c001c24f:	e9 43 ff ff ff       	jmp    c001c197 <__udivdi3+0x27>
c001c254:	88 d9                	mov    cl,bl
c001c256:	d3 e5                	shl    ebp,cl
c001c258:	39 c5                	cmp    ebp,eax
c001c25a:	73 ef                	jae    c001c24b <__udivdi3+0xdb>
c001c25c:	8d 46 ff             	lea    eax,[esi-0x1]
c001c25f:	31 db                	xor    ebx,ebx
c001c261:	e9 31 ff ff ff       	jmp    c001c197 <__udivdi3+0x27>
c001c266:	66 90                	xchg   ax,ax
c001c268:	31 c0                	xor    eax,eax
c001c26a:	e9 28 ff ff ff       	jmp    c001c197 <__udivdi3+0x27>
c001c26f:	90                   	nop

c001c270 <__umoddi3>:
c001c270:	55                   	push   ebp
c001c271:	57                   	push   edi
c001c272:	56                   	push   esi
c001c273:	53                   	push   ebx
c001c274:	83 ec 1c             	sub    esp,0x1c
c001c277:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c27b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c27f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c283:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c287:	89 da                	mov    edx,ebx
c001c289:	85 c0                	test   eax,eax
c001c28b:	75 37                	jne    c001c2c4 <__umoddi3+0x54>
c001c28d:	39 df                	cmp    edi,ebx
c001c28f:	76 13                	jbe    c001c2a4 <__umoddi3+0x34>
c001c291:	89 f0                	mov    eax,esi
c001c293:	f7 f7                	div    edi
c001c295:	89 d0                	mov    eax,edx
c001c297:	31 d2                	xor    edx,edx
c001c299:	83 c4 1c             	add    esp,0x1c
c001c29c:	5b                   	pop    ebx
c001c29d:	5e                   	pop    esi
c001c29e:	5f                   	pop    edi
c001c29f:	5d                   	pop    ebp
c001c2a0:	c3                   	ret    
c001c2a1:	8d 76 00             	lea    esi,[esi+0x0]
c001c2a4:	89 fd                	mov    ebp,edi
c001c2a6:	85 ff                	test   edi,edi
c001c2a8:	75 0b                	jne    c001c2b5 <__umoddi3+0x45>
c001c2aa:	b8 01 00 00 00       	mov    eax,0x1
c001c2af:	31 d2                	xor    edx,edx
c001c2b1:	f7 f7                	div    edi
c001c2b3:	89 c5                	mov    ebp,eax
c001c2b5:	89 d8                	mov    eax,ebx
c001c2b7:	31 d2                	xor    edx,edx
c001c2b9:	f7 f5                	div    ebp
c001c2bb:	89 f0                	mov    eax,esi
c001c2bd:	f7 f5                	div    ebp
c001c2bf:	89 d0                	mov    eax,edx
c001c2c1:	eb d4                	jmp    c001c297 <__umoddi3+0x27>
c001c2c3:	90                   	nop
c001c2c4:	89 f1                	mov    ecx,esi
c001c2c6:	39 d8                	cmp    eax,ebx
c001c2c8:	76 0a                	jbe    c001c2d4 <__umoddi3+0x64>
c001c2ca:	89 f0                	mov    eax,esi
c001c2cc:	83 c4 1c             	add    esp,0x1c
c001c2cf:	5b                   	pop    ebx
c001c2d0:	5e                   	pop    esi
c001c2d1:	5f                   	pop    edi
c001c2d2:	5d                   	pop    ebp
c001c2d3:	c3                   	ret    
c001c2d4:	0f bd e8             	bsr    ebp,eax
c001c2d7:	83 f5 1f             	xor    ebp,0x1f
c001c2da:	75 1c                	jne    c001c2f8 <__umoddi3+0x88>
c001c2dc:	39 d8                	cmp    eax,ebx
c001c2de:	72 04                	jb     c001c2e4 <__umoddi3+0x74>
c001c2e0:	39 f7                	cmp    edi,esi
c001c2e2:	77 08                	ja     c001c2ec <__umoddi3+0x7c>
c001c2e4:	89 da                	mov    edx,ebx
c001c2e6:	29 fe                	sub    esi,edi
c001c2e8:	19 c2                	sbb    edx,eax
c001c2ea:	89 f1                	mov    ecx,esi
c001c2ec:	89 c8                	mov    eax,ecx
c001c2ee:	83 c4 1c             	add    esp,0x1c
c001c2f1:	5b                   	pop    ebx
c001c2f2:	5e                   	pop    esi
c001c2f3:	5f                   	pop    edi
c001c2f4:	5d                   	pop    ebp
c001c2f5:	c3                   	ret    
c001c2f6:	66 90                	xchg   ax,ax
c001c2f8:	ba 20 00 00 00       	mov    edx,0x20
c001c2fd:	29 ea                	sub    edx,ebp
c001c2ff:	89 e9                	mov    ecx,ebp
c001c301:	d3 e0                	shl    eax,cl
c001c303:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c307:	89 f8                	mov    eax,edi
c001c309:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c30d:	88 d1                	mov    cl,dl
c001c30f:	d3 e8                	shr    eax,cl
c001c311:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c315:	09 c1                	or     ecx,eax
c001c317:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c31b:	89 e9                	mov    ecx,ebp
c001c31d:	d3 e7                	shl    edi,cl
c001c31f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c323:	89 d8                	mov    eax,ebx
c001c325:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c329:	88 d1                	mov    cl,dl
c001c32b:	d3 e8                	shr    eax,cl
c001c32d:	89 c7                	mov    edi,eax
c001c32f:	89 e9                	mov    ecx,ebp
c001c331:	d3 e3                	shl    ebx,cl
c001c333:	89 f0                	mov    eax,esi
c001c335:	88 d1                	mov    cl,dl
c001c337:	d3 e8                	shr    eax,cl
c001c339:	09 d8                	or     eax,ebx
c001c33b:	89 e9                	mov    ecx,ebp
c001c33d:	d3 e6                	shl    esi,cl
c001c33f:	89 f3                	mov    ebx,esi
c001c341:	89 fa                	mov    edx,edi
c001c343:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c347:	89 d1                	mov    ecx,edx
c001c349:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c34d:	89 c6                	mov    esi,eax
c001c34f:	89 d7                	mov    edi,edx
c001c351:	39 d1                	cmp    ecx,edx
c001c353:	72 27                	jb     c001c37c <__umoddi3+0x10c>
c001c355:	74 21                	je     c001c378 <__umoddi3+0x108>
c001c357:	89 ca                	mov    edx,ecx
c001c359:	29 f3                	sub    ebx,esi
c001c35b:	19 fa                	sbb    edx,edi
c001c35d:	89 d0                	mov    eax,edx
c001c35f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001c363:	d3 e0                	shl    eax,cl
c001c365:	89 e9                	mov    ecx,ebp
c001c367:	d3 eb                	shr    ebx,cl
c001c369:	09 d8                	or     eax,ebx
c001c36b:	d3 ea                	shr    edx,cl
c001c36d:	83 c4 1c             	add    esp,0x1c
c001c370:	5b                   	pop    ebx
c001c371:	5e                   	pop    esi
c001c372:	5f                   	pop    edi
c001c373:	5d                   	pop    ebp
c001c374:	c3                   	ret    
c001c375:	8d 76 00             	lea    esi,[esi+0x0]
c001c378:	39 c3                	cmp    ebx,eax
c001c37a:	73 db                	jae    c001c357 <__umoddi3+0xe7>
c001c37c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c380:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001c384:	89 d7                	mov    edi,edx
c001c386:	89 c6                	mov    esi,eax
c001c388:	eb cd                	jmp    c001c357 <__umoddi3+0xe7>

Disassembly of section .init:

c001c38a <_init>:
c001c38a:	55                   	push   ebp
c001c38b:	89 e5                	mov    ebp,esp
c001c38d:	e8 86 3d fe ff       	call   c0000118 <frame_dummy>
c001c392:	e8 e5 fa ff ff       	call   c001be7c <__do_global_ctors_aux>
c001c397:	5d                   	pop    ebp
c001c398:	c3                   	ret    

Disassembly of section .fini:

c001c399 <_fini>:
c001c399:	55                   	push   ebp
c001c39a:	89 e5                	mov    ebp,esp
c001c39c:	e8 07 3d fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001c3a1:	5d                   	pop    ebp
c001c3a2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001c3a4 <Computer::~Computer()>:
c001c3a4:	83 ec 0c             	sub    esp,0xc
c001c3a7:	ba a0 d6 01 c0       	mov    edx,0xc001d6a0
c001c3ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3b0:	89 10                	mov    DWORD PTR [eax],edx
c001c3b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3b6:	83 ec 0c             	sub    esp,0xc
c001c3b9:	50                   	push   eax
c001c3ba:	e8 2b fb fe ff       	call   c000beea <Device::~Device()>
c001c3bf:	83 c4 10             	add    esp,0x10
c001c3c2:	90                   	nop
c001c3c3:	83 c4 0c             	add    esp,0xc
c001c3c6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001c3c8 <Computer::~Computer()>:
c001c3c8:	83 ec 0c             	sub    esp,0xc
c001c3cb:	83 ec 0c             	sub    esp,0xc
c001c3ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3d2:	e8 cd ff ff ff       	call   c001c3a4 <Computer::~Computer()>
c001c3d7:	83 c4 10             	add    esp,0x10
c001c3da:	83 ec 08             	sub    esp,0x8
c001c3dd:	68 70 01 00 00       	push   0x170
c001c3e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3e6:	e8 c7 e6 fe ff       	call   c000aab2 <operator delete(void*, unsigned long)>
c001c3eb:	83 c4 10             	add    esp,0x10
c001c3ee:	83 c4 0c             	add    esp,0xc
c001c3f1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001c3f2 <idleCommon()>:
c001c3f2:	83 ec 0c             	sub    esp,0xc
c001c3f5:	fa                   	cli    
c001c3f6:	ff 05 c8 3d 02 c0    	inc    DWORD PTR ds:0xc0023dc8
c001c3fc:	e8 4b 76 ff ff       	call   c0013a4c <schedule()>
c001c401:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c001c406:	48                   	dec    eax
c001c407:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c001c40c:	75 01                	jne    c001c40f <idleCommon()+0x1d>
c001c40e:	fb                   	sti    
c001c40f:	83 c4 0c             	add    esp,0xc
c001c412:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001c414 <LinkedList<UnixFile>::~LinkedList()>:
c001c414:	90                   	nop
c001c415:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001c416 <LinkedList<UnixFile>::LinkedList()>:
c001c416:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c41a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c420:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c424:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c42b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c42f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c436:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c43a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c440:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c444:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c44b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c44f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c456:	90                   	nop
c001c457:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001c458 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001c458:	83 ec 0c             	sub    esp,0xc
c001c45b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c460:	75 10                	jne    c001c472 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001c462:	83 ec 0c             	sub    esp,0xc
c001c465:	68 f4 d8 01 c0       	push   0xc001d8f4
c001c46a:	e8 88 42 ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c001c46f:	83 c4 10             	add    esp,0x10
c001c472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c476:	8b 00                	mov    eax,DWORD PTR [eax]
c001c478:	85 c0                	test   eax,eax
c001c47a:	74 34                	je     c001c4b0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c47c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c480:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c483:	85 c0                	test   eax,eax
c001c485:	74 29                	je     c001c4b0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c487:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c48b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c48e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c492:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c495:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c499:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c49d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c4a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c4a7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c4ae:	eb 65                	jmp    c001c515 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c4b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4b4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4b6:	85 c0                	test   eax,eax
c001c4b8:	75 4b                	jne    c001c505 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c4ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c4c1:	85 c0                	test   eax,eax
c001c4c3:	75 40                	jne    c001c505 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c4c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c4cd:	89 10                	mov    DWORD PTR [eax],edx
c001c4cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c4d7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c4da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c4e1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c4e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4ec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c4ef:	85 c0                	test   eax,eax
c001c4f1:	74 22                	je     c001c515 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c4f3:	83 ec 0c             	sub    esp,0xc
c001c4f6:	68 16 d9 01 c0       	push   0xc001d916
c001c4fb:	e8 f7 41 ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c001c500:	83 c4 10             	add    esp,0x10
c001c503:	eb 10                	jmp    c001c515 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c505:	83 ec 0c             	sub    esp,0xc
c001c508:	68 20 d9 01 c0       	push   0xc001d920
c001c50d:	e8 e5 41 ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c001c512:	83 c4 10             	add    esp,0x10
c001c515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c519:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c51c:	8d 50 01             	lea    edx,[eax+0x1]
c001c51f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c523:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c526:	90                   	nop
c001c527:	83 c4 0c             	add    esp,0xc
c001c52a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001c52c <LinkedList<UnixFile>::getFirstElement()>:
c001c52c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c530:	8b 00                	mov    eax,DWORD PTR [eax]
c001c532:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001c534 <LinkedList<UnixFile>::removeFirst()>:
c001c534:	83 ec 0c             	sub    esp,0xc
c001c537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c53b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c53d:	85 c0                	test   eax,eax
c001c53f:	75 12                	jne    c001c553 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001c541:	83 ec 0c             	sub    esp,0xc
c001c544:	68 2c d9 01 c0       	push   0xc001d92c
c001c549:	e8 a9 41 ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c001c54e:	83 c4 10             	add    esp,0x10
c001c551:	eb 7e                	jmp    c001c5d1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001c553:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c557:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c55a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c55d:	85 c0                	test   eax,eax
c001c55f:	74 10                	je     c001c571 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001c561:	83 ec 0c             	sub    esp,0xc
c001c564:	68 77 d9 01 c0       	push   0xc001d977
c001c569:	e8 89 41 ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c001c56e:	83 c4 10             	add    esp,0x10
c001c571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c575:	8b 00                	mov    eax,DWORD PTR [eax]
c001c577:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c57a:	85 c0                	test   eax,eax
c001c57c:	75 33                	jne    c001c5b1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001c57e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c582:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c58c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c597:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c59a:	83 f8 01             	cmp    eax,0x1
c001c59d:	74 21                	je     c001c5c0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c59f:	83 ec 0c             	sub    esp,0xc
c001c5a2:	68 50 d9 01 c0       	push   0xc001d950
c001c5a7:	e8 4b 41 ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c001c5ac:	83 c4 10             	add    esp,0x10
c001c5af:	eb 0f                	jmp    c001c5c0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c5b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5b5:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5b7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c5ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5be:	89 10                	mov    DWORD PTR [eax],edx
c001c5c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5c7:	8d 50 ff             	lea    edx,[eax-0x1]
c001c5ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5ce:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c5d1:	83 c4 0c             	add    esp,0xc
c001c5d4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c5d6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c5d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c5da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5dd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c5de <DriverlessDevice::~DriverlessDevice()>:
c001c5de:	ba bc df 01 c0       	mov    edx,0xc001dfbc
c001c5e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5e7:	89 10                	mov    DWORD PTR [eax],edx
c001c5e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5ed:	50                   	push   eax
c001c5ee:	e8 f7 f8 fe ff       	call   c000beea <Device::~Device()>
c001c5f3:	83 c4 04             	add    esp,0x4
c001c5f6:	90                   	nop
c001c5f7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c5f8 <DriverlessDevice::~DriverlessDevice()>:
c001c5f8:	83 ec 0c             	sub    esp,0xc
c001c5fb:	83 ec 0c             	sub    esp,0xc
c001c5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c602:	e8 d7 ff ff ff       	call   c001c5de <DriverlessDevice::~DriverlessDevice()>
c001c607:	83 c4 10             	add    esp,0x10
c001c60a:	83 ec 08             	sub    esp,0x8
c001c60d:	68 58 01 00 00       	push   0x158
c001c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c616:	e8 97 e4 fe ff       	call   c000aab2 <operator delete(void*, unsigned long)>
c001c61b:	83 c4 10             	add    esp,0x10
c001c61e:	83 c4 0c             	add    esp,0xc
c001c621:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c622 <LinkedList<Device>::addElement(Device*)>:
c001c622:	83 ec 0c             	sub    esp,0xc
c001c625:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c62a:	75 10                	jne    c001c63c <LinkedList<Device>::addElement(Device*)+0x1a>
c001c62c:	83 ec 0c             	sub    esp,0xc
c001c62f:	68 f4 d8 01 c0       	push   0xc001d8f4
c001c634:	e8 be 40 ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c001c639:	83 c4 10             	add    esp,0x10
c001c63c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c640:	8b 00                	mov    eax,DWORD PTR [eax]
c001c642:	85 c0                	test   eax,eax
c001c644:	74 3a                	je     c001c680 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c646:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c64a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c64d:	85 c0                	test   eax,eax
c001c64f:	74 2f                	je     c001c680 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c651:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c655:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c658:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c65c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c666:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c66a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c66d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c671:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c674:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c67e:	eb 68                	jmp    c001c6e8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c684:	8b 00                	mov    eax,DWORD PTR [eax]
c001c686:	85 c0                	test   eax,eax
c001c688:	75 4e                	jne    c001c6d8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c68a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c68e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c691:	85 c0                	test   eax,eax
c001c693:	75 43                	jne    c001c6d8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c695:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c699:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c69d:	89 10                	mov    DWORD PTR [eax],edx
c001c69f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6a3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c6a7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c6aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6b1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c6bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6bf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c6c2:	85 c0                	test   eax,eax
c001c6c4:	74 22                	je     c001c6e8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c6c6:	83 ec 0c             	sub    esp,0xc
c001c6c9:	68 16 d9 01 c0       	push   0xc001d916
c001c6ce:	e8 24 40 ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c001c6d3:	83 c4 10             	add    esp,0x10
c001c6d6:	eb 10                	jmp    c001c6e8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c6d8:	83 ec 0c             	sub    esp,0xc
c001c6db:	68 20 d9 01 c0       	push   0xc001d920
c001c6e0:	e8 12 40 ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c001c6e5:	83 c4 10             	add    esp,0x10
c001c6e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6ec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c6ef:	8d 50 01             	lea    edx,[eax+0x1]
c001c6f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6f6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c6f9:	90                   	nop
c001c6fa:	83 c4 0c             	add    esp,0xc
c001c6fd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c6fe <LinkedList<Device>::LinkedList()>:
c001c6fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c702:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c708:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c70c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c713:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c717:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c71e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c722:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c728:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c72c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c733:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c737:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c73e:	90                   	nop
c001c73f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c740 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c740:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c744:	8b 00                	mov    eax,DWORD PTR [eax]
c001c746:	85 c0                	test   eax,eax
c001c748:	75 0e                	jne    c001c758 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c74a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c74e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c751:	85 c0                	test   eax,eax
c001c753:	75 03                	jne    c001c758 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c755:	b0 01                	mov    al,0x1
c001c757:	c3                   	ret    
c001c758:	b0 00                	mov    al,0x0
c001c75a:	90                   	nop
c001c75b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c75c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c75c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c760:	8b 00                	mov    eax,DWORD PTR [eax]
c001c762:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c764 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c764:	83 ec 0c             	sub    esp,0xc
c001c767:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c76b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c76d:	85 c0                	test   eax,eax
c001c76f:	75 17                	jne    c001c788 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c771:	83 ec 0c             	sub    esp,0xc
c001c774:	68 2c d9 01 c0       	push   0xc001d92c
c001c779:	e8 79 3f ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c001c77e:	83 c4 10             	add    esp,0x10
c001c781:	e9 92 00 00 00       	jmp    c001c818 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c786:	66 90                	xchg   ax,ax
c001c788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c78c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c78f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c792:	85 c0                	test   eax,eax
c001c794:	0f 95 c0             	setne  al
c001c797:	84 c0                	test   al,al
c001c799:	74 11                	je     c001c7ac <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c79b:	83 ec 0c             	sub    esp,0xc
c001c79e:	68 77 d9 01 c0       	push   0xc001d977
c001c7a3:	e8 4f 3f ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c001c7a8:	83 c4 10             	add    esp,0x10
c001c7ab:	90                   	nop
c001c7ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7b0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7b2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c7b5:	85 c0                	test   eax,eax
c001c7b7:	0f 94 c0             	sete   al
c001c7ba:	84 c0                	test   al,al
c001c7bc:	74 36                	je     c001c7f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001c7be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c7c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7cc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c7d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7d7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c7da:	83 f8 01             	cmp    eax,0x1
c001c7dd:	74 25                	je     c001c804 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c7df:	83 ec 0c             	sub    esp,0xc
c001c7e2:	68 50 d9 01 c0       	push   0xc001d950
c001c7e7:	e8 0b 3f ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c001c7ec:	83 c4 10             	add    esp,0x10
c001c7ef:	eb 13                	jmp    c001c804 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c7f1:	8d 76 00             	lea    esi,[esi+0x0]
c001c7f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7f8:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7fa:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c7fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c801:	89 10                	mov    DWORD PTR [eax],edx
c001c803:	90                   	nop
c001c804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c808:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c80b:	8d 50 ff             	lea    edx,[eax-0x1]
c001c80e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c812:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c815:	8d 76 00             	lea    esi,[esi+0x0]
c001c818:	83 c4 0c             	add    esp,0xc
c001c81b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001c81c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001c81c:	83 ec 0c             	sub    esp,0xc
c001c81f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c824:	75 12                	jne    c001c838 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001c826:	83 ec 0c             	sub    esp,0xc
c001c829:	68 f4 d8 01 c0       	push   0xc001d8f4
c001c82e:	e8 c4 3e ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c001c833:	83 c4 10             	add    esp,0x10
c001c836:	66 90                	xchg   ax,ax
c001c838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c83c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c83e:	85 c0                	test   eax,eax
c001c840:	74 36                	je     c001c878 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c846:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c849:	85 c0                	test   eax,eax
c001c84b:	74 2b                	je     c001c878 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c851:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c854:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c858:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001c85b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c85f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c863:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c86a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c86d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c874:	eb 6a                	jmp    c001c8e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c876:	66 90                	xchg   ax,ax
c001c878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c87c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c87e:	85 c0                	test   eax,eax
c001c880:	75 4e                	jne    c001c8d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c886:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c889:	85 c0                	test   eax,eax
c001c88b:	75 43                	jne    c001c8d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c88d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c891:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c895:	89 10                	mov    DWORD PTR [eax],edx
c001c897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c89b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c89f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c8a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8a9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c8b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c8b7:	85 c0                	test   eax,eax
c001c8b9:	74 25                	je     c001c8e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c8bb:	83 ec 0c             	sub    esp,0xc
c001c8be:	68 16 d9 01 c0       	push   0xc001d916
c001c8c3:	e8 2f 3e ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c001c8c8:	83 c4 10             	add    esp,0x10
c001c8cb:	eb 13                	jmp    c001c8e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c8cd:	8d 76 00             	lea    esi,[esi+0x0]
c001c8d0:	83 ec 0c             	sub    esp,0xc
c001c8d3:	68 20 d9 01 c0       	push   0xc001d920
c001c8d8:	e8 1a 3e ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c001c8dd:	83 c4 10             	add    esp,0x10
c001c8e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8e4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c8e7:	8d 50 01             	lea    edx,[eax+0x1]
c001c8ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8ee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c8f1:	90                   	nop
c001c8f2:	83 c4 0c             	add    esp,0xc
c001c8f5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001c8f8 <ACPI::~ACPI()>:
c001c8f8:	83 ec 0c             	sub    esp,0xc
c001c8fb:	ba 24 e5 01 c0       	mov    edx,0xc001e524
c001c900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c904:	89 10                	mov    DWORD PTR [eax],edx
c001c906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c90a:	83 ec 0c             	sub    esp,0xc
c001c90d:	50                   	push   eax
c001c90e:	e8 d7 f5 fe ff       	call   c000beea <Device::~Device()>
c001c913:	83 c4 10             	add    esp,0x10
c001c916:	90                   	nop
c001c917:	83 c4 0c             	add    esp,0xc
c001c91a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001c91c <ACPI::~ACPI()>:
c001c91c:	83 ec 0c             	sub    esp,0xc
c001c91f:	83 ec 0c             	sub    esp,0xc
c001c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c926:	e8 cd ff ff ff       	call   c001c8f8 <ACPI::~ACPI()>
c001c92b:	83 c4 10             	add    esp,0x10
c001c92e:	83 ec 08             	sub    esp,0x8
c001c931:	68 64 12 00 00       	push   0x1264
c001c936:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c93a:	e8 73 e1 fe ff       	call   c000aab2 <operator delete(void*, unsigned long)>
c001c93f:	83 c4 10             	add    esp,0x10
c001c942:	83 c4 0c             	add    esp,0xc
c001c945:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001c948 <LinkedList<Device>::~LinkedList()>:
c001c948:	90                   	nop
c001c949:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001c94c <LinkedList<Device>::isEmpty()>:
c001c94c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c950:	8b 00                	mov    eax,DWORD PTR [eax]
c001c952:	85 c0                	test   eax,eax
c001c954:	75 0e                	jne    c001c964 <LinkedList<Device>::isEmpty()+0x18>
c001c956:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c95a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c95d:	85 c0                	test   eax,eax
c001c95f:	75 03                	jne    c001c964 <LinkedList<Device>::isEmpty()+0x18>
c001c961:	b0 01                	mov    al,0x1
c001c963:	c3                   	ret    
c001c964:	b0 00                	mov    al,0x0
c001c966:	90                   	nop
c001c967:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001c968 <LinkedList<Device>::getFirstElement()>:
c001c968:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c96c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c96e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001c970 <LinkedList<Device>::removeFirst()>:
c001c970:	83 ec 0c             	sub    esp,0xc
c001c973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c977:	8b 00                	mov    eax,DWORD PTR [eax]
c001c979:	85 c0                	test   eax,eax
c001c97b:	75 17                	jne    c001c994 <LinkedList<Device>::removeFirst()+0x24>
c001c97d:	83 ec 0c             	sub    esp,0xc
c001c980:	68 2c d9 01 c0       	push   0xc001d92c
c001c985:	e8 6d 3d ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c001c98a:	83 c4 10             	add    esp,0x10
c001c98d:	e9 92 00 00 00       	jmp    c001ca24 <LinkedList<Device>::removeFirst()+0xb4>
c001c992:	66 90                	xchg   ax,ax
c001c994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c998:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c99b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c9a1:	85 c0                	test   eax,eax
c001c9a3:	74 13                	je     c001c9b8 <LinkedList<Device>::removeFirst()+0x48>
c001c9a5:	83 ec 0c             	sub    esp,0xc
c001c9a8:	68 77 d9 01 c0       	push   0xc001d977
c001c9ad:	e8 45 3d ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c001c9b2:	83 c4 10             	add    esp,0x10
c001c9b5:	8d 76 00             	lea    esi,[esi+0x0]
c001c9b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9bc:	8b 00                	mov    eax,DWORD PTR [eax]
c001c9be:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c9c4:	85 c0                	test   eax,eax
c001c9c6:	75 34                	jne    c001c9fc <LinkedList<Device>::removeFirst()+0x8c>
c001c9c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9cc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c9d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9d6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c9dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9e1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c9e4:	83 f8 01             	cmp    eax,0x1
c001c9e7:	74 27                	je     c001ca10 <LinkedList<Device>::removeFirst()+0xa0>
c001c9e9:	83 ec 0c             	sub    esp,0xc
c001c9ec:	68 50 d9 01 c0       	push   0xc001d950
c001c9f1:	e8 01 3d ff ff       	call   c00106f7 <Krnl::panic(char const*)>
c001c9f6:	83 c4 10             	add    esp,0x10
c001c9f9:	eb 15                	jmp    c001ca10 <LinkedList<Device>::removeFirst()+0xa0>
c001c9fb:	90                   	nop
c001c9fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca00:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca02:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001ca08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca0c:	89 10                	mov    DWORD PTR [eax],edx
c001ca0e:	66 90                	xchg   ax,ax
c001ca10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca14:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ca17:	8d 50 ff             	lea    edx,[eax-0x1]
c001ca1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca1e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ca21:	8d 76 00             	lea    esi,[esi+0x0]
c001ca24:	83 c4 0c             	add    esp,0xc
c001ca27:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001ca28 <CPU::~CPU()>:
c001ca28:	83 ec 0c             	sub    esp,0xc
c001ca2b:	ba c0 e6 01 c0       	mov    edx,0xc001e6c0
c001ca30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca34:	89 10                	mov    DWORD PTR [eax],edx
c001ca36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca3a:	83 ec 0c             	sub    esp,0xc
c001ca3d:	50                   	push   eax
c001ca3e:	e8 a7 f4 fe ff       	call   c000beea <Device::~Device()>
c001ca43:	83 c4 10             	add    esp,0x10
c001ca46:	90                   	nop
c001ca47:	83 c4 0c             	add    esp,0xc
c001ca4a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001ca4c <CPU::~CPU()>:
c001ca4c:	83 ec 0c             	sub    esp,0xc
c001ca4f:	83 ec 0c             	sub    esp,0xc
c001ca52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca56:	e8 cd ff ff ff       	call   c001ca28 <CPU::~CPU()>
c001ca5b:	83 c4 10             	add    esp,0x10
c001ca5e:	83 ec 08             	sub    esp,0x8
c001ca61:	68 94 11 00 00       	push   0x1194
c001ca66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca6a:	e8 43 e0 fe ff       	call   c000aab2 <operator delete(void*, unsigned long)>
c001ca6f:	83 c4 10             	add    esp,0x10
c001ca72:	83 c4 0c             	add    esp,0xc
c001ca75:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001ca78 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001ca78:	90                   	nop
c001ca79:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001ca7c <ThreadControlBlock::ThreadControlBlock()>:
c001ca7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca80:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ca87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca8b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ca92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca96:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001ca9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001caa1:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001caa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001caac:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001cab3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cab7:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001cabb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cabf:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001cac3:	90                   	nop
c001cac4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001cac8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001cac8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cacc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cad2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cad6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cadd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cae1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001caec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001caf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001caf6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cafd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb01:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cb08:	90                   	nop
c001cb09:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001cb0c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001cb0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb10:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001cb13:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001cb14 <PCI::~PCI()>:
c001cb14:	83 ec 0c             	sub    esp,0xc
c001cb17:	ba 94 f1 01 c0       	mov    edx,0xc001f194
c001cb1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb20:	89 10                	mov    DWORD PTR [eax],edx
c001cb22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb26:	83 ec 0c             	sub    esp,0xc
c001cb29:	50                   	push   eax
c001cb2a:	e8 45 ee fe ff       	call   c000b974 <Bus::~Bus()>
c001cb2f:	83 c4 10             	add    esp,0x10
c001cb32:	90                   	nop
c001cb33:	83 c4 0c             	add    esp,0xc
c001cb36:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001cb38 <PCI::~PCI()>:
c001cb38:	83 ec 0c             	sub    esp,0xc
c001cb3b:	83 ec 0c             	sub    esp,0xc
c001cb3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb42:	e8 cd ff ff ff       	call   c001cb14 <PCI::~PCI()>
c001cb47:	83 c4 10             	add    esp,0x10
c001cb4a:	83 ec 08             	sub    esp,0x8
c001cb4d:	68 5c 01 00 00       	push   0x15c
c001cb52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb56:	e8 57 df fe ff       	call   c000aab2 <operator delete(void*, unsigned long)>
c001cb5b:	83 c4 10             	add    esp,0x10
c001cb5e:	83 c4 0c             	add    esp,0xc
c001cb61:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001cb62 <IDE::~IDE()>:
c001cb62:	83 ec 0c             	sub    esp,0xc
c001cb65:	ba 48 f2 01 c0       	mov    edx,0xc001f248
c001cb6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb6e:	89 10                	mov    DWORD PTR [eax],edx
c001cb70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb74:	83 ec 0c             	sub    esp,0xc
c001cb77:	50                   	push   eax
c001cb78:	e8 e7 f7 fe ff       	call   c000c364 <HardDiskController::~HardDiskController()>
c001cb7d:	83 c4 10             	add    esp,0x10
c001cb80:	90                   	nop
c001cb81:	83 c4 0c             	add    esp,0xc
c001cb84:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001cb86 <IDE::~IDE()>:
c001cb86:	83 ec 0c             	sub    esp,0xc
c001cb89:	83 ec 0c             	sub    esp,0xc
c001cb8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb90:	e8 cd ff ff ff       	call   c001cb62 <IDE::~IDE()>
c001cb95:	83 c4 10             	add    esp,0x10
c001cb98:	83 ec 08             	sub    esp,0x8
c001cb9b:	68 70 02 00 00       	push   0x270
c001cba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cba4:	e8 09 df fe ff       	call   c000aab2 <operator delete(void*, unsigned long)>
c001cba9:	83 c4 10             	add    esp,0x10
c001cbac:	83 c4 0c             	add    esp,0xc
c001cbaf:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001cbb0 <SATABus::~SATABus()>:
c001cbb0:	83 ec 0c             	sub    esp,0xc
c001cbb3:	ba 98 f2 01 c0       	mov    edx,0xc001f298
c001cbb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbbc:	89 10                	mov    DWORD PTR [eax],edx
c001cbbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbc2:	83 ec 0c             	sub    esp,0xc
c001cbc5:	50                   	push   eax
c001cbc6:	e8 99 f7 fe ff       	call   c000c364 <HardDiskController::~HardDiskController()>
c001cbcb:	83 c4 10             	add    esp,0x10
c001cbce:	90                   	nop
c001cbcf:	83 c4 0c             	add    esp,0xc
c001cbd2:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001cbd4 <SATABus::~SATABus()>:
c001cbd4:	83 ec 0c             	sub    esp,0xc
c001cbd7:	83 ec 0c             	sub    esp,0xc
c001cbda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbde:	e8 cd ff ff ff       	call   c001cbb0 <SATABus::~SATABus()>
c001cbe3:	83 c4 10             	add    esp,0x10
c001cbe6:	83 ec 08             	sub    esp,0x8
c001cbe9:	68 64 01 00 00       	push   0x164
c001cbee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbf2:	e8 bb de fe ff       	call   c000aab2 <operator delete(void*, unsigned long)>
c001cbf7:	83 c4 10             	add    esp,0x10
c001cbfa:	83 c4 0c             	add    esp,0xc
c001cbfd:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001cbfe <ATA::~ATA()>:
c001cbfe:	83 ec 0c             	sub    esp,0xc
c001cc01:	ba d8 f2 01 c0       	mov    edx,0xc001f2d8
c001cc06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc0a:	89 10                	mov    DWORD PTR [eax],edx
c001cc0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc10:	83 ec 0c             	sub    esp,0xc
c001cc13:	50                   	push   eax
c001cc14:	e8 2d f8 fe ff       	call   c000c446 <PhysicalDisk::~PhysicalDisk()>
c001cc19:	83 c4 10             	add    esp,0x10
c001cc1c:	90                   	nop
c001cc1d:	83 c4 0c             	add    esp,0xc
c001cc20:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001cc22 <ATA::~ATA()>:
c001cc22:	83 ec 0c             	sub    esp,0xc
c001cc25:	83 ec 0c             	sub    esp,0xc
c001cc28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc2c:	e8 cd ff ff ff       	call   c001cbfe <ATA::~ATA()>
c001cc31:	83 c4 10             	add    esp,0x10
c001cc34:	83 ec 08             	sub    esp,0x8
c001cc37:	68 7c 01 00 00       	push   0x17c
c001cc3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc40:	e8 6d de fe ff       	call   c000aab2 <operator delete(void*, unsigned long)>
c001cc45:	83 c4 10             	add    esp,0x10
c001cc48:	83 c4 0c             	add    esp,0xc
c001cc4b:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001cc4c <ATAPI::~ATAPI()>:
c001cc4c:	83 ec 0c             	sub    esp,0xc
c001cc4f:	ba 20 f3 01 c0       	mov    edx,0xc001f320
c001cc54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc58:	89 10                	mov    DWORD PTR [eax],edx
c001cc5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc5e:	83 ec 0c             	sub    esp,0xc
c001cc61:	50                   	push   eax
c001cc62:	e8 df f7 fe ff       	call   c000c446 <PhysicalDisk::~PhysicalDisk()>
c001cc67:	83 c4 10             	add    esp,0x10
c001cc6a:	90                   	nop
c001cc6b:	83 c4 0c             	add    esp,0xc
c001cc6e:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001cc70 <ATAPI::~ATAPI()>:
c001cc70:	83 ec 0c             	sub    esp,0xc
c001cc73:	83 ec 0c             	sub    esp,0xc
c001cc76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc7a:	e8 cd ff ff ff       	call   c001cc4c <ATAPI::~ATAPI()>
c001cc7f:	83 c4 10             	add    esp,0x10
c001cc82:	83 ec 08             	sub    esp,0x8
c001cc85:	68 84 01 00 00       	push   0x184
c001cc8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc8e:	e8 1f de fe ff       	call   c000aab2 <operator delete(void*, unsigned long)>
c001cc93:	83 c4 10             	add    esp,0x10
c001cc96:	83 c4 0c             	add    esp,0xc
c001cc99:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001cc9a <SATA::~SATA()>:
c001cc9a:	83 ec 0c             	sub    esp,0xc
c001cc9d:	ba d4 f3 01 c0       	mov    edx,0xc001f3d4
c001cca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cca6:	89 10                	mov    DWORD PTR [eax],edx
c001cca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccac:	83 ec 0c             	sub    esp,0xc
c001ccaf:	50                   	push   eax
c001ccb0:	e8 91 f7 fe ff       	call   c000c446 <PhysicalDisk::~PhysicalDisk()>
c001ccb5:	83 c4 10             	add    esp,0x10
c001ccb8:	90                   	nop
c001ccb9:	83 c4 0c             	add    esp,0xc
c001ccbc:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001ccbe <SATA::~SATA()>:
c001ccbe:	83 ec 0c             	sub    esp,0xc
c001ccc1:	83 ec 0c             	sub    esp,0xc
c001ccc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccc8:	e8 cd ff ff ff       	call   c001cc9a <SATA::~SATA()>
c001cccd:	83 c4 10             	add    esp,0x10
c001ccd0:	83 ec 08             	sub    esp,0x8
c001ccd3:	68 7c 01 00 00       	push   0x17c
c001ccd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccdc:	e8 d1 dd fe ff       	call   c000aab2 <operator delete(void*, unsigned long)>
c001cce1:	83 c4 10             	add    esp,0x10
c001cce4:	83 c4 0c             	add    esp,0xc
c001cce7:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001cce8 <SATAPI::~SATAPI()>:
c001cce8:	83 ec 0c             	sub    esp,0xc
c001cceb:	ba 64 f5 01 c0       	mov    edx,0xc001f564
c001ccf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccf4:	89 10                	mov    DWORD PTR [eax],edx
c001ccf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccfa:	83 ec 0c             	sub    esp,0xc
c001ccfd:	50                   	push   eax
c001ccfe:	e8 43 f7 fe ff       	call   c000c446 <PhysicalDisk::~PhysicalDisk()>
c001cd03:	83 c4 10             	add    esp,0x10
c001cd06:	90                   	nop
c001cd07:	83 c4 0c             	add    esp,0xc
c001cd0a:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001cd0c <SATAPI::~SATAPI()>:
c001cd0c:	83 ec 0c             	sub    esp,0xc
c001cd0f:	83 ec 0c             	sub    esp,0xc
c001cd12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd16:	e8 cd ff ff ff       	call   c001cce8 <SATAPI::~SATAPI()>
c001cd1b:	83 c4 10             	add    esp,0x10
c001cd1e:	83 ec 08             	sub    esp,0x8
c001cd21:	68 84 01 00 00       	push   0x184
c001cd26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd2a:	e8 83 dd fe ff       	call   c000aab2 <operator delete(void*, unsigned long)>
c001cd2f:	83 c4 10             	add    esp,0x10
c001cd32:	83 c4 0c             	add    esp,0xc
c001cd35:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001cd36 <IOAPIC::~IOAPIC()>:
c001cd36:	83 ec 0c             	sub    esp,0xc
c001cd39:	ba a4 f5 01 c0       	mov    edx,0xc001f5a4
c001cd3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd42:	89 10                	mov    DWORD PTR [eax],edx
c001cd44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd48:	83 ec 0c             	sub    esp,0xc
c001cd4b:	50                   	push   eax
c001cd4c:	e8 99 f1 fe ff       	call   c000beea <Device::~Device()>
c001cd51:	83 c4 10             	add    esp,0x10
c001cd54:	90                   	nop
c001cd55:	83 c4 0c             	add    esp,0xc
c001cd58:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001cd5a <IOAPIC::~IOAPIC()>:
c001cd5a:	83 ec 0c             	sub    esp,0xc
c001cd5d:	83 ec 0c             	sub    esp,0xc
c001cd60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd64:	e8 cd ff ff ff       	call   c001cd36 <IOAPIC::~IOAPIC()>
c001cd69:	83 c4 10             	add    esp,0x10
c001cd6c:	83 ec 08             	sub    esp,0x8
c001cd6f:	68 68 01 00 00       	push   0x168
c001cd74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd78:	e8 35 dd fe ff       	call   c000aab2 <operator delete(void*, unsigned long)>
c001cd7d:	83 c4 10             	add    esp,0x10
c001cd80:	83 c4 0c             	add    esp,0xc
c001cd83:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001cd84 <APICTimer::~APICTimer()>:
c001cd84:	83 ec 0c             	sub    esp,0xc
c001cd87:	ba ec f5 01 c0       	mov    edx,0xc001f5ec
c001cd8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd90:	89 10                	mov    DWORD PTR [eax],edx
c001cd92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd96:	83 ec 0c             	sub    esp,0xc
c001cd99:	50                   	push   eax
c001cd9a:	e8 49 0a ff ff       	call   c000d7e8 <Timer::~Timer()>
c001cd9f:	83 c4 10             	add    esp,0x10
c001cda2:	90                   	nop
c001cda3:	83 c4 0c             	add    esp,0xc
c001cda6:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001cda8 <APICTimer::~APICTimer()>:
c001cda8:	83 ec 0c             	sub    esp,0xc
c001cdab:	83 ec 0c             	sub    esp,0xc
c001cdae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdb2:	e8 cd ff ff ff       	call   c001cd84 <APICTimer::~APICTimer()>
c001cdb7:	83 c4 10             	add    esp,0x10
c001cdba:	83 ec 08             	sub    esp,0x8
c001cdbd:	68 60 01 00 00       	push   0x160
c001cdc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdc6:	e8 e7 dc fe ff       	call   c000aab2 <operator delete(void*, unsigned long)>
c001cdcb:	83 c4 10             	add    esp,0x10
c001cdce:	83 c4 0c             	add    esp,0xc
c001cdd1:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001cdd4 <PIT::~PIT()>:
c001cdd4:	83 ec 0c             	sub    esp,0xc
c001cdd7:	ba 3c f6 01 c0       	mov    edx,0xc001f63c
c001cddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cde0:	89 10                	mov    DWORD PTR [eax],edx
c001cde2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cde6:	83 ec 0c             	sub    esp,0xc
c001cde9:	50                   	push   eax
c001cdea:	e8 f9 09 ff ff       	call   c000d7e8 <Timer::~Timer()>
c001cdef:	83 c4 10             	add    esp,0x10
c001cdf2:	90                   	nop
c001cdf3:	83 c4 0c             	add    esp,0xc
c001cdf6:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001cdf8 <PIT::~PIT()>:
c001cdf8:	83 ec 0c             	sub    esp,0xc
c001cdfb:	83 ec 0c             	sub    esp,0xc
c001cdfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce02:	e8 cd ff ff ff       	call   c001cdd4 <PIT::~PIT()>
c001ce07:	83 c4 10             	add    esp,0x10
c001ce0a:	83 ec 08             	sub    esp,0x8
c001ce0d:	68 5c 01 00 00       	push   0x15c
c001ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce16:	e8 97 dc fe ff       	call   c000aab2 <operator delete(void*, unsigned long)>
c001ce1b:	83 c4 10             	add    esp,0x10
c001ce1e:	83 c4 0c             	add    esp,0xc
c001ce21:	c3                   	ret    
